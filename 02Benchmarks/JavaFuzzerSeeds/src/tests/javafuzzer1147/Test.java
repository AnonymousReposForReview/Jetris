package tests.javafuzzer1147;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:49:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-19570L;
    public int iFld=115;
    public static float fFld=6.482F;
    public static byte byFld=-61;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=0, i3=-184, i4=-22028, i5=-157;
        byte by=77;
        double dArr[]=new double[N], dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 89.53764);
        FuzzerUtils.init(dArr1, 1.54129);
        FuzzerUtils.init(lArr, 54L);

        i2 = 1;
        while (++i2 < 386) {
            i3 = 1;
            do {
                for (i4 = 1; i4 < 4; ++i4) {
                    float f=0.890F;
                    i5 -= i2;
                    Test.instanceCount = i2;
                    i5 -= -14;
                    switch (((i2 >>> 1) % 9) + 43) {
                    case 43:
                        i5 = (int)f;
                        i5 += i2;
                        i5 = i5;
                    case 44:
                        f = by;
                        Test.iArrFld[i4] = (int)2441514214703022075L;
                        break;
                    case 45:
                        dArr = dArr1;
                        i5 = (int)62.234F;
                    case 46:
                        Test.instanceCount = i2;
                        break;
                    case 47:
                        lArr[i2 + 1] -= (long)f;
                        break;
                    case 48:
                        Test.instanceCount += (i4 * i4);
                        break;
                    case 49:
                    case 50:
                        i5 += (((i4 * i3) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 51:
                        i5 -= i4;
                        break;
                    }
                }
            } while ((i3 += 3) < 4);
        }
        long meth_res = i2 + i3 + i4 + i5 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1, int i1) {

        int i6=-20, i7=1, i8=-229, i9=-37111, i10=32;
        short s=-16786;
        long lArr1[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr1, -4L);
        FuzzerUtils.init(fArr, -1.363F);

        Test.instanceCount *= iMeth();
        i6 = 1;
        do {
            for (i7 = 1; i7 < 5; i7++) {
                l1 += -104;
                Test.iArrFld = Test.iArrFld;
                switch (((i7 % 3) * 5) + 109) {
                case 111:
                    for (i9 = 1; i9 < 2; ++i9) {
                        lArr1[i7 - 1] >>>= 13773;
                        i10 -= -74;
                        fArr[i9 + 1][i9 - 1] -= i9;
                        switch (((i9 % 7) * 5) + 64) {
                        case 67:
                            Test.instanceCount = i1;
                        case 79:
                            i8 >>>= i8;
                            Test.iArrFld[i7] *= i6;
                            Test.iArrFld = Test.iArrFld;
                        case 73:
                            l1 = -5;
                        case 94:
                            s += (short)l1;
                            break;
                        case 98:
                            i1 = i6;
                        case 84:
                            i10 *= i7;
                            break;
                        case 68:
                            i1 = i8;
                            break;
                        default:
                            lArr1 = lArr1;
                        }
                    }
                    break;
                case 117:
                    Test.fFld = Test.fFld;
                    break;
                case 115:
                    i10 += (int)(64L + (i7 * i7));
                    break;
                }
            }
        } while (++i6 < 361);
        vMeth_check_sum += l1 + i1 + i6 + i7 + i8 + i9 + i10 + s + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i, long l) {

        int i11=1435, i12=3, i13=-57;
        byte by1=65;
        boolean b=false, bArr[]=new boolean[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -221L);
        FuzzerUtils.init(bArr, false);

        vMeth(l, i);
        i = (int)l;
        for (i11 = 3; i11 < 244; i11++) {
            Test.iArrFld[i11] >>= by1;
            i13 = 1;
            do {
                i -= i13;
                l += i13;
                i12 >>= i12;
                i -= i;
                lArr2[i13 + 1] >>= Test.instanceCount;
                lArr2[i13] += 2450026399L;
            } while (++i13 < 7);
            lArr2[i11] = i12;
            b = b;
            bArr[i11 - 1] = b;
            i12 = i13;
        }
        long meth_res = i + l + i11 + i12 + by1 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-6403, i15=56731, i16=108, i17=-775, i18=-150, i19=12, i20=18, i21=12, i22=10, iArr[][]=new int[N][N];
        double d=-2.116952, d1=82.33965;
        short s1=-30944;
        boolean b1=false, bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(bArr1, true);

        iArr[(iFld >>> 1) % N][(iFld >>> 1) % N] <<= (int)lMeth(81, Test.instanceCount);
        iFld = iFld;
        i14 = 1;
        do {
            d = Test.byFld;
            Test.iArrFld[i14 - 1] += (int)Test.instanceCount;
        } while ((i14 += 2) < 256);
        iFld -= (int)9155950045664436406L;
        for (i15 = 11; i15 < 348; i15++) {
            for (i17 = 2; i17 < 75; ++i17) {
                iFld = (int)Test.instanceCount;
                i16 = i14;
                i18 = i15;
                for (i19 = 2; i19 > 1; i19--) {
                    bArr1 = bArr1;
                    i16 -= (int)Test.fFld;
                    iArr[i19][i15 + 1] = (int)Test.fFld;
                }
                i16 |= s1;
                Test.byFld += (byte)20648;
                for (i21 = 1; i21 < 2; ++i21) {
                    iArr[i15][i15 + 1] ^= i16;
                    iArr[i21 + 1][i21 + 1] += i22;
                    i16 = 90;
                    d1 = Test.fFld;
                    switch ((i15 % 2) + 8) {
                    case 8:
                        try {
                            i22 = (i14 % Test.iArrFld[i15]);
                            i20 = (Test.iArrFld[i15 + 1] % iArr[i21 + 1][i15]);
                            Test.iArrFld[i15 + 1] = (i17 / i20);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 9:
                        Test.fFld -= i18;
                        d += i18;
                        break;
                    }
                }
                i18 += i22;
                i20 += (int)d;
            }
            b1 = b1;
            i20 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
