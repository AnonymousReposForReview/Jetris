package tests.javafuzzer2642;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:57:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1437379720L;
    public double dFld=0.58774;
    public int iFld=-8;
    public boolean bArrFld[][]=new boolean[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.60041);

        dArr = dArr;
        long meth_res = Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(byte by, long l) {

        int i3=252, i4=27706, i5=11, i6=98, i7=52, i8=-11, i9=64366;
        double d=-1.93960, d1=0.56033;

        for (i3 = 5; i3 < 131; i3++) {
            i4 &= (int)lMeth();
            l -= i4;
            for (i5 = 1; i5 < 12; ++i5) {
                i7 = 1;
                while (++i7 < 2) {
                    if (false) continue;
                    i4 -= i4;
                    i6 += (i7 ^ l);
                    d = l;
                }
                i4 *= i8;
                i8 = i3;
            }
            i8 = (int)d;
            for (d1 = 1; d1 < 12; d1++) {
                i4 *= i3;
            }
            i4 = -4;
        }
        vMeth1_check_sum += by + l + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 +
            Double.doubleToLongBits(d1) + i9;
    }

    public static void vMeth() {

        int i2=201, i10=174, i11=46317, i12=7, i13=154, i14=-86, i15=135, iArr[]=new int[N];
        float f2=-2.135F;
        byte by1=-58, byArr[]=new byte[N];
        short s=-6668;

        FuzzerUtils.init(iArr, 3343);
        FuzzerUtils.init(byArr, (byte)82);

        i2 += (int)f2;
        vMeth1(by1, Test.instanceCount);
        iArr[(i2 >>> 1) % N] = i2;
        iArr[(i2 >>> 1) % N] = (int)Test.instanceCount;
        for (i10 = 11; i10 < 188; i10 += 2) {
            iArr[i10 - 1] = 3;
            for (i12 = 1; i12 < 18; i12++) {
                Test.instanceCount = Test.instanceCount;
                i11 += i12;
                i2 = i13;
                byArr[i12] = (byte)s;
                for (i14 = i10; i14 < 2; i14++) {
                    i15 -= (int)Test.instanceCount;
                    i15 -= (int)Test.instanceCount;
                    i13 += (((i14 * i13) + Test.instanceCount) - f2);
                }
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f2) + by1 + i10 + i11 + i12 + i13 + s + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.767F, f1=-1.651F;
        int i=22646, i1=58, i16=9, i17=0, i18=-33197, i19=193, i20=-55279, i21=-8, iArr1[]=new int[N];
        boolean b=false;
        short s1=29386, sArr[]=new short[N];
        long lArr[]=new long[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(sArr, (short)19008);
        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(byArr1, (byte)-42);
        FuzzerUtils.init(iArr1, 49098);

        f = Test.instanceCount;
        i = 1;
        do {
            for (f1 = 3; f1 < 199; ++f1) {
                bArrFld[(int)(f1 + 1)][(int)(f1 + 1)] = ((sArr[(int)(f1 - 1)] <= (Test.instanceCount -
                    Test.instanceCount)) & (bArrFld[(int)(f1)][i + 1] != (dFld > Test.instanceCount)));
                switch ((int)((f1 % 7) + 85)) {
                case 85:
                    i1 += (-13 + (f1 * f1));
                    break;
                case 86:
                    vMeth();
                    lArr[i + 1] = i1;
                    break;
                case 87:
                    for (i16 = 1; i16 < 2; ++i16) {
                        dFld += Test.instanceCount;
                        i17 = i1;
                        if (b) continue;
                        dFld = i17;
                        Test.instanceCount = (long)f;
                        i17 += (i16 * i16);
                        i1 += i;
                    }
                    i1 <<= i1;
                    f -= i17;
                    break;
                case 88:
                    for (i18 = i; i18 < 2; ++i18) {
                        byArr1[i18 + 1] = (byte)14.33657;
                        f *= i;
                        Test.instanceCount &= s1;
                        Test.instanceCount += i16;
                        Test.instanceCount += (((i18 * iFld) + iFld) - s1);
                    }
                    for (i20 = 1; 2 > i20; i20++) {
                        s1 = (short)i21;
                        switch ((i % 2) + 35) {
                        case 35:
                            iFld *= (int)Test.instanceCount;
                            i21 -= i19;
                            Test.instanceCount += i20;
                            break;
                        case 36:
                            iArr1[(int)(f1)] -= i19;
                            break;
                        default:
                            f /= (i19 | 1);
                        }
                    }
                    break;
                case 89:
                    i21 -= i18;
                    break;
                case 90:
                    i21 += (int)(f1 * f1);
                case 91:
                    iArr1[(int)(f1)] >>= (int)Test.instanceCount;
                }
            }
        } while (++i < 126);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
