package tests.javafuzzer1871;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:01:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static double dFld=111.62433;
    public static byte byFld=28;
    public static long lFld=-3601700727L;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.122F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i5=-16549, i6=-12, iArr[][]=new int[N][N];
        float f=111.77F, f1=0.238F;
        double d=-1.24408;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 27126);
        FuzzerUtils.init(lArr, 74L);

        i5 = 313;
        while (--i5 > 0) {
            Test.instanceCount += 24648;
            f += f;
            Test.dFld -= -104;
            d = 1;
            while (++d < 5) {
                for (f1 = 1; 1 > f1; ++f1) {
                    iArr[(int)(f1 - 1)][i5 + 1] = (int)f;
                    i6 = (int)Test.instanceCount;
                    lArr[i5 - 1] = i5;
                    Test.instanceCount *= i5;
                    switch ((int)(((d % 2) * 5) + 125)) {
                    case 129:
                        Test.dFld = 203;
                        break;
                    case 126:
                    }
                    Test.fArrFld[(int)(f1)] = i6;
                    if (i5 != 0) {
                        vMeth2_check_sum += i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
                            Float.floatToIntBits(f1) + i6 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    if (i6 != 0) {
                        vMeth2_check_sum += i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
                            Float.floatToIntBits(f1) + i6 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                }
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i6 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(byte by) {

        int i1=8, i2=57196, i3=1, i4=-125;
        long l=3420588647L;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i1 = 2; 245 > i1; ++i1) {
            i2 = (int)l;
            for (i3 = i1; i3 < 7; i3++) {
                float f2=-1.537F;
                vMeth2();
                switch ((((i2 >>> 1) % 2) * 5) + 37) {
                case 41:
                    i4 += (i3 * Test.instanceCount);
                    f2 += i3;
                    i2 += (int)l;
                    l += (((i3 * i2) + i1) - i4);
                    break;
                case 43:
                    i4 = i4;
                    Test.instanceCount += (((i3 * i1) + f2) - l);
                    bArr[i3 - 1] = b;
                    break;
                default:
                    if (b) break;
                    if (i3 != 0) {
                        vMeth1_check_sum += by + i1 + i2 + l + i3 + i4 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i2 += i4;
                }
            }
        }
        vMeth1_check_sum += by + i1 + i2 + l + i3 + i4 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i) {

        boolean b1=true;
        float f3=2.549F;
        int i7=-230, i8=18464, i9=-3, i10=-13;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 14791L);

        vMeth1((byte)(-89));
        b1 = b1;
        lArr1[(i >>> 1) % N] -= (long)f3;
        for (i7 = 10; 364 > i7; ++i7) {
            i9 = 1;
            while (++i9 < 5) {
                lArr1[i9 - 1] = i7;
                i += (((i9 * f3) + i) - Test.instanceCount);
                i -= -5;
                i8 += (i9 * Test.instanceCount);
                i10 = 1;
                do {
                    i8 = (int)Test.instanceCount;
                    i8 *= (int)f3;
                } while (++i10 < 1);
                Test.instanceCount = i8;
                Test.instanceCount -= 65051L;
                Test.byFld *= (byte)f3;
            }
        }
        vMeth_check_sum += i + (b1 ? 1 : 0) + Float.floatToIntBits(f3) + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i11=63684, i12=-1453, i13=45, i14=13, i15=-215, i16=43165, i17=2488, i18=10, iArr1[]=new int[N];
        boolean b2=true;
        long l1=191L, lArr2[]=new long[N];
        float f5=1.3F;

        FuzzerUtils.init(iArr1, -18528);
        FuzzerUtils.init(lArr2, 53745L);

        vMeth(i11);
        i11 &= i11;
        iArr1[(i11 >>> 1) % N] = i11;
        i11 = i11;
        Test.byFld = (byte)i11;
        Test.instanceCount = i11;
        i12 = 1;
        do {
            i11 = (int)Test.instanceCount;
            i11 += i12;
            i11 |= i12;
            try {
                i11 = (i12 / i11);
                i11 = (iArr1[i12 - 1] / i12);
                iArr1[i12 + 1] = (i11 / i12);
            } catch (ArithmeticException a_e) {}
            for (i13 = i12; i13 < 84; i13++) {
                short s=6025;
                i14 = (int)-2.10728;
                i14 *= i13;
                switch (((i14 >>> 1) % 7) + 22) {
                case 22:
                    for (i15 = 1; i15 < 1; i15++) {
                        i14 <<= i11;
                    }
                    s <<= (short)Test.instanceCount;
                    break;
                case 23:
                    switch (((i16 >>> 1) % 1) + 78) {
                    case 78:
                        for (i17 = 1; i17 < 1; i17 += 3) {
                            float f4=-2.646F;
                            i14 += i17;
                            Test.lFld += (((i17 * i16) + s) - i15);
                            Test.dFld = s;
                            lArr2[i17] -= Test.lFld;
                            if (b2) {
                                f4 -= 0.970F;
                            } else if (b2) {
                                Test.instanceCount += (((i17 * i12) + i14) - i12);
                                i14 = (int)f4;
                                Test.dFld = 10504;
                                i14 += (int)f4;
                            }
                        }
                        break;
                    }
                    break;
                case 24:
                    i16 *= (int)l1;
                    break;
                case 25:
                    f5 -= Test.byFld;
                    break;
                case 26:
                    f5 += (i13 - l1);
                    break;
                case 27:
                    i11 += (int)f5;
                    break;
                case 28:
                    Test.byFld *= (byte)i16;
                }
            }
        } while (++i12 < 299);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
