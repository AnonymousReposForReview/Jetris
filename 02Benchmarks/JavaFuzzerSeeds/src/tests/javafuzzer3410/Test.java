package tests.javafuzzer3410;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:37:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=73L;
    public static volatile short sFld=-20997;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -39617);
        FuzzerUtils.init(Test.fArrFld, 40.734F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b) {

        byte by1=118;
        int i2=-146, i3=3, i4=0, i5=12, i6=192, i7=6, i8=-53241;
        short s1=9313;
        float f1=20.193F;

        by1 = (byte)i2;
        for (i3 = 16; i3 < 336; i3++) {
            i4 += i2;
            for (i5 = 1; i5 < 5; ++i5) {
                by1 += (byte)i3;
                i4 += (((i5 * s1) + i4) - i6);
                Test.fArrFld[i3 - 1][i3 - 1] = i3;
                f1 -= Test.instanceCount;
                try {
                    i4 = (Test.iArrFld[i3 - 1] / i3);
                    Test.iArrFld[i5 + 1] = (10273 % i5);
                    Test.iArrFld[i3] = (55233 / Test.iArrFld[i3]);
                } catch (ArithmeticException a_e) {}
                for (i7 = 1; i7 < 2; i7++) {
                    i2 *= (int)Test.instanceCount;
                    Test.instanceCount = s1;
                    i8 <<= i5;
                    i4 = i6;
                    Test.iArrFld[i5] = (int)-40.188F;
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + by1 + i2 + i3 + i4 + i5 + i6 + s1 + Float.floatToIntBits(f1) + i7 + i8;
    }

    public static int iMeth(long l, int i1) {

        byte by=-77;
        short s=-29845;
        boolean b1=false;
        int i9=-6, i10=-17013, i11=-2, i12=11, i13=12;
        double d=58.34862, d1=-2.113615;
        float f2=-30.394F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -92L);

        by = (byte)(--Test.iArrFld[(i1 >>> 1) % N]);
        s = (short)(((i1 + -2.38519) - Math.abs(i1)) - i1);
        vMeth1(b1);
        Test.iArrFld[(i1 >>> 1) % N] = -3;
        for (i9 = 7; 137 > i9; i9++) {
            d *= i1;
            lArr[i9 - 1][i9] = i11;
            if (true) {
                i12 = 1;
                do {
                    i11 >>= -10;
                    i11 %= (int)(i1 | 1);
                    i10 *= i10;
                    for (d1 = 1; d1 < 1; ++d1) {
                        i13 += (int)(((d1 * f2) + i13) - i9);
                        i1 += (int)(((d1 * l) + i12) - i9);
                    }
                } while (++i12 < 12);
            } else if (false) {
                by = (byte)l;
            }
        }
        long meth_res = l + i1 + by + s + (b1 ? 1 : 0) + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 +
            Double.doubleToLongBits(d1) + i13 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, float f) {

        int iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -32);
        FuzzerUtils.init(lArr1, -8L);

        iArr[(i >>> 1) % N] -= (((i++) + iMeth(Test.instanceCount, i)) + i);
        i = Test.sFld;
        lArr1[(-50382 >>> 1) % N] = -1;
        vMeth_check_sum += i + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i14=9, i16=186, i17=9, i18=3, i19=12, i20=56550, i21=20677, i22=7, i23=110;
        float f3=-3.595F;
        byte by2=99;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -236L);

        vMeth(i14, -1.535F);
        f3 = i14;
        i14 += i14;
        i14 <<= by2;
        for (int i15 : Test.iArrFld) {
            i16 = 1;
            while (++i16 < 63) {
                for (i17 = i16; i17 < 1; ++i17) {
                    i15 = i16;
                    i15 -= i15;
                    i15 = i14;
                    i14 = i17;
                    Test.instanceCount += (i17 + i18);
                    i15 -= i17;
                }
                i18 += (((i16 * i14) + i15) - i14);
                Test.iArrFld[i16] >>>= (int)Test.instanceCount;
            }
        }
        i18 = (int)326182162L;
        Test.instanceCount = Test.instanceCount;
        lArr2[(i17 >>> 1) % N] -= by2;
        i18 -= (int)Test.instanceCount;
        f3 *= i18;
        i18 = i14;
        i19 = 1;
        do {
            for (i20 = 2; 71 > i20; ++i20) {
                i18 += i20;
                i18 += -61;
                Test.instanceCount = i20;
            }
            for (i22 = 1; i22 < 71; i22++) {
                Test.iArrFld[i19] -= i18;
                i18 -= i23;
                i21 -= i19;
            }
        } while (++i19 < 356);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
