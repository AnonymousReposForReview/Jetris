package tests.javafuzzer3107;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:49:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-51564L;
    public static int iFld=-49010;
    public static volatile int iFld1=5;
    public static boolean bFld=true;
    public static int iFld2=48215;
    public static short sFld=-18679;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 211);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, int i3, byte by) {

        double d1=93.71457;
        int i4=106, i5=-16204, i6=6, i7=-5, i8=-45, i9=147;
        long l1=0L;
        float f1=-18.210F;

        switch ((((Test.iFld >>> 1) % 1) * 5) + 14) {
        case 19:
            for (d1 = 5; d1 < 133; ++d1) {
                i2 += (int)((long)d1 | i3);
                i3 = (int)40101L;
            }
            break;
        }
        l1 = 1;
        while (++l1 < 155) {
            Test.iArrFld[(int)(l1)] = 25081;
            switch ((int)((l1 % 7) + 74)) {
            case 74:
                for (i5 = 10; 1 < i5; i5 -= 3) {
                    i3 |= i5;
                    for (i7 = 1; i7 < 4; i7++) {
                        Test.instanceCount += (i7 | Test.iFld);
                        by %= (byte)(i6 | 1);
                        i9 -= i9;
                        by &= (byte)Test.iFld;
                        i8 += -22819;
                    }
                }
                break;
            case 75:
                i8 += i6;
                break;
            case 76:
                i6 -= Test.iFld;
            case 77:
                Test.instanceCount -= l1;
            case 78:
                f1 += 49439;
                break;
            case 79:
                i6 = (int)l1;
                break;
            case 80:
                Test.iArrFld[(int)(l1)] = i8;
                break;
            default:
                by = (byte)Test.instanceCount;
            }
        }
        long meth_res = i2 + i3 + by + Double.doubleToLongBits(d1) + i4 + l1 + i5 + i6 + i7 + i8 + i9 +
            Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f, int i1) {

        byte by1=43, byArr[]=new byte[N];
        int i10=-46069, i11=-61, i12=-6, i13=7;
        double d2=127.58985;
        short s=-28510;

        FuzzerUtils.init(byArr, (byte)-7);

        byArr[(i1 >>> 1) % N] = (byte)((Test.instanceCount + (f - f)) * (lMeth(i1, i1, by1) + Test.iFld));
        i10 = 1;
        while ((i10 += 3) < 270) {
            for (d2 = 1; d2 < 17; ++d2) {
                for (i12 = (int)(d2); i12 < 2; i12++) {
                    switch (((i10 % 10) * 5) + 31) {
                    case 51:
                        i13 = i1;
                        Test.iFld = i11;
                        break;
                    case 49:
                        if (i1 != 0) {
                        }
                        Test.instanceCount *= Test.instanceCount;
                        switch (((i10 >>> 1) % 2) + 92) {
                        case 92:
                            i11 = (int)2.879F;
                            Test.iFld += i11;
                        case 93:
                            f = Test.instanceCount;
                            break;
                        default:
                            f += (i12 * i10);
                            i1 += (i12 | Test.iFld1);
                        }
                        break;
                    case 57:
                        i11 += (i12 * i12);
                        break;
                    case 60:
                        Test.instanceCount *= -9;
                    case 35:
                        f += (i12 + i13);
                    case 36:
                        i1 &= Test.iFld;
                        break;
                    case 64:
                        try {
                            Test.iFld1 = (i10 % -44896);
                            Test.iArrFld[i10] = (1279478603 % i1);
                            Test.iArrFld[(int)(d2)] = (i1 / -67);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 66:
                        s = (short)-75;
                        break;
                    case 73:
                        Test.instanceCount += i13;
                        break;
                    case 55:
                        i13 = s;
                        break;
                    default:
                        f += i12;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + by1 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + s +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, double d) {

        int i=-12, i14=8203, i15=-7180, i16=-68, i17=8;
        float f2=0.461F;
        short s1=28656;

        i += iMeth(f2, Test.iFld);
        s1 *= (short)Test.iFld1;
        for (i14 = 341; i14 > 12; i14--) {
            byte by2=127;
            l = i;
            by2 *= (byte)Test.iFld1;
            Test.iFld1 += (i14 ^ Test.instanceCount);
            i15 *= i14;
            switch (((i14 % 5) * 5) + 31) {
            case 42:
                for (i16 = 1; i16 < 5; i16++) {
                    s1 -= (short)i;
                    f2 *= i;
                    i17 += (i16 ^ (long)f2);
                    i17 = -1;
                    Test.instanceCount <<= i14;
                    Test.iFld1 *= (int)Test.instanceCount;
                }
                break;
            case 50:
            case 35:
                l = Test.iFld;
                break;
            case 40:
                i17 = (int)d;
            case 34:
                Test.iArrFld[i14 - 1] >>= (int)l;
            default:
                i15 *= (int)f2;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i + Float.floatToIntBits(f2) + s1 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        double d3=-42.109331, d4=1.108232;
        int i18=-151, i19=-6502, i20=-38107;
        float f3=1.488F;

        vMeth(Test.instanceCount, d3);
        Test.iFld += (int)d3;
        Test.iFld += Test.iFld1;
        for (d4 = 8; d4 < 144; d4++) {
            i19 = 1;
            do {
                i18 *= (int)f3;
                i18 -= i18;
                i18 = (int)d4;
                f3 -= 246;
                f3 += (-13 + (i19 * i19));
                Test.bFld = false;
                if (true) {
                    Test.instanceCount &= -10;
                    Test.iFld = -11;
                    switch ((int)((d4 % 2) + 62)) {
                    case 62:
                        Test.instanceCount = 71;
                        f3 += (i19 - Test.instanceCount);
                        break;
                    case 63:
                        Test.iFld1 += Test.iFld2;
                        lArrFld[(int)(d4 + 1)] /= 153;
                        Test.iFld1 += (int)Test.instanceCount;
                        d3 -= i19;
                    }
                }
                Test.iArrFld[(int)(d4)] = (int)d4;
                Test.iArrFld[(int)(d4)] >>>= (int)Test.instanceCount;
                d3 -= Test.iFld;
            } while (++i19 < 184);
            f3 = 0.626F;
            Test.iFld1 <<= 55853;
            Test.sFld = (short)i20;
            lArrFld[(Test.iFld1 >>> 1) % N] = Test.instanceCount;
        }
        i20 = -11;
        Test.iFld1 <<= i20;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
