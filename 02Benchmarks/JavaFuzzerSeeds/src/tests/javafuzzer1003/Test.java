package tests.javafuzzer1003;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:48:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52445L;
    public static int iFld=1;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.347F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i11=177;
        long l=8588606847356066808L;

        Test.instanceCount = i11;
        l >>>= -7625389243785249885L;
        long meth_res = i11 + l;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i6=3, i7=38580, i8=-8, i9=8, i10=121, i12=9, i13=7, i14=-27912, iArr1[][]=new int[N][N];
        byte by=93;
        float f=116.543F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.99959);
        FuzzerUtils.init(iArr1, -47);

        dArr[(i6 >>> 1) % N] += (i6 - (++i6));
        i6 >>= iArr1[(i6 >>> 1) % N][(i6 >>> 1) % N];
        for (i7 = 11; i7 < 184; ++i7) {
            Test.instanceCount += (i7 | i8);
            for (i9 = 1; i9 < 9; ++i9) {
                i8 += (int)(Test.fArrFld[i9] + (lMeth1() - i7));
            }
            i8 = 29;
        }
        for (i12 = 236; 1 < i12; --i12) {
            if (i9 != 0) {
                vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i12 + i13 + by + i14 + Float.floatToIntBits(f) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            Test.instanceCount <<= by;
            switch ((i12 % 4) + 95) {
            case 95:
            case 96:
                Test.instanceCount += 30;
                i14 = 1;
                do {
                    i8 += (int)Test.instanceCount;
                    i6 += (((i14 * Test.instanceCount) + i13) - f);
                } while (++i14 < 7);
                break;
            case 97:
                Test.instanceCount = Test.instanceCount;
                break;
            case 98:
                i13 += i6;
                break;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i12 + i13 + by + i14 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i1) {

        int i2=-3, i3=-1, i4=202, i5=13, i15=-77, i16=5, i17=32160, i18=-44281, iArr2[]=new int[N];
        byte by1=118;
        boolean b=true;
        short s=7626;

        FuzzerUtils.init(iArr2, -10);

        for (i2 = 2; i2 < 145; ++i2) {
            for (i4 = i2; i4 < 11; i4++) {
                vMeth();
                i15 += by1;
            }
            i5 ^= -3;
            i3 += (36699 + (i2 * i2));
            if (b) {
                i1 += (i2 * i2);
            } else {
                for (i16 = 1; i16 < 11; i16++) {
                    i18 = 1;
                    while (++i18 < 2) {
                        iArr2 = iArr2;
                        s <<= (short)Test.instanceCount;
                        i5 = (int)Test.instanceCount;
                        Test.instanceCount += (i18 * Test.iFld);
                        Test.instanceCount -= i17;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i15 + by1 + (b ? 1 : 0) + i16 + i17 + i18 + s +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=132, i19=-187, i20=9, i21=138, i22=190, i23=-5, i24=-19413, i25=-78, i26=12, iArr[]=new int[N];
        double d=-126.34357, dArr1[]=new double[N];
        boolean b1=false, bArr[]=new boolean[N];
        float f1=-57.756F, f2=-67.972F;
        byte by2=102;
        long l1=0L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 5L);
        FuzzerUtils.init(dArr1, 60.9978);

        Test.instanceCount = ((-(Test.instanceCount | i)) * ((iArr[(i >>> 1) % N] = i) * (Test.instanceCount--)));
        lMeth(i);
        for (i19 = 5; i19 < 301; i19++) {
            d += d;
            d -= Test.instanceCount;
            Test.instanceCount -= i19;
            Test.instanceCount = i19;
            Test.iFld <<= i;
            b1 = b1;
            for (f1 = 3; f1 < 85; f1++) {
                by2 += (byte)(((f1 * Test.iFld) + i) - Test.iFld);
            }
            bArr[i19] = b1;
        }
        for (l1 = 1; l1 < 202; ++l1) {
            switch ((int)((l1 % 3) + 64)) {
            case 64:
                i23 = 125;
                while ((i23 -= 2) > 0) {
                    i24 = 1;
                    do {
                        iArr[i23 + 1] -= -12952;
                        if (b1) break;
                        i22 <<= Test.iFld;
                        iArr[i24 - 1] &= Test.iFld;
                        f2 *= l1;
                        lArr[i24 + 1] *= i22;
                        dArr1[(int)(l1 + 1)] -= i20;
                        try {
                            i = (-36959 % i22);
                            i21 = (iArr[i23 + 1] % Test.iFld);
                            iArr[(int)(l1)] = (i20 % -729984408);
                        } catch (ArithmeticException a_e) {}
                        i21 += (((i24 * l1) + f1) - i21);
                    } while (++i24 < 2);
                }
                i22 = i;
                for (i25 = 7; i25 < 125; ++i25) {
                    iArr[(int)(l1 - 1)] += i25;
                    Test.instanceCount |= 8160;
                    i21 += (((i25 * i25) + i) - i20);
                }
                break;
            case 65:
                Test.iFld ^= 220;
                break;
            case 66:
                Test.instanceCount >>= i21;
                break;
            default:
                i20 = i19;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
