package tests.javafuzzer642;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:14:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7300588160578902357L;
    public volatile int iFld=-198;
    public static volatile short sFld=16373;
    public static volatile boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -142);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, -47053L);
        FuzzerUtils.init(Test.iArrFld1, -139);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i11) {

        float f=-28.340F;
        int i12=-59400, i13=1, i14=62363, i15=-12, i16=-11840, i17=16;
        byte by=54;

        i11 = (int)f;
        for (i12 = 206; 6 < i12; --i12) {
            i13 <<= (int)Test.instanceCount;
            Test.instanceCount *= (long)f;
            for (i14 = 1; i14 < 8; i14++) {
                i15 *= i12;
                switch (((4 >>> 1) % 3) + 13) {
                case 13:
                    i15 = i11;
                    Test.instanceCount += i14;
                    i15 = 3;
                    break;
                case 14:
                    by += (byte)(((i14 * i14) + i14) - i11);
                    Test.instanceCount = i11;
                    break;
                case 15:
                    for (i16 = 1; i16 < 2; i16++) {
                        i15 >>= i15;
                    }
                    i15 = i12;
                    break;
                }
            }
        }
        vMeth1_check_sum += i11 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + by + i16 + i17;
    }

    public static boolean bMeth(long l, int i8, long l1) {

        int i9=208, i10=1, i18=201, i19=21904, i20=-128;
        byte by1=68;
        float f1=-34.451F;
        boolean b=false;

        i8 <<= i8;
        for (i9 = 6; 145 > i9; i9++) {
            vMeth1(i8);
            for (i18 = 1; i18 < 11; i18++) {
                by1 = (byte)i9;
                switch (((i18 % 3) * 5) + 68) {
                case 73:
                    Test.instanceCount = i10;
                    switch ((((i18 >>> 1) % 2) * 5) + 82) {
                    case 89:
                        Test.instanceCount <<= 0;
                        i10 <<= (int)-7L;
                        break;
                    case 90:
                        f1 += (i18 - Test.sFld);
                        i20 = 1;
                        do {
                            i10 *= i10;
                            Test.iArrFld[i18] *= (int)-320933735195391451L;
                            i8 *= i20;
                        } while (++i20 < 2);
                        break;
                    default:
                        i10 = (int)-2.114784;
                    }
                    break;
                case 76:
                    i8 += 12029;
                    break;
                case 78:
                    i19 += (int)-1.37F;
                default:
                    Test.bArrFld[i18 + 1] = b;
                }
            }
        }
        long meth_res = l + i8 + l1 + i9 + i10 + i18 + i19 + by1 + Float.floatToIntBits(f1) + i20 + (b ? 1 : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=-57535, i4=-9, i5=-60379, i6=-54721, i7=-6;
        short s=-21179;
        boolean b1=false, bArr[]=new boolean[N];
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -24.357F);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, -2.59314);

        for (i3 = 4; i3 < 126; i3++) {
            for (i5 = 1; i5 < 13; ++i5) {
                i2 ^= (int)(((i1 - s) - (i4++)) + fArr[i3 + 1]);
                i2 %= (int)((i2++) | 1);
                i7 = 1;
                do {
                    if ((bArr[i7 - 1] = bMeth(Test.instanceCount, i1, Test.instanceCount)) && b1) break;
                    Test.instanceCount -= i2;
                    Test.instanceCount += Test.instanceCount;
                    try {
                        i2 = (-14 % Test.iArrFld[i3 + 1]);
                        Test.iArrFld[i5] = (Test.iArrFld[i5 + 1] % 131);
                        i1 = (98 % i7);
                    } catch (ArithmeticException a_e) {}
                    i1 -= i4;
                    i4 *= (int)Test.instanceCount;
                    dArr = dArr;
                    i += i7;
                    Test.lArrFld = Test.lArrFld;
                    try {
                        i6 = (1 % Test.iArrFld[i5 + 1]);
                        i2 = (i5 % i6);
                        i6 = (-173 / i1);
                    } catch (ArithmeticException a_e) {}
                } while (++i7 < 2);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + s + i7 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=9, i22=-29, i23=-21093, i24=17950, i25=19625;
        float f2=5.831F;
        double d=0.64023;

        iFld -= iFld;
        Test.instanceCount = Test.instanceCount;
        vMeth(iFld, -144, iFld);
        iFld -= (int)Test.instanceCount;
        iFld = iFld;
        if (false) {
            for (i21 = 10; i21 < 168; i21++) {
                Test.instanceCount *= i22;
                switch ((i21 % 2) + 52) {
                case 52:
                    iFld = i22;
                    i22 = iFld;
                    i22 <<= i21;
                    Test.instanceCount = (long)f2;
                case 53:
                    i22 >>= i21;
                    Test.iArrFld[i21] = i21;
                    i23 = 1;
                    do {
                        Test.iArrFld = Test.iArrFld1;
                    } while (++i23 < 159);
                    break;
                }
                i24 = 1;
                while (++i24 < 159) {
                    iFld = (int)Test.instanceCount;
                    switch ((((i23 >>> 1) % 8) * 5) + 71) {
                    case 85:
                        Test.instanceCount *= i24;
                        i22 -= (int)d;
                        i22 >>= (int)Test.instanceCount;
                        i25 = 1;
                        do {
                            Test.lArrFld[i25] = i22;
                            Test.iArrFld1[i25] = 9;
                            i22 <<= i21;
                            Test.instanceCount = Test.instanceCount;
                            Test.bFld = Test.bFld;
                            Test.instanceCount = i24;
                        } while (++i25 < 1);
                    case 77:
                        f2 *= f2;
                        break;
                    case 91:
                        iFld = i22;
                        break;
                    case 74:
                        Test.iArrFld[i21 + 1] += -6424;
                    case 89:
                        Test.instanceCount -= i25;
                        break;
                    case 93:
                        if (Test.bFld) break;
                        break;
                    case 111:
                    case 73:
                        Test.sFld = (short)Test.instanceCount;
                    default:
                        i22 += (i24 * i22);
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
