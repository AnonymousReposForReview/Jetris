package tests.javafuzzer3232;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:23:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-23568L;
    public static float fFld=1.413F;
    public volatile double dFld=1.53431;
    public static int iArrFld[]=new int[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 203);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b, int i4, int i5) {

        int i6=-55142, i7=36327, i8=185, i9=-8, iArr[]=new int[N], iArr1[]=new int[N];
        double d=2.73136;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -6576);
        FuzzerUtils.init(iArr1, 113);

        i5 = i5;
        try {
            for (i6 = 4; 365 > i6; ++i6) {
                bArr = bArr;
                d -= -2.823F;
                try {
                    iArr[(i7 >>> 1) % N] = (i4 / -65266);
                    i7 = (i5 % i4);
                    i5 = (iArr1[i6 + 1] / 25354);
                } catch (ArithmeticException a_e) {}
                bArr[i6 + 1][i6 + 1] = b;
                i4 += i4;
                i5 = (int)d;
                iArr[i6] >>= i6;
            }
            Test.instanceCount = i5;
            for (i8 = 9; i8 < 166; ++i8) {
                Test.fFld += -153L;
                Test.instanceCount = i7;
                Test.instanceCount -= (long)Test.fFld;
            }
        }
        catch (NullPointerException exc2) {
            Test.instanceCount *= i8;
        }
        catch (NegativeArraySizeException exc3) {
            Test.instanceCount -= -6680840457229690573L;
        }
        vMeth1_check_sum += (b ? 1 : 0) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i3) {

        boolean b1=true;
        short s=-4802;
        int i10=46544, i11=-108, i12=3, i13=-30332;
        long l=0L, l1=-3L;
        byte by=-96;
        double d1=-1.45669;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -99.762F);

        vMeth1(b1, i3, -6410);
        Test.instanceCount = s;
        for (i10 = 2; 311 > i10; i10++) {
            l = 5;
            do {
                Test.instanceCount += (((l * by) + i11) - Test.fFld);
                Test.iArrFld[i10] >>>= (int)Test.instanceCount;
                Test.fFld = 0.818F;
                Test.iArrFld[(int)(l)] = i10;
                i11 *= (int)l1;
                i11 = i11;
                fArr[i10] = 110;
                for (i12 = 1; i12 < 1; ++i12) {
                    i13 = i12;
                    Test.instanceCount += (long)d1;
                    try {
                        Test.iArrFld[i10] = (i10 / i11);
                        Test.iArrFld[(int)(l + 1)] = (25279 / i13);
                        i11 = (i12 % i10);
                    } catch (ArithmeticException a_e) {}
                }
            } while (--l > 0);
        }
        long meth_res = i3 + (b1 ? 1 : 0) + s + i10 + i11 + l + by + l1 + i12 + i13 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i1=-4, i2=0, i14=-237;
        byte by1=69;
        float f=-59.247F;
        boolean b2=false;

        for (i1 = 12; i1 < 213; ++i1) {
            fMeth(i1);
            i2 = i1;
            i2 *= i1;
            by1 += (byte)i1;
            Test.iArrFld[i1 + 1] = (int)Test.instanceCount;
            if (true) break;
            i14 = 1;
            do {
                f = 1;
                while (++f < 1) {
                    by1 += (byte)(((f * i1) + i2) - Test.instanceCount);
                    Test.fFld -= i1;
                    switch ((i1 % 5) + 3) {
                    case 3:
                        Test.instanceCount -= i2;
                        break;
                    case 4:
                        i2 = i14;
                        i2 = (int)Test.instanceCount;
                        break;
                    case 5:
                        Test.iArrFld[i14] = i14;
                    case 6:
                        if (i1 != 0) {
                            vMeth_check_sum += i1 + i2 + by1 + i14 + Float.floatToIntBits(f) + (b2 ? 1 : 0);
                            return;
                        }
                        break;
                    case 7:
                        if (b2) break;
                        break;
                    }
                }
            } while (++i14 < 8);
        }
        vMeth_check_sum += i1 + i2 + by1 + i14 + Float.floatToIntBits(f) + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-171, i15=-196, i16=15999, i17=204, i18=13, i19=2;
        float f1=100.507F;
        boolean b3=false;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -51.71063);

        if (false) {
            Test.instanceCount = i;
            if (b3) {
                vMeth();
                i += (int)Test.fFld;
            } else if (true) {
                Test.instanceCount = -3962872290899421546L;
                Test.iArrFld[(i >>> 1) % N] -= i;
                if (b3) {
                    i = i;
                    dArr[(-163 >>> 1) % N][(i >>> 1) % N] += Test.fFld;
                    for (f1 = 5; f1 < 199; f1++) {
                        for (i16 = 1; 129 > i16; ++i16) {
                            Test.iArrFld[i16] -= i15;
                            i += i17;
                            for (i18 = 1; 2 > i18; ++i18) {
                                double d2=-34.94498;
                                i17 *= 3771;
                                Test.instanceCount += (i18 | i15);
                                d2 -= i16;
                                switch ((i18 % 1) + 80) {
                                case 80:
                                    i19 += i18;
                                    if (b3) {
                                        Test.instanceCount = Test.instanceCount;
                                        i17 *= i17;
                                        Test.instanceCount *= 2047992133764338387L;
                                    } else if (b3) {
                                        i17 = i17;
                                        Test.instanceCount = i19;
                                        i19 += (int)(680482215148173563L + (i18 * i18));
                                    } else if (b3) {
                                        i17 -= i16;
                                        fArrFld[i16][i18 + 1] -= i;
                                        try {
                                            i19 = (223252494 % i19);
                                            Test.iArrFld[(int)(f1)] = (i16 / i);
                                            Test.iArrFld[(int)(f1)] = (Test.iArrFld[(int)(f1 - 1)] % i17);
                                        } catch (ArithmeticException a_e) {}
                                    } else {
                                        i15 <<= i16;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            } else {
                dFld = Test.instanceCount;
            }
        } else {
            Test.fFld = (float)dFld;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
