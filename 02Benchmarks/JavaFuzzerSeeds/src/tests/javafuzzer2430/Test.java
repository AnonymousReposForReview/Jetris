package tests.javafuzzer2430;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:23:32 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public static volatile int iFld=-8;
    public static float fFld=1.552F;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -26.146F);
        FuzzerUtils.init(Test.dArrFld, 87.15714);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8, int i9) {

        long l1=-47612L, lArr[]=new long[N];
        int i10=-238, i11=64835, i12=-50632;
        double d2=1.9355;
        byte by=72;
        float f1=-1.768F;

        FuzzerUtils.init(lArr, 197L);

        for (l1 = 4; l1 < 251; ++l1) {
            i11 = 7;
            do {
                i9 += i8;
                i10 >>= 52966;
                i12 = 1;
                do {
                    i7 = (int)Test.instanceCount;
                    lArr[i12] = i9;
                    i10 ^= (int)Test.instanceCount;
                    d2 *= l1;
                    i10 = i8;
                    i7 += (i12 * i12);
                } while (++i12 < 3);
                Test.instanceCount *= i8;
                by += by;
                Test.instanceCount += (long)d2;
                f1 = l1;
            } while ((i11 -= 3) > 0);
        }
        vMeth2_check_sum += i7 + i8 + i9 + l1 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + by +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i3=-63211, i4=0, i5=10, i6=-25022, i13=-131, i14=216, i15=49, i16=17599, i17=24607, iArr1[][]=new int[N][N];
        double d1=-20.49346;
        boolean bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 16884);
        FuzzerUtils.init(lArr1, 11L);

        Test.iFld -= (Test.iFld++);
        for (i3 = 8; i3 < 165; ++i3) {
            d1 = Math.abs(50158);
            for (i5 = 1; i5 < 10; ++i5) {
                if (bArr[i5 + 1] = (Test.fArrFld[i3 - 1] != (--i6))) continue;
                vMeth2(Test.iFld, i5, i13);
                try {
                    Test.iFld = (-224 / iArr1[i3][(i3 >>> 1) % N]);
                    Test.iFld = (iArr1[i5][i3] % Test.iFld);
                    Test.iFld = (-190 / i13);
                } catch (ArithmeticException a_e) {}
                Test.fFld -= i3;
                lArr1[i5] &= Test.iFld;
            }
            Test.fFld -= -1L;
        }
        iArr1[(i13 >>> 1) % N][(Test.iFld >>> 1) % N] -= i5;
        for (i14 = 245; 12 < i14; --i14) {
            for (i16 = i14; i16 < 7; i16++) {
                Test.fFld += 245L;
                iArr1[i14][i14] += -54649;
            }
        }
        vMeth1_check_sum += i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(long l) {

        float f=20.719F;
        int i1=7, i2=4, i18=4033, i19=-234, i20=-19490, i21=-31, iArr[]=new int[N];
        double d=-1.71762;
        byte by1=-49;

        FuzzerUtils.init(iArr, -186);

        for (f = 7; f < 260; ++f) {
            i2 = 1;
            do {
                iArr[(int)(f)] = (int)(((i1 * i2) + (i2 * i1)) - (-Math.min(l, Test.instanceCount)));
                i1 += (((i2 * i2) + i2) - i2);
            } while (++i2 < 6);
            i1 = (int)(++l);
            i1 = (int)(Math.abs((long)(i1 - f)) - (l - (i1 * d)));
            vMeth1();
            for (i18 = 6; i18 > 1; i18 -= 2) {
                if (bFld) break;
                for (i20 = 1; i20 < 3; ++i20) {
                    i19 = i21;
                    Test.dArrFld[i18 + 1] = by1;
                    l -= l;
                    by1 >>>= (byte)-27826;
                    d += i1;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i1 + i2 + Double.doubleToLongBits(d) + i18 + i19 + i20 + i21 +
            by1 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=5, i22=102, i23=-22568, i24=-13, i25=-9315, i26=4, i27=-38611, i28=34972, i29=1, i30=19, i31=87, i32=4,
            i33=-15970;
        short s=22735;
        double d3=0.73480;

        i = (((--i) + (i % (i | 1))) % ((-(i++)) | 1));
        s += (short)((~(++s)) + -4L);
        vMeth(Test.instanceCount);
        lArrFld[(Test.iFld >>> 1) % N] = i;
        Test.fFld -= Test.instanceCount;
        for (i22 = 16; i22 < 313; ++i22) {
            if (bFld) {
                for (i24 = 4; i24 < 85; i24++) {
                    iArrFld[i22] >>>= -6;
                    Test.instanceCount += (i24 ^ (long)Test.fFld);
                    i = i23;
                    for (i26 = 1; i26 < 2; i26++) {
                        lArrFld[i22 + 1] += s;
                        Test.instanceCount += (((i26 * i27) + Test.instanceCount) - i25);
                        Test.iFld = (int)Test.fFld;
                    }
                    iArrFld[i22 - 1] *= i25;
                    for (i28 = 2; 1 < i28; i28--) {
                        iArrFld[i22] -= -30;
                        i25 >>>= i27;
                        i29 += 79;
                    }
                }
                iArrFld[i22 - 1] *= (int)d3;
                for (i30 = 1; i30 < 85; ++i30) {
                    for (i32 = 1; i32 < 2; ++i32) {
                        Test.fFld += i25;
                        Test.fFld -= (float)37.67116;
                        if (true) {
                            i *= i29;
                            i23 <<= (int)-8661L;
                        } else if (true) {
                            d3 = Test.instanceCount;
                        } else if (bFld) {
                            i -= i29;
                        } else {
                            i23 <<= s;
                        }
                    }
                }
            } else if (bFld) {
                iArrFld[i22] /= (int)-1079969799L;
            } else {
                Test.instanceCount += i25;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
