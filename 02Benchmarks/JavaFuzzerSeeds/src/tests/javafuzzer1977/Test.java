package tests.javafuzzer1977;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:12 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3L;
    public static double dFld=53.51853;
    public static float fFld=90.120F;
    public static short sFld=-19364;
    public static volatile int iFld=-8;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4L);
        FuzzerUtils.init(Test.iArrFld, 10775);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i=-5, i1=12, i2=-61535, i4=-10, i5=-235, iArr[]=new int[N];
        short s=602;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -45);
        FuzzerUtils.init(lArr, 28843L);

        i |= i;
        iArr[(i >>> 1) % N] &= -13657;
        i = i;
        for (i1 = 7; i1 < 211; i1++) {
            i2 += (int)Test.dFld;
            i2 += i1;
            i += (((i1 * i) + i1) - i);
            i = i2;
            s += (short)i1;
            i4 = 1;
            do {
                boolean b=true;
                i += i4;
                switch ((i1 % 10) + 30) {
                case 30:
                    iArr[i4] |= i;
                    i = (int)Test.instanceCount;
                case 31:
                    i5 = s;
                    break;
                case 32:
                    lArr[i4 - 1] = -52104;
                    break;
                case 33:
                    i = (int)Test.instanceCount;
                    break;
                case 34:
                    i2 <<= i4;
                    break;
                case 35:
                    i += (int)Test.instanceCount;
                    break;
                case 36:
                    b = b;
                    break;
                case 37:
                    lArr = lArr;
                case 38:
                    Test.fFld += Test.instanceCount;
                    break;
                case 39:
                    Test.fFld += i1;
                }
            } while (++i4 < 8);
        }
        vMeth1_check_sum += i + i1 + i2 + s + i4 + i5 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i6=-12522, i8=-20521, i9=-134, i10=-8, i11=8;

        vMeth1();
        i6 = 1;
        while (++i6 < 134) {
            int i7=-12546;
            Test.instanceCount -= Test.instanceCount;
            i7 = i6;
            for (i8 = 12; i8 > 1; i8 -= 2) {
                l += (45729L + (i8 * i8));
                for (i10 = 1; i10 < 3; ++i10) {
                    i9 += (int)Test.fFld;
                    Test.lArrFld[i8] &= i10;
                    Test.lArrFld[i6 - 1] >>= i7;
                    Test.instanceCount = l;
                    i7 = i11;
                    Test.instanceCount += (i10 * i10);
                    Test.sFld = (short)i9;
                    Test.fFld += (((i10 * i9) + i7) - i10);
                }
            }
        }
        vMeth_check_sum += l + i6 + i8 + i9 + i10 + i11;
    }

    public static void vSmallMeth() {

        boolean b1=false;

        vMeth(Test.instanceCount);
        b1 = b1;
        vSmallMeth_check_sum += (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i12=-5811, i13=34420, i14=45248, i15=-2474, i16=16988, i17=0, i18=-3, i19=-22849, i20=3, i21=43117;
        float f=0.206F, f1=-2.95F, fArr[]=new float[N];
        boolean b2=false;
        byte by=-93;
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -125.1020F);
        FuzzerUtils.init(sArr, (short)21549);

        for (int smallinvoc=0; smallinvoc<473; smallinvoc++) vSmallMeth();
        Test.dFld += i12;
        if (b2) {
            for (i13 = 3; 186 > i13; ++i13) {
                f = 1;
                do {
                    b2 = true;
                    i12 += (int)(f * f);
                    Test.iFld = i13;
                    Test.instanceCount >>= Test.iFld;
                    Test.instanceCount *= i14;
                    try {
                        Test.iArrFld[(int)(f)] = (Test.iArrFld[(int)(f - 1)] / Test.iFld);
                        Test.iFld = (187 / Test.iArrFld[(int)(f)]);
                        i12 = (-40563 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    for (i15 = 1; i15 < 4; ++i15) {
                        i16 = i16;
                        Test.instanceCount *= i15;
                        Test.iArrFld[i13 - 1] -= 30524;
                        fArr[(int)(f + 1)] -= Test.sFld;
                        Test.instanceCount += (long)f;
                        by += (byte)(i15 - Test.fFld);
                    }
                    by = (byte)i14;
                    i14 = i14;
                } while ((f += 3) < 137);
                if (true) {
                    for (f1 = 7; 137 > f1; f1++) {
                        Test.lArrFld[(int)(f1 - 1)] &= 62965;
                    }
                    for (i18 = 137; i18 > i13; i18 -= 2) {
                        Test.iFld ^= i12;
                        Test.lArrFld[i18 - 1] += i16;
                        switch (((i18 % 1) * 5) + 35) {
                        case 39:
                            for (i20 = i18; i20 < 1; ++i20) {
                                Test.sFld = by;
                                i19 *= i12;
                            }
                        }
                    }
                } else {
                    Test.fFld += (i13 * i13);
                }
            }
        } else if (b2) {
            Test.instanceCount ^= Test.iFld;
        } else if (b2) {
            Test.instanceCount = Test.instanceCount;
        } else {
            sArr[(i17 >>> 1) % N] &= (short)46;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
