package tests.javafuzzer3258;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:56:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30539L;
    public static float fFld=-45.475F;
    public static volatile double dFld=-12.45547;
    public static short sFld=15352;
    public static byte byFld=-60;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -10L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i7=-49790, i8=65085, i9=0, i10=-6, i11=57, iArr[]=new int[N];
        float f=24.713F;
        short s=18927;

        FuzzerUtils.init(iArr, -67);

        i7 *= (int)Test.dFld;
        Test.instanceCount += -44L;
        for (f = 1; f < 236; f++) {
            l1 += (long)f;
            Test.instanceCount += (long)(((f * i7) + f) - Test.instanceCount);
            for (i9 = (int)(f); i9 < 7; i9++) {
                switch ((i9 % 1) + 56) {
                case 56:
                    i11 = 1;
                    while (++i11 < 1) {
                        i8 *= 5;
                        Test.fFld -= s;
                    }
                    iArr[i9 - 1] -= (int)f;
                    break;
                }
                iArr[(int)(f)] = i7;
                iArr[(int)(f)] -= i10;
                iArr = iArr;
                iArr[i9 + 1] = (int)f;
            }
        }
        vMeth1_check_sum += l1 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, int i6, long l) {

        int i12=-16678, i13=-48064, i14=-3, i15=-10, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 111);

        vMeth1(l);
        i12 = 1;
        do {
            switch (((i6 >>> 1) % 1) + 29) {
            case 29:
                for (i13 = 1; 5 > i13; i13++) {
                    Test.instanceCount = i14;
                    Test.sFld <<= (short)i12;
                    if (false) break;
                    i14 -= i13;
                    Test.instanceCount = Test.instanceCount;
                }
                switch ((((i13 >>> 1) % 8) * 5) + 7) {
                case 30:
                    i6 -= -13;
                    try {
                        i14 = (iArr1[i12] / 149);
                        iArr1[i12] = (i13 / iArr1[i12 + 1]);
                        iArr1[i12] = (i14 / -1296055065);
                    } catch (ArithmeticException a_e) {}
                    i14 += -8;
                    break;
                case 24:
                    try {
                        iArr1[i12 + 1] = (i13 / i12);
                        i14 = (i6 % 43187);
                        i14 = (42525 % i13);
                    } catch (ArithmeticException a_e) {}
                    if (true) break;
                    break;
                case 13:
                    l -= i6;
                    break;
                case 44:
                    iArr1[i12 + 1] += i13;
                    break;
                case 37:
                    Test.instanceCount *= i13;
                    break;
                case 21:
                    i6 *= i12;
                case 31:
                    if (i14 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i6 + l + i12 + i13 + i14 + i15 +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 39:
                    i15 = i12;
                    break;
                }
                break;
            }
        } while (++i12 < 340);
        vMeth_check_sum += Double.doubleToLongBits(d) + i6 + l + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i1) {

        int i2=2026, i3=56623, i4=-64230, i5=6, i16=9, i17=11, i18=-199, i19=35825, i20=-329, iArr2[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(bArr, false);

        for (i2 = 6; 162 > i2; i2++) {
            for (i4 = 1; i4 < 10; i4++) {
                vMeth(Test.dFld, i1, Test.instanceCount);
            }
            for (i16 = i2; i16 < 10; i16++) {
                for (i18 = 1; i18 < 1; i18++) {
                    Test.fFld += i18;
                    switch ((i18 % 7) + 66) {
                    case 66:
                        Test.instanceCount *= i4;
                        switch (((i16 % 4) * 5) + 1) {
                        case 17:
                            try {
                                i3 = (1929811784 % i3);
                                i3 = (i2 / i19);
                                i5 = (-842991849 % i2);
                            } catch (ArithmeticException a_e) {}
                            i3 = -52267;
                            Test.instanceCount += (i18 ^ i1);
                        case 19:
                            if (i20 != 0) {
                            }
                            Test.instanceCount += i18;
                            iArr2[i2] = 12327;
                            break;
                        case 14:
                            i5 = i17;
                        case 8:
                        default:
                            i5 -= (int)Test.fFld;
                        }
                    case 67:
                    case 68:
                        i19 += i18;
                        break;
                    case 69:
                        i20 += -7;
                    case 70:
                        bArr[i16] = b;
                        break;
                    case 71:
                        i5 = i18;
                        break;
                    case 72:
                        Test.instanceCount %= (Test.instanceCount | 1);
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i16 + i17 + i18 + i19 + i20 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-46986, i21=109, i22=-8, i23=33246, i24=-13, i25=13, i26=4, i27=-3, i28=-4, i29=5, i30=-11484;
        double d1=-1.56676;
        float f1=-1.802F;

        Test.instanceCount -= (long)(((i * Test.fFld) - fMeth(14)) - -38L);
        i += (int)Test.instanceCount;
        i -= (int)Test.fFld;
        for (i21 = 20; i21 < 373; i21++) {
            i += i21;
            if (false) continue;
            i22 += i22;
            for (i23 = 3; 71 > i23; ++i23) {
                i22 += (((i23 * i24) + i23) - i23);
                Test.lArrFld[i23 + 1] = 8L;
            }
            i22 -= -54576;
            d1 = 71;
            while ((d1 -= 2) > 0) {
                Test.instanceCount *= i;
                i -= 12;
                for (i25 = i21; i25 < 2; ++i25) {
                    Test.byFld += (byte)Test.sFld;
                }
                i24 -= -1;
            }
            Test.dFld = Test.fFld;
        }
        i27 = 1;
        while (++i27 < 204) {
            Test.bFld = Test.bFld;
            lArrFld1[i27 + 1] = (long)Test.fFld;
        }
        Test.bFld = Test.bFld;
        Test.instanceCount -= i27;
        Test.fFld -= i23;
        for (f1 = 6; 238 > f1; ++f1) {
            i24 += (int)(f1 + i22);
            for (i29 = 4; i29 < 108; ++i29) {
                i += i22;
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount += 16941;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
