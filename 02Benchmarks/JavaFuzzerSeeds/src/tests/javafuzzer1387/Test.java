package tests.javafuzzer1387;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:34:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static volatile boolean bFld=true;
    public static short sFld=-3937;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8977);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, long l1, long l2) {

        int i6=6, i7=-9, i8=-12, i9=54814, i10=4, i11=1, i12=-51548;
        float f1=86.173F, f2=-117.471F, fArr[]=new float[N];
        short s=-915;

        FuzzerUtils.init(fArr, 72.8F);

        i6 = 219;
        while (--i6 > 0) {
            if (Test.bFld) continue;
            fArr[i6] -= i6;
            f1 += i6;
            i7 = 0;
            l2 = l2;
            l = -41906;
            for (i8 = 1; i8 < 7; i8++) {
                i9 += i8;
                for (i10 = i6; i10 < 2; ++i10) {
                    i11 += (((i10 * f1) + s) - f2);
                    try {
                        i9 = (i11 / 6248);
                        i11 = (68 % i8);
                        i9 = (i11 % 90);
                    } catch (ArithmeticException a_e) {}
                    s <<= (short)i11;
                    i9 = i12;
                }
                s += (short)(((i8 * i12) + i12) - i6);
            }
        }
        long meth_res = l + l1 + l2 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + s +
            Float.floatToIntBits(f2) + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i5) {

        float f=24.961F;
        double d=0.10466;
        int i13=-32357, i14=-13502, i15=13, i16=-56234, i17=-144, i18=151, i19=8, i20=8391;

        f += (float)(((Test.instanceCount % ((long)(f) | 1)) + Math.min(i5, i5)) * d);
        fMeth(Test.instanceCount, -254L, Test.instanceCount);
        for (i13 = 7; i13 < 160; i13++) {
            for (i15 = 1; i15 < 10; i15++) {
                Test.iArrFld[i13] -= i15;
                for (i17 = i15; i17 < 2; i17++) {
                    double d1=1.1532;
                    Test.bFld = Test.bFld;
                    if (true) continue;
                    i19 += (i17 * i17);
                    d1 += i5;
                    i19 -= (int)Test.instanceCount;
                    i14 >>>= i13;
                    Test.iArrFld[i15 + 1] = (int)Test.instanceCount;
                    i20 = -118;
                    Test.instanceCount *= i19;
                }
            }
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 +
            i18 + i19 + i20;
    }

    public static int iMeth(int i2) {

        int i3=8, i4=62634, i21=4;
        float f3=75.1006F;
        double d2=2.76874;

        for (i3 = 18; i3 < 373; ++i3) {
            vMeth(i3);
            switch ((i3 % 4) + 12) {
            case 12:
                i2 += i3;
                i4 >>= (int)6419049280638854086L;
                i21 = 1;
                while (++i21 < 5) {
                    f3 += i3;
                    if (i21 != 0) {
                    }
                    i2 += (i21 + i21);
                    try {
                        i4 = (Test.iArrFld[i21] % i2);
                        i4 = (i2 % -44170);
                        Test.iArrFld[i3 + 1] = (-56498 / i21);
                    } catch (ArithmeticException a_e) {}
                    i4 += (-5 + (i21 * i21));
                    if (Test.bFld) continue;
                    i4 = i21;
                    i2 = 14;
                }
                i4 /= 1706;
                break;
            case 13:
                Test.iArrFld[i3 - 1] = i2;
            case 14:
                i2 -= (int)Test.instanceCount;
                break;
            case 15:
                Test.iArrFld[(-12502 >>> 1) % N] += (int)Test.instanceCount;
                break;
            default:
                d2 -= 33061;
            }
        }
        long meth_res = i2 + i3 + i4 + i21 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-244, i1=11949, i22=-17095, i23=40370, i24=199, i25=26742, i26=-39948, i27=8, i28=25288, i29=-4, i30=14,
            i31=-3725;
        double d3=-42.97343;
        byte by=-52;
        float f5=34.578F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -36778L);
        FuzzerUtils.init(fArr1, -2.501F);

        for (i = 7; i < 178; ++i) {
            i1 >>>= (++i1);
            i1 = (int)(46 + ((i1 * Test.instanceCount) * (i1--)));
            i1 <<= (int)((++lArr[i]) % (((55 - i1) - Math.max(i, 47960)) | 1));
        }
        i1 += Math.max(Integer.reverseBytes(iMeth(i)), i);
        for (float f4 : fArr1) {
            i1 = i;
            d3 = by;
            f4 *= i1;
            Test.iArrFld[(i >>> 1) % N] -= 6;
            i1 -= i;
            d3 -= i1;
            Test.iArrFld[(254 >>> 1) % N] += (int)f4;
            i1 = i;
        }
        for (i22 = 5; i22 < 191; ++i22) {
            Test.sFld = (short)Test.instanceCount;
        }
        dArrFld[(i1 >>> 1) % N] *= 213;
        for (i24 = 127; i24 > 2; i24--) {
            Test.iArrFld[i24] = i25;
            for (i26 = 12; i26 < 201; i26++) {
                Test.iArrFld[i26 - 1] &= (int)-22945L;
                fArr1[i26] = Test.sFld;
                i23 = i25;
                for (i28 = 1; i28 < 2; ++i28) {
                    i23 >>= (int)-8L;
                }
                i27 = i28;
                i1 = (int)f5;
                for (i30 = 1; 2 > i30; i30++) {
                    Test.instanceCount -= i23;
                    Test.iArrFld[i24] -= i22;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
