package tests.javafuzzer2520;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:13:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=206L;
    public static volatile int iFld=17927;
    public static volatile float fFld=1.590F;
    public double dFld=1.24388;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f1) {

        int i2=18, i3=-13, i4=62391, i5=-8, iArr[]=new int[N];
        boolean b=false;
        long l=32200L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4127056153L);
        FuzzerUtils.init(iArr, 165);

        lArr[(142 >>> 1) % N] -= Test.iFld;
        for (i2 = 9; i2 < 275; ++i2) {
            iArr[i2] -= 200;
            f1 -= Test.iFld;
            if (b) {
                i4 = 1;
                while (++i4 < 6) {
                    Test.iFld = -13;
                    f1 *= Test.instanceCount;
                    Test.iFld += (((i4 * i4) + i2) - f1);
                    lArr[i2 - 1] = Test.iFld;
                }
            }
            switch ((i2 % 5) + 40) {
            case 40:
                for (l = 6; l > 1; l -= 2) {
                    lArr[i2] >>= Test.instanceCount;
                    iArr[i2 + 1] += 7;
                    iArr[(int)(l + 1)] -= (int)l;
                }
            case 41:
                try {
                    iArr[i2] = (i3 % i4);
                    i5 = (2 % i2);
                    Test.iFld = (i5 % 569550059);
                } catch (ArithmeticException a_e) {}
                break;
            case 42:
                Test.instanceCount -= (long)f1;
            case 43:
                i5 += (((i2 * i2) + Test.iFld) - i4);
                break;
            case 44:
                if (i5 != 0) {
                    return ((int)(Float.floatToIntBits(f1) + i2 + i3 + i4 + (b ? 1 : 0) + l + i5 +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr))) % 2 > 0;
                }
                break;
            default:
                iArr[i2 + 1] = i5;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + (b ? 1 : 0) + l + i5 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static float fMeth() {

        float f=-100.730F;
        int i6=2272, i7=31519, i8=43485, i9=6, i10=-119;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-78);

        f = 338;
        while (--f > 0) {
            if (bMeth(2.464F)) continue;
            Test.iArrFld[(int)(f)] -= (int)f;
            byArr[(int)(f + 1)] -= (byte)i6;
        }
        for (i7 = 236; i7 > 14; --i7) {
            for (i9 = 7; i9 > 1; i9 -= 2) {
                Test.iFld += i6;
                Test.iFld += (((i9 * i6) + i8) - i6);
                Test.iArrFld = Test.iArrFld;
                i10 >>>= Test.iFld;
                i10 += i9;
                i8 -= 14598;
                Test.iFld += (-125 + (i9 * i9));
                i10 = i10;
                i10 *= (int)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth() {

        int i=-28243, i1=10;

        i <<= i;
        i *= (int)(i1 - ((Test.instanceCount + i) * fMeth()));
        vSmallMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        int i11=-14, i12=7, i13=-6, i14=25229, i15=8, i16=6;
        boolean b1=false;
        byte by=-73;

        if (b1) {
            for (int smallinvoc=0; smallinvoc<921; smallinvoc++) vSmallMeth();
            for (i11 = 8; i11 < 233; i11++) {
                for (i13 = i11; i13 < 112; ++i13) {
                    Test.iFld = (int)Test.instanceCount;
                    switch (((Test.iFld >>> 1) % 2) + 41) {
                    case 41:
                        i12 += i13;
                        i12 += (i13 * i13);
                        Test.iArrFld[i13 + 1] *= -131;
                    case 42:
                        i14 = -34;
                        for (i15 = 1; 1 > i15; i15++) {
                            short s=-24203;
                            switch ((i15 % 5) + 80) {
                            case 80:
                                i16 = -2;
                                i16 += (((i15 * Test.fFld) + Test.instanceCount) - i13);
                                s = (short)i12;
                                Test.instanceCount = s;
                                break;
                            case 81:
                                i16 = i16;
                                Test.instanceCount += (((i15 * i14) + i13) - Test.instanceCount);
                                Test.instanceCount += i15;
                            case 82:
                                i16 *= i15;
                                i16 = (int)Test.fFld;
                                Test.iFld >>>= (int)Test.instanceCount;
                                if (b1) continue;
                                break;
                            case 83:
                                dFld += dFld;
                            case 84:
                                Test.iArrFld[i11] += (int)Test.fFld;
                                Test.iFld = i11;
                                break;
                            }
                            i12 += i15;
                            i12 += 13878;
                        }
                        Test.instanceCount = i15;
                    default:
                        by ^= (byte)Test.instanceCount;
                    }
                }
            }
        } else {
            i14 += (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
