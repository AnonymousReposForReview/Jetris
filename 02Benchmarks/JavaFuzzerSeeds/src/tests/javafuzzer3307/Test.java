package tests.javafuzzer3307;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-7L;
    public static short sFld=-28414;
    public static byte byFld=-110;
    public static volatile int iFld=-194;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -33938L);
    }

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, boolean b1, float f) {

        int i6=18514, i7=13, i8=32581, i9=-6, i10=-41387, i11=-39469, i12=-5370, iArr[]=new int[N];
        double d1=2.18106, dArr[][]=new double[N][N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -45.100F);
        FuzzerUtils.init(iArr, -12232);
        FuzzerUtils.init(dArr, 0.8639);

        for (i6 = 15; i6 < 383; i6++) {
            fArr = fArr;
            b1 = b1;
            Test.instanceCount += (i6 ^ (long)f);
            iArr[i6] = (int)f;
        }
        dArr[(i7 >>> 1) % N][(i7 >>> 1) % N] += i6;
        switch (((i6 >>> 1) % 10) + 18) {
        case 18:
            for (i8 = 6; i8 < 356; i8++) {
                for (i10 = 1; i10 < 5; ++i10) {
                    double d=-104.27506;
                    i7 = (int)d;
                    i9 -= 143;
                    iArr[i10 - 1] *= i11;
                    Test.lArrFld[i10 + 1] -= -11L;
                    i12 += (i10 * i10);
                    iArr[i8] >>= (int)Test.instanceCount;
                }
            }
        case 19:
            Test.instanceCount -= i7;
            break;
        case 20:
            i12 = (int)-100L;
            break;
        case 21:
            d1 += i6;
            break;
        case 22:
            i7 >>= Test.sFld;
            break;
        case 23:
        case 24:
            Test.instanceCount = i5;
        case 25:
            iArr[(i8 >>> 1) % N] = (int)-59.25536;
            break;
        case 26:
            iArr[(i9 >>> 1) % N] += (int)Test.instanceCount;
            break;
        case 27:
            i7 = Test.byFld;
            break;
        default:
            Test.instanceCount -= i8;
        }
        vMeth1_check_sum += i5 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i4, boolean b) {

        float f1=-117.199F;
        int i13=-9, i14=14, i15=-26742, i16=-10, i17=-57807, i18=3, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 241);

        vMeth1(-21888, b, f1);
        for (i13 = 2; i13 < 190; i13++) {
            i4 = i14;
            if (b) continue;
            Test.sFld += Test.sFld;
            for (i15 = 1; i15 < 8; ++i15) {
                try {
                    i16 = (i15 / -252);
                    i14 = (982 / i17);
                    i16 = (i17 % i16);
                } catch (ArithmeticException a_e) {}
                i17 += (132 + (i15 * i15));
                i14 += (int)(3045807828L + (i15 * i15));
                iArr1[i15 - 1] = i13;
                Test.instanceCount = i15;
                i17 = i18;
                i17 = -13;
                i16 -= i18;
            }
            iArr1[i13 + 1] -= (int)Test.instanceCount;
        }
        vMeth_check_sum += i4 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth(int i2, int i3) {

        boolean b2=true;
        int i19=228, i20=-24885, i21=20960, i22=-43, i23=9674, i24=157;

        vMeth(i2, b2);
        for (i19 = 5; i19 < 121; i19++) {
            i2 -= (int)-74.90877;
        }
        i2 = i20;
        for (i21 = 3; 228 > i21; ++i21) {
            if (b2) break;
            i23 = 1;
            do {
                i22 -= i22;
                i24 = 1;
                do {
                    double d2=-1.53999;
                    i20 = (int)d2;
                    Test.byFld += (byte)i20;
                    i20 = (int)Test.instanceCount;
                    d2 += i20;
                    i2 *= i20;
                    i2 = i3;
                } while (++i24 < 1);
            } while (++i23 < 7);
        }
        long meth_res = i2 + i3 + (b2 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=47785, i25=151, i26=-57479, i27=-7, i28=153, i29=-12306, i30=-162, i31=10, i32=77, i34=10,
            iArr2[]=new int[N];
        double d3=0.82821;
        float f2=-1.402F, fArr1[]=new float[N];
        long l=23436L;

        FuzzerUtils.init(iArr2, -9);
        FuzzerUtils.init(fArr1, -1.149F);

        for (i = 348; i > 7; --i) {
            Test.instanceCount -= (--i1);
            switch (((i % 1) * 5) + 19) {
            case 20:
                Test.lArrFld[i] = ((++i1) + byMeth(i, i));
                i1 >>= 64;
                switch ((i % 6) + 18) {
                case 18:
                    for (i25 = 74; i25 > i; --i25) {
                        i1 = i25;
                        i26 -= -4;
                    }
                    d3 = 34.227F;
                    for (i27 = 1; i27 < 74; ++i27) {
                        try {
                            i26 = (i1 % -93);
                            i26 = (-51022 % i);
                            i28 = (i26 / iArr2[i - 1]);
                        } catch (ArithmeticException a_e) {}
                        for (i29 = i27; i29 < 2; i29++) {
                            i1 -= i30;
                            f2 = i27;
                            i28 -= (int)d3;
                            f2 += i28;
                            Test.instanceCount = Test.byFld;
                            Test.iFld *= i28;
                            i26 *= (int)d3;
                            Test.iFld = i;
                        }
                    }
                    break;
                case 19:
                    for (i31 = 3; 74 > i31; i31++) {
                        int i33=-23498;
                        i30 = (int)1438818430L;
                        i33 += (i31 * Test.instanceCount);
                    }
                    break;
                case 20:
                    i34 = 1;
                    while (++i34 < 74) {
                        l = 1;
                        do {
                            Test.instanceCount *= l;
                            iArr2[i34] = (int)Test.instanceCount;
                            d3 += i25;
                            i1 += i25;
                        } while (++l < 1);
                    }
                case 21:
                    fArr1[i + 1] -= Test.instanceCount;
                    break;
                case 22:
                    Test.lArrFld[i] &= Test.byFld;
                case 23:
                    d3 = f2;
                    break;
                }
                break;
            default:
                i28 += (185 + (i * i));
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
