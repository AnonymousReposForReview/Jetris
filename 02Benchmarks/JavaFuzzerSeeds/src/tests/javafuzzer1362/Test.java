package tests.javafuzzer1362;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:47:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=48851L;
    public static byte byFld=39;
    public int iFld=42503;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 16272);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7, int i8) {

        int i9=36595, i10=195, i11=140, i12=37, i13=-131, i14=-624, i15=59800, iArr[]=new int[N];
        boolean b1=false;
        byte by=115;
        float f=43.567F;

        FuzzerUtils.init(iArr, -8);

        i9 = 389;
        do {
            if (b1) {
                i7 -= (int)Test.instanceCount;
                for (i10 = 1; 8 > i10; ++i10) {
                    Test.instanceCount <<= 5928327561589064614L;
                    try {
                        i11 = (iArr[i10 - 1] / 161);
                        iArr[i9 + 1] = (-126 / i10);
                        i6 = (-115 / i8);
                    } catch (ArithmeticException a_e) {}
                    b1 = b1;
                    i11 *= by;
                    for (i12 = 1; i12 < 2; i12++) {
                        f *= i10;
                        iArr[i10] >>= i8;
                    }
                    for (i14 = 1; i14 < 2; i14++) {
                        Test.instanceCount >>= 179;
                        i11 += (i14 * i14);
                        i15 *= 11;
                    }
                }
            }
        } while ((i9 -= 2) > 0);
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + by + i12 + i13 + Float.floatToIntBits(f) +
            i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i3) {

        int i4=-32258, i5=-97, i16=60278, i17=7248, i18=13, i19=52230, i20=-156, i21=13, iArr1[]=new int[N];
        float f1=-4.391F;

        FuzzerUtils.init(iArr1, -39);

        for (i4 = 22; i4 < 379; i4++) {
            i5 = i3;
            vMeth2(i4, 130, i3);
            i5 = i5;
            for (i16 = i4; i16 < 5; i16++) {
                i5 = i3;
                for (i18 = i16; i18 < 1; i18++) {
                    i3 = 25033;
                    Test.instanceCount = i18;
                    iArr1[i4] >>>= i19;
                    Test.instanceCount = Test.instanceCount;
                }
                i17 += (-7 + (i16 * i16));
            }
        }
        for (i20 = 3; 344 > i20; ++i20) {
            if (i21 != 0) {
                vMeth1_check_sum += i3 + i4 + i5 + i16 + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
            f1 += Test.instanceCount;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i16 + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, boolean b) {

        int i1=5, i2=-192, i22=-26700, i23=-17703, i24=-215;
        double d=-2.98250;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 69.500F);

        for (i1 = 7; i1 < 393; ++i1) {
            vMeth1(-12);
            i = i2;
            i >>= Test.byFld;
            Test.iArrFld = Test.iArrFld;
            for (i22 = i1; i22 < 4; ++i22) {
                Test.instanceCount >>= i23;
                i24 = 1;
                do {
                    float f2=0.728F;
                    fArr[i1] *= i24;
                    d -= i24;
                    switch ((i24 % 2) + 15) {
                    case 15:
                        f2 = 183;
                        d = f2;
                        i += (i24 | (long)f2);
                        break;
                    case 16:
                    }
                    i2 += (i24 * i24);
                } while (++i24 < 1);
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i1 + i2 + i22 + i23 + i24 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        boolean b2=false;

        vMeth(iFld, b2);
        Test.iArrFld[(iFld >>> 1) % N] -= (int)Test.instanceCount;
        if (b2) {
            iFld = -178;
        } else if (b2) {
            iFld = Test.byFld;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
