package tests.javafuzzer820;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:22:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-162L;
    public static volatile short sFld=18030;
    public static boolean bFld=false;
    public static double dFld=-29.128070;
    public static volatile int iFld=-55661;
    public volatile int iFld1=-207;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, long l2) {

        int i4=180, i5=3, i6=130, i7=-108, i8=51, i9=-250, iArr1[]=new int[N];
        double d=36.43105;
        float f2=96.642F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -36021L);
        FuzzerUtils.init(iArr1, -13397);

        lArr1[(i3 >>> 1) % N][(i3 >>> 1) % N] /= (long)-25.29639;
        for (i4 = 7; i4 < 159; ++i4) {
            i6 = 1;
            while (++i6 < 10) {
                for (i7 = 1; 1 > i7; i7 += 2) {
                    i3 -= i5;
                    i5 *= 165;
                    switch (((i7 % 7) * 5) + 89) {
                    case 109:
                        switch ((i4 % 1) + 71) {
                        case 71:
                            i3 += i8;
                            break;
                        default:
                            lArr1[i7 - 1][i7 + 1] += i8;
                            i9 += i7;
                            i9 *= 191;
                        }
                        i8 += i7;
                        Test.sFld = (short)i8;
                    case 102:
                        i8 -= (int)Test.instanceCount;
                        break;
                    case 95:
                        d = i8;
                        break;
                    case 105:
                        iArr1[i6 - 1] = i4;
                        break;
                    case 100:
                        i3 += -32658;
                    case 108:
                        f2 += i7;
                        break;
                    case 111:
                        l2 *= i5;
                        break;
                    default:
                        if (i7 != 0) {
                        }
                    }
                }
            }
        }
        long meth_res = i3 + l2 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, float f1, long l1) {

        int i10=30, i11=-9, i12=-30, i13=0, i14=8, i15=13760;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 31816L);
        FuzzerUtils.init(byArr, (byte)55);

        i2 -= (int)(lArr[(i2 >>> 1) % N]++);
        byArr[(i2 >>> 1) % N] += (byte)iMeth(i2, Test.instanceCount);
        for (i10 = 19; i10 < 381; i10++) {
            for (i12 = 1; i12 < 5; i12++) {
                for (i14 = 2; i14 > 1; --i14) {
                    i15 += (i14 * i14);
                    i15 = i13;
                    byArr[i12] &= (byte)i12;
                    i15 -= i11;
                    i11 |= (int)4754189727144615912L;
                    i13 = i15;
                }
                i15 = 87;
                l1 -= i11;
                f1 = i2;
                i13 += i10;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + l1 + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i1) {

        float f3=-1.994F;
        int i16=163, i17=-16857, i18=-13, i19=-10, i20=-2, iArr2[]=new int[N];
        double d1=-1.46272, d2=2.96723;

        FuzzerUtils.init(iArr2, -6);

        i1 -= (int)(-121 + lMeth(i1, f3, -5L));
        for (i16 = 382; i16 > 15; i16 -= 3) {
            d1 = 47376;
            switch ((i16 % 2) + 121) {
            case 121:
                Test.bFld = Test.bFld;
                l = i1;
                for (i18 = 13; i18 > 1; --i18) {
                    iArr2 = iArr2;
                    for (d2 = 1; d2 < 2; d2++) {
                        if (Test.bFld) {
                            try {
                                i20 = (i17 % i1);
                                i1 = (i16 % i1);
                                i20 = (i20 % i19);
                            } catch (ArithmeticException a_e) {}
                        } else {
                            Test.instanceCount = i1;
                            i1 -= i1;
                            iArr2[i16 - 1] = (int)l;
                            Test.instanceCount |= i16;
                        }
                    }
                }
                break;
            case 122:
                i1 *= i19;
            }
        }
        vMeth_check_sum += l + i1 + Float.floatToIntBits(f3) + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 +
            Double.doubleToLongBits(d2) + i20 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=1946, i21=218, i22=41, i23=-28345, i24=-11, iArr[]=new int[N];
        float f=-63.869F, f4=75.444F;
        byte by=-98;
        long l3=1283675211L;

        FuzzerUtils.init(iArr, -63382);

        iArr[(27780 >>> 1) % N] = (int)(((-18349 + (Test.instanceCount - i)) - Math.min(i, i)) - ((-(f -
            Test.instanceCount)) * (--i)));
        vMeth(39360L, -13667);
        for (f4 = 8; f4 < 151; ++f4) {
            for (i22 = (int)(f4); i22 < 175; ++i22) {
                switch (((i22 >>> 1) % 2) + 45) {
                case 45:
                    by += (byte)i22;
                    i21 += i22;
                    Test.instanceCount = Test.instanceCount;
                    i21 += i21;
                    break;
                case 46:
                    i24 = 1;
                    while (++i24 < 1) {
                        f += Test.instanceCount;
                        Test.instanceCount += (i24 | i);
                        i23 = 15;
                        Test.instanceCount -= (long)Test.dFld;
                        l3 = i23;
                        iArr[i24] -= (int)Test.dFld;
                        switch (((i22 >>> 1) % 9) + 25) {
                        case 25:
                            Test.iFld += (i24 * i24);
                            break;
                        case 26:
                            i21 = (int)Test.instanceCount;
                        case 27:
                            iFld1 += iFld1;
                            Test.iFld = i;
                        case 28:
                            Test.bFld = Test.bFld;
                            l3 -= i21;
                            Test.iFld += (((i24 * iFld1) + l3) - l3);
                            break;
                        case 29:
                            if (Test.bFld) continue;
                            break;
                        case 30:
                            if (Test.bFld) continue;
                            Test.iFld = Test.iFld;
                            Test.dFld = l3;
                            Test.sFld += (short)(i24 * i24);
                        case 31:
                            f *= i24;
                            break;
                        case 32:
                            i23 += i24;
                            break;
                        case 33:
                            i += i24;
                            break;
                        default:
                            i23 >>= i21;
                        }
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
