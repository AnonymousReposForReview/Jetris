package tests.javafuzzer1589;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:24:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static volatile int iFld=-58604;
    public static float fFld=-2.761F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 107);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f) {

        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1041453036398227961L);

        lArr1[(Test.iFld >>> 1) % N] %= (0 | 1);
        vMeth_check_sum += Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i2) {

        long l=-432271419L, l1=2L;
        int i3=-63, i4=-43306, i5=64109, i6=-6;
        byte by=46;

        vMeth(Test.fFld);
        Test.bFld = Test.bFld;
        l = 1;
        do {
            Test.iFld = 1;
            Test.iFld += (int)(l * l);
        } while (++l < 398);
        for (l1 = 2; l1 < 179; l1++) {
            for (i4 = 1; i4 < 9; i4++) {
                by += (byte)i4;
                Test.iArrFld[i4] = (int)Test.instanceCount;
                Test.instanceCount ^= -223;
                i2 = i4;
                i6 = 1;
                do {
                    try {
                        i3 = (i2 % 1003329857);
                        Test.iArrFld[i6] = (i3 % 22533);
                        i2 = (i6 % -57);
                    } catch (ArithmeticException a_e) {}
                    i3 += i6;
                    Test.fFld -= l;
                } while (++i6 < 2);
            }
        }
        long meth_res = i2 + l + l1 + i3 + i4 + i5 + by + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i1) {

        int i7=-5, i8=56610, i9=-20525, i10=-210, i11=88;
        double d=2.19065, dArr[]=new double[N];
        short s=1748;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -39.113840);
        FuzzerUtils.init(lArr, 34877L);

        dArr[(i1 >>> 1) % N] -= Math.max((int)((-lArr[(i1 >>> 1) % N]) - (Test.instanceCount + i1)), Test.iFld +
            iMeth(i1));
        Test.iFld = i1;
        for (i7 = 186; i7 > 8; i7 -= 2) {
            i9 = 1;
            while ((i9 += 2) < 17) {
                d -= s;
                Test.instanceCount = 4;
                Test.iFld = i9;
                i1 = (int)d;
                Test.instanceCount >>>= i1;
                for (i10 = 1; 3 > i10; ++i10) {
                    Test.iFld = (int)Test.instanceCount;
                    lArr[i7 - 1] = Test.instanceCount;
                    i11 -= i7;
                    Test.iFld &= i1;
                    lArr[i9] = 30000L;
                }
            }
        }
        long meth_res = i1 + i7 + i8 + i9 + Double.doubleToLongBits(d) + s + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-22075, i12=182, i13=-117, i14=3, i15=74, i16=-72, i17=-31, i18=81, i19=-49396, i20=-12;
        double d1=74.112904, d2=57.1280, dArr1[]=new double[N];
        float f1=-98.7F;

        FuzzerUtils.init(dArr1, 53.15152);

        Test.instanceCount += (i--);
        Test.iArrFld[(i >>> 1) % N] = (int)((fMeth(-8) + Test.instanceCount) - i);
        for (d1 = 10; d1 < 326; ++d1) {
            byte by1=-36;
            i12 = by1;
            i12 = (int)Test.fFld;
            Test.iFld = (int)4014561833L;
            for (i13 = 80; i13 > 5; i13 -= 2) {
                Test.instanceCount += i13;
                i -= (int)Test.instanceCount;
                Test.iFld = i13;
                by1 = (byte)Test.instanceCount;
                i15 = 1;
                while (++i15 < 3) {
                    i14 <<= i12;
                    d2 *= i15;
                }
                for (i16 = 1; i16 < 3; i16++) {
                    i14 = i16;
                    Test.iFld *= -16159;
                    i17 <<= (int)Test.instanceCount;
                    i17 -= (int)-180L;
                }
                dArr1[(int)(d1 + 1)] -= by1;
                Test.iFld *= i15;
                by1 += (byte)(((i13 * i15) + Test.fFld) - i);
                Test.iFld = (int)Test.instanceCount;
            }
            i14 += (int)(d1 - Test.instanceCount);
        }
        i14 += i;
        for (f1 = 2; f1 < 189; ++f1) {
            Test.iArrFld[(int)(f1 - 1)] *= i14;
            for (i19 = 2; i19 < 134; ++i19) {
                i20 -= i16;
                i += (int)d1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
