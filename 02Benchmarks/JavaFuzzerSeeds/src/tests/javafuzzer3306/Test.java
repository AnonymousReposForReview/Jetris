package tests.javafuzzer3306;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2234221990L;
    public static volatile boolean bFld=true;
    public static short sFld=28868;
    public byte byFld=-65;
    public double dFld=-95.112428;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, int i3) {

        int i4=-14241, i5=24168, i6=12, i7=184, i8=50;
        boolean b=true;

        Test.iArrFld = Test.iArrFld;
        for (i4 = 8; 225 > i4; i4++) {
            i6 = 1;
            while (++i6 < 7) {
                for (i7 = 1; i7 > 1; --i7) {
                    i3 -= (int)Test.instanceCount;
                    if (i6 != 0) {
                    }
                    i8 *= i4;
                    i5 -= i7;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount *= i5;
                    i5 = i2;
                    i8 = i2;
                    i3 *= i6;
                    if (b) continue;
                }
                i2 <<= i7;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(short s) {

        byte by=-72;
        int i9=0, i10=-123, i11=2473, iArr[]=new int[N];
        float f=-2.674F;

        FuzzerUtils.init(iArr, -224);

        for (int i1 : iArr) {
            lMeth(i1, i1);
            by = (byte)-25L;
            for (i9 = 1; i9 < 4; i9 += 2) {
                i10 += (i9 ^ by);
                i10 = i1;
                i10 -= i1;
                i11 = 1;
                do {
                    if (Test.bFld) break;
                    i1 -= (int)f;
                    i10 = i11;
                    if (i9 != 0) {
                    }
                    i10 %= -3;
                } while (++i11 < 4);
                i10 = s;
                i1 += (((i9 * i1) + by) - i1);
            }
        }
        long meth_res = s + by + i9 + i10 + i11 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=-9, i12=184, i13=-40448, i14=195, i15=2, i16=-35, i17=-28;
        double d=55.68254;
        byte by1=115;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3247864847040180817L);

        i *= (int)(i + (d - iMeth(Test.sFld)));
        i12 = 1;
        do {
            i13 = 1;
            do {
                i += (((i13 * i) + i) - i13);
                Test.iArrFld[i13 - 1] += (int)Test.instanceCount;
                switch (((i13 >>> 1) % 5) + 60) {
                case 60:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 61:
                    Test.instanceCount = by1;
                    for (i14 = 1; i14 < 5; ++i14) {
                        i += (-36751 + (i14 * i14));
                        if (Test.bFld) continue;
                    }
                    for (i16 = 1; 5 > i16; ++i16) {
                        Test.iArrFld[i12] *= i;
                        lArr[i13 - 1] = i14;
                        i15 -= (int)Test.instanceCount;
                    }
                case 62:
                    i15 <<= i13;
                    break;
                case 63:
                    i15 += (i13 * i13);
                    break;
                case 64:
                    i17 >>= i13;
                    break;
                default:
                    i15 -= i15;
                }
            } while ((i13 += 3) < 5);
        } while (++i12 < 369);
        vMeth_check_sum += i + Double.doubleToLongBits(d) + i12 + i13 + by1 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=143, i19=134, i20=61473, i21=-3, i22=10, i23=-63618, i24=-5, i25=8;
        float f1=-98.813F;

        vMeth();
        for (i18 = 6; i18 < 162; i18++) {
            i19 -= (int)Test.instanceCount;
            for (i20 = i18; i20 < 161; i20++) {
                i21 >>= Test.sFld;
                for (i22 = 1; i22 < 1; ++i22) {
                    byFld -= (byte)i22;
                }
                Test.bFld = false;
            }
            f1 -= -57;
        }
        Test.instanceCount >>= i23;
        i23 *= i21;
        i24 = 205;
        while (--i24 > 0) {
            f1 *= i18;
            if (Test.bFld) break;
            Test.instanceCount += (((i24 * i21) + i23) - i24);
            Test.instanceCount -= (long)dFld;
            i23 += (((i24 * i23) + byFld) - Test.instanceCount);
            Test.instanceCount = (long)f1;
            i19 = i18;
            Test.iArrFld[i24] -= (int)Test.instanceCount;
            byFld = (byte)i21;
            f1 -= 53969;
        }
        i21 += i24;
        i25 = 1;
        while (++i25 < 294) {
            i23 -= i20;
            i21 = i18;
            i23 += (int)Test.instanceCount;
            i21 += i25;
            i23 = (int)Test.instanceCount;
            i19 /= 13;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
