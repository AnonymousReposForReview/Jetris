package tests.javafuzzer1517;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:01:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-147L;
    public static double dFld=-38.109510;
    public static int iFld=-10;
    public static short sFld=17045;
    public byte byFld=-48;
    public float fFld=88.90F;
    public double dFld1=-1.61785;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f1=0.230F;
        int i6=4, i7=-18484, i8=11, i9=-44677, i10=-19493, iArr2[][]=new int[N][N], iArr3[]=new int[N], iArr4[][]=new
            int[N][N];

        FuzzerUtils.init(iArr2, -17786);
        FuzzerUtils.init(iArr3, 1640);
        FuzzerUtils.init(iArr4, -51723);

        f1 += Test.iFld;
        for (i6 = 7; i6 < 128; ++i6) {
            switch ((((4 >>> 1) % 2) * 5) + 50) {
            case 52:
            case 55:
                Test.instanceCount -= 4;
                for (i8 = 13; i8 > 1; i8 -= 3) {
                    f1 *= Test.instanceCount;
                    i9 += (i8 - Test.instanceCount);
                    iArr2[i8 - 1][i6] -= (int)f1;
                    Test.dFld += Test.sFld;
                }
                break;
            default:
                i10 = 13;
                while ((i10 -= 3) > 0) {
                    Test.iFld *= Test.iFld;
                }
            }
            i7 += (((i6 * i9) + Test.instanceCount) - i8);
            i7 -= i9;
        }
        Test.instanceCount = 59;
        iArr4 = FuzzerUtils.int2array(N, (int)-102);
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i2=29808, i3=9, i4=-235, i5=-37910, i12=13, i13=7, i14=-9, i15=1413, i16=36397, iArr5[]=new int[N];
        float f2=0.183F, fArr[]=new float[N];
        byte by=126, byArr[]=new byte[N];

        FuzzerUtils.init(iArr5, -3);
        FuzzerUtils.init(fArr, 2.891F);
        FuzzerUtils.init(byArr, (byte)-84);

        for (i2 = 9; i2 < 200; i2++) {
            for (i4 = 1; i4 < 8; ++i4) {
                Test.dFld -= iMeth1();
            }
            Test.instanceCount += (((i2 * Test.sFld) + i4) - i4);
            Test.iFld = i3;
        }
        Test.instanceCount = 11;
        i3 = i2;
        switch (((4 >>> 1) % 9) + 34) {
        case 34:
            for (i12 = 8; i12 < 352; i12++) {
                i3 = (int)f2;
                switch ((i12 % 7) + 42) {
                case 42:
                    for (i14 = 5; i14 > 1; --i14) {
                        Test.instanceCount -= Test.instanceCount;
                        i13 *= Test.sFld;
                        Test.instanceCount += i14;
                    }
                    break;
                case 43:
                    Test.instanceCount += Test.sFld;
                    break;
                case 44:
                    Test.instanceCount = (long)f2;
                    break;
                case 45:
                    i13 = i13;
                case 46:
                case 47:
                    iArr5[i12 + 1] -= i3;
                    break;
                case 48:
                    by /= (byte)(i12 | 1);
                    break;
                }
            }
            break;
        case 35:
            i3 >>= i12;
            break;
        case 36:
            i3 -= (int)52753L;
            break;
        case 37:
            fArr[(-245 >>> 1) % N] += Test.iFld;
            break;
        case 38:
            Test.iFld = (int)Test.instanceCount;
        case 39:
            i16 ^= i3;
            break;
        case 40:
            byArr[(i4 >>> 1) % N] *= (byte)f2;
        case 41:
            Test.dFld += by;
        case 42:
            Test.iFld = (int)-18.261F;
            break;
        }
        long meth_res = i2 + i3 + i4 + i5 + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 + by + i16 +
            FuzzerUtils.checkSum(iArr5) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i1=2, i17=192, i18=4, i19=3171, i20=4, i21=5097, i22=-102, i23=49190, i24=11, iArr1[]=new int[N];
        double d=-2.397;
        float f=2.346F;

        FuzzerUtils.init(iArr1, -48842);

        i1 <<= i1;
        d = d;
        i1 = (int)(++f);
        iArr1[(i1 >>> 1) % N] -= (iArr1[(i1 >>> 1) % N] + iMeth());
        for (i17 = 5; 396 > i17; i17 += 3) {
            switch ((i17 % 2) + 125) {
            case 125:
                Test.iFld = i17;
                for (i19 = 1; i19 < 12; i19++) {
                    for (i21 = 1; i21 < 2; i21++) {
                        i22 <<= 31826;
                    }
                    i22 += (((i19 * Test.iFld) + i20) - i20);
                    i22 = (int)3805794849L;
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.instanceCount *= Test.instanceCount;
                        i18 = (int)Test.instanceCount;
                    }
                }
            case 126:
                i1 = i1;
                break;
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 + i21 +
            i22 + i23 + i24 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=4, i25=9875, i26=-10, i27=200, i28=3, i29=12, i30=159, i31=-252, i32=66, i33=48241, i34=-4, i35=29015,
            i36=155, iArr[][]=new int[N][N];
        short s=-3020;
        long l=-3L, l1=12L;
        boolean b=false;

        FuzzerUtils.init(iArr, 2);

        iArr[(i >>> 1) % N][(5 >>> 1) % N] = (i - s);
        i = (i++);
        vMeth();
        for (i25 = 10; i25 < 186; ++i25) {
            if (false) continue;
            for (i27 = 2; 143 > i27; ++i27) {
                Test.instanceCount += i27;
                iArr[i27][i25] = i27;
                byFld += (byte)(i27 * i27);
                fFld *= i;
                try {
                    Test.iFld = (Test.iFld / i25);
                    i28 = (iArr[i27 + 1][i25] % Test.iFld);
                    Test.iFld = (iArr[i25 + 1][i27 - 1] / Test.iFld);
                } catch (ArithmeticException a_e) {}
                i26 += (i27 | l);
            }
            i29 += (((i25 * Test.iFld) + Test.instanceCount) - i25);
        }
        Test.dFld += fFld;
        for (i30 = 7; i30 < 227; i30++) {
            iArr[i30] = iArr[i30];
            i = i27;
            Test.sFld *= (short)46354;
            for (i32 = 2; 114 > i32; i32++) {
                iArr[i30 + 1][i32 + 1] = (int)Test.dFld;
            }
            i33 += (i30 * i30);
            Test.instanceCount -= i;
            dFld1 += i;
        }
        for (i34 = 15; i34 < 360; i34++) {
            for (l1 = 2; l1 < 73; l1++) {
                if (b) break;
                i35 *= (int)l1;
                iArr[(int)(l1)][(int)(l1 + 1)] = i27;
            }
            Test.instanceCount *= i32;
            if (b) continue;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
