package tests.javafuzzer1111;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=89L;
    public static byte byFld=53;
    public short sFld=29705;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.823F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i7=5, i8=-12, i9=-62500;
        float f1=-96.263F;
        boolean b=false;
        short s=-25777;

        i7 += (int)f1;
        i7 = i7;
        for (i8 = 12; i8 < 348; i8++) {
            switch (((i8 % 1) * 5) + 61) {
            case 65:
                if (b) {
                    i9 *= i7;
                    i7 += (int)Test.instanceCount;
                } else {
                    i9 = (int)Test.instanceCount;
                }
                Test.instanceCount -= (long)f1;
                s = (short)i8;
            }
            f1 -= s;
            Test.instanceCount *= i7;
            Test.fArrFld[i8 - 1] -= Test.byFld;
            i9 += (i8 * i8);
            i7 += (i8 * s);
        }
        vMeth2_check_sum += i7 + Float.floatToIntBits(f1) + i8 + i9 + (b ? 1 : 0) + s;
    }

    public static void vMeth1() {

        int i3=3376, i4=53064, i5=11, i6=1961, i10=-47674, i11=-114, iArr1[][]=new int[N][N];
        float f=0.517F;
        short s1=31078;

        FuzzerUtils.init(iArr1, 9);

        for (i3 = 9; i3 < 382; i3++) {
            i5 = 1;
            do {
                if ((-i5) != Math.abs((int)(-(f * Test.instanceCount)))) continue;
                i4 = i6;
                vMeth2();
                switch (((i6 >>> 1) % 6) + 34) {
                case 34:
                    for (i10 = i3; i10 < 1; ++i10) {
                        i6 = (int)Test.instanceCount;
                        iArr1 = iArr1;
                        switch (((i10 % 2) * 5) + 117) {
                        case 122:
                            Test.instanceCount += 0;
                            switch ((i3 % 9) + 113) {
                            case 113:
                                Test.instanceCount += (7629700261904076286L + (i10 * i10));
                                i6 = -91;
                                break;
                            case 114:
                                i4 = i11;
                            case 115:
                                f += 0;
                                break;
                            case 116:
                                try {
                                    i4 = (i10 % -48054);
                                    i4 = (i10 / 218);
                                    i6 = (10 % iArr1[i3][i5 - 1]);
                                } catch (ArithmeticException a_e) {}
                            case 117:
                                i6 += (((i10 * i5) + i5) - i6);
                                break;
                            case 118:
                                i6 -= i10;
                                break;
                            case 119:
                                Test.fArrFld[i10] = -5638;
                                break;
                            case 120:
                                Test.instanceCount += i5;
                                break;
                            case 121:
                                Test.instanceCount -= -1163058605712272490L;
                            }
                            break;
                        case 123:
                            i4 += i10;
                            break;
                        }
                    }
                case 35:
                    try {
                        i4 = (i5 / iArr1[i3 + 1][i5 + 1]);
                        i4 = (i4 % 48782);
                        i6 = (i11 % i6);
                    } catch (ArithmeticException a_e) {}
                case 36:
                    i11 = (int)Test.instanceCount;
                    break;
                case 37:
                    i11 = i6;
                case 38:
                    Test.instanceCount = (long)f;
                    break;
                case 39:
                    iArr1[i5 + 1][i3 + 1] = s1;
                    break;
                }
            } while (++i5 < 5);
        }
        vMeth1_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i10 + i11 + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, int i2, long l) {

        long l1=12439418L;
        int i12=5858, i13=-42041, i14=-48507, i15=162, iArr2[]=new int[N];
        float f2=0.760F;
        double d=-81.108582;
        boolean b1=true;

        FuzzerUtils.init(iArr2, 31985);

        vMeth1();
        iArr2[(i2 >>> 1) % N] -= (int)-1.337F;
        for (l1 = 5; 392 > l1; l1++) {
            i13 = 1;
            while (++i13 < 4) {
                f2 -= 57188;
                i12 += (-21116 + (i13 * i13));
                d = i12;
            }
            for (i14 = (int)(l1); i14 < 4; ++i14) {
                l -= i14;
                i2 <<= i13;
                i12 *= 0;
                iArr2 = iArr2;
            }
            i2 *= 136;
            if (b1) continue;
            i1 += (int)l1;
        }
        vMeth_check_sum += i1 + i2 + l + l1 + i12 + i13 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i14 +
            i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=7911, i16=-12, i17=-34, i18=58989, i19=-12, i20=34457, i21=60209, i22=58110, i23=12, iArr[]=new int[N];
        float f3=-2.574F;
        double d1=-36.87131, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 53.107651);
        FuzzerUtils.init(iArr, 59285);
        FuzzerUtils.init(lArr, -5L);

        i -= (int)((--Test.instanceCount) + (++i));
        dArr[(-155 >>> 1) % N] -= Math.abs(iArr[(i >>> 1) % N]++);
        vMeth(i, i, Test.instanceCount);
        Test.instanceCount = i;
        i += i;
        for (i16 = 312; i16 > 18; i16 -= 3) {
            for (i18 = 14; i18 < 256; i18 += 2) {
                Test.byFld = (byte)i;
                i20 = 1;
                do {
                    i19 <<= i18;
                    f3 *= i18;
                } while (++i20 < 3);
                i21 = 1;
                do {
                    iArr[i18 + 1] = (int)1154717181L;
                    i19 += (int)-113L;
                    i17 += (i21 * i21);
                    lArr[i21] = (long)f3;
                    iArr[i16 - 1] -= (int)d1;
                    Test.instanceCount = i16;
                    switch (((i16 % 2) * 5) + 13) {
                    case 14:
                        Test.byFld = (byte)i;
                        sFld = (short)d1;
                        break;
                    case 21:
                        i17 += (i21 ^ i20);
                        sFld += (short)1.10007;
                        i17 += i21;
                    default:
                        lArr[i18] = i18;
                        i -= (int)Test.instanceCount;
                        Test.instanceCount += (((i21 * i20) + Test.instanceCount) - Test.instanceCount);
                    }
                } while (++i21 < 3);
                for (i22 = 1; 3 > i22; i22++) {
                    f3 = Test.instanceCount;
                    iArr[i16 + 1] >>= i23;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
