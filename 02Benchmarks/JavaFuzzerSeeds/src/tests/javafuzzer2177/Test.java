package tests.javafuzzer2177;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:45:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static int iFld=14;
    public static float fFld=89.620F;
    public static short sFld=-30891;
    public static long lFld=0L;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth(int i2, float f1, short s1) {


        i2 = (int)((-156L / (Test.iFld | 1)) - ((Test.instanceCount++) + (--i2)));
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + s1;
    }

    public static int iMeth() {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -81L);

        lArr[(Test.iFld >>> 1) % N] -= (((--Test.instanceCount) + (75 * (Test.iFld + 5L))) + (Test.iFld >>=
            (int)(-43129 * (++Test.instanceCount))));
        long meth_res = FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        int i11=-77, i12=101, i13=19669, i14=47352, i15=-60540, i16=12, i17=12, i18=8, iArr1[]=new int[N];
        boolean b1=true;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, -29222);
        FuzzerUtils.init(lArr2, 66L);

        Test.iFld -= Test.iFld;
        iArr1[(Test.iFld >>> 1) % N] = Test.iFld;
        for (int i10 : iArr1) {
            for (i11 = 1; i11 < 4; ++i11) {
                i10 += (i11 - i10);
                i12 += (((i11 * Test.sFld) + Test.instanceCount) - Test.fFld);
            }
            for (i13 = 1; i13 < 4; ++i13) {
                if (b1) continue;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.instanceCount >>>= i12;
                    Test.instanceCount += (long)Test.fFld;
                }
                Test.fFld = Test.instanceCount;
                for (i17 = i13; i17 < 2; i17++) {
                    lArr2[i13] *= i17;
                    Test.instanceCount = Test.sFld;
                }
            }
        }
        vMeth2_check_sum += i11 + i12 + i13 + i14 + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth1(int i4, int i5, double d1) {

        int i6=9097, i7=-118, i8=-168, i9=-209, i19=46, iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2893980797L);
        FuzzerUtils.init(iArr, -1);

        Test.iFld -= (int)(-((i4 + Test.instanceCount) - (i5 * Test.iFld)));
        for (i6 = 2; i6 < 175; ++i6) {
            i7 = Math.min(i6, (int)((Test.instanceCount * -2) * (i6 * d1)));
            Test.instanceCount >>= (long)(((i6 + Test.iFld) - -125.245F) - (--lArr1[i6 + 1]));
            i4 += (int)(Test.fFld *= Math.abs(i6));
            i7 += Test.iFld;
            for (i8 = 1; 9 > i8; i8++) {
                Test.fFld += (i8 + i8);
                switch ((i8 % 1) + 42) {
                case 42:
                    i7 *= (++iArr[i8 - 1]);
                    vMeth2();
                    break;
                default:
                    i19 = -112;
                }
                Test.instanceCount = Test.sFld;
                i4 -= i19;
                i5 /= (int)(i6 | 1);
            }
        }
        vMeth1_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i19 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
    }

    public static byte byMeth(int i3) {

        double d2=-1.81931, d3=-102.109637;
        int i20=-30374, i21=159, i22=-59, i23=-8, iArr2[]=new int[N];
        boolean b2=false;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, -1359784574L);
        FuzzerUtils.init(iArr2, 34441);

        vMeth1(10, Test.iFld, d2);
        for (i20 = 16; i20 < 366; i20++) {
            for (i22 = i20; i22 < 5; ++i22) {
                i3 *= i20;
                i3 &= (int)Test.lFld;
                d3 = 1;
                while (++d3 < 1) {
                    Test.iFld = i21;
                    lArr3[(int)(d3 - 1)] = Test.lFld;
                    iArr2[(12888 >>> 1) % N] = i3;
                    i23 += (int)(d3 * i23);
                    switch (((i22 % 2) * 5) + 118) {
                    case 121:
                        b2 = true;
                        i23 >>>= i23;
                        i21 += (int)(d3 * d3);
                        break;
                    case 120:
                        Test.iFld -= i20;
                        break;
                    }
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d2) + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d3) + (b2 ?
            1 : 0) + FuzzerUtils.checkSum(lArr3) + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        float f=-112.664F, f2=-87.521F, fArr[]=new float[N];
        short s=-29565;
        int i=14896, i1=-226, i24=-76, i25=-164, i26=-131, i27=-34, i28=-243, i29=-141, i30=-181;
        double d=-111.30825;
        long l=-11L, lArr4[]=new long[N];
        byte by=-121;

        FuzzerUtils.init(fArr, 87.961F);
        FuzzerUtils.init(lArr4, -1293279975L);

        b = b;
        Test.iFld = (int)((--f) - ((Test.iFld << Test.iFld) - Test.instanceCount));
        Test.instanceCount -= (long)((s--) * ((Test.iFld + Test.instanceCount) + (Test.instanceCount + f)));
        for (i = 10; i < 253; i++) {
            fArr = (fArr = fArr);
            s += (short)(-((133 * (-95.53320 / (((long)(1480610924L + (-47240 + (d - s)))) | 1))) - s));
            vMeth(Test.iFld - -18775, ((i1 >>>= 3) - 56149) - Test.instanceCount, (short)((iArrFld[i + 1] - iMeth()) +
                byMeth(Test.iFld)));
            for (f2 = 4; f2 < 103; f2++) {
                try {
                    i1 = (17259 % iArrFld[i]);
                    i1 = (i % iArrFld[(int)(f2)]);
                    iArrFld[i + 1] = (i1 % i24);
                } catch (ArithmeticException a_e) {}
                for (i25 = (int)(f2); i25 < 2; i25 += 3) {
                    f = Test.lFld;
                }
                lArr4[(int)(f2 - 1)] *= Test.iFld;
            }
            i1 = i26;
            i27 = 103;
            do {
                i26 += -52511;
                for (l = 1; l < 1; l++) {
                    i26 -= Test.iFld;
                    Test.lFld = i1;
                    i24 += (int)(((l * i24) + Test.sFld) - i24);
                    Test.fFld += (l - i1);
                    i28 -= i26;
                    i1 = i;
                    Test.lFld -= i24;
                    i1 = i1;
                    i1 += Test.iFld;
                    i1 -= i28;
                }
                d = -140;
            } while (--i27 > 0);
            for (i29 = 1; i29 < 103; ++i29) {
                i1 += (27474 + (i29 * i29));
                by = (byte)-2153;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
