package tests.javafuzzer3229;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:22:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=44958L;
    public static volatile short sFld=10058;
    public static volatile boolean bFld=true;
    public static int iFld=129;
    public static boolean bArrFld[]=new boolean[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.sArrFld, (short)8404);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=5, i2=229, i3=-47107, i4=-8, i5=-194, iArr[][]=new int[N][N];
        double d2=0.81891;
        byte by=72;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(iArr, 19);

        lArr = lArr;
        i1 = 299;
        while ((i1 -= 2) > 0) {
            i2 = 1;
            while (++i2 < 11) {
                Test.instanceCount >>= Test.sFld;
                for (d2 = i2; 1 > d2; d2++) {
                    i3 += (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    i3 += (int)29080L;
                }
                for (i4 = 1; i4 < 1; ++i4) {
                    i3 -= i3;
                    Test.instanceCount += i4;
                    Test.instanceCount = by;
                    Test.bArrFld = Test.bArrFld;
                    Test.instanceCount = i3;
                    iArr = iArr;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d2) + i3 + i4 + i5 + by + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, double d1) {

        int i6=-47488, i7=-179, i8=0, i9=-38777, i10=14, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -38845);
        FuzzerUtils.init(lArr1, -341327669605067339L);

        vMeth1();
        Test.bFld = Test.bFld;
        i6 = i6;
        for (i7 = 7; i7 < 250; i7++) {
            iArr1[i7 - 1] = (int)-1100269759L;
            for (i9 = 1; i9 < 7; i9++) {
                Test.instanceCount = i7;
                Test.instanceCount = Test.instanceCount;
                lArr1[i7] = i10;
                i6 = i6;
                lArr1[i9] = Test.instanceCount;
                d1 *= i9;
                iArr1[i9] >>= i9;
                Test.bFld = Test.bFld;
                d1 += Test.instanceCount;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth(boolean b) {

        double d3=0.35048;
        float f=2.180F, f1=64.787F, fArr[]=new float[N];
        int i11=-25354, i12=62571, i13=-244, i14=28629, iArr2[]=new int[N];
        short s=-16563, sArr[][]=new short[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 39);
        FuzzerUtils.init(sArr, (short)-254);
        FuzzerUtils.init(lArr2, -18L);
        FuzzerUtils.init(fArr, -31.41F);

        vMeth(-2.81166, d3);
        for (f = 12; 226 > f; ++f) {
            try {
                iArr2[(int)(f)] = (Test.iFld % iArr2[(int)(f - 1)]);
                iArr2[(int)(f - 1)] = (72099743 / Test.iFld);
                i11 = (Test.iFld % -33);
            } catch (ArithmeticException a_e) {}
            sArr[(int)(f)][(int)(f)] *= (short)-221;
            i11 += i11;
            i11 >>= 11749;
            lArr2[(int)(f + 1)] += (long)f;
            for (i12 = 1; i12 < 8; ++i12) {
                i14 = 1;
                while (++i14 < 2) {
                    fArr[i12] -= -9;
                    s *= (short)i11;
                    f1 = i11;
                    d3 += Test.instanceCount;
                    Test.instanceCount += (i14 | Test.iFld);
                    Test.iFld = (int)-61420L;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d3) + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + s
            + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=674, i15=-14, i16=-22983, i17=210, i18=6, i19=13, iArr3[]=new int[N];
        long l=-10L, l1=3072L;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, -154);
        FuzzerUtils.init(fArr1, 0.2F);

        i = (int)(fMeth(Test.bFld) + i);
        i = (int)Test.instanceCount;
        for (i15 = 325; i15 > 12; --i15) {
            double d4=2.38380;
            d4 /= (Test.iFld | 1);
            for (l = 1; l < 80; ++l) {
                d4 = i;
                try {
                    i = (43891 / Test.iFld);
                    iArr3[i15 - 1] = (Test.iFld % Test.iFld);
                    i = (iArr3[(int)(l)] / -124);
                } catch (ArithmeticException a_e) {}
                fArr1[i15 + 1] = 51492;
                i = i15;
                for (i18 = 1; i18 < 2; ++i18) {
                    i >>= i15;
                    d4 = i15;
                    Test.bFld = Test.bFld;
                    Test.iFld += (((i18 * i16) + Test.instanceCount) - i);
                    i19 *= i15;
                    switch ((((i17 >>> 1) % 6) * 5) + 22) {
                    case 26:
                        Test.instanceCount &= l;
                        l1 += (((i18 * i18) + i16) - i18);
                        break;
                    case 43:
                        Test.sArrFld[(int)(l)] = (short)i;
                        break;
                    case 25:
                        Test.instanceCount *= Test.sFld;
                        break;
                    case 38:
                        i += i19;
                        i16 = -5;
                        i19 += (((i18 * i16) + l) - l1);
                        break;
                    case 35:
                        i -= Test.iFld;
                        break;
                    case 44:
                        i16 += Test.sFld;
                        Test.iFld <<= i;
                        break;
                    default:
                        i += (i18 * i18);
                        l1 = i16;
                    }
                    d4 -= l1;
                    i = i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
