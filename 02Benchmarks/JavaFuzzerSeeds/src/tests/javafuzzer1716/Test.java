package tests.javafuzzer1716;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:29:43 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3625052202L;
    public static float fFld=32.94F;
    public short sFld=4918;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[][]=new short[N][N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 17145);
        FuzzerUtils.init(Test.sArrFld, (short)6748);
        FuzzerUtils.init(Test.lArrFld, 8879725954156981327L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i1, long l3, int i2) {

        float f=51.453F;
        int i3=42, i4=-39842, i5=206, i6=-184, iArr[]=new int[N];
        byte by=-105, byArr[]=new byte[N];
        double d=0.64831, d1=-1.71743;
        long l4=-1431980704874283752L;
        boolean b=true;

        FuzzerUtils.init(byArr, (byte)88);
        FuzzerUtils.init(iArr, -27831);

        for (f = 3; f < 176; ++f) {
            byArr[(int)(f + 1)] = (byte)i2;
            i2 += (int)((long)f ^ by);
            switch ((int)((f % 1) + 94)) {
            case 94:
                i3 -= (int)d;
                Test.iArrFld[(int)(f - 1)] += i2;
                break;
            }
            i3 = (int)f;
            for (l4 = (long)(f); l4 < 9; l4++) {
                try {
                    i4 = (i4 % 32627);
                    i5 = (i3 % 1416933866);
                    i5 = (-7094 / i1);
                } catch (ArithmeticException a_e) {}
            }
            switch ((int)(((f % 2) * 5) + 88)) {
            case 91:
                if (b) break;
                Test.sArrFld[(int)(f - 1)][(int)(f + 1)] = (short)f;
                for (d1 = 1; d1 < 9; ++d1) {
                    i5 = -5522;
                    try {
                        Test.iArrFld[(int)(f)] = (i4 / 241);
                        iArr[(int)(f)] = (iArr[(int)(f - 1)] / -11141);
                        Test.iArrFld[(int)(f)] = (i1 / i2);
                    } catch (ArithmeticException a_e) {}
                }
                break;
            case 93:
                i4 %= (int)((long)(f) | 1);
                break;
            default:
                i6 >>= 139;
            }
        }
        long meth_res = i1 + l3 + i2 + Float.floatToIntBits(f) + i3 + by + Double.doubleToLongBits(d) + l4 + i4 + i5 +
            (b ? 1 : 0) + Double.doubleToLongBits(d1) + i6 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l1) {

        long l2=-1227382334L;
        int i=58970, i7=50323, i8=10, i9=253, i10=33557;
        float f1=58.101F;
        short s=31325;

        for (l2 = 4; l2 < 127; ++l2) {
            if (dMeth(i, l1, i) != l2) break;
            i += (int)(l2 ^ (long)f1);
            for (i7 = 1; i7 < 13; i7++) {
                i8 -= i;
            }
            s -= (short)i8;
            for (i9 = 1; 13 > i9; i9++) {
                Test.iArrFld[(int)(l2 - 1)] <<= 77;
                i8 = (int)Test.instanceCount;
                Test.iArrFld[(int)(l2 + 1)] += i;
                f1 *= s;
                Test.iArrFld[i9 - 1] -= i;
                i8 >>= 8;
            }
            Test.lArrFld[(int)(l2)] *= 14;
            f1 -= Test.instanceCount;
        }
        vMeth1_check_sum += l1 + l2 + i + Float.floatToIntBits(f1) + i7 + i8 + s + i9 + i10;
    }

    public static void vMeth(long l) {

        int i12=-113, i13=-95, i14=-252, i15=41145, i16=-283, i17=48944, i18=79;
        short s1=21219;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.121726);

        vMeth1(21361L);
        Test.iArrFld[(i12 >>> 1) % N] *= i12;
        try {
            for (i13 = 228; i13 > 1; i13--) {
                for (i15 = 1; i15 < 7; ++i15) {
                    switch ((i13 % 6) + 80) {
                    case 80:
                        for (i17 = 1; i17 < 2; i17++) {
                            s1 += (short)i17;
                            s1 += (short)(i17 * l);
                            Test.iArrFld[i13] = i13;
                            Test.sArrFld[i15 + 1][i17] += (short)i12;
                            i14 *= i15;
                            i12 = s1;
                            Test.fFld += (((i17 * i17) + i13) - Test.instanceCount);
                            Test.instanceCount >>= 31225;
                        }
                        break;
                    case 81:
                        i18 >>>= (int)Test.instanceCount;
                        break;
                    case 82:
                        Test.iArrFld[i15 + 1] <<= i12;
                        break;
                    case 83:
                        Test.lArrFld[i15 + 1] = i13;
                        break;
                    case 84:
                        Test.iArrFld[i15 - 1] = i12;
                        break;
                    case 85:
                        if (i16 != 0) {
                            vMeth_check_sum += l + i12 + i13 + i14 + i15 + i16 + i17 + i18 + s1 +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    default:
                        dArr[i15] *= i17;
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.instanceCount *= i14;
        }
        finally {
            Test.iArrFld = Test.iArrFld;
        }
        vMeth_check_sum += l + i12 + i13 + i14 + i15 + i16 + i17 + i18 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i20=2415, i21=-16690, i22=11230, i23=6, i24=5418, i25=-12872, i26=-32207, i27=3;
        boolean b1=true;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -65.735);

        vMeth(Test.instanceCount);
        i20 = i20;
        Test.iArrFld[(i20 >>> 1) % N] = i20;
        for (i21 = 9; i21 < 158; i21++) {
            i23 = 168;
            do {
                switch (((i21 % 9) * 5) + 84) {
                case 129:
                    i20 += i22;
                    Test.fFld = i20;
                    break;
                case 87:
                    i22 |= i21;
                    for (i24 = i21; i24 < 1; ++i24) {
                        Test.instanceCount += (i24 - i21);
                        Test.fFld *= Test.instanceCount;
                        sFld += (short)i20;
                    }
                    break;
                case 112:
                    try {
                        Test.iArrFld[i23 + 1] = (61508 % Test.iArrFld[i21]);
                        i20 = (Test.iArrFld[i23 - 1] % i25);
                        i22 = (i25 / i25);
                    } catch (ArithmeticException a_e) {}
                    i22 = (int)Test.instanceCount;
                    i20 -= i24;
                    break;
                case 115:
                    for (i26 = 1; i26 < 1; ++i26) {
                        Test.iArrFld[i26] += (int)Test.instanceCount;
                        i20 = (int)-3430413730L;
                        if (b1) {
                            i22 += (((i26 * i23) + Test.fFld) - Test.instanceCount);
                            i25 = (int)Test.instanceCount;
                            if (b1) continue;
                            Test.instanceCount += -64244;
                        }
                        try {
                            i25 = (Test.iArrFld[i23] / i25);
                            i25 = (i26 % i24);
                            i22 = (31303 / i25);
                        } catch (ArithmeticException a_e) {}
                        i20 = (int)Test.fFld;
                        Test.instanceCount += Test.instanceCount;
                    }
                    break;
                case 93:
                    i25 >>= i20;
                    break;
                case 109:
                    dArr1[i23 + 1] = Test.instanceCount;
                    Test.instanceCount += (long)Test.fFld;
                    break;
                case 89:
                    i22 += (int)-4194800398L;
                    break;
                case 127:
                    i27 += (int)Test.fFld;
                case 125:
                    Test.instanceCount += i23;
                    break;
                }
            } while (--i23 > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
