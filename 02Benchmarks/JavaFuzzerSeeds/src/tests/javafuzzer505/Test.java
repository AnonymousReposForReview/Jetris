package tests.javafuzzer505;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:46:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=42591L;
    public static float fFld=-109.712F;
    public static volatile int iFld=9;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i6=12, i7=-22178, i8=51667, i9=10, i10=-250, i11=-29172, iArr[]=new int[N];
        short s=29235;
        byte by=22;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 10L);
        FuzzerUtils.init(iArr, -4);

        lArr[(i6 >>> 1) % N] += i6;
        for (i7 = 6; i7 < 349; i7++) {
            for (i9 = i7; i9 < 5; ++i9) {
                float f=0.153F;
                i11 = 1;
                do {
                    iArr[i11 - 1] += i6;
                } while (++i11 < 1);
                switch ((((i11 >>> 1) % 8) * 5) + 17) {
                case 18:
                    switch ((i7 % 7) + 5) {
                    case 5:
                        i6 ^= (int)12L;
                        break;
                    case 6:
                        i10 = i7;
                        Test.instanceCount <<= s;
                        Test.instanceCount = 24475;
                        break;
                    case 7:
                        i6 *= (int)Test.instanceCount;
                        i10 += i6;
                        by = (byte)i9;
                        break;
                    case 8:
                        i10 += i11;
                        break;
                    case 9:
                        i8 += i11;
                    case 10:
                        i8 = i9;
                        break;
                    case 11:
                        lArr[i9 - 1] >>= 57498;
                        break;
                    default:
                        lArr[(12 >>> 1) % N] = Test.instanceCount;
                    }
                    break;
                case 43:
                    i6 = i9;
                    break;
                case 22:
                    i10 = i9;
                    break;
                case 35:
                    i10 >>= by;
                case 48:
                    Test.instanceCount += (((i9 * Test.instanceCount) + i11) - Test.instanceCount);
                    break;
                case 56:
                    try {
                        iArr[i9 + 1] = (-820169411 % i10);
                        i10 = (i9 % iArr[i9 - 1]);
                        i8 = (52417 / i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 26:
                    f = 168;
                case 36:
                    b = b;
                    break;
                default:
                    i8 += (i9 * i9);
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + s + by + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i4, int i5) {

        float f1=-16.65F;
        int i12=-195, i13=20633, i14=-14, iArr1[]=new int[N];
        double d=-65.126807;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(sArr, (short)-29893);

        i4 = (int)(i5 + ((-(i5 + Test.instanceCount)) - Test.instanceCount));
        vMeth2();
        iArr1[(i5 >>> 1) % N] -= (int)107.45728;
        for (f1 = 260; 1 < f1; f1--) {
            byte by1=42;
            i4 = by1;
            Test.fFld -= 0;
            sArr = sArr;
            d -= Test.instanceCount;
            iArr1 = FuzzerUtils.int1array(N, (int)-4);
        }
        d = Test.instanceCount;
        for (i13 = 13; i13 < 384; ++i13) {
            sArr[i13] = (short)Test.instanceCount;
            Test.instanceCount += i12;
            i4 += i13;
            Test.fFld += i13;
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f1) + i12 + Double.doubleToLongBits(d) + i13 + i14 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i, int i1) {

        int i2=-74, i3=2, i15=-6, i16=184, i17=-13439;
        byte by2=-106;
        boolean b1=true;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 1.652F);
        FuzzerUtils.init(lArr1, 36981L);

        for (i2 = 7; i2 < 384; i2++) {
            vMeth1(i1, -11994);
            Test.iArrFld[i2] >>>= i3;
            for (i15 = i2; i15 < 4; i15++) {
                i3 -= i3;
                fArr[i2] -= -148L;
                Test.instanceCount = Test.instanceCount;
                i17 = 1;
                while (++i17 < 1) {
                    switch ((i15 % 3) + 89) {
                    case 89:
                        by2 /= (byte)(i1 | 1);
                        if (b1) {
                            i += i16;
                            i += (i17 + Test.fFld);
                            Test.instanceCount <<= -9;
                            i += (((i17 * i3) + Test.instanceCount) - i15);
                        } else if (b1) {
                            i = (int)Test.instanceCount;
                        } else {
                            lArr1[i15 - 1] <<= i16;
                        }
                        break;
                    case 90:
                        i += (53394 + (i17 * i17));
                        break;
                    case 91:
                        Test.instanceCount = i17;
                        break;
                    default:
                        i3 &= i3;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i15 + i16 + i17 + by2 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        double d1=4.104890, dArr[]=new double[N];
        int i18=-44773, i19=243, i20=-50935, i21=59336, i22=48, i23=-17598, i24=-239, i25=13805, iArr2[]=new int[N];
        byte by3=24;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, 1.29219);
        FuzzerUtils.init(iArr2, -32);
        FuzzerUtils.init(bArr, false);

        vMeth(Test.iFld, Test.iFld);
        lArrFld[(3 >>> 1) % N] = (long)d1;
        for (i18 = 8; 328 > i18; i18++) {
            for (i20 = 79; i20 > 1; i20 -= 2) {
                Test.instanceCount += i20;
                if (Test.bFld) continue;
                if (Test.bFld) {
                    Test.iArrFld[i20 + 1] += Test.iFld;
                    i19 -= Test.iFld;
                    switch ((i20 % 6) + 53) {
                    case 53:
                        for (i22 = 1; i22 < 3; i22 += 2) {
                            dArr[i20 + 1] += Test.instanceCount;
                            i19 *= Test.iFld;
                            if (Test.bFld) break;
                            i23 -= 88;
                        }
                        break;
                    case 54:
                        Test.instanceCount *= i22;
                        iArr2[i20] = i20;
                    case 55:
                        by3 -= (byte)-6487460550034915448L;
                        dArr[i18] += 27777;
                    case 56:
                        Test.instanceCount -= Test.instanceCount;
                    case 57:
                        Test.instanceCount += (long)Test.fFld;
                        i21 -= i21;
                        bArr = bArr;
                        Test.iFld = i18;
                        break;
                    case 58:
                        i23 = i19;
                        if (Test.bFld) break;
                        i23 = i21;
                        for (i24 = 1; i24 < 3; i24++) {
                            Test.iFld *= -6;
                            Test.iArrFld[i20 - 1] -= -6;
                        }
                    }
                } else if (Test.bFld) {
                    Test.instanceCount *= (long)d1;
                } else if (Test.bFld) {
                    i21 = (int)Test.instanceCount;
                } else {
                    Test.iFld += i20;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
