package tests.javafuzzer3063;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:22:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=233L;
    public static float fFld=-26.126F;
    public static boolean bFld=false;
    public static short sFld=-14073;
    public static volatile boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, int i7) {

        float f=-2.497F, fArr[][]=new float[N][N];
        int i8=-3, i9=-135, i10=12, iArr[]=new int[N], iArr1[][]=new int[N][N];
        double d1=-2.76341, dArr[]=new double[N];

        FuzzerUtils.init(iArr, -5841);
        FuzzerUtils.init(fArr, 29.482F);
        FuzzerUtils.init(iArr1, 122);
        FuzzerUtils.init(dArr, 50.74285);

        Test.instanceCount <<= i5;
        f = 1;
        do {
            for (i8 = 1; i8 < 6; i8++) {
                i6 <<= i8;
                for (d1 = 1; d1 < 2; d1++) {
                    i5 *= i7;
                    Test.fFld -= i10;
                    switch ((int)(((d1 % 7) * 5) + 12)) {
                    case 42:
                        iArr[(int)(f)] >>>= (int)Test.instanceCount;
                        iArr = iArr;
                        break;
                    case 34:
                    case 26:
                        i10 += i5;
                        if (true) {
                            fArr[i8][(int)(f)] = -20907;
                            iArr1 = FuzzerUtils.int2array(N, (int)-36);
                        } else {
                            dArr[(int)(d1 + 1)] += Test.fFld;
                        }
                    case 44:
                        i9 = (int)Test.instanceCount;
                        break;
                    case 18:
                        i5 += (int)Test.instanceCount;
                    case 38:
                        if (Test.bFld) continue;
                    case 46:
                        Test.instanceCount += (long)d1;
                        break;
                    default:
                        Test.instanceCount &= i10;
                    }
                }
            }
        } while (++f < 268);
        vMeth1_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d1) + i10 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i3, int i4, long l) {

        float f1=-8.208F;
        double d2=0.22338;
        int i11=-33749, i12=4, i13=203, i14=64346, i15=236, i16=-12, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 48);

        vMeth1(i4, i3, -67);
        Test.fFld -= Test.instanceCount;
        f1 = 284;
        while (--f1 > 0) {
            d2 += i3;
            for (i11 = 1; i11 < 6; i11++) {
                i3 += i4;
                Test.instanceCount = -5;
            }
            for (i13 = 1; 6 > i13; i13++) {
                l += i3;
                Test.bArrFld = FuzzerUtils.boolean1array(N, (boolean)true);
                for (i15 = 1; i15 < 2; ++i15) {
                    if (false) break;
                    iArr2[(int)(f1)] = i13;
                    iArr2[i15] = i4;
                    iArr2[i15] = i15;
                }
            }
        }
        long meth_res = i3 + i4 + l + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 +
            i15 + i16 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=-142, i2=-238, i17=9, i18=1, i19=-48184, i20=10;
        double d=-2.18824, d3=-2.27685, dArr1[]=new double[N];
        float fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, 2.58713);
        FuzzerUtils.init(fArr1, 0.831F);
        FuzzerUtils.init(lArr, -1L);

        for (i1 = 3; i1 < 343; ++i1) {
            d -= iMeth(i1, 11, -44137L);
            i17 = 1;
            while (++i17 < 5) {
                dArr1[i1 + 1] *= -64420;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.fFld *= i19;
                    i19 = i18;
                    i2 += (i18 * i18);
                    fArr1[(i18 >>> 1) % N] += i2;
                }
                d *= i2;
                lArr[i1 - 1] -= Test.instanceCount;
                for (d3 = 1; d3 < 1; ++d3) {
                    Test.instanceCount += (long)24.571F;
                    i2 += (int)-12L;
                    i19 += (int)(((d3 * Test.instanceCount) + i19) - i19);
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + i17 + i18 + i19 + Double.doubleToLongBits(d3) +
            i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=-181, i22=-51016, i23=-72, i24=-243, i25=10515, i26=-104, i27=-2, i28=-48, i29=-2, i30=-7, i31=-10;
        double dArr2[]=new double[N];

        FuzzerUtils.init(dArr2, 0.98118);

        vMeth(i21);
        i21 += i21;
        i21 += i21;
        for (i22 = 5; i22 < 208; ++i22) {
            i23 += (((i22 * Test.sFld) + Test.fFld) - i21);
            iArrFld[i22] ^= -1;
            for (i24 = 6; i24 < 124; i24++) {
                Test.fFld = i25;
                i21 = i24;
            }
            i21 = -10154;
            iArrFld[(i22 >>> 1) % N] = -11735;
            for (i26 = 2; i26 < 124; i26++) {
                i21 += (i26 * i26);
                Test.bFld = Test.bFld;
            }
            i25 = i27;
            for (i28 = i22; i28 < 124; ++i28) {
                switch (((i28 % 8) * 5) + 116) {
                case 154:
                    Test.fFld += (((i28 * Test.sFld) + i28) - i26);
                    i21 += i28;
                    for (i30 = i28; i30 < 1; i30++) {
                        Test.instanceCount *= i28;
                        switch ((i28 % 2) + 101) {
                        case 101:
                            try {
                                i27 = (i29 % 119);
                                i31 = (iArrFld[i30 - 1] / 206);
                                i31 = (-230 % i26);
                            } catch (ArithmeticException a_e) {}
                        case 102:
                        default:
                            i27 *= i23;
                        }
                    }
                    break;
                case 129:
                    iArrFld[i28] /= (int)(Test.instanceCount | 1);
                    break;
                case 120:
                    i31 -= i26;
                    i27 = (int)Test.fFld;
                case 123:
                    Test.fFld = i26;
                    i27 >>= Test.sFld;
                    dArr2[i22 - 1] += Test.sFld;
                    break;
                case 119:
                    Test.instanceCount += i28;
                    break;
                case 130:
                    Test.bFld = Test.bFld;
                    break;
                case 128:
                    Test.instanceCount >>= i27;
                    break;
                case 149:
                    iArrFld[i28 + 1] += i31;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
