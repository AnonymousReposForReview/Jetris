package tests.javafuzzer3337;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:21:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3404325909L;
    public static int iFld=-8;
    public static boolean bFld=false;
    public static volatile short sFld=-12856;
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i8) {

        float f1=0.511F, fArr[][]=new float[N][N];
        int i9=-6, i10=46, iArr[]=new int[N];
        double d2=-2.20161;
        short s=31502;

        FuzzerUtils.init(fArr, -73.336F);
        FuzzerUtils.init(iArr, -54103);

        f1 -= Test.iFld;
        for (i9 = 2; i9 < 219; i9++) {
            switch ((((i8 >>> 1) % 5) * 5) + 79) {
            case 92:
                if (Test.bFld) continue;
                i8 = Test.iFld;
                break;
            case 82:
                d2 %= ((long)(f1) | 1);
                Test.iFld *= i9;
                if (i9 != 0) {
                }
                break;
            case 104:
                if (Test.bFld) break;
                Test.instanceCount >>= Test.instanceCount;
                break;
            case 98:
                Test.instanceCount *= i8;
                switch (((-18 >>> 1) % 8) + 106) {
                case 106:
                    Test.instanceCount -= Test.iFld;
                    break;
                case 107:
                    Test.iFld = (int)Test.instanceCount;
                    i8 += i9;
                    break;
                case 108:
                    i10 -= -54;
                    break;
                case 109:
                case 110:
                    f1 += (((i9 * f1) + i10) - Test.iFld);
                    break;
                case 111:
                    fArr[i9][i9] *= Test.instanceCount;
                    break;
                case 112:
                    i10 += i8;
                    break;
                case 113:
                    if (Test.bFld) break;
                    break;
                default:
                    s += (short)(i9 * i9);
                }
                break;
            case 101:
                iArr[i9 - 1] = (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount += i9;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + i9 + i10 + Double.doubleToLongBits(d2) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1() {

        int i11=-166, i12=-116, i13=207, iArr1[]=new int[N];
        float f2=0.155F;
        double d3=-65.74135;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -187);
        FuzzerUtils.init(lArr, -64470L);
        FuzzerUtils.init(bArr, true);

        Test.iFld += (int)(fMeth(Test.iFld) * Test.iFld);
        Test.iFld = -8;
        for (i11 = 12; 385 > i11; i11 += 2) {
            i12 *= i11;
            iArr1[i11 - 1] = (int)f2;
            i13 = 1;
            while (++i13 < 9) {
                i12 *= (int)Test.instanceCount;
                if (Test.bFld) {
                    i12 -= i13;
                    iArr1[i13] = 20646;
                    switch (((i13 % 10) * 5) + 87) {
                    case 118:
                        if (Test.bFld) break;
                        i12 <<= (int)Test.instanceCount;
                        i12 -= i11;
                        lArr[i11 - 1] /= (i13 | 1);
                        break;
                    case 119:
                        if (Test.bFld) break;
                        break;
                    case 109:
                        Test.instanceCount /= (i11 | 1);
                        break;
                    case 105:
                        Test.bFld = true;
                        break;
                    case 106:
                        bArr[i13] = Test.bFld;
                        break;
                    case 103:
                        f2 += (((i13 * i11) + i11) - Test.instanceCount);
                        break;
                    case 107:
                        Test.iFld = (int)Test.instanceCount;
                        break;
                    case 90:
                        i12 <<= i13;
                        break;
                    case 102:
                        i12 -= 1;
                        break;
                    case 131:
                        Test.instanceCount = i12;
                        break;
                    default:
                        Test.instanceCount = (long)d3;
                    }
                } else if (Test.bFld) {
                    i12 += (int)(187L + (i13 * i13));
                } else {
                    Test.iFld = i11;
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + Float.floatToIntBits(f2) + i13 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(int i4, int i5, double d1) {

        int i6=13735, i7=-180, i14=29658, i15=-146, i16=14;
        byte by1=-127;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -25358L);

        for (i6 = 3; i6 < 127; i6++) {
            vMeth1();
            i4 = i5;
            i5 += i6;
            i4 += i6;
            by1 -= (byte)-181;
            i14 = 1;
            while (++i14 < 13) {
                for (i15 = 1; i15 < 1; ++i15) {
                    Test.instanceCount |= i15;
                    Test.instanceCount = Test.iFld;
                    i4 = Test.sFld;
                }
                lArr1[i14] >>>= Test.instanceCount;
            }
            i16 += (i6 - i15);
        }
        Test.instanceCount = i7;
        lArr1[(i15 >>> 1) % N] -= i16;
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + by1 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=9696, i2=56, i3=52832, i17=4, i18=-48855, i19=155, i20=-3, iArr2[]=new int[N];
        byte by=-27;
        float f=59.4F;
        double d4=-61.32160, dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)22719);
        FuzzerUtils.init(iArr2, -50);
        FuzzerUtils.init(dArr, -2.101262);

        for (i = 6; i < 197; ++i) {
            double d=6.55568;
            switch (((i % 10) * 5) + 123) {
            case 151:
                for (i2 = 131; i2 > 6; i2 -= 2) {
                    Test.instanceCount -= (-((i3++) - (by * i2)));
                }
                switch (((((int)(d + i3)) >>> 1) % 9) + 32) {
                case 32:
                    Test.instanceCount += (i ^ (long)f);
                    break;
                case 33:
                    i3 = (int)(by += (byte)(i1 += (int)(i - Test.instanceCount)));
                    Test.instanceCount += i;
                    vMeth(i, i, d);
                    break;
                case 34:
                case 35:
                    for (i17 = 7; 131 > i17; i17++) {
                        if (Test.bFld) continue;
                        if (Test.bFld) {
                            i19 = i19;
                            d -= i2;
                            sArr = sArr;
                        }
                        Test.instanceCount -= (long)f;
                        f -= Test.instanceCount;
                        iArr2[i17 - 1] *= -10;
                        switch (((i17 >>> 1) % 2) + 46) {
                        case 46:
                            iArr2[i] = i19;
                            iArr2[i17] += (int)53881L;
                            Test.iFld += (i17 - Test.instanceCount);
                            break;
                        case 47:
                            i18 += (int)Test.instanceCount;
                            i3 ^= i3;
                            d -= i18;
                            for (d4 = 1; d4 < 2; d4++) {
                                Test.instanceCount *= i;
                                Test.instanceCount = i17;
                                by = (byte)i1;
                                iArr2[(int)(d4)] <<= (int)Test.instanceCount;
                            }
                            break;
                        default:
                            fArrFld = fArrFld;
                        }
                    }
                    break;
                case 36:
                    if (false) break;
                    break;
                case 37:
                case 38:
                    i19 *= (int)Test.instanceCount;
                    break;
                case 39:
                    f = i19;
                    break;
                case 40:
                    dArr[(i1 >>> 1) % N] = i18;
                    break;
                default:
                    i3 = 25728;
                }
                break;
            case 166:
            case 168:
                f += (((i * Test.instanceCount) + Test.iFld) - i20);
            case 141:
                Test.bFld = Test.bFld;
                break;
            case 144:
                Test.instanceCount += -2L;
                break;
            case 169:
                Test.instanceCount *= Test.instanceCount;
                break;
            case 172:
                Test.iFld = -231;
            case 148:
                Test.iFld = (int)d;
            case 154:
                by *= (byte)Test.instanceCount;
                break;
            case 125:
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
