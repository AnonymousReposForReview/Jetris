package tests.javafuzzer1054;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:38:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static byte byFld=68;
    public static short sFld=17448;
    public static boolean bFld=false;
    public int iArrFld[][]=new int[N][N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -102.357F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, int i2) {

        float f=-92.977F;
        int i3=201, i4=31225, i5=3, iArr[]=new int[N];
        byte by=21, byArr[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 50891);
        FuzzerUtils.init(lArr, 3255346484L);
        FuzzerUtils.init(byArr, (byte)-14);

        iArr[(i1 >>> 1) % N] *= -16640;
        for (f = 9; 321 > f; ++f) {
            by >>= (byte)i2;
            i3 += (int)(((f * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
        }
        for (i4 = 11; i4 < 266; i4++) {
            try {
                i3 = (-348567795 % iArr[i4 - 1]);
                iArr[i4 + 1] = (i5 % 61);
                i5 = (i5 / -107);
            } catch (ArithmeticException a_e) {}
            iArr[i4 - 1] += i4;
            i2 = i3;
            lArr[i4 - 1] = i2;
        }
        i2 -= (int)188L;
        iArr = iArr;
        byArr[(i4 >>> 1) % N] = FuzzerUtils.byte1array(N, (byte)-28);
        i1 -= (int)f;
        i2 += (int)Test.instanceCount;
        i5 <<= i5;
        vMeth1_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + by + i4 + i5 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i, long l) {

        float f1=-66.156F;
        int i7=-91, i8=145, i9=-8, iArr1[]=new int[N];
        double d=-16.123836;
        boolean b=true;

        FuzzerUtils.init(iArr1, -238);

        i = (int)((-(i * i)) + (i += (int)Math.min(Test.instanceCount, l)));
        vMeth1(i, i);
        l -= 109;
        f1 -= Test.instanceCount;
        for (int i6 : iArr1) {
            switch (((i >>> 1) % 5) + 56) {
            case 56:
                l = l;
                break;
            case 57:
                i += i;
                i6 -= (int)l;
                Test.instanceCount += (long)f1;
            case 58:
                for (i7 = 1; i7 < 4; ++i7) {
                    if (b) {
                        d = Test.byFld;
                    }
                    f1 -= i9;
                    Test.sFld ^= (short)i8;
                }
                break;
            case 59:
                i9 ^= i9;
                break;
            case 60:
                f1 += i7;
                break;
            }
        }
        vMeth_check_sum += i + l + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i9 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth() {

        int i10=9404;

        vMeth(26347, Test.instanceCount);
        Test.instanceCount = i10;
        vSmallMeth_check_sum += i10;
    }

    public void mainTest(String[] strArr1) {

        int i11=48892, i12=138, i13=-119, i14=7430, i15=-92, i16=-119, i17=37734, i18=9, i19=120, i20=11;
        double d1=77.46742, dArr[]=new double[N];
        float f2=0.733F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -10712L);
        FuzzerUtils.init(dArr, 115.48993);

        for (int smallinvoc=0; smallinvoc<396; smallinvoc++) vSmallMeth();
        i11 += i11;
        i12 = 233;
        while ((i12 -= 2) > 0) {
            i11 = i12;
        }
        for (i13 = 8; i13 < 153; i13++) {
            iArrFld = iArrFld;
            i14 >>>= -54;
            i11 += i13;
            d1 = Test.instanceCount;
            i14 ^= Test.sFld;
            for (f2 = 5; f2 < 173; ++f2) {
                i14 = i13;
            }
            i16 = 1;
            while (++i16 < 173) {
                for (i17 = 1; 1 > i17; i17++) {
                    i14 -= i12;
                    i14 += (int)Test.instanceCount;
                    i11 += 11;
                }
                d1 += Test.instanceCount;
                Test.fArrFld = Test.fArrFld;
                switch ((i16 % 7) + 45) {
                case 45:
                    iArrFld[i16 + 1][i16 - 1] %= (int)(i14 | 1);
                    break;
                case 46:
                    if (true) {
                        i15 = -19889;
                        for (i19 = 1; i19 < 1; i19++) {
                            i11 += (((i19 * Test.sFld) + i11) - i17);
                            iArrFld[i19 + 1][i19 + 1] -= (int)f2;
                            Test.instanceCount = 17927L;
                            lArr1[i13 - 1] -= (long)-83.381F;
                            i14 += (((i19 * i12) + Test.instanceCount) - f2);
                            i20 -= i17;
                        }
                    } else if (Test.bFld) {
                        i11 += (int)Test.instanceCount;
                    } else if (Test.bFld) {
                        i18 += (i16 | (long)f2);
                    }
                    break;
                case 47:
                    i11 += i16;
                case 48:
                    dArr = dArr;
                    break;
                case 49:
                    i11 -= i12;
                case 50:
                    i15 <<= i19;
                    break;
                case 51:
                    i18 = (int)Test.instanceCount;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
