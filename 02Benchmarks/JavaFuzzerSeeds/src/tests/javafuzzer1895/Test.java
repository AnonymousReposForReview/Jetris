package tests.javafuzzer1895;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=44188L;
    public int iFld=-148;
    public float fFld=68.482F;
    public static short sFld=-2838;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.125082);
        FuzzerUtils.init(Test.iArrFld, 164);
        FuzzerUtils.init(Test.fArrFld, -1.91F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1) {

        byte by=-34;
        int i11=3, i12=234, i13=-18412, i14=12, i15=0, iArr[][]=new int[N][N];
        short s=6758;
        float f1=1.827F;
        long l2=4655167991551582254L;

        FuzzerUtils.init(iArr, -9);

        by -= (byte)i11;
        i11 ^= i11;
        for (i12 = 4; i12 < 190; i12++) {
            for (i14 = 1; i14 < 9; i14 += 3) {
                iArr[i14][i12 + 1] -= i15;
            }
            i15 -= 219;
            i11 <<= (int)4168108351L;
            s += (short)(((i12 * i12) + f1) - by);
            l2 = 1;
            do {
                l1 = l;
            } while (++l2 < 9);
            l += i13;
            i15 -= i11;
            f1 -= i12;
            i13 += (3 + (i12 * i12));
        }
        l += (long)f1;
        vMeth1_check_sum += l + l1 + by + i11 + i12 + i13 + i14 + i15 + s + Float.floatToIntBits(f1) + l2 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i10=10, i16=-62505, i17=63, i18=148, i19=14, i21=17102, i22=-2, i23=59724, i24=-65066;
        float f2=-5.722F;

        i10 = (++i10);
        vMeth1(Test.instanceCount, -223620417677706481L);
        for (i16 = 9; 198 > i16; i16++) {
            Test.instanceCount += (i16 * i16);
            i17 *= i10;
            f2 += (i16 * Test.instanceCount);
        }
        for (i18 = 13; i18 < 221; ++i18) {
            Test.iArrFld[i18] = (int)Test.instanceCount;
            Test.fArrFld[i18] = Test.instanceCount;
            for (i21 = 1; i21 < 8; ++i21) {
                for (i23 = 2; i23 > i18; i23--) {
                    i22 *= i17;
                    Test.instanceCount >>>= i21;
                    i24 <<= i24;
                    Test.instanceCount = i18;
                }
            }
        }
        long meth_res = i10 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + i21 + i22 + i23 + i24;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, int i5) {

        int i6=-7657, i7=10, i8=46114, i9=25990, i25=129, i26=-77, i27=16;
        float f=125.194F;
        double d=55.74451;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)66);

        for (i6 = 17; i6 < 301; i6++) {
            i7 = (int)Test.instanceCount;
            Test.dArrFld[i6 - 1] = (Test.instanceCount++);
            f += 51;
            i4 = (i7--);
            for (i8 = i6; i8 < 6; ++i8) {
                iMeth();
            }
            i25 = 1;
            while (++i25 < 6) {
                byArr[i6 - 1] >>= (byte)Test.instanceCount;
                for (i26 = 1; 1 > i26; ++i26) {
                    d += Test.instanceCount;
                    if (b) break;
                    i5 += i26;
                    i9 *= i9;
                    Test.iArrFld[i6 - 1] = i27;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i25 + i26 + i27 +
            Double.doubleToLongBits(d) + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=88, i1=14, i2=6, i3=200, i28=-14, i29=-150, i30=-194, i31=-22433, i32=57709;
        double d1=-87.54872;
        boolean b1=false, bArr[]=new boolean[N];
        byte by1=102, byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)-78);
        FuzzerUtils.init(bArr, true);

        for (i = 15; i < 288; ++i) {
            for (i2 = 3; i2 < 92; i2++) {
                vMeth(i2, i1);
                i28 = 1;
                do {
                    i1 = i3;
                    byArr1[i2] = (byte)d1;
                    bArr[i28 - 1] = b1;
                    iFld += (((i28 * i) + fFld) - i);
                } while (++i28 < 2);
                iFld = i1;
                try {
                    Test.iArrFld[i2] = (i / Test.iArrFld[i2 + 1]);
                    i3 = (i1 / i2);
                    i1 = (i28 % i1);
                } catch (ArithmeticException a_e) {}
                i3 = i;
                by1 *= (byte)i3;
                if (b1) break;
                for (i29 = i2; 2 > i29; ++i29) {
                    switch (((i29 % 9) * 5) + 94) {
                    case 132:
                        iFld += (int)(4460458229686693235L + (i29 * i29));
                        Test.iArrFld[i - 1] = iFld;
                        break;
                    case 101:
                    case 139:
                        i1 -= 5;
                        break;
                    case 112:
                        Test.instanceCount *= Test.sFld;
                        Test.instanceCount *= Test.instanceCount;
                        Test.iArrFld[i + 1] = (int)d1;
                        i3 = i31;
                        break;
                    case 136:
                        switch (((i % 1) * 5) + 90) {
                        case 93:
                            by1 -= (byte)Test.instanceCount;
                            i30 += i29;
                            break;
                        }
                        if (b1) break;
                        break;
                    case 103:
                        i31 += (((i29 * i1) + i28) - i32);
                        d1 = d1;
                        break;
                    case 122:
                        Test.instanceCount -= i2;
                    case 135:
                        i32 += (i29 | Test.instanceCount);
                        break;
                    case 133:
                        by1 = (byte)fFld;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
