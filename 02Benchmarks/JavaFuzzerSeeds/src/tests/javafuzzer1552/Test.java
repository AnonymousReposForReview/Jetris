package tests.javafuzzer1552;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:48:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2140L;
    public static double dFld=-2.79530;
    public static byte byFld=50;
    public int iFld=11;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -153);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        boolean b=false;
        float f=58.233F;
        int i4=-16362, i5=-28350, i6=-5, i7=0, i8=12;

        b = b;
        i3 <<= -7445;
        Test.iArrFld[(i3 >>> 1) % N] -= (int)f;
        for (i4 = 4; i4 < 291; ++i4) {
            i3 = (int)Test.instanceCount;
            i5 = (int)1120420536L;
        }
        i6 = 1;
        do {
            for (i7 = 1; i7 < 5; i7++) {
                Test.iArrFld[i7] -= (int)Test.dFld;
                Test.iArrFld[i6 - 1] -= -23214;
                f += (98.558F + (i7 * i7));
                Test.iArrFld = Test.iArrFld;
                i5 >>>= i8;
                i3 = (int)Test.instanceCount;
                Test.iArrFld[i6] = (int)Test.dFld;
            }
        } while (++i6 < 365);
        long meth_res = i3 + (b ? 1 : 0) + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=158, i1=13, i2=-27625, i9=-127, i10=-43, i11=70, i12=-10, i13=13, i14=46, iArr[]=new int[N];
        long l1=4205662263L, l2=-51948L;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 51701);
        FuzzerUtils.init(fArr, -58.760F);

        i = (int)Test.instanceCount;
        iArr[(-11 >>> 1) % N] *= (int)((i - (Test.instanceCount - -74)) - ((i--) - (i - i)));
        l1 = ((-(i - i)) + Test.instanceCount);
        for (i1 = 6; i1 < 127; i1++) {
            iArr[i1 + 1] >>= (int)(Math.abs(--Test.dFld) - iMeth(i1));
        }
        for (i9 = 8; i9 < 146; i9++) {
            for (i11 = 1; i11 < 11; ++i11) {
                fArr[i11 - 1][i9] -= i12;
            }
            l2 = 1;
            while (++l2 < 11) {
                try {
                    i = (-2975 % iArr[i9]);
                    i2 = (i12 % iArr[i9 + 1]);
                    i2 = (i1 / i11);
                } catch (ArithmeticException a_e) {}
            }
            i2 *= (int)-9133038690535728825L;
            l1 *= i2;
            for (i13 = 1; i13 < 11; i13++) {
                i14 = i12;
            }
            i += i14;
        }
        vMeth_check_sum += i + l1 + i1 + i2 + i9 + i10 + i11 + i12 + l2 + i13 + i14 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(long l) {


        vMeth();
        vSmallMeth_check_sum += l;
    }

    public void mainTest(String[] strArr1) {

        int i15=41, i16=1, i17=-1, i18=-234, i19=13, i20=-6, i21=-11766, i22=46, i23=21551;
        float f1=69.70F, fArr1[]=new float[N];
        short s=9309;
        boolean b1=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 146L);
        FuzzerUtils.init(fArr1, -2.970F);
        FuzzerUtils.init(dArr, -2.6878);

        for (int smallinvoc=0; smallinvoc<131; smallinvoc++) vSmallMeth(-2414844364591690870L);
        for (i15 = 16; 339 > i15; i15++) {
            Test.instanceCount <<= i16;
            if (true) continue;
            i16 = i15;
            Test.iArrFld[i15 - 1] = (int)Test.dFld;
            for (i17 = 4; i17 < 78; ++i17) {
                fArr1[i17] -= i18;
                i18 += (i17 + i15);
                f1 = s;
            }
            i16 *= i17;
        }
        Test.instanceCount *= i18;
        dArr[(31657 >>> 1) % N] = Test.instanceCount;
        i18 <<= i16;
        i19 = 1;
        do {
            i16 += (int)Test.instanceCount;
            i16 += (i19 * i18);
            try {
                i18 = (i17 / i16);
                i16 = (Test.iArrFld[i19 + 1] % -7352);
                i18 = (58857 / i19);
            } catch (ArithmeticException a_e) {}
            for (i20 = 1; 86 > i20; i20++) {
                i16 -= s;
                Test.instanceCount = Test.instanceCount;
                if (b1) continue;
                i21 += i20;
            }
            Test.byFld += (byte)(i19 ^ Test.instanceCount);
            Test.instanceCount -= i20;
            Test.instanceCount *= i17;
            i18 += (i19 * iFld);
            for (i22 = 5; i22 < 86; i22++) {
                i21 = (int)Test.dFld;
            }
        } while (++i19 < 293);
        i18 = (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
