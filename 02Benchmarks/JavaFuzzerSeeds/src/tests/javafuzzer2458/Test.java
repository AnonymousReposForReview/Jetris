package tests.javafuzzer2458;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=59;
    public static double dFld=73.48618;
    public static int iFld1=-4006;
    public boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 104.109822);
        FuzzerUtils.init(Test.lArrFld, -3180L);
        FuzzerUtils.init(Test.iArrFld1, 4);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1) {

        long l1=59085L;
        int i3=-35772, i4=-14, i5=100;
        short s=-27836;

        Test.lArrFld[(Test.iFld >>> 1) % N] = Test.instanceCount;
        for (l1 = 5; l1 < 233; ++l1) {
            i3 *= -102;
            Test.instanceCount = Test.iFld;
            i3 *= i3;
        }
        for (i4 = 11; i4 < 351; ++i4) {
            if (true) {
                Test.lArrFld[i4] = i3;
            } else if (false) {
                i3 = -5;
                Test.iFld ^= (int)l1;
                Test.instanceCount = l1;
                i3 += (55870 + (i4 * i4));
            } else {
                Test.instanceCount += i4;
                Test.instanceCount -= i4;
                Test.instanceCount >>>= s;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l1 + i3 + i4 + i5 + s;
    }

    public static void vMeth() {

        float f2=-2.302F;
        int i6=10, i7=-23, i8=-79;
        short s1=4645;

        Test.instanceCount += -50420L;
        vMeth1(f2);
        i6 = 1;
        while (++i6 < 163) {
            Test.iFld |= (int)Test.instanceCount;
            for (i7 = i6; i7 < 10; i7++) {
                Test.iFld -= (int)f2;
                Test.instanceCount -= 4661;
                s1 -= (short)i6;
                f2 -= Test.instanceCount;
                if (true) continue;
                if (false) {
                    i8 += (-12 + (i7 * i7));
                    Test.instanceCount -= i7;
                    f2 += (i7 + Test.instanceCount);
                } else {
                    Test.iFld += (i7 | Test.iFld);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i6 + i7 + i8 + s1;
    }

    public static int iMeth(int i2, long l) {

        float f3=-2.941F;
        int i9=10, i11=2, i12=-44998, i13=0, i14=-56841;
        short s2=21350;

        vMeth();
        Test.iArrFld1[(-10 >>> 1) % N][(Test.iFld >>> 1) % N] += (int)f3;
        i9 = 1;
        while (++i9 < 313) {
            int i10=-28;
            i10 = 57;
            Test.iArrFld1[i9][i9 + 1] = i2;
            for (i11 = 1; i11 < 5; i11++) {
                i2 += (int)l;
                for (i13 = 2; i13 > 1; i13 -= 2) {
                    Test.dFld *= i12;
                    i14 >>>= (int)-54L;
                    Test.iArrFld1[i9 - 1][i9] -= i2;
                }
                i14 += (((i11 * i14) + f3) - Test.iFld1);
                s2 -= (short)-12386;
                s2 %= (short)90L;
            }
        }
        i14 = (int)f3;
        long meth_res = i2 + l + Float.floatToIntBits(f3) + i9 + i11 + i12 + i13 + i14 + s2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=111.632F;
        int i=14, i1=0, i15=83, i16=-185, i17=92, i18=12, i19=-74;
        double d=1.6747;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)31063);

        Test.iFld += (Test.iFld += (++sArr[(-155 >>> 1) % N]));
        iArrFld = (iArrFld = (iArrFld = (iArrFld = FuzzerUtils.int1array(N, (int)12))));
        f -= (float)((Test.dArrFld[(Test.iFld >>> 1) % N]--) + ((Test.instanceCount * Test.instanceCount) *
            (iArrFld[(Test.iFld >>> 1) % N] += Test.iFld)));
        for (i = 18; i < 345; i++) {
            i1 -= iMeth(Test.iFld1, -120L);
            i15 = 1;
            do {
                i1 ^= (int)Test.instanceCount;
                Test.iFld += (-2 + (i15 * i15));
                Test.iArrFld1[i15][i15] = i;
                for (i16 = 1; i16 < 1; i16++) {
                    f += i16;
                    Test.instanceCount += Test.iFld1;
                    i17 = (int)f;
                    Test.instanceCount = Test.instanceCount;
                    Test.iArrFld1[i15][i15 + 1] &= (int)-12L;
                    if (bFld) {
                        Test.iFld <<= i16;
                    } else if (bFld) {
                        i17 = (int)2847694210L;
                        i1 += i17;
                        i17 >>>= Test.iFld1;
                        Test.instanceCount = Test.instanceCount;
                    }
                }
                try {
                    i1 = (i / i17);
                    iArrFld[i] = (i1 % 1285440845);
                    i1 = (183 % i);
                } catch (ArithmeticException a_e) {}
            } while (++i15 < 77);
            for (d = 3; d < 77; d++) {
                i18 *= i16;
                i19 = 1;
                while (++i19 < 2) {
                    Test.iFld *= 70;
                    Test.iArrFld1[i - 1] = FuzzerUtils.int1array(N, (int)52509);
                    iArrFld[i19 + 1] += i16;
                    Test.iFld = (int)Test.instanceCount;
                    i1 = i16;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
