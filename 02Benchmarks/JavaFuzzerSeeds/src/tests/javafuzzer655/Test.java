package tests.javafuzzer655;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:26:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-32548L;
    public short sFld=20623;
    public static volatile int iFld=-194;
    public static boolean bFld=true;
    public static int iFld1=14;
    public static float fFld=1.643F;
    public static int iArrFld[]=new int[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 80);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(short s, long l, int i) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.117266);

        i -= (int)dArr[(-81 >>> 1) % N];
        vSmallMeth_check_sum += s + l + i + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1() {

        int i6=-156, i7=-2, i8=99, i9=-1, i10=49238, i11=-1, i12=-49080, i13=-106;
        float f1=-36.223F;
        byte by=-115;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9L);

        lArr[(-12 >>> 1) % N] <<= Test.iFld;
        for (i6 = 5; i6 < 146; i6++) {
            i7 = i7;
            if (Test.bFld) break;
            i8 = 1;
            do {
                Test.bFld = Test.bFld;
            } while (++i8 < 11);
        }
        f1 += i6;
        for (i9 = 24; 394 > i9; ++i9) {
            for (i11 = 1; i11 < 5; i11++) {
                by *= (byte)i8;
                i13 = 1;
                while (++i13 < 2) {
                    try {
                        Test.iArrFld[i11 - 1] = (Test.iFld1 / -21874);
                        Test.iFld = (Test.iFld1 / 60514);
                        Test.iFld = (i6 / i10);
                    } catch (ArithmeticException a_e) {}
                    lArr[i13] += (long)f1;
                }
                by = (byte)104.46568;
                i10 += (i11 * i11);
            }
        }
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + by + i13 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, int i5, long l1) {

        double d2=2.48014;
        int i14=-4, i15=-14, i16=-216, i17=62;
        byte by1=-44;

        i5 >>= (-iMeth1());
        Test.iArrFld[(i4 >>> 1) % N] *= (int)Test.fFld;
        Test.fFld -= Test.iFld1;
        d2 = 1;
        while (++d2 < 213) {
            Test.fFld += Test.iFld;
            for (i14 = 1; i14 < 8; i14++) {
                Test.iFld >>= (int)-13L;
                if (true) continue;
            }
            Test.fFld = (float)d2;
            for (i16 = 1; i16 < 8; ++i16) {
                l1 >>= i17;
                l1 = (long)-69.677F;
                i5 += by1;
                l1 -= Test.instanceCount;
                i4 += (((i16 * l1) + l1) - Test.fFld);
            }
        }
        vMeth_check_sum += i4 + i5 + l1 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 + by1;
    }

    public static int iMeth(int i3) {

        int i19=7, i20=55843, i22=8, i23=-36, i24=14932, i25=-167;
        byte by2=0, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-28);

        vMeth(Test.iFld1, Test.iFld1, -56318L);
        for (int i18 : Test.iArrFld) {
            i18 -= i18;
        }
        for (i19 = 11; i19 < 379; ++i19) {
            Test.iFld = Test.iFld;
            Test.iArrFld[i19 + 1] += Test.iFld;
            Test.iFld += by2;
            Test.iFld += (i19 * i19);
            byArr[(i20 >>> 1) % N] >>= (byte)Test.instanceCount;
            for (i22 = i19; i22 < 5; i22++) {
                i3 += -145;
                Test.iFld1 >>= by2;
                for (i24 = 1; i24 > 1; --i24) {
                    Test.instanceCount += i24;
                    Test.instanceCount >>= by2;
                }
            }
        }
        long meth_res = i3 + i19 + i20 + by2 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-11261, i26=-22386, i27=14, i28=-1, i29=214, iArr[]=new int[N];
        float f=1.566F, fArr[]=new float[N];
        double d=-30.13806, d1=-71.94705;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -185);
        FuzzerUtils.init(lArr1, -820817989L);
        FuzzerUtils.init(fArr, 2.611F);

        for (int smallinvoc=0; smallinvoc<241; smallinvoc++) vSmallMeth(sFld, (long)(((55966 + (i1 * f)) - (++i1)) *
            (30.10549 + (i1 >>= i1))), i1);
        for (int i2 : iArr) {
            i2 >>= (iArr[(i2 >>> 1) % N]--);
            switch ((((i2++) >>> 1) % 2) + 38) {
            case 38:
                d = 63;
                while (--d > 0) {
                    vSmallMeth((short)((--d1) - Integer.reverseBytes(iMeth(114))), -60562L, -54570);
                    Test.fFld -= 428343750L;
                }
                i2 = (int)Test.instanceCount;
                i1 *= (int)d1;
                Test.bFld = Test.bFld;
                break;
            case 39:
                d1 = Test.iFld;
                Test.instanceCount += sFld;
            }
            Test.iFld += 183;
            switch ((((i1 >>> 1) % 5) * 5) + 32) {
            case 39:
                for (i26 = 1; i26 < 63; i26++) {
                    for (i28 = 1; i28 < 2; i28++) {
                        i2 = (int)Test.instanceCount;
                        Test.instanceCount = i28;
                        Test.instanceCount += i28;
                        lArr1[i28] += (long)d;
                        switch ((i28 % 1) + 33) {
                        case 33:
                            iArrFld1[i26] -= (int)Test.instanceCount;
                            Test.iArrFld[i28] = i2;
                            break;
                        }
                        fArr = FuzzerUtils.float1array(N, (float)-31.492F);
                        Test.iFld = i26;
                        i29 += i28;
                        d1 += 5;
                        iArr[i26] -= Test.iFld1;
                    }
                    i2 -= i28;
                    i2 += (int)-918849184685916877L;
                }
                break;
            case 35:
                i27 = (int)f;
                break;
            case 36:
                if (Test.bFld) continue;
                break;
            case 54:
            case 37:
                Test.fFld -= 71;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
