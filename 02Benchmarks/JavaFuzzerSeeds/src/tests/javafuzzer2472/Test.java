package tests.javafuzzer2472;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:15:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static float fFld=11.450F;
    public static int iFld=143;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.834F);
        FuzzerUtils.init(Test.iArrFld, 4057);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(double d5, int i7) {

        double d6=51.102780;
        int i8=-157, i9=-50321, i10=-47, i11=-27631, i12=-26695;
        short s=-1378;

        d6 = Test.instanceCount;
        i8 = 360;
        while (--i8 > 0) {
            for (i9 = 1; i9 < 5; ++i9) {
                Test.instanceCount = i8;
                i10 += i8;
                if (i8 != 0) {
                }
                i7 += i9;
                Test.fFld *= i8;
                Test.fArrFld = Test.fArrFld;
            }
            i10 += (int)Test.instanceCount;
            i7 += (int)Test.instanceCount;
        }
        Test.iArrFld = Test.iArrFld;
        for (i11 = 12; 295 > i11; i11++) {
            s *= (short)-2371237416L;
            Test.instanceCount <<= s;
        }
        long meth_res = Double.doubleToLongBits(d5) + i7 + Double.doubleToLongBits(d6) + i8 + i9 + i10 + i11 + i12 + s;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(boolean b, int i4, int i5) {

        int i6=184, i13=6, i14=-7020, i15=-45179, iArr1[]=new int[N];
        double d4=53.9486, d7=74.5293;
        short s1=-25804, sArr1[]=new short[N];

        FuzzerUtils.init(iArr1, 42);
        FuzzerUtils.init(sArr1, (short)19834);

        i6 = 1;
        while (++i6 < 139) {
            double d3=0.79924;
            i4 = (int)(-((d3--) - d3));
            Test.fFld *= ((long)((Test.instanceCount * d4) * 2.49985) >> (++iArr1[i6 + 1]));
        }
        d4 = (iMeth2(d7, Test.iFld) * i6);
        iArr1[(Test.iFld >>> 1) % N] = (int)Test.fFld;
        for (i13 = 11; 326 > i13; ++i13) {
            Test.instanceCount >>= i5;
            if (b) {
                i14 += i13;
            }
            switch (((i13 % 9) * 5) + 50) {
            case 62:
                Test.instanceCount >>>= i14;
                i15 = 1;
                while (++i15 < 5) {
                    if (true) {
                        iArr1[i15 - 1] += (int)Test.fFld;
                        Test.iFld = i5;
                    } else {
                        Test.iArrFld[i13 - 1] += i5;
                    }
                }
                break;
            case 69:
                Test.instanceCount -= (long)d4;
                break;
            case 72:
                i14 = (int)-2781576758L;
            case 78:
                Test.instanceCount += (i13 | Test.instanceCount);
                break;
            case 71:
                s1 -= (short)d7;
            case 53:
                try {
                    i14 = (140 / Test.iFld);
                    Test.iArrFld[i13] = (-2132619950 % i5);
                    i14 = (398747436 / i13);
                } catch (ArithmeticException a_e) {}
                break;
            case 81:
                i5 += (int)Test.instanceCount;
                break;
            case 87:
                d7 = i6;
                break;
            case 61:
                Test.instanceCount -= i13;
                break;
            default:
                i4 = i6;
            }
        }
        long meth_res = (b ? 1 : 0) + i4 + i5 + i6 + Double.doubleToLongBits(d4) + Double.doubleToLongBits(d7) + i13 +
            i14 + i15 + s1 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, double d, double d1) {

        int i=51670, i1=43305, i2=11, i3=-22236, i17=-10, i18=36062, i19=7779, iArr[]=new int[N];
        long l=-382067330L;
        double d2=83.7134;
        short s3=28907;
        byte by=-84;

        FuzzerUtils.init(iArr, -15211);

        i = (int)((++d1) * ((4843220201026721708L + (i + i)) - i));
        for (i1 = 5; i1 < 271; ++i1) {
            i2 -= (int)((-(++iArr[i1 - 1])) + (--Test.fArrFld[i1]));
            l += (i1 * i1);
            for (d2 = 6; d2 > 1; d2--) {
                if ((127 + (iMeth1(false, 4, i3) - f)) == -3180449273L) break;
                for (i17 = 1; i17 < 2; i17++) {
                    Test.iArrFld[(i17 >>> 1) % N] = Test.iFld;
                    switch (((-53029 >>> 1) % 3) + 52) {
                    case 52:
                        s3 *= (short)i18;
                        i2 -= i1;
                        break;
                    case 53:
                        by += (byte)(i17 * i17);
                        Test.instanceCount ^= Test.iFld;
                    case 54:
                        i19 -= Test.iFld;
                        f = Test.instanceCount;
                        break;
                    default:
                        i2 -= by;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i + i1 +
            i2 + l + Double.doubleToLongBits(d2) + i3 + i17 + i18 + s3 + by + i19 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d8=-44.78048;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)6617);

        sArr[(15 >>> 1) % N] -= (short)iMeth(Test.fFld, -95.10618, 0.117337);
        Test.iFld *= (int)d8;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
