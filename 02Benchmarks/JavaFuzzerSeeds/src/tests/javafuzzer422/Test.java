package tests.javafuzzer422;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:25:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static float fFld=26.910F;
    public static byte byFld=64;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -20325);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=6, i8=15473, i9=13, i10=-47102, i11=36424, i12=0;
        double d=0.94988, d1=2.36436, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -68.46377);

        i7 += i7;
        for (d = 7; d < 140; ++d) {
            i8 += (int)d;
            Test.iArrFld[(int)(d + 1)] = (int)d;
            i7 = i8;
            dArr[(int)(d)] += -2.16F;
        }
        for (i9 = 20; i9 < 363; ++i9) {
            Test.iArrFld[i9] = i7;
            try {
                i7 = (-223 / i9);
                Test.iArrFld[i9 - 1] = (i10 / 7038);
                i8 = (i10 % -52763);
            } catch (ArithmeticException a_e) {}
            for (i11 = 1; i11 < 5; i11++) {
                Test.instanceCount += (1 + (i11 * i11));
                Test.iArrFld[i11 - 1] = i12;
                d1 += Test.instanceCount;
                Test.instanceCount -= (long)d;
                Test.instanceCount += (((i11 * i11) + i9) - i11);
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i4, float f, int i5) {

        int i6=-92, i13=-179, i14=6, i15=120, i16=-80;
        short s=9541;
        double d2=-2.25744;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -93.85F);

        i6 = 1;
        while (++i6 < 267) {
            Test.iArrFld[i6] %= (int)(i6 | 1);
            i5 = (iMeth() * i4);
            for (i13 = 1; i13 < 6; ++i13) {
                s = (short)f;
                fArr[i13 - 1] = i6;
                for (i15 = 2; i15 > 1; --i15) {
                    f -= 53389;
                    f += (((i15 * i4) + Test.instanceCount) - i6);
                    switch (((i15 % 4) * 5) + 38) {
                    case 41:
                        i14 += (i15 * i15);
                        i16 += (9 + (i15 * i15));
                        i14 = i6;
                        i14 += (i15 * Test.instanceCount);
                        break;
                    case 39:
                        d2 /= 17624;
                        break;
                    case 58:
                    case 42:
                        Test.instanceCount *= 92;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i13 + i14 + s + i15 + i16 +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1) {

        int i2=-8, i3=238, i17=236, i18=-205, i19=1, i20=-94, iArr[][]=new int[N][N];
        boolean b=false;
        double d3=1.89643;
        short s1=-9659;

        FuzzerUtils.init(iArr, 178);

        for (i2 = 6; i2 < 362; i2++) {
            switch (((((int)(Test.instanceCount + 1195126372L)) >>> 1) % 3) + 123) {
            case 123:
                vMeth1(i3, Test.fFld, i);
                if (b) {
                    Test.iArrFld[i2] -= (int)7L;
                    Test.byFld = (byte)i;
                } else {
                    Test.instanceCount *= (long)1.225F;
                    iArr[i2] = iArr[i2 - 1];
                    d3 -= -34291;
                    Test.fFld -= i2;
                    vMeth_check_sum += i + i1 + i2 + i3 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i17 + i18 + i19 +
                        i20 + s1 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                if (false) {
                    for (i17 = 5; i17 > i2; i17--) {
                        for (i19 = 1; i19 < 1; ++i19) {
                            Test.instanceCount *= i19;
                            i1 *= (int)80.1016F;
                        }
                    }
                }
            case 124:
                i3 *= (int)Test.fFld;
                break;
            case 125:
                d3 = Test.instanceCount;
                break;
            default:
                s1 = Test.byFld;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i17 + i18 + i19 + i20 + s1 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=-9744;

        vMeth(i21, i21);
        Test.instanceCount -= i21;
        i21 |= i21;
        i21 = -30123;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
