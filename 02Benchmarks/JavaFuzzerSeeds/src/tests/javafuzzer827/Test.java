package tests.javafuzzer827;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:32:19 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=54024L;
    public static byte byFld=96;
    public static float fFld=-118.288F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -140);
        FuzzerUtils.init(Test.sArrFld, (short)-9503);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5) {

        int i6=-6, i7=-2, i8=-46788;
        double d1=-44.74384;
        short s=13150;
        float f1=-2.293F;

        i5 >>= (int)Test.instanceCount;
        i6 = 1;
        while (++i6 < 166) {
            boolean b=true;
            for (i7 = i6; 10 > i7; ++i7) {
                Test.iArrFld[i6 + 1] = (int)Test.instanceCount;
                d1 += 9472;
            }
            Test.iArrFld = Test.iArrFld;
            d1 += -55869L;
            if (false) {
                i5 = (int)Test.instanceCount;
                d1 += d1;
                i8 -= i8;
                i5 += (((i6 * Test.byFld) + i6) - s);
            } else if (b) {
                f1 += 4;
            }
            Test.iArrFld[i6] += -225;
        }
        Test.iArrFld[(17 >>> 1) % N] = i8;
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + s + Float.floatToIntBits(f1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-9, i2=-3241, i3=-46451, i4=-2;
        double d=0.43643, d2=0.85367;
        float f=-30.712F;
        boolean b1=false;
        short s1=13066;

        for (i1 = 7; i1 < 136; i1++) {
            for (i3 = 1; 12 > i3; i3++) {
                d = 1;
                do {
                    Test.instanceCount += ((Test.iArrFld[i1 - 1]--) + Test.sArrFld[i3 + 1]);
                    f = iMeth1(i4);
                    Test.byFld >>= (byte)-16;
                    if (b1) continue;
                    i2 += 1;
                    i4 = i1;
                    Test.instanceCount += (long)d;
                    switch (((i3 % 3) * 5) + 26) {
                    case 33:
                        i4 *= i1;
                        i2 += (int)d;
                        Test.instanceCount = -28063;
                        d2 %= ((long)(f) | 1);
                    case 29:
                        s1 += (short)i1;
                        break;
                    case 32:
                        i4 = i3;
                        break;
                    }
                } while (++d < 2);
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d2) + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i9=-30431, i10=214, i11=-49301, i12=-218, i13=153, i14=-10;
        boolean b2=false;
        float f2=2.834F;
        double d3=9.124603, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.10570);

        switch (((((++i) >>> 1) % 8) * 5) + 26) {
        case 66:
            Test.instanceCount += iMeth();
            Test.fFld -= i;
            break;
        case 52:
            i <<= (int)Test.instanceCount;
            for (i9 = 5; i9 < 171; ++i9) {
                Test.iArrFld[i9 - 1] += i;
            }
            Test.iArrFld[(22686 >>> 1) % N] = Test.byFld;
            Test.instanceCount = i10;
            break;
        case 39:
            for (i11 = 6; i11 < 247; ++i11) {
                if (b2) continue;
                dArr[i11] -= i11;
                for (i13 = i11; i13 < 7; i13++) {
                    Test.instanceCount = i11;
                }
                i14 >>= i11;
                f2 += ((long)i11 ^ (long)i13);
            }
        case 58:
            d3 += i14;
            break;
        case 61:
            b2 = b2;
        case 51:
            i14 >>= i9;
            break;
        case 50:
            Test.fFld = Test.instanceCount;
        case 44:
            d3 = 60;
            break;
        default:
            i12 *= (int)Test.instanceCount;
        }
        vMeth_check_sum += i + i9 + i10 + i11 + i12 + (b2 ? 1 : 0) + i13 + i14 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=14644, i16=12, i17=30, i18=-10, i19=-24, i20=-60, i21=1, i22=-5, i23=3;
        long l=6094267842581183243L, lArr[]=new long[N];
        short s2=-8231;
        double d4=41.15869, dArr1[]=new double[N];
        boolean b3=true;

        FuzzerUtils.init(dArr1, -2.52426);
        FuzzerUtils.init(lArr, -215L);

        vMeth(7);
        for (i15 = 294; i15 > 13; --i15) {
            Test.fFld *= i16;
            i16 = i16;
            i16 = 13;
        }
        dArr1 = dArr1;
        for (i17 = 13; 308 > i17; ++i17) {
            Test.byFld <<= (byte)53859L;
            i16 >>= (int)l;
        }
        i16 <<= i15;
        for (i19 = 367; i19 > 15; --i19) {
            for (i21 = 2; i21 < 72; ++i21) {
                Test.iArrFld[i19] >>= s2;
                for (d4 = 1; d4 < 2; d4++) {
                    Test.iArrFld[i19 - 1] = 2;
                    Test.byFld = (byte)i16;
                    lArr = lArr;
                    Test.instanceCount -= i16;
                    s2 += (short)(d4 * d4);
                    Test.byFld += (byte)49679L;
                    switch ((i19 % 2) + 91) {
                    case 91:
                    case 92:
                        try {
                            i22 = (28000 / Test.iArrFld[i19]);
                            Test.iArrFld[i21 - 1] = (-10818 / i20);
                            i20 = (24092 % i17);
                        } catch (ArithmeticException a_e) {}
                        i20 -= 9;
                        if (b3) break;
                        i16 = i21;
                        break;
                    default:
                        i20 = i18;
                    }
                    i22 = Test.byFld;
                    lArr[(int)(d4 + 1)] -= (long)Test.fFld;
                }
                Test.iArrFld = FuzzerUtils.int1array(N, (int)2);
                i16 += i21;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
