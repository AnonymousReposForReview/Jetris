package tests.javafuzzer2932;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:20:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=59716L;
    public static double dFld=-2.103513;
    public static float fFld=-2.37F;
    public volatile byte byFld=-96;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6442);
        FuzzerUtils.init(Test.lArrFld, 165L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-2400, i8=-3, i9=47093, i10=152, i11=7, i12=-212, i13=11, i14=-8;
        float f=-20.60F;
        short s1=19644;

        i7 = (int)477787827L;
        Test.instanceCount = 10151;
        for (i8 = 3; i8 < 248; i8++) {
            for (i10 = 1; i10 < 7; ++i10) {
                for (i12 = 2; 1 < i12; i12 -= 2) {
                    if (i7 != 0) {
                        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + i14 + s1;
                        return;
                    }
                    switch (((i8 % 2) * 5) + 98) {
                    case 101:
                        i9 *= i12;
                        Test.instanceCount += (i12 ^ (long)f);
                        i13 += (i12 | i7);
                        Test.iArrFld[i12] -= i11;
                        break;
                    case 103:
                        i14 = (int)f;
                    default:
                        i9 /= (int)(s1 | 1);
                    }
                    try {
                        i11 = (i10 % 1237102748);
                        i11 = (i7 % i10);
                        i9 = (i12 / -691);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[i8 - 1] += Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + i14 + s1;
    }

    public static void vMeth(short s) {

        int i2=-89, i3=203, i4=6, i5=-243, i6=161;
        double d=-2.80439;
        boolean b=false;

        s &= (short)(((s - i2) + s) + ((i2 - i2) + (Test.dFld + i2)));
        for (i3 = 7; i3 < 361; i3++) {
            i5 = 1;
            do {
                i6 = 1;
                do {
                    vMeth1();
                    i4 >>= i6;
                    Test.instanceCount = Test.instanceCount;
                } while (++i6 < 1);
                s = (short)i4;
                i2 = (int)Test.dFld;
            } while (++i5 < 5);
            d = 1;
            do {
                Test.fFld = Test.instanceCount;
                i4 += (int)d;
                Test.fFld += Test.instanceCount;
                i2 >>>= (int)Test.instanceCount;
                if (b) continue;
            } while (++d < 5);
        }
        vMeth_check_sum += s + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + (b ? 1 : 0);
    }

    public static void vSmallMeth(int i1) {

        short s2=-20325;

        vMeth(s2);
        Test.dFld += i1;
        vSmallMeth_check_sum += i1 + s2;
    }

    public void mainTest(String[] strArr1) {

        long l=-161L;
        int i=11, i15=7, i16=-240, i17=-25447, i18=89, i19=12, i20=-26748, i21=32538, i22=-5, i23=83, i24=-18372;
        boolean b1=true;
        short s3=17422;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -39.807F);

        for (l = 5; 156 > l; ++l) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i);
            Test.instanceCount = byFld;
            if (b1) break;
            for (i15 = 3; i15 < 166; i15 += 3) {
                for (i17 = 1; i17 < 4; i17 += 2) {
                    i16 = 44541;
                    i18 = 1;
                    if (b1) continue;
                    Test.dFld += -38.256F;
                    i16 <<= 13;
                }
                i += i15;
                for (i19 = 1; i19 < 4; ++i19) {
                    s3 += (short)i19;
                }
                if (b1) {
                    fArr = FuzzerUtils.float1array(N, (float)1.691F);
                    Test.lArrFld = Test.lArrFld;
                } else if (false) {
                    for (i21 = 4; 1 < i21; i21--) {
                        Test.instanceCount = (long)Test.fFld;
                        i22 = (int)124.402F;
                        if (b1) break;
                    }
                    for (i23 = 4; i23 > l; i23 -= 3) {
                        Test.instanceCount = i17;
                    }
                    i += (i15 - i24);
                } else if (b1) {
                    Test.instanceCount <<= i23;
                }
            }
            if (b1) {
                Test.iArrFld = Test.iArrFld;
                Test.lArrFld[(int)(l - 1)] -= i16;
                i20 += (5 + (l * l));
                Test.instanceCount += (l * i15);
            } else if (b1) {
                Test.fFld -= 193;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
