package tests.javafuzzer1475;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:16:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-213L;
    public static int iFld=240;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-16727);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {


        Test.iFld <<= Test.iFld;
        Test.iFld -= Test.iFld;
        vMeth2_check_sum += 0;
    }

    public static void vMeth1(short s1, int i2, boolean b) {

        int i3=-41203, i4=71, i5=5, iArr[]=new int[N];
        float f=95.160F;
        double d=-80.70860;
        byte by1=104;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 9L);
        FuzzerUtils.init(iArr, -21737);

        i2 += (s1 - i2);
        i3 = 1;
        do {
            switch (((i3 % 1) * 5) + 62) {
            case 66:
                lArr[i3][i3] <<= (long)(-(Math.min(i3, -63949) * (f - d)));
                vMeth2();
                Test.instanceCount |= 38252L;
                Test.sArrFld[i3 + 1] = (short)Test.iFld;
            default:
                iArr[i3] *= (int)Test.instanceCount;
                i2 = (int)185L;
                for (i4 = 1; i4 < 13; i4++) {
                    by1 <<= (byte)Test.iFld;
                    switch (((Test.iFld >>> 1) % 7) + 48) {
                    case 48:
                        i5 += s1;
                        Test.instanceCount >>>= i2;
                        i5 = i4;
                        break;
                    case 49:
                        if (i2 != 0) {
                            vMeth1_check_sum += s1 + i2 + (b ? 1 : 0) + i3 + Float.floatToIntBits(f) +
                                Double.doubleToLongBits(d) + i4 + i5 + by1 + FuzzerUtils.checkSum(lArr) +
                                FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    case 50:
                        Test.iFld *= (int)2409296221L;
                        break;
                    case 51:
                        i2 += i3;
                        break;
                    case 52:
                        Test.iFld += (i4 + i4);
                    case 53:
                        s1 = (short)-40.58973;
                        break;
                    case 54:
                        i5 = i3;
                        break;
                    default:
                        i2 += i4;
                    }
                }
            }
        } while (++i3 < 125);
        vMeth1_check_sum += s1 + i2 + (b ? 1 : 0) + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + i5
            + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i, int i1) {

        byte by=-91;
        short s=-22175;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.40997);

        i1 *= (int)((by + s) * (Test.instanceCount--));
        vMeth1((short)(19229), Test.iFld, b1);
        dArr[(i1 >>> 1) % N] -= Test.iFld;
        i = (int)l;
        vMeth_check_sum += l + i + i1 + by + s + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.instanceCount, Test.iFld, -63480);
        Test.instanceCount = Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
