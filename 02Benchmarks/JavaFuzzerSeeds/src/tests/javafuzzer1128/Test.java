package tests.javafuzzer1128;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:06:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=115L;
    public static boolean bFld=false;
    public static short sFld=9524;
    public static int iFld=-32016;
    public static float fFld=1.373F;
    public static volatile long lFld=-36645L;
    public static int iFld1=14;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2395);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, float f) {

        int i6=-9613, i7=-64274, i8=63110, i9=-241, i10=15832;
        byte by=103;
        short s=-9191;

        i6 = 1;
        do {
            for (i7 = 1; 6 > i7; i7++) {
                i8 *= (int)Test.instanceCount;
                for (i9 = 2; i9 > 1; i9--) {
                    switch (((i7 % 1) * 5) + 18) {
                    case 21:
                        if (i7 != 0) {
                            vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + by + s;
                            return;
                        }
                        Test.instanceCount += (i9 - i6);
                        if (true) break;
                        break;
                    default:
                        Test.iArrFld[i6 + 1] >>= i6;
                        by = (byte)s;
                        if (Test.bFld) break;
                    }
                }
            }
            if (Test.bFld) continue;
            if (i8 != 0) {
                vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + by + s;
                return;
            }
            i4 -= i5;
            i8 = (int)Test.instanceCount;
        } while (++i6 < 251);
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + by + s;
    }

    public static void vMeth(long l1) {

        int i2=-83, i3=-3671, i11=10, i12=-8, i13=52453, iArr1[]=new int[N];
        float f1=0.653F;

        FuzzerUtils.init(iArr1, 11);

        i2 = 271;
        while (--i2 > 0) {
            iArr1[i2] += (int)-10.413F;
            i3 = 1;
            do {
                vMeth1(i3, i3, f1);
                for (i11 = 1; i11 < 1; ++i11) {
                    f1 += (i11 - i12);
                    l1 = Test.instanceCount;
                    l1 -= -22849;
                    iArr1[i11 - 1] <<= i3;
                    f1 += i11;
                    i12 |= i11;
                }
                i12 += i12;
                i13 = 1;
                while (--i13 > 0) {
                    Test.sFld ^= (short)Test.instanceCount;
                    Test.sFld += (short)i11;
                }
            } while (++i3 < 6);
        }
        vMeth_check_sum += l1 + i2 + i3 + Float.floatToIntBits(f1) + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(long l) {

        int i14=1134, i15=-17590, i16=-63833, iArr[]=new int[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -146);
        FuzzerUtils.init(lArr, -229L);
        FuzzerUtils.init(fArr, 0.716F);
        FuzzerUtils.init(dArr, -1.57436);

        iArr = (iArr = FuzzerUtils.int1array(N, (int)13));
        vMeth(l);
        Test.iFld = Test.iFld;
        i14 = 1;
        do {
            double d=0.112711;
            Test.iFld = (int)d;
            switch ((i14 % 9) + 46) {
            case 46:
                Test.iFld = i14;
                break;
            case 47:
                for (i15 = 1; i15 < 7; ++i15) {
                    Test.instanceCount *= i16;
                }
                l -= (long)Test.fFld;
                lArr[i14] = i15;
            case 48:
                fArr[i14] = Test.instanceCount;
                lArr[i14] *= i14;
                dArr[i14] *= i14;
                Test.iFld = Test.iFld;
            case 49:
            case 50:
                i16 = 120;
            case 51:
                i16 = i16;
                break;
            case 52:
                Test.fFld -= -10000L;
                break;
            case 53:
                if (true) continue;
            case 54:
                Test.iFld *= i16;
                break;
            default:
                if (true) continue;
            }
        } while (++i14 < 229);
        long meth_res = l + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-18568, i1=13, i18=9001, i19=-9, i20=99, i21=12;
        byte by1=82;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i = 5; i < 319; i++) {
            i1 >>>= (int)lMeth(Test.instanceCount);
            Test.instanceCount = 1050143787L;
        }
        Test.instanceCount *= i;
        i1 -= (int)Test.lFld;
        Test.sFld >>>= (short)Test.instanceCount;
        for (int i17 : Test.iArrFld) {
            for (i18 = 2; i18 < 63; i18++) {
                Test.iArrFld[i18] = by1;
                i1 = i18;
            }
            Test.iFld = -9;
            i19 >>= i1;
            i19 >>>= Test.iFld1;
            i19 <<= (int)Test.instanceCount;
            bArr[(16131 >>> 1) % N] = Test.bFld;
            if (false) break;
            Test.instanceCount = 13;
        }
        Test.iArrFld[(i19 >>> 1) % N] *= (int)-6.296F;
        for (i20 = 6; i20 < 174; ++i20) {
            i19 += (i20 | i21);
            Test.lFld += (i20 * i20);
            switch (((i19 >>> 1) % 8) + 32) {
            case 32:
                switch ((((Test.iFld1 >>> 1) % 2) * 5) + 87) {
                case 95:
                    Test.lFld = -24697;
                    Test.iFld += i20;
                    Test.iArrFld[i20 - 1] = i20;
                    Test.iFld1 -= i1;
                    break;
                case 92:
                    i19 -= Test.iFld1;
                    Test.iFld &= Test.iFld1;
                    Test.iArrFld[i20] += (int)3L;
                    break;
                }
            case 33:
                Test.fFld += (((i20 * i21) + Test.instanceCount) - i21);
                break;
            case 34:
                Test.iFld = 183;
                break;
            case 35:
                Test.iArrFld[i20 - 1] = i;
                break;
            case 36:
            case 37:
                i19 = (int)Test.lFld;
                break;
            case 38:
                Test.lFld >>>= Test.lFld;
                break;
            case 39:
                Test.lFld *= 19432;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
