package tests.javafuzzer3135;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:28:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50L;
    public static short sFld=-26591;
    public static volatile boolean bFld=true;
    public static volatile int iFld=26746;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -17219);
        FuzzerUtils.init(Test.dArrFld, -111.50792);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i12, int i13) {

        int i14=5;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -7965557397834825980L);

        Test.iArrFld[(i13 >>> 1) % N] *= Test.sFld;
        lArr1[(i13 >>> 1) % N] -= i14;
        long meth_res = l1 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(byte by, int i7) {

        int i8=26634, i9=72, i10=63, i11=148, i15=106, i16=-176;
        float f=0.852F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3549L);

        for (i8 = 10; i8 < 206; i8 += 2) {
            Test.iArrFld[i8 - 1] = (i9--);
            for (i10 = i8; 16 > i10; ++i10) {
                i11 = (int)(Test.instanceCount * ((i10 - i8) * (i9 * i9)));
                f -= (iMeth1(Test.instanceCount, i11, -12) + f);
                for (i15 = 1; i15 < 1; i15++) {
                    Test.dArrFld[i8 + 1] *= i10;
                    f = f;
                    switch ((i8 % 9) + 2) {
                    case 2:
                        i16 = (int)Test.instanceCount;
                        break;
                    case 3:
                        by -= by;
                        break;
                    case 4:
                        Test.sFld = (short)i15;
                        break;
                    case 5:
                        lArr[i10] = i9;
                        i16 += Test.sFld;
                        i7 += i11;
                    case 6:
                        i9 -= (int)-4.39934;
                    case 7:
                        Test.instanceCount *= i15;
                        break;
                    case 8:
                        Test.iArrFld[i15 + 1] += (int)Test.instanceCount;
                        break;
                    case 9:
                    case 10:
                        f = i9;
                        break;
                    default:
                        Test.iArrFld[i15 - 1] += i11;
                    }
                }
            }
        }
        long meth_res = by + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i15 + i16 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=-60548, i3=-71, i4=-135, i5=-2, i6=10, i17=-14855, i18=-10, i19=71, i20=66;
        double d=0.93083;
        byte by1=-5;

        for (i2 = 318; 9 < i2; i2 -= 3) {
            i3 += (int)(i1 - -112.894F);
            i1 = i3;
            i1 -= (int)(((long)(i - d) << i1) + i2);
        }
        i4 = 1;
        do {
            for (i5 = 11; i5 > 1; i5 -= 2) {
                Test.iArrFld[i4] += (-Math.max(iMeth(by1, i5), i3));
            }
            for (i17 = 11; i17 > 1; i17--) {
                for (i19 = i17; i19 < 2; i19 += 2) {
                    i6 += i19;
                    Test.iArrFld[i19 - 1] -= -13245;
                    Test.iArrFld[i17 + 1] = -6;
                    Test.bFld = false;
                    i6 += (int)Test.instanceCount;
                    d = 43434;
                }
            }
        } while (++i4 < 143);
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + by1 + i17 + i18 + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        float f1=0.514F;

        vMeth(Test.iFld, Test.iFld);
        f1 -= Test.sFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
