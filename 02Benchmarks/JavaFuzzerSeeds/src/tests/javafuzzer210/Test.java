package tests.javafuzzer210;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:09:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3896340600838517070L;
    public static volatile double dFld=24.24705;
    public static float fFld=-53.814F;
    public static short sFld=-435;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61079);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, long l) {

        int i5=-6, i6=210, i7=-174, i8=-105, i9=5, i10=-72, i11=-8, i12=-19394, i13=34, i14=33000, i15=-109;
        boolean b=true;

        for (i5 = 354; i5 > 16; --i5) {
            b = b;
        }
        i4 &= i6;
        for (i7 = 11; i7 < 342; i7++) {
            for (i9 = 1; i9 < 5; i9++) {
                i4 *= (int)12288L;
                i8 = -248;
                if (i4 != 0) {
                }
            }
            for (i11 = 1; 5 > i11; i11 += 3) {
                i13 = 1;
                while (++i13 < 5) {
                    i10 *= i12;
                    b = true;
                }
                for (i14 = 1; i14 < 5; ++i14) {
                    l >>= i9;
                    Test.fFld = l;
                }
            }
        }
        long meth_res = i4 + l + i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth() {

        int i1=-4, i2=-40747, i3=-13, i16=70, i17=189, i18=140, i19=6, iArr[]=new int[N];
        byte by=-31;
        float f=10.735F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(fArr, 121.668F);

        Test.dFld -= i1;
        iArr[(151 >>> 1) % N] += (--by);
        iArr = iArr;
        for (i2 = 5; i2 < 170; i2++) {
            i1 += (int)(i1 = (int)((f * 8) + (--i3)));
            i1 *= (iMeth(i1, Test.instanceCount) - i2);
            i3 += i2;
            for (i16 = 1; i16 < 10; ++i16) {
                i3 = (int)Test.fFld;
                i17 >>= -44;
                fArr[i2] += i16;
                iArr[i16 - 1] += (int)f;
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.instanceCount *= i19;
                    i17 -= i3;
                }
            }
        }
        long meth_res = i1 + by + i2 + i3 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i=1, i20=-273, i21=-19899, i22=44436, i23=-1, i24=-3, i25=12, i26=3699;
        double d=27.73386;
        byte by1=19;
        float f1=2.94F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 142L);
        FuzzerUtils.init(fArr1, 21.116F);

        i %= (int)(((long)(0 + dMeth())) | 1);
        for (i20 = 220; i20 > 13; --i20) {
            for (i22 = i20; i22 < 8; i22++) {
                for (d = 1; d > 1; --d) {
                    Test.iArrFld[(int)(d + 1)][i20 + 1] *= i22;
                }
                lArr[i22] = by1;
                for (i25 = 1; 1 > i25; ++i25) {
                    Test.instanceCount += (((i25 * i26) + i26) - i20);
                }
                fArr1[i22 - 1] = i25;
                i24 >>= i21;
                f1 = 1;
                do {
                    Test.iArrFld[(int)(f1 - 1)][i22 + 1] -= i23;
                    Test.instanceCount *= 48;
                    Test.fFld = by1;
                    lArr[(int)(f1 - 1)] = i26;
                } while (++f1 < 1);
            }
        }
        vMeth_check_sum += i + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d) + i24 + by1 + i25 + i26 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i27=-22, i28=16712, i29=13700, i30=125, i31=-45509, i32=-14, i33=-4, i34=-2, i35=-5, i36=-4782, i37=-147;
        boolean b1=false;
        byte by2=-71, byArr[]=new byte[N];
        long l1=-37241L, lArr1[]=new long[N];
        short sArr[]=new short[N];
        double dArr[]=new double[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-118);
        FuzzerUtils.init(sArr, (short)-24000);
        FuzzerUtils.init(lArr1, -205139513875297417L);
        FuzzerUtils.init(dArr, 2.2366);
        FuzzerUtils.init(fArr2, -109.944F);

        vMeth();
        i27 = i27;
        Test.sFld >>= (short)i27;
        i27 = (int)Test.instanceCount;
        i27 = (int)Test.instanceCount;
        for (i28 = 15; i28 < 351; ++i28) {
            i27 += (i28 ^ i29);
        }
        for (i30 = 6; i30 < 227; ++i30) {
            for (i32 = i30; 114 > i32; ++i32) {
                for (i34 = 1; i34 > i32; --i34) {
                    Test.dFld *= 32391;
                    byArr[i32 + 1] -= (byte)4L;
                    i36 >>= i28;
                    switch (((i34 >>> 1) % 10) + 36) {
                    case 36:
                        i31 = i35;
                        if (b1) continue;
                        Test.fFld += ((long)i34 | (long)Test.sFld);
                        switch (((i33 >>> 1) % 7) + 98) {
                        case 98:
                            sArr[i34 + 1] ^= (short)i30;
                            i27 = i33;
                            Test.instanceCount += (long)Test.dFld;
                            i35 += (i34 ^ Test.instanceCount);
                        case 99:
                            i35 = i27;
                            Test.dFld -= -244;
                            i36 = i32;
                            i33 = i33;
                            break;
                        case 100:
                            i27 += i27;
                            Test.instanceCount |= i31;
                            Test.instanceCount += i34;
                            Test.instanceCount >>>= i29;
                            break;
                        case 101:
                            by2 += (byte)(3971 + (i34 * i34));
                        case 102:
                            Test.instanceCount += (30339L + (i34 * i34));
                            break;
                        case 103:
                            lArr1[i34] <<= Test.instanceCount;
                        case 104:
                            Test.fFld = i28;
                            break;
                        }
                        break;
                    case 37:
                        try {
                            i33 = (Test.iArrFld[i30][i34 + 1] / i31);
                            i35 = (i37 / Test.iArrFld[i32][i30 - 1]);
                            Test.iArrFld[i34 - 1][i34] = (i29 % -73);
                        } catch (ArithmeticException a_e) {}
                    case 38:
                        i33 /= (int)(i31 | 1);
                        break;
                    case 39:
                        Test.instanceCount += (((i34 * i34) + l1) - i30);
                    case 40:
                        dArr[i34 - 1] = Test.instanceCount;
                        break;
                    case 41:
                        i29 += (((i34 * i31) + i33) - i35);
                    case 42:
                        i27 >>>= i35;
                    case 43:
                        l1 /= (i37 | 1);
                        break;
                    case 44:
                        i33 <<= i37;
                        break;
                    case 45:
                        fArr2 = fArr2;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
