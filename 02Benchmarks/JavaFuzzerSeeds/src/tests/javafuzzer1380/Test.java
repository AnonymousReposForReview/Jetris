package tests.javafuzzer1380;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:14:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1085903441L;
    public static double dFld=19.112222;
    public static boolean bFld=false;
    public static float fFld=0.701F;
    public volatile int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, int i4, boolean b) {

        int i5=-14, i6=-6537, i7=-124, i8=5, i9=28036, i10=18422, iArr[]=new int[N];
        float f1=-57.502F, fArr[]=new float[N];
        byte by=-122;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2578031422L);
        FuzzerUtils.init(fArr, -1.211F);
        FuzzerUtils.init(iArr, 12882);

        l1 <<= i4;
        for (i5 = 6; i5 < 298; ++i5) {
            for (i7 = 1; i7 < 6; ++i7) {
                lArr1[i5] *= i8;
                fArr[i7 - 1] += (float)Test.dFld;
                i8 += (int)Test.instanceCount;
                for (i9 = 1; i9 < 2; ++i9) {
                    i4 %= (int)(i10 | 1);
                    switch ((i5 % 2) + 92) {
                    case 92:
                        f1 -= by;
                        i4 -= i10;
                        Test.instanceCount <<= i9;
                        break;
                    case 93:
                        try {
                            i8 = (-15982 % iArr[i9 + 1]);
                            i4 = (-235 % i6);
                            iArr[i7 + 1] = (i9 % -80);
                        } catch (ArithmeticException a_e) {}
                        i10 -= i8;
                        i10 -= -6;
                        break;
                    default:
                        iArr[i5 + 1] -= i5;
                    }
                }
            }
        }
        long meth_res = l1 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + by +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i2=-43979, i3=-4, i11=-10, i12=47062, i13=-3, i14=-193, i15=-13, i16=85, iArr1[]=new int[N];
        byte by1=47;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, -32556);
        FuzzerUtils.init(lArr2, 165L);

        for (i2 = 1; i2 < 264; i2 += 2) {
            i3 += (((i2 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            i3 = (int)(((--i3) + fMeth(Test.instanceCount, 112, Test.bFld)) * -13L);
            i3 -= (int)Test.dFld;
        }
        for (i11 = 13; i11 < 307; i11++) {
            if (Test.bFld) {
                for (i13 = 1; 6 > i13; i13++) {
                    for (i15 = i11; 2 > i15; ++i15) {
                        iArr1[i13] += (int)243L;
                        i3 = i2;
                    }
                    if (i11 != 0) {
                        vMeth_check_sum += i2 + i3 + i11 + i12 + i13 + i14 + i15 + i16 + by1 +
                            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr2);
                        return;
                    }
                    Test.bFld = Test.bFld;
                    i3 = (int)Test.dFld;
                    lArr2[i11 + 1] = i11;
                }
            } else if (Test.bFld) {
                by1 -= (byte)i16;
            } else {
                iArr1 = FuzzerUtils.int1array(N, (int)-59662);
            }
        }
        vMeth_check_sum += i2 + i3 + i11 + i12 + i13 + i14 + i15 + i16 + by1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(long l, float f) {


        vMeth();
        long meth_res = l + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=39802, i1=-14943, i17=11, i18=4, i19=-204, i20=-211, i21=-173, i22=-22965, i23=-246, i24=-46353;
        double d=2.38181;
        long l2=74L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2139474138L);

        for (i = 10; i < 187; ++i) {
            d += (i + 12);
        }
        if (Test.bFld) {
            lArr[(i >>> 1) % N] = (-iMeth(Test.instanceCount, Test.fFld));
            Test.instanceCount = (long)Test.fFld;
            for (i17 = 10; i17 < 261; i17++) {
                iArrFld = iArrFld;
                Test.instanceCount = Test.instanceCount;
                i18 = (int)Test.instanceCount;
                for (i19 = i17; i19 < 100; ++i19) {
                    byte by2=-91;
                    Test.bFld = Test.bFld;
                    d = Test.instanceCount;
                    i20 -= (int)Test.fFld;
                    l2 += i19;
                    Test.fFld = by2;
                    i1 = i20;
                }
                for (i21 = i17; i21 < 100; i21++) {
                    i1 += (int)l2;
                    lArr[i17] -= 4698492538895562696L;
                    i20 = i22;
                    for (i23 = 1; 1 > i23; ++i23) {
                        i22 = (int)Test.fFld;
                        iArrFld[i21 - 1] += (int)-616796098L;
                        switch (((i21 % 4) * 5) + 5) {
                        case 24:
                            i24 |= i22;
                            i18 = i17;
                            Test.dFld = Test.fFld;
                        case 12:
                            if (Test.bFld) break;
                        case 15:
                            l2 <<= i22;
                            iArrFld[i21 + 1] = (int)Test.instanceCount;
                            break;
                        case 8:
                            i18 -= (int)1.326F;
                            break;
                        }
                    }
                }
            }
        } else if (Test.bFld) {
            i1 -= (int)1.57F;
        } else if (Test.bFld) {
            i22 = i18;
        } else {
            Test.instanceCount *= i17;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
