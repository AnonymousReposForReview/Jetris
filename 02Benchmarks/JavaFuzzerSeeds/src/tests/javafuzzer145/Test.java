package tests.javafuzzer145;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:02:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3360250404518233881L;
    public static int iFld=-8;
    public static byte byFld=-23;
    public static short sFld=-30715;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i5, int i6) {

        double d=81.82725;
        byte by1=74;
        int i7=7, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -192);

        i6 -= i6;
        iArr[(i6 >>> 1) % N] *= (int)-52419L;
        i5 *= 28396;
        iArr = FuzzerUtils.int1array(N, (int)3);
        i6 -= i6;
        Test.instanceCount = (long)d;
        iArr[(i6 >>> 1) % N] *= Test.iFld;
        Test.instanceCount -= i5;
        by1 *= (byte)i6;
        f1 *= (float)d;
        Test.instanceCount += -130;
        Test.instanceCount = i6;
        i7 = 199;
        while ((i7 -= 2) > 0) {
            Test.iFld = i7;
            Test.instanceCount >>>= i5;
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i5 + i6 + Double.doubleToLongBits(d) + by1 + i7 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i3, int i4) {

        float f2=0.904F;
        int i8=83, i9=26, i10=1, i11=-124, i12=-45800, i13=59677;
        double d1=11.39314, dArr[]=new double[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(dArr, 1.116848);
        FuzzerUtils.init(lArr1, 216L);

        vMeth2(f2, Test.iFld, Test.iFld);
        switch ((((i4 >>> 1) % 10) * 5) + 109) {
        case 156:
            i8 = (int)Test.instanceCount;
            i9 = 1;
            while (++i9 < 254) {
                switch (((i3 >>> 1) % 2) + 1) {
                case 1:
                    Test.iFld = i4;
                    switch (((i9 % 10) * 5) + 120) {
                    case 150:
                        f2 -= i8;
                        break;
                    case 161:
                        i10 = 1;
                        while (++i10 < 6) {
                            f2 *= Test.instanceCount;
                            for (i11 = 1; i11 > 1; --i11) {
                                i4 = Test.iFld;
                                Test.iFld |= -10571;
                                i8 = (int)Test.instanceCount;
                                i8 >>= i9;
                            }
                        }
                        break;
                    case 152:
                        i12 = (int)Test.instanceCount;
                    case 141:
                        Test.lArrFld[i9] = Test.instanceCount;
                        break;
                    case 130:
                        i3 += (int)Test.instanceCount;
                        break;
                    case 131:
                        i12 -= 38902;
                        break;
                    case 169:
                        Test.lArrFld[i9] -= i8;
                        break;
                    case 156:
                        Test.iFld += (((i9 * Test.instanceCount) + f2) - i11);
                        break;
                    case 151:
                        dArr = FuzzerUtils.double1array(N, (double)46.63916);
                    case 147:
                        Test.lArrFld[i9 - 1] >>= Test.iFld;
                        break;
                    default:
                        Test.iFld >>>= i10;
                    }
                    break;
                case 2:
                    Test.instanceCount -= 9;
                    break;
                default:
                    i8 &= i4;
                }
            }
            break;
        case 112:
            i3 += i10;
            break;
        case 157:
            i12 *= i4;
        case 149:
            i3 >>>= Test.iFld;
            break;
        case 117:
            d1 = 249L;
        case 114:
            lArr1 = lArr1;
        case 142:
            f2 -= Test.instanceCount;
            break;
        case 118:
            Test.instanceCount = -42700;
            break;
        case 136:
            f2 -= 13;
            break;
        case 121:
            f2 -= Test.instanceCount;
            break;
        default:
            lArr1[(i13 >>> 1) % N][(i12 >>> 1) % N] &= i4;
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d1) + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        float f=-22.74F, f3=119.265F;
        int i=239, i1=5, i2=46913, i14=-88, i15=7, i16=-137, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(iArr1, 40881);
        FuzzerUtils.init(bArr, true);

        lArr = (lArr = (lArr = (lArr = lArr)));
        for (f = 13; 310 > f; f += 2) {
            i += (5 + (f * f));
            for (i1 = 1; i1 < 11; ++i1) {
                byte by=-77;
                i2 += (((i1 * i1) + i2) - by);
                vMeth1(i14, 59055);
                i14 += i2;
                i += (i1 | i14);
            }
            f3 += i;
            i = i1;
            if (b) {
                iArr1[(int)(f)] += i;
                for (i15 = 11; 1 < i15; i15 -= 2) {
                    Test.instanceCount *= Test.iFld;
                    f3 += i15;
                }
                vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i14 + Float.floatToIntBits(f3) + i15 + i16 +
                    (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                return;
            } else {
                bArr[(int)(f + 1)] = b;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i14 + Float.floatToIntBits(f3) + i15 + i16 + (b ? 1
            : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=37, i18=-47, i19=-192, i20=-8, i21=-9758, i22=-4;
        boolean b1=false;
        float f4=-58.817F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 78.716F);

        vMeth();
        Test.iFld += Test.byFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] *= 104;
        i17 = 1;
        while (++i17 < 123) {
            i18 = 204;
            while (--i18 > 0) {
                Test.iFld >>= Test.iFld;
                i19 = 1;
                while (++i19 < 1) {
                    Test.sFld = (short)Test.instanceCount;
                    if (b1) {
                        try {
                            Test.iFld = (-64898 / i17);
                            Test.iFld = (-181 % i19);
                            Test.iFld = (Test.iArrFld[i17 + 1] % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        Test.iFld <<= (int)Test.instanceCount;
                        f4 -= i18;
                        fArr[i18][i19 + 1] += i17;
                        Test.iFld = i18;
                    }
                    Test.instanceCount |= Test.instanceCount;
                    Test.iFld += (int)Test.instanceCount;
                    f4 *= i19;
                    Test.instanceCount *= (long)-1.48F;
                    Test.iFld = i17;
                }
                for (i20 = 1; i20 < 1; i20++) {
                    b1 = true;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount = i21;
                    f4 += f4;
                    fArr[i18 + 1][i18] = Test.instanceCount;
                    switch (((i22 >>> 1) % 5) + 50) {
                    case 50:
                        if (b1) continue;
                        Test.iArrFld[i18 + 1] -= (int)Test.instanceCount;
                    case 51:
                        Test.instanceCount *= i17;
                        Test.instanceCount = 0L;
                        break;
                    case 52:
                        if (true) break;
                        break;
                    case 53:
                        Test.iArrFld[i17] -= (int)Test.instanceCount;
                    case 54:
                        Test.instanceCount = Test.instanceCount;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
