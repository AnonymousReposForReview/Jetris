package tests.javafuzzer892;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:19:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2027036785L;
    public static int iFld=-8;
    public float fFld=91.820F;
    public static boolean bFld=true;
    public byte byFld=100;
    public static volatile double dFld=0.1933;
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -38);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth(long l, int i, int i1) {


        i1 -= (++i);
        vMeth_check_sum += l + i + i1;
    }

    public int iMeth(boolean b, long l1, int i5) {

        float f2=16.648F;
        int i6=63658, i7=106, i8=35081, i9=-102, iArr1[]=new int[N];
        long l2=219L;
        short s=16541;
        double d=0.102837;

        FuzzerUtils.init(iArr1, -91);

        for (f2 = 9; f2 < 250; ++f2) {
            for (i7 = 1; i7 < 7; i7++) {
                try {
                    i8 = (-22255 % i5);
                    i8 = (31936 % iArr1[i7]);
                    Test.iFld = (i8 / i8);
                } catch (ArithmeticException a_e) {}
                for (l2 = 1; 2 > l2; l2++) {
                    iArr1[i7 + 1] -= s;
                    iArr1[(int)(f2)] = (int)d;
                    iArr1[(int)(l2)] = 11;
                    if (b) break;
                    if (false) {
                        iArr1[(int)(l2 - 1)] <<= i6;
                    } else {
                        i5 += (int)(l2 + i9);
                    }
                    i5 -= 0;
                    i5 += (int)(l2 * l2);
                    i6 = s;
                    iArr1[i7 + 1] = i6;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + l1 + i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + l2 + i9 + s +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(byte by) {

        int i3=-183, i4=-11, i11=-40121, i12=26, i13=-35709, i14=-2, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -33604);
        FuzzerUtils.init(lArr, -8L);

        Test.iFld <<= (iArr[(-161 >>> 1) % N] - (-(--Test.iFld)));
        for (i3 = 1; i3 < 123; ++i3) {
            switch ((((i4 * i3) >>> 1) % 8) + 88) {
            case 88:
                dArrFld = (dArrFld = dArrFld);
            case 89:
                Test.instanceCount |= (long)((--fFld) + ((12815 - (by++)) - (iArr[i3] *= i4)));
                break;
            case 90:
                dArrFld[i3 + 1] = Test.iFld;
                iArr[i3 + 1] = (-iMeth(Test.bFld, Test.instanceCount, i4));
                break;
            case 91:
                Test.iFld |= -136;
                for (i11 = i3; 13 > i11; i11++) {
                    short s1=17463;
                    if (Test.bFld) break;
                    if (Test.bFld) break;
                    iArr[i11] *= s1;
                    for (i13 = 1; 1 > i13; ++i13) {
                        Test.instanceCount -= i4;
                        lArr[i13 + 1] |= i13;
                    }
                }
                break;
            case 92:
                fFld += (2L + (i3 * i3));
            case 93:
                if (Test.bFld) continue;
                break;
            case 94:
                Test.instanceCount *= i3;
                break;
            case 95:
                i4 += i4;
                break;
            }
        }
        vMeth1_check_sum += by + i3 + i4 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public double dMeth(float f, float f1) {

        int i2=-45027, i15=-155, i16=-14;
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)-1203);
        FuzzerUtils.init(lArr1, 13L);

        Test.instanceCount -= (--i2);
        vMeth1(byFld);
        for (short s2 : sArr) {
            for (i15 = 1; i15 < 4; ++i15) {
                Test.iFld <<= i15;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-6);
                lArr1[i15] = (long)Test.dFld;
                Test.iArrFld[i15] = i16;
                i16 += i15;
                f -= Test.iFld;
            }
            i16 |= Test.iFld;
            i16 -= i16;
            i2 += i2;
            i16 -= i15;
            Test.dFld = Test.instanceCount;
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 + i15 + i16 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=2, i18=-14, i19=13, i20=-14, i21=9557;
        long l3=21321L, lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -10L);

        if (Test.bFld) {
            vMeth((long)((dMeth(fFld, fFld) * Test.iFld) - Test.iFld), Test.iFld, Test.iFld);
            for (i17 = 10; i17 < 252; i17++) {
                Test.instanceCount = Test.iFld;
            }
            for (i19 = 7; i19 < 354; ++i19) {
                if (Test.bFld) break;
                l3 = 1;
                while (++l3 < 73) {
                    i21 = 1;
                    while (++i21 < 1) {
                        lArr2[i19] = l3;
                        Test.instanceCount = -9L;
                        i18 = 28936;
                        i20 >>= (int)227503292L;
                        switch ((i19 % 3) + 35) {
                        case 35:
                            Test.instanceCount -= l3;
                            break;
                        case 36:
                            try {
                                Test.iFld = (i19 / i20);
                                i20 = (i17 / 14857);
                                i20 = (i19 / -8123);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = i20;
                            fFld *= -64045;
                        case 37:
                            byFld = (byte)i18;
                            Test.bArrFld[i21 + 1] = Test.bFld;
                            i18 = -171;
                        }
                        i20 = (int)2.120984;
                    }
                    Test.dFld = l3;
                    fFld += (l3 - i21);
                    i18 += i21;
                    fFld += i18;
                    i20 = i19;
                    Test.iArrFld[(int)(l3 - 1)] = (int)fFld;
                    i18 += i21;
                }
                Test.iFld += (i19 * Test.iFld);
                Test.iFld += -52633;
            }
        } else {
            Test.iFld -= (int)fFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
