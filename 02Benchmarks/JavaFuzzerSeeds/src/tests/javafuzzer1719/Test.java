package tests.javafuzzer1719;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:30:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=201L;
    public int iFld=6;
    public static boolean bFld=false;
    public static int iFld1=-5;
    public byte byFld=-51;
    public float fFld=-57.376F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld1[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -84);
        FuzzerUtils.init(Test.sArrFld, (short)29610);
        FuzzerUtils.init(Test.iArrFld1, 6);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i3, double d) {

        int i4=-7, i5=-181, i6=38884;
        byte by1=78;
        short s=-10986;
        long l1=-242L;
        float f=-26.322F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr, 84.908F);

        i4 = 1;
        while (++i4 < 233) {
            i3 += (i4 ^ i3);
            switch (((i4 % 3) * 5) + 93) {
            case 99:
                i3 += (i4 - i3);
                by1 <<= (byte)8638;
                switch ((((i4 >>> 1) % 6) * 5) + 57) {
                case 78:
                    by1 &= (byte)i3;
                    Test.instanceCount = i3;
                    fArr[i4] = s;
                    switch ((i4 % 7) + 4) {
                    case 4:
                        for (l1 = 1; 7 > l1; l1++) {
                            i6 = 1;
                            while (++i6 < 2) {
                                Test.iArrFld[i4] = (int)3080375934L;
                                i3 -= i3;
                            }
                            Test.iArrFld[i4 - 1] = (int)-92.619F;
                        }
                    case 5:
                        i5 = (int)Test.instanceCount;
                    case 6:
                        f = i3;
                    case 7:
                        if (b) break;
                        break;
                    case 8:
                        Test.instanceCount += i4;
                    case 9:
                        i3 >>>= (int)Test.instanceCount;
                        break;
                    case 10:
                        by1 = (byte)f;
                    }
                case 63:
                    by1 = (byte)i6;
                    break;
                case 84:
                    f *= i4;
                    break;
                case 67:
                    i5 += i4;
                    break;
                case 62:
                case 72:
                    Test.instanceCount = i6;
                    break;
                }
            case 105:
            case 100:
                if (i4 != 0) {
                }
                break;
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + by1 + s + l1 + i5 + i6 + Float.floatToIntBits(f) + (b ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l, byte by, int i) {

        int i1=-4, i2=10, i7=-63842, i8=3, i9=0;
        boolean b1=false;
        float f1=86.639F;

        for (i1 = 22; 367 > i1; i1++) {
            i += (int)((dMeth(i2, -74.107240) * i1) - l);
            i7 = 1;
            while (++i7 < 5) {
                double d1=-2.5080;
                by = (byte)Test.instanceCount;
                i += i7;
                i2 = 11;
                b1 = false;
                Test.iArrFld[i7 + 1] = (int)f1;
                for (i8 = 1; 1 > i8; ++i8) {
                    i = (int)Test.instanceCount;
                    Test.sArrFld[i1 + 1] *= (short)Test.instanceCount;
                    i -= i;
                    try {
                        i = (i2 % -18290);
                        i = (-40435 % i);
                        i9 = (i1 % i);
                    } catch (ArithmeticException a_e) {}
                    Test.bFld = Test.bFld;
                }
                d1 = f1;
            }
        }
        vMeth1_check_sum += l + by + i + i1 + i2 + i7 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i8 + i9;
    }

    public static void vMeth() {

        byte by2=61;
        int i10=1, i11=247, i12=132, i13=-76, i14=14595;
        float fArr1[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, -116.830F);
        FuzzerUtils.init(lArr, -12L);

        vMeth1(Test.instanceCount, by2, 6);
        i10 = 1;
        while ((i10 += 3) < 129) {
            Test.iFld1 |= (int)Test.instanceCount;
            Test.iFld1 += (((i10 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            i11 = 1;
            while (++i11 < 35) {
                i12 = 1;
                do {
                    Test.iFld1 -= i10;
                    fArr1 = fArr1;
                    lArr[i10 - 1] = i11;
                } while (++i12 < 1);
                lArr[i10] >>= Test.iFld1;
                Test.iFld1 = i12;
                Test.instanceCount += i10;
                for (i13 = 1; i13 < 1; i13++) {
                    Test.iFld1 <<= by2;
                    Test.iArrFld1[i10] *= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += by2 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=-112, i16=-16794, i17=-11, i18=-14, i19=-37589, i20=4, i21=16028, i22=53;
        long l2=-3L, lArr1[]=new long[N];
        double d2=127.70271, dArr[]=new double[N];
        short s1=29858;

        FuzzerUtils.init(lArr1, 13L);
        FuzzerUtils.init(dArr, 0.85809);

        iFld = (int)-18864L;
        vMeth();
        switch ((((Test.iFld1 >>> 1) % 9) * 5) + 33) {
        case 76:
            i15 = 1;
            while (++i15 < 146) {
                Test.iFld1 = Test.iFld1;
                l2 += l2;
                for (i16 = 4; i16 < 172; ++i16) {
                    i17 = byFld;
                    Test.iFld1 ^= iFld;
                }
                for (i18 = 6; i18 < 172; ++i18) {
                    Test.iArrFld1[i15 + 1] = (int)d2;
                    for (i20 = 2; i20 > 1; --i20) {
                        Test.iArrFld1 = Test.iArrFld1;
                        Test.iFld1 += i16;
                        byFld = (byte)14;
                        byFld <<= (byte)i21;
                        switch (((i20 % 8) * 5) + 3) {
                        case 41:
                            switch ((i18 % 5) + 9) {
                            case 9:
                                l2 -= i21;
                                lArr1[i18 + 1] += i17;
                                fFld *= l2;
                            case 10:
                                lArr1[i18 + 1] -= 8462L;
                                iFld += i20;
                                fFld = 7912166784077372444L;
                                fArrFld[i15 - 1] *= i21;
                                break;
                            case 11:
                                i21 += (i20 * i20);
                            case 12:
                            case 13:
                                i21 &= byFld;
                            }
                            break;
                        case 28:
                            i21 = i17;
                        case 29:
                            iFld = iFld;
                            break;
                        case 26:
                            dArr[i15] = -77;
                        case 19:
                            Test.iFld1 = i16;
                            break;
                        case 31:
                            if (Test.bFld) continue;
                            break;
                        case 22:
                            Test.iFld1 = s1;
                            break;
                        case 27:
                            iFld += (((i20 * i21) + i21) - i19);
                            break;
                        default:
                            i17 += i20;
                        }
                    }
                }
            }
            break;
        case 64:
            byFld ^= (byte)l2;
            break;
        case 40:
            lArr1[(i17 >>> 1) % N] ^= Test.instanceCount;
            break;
        case 72:
            Test.iFld1 <<= byFld;
            break;
        case 53:
            s1 |= (short)i16;
            break;
        case 34:
            Test.sArrFld[(i20 >>> 1) % N] = (short)Test.instanceCount;
        case 41:
            i17 -= iFld;
            break;
        case 68:
            Test.iArrFld1[(i18 >>> 1) % N] *= i20;
            break;
        case 60:
            Test.iArrFld[(i21 >>> 1) % N] = 53;
            break;
        default:
            Test.iArrFld[(i22 >>> 1) % N] = (int)d2;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
