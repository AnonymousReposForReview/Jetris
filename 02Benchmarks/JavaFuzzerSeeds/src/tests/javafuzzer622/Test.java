package tests.javafuzzer622;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:41:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-105L;
    public static double dFld=-117.77464;
    public static short sFld=31267;
    public int iFld=44314;
    public boolean bArrFld[]=new boolean[N];

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(int i3, int i4, int i5) {


        Test.dFld -= i3;
        vMeth_check_sum += i3 + i4 + i5;
    }

    public static int iMeth1(int i8, int i9) {

        double d1=-83.70945, dArr[]=new double[N];
        int i10=52932, i11=5, i12=-21, i13=222, i14=-52;
        float f=-1.672F;
        short s=26727;
        boolean b2=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 1.20284);
        FuzzerUtils.init(byArr, (byte)6);

        for (d1 = 365; 6 < d1; --d1) {
            i8 -= i8;
            i8 >>= 20998;
            i8 -= (int)d1;
            i9 = i8;
            for (i11 = 1; i11 < 5; ++i11) {
                dArr[(int)(d1)] = i8;
                i13 = 1;
                do {
                    i9 *= i12;
                    byArr[(int)(d1 + 1)] -= (byte)Test.instanceCount;
                } while (++i13 < 2);
                i14 = 1;
                do {
                    f += Test.instanceCount;
                    i12 += (((i14 * i13) + i9) - s);
                    if (b2) break;
                    if (b2) continue;
                } while (++i14 < 2);
            }
        }
        long meth_res = i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) +
            s + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, long l1) {

        int i6=-17594, i7=-118, i15=-55940, i16=12, i17=201, i18=41853, i19=-34337, iArr[]=new int[N];
        float f1=5.972F;
        boolean b3=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-32474);
        FuzzerUtils.init(iArr, -251);

        for (i6 = 2; 122 > i6; ++i6) {
            byte by=-78;
            sArr[i6] -= (short)iMeth1(i7, i7);
            iArr[i6] >>= by;
            for (i15 = 1; i15 < 13; ++i15) {
                sArr = sArr;
                iArr[i6 - 1] *= (int)Test.instanceCount;
                f1 = Test.instanceCount;
                i16 += (i15 ^ i15);
                for (i17 = 1; i17 < 2; ++i17) {
                    i18 *= 20;
                }
                f1 -= i7;
                if (b3) continue;
                Test.sFld += (short)i15;
                i16 >>= i19;
            }
            i19 = i17;
        }
        long meth_res = l + l1 + i6 + i7 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + (b3 ? 1 : 0) + i19 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i2, double d, boolean b1) {


        vMeth(iMeth(Test.instanceCount, Test.instanceCount), i2, 69);
        long meth_res = i2 + Double.doubleToLongBits(d) + (b1 ? 1 : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-13033, i20=-64542, i21=-9810, i22=-10, i23=-3, i24=10, iArr1[]=new int[N];
        boolean b=true;
        float f2=-1.953F;
        long l2=3881288108L, lArr[]=new long[N];
        byte by1=61, byArr1[]=new byte[N];
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(lArr, 66L);
        FuzzerUtils.init(iArr1, -64109);
        FuzzerUtils.init(dArr1, 0.76165);
        FuzzerUtils.init(byArr1, (byte)-24);

        for (i = 360; 8 < i; i--) {
            if (b = (b && ((bArrFld[i - 1] = false) && bMeth(192, -1.89229, b)))) break;
        }
        Test.instanceCount -= i1;
        i20 = 1;
        while (++i20 < 121) {
            i1 = (int)Test.instanceCount;
            for (i21 = 4; i21 < 207; ++i21) {
                if (b) {
                    f2 = -7;
                    i22 += (int)Test.dFld;
                    Test.instanceCount *= i1;
                    for (l2 = 1; l2 < 2; ++l2) {
                        lArr[(int)(l2 + 1)] -= iFld;
                        Test.instanceCount = -12;
                    }
                }
                i24 = 1;
                while (++i24 < 2) {
                    switch ((i21 % 10) + 47) {
                    case 47:
                        by1 >>= by1;
                        break;
                    case 48:
                        i22 >>>= iFld;
                        Test.instanceCount = l2;
                        iArr1[i20 - 1] ^= i;
                        break;
                    case 49:
                        i23 -= (int)l2;
                        Test.instanceCount += (((i24 * iFld) + iFld) - i24);
                    case 50:
                        if (true) break;
                        dArr1[i21 - 1] = dArr1[i20 + 1];
                        iArr1[i20] <<= i21;
                    case 51:
                        i1 = (int)Test.dFld;
                        f2 -= i1;
                        i1 += (int)Test.dFld;
                        iFld <<= i24;
                        break;
                    case 52:
                        iArr1 = iArr1;
                        break;
                    case 53:
                        iFld *= i20;
                        break;
                    case 54:
                        iArr1[i24 + 1] = i24;
                    case 55:
                        i22 += i24;
                        break;
                    case 56:
                        f2 *= i23;
                        break;
                    default:
                        byArr1[i21 - 1] -= (byte)f2;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
