package tests.javafuzzer3190;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:34:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public float fFld=-125.627F;
    public static volatile double dFld=-65.110372;
    public static int iFld=-243;
    public static boolean bFld=true;
    public static volatile short sFld=9598;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4089);
        FuzzerUtils.init(Test.lArrFld, -6759574292351195103L);
    }

    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=-37462, i7=9, i8=179;
        byte by1=78;
        float f2=2.855F, fArr1[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr1, -104.231F);

        for (i6 = 8; i6 < 159; ++i6) {
            Test.iArrFld[i6 - 1] >>>= i6;
            i7 += (i6 + Test.instanceCount);
            i8 = 1;
            while ((i8 += 2) < 10) {
                fArr1[i8 - 1] = (float)0.23065;
                Test.instanceCount += (((i8 * i8) + Test.instanceCount) - Test.instanceCount);
                fArr1[i8 - 1] = i8;
                by1 = (byte)Test.iFld;
                f2 = i6;
                Test.iFld += (int)Test.instanceCount;
                if (b) {
                    i7 *= -19716;
                    Test.instanceCount = i7;
                    if (Test.iFld != 0) {
                        vMeth_check_sum += i6 + i7 + i8 + by1 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                } else if (b) {
                    Test.instanceCount += by1;
                }
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + by1 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth() {

        float f1=-1.520F, fArr[]=new float[N];
        int i5=37921, i9=10, i10=131, i11=-12, i12=3;
        long l1=-9L, lArr[][]=new long[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -84.135F);
        FuzzerUtils.init(lArr, 20624L);
        FuzzerUtils.init(bArr, false);

        f1 = 1;
        do {
            i5 *= (int)fArr[(int)(f1 + 1)];
            lArr[(int)(f1)][(int)(f1 + 1)] -= (i5++);
            vMeth();
            lArr[(int)(f1)] = lArr[(int)(f1 - 1)];
            Test.dFld *= Test.iFld;
            i9 = 1;
            while (++i9 < 5) {
                for (i10 = 1; i10 > f1; --i10) {
                    if (Test.bFld) {
                        Test.instanceCount >>>= i10;
                        bArr = bArr;
                    }
                    Test.iFld -= i9;
                }
                for (l1 = (long)(f1); l1 < 1; l1++) {
                    Test.instanceCount = 121;
                    Test.iFld = Test.iFld;
                }
            }
        } while (++f1 < 323);
        long meth_res = Float.floatToIntBits(f1) + i5 + i9 + i10 + i11 + l1 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(long l, int i3, int i4) {

        float f=-90.769F;
        byte by2=92;
        int i13=-233, i14=13, i15=-111, i16=32604, i17=9;

        f = ((iMeth() + Test.sFld) - Test.iFld);
        by2 = (byte)Test.iFld;
        for (i13 = 12; i13 < 276; ++i13) {
            i15 = 1;
            do {
                Test.sFld += (short)(-8L + (i15 * i15));
                Test.iArrFld[i15] = i3;
                if (Test.bFld) {
                    switch (((i15 % 8) * 5) + 4) {
                    case 34:
                        f = 79.769F;
                        break;
                    case 30:
                        Test.iArrFld[i15 - 1] += i3;
                        for (i16 = i13; i16 < 1; i16++) {
                            f += i16;
                            l &= Test.instanceCount;
                            i3 -= -77;
                            if (Test.bFld) continue;
                        }
                    case 27:
                        i14 >>= i14;
                        break;
                    case 20:
                        Test.lArrFld[i13] = 13;
                        break;
                    case 38:
                    case 9:
                        Test.iFld += i17;
                        break;
                    case 28:
                        f -= (float)Test.dFld;
                    case 21:
                        i4 &= by2;
                        break;
                    default:
                        Test.iFld += (int)Test.instanceCount;
                    }
                } else if (Test.bFld) {
                    Test.sFld = (short)6L;
                } else if (Test.bFld) {
                    Test.instanceCount -= (long)Test.dFld;
                }
            } while (++i15 < 6);
        }
        long meth_res = l + i3 + i4 + Float.floatToIntBits(f) + by2 + i13 + i14 + i15 + i16 + i17;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=16, i1=-14, i2=-105, i18=-175, i19=-160, i20=-215, i21=-163, i22=-11, i23=101;
        byte by=67, byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-96);

        fFld -= (float)(Test.instanceCount * ((i + Test.dFld) - (--by)));
        for (i1 = 10; i1 < 200; ++i1) {
            i -= (byMeth(Test.instanceCount, i1, i1) * i1);
            Test.iFld = (int)-44.641F;
            Test.instanceCount -= i;
            Test.instanceCount = Test.instanceCount;
            byArr[i1][i1 + 1] <<= (byte)i1;
            i = i1;
            by += (byte)(i1 * i1);
            i += (int)Test.instanceCount;
            Test.instanceCount = (long)-29.995F;
        }
        for (i18 = 265; i18 > 10; i18--) {
            for (i20 = 99; 3 < i20; i20--) {
                for (i22 = 1; i22 < 2; ++i22) {
                    i21 += (i22 | Test.instanceCount);
                    Test.iArrFld = Test.iArrFld;
                    if (Test.bFld) break;
                    Test.iArrFld[i18] = 8;
                    i2 = -13;
                    switch ((((i2 >>> 1) % 7) * 5) + 105) {
                    case 131:
                        fFld = i23;
                        switch (((i22 % 8) * 5) + 60) {
                        case 64:
                            Test.instanceCount -= i20;
                            i19 = i2;
                            break;
                        case 92:
                            i19 &= (int)Test.instanceCount;
                            switch ((i18 % 4) + 61) {
                            case 61:
                            case 62:
                                fFld -= i;
                                break;
                            case 63:
                                Test.lArrFld[i22 + 1] += (long)Test.dFld;
                            case 64:
                                by = (byte)Test.instanceCount;
                                break;
                            default:
                                i2 += (int)Test.dFld;
                            }
                        case 76:
                            fFld *= i;
                            break;
                        case 89:
                            i23 <<= i22;
                        case 70:
                            Test.instanceCount *= Test.instanceCount;
                            break;
                        case 74:
                            i += i22;
                            break;
                        case 66:
                            fFld = Test.instanceCount;
                            break;
                        case 77:
                            i += (i22 * i22);
                            break;
                        }
                        break;
                    case 111:
                        Test.iFld = (int)Test.instanceCount;
                    case 123:
                        Test.iFld += (((i22 * fFld) + fFld) - i20);
                        break;
                    case 108:
                        by *= (byte)Test.instanceCount;
                        break;
                    case 125:
                        i = i23;
                        break;
                    case 136:
                        Test.iArrFld[(i19 >>> 1) % N] *= i20;
                        break;
                    case 116:
                        by += (byte)(((i22 * Test.instanceCount) + i20) - fFld);
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
