package tests.javafuzzer3207;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:54:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4091420296L;
    public static int iFld=-24433;
    public static double dFld=-7.107382;
    public static boolean bFld=true;
    public static float fFld=0.651F;
    public byte byFld=110;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14688);
        FuzzerUtils.init(Test.sArrFld, (short)3196);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth() {

        int i2=-244, i3=121, i4=215, i5=5335, i6=55070, i7=-29510, iArr[][]=new int[N][N];
        short s=19989;
        float f=-22.460F;
        long l=-61800L;
        boolean b=true;
        byte by=-124;

        FuzzerUtils.init(iArr, 17692);

        for (i2 = 248; 10 < i2; i2 -= 3) {
            for (i4 = 1; i4 < 19; i4 += 2) {
                i3 += (((i4 * i5) + i4) - Test.instanceCount);
                s *= (short)(i4 - (--f));
                i5 *= i5;
                for (i6 = 1; i6 < 3; ++i6) {
                    iArr = iArr;
                }
                switch (((((int)(Test.dFld + i6)) >>> 1) % 3) + 69) {
                case 69:
                    i3 <<= i6;
                    l = 1;
                    while (++l < 3) {
                        i7 *= iArr[(int)(l - 1)][(int)(l + 1)];
                        Test.instanceCount <<= i5;
                        i3 += (int)l;
                        Test.iFld = (--i5);
                        b = (Test.dFld > Test.iFld);
                    }
                    break;
                case 70:
                    iArr[i2 - 1][i4 - 1] -= (int)(-((by - i7) + (i6 + Test.instanceCount)));
                case 71:
                    iArr[i4 - 1][i4] = Test.iFld;
                    break;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + s + Float.floatToIntBits(f) + i6 + i7 + l + (b ? 1 : 0) + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i14) {

        long l1=-29L;
        int i15=37023, i16=0, i17=20986, i18=4, i19=1, iArr1[]=new int[N];
        short s1=31762;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 24419);

        iArr1[(i14 >>> 1) % N] |= (int)Test.instanceCount;
        for (l1 = 3; l1 < 186; l1++) {
            float f2=84.979F;
            f2 -= Test.instanceCount;
            i15 += (int)(((l1 * Test.iFld) + s1) - Test.instanceCount);
            for (i16 = 1; 9 > i16; i16++) {
                iArr1[i16 - 1] *= 7;
                if (b1) {
                    if (b1) break;
                    switch (((i14 >>> 1) % 3) + 102) {
                    case 102:
                        i15 += (i16 * i14);
                        for (i18 = 1; 2 > i18; i18++) {
                            i17 <<= i15;
                            Test.instanceCount %= (i15 | 1);
                            i14 += (i18 * i18);
                        }
                        if (b1) break;
                        break;
                    case 103:
                        Test.iFld += (i16 + Test.iFld);
                        break;
                    case 104:
                        f2 += (i16 * i16);
                        break;
                    default:
                        i14 = (int)l1;
                    }
                } else {
                    b1 = b1;
                }
            }
        }
        vMeth1_check_sum += i14 + l1 + i15 + s1 + i16 + i17 + (b1 ? 1 : 0) + i18 + i19 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        int i8=93, i9=-14, i10=47885, i11=8, i12=-20277, i13=5, i20=48770;
        short s2=-19014;
        byte by1=25;

        for (i8 = 15; i8 < 298; i8++) {
            for (i10 = 1; i10 < 6; i10++) {
                for (i12 = 1; i12 < 2; i12++) {
                    vMeth1(Test.iFld);
                }
                Test.iArrFld[i8] <<= (int)Test.instanceCount;
                i11 <<= i13;
                Test.iFld = i12;
                Test.iArrFld = Test.iArrFld;
                i20 = 1;
                do {
                    Test.instanceCount += Test.instanceCount;
                    s2 += (short)(176 + (i20 * i20));
                    Test.iArrFld[i8] -= i8;
                    i9 *= i12;
                    i9 = by1;
                    i9 = i10;
                } while (++i20 < 2);
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i20 + s2 + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i=7, i1=140, i22=117, i23=-165, i24=-252, i25=-44;
        float f1=111.353F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3262452968087721318L);

        if (Test.bFld) {
            for (i = 373; i > 6; i -= 2) {
                int i21=61990;
                vMeth();
                f1 *= Integer.reverseBytes(i1 += (i * i1));
                i1 = (int)lMeth();
                try {
                    i1 = (i / -221);
                    Test.iFld = (18270 / i1);
                    i21 = (Test.iFld / 128);
                } catch (ArithmeticException a_e) {}
            }
            for (i22 = 210; i22 > 5; i22--) {
                i23 *= (int)Test.dFld;
                Test.instanceCount <<= Test.iFld;
                Test.instanceCount = i;
                i1 <<= (int)-3L;
            }
            for (i24 = 5; i24 < 165; i24++) {
                Test.iArrFld[i24 - 1] = (int)-109.16453;
                Test.instanceCount = (long)f1;
                i25 = 31866;
            }
        } else {
        }
        long meth_res = i + i1 + Float.floatToIntBits(f1) + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.117166;
        int i26=-27762, i27=0, i28=8, i29=71, i30=-30535, i31=76, i32=-54237;
        float f3=-63.894F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -123.297F);

        Test.iFld *= (int)(Float.intBitsToFloat(Test.iFld * Test.iFld) * (Test.iFld * fArr[(Test.iFld >>> 1) %
            N][(22875 >>> 1) % N]));
        Test.dFld *= Test.iFld;
        Test.dFld = (((Test.iFld = -63059) - -225) - iMeth());
        Test.iFld -= Test.iFld;
        Test.iFld *= (int)Test.dFld;
        Test.iFld += (int)Test.instanceCount;
        d = 1;
        while (++d < 131) {
            Test.iFld += (int)((long)d | Test.iFld);
            Test.instanceCount *= (long)Test.fFld;
            Test.iFld += (int)Test.instanceCount;
            for (i26 = 191; i26 > 4; i26 -= 2) {
                Test.iFld = (int)Test.instanceCount;
                Test.instanceCount <<= -72;
                Test.iArrFld[(int)(d)] >>= (int)Test.instanceCount;
                Test.iFld += i26;
                i27 *= Test.iFld;
            }
            i27 *= Test.iFld;
            Test.sArrFld[(int)(d)] -= (short)Test.iFld;
            i27 *= (int)Test.instanceCount;
            for (i28 = 191; i28 > 2; i28--) {
                for (i30 = 1; i30 < 2; ++i30) {
                    i29 += (int)d;
                }
                switch ((((i29 >>> 1) % 4) * 5) + 121) {
                case 129:
                    for (f3 = 1; f3 < 2; f3++) {
                        i32 /= 5522;
                        byFld = (byte)i32;
                        i29 = i30;
                        Test.instanceCount -= (long)-74.70831;
                    }
                    Test.instanceCount += i32;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-2);
                case 125:
                    i29 = (int)Test.instanceCount;
                case 123:
                    Test.iArrFld[i28] *= i30;
                    break;
                case 122:
                    Test.iFld = i31;
                default:
                    Test.iFld = (int)f3;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
