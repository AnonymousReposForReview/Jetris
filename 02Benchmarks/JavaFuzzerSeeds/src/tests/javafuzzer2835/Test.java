package tests.javafuzzer2835;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:04:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=114L;
    public byte byFld=118;
    public double dFld=-80.96602;
    public static short sFld=26498;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 6.160F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i6, int i7) {

        byte by=-74;
        int i8=166, i9=244, iArr[]=new int[N];
        short s1=-21260;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 449302758108614339L);
        FuzzerUtils.init(iArr, 194);

        i6 <<= i6;
        for (long l : lArr) {
            f1 *= i7;
            i6 -= i7;
            by *= (byte)i6;
        }
        for (i8 = 238; i8 > 8; --i8) {
            iArr[i8] = -48966;
            try {
                i7 = (i6 % 64028);
                i6 = (i6 / iArr[i8]);
                iArr[i8 - 1] = (iArr[i8] % i9);
            } catch (ArithmeticException a_e) {}
            s1 += (short)f1;
            if (i6 != 0) {
            }
            i6 = -59831;
            if (true) {
                f1 -= i8;
            } else if (true) {
                i6 += i8;
                if (b) break;
            } else if (b) {
                Test.instanceCount <<= i8;
            } else {
                i7 += (((i8 * Test.instanceCount) + Test.instanceCount) - i7);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + by + i8 + i9 + s1 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, int i5, float f) {

        double d=-124.72824;
        int i10=129, i11=-5, i12=-199, i13=254, i14=6, i15=-213, iArr1[]=new int[N];
        short s2=4073;
        byte by1=112;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 14);

        i5 <<= (int)(iMeth(2.994F, i4, -94) * Test.instanceCount);
        for (d = 8; d < 205; d++) {
            i4 = s2;
            Test.instanceCount += s2;
            i4 += (int)((long)d | i4);
            if (b1) {
                for (i11 = 8; i11 > 1; i11 -= 3) {
                    iArr1[i11] = (int)Test.instanceCount;
                }
                i10 = i4;
                switch (((i4 >>> 1) % 3) + 81) {
                case 81:
                    i4 = i12;
                    for (i13 = 1; i13 < 8; ++i13) {
                        i12 *= i12;
                        f += i10;
                        i15 += (((i13 * i13) + by1) - i5);
                    }
                    break;
                case 82:
                    i5 |= i14;
                    break;
                case 83:
                    i4 += (int)((long)d ^ Test.instanceCount);
                    break;
                default:
                }
            } else if (b1) {
                f += (-3L + (d * d));
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i10 + s2 + i11 + i12 + i13 +
            i14 + i15 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s, int i2, int i3) {

        float f2=0.456F;
        int i16=202, i17=-6821, i18=-8, i19=21, i20=71, i21=-9, iArr2[]=new int[N];
        double d1=-1.60397;
        byte by2=-63;
        boolean b2=false;

        FuzzerUtils.init(iArr2, -83);

        lMeth(14841, i3, f2);
        Test.instanceCount <<= i2;
        for (i16 = 2; i16 < 178; i16++) {
            i18 = 1;
            while (++i18 < 9) {
                switch ((i16 % 9) + 125) {
                case 125:
                case 126:
                    if (i2 != 0) {
                        vMeth_check_sum += s + i2 + i3 + Float.floatToIntBits(f2) + i16 + i17 + i18 + i19 + i20 +
                            Double.doubleToLongBits(d1) + by2 + (b2 ? 1 : 0) + i21 + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i17 -= i17;
                    switch (((-33 >>> 1) % 7) + 66) {
                    case 66:
                        i17 >>>= i2;
                    case 67:
                        for (i19 = 1; i19 < 1; i19++) {
                            iArr2[i18] = (int)Test.instanceCount;
                            i3 *= i3;
                            Test.instanceCount = i18;
                            d1 = Test.instanceCount;
                            i20 += (int)1.541F;
                        }
                    case 68:
                        i2 -= i18;
                        break;
                    case 69:
                        by2 += (byte)(234 + (i18 * i18));
                        break;
                    case 70:
                        f2 += (i18 + Test.instanceCount);
                        break;
                    case 71:
                        if (b2) break;
                    case 72:
                        i20 = i21;
                    }
                    break;
                case 127:
                    Test.instanceCount = i3;
                    break;
                case 128:
                case 129:
                    Test.instanceCount += i18;
                    break;
                case 130:
                    Test.instanceCount -= i20;
                    break;
                case 131:
                    Test.fArrFld[i18][i18 + 1] *= i16;
                case 132:
                case 133:
                    i2 += i18;
                default:
                    i17 = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += s + i2 + i3 + Float.floatToIntBits(f2) + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(d1) + by2 + (b2 ? 1 : 0) + i21 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=37464, i1=246, i22=53293, i23=-33832, i24=0, i25=167, i26=55, i27=45400, i28=44425, i29=2, i30=-14354,
            i31=14, iArr3[]=new int[N];
        float f3=2.21F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr3, -219);
        FuzzerUtils.init(dArr, 0.94709);

        for (i = 1; i < 335; ++i) {
            vMeth((short)(10186), i1, i1);
            for (i22 = 75; i22 > 1; i22 -= 3) {
                iArr3 = iArr3;
                i23 -= i22;
                i23 += i22;
                Test.instanceCount -= i23;
                byFld += (byte)(((i22 * i) + i) - i22);
                i23 -= i;
            }
            switch ((i % 1) + 16) {
            case 16:
                i24 += (i - i24);
                for (i25 = 3; i25 < 75; i25++) {
                    boolean b3=true;
                    for (i27 = 1; i27 < 2; i27++) {
                        Test.instanceCount >>= 192;
                        byFld += (byte)i27;
                        Test.instanceCount = (long)dFld;
                    }
                    if (b3) continue;
                }
                Test.fArrFld[i - 1][i + 1] += byFld;
                break;
            }
            Test.instanceCount -= byFld;
            Test.instanceCount *= -2395339912L;
            Test.instanceCount -= (long)f3;
            byFld = (byte)45;
            dArr = dArr;
            i28 <<= i28;
        }
        i29 = 1;
        do {
            for (i30 = 6; i30 < 116; i30++) {
                i26 -= (int)f3;
                i1 += (13 + (i30 * i30));
                i31 = i1;
                Test.sFld += (short)(((i30 * f3) + Test.sFld) - Test.instanceCount);
            }
        } while (++i29 < 217);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
