package tests.javafuzzer1185;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:10:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static volatile float fFld=2.1006F;
    public volatile int iFld=-134;
    public volatile byte byFld=94;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -55853);
        FuzzerUtils.init(Test.dArrFld, 35.9037);
        FuzzerUtils.init(Test.fArrFld, 38.257F);
    }

    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        boolean b=true;
        int i4=0, i5=6;
        double d1=0.72785;
        short s=-827;
        byte by=107;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 1044L);

        lArr[(12 >>> 1) % N] = FuzzerUtils.long1array(N, (long)175L);
        switch (((i3 >>> 1) % 2) + 120) {
        case 120:
            b = false;
            i4 = 1;
            while (++i4 < 231) {
                if (b) continue;
                i3 >>= i4;
                i3 -= -14572;
                i3 = (int)d1;
                i3 = i4;
                s += (short)62807;
            }
            i5 = 1;
            do {
                Test.instanceCount += (i5 ^ by);
                lArr[i5 + 1][i5 + 1] *= (long)Test.fFld;
                i3 = i5;
            } while (++i5 < 267);
            Test.iArrFld[(i3 >>> 1) % N] -= i3;
            break;
        case 121:
            i3 += i3;
            break;
        default:
            i3 += i3;
        }
        vMeth_check_sum += i3 + (b ? 1 : 0) + i4 + Double.doubleToLongBits(d1) + s + i5 + by +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(int i2) {

        int i6=13, i7=-6424, i8=-57407, i9=4550, i10=41534;
        double d4=-14.26705;
        long l1=-8L;
        byte by1=-118;

        vMeth(i2);
        for (i6 = 296; 5 < i6; i6--) {
            double d3=54.9323;
            d3 -= Test.instanceCount;
            Test.fFld = Test.fFld;
        }
        i7 /= (int)(i7 | 1);
        d4 += i7;
        l1 = 1;
        while (++l1 < 348) {
            by1 -= (byte)i6;
            i2 = i6;
            Test.instanceCount += 10444;
            for (i8 = 5; i8 > 1; i8 -= 2) {
                i10 = 3;
                while (--i10 > 0) {
                    d4 += d4;
                    Test.instanceCount -= i7;
                    i7 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i2 + i6 + i7 + Double.doubleToLongBits(d4) + l1 + by1 + i8 + i9 + i10;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i1, double d, long l) {

        short s1=-26491;
        int i11=0, i12=17501, i13=-4;
        double d5=2.28204;
        byte by2=55;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -115.91F);

        i1 = (int)(--l);
        Test.iArrFld[(i1 >>> 1) % N] = (int)lMeth(i1);
        Test.fFld = s1;
        i11 = 1;
        do {
            d5 = 5;
            do {
                for (i12 = 1; i12 < 1; ++i12) {
                    i13 &= i13;
                    i1 -= i12;
                    i13 <<= i13;
                    try {
                        Test.iArrFld[(int)(d5 - 1)] = (Test.iArrFld[(int)(d5 + 1)] % -109);
                        i13 = (i11 % i13);
                        i13 = (i13 / Test.iArrFld[i12]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount <<= 9858;
                    fArr[i12 - 1] += by2;
                    i1 >>= i13;
                    if (i11 != 0) {
                    }
                    l += by2;
                }
            } while (--d5 > 0);
        } while (++i11 < 344);
        long meth_res = i1 + Double.doubleToLongBits(d) + l + s1 + i11 + Double.doubleToLongBits(d5) + i12 + i13 + by2
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.606F;
        int i=-13597, i14=33566, i15=-59241, i16=-10, i17=28184, i18=-3, i19=-216;
        double d6=1.116564, d7=-52.95108;
        short s2=-88;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 61015L);

        f *= (float)(((0.73F - (i * i)) - dMeth(iFld, d6, Test.instanceCount)) - 128);
        switch ((((i >>> 1) % 1) * 5) + 118) {
        case 119:
            Test.instanceCount *= i;
            for (i14 = 10; i14 < 228; ++i14) {
                for (i16 = 3; i16 < 115; i16 += 2) {
                    byFld -= (byte)Test.instanceCount;
                }
                Test.iArrFld[i14] = (int)Test.instanceCount;
                lArr1[i14 + 1] >>= s2;
                for (i18 = 115; 6 < i18; --i18) {
                    i19 += i18;
                    lArr1[i14] = -30420;
                    i15 /= (int)(Test.instanceCount | 1);
                    b1 = b1;
                    i15 -= iFld;
                    Test.fFld -= Test.instanceCount;
                    i19 *= i;
                    d7 = 1;
                    do {
                        i19 -= (int)f;
                        if (b1) break;
                        i15 += (int)(((d7 * i) + i17) - i);
                        i19 = i18;
                        iFld <<= -113;
                        Test.instanceCount += Test.instanceCount;
                        Test.instanceCount += (-742 + (d7 * d7));
                        Test.instanceCount -= i15;
                        Test.fFld = 54530;
                    } while (++d7 < 2);
                    Test.instanceCount -= (long)d6;
                    i15 >>= 10;
                }
            }
            b1 = b1;
        default:
            iFld = i;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
