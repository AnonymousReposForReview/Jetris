package tests.javafuzzer3419;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:50:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public int iFld=12;
    public static float fFld=-9.918F;
    public static double dFld=-2.81024;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 54626);
        FuzzerUtils.init(Test.lArrFld, -1190022105L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(short s) {

        int i2=-9, i3=-13, i4=7;

        i2 -= (int)Test.fFld;
        for (i3 = 13; i3 < 231; ++i3) {
            i4 += i2;
        }
        vMeth_check_sum += s + i2 + i3 + i4;
    }

    public static int iMeth1() {

        short s1=19034;
        int i5=-44548, i6=-58058, i7=13, i8=-123, i9=-21833;
        boolean b2=true;

        vMeth(s1);
        for (i5 = 6; i5 < 305; i5++) {
            if (b2) break;
            i7 = 1;
            do {
                i6 = i5;
                Test.iArrFld[i7 + 1] = i7;
                Test.iArrFld[i7 + 1] *= (int)Test.instanceCount;
                i6 += i7;
                for (i8 = i7; i8 < 1; i8++) {
                    i6 = i6;
                    Test.dFld -= i6;
                    i6 = i7;
                    i6 += (((i8 * i6) + i8) - s1);
                    Test.instanceCount *= i7;
                    i6 += (i8 * i8);
                }
            } while (++i7 < 6);
        }
        long meth_res = s1 + i5 + i6 + (b2 ? 1 : 0) + i7 + i8 + i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b, byte by1, boolean b1) {

        int i=38568, i1=-166, i10=-1, i11=-68, i12=0, i13=12, i14=12, i15=-11;
        byte by2=105;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 7379549579698844363L);
        FuzzerUtils.init(dArr, 100.98091);

        for (i = 9; i < 359; ++i) {
            lArr[i + 1] *= (long)((iMeth1() + -108.166F) * Test.fFld);
        }
        for (i10 = 5; i10 < 219; ++i10) {
            lArr[i10] += 150;
            by1 = (byte)Test.instanceCount;
            i11 = by2;
            by1 /= (byte)(i11 | 1);
            b1 = b;
            for (i12 = 1; i12 < 8; i12++) {
                b1 = true;
                for (i14 = 1; i14 < 2; i14++) {
                    dArr[i10 - 1] += by2;
                    i13 += (int)-2.450F;
                }
                i1 <<= (int)Test.instanceCount;
                Test.dFld = -234;
            }
        }
        long meth_res = (b ? 1 : 0) + by1 + (b1 ? 1 : 0) + i + i1 + i10 + i11 + by2 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.751F;
        byte by=-113;
        int i16=-109, i17=10977, i18=13, i19=8562, i20=-131, i21=16675, i22=-11, i23=62382, i24=-3, i25=63965;
        short s2=-21631;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        f = by;
        iFld = -11;
        iFld = iMeth(Test.bFld, by, Test.bFld);
        f = iFld;
        Test.fFld += (float)Test.dFld;
        i16 = 1;
        while (++i16 < 258) {
            Test.iArrFld[(i17 >>> 1) % N] &= i16;
            Test.iArrFld[i16 + 1] |= iFld;
            for (i18 = 97; i18 > i16; i18--) {
                Test.instanceCount += i16;
                iFld += i18;
                by += (byte)(i18 * i18);
                Test.lArrFld = FuzzerUtils.long1array(N, (long)212L);
                if (Test.bFld) {
                    i19 += (i18 + i16);
                    switch ((i18 % 7) + 1) {
                    case 1:
                        for (i20 = 1; i20 < 1; ++i20) {
                            Test.lArrFld[i18 + 1] *= (long)Test.fFld;
                            s2 += (short)(i20 + Test.instanceCount);
                        }
                        for (i22 = 1; i22 < 1; i22++) {
                            iFld += (((i22 * i17) + Test.instanceCount) - iFld);
                        }
                        i21 = i22;
                        break;
                    case 2:
                        for (i24 = i16; i24 < 1; ++i24) {
                            i17 += i24;
                        }
                        iFld &= i19;
                        Test.iArrFld[i18 - 1] += i17;
                        break;
                    case 3:
                        iFld |= -86;
                        i23 = (int)Test.instanceCount;
                        break;
                    case 4:
                        Test.lArrFld[i16 - 1] ^= i21;
                        f = (float)Test.dFld;
                        break;
                    case 5:
                        i21 = i21;
                        break;
                    case 6:
                        bArr[i16 + 1][i16] = Test.bFld;
                        break;
                    case 7:
                        Test.lArrFld[i16 + 1] = (long)f;
                        break;
                    default:
                        try {
                            i19 = (-63803 % i17);
                            Test.iArrFld[i18] = (-49 % i16);
                            Test.iArrFld[i18 + 1] = (i21 % i17);
                        } catch (ArithmeticException a_e) {}
                    }
                } else if (Test.bFld) {
                    Test.iArrFld[i18 + 1] -= i17;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
