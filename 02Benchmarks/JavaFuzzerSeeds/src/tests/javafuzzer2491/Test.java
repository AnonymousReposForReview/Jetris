package tests.javafuzzer2491;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:25:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1L;
    public static double dFld=97.25610;
    public static long lFld=-6570590900858452702L;
    public static float fFld=1.948F;
    public static byte byFld=-21;
    public static volatile long lArrFld[][]=new long[N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 685839042L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(short s) {

        int i5=-1, i6=248, i7=1, i8=-9, iArr[]=new int[N];
        float f=93.480F;
        long l2=2L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(byArr, (byte)67);

        for (i5 = 334; i5 > 1; i5--) {
            i6 += (i5 * i5);
            Test.instanceCount = i6;
            iArr[i5] += 18536;
            iArr[i5 + 1] |= (int)Test.lFld;
            i6 -= i6;
            i6 += i5;
            Test.lArrFld[i5 - 1][i5] *= (long)f;
            for (i7 = 1; i7 < 5; ++i7) {
                i6 += (int)Test.dFld;
                Test.dFld += 10;
                i8 >>= (int)Test.lFld;
                Test.instanceCount = i5;
                l2 = i6;
                i8 *= -1;
            }
        }
        long meth_res = s + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + l2 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l1) {

        int i2=-12, i3=46, i4=0, i9=-80, i10=0, i11=-14, i12=64, i13=22981, i14=-13546, iArr1[][]=new int[N][N];
        short s1=14615;
        byte by1=34;

        FuzzerUtils.init(iArr1, 7);

        i2 >>= 50355;
        for (i3 = 6; i3 < 147; ++i3) {
            i2 = (int)(Test.lFld *= lMeth(s1));
            i4 += (i3 - i3);
            i2 *= 9;
        }
        switch ((((i3 >>> 1) % 4) * 5) + 14) {
        case 22:
            i4 = i2;
            for (i9 = 8; i9 < 291; ++i9) {
                for (i11 = 6; i11 > 1; i11--) {
                    for (i13 = 1; i13 < 2; i13++) {
                        by1 = (byte)i13;
                    }
                    by1 = (byte)l1;
                    Test.dFld -= -44;
                    iArr1[i11 + 1][i11 - 1] -= i10;
                    i14 = i2;
                }
            }
            break;
        case 28:
            i12 += i10;
            break;
        case 15:
            l1 >>= i3;
        case 33:
            iArr1[(i13 >>> 1) % N][(i2 >>> 1) % N] += i11;
            break;
        }
        vMeth1_check_sum += l1 + i2 + i3 + i4 + s1 + i9 + i10 + i11 + i12 + i13 + i14 + by1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i1) {

        boolean b=false, b1=false;
        int i15=-159, i16=-61, i17=-13002;
        float f1=-1.93F;

        vMeth1(Test.instanceCount);
        Test.instanceCount -= i1;
        i1 -= (int)-5723986947202201546L;
        b = b;
        i1 *= i1;
        Test.lFld = (long)Test.fFld;
        Test.lArrFld[(578 >>> 1) % N][(3 >>> 1) % N] = l;
        for (i15 = 228; i15 > 11; --i15) {
            Test.dFld = i16;
        }
        for (f1 = 2; 238 > f1; f1++) {
            i16 = i16;
            b1 = b1;
            i1 += (134 + (f1 * f1));
            Test.fFld -= i16;
            Test.lArrFld[(int)(f1 - 1)][(int)(f1 + 1)] += i17;
        }
        vMeth_check_sum += l + i1 + (b ? 1 : 0) + i15 + i16 + Float.floatToIntBits(f1) + i17 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=5, i18=-90, i19=-60384, i20=5, i21=0, i22=54688, i23=13, i24=33347, iArr2[]=new int[N];
        boolean b2=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 2907);
        FuzzerUtils.init(dArr, -1.51140);

        Test.dFld += (i--);
        vMeth(Test.lFld, -47);
        i = (int)Test.fFld;
        for (i18 = 184; i18 > 4; --i18) {
            i = (int)Test.lFld;
        }
        Test.fFld = Test.instanceCount;
        Test.lFld = i;
        i19 >>= (int)Test.instanceCount;
        for (float f2 : fArrFld) {
            switch (((i >>> 1) % 9) + 23) {
            case 23:
                for (i20 = 3; 63 > i20; ++i20) {
                    Test.dFld = 1.932F;
                    i21 = (int)Test.instanceCount;
                    try {
                        i21 = (i21 % 1170138263);
                        iArr2[i20] = (i18 / -56090);
                        i19 = (i21 % i20);
                    } catch (ArithmeticException a_e) {}
                    for (i22 = i20; i22 < 2; i22++) {
                        Test.lArrFld[i20][i22 + 1] += Test.lFld;
                        i += (i22 * i22);
                        Test.instanceCount *= (long)Test.dFld;
                        iArr2[i20 + 1] >>= 5374;
                        Test.fFld = i21;
                        if (b2) break;
                        i += (int)f2;
                        i *= i;
                    }
                    i19 *= (int)Test.instanceCount;
                    i24 = 1;
                    do {
                        Test.byFld -= (byte)Test.instanceCount;
                        Test.instanceCount += (((i24 * i19) + Test.byFld) - i22);
                        Test.lArrFld[i24][i20] += Test.byFld;
                        i -= -98;
                        Test.lFld += i24;
                    } while (++i24 < 2);
                }
                break;
            case 24:
                Test.fFld += Test.fFld;
                break;
            case 25:
                if (b2) break;
                break;
            case 26:
                i21 = (int)-39.222F;
            case 27:
                dArr = dArr;
                break;
            case 28:
            case 29:
                i *= (int)Test.instanceCount;
                break;
            case 30:
                Test.lArrFld[(-61189 >>> 1) % N] = FuzzerUtils.long1array(N, (long)-20198L);
            case 31:
                Test.instanceCount = i;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
