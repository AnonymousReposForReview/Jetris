package tests.javafuzzer647;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:25:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6L;
    public static short sFld=-8311;
    public int iFld=-19141;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 240L);
        FuzzerUtils.init(Test.fArrFld, 103.850F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, float f1, int i2) {

        int i3=-26728, i4=-68, i5=112, i6=-9;
        byte by=9;
        boolean b=true;
        double d2=68.27858;

        i2 = i1;
        i3 = 1;
        while (++i3 < 324) {
            i4 = 1;
            do {
                Test.instanceCount = i1;
                i2 += (i4 * i4);
                Test.iArrFld[i4] = i4;
                by = (byte)i3;
                i2 = (int)1415345372L;
                by += (byte)(7124749014316551904L + (i4 * i4));
                Test.bArrFld[i4 + 1] = b;
            } while (++i4 < 5);
            Test.lArrFld[i3] = i4;
            i2 |= i4;
        }
        for (i5 = 9; 281 > i5; i5++) {
            Test.iArrFld[i5] = -4423;
            d2 -= d2;
        }
        vMeth2_check_sum += i1 + Float.floatToIntBits(f1) + i2 + i3 + i4 + by + (b ? 1 : 0) + i5 + i6 +
            Double.doubleToLongBits(d2);
    }

    public static void vMeth1(int i) {

        double d=-120.106217, d1=-1.32843, dArr[]=new double[N];
        float f=-1.740F, f2=0.727F;
        short s=-30724;
        int i8=231, i9=-4298, iArr[]=new int[N];

        FuzzerUtils.init(dArr, 14.3875);
        FuzzerUtils.init(iArr, -28663);

        d = 1;
        while (++d < 264) {
            d1 -= ((i++) << i);
            f *= (float)d;
        }
        vMeth2(i, f, 25376);
        Test.iArrFld[(13 >>> 1) % N] >>= (int)Test.instanceCount;
        s += (short)i;
        for (double d3 : dArr) {
            i += (int)Test.instanceCount;
            iArr[(i >>> 1) % N] = i;
            Test.instanceCount += -47;
            Test.fArrFld[(i >>> 1) % N] += Test.instanceCount;
            for (i8 = 1; i8 < 4; ++i8) {
                i += i8;
                Test.instanceCount -= (long)-121.129291;
            }
            i9 -= (int)f2;
        }
        vMeth1_check_sum += i + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + s
            + i8 + i9 + Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i10=14, i11=68, i12=187, i13=-5, i14=-4, i15=43, i16=42366, i17=62944;
        byte by1=91;
        double d4=-1.40786;
        short s1=18355;

        vMeth1(i10);
        for (i11 = 7; 218 > i11; i11++) {
            for (i13 = 1; i13 < 8; i13++) {
                i14 = i12;
                Test.iArrFld[i13 + 1] = i12;
                i12 += (i13 * by1);
                i14 += (i13 | i14);
                i10 >>>= 2602;
            }
            for (d4 = 1; d4 < 8; ++d4) {
                i15 += (int)d4;
                for (i16 = 1; i16 < 2; i16 += 3) {
                    s1 *= (short)d4;
                    Test.instanceCount += (i16 ^ i12);
                    i12 += -56547;
                    Test.iArrFld[i16 - 1] >>= (int)-802346318L;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + by1 + Double.doubleToLongBits(d4) + i15 + i16 + i17 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i18=-19386, i19=139, i20=45449, i21=0, i22=10, i23=-27035, i24=-38, i25=-16193, i26=-210, i27=-99;
        boolean b1=false;
        float f3=1.840F;
        double d5=-74.115144;
        byte by2=73;
        long l=-246165090L;

        vMeth();
        for (i18 = 195; 12 < i18; i18 -= 2) {
            i19 = (int)Test.instanceCount;
            Test.iArrFld = Test.iArrFld;
            Test.instanceCount *= i19;
            i19 |= -6161;
            i19 = Test.sFld;
            for (i20 = i18; i20 < 275; ++i20) {
                b1 = b1;
                i19 <<= (int)Test.instanceCount;
                iFld += (((i20 * f3) + f3) - iFld);
                i21 |= i20;
                switch ((i20 % 2) + 1) {
                case 1:
                    i19 &= (int)Test.instanceCount;
                    break;
                case 2:
                    for (i22 = 1; 1 < i22; i22 -= 2) {
                        b1 = b1;
                        iFld = (int)62.164F;
                        Test.instanceCount += 0;
                        d5 -= Test.instanceCount;
                        by2 *= (byte)i18;
                        i23 >>= (int)Test.instanceCount;
                    }
                    for (i24 = 1; i24 < 1; i24++) {
                        i25 -= (int)Test.instanceCount;
                        iFld ^= (int)l;
                    }
                    iFld = (int)d5;
                    f3 += i20;
                    break;
                default:
                    for (i26 = i20; i26 < 1; ++i26) {
                        i19 += (int)(-2.325F + (i26 * i26));
                        iFld = (int)-11L;
                        i23 = i26;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
