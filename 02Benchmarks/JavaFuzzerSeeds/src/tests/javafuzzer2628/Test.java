package tests.javafuzzer2628;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static double dFld=-1.105489;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1793);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        float f1=0.378F, f2=117.453F;
        int i3=-50059, i4=-56095, i5=5, i6=14, iArr[]=new int[N];
        short s1=-32348;
        boolean b=false;

        FuzzerUtils.init(iArr, -194);

        for (f1 = 15; 284 > f1; f1++) {
            Test.instanceCount = i3;
            i3 >>>= i3;
            for (f2 = f1; f2 < 6; ++f2) {
                iArr[(int)(f1 - 1)] >>>= s1;
                for (i5 = 1; i5 > 1; --i5) {
                    i3 = i5;
                    b = false;
                    i4 = (int)l;
                    if (i5 != 0) {
                        vMeth_check_sum += l + Float.floatToIntBits(f1) + i3 + Float.floatToIntBits(f2) + i4 + s1 + i5
                            + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.dFld %= -108.101435;
                }
                s1 <<= (short)i5;
                if (b) continue;
                i6 = (int)Test.instanceCount;
            }
            i4 = i4;
        }
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i3 + Float.floatToIntBits(f2) + i4 + s1 + i5 + i6 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(short s) {

        int i1=10981, i2=-1, i7=221, i8=-12;
        boolean b1=false;
        byte by=83, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)1);
        FuzzerUtils.init(lArr, -510617902L);

        for (i1 = 1; i1 < 302; i1++) {
            i2 += (((i1 * i2) + Test.instanceCount) - i2);
        }
        vMeth(Test.instanceCount);
        for (i7 = 230; i7 > 1; i7--) {
            Test.iArrFld[i7 + 1] = i7;
            b1 = b1;
            i8 *= i1;
            byArr = byArr;
            Test.instanceCount >>= Test.instanceCount;
        }
        lArr[(i1 >>> 1) % N] = i2;
        by *= (byte)i7;
        Test.iArrFld[(i8 >>> 1) % N] = i8;
        b1 = b1;
        Test.instanceCount += -55434;
        long meth_res = s + i1 + i2 + i7 + i8 + (b1 ? 1 : 0) + by + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i) {

        short s2=21946;
        int i9=-223, i10=40402, i11=17, i12=-42, i13=-194, i14=-71, i15=-3, i16=18060;
        float f3=-2.0F;

        i += iMeth1(s2);
        switch (((-46063 >>> 1) % 5) + 86) {
        case 86:
            i = i;
            break;
        case 87:
            for (i9 = 14; i9 < 326; i9++) {
                for (i11 = 5; 1 < i11; --i11) {
                    for (i13 = 2; i13 > i9; --i13) {
                        try {
                            Test.iArrFld[i13] = (i12 % -4333);
                            i = (-246 / i12);
                            i = (255 % Test.iArrFld[i11 + 1]);
                        } catch (ArithmeticException a_e) {}
                        try {
                            i12 = (i9 % i9);
                            i10 = (135 / Test.iArrFld[i9 + 1]);
                            Test.iArrFld[i9] = (i % i13);
                        } catch (ArithmeticException a_e) {}
                        i14 *= i13;
                        i |= i12;
                        switch ((i9 % 2) + 31) {
                        case 31:
                            fArrFld[i13 + 1] = -14;
                            i12 *= i15;
                            i10 = (int)f3;
                            i14 += i;
                            break;
                        case 32:
                            i10 = 38;
                            break;
                        default:
                            try {
                                i10 = (-87 % i10);
                                i = (i15 / i10);
                                i15 = (44681 % i14);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                }
            }
            break;
        case 88:
            i14 = (int)Test.instanceCount;
            break;
        case 89:
            i16 = i13;
            break;
        case 90:
            fArrFld[(i16 >>> 1) % N] = -27426;
            break;
        default:
            i ^= 6;
        }
        long meth_res = i + s2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f3) + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.929F;
        int i17=2, i18=-58095, i19=199, i20=-9, i21=1, i22=11, i23=48923;
        boolean b2=false, bArr[]=new boolean[N];
        byte by1=-34;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, 3648724243L);
        FuzzerUtils.init(dArr, 1.128257);
        FuzzerUtils.init(bArr, true);

        Test.dFld += ((-f) * iMeth(i17));
        Test.instanceCount = i17;
        for (i18 = 1; i18 < 198; i18++) {
            i19 >>>= i17;
            i19 = (int)-6301L;
            Test.dFld += f;
            switch ((i18 % 10) + 101) {
            case 101:
                for (i20 = 2; i20 < 127; ++i20) {
                    i19 = (int)Test.instanceCount;
                    Test.instanceCount += (long)f;
                    f += i21;
                    for (i22 = 1; i22 < 2; i22++) {
                        short s3=-26366;
                        Test.iArrFld[i22] *= s3;
                        lArr1[i18] = i21;
                        dArr[i20 + 1] += i23;
                        i17 = i23;
                        bArr[i18] = b2;
                        by1 <<= (byte)101;
                        switch (((i22 % 2) * 5) + 82) {
                        case 85:
                            i17 |= i18;
                            break;
                        case 86:
                            Test.instanceCount += (((i22 * Test.instanceCount) + i21) - Test.instanceCount);
                            i17 /= (int)(i18 | 1);
                            Test.iArrFld[i18 + 1] = by1;
                            i17 <<= (int)Test.instanceCount;
                            break;
                        default:
                            i21 = i20;
                            fArrFld[i22] = i23;
                        }
                        i23 += (i22 * i22);
                    }
                    i23 = (int)-2.151F;
                    i23 += (int)Test.instanceCount;
                }
                lArr1[i18] = -1;
                break;
            case 102:
                i21 = 201;
                break;
            case 103:
                lArr1[i18] -= (long)f;
                break;
            case 104:
                i23 += i18;
                break;
            case 105:
                f -= -18425;
                break;
            case 106:
                Test.iArrFld[i18] >>= i21;
            case 107:
                i21 = i20;
            case 108:
                i21 <<= i21;
                break;
            case 109:
                lArr1[i18 + 1] <<= Test.instanceCount;
                break;
            case 110:
                i17 -= (int)Test.dFld;
                break;
            default:
                Test.iArrFld[i18] += i22;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
