package tests.javafuzzer1365;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:52:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5196L;
    public static int iFld=27721;
    public static short sFld=11537;
    public static volatile double dFld=65.124070;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.126947);
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, int i7, int i8) {

        int i9=392, i10=6710;

        for (i9 = 6; 202 > i9; ++i9) {
            i7 = i6;
        }
        i8 -= (int)Test.instanceCount;
        long meth_res = i6 + i7 + i8 + i9 + i10;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(float f, int i3, int i4) {

        long l=-13L;
        int i5=48, i11=0, i12=19;
        float f1=2.905F;
        double d=78.54848;
        byte by=-47;

        Test.instanceCount = Integer.reverseBytes(-(i3 - i3));
        for (l = 7; 161 > l; l++) {
            Test.instanceCount = (long)(i3 / (((long)(0.281F + (2.736F - (-221 + (i4 - f))))) | 1));
            i5 -= (((i4 - i4) * (i4 * i4)) * Math.abs(i3++));
            lMeth(10, i4, i5);
            Test.iFld = (int)l;
            for (i11 = 1; i11 < 10; ++i11) {
                f1 = 1;
                do {
                    d = Test.iFld;
                    i5 -= Test.iFld;
                    Test.sFld = (short)l;
                    d = 1;
                    i3 += (-35353 + (f1 * f1));
                    Test.instanceCount += by;
                    i4 += (int)f1;
                } while (++f1 < 2);
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i4 + l + i5 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + by;
    }

    public static void vMeth(int i, int i1, int i2) {

        float f2=-97.907F, f3=2.329F, f4=-6.577F;
        int i13=-2, i14=-46474, i15=46191, i16=10, i17=180, iArr[][]=new int[N][N];
        byte by1=-74;
        boolean b=false;

        FuzzerUtils.init(iArr, -13);

        switch (((i2 >>> 1) % 7) + 5) {
        case 5:
        case 6:
            vMeth1(f2, i1, Test.iFld);
            for (i13 = 12; i13 < 294; i13++) {
                Test.iFld += (int)(-64L + (i13 * i13));
                Test.iFld = (int)-74L;
                for (f3 = 1; f3 < 6; f3++) {
                    i16 = 1;
                    while (++i16 < 2) {
                        try {
                            i1 = (168 / Test.iFld);
                            i = (i14 % iArr[i13 + 1][i13]);
                            i14 = (iArr[i13 + 1][i13 + 1] / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        Test.dFld -= 51202;
                        by1 = (byte)Test.iFld;
                        switch ((((i13 >>> 1) % 3) * 5) + 75) {
                        case 83:
                            Test.sFld &= (short)Test.instanceCount;
                            if (b) {
                                Test.sFld = (short)i;
                                Test.instanceCount *= (long)35.691F;
                            } else {
                                Test.instanceCount >>= i13;
                            }
                            break;
                        case 86:
                            i += (i16 - f2);
                            break;
                        case 79:
                            Test.instanceCount += (long)(8.690F + (i16 * i16));
                        default:
                            Test.dArrFld[(int)(f3)] -= i17;
                        }
                    }
                }
            }
            break;
        case 7:
            Test.iFld = i16;
            break;
        case 8:
            Test.instanceCount >>= i17;
        case 9:
            i2 += (int)f4;
            break;
        case 10:
            i1 += (int)Test.instanceCount;
        case 11:
            i15 >>= i16;
            break;
        default:
            i2 = (int)Test.instanceCount;
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f2) + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 +
            by1 + (b ? 1 : 0) + i17 + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-33360, i19=-20180, i20=-193, i21=9, i22=-50320, i23=38162, i24=78, iArr1[]=new int[N];
        float f5=-56.565F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(fArr, -2.362F);

        vMeth(-4, Test.iFld, Test.iFld);
        i18 = 1;
        while (++i18 < 393) {
            for (i19 = 4; 64 > i19; i19++) {
                i20 -= i18;
                Test.iFld += i19;
                i20 -= i20;
                i20 = i18;
                i20 += (i19 * i19);
                for (i21 = 1; i21 < 2; ++i21) {
                    iArr1[(i18 >>> 1) % N] -= (int)Test.instanceCount;
                    iArr1[i19] += i21;
                    Test.iFld = (int)f5;
                }
                Test.sFld = (short)i20;
                for (i23 = 1; i23 < 2; ++i23) {
                    fArr = FuzzerUtils.float1array(N, (float)112.325F);
                    f5 = Test.instanceCount;
                    switch ((i19 % 4) + 10) {
                    case 10:
                        i24 = 172;
                        break;
                    case 11:
                        Test.instanceCount = 8;
                        i24 *= i18;
                        break;
                    case 12:
                    case 13:
                        i20 <<= Test.sFld;
                        switch (((i18 % 10) * 5) + 12) {
                        case 26:
                            Test.dFld -= Test.dFld;
                            switch ((i18 % 2) + 28) {
                            case 28:
                                i20 &= i23;
                                i20 += (i23 | i20);
                                Test.instanceCount *= Test.iFld;
                                break;
                            case 29:
                                Test.lArrFld[i19] = i21;
                            }
                            break;
                        case 37:
                        case 61:
                            i22 <<= i23;
                            i24 += i20;
                        case 41:
                            i22 += i23;
                            break;
                        case 30:
                            iArr1[i18 + 1] = (int)Test.instanceCount;
                        case 48:
                            Test.dFld %= (Test.instanceCount | 1);
                            break;
                        case 36:
                            Test.instanceCount += (((i23 * i23) + Test.instanceCount) - i24);
                            break;
                        case 31:
                            iArr1[i18 + 1] += i24;
                            break;
                        case 18:
                            f5 *= f5;
                        case 55:
                            i24 -= -32339;
                            break;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
