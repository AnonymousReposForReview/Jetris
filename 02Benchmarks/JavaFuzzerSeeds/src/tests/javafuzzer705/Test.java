package tests.javafuzzer705;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:13:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=255892589L;
    public static volatile double dFld=0.50030;
    public static int iFld=46167;
    public static byte byFld=74;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static volatile short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.lArrFld, -5709L);
        FuzzerUtils.init(Test.sArrFld, (short)-5134);
        FuzzerUtils.init(Test.dArrFld, 0.112155);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=43639, i8=-190, i9=-9, i10=342, i11=-8, i12=-3;
        float f2=-80.180F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)120);

        Test.iFld *= Test.iFld;
        for (i7 = 6; 121 > i7; ++i7) {
            Test.iArrFld[i7 + 1] = i7;
            Test.sArrFld[i7 + 1] = (short)Test.instanceCount;
            i9 = 1;
            do {
                i8 ^= (int)Test.instanceCount;
                f2 += 939133339832971117L;
                Test.iFld >>>= i9;
                i8 = (int)f2;
                i8 -= 4;
                for (i10 = 1; 1 > i10; ++i10) {
                    Test.iFld += (int)53L;
                    f2 = Test.instanceCount;
                    try {
                        i12 = (i9 % 88);
                        Test.iFld = (-1086 % i9);
                        i12 = (Test.iArrFld[i7 - 1] / 1736616443);
                    } catch (ArithmeticException a_e) {}
                }
            } while (++i9 < 14);
        }
        i8 = i7;
        long meth_res = i7 + i8 + i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, int i1, long l1) {

        int i2=-52282, i3=38557, i4=-4, i5=2, i6=0, i13=196, i14=64, i15=-184, i16=-7;
        float f3=0.671F, fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -1.302F);
        FuzzerUtils.init(bArr, true);

        for (i2 = 201; i2 > 6; i2 -= 2) {
            Test.iFld = (int)((--Test.dFld) * ((-7 + (i4++)) + (i3 += 93)));
            Test.lArrFld[i2] = Test.iArrFld[i2 + 1];
            for (i5 = 1; i5 < 16; ++i5) {
                Test.iFld += i5;
            }
        }
        Test.lArrFld[(i2 >>> 1) % N] += lMeth();
        for (i13 = 6; 275 > i13; i13++) {
            i4 = (int)l1;
            i14 += Test.iFld;
            l1 = l;
            i15 = 1;
            do {
                i16 = 1;
                do {
                    fArr[i16] = 5;
                    i14 += (i16 | (long)f3);
                    bArr[i13 + 1] = Test.bFld;
                } while (++i16 < 1);
            } while (++i15 < 6);
        }
        vMeth1_check_sum += l + i1 + l1 + i2 + i3 + i4 + i5 + i6 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        float f1=1.110F, f4=-2.266F;
        int i17=211, i18=-98, i19=-16075, i20=1151, i21=5, i22=3;

        Test.iFld = (int)((--Test.instanceCount) - f1);
        Test.iFld = ((Test.iArrFld[(Test.iFld >>> 1) % N]--) + (Test.byFld * Test.iArrFld[(Test.iFld >>> 1) % N]));
        vMeth1(Test.instanceCount, Test.iFld, -6466L);
        if (true) {
            Test.instanceCount += Test.iFld;
            for (i17 = 6; 152 > i17; i17++) {
                switch (((i17 >>> 1) % 3) + 50) {
                case 50:
                    Test.instanceCount += (i17 ^ Test.iFld);
                    try {
                        Test.iArrFld[i17 - 1] = (224 % Test.iFld);
                        Test.iFld = (Test.iFld % i19);
                        i18 = (36786 / Test.iArrFld[i17]);
                    } catch (ArithmeticException a_e) {}
                    for (i20 = 1; i20 < 11; ++i20) {
                        Test.iFld <<= 45534;
                        Test.dFld += i18;
                        for (f4 = 1; 2 > f4; f4++) {
                            Test.instanceCount *= Test.iFld;
                        }
                        Test.dFld /= (Test.byFld | 1);
                    }
                    break;
                case 51:
                    i21 += (int)(240L + (i17 * i17));
                    break;
                case 52:
                    i21 = Test.byFld;
                    break;
                }
            }
        } else {
            Test.dArrFld[(-45064 >>> 1) % N] += -56656;
            vMeth_check_sum += Float.floatToIntBits(f1) + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f4) + i22;
            return;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f4) + i22;
    }

    public void mainTest(String[] strArr1) {

        float f=41.890F;
        int i=-103, i23=-13, i24=-6, i25=220, i26=187, i27=-168, i28=-8, i29=-197, i30=-20252;

        Test.dFld -= (Test.dFld++);
        f -= ((++f) * (Test.iArrFld[(i >>> 1) % N] + (--i)));
        vMeth();
        Test.instanceCount += i23;
        i24 = 1;
        do {
            i23 += (17003 + (i24 * i24));
            switch (((i24 >>> 1) % 5) + 72) {
            case 72:
                i23 = i24;
                Test.dFld -= f;
                for (i25 = 109; 3 < i25; --i25) {
                    i23 ^= i;
                    for (i27 = 1; i27 < 2; ++i27) {
                        f += i28;
                        i26 >>= i24;
                        i28 = i26;
                    }
                    switch (((i24 % 5) * 5) + 123) {
                    case 146:
                        Test.iFld -= (int)f;
                        i = i26;
                        for (i29 = i24; i29 < 2; i29++) {
                            try {
                                Test.iArrFld[i25] = (Test.iFld / i29);
                                i28 = (Test.iFld % i25);
                                i28 = (i26 / 64216);
                            } catch (ArithmeticException a_e) {}
                            f += i29;
                            Test.instanceCount <<= 2468;
                            switch ((i29 % 6) + 27) {
                            case 27:
                                i28 -= (int)Test.instanceCount;
                            case 28:
                                Test.lArrFld[i29 + 1] = i23;
                                Test.dArrFld[i29] = -7;
                            case 29:
                                f -= i30;
                                i30 += i26;
                                i23 = (int)Test.instanceCount;
                                break;
                            case 30:
                            case 31:
                                Test.dFld *= Test.instanceCount;
                                break;
                            case 32:
                            default:
                                Test.iArrFld[i29] = i24;
                            }
                        }
                    case 141:
                        try {
                            i30 = (Test.iFld / i26);
                            i28 = (20938 % Test.iArrFld[i24 - 1]);
                            i26 = (Test.iArrFld[i24 - 1] % -19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 126:
                        f += (-89L + (i25 * i25));
                    case 132:
                        Test.iFld -= 10;
                    case 144:
                        i26 &= i28;
                        break;
                    default:
                        Test.lArrFld[(-34674 >>> 1) % N] <<= i28;
                    }
                }
                break;
            case 73:
                Test.iFld += i28;
                break;
            case 74:
            case 75:
                i23 += i27;
                break;
            case 76:
                Test.iArrFld = Test.iArrFld;
                break;
            }
        } while (++i24 < 230);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
