package tests.javafuzzer495;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:41:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38493L;
    public short sFld=8194;
    public static short sFld1=-23835;
    public static double dFld=-88.4224;
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -39223);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, double d1) {

        double d2=0.89380;
        int i5=1, i6=-35979;
        boolean b2=true, bArr[]=new boolean[N];
        byte by=33;

        FuzzerUtils.init(bArr, true);

        d2 = 1;
        do {
            int i4=-2079;
            Test.instanceCount /= (l | 1);
            d1 -= i4;
            i4 = (int)-1.65362;
            d1 = l;
            i4 = (int)Test.instanceCount;
            Test.instanceCount = i4;
            for (i5 = 1; 11 > i5; i5++) {
                l += (i5 * i5);
                bArr[i5 + 1] = b2;
                switch (((0 >>> 1) % 1) + 40) {
                case 40:
                    l = i6;
                default:
                    if (b2) continue;
                    if (i5 != 0) {
                        vMeth2_check_sum += l + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i5 + i6 +
                            (b2 ? 1 : 0) + by + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    by += (byte)Test.instanceCount;
                }
            }
        } while (++d2 < 139);
        vMeth2_check_sum += l + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i5 + i6 + (b2 ? 1 : 0) + by
            + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {

        boolean b1=true;
        int i3=-10, i7=0, i8=3, i9=44270, i10=-27068, i11=10;
        double d3=43.68749, d4=62.49377, d5=-18.61576;
        byte by1=-104;
        float f1=-2.262F;

        b1 = (Math.abs(-201) <= ((33 - i3) * (59533 - Double.longBitsToDouble(-73L))));
        vMeth2(Test.instanceCount, d3);
        Test.instanceCount = Test.sFld1;
        for (i7 = 196; i7 > 12; i7 -= 3) {
            i9 = 1;
            while (++i9 < 25) {
                i8 = i8;
                for (d4 = i7; d4 < 1; ++d4) {
                    Test.iArrFld[i9 + 1] = (int)d3;
                    Test.bArrFld[i7 + 1][(int)(d4)] = false;
                    d5 *= by1;
                }
                i3 = (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                f1 += (((i9 * i7) + i8) - i9);
                Test.instanceCount -= i11;
            }
            i11 += (((i7 * f1) + Test.instanceCount) - i10);
        }
        vMeth1_check_sum += (b1 ? 1 : 0) + i3 + Double.doubleToLongBits(d3) + i7 + i8 + i9 +
            Double.doubleToLongBits(d4) + i10 + Double.doubleToLongBits(d5) + by1 + Float.floatToIntBits(f1) + i11;
    }

    public void vMeth(int i2, float f) {

        int i12=227, i13=-61699, i16=-157, i17=6, i18=-142, i19=-252;
        boolean b3=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.349F);

        vMeth1();
        for (i12 = 8; i12 < 328; ++i12) {
            byte by2=-106;
            i13 = by2;
            fArr[i12 - 1] = 241;
            Test.instanceCount *= Test.instanceCount;
            Test.instanceCount >>>= i2;
            for (i16 = 1; 5 > i16; ++i16) {
                i17 = i17;
                Test.instanceCount ^= i18;
                Test.dFld *= Test.dFld;
                b3 = b3;
            }
            i2 += (i12 ^ i2);
        }
        i19 = 1;
        do {
            Test.iArrFld[i19 - 1] += i19;
            i13 = i12;
        } while (++i19 < 287);
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i12 + i13 + i16 + i17 + i18 + (b3 ? 1 : 0) + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=223, i1=0, i20=-123, i21=15955, i22=-247, i23=9, i24=-212;
        boolean b=false;
        double d=-2.33489;
        float f2=0.264F;
        long l1=24291L;

        for (i = 4; i < 189; i++) {
            b = (((Test.instanceCount * sFld) < (Test.instanceCount - Test.instanceCount)) ^ b);
            sFld -= (short)(-(-(i - d)));
            Test.instanceCount += (0 + (i * i));
            vMeth(i, f2);
            Test.sFld1 = (short)Test.instanceCount;
            Test.iArrFld[i] = i1;
            for (i20 = 3; i20 < 136; ++i20) {
                byte by3=-86;
                by3 >>= (byte)i;
                Test.iArrFld[i20 - 1] = i20;
                i22 = 1;
                do {
                    i21 = i23;
                    Test.iArrFld[i] += (int)Test.dFld;
                    Test.instanceCount = i22;
                    i1 -= i1;
                    i21 <<= -29;
                    i1 += i22;
                    i21 += (i22 * i22);
                } while (++i22 < 2);
                for (l1 = 2; l1 > 1; l1--) {
                    f2 += (((l1 * i) + f2) - i20);
                    i24 += (int)l1;
                    Test.dFld -= Test.sFld1;
                    switch (((i % 3) * 5) + 94) {
                    case 105:
                        if (true) break;
                        break;
                    case 107:
                        Test.iArrFld[(int)(l1 - 1)] += (int)Test.instanceCount;
                        break;
                    case 106:
                        Test.instanceCount *= Test.instanceCount;
                        i24 += (int)Test.instanceCount;
                    }
                }
                i21 += i20;
                i24 = -31231;
            }
            i24 += (((i * i22) + f2) - i24);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
