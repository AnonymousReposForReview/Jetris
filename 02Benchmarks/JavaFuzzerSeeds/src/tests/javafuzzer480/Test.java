package tests.javafuzzer480;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:32:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4299L;
    public static short sFld=28117;
    public double dFld=-1.104380;
    public static int iFld=-3;
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -224);
        FuzzerUtils.init(Test.lArrFld, -1688048029362556749L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, double d) {

        int i4=-53254, i5=-57564, i6=-3, i7=-153, i8=48209;
        float f=-2.866F, f1=-2.1021F;
        long l1=38121L;
        byte by=23;

        i3 += -87;
        i4 = 1;
        do {
            i3 = i4;
            f -= Test.instanceCount;
            f /= (i3 | 1);
            i5 = 5;
            while (--i5 > 0) {
                for (f1 = 1; f1 < 1; f1++) {
                    i6 += (int)(((f1 * i4) + l1) - i3);
                }
                Test.iArrFld[i5 + 1] -= i4;
                Test.lArrFld[i5] = by;
                d = -2.16309;
                i6 *= i4;
                for (i7 = 1; i7 < 1; ++i7) {
                    i6 >>>= i5;
                }
                i8 = (int)l1;
            }
        } while (++i4 < 323);
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f) + i5 +
            Float.floatToIntBits(f1) + i6 + l1 + by + i7 + i8;
    }

    public static int iMeth(int i1, int i2, long l) {

        double d1=1.2396;
        int i9=14123, i10=82, i11=22, i12=235, i13=-55757;
        byte by1=-99;
        long l2=-3L;
        float f2=86.171F, f3=1.183F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 71.975F);

        vMeth1(i1, d1);
        for (i9 = 8; i9 < 131; ++i9) {
            Test.instanceCount += (i9 | i9);
            fArr[i9 - 1] -= Test.sFld;
        }
        by1 += (byte)i2;
        i11 = 1;
        do {
            for (l2 = 1; l2 < 12; l2++) {
                fArr[(int)(l2)] -= -15387;
                try {
                    i1 = (i11 / i11);
                    i2 = (i11 % i10);
                    i1 = (i9 / i12);
                } catch (ArithmeticException a_e) {}
                i2 += 13;
                for (f2 = 1; 2 > f2; f2 += 3) {
                    i1 -= (int)-11758L;
                    i12 += Test.sFld;
                    l = i9;
                    f3 += -3;
                }
            }
        } while (++i11 < 136);
        long meth_res = i1 + i2 + l + Double.doubleToLongBits(d1) + i9 + i10 + by1 + i11 + l2 + i12 +
            Float.floatToIntBits(f2) + i13 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, short s) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 19302);

        iArr[(i >>> 1) % N] += (i >>= (--iArr[(i >>> 1) % N]));
        iMeth(i, i, Test.instanceCount);
        vMeth_check_sum += i + s + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=13, i15=5, i16=-2, i17=60361, i18=-112, i19=105;
        long l3=-7L, l4=32334L;
        boolean b=false;
        float f4=2.941F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)15476);

        vMeth(i14, Test.sFld);
        i14 = i14;
        for (l3 = 7; l3 < 155; l3++) {
            Test.instanceCount = i14;
            sArr[(int)(l3 + 1)] >>>= (short)i14;
            for (i16 = 7; i16 < 169; ++i16) {
                if (b) break;
                i15 <<= -12;
                f4 += (i16 + f4);
                i14 >>= (int)l3;
                i18 = 1;
                do {
                    Test.instanceCount -= i17;
                    Test.lArrFld[i18 + 1] = Test.sFld;
                } while (++i18 < 2);
                i15 = (int)l3;
                i19 = 1;
                do {
                    dFld -= Test.instanceCount;
                    i15 = -81;
                    i14 >>= -65057;
                    if (true) {
                        f4 += i19;
                    }
                    i15 = (int)l3;
                } while (++i19 < 2);
            }
        }
        Test.iArrFld[(Test.iFld >>> 1) % N] += i17;
        l4 = 1;
        do {
            i14 = (int)f4;
            Test.iFld = (int)Test.instanceCount;
            f4 -= i15;
            switch ((int)(((l4 % 2) * 5) + 63)) {
            case 70:
                dFld -= Test.sFld;
                i15 = i19;
                break;
            case 69:
                Test.iArrFld = FuzzerUtils.int1array(N, (int)10);
                break;
            }
        } while ((l4 += 3) < 330);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
