package tests.javafuzzer2629;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3974573650L;
    public static short sFld=17629;
    public static volatile float fFld=0.967F;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f1, int i5, float f2) {

        double d1=-2.91388;
        int i6=-13, i7=-12, i8=-2, i9=-22137, iArr2[]=new int[N];
        byte by=-109;
        float f3=0.208F;

        FuzzerUtils.init(iArr2, -5);

        for (d1 = 10; d1 < 172; d1++) {
            Test.sFld = (short)10;
            Test.instanceCount += (long)(d1 * d1);
            iArr2[(int)(d1 + 1)] = i5;
            Test.instanceCount |= i6;
            if (i5 != 0) {
            }
            Test.sFld += (short)f1;
            for (i7 = 1; 10 > i7; i7++) {
                by *= (byte)d1;
            }
            try {
                i8 = (i5 / -9);
                i5 = (78 % i8);
                iArr2[(int)(d1)] = (iArr2[(int)(d1 + 1)] / i7);
            } catch (ArithmeticException a_e) {}
        }
        iArr2[(10385 >>> 1) % N] *= (int)Test.instanceCount;
        i6 = (int)f2;
        for (f3 = 9; f3 < 362; f3++) {
            if (i9 != 0) {
            }
        }
        iArr2[(i6 >>> 1) % N] = i8;
        long meth_res = Float.floatToIntBits(f1) + i5 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i6 +
            i7 + i8 + by + Float.floatToIntBits(f3) + i9 + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, double d) {

        int i10=9, i11=3, i12=146, iArr1[]=new int[N];
        byte by1=63;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 18);
        FuzzerUtils.init(lArr, 4L);

        iArr1[(i4 >>> 1) % N] = (int)((iMeth1(Test.fFld, i4, -33.472F) - i4) * d);
        for (i10 = 4; i10 < 221; ++i10) {
            i4 += (int)Test.instanceCount;
            i4 |= i4;
            i12 = 1;
            while (++i12 < 7) {
                Test.fFld = i10;
            }
            i4 >>= i12;
            Test.instanceCount += (((i10 * Test.instanceCount) + Test.sFld) - by1);
            iArr1 = iArr1;
        }
        i4 = -4;
        i11 = i11;
        lArr[(i10 >>> 1) % N] += (long)Test.fFld;
        i4 = i11;
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + i10 + i11 + i12 + by1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1) {

        float f=11.779F, fArr[]=new float[N];
        int i2=0, i3=-13, i13=173, i14=-10721, i15=-4, iArr[]=new int[N], iArr3[]=new int[N];
        double d2=121.86668;

        FuzzerUtils.init(iArr, 17762);
        FuzzerUtils.init(iArr3, 24029);
        FuzzerUtils.init(fArr, -80.687F);

        i1 >>>= (int)(Test.instanceCount + iArr[(i1 >>> 1) % N]);
        i1 -= (int)f;
        for (i2 = 3; i2 < 339; i2++) {
            vMeth(i3, d2);
            for (i13 = 5; i13 > 1; --i13) {
                Test.instanceCount %= (i3 | 1);
                i1 *= (int)Test.instanceCount;
                Test.fFld -= i2;
                i1 += Test.sFld;
                i15 = 1;
                do {
                    iArr3[i15 - 1] <<= i15;
                    Test.instanceCount = Test.sFld;
                    i3 -= i1;
                    fArr[i15] -= Test.instanceCount;
                    Test.instanceCount += i13;
                } while (++i15 < 2);
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d2) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i16=14, i17=-58259, i18=-3, i19=-134, i20=-33506, i21=-14404, iArr4[][]=new int[N][N];
        double d3=1.51598;
        boolean b=true, bArr[]=new boolean[N];
        byte by2=-117;

        FuzzerUtils.init(iArr4, 37722);
        FuzzerUtils.init(bArr, true);

        iMeth(i16);
        i17 = 1;
        while (++i17 < 227) {
            i16 -= (int)Test.instanceCount;
            switch ((i17 % 1) + 39) {
            case 39:
                i16 += (i17 - i16);
                break;
            }
            Test.fFld += Test.fFld;
            for (i18 = 2; i18 < 111; ++i18) {
                try {
                    i16 = (i18 / 25848);
                    i19 = (60726 / iArr4[i17][i17]);
                    i16 = (i18 / -230);
                } catch (ArithmeticException a_e) {}
                Test.fFld += (((i18 * i17) + Test.fFld) - i19);
                i16 += (((i18 * i18) + i17) - i18);
                switch (((i16 >>> 1) % 6) + 40) {
                case 40:
                    i16 = i17;
                    break;
                case 41:
                    d3 = -14L;
                    bArr[i18 - 1] = b;
                    iArr4[i17][i18] *= Test.sFld;
                    break;
                case 42:
                    i20 = 1;
                    do {
                        by2 = (byte)i17;
                        switch ((i18 % 2) + 112) {
                        case 112:
                            Test.instanceCount += (i20 | i19);
                            i19 = i20;
                            break;
                        case 113:
                            i19 *= (int)Test.instanceCount;
                            break;
                        default:
                            by2 -= (byte)d3;
                            if (b) break;
                        }
                        Test.instanceCount -= i16;
                        iArr4[i18 - 1][i18 + 1] -= (int)Test.instanceCount;
                    } while (++i20 < 2);
                    break;
                case 43:
                    i16 += i18;
                    break;
                case 44:
                    if (false) continue;
                    i21 = 1;
                    do {
                        i19 ^= i20;
                        i16 = (int)Test.instanceCount;
                    } while (++i21 < 2);
                    break;
                case 45:
                    iArr4[i18 + 1][i17] = -102;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
