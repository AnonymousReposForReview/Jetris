package tests.javafuzzer1177;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:02:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2728L;
    public static byte byFld=-120;
    public static double dFld=2.44761;
    public float fFld=26.320F;
    public static short sFld=-5580;
    public static volatile double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.23949);
        FuzzerUtils.init(Test.fArrFld, -2.165F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(int i9) {

        int i10=-77, i11=-5;

        for (i10 = 2; i10 < 124; i10++) {
            Test.byFld += (byte)(i10 * i10);
        }
        Test.instanceCount = Test.instanceCount;
        long meth_res = i9 + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(int i15, int i16) {

        int i17=8, i18=10, i19=-3, i20=-106, i21=-10, i22=9, i23=4, i24=-13, iArr1[][]=new int[N][N];
        boolean b=false, bArr[]=new boolean[N];
        short s=-17873;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -178);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 4300312967262971248L);

        for (i17 = 10; i17 < 391; i17++) {
            for (i19 = 1; i19 < 4; ++i19) {
                iArr1[i19 + 1][i19] = i18;
                for (i21 = 1; 2 > i21; i21++) {
                    bArr[i17 - 1] = b;
                    s = (short)4;
                }
                Test.instanceCount = Test.instanceCount;
                i16 *= -174;
                lArr[i19 - 1][i17 - 1] += s;
                i20 >>= i16;
                Test.instanceCount -= i15;
            }
            i16 += (i17 * i17);
            for (i23 = 1; 4 > i23; i23++) {
                Test.instanceCount ^= Test.instanceCount;
                Test.instanceCount = (long)Test.dFld;
            }
        }
        vMeth2_check_sum += i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + (b ? 1 : 0) + s + i23 + i24 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i12=-67, i13=7, i14=-8, i25=-5481, i26=-8, iArr[]=new int[N];
        double d=-13.41548;
        short s1=-4828;
        long lArr1[]=new long[N], lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, -179);
        FuzzerUtils.init(lArr1, -4136502212254413109L);
        FuzzerUtils.init(lArr2, 11L);

        i12 += Math.abs((int)(iArr[(i12 >>> 1) % N] % ((-(i12 * Test.instanceCount)) | 1)));
        for (i13 = 18; i13 < 351; i13++) {
            i12 = i14;
            vMeth2(i12, i12);
            i12 = (int)Test.instanceCount;
            lArr1[i13 + 1] >>= Test.instanceCount;
            i14 &= i14;
            iArr[i13 + 1] = -118;
            lArr1[i13 - 1] ^= Test.instanceCount;
            i25 = 1;
            do {
                i14 -= 12707;
                for (d = 1; d < 1; d++) {
                    lArr2 = lArr2;
                }
                i12 += (((i25 * i14) + i25) - i13);
                iArr[i13 + 1] <<= s1;
            } while (++i25 < 5);
        }
        vMeth1_check_sum += i12 + i13 + i14 + i25 + Double.doubleToLongBits(d) + i26 + s1 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(int i2, long l, int i3) {

        int i4=154, i5=46953, i6=60548, i7=131, i8=153;
        long l1=-7L;
        float f1=-1.431F;
        boolean b1=true;

        for (i4 = 9; i4 < 280; i4++) {
            for (l1 = i4; l1 < 6; ++l1) {
                for (i7 = 1; 1 > i7; ++i7) {
                    i6 -= (i8--);
                    switch ((((((int)(i2 + l)) >>> 1) % 3) * 5) + 66) {
                    case 74:
                        i2 = (++i8);
                        break;
                    case 80:
                        l += (((i7 * i3) + i5) - i6);
                        break;
                    case 69:
                        l += (((i7 * f1) + l1) - i6);
                        break;
                    default:
                        switch ((i7 % 2) + 4) {
                        case 4:
                            f1 -= (float)(((--Test.dArrFld[(int)(l1)]) * (f1 - i7)) - ((Test.instanceCount--) - (i6 -
                                -58757)));
                            f1 += (l1 - (iMeth(0) + i3));
                            i2 = (int)(((l1 - Test.byFld) - (i6 - 58)) + i7);
                            break;
                        case 5:
                            vMeth1();
                            i2 %= (int)(i7 | 1);
                            break;
                        }
                        b1 = b1;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + i5 + l1 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        float f=-2.616F;
        int i=-5, i1=47079, i27=-7, i28=-194, i29=29690, i30=14, i31=-4080, i32=-45009, iArr2[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr2, 1);

        for (f = 4; f < 362; ++f) {
            i1 = 1;
            while (++i1 < 70) {
                i += (10 + (i1 * i1));
                vMeth(-178, Test.instanceCount, i1);
                fFld = Test.byFld;
                i += (((i1 * i) + i) - Test.instanceCount);
                iArr2[i1] += Test.sFld;
                i >>= 165;
                i += -61415;
                i = i;
                Test.instanceCount = i1;
                Test.sFld *= (short)i;
            }
            i += (int)(f + i);
            Test.dFld -= f;
            iArr2[(int)(f - 1)] *= i;
            if (b2) break;
            Test.instanceCount |= i1;
            Test.fArrFld[(int)(f)] -= (float)Test.dFld;
            for (i27 = (int)(f); 70 > i27; ++i27) {
                switch (((i27 % 1) * 5) + 43) {
                case 46:
                    for (i29 = 1; i29 < 1; i29++) {
                        if (b2) continue;
                        i28 = i30;
                        i = i30;
                        Test.instanceCount = i1;
                    }
                    for (i31 = 1; 1 > i31; ++i31) {
                        i32 += (((i31 * i28) + Test.instanceCount) - Test.instanceCount);
                        i30 += (i31 - i29);
                        i28 = Test.sFld;
                        i28 *= (int)Test.dFld;
                    }
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
