package tests.javafuzzer1772;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:14:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=53732L;
    public int iFld=17;
    public static double dFld=0.98458;
    public static byte byFld=-14;
    public float fFld=0.31F;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -59.124393);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, long l) {

        double d1=-1.94526;
        int i2=14056, i3=-5, i4=-18071, i5=5867;
        float f=1.239F, fArr[]=new float[N];
        long l1=-36715L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -244L);
        FuzzerUtils.init(fArr, -70.661F);

        Test.dFld = i1;
        for (d1 = 7; d1 < 169; d1++) {
            Test.instanceCount += (long)(d1 * f);
            l >>>= -198;
            lArr[(int)(d1 - 1)] ^= -2;
            i2 += (int)(139L + (d1 * d1));
            i2 -= i2;
            for (l1 = (long)(d1); l1 < 10; ++l1) {
                i1 -= i2;
                switch ((int)((d1 % 4) + 52)) {
                case 52:
                    for (i4 = 1; i4 < 1; i4++) {
                        i1 -= (int)f;
                        i3 += (int)-3L;
                        i5 += (i4 - i2);
                        lArr[(int)(d1 - 1)] += l1;
                    }
                    break;
                case 53:
                    fArr[(int)(d1 + 1)] += 2.437F;
                    break;
                case 54:
                    lArr[(int)(l1 - 1)] ^= i3;
                case 55:
                    i3 -= (int)l;
                    break;
                default:
                    i2 += (-5 + (l1 * l1));
                }
            }
        }
        vMeth_check_sum += i1 + l + Double.doubleToLongBits(d1) + i2 + Float.floatToIntBits(f) + l1 + i3 + i4 + i5 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        double d=-88.23251;
        int i6=-53925, i7=56819, i8=13, i9=-30412, i10=0, i11=-14, i12=11620;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -2.864F);

        Test.instanceCount -= (long)(++d);
        vMeth(i6, Test.instanceCount);
        Test.instanceCount = Test.instanceCount;
        i7 = 1;
        do {
            for (i8 = 9; i8 > 1; i8 -= 3) {
                fArr1[(i6 >>> 1) % N] *= i10;
                Test.dFld -= i8;
                i6 = i8;
                Test.instanceCount %= -30637;
                for (i11 = i8; 5 > i11; ++i11) {
                    int i13=-36226;
                    Test.instanceCount += (i11 * i12);
                    i6 += (((i11 * i7) + Test.instanceCount) - Test.instanceCount);
                    i13 &= 6;
                    Test.byFld += (byte)(4202721720L + (i11 * i11));
                    i12 += (((i11 * i7) + i13) - Test.instanceCount);
                }
            }
        } while (++i7 < 168);
        long meth_res = Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        int i=-7;
        short s=-31194;

        i = (int)(Math.abs(Test.instanceCount) + (iMeth() + s));
        vSmallMeth_check_sum += i + s;
    }

    public void mainTest(String[] strArr1) {

        int i14=52649, i15=0, i16=-5, i17=-7, i18=-34572, i19=119, iArr[]=new int[N];
        float f1=-1.977F;
        short s1=1686;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 63166);
        FuzzerUtils.init(byArr, (byte)53);

        iArr[(iFld >>> 1) % N] *= (iArr[(iFld >>> 1) % N]++);
        for (int smallinvoc=0; smallinvoc<972; smallinvoc++) vSmallMeth();
        i14 = 1;
        do {
            iFld *= (int)Test.dFld;
            iFld >>>= i14;
            for (i15 = 5; i15 < 99; i15++) {
                fFld -= iFld;
            }
            iArr[i14 + 1] = (int)fFld;
            Test.instanceCount = -41843L;
            for (i17 = i14; 99 > i17; i17++) {
                Test.dFld *= Test.instanceCount;
                i18 = (int)-28419L;
                Test.instanceCount -= -32518;
                Test.instanceCount = i18;
                for (f1 = 1; f1 < 1; ++f1) {
                    iArr[i17 + 1] = i19;
                    byArr[(int)(f1)] >>= (byte)i15;
                    Test.instanceCount >>= iFld;
                    iArr[i17 + 1] += i16;
                    Test.dFld = i14;
                    iArr[i17] += s1;
                    iArr[i17] -= i17;
                }
            }
        } while (++i14 < 255);
        switch (((i17 >>> 1) % 1) + 97) {
        case 97:
            fFld = 108;
            for (double d2 : Test.dArrFld) {
                switch (((i19 >>> 1) % 1) + 127) {
                case 127:
                    iFld -= i17;
                default:
                    i16 <<= iFld;
                }
                Test.instanceCount /= (s1 | 1);
            }
            Test.instanceCount = -10551;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
