package tests.javafuzzer3093;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:35:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3878368660L;
    public static boolean bFld=true;
    public static double dFld=-2.102213;
    public volatile boolean bArrFld[][]=new boolean[N][N];
    public static float fArrFld[][]=new float[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 56.511F);
        FuzzerUtils.init(Test.iArrFld, -82);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i17) {

        int i18=243, i19=204, i20=4, i21=0, i23=-29139, i24=25722, i25=-3, i26=243, i27=188, i28=-43;
        double d3=0.17422;
        boolean b=true;
        float f2=-8.604F;

        for (i18 = 164; i18 > 2; i18 -= 2) {
            if (Test.bFld) {
                d3 = i19;
                for (i20 = 1; i20 < 19; i20++) {
                    i21 -= i19;
                }
                switch (((i18 % 2) * 5) + 47) {
                case 48:
                    for (i23 = 1; i23 < 19; i23++) {
                        Test.instanceCount += (i23 * i17);
                    }
                    for (i25 = 1; i25 < 19; i25++) {
                        i24 >>= i21;
                        if (b) continue;
                        switch ((i25 % 1) + 104) {
                        case 104:
                            for (i27 = 1; i27 < 2; i27++) {
                                if (Test.bFld) break;
                                f2 = i17;
                            }
                        }
                    }
                case 53:
                    Test.instanceCount = -4;
                    break;
                default:
                    i28 = i25;
                }
            } else if (b) {
                i21 = (int)Test.instanceCount;
            }
        }
        long meth_res = i17 + i18 + i19 + Double.doubleToLongBits(d3) + i20 + i21 + i23 + i24 + i25 + i26 + (b ? 1 : 0)
            + i27 + i28 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1) {

        int i14=8312, i15=-1, i16=151;
        float f1=-77.532F;
        double d2=-3.54514;
        byte by2=70;
        long l=0L;

        for (i14 = 350; i14 > 1; i14--) {
            Test.instanceCount = (--i15);
            i15 ^= (int)(f1 - Test.fArrFld[i14][i14 - 1]);
            i15 += (int)12883392700533273L;
        }
        if (Test.bFld) {
            for (d2 = 19; d2 < 369; ++d2) {
                i15 -= iMeth(-165);
                if (Test.bFld) {
                    Test.bFld = true;
                } else {
                    Test.instanceCount *= Test.instanceCount;
                    by2 -= (byte)Test.instanceCount;
                    if (i15 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d1) + i14 + i15 + Float.floatToIntBits(f1) +
                            Double.doubleToLongBits(d2) + i16 + by2 + l;
                        return;
                    }
                    i15 += (int)(((d2 * Test.instanceCount) + Test.instanceCount) - i14);
                    vMeth_check_sum += Double.doubleToLongBits(d1) + i14 + i15 + Float.floatToIntBits(f1) +
                        Double.doubleToLongBits(d2) + i16 + by2 + l;
                    return;
                }
            }
            Test.instanceCount -= (long)f1;
            Test.iArrFld[(34218 >>> 1) % N] += i15;
        } else {
            Test.iArrFld[(i16 >>> 1) % N] <<= (int)l;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i14 + i15 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d2) + i16 + by2 + l;
    }

    public static float fMeth(byte by1) {

        int i6=-79, i7=-112, i8=75, i9=-88, i10=42899, i11=26769, i12=-5, i13=-11, iArr1[]=new int[N];
        float f=0.351F;

        FuzzerUtils.init(iArr1, 10);

        for (i6 = 10; i6 < 323; ++i6) {
            i7 += (((i6 * i7) + i6) - f);
        }
        for (i8 = 9; i8 < 336; ++i8) {
            for (i10 = 1; i10 < 5; i10++) {
                long l1=-78L;
                Test.instanceCount += (i10 | i9);
                Test.instanceCount += (i10 | i11);
                i11 += (i10 ^ i8);
                try {
                    i7 = (i11 % 122);
                    iArr1[i8] = (i9 % -9480);
                    i9 = (i11 / i9);
                } catch (ArithmeticException a_e) {}
                for (i12 = 1; i12 < 2; i12++) {
                    vMeth(Test.dFld);
                    Test.instanceCount *= i11;
                    Test.iArrFld[i8] -= -13;
                    i13 *= i12;
                }
                Test.iArrFld[i10] *= (int)l1;
                l1 = i12;
            }
        }
        long meth_res = by1 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=51, i1=30968, i2=62813, i3=0, i4=244, i5=17335, i30=65405, iArr[][]=new int[N][N];
        double d=-115.85992;
        byte by=59;
        short s=30047;
        float f3=127.392F, f4=10.1022F;

        FuzzerUtils.init(iArr, -213);

        for (i = 15; i < 276; i++) {
            if (Test.bFld) break;
            for (i2 = 2; i2 < 96; ++i2) {
                for (i4 = 2; i4 > 1; i4--) {
                    i1 = (int)(Test.instanceCount--);
                    if (Test.bFld = (((i3--) - iArr[i][i]) > Math.abs(d++))) continue;
                    Test.instanceCount = -12;
                    Test.bFld = true;
                    i1 *= (-Math.max((int)(8693678449955869476L - i5), (int)(i + Test.instanceCount)));
                    if (bArrFld[i + 1][i2 - 1]) break;
                    switch ((i2 % 1) + 38) {
                    case 38:
                        by += (byte)(((i4 * i2) + Test.instanceCount) - i4);
                        try {
                            iArr[i2 - 1][i - 1] = (i5 % i1);
                            i5 = (38520 / i5);
                            iArr[i][i2 + 1] = (iArr[i4 - 1][i4 + 1] / -56783);
                        } catch (ArithmeticException a_e) {}
                        if (((i3--) != ((i5--) + (i3 >>= by))) || (i4 < (Short.reverseBytes(s) - (-35192 * by)))) break;
                        i5 = (i1 + iArr[i + 1][i + 1]);
                    }
                }
                i1 &= (int)(d - -204);
                i1 += (int)fMeth((byte)(64));
                f3 += (-30 + (i2 * i2));
                f4 *= (float)Test.dFld;
            }
            switch ((i % 5) + 116) {
            case 116:
                i3 = i3;
                Test.iArrFld[(38514 >>> 1) % N] = s;
                try {
                    i3 = (i4 / i);
                    i3 = (-28 / i1);
                    i5 = (2050857060 / i);
                } catch (ArithmeticException a_e) {}
                i3 = i1;
            case 117:
                i30 = 1;
                while (++i30 < 96) {
                    f3 = i1;
                    i5 ^= (int)2464177826L;
                    Test.instanceCount *= -236;
                    try {
                        i3 = (49362 / i2);
                        i3 = (23797 % iArr[i30 - 1][i30]);
                        i1 = (i5 % -24);
                    } catch (ArithmeticException a_e) {}
                    s *= (short)i30;
                }
            case 118:
                d += 1.123018;
                break;
            case 119:
                Test.dFld = -4L;
                break;
            case 120:
                i3 = (int)-13L;
                break;
            default:
                i3 = i4;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
