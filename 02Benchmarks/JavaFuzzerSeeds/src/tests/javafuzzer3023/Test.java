package tests.javafuzzer3023;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=22733L;
    public static double dFld=2.100127;
    public static float fFld=2.874F;
    public static volatile byte byFld=-27;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 109);
        FuzzerUtils.init(Test.dArrFld, -92.83048);
    }

    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8, int i9) {


        Test.iArrFld = Test.iArrFld;
        vMeth_check_sum += i8 + i9;
    }

    public static long lMeth(int i4, int i5) {

        int i6=146, i7=-45833, i10=-17871, i11=-209, i12=-47120, i13=-12;
        boolean b=false;
        float f1=111.23F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1908265261L);

        for (i6 = 13; i6 < 354; ++i6) {
            switch (i6 % 9) {
            case 0:
                i4 += (46364 + (i6 * i6));
                vMeth(-166, 150);
                for (i10 = 1; i10 < 5; ++i10) {
                    for (i12 = i6; i12 < 2; i12 += 3) {
                        Test.dFld *= i5;
                        if (b) continue;
                        i4 += i6;
                        i5 += (i12 * i12);
                    }
                    i13 = i11;
                    i11 = -5;
                }
                break;
            case 1:
                f1 -= i11;
                i13 = i13;
                lArr[i6 - 1] >>= Test.instanceCount;
                break;
            case 2:
                if (false) continue;
            case 3:
                Test.dArrFld[i6] = Test.instanceCount;
                break;
            case 4:
                i11 = 25;
            case 5:
                i5 += i6;
                break;
            case 6:
                i5 = i13;
                break;
            case 7:
                i13 += i6;
                break;
            case 8:
                i5 >>>= i13;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i3) {

        int i14=-27138, i15=2, i16=-53527, i17=-13527, i18=8794, i19=159;
        short s=-27836;
        float f2=82.850F;
        long lArr1[]=new long[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(lArr1, 52L);
        FuzzerUtils.init(byArr, (byte)-107);

        Test.iArrFld[(i3 >>> 1) % N] /= (int)(((long)((145 - (65214 - (12 * Test.instanceCount))) * (lMeth(i3, i3) -
            Test.fFld))) | 1);
        for (i14 = 228; i14 > 12; i14--) {
            s >>= (short)i16;
            byArr[i14][i14 - 1] = (byte)Test.instanceCount;
            lArr1[i14] = i15;
        }
        i3 <<= Test.byFld;
        Test.byFld = Test.byFld;
        Test.fFld -= i16;
        for (f2 = 3; f2 < 127; f2++) {
            Test.fFld = 52.763F;
            for (i18 = 1; 13 > i18; i18++) {
                if (i3 != 0) {
                }
                Test.iArrFld[(int)(f2 + 1)] <<= i19;
                Test.dFld = -991863669028315337L;
                Test.byFld = (byte)1.41F;
            }
        }
        long meth_res = i3 + i14 + i15 + s + i16 + Float.floatToIntBits(f2) + i17 + i18 + i19 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-129, i2=31726, i20=62016, i21=34, i22=-62103;
        float f=-15.149F, fArr[]=new float[N];
        boolean b1=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)8049);
        FuzzerUtils.init(fArr, 1.401F);

        for (int i : Test.iArrFld) {
            for (i1 = 1; i1 < 63; i1++) {
                f += (i1 * i1);
                sArr[i1] -= (short)(dMeth(i) + i1);
                i += i1;
                i &= i;
                Test.iArrFld[i1 - 1] = i1;
                for (i20 = i1; i20 < 2; ++i20) {
                    i2 = i20;
                }
                Test.dFld /= ((long)(Test.dFld) | 1);
                i22 = 1;
                while (++i22 < 2) {
                    f += i22;
                    Test.instanceCount *= i2;
                    Test.iArrFld[i1 + 1] -= (int)Test.instanceCount;
                    i21 += (i22 * i21);
                    i21 = (int)230L;
                    switch ((i1 % 4) + 93) {
                    case 93:
                        i = 36;
                        Test.iArrFld[i22 - 1] <<= (int)Test.instanceCount;
                        i2 += i22;
                        Test.iArrFld[i22 - 1] ^= i21;
                    case 94:
                        Test.iArrFld[i1] *= i20;
                    case 95:
                        i <<= i;
                        if (b1) break;
                        i2 += i;
                        if (b1) continue;
                    case 96:
                        Test.instanceCount += Test.instanceCount;
                        if (b1) break;
                    }
                }
            }
            Test.instanceCount ^= 23;
            fArr[(i >>> 1) % N] *= i1;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
