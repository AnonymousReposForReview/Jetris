package tests.javafuzzer2168;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:43:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static short sFld=4139;
    public static byte byFld=82;
    public static float fFld=0.735F;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13595);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f, long l) {

        int i5=227, i6=246, i7=2, i8=149, i9=-233;
        double d1=60.17599;

        for (i5 = 11; i5 < 240; i5++) {
            i6 += (((i5 * f) + i6) - l);
            i6 = (int)d1;
            i7 = 1;
            do {
                i6 += (i7 * i7);
                i8 = 1;
                do {
                    short s=-19974;
                    i6 -= i5;
                    Test.iArrFld = Test.iArrFld;
                    f = (float)d1;
                    i6 = i8;
                    i6 = i6;
                    i6 += i7;
                    i6 += s;
                    l -= i9;
                    i9 = i6;
                } while (++i8 < 1);
            } while (++i7 < 7);
        }
        long meth_res = Float.floatToIntBits(f) + l + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + i9;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2) {

        int i3=-3, i4=12, i10=0, i11=-27930, i12=-138, i13=-25201;
        double d=0.27870;
        float f1=2.859F;
        boolean b=true;
        short s1=-25559;

        for (i3 = 7; i3 < 379; i3++) {
            d += Math.min(Test.instanceCount, (++i2) - i3);
            i2 *= (int)lMeth(f1, Test.instanceCount);
            for (i10 = i3; i10 < 5; i10++) {
                i2 += (((i10 * i10) + Test.instanceCount) - i4);
                for (i12 = 1; i12 < 1; i12++) {
                    i2 >>= i3;
                    i11 += (i12 * i12);
                    i11 += i12;
                    d += d;
                    if (b) continue;
                    s1 = (short)i3;
                    i13 += i12;
                    Test.instanceCount = (long)d;
                }
                Test.instanceCount += i10;
            }
        }
        long meth_res = i2 + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 +
            (b ? 1 : 0) + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i14=-12, i15=-135, i16=0, i17=219, i18=105, i19=4369;
        boolean b1=false;

        i1 = ((Test.iArrFld[(6 >>> 1) % N] + (++i1)) * ((-iMeth(i1)) + i1));
        switch (((i1 >>> 1) % 2) + 30) {
        case 30:
            for (i14 = 10; i14 < 184; ++i14) {
                for (i16 = 9; 1 < i16; --i16) {
                    i1 >>>= Test.sFld;
                    for (i18 = 1; 2 > i18; i18++) {
                        i15 = i14;
                        if (i16 != 0) {
                            vMeth_check_sum += i1 + i14 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0);
                            return;
                        }
                        Test.byFld += (byte)-2.595F;
                        if (b1) continue;
                        i15 += i15;
                        Test.fFld += i19;
                        if (b1) break;
                        Test.instanceCount |= i16;
                    }
                    Test.iArrFld[i16 - 1] -= -50;
                }
            }
        case 31:
            Test.iArrFld = Test.iArrFld;
            break;
        }
        vMeth_check_sum += i1 + i14 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-16754, i20=5, i21=-69, i22=-11473, i23=12, i24=1, i25=-45, i26=-6, i27=-4, i28=242, i29=57058, i30=-185,
            i31=59, i32=14062, iArr[][]=new int[N][N];
        boolean b2=true;
        long l1=-226L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-1);
        FuzzerUtils.init(iArr, 48144);

        i = 1;
        while (++i < 330) {
            vMeth(-44);
        }
        for (i20 = 302; i20 > 7; --i20) {
            for (i22 = 85; i22 > 2; --i22) {
                Test.iArrFld[i20 + 1] |= i23;
                Test.byFld = (byte)1838027471913201230L;
            }
            b2 = true;
            i23 += (((i20 * i22) + Test.fFld) - i20);
            i21 -= (int)Test.fFld;
            for (i24 = 4; i24 < 85; ++i24) {
                i21 += (i24 * i24);
                i23 *= 6;
            }
            Test.iArrFld[i20 - 1] &= (int)Test.instanceCount;
        }
        byArr[(i24 >>> 1) % N] = (byte)i26;
        i25 = i20;
        for (i27 = 229; 4 < i27; i27 -= 3) {
            Test.byFld = (byte)Test.instanceCount;
            i21 = (int)Test.instanceCount;
            i23 -= i28;
            for (l1 = i27; l1 < 334; l1++) {
                i30 = 1;
                do {
                    i29 += i27;
                } while (++i30 < 1);
                for (i31 = 1; i31 < 1; ++i31) {
                    iArr = iArr;
                    if (b2) break;
                    Test.iArrFld[(int)(l1)] = (int)l1;
                    Test.instanceCount += (i31 | i23);
                    if (false) continue;
                    if (b2) continue;
                    Test.instanceCount >>= 36726;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
