package tests.javafuzzer2195;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:07:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static volatile float fFld=1.271F;
    public static int iFld=-7;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i2) {

        float f1=0.109F;
        int i3=-19, i4=17678, i5=-12;
        short s1=8097;
        long l1=-3365942493L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 184L);

        i2 = i2;
        if (false) {
            for (f1 = 1; f1 < 290; f1++) {
                s1 *= s1;
                Test.iArrFld[(int)(f1)] += -46;
                i3 += (-7103 + (f1 * f1));
                Test.instanceCount -= -133;
                i3 = 8;
                lArr[(int)(f1)] *= i2;
            }
        } else if (Test.bFld) {
            try {
                Test.fFld += l1;
            }
            catch (NegativeArraySizeException exc4) {
                Test.iArrFld[(Test.iFld >>> 1) % N] <<= Test.iFld;
                for (i4 = 8; i4 < 348; ++i4) {
                    i5 -= i4;
                    i2 -= (int)l1;
                }
            }
            catch (ArrayIndexOutOfBoundsException exc5) {
                Test.iFld = (int)l1;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + s1 + l1 + i4 + i5 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(float f, double d) {

        short s=-18294, sArr[]=new short[N];
        int i6=-13, i7=23295, i8=-56355, i9=-55868, i10=10, i11=-45383, i12=37217, i13=47;
        long lArr1[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(sArr, (short)23253);
        FuzzerUtils.init(lArr1, -8L);
        FuzzerUtils.init(fArr, -97.247F);

        s <<= (short)(Test.iFld = (int)((221 + fMeth(Test.iFld)) + Test.instanceCount));
        Test.iFld = (int)Test.instanceCount;
        for (i6 = 10; i6 < 191; i6++) {
            if (Test.bFld) {
                switch (((i6 % 6) * 5) + 10) {
                case 27:
                    for (i8 = i6; i8 < 9; i8++) {
                        i7 = i7;
                    }
                    break;
                case 21:
                    i7 = -2;
                    Test.instanceCount = Test.instanceCount;
                case 20:
                    f = i7;
                case 22:
                    for (i10 = 9; i10 > 1; i10--) {
                        i9 += (i10 + i8);
                        for (i12 = 1; i12 < 2; ++i12) {
                            Test.iFld += i7;
                            i13 = (int)Test.instanceCount;
                        }
                    }
                    break;
                case 16:
                    lArr1[i6 + 1] = i13;
                case 32:
                    fArr[i6 - 1][i6 + 1] += -31865;
                    break;
                }
            } else if (Test.bFld) {
                Test.instanceCount *= i11;
            } else if (Test.bFld) {
                sArr[i6] = (short)i6;
            } else {
                i9 += i6;
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s + i6 + i7 + i8 + i9 + i10 + i11 + i12
            + i13 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i1=-198, i14=130, i15=59, i16=80, iArr[]=new int[N];
        double d1=-81.119922;
        byte by=101;

        FuzzerUtils.init(iArr, 61975);

        i1 = 1;
        do {
            iArr[i1 - 1] -= i1;
            Test.iFld = (int)3776280857L;
            l = Math.max(iMeth1(Test.fFld, d1), i1);
            if (Test.bFld) continue;
            Test.iFld = 62;
            Test.iFld += i1;
            switch ((i1 % 7) + 68) {
            case 68:
                i14 = 1;
                while ((i14 += 3) < 6) {
                    Test.iFld &= Test.iFld;
                    for (i15 = 1; i15 < 3; ++i15) {
                        Test.iFld &= i15;
                        iArr[i15] = by;
                        l *= i1;
                        d1 -= by;
                    }
                }
                break;
            case 69:
                l = i15;
                break;
            case 70:
                Test.bFld = Test.bFld;
                break;
            case 71:
                Test.fFld -= i14;
                break;
            case 72:
                Test.bFld = Test.bFld;
            case 73:
                Test.fFld = Test.instanceCount;
                break;
            case 74:
                i16 = (int)d1;
            default:
                l += (i1 ^ l);
            }
        } while (++i1 < 259);
        long meth_res = l + i1 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i17=15177, i18=8, i19=-92, i20=43544, i21=0, i22=-5067, i23=32107, i24=-39117, i25=6;
        short s3=24487;
        byte by1=63;
        double d2=4.81422, dArr[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, -2.118051);
        FuzzerUtils.init(fArr1, 0.118F);

        i -= (int)(-((Test.fFld * i) + iMeth(Test.instanceCount)));
        i |= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = i;
        for (i17 = 13; i17 < 295; i17++) {
            i *= (int)Test.instanceCount;
            i18 = i18;
            Test.fFld += (((i17 * Test.iFld) + Test.iFld) - i);
            for (i19 = 5; i19 < 89; i19++) {
                if (Test.bFld) break;
                Test.instanceCount = s3;
                for (i21 = i19; 2 > i21; i21++) {
                    Test.instanceCount = i22;
                    by1 += (byte)i21;
                    dArr[i19 - 1] -= i18;
                    if (true) continue;
                }
                for (d2 = 1; d2 < 2; d2 += 3) {
                    Test.iArrFld[i19 + 1] += (int)d2;
                    Test.iFld >>>= i22;
                    if (Test.bFld) break;
                    Test.instanceCount += Test.instanceCount;
                    fArr1[(int)(d2)] = s3;
                    i22 += (int)d2;
                    i20 = i21;
                    i -= (int)Test.fFld;
                }
                Test.fFld -= i22;
                Test.instanceCount = i;
                Test.instanceCount = Test.instanceCount;
                for (i24 = 1; i24 < 2; ++i24) {
                    lArrFld[i24] -= Test.instanceCount;
                    Test.iFld = i22;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
