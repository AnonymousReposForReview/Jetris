package tests.javafuzzer1425;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:14:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-78541504849027702L;
    public static float fFld=103.184F;
    public static volatile int iFld=106;
    public static short sArrFld[]=new short[N];
    public long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)23135);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1) {

        int i2=-66, i3=59, i4=-8, i5=20130, i6=189, i7=222, i8=23, iArr[]=new int[N];
        short s=-10538;
        float f=2.145F;
        boolean b2=true;

        FuzzerUtils.init(iArr, 8811);

        for (i2 = 9; i2 < 208; ++i2) {
            iArr = FuzzerUtils.int1array(N, (int)-9);
            iArr[i2] -= 16951;
            Test.instanceCount -= 50242;
        }
        i4 = 1;
        while (++i4 < 226) {
            Test.instanceCount = s;
            f += i4;
            i3 = (int)Test.instanceCount;
            for (i5 = 1; i5 < 7; ++i5) {
                i3 += (i5 | Test.instanceCount);
                for (i7 = 1; i7 < 2; ++i7) {
                    Test.sArrFld[i4] -= (short)Test.instanceCount;
                    if (b2) break;
                }
                Test.sArrFld[i4] *= (short)i1;
                Test.instanceCount = i5;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + s + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(boolean b, boolean b1, int i) {

        int i9=-29208, i10=19122, i12=52072, i13=245, i14=129, iArr1[]=new int[N];
        double d1=-2.109194;

        FuzzerUtils.init(iArr1, 195);

        vMeth1(i);
        for (i9 = 175; i9 > 2; --i9) {
            Test.fFld = -249;
            iArr1 = iArr1;
            i10 += (int)(-53791L + (i9 * i9));
            i10 *= 23467;
            i10 += (i9 ^ i);
            iArr1[i9] = i9;
            for (i12 = 1; i12 < 9; ++i12) {
                if (b) break;
                for (d1 = 1; d1 < 2; ++d1) {
                    i13 >>= i13;
                    Test.instanceCount = (long)d1;
                    Test.fFld += -10.686F;
                    iArr1[i12 + 1] = i12;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + (b1 ? 1 : 0) + i + i9 + i10 + i12 + i13 + Double.doubleToLongBits(d1) + i14 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        double d=1.61772;
        boolean b3=true;
        int i15=63778, i16=8, i17=38, i18=-41377, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 12);

        d += (lMeth(b3, b3, Test.iFld) - Test.iFld);
        Test.instanceCount = Test.iFld;
        for (i15 = 18; i15 < 324; ++i15) {
            i16 -= (int)d;
            lArrFld = lArrFld;
            Test.iFld -= i15;
            Test.instanceCount += (long)Test.fFld;
        }
        for (i17 = 11; i17 < 306; i17++) {
            iArr2[i17] *= Test.iFld;
            Test.instanceCount = 10L;
            lArrFld[(i18 >>> 1) % N][i17 + 1] = Test.instanceCount;
            i18 >>>= i16;
            i18 -= (int)Test.fFld;
            Test.instanceCount += (((i17 * Test.iFld) + Test.instanceCount) - Test.iFld);
        }
        d -= i15;
        vMeth_check_sum += Double.doubleToLongBits(d) + (b3 ? 1 : 0) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i19=239, i20=-64563, i21=63011, i22=-51314, i23=10, i24=-2, i25=206;
        short s1=-1415;
        double d2=2.69383;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.257F);

        vMeth();
        fArr = FuzzerUtils.float1array(N, (float)-1.920F);
        Test.iFld += Test.iFld;
        i19 = 220;
        while (--i19 > 0) {
            for (i20 = 7; i20 < 114; ++i20) {
                i21 *= Test.iFld;
                s1 += (short)i21;
                Test.instanceCount = (long)Test.fFld;
                Test.instanceCount >>= i21;
                switch ((i20 % 2) + 96) {
                case 96:
                    Test.fFld *= i20;
                    d2 = Test.iFld;
                    if (true) continue;
                    iArrFld[i19] -= (int)-1.801F;
                    break;
                case 97:
                    i22 = 1;
                    while (++i22 < 2) {
                        Test.instanceCount *= i21;
                    }
                    Test.iFld = i19;
                    i23 = 2;
                    do {
                        Test.instanceCount /= (Test.iFld | 1);
                        i21 = (int)d2;
                        Test.iFld -= i19;
                    } while (--i23 > 0);
                    for (i24 = i19; i24 < 2; ++i24) {
                        switch ((((-25814 >>> 1) % 4) * 5) + 108) {
                        case 113:
                            Test.instanceCount >>>= -28594;
                            Test.iFld += (i24 * i24);
                            break;
                        case 117:
                            Test.instanceCount *= 22514;
                            Test.instanceCount -= i21;
                            i21 *= (int)Test.fFld;
                        case 122:
                            Test.iFld += i22;
                            d2 += i25;
                        case 126:
                            i25 += (-143 + (i24 * i24));
                            break;
                        default:
                            Test.iFld += i25;
                        }
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
