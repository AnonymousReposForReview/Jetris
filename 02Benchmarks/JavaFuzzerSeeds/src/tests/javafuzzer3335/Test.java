package tests.javafuzzer3335;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:21:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static short sFld=-732;
    public static float fFld=0.136F;
    public static int iFld=-194;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9135);
        FuzzerUtils.init(Test.dArrFld, -18.1534);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i9=8, i10=42070, i11=-3, i12=33000;
        boolean b=false;
        byte by1=-11;
        double d1=-1.84440;

        for (i9 = 121; i9 > 4; i9--) {
            i10 = -1;
            if (b) continue;
            Test.instanceCount += by1;
            i10 >>= i10;
            for (i11 = 1; i11 < 13; ++i11) {
                Test.iArrFld[i9 - 1] = (int)Test.instanceCount;
                i10 += i11;
                d1 -= Test.instanceCount;
                Test.fFld += (33469 + (i11 * i11));
            }
            i12 = (int)191L;
            i10 = (int)-4243L;
        }
        i10 = i11;
        b = b;
        d1 *= -57;
        long meth_res = i9 + i10 + (b ? 1 : 0) + by1 + i11 + i12 + Double.doubleToLongBits(d1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=-8101, i6=7, i7=54400, i8=29559, i14=-23607, i15=53083;
        double d=9.69062;
        byte by=51;

        for (i5 = 373; i5 > 13; i5 -= 3) {
            i7 = 1;
            do {
                Test.iArrFld[i7 - 1] <<= (((i4 * Test.sFld) >> (163 + Integer.reverseBytes(0))) -
                    (Integer.reverseBytes(205) + (i6 - 12)));
                for (d = 1; d < 1; ++d) {
                    Test.instanceCount += (11L + (d * d));
                    i6 += 172;
                    Test.fFld += ((++i8) - Float.intBitsToFloat(by - i5));
                    i8 += (int)(d + Test.fFld);
                    Test.fFld += (float)d;
                    i6 += (int)dMeth();
                    i3 += (int)(d + Test.instanceCount);
                }
                i3 = i3;
                for (i14 = 1; i14 > 1; i14--) {
                    i15 = (int)85.36047;
                    i8 = -163;
                }
            } while (++i7 < 13);
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + by + i14 + i15;
    }

    public static void vMeth(short s, int i) {

        int i1=14824, i2=-152, i16=3, i17=-3, i18=55850;
        boolean b1=true;
        double d2=2.85975;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 244L);

        for (i1 = 173; i1 > 6; i1--) {
            vMeth1(15834, i);
            i = 61;
            i = (int)Test.instanceCount;
            Test.iArrFld[i1] = 172;
            i16 = 1;
            do {
                for (i17 = i1; i17 < 1; i17++) {
                    try {
                        i18 = (Test.iArrFld[i16 + 1] % Test.iArrFld[i16 + 1]);
                        i = (-206 / i17);
                        i2 = (100 % i2);
                    } catch (ArithmeticException a_e) {}
                    switch ((((i16 >>> 1) % 4) * 5) + 109) {
                    case 116:
                        Test.instanceCount = i18;
                        break;
                    case 121:
                        b1 = true;
                        switch (((i1 % 1) * 5) + 41) {
                        case 42:
                            lArr[i17 + 1] |= i16;
                            Test.dArrFld[i16 - 1] += Test.instanceCount;
                            Test.iArrFld = Test.iArrFld;
                            break;
                        }
                        break;
                    case 122:
                        d2 = i1;
                        break;
                    case 118:
                        i += i2;
                        break;
                    default:
                        Test.iArrFld[i17 - 1] <<= i1;
                    }
                }
            } while (++i16 < 9);
        }
        vMeth_check_sum += s + i + i1 + i2 + i16 + i17 + i18 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-126, i20=1, i21=102, i22=16638, i23=-62901, i24=87, i25=-6, i26=52130, i27=-19278, i28=11;
        double d3=-25.18420, d4=2.74744;
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)26);
        FuzzerUtils.init(fArr, 0.493F);

        vMeth(Test.sFld, Test.iFld);
        for (i19 = 7; i19 < 250; i19++) {
            i20 += (((i19 * i20) + Test.instanceCount) - Test.iFld);
            for (i21 = 6; 103 > i21; i21++) {
                i22 *= i22;
                i20 = (int)-8L;
            }
            byArr[i19 - 1] *= (byte)55L;
            Test.instanceCount = i20;
            Test.fFld %= (Test.iFld | 1);
            switch ((i19 % 1) * 5) {
            case 4:
                Test.iArrFld[i19 - 1] >>= (int)6316827263415826766L;
                break;
            default:
                for (i23 = 4; 103 > i23; i23++) {
                    try {
                        i20 = (Test.iFld % i21);
                        Test.iArrFld[i19 - 1] = (i22 / -1038663465);
                        Test.iArrFld[i19 + 1] = (-129 / i19);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount *= -18;
                    Test.instanceCount >>>= i22;
                }
            }
            Test.iArrFld[i19] >>= i24;
            d3 *= i22;
            Test.dArrFld[i19] = -153;
            Test.iArrFld[i19] = 90;
        }
        Test.instanceCount = i20;
        switch (((i23 >>> 1) % 6) + 17) {
        case 17:
            for (i25 = 13; 253 > i25; ++i25) {
                i22 += (((i25 * Test.instanceCount) + i26) - i24);
                Test.iFld = (int)Test.instanceCount;
            }
        case 18:
            for (d4 = 3; d4 < 269; ++d4) {
                fArr[(int)(d4 + 1)] *= 1.88F;
                i28 = 1;
                do {
                    Test.iArrFld[(int)(d4 + 1)] = 15;
                    Test.instanceCount += (i28 * Test.iFld);
                    i26 = (int)Test.instanceCount;
                } while (++i28 < 94);
            }
            break;
        case 19:
            Test.iFld ^= i21;
            break;
        case 20:
            Test.iArrFld[(i25 >>> 1) % N] -= i23;
            break;
        case 21:
            fArr[(Test.iFld >>> 1) % N] = Test.fFld;
            break;
        case 22:
            i26 -= Test.sFld;
            break;
        default:
            Test.instanceCount >>= Test.sFld;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
