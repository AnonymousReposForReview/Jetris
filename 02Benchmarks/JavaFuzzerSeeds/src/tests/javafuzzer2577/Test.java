package tests.javafuzzer2577;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:50:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-112L;
    public static short sFld=-16787;
    public static double dFld=84.75333;
    public static float fFld=46.42F;
    public byte byFld=-27;
    public static float fArrFld[]=new float[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 75.214F);
        FuzzerUtils.init(Test.dArrFld, -1.125061);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i2) {

        float f=75.86F;
        int i3=-2, i4=14, i5=51920, iArr1[]=new int[N];
        double d=1.20549;
        byte by=109;

        FuzzerUtils.init(iArr1, 237);

        f = i2;
        i3 = 1;
        do {
            f += (i2--);
            iArr1 = (iArr1 = (iArr1 = iArr1));
            i2 = (int)(i2 - ((i2 - 8) + (-27 - (-(i2 - f)))));
            for (i4 = 1; i4 < 6; i4++) {
                Test.instanceCount = (Integer.reverseBytes(i2 = i2) >> (long)((f - i5) * -1711884474L));
                i2 += (i4 | Test.instanceCount);
                if (Test.instanceCount != d) break;
                by = (byte)(((--iArr1[i4]) >> (Test.instanceCount + 90)) - (Test.instanceCount + (Test.instanceCount |=
                    Test.instanceCount)));
                i2 <<= (--i5);
                i2 *= (int)Math.abs(f++);
                d = d;
                f *= (++Test.instanceCount);
                i2 += (i4 + Test.sFld);
            }
        } while (++i3 < 276);
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + Double.doubleToLongBits(d) + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i13=10, i14=5, i15=-1, i16=-55109, i17=17512, i18=62558, iArr3[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -4182131528L);
        FuzzerUtils.init(iArr3, -48420);

        switch (((-10477 >>> 1) % 2) + 31) {
        case 31:
        case 32:
            i13 = i13;
            i14 = 1;
            do {
                for (i15 = 1; i15 < 11; i15++) {
                    switch (((i14 >>> 1) % 1) + 87) {
                    case 87:
                        for (i17 = 1; i17 < 2; ++i17) {
                            lArr2[(i17 >>> 1) % N] += 14;
                            Test.dFld -= -6048;
                            Test.fFld += i18;
                            i16 *= (int)Test.instanceCount;
                            i16 = (int)Test.instanceCount;
                        }
                        try {
                            i18 = (iArr3[i14] / -45);
                            i16 = (i18 / -27);
                            i13 = (i14 / i14);
                        } catch (ArithmeticException a_e) {}
                        try {
                            i18 = (1498731347 % i15);
                            i13 = (iArr3[(8 >>> 1) % N] / 62898);
                            i16 = (i13 / i14);
                        } catch (ArithmeticException a_e) {}
                        iArr3[i15] <<= i15;
                        break;
                    default:
                        i18 = (int)Test.dFld;
                    }
                }
            } while (++i14 < 145);
            break;
        default:
            Test.instanceCount = Test.instanceCount;
        }
        vMeth1_check_sum += i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr3);
    }

    public static int iMeth1(int i9, int i10) {

        byte by1=-45;
        int i11=-27703, i12=11, i19=13950, i20=4, iArr2[]=new int[N];
        float f2=1.943F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -491538828L);
        FuzzerUtils.init(iArr2, 79);

        lArr1[(i10 >>> 1) % N] *= (((244L + (-63966 - Test.instanceCount)) * i10) * by1);
        for (i11 = 5; i11 < 350; i11++) {
            iArr2[i11] = (int)(((i10 - Test.instanceCount) - (Test.dArrFld[i11 + 1]++)) - (-(f2--)));
            Test.instanceCount -= i12;
            vMeth1();
            i10 *= i11;
            for (i19 = i11; 5 > i19; i19++) {
                i10 = i9;
                i12 <<= i20;
                i12 += i19;
                iArr2[i19 - 1] *= (int)-11389L;
            }
            iArr2[i11 - 1] &= i11;
            Test.instanceCount = (long)f2;
            i9 *= i12;
            Test.dFld += -895787316L;
        }
        long meth_res = i9 + i10 + by1 + i11 + i12 + Float.floatToIntBits(f2) + i19 + i20 + FuzzerUtils.checkSum(lArr1)
            + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, double d1, int i8) {

        byte by2=-95;
        int i21=9823, i22=-2, i23=-13, i24=39264, i25=57517;

        vMeth(Math.min(-(-28305 + iMeth1(98, i7)), i8));
        Test.fFld -= i8;
        by2 ^= (byte)222;
        i8 -= (int)Test.fFld;
        i8 += (int)Test.instanceCount;
        for (i21 = 7; i21 < 160; ++i21) {
            Test.instanceCount = (long)d1;
            i23 = 1;
            do {
                d1 = i7;
                Test.instanceCount -= (long)Test.fFld;
                Test.fFld += i23;
                if (false) break;
                for (i24 = 1; i24 < 1; i24++) {
                    i25 = i24;
                }
                Test.fArrFld[i21 - 1] = Test.sFld;
            } while (++i23 < 10);
        }
        long meth_res = i7 + Double.doubleToLongBits(d1) + i8 + by2 + i21 + i22 + i23 + i24 + i25;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=41180, i1=13, i6=61, i26=-52305, i27=-58, i28=-46485, i29=-10178, iArr[][]=new int[N][N];
        float f1=-123.191F;
        boolean b=true, b1=true;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -76);
        FuzzerUtils.init(lArr, 221L);
        FuzzerUtils.init(dArr, 0.44427);

        for (i = 9; i < 168; ++i) {
            i1 += (((i * i) + i1) - i1);
            Test.fArrFld = (Test.fArrFld = (Test.fArrFld = (Test.fArrFld = Test.fArrFld)));
            Test.instanceCount -= (((i1 * 38037) - iArr[i + 1][i + 1]) - i1);
            vMeth(iArr[i][i - 1]);
            f1 += (((i * i1) + i) - f1);
            iArr = (iArr = iArr);
            Test.instanceCount = ((8 - (-i1)) - ((long)(-85.70448 - (Test.instanceCount * i)) << lArr[i + 1]));
            iArr[i][i + 1] -= (int)Test.dFld;
        }
        i6 = 1;
        do {
            iArr[i6][i6] = (int)(i + Test.instanceCount);
            i1 -= (i1++);
            dArr[i6 + 1] += ((-(i + Test.dFld)) + Math.abs(dArr[i6]));
            vMeth(iMeth(i1, Test.dFld, i6));
            if (true) {
                b = b1;
                i1 = i6;
                for (i26 = 3; i26 < 126; i26++) {
                    i1 = i26;
                    Test.fFld *= 137L;
                    Test.dFld = i;
                    Test.sFld = (short)Test.fFld;
                    for (i28 = 2; i28 > 1; i28--) {
                        i29 |= i;
                        Test.instanceCount += (-69 + (i28 * i28));
                        i27 *= byFld;
                        switch ((i26 % 1) + 103) {
                        case 103:
                            iArr[i26 - 1][i26 - 1] = i26;
                            i29 = 4429;
                            if (b) continue;
                            break;
                        }
                    }
                }
            } else if (b1) {
                Test.instanceCount += i6;
            } else {
                i29 = (int)Test.fFld;
            }
        } while (++i6 < 199);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
