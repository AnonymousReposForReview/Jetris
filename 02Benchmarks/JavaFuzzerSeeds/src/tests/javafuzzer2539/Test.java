package tests.javafuzzer2539;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:17 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5526146917089810961L;
    public static int iFld=11;
    public double dFld=-2.50727;
    public static volatile byte byFld=-63;
    public static boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -57.10893);
        FuzzerUtils.init(Test.lArrFld, 10L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vMeth() {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -3);

        iArr[(8 >>> 1) % N] /= (int)(Test.iFld | 1);
        vMeth_check_sum += FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i3, long l) {

        float f=0.162F;

        Test.iFld = (int)(--f);
        vMeth();
        long meth_res = i3 + l + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(short s, int i4) {

        int i5=12, i6=8, i7=-56386;
        float f1=117.764F;

        i4 <<= (int)(s * (Test.instanceCount++));
        s -= (short)(--Test.iFld);
        lMeth(i4, Test.instanceCount);
        for (i5 = 18; i5 < 357; i5++) {
            Test.bFld = true;
            Test.iFld ^= (int)Test.instanceCount;
            Test.iFld >>>= Test.byFld;
            i4 = (int)-2216759953L;
            i6 += i5;
            i6 += (i5 | (long)f1);
        }
        for (long l1 : Test.lArrFld) {
            Test.bFld = Test.bFld;
            i4 = s;
            Test.iFld = Test.iFld;
            i7 |= -8;
        }
        long meth_res = s + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=16448, i1=-36082, i2=-4025, i8=-59, i9=48016, i10=5262;
        short s1=12844;
        long l2=455523365L, l3=5L, lArr[]=new long[N];
        float f2=0.262F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.847F);
        FuzzerUtils.init(lArr, 56L);

        fArr[(Test.iFld >>> 1) % N] += (float)((dFld--) - Test.iFld);
        for (i = 3; i < 301; i += 3) {
            i2 = 1;
            while (++i2 < 253) {
                Test.dArrFld[i] = lMeth(-65025 - (Test.byFld ^ -208), Long.reverseBytes(++lArr[i]));
                Test.iFld = (int)((Math.min(i, i) + (i - i)) * (fMeth(s1, i1) + -241));
                i1 += (i2 * i2);
                s1 += (short)(64401 + (i2 * i2));
                for (l2 = i; l2 < 1; ++l2) {
                    Test.lArrFld[i] = (long)dFld;
                    i1 = i1;
                    i1 += (int)(l2 + f2);
                    i8 /= (int)(i2 | 1);
                    Test.iFld = (int)l2;
                }
                dFld += i1;
                Test.iFld >>= i8;
            }
            for (l3 = 14; 253 > l3; ++l3) {
                Test.iFld += (int)(((l3 * i9) + i1) - i8);
                Test.instanceCount = i8;
                Test.instanceCount += l3;
                f2 %= 90.383F;
                try {
                    i9 = (i % -237);
                    Test.iFld = (-183 % i8);
                    i9 = (-10650 / i9);
                } catch (ArithmeticException a_e) {}
                i8 = (int)l2;
                Test.instanceCount -= i;
                i1 += (int)(l3 + Test.instanceCount);
                iArrFld[i] -= i1;
            }
            i10 = 1;
            do {
                iArrFld[i] = s1;
                f2 *= (float)55.64913;
                i9 |= (int)l3;
                Test.iFld += (int)f2;
            } while (++i10 < 253);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest fMeth
//DEBUG  vMeth ->  vMeth lMeth mainTest fMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
