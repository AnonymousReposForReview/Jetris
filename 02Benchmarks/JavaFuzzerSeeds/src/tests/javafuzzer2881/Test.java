package tests.javafuzzer2881;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:07:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-90L;
    public static double dFld=1.120361;
    public static float fFld=-83.376F;
    public static int iFld=-47647;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -48613);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i5, short s1) {

        int i6=-232, i7=-99, i8=-15478, i9=-141, i10=11;
        float f2=1.942F;

        for (i6 = 10; 393 > i6; i6++) {
            i5 += i6;
            i7 += (((i6 * i7) + f2) - Test.instanceCount);
            Test.instanceCount += i6;
            f2 += i5;
            i5 ^= i6;
            i8 = 1;
            while (++i8 < 4) {
                for (i9 = i6; i9 < 1; i9++) {
                    f2 += i9;
                    i5 = (int)Test.instanceCount;
                    i10 *= i9;
                    i10 = i7;
                    i10 = i8;
                    try {
                        Test.iArrFld[i9 - 1] = (8810 % i10);
                        i10 = (-34623 / i7);
                        Test.iArrFld[i8] = (Test.iArrFld[i9] / -158);
                    } catch (ArithmeticException a_e) {}
                }
                i10 *= (int)Test.dFld;
            }
        }
        long meth_res = i5 + s1 + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        short s2=-12610;
        int i11=50720, i12=149, i13=-7775, i14=11, i15=-32, i16=0, i17=185;
        double dArr[]=new double[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(dArr, -50.86766);
        FuzzerUtils.init(byArr, (byte)-68);

        dArr[(12 >>> 1) % N] *= dMeth(i4, s2);
        Test.instanceCount = -1372;
        i4 += (int)Test.fFld;
        for (i11 = 12; 337 > i11; ++i11) {
            byArr[i11] = byArr[i11 - 1];
            for (i13 = 1; 5 > i13; i13++) {
                i14 >>= i11;
                for (i15 = 1; i15 < 2; ++i15) {
                    switch ((i13 % 5) + 2) {
                    case 2:
                        Test.fFld = i4;
                        Test.instanceCount = (long)Test.dFld;
                        try {
                            i17 = (i17 / i4);
                            i17 = (i15 % 1383069921);
                            i4 = (Test.iArrFld[i11 - 1] % 152);
                        } catch (ArithmeticException a_e) {}
                    case 3:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 4:
                    case 5:
                        i3 = (int)Test.instanceCount;
                        i17 = (int)1.35F;
                        break;
                    case 6:
                        i3 = i15;
                    default:
                        i17 = (int)72.9841;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i4 + s2 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(float f1) {


        vMeth(18722, Test.iFld);
        Test.iFld = (int)Test.instanceCount;
        vSmallMeth_check_sum += Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i=15514, i1=-247, i2=-79, i18=-12994, i19=32344, i20=7, i21=-179, i22=3;
        short s=19771;
        float f=-2.714F, fArr[]=new float[N];
        boolean b=false;
        byte by=22;

        FuzzerUtils.init(fArr, 0.35F);

        Test.instanceCount = (long)((i - s) - ((i - f) - Test.iArrFld[(-13 >>> 1) % N]));
        switch ((((i + i) >>> 1) % 1) + 119) {
        case 119:
            for (i1 = 11; 276 > i1; ++i1) {
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.fFld);
                i2 -= i1;
                i18 = 1;
                while (++i18 < 95) {
                    for (i19 = 1; 1 > i19; ++i19) {
                        i = (int)Test.dFld;
                        if (b) continue;
                        Test.iArrFld[i1 + 1] = i;
                    }
                    by += (byte)i2;
                    Test.instanceCount = i1;
                    Test.iFld -= (int)Test.instanceCount;
                    i += (i18 | i20);
                    i -= 90;
                    if (b) {
                        for (i21 = 1; i21 < 1; i21++) {
                            fArr[i21] *= f;
                            Test.iFld >>= (int)Test.instanceCount;
                            if (b) break;
                            i = i1;
                            Test.iArrFld[i18 - 1] = i21;
                            switch (((-42761 >>> 1) % 3) + 103) {
                            case 103:
                                Test.iArrFld[i1] += i2;
                                i20 ^= 9;
                                i += i20;
                                b = b;
                                break;
                            case 104:
                                fArr = FuzzerUtils.float1array(N, (float)1.1013F);
                                break;
                            case 105:
                                Test.instanceCount += i21;
                                Test.instanceCount *= -225;
                                break;
                            }
                        }
                    } else {
                        Test.dFld -= -2.840F;
                    }
                }
            }
            break;
        default:
            Test.iArrFld[(Test.iFld >>> 1) % N] += i22;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
