package tests.javafuzzer1092;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:25:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=165L;
    public int iFld=-23384;
    public int iFld1=-2731;
    public byte byFld=-12;
    public static short sFld=-14880;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13549);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public float fMeth(long l, double d1) {

        int i6=-248, i7=-128, i8=-9, i9=-192, i10=-57995;
        short s=1038;

        iFld1 <<= iFld1;
        iFld = (int)Test.instanceCount;
        for (i6 = 3; i6 < 254; i6++) {
            Test.iArrFld[i6 + 1] *= -1;
            i7 += (int)-2.504F;
        }
        for (i8 = 2; i8 < 194; i8++) {
            i7 = i8;
            Test.instanceCount += (i8 * i8);
            i10 = 1;
            do {
                d1 += -64643L;
                s = (short)i6;
                iFld1 = -228;
                Test.iArrFld[i10 + 1] = 7;
                lArrFld[i10] = i9;
            } while (++i10 < 8);
            dArrFld[i8 - 1] = i6;
        }
        long meth_res = l + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + s;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth1(int i1, int i2, int i3) {

        float f3=0.751F, f4=-59.531F;
        int i4=28153, i5=142, i11=37679, i12=11;
        double d2=0.124267;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-19757);

        iFld1 >>= (int)((i2 * (--i2)) + ((i1 - i2) + (-62604 * (lArrFld[(iFld >>> 1) % N]--))));
        f3 = 1;
        while (++f3 < 167) {
            for (i4 = 9; 1 < i4; i4 -= 3) {
                iFld1 += (i4 * i4);
                i2 = i5;
                i3 += (int)fMeth(-145L, d2);
                Test.instanceCount += i4;
                if (i1 != 0) {
                    vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f3) + i4 + i5 + Double.doubleToLongBits(d2)
                        + i11 + i12 + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(sArr);
                    return;
                }
                Test.instanceCount -= 7;
            }
            for (i11 = 1; i11 < 9; i11++) {
                iFld1 = (int)Test.instanceCount;
                Test.iArrFld[i11 + 1] += 12;
                sArr = sArr;
                f4 += i3;
                i12 += (i11 | Test.instanceCount);
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f3) + i4 + i5 + Double.doubleToLongBits(d2) + i11 + i12
            + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(float f1, int i, float f2) {

        short s1=-32173;

        vMeth1(23554, iFld, iFld);
        iFld1 = iFld1;
        s1 *= (short)Test.instanceCount;
        vMeth_check_sum += Float.floatToIntBits(f1) + i + Float.floatToIntBits(f2) + s1;
    }

    public void mainTest(String[] strArr1) {

        float f=-58.50F, f5=-2.206F, fArr[]=new float[N];
        double d=-1.3300, dArr[][]=new double[N][N];
        int i13=9, i14=-23815, i15=11, i16=-5, i17=10, i18=4, i19=0;

        FuzzerUtils.init(fArr, 4.953F);
        FuzzerUtils.init(dArr, 0.79316);

        fArr[(iFld >>> 1) % N] -= ((--Test.iArrFld[(iFld >>> 1) % N]) / (((long)((iFld + f) * iFld)) | 1));
        d *= ((--iFld) - (dArr[(iFld >>> 1) % N][(iFld >>> 1) % N] * (iFld--)));
        Test.instanceCount = iFld1;
        vMeth(f, iFld, f);
        Test.iArrFld[(iFld1 >>> 1) % N] <<= (int)-202L;
        iFld += (int)f;
        for (i13 = 7; i13 < 278; ++i13) {
            for (f5 = 1; f5 < 93; f5++) {
                Test.iArrFld[(int)(f5)] -= i14;
                lArrFld = lArrFld;
            }
            iFld -= (int)f5;
            i16 = 1;
            do {
                fArr[i16 + 1] -= iFld1;
                Test.iArrFld[i13 + 1] -= -20833;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-53004);
                byFld = (byte)7923918490476998890L;
                Test.sFld = (short)iFld;
                for (i17 = 1; i17 < 1; ++i17) {
                    i14 = (int)Test.instanceCount;
                    try {
                        iFld1 = (1518374414 % i17);
                        iFld1 = (Test.iArrFld[i17] % 212);
                        iFld1 = (i16 / 17);
                    } catch (ArithmeticException a_e) {}
                    try {
                        i14 = (Test.iArrFld[i17] % -75);
                        Test.iArrFld[i17] = (55 % Test.iArrFld[i13]);
                        iFld = (-17 % Test.iArrFld[i13 + 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount *= 249;
                    i18 *= i17;
                    i14 = 43152;
                }
                i19 = 1;
                do {
                    i18 = i19;
                    switch (((i16 % 7) * 5) + 123) {
                    case 145:
                        i15 = (int)Test.instanceCount;
                        i15 = (int)d;
                        break;
                    case 135:
                        byArrFld[(i13 >>> 1) % N] &= (byte)i14;
                        break;
                    case 138:
                        Test.instanceCount |= Test.instanceCount;
                        break;
                    case 125:
                        if (Test.bFld) break;
                    case 152:
                        iFld += (int)Test.instanceCount;
                        break;
                    case 140:
                        d = Test.instanceCount;
                    case 134:
                        if (Test.bFld) continue;
                    }
                } while (++i19 < 1);
            } while (++i16 < 93);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
