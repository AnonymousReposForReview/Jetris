package tests.javafuzzer711;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:14:16 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4041126129597255823L;
    public static int iFld=-35051;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -63754);
        FuzzerUtils.init(Test.dArrFld, -110.90125);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, int i5) {

        int i6=1, i7=64562, i8=-4, i9=59397;
        double d3=-59.79473;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2860649216L);

        for (i6 = 186; i6 > 8; --i6) {
            i5 = i7;
            Test.iFld = i6;
            for (i8 = 9; i8 > 1; i8--) {
                byte by=109;
                i9 += (i8 + Test.instanceCount);
                Test.iArrFld[i8 - 1] >>= (int)l1;
                Test.iArrFld[i6] *= i9;
                Test.iFld >>= (int)241L;
                switch (((137 >>> 1) % 10) + 85) {
                case 85:
                    d3 *= Test.iFld;
                    if (i6 != 0) {
                    }
                    break;
                case 86:
                    i7 += i8;
                    if (Test.bFld) continue;
                    lArr[(79 >>> 1) % N] >>= i8;
                    i7 += (i8 - Test.iFld);
                    break;
                case 87:
                    i7 = i6;
                    break;
                case 88:
                case 89:
                    i7 += Test.iFld;
                case 90:
                    Test.instanceCount *= i5;
                    break;
                case 91:
                    by += (byte)i8;
                case 92:
                    if (Test.bFld) break;
                    break;
                case 93:
                    l1 = i5;
                    break;
                case 94:
                    l1 += l1;
                }
            }
        }
        long meth_res = l1 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i3, long l, double d2) {

        int i4=-2566, i10=-5, i11=-138, i12=-13482, i13=-228;
        float f1=1.479F;

        i4 = 1;
        do {
            Test.instanceCount -= ((Test.iFld + (Test.iFld - i4)) - Test.iFld);
        } while (++i4 < 195);
        i3 = (int)((--i3) * ((i4 + i4) * fMeth(Test.instanceCount, i4)));
        Test.iArrFld = FuzzerUtils.int1array(N, (int)37478);
        for (i10 = 3; i10 < 197; ++i10) {
            for (i12 = 1; i12 < 8; i12++) {
                Test.iFld += (((i12 * f1) + l) - f1);
                Test.iArrFld[i10 + 1] -= (int)d2;
                i11 = i3;
                i3 *= i4;
            }
            f1 += i10;
        }
        i11 = (int)Test.instanceCount;
        Test.iArrFld[(i3 >>> 1) % N] <<= i11;
        i13 = (int)f1;
        i13 = (int)8350925114423247105L;
        vMeth_check_sum += i3 + l + Double.doubleToLongBits(d2) + i4 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1);
    }

    public static long lMeth(float f) {

        int i=-11, i1=-15708, i2=-1, iArr[]=new int[N];
        double d=103.15592, d1=-5.62180, dArr[]=new double[N];
        short s=-26441;

        FuzzerUtils.init(iArr, 74);
        FuzzerUtils.init(dArr, 0.14042);

        Test.iFld *= iArr[(Test.iFld >>> 1) % N];
        i = 1;
        do {
            f *= -26925;
            Test.iFld = Math.max(Test.iFld, (i + i) * 118);
            for (i1 = 1; i1 < 6; i1++) {
                d = 1;
                do {
                    d1 += Test.iFld;
                    vMeth(i2, 125L, d);
                    Test.iFld += (int)(((d * i2) + f) - f);
                    i2 += (int)Test.instanceCount;
                    s -= (short)f;
                } while (++d < 2);
                Test.iFld = i;
                try {
                    Test.iArrFld[i + 1] = (i1 / 41575);
                    i2 = (iArr[i1] / 166);
                    Test.iFld = (-1210792762 / i1);
                } catch (ArithmeticException a_e) {}
                Test.iFld <<= (int)Test.instanceCount;
                dArr[i1 + 1] = 13971;
            }
        } while (++i < 254);
        long meth_res = Float.floatToIntBits(f) + i + i1 + i2 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=2.667F;
        int i14=43, i15=8229, i16=-58770, i17=27896, i18=-3, i19=3743, i20=14, i21=7504;
        byte by1=78;

        Test.iFld -= (int)((++Test.instanceCount) - (lMeth(f2) + Test.iFld));
        Test.iFld = 14;
        for (i14 = 8; 193 > i14; i14 += 3) {
            Test.iFld -= i14;
            Test.iFld += (((i14 * i15) + i15) - Test.instanceCount);
            if (Test.bFld) break;
        }
        Test.iFld = -1;
        f2 += i14;
        i16 = 1;
        while (++i16 < 299) {
            Test.iArrFld[i16 - 1] <<= (int)Test.instanceCount;
            Test.instanceCount += (((i16 * Test.instanceCount) + i15) - i15);
            Test.iArrFld[i16] = (int)Test.instanceCount;
            i15 -= (int)2.182F;
            for (i17 = 5; i17 < 84; ++i17) {
                i18 *= (int)Test.instanceCount;
            }
            i15 += (i16 * i16);
            i19 = 1;
            while (++i19 < 84) {
                Test.instanceCount += (((i19 * Test.iFld) + Test.instanceCount) - Test.iFld);
                f2 += i19;
                i18 -= by1;
                i15 = i14;
                i18 = (int)f2;
                for (i20 = i16; i20 < 1; ++i20) {
                    f2 += 96;
                    Test.instanceCount *= 229;
                    Test.instanceCount *= Test.iFld;
                    i21 = i20;
                    Test.dArrFld[i20] *= i21;
                    i18 += (int)(-1.51F + (i20 * i20));
                    Test.instanceCount += i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
