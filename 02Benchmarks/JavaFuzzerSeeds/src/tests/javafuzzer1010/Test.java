package tests.javafuzzer1010;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:49:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2526200342L;
    public static volatile float fFld=89.881F;
    public static byte byFld=-36;
    public static long lFld=2L;
    public static boolean bFld=false;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.110F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, int i3) {

        int i4=33746, i5=-242, i6=-5403, i7=-63371, i8=-209, i9=158, i10=-92, i11=-254, i12=9055, i13=-49098, i14=8;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);

        i3 <<= 138;
        i4 = 1;
        while (++i4 < 226) {
            Test.instanceCount += (i4 * i4);
            Test.instanceCount <<= i4;
            for (i5 = 7; i5 > 1; i5--) {
                lArr = lArr;
                i6 += i5;
                if (b) break;
            }
            i6 += i4;
        }
        for (i7 = 193; i7 > 3; --i7) {
            for (i9 = 1; i9 < 8; ++i9) {
                for (i11 = 1; i11 < 2; ++i11) {
                    i8 = i4;
                    Test.instanceCount >>= i13;
                    i14 = i3;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        short s=-9620;
        boolean b1=true;
        int i15=-49447, i16=48022, i17=-37034, i18=13481, i19=-249, i20=-9, iArr[]=new int[N];
        double d=2.101209, d1=0.20385;

        FuzzerUtils.init(iArr, 52427);

        s += (short)(iMeth(b1, i15) ^ i15);
        for (i16 = 8; i16 < 297; ++i16) {
            d = 1;
            while (++d < 6) {
                switch ((i16 % 6) + 29) {
                case 29:
                    i17 += (int)(d - i17);
                    break;
                case 30:
                    iArr[(int)(d - 1)] -= i16;
                    for (i18 = 1; i18 < 1; i18++) {
                        Test.fFld = i19;
                        try {
                            i15 = (i19 / i16);
                            i15 = (i18 % i17);
                            i19 = (i15 / -63981);
                        } catch (ArithmeticException a_e) {}
                        if (b1) break;
                        switch (((i18 % 2) * 5) + 50) {
                        case 54:
                            i17 -= -12;
                            break;
                        case 58:
                            i15 |= i20;
                            iArr = iArr;
                            Test.byFld -= (byte)9;
                            break;
                        default:
                            if (true) continue;
                        }
                    }
                case 31:
                    Test.instanceCount += Test.instanceCount;
                    break;
                case 32:
                    d1 = i18;
                    break;
                case 33:
                    i15 += (int)((long)d | Test.instanceCount);
                    break;
                case 34:
                    Test.fFld += (float)(d + Test.instanceCount);
                    break;
                default:
                    Test.instanceCount += -1553574682L;
                }
            }
        }
        vMeth1_check_sum += s + (b1 ? 1 : 0) + i15 + i16 + i17 + Double.doubleToLongBits(d) + i18 + i19 + i20 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i) {

        int i1=45938, i2=-59, i21=-11, i22=247, i23=0, i24=19299, iArr1[]=new int[N];
        long l=-10L;
        double d2=-50.126363, dArr[]=new double[N];
        short s1=-11462;

        FuzzerUtils.init(iArr1, -233);
        FuzzerUtils.init(dArr, -2.65057);

        for (i1 = 1; i1 < 127; ++i1) {
            i2 += (i1 * i1);
            i = (i2++);
            switch ((i1 % 6) + 72) {
            case 72:
                vMeth1();
                l >>= i;
            case 73:
                iArr1[i1 + 1] += (int)Test.fFld;
                break;
            case 74:
                for (i21 = 1; i21 < 12; i21++) {
                    d2 = s1;
                    switch (((i21 % 5) * 5) + 99) {
                    case 100:
                        for (i23 = 1; i23 < 2; ++i23) {
                            iArr1[i23] = (int)l;
                            if (i1 != 0) {
                                vMeth_check_sum += i + i1 + i2 + l + i21 + i22 + Double.doubleToLongBits(d2) + s1 + i23
                                    + i24 + FuzzerUtils.checkSum(iArr1) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                return;
                            }
                            i2 += 54159;
                            i = i1;
                        }
                        break;
                    case 107:
                        i2 += (int)(1566409933L + (i21 * i21));
                        break;
                    case 101:
                        d2 -= 107.746F;
                    case 105:
                        try {
                            iArr1[i1 + 1] = (i24 / 383);
                            iArr1[i1] = (-204 % i);
                            iArr1[i1 - 1] = (i2 % 54828);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 106:
                        Test.byFld += (byte)(i21 ^ (long)Test.fFld);
                    default:
                        i24 = 26240;
                    }
                }
                break;
            case 75:
                dArr[i1 - 1] *= i1;
                break;
            case 76:
                Test.byFld += (byte)i2;
                break;
            case 77:
                iArr1[i1 + 1] = (int)3084239541L;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + l + i21 + i22 + Double.doubleToLongBits(d2) + s1 + i23 + i24 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i25=0, i26=54669, i27=208, i28=24035, i29=-23, i30=0, i31=-630, i32=19919, i33=-46501, iArr2[]=new int[N];
        long l1=-11143L, lArr1[]=new long[N];
        short sArr[]=new short[N];
        byte byArr[]=new byte[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(sArr, (short)243);
        FuzzerUtils.init(byArr, (byte)106);
        FuzzerUtils.init(iArr2, 10);
        FuzzerUtils.init(lArr1, 159L);
        FuzzerUtils.init(dArr1, -71.79451);

        vMeth(i25);
        for (short s2 : sArr) {
            i25 = i25;
            Test.instanceCount <<= 0;
            for (i26 = 2; i26 < 63; i26++) {
                byArr[i26] += (byte)i27;
                i25 /= (int)485801107L;
                for (l1 = 1; l1 < 2; ++l1) {
                    iArr2[(int)(l1 + 1)] <<= 33;
                    i25 += (int)Test.lFld;
                    i25 = (int)Test.lFld;
                    i28 -= -197;
                    sArr[i26] = (short)i28;
                    Test.fArrFld[i26] = i27;
                }
                for (i29 = i26; i29 < 2; i29++) {
                    lArr1[i26] -= Test.lFld;
                    i27 -= i26;
                    Test.byFld <<= (byte)i28;
                    i28 += i29;
                    Test.fFld = i30;
                    i30 >>= i27;
                }
                if (Test.bFld) break;
                i30 *= -1;
                for (i31 = 1; i31 < 2; i31++) {
                    i25 = i25;
                    i28 = i28;
                    Test.bFld = false;
                }
                if (Test.bFld) break;
                dArr1[(i30 >>> 1) % N] = i27;
            }
            i33 = (int)-1503629216L;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
