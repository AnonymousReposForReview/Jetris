package tests.javafuzzer2749;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:48:02 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9L;
    public static float fFld=-67.681F;
    public static int iFld=11;
    public static boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 47.783F);
        FuzzerUtils.init(Test.dArrFld, 0.41779);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2) {

        byte by=-54;
        float f1=0.576F, fArr[][]=new float[N][N];
        int i3=4, i4=-23, i5=183, i6=13, i7=-8232, iArr[]=new int[N];
        boolean b=true;
        double d=1.109041;
        short s1=8772;

        FuzzerUtils.init(fArr, 0.517F);
        FuzzerUtils.init(iArr, -7199);

        Test.instanceCount += by;
        f1 -= f1;
        i2 &= i2;
        try {
            i3 = 1;
            while (++i3 < 277) {
                fArr[i3 - 1][i3] = Test.instanceCount;
                by *= (byte)62;
                i2 -= (int)Test.instanceCount;
                for (i4 = 1; i4 < 6; i4++) {
                    if (b) break;
                    i5 = i3;
                    for (i6 = 1; i6 < 2; ++i6) {
                        d -= s1;
                        iArr = iArr;
                        if (i7 != 0) {
                        }
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc2) {
            i2 >>= i2;
        }
        long meth_res = i2 + by + Float.floatToIntBits(f1) + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 +
            Double.doubleToLongBits(d) + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(float f, int i1) {

        long l=7140606070889607079L;

        Test.instanceCount >>= (((i1 + Test.instanceCount) + (i1 >> l)) - iMeth(i1));
        Test.instanceCount ^= -9;
        long meth_res = Float.floatToIntBits(f) + i1 + l;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i) {

        short s=16033;
        int i8=-35710, i9=13, i10=167, i11=53162, i12=60091;
        boolean b1=true;
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(fArr1, 0.756F);

        s -= (short)fMeth(Test.fFld, i);
        try {
            if (b1) {
                for (i8 = 7; i8 < 174; ++i8) {
                    Test.fFld -= i9;
                    iArrFld = iArrFld;
                    i9 += (i8 * i8);
                    i9 -= 29318;
                    i -= -6;
                    iArrFld = iArrFld;
                    lArr[i8] = Test.instanceCount;
                    for (i10 = i8; i10 < 9; i10++) {
                        if (false) continue;
                        i >>>= 146;
                        lArr[i8 - 1] = 199;
                    }
                }
            } else {
                fArr1[(i11 >>> 1) % N] = i12;
            }
        }
        catch (NullPointerException exc3) {
            Test.instanceCount &= i10;
        }
        finally {
            iArrFld = iArrFld;
        }
        vMeth_check_sum += i + s + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i13=20, i14=-44, i15=2, i16=0, i17=-123, i18=-1, i19=-27271;
        byte by1=54;
        long l1=7L;
        double d1=-2.88339;

        vMeth(i13);
        i13 = (int)Test.instanceCount;
        i13 -= (int)Test.instanceCount;
        Test.instanceCount >>= i13;
        for (i14 = 5; i14 < 214; i14++) {
            i13 += i14;
            i15 <<= i15;
            i13 -= i13;
            Test.fArrFld[i14 + 1] = by1;
            Test.fFld += 59310;
            i13 += (i14 * Test.iFld);
            Test.iFld -= (int)Test.fFld;
            for (l1 = 120; l1 > 7; l1 -= 3) {
                Test.instanceCount += (((l1 * i14) + i14) - i15);
                i16 -= i13;
                for (i17 = 1; i17 < 4; ++i17) {
                    if (Test.bFld) continue;
                    i13 &= i14;
                    iArrFld[i17] *= -15;
                    i19 -= (int)-33.54325;
                    i16 = i14;
                    iArrFld[i17] -= (int)l1;
                    iArrFld[i14 + 1] = (int)l1;
                    d1 /= (Test.iFld | 1);
                }
                i16 += (int)-1364715645L;
                i16 = (int)Test.instanceCount;
            }
            d1 = i19;
        }
        i13 -= (int)l1;
        Test.dArrFld[(i19 >>> 1) % N] = Test.instanceCount;
        Test.iFld = i14;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
