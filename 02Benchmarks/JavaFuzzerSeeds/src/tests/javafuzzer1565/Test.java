package tests.javafuzzer1565;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:59:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=25L;
    public double dFld=2.115275;
    public static float fFld=49.481F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -40877);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, double d1, int i9) {

        int i10=-74, i11=61993, i12=23410, i13=-51, i14=-19;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 19.475F);

        i9 = i9;
        i9 <<= -7407;
        i9 += i9;
        i9 += i9;
        i9 -= i9;
        fArr[(9 >>> 1) % N] = i9;
        Test.iArrFld[(i9 >>> 1) % N] += 124;
        for (i10 = 1; i10 < 183; ++i10) {
            i9 = 226;
            i12 = 1;
            do {
                Test.fFld -= 3;
            } while (++i12 < 9);
            for (i13 = 9; i13 > i10; --i13) {
                i14 += (i13 * i13);
                i11 %= (int)(i10 | 1);
                i11 = (int)-5L;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i8, byte by) {

        boolean b=true;
        double d2=1.30890;
        int i15=-75, i16=-209, i17=2, i18=117, i19=77;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 49486L);

        b = (Test.instanceCount != (fMeth(Test.instanceCount, d2, i8) * i8));
        Test.instanceCount += (long)d2;
        for (i15 = 4; 160 > i15; i15++) {
            i8 = i15;
            lArr1[i15 + 1][i15 - 1] = i8;
            for (i17 = 1; 10 > i17; ++i17) {
                Test.iArrFld[i17 + 1] = i18;
                i18 *= i8;
                Test.iArrFld[i15 + 1] = (int)Test.fFld;
                i19 = 1;
                do {
                    short s2=-1133;
                    lArr1[i15][i17 + 1] -= Test.instanceCount;
                    Test.instanceCount >>>= -41135;
                    i18 *= s2;
                    i8 = (int)91.825F;
                    i8 += (i19 * i19);
                } while (++i19 < 2);
            }
        }
        long meth_res = i8 + by + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(short s1) {

        int i5=102, i6=30044, i7=-137, iArr[]=new int[N];
        double d=2.7819;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(iArr, 41);
        FuzzerUtils.init(fArr1, -94.533F);

        for (int i4 : iArr) {
            if (Test.bFld) {
                i5 = 1;
                while (++i5 < 4) {
                    i4 *= (int)(((Test.instanceCount * i5) + (i4 + i4)) * iArr[i5 + 1]);
                    for (i6 = 1; i6 < 1; i6++) {
                        float f=15.714F;
                        boolean b1=false;
                        i7 = (int)(Math.min((int)(f + Test.instanceCount), (int)(i4 & Test.instanceCount)) * 13473L);
                        i7 <<= (--i7);
                        iArr[i5] *= (int)(-(Math.sqrt(d) + (-i6)));
                        i4 = iMeth(i4, (byte)(-14));
                        fArr1 = fArr1;
                        iArr[i5 - 1] = 12;
                        b1 = b1;
                        iArr[i5 - 1] >>>= i7;
                        Test.iArrFld[i5] -= 25875;
                    }
                    s1 = (short)Test.instanceCount;
                }
            } else {
                d = i6;
            }
        }
        long meth_res = s1 + i5 + i6 + i7 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=205, i1=-10, i3=-35148, i20=2, i21=-11, i22=29689, i23=144, i24=-59311, i25=-7;
        long lArr[]=new long[N];
        float fArr2[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -392982336L);
        FuzzerUtils.init(fArr2, -1.607F);
        FuzzerUtils.init(byArr, (byte)-42);

        for (i = 3; i < 140; i++) {
            short s=24739;
            int i2=2;
            switch ((((((int)(Test.instanceCount + i)) >>> 1) % 4) * 5) + 50) {
            case 66:
                dFld = (((-235 + Math.abs(i)) - (s + i2)) * ((Test.instanceCount++) - (i2 * -3477454808L)));
                i3 = 1;
                do {
                    i2 += (int)(lArr[i - 1]++);
                    Test.instanceCount = (long)dMeth((short)(19853));
                    for (i20 = 1; i20 < 1; ++i20) {
                        Test.fFld = Test.fFld;
                        i21 *= (int)Test.instanceCount;
                        i21 = i20;
                        i2 *= (int)Test.fFld;
                        fArr2 = fArr2;
                        i21 -= i2;
                        Test.fFld += i20;
                        i21 <<= i21;
                        Test.fFld += (i20 * i20);
                        i2 += (((i20 * i21) + i2) - Test.fFld);
                    }
                } while (++i3 < 183);
                break;
            case 55:
                i22 = 1;
                do {
                    i1 += (i22 | i21);
                    Test.instanceCount += (i22 | i21);
                    byArr[i22 - 1] >>= (byte)i3;
                    i1 = (int)294511571L;
                } while (++i22 < 183);
                i23 = 1;
                do {
                    Test.instanceCount += s;
                    Test.iArrFld[i23 + 1] = s;
                    i1 += i23;
                    lArr[i - 1] -= -5;
                    for (i24 = 1; i24 < 1; i24 += 2) {
                        Test.instanceCount -= 2776545875L;
                        Test.instanceCount += (i24 | i1);
                    }
                } while (++i23 < 183);
                break;
            case 58:
                Test.fFld += 57543;
                break;
            case 64:
                i25 += (i + Test.fFld);
                break;
            default:
                i1 = i1;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
