package tests.javafuzzer2377;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:47:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static volatile int iFld=-211;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4076L);
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2, int i1) {

        int i2=0, i3=-35917, i4=8, i5=93, i6=-39069, iArr1[][]=new int[N][N];
        long l=-7L;

        FuzzerUtils.init(iArr1, -23025);

        Test.instanceCount += i2;
        for (i3 = 7; 322 > i3; i3++) {
            i4 = i2;
            switch (((i3 % 3) * 5) + 21) {
            case 31:
                i5 = 1;
                do {
                    i1 = (int)Test.instanceCount;
                    i2 -= (int)f2;
                    i4 += i5;
                    Test.instanceCount = 157;
                    i4 *= (int)l;
                    l = Test.instanceCount;
                    Test.instanceCount += (i5 * i3);
                } while (++i5 < 5);
                i6 = 1;
                while (++i6 < 5) {
                    i4 -= i6;
                    iArr1[i6 + 1][i3] = i5;
                }
                break;
            case 22:
                Test.iFld = Test.iFld;
                break;
            case 27:
                iArr1[i3 - 1][i3] <<= 11782;
                break;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i1 + i2 + i3 + i4 + i5 + l + i6 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        float f3=1.465F;
        int i7=-126, i8=-24258, i9=7, i10=-10, iArr2[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, -46922);
        FuzzerUtils.init(byArr, (byte)-71);

        vMeth1(f3, Test.iFld);
        i7 = 1;
        while (++i7 < 280) {
            Test.instanceCount >>= Test.instanceCount;
            Test.instanceCount += Test.instanceCount;
            Test.lArrFld[i7 + 1] = (long)f3;
            Test.iFld = Test.iFld;
            i8 = 6;
            do {
                Test.instanceCount += i7;
                Test.instanceCount = i7;
                iArr2[i7] = (int)3749411700L;
                byArr[(0 >>> 1) % N] = (byte)23357;
            } while (--i8 > 0);
            Test.iFld += (((i7 * Test.iFld) + i7) - i7);
            for (i9 = 1; i9 < 6; ++i9) {
                try {
                    i10 = (i7 % iArr2[i9]);
                    iArr2[i9 - 1] = (i7 / 23);
                    iArr2[i7 + 1] = (-47 / iArr2[i7 - 1]);
                } catch (ArithmeticException a_e) {}
            }
            iArr2[i7] *= i7;
        }
        vMeth_check_sum += Float.floatToIntBits(f3) + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(double d, float f1) {

        int i11=14, i12=13, i13=-12, i14=-86;
        boolean b=false;
        byte by=6;

        vMeth();
        f1 *= Test.iFld;
        for (i11 = 3; i11 < 218; ++i11) {
            f1 += i11;
            d += f1;
            switch ((i11 % 3) + 87) {
            case 87:
                Test.iFld >>= Test.iFld;
                if (b) break;
                break;
            case 88:
                Test.iFld -= i11;
                d -= f1;
                by += (byte)(i11 * i11);
                Test.iArrFld[i11] -= i12;
                break;
            case 89:
                for (i13 = 1; i13 < 7; ++i13) {
                    Test.iArrFld[i11 - 1] = -171;
                    if (i13 != 0) {
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i11 + i12 + (b ? 1 : 0) + by + i13 +
            i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-43, i15=46128, i16=71, i17=-14, i18=34439, iArr[]=new int[N], iArr3[][]=new int[N][N];
        float f=72.1003F;
        double d1=-2.129972;
        long l1=13L, l2=-760743308649105028L;
        short s=11374;

        FuzzerUtils.init(iArr, 29964);
        FuzzerUtils.init(iArr3, 140);

        i = 396;
        do {
            byte by1=-57;
            f += i;
            iArr[i] = (iMeth(d1, 0.441F) + by1);
            Test.iFld *= (int)6L;
            Test.instanceCount = Test.instanceCount;
            Test.iFld %= (int)(Test.iFld | 1);
            Test.iFld += (i ^ i);
            try {
                Test.iFld = (-6571 / Test.iFld);
                Test.iFld = (Test.iFld / -1914778086);
                Test.iFld = (-1312763051 % i);
            } catch (ArithmeticException a_e) {}
            iArr3 = iArr3;
            for (l1 = 2; 64 > l1; ++l1) {
                d1 *= l1;
                switch ((i % 9) + 36) {
                case 36:
                    Test.iFld = -49;
                    break;
                case 37:
                    Test.instanceCount += (l1 - Test.iFld);
                    s += (short)-13027;
                    break;
                case 38:
                    for (l2 = 1; l2 < 2; ++l2) {
                        Test.instanceCount -= i15;
                        i16 &= (int)l1;
                    }
                    break;
                case 39:
                    i16 += (int)(l1 * l1);
                    switch (((i % 6) * 5) + 70) {
                    case 72:
                        Test.iArrFld[i - 1] = i15;
                        break;
                    case 95:
                        Test.iFld >>= i;
                        switch ((int)((l1 % 1) + 118)) {
                        case 118:
                            iArr3[(int)(l1 + 1)][i] -= i16;
                            i15 = (int)l2;
                            break;
                        default:
                            iArr3[(int)(l1 + 1)][i + 1] = i16;
                            for (i17 = 1; i17 < 2; i17++) {
                                Test.instanceCount <<= -252;
                                if (Test.bFld) break;
                            }
                            i15 = Test.iFld;
                        }
                        break;
                    case 92:
                        Test.iArrFld[i] = (int)l1;
                        break;
                    case 96:
                        Test.instanceCount += (-42598 + (l1 * l1));
                        break;
                    case 90:
                        Test.iFld += (int)l1;
                    case 81:
                        Test.iFld += (int)(l1 * l1);
                        break;
                    }
                case 40:
                    Test.instanceCount <<= i16;
                    break;
                case 41:
                    Test.lArrFld = Test.lArrFld;
                case 42:
                    try {
                        i15 = (i / -34405);
                        i16 = (-52314 % i18);
                        i18 = (-103 % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 43:
                    i15 -= i;
                    break;
                case 44:
                    Test.iFld += (int)l1;
                    break;
                }
            }
        } while (--i > 0);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
