package tests.javafuzzer2396;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:05:42 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4L;
    public static int iFld=58006;
    public static float fFld=36.512F;
    public static volatile float fFld1=-1.896F;
    public static short sFld=10998;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 66.47F);
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.byArrFld, (byte)67);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i10, int i11, int i12) {

        boolean b=true;
        int i13=209, i14=9, i15=41408, i16=36, i17=-56258, i18=-9;
        double d1=2.117193;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 493L);
        FuzzerUtils.init(fArr, -77.228F);

        try {
            try {
                i10 -= 60978;
                if (b) {
                    if (b) {
                        i10 = i10;
                    }
                } else if (b) {
                    for (i13 = 4; 171 > i13; ++i13) {
                        lArr1[i13] += (long)d1;
                        for (i15 = 1; 9 > i15; i15++) {
                            i12 <<= i10;
                        }
                        Test.iArrFld[i13 - 1][i13 - 1] = 23165;
                        i16 = (int)Test.instanceCount;
                        for (i17 = 1; i17 < 9; i17++) {
                            lArr1[i13 - 1] >>= i12;
                            Test.instanceCount *= 0;
                        }
                    }
                } else {
                    d1 = i18;
                }
            }
            catch (UserDefinedExceptionTest exc3) {
                fArr = Test.fArrFld;
            }
        }
        catch (NegativeArraySizeException exc4) {
            b = b;
        }
        long meth_res = i10 + i11 + i12 + (b ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18
            + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i8=55628, i9=4, i19=-3736, i20=64, iArr[]=new int[N];
        byte by1=-4;
        double d2=2.99393;
        float f1=2.43F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -137);
        FuzzerUtils.init(sArr, (short)23177);

        for (i8 = 20; 343 > i8; i8++) {
            iArr[i8 + 1] = Integer.reverseBytes(iArr[i8] + by1);
            i9 += (int)(((-24909 - (-Math.max(i8, i8))) + Math.min(50618, i8)) + (fMeth(i8, i9, i9) + d2));
            i19 = 1;
            while (++i19 < 5) {
                i9 += (i19 * i19);
                Test.iArrFld[i19 - 1][i8] = i9;
                iArr[i19] -= (int)Test.instanceCount;
                f1 -= i9;
                if (i19 != 0) {
                }
                i9 += (((i19 * i8) + i19) - i9);
                i9 = (int)Test.instanceCount;
                sArr[i8 - 1] -= (short)Test.instanceCount;
                i20 -= (int)f1;
                if (i8 != 0) {
                }
            }
            f1 += (((i8 * i8) + by1) - Test.iFld);
        }
        long meth_res = i8 + i9 + by1 + Double.doubleToLongBits(d2) + i19 + Float.floatToIntBits(f1) + i20 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i3=240, i4=45379, i5=-14948, i6=-239, i7=-14;
        long l=215L, lArr[]=new long[N];
        short s=-25542;

        FuzzerUtils.init(lArr, -6819939197118044909L);

        for (i3 = 10; i3 < 287; ++i3) {
            i4 += (((i3 * i2) + i2) - Test.instanceCount);
            for (i5 = 1; 6 > i5; ++i5) {
                for (l = 1; l < 2; l++) {
                    float f=0.675F;
                    double d3=-2.100923;
                    i7 -= (int)((Math.max(l, l) * (-(-(i1 & i1)))) - (-63.88F - lArr[(int)(l)]));
                    Test.instanceCount += (((l * f) + i6) - i3);
                    Test.fArrFld[i5 - 1] += iMeth();
                    lArr[(int)(l - 1)] -= s;
                    d3 += -41.90743;
                    i7 = i3;
                }
                Test.instanceCount += (i5 - Test.fFld);
                Test.fFld %= (l | 1);
                i4 <<= i4;
                s += (short)i1;
            }
            Test.byArrFld[i3] -= (byte)0;
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + l + i7 + s + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=-1;
        int i=24, i21=17868, i22=-64, i23=23, i24=-11510, i25=-53506, i26=-17497, i27=14, i28=-13, i29=1263, i30=122;
        double d=2.39148, dArr[]=new double[N];
        boolean b1=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr, 82.102062);
        FuzzerUtils.init(lArr2, 1473179174L);

        by = (byte)i;
        i *= (int)((--d) - (Math.max(i, i) * i));
        vMeth(-64131, i);
        for (i21 = 11; i21 < 184; ++i21) {
            i22 += (i21 * i);
            i23 = 1;
            do {
                for (i24 = 1; i24 < 1; i24++) {
                    d *= 14738;
                    Test.instanceCount -= i23;
                    i22 *= 86;
                    Test.iFld = 11392;
                    i += i23;
                }
                dArr[i21] += Test.instanceCount;
                Test.fFld1 *= 0.973F;
                for (i26 = 1; i26 < 1; i26++) {
                    Test.instanceCount &= i23;
                    i27 <<= (int)Test.instanceCount;
                    d = Test.instanceCount;
                }
                for (i28 = 1; 1 > i28; i28++) {
                    Test.iFld = -7606;
                    Test.instanceCount += (7 + (i28 * i28));
                }
                i30 = 1;
                while (++i30 < 1) {
                    Test.sFld += (short)(-11293 + (i30 * i30));
                    lArr2[i30] ^= i21;
                    i29 = by;
                    lArr2[i21 - 1] += 11L;
                    Test.sFld += (short)(-27871 + (i30 * i30));
                    Test.iArrFld[i21 - 1][i30] = i23;
                    Test.instanceCount += (i30 - i);
                    b1 = b1;
                }
            } while (++i23 < 145);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
