package tests.javafuzzer2511;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:49:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8477140874249971872L;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2) {

        int i3=-9, i4=14, i5=151, i6=-24030, i7=-32217, i8=-32, i9=-13, i10=-6, iArr[]=new int[N];
        float f=-120.195F;

        FuzzerUtils.init(iArr, 7);

        for (i3 = 2; i3 < 352; ++i3) {
            i2 += (((i3 * f) + i4) - Test.instanceCount);
            Test.instanceCount += (((i3 * i5) + i4) - i4);
            Test.instanceCount = i2;
            switch (((i3 % 1) * 5) + 66) {
            case 67:
                for (i6 = 1; i6 < 5; i6 += 2) {
                    Test.instanceCount += (1123319420L + (i6 * i6));
                }
                Test.instanceCount += (i3 * i3);
                iArr = FuzzerUtils.int1array(N, (int)-9);
                i8 = 1;
                while (++i8 < 5) {
                    for (i9 = 1; i9 < 1; i9++) {
                        Test.instanceCount += (i9 - i8);
                        iArr = iArr;
                        i2 = (int)Test.instanceCount;
                        i7 = i6;
                    }
                }
                break;
            }
        }
        vMeth2_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(double d1, int i1) {

        int i11=-58150, i12=-2, i13=51, i14=-210, i15=10, i16=63965;
        short s1=11633;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -192L);

        vMeth2(i1);
        for (i11 = 343; i11 > 20; i11 -= 2) {
            Test.instanceCount += (((i11 * i12) + i1) - Test.instanceCount);
            switch ((((-63384 >>> 1) % 1) * 5) + 18) {
            case 22:
                i1 |= -7;
                d1 -= d1;
                break;
            }
            i1 += (int)Test.instanceCount;
            Test.iArrFld[i11] >>= 233;
            for (i13 = i11; i13 < 10; i13++) {
                for (i15 = 1; 1 > i15; ++i15) {
                    i12 += i15;
                    i1 = 13;
                    Test.instanceCount &= i13;
                    lArr[i15 - 1][i15] += 150L;
                    Test.instanceCount *= s1;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i1 + i11 + i12 + i13 + i14 + i15 + i16 + s1 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(double d, long l) {

        short s=-28599, sArr[][]=new short[N][N];
        int i=-225, i17=149, i18=-59641, i19=-59888;
        float f1=0.537F;

        FuzzerUtils.init(sArr, (short)-10052);

        try {
            s >>>= (short)i;
        }
        catch (ArithmeticException exc1) {
            vMeth1(d, i);
            Test.instanceCount += i;
            i = (int)f1;
        }
        i17 = 1;
        do {
            Test.iArrFld[i17 - 1] = (int)-3465175217473413764L;
            Test.iArrFld[i17 + 1] = i17;
            i += (i17 | i17);
            i %= (int)(i17 | 1);
            for (i18 = 5; i18 > 1; i18 -= 2) {
                i -= i;
                f1 += i18;
                i += (i18 ^ i18);
                sArr[i17][i17 - 1] -= (short)-31512;
            }
        } while (++i17 < 350);
        vMeth_check_sum += Double.doubleToLongBits(d) + l + s + i + Float.floatToIntBits(f1) + i17 + i18 + i19 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-54, i21=-11, i22=-64032, i23=245, i24=9, i25=1, i26=21629;
        float f2=-95.450F;
        byte by=-37;

        vMeth(-2.99038, Test.instanceCount);
        i20 = 1;
        while (++i20 < 162) {
            fArrFld[i20 + 1] = Test.instanceCount;
            Test.instanceCount = i20;
            for (i21 = 3; i21 < 155; ++i21) {
                for (i23 = 2; i23 > 1; --i23) {
                    try {
                        i24 = (i24 / i20);
                        i24 = (22086 / i24);
                        i24 = (i21 % 53234);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i23] *= i20;
                    Test.instanceCount = i20;
                    f2 *= -3L;
                    i22 -= i23;
                    i22 = (int)Test.instanceCount;
                }
                f2 = i21;
                i22 += 11;
                i24 += (((i21 * Test.instanceCount) + f2) - Test.instanceCount);
                i22 = (int)Test.instanceCount;
                i24 *= i23;
                i24 += (((i21 * i22) + Test.instanceCount) - i23);
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.instanceCount = -9L;
                    i24 = 11831;
                    lArrFld = lArrFld;
                    Test.iArrFld[i20 + 1] += i26;
                    Test.instanceCount += (((i25 * i21) + Test.instanceCount) - by);
                    Test.iArrFld[i20 - 1] -= i24;
                    Test.instanceCount *= 53;
                    i22 *= i23;
                    i22 ^= i25;
                }
                i26 -= i21;
                f2 -= 17520;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
