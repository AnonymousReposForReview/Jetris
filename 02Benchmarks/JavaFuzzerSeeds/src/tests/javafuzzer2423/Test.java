package tests.javafuzzer2423;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:22:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static boolean bFld=true;
    public static int iFld=-5;
    public static float fFld=0.619F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11081);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i5=-64954, i6=228, i7=-64223, i8=61199, i9=-48789, i10=-6;
        long l=1475345727627195115L, lArr[]=new long[N];
        double d=32.24985;
        short s=4151;

        FuzzerUtils.init(lArr, 211L);

        i5 = i5;
        i5 = 215;
        for (l = 377; l > 20; l -= 3) {
            switch (((i5 >>> 1) % 2) + 84) {
            case 84:
                if (Test.bFld) break;
                d += i6;
                if (false) {
                    i7 /= (int)(s | 1);
                    for (i8 = 13; i8 > 1; i8 -= 3) {
                        Test.instanceCount += -73;
                        Test.instanceCount *= i8;
                        i5 = i7;
                        Test.instanceCount += (((i8 * l) + l) - i7);
                        i6 += (((i8 * i8) + Test.instanceCount) - i10);
                        i7 -= i9;
                    }
                }
            case 85:
                i6 += (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount *= (long)d;
            }
        }
        long meth_res = i5 + l + i6 + Double.doubleToLongBits(d) + i7 + s + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1() {

        int i=-23154, i1=-31041, i2=-233, i3=11, i4=80, i11=-16263, i12=-14404, i13=-2, iArr[][]=new int[N][N],
            iArr1[]=new int[N];
        double d1=-1.512;

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(iArr1, 155);

        for (i = 6; i < 151; i++) {
            i2 = 1;
            do {
                i1 = (i1--);
                for (i3 = 1; i3 < 3; i3++) {
                    if (Math.max(-i2, ++Test.instanceCount) > (iArr[i2][i2] >> Test.instanceCount)) break;
                }
                if (Math.abs(fMeth()) > i1) continue;
            } while ((i2 += 2) < 11);
            for (i11 = i; i11 < 11; ++i11) {
                int i14=-5;
                i4 = (int)Test.instanceCount;
                iArr[i11 - 1][i] -= (int)d1;
                i13 = 1;
                do {
                    Test.bFld = Test.bFld;
                } while ((i13 += 3) < 1);
                i14 ^= i2;
                if (Test.bFld) break;
            }
        }
        Test.bFld = Test.bFld;
        i4 = i11;
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + i11 + i12 + Double.doubleToLongBits(d1) + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        short s1=-11815;
        byte by=-77;
        int i16=-14, i17=-65327, i18=34665, i19=-38638, i20=-17067, i21=-45916, iArr2[]=new int[N];
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 1.768F);
        FuzzerUtils.init(iArr2, -74);

        vMeth1();
        bArr[(Test.iFld >>> 1) % N] = Test.bFld;
        Test.instanceCount >>= s1;
        Test.iFld <<= by;
        if (Test.bFld) {
            fArr = fArr;
            Test.iFld = 87;
            for (i16 = 197; i16 > 12; --i16) {
                Test.fFld = 8;
                Test.instanceCount >>>= i17;
                for (i18 = 1; i18 < 9; ++i18) {
                    switch ((i16 % 10) + 32) {
                    case 32:
                        for (i20 = 1; i20 < 2; i20++) {
                            iArr2[i18] += 189;
                            s1 = (short)Test.instanceCount;
                        }
                        break;
                    case 33:
                    case 34:
                        iArr2 = iArr2;
                        break;
                    case 35:
                    case 36:
                        Test.instanceCount = Test.iFld;
                        break;
                    case 37:
                        iArr2[i16 + 1] >>= (int)Test.instanceCount;
                        break;
                    case 38:
                        i19 = -4;
                        break;
                    case 39:
                        i17 += (i18 * i18);
                        break;
                    case 40:
                        Test.iFld &= 36388;
                        break;
                    case 41:
                        iArr2[i18 + 1] <<= i20;
                    default:
                        Test.fFld -= Test.fFld;
                    }
                }
            }
        } else {
            Test.fFld = Test.instanceCount;
        }
        vMeth_check_sum += s1 + by + i16 + i17 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=-7, i23=13, i24=-24, i25=3, i26=-55526, i27=40, i28=4, i29=80;
        double d3=-2.118858;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -2.209F);

        vMeth();
        Test.instanceCount -= (long)Test.fFld;
        i22 = 1;
        while (++i22 < 361) {
            Test.iFld <<= -132;
            fArr1[i22 + 1] -= -21270;
            for (i23 = i22; i23 < 70; ++i23) {
                for (i25 = 1; i25 < 1; i25++) {
                    double d2=-2.95655;
                    i24 -= 3983;
                    Test.iArrFld[i25] %= (int)((long)(d2) | 1);
                    lArrFld[i23 - 1][i23 + 1] >>>= Test.iFld;
                    i24 = (int)Test.fFld;
                    Test.iArrFld[i22] *= (int)Test.instanceCount;
                    Test.instanceCount += i25;
                }
                i26 += i23;
                i24 <<= i23;
                Test.iArrFld[i23] = -167;
                Test.iFld += (-5 + (i23 * i23));
                iArrFld1 = FuzzerUtils.int2array(N, (int)-220);
                i26 = i23;
            }
            iArrFld1[i22][i22] = -137;
            if (Test.bFld) {
                i27 = 70;
                while ((i27 -= 3) > 0) {
                    for (i28 = 1; i28 < 3; ++i28) {
                        Test.fFld += ((long)i28 ^ (long)Test.instanceCount);
                        lArrFld[i28 + 1][i27] -= Test.instanceCount;
                        Test.fFld *= Test.iFld;
                        i24 = i25;
                        i24 = i24;
                        d3 *= i22;
                        iArrFld1[i27 + 1][i27 + 1] = i29;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
