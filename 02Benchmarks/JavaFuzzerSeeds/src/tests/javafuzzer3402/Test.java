package tests.javafuzzer3402;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:26:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5915530746412117295L;
    public volatile int iFld=26;
    public volatile float fFld=-70.972F;
    public short sArrFld[]=new short[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, long l1) {

        float f=-1.113F;
        int i6=39, i7=-181, i8=38949, i9=254, i10=14, i11=-12, i12=-143, i13=14, iArr1[]=new int[N];
        short s=14076;
        boolean b=false;

        FuzzerUtils.init(iArr1, -1);

        Test.instanceCount >>>= i5;
        f += 83;
        i4 = i5;
        iArr1[(-135 >>> 1) % N] = 14;
        for (i6 = 359; i6 > 14; i6--) {
            for (i8 = 1; i8 < 5; i8++) {
                i5 = 122;
                s -= (short)i7;
            }
            for (i10 = 5; i10 > 1; --i10) {
                Test.instanceCount += i8;
                l1 = -232;
            }
            if (b) continue;
            for (i12 = 1; i12 < 5; i12++) {
                Test.instanceCount += i12;
                if (i9 != 0) {
                    vMeth1_check_sum += i4 + i5 + l1 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + s + i10 + i11 + (b
                        ? 1 : 0) + i12 + i13 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + l1 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + s + i10 + i11 + (b ? 1 : 0) +
            i12 + i13 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=19344, i14=-10295, i15=3, i16=14, i17=-148, i18=-18, i19=37222, iArr2[]=new int[N];
        byte by=-40;
        double d=41.601;

        FuzzerUtils.init(iArr2, -54616);

        i3 = 1;
        do {
            vMeth1(i3, 6, Test.instanceCount);
            for (i14 = 8; i14 > 1; i14 -= 2) {
                for (i16 = 1; i16 < 3; i16++) {
                    i1 = i14;
                    by <<= (byte)i1;
                    Test.instanceCount <<= Test.instanceCount;
                    if (i2 != 0) {
                        vMeth_check_sum += i + i1 + i2 + i3 + i14 + i15 + i16 + i17 + by + i18 + i19 +
                            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i1 -= i1;
                }
                for (i18 = i14; i18 < 3; i18++) {
                    iArr2[i3 + 1] ^= i3;
                    iArr2[i3] = i14;
                    i17 += (i18 * i18);
                    try {
                        i17 = (iArr2[i18] % 33365);
                        i17 = (i18 % i16);
                        i1 = (63 / i15);
                    } catch (ArithmeticException a_e) {}
                    i15 += (int)d;
                }
            }
        } while (++i3 < 212);
        vMeth_check_sum += i + i1 + i2 + i3 + i14 + i15 + i16 + i17 + by + i18 + i19 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vSmallMeth() {

        int i20=200;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8530383213891075479L);

        vMeth(i20, i20, i20);
        i20 <<= (int)Test.instanceCount;
        vSmallMeth_check_sum += i20 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d1=74.97931, d2=49.58545;
        int i21=-193, i22=-7, i23=-14, i24=-1, i25=-6, i26=-14, iArr[]=new int[N];
        byte by1=-83;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 37278);
        FuzzerUtils.init(bArr, false);

        iArr[(iFld >>> 1) % N] <<= (int)(((fFld - iFld) * (++iArr[(iFld >>> 1) % N])) * iFld);
        for (int smallinvoc=0; smallinvoc<487; smallinvoc++) vSmallMeth();
        d1 = 1;
        do {
            iFld += (int)Test.instanceCount;
            for (i21 = 109; i21 > 2; --i21) {
                try {
                    iFld = (iFld % iArr[(int)(d1 + 1)]);
                    iFld = (-692843677 % i22);
                    iFld = (i22 / i22);
                } catch (ArithmeticException a_e) {}
            }
            switch ((int)((d1 % 2) + 122)) {
            case 122:
                i23 = 1;
                while (++i23 < 109) {
                    Test.instanceCount = iFld;
                    i24 = 1;
                    do {
                        iFld += i24;
                        i22 += i24;
                        iFld += (i24 * i23);
                        i22 = i21;
                        fFld -= i23;
                    } while ((i24 -= 2) > 0);
                    fFld += (i23 + by1);
                    fFld -= i23;
                    fFld += i23;
                    i22 -= (int)1.473F;
                    i22 = i24;
                    Test.instanceCount -= Test.instanceCount;
                    for (i25 = 1; i25 < 1; ++i25) {
                        d2 = iFld;
                        by1 += (byte)-2190590615L;
                        iFld -= i22;
                        iArr[(int)(d1 - 1)] -= i21;
                    }
                    bArr[i23 - 1] = b1;
                }
                sArrFld = sArrFld;
                i22 -= i26;
                iArr[(int)(d1 - 1)] -= i23;
                break;
            case 123:
                d2 = Test.instanceCount;
            default:
                iFld += (int)d1;
            }
        } while (++d1 < 230);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
