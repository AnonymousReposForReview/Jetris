package tests.javafuzzer2041;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:49:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static float fFld=52.297F;
    public static double dFld=1.106842;
    public static boolean bFld=true;
    public static int iFld=-29686;
    public byte byFld=-6;
    public static short sFld=11975;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -5.58F);
        FuzzerUtils.init(Test.iArrFld, -58546);
        FuzzerUtils.init(Test.lArrFld, 176L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, byte by1, int i9) {

        double d=1.76857;
        int i10=-182, i11=-10972, i12=23009, i13=22897, i14=-59041, iArr1[]=new int[N];
        float f2=108.253F;

        FuzzerUtils.init(iArr1, 1);

        Test.instanceCount = 12;
        for (d = 8; d < 313; ++d) {
            iArr1[(int)(d + 1)] = i11;
            for (f2 = 1; f2 < 5; f2++) {
                iArr1[(int)(f2)] -= (int)Test.instanceCount;
                if (true) break;
                i12 += (int)(32748L + (f2 * f2));
                i11 = i8;
                by1 = by1;
                for (i13 = 1; i13 < 2; i13++) {
                    boolean b=true;
                    i11 >>= i11;
                    i11 = -22;
                    Test.fFld += -10768;
                    b = b;
                    iArr1[(int)(d)] -= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i8 + by1 + i9 + Double.doubleToLongBits(d) + i10 + i11 + Float.floatToIntBits(f2) + i12 +
            i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(int i3, int i4, int i5) {

        int i6=-220, i7=-6, i15=-110, i16=-112;
        byte by=14;
        double d1=-127.43396;
        boolean b1=true;

        for (i6 = 5; 216 > i6; ++i6) {
            by = (byte)(-((i7 - Test.instanceCount) + Integer.reverseBytes(i4)));
            vMeth1(i7, by, i3);
            i4 += (int)d1;
            Test.fFld = 11;
            i5 += i6;
            switch (((i6 % 9) * 5) + 88) {
            case 133:
                try {
                    i15 = (i15 / i6);
                    i4 = (i6 / 1224446554);
                    i3 = (24 / i15);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += i6;
                break;
            case 124:
                Test.fFld -= i15;
                if (b1) {
                    i7 = (int)7866052169746002113L;
                } else if (b1) {
                    if (i5 != 0) {
                    }
                    i4 *= i7;
                } else if (b1) {
                    Test.fArrFld[i6 + 1] += i5;
                }
                break;
            case 111:
                i5 += i6;
            case 114:
                Test.fFld = -18660;
                break;
            case 98:
                Test.fFld *= i16;
            case 110:
                Test.instanceCount += (2164286950L + (i6 * i6));
            case 112:
                Test.fFld = i4;
            case 129:
                Test.instanceCount = -7795;
                break;
            case 126:
                Test.instanceCount = i15;
                break;
            default:
                i4 += (i6 + Test.instanceCount);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d1) + i15 + (b1 ? 1 : 0) + i16;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(float f1, int i2, long l) {

        double d2=-1.82618;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 0);

        iArr[(6 >>> 1) % N] |= (int)(Math.abs(i2) * dMeth(-4632, i2, -38986));
        d2 = f1;
        vMeth_check_sum += Float.floatToIntBits(f1) + i2 + l + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-89, i1=8678, i17=3, i18=11, i19=71, i20=-10698, i21=-15277, i22=7;
        float f=-83.213F;

        for (i = 15; i < 264; i++) {
            i1 += (int)(f--);
            vMeth(f, i1, Test.instanceCount);
            i1 += (int)Test.instanceCount;
            switch ((((i >>> 1) % 5) * 5) + 62) {
            case 74:
                Test.iArrFld[i + 1] *= (int)f;
                i1 -= (int)Test.dFld;
                Test.fFld = Test.instanceCount;
                for (i17 = 4; i17 < 101; ++i17) {
                    for (i19 = 1; i19 < 2; i19++) {
                        if (Test.bFld) {
                            i20 *= (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            i1 -= (int)f;
                        }
                        f += (i19 + i19);
                        if (Test.bFld) {
                            Test.iArrFld[i + 1] *= i19;
                            Test.instanceCount &= Test.iFld;
                        }
                        i1 = i17;
                        Test.instanceCount = i20;
                        Test.instanceCount += (((i19 * i) + Test.iFld) - i);
                        Test.instanceCount = 64;
                        i1 += (i19 | i20);
                        byFld += (byte)(((i19 * i1) + i18) - Test.instanceCount);
                        Test.iFld = (int)Test.instanceCount;
                    }
                    i20 = i18;
                    if (Test.bFld) break;
                    Test.iArrFld[i] = (int)Test.fFld;
                    for (i21 = 1; i21 < 2; i21++) {
                        i20 = 0;
                        Test.iArrFld[i17 + 1] <<= Test.sFld;
                    }
                }
            case 84:
                Test.instanceCount += (i - i22);
                break;
            case 63:
                Test.fFld = Test.iFld;
            case 73:
                f -= (float)Test.dFld;
                break;
            case 87:
                Test.lArrFld[i + 1] *= -42553L;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
