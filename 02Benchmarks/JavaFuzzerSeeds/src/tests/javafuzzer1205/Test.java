package tests.javafuzzer1205;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:33:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=706615364L;
    public static int iFld=-14;
    public static double dFld=-18.28440;
    public float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i3, float f1, int i4) {

        int i5=13497, i6=8, i7=-5793, i8=6, i9=-56801, iArr[]=new int[N];
        double d=-2.2017;
        boolean b=true;
        byte by=57;

        FuzzerUtils.init(iArr, 49);

        for (i5 = 5; 151 > i5; ++i5) {
            i4 += (int)f1;
        }
        f1 += 170;
        i6 *= i5;
        Test.instanceCount = i3;
        i7 = 1;
        do {
            i4 -= i7;
            i3 = (int)Test.instanceCount;
            if (b) {
                i6 += (i7 * i7);
                iArr = iArr;
                for (i8 = 1; 7 > i8; ++i8) {
                    iArr[i8] = (int)d;
                    if (b) continue;
                    by += (byte)(i8 ^ i4);
                }
            }
        } while (++i7 < 233);
        long meth_res = i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + (b ?
            1 : 0) + by + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i2=36803, i10=218, i11=-11;
        float f2=9.458F;

        i2 = (int)(iMeth2(i2, f2, i2) * -16L);
        i2 <<= Test.iFld;
        for (i10 = 10; i10 < 193; i10++) {
            Test.iFld += i10;
            Test.iFld = 8509;
        }
        long meth_res = i2 + Float.floatToIntBits(f2) + i10 + i11;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i1) {

        short s1=6190;
        boolean b1=false;
        double d1=0.104506, dArr[]=new double[N];
        byte by1=2;

        FuzzerUtils.init(dArr, -1.40021);

        iMeth1();
        Test.iFld <<= i1;
        s1 += (short)-1.657F;
        for (int i12 : Test.iArrFld) {
            if (b1) {
                b1 = b1;
                switch ((((-128 >>> 1) % 1) * 5) + 25) {
                case 28:
                    s1 *= (short)-204;
                    i12 -= i12;
                    d1 = Test.iFld;
                    break;
                default:
                    i12 -= (int)d1;
                }
                Test.iArrFld[(-23987 >>> 1) % N] = (int)l;
                by1 = (byte)Test.instanceCount;
            } else {
                l -= i12;
                dArr[(Test.iFld >>> 1) % N] += d1;
            }
        }
        long meth_res = l + i1 + s1 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10087, i13=90, i14=-49591, i15=-32, i16=7, i17=61889, i18=-4636, i19=52365;
        float f=5.260F;
        short s=9376;
        boolean b2=false;
        byte by2=20;
        double dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, -18.105498);
        FuzzerUtils.init(lArr, -2820647289982443062L);

        Test.instanceCount = (++i);
        f = (((s--) - i) * (fArrFld[(10 >>> 1) % N]--));
        i -= iMeth(Test.instanceCount, i);
        try {
            for (i13 = 7; i13 < 323; ++i13) {
                Test.iFld <<= i13;
                dArr1 = dArr1;
                for (i15 = 1; i15 < 80; i15++) {
                    if (b2) break;
                    switch ((((i14 >>> 1) % 1) * 5) + 101) {
                    case 106:
                        i >>= 13057;
                        Test.iArrFld[i13 + 1] = 30;
                        break;
                    default:
                        by2 /= (byte)(i14 | 1);
                    }
                }
                i17 = 1;
                while (++i17 < 80) {
                    for (i18 = 1; 1 > i18; ++i18) {
                        Test.instanceCount = i18;
                        i <<= i13;
                        Test.iArrFld[i18 - 1] += i16;
                        Test.instanceCount = i16;
                        lArr[i18] += by2;
                        i14 += i18;
                        Test.instanceCount >>>= i17;
                        fArrFld[i13] += f;
                        b2 = b2;
                        i = by2;
                    }
                    Test.instanceCount >>>= i18;
                    i19 = Test.iFld;
                    i *= i13;
                    f += (i17 + i18);
                    Test.instanceCount += (long)Test.dFld;
                }
            }
        }
        catch (NullPointerException exc1) {
            s = (short)-30;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
