package tests.javafuzzer2792;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:04:08 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-119L;
    public static int iFld=13917;
    public static boolean bFld=true;
    public static byte byFld=-26;
    public static volatile float fFld=35.669F;
    public long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        int i4=-75, i5=-13, i6=231, i7=-64024, i8=12, i9=44, i10=1, i11=-122, iArr2[]=new int[N];
        float f1=0.900F;
        double d1=0.111157;

        FuzzerUtils.init(iArr2, 5);

        for (i4 = 220; i4 > 11; i4 -= 3) {
            f1 += i4;
            for (i6 = 1; i6 < 22; ++i6) {
                d1 -= Test.instanceCount;
                for (i8 = i4; i8 < 2; i8++) {
                    Test.bFld = Test.bFld;
                    i5 += (int)f1;
                }
                Test.iFld += i6;
                iArr2[i4] <<= (int)Test.instanceCount;
            }
            Test.instanceCount <<= -1327;
            iArr2[i4 - 1] &= Test.byFld;
            for (i10 = 1; 22 > i10; ++i10) {
                i9 = i3;
                iArr2[i10 - 1] = Test.iFld;
            }
        }
        Test.bFld = Test.bFld;
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9 + i10
            + i11 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i) {

        int i1=-11, i2=79, i12=-14, i13=0, i14=6, i15=13, iArr1[]=new int[N];
        double d=-45.15442, dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, 153);
        FuzzerUtils.init(dArr1, -80.1053);

        for (i1 = 14; i1 < 270; i1++) {
            i2 = (int)(--d);
            iArr1[i1 + 1] = (int)8500307602906342461L;
            i2 %= (int)(((long)(0L - (-d))) | 1);
            Test.iFld *= iArr1[i1 - 1];
            iMeth(-12);
            Test.fFld += i;
            d -= i;
            iArr1[i1 - 1] *= i2;
        }
        for (i12 = 5; i12 < 245; ++i12) {
            i = i12;
        }
        for (i14 = 7; 254 > i14; i14++) {
            Test.iFld = (int)Test.instanceCount;
            dArr1[i14 - 1] = -31940;
            iArr1[i14] = i14;
        }
        vMeth1_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth(float f) {

        byte by=100;
        int i16=5, i17=-12, i18=7, iArr[]=new int[N];
        double d2=50.70972, dArr[]=new double[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 0.115808);
        FuzzerUtils.init(iArr, -190);
        FuzzerUtils.init(lArr, 185L);

        if (!(((-(1.64375 + Math.min(-24253, -17526))) - (Test.iFld + Test.iFld)) != Math.min(--Test.iFld, 9 >>
            (iArr[(Test.iFld >>> 1) % N] &= by)))) {
            Test.iFld |= (int)((Test.iFld++) - dArr[(Test.iFld >>> 1) % N]);
        }
        vMeth1(-48924L, 155);
        for (long l1 : lArr) {
            Test.iFld += (int)l1;
            Test.iFld |= 3;
            Test.iFld = (int)f;
            l1 >>= 3L;
            if (b) {
                i16 = 1;
                do {
                    for (i17 = 1; i17 < 1; ++i17) {
                        d2 -= 4254;
                        i18 += i17;
                        i18 *= (int)Test.instanceCount;
                        l1 += (i17 + i18);
                    }
                } while (++i16 < 4);
            } else if (Test.bFld) {
                lArr[(i17 >>> 1) % N] |= Test.iFld;
            } else {
                vMeth_check_sum += Float.floatToIntBits(f) + by + i16 + i17 + i18 + Double.doubleToLongBits(d2) + (b ?
                    1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
                    FuzzerUtils.checkSum(lArr);
                return;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by + i16 + i17 + i18 + Double.doubleToLongBits(d2) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=12, i20=59948, i21=-164, i22=-40728, i23=0, i24=129, i25=-10, i26=-4, i27=-88, i28=1, i29=-14, i30=137,
            iArr3[][]=new int[N][N];
        double d3=-1.112503;
        short s1=-16506;

        FuzzerUtils.init(iArr3, 3);

        vMeth(Test.fFld);
        lArrFld = FuzzerUtils.long1array(N, (long)-4L);
        for (i19 = 13; i19 < 385; ++i19) {
            i20 *= i19;
            for (i21 = 4; i21 < 68; ++i21) {
                Test.iFld &= i19;
                Test.instanceCount &= Test.instanceCount;
                for (i23 = 1; i23 < 2; ++i23) {
                    iArr3[i23 - 1][i21] = Test.iFld;
                    fArrFld[i21 + 1] = Test.fFld;
                    iArr3[i23][i19 - 1] = -61356;
                    Test.bFld = Test.bFld;
                    Test.iFld -= (int)d3;
                    Test.instanceCount = (long)-1.129583;
                }
                Test.iFld = i19;
            }
            for (i25 = 4; i25 < 68; ++i25) {
                short s=14474;
                i22 = i22;
                i22 = (int)Test.fFld;
                Test.iFld += i25;
                s = (short)-13;
                i24 = i26;
                Test.bFld = Test.bFld;
                Test.fFld += -244;
            }
            for (i27 = 3; i27 < 68; ++i27) {
                fArrFld[i19 - 1] *= s1;
                i22 = i22;
                i22 = (int)Test.instanceCount;
                for (i29 = 1; i29 < 2; i29++) {
                    iArr3[i19][i19 - 1] = i25;
                    Test.iFld = s1;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
