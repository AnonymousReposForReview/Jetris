package tests.javafuzzer51;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:37:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-44431L;
    public static volatile float fFld=1.666F;
    public static int iFld=-93;
    public static byte byFld=5;
    public static int iFld1=-35137;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 35);
        FuzzerUtils.init(Test.fArrFld, 2.109F);
        FuzzerUtils.init(Test.sArrFld, (short)17350);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=61785, i2=17349, i3=53799, i4=-13, i5=22200, i6=13;
        double d1=59.17464;
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -154L);

        for (i1 = 17; i1 < 342; i1++) {
            i2 += (int)12933L;
            lArr[i1 + 1][i1 + 1] = 2L;
            switch (((i1 % 2) * 5) + 103) {
            case 108:
                Test.instanceCount *= (long)d1;
                if (b) break;
                break;
            case 111:
                i2 += i2;
                i2 = i2;
                for (i3 = 5; i3 > 1; i3--) {
                    Test.fArrFld[i3] += i1;
                }
                Test.iArrFld[i1] -= (int)232L;
                break;
            default:
                for (i5 = 1; 5 > i5; i5++) {
                    i4 = (int)Test.fFld;
                    i4 = i1;
                    try {
                        i6 = (184 % Test.iArrFld[i5 - 1]);
                        i6 = (i5 % i3);
                        Test.iFld = (i4 % Test.iArrFld[i5 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i3 + i4 + i5 + i6 +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {


        vMeth();
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i=-22460, i7=25581, i8=136, i9=-20251, i10=3, i11=22, iArr[]=new int[N];
        long l=501014107L;
        double d2=0.34635;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.442F);
        FuzzerUtils.init(iArr, -50);

        Test.instanceCount -= (Test.iArrFld[(i >>> 1) % N] * -38857);
        fArr[(i >>> 1) % N] += ((-Math.max(-41762, 3)) - iArr[(i >>> 1) % N]);
        Test.instanceCount = (lMeth() * -38403);
        Test.instanceCount &= Test.instanceCount;
        l = 349;
        do {
            i = Test.iFld;
        } while ((l -= 3) > 0);
        Test.sArrFld[(-3 >>> 1) % N] <<= (short)Test.iFld;
        for (i7 = 11; 240 > i7; ++i7) {
            i8 = Test.iFld;
            i8 <<= i;
            for (i9 = 7; i9 > 1; --i9) {
                i11 = (int)Test.instanceCount;
                Test.instanceCount &= i11;
                Test.iFld -= 15018;
                Test.fFld += (float)d2;
            }
        }
        long meth_res = i + l + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=79.101493, d3=1.97604;
        int i12=54, i13=-225, i14=-15014, i15=6, i16=-55378, i17=17943, i18=202, i19=-5, iArr1[][]=new int[N][N];
        boolean b1=false;
        short s=29359;

        FuzzerUtils.init(iArr1, -4976);

        d = (-iMeth());
        Test.instanceCount = Test.iFld;
        Test.instanceCount = Test.iFld;
        Test.iFld = 163;
        Test.iFld -= -245;
        iArr1 = iArr1;
        for (d3 = 4; d3 < 397; ++d3) {
            for (i13 = 3; i13 < 64; i13++) {
                i12 += (i13 ^ i13);
                Test.instanceCount -= -31205;
            }
        }
        i15 = 1;
        do {
            iArr1[i15][i15] = i15;
        } while (++i15 < 276);
        for (i16 = 2; i16 < 320; ++i16) {
            i18 = 1;
            do {
                Test.instanceCount >>= i12;
                i14 += (166 + (i18 * i18));
                i17 = i17;
                Test.instanceCount -= 10;
                i17 -= i13;
                Test.byFld += (byte)(((i18 * Test.instanceCount) + Test.instanceCount) - Test.iFld);
                i12 += (i18 ^ i12);
                Test.instanceCount *= Test.iFld1;
                if (b1) {
                    i19 = 1;
                    while (++i19 < 3) {
                        i14 += i14;
                        Test.iFld -= i18;
                        i12 = (int)Test.fFld;
                        iArr1[i18] = Test.iArrFld;
                        Test.instanceCount += (168 + (i19 * i19));
                    }
                    Test.instanceCount = -6;
                } else {
                    s = s;
                }
            } while ((i18 += 2) < 79);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
