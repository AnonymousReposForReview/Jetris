package tests.javafuzzer1602;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:42:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
        FuzzerUtils.init(Test.lArrFld, 51060L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i10=174, i12=163, i13=-71, i14=67, i15=45673, i16=3636;
        float f=0.768F;
        double dArr[]=new double[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(dArr, 2.80466);
        FuzzerUtils.init(lArr, -9L);

        Test.instanceCount = i10;
        dArr = dArr;
        Test.instanceCount += Test.instanceCount;
        lArr[(i10 >>> 1) % N][(i10 >>> 1) % N] -= i10;
        for (int i11 : Test.iArrFld) {
            for (i12 = 1; i12 < 4; i12++) {
                f -= -40;
                Test.instanceCount = i10;
            }
            i14 = 4;
            while ((i14 -= 2) > 0) {
                boolean b1=true;
                for (i15 = 1; i15 < 2; i15++) {
                    Test.instanceCount = Test.instanceCount;
                    dArr[i14 + 1] -= 48.739F;
                }
                if (b1) break;
                Test.iArrFld[i14 - 1] = i15;
                Test.instanceCount += (i14 + i12);
            }
        }
        vMeth2_check_sum += i10 + i12 + i13 + Float.floatToIntBits(f) + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i2, int i3) {

        int i4=5, i5=-166, i6=13, i7=10, i8=-98, i9=-214, i17=62, iArr[][]=new int[N][N];
        float f1=0.617F, f2=-34.301F;

        FuzzerUtils.init(iArr, 48);

        for (i4 = 6; i4 < 390; i4++) {
            for (i6 = 1; i6 < 4; i6++) {
                boolean b=true;
                i2 = (int)((i3++) * -4135188921L);
                iArr[i4 + 1][i4] = (int)((-71 - (i7--)) - ((--i5) + Test.instanceCount));
                if (b) break;
            }
            for (i8 = 1; 4 > i8; i8++) {
                vMeth2();
                for (f1 = 1; 2 > f1; ++f1) {
                    byte by=-116;
                    iArr[i4][(int)(f1 + 1)] >>= i17;
                    f2 += i5;
                    by += (byte)((long)f1 ^ (long)f2);
                    i9 = i4;
                    i5 -= i4;
                    i5 *= 30;
                    try {
                        iArr[(int)(f1 + 1)][i4] = (i7 % i7);
                        i7 = (-1602564624 / i8);
                        i2 = (Test.iArrFld[i4 - 1] / -1511709337);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i17 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1) {

        int i18=-55834, i19=-121, i20=2, i21=-6, i22=-13, i23=-21829;
        float f3=-14.178F;
        boolean b2=false;
        long l=52977L;
        byte by1=1;

        vMeth1(i1, i18);
        Test.lArrFld[(-50 >>> 1) % N] = i1;
        for (i19 = 7; i19 < 210; i19 += 3) {
            Test.instanceCount += (((i19 * Test.instanceCount) + f3) - f3);
            if (b2) break;
            i = i20;
            for (l = 1; l < 23; l += 3) {
                for (i22 = 1; i22 < 4; i22++) {
                    switch (((i22 % 2) * 5) + 75) {
                    case 79:
                        if (b2) {
                            i18 += i;
                            by1 >>= (byte)i21;
                            if (i != 0) {
                                vMeth_check_sum += i + i1 + i18 + i19 + i20 + Float.floatToIntBits(f3) + (b2 ? 1 : 0) +
                                    l + i21 + i22 + i23 + by1;
                                return;
                            }
                            Test.iArrFld[i19 + 1] = -9;
                        } else if (b2) {
                            Test.iArrFld[i22 + 1] += -17533;
                        } else {
                            i1 += i22;
                        }
                    case 84:
                        try {
                            i20 = (-12728 % i22);
                            i20 = (i18 % Test.iArrFld[(int)(l + 1)]);
                            i1 = (-19011 % i19);
                        } catch (ArithmeticException a_e) {}
                    default:
                        Test.lArrFld[i22] -= i19;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i18 + i19 + i20 + Float.floatToIntBits(f3) + (b2 ? 1 : 0) + l + i21 + i22 + i23 +
            by1;
    }

    public void mainTest(String[] strArr1) {

        int i24=60314, i25=-42839, i26=48190, i27=10, i28=-178, i29=11, i30=0, i31=-7, i32=11, i33=-234, i34=-11, i35=6;
        boolean b3=true;
        double d=-96.61968, d1=26.124438;
        float f4=1.606F;
        short s=15086;

        vMeth(i24, i24);
        b3 = b3;
        for (i25 = 235; i25 > 1; i25 -= 3) {
            for (d = 5; d < 321; d++) {
                Test.iArrFld = Test.iArrFld;
                for (i28 = 1; i28 < 2; ++i28) {
                    if (false) continue;
                    i24 -= (int)f4;
                    d1 *= f4;
                    Test.iArrFld = Test.iArrFld;
                    f4 -= i24;
                    try {
                        Test.iArrFld[i25] = (57566 % i27);
                        Test.iArrFld[i28 + 1] = (i27 % i27);
                        i26 = (Test.iArrFld[i28 - 1] / 11);
                    } catch (ArithmeticException a_e) {}
                }
                i24 += (int)d1;
                for (i30 = 1; i30 < 2; ++i30) {
                    f4 += f4;
                    i29 >>>= i26;
                    b3 = b3;
                    i26 += (((i30 * f4) + Test.instanceCount) - i30);
                    s = (short)-254;
                }
                Test.instanceCount = i24;
                i26 += (int)(d * d);
                i24 <<= i27;
            }
            for (i32 = 3; i32 < 321; i32++) {
                Test.instanceCount -= -365;
                for (i34 = i25; i34 < 2; i34++) {
                    if (b3) {
                        i35 -= i29;
                        i24 = -25073;
                        if (b3) break;
                    } else {
                        Test.instanceCount -= i30;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
