package tests.javafuzzer2038;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:49:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=113L;
    public volatile int iFld=40553;
    public static double dFld=0.74376;
    public static volatile float fFld=76.590F;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 44792L);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long lMeth2_check_sum = 0;

    public static long lMeth2(int i13, int i14) {

        int i15=153, i16=51865, i17=-39894, i18=-131, iArr1[]=new int[N];
        short s1=-28439;
        boolean b=false;

        FuzzerUtils.init(iArr1, -57451);

        for (i15 = 149; i15 > 2; i15 -= 3) {
            Test.instanceCount += (i15 * i15);
            i13 += i15;
            iArr1[i15] += i13;
            if (i15 != 0) {
            }
            i16 *= (int)78.108F;
            for (i17 = 1; i17 < 31; i17++) {
                i13 = 6;
                Test.fFld += (-52210 + (i17 * i17));
                iArr1[i15 - 1] >>= s1;
                Test.instanceCount <<= i14;
                Test.instanceCount -= i17;
            }
            Test.instanceCount = i18;
            b = b;
        }
        i16 -= i17;
        long meth_res = i13 + i14 + i15 + i16 + i17 + i18 + s1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        lMeth2_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth1(int i7) {

        int i8=-42109, i9=2, i10=1, i11=-7, i12=-13, i19=42, i20=-38104, iArr[]=new int[N];
        byte by=9;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -12573);
        FuzzerUtils.init(sArr, (short)24424);

        i7 *= i7;
        for (i8 = 15; i8 < 339; i8++) {
            for (i10 = 1; 5 > i10; i10++) {
                Test.dFld += (i11 >> (Math.min(Test.instanceCount, Test.instanceCount) - iArr[i8 - 1]));
                i9 += (-4 + (i10 * i10));
                switch (((i8 % 10) * 5) + 90) {
                case 133:
                    switch ((i8 % 1) + 106) {
                    case 106:
                        i12 = (int)lMeth2(i12, i10);
                        i11 = i9;
                        for (i19 = 1; i19 < 2; ++i19) {
                            Test.fFld -= (float)Test.dFld;
                            iArr[i8] = (int)-2L;
                            i7 = -2;
                        }
                        break;
                    }
                    i7 = i8;
                    i11 = 4;
                    break;
                case 132:
                    i11 >>= i19;
                    break;
                case 102:
                case 125:
                    i7 += (i10 * Test.instanceCount);
                    break;
                case 123:
                    i12 &= -168;
                    break;
                case 109:
                    i11 *= (int)Test.dFld;
                    break;
                case 122:
                    i9 = i12;
                    break;
                case 135:
                    sArr[i10] = (short)i20;
                case 134:
                    i7 -= by;
                    break;
                case 92:
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i19 + i20 + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i6, short s, long l) {

        int i21=173, i22=-46215, i23=54706, i24=771, i25=-193;
        long lArr[]=new long[N];
        short sArr1[]=new short[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, -6034522733156255636L);
        FuzzerUtils.init(sArr1, (short)-24321);
        FuzzerUtils.init(bArr1, false);

        i6 -= (int)((i6 + (i6 * i6)) + (i6 + 6735883377960392142L));
        i6 = (int)lMeth1(i6);
        for (i21 = 1; 324 > i21; ++i21) {
            lArr[i21] = i23;
        }
        for (short s2 : sArr1) {
            for (i24 = 1; i24 < 4; ++i24) {
                Test.fFld -= i25;
                bArr1[i24 - 1] = Test.bFld;
                i25 -= i25;
                lArr[i24 - 1] ^= s;
                i22 += (i24 * i22);
                i6 += (-17 + (i24 * i24));
                i6 *= (int)l;
                sArr1 = FuzzerUtils.short1array(N, (short)-11624);
                i22 = i22;
            }
        }
        long meth_res = i6 + s + l + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(bArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i1=0, i2=-13, i3=3, i4=9609, i5=227, i26=65, i27=137, i28=-4, i29=57868, iArr2[]=new int[N];
        float f=1.538F;
        short s3=2880;
        byte by1=62, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -139);
        FuzzerUtils.init(byArr, (byte)120);

        iFld = iFld;
        iFld = (--iFld);
        bArr[(-11 >>> 1) % N] = bArr[(iFld >>> 1) % N];
        for (i1 = 8; 154 > i1; i1++) {
            for (i3 = i1; i3 < 172; ++i3) {
                i5 = 1;
                while (++i5 < 1) {
                    i4 += ((i2++) - (i4--));
                    f -= (lMeth(i5, s3, -7L) * i5);
                    iArr2[i5] = i4;
                    Test.lArrFld[i3 - 1] *= -249;
                    Test.lArrFld[i3 - 1] += (long)97.100405;
                    Test.instanceCount = i3;
                }
                by1 *= (byte)Test.dFld;
                byArr[i3 - 1] <<= (byte)iFld;
                Test.instanceCount += i2;
            }
            iFld += i1;
            switch ((i1 % 1) + 94) {
            case 94:
                i4 %= (int)(i5 | 1);
                Test.instanceCount <<= 25056;
                break;
            }
            Test.dFld = Test.instanceCount;
            for (i26 = 5; i26 < 172; ++i26) {
                iArr2 = iArr2;
                i2 = i2;
                Test.bFld = Test.bFld;
                Test.instanceCount >>= i27;
                switch ((((i27 >>> 1) % 6) * 5) + 81) {
                case 93:
                    for (i28 = 1; 2 > i28; ++i28) {
                        iArr2[i1] -= (int)1.64874;
                    }
                    break;
                case 99:
                    i2 = i2;
                    i27 += i26;
                    break;
                case 83:
                    Test.instanceCount = (long)Test.fFld;
                    break;
                case 106:
                    Test.lArrFld[i1] += 8;
                case 84:
                    i29 += (i26 ^ i4);
                    break;
                case 104:
                    i27 <<= i26;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  lMeth2 ->  lMeth2 lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
