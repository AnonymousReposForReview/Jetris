package tests.javafuzzer1835;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:12:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-60865L;
    public static int iFld=51766;
    public static int iFld1=1;
    public static long lFld=4223801126809702164L;
    public static double dFld=1.115021;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10537);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, float f, double d) {

        short s=-20892;
        int i2=-2, i3=127, i4=-20433;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -57L);
        FuzzerUtils.init(bArr, true);

        Test.iFld1 -= Test.iFld;
        for (long l2 : lArr) {
            Test.iFld *= (int)l2;
            s = (short)Test.iFld;
            for (i2 = 1; i2 < 4; ++i2) {
                i3 -= i2;
                i3 += (int)l1;
                Test.iFld = i2;
                if (Test.iFld1 != 0) {
                    vMeth2_check_sum += l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s + i2 + i3 + i4 +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                i4 = 2;
                while (--i4 > 0) {
                    i3 |= i2;
                    lArr[i4 + 1] = i4;
                    i3 *= -20152;
                    bArr[i2 + 1] = false;
                }
                Test.lFld = i4;
            }
        }
        vMeth2_check_sum += l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s + i2 + i3 + i4 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i1) {

        float f1=-49.617F;
        int i5=16678, i6=29095, i7=-8, i8=-31695, i9=-53262, i10=-6, i11=-53484, i12=-4, iArr[]=new int[N];
        short s1=20488;

        FuzzerUtils.init(iArr, 14);

        vMeth2(Test.instanceCount, f1, Test.dFld);
        for (i5 = 3; i5 < 141; ++i5) {
            for (i7 = 11; i7 > i5; i7--) {
                for (i9 = 1; i9 < 1; ++i9) {
                    Test.lFld -= -38682L;
                    if (i9 != 0) {
                        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
                            s1 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i6 = (int)Test.lFld;
                }
                i8 += i7;
                for (i11 = 1; 1 > i11; i11++) {
                    byte by=-102;
                    Test.bFld = Test.bFld;
                    switch ((i11 % 4) + 86) {
                    case 86:
                        Test.dFld += i1;
                        i8 = i6;
                        Test.instanceCount -= i7;
                        s1 -= (short)Test.iFld;
                        break;
                    case 87:
                        iArr[i11] = (int)Test.lFld;
                        break;
                    case 88:
                        i1 = by;
                        break;
                    case 89:
                        if (Test.iFld1 != 0) {
                            vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
                                i12 + s1 + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + s1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l) {

        int i13=-2, i14=0, i15=37258, i16=-212, i17=-165, i18=-211, iArr1[]=new int[N];
        float f2=1.1014F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -41);
        FuzzerUtils.init(lArr1, -43794L);

        Test.iFld -= Test.iFld;
        vMeth1(Test.iFld1);
        Test.iFld1 -= Test.iFld;
        for (i13 = 14; i13 < 276; ++i13) {
            f2 = 18563;
            i14 = i13;
            Test.iFld1 = Test.iFld1;
            Test.iFld1 -= (int)Test.dFld;
            iArr1 = FuzzerUtils.int1array(N, (int)24961);
            for (i15 = 6; i15 > 1; i15--) {
                lArr1[i15 + 1] -= (long)Test.dFld;
            }
            for (i17 = 6; i17 > 1; i17--) {
                i18 += (int)(-2455830301552326161L + (i17 * i17));
                l = Test.iFld;
            }
            iArr1[i13 + 1] = i18;
        }
        vMeth_check_sum += l + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i19=2, i20=-6284, i21=-250, i22=17053, i23=48753;
        long l3=-6081L, lArr2[]=new long[N];
        byte by1=-7, byArr[]=new byte[N];
        float f3=-62.578F, fArr[]=new float[N];
        short s2=-31762;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 1.988F);
        FuzzerUtils.init(lArr2, -50097L);
        FuzzerUtils.init(byArr, (byte)89);
        FuzzerUtils.init(dArr, -74.69295);

        i = 134;
        while (--i > 0) {
            vMeth(Test.instanceCount);
            i19 = 1;
            while (++i19 < 187) {
                switch (((Test.iFld >>> 1) % 9) + 18) {
                case 18:
                    fArr[i19] = -3995163299161960986L;
                    Test.instanceCount *= Test.iFld1;
                    for (i20 = 1; i20 < 1; ++i20) {
                        lArr2[i - 1] = Test.lFld;
                        if (Test.bFld) break;
                        switch ((i20 % 2) + 102) {
                        case 102:
                            Test.iFld1 >>= (int)Test.lFld;
                            Test.iFld1 = Test.iFld;
                            Test.lFld -= 1823121521L;
                            fArr[i19 + 1] += i19;
                        case 103:
                            try {
                                Test.iFld1 = (-44426 % i22);
                                i21 = (Test.iFld % i22);
                                i22 = (i20 / 168);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                    }
                    break;
                case 19:
                    for (l3 = i; l3 < 1; l3++) {
                        switch (((Test.iFld >>> 1) % 10) + 4) {
                        case 4:
                            Test.iFld1 *= i21;
                            break;
                        case 5:
                            i22 >>= Test.iFld;
                            break;
                        case 6:
                            Test.instanceCount *= Test.iFld;
                            break;
                        case 7:
                            Test.iArrFld[i][i19 - 1] >>= i;
                            Test.instanceCount += (l3 * by1);
                            switch ((int)((l3 % 7) + 7)) {
                            case 7:
                                Test.instanceCount += (long)f3;
                                break;
                            case 8:
                                i21 += (int)(l3 - i23);
                                break;
                            case 9:
                                i22 *= (int)f3;
                                i22 -= i22;
                            case 10:
                                i22 = 6954;
                                break;
                            case 11:
                                Test.lFld = l3;
                            case 12:
                                i23 = i19;
                                break;
                            case 13:
                                i21 = i23;
                                break;
                            default:
                                f3 -= f3;
                            }
                            break;
                        case 8:
                            Test.iArrFld[i19][i19 + 1] >>= i;
                            break;
                        case 9:
                            Test.lFld -= i20;
                        case 10:
                            i21 -= s2;
                        case 11:
                            byArr[i19 + 1] *= (byte)f3;
                            break;
                        case 12:
                            i23 -= (int)f3;
                            break;
                        case 13:
                            if (true) continue;
                            break;
                        }
                    }
                    break;
                case 20:
                case 21:
                    Test.iArrFld[i][i19] = i20;
                    break;
                case 22:
                    Test.iFld1 += (i19 - i19);
                case 23:
                    Test.instanceCount |= Test.iFld;
                    break;
                case 24:
                    i23 -= Test.iFld;
                    break;
                case 25:
                    i23 -= Test.iFld;
                case 26:
                    dArr[i19] = Test.instanceCount;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
