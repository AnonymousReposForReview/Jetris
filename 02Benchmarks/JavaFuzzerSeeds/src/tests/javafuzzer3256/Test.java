package tests.javafuzzer3256;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:49:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8064039727853322033L;
    public static double dFld=-38.124110;
    public boolean bFld=false;
    public volatile long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, int i10) {

        int i11=-51095, i12=201, i13=8, i14=-5, i15=-13, i16=58, i17=0, i18=-54040, iArr[]=new int[N];
        short s=-20439;
        float f1=-2.671F;

        FuzzerUtils.init(iArr, 2539);

        for (i11 = 6; i11 < 272; i11++) {
            Test.dFld = Test.instanceCount;
            for (i13 = 6; 1 < i13; i13 -= 2) {
                i14 = i11;
                i12 = i9;
                i12 = i10;
                i10 += i13;
                iArr[i11 - 1] = 121;
                Test.instanceCount += (i13 | Test.instanceCount);
            }
            i15 = 1;
            while (++i15 < 6) {
                for (i16 = i11; i16 < 1; ++i16) {
                    switch (((i11 % 7) * 5) + 118) {
                    case 139:
                        i17 += (12 + (i16 * i16));
                        i12 *= i13;
                        break;
                    case 146:
                        Test.instanceCount *= s;
                        break;
                    case 132:
                        i9 ^= i12;
                        break;
                    case 148:
                        i14 >>= i12;
                        break;
                    case 144:
                        iArr = iArr;
                        break;
                    case 130:
                        i10 *= (int)f1;
                        break;
                    case 142:
                        i18 >>= i13;
                        break;
                    default:
                        i10 = (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s + Float.floatToIntBits(f1) + i18 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=-1, i6=-14947, i7=36034, i8=0;
        long l=-833576558L, lArr[]=new long[N];
        short s1=-24138;
        float f2=-119.551F;
        boolean b=false;

        FuzzerUtils.init(lArr, -1383295987L);

        lArr[(i2 >>> 1) % N] = i3;
        i5 = 1;
        while (++i5 < 236) {
            i3 += i5;
            for (l = 1; l < 7; l++) {
                for (i7 = 2; i7 > 1; i7--) {
                    if ((Test.instanceCount++) != (-(Test.instanceCount--))) break;
                    vMeth(i7, i4);
                    Test.instanceCount = 3329869140160001790L;
                    s1 = (short)i2;
                    i6 = i6;
                    Test.instanceCount |= i5;
                    i3 += i2;
                    f2 = Test.instanceCount;
                    if (b) continue;
                }
                i2 = (int)-11L;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + l + i6 + i7 + i8 + s1 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        int i1=-213;

        i1 <<= (iMeth(i1, i1, i1) * i1);
        vSmallMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        float f=1.956F;
        int i=-10, i19=0, i20=-3, i21=-253, i22=-63517, i23=-38213, i24=-146, i25=11, i26=12, i27=-104, iArr1[]=new
            int[N];
        byte by=-72;

        FuzzerUtils.init(iArr1, 43810);

        f -= (lArrFld[(i >>> 1) % N] += (long)((f + i) * (-13 ^ (10L + (i + Test.instanceCount)))));
        for (int smallinvoc=0; smallinvoc<840; smallinvoc++) vSmallMeth();
        Test.instanceCount = by;
        for (i19 = 18; i19 < 349; i19++) {
            f = i;
            iArr1[i19] >>= i20;
            if (bFld) {
                i21 = 1;
                while (++i21 < 76) {
                    i20 += i20;
                    i20 >>= i21;
                }
            } else {
                Test.dFld = -14159;
            }
            i20 = (int)Test.instanceCount;
            i22 >>= i19;
            switch (((i19 % 2) * 5) + 38) {
            case 44:
                if (bFld) continue;
                for (i23 = 4; i23 < 76; ++i23) {
                    lArrFld[i23 - 1] = -456;
                    Test.dFld *= 1.93105;
                    i20 += (((i23 * i22) + Test.instanceCount) - i);
                    iArr1[i19 + 1] = i19;
                    i25 = 1;
                    do {
                        i24 -= (int)f;
                        switch ((((i26 >>> 1) % 9) * 5) + 4) {
                        case 8:
                            i24 = i25;
                            bFld = bFld;
                            i24 = (int)Test.instanceCount;
                        case 38:
                        case 44:
                            f = Test.instanceCount;
                            Test.instanceCount &= 11;
                            i24 += i25;
                            break;
                        case 24:
                            i20 *= -6;
                        case 22:
                            i22 -= (int)f;
                            break;
                        case 41:
                            Test.instanceCount += i25;
                            break;
                        case 40:
                            iArr1[i23 + 1] += (int)Test.instanceCount;
                        case 30:
                            i27 = i;
                            break;
                        case 18:
                            i20 += (((i25 * Test.instanceCount) + i24) - i21);
                            break;
                        }
                    } while (++i25 < 2);
                }
                break;
            case 47:
                f += i19;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
