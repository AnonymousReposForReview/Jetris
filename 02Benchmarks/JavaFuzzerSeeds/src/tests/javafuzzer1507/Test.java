package tests.javafuzzer1507;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:41:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5201188992321792045L;
    public int iFld=4;
    public static volatile short sFld=165;
    public static volatile float fFld=2.805F;
    public byte byFld=18;
    public double dFld=2.5028;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -109);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i1, float f, long l) {

        int i2=16429, i3=-33680, i4=18237, i5=13474, i6=62844, i7=-18, iArr[]=new int[N];
        byte by=120;

        FuzzerUtils.init(iArr, -170);

        f += i1;
        f *= 57956;
        for (i2 = 11; i2 < 270; ++i2) {
            Test.sFld /= (short)(i2 | 1);
            for (i4 = i2; i4 < 6; i4++) {
                f += (i4 * i4);
                Test.instanceCount += (((i4 * Test.instanceCount) + f) - l);
                switch (((i4 >>> 1) % 1) + 12) {
                case 12:
                    iArr[i4 - 1] = i1;
                    break;
                default:
                    Test.instanceCount += (i4 | i1);
                    for (i6 = 1; i6 > 1; i6 -= 3) {
                        boolean b=false;
                        iArr[i6] = i1;
                        by >>= (byte)i3;
                        l += i6;
                        if (b) continue;
                    }
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + l + i2 + i3 + i4 + i5 + i6 + i7 + by +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i8=-64211, i9=-118, i10=10, i11=11594, i12=-1, i13=-150;
        float f1=61.24F;
        double d=2.89745;
        byte by1=-33;

        lMeth(i8, f1, Test.instanceCount);
        i8 = 43;
        for (i9 = 12; i9 < 226; i9++) {
            i10 *= i8;
            Test.instanceCount += (13100L + (i9 * i9));
            i10 >>>= i10;
            i11 = 1;
            while (++i11 < 8) {
                Test.iArrFld[i11] += 233;
                i8 *= -2;
                Test.instanceCount = (long)d;
                for (i12 = 1; i12 < 1; ++i12) {
                    Test.instanceCount = by1;
                    i8 = i11;
                }
                Test.iArrFld[i11] += i8;
                i8 ^= i12;
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 +
            by1;
    }

    public static void vMeth(int i) {

        int i14=17794, i15=-7, i16=61;
        boolean b1=true;
        double d1=-1.49332;
        long l1=-2318732023L, lArr[]=new long[N];
        byte by2=61;

        FuzzerUtils.init(lArr, -122L);

        vMeth1();
        i14 = 193;
        while (--i14 > 0) {
            Test.iArrFld = Test.iArrFld;
            if (b1) continue;
            i15 = i;
            for (d1 = 8; d1 > 1; d1 -= 2) {
                lArr[i14 + 1] -= i15;
            }
            i16 = (int)Test.fFld;
            l1 = 1;
            while (++l1 < 8) {
                Test.iArrFld[(int)(l1 + 1)] -= i14;
                switch ((i14 % 2) + 1) {
                case 1:
                    Test.instanceCount += (long)Test.fFld;
                    i *= (int)l1;
                    by2 = (byte)i15;
                    by2 = (byte)Test.instanceCount;
                    break;
                case 2:
                    Test.iArrFld[(int)(l1)] -= i14;
                    break;
                default:
                    i16 += (int)(l1 * l1);
                }
            }
        }
        vMeth_check_sum += i + i14 + (b1 ? 1 : 0) + i15 + Double.doubleToLongBits(d1) + i16 + l1 + by2 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        long l2=-3407098477L;
        int i17=39012, i18=169, i19=208, i20=0, i21=0, i22=8, i23=-6, i24=-1, i25=25541, i26=-6379, i27=-204;
        double d2=-1.110278;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.656F);

        iFld += (int)Test.instanceCount;
        vMeth(-8);
        for (l2 = 17; 295 > l2; l2++) {
            for (i18 = 2; i18 < 90; i18++) {
                for (i20 = 1; i20 < 2; i20++) {
                    i21 -= iFld;
                    i19 *= 239;
                }
            }
        }
        Test.fFld = Test.fFld;
        for (i22 = 6; i22 < 130; ++i22) {
            byFld += (byte)(i22 * i22);
            i21 = 1;
            for (i24 = 6; i24 < 202; ++i24) {
                Test.iArrFld[i24 - 1] *= -41831;
                for (d2 = 1; 2 > d2; ++d2) {
                    i21 *= (int)-117.1007F;
                    Test.iArrFld[(int)(d2)] += i17;
                    Test.instanceCount <<= i24;
                    i17 = i22;
                }
            }
            i17 = (int)-151497180261910988L;
            Test.fFld -= i24;
            Test.instanceCount = iFld;
            i23 >>= (int)Test.instanceCount;
            i27 = 1;
            do {
                i19 = i25;
                switch (((i27 >>> 1) % 5) + 36) {
                case 36:
                    fArr[i27][i27 + 1] = i21;
                    dFld += i26;
                    break;
                case 37:
                    i19 = Test.sFld;
                    i19 = (int)l2;
                    Test.instanceCount += i27;
                case 38:
                    Test.instanceCount = byFld;
                    break;
                case 39:
                    iFld = i22;
                case 40:
                    Test.instanceCount = 208692671L;
                }
            } while (++i27 < 202);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
