package tests.javafuzzer730;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:42:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-958040541L;
    public volatile int iFld=1;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5L);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i4=-10446;

        i4 = i4;
        vMeth_check_sum += i4;
    }

    public static double dMeth(long l) {

        int i3=-4, i5=-1, i6=-16608, i7=5, i8=50481, i9=-40387, i10=203, iArr[][]=new int[N][N];
        float f=1.526F;
        boolean b=true;
        byte by=-13, byArr[]=new byte[N];
        double d=-110.103282;

        FuzzerUtils.init(byArr, (byte)111);
        FuzzerUtils.init(iArr, 2);

        i3 >>= (-byArr[(i3 >>> 1) % N]);
        vMeth();
        i3 >>= (int)150L;
        for (i5 = 13; i5 < 318; i5++) {
            switch ((i5 % 7) + 40) {
            case 40:
                for (i7 = 1; i7 < 5; ++i7) {
                    f -= i8;
                    if (b) break;
                    for (i9 = i7; i9 < 2; i9++) {
                        iArr[i9 - 1][i9] = (int)Test.instanceCount;
                        i6 >>= (int)l;
                        by -= (byte)f;
                        d += 126.114560;
                        i8 *= i3;
                    }
                    l -= -3025491889L;
                }
                break;
            case 41:
                i8 += (int)(12L + (i5 * i5));
                break;
            case 42:
                i8 -= (int)1.101941;
                break;
            case 43:
                i8 *= i7;
            case 44:
                l <<= i10;
            case 45:
                i3 -= (int)f;
                break;
            case 46:
                i3 = i9;
                break;
            default:
                try {
                    i6 = (48840 % i8);
                    iArr[i5][i5] = (i6 / -74);
                    iArr[i5 + 1][i5 - 1] = (48013 / i8);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = l + i3 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + (b ? 1 : 0) + i9 + i10 + by +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vSmallMeth(int i, int i1, int i2) {


        Test.instanceCount /= ((long)(dMeth(1909698333L)) | 1);
        i1 = i1;
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        boolean b1=true;
        int i11=147, i12=0, i13=-208, i14=86, i15=49643, i16=-128, i17=10, i18=122, i19=74, i20=33682, iArr1[]=new
            int[N];
        double d1=0.22305;
        float f2=-97.993F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -234);
        FuzzerUtils.init(fArr, -26.210F);

        for (int smallinvoc=0; smallinvoc<833; smallinvoc++) vSmallMeth(iFld, -46108, iFld);
        b1 = false;
        if (true) {
            for (i11 = 9; i11 < 376; ++i11) {
                i12 += (i11 ^ iFld);
                for (i13 = i11; i13 < 69; i13++) {
                    float f1=-76.872F;
                    Test.instanceCount += iFld;
                    f1 = i13;
                }
                i15 = 1;
                do {
                    i14 <<= i16;
                    iArr1 = iArr1;
                    Test.instanceCount += (((i15 * i15) + i16) - i11);
                    Test.lArrFld[i11] <<= i14;
                    i16 += (((i15 * i11) + i15) - i12);
                    for (i17 = i15; i17 < 1; ++i17) {
                        iFld -= i17;
                        Test.instanceCount = Test.instanceCount;
                        fArr = fArr;
                        i18 += (i17 - i16);
                        if (b1) break;
                    }
                    iFld += iFld;
                    switch ((i11 % 1) + 117) {
                    case 117:
                        fArr[i11 + 1] -= (float)d1;
                        iArr1 = Test.iArrFld;
                        i19 = -43566;
                        break;
                    }
                    i16 = (int)d1;
                    if (false) break;
                } while (++i15 < 69);
                f2 += (4L + (i11 * i11));
                i20 >>= i13;
                Test.instanceCount += (33L + (i11 * i11));
            }
        } else if (b1) {
            i16 += (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth dMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
