package tests.javafuzzer2760;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=120L;
    public static double dFld=31.115398;
    public float fFld=-120.403F;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9052);
        FuzzerUtils.init(Test.lArrFld, -180L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, long l) {

        int i9=158, i10=-53041, i11=-167, i12=-3229, i13=-12574, i14=240;
        byte by=-40;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 59680L);

        i9 -= (int)Test.dFld;
        for (i10 = 11; i10 < 342; ++i10) {
            i12 = 1;
            do {
                i9 += i12;
                for (i13 = 1; i13 < 1; i13++) {
                    i11 -= (int)Test.instanceCount;
                    i9 -= -40720;
                    i14 = -51;
                    i11 = i9;
                    lArr[i12 - 1] = i14;
                    by *= (byte)Test.instanceCount;
                    i9 -= i10;
                    try {
                        i14 = (-188 % i9);
                        i14 = (-155 / i11);
                        i9 = (-192 / i9);
                    } catch (ArithmeticException a_e) {}
                    i11 = i10;
                }
                Test.instanceCount *= (long)f1;
            } while (++i12 < 5);
        }
        long meth_res = Float.floatToIntBits(f1) + l + i9 + i10 + i11 + i12 + i13 + i14 + by +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i8, float f) {

        float f2=0.473F;
        int i15=-30, i16=3, i17=-177, i18=14790, i19=40329, iArr[][]=new int[N][N];
        long l1=45197L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(lArr1, -44260L);

        i8 = (iMeth(f2, -6973189734607521537L) % (i8 | 1));
        i15 = (int)Test.instanceCount;
        for (i16 = 252; i16 > 1; i16 -= 2) {
            l1 = 1;
            while (++l1 < 13) {
                i15 >>= (int)l1;
                i15 <<= i8;
                iArr[i16][(int)(l1 + 1)] = i15;
                Test.instanceCount = -6;
                iArr[(int)(l1)] = iArr[i16 + 1];
                iArr[i16 - 1][i16 - 1] = (int)1.702F;
                f2 += l1;
                for (i18 = i16; 1 > i18; ++i18) {
                    Test.instanceCount += (i18 * i18);
                }
                lArr1[i16 + 1] <<= -2;
                Test.instanceCount -= l1;
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f) + Float.floatToIntBits(f2) + i15 + i16 + i17 + l1 + i18 + i19
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i, double d, int i1) {

        int i2=-12, i3=214, i4=18500, i5=-11, i6=-59353, i7=-124, i20=-729, i21=37044, i22=-5;
        float f3=0.501F;
        short s=-25250;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-9);

        for (i2 = 299; 13 < i2; i2 -= 3) {
            for (i4 = 1; i4 < 16; i4 += 2) {
                for (i6 = 1; i6 < 3; ++i6) {
                    Test.instanceCount += (((i6 * i4) + i3) - i4);
                    i5 += (i6 * i6);
                    vMeth1(10, f3);
                    i20 += (i6 ^ i6);
                    byArr[i2][(i2 >>> 1) % N] = (byte)s;
                    Test.instanceCount += i21;
                }
                Test.iArrFld[i4 + 1] <<= (int)Test.instanceCount;
                Test.instanceCount += (i4 - i22);
                Test.instanceCount += (((i4 * s) + f3) - Test.instanceCount);
                Test.instanceCount = (long)f3;
            }
            i5 = i2;
            i20 -= s;
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f3)
            + i20 + s + i21 + i22 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=1165, i24=-40935, i25=-5370, i26=220, i27=-14, i28=-10, i29=40625, i30=46984, i31=-92;
        double d1=0.217;
        short s1=11531;
        byte by1=45;

        vMeth(-13, Test.dFld, i23);
        i23 *= i23;
        for (i24 = 17; i24 < 381; i24++) {
            for (i26 = 3; i26 < 69; i26++) {
                i23 += (i26 ^ i25);
                i25 += (i26 * i26);
                i25 += (int)Test.instanceCount;
                Test.instanceCount += (i26 * i26);
                for (d1 = 1; 2 > d1; ++d1) {
                    Test.iArrFld[i26 - 1] >>= i26;
                    i23 = (int)Test.instanceCount;
                    Test.iArrFld[(int)(d1 - 1)] %= (int)(i23 | 1);
                    fFld += i27;
                    Test.instanceCount -= s1;
                    fFld -= s1;
                    Test.instanceCount = i25;
                }
            }
            fFld += i23;
            Test.iArrFld[i24] = (int)Test.instanceCount;
            for (i29 = 4; i29 < 69; i29++) {
                i31 = 1;
                while (++i31 < 2) {
                    Test.iArrFld[i31] *= i27;
                    i30 += (i31 - i26);
                    switch ((((6 >>> 1) % 9) * 5) + 88) {
                    case 131:
                        i30 += (((i31 * fFld) + i31) - i24);
                        break;
                    case 121:
                    case 97:
                        i25 -= by1;
                        dArrFld[i24 - 1] = Test.instanceCount;
                        break;
                    case 93:
                        Test.lArrFld[i24] = (long)Test.dFld;
                        fFld = i29;
                        i28 += (i31 - i31);
                        break;
                    case 100:
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-1624);
                    case 103:
                        i27 = i26;
                        break;
                    case 126:
                        fFld = i25;
                    case 105:
                        i25 >>>= i29;
                        break;
                    case 119:
                        i30 += (((i31 * i28) + i26) - i25);
                        break;
                    default:
                        Test.iArrFld[i31 + 1] |= (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
