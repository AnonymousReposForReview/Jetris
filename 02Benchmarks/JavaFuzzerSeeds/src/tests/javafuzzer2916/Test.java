package tests.javafuzzer2916;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:58:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17410207L;
    public static int iFld=33182;
    public static short sFld=21;
    public static volatile double dFld=-1.3753;
    public volatile boolean bFld=false;
    public static byte byArrFld[]=new byte[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-99);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=-51, i9=-7, i10=59771, iArr1[]=new int[N];
        double d=121.54654;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(lArr, -954556930L);

        for (i8 = 4; i8 < 297; i8++) {
            iArr1[i8 + 1] = i8;
            Test.instanceCount = i8;
            Test.instanceCount = i9;
            Test.iFld = i8;
            switch ((((i9 >>> 1) % 2) * 5) + 35) {
            case 44:
                Test.instanceCount >>= i8;
                d += d;
                lArr[i8] <<= i9;
                i9 -= i8;
                break;
            case 37:
                if (b) {
                    Test.iFld |= -39910;
                    i9 += i8;
                } else {
                    Test.iFld *= i8;
                }
                Test.sFld = (short)i10;
                break;
            default:
                iArr1[i8 + 1] ^= i8;
            }
        }
        long meth_res = i8 + i9 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i10 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l, int i5) {

        float f=0.594F, f1=117.331F;
        int i6=58062, i7=-6, i11=-32013, i12=36, iArr2[]=new int[N];
        double d1=-1.39656;

        FuzzerUtils.init(iArr2, -84);

        for (byte by : Test.byArrFld) {
            f -= (l++);
            for (i6 = 1; i6 < 4; ++i6) {
                f += (((i6 * i4) + i5) - i4);
                f1 += (iMeth1() * i5);
                d1 = 1;
                do {
                    i4 -= (int)-3786096667704679128L;
                } while (++d1 < 2);
                Test.dFld *= i7;
                i5 += i5;
                try {
                    i7 = (-28809 / i5);
                    i5 = (59176019 / i4);
                    i5 = (i5 % i6);
                } catch (ArithmeticException a_e) {}
            }
            if (i5 != 0) {
                vMeth_check_sum += i4 + l + i5 + Float.floatToIntBits(f) + i6 + i7 + Float.floatToIntBits(f1) +
                    Double.doubleToLongBits(d1) + i11 + i12 + FuzzerUtils.checkSum(iArr2);
                return;
            }
            l *= i6;
            for (i11 = 1; i11 < 4; ++i11) {
                iArr2[i11] += i11;
                i4 = i12;
            }
        }
        vMeth_check_sum += i4 + l + i5 + Float.floatToIntBits(f) + i6 + i7 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d1) + i11 + i12 + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i, int i1) {

        int i2=8, i3=-4, i13=106, i14=-54387, i15=32232, iArr3[]=new int[N];
        byte by1=9;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, -172);
        FuzzerUtils.init(lArr1, -524229737L);

        for (i2 = 2; i2 < 121; i2++) {
            vMeth(i2, Test.instanceCount, i1);
            i13 = 1;
            do {
                Test.dFld -= i;
                Test.instanceCount = Test.sFld;
                i1 <<= (int)Test.instanceCount;
                for (i14 = 1; i14 < 1; i14++) {
                    switch (((i13 >>> 1) % 6) + 59) {
                    case 59:
                        by1 += (byte)(i14 * Test.instanceCount);
                        i15 /= (int)(i3 | 1);
                        break;
                    case 60:
                        Test.instanceCount = 101;
                        i = (int)Test.instanceCount;
                        break;
                    case 61:
                        Test.iFld = Test.iFld;
                        break;
                    case 62:
                        iArr3[i14 + 1] = i2;
                        break;
                    case 63:
                        iArr3[i2 + 1] -= -11;
                    case 64:
                        lArr1[i2 - 1] = Test.iFld;
                        break;
                    }
                }
            } while (++i13 < 13);
        }
        long meth_res = i + i1 + i2 + i3 + i13 + i14 + i15 + by1 + FuzzerUtils.checkSum(iArr3) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=20319, i17=-2, i18=-3, i19=214, i20=-224, i21=0, i22=35076, i23=1, i24=30, iArr[]=new int[N];
        double d2=0.18873;
        float f2=2.371F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(lArr2, 21800L);

        iArr[(Test.iFld >>> 1) % N] *= (int)(-167 + Float.intBitsToFloat(iMeth(Test.iFld, Test.iFld)));
        Test.iFld += (int)42.235F;
        bFld = bFld;
        for (i16 = 12; i16 < 285; ++i16) {
            Test.instanceCount = 84;
            i17 = Test.iFld;
        }
        Test.iFld <<= (int)Test.instanceCount;
        for (d2 = 4; 152 > d2; ++d2) {
            switch ((int)((d2 % 4) + 107)) {
            case 107:
                for (i19 = 9; i19 < 169; ++i19) {
                    Test.instanceCount += (i19 + f2);
                    Test.iFld = i18;
                    i20 = i18;
                    Test.instanceCount -= (long)f2;
                    for (i21 = 1; i21 < 2; i21++) {
                        Test.instanceCount |= i21;
                        lArr2[(int)(d2 + 1)] *= i18;
                        Test.iFld -= (int)Test.instanceCount;
                        Test.iFld = i18;
                    }
                    i17 = 25;
                    i22 = Test.iFld;
                    Test.sFld *= (short)-10.115743;
                    Test.iFld -= (int)Test.instanceCount;
                    dArrFld[i19] -= i22;
                }
                i18 += (int)d2;
                i17 = (int)-1.360F;
                Test.instanceCount *= i16;
                break;
            case 108:
            case 109:
                for (i23 = 6; i23 < 169; ++i23) {
                    Test.instanceCount += (i23 - i21);
                }
                if (bFld) break;
                break;
            case 110:
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
