package tests.javafuzzer2564;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:39:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3194792801L;
    public static boolean bFld=true;
    public static short sFld=4706;
    public static int iFld=11;
    public static int iFld1=-6814;
    public static float fFld=1.675F;
    public static long lArrFld[]=new long[N];
    public long lArrFld1[][]=new long[N][N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -36962L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, float f) {

        int i6=169, i7=3, i8=25, i9=41, i10=6, iArr[]=new int[N];
        short s=-26677;
        long lArr[][]=new long[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -2567657729L);
        FuzzerUtils.init(iArr, -18471);
        FuzzerUtils.init(bArr, false);

        i6 = 1;
        do {
            i4 >>= (int)Test.instanceCount;
            for (i7 = 9; i7 > 1; i7--) {
                i5 += i7;
                i8 += i5;
                i4 += s;
                if (Test.bFld) continue;
                switch ((i7 % 5) + 101) {
                case 101:
                    i5 += i7;
                    lArr[i7][i6 + 1] -= Test.instanceCount;
                    i8 = i5;
                    for (i9 = 1; i9 < 2; i9 += 2) {
                        i8 = (int)-28524L;
                        try {
                            i8 = (i6 % -12531);
                            i4 = (iArr[i7] % 253);
                            i4 = (i9 % -48813);
                        } catch (ArithmeticException a_e) {}
                        bArr[i9] = Test.bFld;
                    }
                    break;
                case 102:
                    Test.instanceCount += (i7 - i9);
                    break;
                case 103:
                    i5 += i9;
                    break;
                case 104:
                    i10 = (int)f;
                    break;
                case 105:
                    s = (short)i7;
                    break;
                default:
                    Test.instanceCount |= Test.instanceCount;
                }
            }
        } while (++i6 < 180);
        vMeth2_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + s + i9 + i10 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth1(int i2, int i3) {

        float f1=2.508F;
        int i11=-1, i12=-227, i13=-18908, i14=-2, i15=63716, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 7);

        vMeth2(6, i3, f1);
        i11 = 1;
        while (++i11 < 172) {
            Test.instanceCount *= (long)f1;
            Test.instanceCount >>= Test.instanceCount;
            if (Test.bFld) continue;
            i3 += i11;
            i2 = (int)Test.instanceCount;
        }
        for (i12 = 3; i12 < 144; ++i12) {
            int i16=56842;
            switch (((i12 % 9) * 5) + 90) {
            case 102:
                switch (((i12 % 9) * 5) + 47) {
                case 77:
                    for (i14 = 1; i14 < 11; i14++) {
                        i13 += i15;
                        Test.instanceCount = Test.instanceCount;
                    }
                    i13 += (((i12 * Test.instanceCount) + i12) - Test.instanceCount);
                    i15 >>= i16;
                case 62:
                    i3 += (int)(-5L + (i12 * i12));
                    break;
                case 60:
                    i15 >>= i16;
                case 51:
                case 85:
                    f1 += (i12 * i12);
                    break;
                case 78:
                    i2 = i2;
                case 64:
                    iArr1[i12] = (int)Test.instanceCount;
                case 48:
                    Test.sFld = (short)f1;
                    break;
                case 91:
                    Test.iFld <<= Test.iFld;
                    break;
                }
                break;
            case 97:
                f1 -= 46861;
                break;
            case 122:
                i2 *= (int)Test.instanceCount;
                break;
            case 132:
                if (Test.bFld) break;
            case 115:
                Test.instanceCount += Test.iFld1;
                break;
            case 124:
                Test.instanceCount *= Test.instanceCount;
                break;
            case 105:
                Test.iFld -= (int)Test.instanceCount;
                break;
            case 106:
                Test.instanceCount += (((i12 * i16) + Test.instanceCount) - i16);
                break;
            case 116:
                if (Test.bFld) continue;
                break;
            }
        }
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i, int i1, long l) {

        int i18=-171, i19=36170, i20=-204, i21=31570, i22=61000;
        double d=-65.38260;
        long lArr1[][]=new long[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr1, -5593657664024219355L);
        FuzzerUtils.init(sArr, (short)24250);

        vMeth1(Test.iFld, Test.iFld1);
        for (i18 = 10; i18 < 215; i18++) {
            Test.lArrFld[i18 - 1] = Test.instanceCount;
            i19 = (int)l;
            Test.iFld >>= (int)Test.instanceCount;
            Test.instanceCount *= (long)d;
            i1 += (i18 * i18);
            i20 = 1;
            while (++i20 < 8) {
                Test.bFld = Test.bFld;
                for (i21 = 1; i21 < 1; i21++) {
                    float f2=33.515F;
                    f2 += i;
                    Test.iFld = i21;
                    lArr1 = lArrFld1;
                    sArr[i21] = (short)i1;
                    i22 *= (int)d;
                }
            }
        }
        vMeth_check_sum += i + i1 + l + i18 + i19 + Double.doubleToLongBits(d) + i20 + i21 + i22 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=36975, i24=10, i25=242, i26=9, i28=96, i29=223, i30=-30083, i31=13, iArr2[]=new int[N];
        byte by=106;
        double d1=-2.42726;

        FuzzerUtils.init(iArr2, -45);

        vMeth(Test.iFld, Test.iFld, 2L);
        Test.iFld1 = (int)Test.instanceCount;
        for (i23 = 16; i23 < 323; i23++) {
            i24 += i23;
        }
        for (i25 = 17; i25 < 317; i25++) {
            i24 += (i25 * i26);
            Test.fFld -= i26;
            sArrFld[i25] *= by;
            Test.iFld = (int)Test.instanceCount;
            i28 = 1;
            do {
                Test.iFld = (int)Test.instanceCount;
                Test.instanceCount += (((i28 * i23) + Test.iFld) - i25);
                Test.iFld1 *= -3;
                lArrFld1[i28][i28] = Test.instanceCount;
                Test.instanceCount /= (i25 | 1);
                Test.instanceCount = i24;
            } while (++i28 < 84);
            for (i29 = 1; i29 < 84; ++i29) {
                iArr2 = iArr2;
                iArr2[i29] -= i30;
                i31 = 1;
                while (++i31 < 2) {
                    i30 /= (int)(i23 | 1);
                    Test.instanceCount *= i29;
                    Test.iFld1 *= i26;
                    d1 = Test.instanceCount;
                    Test.fFld *= Test.iFld1;
                    Test.fFld *= by;
                }
                i24 = i28;
                Test.iFld1 ^= (int)Test.instanceCount;
                Test.sFld = (short)Test.instanceCount;
                Test.sFld += (short)(((i29 * i29) + i30) - i24);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
