package tests.javafuzzer1112;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3965160527L;
    public static float fFld=2.152F;
    public static int iFld=53787;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
        FuzzerUtils.init(Test.sArrFld, (short)-32115);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, float f1, int i5) {

        int i6=-13, i7=-188, i8=5, i9=-56289, i10=11, i11=47327, iArr[]=new int[N];
        float f2=0.106F;

        FuzzerUtils.init(iArr, 59);

        for (i6 = 1; 337 > i6; i6++) {
            l += (i6 * i6);
            for (i8 = 5; i8 > 1; --i8) {
                l = i6;
                f1 += (i8 - i9);
                i7 -= (int)Test.instanceCount;
                l &= i5;
                try {
                    iArr[i8 - 1] = (i5 / i6);
                    iArr[i6] = (i7 / i9);
                    iArr[i8 + 1] = (i7 / -54239);
                } catch (ArithmeticException a_e) {}
            }
            f2 = 1;
            while (++f2 < 5) {
                i7 = i8;
                Test.instanceCount += (long)f2;
                for (i10 = 1; i10 < 1; i10++) {
                    i5 -= i5;
                    i11 -= (int)l;
                    i11 = i6;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i=9, i1=58740, i2=-43211, i3=-219, i4=-186, i12=64;
        boolean b=false, bArr[][]=new boolean[N][N];
        double d=20.26056;
        float f3=-2.970F;

        FuzzerUtils.init(bArr, true);

        for (i = 9; i < 283; ++i) {
            i2 = 1;
            do {
                for (i3 = 1; i3 > 1; i3--) {
                    Test.instanceCount = (((i4++) + lMeth(4625L, Test.fFld, i)) << i3);
                    Test.instanceCount += (((i3 * i1) + i) - i);
                    Test.iArrFld[i3 - 1] += (int)Test.instanceCount;
                    i4 += (((i3 * Test.fFld) + Test.fFld) - i2);
                    Test.instanceCount -= i;
                    bArr[i2 - 1][i3 + 1] = b;
                    d *= Test.instanceCount;
                }
                Test.fFld *= i4;
                i4 += i1;
                for (f3 = 1; f3 < 1; f3++) {
                    i12 -= i12;
                    Test.fFld -= i2;
                }
            } while (++i2 < 6);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) +
            i12 + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        float f=2.448F;

        f += (-(iMeth() + -126));
        Test.sArrFld[(Test.iFld >>> 1) % N] = (short)Test.iFld;
        vSmallMeth_check_sum += Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i14=60034, i15=10, i16=-23, i17=-9, i18=186, i19=-66, i20=254, iArr1[]=new int[N];
        double d2=17.20712, dArr[]=new double[N];
        short s=31481;
        long l1=2855037005L, lArr[]=new long[N];
        boolean bArr1[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(dArr, -16.88763);
        FuzzerUtils.init(lArr, 228L);
        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(fArr, 2.336F);

        for (int smallinvoc=0; smallinvoc<543; smallinvoc++) vSmallMeth();
        Test.iFld -= (int)Test.instanceCount;
        bArr1[(Test.iFld >>> 1) % N] = bFld;
        for (i14 = 292; 8 < i14; i14--) {
            Test.iFld = (int)-3674059742764711002L;
            Test.iFld = i14;
            i15 *= (int)Test.instanceCount;
            Test.iFld *= i14;
            Test.iFld -= (int)-46.79045;
        }
        for (double d1 : dArr) {
            lArr[(i15 >>> 1) % N] <<= Test.instanceCount;
            Test.iArrFld[(Test.iFld >>> 1) % N] = i15;
            Test.iArrFld[(i15 >>> 1) % N] >>>= i15;
        }
        for (i16 = 12; i16 < 200; ++i16) {
            i17 = (int)d2;
            for (i18 = 133; i18 > i16; --i18) {
                Test.instanceCount += (1756804030900604153L + (i18 * i18));
                Test.fFld -= Test.instanceCount;
                i19 += (((i18 * Test.instanceCount) + Test.instanceCount) - i17);
                switch ((i18 % 7) + 13) {
                case 13:
                    i19 %= (int)24L;
                    s >>>= (short)i15;
                    Test.instanceCount <<= 59;
                    iArr1 = iArr1;
                    break;
                case 14:
                    Test.iFld = (int)d2;
                    switch (((i18 % 9) * 5) + 14) {
                    case 39:
                        lArr[i18] = i19;
                        for (l1 = i16; l1 < 1; l1++) {
                            Test.iFld &= i18;
                            i17 -= i18;
                        }
                        break;
                    case 47:
                        i19 >>= i19;
                        break;
                    case 54:
                        Test.iFld = 14;
                        break;
                    case 17:
                        fArr[i18 - 1] -= (float)d2;
                        break;
                    case 21:
                        fArr[i16 + 1] -= l1;
                        break;
                    case 51:
                        i17 -= (int)Test.fFld;
                        break;
                    case 52:
                    case 42:
                        Test.fFld += i14;
                        break;
                    case 23:
                        d2 += Test.instanceCount;
                        break;
                    default:
                        i17 += i18;
                    }
                    break;
                case 15:
                    Test.iFld >>= Test.iFld;
                    break;
                case 16:
                    i17 += i18;
                    break;
                case 17:
                    Test.iFld = Test.iFld;
                    break;
                case 18:
                    i20 += i20;
                    break;
                case 19:
                    i17 += i18;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
