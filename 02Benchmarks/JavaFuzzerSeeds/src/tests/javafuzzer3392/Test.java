package tests.javafuzzer3392;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:18:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38L;
    public static volatile long lFld=159L;
    public static float fFld=-2.525F;
    public static byte byFld=113;
    public boolean bFld=false;
    public double dFld=0.11747;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 43865);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i1=-42847, i2=-77, iArr[]=new int[N];
        byte by=12;
        double d=-1.122101;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -236L);
        FuzzerUtils.init(iArr, 5612);

        i1 -= i1;
        Test.instanceCount ^= -4155244564316838139L;
        i1 = (int)Test.instanceCount;
        by <<= (byte)i1;
        lArr[(i1 >>> 1) % N] = i1;
        i2 = 1;
        while (++i2 < 297) {
            i1 += (int)1.398F;
            Test.instanceCount = i2;
            switch ((i2 % 2) + 84) {
            case 84:
                lArr[i2 + 1] = 29317;
                switch ((i2 % 2) + 2) {
                case 2:
                    d = 1;
                    while (++d < 6) {
                        iArr = iArr;
                        Test.lFld <<= 0;
                        lArr[(int)(d + 1)] -= (long)45.40F;
                    }
                    break;
                case 3:
                    i1 += i2;
                    break;
                default:
                    Test.fFld -= i2;
                }
                break;
            case 85:
                i1 ^= i2;
                break;
            }
        }
        vMeth2_check_sum += i1 + by + i2 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i3=-50707, i4=-7, i5=-175, iArr1[]=new int[N];
        boolean b=false;
        short s1=-28498;
        long l=-242L;
        byte by1=-72;
        double d1=71.106207;

        FuzzerUtils.init(iArr1, 162);

        vMeth2();
        for (i3 = 6; i3 < 282; i3++) {
            b = false;
            Test.lFld &= s1;
            s1 = (short)i3;
            iArr1[i3 - 1] += i4;
            for (l = 1; 6 > l; l++) {
                i4 = i5;
                Test.lFld = i4;
                by1 /= (byte)129;
                if (b) continue;
            }
            d1 = Test.fFld;
            Test.instanceCount -= i3;
            iArr1[i3 + 1] -= (int)Test.instanceCount;
        }
        Test.instanceCount = (long)Test.fFld;
        vMeth1_check_sum += i3 + i4 + (b ? 1 : 0) + s1 + l + i5 + by1 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(short s) {

        int i6=-172, i7=49503, i8=-14, iArr2[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 1);
        FuzzerUtils.init(bArr, true);

        vMeth1();
        for (i6 = 325; i6 > 18; --i6) {
            i7 -= (int)Test.lFld;
            switch ((i6 % 6) + 83) {
            case 83:
                i7 -= i7;
                break;
            case 84:
                i7 += i7;
                i7 &= (int)Test.lFld;
                i8 = 1;
                while (++i8 < 5) {
                    Test.instanceCount += -3;
                    Test.byFld += (byte)(i8 | i8);
                    iArr2[i8 - 1] = -3;
                    i7 += (i8 * i8);
                    i7 = (int)Test.lFld;
                    i7 = i8;
                    bArr[i8] = false;
                }
            case 85:
                Test.instanceCount /= (i7 | 1);
                break;
            case 86:
                Test.instanceCount = -2973;
                break;
            case 87:
            case 88:
                bArr[i6] = true;
            }
        }
        vMeth_check_sum += s + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-34721, i9=27364, i10=-14, i11=-10, i12=60571, i13=-175, i14=-12, i15=-13, i16=60575, i17=-193, i18=-1;
        short s2=2579;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2L);

        i |= Math.abs(i);
        vMeth(s2);
        bFld = bFld;
        s2 = (short)Test.instanceCount;
        for (i9 = 335; i9 > 11; --i9) {
            if (bFld) {
                Test.lFld += (long)-113.504F;
                i10 -= i;
                Test.iArrFld[i9 + 1] = (int)Test.instanceCount;
                i10 += i9;
            } else {
                i = (int)Test.lFld;
                Test.instanceCount &= i10;
                for (i11 = 78; i11 > 2; --i11) {
                    i13 = 2;
                    do {
                        i10 = s2;
                        i10 = -8;
                        Test.lFld = i10;
                        Test.instanceCount -= (long)Test.fFld;
                        Test.lFld += (long)Test.fFld;
                    } while (--i13 > 0);
                    for (i14 = 1; i14 < 2; ++i14) {
                        if (bFld) continue;
                        dFld = -50407L;
                    }
                    i12 += (int)Test.fFld;
                    i *= i10;
                    Test.lFld += (i11 - s2);
                    for (i16 = 1; i16 < 2; ++i16) {
                        lArr1[i11] += Test.lFld;
                        Test.byFld = (byte)i18;
                        i *= 12;
                        i15 = 38;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
