package tests.javafuzzer1673;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:21:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-53876L;
    public static boolean bFld=true;
    public static int iFld=-29000;
    public static byte byFld=-29;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, -198);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7, long l2) {

        double d=22.112725, dArr[]=new double[N];
        int i8=-1, i9=-11, i10=-55, i11=-45996, i12=12, i13=12;
        byte by=-28;
        float f2=-2.482F;

        FuzzerUtils.init(dArr, 41.89807);

        for (d = 11; d < 209; ++d) {
            i6 >>= (int)2773257070733007595L;
        }
        for (i9 = 183; i9 > 7; i9 -= 2) {
            for (i11 = i9; i11 < 18; ++i11) {
                switch (((i9 % 2) * 5) + 127) {
                case 131:
                    if (Test.bFld) continue;
                    i7 <<= i8;
                case 133:
                    by >>= (byte)Test.instanceCount;
                    l2 += i7;
                }
                i13 = 1;
                while (++i13 < 1) {
                    i12 -= i9;
                    i7 -= i6;
                    i10 += i13;
                    dArr[i13] -= f2;
                    i10 += (11501 + (i13 * i13));
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + l2 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + by + i13 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(float f1) {

        int i14=55720, i15=-251, iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 64131);
        FuzzerUtils.init(sArr, (short)-13508);

        vMeth2(i14, i14, Test.instanceCount);
        i15 = 1;
        do {
            iArr[i15 - 1] *= (int)Test.instanceCount;
            try {
                i14 = (200 % iArr[(i15 >>> 1) % N]);
                i14 = (i15 % -31377);
                i14 = (-64865 % i15);
            } catch (ArithmeticException a_e) {}
            i14 = (int)Test.instanceCount;
            i14 &= 0;
        } while (++i15 < 250);
        for (short s1 : sArr) {
            iArr[(i14 >>> 1) % N] <<= i14;
        }
        i14 -= i14;
        vMeth1_check_sum += Float.floatToIntBits(f1) + i14 + i15 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(long l, short s, long l1) {

        int i2=56, i3=0, i4=-2, i5=-54944, i16=73;
        float f=-1.1008F;
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -124L);
        FuzzerUtils.init(dArr1, -76.97564);

        i2 = 1;
        while (++i2 < 183) {
            Test.bArrFld[i2] = ((Test.bFld = (-119060819L == lArr[i2])) && Test.bFld);
            i3 = (int)(i2 - -1.53F);
            i3 += 169;
            for (i4 = 1; 9 > i4; i4++) {
                switch ((i4 % 6) + 65) {
                case 65:
                    f = i3;
                    break;
                case 66:
                    vMeth1(f);
                case 67:
                    i5 >>>= 40753;
                    dArr1 = dArr1;
                    i16 = 1;
                    while (++i16 < 2) {
                        f -= i4;
                        i5 *= i5;
                        try {
                            i5 = (i2 % i16);
                            Test.iFld = (i4 % 466833749);
                            Test.iArrFld[i16 - 1] = (i3 / i4);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld += (i16 - Test.iFld);
                    }
                case 68:
                    Test.iFld = i2;
                    break;
                case 69:
                    f += i4;
                    break;
                case 70:
                    Test.iFld = i5;
                    break;
                }
            }
        }
        vMeth_check_sum += l + s + l1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i16 + FuzzerUtils.checkSum(lArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=4932, i1=-223, i17=9, i18=-11556, i19=0, i20=222, i21=-4037, i22=2433, i23=-61, i24=5, i25=-52155,
            i26=-39276, i27=-107, i28=13955, i30=-91, i31=2;
        short s2=19400;
        float f3=13.708F, fArr[][]=new float[N][N];
        double d1=3.36248;

        FuzzerUtils.init(fArr, -120.479F);

        for (i = 5; 227 > i; ++i) {
            i1 -= i;
            vMeth(Test.instanceCount, s2, Test.instanceCount);
            for (i17 = 6; i17 < 113; ++i17) {
                byte by1=15;
                Test.iArrFld[i17 - 1] = -243;
                Test.instanceCount -= by1;
                for (i19 = 2; i19 > 1; --i19) {
                    i1 *= i;
                }
            }
            Test.iArrFld[i + 1] = (int)Test.instanceCount;
            i20 = (int)Test.instanceCount;
        }
        for (i21 = 7; i21 < 134; i21++) {
            Test.iFld -= (int)f3;
        }
        i1 += (int)Test.instanceCount;
        i20 = -7;
        i23 = 1;
        while (++i23 < 129) {
            i24 = 1;
            do {
                i22 = i18;
                Test.instanceCount <<= 33175;
            } while (++i24 < 194);
            i18 >>= i19;
            fArr[i23][i23] = (float)d1;
            i22 = Test.byFld;
            for (i25 = 7; i25 < 194; ++i25) {
                Test.iArrFld = Test.iArrFld;
            }
            i22 += (((i23 * i26) + i18) - i20);
        }
        for (i27 = 4; i27 < 225; i27++) {
            Test.iArrFld[i27 - 1] *= 9;
            for (i30 = 1; i30 < 114; ++i30) {
                i22 = i19;
                i22 = i27;
                i22 -= i18;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
