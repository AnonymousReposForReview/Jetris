package tests.javafuzzer67;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:44:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3510949745091946145L;
    public static float fFld=105.14F;
    public static int iFld=-6;
    public static double dFld=2.2328;
    public static short sFld=24159;
    public boolean bFld=true;
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, int i4) {

        byte by=-96;
        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 11);

        by -= by;
        i3 -= (int)Test.fFld;
        i2 >>= i2;
        Test.instanceCount = i2;
        iArr[(i3 >>> 1) % N][(i3 >>> 1) % N] <<= i2;
        vMeth1_check_sum += i2 + i3 + i4 + by + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth() {

        int i5=-10, i6=-143, i7=8, i8=-62708, iArr1[]=new int[N];
        boolean b=false;
        double dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 0.24410);
        FuzzerUtils.init(sArr, (short)6134);
        FuzzerUtils.init(iArr1, -8);

        vMeth1(18, Test.iFld, Test.iFld);
        Test.iFld = Test.iFld;
        Test.iFld = (int)Test.dFld;
        for (i5 = 9; 240 > i5; i5++) {
            if (b) {
                switch (((i5 % 4) * 5) + 15) {
                case 19:
                    Test.iFld -= Test.sFld;
                    Test.iFld = i5;
                    Test.iFld = i6;
                    for (i7 = 1; i7 < 7; i7++) {
                        Test.iFld = i8;
                        dArr[i7] = Test.iFld;
                        dArr[i5 + 1] /= (Test.iFld | 1);
                        b = b;
                        sArr[i5] -= (short)i6;
                    }
                    break;
                case 24:
                    Test.instanceCount -= (long)Test.dFld;
                case 32:
                    i6 = (int)-5L;
                    break;
                case 27:
                    i6 += (i5 | Test.instanceCount);
                    break;
                default:
                    iArr1[i5 - 1] = Test.iFld;
                }
            } else if (b) {
                i6 <<= i8;
            } else if (b) {
                i6 = i7;
            } else {
                i6 -= i8;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i, float f, int i1) {

        double d=120.56900;
        int i9=59483, i10=1, i11=-57187, i12=-55452;
        boolean b1=true;

        lArrFld[(i >>> 1) % N] += (long)((fMeth() - Test.instanceCount) + 13);
        d = 1;
        do {
            for (i9 = 1; 6 > i9; ++i9) {
                for (i11 = i9; 2 > i11; i11++) {
                    if (b1) {
                        iArrFld[i9 + 1] += (int)Test.fFld;
                        if (i11 != 0) {
                            vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + i9 + i10
                                + i11 + i12 + (b1 ? 1 : 0);
                            return;
                        }
                        Test.iFld -= (int)190L;
                        Test.sFld += (short)(-8 + (i11 * i11));
                    }
                    Test.sFld = (short)-56998;
                    i1 += (-145 + (i11 * i11));
                    Test.iFld -= i11;
                    lArrFld[(int)(d + 1)] >>= i;
                    i1 = i;
                    Test.instanceCount -= i10;
                }
            }
        } while (++d < 267);
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + (b1 ?
            1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i13=46638, i14=46, i15=-8, i16=-9, i17=-191, i18=-186, i19=-28107, i20=-9;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth(10710, Test.fFld, Test.iFld);
        Test.instanceCount *= (long)Test.fFld;
        for (i13 = 1; i13 < 298; i13++) {
            for (i15 = 4; 85 > i15; i15++) {
                i16 += (i15 ^ Test.sFld);
                Test.instanceCount *= Test.sFld;
                switch (((i15 >>> 1) % 8) + 57) {
                case 57:
                    switch (((35222 >>> 1) % 6) + 98) {
                    case 98:
                        i14 >>>= (int)62228L;
                        break;
                    case 99:
                        try {
                            Test.iFld = (-210 / iArrFld[i13]);
                            iArrFld[i15 + 1] = (i13 / iArrFld[i13 + 1]);
                            i16 = (iArrFld[i13 + 1] % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        i17 = 1;
                        while (++i17 < 2) {
                            iArrFld[i17 - 1] = i16;
                            Test.instanceCount = 0;
                            Test.iFld = -9;
                            bArr[i15] = bFld;
                            bFld = bFld;
                            i16 += (((i17 * Test.iFld) + i15) - Test.fFld);
                        }
                        iArrFld[i15 - 1] = i14;
                        Test.fFld *= i15;
                        break;
                    case 100:
                        Test.instanceCount += i15;
                        for (i18 = i13; i18 < 2; i18++) {
                            i14 += i19;
                            Test.fFld *= Test.instanceCount;
                            iArrFld[i15] = i13;
                            Test.instanceCount *= Test.instanceCount;
                            i14 -= (int)Test.fFld;
                        }
                        break;
                    case 101:
                        Test.fFld += (i15 * Test.instanceCount);
                        i20 = 2;
                        do {
                            i16 += i16;
                        } while ((i20 -= 3) > 0);
                    case 102:
                        Test.instanceCount = i17;
                        break;
                    case 103:
                        iArrFld = iArrFld;
                        break;
                    }
                    break;
                case 58:
                    Test.iFld |= Test.sFld;
                    break;
                case 59:
                    i19 += i15;
                    break;
                case 60:
                    i16 += (i15 ^ i13);
                    break;
                case 61:
                case 62:
                    i14 += (11276 + (i15 * i15));
                    break;
                case 63:
                    Test.dFld += i20;
                    break;
                case 64:
                    Test.instanceCount ^= i13;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
