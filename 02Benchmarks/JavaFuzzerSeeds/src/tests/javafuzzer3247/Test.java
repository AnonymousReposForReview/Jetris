package tests.javafuzzer3247;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:34:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8312894629021275328L;
    public int iFld=-36;
    public static volatile byte byFld=-34;
    public static float fFld=-1.320F;
    public static boolean bFld=true;
    public static double dFld=-75.9649;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 20807L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2, float f, double d) {

        boolean b1=false;
        int i3=5, i4=43, i5=4, i6=4, i7=-240, iArr1[]=new int[N];
        double dArr[][]=new double[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 26.101611);
        FuzzerUtils.init(iArr1, 926);
        FuzzerUtils.init(fArr, 51.304F);

        b1 = true;
        f += i3;
        i3 = i3;
        if (b1) {
            for (i4 = 13; i4 < 321; ++i4) {
                dArr[(i4 >>> 1) % N][i4] = l2;
                i5 += (i4 + i4);
                i5 += (int)l2;
                switch (((i3 >>> 1) % 1) + 94) {
                case 94:
                    i5 += i4;
                    for (i6 = 1; 5 > i6; ++i6) {
                        l2 = -43448;
                        Test.instanceCount += (51554 + (i6 * i6));
                        i7 = 44317;
                        i5 -= (int)f;
                    }
                    break;
                default:
                    iArr1 = iArr1;
                }
            }
        } else if (false) {
            i5 = (int)f;
        } else if (b1) {
            dArr[(i4 >>> 1) % N][(i3 >>> 1) % N] *= Test.byFld;
        } else {
            i7 = (int)Test.instanceCount;
        }
        vMeth_check_sum += l2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i3 + i4 + i5 + i6
            + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(long l1, boolean b) {

        int i2=228, i10=-9, i11=9131, i12=19, i13=-1, i14=-14, i15=-12, i16=-161, iArr2[]=new int[N];
        long l3=-11L;
        short s=-7493;

        FuzzerUtils.init(iArr2, 196);

        i2 <<= i2;
        vMeth(l1, 0.665F, 106.8458);
        i2 -= i2;
        for (i10 = 4; i10 < 178; ++i10) {
            for (l3 = 1; l3 < 9; l3++) {
                i13 += (int)l1;
                try {
                    i11 = (iArr2[i10] / i11);
                    i12 = (-1036781952 % i11);
                    i11 = (i13 % -30);
                } catch (ArithmeticException a_e) {}
            }
            for (i14 = 1; i14 < 9; i14++) {
                try {
                    i12 = (i10 / 243);
                    i13 = (i15 % 28629);
                    i12 = (i11 / i11);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += 6;
                i16 = 1;
                do {
                    l1 += (((i16 * Test.fFld) + Test.fFld) - Test.instanceCount);
                    Test.fFld = i10;
                    s *= (short)8328335138634098489L;
                    i11 = 37331;
                } while (++i16 < 2);
            }
        }
        long meth_res = l1 + (b ? 1 : 0) + i2 + i10 + i11 + l3 + i12 + i13 + i14 + i15 + i16 + s +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i=40463, i1=7, i17=-11, i18=189, i19=-46492, i20=-91, i21=-9182, i22=11, i23=62669, iArr3[]=new int[N];
        short s1=10057, sArr[]=new short[N];
        float fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr1, -49.926F);
        FuzzerUtils.init(sArr, (short)26581);
        FuzzerUtils.init(iArr3, 89);
        FuzzerUtils.init(bArr, false);

        Test.instanceCount = (Test.lArrFld[(i >>> 1) % N] = (i++));
        i1 = 1;
        do {
            i >>= iMeth1(Test.instanceCount, Test.bFld);
            fArr1[i1 - 1] -= i;
            i += i;
            i -= i1;
        } while (++i1 < 352);
        for (i17 = 10; i17 < 236; i17++) {
            for (i19 = 1; i19 < 7; ++i19) {
                switch (i17 + 28) {
                case 28:
                    sArr[i19] <<= (short)10L;
                    if (false) break;
                    i21 = 1;
                    while (++i21 < 2) {
                        iArr3[i17 - 1] += (int)l;
                        i20 -= (int)l;
                    }
                    l = i20;
                case 29:
                    Test.instanceCount += (long)(-1.825F + (i19 * i19));
                    break;
                case 30:
                    i18 >>= 6;
                    break;
                case 31:
                    i20 = (int)Test.instanceCount;
                    break;
                case 32:
                    iArr3[i19 - 1] >>>= i20;
                case 33:
                    fArr1[(i21 >>> 1) % N] = -7;
                    break;
                case 34:
                    i20 = i17;
                    break;
                case 35:
                case 36:
                    Test.instanceCount += i19;
                    break;
                case 37:
                    Test.bFld = true;
                    break;
                case 38:
                    iArr3[i19 + 1] <<= -35;
                    break;
                case 39:
                    l ^= 9;
                    break;
                case 40:
                    Test.fFld += (i19 + i1);
                case 41:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 42:
                    Test.instanceCount += i18;
                    break;
                case 43:
                    i18 >>= -118;
                    break;
                case 44:
                    i18 ^= Test.byFld;
                    break;
                case 45:
                    Test.instanceCount -= 1166091223L;
                    break;
                case 46:
                    Test.instanceCount += (i19 ^ i19);
                    break;
                case 47:
                    i20 = i1;
                    break;
                case 48:
                    l += i19;
                    break;
                case 49:
                    i18 = i22;
                    break;
                case 50:
                    i22 >>= i17;
                    break;
                case 51:
                    fArr1[i17] = -1;
                    break;
                case 52:
                    Test.fFld += -7;
                case 53:
                    i >>>= i;
                case 54:
                    i22 &= i;
                    break;
                case 55:
                    fArr1[i17] = s1;
                    break;
                case 56:
                case 57:
                case 58:
                    i20 = -9178;
                case 59:
                case 60:
                    try {
                        i22 = (i22 % iArr3[i19 + 1]);
                        iArr3[i17] = (17076 % iArr3[i17 + 1]);
                        iArr3[i19 + 1] = (i20 % i18);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 61:
                    if (Test.bFld) break;
                    break;
                case 62:
                    Test.byFld = (byte)-10;
                case 63:
                    i20 *= i22;
                    break;
                case 64:
                    i20 += i;
                case 65:
                    i = i20;
                case 66:
                    l >>= i1;
                    break;
                case 67:
                    i += (i19 | i18);
                    break;
                case 68:
                    i18 *= i23;
                case 69:
                    iArr3[i19] <<= i21;
                    break;
                case 70:
                    Test.fFld -= l;
                case 71:
                    Test.fFld += i17;
                    break;
                case 72:
                    if (i1 != 0) {
                    }
                case 73:
                    i20 -= (int)Test.instanceCount;
                    break;
                case 74:
                    if (i1 != 0) {
                    }
                    break;
                case 75:
                    iArr3[i19] = i19;
                    break;
                case 76:
                    Test.dFld += i;
                    break;
                case 77:
                    Test.fFld -= i23;
                    break;
                case 78:
                    Test.fFld = 82;
                    break;
                case 79:
                    i >>= s1;
                    break;
                case 80:
                    Test.instanceCount >>= 6;
                case 81:
                    Test.fFld += (i19 + i18);
                    break;
                case 82:
                    i22 += (int)Test.dFld;
                    break;
                case 83:
                    i23 = i22;
                    break;
                case 84:
                    i18 += (54 + (i19 * i19));
                    break;
                case 85:
                    i22 += (((i19 * i18) + Test.fFld) - i23);
                    break;
                case 86:
                    i18 += (int)Test.instanceCount;
                    break;
                case 87:
                    i18 %= (int)((long)(Test.fFld) | 1);
                    break;
                case 88:
                    l -= i17;
                    break;
                case 89:
                    bArr[i19 - 1] = Test.bFld;
                    break;
                case 90:
                    Test.dFld %= 68;
                    break;
                case 91:
                    try {
                        i = (i20 / 2126434130);
                        i20 = (i17 / iArr3[i19 + 1]);
                        i18 = (i1 / i21);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 92:
                    Test.byFld = (byte)s1;
                case 93:
                    Test.byFld = (byte)Test.dFld;
                    break;
                case 94:
                    iArr3[i17 - 1] += (int)Test.dFld;
                    break;
                case 95:
                    i23 -= i23;
                    break;
                case 96:
                    l *= i19;
                case 97:
                    i18 += (int)Test.dFld;
                }
            }
        }
        long meth_res = l + i + i1 + i17 + i18 + i19 + i20 + i21 + i22 + s1 + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i24=-7, i25=2, i26=-42237, i27=6, i28=71, i29=-9, i30=-4, i31=59791, i32=-19667, iArr[]=new int[N];
        short s2=2658;
        long l4=-39483L;

        FuzzerUtils.init(iArr, -10);

        iFld = 198;
        iArr[(iFld >>> 1) % N] *= ((iMeth(Test.instanceCount) - iFld) * iFld);
        for (i24 = 7; i24 < 193; i24++) {
            Test.lArrFld[i24] += (long)1.884F;
            i26 = 1;
            while (++i26 < 135) {
                for (i27 = 1; 1 > i27; i27++) {
                    Test.byFld |= (byte)-68;
                    iArr[i27 + 1] = i25;
                    iFld *= i28;
                    Test.fFld = i25;
                    i25 = iFld;
                    dArrFld[i27] *= i28;
                    Test.instanceCount *= i25;
                    Test.fFld += i27;
                }
                for (i29 = 1; i29 < 1; i29++) {
                    s2 += (short)-65533;
                    if (Test.bFld) break;
                    i25 += (i29 * i29);
                    i30 += (((i29 * i28) + i27) - i29);
                }
                Test.instanceCount = Test.instanceCount;
                iFld = (int)l4;
                iFld += s2;
                iFld = (int)-26959L;
                Test.lArrFld[i26] = (long)Test.fFld;
                Test.fFld *= iFld;
                iArr[i24] = (int)Test.dFld;
                i30 += (i26 - i28);
            }
            for (i31 = 5; i31 < 135; ++i31) {
                iArr = FuzzerUtils.int1array(N, (int)158);
                Test.fFld = i28;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
