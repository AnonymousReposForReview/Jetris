package tests.javafuzzer2933;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:20:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=171L;
    public static int iFld=10;
    public double dFld=-57.58507;
    public static short sFld=-31671;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1141274536L);
        FuzzerUtils.init(Test.iArrFld, -63234);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        double d=124.44337;
        int i4=-45, i5=1, i6=-234, i7=-183, i8=0;
        long l2=63703L;

        for (d = 13; 305 > d; ++d) {
            i4 += (int)(d + i4);
            i4 *= i4;
            Test.lArrFld[(int)(d - 1)] -= i4;
            Test.instanceCount += (long)((long)d | i4);
            i4 *= i4;
            for (i5 = 1; i5 < 6; i5++) {
                short s=11369;
                l2 = s;
                Test.iArrFld[(int)(d - 1)][i5 - 1] = (int)Test.instanceCount;
                switch ((i5 % 2) + 69) {
                case 69:
                case 70:
                    for (i7 = 1; i7 < 2; ++i7) {
                        try {
                            i8 = (Test.iArrFld[(int)(d)][(i6 >>> 1) % N] / -248);
                            i8 = (i7 / i6);
                            i4 = (Test.iArrFld[i5][i5 + 1] % -36312);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                i4 = i7;
                Test.instanceCount += -181;
                i4 = -28856;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + l2 + i7 + i8;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i2, int i3, byte by) {

        float f1=-77.1005F, f2=-49.873F;
        double d1=-2.4119;
        int i9=139, i10=35, i11=13, i12=-129;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);

        f1 = 1;
        do {
            lArr[(i3 >>> 1) % N] -= Long.reverseBytes(lMeth());
            d1 = i3;
            i3 = i2;
            i2 += (int)(f1 * f1);
            i2 += (int)f1;
            Test.instanceCount >>= -10514;
            for (i9 = 1; i9 < 8; ++i9) {
                Test.iArrFld[(int)(f1 + 1)][(int)(f1 + 1)] = i3;
                Test.iArrFld[(int)(f1 - 1)][(int)(f1)] += (int)Test.instanceCount;
                Test.instanceCount += (i9 ^ i10);
                for (i11 = 1; i11 < 2; ++i11) {
                    f2 += 12877;
                    i2 += (((i11 * i11) + i11) - i9);
                    Test.instanceCount = i3;
                }
            }
        } while (++f1 < 203);
        vMeth1_check_sum += i2 + i3 + by + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i9 + i10 + i11 +
            i12 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, float f, long l1) {

        int i=6, i1=-4, i13=-23208, i14=5, i15=6;
        short s1=14344;
        boolean b=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 24.267F);

        for (i = 2; i < 319; i++) {
            vMeth1(i1, i, (byte)(23));
            s1 *= (short)l;
            i13 = 1;
            do {
                if (b) break;
                Test.iArrFld[i13 - 1][i13] -= -64049;
                i1 |= -6;
                i1 = i1;
                for (i14 = 1; i14 < 3; i14++) {
                    i15 >>= i1;
                    try {
                        i1 = (i14 % i);
                        i15 = (i / i14);
                        i15 = (-978466701 % Test.iArrFld[i14][i13 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i15 += (-11 + (i14 * i14));
                    i15 += i1;
                    Test.iFld -= i14;
                    fArr[i - 1][i + 1] += i14;
                }
            } while ((i13 += 2) < 5);
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + l1 + i + i1 + s1 + i13 + (b ? 1 : 0) + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f3=-113.453F;
        int i16=205, i17=38730, i18=7, i19=8, i20=-218, i21=9, i22=-116, i23=-241, i24=-58042, i25=-69, i26=-150,
            i27=24078, iArr[]=new int[N];
        boolean b1=true;
        byte by1=60;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.113410);
        FuzzerUtils.init(iArr, 182);

        vMeth(-8L, f3, Test.instanceCount);
        dArr[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i16 = 313; i16 > 19; i16 -= 3) {
            for (i18 = 9; 256 > i18; ++i18) {
                if (b1) break;
                Test.instanceCount = -203;
                Test.instanceCount += Test.instanceCount;
            }
        }
        Test.iArrFld[(i18 >>> 1) % N][(Test.iFld >>> 1) % N] <<= (int)Test.instanceCount;
        f3 = by1;
        dFld -= i19;
        for (i20 = 14; i20 < 301; ++i20) {
            i17 += (-14672 + (i20 * i20));
            i22 = 88;
            do {
                for (i23 = 1; i23 < 1; ++i23) {
                    i24 += (i23 * i23);
                    i24 = i21;
                    if (b1) break;
                    Test.iArrFld[i20 - 1][i23] = i16;
                    b1 = true;
                    Test.instanceCount = -8;
                }
                dFld -= i21;
                f3 += i24;
                i24 = Test.iFld;
                i25 = i23;
                switch (((i22 >>> 1) % 2) + 15) {
                case 15:
                    for (i26 = 1; i26 > 1; --i26) {
                        f3 = -60;
                        i27 = Test.sFld;
                        if (b1) continue;
                        Test.iFld = -2;
                    }
                    break;
                case 16:
                    i25 += (int)(-14L + (i22 * i22));
                    break;
                default:
                    iArr[i20 + 1] *= -8;
                }
            } while (--i22 > 0);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
