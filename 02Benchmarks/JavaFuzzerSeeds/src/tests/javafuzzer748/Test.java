package tests.javafuzzer748;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:04:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1154605666916091235L;
    public static double dFld=-1.33120;
    public static boolean bFld=false;
    public volatile float fFld=0.590F;
    public float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -174);
        FuzzerUtils.init(Test.lArrFld, 134L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3, long l1, long l2) {

        int i4=-1, i5=10, i6=32, i7=-29895, i8=-2, i9=-38;
        double d=121.55637;
        float f1=1.803F;

        for (i4 = 5; i4 < 199; i4++) {
            for (d = 1; 8 > d; ++d) {
                for (i7 = (int)(d); 2 > i7; i7++) {
                    i3 = (int)f1;
                    i6 = i8;
                    l1 <<= -151;
                    i3 = -20475;
                    l2 -= i5;
                    l1 = i4;
                    i8 >>>= i7;
                    if (Test.bFld) continue;
                }
                i8 += (int)(((d * i7) + f1) - i5);
            }
            i9 = 1;
            while (++i9 < 8) {
                i8 += (i9 ^ Test.instanceCount);
                if (Test.bFld) break;
            }
        }
        long meth_res = i3 + l1 + l2 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + Float.floatToIntBits(f1) +
            i9;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(long l, int i2, float f) {

        int i10=-59116, i11=28409, i12=-16624, i13=19614, i14=50980;
        long l3=-131L;
        double dArr[][]=new double[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, -2.87439);
        FuzzerUtils.init(sArr, (short)-11027);

        Test.instanceCount = ((i2 << -4) - sMeth(i2, l, l));
        for (i10 = 13; i10 < 339; i10++) {
            i2 += i10;
            for (l3 = 1; l3 < 5; l3++) {
                for (i13 = 1; i13 < 2; i13++) {
                    dArr[(int)(l3 - 1)] = dArr[i13 + 1];
                    i12 -= -64043;
                    i14 -= i2;
                    Test.bFld = Test.bFld;
                }
                i14 *= i11;
                switch (((i11 >>> 1) % 9) + 6) {
                case 6:
                    i14 += (int)(l3 * l3);
                    i2 -= i14;
                    i11 <<= 33434;
                    sArr[i10 + 1] += (short)Test.dFld;
                    break;
                case 7:
                case 8:
                    i12 &= i14;
                    break;
                case 9:
                    i2 -= (int)l;
                    break;
                case 10:
                    i14 -= (int)Test.instanceCount;
                    break;
                case 11:
                    l = i2;
                    break;
                case 12:
                    Test.iArrFld[(int)(l3 - 1)] = i2;
                case 13:
                    try {
                        i12 = (i13 / 8);
                        i11 = (i14 % 43534);
                        i2 = (i10 / -2131);
                    } catch (ArithmeticException a_e) {}
                case 14:
                    if (Test.bFld) continue;
                    break;
                default:
                    i12 -= i12;
                }
            }
        }
        vMeth1_check_sum += l + i2 + Float.floatToIntBits(f) + i10 + i11 + l3 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth() {

        int i1=10, i15=-5, i16=-49537, i17=-64139, i18=-99, i19=-1, iArr[]=new int[N];
        short s=20916;

        FuzzerUtils.init(iArr, 57549);

        i1 -= (++iArr[(i1 >>> 1) % N]);
        iArr[(227 >>> 1) % N] += (int)(++Test.dFld);
        vMeth1(Test.instanceCount, i1, fFld);
        for (i15 = 20; i15 < 387; i15++) {
            Test.instanceCount += i15;
            if (Test.bFld) {
                for (i17 = 1; i17 < 5; i17++) {
                    i18 = i18;
                    i16 += (i17 | i18);
                    fArrFld[i15 + 1] = i17;
                    i19 = 1;
                    while (++i19 < 2) {
                        Test.instanceCount >>= 60098;
                        Test.instanceCount += (i19 * fFld);
                        i16 *= s;
                        Test.instanceCount += (i19 * i19);
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i15 + i16 + i17 + i18 + i19 + s + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-3, i20=39164, i21=2, i22=54, i23=-14, i24=-9, i25=-59273, i26=-40933, i27=220, i28=48;
        short s1=755;
        double d1=107.115840;
        byte by=2;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i *= (int)((fArrFld[(-1 >>> 1) % N] = i) - i);
        vMeth();
        for (i20 = 15; i20 < 347; i20 += 2) {
            i = (int)-14116L;
            Test.instanceCount -= -55116;
            for (i22 = 2; 151 > i22; ++i22) {
                i23 = (int)fFld;
                if (Test.bFld) continue;
                i += (int)Test.dFld;
            }
            s1 = (short)i22;
            for (d1 = 5; d1 < 151; ++d1) {
                for (i25 = 2; i20 < i25; i25 -= 3) {
                    by *= (byte)d1;
                    i23 >>= -143;
                    i += (int)fFld;
                    try {
                        i26 = (-25 % i);
                        Test.iArrFld[i25 - 1] = (i26 / 194);
                        i = (i / -228);
                    } catch (ArithmeticException a_e) {}
                }
                switch (((i21 >>> 1) % 10) + 49) {
                case 49:
                    i21 |= -29995;
                    for (i27 = 1; 2 > i27; ++i27) {
                        Test.instanceCount = i26;
                        Test.instanceCount -= 1187725142L;
                        Test.iArrFld[(int)(d1 + 1)] -= (int)fFld;
                        i23 -= i25;
                        by >>= (byte)i22;
                        i24 += (-133 + (i27 * i27));
                        by += (byte)5;
                        i = (int)-1804978751L;
                        i21 += (i27 * fFld);
                        s1 += (short)i28;
                    }
                    break;
                case 50:
                case 51:
                    i21 += (int)(d1 - Test.instanceCount);
                    break;
                case 52:
                    fFld = i24;
                case 53:
                    i = s1;
                case 54:
                    Test.lArrFld[i20 - 1] = i21;
                case 55:
                    i21 *= (int)-39.127969;
                    break;
                case 56:
                    i21 = (int)Test.instanceCount;
                case 57:
                    bArr = bArr;
                    break;
                case 58:
                    Test.dFld += by;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
