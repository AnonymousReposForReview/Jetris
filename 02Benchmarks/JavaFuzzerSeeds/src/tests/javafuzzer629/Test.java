package tests.javafuzzer629;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:51:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38862L;
    public static double dFld=108.74930;
    public static volatile float fFld=66.605F;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)12594);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(byte by1, int i14, int i15) {

        float f1=-1.925F;
        int i16=133, i17=-80, i18=146, i19=163, i20=44742, i21=-60;
        boolean b1=true, b2=false;

        i14 = i14;
        f1 -= i15;
        for (i16 = 9; 290 > i16; i16 += 3) {
            for (i18 = 1; i18 < 17; i18++) {
                b1 = b2;
                if (false) break;
                i17 = -18378;
                b2 = b2;
                f1 = (float)Test.dFld;
            }
            Test.dFld += i14;
            i19 = i17;
            i15 += (i16 | Test.instanceCount);
            for (i20 = 1; i20 < 17; i20 += 2) {
                i19 >>= 5;
                i17 += (((i20 * f1) + i16) - i15);
            }
        }
        long meth_res = by1 + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + (b2 ? 1 :
            0) + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l1) {

        int i9=8, i10=-17028, i11=-59, i12=-29282, i13=4, iArr1[]=new int[N];
        byte by2=121;
        boolean b3=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 1);
        FuzzerUtils.init(lArr, -10L);

        i9 = 350;
        while (--i9 > 0) {
            iArr1[i9 - 1] -= i9;
            for (i10 = 5; i10 > 1; --i10) {
                i11 += (i10 ^ l1);
                i11 = iArr1[i9 + 1];
                for (i12 = 2; 1 < i12; --i12) {
                    lArr[i10] <<= (long)(l1 * ((--Test.dFld) + (++l1)));
                    Test.instanceCount = lMeth(by2, i10, i12);
                    iArr1[i9] = (int)l1;
                    i11 += (int)Test.instanceCount;
                    b3 = b3;
                    i11 = i11;
                }
            }
            if (b3) {
                Test.instanceCount = -32;
            }
            lArr[i9 - 1] += l1;
        }
        vMeth1_check_sum += l1 + i9 + i10 + i11 + i12 + i13 + by2 + (b3 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(boolean b, int i, float f) {

        int i1=33, i2=119, i3=-47364, i4=-56240, i5=-4, i6=-27649, i7=-144, i8=13, iArr[]=new int[N];
        byte by=-56;
        double d=-65.121222;
        short s=16761;
        long l=4628638473455811255L;

        FuzzerUtils.init(iArr, 4);

        for (i1 = 307; i1 > 7; --i1) {
            iArr[i1] -= (int)(-(by += (byte)(f--)));
            for (i3 = 1; i3 < 6; i3++) {
                for (i5 = 1; 2 > i5; i5++) {
                    i = Test.sArrFld[i1];
                    i *= (int)(iArr[i5] -= (int)d);
                    s += (short)(--i6);
                }
                if (Integer.reverseBytes(i4--) < Math.min((int)(i5 + (--f)), i2)) break;
                for (i7 = i3; 2 > i7; ++i7) {
                    i += s;
                    Test.instanceCount += (i7 * i6);
                    s = (short)(((-58441 - Math.min(-136, i)) - (i8 - i1)) + (i2 = i5));
                    l += i7;
                    i2 += (((i7 * i2) + l) - i8);
                    vMeth1(-10L);
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i + Float.floatToIntBits(f) + i1 + i2 + by + i3 + i4 + i5 + i6 +
            Double.doubleToLongBits(d) + s + i7 + i8 + l + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b4=true;
        int i22=200, i23=10;

        vMeth(b4, 36717, Test.fFld);
        for (i22 = 332; i22 > 3; i22--) {
            i23 &= i23;
            i23 += (-83 + (i22 * i22));
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
