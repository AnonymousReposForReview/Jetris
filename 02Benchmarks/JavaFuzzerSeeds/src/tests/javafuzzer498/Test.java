package tests.javafuzzer498;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:41:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=36712L;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8703);
        FuzzerUtils.init(Test.fArrFld, 22.984F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, long l, int i3) {

        int i4=243, i5=-83, i6=2, i7=-51528, iArr1[]=new int[N];
        float f1=117.691F;

        FuzzerUtils.init(iArr1, 37878);

        i2 *= i2;
        for (i4 = 14; 373 > i4; ++i4) {
            i2 += (((i4 * i4) + Test.instanceCount) - i3);
            try {
                iArr1[i4 + 1] = (i4 % i3);
                i3 = (i2 % 29186);
                iArr1[i4 + 1] = (47914 % iArr1[i4]);
            } catch (ArithmeticException a_e) {}
            i3 &= (int)l;
        }
        i2 *= i4;
        i6 = 1;
        do {
            l += Test.instanceCount;
            f1 += (((i6 * l) + Test.instanceCount) - i4);
            i7 = 1;
            do {
                i5 += (i7 * i7);
                i3 -= -53157;
                i5 += (i7 * i7);
                i2 -= i4;
                if (i6 != 0) {
                    vMeth2_check_sum += i2 + l + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
            } while (++i7 < 5);
        } while (++i6 < 310);
        vMeth2_check_sum += i2 + l + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i1=57877, i8=157, i9=5, i10=54086, i11=32232, i12=-30798, iArr[]=new int[N];
        float f=-2.990F;
        byte by=54;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -31606);
        FuzzerUtils.init(lArr, -1894703233L);

        i1 &= (int)((i1 = (int)(f + i1)) - (-(++i1)));
        i1 -= (int)(--Test.instanceCount);
        i1 *= (iArr[(i1 >>> 1) % N]--);
        vMeth2(i1, Test.instanceCount, i1);
        for (i8 = 19; i8 < 314; ++i8) {
            i1 = 13;
            iArr[i8 + 1] = (int)f;
            for (i10 = 1; i10 < 6; i10++) {
                i11 *= 2;
            }
            i9 += i8;
            i9 -= (int)f;
        }
        i1 = i10;
        i12 = 1;
        while (++i12 < 380) {
            iArr[i12 + 1] &= i8;
        }
        lArr[(i12 >>> 1) % N] = by;
        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + by + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i13=105, i14=-11, i15=-167, i16=-45, i17=-86, i18=62, i19=159;
        float f2=-110.280F;
        double d=0.59416, dArr[]=new double[N];
        byte by1=-26;

        FuzzerUtils.init(dArr, 34.31816);

        vMeth1();
        for (i13 = 15; 307 > i13; i13++) {
            f2 = 1;
            do {
                dArr[(int)(f2)] += Test.instanceCount;
                i14 += (int)f2;
                i15 = 1;
                while (++i15 < 1) {
                    i14 += i15;
                    i14 += i14;
                }
                Test.instanceCount = 38432;
            } while (++f2 < 6);
            for (i16 = 1; i16 < 6; i16 += 3) {
                for (d = 1; d < 6; d++) {
                    i17 += i19;
                    by1 -= (byte)d;
                    i17 -= (int)f2;
                    i17 += (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + i17 + Double.doubleToLongBits(d) + i18 +
            i19 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i20=718, i21=-59906, i22=129, i23=3, i24=-5, i25=19760, i26=-34316, i27=-5294, i28=-8;
        short s=14700;
        double d1=-2.46468;
        float f3=67.190F;
        byte by2=96;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        i *= (Math.max(i, i) >>> (++i));
        vMeth();
        i20 = 1;
        do {
            s = (short)i20;
            i *= (int)d1;
            for (i21 = i20; 127 > i21; ++i21) {
                d1 = i20;
                f3 *= Test.instanceCount;
                try {
                    i = (i21 / i);
                    i = (-31 % i);
                    Test.iArrFld[i20] = (i21 / Test.iArrFld[i20 + 1]);
                } catch (ArithmeticException a_e) {}
                i = i21;
            }
            for (i23 = 127; i23 > 5; --i23) {
                Test.instanceCount -= i20;
            }
            switch (((i20 % 7) * 5) + 46) {
            case 68:
                Test.fArrFld[i20 - 1] -= i23;
                i24 = (int)Test.instanceCount;
                if (Test.bFld) {
                    for (i25 = i20; 127 > i25; ++i25) {
                        i24 >>= (int)Test.instanceCount;
                        switch ((((i >>> 1) % 9) * 5) + 33) {
                        case 40:
                            for (i27 = 1; i27 < 1; ++i27) {
                                i24 += i;
                                i24 += i27;
                                s -= (short)i22;
                                i22 += (i27 - i25);
                            }
                            break;
                        case 50:
                            switch (((i20 % 4) * 5) + 34) {
                            case 48:
                                Test.iArrFld[i20 - 1] -= i28;
                            case 51:
                                if (Test.bFld) continue;
                                i22 = 3;
                                if (Test.bFld) break;
                                i28 += i24;
                                break;
                            case 35:
                                if (Test.bFld) break;
                                break;
                            case 52:
                                i24 += i25;
                            default:
                                i26 >>= (int)51L;
                            }
                        case 36:
                            i28 += (((i25 * i) + Test.instanceCount) - f3);
                            break;
                        case 56:
                            i22 = i22;
                            break;
                        case 73:
                            f3 += i;
                        case 34:
                            i24 += (0 + (i25 * i25));
                            break;
                        case 44:
                            Test.iArrFld[i20 + 1] = by2;
                            break;
                        case 64:
                            s *= (short)i26;
                        case 70:
                        default:
                            Test.instanceCount = Test.instanceCount;
                        }
                    }
                }
            case 76:
                i24 = i20;
            case 71:
                i26 = (int)Test.instanceCount;
                break;
            case 69:
                s += (short)i20;
                break;
            case 64:
                bArr[(i26 >>> 1) % N] = Test.bFld;
                break;
            case 77:
                Test.instanceCount <<= i24;
                break;
            case 63:
                Test.iArrFld = Test.iArrFld;
                break;
            }
        } while (++i20 < 197);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
