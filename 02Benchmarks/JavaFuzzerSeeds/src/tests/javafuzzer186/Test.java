package tests.javafuzzer186;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:35:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-57505L;
    public boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -139);
        FuzzerUtils.init(Test.iArrFld1, 30989);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=-5, i5=-252, i6=-156, i7=-8987, i8=-10, i9=-111, i10=-61;
        boolean b=true;
        float f1=11.448F, fArr[]=new float[N];
        short s=-4592;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 80.122024);
        FuzzerUtils.init(fArr, 42.765F);
        FuzzerUtils.init(lArr, -159L);

        for (i4 = 2; i4 < 202; i4++) {
            for (i6 = 1; i6 < 8; ++i6) {
                if (b) break;
                dArr[i4] = Test.instanceCount;
                if (b) {
                    i7 *= i6;
                } else {
                    for (i8 = i6; i8 < 2; ++i8) {
                        i7 += i8;
                        i9 = i6;
                        switch (((i4 % 7) * 5) + 48) {
                        case 83:
                        case 77:
                            switch (((i7 >>> 1) % 6) + 123) {
                            case 123:
                            case 124:
                                i7 += (10 + (i8 * i8));
                                Test.instanceCount <<= Test.instanceCount;
                                Test.iArrFld[i4 - 1] += i5;
                                i7 += (((i8 * i5) + i7) - f1);
                                break;
                            case 125:
                                fArr = FuzzerUtils.float1array(N, (float)-53.411F);
                            case 126:
                                i5 = s;
                                break;
                            case 127:
                                Test.instanceCount |= i7;
                            case 128:
                                i9 += (int)Test.instanceCount;
                                break;
                            default:
                                Test.instanceCount += (i8 ^ i7);
                            }
                            break;
                        case 52:
                            Test.iArrFld[i4 + 1] = s;
                        case 79:
                            if (b) break;
                            break;
                        case 55:
                            Test.iArrFld[i8 - 1] += i4;
                            break;
                        case 62:
                            lArr[i4 - 1] *= i10;
                            break;
                        case 65:
                            i5 += i8;
                        }
                    }
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) + s + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        double d1=2.81844;
        long l=54795L;
        int i1=43861, i2=7, i3=-70;
        float f2=-106.273F;

        Test.instanceCount = (long)(--d1);
        for (l = 213; l > 2; l--) {
            for (i2 = 1; i2 < 8; i2++) {
                switch ((int)(((l % 5) * 5) + 77)) {
                case 94:
                    vMeth2();
                    i1 ^= (int)1625109487L;
                    i1 = (int)f2;
                    break;
                case 96:
                    i3 += (int)Test.instanceCount;
                    i3 = (int)l;
                    i3 = (int)f2;
                    i3 -= i1;
                    break;
                case 78:
                    Test.iArrFld[i2 + 1] <<= i3;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)104);
                    i1 >>>= i2;
                    Test.instanceCount += i2;
                    break;
                case 86:
                    i3 = 96;
                case 92:
                    d1 -= i2;
                    break;
                default:
                    i3 = (int)d1;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + l + i1 + i2 + i3 + Float.floatToIntBits(f2);
    }

    public static void vMeth(double d) {

        int i11=-189, i12=49370, i13=-39048, i14=-56770, i15=0, i16=4;
        byte by=69;
        float f3=-6.264F;
        short s1=26204;

        vMeth1();
        i11 += i11;
        for (i12 = 11; 238 > i12; i12++) {
            Test.instanceCount += (28 + (i12 * i12));
            d += Test.instanceCount;
            i13 = i13;
            for (i14 = 1; i14 < 7; i14++) {
                i13 += (i14 | i12);
                i15 *= i12;
                i15 += (i14 + by);
                Test.iArrFld1[i12 - 1] += i13;
                for (f3 = 1; f3 < 2; ++f3) {
                    s1 = (short)i16;
                    i13 = 121;
                    Test.instanceCount >>= 7245L;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + by + Float.floatToIntBits(f3) +
            i16 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=8302, i17=0, i18=3, i19=-12, i20=-147, i21=136, i22=49611, i23=-8, iArr[][]=new int[N][N];
        float f=-2.403F;
        double d2=84.60592;
        byte by1=-91;
        long l1=-15L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(lArr1, -8L);

        i += (int)(f + (i--));
        vMeth(d2);
        for (i17 = 143; i17 > 7; i17 -= 2) {
            Test.bArrFld[i17] = bFld;
            by1 += (byte)(-32608L + (i17 * i17));
            i19 = 1;
            while (++i19 < 368) {
                i -= i20;
                i18 = i21;
                iArr[i19 - 1] = FuzzerUtils.int1array(N, (int)-220);
                i22 = 1;
                while ((i22 -= 3) > 0) {
                    if (bFld) {
                    } else if (bFld) {
                        Test.instanceCount += (-2 + (i22 * i22));
                        i18 -= i19;
                        lArr1[i22] -= i22;
                    }
                }
                if (true) continue;
                lArr1[i17 - 1] >>>= -228;
                f += -13;
                i21 += (i19 * i19);
            }
            d2 *= 6L;
            i21 += (((i17 * Test.instanceCount) + i22) - i18);
            i23 = 1;
            do {
                i18 = (int)12L;
                i *= i19;
                d2 -= i19;
                i = (int)Test.instanceCount;
                i += (int)d2;
            } while (++i23 < 368);
            if (bFld) {
                l1 = 1;
                while (++l1 < 368) {
                    i21 |= (int)l1;
                    f = -3;
                }
            } else if (bFld) {
                Test.iArrFld1[i17 - 1] >>= (int)-4085913518L;
            } else {
                f -= by1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
