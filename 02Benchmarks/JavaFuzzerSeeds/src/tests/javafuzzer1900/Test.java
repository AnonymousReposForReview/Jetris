package tests.javafuzzer1900;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2191301990033615766L;
    public static int iFld=3;
    public int iFld1=4894;
    public float fFld=0.924F;
    public short sFld=-22936;
    public double dFld=-1.59630;
    public int iArrFld[][]=new int[N][N];
    public int iArrFld1[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i1=8571, i3=-32250, i4=-31719, i5=214, i6=-196, i7=-26551, i8=-136, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 1242);
        FuzzerUtils.init(fArr, 67.697F);

        i1 = 1;
        do {
            l1 *= -7;
            Test.iFld += (i1 * i1);
        } while (++i1 < 351);
        for (i3 = 3; i3 < 208; i3++) {
            for (i5 = i3; i5 < 8; ++i5) {
                i6 >>= i5;
                iArr[i3] = i5;
                for (i7 = 1; i7 < 1; ++i7) {
                    if (i5 != 0) {
                        vMeth1_check_sum += l1 + i1 + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    i4 *= i8;
                    iArr = FuzzerUtils.int1array(N, (int)-234);
                    l1 += 6;
                    i6 = (int)-3983745753L;
                    i4 = (int)Test.instanceCount;
                    fArr[i5 - 1] -= i8;
                }
            }
        }
        vMeth1_check_sum += l1 + i1 + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        float f=-45.186F;
        int i9=-4, i10=14, i11=3, i12=99, i13=-62685, i14=0, i15=206, iArr1[]=new int[N];
        long l2=-64900L;
        boolean b=false;

        FuzzerUtils.init(iArr1, -5178);

        vMeth1(31192L);
        iArr1[(Test.iFld >>> 1) % N] /= (int)(Test.instanceCount | 1);
        for (f = 1; 315 > f; ++f) {
            iArr1[(int)(f - 1)] *= (int)f;
            Test.instanceCount += i9;
        }
        for (i10 = 4; i10 < 291; i10++) {
            iArr1[i10 + 1] = (int)Test.instanceCount;
            for (l2 = 1; l2 < 6; l2++) {
                if (b) break;
            }
        }
        i9 += i12;
        Test.iFld |= Test.iFld;
        for (i13 = 4; i13 < 163; i13++) {
            i15 = 1;
            while (++i15 < 10) {
                i11 += (((i15 * i9) + Test.instanceCount) - i10);
                Test.instanceCount &= i12;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i9 + i10 + i11 + l2 + i12 + (b ? 1 : 0) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(long l) {


        vMeth();
        Test.iFld ^= Test.iFld;
        vSmallMeth_check_sum += l;
    }

    public void mainTest(String[] strArr1) {

        int i=251, i16=-11, i17=38794, i18=-241, i19=-23041, i20=-49335, i21=5, i22=220, i23=6;
        boolean b1=true;
        byte by=-17;
        long l3=110L;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -2.62F);

        i = (int)-194L;
        for (int smallinvoc=0; smallinvoc<727; smallinvoc++) vSmallMeth(Test.instanceCount);
        if (b1) {
            iFld1 /= (int)(Test.instanceCount | 1);
            i += Test.iFld;
        } else {
            i16 = 1;
            do {
                fFld += i16;
                i += (int)4005218636L;
                Test.iFld += i16;
                try {
                    iArrFld[i16 - 1][i16 + 1] = (61 % Test.iFld);
                    i = (-190 % iFld1);
                    iFld1 = (iFld1 % 51551);
                } catch (ArithmeticException a_e) {}
                switch (((i >>> 1) % 5) + 23) {
                case 23:
                    for (i17 = 8; i17 < 145; i17++) {
                        for (i19 = 1; i19 < 2; i19++) {
                            iFld1 = sFld;
                        }
                        iFld1 = (int)fFld;
                        for (i21 = 2; i21 > 1; --i21) {
                            iFld1 += (i21 + i21);
                            fFld -= Test.instanceCount;
                            by &= (byte)Test.iFld;
                        }
                        Test.instanceCount = (long)dFld;
                        iArrFld[i16 + 1][i16 - 1] += i20;
                        fFld = i22;
                        i22 += (i17 * i17);
                    }
                    iFld1 = i16;
                    for (l3 = 145; l3 > 5; l3--) {
                        Test.instanceCount = l3;
                    }
                    break;
                case 24:
                    Test.instanceCount = i19;
                    break;
                case 25:
                    i20 >>= (int)Test.instanceCount;
                    iFld1 *= i;
                    Test.iFld <<= (int)l3;
                    break;
                case 26:
                    Test.instanceCount += iFld1;
                    break;
                case 27:
                    fArr1[i16] = iFld1;
                    break;
                default:
                    i += i16;
                }
            } while (++i16 < 173);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
