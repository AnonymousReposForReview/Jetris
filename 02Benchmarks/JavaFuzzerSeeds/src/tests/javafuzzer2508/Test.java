package tests.javafuzzer2508;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:44:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=88L;
    public static boolean bFld=false;
    public static long lFld=0L;
    public static short sFld=30597;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.byArrFld, (byte)89);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, int i5) {

        int i7=-18834, i8=13, i9=-1437, i10=19715, iArr1[]=new int[N];
        float f=0.364F;
        short s=-23572;

        FuzzerUtils.init(iArr1, -48286);

        for (int i6 : iArr1) {
            for (i7 = 1; 4 > i7; ++i7) {
                f += 1;
                i6 |= (int)-3764264276L;
                s *= (short)i4;
                f += Test.instanceCount;
                Test.bFld = Test.bFld;
                Test.instanceCount = Test.instanceCount;
                try {
                    i4 = (i5 % 51741);
                    iArr1[i7] = (i5 % 853214363);
                    i5 = (8236 / i5);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
            }
            Test.lFld = (long)f;
        }
        for (i9 = 3; 144 > i9; i9++) {
            f += i4;
            i3 = i4;
            if (i7 != 0) {
                vMeth1_check_sum += i3 + i4 + i5 + i7 + i8 + Float.floatToIntBits(f) + s + i9 + i10 +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i7 + i8 + Float.floatToIntBits(f) + s + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, boolean b, int i2) {

        byte by=2;
        int i11=-54817, i12=59002, i13=28399, iArr[]=new int[N];
        long l1=211L, lArr[]=new long[N];
        float f1=-100.926F;

        FuzzerUtils.init(iArr, 39662);
        FuzzerUtils.init(lArr, 68L);

        iArr[(i1 >>> 1) % N] += (int)89087585L;
        vMeth1(i2, i2, i1);
        switch (((i1 >>> 1) % 2) + 68) {
        case 68:
            by <<= (byte)i1;
            break;
        case 69:
            i2 = (int)Test.instanceCount;
            for (i11 = 10; i11 < 360; i11++) {
                i1 += (((i11 * l1) + i1) - Test.sFld);
                f1 = i12;
                Test.lFld += i11;
                i13 = 1;
                do {
                    iArr[i13 + 1] -= (int)Test.instanceCount;
                } while (++i13 < 5);
            }
            lArr = lArr;
            by *= (byte)-28949L;
            break;
        }
        i2 = 166;
        Test.lFld += i11;
        vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + by + i11 + i12 + l1 + Float.floatToIntBits(f1) + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth(long l, int i) {

        int i14=161, i15=-166, i16=174, i17=8, i18=222, iArr2[]=new int[N];
        byte by1=49;
        float f2=125.578F;
        long l2=-2L;
        double d=-117.112318;

        FuzzerUtils.init(iArr2, -49);

        vMeth(i, Test.bFld, 179);
        for (i14 = 4; i14 < 135; ++i14) {
            for (i16 = 1; i16 < 12; i16 += 2) {
                iArr2 = iArr2;
                l |= Test.instanceCount;
                if (Test.bFld) break;
                by1 += by1;
                l += (i16 | i);
                i15 += by1;
                switch (((i17 >>> 1) % 4) + 87) {
                case 87:
                    f2 *= Test.instanceCount;
                    i = i16;
                    break;
                case 88:
                    for (l2 = 1; l2 < 3; ++l2) {
                        i += (int)(l2 ^ Test.instanceCount);
                        i += (int)(l2 * l2);
                    }
                    break;
                case 89:
                    if (Test.bFld) break;
                    break;
                case 90:
                    i17 = (int)d;
                    break;
                }
            }
        }
        long meth_res = l + i + i14 + i15 + i16 + i17 + by1 + Float.floatToIntBits(f2) + l2 + i18 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=215, i20=14316, i21=3, i22=-206, i23=-6, i24=14, i25=11531, i26=-35032, i27=2, i28=-236;
        float f3=-69.150F, f4=1.517F;
        double d1=-1.112450;
        byte by2=-34;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -30174L);

        if (Test.bFld) {
            sMeth(Test.lFld, i19);
            switch (((i19 >>> 1) % 2) + 60) {
            case 60:
                for (f3 = 11; f3 < 238; ++f3) {
                    for (i21 = 5; i21 < 111; i21 += 3) {
                        d1 *= Test.instanceCount;
                        for (i23 = 1; i23 < 4; i23++) {
                            i20 -= (int)Test.lFld;
                            Test.instanceCount = 63402;
                            i19 = (int)d1;
                            i20 ^= (int)Test.instanceCount;
                            i19 -= (int)Test.lFld;
                            i24 = (int)Test.instanceCount;
                            f4 += Test.instanceCount;
                            Test.iArrFld[(int)(f3)] += 39762;
                        }
                        i25 = i21;
                        i24 = 4;
                        Test.instanceCount >>>= i23;
                    }
                    lArr1[(int)(f3 + 1)] = -226;
                    Test.instanceCount -= i20;
                    for (i26 = 5; i26 < 111; ++i26) {
                        i20 -= (int)-544921390L;
                        try {
                            i19 = (Test.iArrFld[(int)(f3 + 1)] % Test.iArrFld[i26 + 1]);
                            i22 = (Test.iArrFld[(int)(f3)] % i22);
                            Test.iArrFld[i26 + 1] = (i22 % -236);
                        } catch (ArithmeticException a_e) {}
                        i28 = 1;
                        while (++i28 < 2) {
                            i20 = (int)Test.instanceCount;
                            i19 = -10;
                            Test.instanceCount = by2;
                            Test.iArrFld[(int)(f3 - 1)] = 47;
                            lArr1[(int)(f3 - 1)] = i20;
                            f4 = i25;
                        }
                    }
                }
                break;
            case 61:
                Test.lFld >>= i26;
                break;
            }
        } else if (Test.bFld) {
            Test.byArrFld[(i19 >>> 1) % N][(i21 >>> 1) % N] >>= (byte)i23;
        } else {
            Test.lFld += i27;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
