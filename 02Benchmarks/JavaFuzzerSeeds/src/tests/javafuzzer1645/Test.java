package tests.javafuzzer1645;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static short sFld=-32142;
    public byte byFld=102;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        int i6=-230, i7=0, i8=2;
        float f2=1.343F;
        double d=-104.113350;
        short s=-25862;
        byte by=-111;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5763279764081722168L);

        i5 *= i5;
        lArr[(i5 >>> 1) % N] /= (i5 | 1);
        for (i6 = 8; 365 > i6; ++i6) {
            try {
                i7 = (Test.iArrFld[i6] % 252);
                i5 = (-6211 % i7);
                Test.iArrFld[i6] = (i6 / 241);
            } catch (ArithmeticException a_e) {}
            i7 += i6;
            i5 += (((i6 * i7) + i5) - i5);
            Test.iArrFld[i6 - 1] -= (int)f2;
            Test.instanceCount += i6;
            lArr[i6 + 1] += (long)d;
        }
        i8 = 1;
        while (++i8 < 161) {
            switch ((i8 % 10) + 124) {
            case 124:
                i5 += i6;
                i7 = 31399;
                lArr[i8 + 1] = i5;
            case 125:
                s -= (short)4;
                break;
            case 126:
                Test.instanceCount += (i8 * i8);
            case 127:
                Test.instanceCount = Test.instanceCount;
            case 128:
                s = (short)i6;
            case 129:
                i7 += (i8 | (long)f2);
                break;
            case 130:
                Test.iArrFld[i8] /= (int)(by | 1);
            case 131:
                Test.instanceCount += i8;
                break;
            case 132:
                Test.instanceCount <<= 43;
            case 133:
                b = b;
                break;
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i8 + s + by + (b ? 1
            : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f1) {

        int i9=-251;

        vMeth2(i9);
        Test.instanceCount += -5;
        i9 >>= i9;
        i9 = Test.sFld;
        vMeth1_check_sum += Float.floatToIntBits(f1) + i9;
    }

    public static void vMeth(int i, int i1) {

        float f=-46.821F, f3=-21.403F;
        int i2=212, i3=11, i4=15063, i10=24, i11=237;
        byte by1=-90;
        double d1=34.115916;
        boolean b1=false;

        for (f = 4; f < 318; ++f) {
            Test.iArrFld[(int)(f - 1)] -= (int)1.825F;
            for (i3 = 1; 5 > i3; ++i3) {
                vMeth1(f);
                Test.instanceCount -= i4;
                f3 += i;
                switch ((i3 % 6) + 52) {
                case 52:
                    by1 = (byte)d1;
                    i4 += i3;
                    Test.instanceCount += (((i3 * i) + i1) - i1);
                    break;
                case 53:
                    by1 += (byte)Test.instanceCount;
                    for (i10 = 1; i10 < 2; ++i10) {
                        d1 -= Test.instanceCount;
                        i &= -231;
                        i11 += (37670 + (i10 * i10));
                    }
                    break;
                case 54:
                    if (b1) continue;
                    break;
                case 55:
                    f3 -= Test.instanceCount;
                case 56:
                    i += (((i3 * i3) + i10) - i4);
                    break;
                case 57:
                    i2 >>= i11;
                    break;
                default:
                    Test.iArrFld[i3 - 1] >>>= i;
                }
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + i4 + Float.floatToIntBits(f3) + by1 +
            Double.doubleToLongBits(d1) + i10 + i11 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i12=75, i13=-2, i14=-10, i15=4, i16=52, i17=-54339, i18=42167, i19=120, i20=-240, i21=-63385, i22=-26132,
            i23=38191, i24=-146, i25=-42497, i26=236;
        float f4=-1.372F;
        double d2=2.53610, dArr[]=new double[N];
        long l=1602762652L;

        FuzzerUtils.init(dArr, 122.105714);

        vMeth(i12, i12);
        for (i13 = 1; i13 < 383; i13++) {
            for (i15 = i13; i15 < 66; i15++) {
                Test.instanceCount <<= Test.instanceCount;
            }
            Test.sFld <<= (short)i13;
        }
        i16 -= (int)f4;
        for (i17 = 13; 240 > i17; ++i17) {
            d2 -= 12.423F;
            i12 += (i17 * i19);
            Test.iArrFld[i17 + 1] += i14;
            for (i20 = 2; 111 > i20; ++i20) {
                i16 -= i18;
                byArrFld[i20] *= (byte)Test.instanceCount;
                for (l = i17; l < 2; l++) {
                    boolean b2=true;
                    Test.iArrFld[i17 - 1] = byFld;
                    i12 += (int)f4;
                    dArr[(int)(l)] *= i20;
                    if (b2) continue;
                    Test.iArrFld[i17] = (int)1.170F;
                }
            }
            for (i23 = 111; 6 < i23; i23--) {
                i18 += i22;
            }
            i24 -= (int)f4;
            for (i25 = 4; i25 < 111; ++i25) {
                if (bFld) continue;
                if (bFld) continue;
                i18 = i17;
                f4 -= byFld;
            }
            Test.instanceCount += (i17 * i17);
        }
        i21 = i21;
        i16 *= i14;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
