package tests.javafuzzer3346;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:31:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1770427062L;
    public static float fFld=-67.873F;
    public static byte byFld=34;
    public short sFld=26658;
    public static int iFld=-208;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i8) {

        long l2=1025910487L, l3=111L;
        double d1=0.80254;
        byte by=4;
        int i9=14, i10=-243, i11=-13, i12=-14, iArr[]=new int[N];
        float f=1.313F;

        FuzzerUtils.init(iArr, -6);

        l2 -= (long)d1;
        by += (byte)i8;
        i9 = 1;
        do {
            i8 = i8;
            f = 1;
            while (++f < 5) {
                i10 >>= i10;
            }
            try {
                i10 = (iArr[i9 - 1] / iArr[i9 + 1]);
                i8 = (i10 % iArr[i9 - 1]);
                iArr[i9 + 1] = (-1642960486 / i9);
            } catch (ArithmeticException a_e) {}
            i8 += i9;
            d1 *= f;
            i11 = 1;
            do {
                float f1=0.783F;
                i8 += (i11 - f1);
                i10 -= (int)d1;
                i12 -= (int)8L;
                l3 = Test.instanceCount;
                iArr[i11 - 1] = (int)13.229F;
            } while (++i11 < 5);
        } while (++i9 < 310);
        long meth_res = i8 + l2 + Double.doubleToLongBits(d1) + by + i9 + Float.floatToIntBits(f) + i10 + i11 + i12 +
            l3 + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l1, int i6, int i7) {

        int i13=-6802, i14=19359, i15=20388, i16=-157;
        byte by1=34, byArr[]=new byte[N];
        short s=-891;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -2545993359647793567L);
        FuzzerUtils.init(dArr, 87.104464);
        FuzzerUtils.init(byArr, (byte)-92);

        switch (((i7 >>> 1) % 2) + 83) {
        case 83:
            lArr[(i7 >>> 1) % N] += ((-(l1++)) + Integer.reverseBytes(iMeth2(64578)));
            break;
        case 84:
            i7 = (int)Test.fFld;
            break;
        }
        for (i13 = 294; i13 > 13; i13 -= 2) {
            l1 += (long)-1.33143;
            i14 = (int)l1;
            switch ((i13 % 1) + 71) {
            case 71:
                for (i15 = 11; i15 > i13; --i15) {
                    int i17=2;
                    switch ((i13 % 7) + 81) {
                    case 81:
                        Test.fFld += (((i15 * by1) + i14) - Test.instanceCount);
                        dArr[i15 + 1] = s;
                        l1 *= i6;
                        break;
                    case 82:
                        byArr[i13 + 1] += (byte)i17;
                        break;
                    case 83:
                        i16 >>= i15;
                        i17 = i16;
                        break;
                    case 84:
                        by1 -= (byte)l1;
                        break;
                    case 85:
                        lArr[i13 - 1] -= l1;
                        break;
                    case 86:
                        Test.instanceCount |= 17518;
                        break;
                    case 87:
                        Test.fFld -= i17;
                        break;
                    default:
                        i14 *= i17;
                    }
                }
                break;
            }
        }
        long meth_res = l1 + i6 + i7 + i13 + i14 + i15 + i16 + by1 + s + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i, int i1, long l) {

        int i2=101, i3=8, i4=55499, i5=106, iArr1[]=new int[N];
        double d=-1.66551;

        FuzzerUtils.init(iArr1, -14);

        for (i2 = 3; i2 < 185; ++i2) {
            i1 -= (int)d;
            for (i4 = 1; i4 < 9; ++i4) {
                Test.fFld = (~(i1++));
                switch (((i4 % 2) * 5) + 67) {
                case 71:
                    i3 = (Math.max((int)(Test.instanceCount * Test.fFld), iMeth1(Test.instanceCount, i3, i1)) / (i |
                        1));
                    break;
                case 68:
                    i3 *= Test.byFld;
                    iArr1[i2] += Test.byFld;
                    l += i4;
                }
                i5 = i2;
                d = i2;
                try {
                    i3 = (i2 / i2);
                    i = (i4 % -90);
                    i5 = (251 / i);
                } catch (ArithmeticException a_e) {}
                iArr1[i4] *= (int)Test.instanceCount;
                i += i4;
                Test.instanceCount = sFld;
            }
        }
        long meth_res = i + i1 + l + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-9, i19=-113, i20=-8428, i21=-7, i22=25226, i23=174, i24=7, i25=3, i26=-15736, i27=-63, iArr2[][]=new
            int[N][N], iArr3[]=new int[N];
        long l4=-8617303895025166847L;
        double d2=-1.80651;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr2, -123);
        FuzzerUtils.init(fArr, -70.235F);
        FuzzerUtils.init(iArr3, 12982);

        iMeth(Test.iFld, i18, Test.instanceCount);
        try {
            for (l4 = 215; l4 > 7; l4--) {
                for (i20 = 121; i20 > l4; i20 -= 3) {
                    Test.instanceCount *= Test.iFld;
                }
                switch ((int)((l4 % 5) + 99)) {
                case 99:
                    Test.iArrFld[(int)(l4 + 1)] = (int)d2;
                    Test.instanceCount = 191497147202113807L;
                case 100:
                    Test.iFld -= (int)l4;
                    Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
                case 101:
                    Test.fFld += l4;
                    iArr2 = iArr2;
                    Test.iFld += (int)(26330L + (l4 * l4));
                    for (i22 = 2; 121 > i22; i22++) {
                        boolean b=true;
                        i23 -= Test.iFld;
                        iArr2 = FuzzerUtils.int2array(N, (int)105);
                        i19 = -23765;
                        Test.iArrFld[i22 + 1] += i18;
                        fArr[(int)(l4 - 1)][i22] -= l4;
                        fArr[i22][i22 - 1] -= 59;
                        Test.instanceCount = l4;
                        i19 >>= (int)Test.instanceCount;
                        if (b) break;
                    }
                    break;
                case 102:
                    Test.iFld = i22;
                    for (i24 = 121; i24 > 5; --i24) {
                        Test.instanceCount *= l4;
                        for (i26 = 1; i26 < 2; i26++) {
                            Test.instanceCount += (i26 * i26);
                            i19 ^= i19;
                            if (Test.bFld) break;
                        }
                    }
                    break;
                case 103:
                    i23 = i25;
                    break;
                default:
                    iArr3 = iArr3;
                }
            }
        }
        catch (NullPointerException exc1) {
            i21 *= i18;
        }
        finally {
            d2 = Test.fFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
