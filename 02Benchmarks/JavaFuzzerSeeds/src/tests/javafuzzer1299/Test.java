package tests.javafuzzer1299;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=209L;
    public static float fFld=0.997F;
    public static int iFld=-2;
    public static byte byFld=-50;
    public static volatile short sFld=28299;
    public long lFld=-12847L;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.81737);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f=-2.51F, f1=-34.479F;
        int i1=-48817, i2=-170, i3=2354, i4=5660, i5=-240, iArr2[]=new int[N];
        double dArr[]=new double[N];
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 88);
        FuzzerUtils.init(dArr, 0.84117);
        FuzzerUtils.init(sArr, (short)-6546);
        FuzzerUtils.init(lArr1, -39625L);

        iArr2[(Test.iFld >>> 1) % N] <<= (int)-2581320642L;
        for (f = 233; f > 12; f--) {
            for (i2 = 1; 7 > i2; i2++) {
                switch ((((4 >>> 1) % 6) * 5) + 9) {
                case 18:
                    i1 += (((i2 * Test.instanceCount) + Test.instanceCount) - i2);
                    for (i4 = 1; 2 > i4; i4++) {
                        Test.iFld += i4;
                        Test.iFld += (i4 * i4);
                        i3 >>>= -24935;
                        Test.iFld += i5;
                        Test.fFld -= f1;
                        i1 *= Test.byFld;
                        dArr[i2 + 1] -= Test.iFld;
                        Test.byFld = (byte)-110;
                        i3 += (int)Test.instanceCount;
                    }
                    break;
                case 33:
                    i5 >>= i1;
                case 13:
                    sArr[(int)(f + 1)] = (short)i1;
                    break;
                case 11:
                    lArr1[(int)(f - 1)] = Test.sFld;
                case 10:
                    f1 = i5;
                    break;
                case 34:
                    dArr = Test.dArrFld;
                default:
                    Test.instanceCount += (i2 | Test.byFld);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth1(double d1) {


        vMeth();
        long meth_res = Double.doubleToLongBits(d1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        double d2=-1.5833;
        int i6=-51, i7=108, i8=-14, i9=14, i10=14, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -40111);

        iArr1[(4 >>> 1) % N] = (int)lMeth1(d2);
        Test.instanceCount <<= Test.iFld;
        Test.iFld *= Test.iFld;
        for (i6 = 15; i6 < 302; i6++) {
            for (i8 = 1; 6 > i8; ++i8) {
                i9 += 36;
                i9 -= (int)Test.instanceCount;
                d2 -= Test.iFld;
                i9 *= Test.iFld;
            }
            i9 += 22791;
            Test.instanceCount += i6;
            Test.iFld -= i7;
            i10 = 1;
            do {
                i7 >>= 0;
                if (b) continue;
            } while (++i10 < 6);
        }
        long meth_res = Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=44669, i11=41597, i12=-24778, i13=33398, i14=13, i15=-58466, i16=13, i17=61770, i18=21909, iArr[]=new
            int[N];
        double d=0.52475;
        float f2=2.583F, f3=-93.322F, fArr[]=new float[N];
        boolean b1=true;
        long lArr[]=new long[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(fArr, 0.552F);
        FuzzerUtils.init(byArr, (byte)23);

        Test.fFld = (++i);
        iArr[(5 >>> 1) % N] -= (int)(((lArr[(i >>> 1) % N] = i) + (Test.instanceCount - d)) - Math.min(lArr[(i >>> 1) %
            N], i & i));
        Test.fFld *= ((i -= (int)Test.fFld) % (((long)((Test.fFld + Test.instanceCount) * lMeth())) | 1));
        for (i11 = 357; i11 > 14; --i11) {
            Test.iFld <<= i;
        }
        i13 = 310;
        while (--i13 > 0) {
            switch (((2 >>> 1) % 1) + 102) {
            case 102:
                Test.dArrFld[i13] = i;
                for (f2 = 81; f2 > 5; f2--) {
                    for (i15 = 2; i15 > 1; --i15) {
                        i16 += (i15 ^ i14);
                        iArr[(int)(f2 + 1)] >>>= i12;
                    }
                    i = i;
                    Test.byFld += (byte)f2;
                    Test.iFld = i;
                    fArr[(int)(f2 + 1)] -= i11;
                    for (i17 = 1; i17 < 2; i17++) {
                        d += Test.sFld;
                        i14 += i17;
                        i -= 53391;
                        if (b1) {
                            if (b1) continue;
                        } else if (b1) {
                            i12 += i17;
                        } else {
                            i14 = Test.byFld;
                            Test.fFld -= i17;
                            byArr = FuzzerUtils.byte2array(N, (byte)-42);
                        }
                        Test.iFld -= i17;
                        i = (int)Test.instanceCount;
                        Test.instanceCount += (((i17 * i17) + f3) - i17);
                    }
                    i14 += (int)(((f2 * lFld) + i) - i17);
                }
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
