package tests.javafuzzer191;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:48:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=74L;
    public static double dFld=-2.79658;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 97.84460);
        FuzzerUtils.init(Test.fArrFld, 10.879F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        float f=1.790F;
        int i9=-6660, i10=-131;
        boolean b=true;

        i8 -= (int)f;
        for (i9 = 290; i9 > 9; i9 -= 3) {
            if (i9 != 0) {
                vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + (b ? 1 : 0);
                return;
            }
            Test.dFld += i8;
            Test.instanceCount = 25;
            f += (((i9 * i8) + f) - i10);
        }
        b = b;
        i8 -= 20984;
        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + (b ? 1 : 0);
    }

    public static void vMeth(int i4, long l, long l1) {

        int i5=-60830, i6=0, i11=176, i12=0, i13=1531, i14=-8, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -14);

        for (i5 = 329; i5 > 7; i5 -= 2) {
            l -= i6;
            Test.dFld /= ((iArr2[i5]--) | 1);
            switch ((i5 % 1) + 95) {
            case 95:
                vMeth1(i6, i6);
                if (i4 != 0) {
                    vMeth_check_sum += i4 + l + l1 + i5 + i6 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                try {
                    i6 = (i6 / i5);
                    i4 = (i6 / -105);
                    i4 = (30 / iArr2[i5]);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                for (i11 = 1; i11 < 10; i11++) {
                    i6 = i5;
                    for (i13 = 1; i13 < 2; ++i13) {
                        i12 -= i13;
                        iArr2[i5] *= i6;
                        i6 = i12;
                    }
                    i6 -= i12;
                    iArr2[i5] += i14;
                }
            }
        }
        vMeth_check_sum += i4 + l + l1 + i5 + i6 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i2) {

        int i3=-32892, i15=-63829, iArr1[]=new int[N];
        float f1=1.324F;
        byte by=-94;
        boolean b1=false;

        FuzzerUtils.init(iArr1, -57247);

        i3 = 1;
        do {
            i2 = (--iArr1[i3]);
            vMeth(i2, Test.instanceCount, Test.instanceCount);
            i2 = (int)f1;
            Test.dFld += i2;
            if (b1) {
                by %= (byte)(i2 | 1);
                if (i3 != 0) {
                }
                Test.dFld = 3510049638L;
            } else if (b1) {
                i15 = 8;
                while (--i15 > 0) {
                    i2 = i2;
                    i2 += (i15 * i15);
                    i2 *= (int)5018565282695692880L;
                    i2 = (int)Test.instanceCount;
                }
                iArr1 = iArr1;
            }
        } while (++i3 < 193);
        long meth_res = i2 + i3 + Float.floatToIntBits(f1) + by + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-19739, i16=145, i17=-6829, i18=-11, i19=46, i20=59809, i21=-43, iArr[]=new int[N];
        short s=26473;
        float f2=64.755F;
        double d=1.11561;
        byte by1=-2;
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -14914);
        FuzzerUtils.init(lArr, -60966L);

        for (i = 7; i < 388; ++i) {
            i1 -= i1;
            iArr[i + 1] += (int)(Test.instanceCount++);
        }
        s = (short)iMeth(i1);
        f2 += i;
        for (i16 = 10; i16 < 262; i16++) {
            Test.dArrFld[i16 - 1] *= 5135580406671081173L;
            i1 ^= (int)Test.instanceCount;
            for (i18 = 1; i18 < 100; i18++) {
                i19 ^= s;
                if (false) continue;
                f2 -= 7;
                iArr[i18] *= i;
                i19 = (int)Test.instanceCount;
                for (d = 1; 2 > d; ++d) {
                    i17 -= (int)f2;
                    Test.instanceCount %= ((long)(Test.dFld) | 1);
                    i1 <<= i20;
                    Test.instanceCount += (long)(((d * i17) + i18) - i16);
                    lArr[i18 + 1] = i17;
                    i1 &= i;
                    Test.fArrFld[i18][i16 - 1] *= Test.instanceCount;
                    switch ((int)(((d % 8) * 5) + 44)) {
                    case 49:
                        Test.dFld = -5;
                        switch ((i16 % 3) + 90) {
                        case 90:
                            i1 = i1;
                            by1 = (byte)i20;
                            break;
                        case 91:
                            i19 += i16;
                            if (b2) continue;
                            Test.instanceCount = i21;
                            break;
                        case 92:
                            try {
                                i21 = (i21 / i1);
                                i21 = (i19 % 7219);
                                i17 = (iArr[i16 - 1] / 37);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            iArr[i16 + 1] *= (int)f2;
                        }
                        break;
                    case 57:
                        i20 = i1;
                    case 59:
                        Test.dFld += i19;
                        break;
                    case 51:
                        Test.dFld *= i19;
                        break;
                    case 55:
                        Test.instanceCount = by1;
                        break;
                    case 47:
                        s -= (short)i18;
                        break;
                    case 45:
                        iArr[i16 - 1] = i19;
                        break;
                    case 66:
                        f2 -= f2;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
