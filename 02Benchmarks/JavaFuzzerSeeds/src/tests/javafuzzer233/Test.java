package tests.javafuzzer233;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:35:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4799612382257214787L;
    public int iFld=-28161;
    public byte byFld=-11;
    public short sFld=-17653;
    public boolean bFld=true;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.510F);
    }

    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=16251, i9=14, i10=42371, i11=-33600, i12=-86, i13=-30, i14=-23136, iArr1[]=new int[N];
        float f1=90.56F;
        double d=0.17138;
        byte by=-51;

        FuzzerUtils.init(iArr1, 113);

        for (i8 = 16; i8 < 397; i8++) {
            i9 <<= i9;
        }
        iArr1[(i8 >>> 1) % N] = 0;
        iArr1[(i7 >>> 1) % N] += (int)f1;
        d += i8;
        iArr1[(55798 >>> 1) % N] *= i7;
        for (i10 = 7; i10 < 161; i10++) {
            for (i12 = 10; i12 > 1; i12--) {
                i14 = 1;
                do {
                    switch ((i10 % 3) + 19) {
                    case 19:
                        i9 *= (int)Test.instanceCount;
                    case 20:
                        try {
                            iArr1[i14 + 1] = (-207 % i7);
                            iArr1[i14 + 1] = (i14 / 1817819969);
                            i7 = (iArr1[i14] / -1465091050);
                        } catch (ArithmeticException a_e) {}
                        i7 -= (int)f1;
                        break;
                    case 21:
                        i13 = (int)Test.instanceCount;
                    default:
                        by <<= (byte)i13;
                    }
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13
            + i14 + by + FuzzerUtils.checkSum(iArr1);
    }

    public long lMeth(long l, int i4, int i5) {

        boolean b=false;
        int i6=-13, i15=236, i16=-44445, i17=15, i18=-10, i19=13, iArr2[]=new int[N];
        double d1=1.10859, d2=0.23024;
        float f2=-1.423F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -122L);
        FuzzerUtils.init(iArr2, -9);

        b = b;
        i6 = 162;
        do {
            vMeth(i4);
            i4 += (211 + (i6 * i6));
            for (d1 = 1; d1 < 10; ++d1) {
                for (i16 = 1; i16 < 2; ++i16) {
                    f2 += sFld;
                }
                i4 += (int)d1;
            }
        } while (--i6 > 0);
        for (i18 = 5; 373 > i18; ++i18) {
            f2 *= iFld;
            lArr = FuzzerUtils.long1array(N, (long)-8L);
            d2 = l;
            i5 >>= i19;
            iFld += (((i18 * f2) + i16) - Test.instanceCount);
            iArr2[i18 + 1] = (int)l;
        }
        long meth_res = l + i4 + i5 + (b ? 1 : 0) + i6 + Double.doubleToLongBits(d1) + i15 + i16 + i17 +
            Float.floatToIntBits(f2) + i18 + i19 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public byte byMeth(int i, int i1) {

        int i2=38250, i3=67, i20=-12, i21=163, i22=-13904, i23=22, i24=-180, i25=24, iArr[]=new int[N];
        double d3=-2.93304;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 49303);
        FuzzerUtils.init(lArr1, 7L);

        for (i2 = 21; i2 < 373; ++i2) {
            iArr[i2 - 1] = (int)(Math.sqrt(i + byFld) * lMeth(12285L, i, i3));
        }
        iFld >>>= (int)Test.instanceCount;
        for (i20 = 1; i20 < 386; i20 += 2) {
            for (i22 = 8; 1 < i22; i22--) {
                if (b1) {
                    i1 *= (int)Test.instanceCount;
                    for (i24 = i20; i24 < 2; i24++) {
                        i21 = i21;
                        i23 += (int)2.89873;
                        lArr1[i24 + 1] -= i2;
                        i23 = (int)-4180687950761500308L;
                        i3 = (int)d3;
                        iArr[i20] -= sFld;
                    }
                    i = -94;
                } else {
                    i1 += (i22 | i25);
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i20 + i21 + i22 + i23 + i24 + i25 + Double.doubleToLongBits(d3) + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-1.147F, f3=-18.324F;
        int i26=-19057, i27=39180, i28=-9, i29=-56292, i30=-5, i31=-40627, iArr3[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, -212);
        FuzzerUtils.init(lArr2, -8185761201141864885L);

        f = (iFld - byMeth(iFld, iFld));
        i26 = 1;
        while ((i26 += 3) < 202) {
            iArr3[i26 - 1] = i26;
            for (i27 = 23; i27 < 374; i27++) {
                double d4=1.7753;
                d4 = Test.instanceCount;
                i28 = (int)Test.instanceCount;
                i28 <<= (int)Test.instanceCount;
                f += i27;
                switch ((i27 % 5) + 54) {
                case 54:
                    i28 += (((i27 * i27) + byFld) - f);
                    iFld += (i27 | i26);
                    break;
                case 55:
                    i28 += i27;
                    f3 = 1;
                    do {
                        Test.instanceCount >>= i28;
                    } while (++f3 < 2);
                    if (bFld) break;
                    iFld *= 43091;
                    break;
                case 56:
                    lArr2[i27 - 1] = (long)-74.287F;
                    iFld += (i27 * i27);
                    iArr3[i26 + 1] = i27;
                    break;
                case 57:
                    for (i29 = i26; i29 < 2; i29++) {
                        Test.instanceCount = i26;
                        iArr3[i26] = (int)62L;
                        Test.fArrFld[i27] = i27;
                        i28 &= sFld;
                        i28 >>= i26;
                    }
                    i31 = 1;
                    do {
                        f = 13849L;
                        i30 = (int)-1.310F;
                        i30 -= i26;
                    } while (++i31 < 2);
                    break;
                case 58:
                    f += i27;
                    break;
                default:
                    d4 = Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
