package tests.javafuzzer2654;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:05:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-97L;
    public static boolean bFld=false;
    public static float fFld=112.141F;
    public static float fFld1=0.484F;
    public static byte byFld=-122;
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 49126);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public boolean bMeth(double d, int i4, int i5) {


        i4 = -25830;
        long meth_res = Double.doubleToLongBits(d) + i4 + i5;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        int i9=222;
        double d3=95.79330;

        i9 += (int)(((d3 % -23472) + d3) + (--i9));
        vMeth_check_sum += i9 + Double.doubleToLongBits(d3);
    }

    public static float fMeth() {

        long l=-217L;
        int i11=-20046, i12=132, i13=-17760, i14=13399, i15=251, i16=8, i17=8, i18=-28192;
        double d5=13.99481, d6=-100.58575;
        boolean b1=false;

        if (b1) {
            l >>= i11;
        } else if (b1) {
            l = i11;
            for (i12 = 14; i12 < 308; i12++) {
                if (b1) {
                    for (d5 = i12; 6 > d5; d5++) {
                        Test.instanceCount += (long)(d5 + l);
                        try {
                            i14 = (-253 / i13);
                            i11 = (i11 / -210);
                            i11 = (Test.iArrFld1[(-177 >>> 1) % N] / i11);
                        } catch (ArithmeticException a_e) {}
                        d6 = i12;
                    }
                    try {
                        i13 = (i13 / i12);
                        i13 = (i11 % 60208);
                        i11 = (i14 % i11);
                    } catch (ArithmeticException a_e) {}
                }
            }
        } else {
            for (i15 = 354; 21 < i15; --i15) {
                for (i17 = 1; i17 < 5; ++i17) {
                    Test.iArrFld1[i15 - 1] -= i11;
                    i16 = (int)l;
                    i16 += -14;
                }
            }
        }
        long meth_res = l + i11 + i12 + i13 + Double.doubleToLongBits(d5) + i14 + Double.doubleToLongBits(d6) + (b1 ? 1
            : 0) + i15 + i16 + i17 + i18;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1() {

        int i10=93, i19=37932, i20=17519, i21=-51860, i22=-9, i23=-77, i24=-159, i25=58579, i26=-214, i27=12546;
        float f1=-1.193F;
        short s=-26356;

        i10 += (int)((fMeth() - Test.instanceCount) * i10);
        i10 -= i10;
        i10 *= -9;
        for (i19 = 17; i19 < 347; i19++) {
            Test.instanceCount -= -201;
        }
        for (i21 = 7; i21 < 192; ++i21) {
            for (i23 = i21; i23 < 9; ++i23) {
                i24 = i23;
                try {
                    i20 = (i21 / Test.iArrFld1[i21]);
                    Test.iArrFld1[i21 + 1] = (i21 / 97);
                    Test.iArrFld1[i23] = (-245 / Test.iArrFld1[i23]);
                } catch (ArithmeticException a_e) {}
            }
            for (i25 = 1; i25 < 9; i25++) {
                if (Test.bFld) break;
                i27 = 1;
                do {
                    f1 = i23;
                } while (++i27 < 2);
                s += (short)i25;
                i20 = i23;
            }
        }
        vMeth1_check_sum += i10 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + Float.floatToIntBits(f1) + s;
    }

    public static int iMeth(int i6, byte by, int i7) {

        double d2=62.87573, d4=0.100968;
        int i8=48896, i28=58670, i29=24189, i30=204, i31=11, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -14792);
        FuzzerUtils.init(fArr, 1.623F);

        for (d2 = 10; d2 < 190; ++d2) {
            try {
                iArr[(int)(d2)] = (-1794742051 % iArr[(int)(d2)]);
                i8 = (242 / i7);
                i6 = (188 / i6);
            } catch (ArithmeticException a_e) {}
            fArr[(int)(d2 - 1)] *= ((~by) * ((127.128F * i6) * iArr[(int)(d2 + 1)]));
            vMeth();
        }
        d4 *= -54;
        vMeth();
        vMeth1();
        iArr[(-136 >>> 1) % N] += (int)Test.fFld;
        switch (((i7 >>> 1) % 1) + 122) {
        case 122:
            for (i28 = 197; i28 > 2; i28--) {
                Test.iArrFld1 = iArr;
                for (i30 = 8; i30 > 1; --i30) {
                    Test.bFld = Test.bFld;
                    Test.iArrFld1[i28 + 1] -= (int)Test.fFld1;
                    i8 = (int)Test.fFld;
                }
            }
        }
        long meth_res = i6 + by + i7 + Double.doubleToLongBits(d2) + i8 + Double.doubleToLongBits(d4) + i28 + i29 + i30
            + i31 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=27, i1=-5, i2=112, i3=32, i32=253, i33=-219, i34=-56437, i35=3, i36=-9, i37=156;
        boolean b=true;
        float f=2.235F, fArr1[]=new float[N];
        double d1=0.82321;
        byte by1=77;
        short s1=-10977;

        FuzzerUtils.init(fArr1, 2.181F);

        for (i = 3; i < 302; i++) {
            b = (((Test.instanceCount--) * (i1 += i)) != (i1--));
        }
        for (i2 = 9; i2 < 280; i2 += 2) {
            if (bMeth((i3--) - (f + d1), (int)(d1 * (Test.instanceCount - i)), iArrFld[i2 + 1][i2 + 1]) & ((iMeth(i1,
                by1, i) != Test.instanceCount) && Test.bFld)) break;
            d1 -= i2;
        }
        i3 = i;
        for (i32 = 1; i32 < 273; i32++) {
            b = false;
            i1 = (int)Test.instanceCount;
        }
        i34 = 1;
        while (++i34 < 308) {
            d1 = Test.instanceCount;
            Test.instanceCount = (long)78.513F;
            Test.instanceCount *= (long)Test.fFld1;
            i35 = 1;
            do {
                for (i36 = 1; i36 < 1; i36++) {
                    i37 += i1;
                    i37 -= s1;
                    Test.instanceCount += (i36 - Test.instanceCount);
                    i3 <<= (int)Test.instanceCount;
                    fArr1[i36] = Test.fFld;
                    Test.instanceCount &= -222L;
                    i1 *= (int)Test.instanceCount;
                }
                i37 -= i34;
                Test.instanceCount = (long)-2.17382;
                switch ((i35 % 4) + 80) {
                case 80:
                    switch (((i2 >>> 1) % 7) + 70) {
                    case 70:
                        f -= Test.fFld;
                        Test.instanceCount += (i35 ^ i34);
                        Test.instanceCount = i32;
                        Test.instanceCount += (((i35 * i34) + Test.byFld) - i34);
                        break;
                    case 71:
                        i1 >>= i3;
                    case 72:
                        try {
                            i3 = (i3 / 19);
                            i3 = (13725 % i32);
                            i33 = (50803 % i2);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 73:
                        try {
                            i3 = (-27 / iArrFld[i35 + 1][i35 + 1]);
                            i33 = (34742 % i33);
                            Test.iArrFld1[i34] = (-176 / i35);
                        } catch (ArithmeticException a_e) {}
                    case 74:
                        Test.fFld1 += (((i35 * i37) + Test.byFld) - i2);
                        break;
                    case 75:
                        Test.instanceCount += i35;
                    case 76:
                        Test.instanceCount *= i1;
                        break;
                    default:
                        i37 += 16;
                    }
                    break;
                case 81:
                    i37 = i3;
                case 82:
                    Test.fFld -= by1;
                    break;
                case 83:
                    Test.instanceCount += (long)f;
                    break;
                }
            } while (++i35 < 82);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
