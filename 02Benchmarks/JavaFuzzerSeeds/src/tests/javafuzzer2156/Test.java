package tests.javafuzzer2156;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:34:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static int iFld=-8;
    public static double dFld=17.14483;
    public static boolean bFld=true;
    public int iFld1=14071;

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 31219);

        iArr1 = iArr1;
        Test.instanceCount *= i6;
        vMeth1_check_sum += i5 + i6 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i4, double d) {

        int iArr[]=new int[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr, -16466);
        FuzzerUtils.init(byArr, (byte)-81);

        iArr[(i4 >>> 1) % N] -= ((++i4) - (i4--));
        vMeth1(i4, i4);
        i4 = i4;
        byArr[(3 >>> 1) % N][(i4 >>> 1) % N] = (byte)i4;
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public static double dMeth() {

        long l=-7L;
        int i7=158, i8=98, i9=103, i10=-9, iArr2[]=new int[N];
        byte by=-2;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 17722);
        FuzzerUtils.init(fArr, -2.294F);

        vMeth(Test.iFld, Test.dFld);
        for (l = 12; l < 334; l++) {
            short s=-1571;
            if (false) continue;
            for (i8 = 5; l < i8; i8 -= 3) {
                if (Test.bFld) break;
                Test.iFld = i8;
                i7 >>= (int)41L;
                i7 *= i7;
                if (Test.iFld != 0) {
                }
            }
            iArr2[(int)(l + 1)] += i8;
            iArr2[(int)(l)] -= i7;
            by += (byte)(l | i10);
            s = (short)1;
            Test.iFld = (int)Test.instanceCount;
            i10 = by;
        }
        long meth_res = l + i7 + i8 + i9 + by + i10 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3317, i1=-8959, i2=9, i3=36176, i11=25, i12=11, i13=37592, i14=22167, i15=-10640, i16=-6, i17=5, i18=142,
            i19=-34, i20=-2, i21=-14, iArr3[]=new int[N];
        float f1=-22.551F, fArr1[]=new float[N];
        short s1=11341;
        byte by1=-38, by2=116;

        FuzzerUtils.init(iArr3, 1);
        FuzzerUtils.init(fArr1, -66.42F);

        i >>= Integer.reverseBytes(Math.min(i + i, i++));
        for (i1 = 5; i1 < 239; i1 += 2) {
            i3 += (int)(((40.822F - (i2 + i2)) * i) + i);
            dMeth();
        }
        i3 = (int)f1;
        i2 = (int)-5L;
        i2 = i3;
        for (i11 = 138; i11 > 7; --i11) {
            Test.iFld >>= i1;
            i13 = 1;
            while (++i13 < 191) {
                i12 = (int)1.64568;
                for (i14 = 1; i14 < 1; ++i14) {
                    iArr3[i13] -= (int)Test.instanceCount;
                }
            }
        }
        for (i16 = 270; 6 < i16; --i16) {
            s1 = (short)i12;
            i2 = i11;
            f1 += i15;
            iArr3[i16] -= i17;
            switch (((Test.iFld >>> 1) % 9) + 65) {
            case 65:
                for (i18 = i16; i18 < 95; ++i18) {
                    switch (((i16 % 10) * 5) + 35) {
                    case 49:
                        i12 += i3;
                        i -= (int)-42L;
                        for (i20 = 1; i20 < 1; ++i20) {
                            Test.instanceCount += (((i20 * i19) + Test.instanceCount) - i3);
                            i15 += (i20 * i20);
                            iArr3[i20 - 1] += (int)Test.dFld;
                            f1 = Test.instanceCount;
                            if (Test.bFld) continue;
                            Test.iFld += (((i20 * i16) + Test.instanceCount) - i17);
                        }
                        break;
                    case 75:
                        Test.instanceCount *= i13;
                        break;
                    case 44:
                        Test.iFld -= (int)Test.instanceCount;
                    case 55:
                        i += (((i18 * by1) + by2) - i20);
                        break;
                    case 81:
                        iFld1 *= i;
                        break;
                    case 71:
                    case 36:
                        f1 = i20;
                        break;
                    case 85:
                        iArr3[i16 - 1] *= (int)3163849115914131222L;
                    case 40:
                        fArr1[i18] = Test.instanceCount;
                        break;
                    case 83:
                    default:
                        i = i3;
                    }
                }
            case 66:
                i12 -= (int)f1;
                break;
            case 67:
                if (Test.bFld) break;
                break;
            case 68:
                s1 = s1;
                break;
            case 69:
                s1 += (short)(127 + (i16 * i16));
                break;
            case 70:
                i3 -= i14;
                break;
            case 71:
                if (Test.bFld) continue;
                break;
            case 72:
                i21 += (i16 - i1);
                break;
            case 73:
            default:
                i19 <<= i21;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
