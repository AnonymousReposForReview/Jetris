package tests.javafuzzer2605;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:14:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static short sFld=-9750;
    public static float fFld=-2.627F;
    public int iFld=29;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 411);
        FuzzerUtils.init(Test.dArrFld, 76.105874);
        FuzzerUtils.init(Test.fArrFld, 77.665F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i4) {

        int i5=-5, i6=-65, i7=204, i8=2, i9=-17447;
        double d1=2.125987;
        long l1=8258329812660489997L;
        byte by1=21;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.58F);

        for (i5 = 6; i5 < 122; ++i5) {
            i6 *= 242;
            Test.instanceCount = i5;
            for (d1 = 1; 13 > d1; d1++) {
                Test.iArrFld[(i4 >>> 1) % N] -= i5;
                Test.dArrFld[(int)(d1 + 1)][(int)(d1 - 1)] = i7;
                Test.instanceCount = (long)f1;
                fArr[(int)(d1 - 1)] = i7;
                for (i8 = 1; i8 < 2; i8++) {
                    i7 += i8;
                    Test.iArrFld[i8] += (int)l1;
                    i6 += (((i8 * i4) + i6) - i8);
                    i4 *= (int)l1;
                }
                i9 += (int)(((d1 * l1) + Test.instanceCount) - by1);
                if (b) break;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + i9 + l1 +
            by1 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l, int i3) {

        int i10=116, i11=38567, i12=-6, i13=-8836, i14=-52, i15=39283;
        boolean b1=false, bArr[]=new boolean[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 953877123L);

        vMeth1(Test.fFld, i3);
        for (i10 = 5; 256 > i10; ++i10) {
            for (i12 = 1; i12 < 6; i12++) {
                Test.iArrFld[i12 + 1] = i11;
                for (i14 = 1; 2 > i14; ++i14) {
                    i3 = (int)l;
                    i13 <<= 89;
                    Test.sFld += (short)i3;
                    bArr[i14 + 1] = b1;
                    Test.instanceCount = i11;
                    if (i14 != 0) {
                    }
                    i15 >>= (int)-251L;
                }
                Test.iArrFld[(208 >>> 1) % N] -= (int)Test.fFld;
                lArr = FuzzerUtils.long2array(N, (long)94L);
                i3 = i10;
            }
        }
        long meth_res = l + i3 + i10 + i11 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=80, i2=-1, i16=-157, i17=6, i18=57219;
        double d=-26.38858;
        byte by=40, byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-26);

        for (int i : Test.iArrFld) {
            float f=0.584F;
            for (i1 = 1; i1 < 4; ++i1) {
                i += (~(byArr[i1 + 1][i1] - (i--)));
                i2 += (33675 - Test.iArrFld[i1]);
                i2 /= (int)(Test.sFld | 1);
            }
            f -= i2;
            d = (++by);
            i <<= (int)(((Test.sFld % -234) - (Test.iArrFld[(-24 >>> 1) % N]--)) * ((Test.iArrFld[(i >>> 1) % N] =
                (int)Test.instanceCount) * (i2++)));
        }
        iMeth(Test.instanceCount, i1);
        for (i16 = 2; i16 < 122; ++i16) {
            i2 *= -82;
            i17 += i16;
        }
        i18 = 1;
        while (++i18 < 205) {
            i2 *= (int)Test.fFld;
            Test.iArrFld[i18 - 1] >>= i17;
        }
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d) + by + i16 + i17 + i18 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-65292, i20=-13, i21=-43998, i22=-22358, i23=-185;
        double d2=1.26455;
        boolean b2=true;
        byte by2=-52;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 3150249210754839257L);

        vMeth();
        iFld = iFld;
        iFld = -100;
        Test.instanceCount -= iFld;
        i19 = 256;
        while ((i19 -= 3) > 0) {
            Test.iArrFld[i19 + 1] = (int)Test.instanceCount;
            if (b2) {
                d2 -= Test.instanceCount;
                i20 = 1;
                while (++i20 < 291) {
                    iFld -= (int)Test.instanceCount;
                    iFld = (int)Test.fFld;
                    switch ((i19 % 5) + 86) {
                    case 86:
                        i21 = 1;
                        do {
                            Test.iArrFld[i21] += -12989;
                        } while ((i21 += 3) < 1);
                        for (i22 = 1; i22 < 1; i22++) {
                            d2 = i23;
                            d2 -= i23;
                            Test.fArrFld[i22 + 1] += Test.fFld;
                            d2 = Test.fFld;
                            switch ((i19 % 7) + 69) {
                            case 69:
                                b2 = b2;
                                if (b2) {
                                    i23 += (((i22 * i20) + i20) - iFld);
                                    try {
                                        i23 = (i19 / 283842478);
                                        iFld = (i22 / iFld);
                                        i23 = (i20 / 43);
                                    } catch (ArithmeticException a_e) {}
                                    iFld <<= (int)25283L;
                                } else {
                                    Test.instanceCount >>= i23;
                                    Test.iArrFld[i22 + 1] <<= 15730;
                                    lArr1 = FuzzerUtils.long1array(N, (long)171L);
                                }
                            case 70:
                                lArr1[i20] += 6L;
                                Test.fFld += i21;
                                break;
                            case 71:
                                iFld -= i22;
                                break;
                            case 72:
                                i23 <<= i22;
                            case 73:
                                Test.dArrFld[i19][i20 - 1] -= i21;
                                break;
                            case 74:
                                by2 -= (byte)Test.sFld;
                                break;
                            case 75:
                                Test.fFld += -108.853F;
                                break;
                            default:
                                Test.instanceCount -= i20;
                            }
                        }
                        break;
                    case 87:
                        iFld -= i19;
                        break;
                    case 88:
                        i23 = i20;
                        break;
                    case 89:
                        Test.iArrFld[i20 - 1] += i23;
                        break;
                    case 90:
                        Test.fArrFld[i19 + 1] *= 14;
                        break;
                    }
                }
            } else if (true) {
                i23 -= (int)d2;
            } else {
                i23 = Test.sFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
