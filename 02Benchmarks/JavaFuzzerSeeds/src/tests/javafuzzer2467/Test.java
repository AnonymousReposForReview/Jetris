package tests.javafuzzer2467;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:02:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3841388676955167460L;
    public static volatile float fFld=-2.759F;
    public boolean bFld=false;
    public int iFld=-246;
    public volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=5, i3=4881, i4=-12, i5=-14, i6=0, i7=13, i8=41, iArr[]=new int[N];
        byte by=107;

        FuzzerUtils.init(iArr, 116);

        i2 = (int)Test.instanceCount;
        for (i3 = 2; i3 < 222; ++i3) {
            try {
                i4 = (217 % i3);
                i2 = (i4 / -20110);
                i4 = (i2 / iArr[i3 - 1]);
            } catch (ArithmeticException a_e) {}
            for (i5 = 1; 7 > i5; i5++) {
                i4 = i6;
                i6 *= (int)Test.fFld;
                by *= (byte)i6;
                for (i7 = 2; i7 > i3; i7--) {
                    try {
                        i2 = (-135 / i6);
                        i4 = (62912 % i8);
                        iArr[i5] = (i6 / i5);
                    } catch (ArithmeticException a_e) {}
                    i8 -= i6;
                    i6 = i6;
                    switch ((((-48060 >>> 1) % 5) * 5) + 113) {
                    case 122:
                        i8 -= i8;
                        Test.instanceCount += (63529 + (i7 * i7));
                        Test.instanceCount -= i2;
                    case 114:
                        iArr[i7] = i4;
                        break;
                    case 131:
                        iArr[i3] *= i4;
                    case 134:
                        i6 *= i4;
                        break;
                    case 132:
                        i8 = -6;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + by + i7 + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, long l1) {

        int i9=-6, i10=-16528, i11=60971, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.326F);
        FuzzerUtils.init(iArr1, -94);

        vMeth1();
        for (i9 = 2; i9 < 222; ++i9) {
            switch ((i9 % 4) + 33) {
            case 33:
                i11 = 1;
                do {
                    Test.fFld = i1;
                    i1 += (i11 * i11);
                    i10 >>= i10;
                    i10 += (i11 ^ i1);
                    switch (((i11 % 1) * 5) + 28) {
                    case 29:
                        Test.instanceCount *= 0;
                        i10 -= (int)Test.instanceCount;
                        i10 = i11;
                        break;
                    }
                    i10 *= i1;
                } while (++i11 < 7);
                fArr[i9 + 1] = i1;
                break;
            case 34:
                i10 = i11;
                break;
            case 35:
                i1 = i1;
                break;
            case 36:
                iArr1[i9 + 1] += -8233;
            }
        }
        vMeth_check_sum += i1 + l1 + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i, long l) {


        vMeth(i, Test.instanceCount);
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        int i12=213, i13=10, i14=42, i15=5, i16=52724, i17=39975, i18=-6, i19=-61416, iArr2[]=new int[N];
        long l2=-5761939975886647755L;
        short s=22626;
        double d=2.97145;

        FuzzerUtils.init(iArr2, -78);

        for (int smallinvoc=0; smallinvoc<954; smallinvoc++) vSmallMeth(12688, Test.instanceCount);
        for (i12 = 11; 254 > i12; i12++) {
            for (l2 = 6; l2 < 103; ++l2) {
                i14 += (int)l2;
                s = (short)i13;
                if (bFld) {
                    i13 -= (int)l2;
                    iArr2[(int)(l2)] = (int)Test.instanceCount;
                } else if (false) {
                    Test.fFld = Test.instanceCount;
                    i13 += (-64042 + (l2 * l2));
                    d = l2;
                    for (i15 = 1; i15 < 2; i15++) {
                        i13 += 15;
                        dArrFld[(int)(l2)] *= i15;
                        i14 = i12;
                    }
                }
                i16 += i12;
                dArrFld[i12] *= Test.fFld;
                try {
                    iArr2[(int)(l2 + 1)] = (i14 % iFld);
                    iArr2[(int)(l2 + 1)] = (-60490 % i12);
                    iFld = (i14 % i16);
                } catch (ArithmeticException a_e) {}
                i13 += (int)3L;
                i13 += (int)119.828F;
            }
            for (i17 = 3; i17 < 103; i17++) {
                i13 += i17;
                Test.fFld %= 3587313039210181965L;
                i19 = 1;
                while (++i19 < 2) {
                    i13 += (int)l2;
                    i14 -= -11384;
                    i14 >>= i17;
                    try {
                        iArr2[i12] = (i12 % i19);
                        i13 = (-39005 / i18);
                        iArr2[i12] = (i19 % iFld);
                    } catch (ArithmeticException a_e) {}
                    s |= (short)65032;
                    lArrFld[i17 - 1] = i19;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
