package tests.javafuzzer1987;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:00:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3169648809L;
    public static int iFld=5;
    public static float fFld=-127.842F;
    public static double dFld=0.53524;
    public boolean bFld=true;
    public volatile byte byFld=-42;
    public static int iFld1=-5;
    public long lArrFld[][]=new long[N][N];
    public static short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)27700);
        FuzzerUtils.init(Test.fArrFld, 74.252F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(int i1, float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -6);

        Test.instanceCount >>>= (((Test.instanceCount + -2) - (Test.iFld - Test.iFld)) * iArr[(Test.iFld >>> 1) % N]);
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i2) {

        float f1=-2.484F, fArr[]=new float[N];
        int i3=198, i4=9, i5=-11, i6=-129, i8=51746, iArr1[]=new int[N];
        boolean b=false;
        byte by1=110;
        short s=-32766;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.640F);
        FuzzerUtils.init(iArr1, 9106);
        FuzzerUtils.init(lArr, -5893645429435519414L);

        vMeth(i2, f1);
        i2 += (int)Test.instanceCount;
        if (b) {
        } else if (b) {
            for (i3 = 15; i3 < 355; i3++) {
                i4 -= Test.iFld;
            }
            for (i5 = 3; 377 > i5; ++i5) {
                Test.instanceCount *= i3;
                switch (((i6 >>> 1) % 2) + 6) {
                case 6:
                    i2 = (int)Test.instanceCount;
                    if (b) {
                        Test.instanceCount += (i5 + Test.iFld);
                        fArr[i5] += Test.fFld;
                        i2 -= -35;
                        Test.iFld *= (int)-113L;
                    } else {
                        i8 %= (int)(by1 | 1);
                    }
                    break;
                case 7:
                    s = (short)i6;
                    break;
                default:
                    lArr[i5 - 1] *= i8;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + (b ? 1 : 0) + i8 + by1 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(byte by) {

        int i9=3, i10=111, i11=175, i12=13;

        vMeth(iMeth1(Test.iFld), Test.fFld);
        Test.fFld += 6;
        i9 = 1;
        while (++i9 < 313) {
            i10 = 5;
            while (--i10 > 0) {
                Test.iFld >>= i10;
                Test.fFld = (float)Test.dFld;
            }
            Test.dFld = Test.iFld;
            i11 = 1;
            do {
                lArrFld[i11 + 1][i11] += i9;
                bFld = bFld;
                Test.instanceCount *= i10;
                i12 = 1;
                do {
                    Test.sArrFld[i11 + 1] *= (short)Test.fFld;
                } while (++i12 < 1);
                iArrFld[i11] = i9;
                Test.iFld |= i10;
            } while (++i11 < 5);
        }
        long meth_res = by + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-39344, i13=29247, i14=-22612, i15=-27041, i16=-189, i17=-8494, i18=-12493, i19=0;
        long l=8493274967580670550L, l1=1358022584L;

        Test.iFld *= (int)lArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N];
        lArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = ((++i) * iMeth(byFld));
        Test.iFld = Test.iFld;
        for (float f2 : Test.fArrFld) {
            switch (((5 >>> 1) % 1) + 18) {
            case 18:
                i13 = 1;
                while (++i13 < 63) {
                    for (i14 = 1; i14 < 1; i14++) {
                        byFld = (byte)i14;
                        iArrFld[i13 + 1] *= i;
                        Test.iFld = i14;
                    }
                    if (bFld) break;
                    Test.instanceCount -= Test.iFld1;
                }
                iArrFld[(-80 >>> 1) % N] *= (int)Test.dFld;
                Test.iFld1 = (int)Test.instanceCount;
                break;
            }
            for (l = 1; l < 63; l++) {
                i15 -= byFld;
            }
            for (i17 = 63; i17 > 3; --i17) {
                Test.instanceCount = Test.iFld1;
                i -= 40390;
                switch ((i17 % 5) + 115) {
                case 115:
                    switch ((i17 % 1) + 119) {
                    case 119:
                        Test.iFld1 += i;
                        for (l1 = 2; l1 > 1; --l1) {
                            switch (((i17 % 1) * 5) + 122) {
                            case 125:
                                i = i17;
                                Test.fFld += Test.iFld1;
                                i19 -= 0;
                                break;
                            }
                            byFld /= (byte)(i | 1);
                            i19 *= (int)1.216F;
                            i19 = (int)l1;
                        }
                        break;
                    }
                    break;
                case 116:
                    Test.iFld += (i17 * i17);
                    break;
                case 117:
                    lArrFld[i17][i17 + 1] += (long)Test.dFld;
                    break;
                case 118:
                    i += i17;
                    break;
                case 119:
                    i16 >>= i;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest iMeth1
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
