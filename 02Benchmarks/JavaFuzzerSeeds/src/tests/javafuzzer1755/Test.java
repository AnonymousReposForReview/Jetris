package tests.javafuzzer1755;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:01:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static volatile byte byFld=-62;
    public static int iFld=5;
    public static short sFld=16211;
    public static volatile double dFld=0.128585;
    public static float fFld=114.605F;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(float f1, float f2, int i1) {


        Test.byFld = (byte)(i1++);
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(boolean b) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -30.86902);

        dArr[(Test.iFld >>> 1) % N] *= ((Test.iFld * (++Test.iArrFld[(2 >>> 1) % N][(Test.iFld >>> 1) % N])) -
            dArr[(Test.iFld >>> 1) % N]);
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(int i4, int i5, int i6) {

        int i7=-56461;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3606796969L);

        Test.instanceCount = (++Test.sFld);
        i6 -= (int)Test.dFld;
        i7 = 305;
        do {
            lArr[i7 + 1] += (((-Test.instanceCount) - (i5++)) * ((i5 * Test.iFld) >>> (long)(Test.instanceCount -
                Test.dFld)));
        } while (--i7 > 0);
        long meth_res = i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {


        Test.iFld -= (int)Test.fFld;
        Test.iFld >>= iMeth1(Test.iFld, Test.iFld, -43916);
        vMeth_check_sum += 0;
    }

    public static int iMeth2(long l, long l1) {

        int i13=75, i14=-27, i15=14, i16=47486, i17=-106;
        long lArr1[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr1, 4442L);
        FuzzerUtils.init(fArr1, 0.577F);

        i13 = 1;
        while (++i13 < 204) {
            Test.fFld += Math.max(Test.iFld, (int)(i13 + -1.511F));
            Test.fFld += (i13 * i13);
            for (i14 = 8; i14 > i13; i14--) {
                if (i14 != 0) {
                }
                Test.instanceCount -= (++lArr1[i13 + 1]);
                Test.iArrFld[i14][i14] >>= Test.sFld;
                lArr1[i14 - 1] >>= l;
                switch ((i14 % 1) + 76) {
                case 76:
                    l += i14;
                    for (i16 = 1; i16 > 1; --i16) {
                        Test.iArrFld[i16] = (Test.iArrFld[i16] = (Test.iArrFld[i14] = Test.iArrFld[i13]));
                        fArr1[i16] = (Test.iArrFld[i16 - 1][i14 + 1] * Math.abs(Test.byFld * l));
                        vMeth();
                        Test.iArrFld[i13 + 1][i16] -= (int)Test.fFld;
                    }
                default:
                    i17 += i17;
                }
            }
        }
        long meth_res = l + l1 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.154F, f3=-72.257F, fArr[][]=new float[N][N];
        int i=29332, i2=-11, i3=0, i8=44075, i9=3, i10=-3815, i11=86, i12=8777, i18=1, i19=45824, i20=-42869, i21=-119;
        boolean b1=true;

        FuzzerUtils.init(fArr, 5.690F);

        for (f = 8; 195 > f; ++f) {
            iMeth(Math.abs(fMeth(b1) + i), fArr[(int)(f + 1)][(int)(f)]--, Test.iFld);
            for (i2 = 4; i2 < 134; i2++) {
                i *= (int)(f3 *= (--Test.instanceCount));
                i = (int)(((i << i3) * (Test.iArrFld[i2 + 1][(int)(f + 1)]--)) >> (lArrFld[i2] = (-iMeth1(i2, i2,
                    Test.iFld))));
                i3 -= i;
                Test.iArrFld[(int)(f - 1)][i2] >>= (Math.max((int)(Test.iFld + Test.dFld), i) + (-i2));
                i += (int)Test.instanceCount;
                i += (-166 + (i2 * i2));
                i3 = Test.iArrFld[(int)(f)][(int)(f + 1)];
                Test.iArrFld[i2 - 1][(int)(f)] *= (int)f;
                i3 <<= (Math.max(-41292, ++i3) - i8);
            }
            for (i9 = 134; i9 > f; i9--) {
                Test.iArrFld[i9] = (Test.iArrFld[i9] = (Test.iArrFld[(int)(f + 1)] = Test.iArrFld[i9 - 1]));
                for (i11 = 1; i11 < 1; i11++) {
                    switch ((((((int)(-2 * (f3 + Test.instanceCount))) >>> 1) % 1) * 5) + 118) {
                    case 123:
                        Test.instanceCount += (Test.instanceCount++);
                        Test.iArrFld[i11][i11 + 1] = (iMeth2(Test.instanceCount, -78L) * i2);
                        i = (int)Test.instanceCount;
                    default:
                        i18 = i9;
                    }
                    lArrFld[i11 - 1] >>= Test.instanceCount;
                }
                Test.instanceCount += (i9 * i9);
                i10 -= Test.byFld;
            }
            for (i19 = 7; i19 < 134; i19 += 2) {
                f3 *= 208;
                Test.instanceCount >>>= -8800233752795336654L;
                i12 = Test.byFld;
                i21 = 1;
                do {
                    i += i12;
                    Test.iArrFld[(i >>> 1) % N] = Test.iArrFld[(int)(f + 1)];
                } while (++i21 < 3);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest vMeth iMeth2
//DEBUG  iMeth2 ->  iMeth2 mainTest
//DEBUG  vMeth ->  vMeth iMeth2 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
