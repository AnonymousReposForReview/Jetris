package tests.javafuzzer779;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:42:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=217L;
    public static boolean bFld=false;
    public static byte byFld=122;
    public static short sFld=-25723;
    public static double dFld=-98.48049;
    public static float fArrFld[]=new float[N];
    public volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld1[][]=new int[N][N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.553F);
        FuzzerUtils.init(Test.lArrFld, -2366443526L);
        FuzzerUtils.init(Test.iArrFld1, -161);
        FuzzerUtils.init(Test.sArrFld, (short)29104);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=4, i9=-25811, i10=-10, i11=4, i12=-8, i13=-52761, iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -38491);
        FuzzerUtils.init(lArr1, 7275445128707585818L);

        Test.instanceCount -= i7;
        Test.sFld *= (short)i7;
        for (i8 = 13; 242 > i8; i8++) {
            for (i10 = 1; i10 < 7; i10++) {
                for (i12 = 1; 2 > i12; ++i12) {
                    i13 = i9;
                    iArr[i8 - 1] += -5;
                    Test.sFld += (short)i12;
                    Test.sFld *= (short)Test.instanceCount;
                    switch (((i8 % 1) * 5) + 6) {
                    case 9:
                        if (Test.bFld) break;
                        break;
                    default:
                        i9 = (int)Test.instanceCount;
                    }
                    lArr1[i12] += Test.instanceCount;
                }
                Test.instanceCount *= i13;
                iArr[i8] = i10;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth1(long l, int i6) {

        int i14=-128, i15=13, i16=-53, i17=-7, i18=210, i19=3, iArr1[][]=new int[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -8658);
        FuzzerUtils.init(byArr, (byte)14);

        vMeth(i6);
        iArr1[(i6 >>> 1) % N][(i6 >>> 1) % N] = Test.sFld;
        i14 = 155;
        while (--i14 > 0) {
            i6 = (int)Test.dFld;
            for (i15 = 1; i15 < 10; i15++) {
                for (i17 = 1; i17 < 2; i17++) {
                    Test.dFld = i18;
                    i18 >>= (int)l;
                }
                if (i16 != 0) {
                }
                Test.lArrFld[i15] = Test.sFld;
                iArr1[i15 + 1][i14] = i16;
                i19 = 2;
                do {
                    i18 -= i6;
                    byArr[i15 + 1] += (byte)i19;
                    i18 += (i19 | Test.instanceCount);
                } while ((i19 -= 2) > 0);
            }
        }
        long meth_res = l + i6 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(double d2, int i5, double d3) {

        float f1=-108.146F;
        int i20=-12, i21=29, i22=198;

        d3 *= (((168 * (i5 += (int)-40658L)) + (f1 - i5)) * lMeth1(Test.instanceCount, i5));
        for (i20 = 8; i20 < 343; ++i20) {
            i22 = 1;
            while (++i22 < 5) {
                Test.instanceCount <<= i21;
                try {
                    i21 = (i21 % -17760);
                    i21 = (i21 % i20);
                    i21 = (i20 / i5);
                } catch (ArithmeticException a_e) {}
                i21 *= i20;
                Test.iArrFld1 = Test.iArrFld1;
                Test.byFld = (byte)41020;
                i5 += (i22 * f1);
                if (i21 != 0) {
                }
            }
            i21 <<= 37959;
            Test.bFld = Test.bFld;
            Test.instanceCount = i22;
            Test.lArrFld[i20] -= i20;
        }
        Test.instanceCount += i22;
        long meth_res = Double.doubleToLongBits(d2) + i5 + Double.doubleToLongBits(d3) + Float.floatToIntBits(f1) + i20
            + i21 + i22;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-102.121951, d1=115.47709;
        int i=28602, i1=11, i2=36570, i3=-45518, i4=13, i23=-3, i24=-45, i25=0, i26=-49274, i27=49856;
        float f=62.771F;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 45859L);

        for (d = 12; d < 366; ++d) {
            for (i1 = 71; i1 > d; i1 -= 3) {
                Test.bFld = bArr[(int)(d)];
                Test.fArrFld[i1] -= (float)((-i2) + (i = (int)(d1 /= (i1 | 1))));
                if (Test.bFld) break;
                i |= Test.byFld;
                for (i3 = 1; 1 > i3; ++i3) {
                    iArrFld[(int)(d - 1)] ^= (int)((-(f - 3)) + Math.max((int)(2 - lArr[i3 - 1]), (int)(i2 =
                        (int)Test.instanceCount)));
                    i2 *= Math.abs((int)(lMeth(d1, i4, Test.dFld) * Test.instanceCount));
                    i *= i;
                }
                switch ((i1 % 5) + 10) {
                case 10:
                    if (Test.bFld) {
                        i4 -= i;
                        i4 += (i1 * i23);
                        for (i24 = (int)(d); i24 < 1; ++i24) {
                            Test.instanceCount = (long)d1;
                            iArrFld[i24] = -250;
                            Test.bFld = Test.bFld;
                        }
                    } else if (Test.bFld) {
                        i2 = (int)d;
                        i26 = 1;
                        while (++i26 < 1) {
                            if (Test.bFld) {
                                f -= i;
                            } else {
                                Test.iArrFld1[(int)(d - 1)][i26] = i2;
                            }
                            f += (((i26 * i) + i25) - f);
                            Test.sArrFld[(int)(d)] %= (short)(i24 | 1);
                            Test.instanceCount <<= i26;
                            Test.instanceCount = 6;
                            i23 += i26;
                            i23 += (((i26 * i2) + i26) - i27);
                            i27 = (int)Test.instanceCount;
                        }
                    } else {
                        Test.instanceCount *= i4;
                    }
                    break;
                case 11:
                    Test.bFld = Test.bFld;
                    break;
                case 12:
                    i25 >>= Test.byFld;
                case 13:
                    i23 <<= Test.byFld;
                    break;
                case 14:
                    i23 %= (int)64.103096;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
