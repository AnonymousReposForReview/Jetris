package tests.javafuzzer2540;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:23 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2948373395L;
    public static int iFld=5;
    public static double dFld=109.59230;
    public static volatile short sFld=21481;
    public long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];
    public volatile short sArrFld[]=new short[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=-65, i7=-25544, i8=-12, i9=-62680, i10=-8, i11=65303, iArr2[][]=new int[N][N];
        float f1=53.688F;
        short s=-6428;
        double d2=2.103682;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 85);
        FuzzerUtils.init(lArr, 487944196637806865L);

        for (i6 = 8; i6 < 396; ++i6) {
            for (i8 = 1; i8 < 4; i8++) {
                f1 += (i8 * i8);
                Test.iFld ^= i6;
                f1 += (i8 * Test.instanceCount);
                Test.iFld += (i8 | i6);
                iArr2[i6 + 1][i8 - 1] = (int)1.265F;
                Test.iFld >>= i7;
                try {
                    iArr2[i8 + 1][i6] = (i8 / Test.iFld);
                    i9 = (-1931 % iArr2[i8 - 1][i8 - 1]);
                    i7 = (Test.iFld % i7);
                } catch (ArithmeticException a_e) {}
                Test.iFld >>= i7;
                i7 = s;
                lArr[i8] += Test.instanceCount;
            }
            for (i10 = i6; 4 > i10; ++i10) {
                s += (short)i10;
                d2 += i10;
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s + i10 + i11 + Double.doubleToLongBits(d2)
            + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i4=-2823, i5=148, i12=-5, i13=-249, i14=-14, i15=7867, i16=224, iArr1[]=new int[N], iArr3[][]=new int[N][N];
        float f2=79.350F;

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(iArr3, 24);

        Test.instanceCount ^= (((Test.instanceCount + Test.iFld) + (16 - iArr1[(Test.iFld >>> 1) % N])) -
            (Test.iFld--));
        for (i4 = 14; i4 < 326; ++i4) {
            double d1=-2.96912;
            d1 += (++Test.iFld);
            vMeth1();
            switch (((-54 >>> 1) % 2) + 45) {
            case 45:
                for (i12 = i4; i12 < 5; ++i12) {
                    i13 >>= i13;
                    i14 += (((i12 * i5) + i13) - f2);
                    iArr1[i4] -= i12;
                    for (i15 = 1; i15 < 1; ++i15) {
                        short s1=2081;
                        Test.instanceCount += i15;
                        i14 = -157;
                        i5 += i15;
                        iArr3 = FuzzerUtils.int2array(N, (int)-12);
                        iArr1[i12 + 1] = s1;
                    }
                }
                break;
            case 46:
                i14 *= 10;
                break;
            default:
                i14 -= 7;
            }
        }
        long meth_res = i4 + i5 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(double d, int i, float f) {

        int i1=-15352, i2=14, i3=-26, i17=10670;

        for (i1 = 7; 252 > i1; i1++) {
            Test.iFld = (int)(((lArrFld[i1][i1]--) - Test.instanceCount) + i);
            i3 = 1;
            while (++i3 < 7) {
                i2 += i3;
                iArrFld[i3 - 1] ^= Integer.reverseBytes(iMeth());
                Test.iFld -= (int)d;
                i2 += (-31309 + (i3 * i3));
                if (Test.iFld != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i1 + i2 + i3 + i17;
                    return;
                }
                Test.instanceCount >>>= Test.instanceCount;
                if (true) continue;
                Test.iFld = i;
            }
            i += (((i1 * Test.instanceCount) + i3) - f);
            i17 = 1;
            do {
                short s2=26001;
                f = f;
                s2 -= (short)i17;
            } while (++i17 < 7);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i1 + i2 + i3 + i17;
    }

    public void mainTest(String[] strArr1) {

        float f3=0.955F;
        int i18=5, i19=56072, i20=-226, i21=10, i22=-91, i23=-171, i24=13, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -3);

        iArr[(Test.iFld >>> 1) % N] = (int)(lArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]--);
        vMeth(Test.dFld, Test.iFld, f3);
        for (i18 = 10; i18 < 195; i18++) {
            Test.iFld = i19;
            for (i20 = 7; i20 < 136; i20++) {
                f3 -= i19;
                f3 += i20;
                iArrFld[i20 + 1] |= Test.iFld;
                Test.instanceCount += i19;
                i22 = 1;
                while (++i22 < 2) {
                    iArrFld = FuzzerUtils.int1array(N, (int)0);
                    Test.iFld >>= Test.iFld;
                    i19 += i22;
                    Test.instanceCount += (((i22 * i18) + i18) - i22);
                    Test.dFld += Test.dFld;
                    iArrFld[i20 + 1] = i19;
                    i19 -= i19;
                }
            }
            sArrFld = sArrFld;
            for (i23 = 136; i23 > 5; i23 -= 3) {
                i24 = i19;
                Test.sFld = (short)i23;
                if (b) {
                    i24 = i23;
                    iArrFld[i18 + 1] *= i23;
                    i19 += (int)Test.instanceCount;
                    iArr[i18 + 1] = i19;
                } else if (b) {
                    try {
                        i19 = (226 / iArr[i23]);
                        Test.iFld = (i19 % -254);
                        i19 = (i22 % 758814122);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount &= i24;
                }
            }
            iArr[i18 + 1] = Test.iFld;
            i21 <<= 135;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
