package tests.javafuzzer3099;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:43:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8110969793369637490L;
    public static float fFld=116.6F;
    public static int iFld=2;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile byte byArrFld[]=new byte[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte)42);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b, int i10, int i11) {

        int i12=170, i13=11, i14=64894, i15=-7, i16=8, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 68.945F);
        FuzzerUtils.init(iArr, 0);

        i11 -= (int)0L;
        fArr[(i10 >>> 1) % N] -= Test.instanceCount;
        for (i12 = 5; i12 < 185; ++i12) {
            iArr[i12] *= -134;
            Test.instanceCount <<= i10;
            i10 -= (int)Test.instanceCount;
        }
        i11 = (int)Test.instanceCount;
        i13 *= (int)-3667101013343655187L;
        i10 = i11;
        i14 = 182;
        do {
            i10 = (int)Test.instanceCount;
            Test.instanceCount -= i14;
            for (i15 = 1; 9 > i15; i15++) {
                if (b) continue;
            }
            i13 ^= (int)Test.instanceCount;
        } while (--i14 > 0);
        vMeth1_check_sum += (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(double d, long l, int i4) {

        int i5=49509, i6=10727, i7=84, i8=14, i9=52198, i17=13, iArr1[]=new int[N];
        boolean b1=false;
        float f=1.203F, fArr1[]=new float[N];
        byte by=-91;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 72.39480);
        FuzzerUtils.init(lArr, 1896956210L);
        FuzzerUtils.init(fArr1, 0.997F);
        FuzzerUtils.init(iArr1, 13228);

        d *= (-40284 - ((dArr[(i4 >>> 1) % N] += i4) - (i4 * l)));
        for (i5 = 10; 165 > i5; i5++) {
            for (i7 = 1; i7 < 10; ++i7) {
                d -= (i7 + ((Test.instanceCount + i9) - (--lArr[i5 + 1])));
                vMeth1(b1, 19044, i6);
                lArr[i5 + 1] = Test.instanceCount;
                i4 = i4;
                l += (-3 + (i7 * i7));
                fArr1[i7] -= 251;
                for (f = 2; 1 < f; --f) {
                    i4 = by;
                    iArr1 = iArr1;
                }
            }
            Test.fFld += -1;
            l -= (long)d;
            l = (long)f;
        }
        long meth_res = Double.doubleToLongBits(d) + l + i4 + i5 + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f) + i17 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=9, i1=53309, i2=3, i3=-52913, i18=-33;
        boolean b2=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-407);

        for (i = 10; i < 282; i++) {
            Test.bArrFld = (Test.bArrFld = (Test.bArrFld = (Test.bArrFld = Test.bArrFld)));
            for (i2 = 1; i2 < 6; i2++) {
                i1 = sArr[i];
                Test.byArrFld = (Test.byArrFld = (Test.byArrFld = (Test.byArrFld = Test.byArrFld)));
                i1 = iMeth(-1.120559, -8L, -64229);
                if (b2) break;
                i18 = 1;
                do {
                    i1 >>= i2;
                    Test.instanceCount += (i18 * i);
                    Test.byArrFld[i2 + 1] -= (byte)i;
                    i1 = (int)Test.instanceCount;
                    i1 ^= i;
                    i3 += (i18 | i);
                    Test.instanceCount += i1;
                } while ((i18 += 3) < 2);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + (b2 ? 1 : 0) + i18 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-51887, i20=5, i21=1, i22=-11048, i23=4, i24=15453, i25=-53217, iArr2[]=new int[N];
        double d1=-24.49449, d2=1.8367;
        byte by1=-57;
        short s=22514;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 133L);
        FuzzerUtils.init(iArr2, -245);

        vMeth();
        switch ((((Test.iFld >>> 1) % 4) * 5) + 123) {
        case 136:
            i19 = 1;
            while (++i19 < 175) {
                Test.iFld *= (int)Test.fFld;
                Test.iFld = (int)Test.instanceCount;
                iArrFld[i19 + 1][i19] -= (int)Test.instanceCount;
                for (i20 = 7; i20 < 143; i20++) {
                    lArr1[i20] = -3;
                    d1 = i22;
                    Test.iFld ^= i22;
                    try {
                        Test.iFld = (Test.iFld % Test.iFld);
                        iArrFld[i19 - 1][i19] = (Test.iFld / i19);
                        i21 = (i19 / -45082);
                    } catch (ArithmeticException a_e) {}
                    i21 += i21;
                    i22 += (i20 * i20);
                    Test.fFld = 9L;
                    Test.iFld += 7;
                    Test.instanceCount += i20;
                    Test.fFld += -94;
                }
                lArr1[i19] = 395761791856133681L;
                d2 = 143;
                while (--d2 > 0) {
                    Test.fFld += (-97 + (d2 * d2));
                    iArrFld[(int)(d2 + 1)][(int)(d2 + 1)] += (int)Test.instanceCount;
                }
                for (i23 = 143; i23 > 7; i23 -= 2) {
                    iArrFld[i19 + 1][i23] = (int)-4362L;
                    i22 = by1;
                    i25 = 3;
                    do {
                        Test.iFld += (((i25 * Test.fFld) + i24) - i24);
                        i24 *= s;
                        i24 -= Test.iFld;
                        i24 += (((i25 * Test.iFld) + Test.instanceCount) - Test.instanceCount);
                        Test.fFld *= Test.instanceCount;
                    } while (--i25 > 0);
                }
            }
            break;
        case 125:
            Test.instanceCount <<= i22;
        case 139:
            i21 -= (int)1.116411;
            break;
        case 140:
            iArr2[(i20 >>> 1) % N] = i24;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
