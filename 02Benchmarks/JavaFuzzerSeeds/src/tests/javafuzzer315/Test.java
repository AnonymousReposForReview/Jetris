package tests.javafuzzer315;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:40:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6772429919913253633L;
    public static double dFld=125.32045;
    public static float fFld=2.958F;
    public short sFld=24000;
    public static byte byFld=58;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {

        float f1=-79.9F;
        int i7=-5955, i8=13, i9=-3615;

        Test.instanceCount -= (long)f1;
        i6 *= (int)Test.dFld;
        for (i7 = 7; 191 > i7; i7++) {
            i6 += (i7 + i9);
            i8 *= (int)827508950L;
        }
        Test.instanceCount -= i6;
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, short s, float f) {

        int i4=201, i5=11039, i11=-18354, iArr[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr, 14);

        for (i4 = 8; i4 < 284; i4++) {
            int i10=-12;
            iArr[i4 - 1][i4] -= (iMeth(i5) + 0);
            iArr[i4 - 1][i4 - 1] = 39;
            i3 = (int)Test.instanceCount;
            switch ((((i5 >>> 1) % 1) * 5) + 103) {
            case 106:
                f -= i3;
                f += (((i4 * i5) + i5) - Test.instanceCount);
                i5 = (int)50.48083;
                if (b) break;
                break;
            default:
                Test.instanceCount -= Test.instanceCount;
                i3 = i10;
            }
            Test.instanceCount = i11;
            i5 *= (int)1.465F;
            i11 += i5;
            i10 += (i4 ^ i4);
        }
        vMeth_check_sum += i3 + s + Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + i11 + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i1, int i2, long l) {

        short s1=-13550;

        vMeth(i2, s1, Test.fFld);
        vSmallMeth_check_sum += i1 + i2 + l + s1;
    }

    public void mainTest(String[] strArr1) {

        double d=0.32954;
        int i=-111, i12=0, i13=55801, i14=0, i15=49016, i16=6, i17=-13, i18=-1, i19=-12304, iArr1[]=new int[N];
        boolean b1=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -12L);
        FuzzerUtils.init(iArr1, 0);

        for (d = 7; d < 198; ++d) {
            Test.instanceCount += (long)(((d * i) + i) - i);
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i, 82, Test.instanceCount);
            for (i12 = 131; i12 > d; i12--) {
                lArr = lArr;
                i13 ^= (int)Test.instanceCount;
                iArr1[(int)(d)] >>>= i13;
                Test.instanceCount -= i13;
                sFld = (short)i13;
                i += (((i12 * i13) + sFld) - i12);
                if (b1) continue;
            }
            i13 >>= i;
            i13 = i;
        }
        Test.dFld *= i12;
        for (i14 = 13; i14 < 308; ++i14) {
            i15 += (int)-6667384237873526451L;
        }
        i13 = i14;
        iArr1[(i >>> 1) % N] >>>= 10079;
        i15 = 114;
        for (i16 = 1; i16 < 129; ++i16) {
            i17 = (int)Test.instanceCount;
            i += 5;
            for (i18 = 10; 196 > i18; i18++) {
                i19 += i19;
                i <<= (int)Test.instanceCount;
                Test.instanceCount = i12;
                Test.byFld *= (byte)Test.dFld;
                i13 += 0;
            }
            i19 &= 10;
            Test.fFld += i14;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
