package tests.javafuzzer3250;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:35:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4665569539266136098L;
    public static double dFld=-1.50781;
    public byte byFld=-97;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -45801);
        FuzzerUtils.init(Test.lArrFld, -195L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        boolean b=false;

        Test.iArrFld[(i4 >>> 1) % N] = i4;
        b = b;
        vMeth2_check_sum += i4 + (b ? 1 : 0);
    }

    public static void vMeth1(int i2, byte by, int i3) {

        float f=-81.867F, f1=-72.992F;
        double d1=73.27867;
        int i5=-32659, i6=2;
        short s=31351;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        vMeth2(6);
        f = 1;
        while (++f < 243) {
            d1 -= by;
            bArr[(int)(f)] = false;
            i3 %= (int)(i3 | 1);
            i2 = (int)f;
            f1 = 1;
            while (++f1 < 7) {
                for (i5 = 1; 1 > i5; ++i5) {
                    i6 -= i6;
                    Test.iArrFld[i5 + 1] *= (int)f;
                    i3 += (int)(-45.342F + (i5 * i5));
                    i3 >>= (int)Test.instanceCount;
                    s = (short)i6;
                }
                i3 += (int)(f1 * i6);
                i3 = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i2 + by + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + i5 + i6 + s + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i1) {

        byte by1=-76;
        int i7=-14, i8=64490, i9=7, i10=12;
        float f2=-6.154F;
        short s1=-5988;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 0.93063);
        FuzzerUtils.init(lArr, 18278L);

        vMeth1(i1, by1, i1);
        switch ((((i1 >>> 1) % 9) * 5) + 17) {
        case 52:
            i7 = 349;
            do {
                Test.iArrFld[i7 - 1] = i1;
                dArr[i7 - 1] = i7;
                i8 = 1;
                do {
                    i1 += (((i8 * i8) + i7) - i1);
                    f2 += i7;
                    Test.iArrFld[(i8 >>> 1) % N] = (int)f2;
                } while (++i8 < 5);
                Test.instanceCount -= i1;
                for (i9 = 5; i9 > 1; i9 -= 2) {
                    i1 += (((i9 * i1) + i8) - Test.instanceCount);
                    Test.dFld -= Test.dFld;
                    i10 += (i9 ^ by1);
                    i1 *= i7;
                }
            } while (--i7 > 0);
            break;
        case 29:
            i10 -= i9;
        case 45:
            i10 -= (int)Test.instanceCount;
            break;
        case 35:
            Test.instanceCount -= Test.instanceCount;
            break;
        case 34:
            by1 += (byte)i7;
            break;
        case 53:
            s1 -= (short)Test.instanceCount;
            break;
        case 20:
            i10 = (int)Test.instanceCount;
        case 18:
            i1 = (int)Test.instanceCount;
        case 42:
            Test.iArrFld[(i10 >>> 1) % N] += (int)Test.instanceCount;
            break;
        }
        vMeth_check_sum += i1 + by1 + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=0.55797, d2=-1.99221;
        int i=-198, i12=1, i13=110, i14=-52889, i15=14, i16=-40434, i17=20;
        float f3=0.701F;
        boolean b1=false;
        long l1=-2L;

        for (d = 7; d < 363; d++) {
            vMeth(i);
            Test.dFld *= i;
            f3 -= i;
            for (d2 = d; d2 < 71; d2++) {
                i12 += i;
            }
            i13 = 1;
            do {
                f3 += ((long)i13 | (long)i);
                if (b1) break;
            } while (++i13 < 71);
            i12 *= (int)f3;
        }
        l1 = 377;
        while (--l1 > 0) {
            i12 += (int)(((l1 * i12) + i) - f3);
            byFld += (byte)l1;
        }
        i -= (int)l1;
        for (i14 = 10; i14 < 305; i14++) {
            try {
                i = (i13 % i15);
                i15 = (i13 / Test.iArrFld[i14]);
                Test.iArrFld[i14] = (i13 / i);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount >>= i13;
            i15 -= (int)Test.instanceCount;
            i15 += (i14 * i15);
            i15 -= (int)Test.dFld;
            Test.instanceCount *= -61557;
            Test.iArrFld[i14] += i13;
        }
        for (i16 = 199; i16 > 1; i16--) {
            byFld = (byte)i13;
            f3 *= i12;
            Test.lArrFld[i16 + 1] += i;
            Test.instanceCount = 1762;
            Test.instanceCount += (((i16 * i15) + l1) - Test.instanceCount);
            try {
                i17 = (i16 / i13);
                Test.iArrFld[i16] = (Test.iArrFld[i16] / Test.iArrFld[i16 - 1]);
                Test.iArrFld[i16] = (-186876035 % i17);
            } catch (ArithmeticException a_e) {}
        }
        Test.iArrFld[(i15 >>> 1) % N] += -29197;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
