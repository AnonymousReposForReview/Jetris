package tests.javafuzzer3040;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:05:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public static float fFld=89.973F;
    public static double dFld=-2.2093;
    public static volatile boolean bFld=true;
    public int iFld=-166;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35186);
        FuzzerUtils.init(Test.fArrFld, 117.114F);
        FuzzerUtils.init(Test.lArrFld, -145L);
        FuzzerUtils.init(Test.byArrFld, (byte)77);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=-7, i8=-148, i9=-195, i10=46, i11=5, i12=-28286;
        double d=2.13036;
        float f=2.968F;

        i7 -= i7;
        for (i8 = 9; i8 < 155; i8++) {
            i7 = i8;
            i10 = 1;
            do {
                i9 += (int)d;
                i9 *= (int)Test.instanceCount;
                i11 = (int)Test.instanceCount;
                i7 = i8;
                Test.fArrFld[i10] = i7;
                for (f = 1; f < 1; ++f) {
                    Test.lArrFld[(int)(f - 1)] += -209;
                }
            } while (++i10 < 11);
            Test.instanceCount += (((i8 * Test.instanceCount) + i9) - i12);
            i12 += (i8 * i8);
        }
        i7 = i8;
        Test.iArrFld[(-94 >>> 1) % N] = (int)2.849F;
        long meth_res = i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f) + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i3=4, i4=-222, i5=-5, i6=106, iArr[]=new int[N];
        byte by=-34;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 71);
        FuzzerUtils.init(dArr, -1.6082);

        for (int i2 : Test.iArrFld) {
            for (i3 = 4; i3 > 1; i3--) {
                i4 /= (int)((Test.instanceCount++) | 1);
                for (i5 = 1; i5 < 2; ++i5) {
                    short s=-26378;
                    i6 *= (int)((i4 + (i6 ^ i5)) << ((-Test.iArrFld[i5 + 1]) + (-(i4 - Test.instanceCount))));
                    i2 *= (iMeth() + i5);
                    iArr[i5] = -29411;
                    i1 = i4;
                    switch (((i4 >>> 1) % 5) + 9) {
                    case 9:
                        Test.fFld *= (float)Test.dFld;
                        switch (((i3 % 7) * 5) + 27) {
                        case 56:
                            switch (((i3 % 5) * 5) + 80) {
                            case 97:
                                Test.fFld += (((i5 * by) + i2) - Test.instanceCount);
                                break;
                            case 94:
                                i2 <<= (int)Test.instanceCount;
                                i4 = -64263;
                                break;
                            case 98:
                                Test.iArrFld = Test.iArrFld;
                            case 81:
                                dArr[i3 + 1] = 0;
                                break;
                            case 91:
                                i2 = (int)1.472F;
                                break;
                            default:
                                Test.instanceCount += (long)Test.dFld;
                            }
                            break;
                        case 42:
                            if (Test.bFld) continue;
                            break;
                        case 48:
                            Test.instanceCount = i2;
                            break;
                        case 53:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 38:
                            Test.instanceCount /= (s | 1);
                        case 52:
                            i1 -= i4;
                            break;
                        case 50:
                            Test.instanceCount += i3;
                            break;
                        default:
                            i2 <<= i3;
                        }
                        break;
                    case 10:
                        s += (short)Test.dFld;
                        break;
                    case 11:
                        Test.fFld = i1;
                        break;
                    case 12:
                        dArr[i5 + 1] += i2;
                        break;
                    case 13:
                        Test.instanceCount += (-147 + (i5 * i5));
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i3 + i4 + i5 + i6 + by + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i) {


        vMeth(i);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i13=12, i14=8, i15=-59228, i16=37410;
        byte by1=75;
        double d1=1.67211;

        for (int smallinvoc=0; smallinvoc<597; smallinvoc++) vSmallMeth(iFld);
        i13 = 1;
        do {
            Test.instanceCount = iFld;
            switch ((i13 % 5) + 13) {
            case 13:
                Test.iArrFld[i13 - 1] = iFld;
                break;
            case 14:
                Test.byArrFld = Test.byArrFld;
                Test.lArrFld[i13 + 1] *= by1;
                Test.instanceCount += (((i13 * i13) + Test.instanceCount) - Test.fFld);
            case 15:
                iFld *= (int)-26.116739;
                for (i14 = 2; 186 > i14; i14++) {
                    switch ((i14 % 6) + 75) {
                    case 75:
                        if (Test.bFld) continue;
                        i15 = (int)Test.instanceCount;
                        for (d1 = 1; d1 < 2; d1++) {
                            Test.instanceCount &= Test.instanceCount;
                            iFld = 8;
                            Test.instanceCount = i14;
                            switch (((i13 % 10) * 5) + 101) {
                            case 111:
                                Test.fFld = i14;
                                i16 = (int)Test.fFld;
                                break;
                            case 143:
                                switch (((i14 % 1) * 5) + 45) {
                                case 47:
                                    Test.iArrFld[i14 + 1] -= i15;
                                    break;
                                }
                                break;
                            case 150:
                                Test.fFld = i14;
                                break;
                            case 126:
                                i16 = (int)Test.instanceCount;
                                i15 += (int)(((d1 * iFld) + Test.instanceCount) - i14);
                                i15 = -75;
                                Test.instanceCount = 0L;
                            case 147:
                                i15 -= i16;
                                Test.fFld = i16;
                                Test.instanceCount += (long)d1;
                                break;
                            case 129:
                                i16 += (int)(-34202L + (d1 * d1));
                                break;
                            case 119:
                                Test.instanceCount *= iFld;
                                break;
                            case 151:
                                i15 = iFld;
                                break;
                            case 115:
                                i15 = iFld;
                            case 133:
                                Test.bFld = Test.bFld;
                                break;
                            default:
                                Test.fFld /= (i14 | 1);
                            }
                        }
                        break;
                    case 76:
                        Test.iArrFld[i13] -= (int)Test.instanceCount;
                        break;
                    case 77:
                        Test.instanceCount <<= i15;
                        break;
                    case 78:
                        i16 = iFld;
                        break;
                    case 79:
                        i15 = (int)Test.instanceCount;
                        break;
                    case 80:
                        Test.lArrFld[i14 - 1] = -3L;
                        break;
                    default:
                        Test.lArrFld[i14] = iFld;
                    }
                }
            case 16:
                iFld += i16;
                break;
            case 17:
                iFld += i13;
            }
        } while ((i13 += 2) < 270);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
