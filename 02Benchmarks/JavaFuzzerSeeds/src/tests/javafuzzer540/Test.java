package tests.javafuzzer540;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:26:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2755674464867761583L;
    public double dFld=42.86620;
    public short sFld=-30334;
    public static int iFld1=-249;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8405732959063995661L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i7) {

        int i8=-201, i9=-174, i10=0, i11=-31, i12=158, i13=-6791, iArr1[]=new int[N];
        float f1=-2.846F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7450213008309254450L);
        FuzzerUtils.init(iArr1, 0);

        lArr[(i7 >>> 1) % N] = i7;
        i7 += i7;
        i7 = i7;
        for (i8 = 19; i8 < 358; ++i8) {
            f1 += ((long)i8 ^ (long)l1);
            if (true) {
                if (i7 != 0) {
                    vMeth_check_sum += l1 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + (b1 ? 1 :
                        0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                for (i10 = 1; i10 < 5; i10++) {
                    if (b1) {
                        for (i12 = 1; i12 < 2; i12++) {
                            iArr1[i10] ^= (int)l1;
                            f1 = 154;
                            i11 |= i12;
                            i11 += i13;
                            i11 -= i8;
                        }
                    } else {
                        i9 += 10;
                    }
                }
            } else {
                i13 += (i8 ^ i10);
            }
        }
        vMeth_check_sum += l1 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(boolean b, int i6, float f) {

        int i15=128, i16=-41521, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        double d=-124.9426;
        short s1=32242;
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -77);
        FuzzerUtils.init(iArr3, -5);
        FuzzerUtils.init(fArr, 0.657F);
        FuzzerUtils.init(byArr, (byte)14);
        FuzzerUtils.init(lArr1, 6L);

        if (b) {
            vMeth(Test.instanceCount, i6);
        } else {
            Test.instanceCount ^= i6;
        }
        for (int i14 : iArr2) {
            for (i15 = 1; i15 < 4; i15++) {
                i14 >>= (int)5874597608950559784L;
                iArr3[i15 + 1][i15 - 1] -= i14;
                fArr[i15] = i14;
            }
            d *= i15;
        }
        d = i16;
        byArr[(i16 >>> 1) % N] *= (byte)Test.instanceCount;
        lArr1[(i15 >>> 1) % N] = i16;
        i16 *= i16;
        s1 *= (short)i16;
        i6 -= i16;
        long meth_res = (b ? 1 : 0) + i6 + Float.floatToIntBits(f) + i15 + i16 + Double.doubleToLongBits(d) + s1 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i4, long l, int i5) {

        boolean b2=true;
        float f2=23.1008F;
        int i17=16648, i18=49790, i19=60876, i20=-40, i21=7, iArr4[]=new int[N];
        byte by1=-111;

        FuzzerUtils.init(iArr4, 253);

        iMeth1(b2, i5, f2);
        for (i17 = 8; i17 < 172; i17++) {
            i4 += i5;
            for (i19 = 1; i19 < 10; ++i19) {
                i18 = i17;
                i18 = i20;
                i21 = 1;
                do {
                    iArr4[i21] = (int)-74L;
                    if (true) {
                        iArr4[i21] -= by1;
                        dFld += i21;
                    } else if (b2) {
                        iArr4[i19 - 1] -= i20;
                        i20 += i21;
                        i18 -= sFld;
                        iArr4[i19] *= 5;
                    } else if (b2) {
                        b2 = b2;
                    }
                } while (++i21 < 2);
            }
        }
        long meth_res = i4 + l + i5 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + i21 + by1 +
            FuzzerUtils.checkSum(iArr4);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        short s=-17746;
        int i=63201, i1=-113, i2=-119, i3=1, i22=0, i23=6, i24=-11, i25=243, iArr[]=new int[N];
        byte by2=-91;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 930);
        FuzzerUtils.init(dArr, -75.60156);

        iArr[(-186 >>> 1) % N] = s;
        if (bFld) {
            for (i = 9; i < 205; i++) {
                for (i2 = 4; i2 < 128; ++i2) {
                    i3 = iMeth(Test.iFld1, Test.instanceCount, i1);
                    for (i22 = 1; i22 < 2; ++i22) {
                        by2 = (byte)i22;
                        switch ((((-98 >>> 1) % 1) * 5) + 21) {
                        case 26:
                            Test.lArrFld[i2] = 9;
                            break;
                        default:
                            dArr[i2 - 1] += i1;
                            fArrFld[i22 + 1][i22 - 1] *= Test.instanceCount;
                            dFld -= -128;
                        }
                        i3 = i;
                        Test.instanceCount += -10726L;
                        i1 -= (int)Test.instanceCount;
                        Test.instanceCount &= i;
                        if (false) {
                            Test.lArrFld[i] *= Test.instanceCount;
                            i1 = 14;
                            if (bFld) break;
                        } else {
                            iArr[i + 1] *= (int)Test.instanceCount;
                            i1 -= i22;
                            Test.lArrFld[i - 1] -= i;
                        }
                        i23 ^= i3;
                        i1 -= i22;
                        Test.iFld1 += i22;
                    }
                    Test.instanceCount += (0 + (i2 * i2));
                    for (i24 = 2; 1 < i24; i24--) {
                        iArr[i2 - 1] += 148;
                    }
                    i1 <<= i2;
                }
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
