package tests.javafuzzer2673;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:25:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static boolean bFld=true;
    public short sFld=26894;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -58347);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(long l1) {

        int i6=38, i7=-179, i8=-126, i9=38934, i10=18047;
        long l2=-6272L;
        byte by=64, byArr[]=new byte[N];
        short s=26597;
        double d=2.114801;
        float f=-13.552F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -14.43F);
        FuzzerUtils.init(byArr, (byte)54);

        fArr1[(i6 >>> 1) % N] = i6;
        i7 = 1;
        while (++i7 < 357) {
            l2 = 1;
            do {
                for (i8 = 1; i8 < 1; i8 += 2) {
                    if (Test.bFld) break;
                    i6 += (((i8 * Test.instanceCount) + i9) - l2);
                    i6 -= i8;
                    switch ((i8 % 2) + 72) {
                    case 72:
                        byArr[(int)(l2 + 1)] += by;
                        break;
                    case 73:
                        s += (short)(((i8 * Test.instanceCount) + i6) - i8);
                        i9 += (-19941 + (i8 * i8));
                    }
                    d += i6;
                    i6 += i10;
                    f = (float)d;
                }
                Test.iArrFld[i7 + 1] += i8;
            } while (++l2 < 5);
        }
        long meth_res = l1 + i6 + i7 + l2 + i8 + i9 + by + s + Double.doubleToLongBits(d) + i10 +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public short sMeth() {

        int i2=-60767, i3=-196, i4=33954, i5=-44343, i11=7, i12=9, iArr[]=new int[N];
        float f1=-125.591F, fArr[]=new float[N];
        byte byArr1[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 1.939F);
        FuzzerUtils.init(byArr1, (byte)55);
        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr, 4);

        if (Test.bFld) {
            for (i2 = 8; i2 < 149; i2++) {
                for (i4 = i2; i4 < 11; ++i4) {
                    fArr[i4] += ((byMeth(Test.instanceCount) + 0) << Test.instanceCount);
                    i5 = i4;
                    Test.iArrFld[i2 + 1] *= 6;
                    byArr1[i4 + 1][i2 + 1] = (byte)i2;
                    Test.iArrFld[i4 + 1] >>= (int)Test.instanceCount;
                    for (i11 = i4; i11 < 1; ++i11) {
                        switch (((i2 % 10) * 5) + 46) {
                        case 74:
                            lArr[i4] += i5;
                            i3 = -6586;
                        case 57:
                            Test.instanceCount += (((i11 * i4) + i11) - i2);
                            Test.iArrFld[i2] ^= 49273;
                            i3 += (-13 + (i11 * i11));
                            break;
                        case 92:
                            i5 -= i3;
                            break;
                        case 73:
                            if (false) break;
                        case 88:
                            i12 = (int)Test.instanceCount;
                            break;
                        case 68:
                            Test.iArrFld[i4] = (int)f1;
                            break;
                        case 81:
                            iArr[i4 - 1] -= (int)-2.297F;
                        case 53:
                            Test.iArrFld[(i11 >>> 1) % N] -= (int)Test.instanceCount;
                            break;
                        case 85:
                            lArr[i11 - 1] ^= i3;
                            break;
                        case 66:
                            i12 += (((i11 * i5) + i11) - i3);
                        }
                    }
                }
            }
        } else {
            Test.instanceCount += sFld;
        }
        long meth_res = i2 + i3 + i4 + i5 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void vMeth(int i1, long l) {

        float f2=0.39F, fArr2[]=new float[N];
        double d1=-2.22604;
        int i13=148, i14=29788, i15=-50766, i16=-156, i17=-12;

        FuzzerUtils.init(fArr2, -2.545F);

        sMeth();
        f2 *= i1;
        i1 += (int)d1;
        for (i13 = 10; 392 > i13; i13++) {
            i14 = i13;
            if (i13 != 0) {
                vMeth_check_sum += i1 + l + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i13 + i14 + i15 +
                    i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
                return;
            }
            if (Test.bFld) {
                sFld += (short)(((i13 * i1) + f2) - l);
                i14 += (((i13 * i14) + f2) - i13);
            } else if (Test.bFld) {
                fArr2[i13] += i14;
            } else if (Test.bFld) {
                i15 = 4;
                do {
                    for (i16 = i15; i16 < 1; i16++) {
                        i1 = i17;
                        if (true) continue;
                        if (Test.bFld) continue;
                    }
                } while (--i15 > 0);
            } else {
                i14 = i1;
            }
        }
        vMeth_check_sum += i1 + l + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {

        int i=-59379, i18=-14, i19=-40589, i20=9;
        double d2=0.25550;
        long l3=20L;
        byte by1=1;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-29158);

        i += -166;
        Test.instanceCount -= Test.iArrFld[(i >>> 1) % N];
        vMeth(i, -10L);
        for (d2 = 5; d2 < 332; d2++) {
            if (Test.bFld) {
                i18 >>>= (int)Test.instanceCount;
                Test.instanceCount += (5 + (d2 * d2));
            } else {
                i += (int)d2;
                Test.instanceCount <<= i19;
                sFld += (short)2.661F;
                i19 += (int)d2;
            }
            try {
                i19 = (-3552 / i19);
                i = (190 / i);
                Test.iArrFld[(int)(d2 - 1)] = (i / i);
            } catch (ArithmeticException a_e) {}
            Test.bFld = Test.bFld;
        }
        i -= i19;
        i19 -= 234;
        fArrFld = FuzzerUtils.float1array(N, (float)0.136F);
        i19 /= (int)((long)(d2) | 1);
        sArr = FuzzerUtils.short1array(N, (short)21780);
        i += i19;
        i18 = (int)Test.instanceCount;
        i = i19;
        for (l3 = 1; l3 < 395; ++l3) {
            i += (int)(l3 + i19);
            Test.instanceCount += (l3 + l3);
            i19 += (int)(((l3 * by1) + i) - i20);
            Test.bFld = Test.bFld;
            i18 = (int)-2.216F;
            i20 *= i;
        }
        i18 -= i18;
        i = by1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
