package tests.javafuzzer654;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:26:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5072482897275756956L;
    public static float fFld=-84.120F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 64803);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i1, float f1, float f2) {


        Test.instanceCount = -226;
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2);
    }

    public static long lMeth(long l, int i3) {

        int i4=63943, i5=4931, i6=-9, i7=-14, i8=42959, i9=-1, i10=-103;
        double d1=0.62187;
        byte by1=64;
        boolean b=false;

        for (i4 = 13; i4 < 241; ++i4) {
            for (i6 = 1; i6 < 7; ++i6) {
                Test.iArrFld[i4 - 1] <<= (Test.iArrFld[i6 - 1]--);
            }
            vSmallMeth(i4, Test.fFld, Test.fFld);
            d1 *= i4;
            for (i8 = 1; i8 < 7; i8++) {
                by1 ^= (byte)i3;
                Test.instanceCount |= i7;
                Test.fFld += (i8 - i7);
                i9 <<= i4;
                l = i9;
                i10 = 1;
                do {
                    Test.fFld -= i7;
                    Test.instanceCount += (i10 + l);
                } while (++i10 < 2);
                if (b) continue;
            }
        }
        long meth_res = l + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9 + by1 + i10 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i2=-3, i11=-11, i12=168, i13=-136, i14=-3, i15=-5;
        byte by=-57;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)23734);

        Test.iArrFld[(i2 >>> 1) % N] -= (int)((--Test.iArrFld[(i2 >>> 1) % N]) - (-(-3L - Float.intBitsToFloat(i2))));
        vSmallMeth((int)(Test.instanceCount + ((i2 - i2) - (by + Test.instanceCount))), lMeth(Test.instanceCount, i2) +
            i2, Test.fFld);
        i2 = i2;
        i11 = 1;
        while (++i11 < 141) {
            i2 += 12;
            Test.instanceCount += (((i11 * Test.fFld) + Test.fFld) - Test.fFld);
            sArr1[i11 - 1] *= (short)-106.369F;
            Test.fFld -= 53449L;
            Test.fFld += i11;
        }
        Test.iArrFld = Test.iArrFld;
        i12 = 1;
        do {
            i13 = 1;
            do {
                for (i14 = 1; i14 < 1; i14++) {
                    Test.instanceCount |= 52052;
                    try {
                        i15 = (Test.iArrFld[i14] / i11);
                        Test.iArrFld[i13] = (-254 % i13);
                        i15 = (i12 / 57);
                    } catch (ArithmeticException a_e) {}
                }
            } while (++i13 < 7);
        } while (++i12 < 222);
        vMeth_check_sum += i2 + by + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=224, i16=134, i17=-38, i18=-5, i19=-11, i20=149;
        double d=106.117916, d2=-118.26269;
        float f=-92.653F, fArr[]=new float[N];
        byte by2=37, byArr[]=new byte[N];
        short s=-30823, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 88.193F);
        FuzzerUtils.init(lArr, -1981816911L);
        FuzzerUtils.init(sArr, (short)-6788);
        FuzzerUtils.init(byArr, (byte)67);

        fArr[(i >>> 1) % N] -= (float)(d + ((--i) - (i * 1.141F)));
        Test.instanceCount -= (long)(((++i) - (f++)) + (i--));
        for (int smallinvoc=0; smallinvoc<329; smallinvoc++) vSmallMeth(i, lArr[(i >>> 1) % N] /
            ((Test.instanceCount--) | 1), (-(-54768 * (i = (int)Test.instanceCount))) * sArr[(25 >>> 1) % N]);
        vMeth();
        i = (int)f;
        Test.iArrFld[(i >>> 1) % N] = 175;
        if (false) {
            Test.instanceCount >>= i;
            for (i16 = 19; i16 < 373; i16++) {
                for (d2 = 2; d2 < 71; d2 += 2) {
                    Test.instanceCount -= Test.instanceCount;
                    i += (int)(((d2 * f) + i) - Test.instanceCount);
                    fArr[(int)(d2 - 1)] = (float)d2;
                    switch (((i >>> 1) % 5) + 14) {
                    case 14:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 15:
                    case 16:
                        byArr[(int)(d2 - 1)] += (byte)f;
                        by2 += (byte)(((d2 * i16) + i17) - i17);
                        break;
                    case 17:
                    case 18:
                        i17 *= i16;
                        break;
                    default:
                        Test.instanceCount = i16;
                        for (i19 = 1; i19 < 3; i19++) {
                            i18 -= i20;
                            s = (short)f;
                            Test.bFld = Test.bFld;
                        }
                    }
                    i += (int)(((d2 * i18) + f) - i16);
                    i *= i16;
                    try {
                        Test.iArrFld[i16] = (i17 / -56902);
                        i18 = (-44839 / i20);
                        i20 = (i18 / i20);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(int)(d2 + 1)] = s;
                    i = i19;
                    if (Test.bFld) break;
                }
                Test.fFld += i19;
            }
        } else {
            by2 = (byte)i20;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth lMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
