package tests.javafuzzer486;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:34:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static int iFld=13;
    public static float fFld=2.485F;
    public static double dFld=6.61181;
    public static volatile int iFld1=-63936;
    public static float fFld1=-75.580F;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1, double d2) {

        int i7=-3282, i8=32278, i9=48900, iArr1[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 1);

        i7 = Test.iFld;
        d1 += -54;
        Test.instanceCount *= Test.instanceCount;
        i7 = i7;
        i7 -= Test.iFld;
        Test.fFld = Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N][(8 >>> 1) % N] <<= Test.iFld;
        bArr[(Test.iFld >>> 1) % N] = b;
        for (i8 = 3; i8 < 139; i8++) {
            Test.iArrFld[i8 + 1][i8] >>>= (int)Test.instanceCount;
            switch ((i8 % 5) + 105) {
            case 105:
                i7 += (i8 - i7);
                i9 -= (int)Test.fFld;
            case 106:
                Test.iFld |= i7;
                break;
            case 107:
                Test.iFld = i7;
                break;
            case 108:
                Test.iFld += Test.iFld;
                break;
            case 109:
                i7 += i9;
            default:
                Test.instanceCount -= i9;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i7 + (b ? 1 : 0) + i8 + i9 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i4, int i5, int i6) {

        int i11=166, i12=30070, i13=58020, i14=-14, i15=14;
        byte by=63;
        boolean b1=false;
        double d3=0.58063;

        vMeth2(Test.dFld, Test.dFld);
        for (i11 = 347; i11 > 14; i11 -= 2) {
            by = (byte)Test.fFld;
            for (i13 = 1; i13 < 10; ++i13) {
                if (b1) {
                    Test.fFld *= 11;
                }
                i12 = Test.iFld;
                i12 += i13;
                i14 <<= (int)Test.instanceCount;
                i5 -= i14;
            }
            Test.iArrFld[i11 + 1][i11 - 1] = i11;
            for (d3 = 1; d3 < 10; d3++) {
                Test.dFld *= -11;
                i6 -= (int)Test.fFld;
                Test.iFld1 = i13;
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i11 + i12 + by + i13 + i14 + (b1 ? 1 : 0) + Double.doubleToLongBits(d3) +
            i15;
    }

    public void vMeth() {

        double d=0.8153;
        boolean b2=true;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)35);

        d += (((++Test.iFld) * Math.max(Test.instanceCount, Test.instanceCount)) - Math.abs(Test.fFld));
        vMeth1(Test.iFld, Test.iFld1, 21);
        Test.fFld -= Test.iFld;
        Test.dFld -= Test.iFld1;
        Test.iFld = (int)-2420169771L;
        b2 = b2;
        Test.iFld1 -= Test.iFld;
        byArr = byArr;
        vMeth_check_sum += Double.doubleToLongBits(d) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        float f=117.314F;
        int i=-23707, i1=-4, i2=-42406, i3=38580, i16=115, i17=-59126, i18=-94, iArr[]=new int[N];
        boolean b3=false;
        long l=1239L, lArr[]=new long[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr, -10522L);
        FuzzerUtils.init(byArr1, (byte)-112);

        Test.instanceCount = (long)((iArr[(Test.iFld >>> 1) % N]--) - ((f * f) + (Test.iFld - f)));
        Test.iFld |= (int)(((Test.iFld >> Test.iFld) - Test.iFld) * Test.instanceCount);
        Test.instanceCount -= (Test.instanceCount--);
        for (i = 7; i < 270; ++i) {
            Test.iFld += (i ^ i);
            Test.instanceCount -= iArr[i];
            i1 = (i1++);
            for (i2 = i; i2 < 96; i2++) {
                vMeth();
                Test.iFld = (int)Test.instanceCount;
                b3 = false;
                Test.iFld = -7;
                lArr[i - 1] = Test.instanceCount;
            }
            Test.instanceCount = Test.iFld1;
        }
        Test.instanceCount *= Test.instanceCount;
        for (i16 = 23; i16 < 379; ++i16) {
            Test.instanceCount /= (i16 | 1);
            Test.instanceCount -= 11L;
            Test.instanceCount += Test.instanceCount;
            Test.instanceCount += (i16 - i2);
        }
        Test.fFld1 += i16;
        for (l = 9; l < 343; l++) {
            Test.iArrFld[(int)(l + 1)][(int)(l)] = 146;
            Test.iArrFld[(int)(l + 1)][(int)(l)] -= (int)1.134F;
            Test.iFld1 -= (int)Test.dFld;
            Test.iFld1 = 138;
            i1 += (int)(3078880015L + (l * l));
            Test.iArrFld[(int)(l - 1)][(int)(l)] >>= Test.iFld1;
            byArr1[(int)(l)] -= (byte)l;
            Test.instanceCount <<= i3;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
