package tests.javafuzzer694;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:03:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-57L;
    public double dFld=-23.65531;
    public static boolean bFld=false;
    public static float fFld=96.408F;
    public int iFld=12558;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 108);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, int i2, int i3) {

        int i4=-145, i5=11531, i6=71, i7=7;
        long l1=-29315L, lArr[]=new long[N];
        float f=1.162F;
        short s=6587;
        double d1=-102.53057;

        FuzzerUtils.init(lArr, -2207673096L);

        for (i4 = 3; i4 < 333; ++i4) {
            lArr[i4 + 1] = i4;
            for (l1 = 1; l1 < 5; l1++) {
                i5 += 3;
                i2 += -32249;
                Test.instanceCount *= -235;
                Test.iArrFld[(int)(l1 + 1)] &= -180;
            }
            i3 = (int)l;
            i3 -= (int)f;
            i7 = 1;
            do {
                switch ((i4 % 6) + 111) {
                case 111:
                    Test.instanceCount -= (long)f;
                    Test.iArrFld[i7 + 1] = i7;
                    break;
                case 112:
                    if (Test.bFld) break;
                    f = i4;
                    break;
                case 113:
                case 114:
                    f += (i7 - s);
                case 115:
                    i6 *= 17658;
                case 116:
                    f += (float)d1;
                    break;
                }
            } while (++i7 < 5);
        }
        long meth_res = l + i2 + i3 + i4 + i5 + l1 + i6 + Float.floatToIntBits(f) + i7 + s +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-38, i8=4, i9=-14470, i10=65530, i11=-63;

        Test.instanceCount = (i1 *= (int)((1213554042L * Math.max(i1, i1)) - (i1--)));
        Test.iArrFld[(i1 >>> 1) % N] += iMeth1(Test.instanceCount, i1, -63986);
        i1 = (int)Test.fFld;
        i1 = i1;
        i1 >>= i1;
        Test.iArrFld[(i1 >>> 1) % N] = i1;
        for (i8 = 6; i8 < 381; ++i8) {
            for (i10 = 1; i10 < 5; i10++) {
                if (i8 != 0) {
                    vMeth_check_sum += i1 + i8 + i9 + i10 + i11;
                    return;
                }
                Test.fFld -= (float)125.123678;
                Test.iArrFld[i10] -= 13;
            }
            i1 = (int)Test.fFld;
            i1 += (int)124.429F;
            Test.instanceCount += (i8 * i8);
            Test.iArrFld[i8] -= -16083;
        }
        vMeth_check_sum += i1 + i8 + i9 + i10 + i11;
    }

    public int iMeth(double d, int i) {


        vMeth();
        dFld = i;
        long meth_res = Double.doubleToLongBits(d) + i;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=86.88929;
        int i12=-30017, i13=-158, i14=-4930, i15=36;
        float f1=-1.1005F, fArr[]=new float[N];
        short s2=-8145;

        FuzzerUtils.init(fArr, 1.631F);

        dFld = iMeth(dFld, 0);
        Test.fFld -= iFld;
        iFld -= (int)-96.50445;
        for (d2 = 1; d2 < 143; ++d2) {
            i13 = 1;
            do {
                short s1=-18037;
                i12 += (int)-1L;
                s1 += (short)Test.fFld;
                Test.instanceCount >>= i12;
            } while (++i13 < 177);
            switch ((int)((d2 % 1) + 88)) {
            case 88:
                i12 = -14;
                Test.instanceCount -= (long)d2;
            default:
                i14 = 1;
                while ((i14 += 2) < 177) {
                    Test.instanceCount -= (long)Test.fFld;
                    for (f1 = 3; d2 < f1; f1--) {
                        iFld <<= iFld;
                        i15 += 14271;
                        Test.iArrFld[i14 + 1] -= i15;
                        Test.iArrFld[i14 - 1] -= -98;
                        if (Test.bFld) break;
                        Test.fFld = 10L;
                        switch (((i15 >>> 1) % 7) + 52) {
                        case 52:
                            if (Test.bFld) continue;
                            fArr[i14 + 1] += i12;
                            iFld += (int)(((f1 * Test.fFld) + Test.instanceCount) - i14);
                            dFld = Test.fFld;
                            break;
                        case 53:
                            i15 = i12;
                            i12 |= s2;
                            Test.instanceCount += (long)(((f1 * Test.instanceCount) + i13) - i15);
                            i15 += -50588;
                            break;
                        case 54:
                            i15 += (int)(f1 - i12);
                        case 55:
                            Test.instanceCount += 11L;
                            break;
                        case 56:
                            i12 &= (int)Test.instanceCount;
                            break;
                        case 57:
                            Test.bFld = Test.bFld;
                            break;
                        case 58:
                            iFld -= i13;
                            break;
                        default:
                            Test.fFld = 6;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
