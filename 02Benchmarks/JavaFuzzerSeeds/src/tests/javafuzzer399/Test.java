package tests.javafuzzer399;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:16:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=123L;
    public double dFld=-2.64242;
    public volatile float fFld=-3.324F;

    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1) {

        int i7=23, i8=3, i9=8, i10=-103, i11=12, i12=-28566, i13=13, i14=1;
        short s=5571;

        for (i7 = 20; i7 < 327; ++i7) {
            i8 = i7;
            i8 += (i7 + i8);
            s = (short)Test.instanceCount;
            for (i9 = 5; i9 > 1; --i9) {
                Test.instanceCount >>= i7;
                Test.instanceCount += (i9 * i10);
                i8 -= (int)Test.instanceCount;
                for (i11 = 1; i11 < 2; i11++) {
                    i10 += i7;
                    i13 &= (int)Test.instanceCount;
                }
                i14 = 1;
                while (++i14 < 2) {
                    Test.instanceCount += i14;
                    i13 += (27 + (i14 * i14));
                    i12 *= i10;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i7 + i8 + s + i9 + i10 + i11 + i12 + i13 + i14;
    }

    public static long lMeth() {

        int i4=38, i5=12, i6=240, i15=38759, i16=54362, i17=-62210, i18=-79, iArr1[]=new int[N];
        float f=2.75F;
        double d=2.30;
        long l1=-114L;
        boolean b=true;

        FuzzerUtils.init(iArr1, -166);

        iArr1[(i4 >>> 1) % N] >>= (int)(iArr1[(i4 >>> 1) % N] * ((i4 * Test.instanceCount) + (++f)));
        for (i5 = 5; i5 < 271; ++i5) {
            vMeth(f);
        }
        d += -49;
        if (false) {
            iArr1[(43971 >>> 1) % N] >>= i6;
            l1 = 1;
            do {
                i6 = i5;
                iArr1[(int)(l1)] *= (int)f;
                Test.instanceCount = Test.instanceCount;
                for (i15 = 9; l1 < i15; i15--) {
                    for (i17 = 1; i17 > 1; --i17) {
                        if (b) break;
                        f = (float)0.69284;
                        if (b) break;
                    }
                }
            } while (++l1 < 175);
        } else if (b) {
            i16 += i17;
        }
        long meth_res = i4 + Float.floatToIntBits(f) + i5 + i6 + Double.doubleToLongBits(d) + l1 + i15 + i16 + i17 +
            i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i1, long l, int i2) {

        int i3=176, i19=-44912, i20=-5, i21=23898, i22=37108, iArr[]=new int[N];
        float f2=-30.805F, fArr[]=new float[N];
        boolean b1=false;
        double d1=107.52108;

        FuzzerUtils.init(iArr, -3339);
        FuzzerUtils.init(fArr, 2.444F);

        i3 = 1;
        do {
            iArr[i3 + 1] = (((i2 - i1) + (i2 + i1)) * (++i2));
            i1 += iArr[i3];
            i2 += (int)(lMeth() - i1);
        } while (++i3 < 179);
        i2 += -9;
        for (i19 = 23; 384 > i19; ++i19) {
            l += Test.instanceCount;
            i2 |= (int)l;
            iArr[i19] *= (int)f2;
            fArr = fArr;
            if (b1) break;
            i1 *= i20;
            for (i21 = 1; 5 > i21; i21 += 2) {
                i22 = i22;
                i2 = (int)d1;
            }
        }
        long meth_res = i1 + l + i2 + i3 + i19 + i20 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i21 + i22 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=57102, i23=12, i24=-215, i25=14, i26=1, i27=3, i28=105, i29=-13993, i30=169, i31=-12, iArr2[]=new int[N];
        byte by=-40;
        double d2=91.103364, dArr[][]=new double[N][N];
        short s1=-2754;
        boolean b2=true;

        FuzzerUtils.init(dArr, 100.122537);
        FuzzerUtils.init(iArr2, 0);

        Test.instanceCount = (long)((-i) * dMeth(i, Test.instanceCount, i));
        i >>= i;
        for (i23 = 14; 384 > i23; i23++) {
            dArr[i23][i23 + 1] += dFld;
            iArr2[i23] = (int)Test.instanceCount;
        }
        for (i25 = 1; i25 < 130; ++i25) {
            if (b2) {
                for (i27 = 7; 194 > i27; i27++) {
                    i28 *= (int)dFld;
                    dArr[i27 + 1][i25 - 1] += by;
                    for (d2 = 1; d2 < 2; d2++) {
                        i28 = -4;
                        s1 = (short)i27;
                        i24 <<= (int)Test.instanceCount;
                        i24 += (int)d2;
                        i29 += (int)fFld;
                        by = (byte)s1;
                        i += (int)(((d2 * fFld) + by) - Test.instanceCount);
                        i26 = 29;
                        s1 += (short)((long)d2 ^ (long)fFld);
                        i26 += (int)((long)d2 ^ i28);
                    }
                }
                if (b2) continue;
                i29 += (i25 * Test.instanceCount);
                i24 *= (int)fFld;
            } else if (b2) {
                switch (((i24 >>> 1) % 1) + 37) {
                case 37:
                    i = i25;
                    iArr2[i25] -= 215;
                    for (i30 = i25; i30 < 194; i30++) {
                        s1 = (short)Test.instanceCount;
                        i28 = s1;
                    }
                    break;
                }
            } else if (b2) {
                i26 = -8710;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
