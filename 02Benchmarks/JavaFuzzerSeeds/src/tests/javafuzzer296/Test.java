package tests.javafuzzer296;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:24:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static byte byFld=95;
    public static short sFld=-7930;
    public boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[][]=new byte[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -380543339L);
        FuzzerUtils.init(Test.byArrFld, (byte)-8);
        FuzzerUtils.init(Test.dArrFld, 2.14548);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i5) {

        int i6=220, i7=6, i8=160, i9=98, iArr[]=new int[N];
        float f1=-80.394F;
        boolean b=true;

        FuzzerUtils.init(iArr, 82);

        i5 <<= 64;
        iArr[(i5 >>> 1) % N] += i5;
        for (i6 = 12; 299 > i6; ++i6) {
            try {
                i5 = (i7 / i7);
                i7 = (i7 / 20);
                i5 = (iArr[i6] % 67276453);
            } catch (ArithmeticException a_e) {}
            i8 = 1;
            do {
                for (f1 = 1; f1 > 1; f1 -= 3) {
                    Test.lArrFld = Test.lArrFld;
                    i9 >>= i8;
                    s -= (short)i5;
                    if (b) continue;
                }
                Test.instanceCount += (i8 - Test.instanceCount);
                if (true) continue;
            } while (++i8 < 6);
            i7 += (((i6 * i9) + Test.byFld) - i5);
            i7 = i7;
            i7 *= i9;
        }
        vMeth1_check_sum += s + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l, long l1, long l2) {

        int i2=-160, i3=-156, i4=-14, i11=3, i12=50103, iArr1[]=new int[N];
        short s1=21954;
        boolean b1=true;
        float f2=-68.489F;

        FuzzerUtils.init(iArr1, -247);

        i2 = i2;
        for (i3 = 9; 362 > i3; ++i3) {
            vMeth1((short)(-7330), -4);
            i2 *= s1;
            Test.byFld = (byte)-33460;
            b1 = b1;
            f2 = 1;
            do {
                Test.byArrFld[i3][(int)(f2)] += (byte)f2;
                iArr1[i3] <<= 11;
                Test.byFld = (byte)i2;
                for (i11 = i3; i11 < 1; i11++) {
                    Test.dArrFld[i11] = i3;
                    i4 = i2;
                    i2 += (-18099 + (i11 * i11));
                    i4 += i4;
                }
            } while (++f2 < 5);
        }
        long meth_res = l + l1 + l2 + i2 + i3 + i4 + s1 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i1=-19534, i13=-7, i14=-104, iArr2[]=new int[N];
        float f=1.167F;
        boolean b2=true, b3=false;

        FuzzerUtils.init(iArr2, 12);

        i1 -= (-(i1++));
        f += lMeth(40L, Test.instanceCount, -10L);
        i1 <<= -23795;
        i1 = (int)f;
        f -= -3013041904L;
        i1 = Test.byFld;
        Test.instanceCount = -7;
        Test.lArrFld[(i1 >>> 1) % N] += i1;
        i13 = 1;
        while (++i13 < 312) {
            switch ((i13 % 10) + 18) {
            case 18:
                switch (((i1 >>> 1) % 2) + 114) {
                case 114:
                    i14 = 1;
                    while (++i14 < 5) {
                        try {
                            i1 = (48054 % i14);
                            i1 = (67 % i1);
                            i1 = (49 % i1);
                        } catch (ArithmeticException a_e) {}
                        Test.lArrFld[i14] *= i13;
                        i1 += (i14 * i14);
                    }
                    break;
                case 115:
                    if (true) break;
                default:
                    i1 = (int)-171L;
                }
                break;
            case 19:
                i1 += (-25 + (i13 * i13));
                break;
            case 20:
                i1 = i1;
                break;
            case 21:
                if (b2) continue;
                break;
            case 22:
                Test.sFld ^= (short)i14;
                break;
            case 23:
                iArr2[i13 + 1] ^= i13;
            case 24:
                Test.instanceCount *= (long)f;
                break;
            case 25:
                i1 -= i13;
                break;
            case 26:
                Test.instanceCount /= (i14 | 1);
                break;
            case 27:
                i1 += (int)Test.instanceCount;
                break;
            default:
                if (b3) continue;
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + i13 + i14 + (b2 ? 1 : 0) + (b3 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i15=0, i16=-27021, i17=204, i18=-4, i19=11, i20=-13, i21=-61664, i22=-15, i23=63074;
        float f3=-104.434F, f4=-15.659F;

        i *= (int)((iArrFld[(i >>> 1) % N] ^ Test.instanceCount) - ((-111.829F + (i--)) * i));
        vMeth();
        Test.instanceCount = i;
        for (i15 = 15; i15 < 290; i15 += 2) {
            i16 += Test.sFld;
            Test.instanceCount *= -6L;
            Test.sFld += (short)(i15 * i15);
        }
        for (f3 = 6; f3 < 279; f3++) {
            if (bFld) {
                for (i18 = (int)(f3); i18 < 92; ++i18) {
                    Test.instanceCount -= i19;
                    i16 += (i18 * i18);
                }
                for (i20 = 3; i20 < 92; i20++) {
                    Test.instanceCount -= i17;
                    iArrFld[(int)(f3)] = i16;
                }
                f4 *= 250;
            }
            if (bFld) break;
            i17 += (int)(f3 - f4);
            for (i22 = 92; i22 > f3; i22--) {
                Test.instanceCount = i17;
                if (bFld) continue;
                Test.instanceCount += (i22 * i22);
                f4 += f3;
                i23 -= -12696;
                iArrFld[(int)(f3)] &= (int)Test.instanceCount;
                Test.lArrFld[i22 - 1] <<= -12943;
            }
            i >>= i18;
            Test.instanceCount = i;
            i21 <<= i22;
        }
        i19 -= i;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
