package tests.javafuzzer382;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:09:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static int iFld=-39;
    public static double dFld=-107.45687;
    public byte byFld=25;
    public static boolean bFld=true;
    public float fFld=92.303F;
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 37.1851);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, long l1) {

        int i=-6, i1=61954, i2=30616, i3=8, i4=6, i5=-1, iArr[][]=new int[N][N];
        boolean b1=true, bArr[]=new boolean[N];
        double d=2.82757;
        byte by1=-2;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 4);

        l1 += Test.iFld;
        for (i = 8; i < 140; i++) {
            for (i2 = 12; i2 > 1; i2--) {
                bArr[i2] = b1;
                b1 = b1;
                for (d = i2; d < 2; ++d) {
                    iArr = iArr;
                    i3 *= by1;
                    switch ((i % 2) + 118) {
                    case 118:
                    case 119:
                        switch (((i3 >>> 1) % 2) + 25) {
                        case 25:
                            switch ((i2 % 6) + 53) {
                            case 53:
                                f1 -= i;
                                i4 *= (int)-33279732838579952L;
                                i1 = (int)d;
                                iArr[i2 - 1][i - 1] = -2;
                                break;
                            case 54:
                                if (b1) break;
                                break;
                            case 55:
                                Test.iFld *= i;
                                break;
                            case 56:
                                if (b1) continue;
                            case 57:
                                Test.iFld = by1;
                                break;
                            case 58:
                                Test.dFld += 0L;
                            }
                            break;
                        case 26:
                            i3 = i4;
                            break;
                        default:
                            i4 += (int)(((d * i5) + i3) - i3);
                        }
                        break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l1 + i + i1 + i2 + i3 + (b1 ? 1 : 0) + Double.doubleToLongBits(d) +
            i4 + by1 + i5 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(short s, short s1, long l) {

        float f2=48.93F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -231631143L);

        lArr[(Test.iFld >>> 1) % N] >>= lMeth(f2, l);
        Test.iFld = Test.iFld;
        long meth_res = s + s1 + l + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, boolean b) {

        float f=43.567F;
        short s2=14355;
        int i6=5, i7=-97, i8=-6, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        double d1=-17.62262;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr1, 201);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr2, -1);

        f = (iMeth(s2, s2, Test.instanceCount) + Test.iFld);
        for (i6 = 13; i6 < 377; i6++) {
            i7 %= -125;
            i8 = 1;
            do {
                iArr1[i6] -= by;
                iArr1[i8] = i8;
                Test.iFld = i6;
                Test.iFld = i7;
                switch (((i8 % 10) * 5) + 79) {
                case 87:
                    bArr1[i8 + 1] = b;
                    break;
                case 106:
                    d1 = 1;
                    while (++d1 < 1) {
                        Test.iFld += (int)(d1 * i8);
                        i7 += i8;
                        i7 = i7;
                        Test.iFld <<= i7;
                    }
                case 101:
                    i7 = (int)Test.instanceCount;
                    break;
                case 80:
                    Test.iFld += i6;
                    break;
                case 125:
                    iArr2 = iArr2;
                    break;
                case 94:
                    iArr1[i8] = (int)f;
                    break;
                case 105:
                    Test.dArrFld[i6] = FuzzerUtils.double1array(N, (double)-2.107540);
                    break;
                case 107:
                    Test.iFld += (((i8 * i8) + Test.instanceCount) - i7);
                    break;
                case 93:
                    i7 *= i8;
                    break;
                case 115:
                    b = true;
                    break;
                }
            } while (++i8 < 5);
        }
        vMeth_check_sum += by + (b ? 1 : 0) + Float.floatToIntBits(f) + s2 + i6 + i7 + i8 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i9=-8654, i10=6, i11=109, i12=14, i13=4, i14=35003, i15=2, i16=-48253, i17=-1;
        float f3=1.83F;

        vMeth(byFld, Test.bFld);
        for (i9 = 5; i9 < 342; i9 += 2) {
            for (i11 = i9; 149 > i11; ++i11) {
                fFld /= ((long)(Test.dFld) | 1);
            }
            i10 += (((i9 * Test.instanceCount) + Test.instanceCount) - fFld);
            i10 -= (int)Test.instanceCount;
            i12 += i9;
            Test.instanceCount -= (long)Test.dFld;
        }
        for (i13 = 18; i13 < 350; ++i13) {
            for (f3 = 2; 76 > f3; f3++) {
                Test.instanceCount = i15;
                for (i16 = 1; 2 > i16; ++i16) {
                    i15 >>= (int)Test.instanceCount;
                }
                i17 = i15;
            }
            i15 += i13;
            i10 += (-10 + (i13 * i13));
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
