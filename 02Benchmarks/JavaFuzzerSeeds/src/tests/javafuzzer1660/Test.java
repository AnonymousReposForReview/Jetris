package tests.javafuzzer1660;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:58:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=236L;
    public static volatile boolean bFld=true;
    public static short sFld=26547;
    public static float fArrFld[][]=new float[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 45.362F);
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.sArrFld, (short)-6164);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, byte by1, int i7) {

        float f1=-38.610F;
        int i8=16564, i9=-165, i10=2, i11=7, i12=0, iArr[]=new int[N];
        double d=2.26963;

        FuzzerUtils.init(iArr, 317);

        iArr[(i6 >>> 1) % N] = (int)f1;
        Test.bFld = true;
        for (i8 = 9; i8 < 171; ++i8) {
            i9 += (i8 | Test.sFld);
            iArr[i8] *= (int)d;
            for (i10 = 1; 10 > i10; i10++) {
                f1 = i7;
                iArr[i8] -= i11;
                i9 += -7308;
                switch (((i10 % 2) * 5) + 37) {
                case 47:
                    i11 >>= i10;
                    i12 = 1;
                    while (++i12 < 2) {
                        i6 += i10;
                        i9 *= i10;
                        i11 -= (int)f1;
                    }
                    break;
                case 45:
                    i11 = (int)1946395857424204754L;
                    break;
                default:
                    Test.instanceCount >>>= Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i6 + by1 + i7 + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11
            + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i4=206, i5=13606, i13=79, i14=8, i15=-10014, iArr1[]=new int[N];
        float f=49.423F;
        byte by2=65;
        double d1=-1.128552;

        FuzzerUtils.init(iArr1, -2);

        for (i4 = 17; i4 < 390; i4 += 3) {
            i5 -= (int)(f++);
            vMeth1(i5, by2, i4);
            for (i13 = 1; i13 < 13; i13++) {
                Test.bFld = true;
                i15 = 1;
                do {
                    f = (float)d1;
                    i5 += (i15 * i15);
                    i14 -= (int)Test.instanceCount;
                    i14 += (int)Test.instanceCount;
                    d1 -= -1275;
                    iArr1[i13 - 1] = 6;
                } while (++i15 < 2);
                Test.instanceCount = Test.instanceCount;
                f *= by2;
                d1 += i14;
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + by2 + i13 + i14 + i15 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i1) {

        int i2=-1, i3=4, i16=-170, i17=145, i18=48055;

        for (i2 = 122; i2 > 2; i2--) {
            i1 += i2;
            i1 <<= (int)Math.min(iMeth() - i3, l);
            i3 += i2;
            for (i16 = 13; i16 > 1; i16--) {
                Test.fArrFld[i2][i16 - 1] += i16;
                Test.fArrFld[i2 + 1][i2 - 1] += Test.instanceCount;
                i17 *= i2;
                l <<= i3;
                i18 = 1;
                do {
                    i1 = Test.sFld;
                    l += (((i18 * i17) + i1) - i17);
                    try {
                        i3 = (-1924741075 % Test.iArrFld[i2 - 1]);
                        i3 = (i3 % 31706);
                        i3 = (10083 / i2);
                    } catch (ArithmeticException a_e) {}
                    if (false) break;
                    Test.iArrFld = Test.iArrFld;
                } while (++i18 < 2);
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i16 + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=6, i19=-212, i20=63783, i21=-52433, i22=56151, i23=39412, i24=-192, i25=-176;
        byte by=31, byArr[]=new byte[N];
        double d2=12.107659, d3=-27.98402;
        float f2=1.812F;
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)23);
        FuzzerUtils.init(lArr, -1975121778L);

        i = (int)(((Test.instanceCount - i) - by) - (-(Test.instanceCount++)));
        vMeth(Test.instanceCount, i);
        Test.instanceCount = Test.instanceCount;
        Test.iArrFld[(-16095 >>> 1) % N] *= -96;
        Test.instanceCount -= (long)d2;
        for (i19 = 20; i19 < 375; ++i19) {
            byArr[i19 - 1] = (byte)43133;
            try {
                Test.iArrFld[i19 - 1] = (i20 % -42473);
                Test.iArrFld[i19 - 1] = (i20 % i19);
                i = (i19 % 1150465906);
            } catch (ArithmeticException a_e) {}
            for (i21 = 3; i21 < 71; ++i21) {
                Test.sFld += (short)f2;
                Test.instanceCount >>= Test.instanceCount;
            }
            i23 = 1;
            while (++i23 < 71) {
                Test.iArrFld[i19 + 1] += i;
                f2 += -4622;
                if (Test.bFld) break;
                for (d3 = 1; d3 < 1; ++d3) {
                    Test.instanceCount += (235087895833326028L + (d3 * d3));
                    if (Test.bFld) {
                        i20 *= i24;
                        i22 = 18658;
                        Test.sArrFld[(int)(d3 - 1)] = (short)i19;
                        switch ((int)(((d3 % 2) * 5) + 53)) {
                        case 57:
                            i20 += (int)Test.instanceCount;
                            f2 += (46459L + (d3 * d3));
                            switch ((i23 % 7) + 21) {
                            case 21:
                                Test.instanceCount += Test.instanceCount;
                                i24 <<= i19;
                                lArr[i23] += i21;
                                break;
                            case 22:
                                if (Test.bFld) break;
                                Test.fArrFld[(int)(d3)][i23 + 1] += i20;
                            case 23:
                                Test.instanceCount += (long)d3;
                                break;
                            case 24:
                                i24 += -54370;
                            case 25:
                                i22 += -3;
                            case 26:
                                i24 = i22;
                                break;
                            case 27:
                                i24 = i25;
                                break;
                            }
                            break;
                        case 61:
                            Test.instanceCount += (long)d3;
                            break;
                        default:
                            i24 ^= 0;
                        }
                    } else {
                        Test.fArrFld[(int)(d3 + 1)][i19 - 1] -= i22;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
