package tests.javafuzzer1180;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:03:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3668337837L;
    public int iFld=35300;
    public static byte byFld=-77;
    public static float fFld=0.808F;
    public static boolean bFld=true;
    public double dFld=0.998;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -856564058L);
        FuzzerUtils.init(Test.sArrFld, (short)-26981);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b) {

        int i12=12, i13=-93, i14=1483, i15=-29, i16=-26, i17=171;
        double d2=103.63768, d3=0.74406;

        i12 = 160;
        for (i13 = 10; 352 > i13; ++i13) {
            d2 -= i13;
        }
        d3 = 1;
        while (++d3 < 345) {
            i12 += (int)(d3 * d3);
            Test.instanceCount = i13;
            Test.fFld += i14;
        }
        i15 = 1;
        while (++i15 < 374) {
            i16 = 1;
            do {
                i12 = i15;
                if (b) {
                    Test.byFld += (byte)i13;
                }
                i17 = 1;
                do {
                    d2 += i12;
                    i12 = (int)Test.instanceCount;
                } while (++i17 < 1);
            } while (++i16 < 5);
        }
        long meth_res = (b ? 1 : 0) + i12 + i13 + i14 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i15
            + i16 + i17;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        int i10=-79, i11=6952, i18=41275, i19=-13, i20=81, i21=167, i22=-2, i23=6, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, -213);

        for (i10 = 1; i10 < 242; ++i10) {
            i11 >>= (int)(i11 - (++Test.lArrFld[i10]));
            Test.instanceCount -= lMeth(b1);
            Test.instanceCount -= i10;
        }
        for (i18 = 3; i18 < 201; i18++) {
            double d4=0.59125;
            Test.instanceCount -= i18;
            if (true) {
                iArr1[i18] >>= Test.byFld;
                iArr1[i18] = 51;
            } else if (true) {
                i11 += (((i18 * Test.instanceCount) + i18) - i18);
                Test.sArrFld = Test.sArrFld;
                for (i20 = 1; i20 < 8; ++i20) {
                    for (i22 = 2; i22 > 1; i22--) {
                        Test.fFld += Test.instanceCount;
                        i19 <<= 48;
                    }
                }
            } else if (false) {
                d4 -= i21;
            } else {
                i21 = (int)4180671729L;
            }
        }
        long meth_res = i10 + i11 + (b1 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5) {

        int i6=121, i7=-232, i8=14, i9=222, iArr2[][]=new int[N][N];
        double d1=24.77898;

        FuzzerUtils.init(iArr2, -59066);

        for (i6 = 7; 221 > i6; ++i6) {
            i4 -= 18;
            d1 = 8;
            while (--d1 > 0) {
                i5 -= Math.max(i5 * (i7++), (-133 + (-3 + (-(i7 * 3)))) * (++i7));
                i8 = 1;
                while (++i8 < 1) {
                    Test.instanceCount *= i8;
                    Test.instanceCount = Math.min((-(i9 - i5)) * i9, iMeth1());
                    Test.instanceCount -= i9;
                    i4 = i6;
                    Test.instanceCount ^= i9;
                    Test.fFld = i5;
                }
                Test.fFld += (float)(((d1 * Test.byFld) + i4) - Test.instanceCount);
                i5 -= (int)d1;
                iArr2[i6][i6] = Test.byFld;
                i4 = i4;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=43588, i1=-10, i2=-61839, i3=72, i24=-206, i25=-9, i26=-191, i27=12, i28=-7, i29=21806, iArr[]=new int[N];
        double d=0.111649;
        short s=820;
        long l=57L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, -3742386109L);

        i = 1;
        while (++i < 154) {
            iFld += (i * i);
            iArr[i] -= (int)((--Test.instanceCount) + ((i + iFld) >>> lArr[i + 1]));
            iFld ^= ((-i) + i);
            for (d = 7; d < 163; ++d) {
                iFld -= ((i1 + (++i1)) - ((i + i) - Test.byFld));
                for (i2 = 1; 2 > i2; ++i2) {
                    s -= (short)(i2 * ((i3 + iFld) + (~(i1 + i3))));
                    Test.fFld -= ((long)((3 + (63015 - iMeth(i1, i2))) - d) & l);
                    Test.instanceCount += -2;
                    iArr[(int)(d + 1)] -= i1;
                    iFld = (int)Test.fFld;
                }
                Test.fFld -= Test.instanceCount;
                for (i24 = 2; i24 > 1; --i24) {
                    iArr[i - 1] = 7;
                    Test.bFld = Test.bFld;
                    iArr[i24 - 1] = (int)Test.instanceCount;
                    dFld += i24;
                    s -= (short)d;
                    i25 >>= (int)l;
                    iFld = i25;
                    lArr[i + 1] >>= -63852;
                    Test.sArrFld[(i24 >>> 1) % N] = (short)iFld;
                }
                iArr[i - 1] = (int)l;
            }
            for (i26 = 163; i26 > i; --i26) {
                switch ((i % 2) + 91) {
                case 91:
                    iFld -= 44723;
                    for (i28 = 1; i28 < 1; ++i28) {
                        l >>= s;
                        i1 |= i29;
                    }
                    break;
                case 92:
                    i29 += (i26 + i);
                default:
                    i29 += (i26 * i26);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
