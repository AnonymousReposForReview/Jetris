package tests.javafuzzer2917;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:59:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58577L;
    public static double dFld=-56.125396;
    public static long lFld=1560213676L;
    public static byte byArrFld[]=new byte[N];
    public long lArrFld[][]=new long[N][N];
    public static long lArrFld1[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-81);
        FuzzerUtils.init(Test.lArrFld1, 5954236594058677583L);
        FuzzerUtils.init(Test.iArrFld, -146);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, double d1) {

        int i5=220, i6=-37580, i7=-32496, i8=-8, i9=-168, i10=46300, i11=-70, i12=51314, iArr1[]=new int[N];
        byte by1=-84;

        FuzzerUtils.init(iArr1, 216);

        for (i5 = 7; 175 > i5; i5++) {
            d1 = i4;
            for (i7 = 1; i7 < 9; ++i7) {
                i4 += i4;
                i6 = (int)Test.instanceCount;
                i6 += i7;
                iArr1[i5 + 1] = i5;
                i9 = 1;
                do {
                    i8 += (i9 * i4);
                    i6 += (((i9 * Test.instanceCount) + i8) - i5);
                } while (++i9 < 2);
            }
            i8 |= i4;
            Test.lArrFld1[i5 + 1][i5 - 1] = -65460L;
            for (i10 = 1; i10 < 9; ++i10) {
                Test.instanceCount += (i10 ^ i12);
                Test.instanceCount = by1;
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + by1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        int i13=-240, i14=-73, i15=1, i16=87, i17=-50809, i18=-39191;
        float f3=-113.402F;
        boolean b=false;
        short s=23013;

        vMeth1(-72, -81.124033);
        for (i13 = 18; i13 < 289; i13++) {
            i14 >>= i13;
            switch ((i13 % 6) + 76) {
            case 76:
                Test.instanceCount -= i13;
                break;
            case 77:
                for (i15 = 1; 6 > i15; i15 += 3) {
                    for (i17 = 6; i17 > 1; i17 -= 2) {
                        Test.dFld = f3;
                        i16 = (int)f3;
                        if (b) {
                            b = b;
                            i14 += (((i17 * i16) + i13) - i14);
                            if (b) continue;
                            i14 += (((i17 * i17) + i17) - s);
                        } else if (b) {
                            i14 *= i13;
                        }
                    }
                }
                break;
            case 78:
                f3 = i17;
                break;
            case 79:
                i14 -= (int)Test.instanceCount;
                break;
            case 80:
                f3 *= i15;
            case 81:
                i18 -= -14;
            }
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f3) + (b ? 1 : 0) + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d) {

        int i2=-20102, i3=-1, i19=11, i20=-7, i21=-92;
        float f2=59.301F;
        short s1=-26862;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -57L);

        for (i2 = 7; i2 < 128; i2++) {
            f2 = (i3--);
            lMeth();
            i3 = i3;
            i19 = 13;
            do {
                i3 -= i3;
                i3 *= i19;
                for (i20 = i19; 3 > i20; ++i20) {
                    Test.iArrFld[i20] |= (int)Test.instanceCount;
                    i3 = s1;
                    i3 = i19;
                    i3 += (int)Test.instanceCount;
                }
                i3 += i19;
            } while ((i19 -= 3) > 0);
            i21 >>= (int)Test.instanceCount;
            Test.instanceCount += (((i2 * i21) + i21) - i2);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f2) + i19 + i20 + i21 + s1 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=179, i22=-13043, i23=14, i24=-12, i25=-27626, i26=1504, i27=-14, i28=-65144, i29=124, iArr[]=new
            int[N];
        float f=84.93F, f1=-71.469F;
        short s2=-23692;

        FuzzerUtils.init(iArr, 13);

        for (byte by : Test.byArrFld) {
            switch ((((((int)(i + f)) >>> 1) % 6) * 5) + 16) {
            case 31:
                Test.dFld *= (lArrFld[(i >>> 1) % N][(i >>> 1) % N] - (i--));
                iArr[(14 >>> 1) % N] *= (int)(--Test.instanceCount);
                for (f1 = 3; f1 < 63; ++f1) {
                    Test.instanceCount += (Math.abs(i) * ((Test.instanceCount >> i) * (Test.instanceCount - i)));
                    Test.instanceCount = (++iArr[(int)(f1 + 1)]);
                    Test.instanceCount = i;
                    vMeth(Test.dFld);
                }
                break;
            case 43:
            case 21:
            case 42:
                by = (byte)i1;
                for (i22 = 2; i22 < 63; ++i22) {
                    i = (int)f1;
                    i >>= i1;
                    switch ((i22 % 2) + 10) {
                    case 10:
                        for (i24 = 1; i24 < 2; i24++) {
                            Test.instanceCount = i24;
                        }
                        iArr[i22] = i25;
                        i26 = 2;
                        do {
                            i = i26;
                            i23 -= (int)Test.lFld;
                        } while (--i26 > 0);
                        break;
                    case 11:
                        i27 = 2;
                        while ((i27 -= 3) > 0) {
                            switch (((i22 >>> 1) % 2) + 118) {
                            case 118:
                                Test.lFld += i27;
                                Test.instanceCount &= by;
                                i23 *= i25;
                                i1 += i25;
                                break;
                            case 119:
                                f += (((i27 * Test.instanceCount) + s2) - Test.lFld);
                                i25 = i23;
                                i25 += (i27 * i27);
                                Test.lArrFld1[i22][i27] += i22;
                                break;
                            default:
                                Test.instanceCount += (i27 * i27);
                            }
                        }
                        break;
                    default:
                        Test.instanceCount = i1;
                    }
                }
                break;
            case 44:
                i25 += i23;
                break;
            case 30:
                i25 = (int)207L;
                break;
            default:
                try {
                    i23 = (Test.iArrFld[(i28 >>> 1) % N] % -5298);
                    i29 = (65449 % i);
                    iArr[(i24 >>> 1) % N] = (Test.iArrFld[(-11 >>> 1) % N] % Test.iArrFld[(i29 >>> 1) % N]);
                } catch (ArithmeticException a_e) {}
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
