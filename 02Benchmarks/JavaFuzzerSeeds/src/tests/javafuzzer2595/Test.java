package tests.javafuzzer2595;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:59:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=245L;
    public static volatile int iFld=-49799;
    public static short sFld=11702;
    public boolean bFld=false;
    public byte byFld=114;
    public static short sArrFld[]=new short[N];
    public boolean bArrFld[]=new boolean[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)3294);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        short s=-7699, sArr[]=new short[N];
        int i6=-60, i7=42, i8=-181, i9=-43646, i10=11, i11=-2;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(sArr, (short)3024);
        FuzzerUtils.init(bArr, false);

        s = (short)l;
        Test.iFld &= (int)7797L;
        for (i6 = 21; i6 < 395; ++i6) {
            for (i8 = i6; 5 > i8; ++i8) {
                sArr[i8 - 1] -= s;
            }
            if (Test.iFld != 0) {
                vMeth1_check_sum += l + s + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
            Test.iFld = (int)l;
            for (i10 = 1; i10 < 5; ++i10) {
                i9 -= i6;
                bArr[i10 - 1] = b;
                i9 = i7;
                bArr[i10] = b;
                l += (148 + (i10 * i10));
                i7 -= -7321;
                if (b) continue;
            }
        }
        vMeth1_check_sum += l + s + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=13, i5=73, i12=-61614, i13=-6;
        float f=-74.683F;
        short s1=-26555, sArr1[]=new short[N];
        double d=21.65977;
        byte by=-117;
        boolean b1=false;

        FuzzerUtils.init(sArr1, (short)3617);

        for (i4 = 2; 150 > i4; i4++) {
            vMeth1(Test.instanceCount);
            i2 = i2;
            f *= s1;
            i1 += i4;
            Test.iFld -= (int)f;
            for (i12 = 1; i12 < 11; ++i12) {
                sArr1[i4 - 1] = (short)Test.iFld;
                if (b1) {
                    i1 = (int)d;
                    f -= s1;
                    i13 += (((i12 * by) + i3) - i1);
                    if (b1) continue;
                } else if (false) {
                    Test.instanceCount += (i12 * i12);
                    i13 += i12;
                } else {
                    by += (byte)(25744 + (i12 * i12));
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + s1 + i12 + i13 + Double.doubleToLongBits(d)
            + by + (b1 ? 1 : 0) + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i14=63824, i15=-80, i16=-200, i17=229, i18=13, i19=10, iArr[]=new int[N];
        float f1=37.625F;
        boolean b2=false;

        FuzzerUtils.init(iArr, -56244);

        Test.instanceCount >>= iMeth(i, Test.iFld, 21172);
        if (b2) {
            i14 = 1;
            while (++i14 < 384) {
                for (i15 = 4; i15 > 1; --i15) {
                    iArr[i14 + 1] = 49;
                    for (f1 = 1; 2 > f1; ++f1) {
                        i17 = (int)Test.instanceCount;
                        i16 = (int)Test.instanceCount;
                        Test.sFld -= (short)i17;
                        Test.sArrFld = Test.sArrFld;
                    }
                    i17 /= 59484;
                    iArr[i15] |= i14;
                }
                for (i18 = i14; i18 < 4; ++i18) {
                    i <<= (int)Test.instanceCount;
                    i += (int)f1;
                }
            }
        }
        vMeth_check_sum += i + i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + i19 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-249, i21=-59660, i22=-64898, i23=118, i24=220, i25=18, i26=44558, i27=17937, iArr1[]=new int[N];
        float f2=52.468F;
        double d1=0.63915;

        FuzzerUtils.init(iArr1, -1);

        vMeth(-80);
        for (i20 = 11; i20 < 249; ++i20) {
            for (i22 = 1; i22 < 106; i22++) {
                switch (((i22 % 2) * 5) + 33) {
                case 38:
                    for (i24 = 1; i24 < 2; ++i24) {
                        bArrFld[i20 + 1] = bFld;
                        i23 = i26;
                        f2 += i20;
                        Test.sFld += byFld;
                        i21 += (((i24 * i20) + Test.instanceCount) - i21);
                        i21 += i21;
                        Test.instanceCount += (i24 | (long)f2);
                        i23 += (-20493 + (i24 * i24));
                        Test.iFld -= i23;
                        if (bFld) {
                            d1 = i24;
                            Test.sFld += (short)(((i24 * i20) + f2) - i23);
                            i26 -= (int)Test.instanceCount;
                            if (true) break;
                        } else {
                        }
                    }
                    Test.iFld = i22;
                    i27 = 1;
                    do {
                        lArrFld[i22][i20] += i21;
                        i23 >>= (int)Test.instanceCount;
                        i23 -= (int)f2;
                        f2 = i22;
                        iArr1[i22 + 1] -= i21;
                        Test.iFld *= i27;
                        if (bFld) continue;
                        i25 /= (int)43055L;
                    } while (++i27 < 2);
                case 35:
                    Test.iFld = i20;
                default:
                    iArr1[i20 - 1] -= i21;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
