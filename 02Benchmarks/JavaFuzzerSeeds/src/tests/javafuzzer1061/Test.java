package tests.javafuzzer1061;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:43:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1969701032L;
    public static byte byFld=114;
    public static int iFld=-25036;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1) {

        int i4=165, i5=3, i6=-32470, i7=-123, i8=51249, i9=3, iArr1[]=new int[N];
        double d=-1.113781;
        short s1=-10052;
        byte by=3;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 1);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(fArr, 71.701F);

        for (i4 = 184; i4 > 9; --i4) {
            for (i6 = 9; i6 > 1; i6--) {
                boolean b=false;
                try {
                    i5 = (i5 / i5);
                    iArr1[i6 - 1] = (i7 / i4);
                    iArr1[i4 + 1] = (i6 / -6741415);
                } catch (ArithmeticException a_e) {}
                lArr[i4 + 1] -= (long)f1;
                if (b) continue;
                switch (((i4 % 3) * 5) + 13) {
                case 20:
                    i7 >>= i7;
                    for (d = 1; d < 2; d++) {
                        Test.instanceCount = i7;
                        if (b) continue;
                        fArr = FuzzerUtils.float1array(N, (float)2.617F);
                        lArr[i4] = (long)f1;
                        i5 = s1;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    i5 <<= -3;
                    break;
                case 17:
                    f1 = i7;
                case 21:
                    Test.instanceCount += (((i6 * by) + i5) - i9);
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + s1 + by +
            i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(int i1) {

        int i2=-159, i3=-9287, i10=2, i11=41541, i12=61026, i13=0, iArr[]=new int[N];
        float f2=0.963F;
        short s2=13904;

        FuzzerUtils.init(iArr, -31982);

        for (i2 = 18; 347 > i2; ++i2) {
            try {
                i3 = (60 % i3);
                iArr[i2 - 1] = (59 / iArr[i2 + 1]);
                iArr[i2 - 1] = (i2 / i2);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount = (-((i1 - i2) + Math.min(-54623, i2)));
            vMeth(-1.588F);
            for (i10 = 1; i10 < 5; ++i10) {
                Test.instanceCount ^= Test.instanceCount;
                f2 *= i10;
                switch ((i2 % 2) + 122) {
                case 122:
                    i3 += (3 + (i10 * i10));
                    i12 = 1;
                    do {
                        s2 += (short)i11;
                        iArr[i10] >>>= i12;
                        f2 += (30155 + (i12 * i12));
                        Test.instanceCount += i13;
                    } while (++i12 < 2);
                    break;
                case 123:
                    i3 += (((i10 * i11) + i11) - Test.instanceCount);
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i10 + i11 + Float.floatToIntBits(f2) + i12 + s2 + i13 +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i14=22188, i15=-209, i16=-6, i17=-64955, i18=232, i19=-22, iArr2[]=new int[N];
        float f3=-2.366F, f4=1.518F;
        double d1=-21.15209;
        short s3=19011;

        FuzzerUtils.init(iArr2, 8);

        iMeth1(i14);
        for (i15 = 20; i15 < 360; ++i15) {
            l = i16;
            i16 += Test.byFld;
            l ^= i15;
            l += (((i15 * i16) + i15) - i15);
            for (f3 = i15; 5 > f3; ++f3) {
                try {
                    i16 = (-41756 / i15);
                    i17 = (i14 % -41244);
                    iArr2[i15 - 1] = (i14 / 84);
                } catch (ArithmeticException a_e) {}
                i14 *= (int)d1;
                switch ((int)(((f3 % 4) * 5) + 65)) {
                case 83:
                    for (i18 = 1; i18 < 1; i18++) {
                        i16 = (int)l;
                    }
                    break;
                case 85:
                case 77:
                    Test.instanceCount = i16;
                    f4 *= i19;
                    s3 -= (short)l;
                    break;
                case 72:
                    f4 = Test.instanceCount;
                    break;
                default:
                    Test.iArrFld[(int)(f3 - 1)] -= i18;
                }
            }
        }
        long meth_res = l + i14 + i15 + i16 + Float.floatToIntBits(f3) + i17 + Double.doubleToLongBits(d1) + i18 + i19
            + Float.floatToIntBits(f4) + s3 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-48.731F, f5=-46.954F;
        short s=31307;
        int i=29450, i21=45, i22=-1;
        boolean b1=true;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, 186L);
        FuzzerUtils.init(dArr, 2.35138);

        f += ((++Test.instanceCount) + ((7042 * (-18049 / ((--s) | 1))) - (Test.instanceCount >> i)));
        iMeth(Test.instanceCount);
        s -= (short)i;
        Test.byFld *= Test.byFld;
        for (int i20 : Test.iArrFld) {
            for (i21 = 2; i21 < 63; ++i21) {
                i22 <<= Test.iFld;
                i22 = 216;
                b1 = b1;
                lArr1[i21] += Test.instanceCount;
            }
            Test.iFld |= Test.byFld;
            f5 += Test.instanceCount;
            dArr[(i21 >>> 1) % N] += s;
            i20 = 87;
            Test.instanceCount = i21;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
