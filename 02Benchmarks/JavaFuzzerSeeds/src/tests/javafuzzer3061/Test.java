package tests.javafuzzer3061;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:21:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3979775659464881967L;
    public static boolean bFld=false;
    public static volatile double dFld=1.103189;
    public static float fArrFld[][]=new float[N][N];
    public long lArrFld[][]=new long[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -116.702F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-96, i4=9, i5=17510, i6=-2, i7=-65445, i8=2, i9=59, iArr1[]=new int[N];
        float f1=-1.273F;
        short s=24177;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 27581L);
        FuzzerUtils.init(iArr1, -57309);

        i3 = 1;
        while (++i3 < 226) {
            Test.instanceCount += Test.instanceCount;
            i4 += (((i3 * f1) + i4) - i3);
            for (i5 = 1; 7 > i5; ++i5) {
                lArr = lArr;
                for (i7 = 1; i7 < 2; i7++) {
                    i8 >>>= -6;
                    f1 = i8;
                    i8 = (int)Test.instanceCount;
                    lArr[i3 + 1] >>= -55313;
                    iArr1[i3 - 1] -= i4;
                }
                i9 <<= i7;
                i8 <<= i7;
                iArr1[i3] >>= (int)Test.instanceCount;
            }
        }
        s >>= (short)Test.instanceCount;
        vMeth2_check_sum += i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + s +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i2=-61, i10=62067, i11=26, i12=245, i13=-181, iArr2[]=new int[N];
        float f=-22.344F;
        byte by=32;
        short s1=32065;
        double d=2.68439;

        FuzzerUtils.init(iArr2, -29);

        i2 = 1;
        do {
            Test.instanceCount += (i2 * f);
            vMeth2();
            for (i10 = 1; 5 > i10; i10++) {
                i11 |= by;
                i11 = s1;
                Test.fArrFld[i10 - 1][i2 + 1] += -17;
                i11 -= (int)Test.instanceCount;
                iArr2[i2] = (int)d;
                by *= (byte)-8120678536331077146L;
                for (i12 = i2; i12 < 2; i12++) {
                    iArr2[i12 - 1] ^= (int)Test.instanceCount;
                    i13 *= (int)Test.instanceCount;
                }
                f += i11;
            }
        } while (++i2 < 334);
        f = i10;
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i10 + i11 + by + s1 + Double.doubleToLongBits(d) + i12 + i13
            + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth() {

        int i16=-7, i17=195, i18=-57807, i19=-131, i20=83, i21=7, i22=-210, iArr3[]=new int[N];
        float f2=-125.896F;
        byte by1=78;
        short s2=-30771;

        FuzzerUtils.init(iArr3, -492);

        vMeth1();
        i16 = 1;
        do {
            for (i17 = 5; i17 > 1; i17 -= 3) {
                if (Test.bFld) break;
                try {
                    iArr3[i17] = (i18 / -24);
                    iArr3[i17 + 1] = (i17 % 19814);
                    i18 = (i17 / -358006349);
                } catch (ArithmeticException a_e) {}
                for (i19 = i17; 5 > i19; i19++) {
                    i18 += (((i19 * f2) + f2) - i16);
                    by1 = (byte)Test.instanceCount;
                    s2 = (short)i20;
                    i20 += (((i19 * s2) + i18) - i16);
                    i20 >>= i20;
                }
                i20 <<= i20;
                for (i21 = 5; i21 > i16; --i21) {
                    Test.dFld += Test.instanceCount;
                    i20 = i20;
                }
            }
        } while (++i16 < 372);
        vMeth_check_sum += i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) + by1 + s2 + i21 + i22 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=1799, i23=-12, i24=1044, i25=14, i26=10, i27=-109, i28=4240, iArr[]=new int[N];
        float f3=26.298F;
        short s3=18200;

        FuzzerUtils.init(iArr, -12);

        iArr[(i >>> 1) % N] *= (i++);
        i1 = 141;
        while (--i1 > 0) {
            vMeth();
        }
        for (i23 = 188; i23 > 3; i23--) {
            Test.instanceCount += (i23 * Test.instanceCount);
            if (true) continue;
            iArr[i23] >>= i;
            i24 = (int)f3;
            for (i25 = 2; i25 < 136; i25++) {
                for (i27 = 1; i27 < 2; i27++) {
                    s3 = (short)-3;
                    i += (i27 * i27);
                    lArrFld = lArrFld;
                    try {
                        i28 = (iArr[i23] % iArr[i23 + 1]);
                        i = (i27 % i24);
                        i26 = (70 % i24);
                    } catch (ArithmeticException a_e) {}
                    s3 /= (short)(i23 | 1);
                    lArrFld[i27 - 1][i25] *= i24;
                    i26 = (int)f3;
                    i24 += i25;
                    switch (((i23 % 4) * 5) + 100) {
                    case 118:
                    case 106:
                        i28 = (int)Test.instanceCount;
                        Test.fArrFld[i27][i25] += i26;
                        if (Test.bFld) {
                            dArrFld[i25] = i28;
                            if (Test.bFld) continue;
                            i += (int)f3;
                        } else {
                            Test.dFld = 38.844F;
                            i += (i27 | i25);
                        }
                    case 108:
                        s3 *= (short)Test.instanceCount;
                        iArr[i27 + 1] -= (int)f3;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 111:
                        f3 += (i27 * i27);
                        break;
                    default:
                        i24 >>= (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
