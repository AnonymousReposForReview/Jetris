package tests.javafuzzer2880;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:07:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11457L;
    public short sFld=-9654;
    public float fFld=0.987F;
    public int iFld=12;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.260F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        int i7=43662, i8=-187, i9=8, i10=7, i11=11, i12=-6, iArr1[]=new int[N];
        double d1=0.112545;
        float f2=-43.4F;

        FuzzerUtils.init(iArr1, -47109);

        Test.instanceCount -= i7;
        iArr1[(i7 >>> 1) % N] *= -53935;
        for (i8 = 11; i8 < 222; i8++) {
            for (d1 = 1; d1 < 8; ++d1) {
                Test.fArrFld = Test.fArrFld;
                i9 = i7;
                iArr1[i8] ^= i10;
                i10 *= (int)Test.instanceCount;
                i9 *= (int)f2;
                for (i11 = 1; i11 < 2; i11++) {
                    f2 = i12;
                    i9 *= i7;
                    iArr1[(int)(d1 + 1)] = (int)Test.instanceCount;
                }
                i12 += 4;
                i9 += i7;
            }
        }
        long meth_res = l + i7 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + Float.floatToIntBits(f2) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, boolean b, float f1) {

        int i13=138, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -33131);

        f1 *= (iMeth(Test.instanceCount) + i13);
        iArr2[(i13 >>> 1) % N] = i13;
        i13 = (int)Test.instanceCount;
        i13 += i13;
        i13 |= i13;
        Test.instanceCount += i13;
        vMeth_check_sum += Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f1) + i13 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth(float f, int i5, int i6) {

        double d2=2.4277;
        boolean b1=false;
        float f3=0.878F;
        int i14=14, i15=-10, i16=-51492, i17=46, i18=3, i19=4, iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr3, -112);

        vMeth(d2, b1, f3);
        for (i14 = 7; i14 < 259; i14++) {
            i6 -= -27270;
            for (i16 = 1; i16 < 6; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    if (false) {
                        if (i18 != 0) {
                        }
                    } else if (true) {
                        iArr3[i18 - 1][i16] *= (int)d2;
                        iArr3[i14][i14 + 1] <<= i5;
                        i5 *= -40171;
                        i19 += (int)f3;
                    } else if (b1) {
                        if (b1) continue;
                        d2 = 24848;
                        Test.fArrFld = Test.fArrFld;
                    } else {
                        i19 = (int)Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) +
            Float.floatToIntBits(f3) + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12138, i1=-6, i2=32225, i3=-1, i4=11, i20=7, i21=-218, i22=-242, i23=-11, i24=12366, iArr[]=new int[N];
        byte by=52;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -97);
        FuzzerUtils.init(lArr, 0L);

        for (i = 11; i < 375; i++) {
            sFld >>>= (short)iArr[i + 1];
            i1 <<= (i1--);
            for (i2 = 4; i2 < 69; ++i2) {
                i4 = 1;
                while (++i4 < 2) {
                    i3 = (int)(((fFld += -50740) - (Test.instanceCount++)) + (i3 + lMeth(fFld, i1, i1)));
                    iArr[i4 - 1] *= i;
                    iArr[i4 - 1] >>= i2;
                    i1 = -57013;
                    iFld = i;
                    iFld = i2;
                    i3 += i;
                    iArr[i4] *= i2;
                }
                for (i20 = 1; i20 < 2; i20++) {
                    lArr[i] *= i3;
                    Test.instanceCount += (i20 + Test.instanceCount);
                    by = (byte)Test.instanceCount;
                }
                for (i22 = 1; 2 > i22; ++i22) {
                    fFld += i4;
                    i23 = i21;
                }
                Test.instanceCount = -5;
                i24 = 1;
                do {
                    i23 += (int)Test.instanceCount;
                    if (false) {
                        switch (((i % 3) * 5) + 67) {
                        case 75:
                            fFld = i21;
                            break;
                        case 72:
                            i1 = i23;
                            Test.instanceCount += (i24 * iFld);
                            i21 += (((i24 * Test.instanceCount) + i3) - fFld);
                            break;
                        case 71:
                            by *= (byte)Test.instanceCount;
                            break;
                        default:
                            fFld += i23;
                        }
                    } else {
                        i1 = i1;
                    }
                } while (++i24 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
