package tests.javafuzzer2026;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4026127570L;
    public static double dFld=-2.69864;
    public static byte byFld=59;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, byte by) {

        int i11=43383, i12=24, i13=54513, i14=-236, i15=20182;
        float f1=-59.321F;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1523623283127221195L);

        for (i11 = 9; i11 < 352; ++i11) {
            i13 = 1;
            while (++i13 < 5) {
                i10 >>= i11;
                lArr[i11] = -23578;
                switch ((i11 % 2) + 52) {
                case 52:
                    i10 += (int)-2.265F;
                    Test.instanceCount += (i13 + Test.instanceCount);
                    if (i13 != 0) {
                    }
                    Test.instanceCount = i10;
                    break;
                case 53:
                    f1 = i10;
                    Test.instanceCount = 202;
                    b1 = true;
                    for (i14 = 1; i14 > 1; i14 -= 3) {
                        i10 >>>= i13;
                        i10 += i15;
                    }
                    break;
                }
            }
        }
        long meth_res = i10 + by + i11 + i12 + i13 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i14 + i15 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i4=-30891, i5=-5, i6=-31803, i7=-8, i8=-248, i9=-6;
        short s=22204;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.55906);

        i4 = 1;
        while (++i4 < 193) {
            Test.instanceCount += (i4 * i4);
            for (i5 = 1; i5 < 8; ++i5) {
                i6 += i5;
                i6 ^= (int)(((i5 * i4) - (Test.instanceCount = 181)) * Math.abs(i4 + i4));
            }
            i7 = 1;
            do {
                for (i8 = 1; 1 < i8; i8 -= 2) {
                    Test.iArrFld[i4] -= (int)((i9++) + Test.instanceCount);
                    switch ((i4 % 2) + 116) {
                    case 116:
                        Test.instanceCount = (((-9L + (Test.iArrFld[i8]--)) * Short.reverseBytes(s)) - Math.abs(++i6));
                        i6 >>= (int)(Test.instanceCount <<= (--i9));
                        i6 += (((i8 * i6) + i5) - i7);
                        break;
                    case 117:
                        dArr[i7] = (Test.instanceCount + s);
                        i6 -= Integer.reverseBytes(--i6);
                        i9 <<= iMeth(i6, Test.byFld);
                    default:
                        i6 = i4;
                    }
                }
            } while (++i7 < 8);
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth() {

        int i16=-12, i17=-65022, i18=114, i19=4, i20=-5837, i21=-1174, i22=163;

        vMeth1();
        i16 = i16;
        i16 += i16;
        for (i17 = 14; i17 < 335; i17++) {
            i18 += i17;
            i18 += -212;
            Test.bFld = false;
        }
        i16 <<= i18;
        i18 -= i17;
        i19 = 1;
        do {
            i16 = i17;
            lArrFld[i19 + 1][i19] -= (long)Test.dFld;
            for (i20 = 1; i20 < 10; ++i20) {
                i18 += (int)Test.instanceCount;
                i22 *= (int)Test.instanceCount;
            }
        } while (++i19 < 166);
        vMeth_check_sum += i16 + i17 + i18 + i19 + i20 + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        int i=-200, i1=121, i2=-5, i3=45197, i23=-35, i24=-10, i25=-41566, i26=4, i27=8, i28=-56306, i29=19787;
        float f=0.253F, f2=34.451F;
        boolean b=true;

        for (i = 5; i < 304; i += 2) {
            for (i2 = 1; i2 < 168; i2++) {
                Test.instanceCount |= (long)(((-(i3 + Test.dFld)) * (Test.instanceCount * f)) * ((i2 * 40.45538) / ((i3
                    + i1) | 1)));
                if (b) continue;
                vMeth();
                Test.iArrFld[i - 1] = (int)Test.instanceCount;
                if (Test.bFld) continue;
                for (i23 = 1; 2 > i23; i23++) {
                    i1 += i23;
                    i1 = -233;
                    i24 >>= i2;
                    i24 = i3;
                    i24 = i24;
                    Test.instanceCount += i1;
                    i3 += (i23 - i);
                }
            }
            Test.iArrFld[i - 1] >>= (int)Test.instanceCount;
            i3 = i2;
            i25 = 1;
            do {
                try {
                    i3 = (Test.iArrFld[i] % i25);
                    i24 = (i / -138);
                    Test.iArrFld[i25] = (i23 % 196183086);
                } catch (ArithmeticException a_e) {}
                i1 = 42502;
                i24 += i25;
                Test.instanceCount += i3;
            } while (++i25 < 168);
            i24 += (-28230 + (i * i));
            for (i26 = 4; i26 < 168; i26++) {
                Test.dFld = -14;
                for (i28 = 1; i28 < 2; i28 += 3) {
                    f2 *= i24;
                    i1 = i1;
                    Test.iArrFld[i28] >>>= i23;
                    Test.iArrFld[i28 - 1] -= i1;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
