package tests.javafuzzer341;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:17:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=176L;
    public static double dFld=-79.100213;
    public int iFld=-190;
    public float fFld=-64.356F;
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld1[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 85.709F);
        FuzzerUtils.init(Test.fArrFld1, 0.162F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i7=-23792, i8=-9, i9=8, i10=-14882, i11=-21665, i12=206, iArr1[]=new int[N];
        boolean b=true;
        float f=-2.659F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 30448);
        FuzzerUtils.init(lArr, 53L);

        Test.dFld -= i7;
        for (i8 = 12; i8 < 321; i8++) {
            switch ((i8 % 6) + 41) {
            case 41:
                i7 = -6;
                iArr1[i8 + 1] = i9;
                b = b;
                break;
            case 42:
                f += (((i8 * Test.instanceCount) + Test.instanceCount) - i10);
            case 43:
                i10 = (int)-4392463017447323509L;
                Test.instanceCount += i8;
                for (i11 = 1; i11 < 5; i11++) {
                    i10 = (int)Test.instanceCount;
                    Test.instanceCount += (long)f;
                    i10 = i7;
                    f += i11;
                    i7 = i7;
                }
                break;
            case 44:
                i12 *= i9;
                break;
            case 45:
                lArr[i8] += i10;
                break;
            case 46:
                i7 >>= (int)Test.instanceCount;
                break;
            }
        }
        vMeth2_check_sum += i7 + i8 + i9 + (b ? 1 : 0) + Float.floatToIntBits(f) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {


        vMeth2();
        vMeth1_check_sum += 0;
    }

    public static void vMeth() {

        int i=50319, i1=9, i2=-17, i3=34072, i4=-1, i5=5, i6=-24, iArr[]=new int[N];
        float f1=43.153F;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 154);
        FuzzerUtils.init(dArr, -69.97475);

        for (i = 12; i < 203; i++) {
            iArr[(i >>> 1) % N] /= (int)((3L * (iArr[i]--)) | 1);
            for (i2 = i; i2 < 8; i2++) {
                i3 += (i2 * i2);
                i1 += (i2 * i2);
            }
            try {
                i3 = (i % i3);
                i1 = (i2 % iArr[i]);
                i1 = (i % 21586);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += (long)dArr[i];
            for (i4 = 1; i4 < 8; i4++) {
                int i13=9;
                i1 = 106;
                Test.fArrFld[i + 1] = ((i3 * (i1 - i)) + ((-(i + Test.instanceCount)) - (i5 + i6)));
                vMeth1();
                f1 += i13;
                b1 = b1;
                if (i1 != 0) {
                    vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                f1 = Test.instanceCount;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i14=-1, i15=159, i16=65, i17=6, i18=-35634, iArr2[]=new int[N];
        boolean b2=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)17817);
        FuzzerUtils.init(iArr2, -12);

        vMeth();
        sArr[(iFld >>> 1) % N] |= (short)iFld;
        iFld -= -25959;
        i14 = 1;
        do {
            i15 = 104;
            do {
                iFld += i15;
                fFld = 50;
                iFld += (i15 * Test.instanceCount);
                Test.instanceCount ^= Test.instanceCount;
                iFld += (i15 | Test.instanceCount);
                for (i16 = i14; i16 < 3; ++i16) {
                    if (b2) continue;
                    b2 = false;
                    iFld >>= i16;
                    lArrFld[i15] *= Test.instanceCount;
                    try {
                        i17 = (48796 % iFld);
                        i17 = (i15 / -946792633);
                        iArr2[i15 + 1] = (i15 / iFld);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i15] <<= i17;
                }
                switch (((i15 % 6) * 5) + 88) {
                case 90:
                    i17 += (-161 + (i15 * i15));
                    Test.instanceCount = i14;
                    iFld -= (int)Test.instanceCount;
                    break;
                case 100:
                    Test.instanceCount &= i16;
                    i17 += (i15 - i15);
                    i17 <<= (int)Test.instanceCount;
                    iFld <<= i15;
                    break;
                case 106:
                    i18 = 1;
                    do {
                        switch (((i15 % 2) * 5) + 66) {
                        case 71:
                            b2 = b2;
                            Test.instanceCount = i16;
                            iFld = i18;
                            break;
                        case 74:
                            fFld *= fFld;
                        }
                    } while (++i18 < 3);
                    break;
                case 114:
                    i17 *= i14;
                    break;
                case 110:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 113:
                    Test.fArrFld1[i14][i15] += i18;
                    break;
                default:
                    Test.dFld += iFld;
                }
            } while ((i15 -= 3) > 0);
        } while (++i14 < 242);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
