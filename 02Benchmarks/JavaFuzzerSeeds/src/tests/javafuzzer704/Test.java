package tests.javafuzzer704;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:13:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8223L;
    public static double dFld=2.7130;
    public static int iFld=-32601;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -26580);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=14, i3=-42556, i4=-11, i5=-114, i6=28, iArr[]=new int[N];
        float f=-2.45F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(dArr, -2.51853);

        Test.dFld = 14691;
        Test.instanceCount = Test.iFld;
        for (i2 = 5; 182 > i2; i2++) {
            i4 = 1;
            do {
                i3 += (int)2637992494073265409L;
                i3 -= Test.iFld;
                for (i5 = 1; i5 < 1; i5++) {
                    iArr = iArr;
                    Test.dFld -= f;
                    try {
                        iArr[i2 - 1] = (i6 % 5810);
                        Test.iFld = (191 % iArr[i5 + 1]);
                        Test.iFld = (i2 / -1346320403);
                    } catch (ArithmeticException a_e) {}
                    dArr[i4 - 1] -= 51L;
                    if (b) continue;
                    i6 *= (int)f;
                }
            } while (++i4 < 9);
        }
        Test.instanceCount *= Test.iFld;
        f += i6;
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        int i7=-18991, i8=49215, i9=-147, i10=-10, i11=-60453, i12=172;
        byte by=50;
        boolean b1=false;
        short s=-29008;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.624F);

        vMeth1();
        Test.instanceCount >>= Test.iFld;
        switch (((Test.iFld >>> 1) % 1) + 110) {
        case 110:
            for (i7 = 2; i7 < 318; ++i7) {
                fArr = fArr;
                for (i9 = i7; i9 < 5; i9++) {
                    fArr[i9 + 1] = Test.instanceCount;
                    for (i11 = 1; 1 > i11; ++i11) {
                        Test.instanceCount = i10;
                        Test.iArrFld[i7] *= i8;
                        if (false) {
                            switch (((i8 >>> 1) % 6) + 40) {
                            case 40:
                                try {
                                    Test.iFld = (13 % i12);
                                    i12 = (i8 / 243);
                                    i8 = (Test.iArrFld[i7 + 1] / i10);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 41:
                                i8 -= i8;
                                by += (byte)i11;
                                break;
                            case 42:
                                i12 *= -8;
                                break;
                            case 43:
                                by += (byte)i11;
                                break;
                            case 44:
                                if (b1) break;
                                break;
                            case 45:
                                Test.instanceCount += (((i11 * Test.iFld) + s) - i11);
                            }
                        } else if (false) {
                            try {
                                i12 = (Test.iFld % -24099);
                                i8 = (Test.iArrFld[i7 - 1] / i11);
                                i10 = (40742 % i12);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                }
            }
            break;
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + by + (b1 ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l1, int i1, double d) {

        int i13=0, i14=62263, i15=-1;
        boolean b2=false;
        float f1=-20.376F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -9.75148);

        vMeth();
        for (i13 = 6; 203 > i13; i13++) {
            dArr1 = dArr1;
            i14 = i13;
            i14 = i1;
            if (b2) break;
            i15 = 8;
            while (--i15 > 0) {
                byte by1=126;
                i14 -= Test.iFld;
                f1 *= 78.848F;
                Test.iFld += (i15 * Test.instanceCount);
                i1 += (((i15 * l1) + Test.instanceCount) - i13);
                l1 = i13;
                i14 += (i15 - Test.instanceCount);
                l1 *= Test.iFld;
                by1 = (byte)Test.instanceCount;
            }
        }
        long meth_res = l1 + i1 + Double.doubleToLongBits(d) + i13 + i14 + (b2 ? 1 : 0) + i15 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-14L, l2=4627843410138885739L, lArr[][]=new long[N][N];
        int i=6771, i16=253, i17=12598, i18=-44;
        float f2=-33.220F;
        boolean b3=true;
        short s1=-5804;

        FuzzerUtils.init(lArr, -11L);

        for (l = 2; l < 188; l++) {
            i *= (int)(iMeth(Test.instanceCount, -177, Test.dFld) + -28L);
            for (l2 = 1; l2 < 135; ++l2) {
                for (i17 = 1; i17 < 2; i17++) {
                    byte by2=82;
                    switch ((int)(((l % 2) * 5) + 33)) {
                    case 43:
                        Test.iArrFld[i17 + 1] <<= i18;
                    case 39:
                        Test.iFld >>= (int)l2;
                        break;
                    default:
                        Test.instanceCount *= (long)f2;
                        Test.iArrFld[(int)(l2)] = i17;
                    }
                    f2 -= f2;
                    if (b3) continue;
                    Test.iArrFld[(int)(l - 1)] += by2;
                    switch ((int)((l % 5) + 86)) {
                    case 86:
                        i18 += i17;
                        Test.instanceCount += Test.iFld;
                        lArr = lArr;
                        i16 += i17;
                        break;
                    case 87:
                        i = i17;
                        break;
                    case 88:
                        f2 -= i18;
                        Test.iFld += (-205 + (i17 * i17));
                        if (b3) break;
                        i >>= Test.iFld;
                        break;
                    case 89:
                        Test.iFld += (int)f2;
                        if (b3) {
                            s1 -= (short)Test.iFld;
                            Test.iFld = by2;
                            i16 >>= -53127;
                        } else if (b3) {
                            Test.iFld += (((i17 * i16) + Test.instanceCount) - i);
                        } else {
                            by2 >>= (byte)l;
                        }
                        lArr = FuzzerUtils.long2array(N, (long)-7L);
                    case 90:
                        i16 = i;
                        break;
                    default:
                        i += (i17 ^ i);
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
