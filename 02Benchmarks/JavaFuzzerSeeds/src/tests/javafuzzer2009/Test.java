package tests.javafuzzer2009;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:26:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1455526566L;
    public boolean bFld=true;
    public static short sFld=-9460;
    public long lFld=8L;
    public static byte byFld=-21;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)20);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, double d1) {

        int i1=-225, i2=-7, i3=2, iArr[]=new int[N];
        double d2=0.31842, d3=-30.26891;
        byte by=76;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(lArr, -2484833088L);

        d1 += i1;
        l1 = i1;
        iArr[(i2 >>> 1) % N] = (int)l1;
        for (long l2 : lArr) {
            d2 = 1;
            while (++d2 < 4) {
                iArr[(int)(d2)] >>= 162;
                iArr[(int)(d2)] -= -12;
                i2 >>= i1;
                by *= (byte)i2;
            }
            for (d3 = 1; d3 < 4; ++d3) {
                i2 = i3;
                if (i3 != 0) {
                }
                iArr[(int)(d3)] -= i1;
            }
            by >>= (byte)i3;
            i2 += i3;
        }
        long meth_res = l1 + Double.doubleToLongBits(d1) + i1 + i2 + Double.doubleToLongBits(d2) + by +
            Double.doubleToLongBits(d3) + i3 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(float f) {

        short s=-13861;
        int i=54348;
        double d4=56.99560;
        boolean b=true;

        Test.instanceCount >>= (long)(((s - i) / ((long)(fMeth(Test.instanceCount, d4)) | 1)) + i);
        b = b;
        long meth_res = Float.floatToIntBits(f) + s + i + Double.doubleToLongBits(d4) + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        double d=25.72747;
        float f1=111.85F;

        d -= (-iMeth(f1));
        f1 -= 44860L;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        long l=118332828183775232L;
        int i4=-8, i5=8, i6=14, i7=-14, i8=40, i9=0, i10=-26229, i11=45107, iArr1[][]=new int[N][N];
        double d5=63.6797;
        float f2=-63.893F;

        FuzzerUtils.init(iArr1, 11781);

        l = 318;
        do {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
        } while (--l > 0);
        iArr1[(i4 >>> 1) % N][(i4 >>> 1) % N] *= i4;
        d5 -= f2;
        for (i5 = 12; i5 < 225; ++i5) {
            for (i7 = 7; i7 < 118; ++i7) {
                d5 += i8;
                bFld = bFld;
                i6 >>>= -41;
                i9 = 1;
                while (++i9 < 2) {
                    Test.instanceCount -= -245;
                    iArr1[i5][i5 - 1] -= Test.sFld;
                    Test.instanceCount = 7;
                    i6 += (((i9 * i6) + i5) - lFld);
                    i8 *= i7;
                }
                i10 = 1;
                do {
                    Test.instanceCount = -14;
                    i8 *= -51303;
                    i8 += i6;
                    i8 -= i6;
                } while (++i10 < 2);
                Test.byArrFld[i5] = (byte)i5;
                lFld = i9;
                d5 *= i5;
                i11 = 1;
                do {
                    lFld = i6;
                    i6 += (int)f2;
                    iArr1[i5][i5 - 1] -= i10;
                    i4 -= (int)f2;
                    iArr1[i11][i5 + 1] = i5;
                    i8 = Test.byFld;
                } while (++i11 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
