package tests.javafuzzer1301;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8498L;
    public static int iFld=5;
    public static byte byFld=-101;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.707F);
        FuzzerUtils.init(Test.iArrFld, 7773);
        FuzzerUtils.init(Test.lArrFld, 2222641328L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=2, i3=3, i4=0, iArr[]=new int[N];
        float f=-1.399F;
        double d=0.28908;

        FuzzerUtils.init(iArr, -88);

        i2 = 1;
        do {
            i3 = 1;
            do {
                Test.iFld *= (int)Test.instanceCount;
                switch ((i2 % 5) + 98) {
                case 98:
                    Test.iFld += (int)f;
                    switch (((-7 >>> 1) % 2) + 71) {
                    case 71:
                        iArr[i2 + 1] >>= i2;
                        Test.iFld >>= i3;
                        break;
                    case 72:
                        Test.instanceCount += (i3 | (long)f);
                        Test.instanceCount += Test.iFld;
                        break;
                    default:
                        Test.instanceCount += (((i3 * Test.iFld) + i2) - Test.iFld);
                        Test.iFld <<= i2;
                        f += i2;
                        if (false) break;
                    }
                    break;
                case 99:
                    Test.byFld += (byte)(55.1018F + (i3 * i3));
                    break;
                case 100:
                    d *= 6364;
                    break;
                case 101:
                    Test.instanceCount += (((i3 * i4) + i2) - f);
                case 102:
                    Test.iFld += (((i3 * i3) + i2) - Test.iFld);
                    break;
                }
            } while (++i3 < 18);
        } while ((i2 += 2) < 172);
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {


        vMeth1();
        vMeth_check_sum += 0;
    }

    public static int iMeth(int i, int i1) {

        double d1=2.53220;
        int i5=-20347, i6=-55, i7=8, i8=-114, iArr1[]=new int[N];
        float f1=2.460F;
        boolean b=true;
        long l=-5257829415302188849L, lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(lArr, 14196L);

        vMeth();
        i += (int)Test.instanceCount;
        iArr1[(i1 >>> 1) % N] += -4;
        d1 += i1;
        for (i5 = 366; i5 > 13; i5 -= 3) {
            iArr1[i5] = (int)Test.instanceCount;
            iArr1[i5 - 1] ^= (int)-8L;
            i1 = Test.iFld;
            i1 += i;
            for (i7 = i5; i7 < 13; i7++) {
                lArr[i5] >>>= i8;
                f1 *= i7;
                Test.instanceCount &= i7;
                b = true;
                l *= -1750251148961971023L;
            }
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b ? 1 :
            0) + l + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-34.450F;
        int i9=17596, i10=39419, i11=-124, i12=-8, i13=7, i14=137, i15=25666;
        double d2=0.53037, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -102.20194);

        Test.fArrFld[(Test.iFld >>> 1) % N] = iMeth(52, Test.iFld);
        Test.iFld += (int)f2;
        Test.iArrFld = Test.iArrFld;
        i9 = 1;
        do {
            for (i10 = i9; i10 < 85; ++i10) {
                Test.iFld += (((i10 * i10) + Test.instanceCount) - Test.instanceCount);
                f2 -= Test.instanceCount;
                Test.iFld = (int)Test.instanceCount;
                Test.iFld = -42;
            }
            i12 = 1;
            do {
                Test.iFld -= i9;
                Test.fArrFld[i9 + 1] = i10;
                Test.fArrFld[i12] = i12;
                Test.iFld >>= i11;
                for (i13 = 1; i13 < 1; ++i13) {
                    i11 |= i9;
                    Test.instanceCount += (171L + (i13 * i13));
                    Test.instanceCount *= i14;
                    Test.iFld = i15;
                    d2 -= i12;
                    i15 += (i13 * f2);
                    Test.instanceCount += i13;
                    Test.lArrFld[i13 - 1] += i15;
                    i15 = Test.iFld;
                    Test.lArrFld[i12 + 1] <<= i12;
                }
                Test.lArrFld[i9] = -20;
                Test.byFld += (byte)(i12 | i12);
                dArr[i9] *= i13;
                Test.iArrFld[i9 - 1] >>= i15;
                i14 += (i12 * i12);
            } while (++i12 < 85);
        } while (++i9 < 297);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
