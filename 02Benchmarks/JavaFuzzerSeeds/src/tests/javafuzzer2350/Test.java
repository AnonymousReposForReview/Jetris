package tests.javafuzzer2350;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:06:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3646751514L;
    public static float fFld=12.25F;
    public volatile byte byFld=-13;
    public volatile boolean bFld=false;
    public double dFld=-2.92593;
    public int iFld=44;
    public static volatile short sFld=-26674;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 28152L);
        FuzzerUtils.init(Test.lArrFld1, -2992851090L);
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i4) {

        double d=1.13761;
        boolean b=true;
        long l2=-252L;
        int i5=-205, i6=0, i7=12, i8=-14, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8);

        if (b) {
            Test.fFld += Test.instanceCount;
            i4 = (int)d;
            Test.lArrFld[(i4 >>> 1) % N] = 11;
        } else {
            Test.lArrFld1[(i4 >>> 1) % N][(i4 >>> 1) % N] += Test.instanceCount;
            for (l2 = 4; l2 < 236; ++l2) {
                i6 = 7;
                do {
                    Test.fFld += (187 + (i6 * i6));
                    d = l2;
                    i4 = i6;
                    iArr[(int)(l2)] += i5;
                } while (--i6 > 0);
                for (i7 = 1; i7 < 7; i7++) {
                    iArr[(int)(l2)] *= i4;
                    d = i8;
                    Test.instanceCount += (i7 * i7);
                }
            }
        }
        vMeth2_check_sum += l1 + i4 + Double.doubleToLongBits(d) + (b ? 1 : 0) + l2 + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(int i2, int i3) {

        long l3=5L;
        int i9=-62990, i10=-2, i11=41141, i12=172, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 27);

        vMeth2(93L, 59764);
        l3 = 1;
        while (++l3 < 397) {
            byFld += (byte)(((l3 * l3) + i2) - i3);
            i2 >>= i3;
            for (i9 = 1; i9 < 4; i9++) {
                short s=-23232;
                i3 = s;
                try {
                    i10 = (-1156848137 % iArr1[(int)(l3 + 1)]);
                    iArr1[i9] = (iArr1[(int)(l3)] % 234);
                    i10 = (-36 % i3);
                } catch (ArithmeticException a_e) {}
                bFld = bFld;
            }
            i10 = i9;
            for (i11 = 1; 4 > i11; i11++) {
                i10 -= i9;
                switch ((int)((l3 % 6) + 125)) {
                case 125:
                    i3 &= i11;
                    break;
                case 126:
                case 127:
                    byFld = (byte)Test.fFld;
                    i10 &= 13;
                    break;
                case 128:
                    Test.instanceCount += (((i11 * i10) + i11) - Test.instanceCount);
                case 129:
                    dFld = Test.fFld;
                    break;
                case 130:
                    Test.instanceCount += (i11 ^ i3);
                    break;
                default:
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + l3 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i, int i1, long l) {

        short s1=28404;
        int i13=-8, i14=-56127, iArr2[]=new int[N];
        long l4=-73L;

        FuzzerUtils.init(iArr2, 8);

        vMeth1(i1, i);
        i += s1;
        for (i13 = 2; i13 < 238; ++i13) {
            l <<= 120L;
            i1 = i;
            l = Test.instanceCount;
        }
        for (int i15 : iArr2) {
            i1 >>= i1;
            iArr2[(i14 >>> 1) % N] /= (int)(i13 | 1);
            l = (long)Test.fFld;
            byFld += (byte)i1;
            if (bFld) break;
            byFld = (byte)l4;
            l4 = (long)97.6406;
            l4 -= 8167;
        }
        vMeth_check_sum += i + i1 + l + s1 + i13 + i14 + l4 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i16=-48835, i17=14, i18=-242, i19=19449, i20=-6607, i21=1, i22=38038, i23=-61722, i24=129, i25=9,
            i26=-22665, i27=-23035, iArr3[]=new int[N];
        double d1=18.93580;

        FuzzerUtils.init(iArr3, 43451);

        vMeth(i16, iFld, Test.instanceCount);
        i17 = 1;
        do {
            for (d1 = 7; d1 < 124; ++d1) {
                i16 += (int)(((d1 * iFld) + iFld) - i16);
                i16 = (int)-1058033925L;
                dFld -= Test.sFld;
                if (true) continue;
                Test.instanceCount += (long)(d1 + iFld);
            }
            if (bFld) {
                iArr3[i17] >>= 5;
            }
            i19 = 1;
            while (++i19 < 124) {
                for (i20 = 1; i20 < 1; i20++) {
                    Test.lArrFld = Test.lArrFld;
                    try {
                        iArr3[i20] = (-12537 % i17);
                        i18 = (i19 % 7799);
                        i16 = (-9288 % i17);
                    } catch (ArithmeticException a_e) {}
                    i16 += (i20 ^ i18);
                }
                iArr3[i19 + 1] = byFld;
                dFld -= i19;
                iFld += (((i19 * i16) + i18) - i21);
                iFld += i21;
            }
        } while (++i17 < 203);
        bFld = false;
        for (i22 = 18; i22 < 319; ++i22) {
            Test.fFld += (i22 + i22);
        }
        i23 = 8;
        for (i24 = 134; 2 < i24; --i24) {
            try {
                i21 = (105 / i23);
                i21 = (iArr3[i24 - 1] % 1037548561);
                i21 = (i18 / -3310);
            } catch (ArithmeticException a_e) {}
            for (i26 = 10; i26 < 190; ++i26) {
                if (false) {
                    i27 <<= i22;
                    iArr3[i24] *= (int)-1.130744;
                    dFld -= 55;
                } else {
                    Test.iArrFld[i26 - 1] *= i23;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
