package tests.javafuzzer1100;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:31:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-228L;
    public volatile int iFld=62047;
    public short sFld=25930;
    public static float fFld=123.655F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13L);
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=2, i4=-58032, i5=214, i6=4, i7=2;
        double d=0.46325;
        boolean b=true;
        float f1=0.960F;

        i3 = 1;
        while (++i3 < 339) {
            Test.instanceCount += i3;
            Test.lArrFld[i3 + 1] = (long)d;
            for (i4 = i3; i4 < 5; i4 += 3) {
                if (b) continue;
                i5 *= i3;
                i5 += i3;
                f1 += (i4 - Test.instanceCount);
                for (i6 = i4; i6 < 1; ++i6) {
                    short s=27620;
                    f1 *= s;
                    i7 += i4;
                    switch ((i4 % 1) + 116) {
                    case 116:
                        i7 = i7;
                        break;
                    default:
                        i7 += i5;
                        Test.iArrFld[i3] = i5;
                    }
                }
            }
        }
        vMeth2_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i5 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i6 +
            i7;
    }

    public void vMeth1(float f) {

        double d1=115.88992;
        int i8=-161, i9=-73, i10=0, i11=20469;
        byte by=0;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 166L);

        vMeth2();
        for (d1 = 16; d1 < 304; d1++) {
            i8 += (int)d1;
            for (i9 = 6; i9 > 1; i9 -= 3) {
                i10 = (int)-114L;
                i11 = 1;
                do {
                    f = i11;
                    i8 &= by;
                    i10 += i11;
                } while (++i11 < 6);
                i10 += i8;
                i10 <<= i8;
                iFld += (((i9 * f) + f) - sFld);
                iFld = i9;
            }
            iFld -= (int)7394121110290475382L;
        }
        lArr[(iFld >>> 1) % N][(i11 >>> 1) % N] *= i9;
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + by +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i, int i1, int i2) {


        vMeth1(Test.fFld);
        vMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i12=-9154, i13=25, i14=167, i15=10165, i16=-90, i17=-6;
        byte by1=-104;
        long l=1L;
        boolean b1=false;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -2.55465);

        vMeth(iFld, iFld, iFld);
        Test.instanceCount -= 14;
        i12 = 200;
        do {
            if (b1) {
                iFld += i12;
                Test.iArrFld[(iFld >>> 1) % N] = (int)Test.instanceCount;
                Test.instanceCount = iFld;
            } else if (b1) {
                Test.fFld += iFld;
                iFld = iFld;
                for (i13 = 126; 1 < i13; i13 -= 3) {
                    Test.instanceCount %= (i12 | 1);
                    iFld >>>= iFld;
                    iFld = -12;
                    Test.iArrFld[i12 - 1] = (int)41288L;
                    iArrFld1 = iArrFld1;
                }
                for (i15 = i12; i15 < 126; ++i15) {
                    by1 += (byte)(i15 | Test.instanceCount);
                    iFld = i13;
                    for (l = 1; 1 < l; --l) {
                        i14 += i15;
                        iFld = i12;
                        Test.instanceCount <<= i12;
                        Test.iArrFld[i12] -= i12;
                        if (b1) {
                            iFld &= i14;
                            i14 >>= iFld;
                            if (b1) continue;
                            Test.fFld += (((l * i17) + Test.fFld) - i12);
                        } else if (b1) {
                            sFld = (short)Test.fFld;
                        } else if (b1) {
                            dArr[i12 + 1][i12 - 1] = 6;
                        } else {
                            iFld -= i12;
                        }
                    }
                }
            } else if (b1) {
                i14 *= i15;
            } else {
                try {
                    i16 = (Test.iArrFld[i12] / 241);
                    i16 = (-885943464 % i16);
                    iArrFld1[i12 - 1][i12 + 1] = (i13 / -11308);
                } catch (ArithmeticException a_e) {}
            }
        } while (--i12 > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
