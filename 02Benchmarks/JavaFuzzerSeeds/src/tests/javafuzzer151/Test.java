package tests.javafuzzer151;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:03:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=126L;
    public static volatile short sFld=14050;
    public static volatile boolean bFld=false;
    public static float fFld=0.629F;
    public int iFld=-168;

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i12, int i13, long l) {

        int i14=-169, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 94);

        if (Test.bFld) {
            i12 *= i14;
            Test.fFld *= (float)-69.61435;
        }
        iArr[(43457 >>> 1) % N] -= i12;
        vMeth_check_sum += i12 + i13 + l + i14 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i8, double d, int i9) {

        int i10=2, i11=5, i15=13, i16=-184, i17=-53719, i18=29077, iArr1[]=new int[N];
        boolean b=false;
        float f=1.208F;

        FuzzerUtils.init(iArr1, -1);

        i9 >>= (int)(-Math.abs(-i8));
        for (i10 = 18; i10 < 393; ++i10) {
            b = Test.bFld;
            i8 *= (int)(f + Math.min(i8, i10));
            vMeth(i11, i15, Test.instanceCount);
            i8 += i10;
            i16 = 1;
            while (++i16 < 5) {
                for (i17 = i10; i17 < 1; ++i17) {
                    i8 += (i17 * i16);
                    i9 += i17;
                    Test.instanceCount -= Test.sFld;
                    i18 += 112;
                    if (i15 != 0) {
                    }
                    try {
                        i11 = (i18 % i16);
                        i11 = (i8 / iArr1[i17 + 1]);
                        i15 = (i9 % i9);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i17 + 1] *= i15;
                }
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + (b ? 1 : 0) + Float.floatToIntBits(f) + i15
            + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i3) {

        int i4=-5011, i5=-9167, i6=12, i7=7043, iArr2[][]=new int[N][N];
        double d1=0.44296, d2=25.28038;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 174);
        FuzzerUtils.init(lArr, 4959750097978286928L);
        FuzzerUtils.init(fArr, 73.547F);

        switch (((((int)(3691303023L * (i3 + Test.instanceCount))) >>> 1) % 9) + 46) {
        case 46:
            for (i4 = 309; 12 < i4; --i4) {
                switch (((((-(i5 - i4)) >>> 1) % 5) * 5) + 44) {
                case 62:
                    i5 >>= (int)Test.instanceCount;
                    try {
                        i3 = (0 / i3);
                        i5 = (i3 / -79);
                        i5 = (46 % i4);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 65:
                    try {
                        i5 = (i5 % -1387065569);
                        i3 = (-342243690 % i5);
                        i5 = (771651496 / i3);
                    } catch (ArithmeticException a_e) {}
                    switch (((192 >>> 1) % 2) + 67) {
                    case 67:
                    case 68:
                        for (i6 = 1; i6 < 6; i6++) {
                            i7 += (int)(Test.instanceCount--);
                            switch (((i4 % 2) * 5) + 6) {
                            case 15:
                                Test.instanceCount *= (i3++);
                                i7 >>= (int)(((-iMeth(i6, d1, -11)) - 5) - Test.fFld);
                                break;
                            case 8:
                                d2 = 1;
                                do {
                                    iArr2[i4 + 1][(int)(d2 + 1)] *= -10;
                                    i5 -= i7;
                                } while (++d2 < 2);
                                break;
                            default:
                                Test.instanceCount *= i5;
                            }
                        }
                        break;
                    default:
                        if (false) continue;
                    }
                case 60:
                    i3 = i3;
                    break;
                case 46:
                    i7 += i4;
                    break;
                case 64:
                    i7 -= i7;
                    break;
                }
            }
            break;
        case 47:
            i3 -= i7;
            break;
        case 48:
            fArr[(-41141 >>> 1) % N] = Test.instanceCount;
            break;
        case 49:
            iArr2[(i6 >>> 1) % N][(i4 >>> 1) % N] |= i5;
            break;
        case 50:
            Test.fFld = Test.instanceCount;
            break;
        case 51:
            d1 += i5;
        case 52:
        case 53:
            iArr2[(3 >>> 1) % N][(i5 >>> 1) % N] += (int)-100.230F;
            break;
        case 54:
            iArr2[(i7 >>> 1) % N] = iArr2[(i5 >>> 1) % N];
            break;
        default:
            i3 = i6;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-53902, i1=18221, i2=0, i19=-6, i20=238, iArr3[]=new int[N];
        byte by=-34;
        double d3=-58.22591;
        long l2=4273722099L;

        FuzzerUtils.init(iArr3, -14);

        for (i = 10; i < 298; ++i) {
            i2 = 1;
            do {
                Test.sFld <<= sMeth(i);
                i1 <<= 179;
                iArr3 = FuzzerUtils.int1array(N, (int)0);
                i1 += (((i2 * i1) + by) - i);
                i1 += (i2 | i1);
                Test.instanceCount = i2;
                iFld += i2;
            } while (++i2 < 87);
            i1 >>= i2;
            Test.bFld = Test.bFld;
            if (true) break;
            Test.fFld -= Test.sFld;
            d3 -= 0;
            iFld *= 83;
            l2 = 1;
            while (++l2 < 87) {
                Test.instanceCount |= 178;
                d3 = -24499;
                i1 = 226;
                Test.instanceCount = (long)Test.fFld;
                for (i19 = i; i19 < 1; ++i19) {
                    try {
                        iArr3[i19 - 1] = (-51 / i1);
                        i1 = (i / i19);
                        iFld = (i % i);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld = Test.fFld;
                    i1 ^= (int)-3004340005502580628L;
                    i1 = i;
                    i1 <<= i2;
                    i20 *= (int)Test.fFld;
                }
                iArr3[i - 1] <<= Test.sFld;
                iFld += (int)Test.instanceCount;
                Test.fFld += (l2 + by);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
