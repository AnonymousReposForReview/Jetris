package tests.javafuzzer2040;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:49:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9000997040919866617L;
    public long lFld=3608365292L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 52454);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1() {

        double d=99.44651, d1=-52.38621, d2=79.108125;
        int i7=-138, i8=53;
        boolean b=false;
        byte by=-61;
        float f=-2.823F;

        for (int i6 : Test.iArrFld) {
            for (d = 1; d < 4; d++) {
                for (d1 = d; d1 < 2; d1++) {
                    b = b;
                    i8 += (int)(((d1 * i8) + by) - i8);
                    i7 += (-13933 + (d1 * d1));
                    b = b;
                }
                Test.instanceCount += (long)(d * d);
                d2 = d;
                i6 = 25;
                i7 += (int)((long)d ^ i8);
                i6 <<= i7;
                i6 -= (int)Test.instanceCount;
                f -= (float)d2;
            }
            Test.iArrFld = Test.iArrFld;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + i8 + (b ? 1 : 0) + by +
            Double.doubleToLongBits(d2) + Float.floatToIntBits(f);
    }

    public double dMeth(int i2) {

        int i3=-5642, i4=12, i9=-26, i10=14;
        float f1=127.667F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 65.329F);

        i2 = (int)(i2 <<= (int)((Test.instanceCount - 2L) - (-58 - (Test.instanceCount - i2))));
        for (i3 = 5; i3 < 354; ++i3) {
            vMeth1();
            Test.instanceCount += (long)(-35.15F + (i3 * i3));
            i4 += (i3 + i3);
            for (i9 = 1; i9 < 5; ++i9) {
                short s1=24878;
                i10 = s1;
            }
            i4 += i3;
            fArr[i3 + 1] *= f1;
            i4 = -13;
            i2 += i10;
        }
        long meth_res = i2 + i3 + i4 + i9 + i10 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth(int i, int i1) {

        short s=5984;
        double d3=0.29426;
        int i11=56749, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -8);

        i1 -= (int)(((i--) - (i1 = 27581)) - (0.79205 + (i1 + -5)));
        iArr1[(i1 >>> 1) % N] ^= (int)(i - ((s *= (short)lFld) * (0.606F * (lFld - lFld))));
        i -= (int)((lFld + dMeth(i1)) + Test.instanceCount);
        i1 += i;
        d3 = -48978;
        i1 *= i1;
        lFld -= 11652;
        i11 = 1;
        while (++i11 < 392) {
            i1 += i11;
        }
        i1 -= i1;
        vMeth_check_sum += i + i1 + s + Double.doubleToLongBits(d3) + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i12=35, i13=38263, i14=3, i15=88, i16=-6649, i17=38933, iArr[]=new int[N];
        float f2=27.827F;
        double d4=-2.28796;
        boolean b1=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -131);
        FuzzerUtils.init(lArr, 3404100876724508726L);

        Test.instanceCount += ((iArr[(31656 >>> 1) % N]--) - -31985);
        vMeth(i12, 0);
        if (true) {
            for (i13 = 2; i13 < 393; i13++) {
                i15 = 1;
                do {
                    for (i16 = 1; 1 > i16; i16++) {
                        f2 += (i16 - i15);
                        lFld <<= lFld;
                        Test.instanceCount = i17;
                        Test.iArrFld[i13 - 1] = (int)lFld;
                        i17 *= i16;
                        i12 = i17;
                        Test.iArrFld[i16 - 1] >>>= (int)Test.instanceCount;
                        switch ((i15 % 9) + 46) {
                        case 46:
                            lFld += (((i16 * lFld) + Test.instanceCount) - i13);
                            i17 *= (int)d4;
                            i12 = 2015;
                            i17 |= i15;
                        case 47:
                            try {
                                Test.iArrFld[i16] = (i15 / 3930);
                                i14 = (i14 / 53851);
                                iArr[i15 - 1] = (i14 / iArr[i15]);
                            } catch (ArithmeticException a_e) {}
                            i12 >>= (int)Test.instanceCount;
                            Test.iArrFld[i13 - 1] += 14831;
                            lFld += i16;
                            break;
                        case 48:
                            i12 = -148;
                            iArr = iArr;
                            break;
                        case 49:
                        case 50:
                            i17 += i16;
                            break;
                        case 51:
                            i14 = (int)lFld;
                            break;
                        case 52:
                            iArr[i16 - 1] -= i12;
                            if (b1) {
                                i14 = 25201;
                                lArr[i13] = lArr[i15 + 1];
                            } else if (b1) {
                                Test.iArrFld[i15 + 1] >>= (int)-763025239036929716L;
                            } else {
                                Test.iArrFld[i16] = i12;
                            }
                        case 53:
                            Test.instanceCount += i16;
                            break;
                        case 54:
                            lFld <<= 12072L;
                            break;
                        }
                    }
                } while (++i15 < 64);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
