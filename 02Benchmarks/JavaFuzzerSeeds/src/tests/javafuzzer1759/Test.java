package tests.javafuzzer1759;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:02:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-58L;
    public static double dFld=15.67714;
    public static boolean bFld=true;
    public short sArrFld[][]=new short[N][N];

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by1, long l1) {

        int i4=-55, i5=-4, i6=150, i7=-34860, i8=-170, i9=-108, iArr1[]=new int[N];
        double d1=0.119586;
        float f=1.281F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 62612L);
        FuzzerUtils.init(iArr1, -229);

        if (Test.bFld) {
            by1 >>= (byte)i4;
            lArr[(i4 >>> 1) % N] *= Test.instanceCount;
            for (i5 = 1; i5 < 143; ++i5) {
                by1 *= (byte)-62293;
                i6 += (int)Test.dFld;
                for (i7 = 11; i7 > 1; i7--) {
                    iArr1[i5] += (int)Test.instanceCount;
                    for (d1 = 1; d1 < 2; d1++) {
                        Test.instanceCount += (long)d1;
                        f *= -8;
                    }
                    by1 <<= (byte)i8;
                    l1 -= (long)f;
                    i6 -= (int)Test.instanceCount;
                    lArr[i7] -= (long)f;
                }
            }
        } else {
            iArr1[(i9 >>> 1) % N] -= (int)81.918F;
            vMeth_check_sum += by1 + l1 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
                Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
            return;
        }
        vMeth_check_sum += by1 + l1 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i2, byte by, int i3) {

        int i10=133, i11=3, i12=35726, i13=11, i14=114, iArr2[]=new int[N];
        double d2=98.25589;
        float f1=-2.277F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -153L);
        FuzzerUtils.init(iArr2, -3);

        vMeth((byte)(127), Test.instanceCount);
        i3 = i2;
        for (i10 = 2; i10 < 193; ++i10) {
            i11 = i10;
        }
        for (i12 = 8; i12 < 297; i12++) {
            for (d2 = 6; d2 > i12; d2 -= 2) {
                i2 = (int)f1;
                i13 = -11;
                i13 += (int)d2;
                lArr1[(int)(d2 - 1)] ^= i11;
                i11 ^= (int)Test.instanceCount;
                f1 += (float)(d2 - Test.instanceCount);
                i14 += (int)d2;
                i3 += (int)d2;
                iArr2 = iArr2;
            }
        }
        long meth_res = i2 + by + i3 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d2) + i14 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(long l) {

        int i=-65089, i1=7, i15=12, i16=-43202, i17=131, iArr[]=new int[N];
        byte by2=122;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 233);
        FuzzerUtils.init(fArr, 1.249F);

        for (i = 10; i < 245; i++) {
            iArr[i] -= (i1 -= ((--i1) + (i * i1)));
            i1 = (int)((Math.min(13, 25056) + (i1 - -31772)) - fMeth(i1, by2, i));
            try {
                i1 = (i1 / 1031578937);
                i1 = (i % iArr[i]);
                iArr[i] = (25950 / i);
            } catch (ArithmeticException a_e) {}
            iArr[i] += by2;
            i1 += (i * i);
            for (i15 = 7; i15 > 1; i15 -= 2) {
                i17 = i;
                Test.instanceCount %= (i | 1);
                i17 = i;
                iArr[i + 1] += -4;
            }
            switch (((i >>> 1) % 1) + 65) {
            case 65:
                l += (((i * i16) + Test.instanceCount) - i16);
                i1 >>= (int)l;
                fArr[i] -= i17;
                break;
            default:
                Test.instanceCount += (i ^ i1);
            }
        }
        long meth_res = l + i + i1 + by2 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.30696;
        int i18=45826, i19=-123, i20=-30, i21=-23, i22=-7, i23=10, i24=-223, i25=24907, i26=7, i27=3, i28=88, i29=10,
            i30=13, iArr3[]=new int[N];
        float f2=-76.559F;
        short s=16387;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 85L);
        FuzzerUtils.init(iArr3, 14);

        d += iMeth(Test.instanceCount);
        i18 = 1;
        while (++i18 < 268) {
            i19 += i18;
            sArrFld[i18][i18 - 1] |= (short)i19;
        }
        d -= f2;
        for (i20 = 393; i20 > 21; --i20) {
            lArr2[i20 + 1] += -6699;
        }
        i19 = i20;
        switch ((((i21 >>> 1) % 6) * 5) + 4) {
        case 26:
            i21 -= (int)Test.instanceCount;
            for (i22 = 2; i22 < 149; ++i22) {
                f2 -= i21;
                if (Test.bFld) {
                    Test.instanceCount += (i22 * i22);
                }
                i24 = 1;
                do {
                    i25 = 1;
                    while (++i25 < 1) {
                        i21 += (i25 + i21);
                        f2 = i22;
                    }
                    i19 += (int)Test.instanceCount;
                    i26 = 1;
                    while (++i26 < 1) {
                        i21 = -19165;
                    }
                    for (i27 = 1; i27 > 1; i27 -= 2) {
                        d = i23;
                        Test.bFld = Test.bFld;
                        iArr3[i27 - 1] ^= (int)Test.instanceCount;
                        i21 -= (int)Test.instanceCount;
                    }
                    for (i29 = 1; i29 < 1; ++i29) {
                        i28 &= s;
                        iArr3[i29 + 1] = i18;
                        Test.instanceCount += (((i29 * i24) + Test.instanceCount) - Test.instanceCount);
                    }
                } while (++i24 < 171);
            }
            break;
        case 34:
            i28 = i21;
        case 32:
            i19 = (int)2.18753;
            break;
        case 19:
            i19 = i19;
            break;
        case 16:
            i19 += (int)f2;
            break;
        case 11:
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
