package tests.javafuzzer1881;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:16:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-117L;
    public static int iFld=-18153;
    public static boolean bFld=true;
    public static float fFld=-67.440F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8644);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, float f, float f1) {

        int i5=4, i6=9, i7=52, i8=-8, i9=17717, iArr[]=new int[N];
        double d=-57.6490;
        long l=5L;

        FuzzerUtils.init(iArr, -19063);

        for (i5 = 6; i5 < 169; i5++) {
            d -= Test.instanceCount;
            i7 = 1;
            while (++i7 < 10) {
                Test.iFld += (int)Test.instanceCount;
                i6 += (((i7 * f) + Test.instanceCount) - f);
                i6 = i4;
                for (i8 = 1; i8 < 1; ++i8) {
                    f = Test.iFld;
                    l = i8;
                    f1 += i7;
                    iArr[i8 - 1] += i4;
                    if (Test.bFld) continue;
                    i9 = i4;
                    i9 = i7;
                    iArr[i7] += i5;
                }
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 +
            Double.doubleToLongBits(d) + i7 + i8 + i9 + l + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i1, int i2, int i3) {

        byte by=-83;
        int i10=22159, i11=-115, i12=-3, i13=-117, iArr1[]=new int[N];
        double d1=-2.7667;
        short s=19845;
        long lArr[]=new long[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr, -198L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -4);

        Test.iFld *= (int)(217L + ((i3 + -42.901F) * (++Test.instanceCount)));
        by |= by;
        vMeth(13742, Test.fFld, 0.455F);
        lArr[(Test.iFld >>> 1) % N] -= (long)Test.fFld;
        for (i10 = 15; i10 < 332; i10++) {
            bArr[i10 - 1][i10 - 1] = Test.bFld;
            switch ((i10 % 3) + 9) {
            case 9:
                if (true) break;
                switch (((i3 >>> 1) % 6) + 35) {
                case 35:
                    d1 -= Test.instanceCount;
                    i1 *= Test.iFld;
                    for (i12 = 1; i12 < 5; ++i12) {
                        s *= (short)i2;
                    }
                    break;
                case 36:
                    Test.bFld = true;
                    Test.fFld = i11;
                case 37:
                    iArr1[i10] >>= i11;
                    break;
                case 38:
                    Test.iFld *= i13;
                    break;
                case 39:
                    i13 <<= by;
                    break;
                case 40:
                    i11 = 59479;
                    break;
                default:
                    s += (short)(((i10 * Test.instanceCount) + i13) - i1);
                }
                break;
            case 10:
                Test.fFld = (float)-50.51913;
                break;
            case 11:
            default:
                i3 += (int)Test.instanceCount;
            }
        }
        long meth_res = i1 + i2 + i3 + by + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + s +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i) {

        int i14=150, i15=26776, i16=-114, i17=19009;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -23166L);

        Test.instanceCount *= (((++Test.iFld) - Test.iFld) + iMeth1(-7, i, Test.iFld));
        Test.iFld += i;
        i += (int)Test.fFld;
        for (i14 = 2; i14 < 236; ++i14) {
            i16 = 7;
            do {
                i -= i16;
                i15 += i16;
                Test.fFld = i15;
                Test.instanceCount -= (long)124.83801;
                i -= i15;
                i17 = 1;
                while (++i17 < 2) {
                    Test.instanceCount += (i17 * i14);
                    Test.instanceCount = (long)Test.fFld;
                    lArr1[i16 - 1] = i15;
                    Test.fFld -= Test.instanceCount;
                }
            } while ((i16 -= 2) > 0);
        }
        long meth_res = i + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=236, i19=82, i20=-40388, i21=-13, i22=-9, i23=0, i24=-12, i25=194;
        double d2=0.53889;
        float f2=-103.542F, fArr[]=new float[N];
        long lArr2[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(fArr, 12.997F);
        FuzzerUtils.init(lArr2, 7615959351105295550L);
        FuzzerUtils.init(bArr1, false);

        Test.iFld = (iMeth(Test.iFld) - Test.iFld);
        Test.bFld = Test.bFld;
        for (i18 = 6; i18 < 234; i18++) {
            i19 = i19;
            Test.bFld = Test.bFld;
            Test.iFld = (int)102L;
            for (i20 = 6; i20 < 110; ++i20) {
                fArr[i18] += (float)d2;
                for (i22 = 2; i22 > 1; i22 -= 2) {
                    short s1=-8959;
                    Test.iArrFld[i20 - 1] <<= 52252;
                    lArr2[i20 + 1] = -21554;
                    Test.instanceCount = i22;
                    Test.iFld = i20;
                    switch ((i20 % 10) + 23) {
                    case 23:
                        Test.iFld = i20;
                        switch (((Test.iFld >>> 1) % 2) + 14) {
                        case 14:
                            Test.iArrFld = Test.iArrFld;
                            switch ((i18 % 7) + 87) {
                            case 87:
                                bArr1[i18 - 1] = Test.bFld;
                                break;
                            case 88:
                                i21 += i22;
                            case 89:
                                i21 += i20;
                                Test.iArrFld[i18 - 1] = i19;
                            case 90:
                                i23 = 3;
                                i23 = i22;
                                Test.iFld += (i22 + i22);
                            case 91:
                                switch (((i19 >>> 1) % 4) + 100) {
                                case 100:
                                    i21 += (((i22 * Test.instanceCount) + i23) - i24);
                                case 101:
                                    i21 = -8;
                                    s1 += (short)(((i22 * i22) + i21) - Test.fFld);
                                    i19 -= i25;
                                    break;
                                case 102:
                                    Test.fFld = i18;
                                    break;
                                case 103:
                                    Test.iArrFld[i20 + 1] ^= (int)Test.instanceCount;
                                    break;
                                }
                                break;
                            case 92:
                            case 93:
                                Test.bFld = Test.bFld;
                                break;
                            default:
                                i24 = i20;
                            }
                        case 15:
                            i23 |= (int)Test.instanceCount;
                        }
                    case 24:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 25:
                        lArr2[(i18 >>> 1) % N] = -5460;
                        break;
                    case 26:
                        i24 += i22;
                        break;
                    case 27:
                        s1 *= (short)i19;
                        break;
                    case 28:
                        Test.instanceCount += (i22 * i22);
                        break;
                    case 29:
                        f2 -= i18;
                        break;
                    case 30:
                        Test.iArrFld[i20] += (int)Test.instanceCount;
                        break;
                    case 31:
                        d2 = Test.iFld;
                        break;
                    case 32:
                        Test.iArrFld[i18] += i19;
                        break;
                    default:
                        lArr2[i20] = -13;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
