package tests.javafuzzer2829;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:02:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static double dFld=-1.20973;
    public static byte byFld=-93;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=132, i7=13, i8=6, i10=253, i11=30110, i12=-3, i13=169, iArr2[]=new int[N];
        boolean b=false;
        float f2=-122.462F;

        FuzzerUtils.init(iArr2, 12);

        iArr2[(i6 >>> 1) % N] = -5965;
        for (i7 = 6; i7 < 129; ++i7) {
            iArr2[i7 + 1] += -30533;
            for (i10 = 1; i10 < 13; i10 += 2) {
                i6 <<= i11;
                if (i8 != 0) {
                    vMeth1_check_sum += i6 + i7 + i8 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f2) +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                b = false;
                i6 *= -1;
                i8 += (int)Test.instanceCount;
                iArr2[i7 - 1] -= (int)Test.instanceCount;
            }
            i11 |= i10;
            for (i12 = 1; i12 < 13; i12++) {
                i6 = i7;
                iArr2[i7] += (int)Test.instanceCount;
                i11 = (int)f2;
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(float f1, int i1, int i2) {

        int i4=54, i5=2, i14=-4877, i15=1, i16=5, iArr1[]=new int[N];
        float f3=34.748F;

        FuzzerUtils.init(iArr1, 32);

        for (int i3 : iArr1) {
            Test.dFld *= (-(i1 *= (-156 - Math.abs(i1))));
            for (i4 = 1; i4 < 4; ++i4) {
                Test.instanceCount = (-i4);
                iArr1[i4 + 1] = (i3 >>= ((i3 *= i4) >> Math.abs(i1)));
                vMeth1();
                i2 %= (int)(Test.instanceCount | 1);
                i1 += i4;
            }
            for (f3 = 1; f3 < 4; ++f3) {
                i3 ^= i14;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.instanceCount = Test.instanceCount;
                    i14 += (int)f3;
                }
                i5 -= (int)Test.dFld;
                f1 *= i14;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i1 + i2 + i4 + i5 + Float.floatToIntBits(f3) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s, byte by, int i) {

        float f=0.987F, fArr[]=new float[N];
        boolean b1=true;
        int i17=1, i18=-46768, i19=175, i20=7992, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -52317);
        FuzzerUtils.init(fArr, 23.284F);

        f = ((iArr[(i >>> 1) % N]++) + (-(++i)));
        if (b1) {
            fArr[(i >>> 1) % N] += (float)(((i + Test.dFld) - iMeth(f, 1, i)) + -2374203694L);
        }
        for (i17 = 9; i17 < 169; ++i17) {
            i += i17;
            i <<= i18;
            for (i19 = i17; i19 < 10; i19++) {
                i18 += (((i19 * i18) + i20) - Test.instanceCount);
                f -= i20;
                i20 += (int)Test.instanceCount;
            }
            Test.instanceCount = i19;
            i20 = i;
        }
        i20 += -109;
        i18 = by;
        Test.dFld += 3;
        vMeth_check_sum += s + by + i + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        short s1=-16577;
        int i21=172, i22=10, i23=-228, i24=-30, iArr3[]=new int[N], iArr4[]=new int[N];
        float f4=88.58F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1405682988L);
        FuzzerUtils.init(iArr3, 46994);
        FuzzerUtils.init(iArr4, -14);

        vMeth(s1, Test.byFld, i21);
        for (long l : lArr) {
            i21 = i21;
            i21 >>= i21;
            i22 = 1;
            do {
                f4 += i21;
                i21 = s1;
                iArr3[i22] = i22;
                i21 += i22;
                i21 += (((i22 * i22) + s1) - i21);
                for (i23 = 1; i23 < 1; i23++) {
                    f4 *= f4;
                    i24 += i21;
                    i24 += (int)12633L;
                    switch ((i23 % 9) + 59) {
                    case 59:
                        switch (((i22 % 2) * 5) + 82) {
                        case 91:
                            dArrFld[i23 - 1] = i24;
                            if (false) continue;
                            i21 *= (int)l;
                            break;
                        case 90:
                            Test.dFld -= f4;
                            break;
                        }
                        break;
                    case 60:
                    case 61:
                        lArr[i23 + 1] *= i24;
                        i24 = (int)Test.instanceCount;
                        i21 = i24;
                    case 62:
                        i21 = (int)l;
                        i21 += (((i23 * i21) + f4) - i23);
                        break;
                    case 63:
                        i24 = (int)l;
                        iArr3[i23] = (int)l;
                        l -= Test.instanceCount;
                        i24 += (((i23 * Test.instanceCount) + i21) - i21);
                        break;
                    case 64:
                        iArr3 = iArr4;
                        break;
                    case 65:
                        i24 += (int)Test.instanceCount;
                    case 66:
                        f4 = l;
                        break;
                    case 67:
                        try {
                            i24 = (-48752 % i23);
                            i24 = (-60944 % i21);
                            iArr3[i23] = (iArr4[i23] % -1424978398);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            } while (++i22 < 63);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
