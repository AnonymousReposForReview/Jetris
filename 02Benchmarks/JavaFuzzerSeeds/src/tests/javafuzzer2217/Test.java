package tests.javafuzzer2217;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:22:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public float fFld=-1.691F;
    public double dFld=-22.63991;
    public int iFld=4;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i2=-33146, i3=21425, i4=60, i5=-43958, i6=-10;
        short s=24358;
        double d1=1.13263, dArr[]=new double[N];
        float f3=-1.457F;
        boolean b1=false;

        FuzzerUtils.init(dArr, 1.71295);

        for (i2 = 4; i2 < 289; i2++) {
            Test.instanceCount -= s;
            d1 -= Test.instanceCount;
            Test.instanceCount += i2;
            dArr = dArr;
            i3 >>= i3;
            i3 ^= (int)Test.instanceCount;
            f3 = 12012;
            i3 = (int)Test.instanceCount;
            if (b1) continue;
        }
        i4 = 1;
        while (++i4 < 377) {
            for (i5 = 1; i5 < 4; ++i5) {
                i3 += (3 + (i5 * i5));
                f3 += (i5 * i5);
                b1 = b1;
            }
        }
        long meth_res = i2 + i3 + s + Double.doubleToLongBits(d1) + Float.floatToIntBits(f3) + (b1 ? 1 : 0) + i4 + i5 +
            i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(float f2) {

        int i7=52110, i8=-7, i9=-16106, i10=-5, i11=-3, i12=34422, i13=-2, iArr1[]=new int[N];
        byte by1=-63;
        boolean b2=true;

        FuzzerUtils.init(iArr1, 7);

        dMeth();
        for (i7 = 314; i7 > 11; i7--) {
            double d2=-23.39422;
            i8 = (int)d2;
            i8 = (int)Test.instanceCount;
            for (i9 = i7; i9 < 5; i9++) {
                if (i8 != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + by1 + (b2 ? 1 : 0) + i12
                        + i13 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
            }
            i11 = 1;
            while (++i11 < 5) {
                if (b2) {
                    i10 = by1;
                }
                iArr1[i7] *= i9;
                d2 -= i9;
                i8 ^= 52093;
            }
            for (i12 = 1; i12 < 5; ++i12) {
                i10 ^= i8;
                i10 += (((i12 * i7) + i7) - i10);
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + by1 + (b2 ? 1 : 0) + i12 + i13 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {

        short s1=-29092;
        int i14=-6, i15=-65259, i16=176;
        boolean b3=false;
        byte by2=-124;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6L);

        vMeth1(fFld);
        dFld += s1;
        iFld = iFld;
        lArr[(iFld >>> 1) % N] *= (long)fFld;
        dFld = -200L;
        switch ((((iFld >>> 1) % 3) * 5) + 1) {
        case 4:
            for (i14 = 151; i14 > 5; i14--) {
                iFld = (int)fFld;
                i16 = 1;
                while (++i16 < 11) {
                    i15 = (int)Test.instanceCount;
                    if (b3) {
                        if (b3) break;
                        Test.iArrFld[i16 - 1] |= -25446;
                    }
                    Test.instanceCount -= i14;
                    Test.instanceCount += (4L + (i16 * i16));
                }
            }
        case 15:
            iFld = i16;
        case 8:
            Test.instanceCount = by2;
            break;
        default:
            fArrFld = FuzzerUtils.float1array(N, (float)0.318F);
        }
        vMeth_check_sum += s1 + i14 + i15 + i16 + (b3 ? 1 : 0) + by2 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=-2, i17=58887, i18=-133, i19=2, i20=-31, i21=64, i22=28290, i23=-8, iArr[]=new int[N];
        float f=0.592F, fArr[]=new float[N];
        byte by=-63;
        boolean b=true;
        double d=1.31728;

        FuzzerUtils.init(fArr, 0.338F);
        FuzzerUtils.init(iArr, -8);

        i += (int)(((i - i) - (i + 0.774F)) * Short.reverseBytes((short)(-949659047841162412L + i)));
        f *= by;
        for (float f1 : fArr) {
            b = (!((i--) != iArr[(5669 >>> 1) % N]));
            i -= (i--);
        }
        for (d = 8; 136 > d; ++d) {
            vMeth();
            dFld += i;
            i1 += (int)(d * d);
            for (i17 = 3; i17 < 196; i17++) {
                for (i19 = 1; i19 < 2; ++i19) {
                    i18 += (int)104.551F;
                    i += (i19 | i20);
                }
                i21 = 1;
                do {
                    i1 += (-12 + (i21 * i21));
                    Test.instanceCount *= i;
                    iArr[i17 + 1] += (int)Test.instanceCount;
                    Test.iArrFld[i17] *= i;
                } while (++i21 < 2);
                b = b;
                f *= i17;
                for (i22 = 1; i22 < 2; i22++) {
                    f *= Test.instanceCount;
                    switch ((int)(((d % 4) * 5) + 89)) {
                    case 104:
                        i20 += (i22 | i21);
                        i20 <<= i21;
                        fFld -= iFld;
                        i1 += (i22 * i22);
                        break;
                    case 98:
                        i18 *= i18;
                        i += (int)dFld;
                        i23 += (i22 | Test.instanceCount);
                        break;
                    case 91:
                        try {
                            iFld = (Test.iArrFld[(int)(d)] % 1847167912);
                            i18 = (-85 / iFld);
                            i23 = (i18 % iFld);
                        } catch (ArithmeticException a_e) {}
                    case 99:
                        dFld *= dFld;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
