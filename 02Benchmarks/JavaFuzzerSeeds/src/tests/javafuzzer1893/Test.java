package tests.javafuzzer1893;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1124015212L;
    public static int iFld=1;
    public static float fFld=120.346F;
    public static double dFld=-102.42218;
    public static byte byFld=7;
    public short sFld=-3238;
    public static volatile int iArrFld[]=new int[N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=-145;

        i3 = 0;
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        double d=81.27264;
        int i4=42132, i5=51, i6=12, i7=-181;
        short s=-21483;
        boolean b=true, bArr[]=new boolean[N];
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)113);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 4784428711451916464L);

        d = (iMeth() + Test.iFld);
        for (i4 = 1; 332 > i4; i4++) {
            switch ((((i4 >>> 1) % 6) * 5) + 96) {
            case 108:
                for (i6 = 1; i6 < 5; ++i6) {
                    i7 -= s;
                    byArr[i6 + 1] -= (byte)d;
                    Test.iFld *= i5;
                    Test.iArrFld[i4 - 1] = i7;
                    i5 += i6;
                    Test.iArrFld[i6] -= i7;
                    if (b) continue;
                    bArr[i6] = b;
                }
                d += i4;
                i5 += i4;
                break;
            case 115:
                Test.fFld *= Test.fFld;
                break;
            case 122:
                i5 /= (int)(i4 | 1);
            case 110:
                lArr = FuzzerUtils.long2array(N, (long)5L);
            case 102:
                Test.fFld *= i7;
                break;
            case 118:
                i7 += (int)Test.instanceCount;
                break;
            default:
                Test.fFld += (float)d;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + s + (b ? 1 : 0) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(byte by, int i, long l) {

        int i1=19458, i2=-71, i8=4, i9=-36506, i10=9, i11=96, i12=0;
        long l1=-54L;

        for (i1 = 286; 11 < i1; i1 -= 2) {
            vMeth1();
            l1 = 1;
            while (++l1 < 11) {
                Test.iFld += (int)(((l1 * l1) + Test.fFld) - i2);
                for (i8 = (int)(l1); i8 < 1; ++i8) {
                    i *= i;
                }
            }
            i += (i1 * Test.iFld);
            Test.iArrFld[i1 - 1] = i2;
            by *= (byte)44391;
        }
        i10 = 1;
        do {
            for (i11 = 1; i11 < 6; i11 += 2) {
                i2 += (i11 * i11);
                i2 -= i10;
                i = (int)Test.fFld;
                Test.dFld = l;
            }
        } while (++i10 < 253);
        vMeth_check_sum += by + i + l + i1 + i2 + l1 + i8 + i9 + i10 + i11 + i12;
    }

    public void mainTest(String[] strArr1) {

        int i13=-5, i14=-106, i16=-64, i17=38499, i18=-11, i19=3, i20=4;
        boolean b1=true;
        long l2=-4015647366L, l3=1971908267L, l4=46L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 42.864F);
        FuzzerUtils.init(lArr1, 243L);

        vMeth(Test.byFld, Test.iFld, Test.instanceCount);
        try {
            for (i13 = 10; i13 < 160; i13++) {
                b1 = b1;
                switch (((i13 % 3) * 5) + 25) {
                case 31:
                    iArrFld1 = iArrFld1;
                    fArr[i13 + 1] *= i13;
                    break;
                case 37:
                    Test.fFld = -84;
                    Test.iFld *= Test.iFld;
                    break;
                case 35:
                    i14 = i13;
                    if (b1) break;
                    for (i16 = 10; 167 > i16; i16++) {
                        switch (((i16 % 7) * 5) + 87) {
                        case 105:
                            l2 = i17;
                        case 91:
                            i14 += (i16 * i16);
                        case 119:
                            Test.fFld += i13;
                            for (l3 = 1; l3 < 2; ++l3) {
                                l2 += l3;
                                i18 += (int)(((l3 * i14) + i13) - i16);
                                Test.fFld = i14;
                                i17 = i17;
                            }
                            lArr1[i16 - 1] = i13;
                        case 115:
                            if (b1) {
                                for (i19 = 1; i19 < 2; i19++) {
                                    Test.instanceCount = (long)Test.fFld;
                                    Test.fFld += i19;
                                    l2 >>= i18;
                                    i20 += (int)l4;
                                    lArr1[i16 - 1] = l2;
                                    Test.fFld = 184;
                                }
                            }
                        case 120:
                            sFld -= (short)i18;
                        case 92:
                            l2 -= i17;
                            break;
                        case 107:
                            l4 = Test.iFld;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            Test.fFld *= i14;
        }
        finally {
            i18 -= (int)Test.dFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
