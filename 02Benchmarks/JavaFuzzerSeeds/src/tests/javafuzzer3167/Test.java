package tests.javafuzzer3167;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:08:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static int iFld=-218;
    public static boolean bFld=true;
    public static long lFld=5632031241266445011L;
    public byte byFld=-118;
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i10=-156, i11=6, i12=-134, i13=41120, i14=102, i15=113;
        float f5=-2.33F;
        short s=-9123;
        byte by=-33;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, -53109L);

        for (i10 = 16; i10 < 324; i10++) {
            lArr2[i10][i10] -= i11;
            i12 = 1;
            while (++i12 < 5) {
                for (i13 = 1; 1 > i13; ++i13) {
                    i11 += (((i13 * i14) + i15) - f5);
                    Test.instanceCount += s;
                    if (Test.bFld) break;
                    i15 += i13;
                    try {
                        i15 = (-82 / i10);
                        i14 = (i13 / -1155584581);
                        i15 = (-21838 % i15);
                    } catch (ArithmeticException a_e) {}
                    switch (((i13 % 2) * 5) + 99) {
                    case 107:
                        Test.iFld += i13;
                        lArr2[i13][i12 - 1] -= i15;
                        i11 |= (int)Test.instanceCount;
                        break;
                    case 105:
                        Test.instanceCount += (((i13 * by) + i11) - f5);
                        break;
                    default:
                        try {
                            i14 = (-4451 % Test.iArrFld[i13 - 1]);
                            i11 = (4331 / i13);
                            i14 = (214 % i13);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        vMeth1_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f5) + s + by +
            FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(float f2, float f3, float f4) {

        float f6=-38.76F;
        long l1=-26222L, lArr1[]=new long[N];
        int i16=15811, i17=157, i18=45589;
        boolean b1=false;

        FuzzerUtils.init(lArr1, 187L);

        lArr1[(Test.iFld >>> 1) % N] = Test.iFld;
        vMeth1();
        Test.iFld <<= (int)Test.instanceCount;
        f6 = 1;
        while ((f6 += 3) < 257) {
            Test.iFld *= Test.iFld;
            for (l1 = 1; l1 < 18; ++l1) {
                i16 += (int)l1;
                for (i17 = 1; i17 < 2; i17++) {
                    i16 *= 43683;
                    Test.bFld = b1;
                    if (i16 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f2) + Float.floatToIntBits(f3) +
                            Float.floatToIntBits(f4) + Float.floatToIntBits(f6) + l1 + i16 + i17 + i18 + (b1 ? 1 : 0) +
                            FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    i18 += (i17 ^ i17);
                    Test.iFld += (i17 | l1);
                }
            }
            Test.bFld = b1;
            if (Test.bFld) break;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) +
            Float.floatToIntBits(f6) + l1 + i16 + i17 + i18 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
    }

    public int iMeth(int i4, int i5, float f1) {

        int i6=195, i7=-58776, i8=-77, i9=-11, i19=4362, i20=-36155, iArr[]=new int[N];
        double d1=-2.100479;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 53171);
        FuzzerUtils.init(byArr, (byte)108);

        for (i6 = 1; i6 < 129; ++i6) {
            for (i8 = 1; i8 < 12; ++i8) {
                iArr[i8 - 1] >>= i6;
                vMeth(f1, 3.138F, f1);
                byArr[i8] = (byte)97.313F;
                Test.instanceCount = 5726421504871548027L;
                i5 += (i8 * i8);
                i19 = 1;
                while (++i19 < 2) {
                    i20 = Test.iFld;
                    Test.lFld *= i8;
                    Test.iFld = -12;
                    i5 *= (int)-5.483F;
                    byFld += (byte)i5;
                    Test.instanceCount = (long)d1;
                    i9 *= i5;
                }
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i19 + i20 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=1.35387, d2=-1.96393;
        int i=-59680, i1=50310, i2=44078, i3=-27459, i21=229, i22=5, i23=-7;
        boolean b=true;
        float f=23.694F;
        long l=-3815316101L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -43L);

        d = 357;
        while (--d > 0) {
            for (i = 1; i < 71; i += 3) {
                if (b) break;
                for (i2 = 1; 4 > i2; ++i2) {
                    i3 = (int)((-167L * f) + (lArr[(int)(d + 1)]--));
                }
                f += 13L;
                l = 1;
                while (++l < 4) {
                    dArrFld[(int)(l)] += i2;
                    i1 >>= (iMeth(i1, i2, f) + i);
                    f -= i2;
                    i3 *= (int)l;
                    Test.iFld += (int)(l | l);
                    d2 -= i1;
                    Test.iFld *= (int)l;
                    Test.iFld += (int)l;
                    Test.iArrFld[(int)(l + 1)] *= (int)Test.lFld;
                    i1 = (int)Test.lFld;
                }
                Test.iArrFld = FuzzerUtils.int1array(N, (int)116);
                i1 = (int)Test.instanceCount;
            }
            i21 = 71;
            do {
                i3 += (((i21 * i) + i2) - f);
                for (i22 = 1; i22 < 3; ++i22) {
                    Test.lFld -= i1;
                    i23 &= i;
                    i3 = -204;
                    i1 += i22;
                    d2 = Test.instanceCount;
                    d2 += i2;
                }
                Test.iArrFld[i21 + 1] = 232;
                try {
                    Test.iFld = (Test.iArrFld[i21] % i23);
                    Test.iArrFld[(int)(d + 1)] = (i1 % i22);
                    i3 = (i1 / -230);
                } catch (ArithmeticException a_e) {}
            } while ((i21 -= 3) > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
