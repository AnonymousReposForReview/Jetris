package tests.javafuzzer1692;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:44:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static float fFld=0.511F;
    public static double dFld=0.4041;
    public static boolean bFld=false;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(byte by, int i11) {

        int i12=-17234, i13=-152, i14=-2, i15=-9, i16=32, iArr1[]=new int[N];
        double d=61.118180;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -2536);
        FuzzerUtils.init(lArr, 28472L);

        iArr1[(i11 >>> 1) % N] = i11;
        i11 <<= (int)Test.instanceCount;
        lArr[(i11 >>> 1) % N][(i11 >>> 1) % N] -= i11;
        i11 <<= i11;
        Test.dFld -= i11;
        for (i12 = 4; 349 > i12; ++i12) {
            for (i14 = 1; i14 < 5; ++i14) {
                for (d = 1; 2 > d; d += 3) {
                    i13 += i11;
                    i13 -= i15;
                    Test.instanceCount += i12;
                    i13 += (int)(d - by);
                    i16 += (int)Test.fFld;
                    i16 += (int)((long)d | Test.instanceCount);
                    i13 += (int)d;
                }
            }
        }
        long meth_res = by + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) + i16 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l2, int i4) {

        int i5=6, i6=13, i7=-1256, i8=14, i9=10, i10=8, i17=42415, i18=-150, i19=-145, i20=9, iArr2[][]=new int[N][N];
        boolean b=false;
        byte by1=-5;
        short s=9155;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -62585);
        FuzzerUtils.init(dArr, 1.65884);

        for (i5 = 4; i5 < 191; ++i5) {
            for (i7 = i5; i7 < 9; i7++) {
                for (i9 = i5; 1 > i9; ++i9) {
                    if (b) break;
                    i8 = (int)(iMeth2(by1, 16643) - 41.220F);
                    Test.instanceCount |= i10;
                    Test.fFld -= i9;
                }
            }
            Test.dFld += l2;
            for (i17 = 1; i17 < 9; i17 += 2) {
                iArr2[i17][i17 - 1] -= i18;
                Test.instanceCount = s;
                i18 += (i17 + Test.fFld);
                for (i19 = 1; i19 < 3; i19++) {
                    Test.dFld *= -58464;
                    dArr[i5 - 1] += Test.instanceCount;
                }
            }
        }
        long meth_res = l2 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + by1 + i17 + i18 + s + i19 + i20 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(long l, long l1, int i1) {

        int i2=-34571, i3=-12, i21=-12, i22=-135, i23=-4822, i24=10, i25=-13325;
        byte by2=12;
        double dArr1[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr1, 36.19261);
        FuzzerUtils.init(bArr, false);

        for (i2 = 5; i2 < 230; i2++) {
            Test.fFld *= (--Test.fFld);
            i1 *= Short.reverseBytes((short)(iMeth1(Test.instanceCount, i1) + i3));
            if (Test.bFld) {
                for (i21 = 1; i21 < 7; ++i21) {
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.dFld -= by2;
                        l1 -= (long)1.632F;
                        l += (((i23 * i2) + Test.fFld) - i21);
                        Test.fFld = i3;
                        if (Test.bFld) {
                            Test.dFld += 13;
                            i25 = -28880;
                            dArr1[i21] -= i25;
                        } else if (Test.bFld) {
                            if (Test.bFld) continue;
                        } else if (true) {
                            if (Test.bFld) continue;
                        } else {
                            bArr[i21 + 1] = Test.bFld;
                        }
                    }
                }
            } else {
                if (Test.bFld) break;
            }
        }
        long meth_res = l + l1 + i1 + i2 + i3 + i21 + i22 + i23 + i24 + by2 + i25 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i26=-34090, i27=-24, i28=33176, i29=13, i30=-9, i31=14, i32=35000, i33=10, iArr[]=new int[N];
        short s1=-1569;
        double d1=-1.17261;
        float f=112.1004F;

        FuzzerUtils.init(iArr, -6);

        i -= (i * (--iArr[(i >>> 1) % N]));
        i -= (int)(Test.fFld + (i * (i + -201L)));
        lArrFld[(i >>> 1) % N] *= iMeth(-34228168L, Test.instanceCount, i);
        i = -40161;
        i = i;
        i = i;
        Test.instanceCount += -25268;
        for (i26 = 9; i26 < 159; ++i26) {
            i27 = (int)-13079L;
            i27 *= (int)Test.instanceCount;
            i *= s1;
            i = (int)Test.instanceCount;
            if (Test.bFld) break;
            i -= 5;
            i27 >>>= i26;
            for (i28 = i26; i28 < 167; i28 += 2) {
                i29 *= (int)Test.instanceCount;
            }
        }
        for (i30 = 2; i30 < 275; i30++) {
            if (Test.bFld) {
                Test.dFld -= i26;
                for (d1 = 92; d1 > 3; d1--) {
                    i = (int)8L;
                    Test.fFld = i28;
                    s1 += (short)(d1 * d1);
                    i31 = i31;
                }
                i31 = i30;
            }
            for (f = 92; f > 1; --f) {
                Test.instanceCount = i;
                i29 *= s1;
                Test.instanceCount = Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
