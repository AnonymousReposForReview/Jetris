package tests.javafuzzer2143;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:22:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-127L;
    public static double dFld=50.99555;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.37616);
        FuzzerUtils.init(Test.fArrFld, 2.315F);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i9, float f1) {

        double d1=-47.124133;
        int i10=-21219, i11=43566, iArr1[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 92);

        l %= (i9 | 1);
        d1 = 1;
        do {
            iArr1[(int)(d1 - 1)][(int)(d1 - 1)] <<= (int)Test.instanceCount;
            iArr1[(int)(d1)] = iArr1[(int)(d1)];
            i10 = 1;
            while (++i10 < 13) {
                i11 = 1;
                while (++i11 < 1) {
                    f1 += i11;
                    Test.instanceCount |= Test.instanceCount;
                    i9 -= -9;
                    iArr1[(int)(d1 - 1)][(int)(d1)] = i11;
                    i9 = 241;
                    i9 += (((i11 * i10) + i9) - l);
                    if (b) continue;
                    i9 = i9;
                    i9 += (((i11 * i9) + i10) - f1);
                }
            }
        } while (++d1 < 122);
        long meth_res = l + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i10 + i11 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i5=0, i6=4, i7=-2, i8=3, i12=-39249, i13=192, iArr2[]=new int[N];
        float f=-15.216F;
        byte by=66;

        FuzzerUtils.init(iArr2, -146);

        for (i5 = 3; i5 < 383; ++i5) {
            i6 = i6;
            for (i7 = i5; 4 > i7; ++i7) {
                i6 = (int)(-(2.4F * Math.min(-25085, i7)));
                f *= (float)((++Test.dArrFld[i7 - 1]) - iMeth(Test.instanceCount, i8, f));
                i8 *= i6;
                i6 = i6;
                i8 <<= i7;
                Test.instanceCount -= i8;
                iArr2[i5 - 1] *= -151;
                for (i12 = 1; i12 < 1; ++i12) {
                    Test.instanceCount += Test.instanceCount;
                    i6 += (((i12 * i13) + i8) - i7);
                    i8 = i7;
                }
                by += (byte)i7;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i12 + i13 + by +
            FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(int i1, int i2) {

        int i3=5, i4=6374, i15=-9173, i16=-189, i17=175, i18=-5110, iArr3[]=new int[N];
        float f2=-37.282F;
        byte by1=-82;
        double d2=0.24157;
        short s=-1198;

        FuzzerUtils.init(iArr3, 0);

        for (i3 = 8; i3 < 182; i3++) {
            vMeth(-2.129075);
            Test.fArrFld[i3 + 1][i3] /= ((long)(f2) | 1);
            by1 = (byte)i3;
        }
        for (int i14 : iArr3) {
            boolean b1=false;
            i2 = 12;
            for (i15 = 4; i15 > 1; i15 -= 3) {
                Test.dFld *= d2;
            }
            if (b1) {
                for (i17 = 1; i17 < 4; ++i17) {
                    s = (short)i18;
                    i14 += (i17 | i4);
                    i2 = i18;
                    i16 = i15;
                    i1 -= (int)-32292L;
                }
            } else if (b1) {
                Test.instanceCount = i3;
            } else if (b1) {
                i1 -= (int)f2;
            } else {
                Test.instanceCount = i16;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + by1 + i15 + i16 + Double.doubleToLongBits(d2) +
            i17 + i18 + s + FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=211, i19=13, i20=64815, i21=5, i22=209, i23=-52771, i24=183, i25=-54, i26=9631, iArr[]=new int[N],
            iArr4[][]=new int[N][N];
        float f3=0.831F;
        long l1=6469694313140106559L;
        boolean b2=true;
        double d3=-1.10565;
        short s1=11492, sArr[]=new short[N];

        FuzzerUtils.init(iArr, -38);
        FuzzerUtils.init(iArr4, 13);
        FuzzerUtils.init(sArr, (short)-5581);

        switch ((((++i) >>> 1) % 6) + 43) {
        case 43:
            iArr[(22969 >>> 1) % N] ^= Math.max(Math.min(Integer.reverseBytes(i), (int)(Test.instanceCount * i)),
                (int)((i + i) + fMeth(26818, -34849)));
            i <<= i19;
        case 44:
            for (i20 = 7; 268 > i20; i20++) {
                byte by2=44;
                iArr4[i20][i20] += (int)Test.dFld;
                f3 = by2;
                f3 *= i19;
                if (true) continue;
                Test.instanceCount = Test.instanceCount;
                i21 <<= i20;
                for (l1 = 96; i20 < l1; l1 -= 2) {
                    i23 = 1;
                    while ((i23 += 2) < 1) {
                        i19 <<= i19;
                        i19 = i20;
                        by2 += (byte)f3;
                        Test.instanceCount = i21;
                        b2 = b2;
                    }
                    b2 = b2;
                    sArr[i20] = (short)i23;
                    Test.fArrFld[(int)(l1 + 1)][(int)(l1)] += (float)Test.dFld;
                    i19 -= i19;
                    i22 <<= i21;
                    for (d3 = 1; d3 < 1; d3++) {
                        try {
                            i24 = (-139683392 % i);
                            i19 = (iArr[(int)(l1)] % 80);
                            i24 = (i20 % 30170);
                        } catch (ArithmeticException a_e) {}
                        iArr[(int)(l1 - 1)] += i23;
                        i21 = s1;
                        i19 -= (int)l1;
                    }
                    for (i25 = 1; i25 > 1; i25 -= 2) {
                        Test.dFld *= i25;
                        f3 = i19;
                    }
                }
            }
        case 45:
            Test.dFld = 722179827L;
        case 46:
            f3 += i20;
        case 47:
            i19 += -27665;
            break;
        case 48:
            i = i19;
            break;
        default:
            iArr[(-2281 >>> 1) % N] = i25;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
