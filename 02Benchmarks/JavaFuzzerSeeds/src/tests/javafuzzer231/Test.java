package tests.javafuzzer231;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:35:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-31361L;
    public static double dFld=-66.52575;
    public static boolean bFld=false;
    public byte byFld=-61;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
        FuzzerUtils.init(Test.lArrFld, 4364818391336333249L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5) {

        int i6=6285, i7=13, i8=14, i9=-7;
        float f=0.951F, f1=0.327F;

        i6 = 1;
        while (++i6 < 124) {
            for (i7 = 1; i7 < 13; i7++) {
                i5 += (int)(-1056419225L + (i7 * i7));
                i8 = (int)Test.instanceCount;
                f = 1;
                do {
                    i5 = i9;
                    Test.instanceCount ^= Test.instanceCount;
                    Test.iArrFld[(int)(f)] += i5;
                    Test.dFld = i8;
                    i5 -= (int)Test.dFld;
                    i9 *= i6;
                    if (Test.bFld) {
                        f1 *= -2511;
                        f1 *= i4;
                        i9 = i8;
                    } else {
                        i8 = i7;
                    }
                } while (++f < 2);
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + Float.floatToIntBits(f1);
    }

    public static void vMeth(double d1, long l, int i3) {

        int i10=-23904, i11=199, i12=-9, i13=-198;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -17557L);

        vMeth1(-8, i3);
        for (i10 = 6; i10 < 398; ++i10) {
            i11 -= i3;
            i11 += i10;
            bArr[i10 - 1] = Test.bFld;
            i3 = -8;
            Test.iArrFld[i10 + 1] = (int)l;
            Test.instanceCount *= l;
        }
        for (i12 = 10; i12 < 370; ++i12) {
            if (Test.bFld) {
                Test.instanceCount = i13;
            } else {
                Test.iArrFld[i12] = i11;
                lArr[i12] -= i3;
                d1 -= i3;
                Test.instanceCount += i12;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + l + i3 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth(int i1, int i2) {

        boolean b=false;
        double d=77.30730;
        int i14=161, i15=-64016, i16=-156, i17=-13211;

        b = (Math.min(i2, (int)(i2 - Test.instanceCount)) > (--d));
        vMeth(-110.80843, Test.instanceCount, i2);
        for (i14 = 3; i14 < 397; i14++) {
            Test.iArrFld = Test.iArrFld;
            Test.lArrFld = FuzzerUtils.long1array(N, (long)3770416853257787142L);
            for (i16 = 4; i16 > 1; i16--) {
                Test.instanceCount = i16;
                Test.iArrFld[i14 + 1] -= (int)-1044L;
                Test.instanceCount -= i16;
                Test.instanceCount <<= 143;
                if (Test.bFld) continue;
                Test.instanceCount += (((i16 * i16) + i17) - i17);
                Test.iArrFld[i14 - 1] = i14;
                i2 *= 182;
                i17 = i14;
            }
        }
        long meth_res = i1 + i2 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i18=120, i19=-5, i20=-3, i21=-51761, i22=12, i23=116, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -9);

        i = 1;
        while ((i += 3) < 303) {
            iArr[i + 1] ^= (int)((i - dMeth(i, 92)) - Test.dFld);
            i18 *= (int)Test.dFld;
            i18 <<= i;
        }
        i18 = i18;
        i18 = i18;
        i18 = 0;
        Test.instanceCount *= i18;
        Test.lArrFld[(i >>> 1) % N] = i18;
        for (i19 = 7; 391 > i19; i19++) {
            float f2=2.347F;
            fArrFld = fArrFld;
            if (Test.bFld) {
                i20 &= (int)Test.instanceCount;
                f2 += -83.501F;
                Test.instanceCount += i18;
            } else {
                i20 = (int)f2;
            }
            switch ((i19 % 10) + 126) {
            case 126:
                for (i21 = 66; i21 > 4; i21 -= 3) {
                    if (Test.bFld) break;
                    Test.iArrFld = iArr;
                    if (Test.bFld) break;
                    i20 *= i;
                    i23 = 4;
                    do {
                        i18 = i23;
                        Test.dFld *= i21;
                        Test.iArrFld[i19] -= i23;
                        i22 += i18;
                        Test.instanceCount = i19;
                        Test.instanceCount -= byFld;
                    } while (--i23 > 0);
                    i20 *= (int)f2;
                }
            case 127:
                i22 -= (int)Test.instanceCount;
                break;
            case 128:
                i20 -= i22;
                break;
            case 129:
                i22 += i19;
                break;
            case 130:
                i20 <<= i22;
                break;
            case 131:
                f2 -= i;
                break;
            case 132:
                i18 >>= (int)Test.instanceCount;
            case 133:
                Test.dFld %= (i18 | 1);
                break;
            case 134:
                i20 = (int)-12.80843;
                break;
            case 135:
                Test.dFld = f2;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
