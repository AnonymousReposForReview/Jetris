package tests.javafuzzer2452;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:50:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=926919967467957832L;
    public static volatile int iFld=223;
    public static double dFld=52.93224;
    public static boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(float f, int i2, long l) {


        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i2 + l;
    }

    public static void vMeth(int i7, int i8) {

        float f3=82.310F, fArr1[]=new float[N];
        int i9=-8, i10=-5, i11=60113, i12=9;
        short s1=-14454;
        double d2=1.117269;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 0.668F);
        FuzzerUtils.init(lArr, -17739L);

        fArr1[(86 >>> 1) % N] += i8;
        Test.iFld += Test.iFld;
        f3 /= (i7 | 1);
        f3 += i8;
        i7 >>= i7;
        i9 = 281;
        while ((i9 -= 2) > 0) {
            for (i10 = 1; 11 > i10; i10 += 2) {
                Test.instanceCount = s1;
                Test.instanceCount *= i9;
                f3 -= f3;
                for (d2 = 1; 3 > d2; ++d2) {
                    Test.iArrFld[i10] >>= i12;
                    lArr = lArr;
                    Test.iFld += (int)(((d2 * i7) + Test.instanceCount) - i7);
                    i11 = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + Float.floatToIntBits(f3) + i9 + i10 + i11 + s1 + Double.doubleToLongBits(d2) + i12
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(double d1) {

        int i5=-104, i6=-205, i13=-25, i14=6, i15=36476, i16=24914;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1878211027L);

        Test.instanceCount <<= Math.abs(Test.iFld + Test.iFld);
        for (i5 = 2; 285 > i5; i5++) {
            vMeth(-50264, Test.iFld);
            i6 >>= (int)Test.instanceCount;
            lArr1 = FuzzerUtils.long1array(N, (long)64L);
            i6 += (int)Test.instanceCount;
            for (i13 = 1; i13 < 6; i13++) {
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.iArrFld[i13 - 1] &= i6;
                    Test.iArrFld[i13 + 1] = i5;
                    Test.instanceCount &= 36525;
                    i6 += (((i15 * Test.instanceCount) + i14) - Test.instanceCount);
                    i6 -= (int)-11.84535;
                    Test.iArrFld[i5 - 1] = -154;
                }
                i14 = i6;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i5 + i6 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f2, int i3, int i4) {

        int i17=-196, i18=-7, i19=-14, i20=48139, i21=1;
        boolean b=true;
        double d3=-1.2025;
        byte by=-93;

        i3 = (int)((Math.max(i4, i3) * lMeth(Test.dFld)) - Test.iFld);
        for (i17 = 2; 132 > i17; ++i17) {
            if (b) break;
            for (d3 = i17; d3 < 12; ++d3) {
                for (i20 = 1; 1 > i20; ++i20) {
                    Test.iArrFld[(int)(d3 + 1)] = i19;
                    if (true) break;
                }
                by += (byte)((long)d3 ^ i3);
                by ^= (byte)i19;
            }
            Test.iArrFld = Test.iArrFld;
            Test.instanceCount -= i19;
            if (i17 != 0) {
            }
            Test.iArrFld[i17 + 1] *= (int)Test.instanceCount;
            Test.iArrFld[i17] = i19;
            i21 = 117;
        }
        long meth_res = Float.floatToIntBits(f2) + i3 + i4 + i17 + i18 + (b ? 1 : 0) + Double.doubleToLongBits(d3) +
            i19 + i20 + i21 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=60452, i1=-25436, i22=-53667, i23=19990, i24=6;
        double d=75.85665;
        float f1=0.643F, f4=0.598F, fArr[]=new float[N];
        byte by1=102;
        long l1=6493361557196855355L, lArr2[][]=new long[N][N];

        FuzzerUtils.init(fArr, -8.605F);
        FuzzerUtils.init(lArr2, 2086225313L);

        switch (((i >>> 1) % 2) + 20) {
        case 20:
        case 21:
            for (d = 5; d < 264; ++d) {
                short s=-20675;
                i1 += (int)(((d * i1) + s) - i1);
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth((float)((fArr[(int)(d)] + (-2.59546 - (d
                    + i1))) - Math.abs((int)(Test.instanceCount - i1))), i--, Test.instanceCount);
                i1 += (int)(-33198 + (-(Test.instanceCount + i1)));
                f1 = (Test.instanceCount--);
                iMeth(f1, 63, 12);
            }
            break;
        }
        for (i22 = 21; i22 < 349; i22++) {
            by1 += (byte)(i22 + f1);
            Test.iFld += (i22 * i22);
            Test.instanceCount += (i22 * Test.instanceCount);
            for (l1 = 4; 77 > l1; l1++) {
                i1 += (int)(l1 + Test.iFld);
                if (Test.bFld) {
                    f4 = 2;
                    do {
                        Test.dFld = -144;
                        i += (int)(((f4 * f1) + i) - i23);
                        f1 = Test.iFld;
                        i1 = i23;
                        i1 += i23;
                        lArr2[(i1 >>> 1) % N][i22 - 1] &= i23;
                        Test.iArrFld[(int)(l1)] = (int)f1;
                        f1 -= i22;
                        i23 = i;
                    } while (--f4 > 0);
                    if (Test.bFld) {
                        Test.iFld -= i1;
                    } else {
                        switch (((i24 >>> 1) % 2) + 122) {
                        case 122:
                            f1 += l1;
                            i *= i;
                            i *= i1;
                            break;
                        case 123:
                            i24 += i1;
                            break;
                        default:
                            Test.dFld -= i1;
                        }
                    }
                } else if (Test.bFld) {
                    Test.iFld = 10;
                } else if (Test.bFld) {
                    i *= i22;
                } else {
                    i23 -= (int)14L;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
