package tests.javafuzzer941;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:50:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static short sFld=-32727;
    public static byte byFld=-25;
    public static float fFld=0.285F;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -58L);
        FuzzerUtils.init(Test.dArrFld, -1.7313);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i3, int i4) {

        int i5=10, i6=-211, i7=4, i8=-220, iArr1[]=new int[N];
        long l2=-3997575314L;
        boolean b=true;
        float f=1.51F;

        FuzzerUtils.init(iArr1, 14);

        for (i5 = 1; i5 < 329; ++i5) {
            i6 += (i5 * i5);
            i4 += i5;
            i3 = (int)Test.instanceCount;
            Test.lArrFld = Test.lArrFld;
            for (l2 = 1; l2 < 5; ++l2) {
                Test.instanceCount += (((l2 * i3) + i5) - Test.sFld);
                if (b) continue;
            }
        }
        i8 = 1;
        while (++i8 < 202) {
            iArr1[i8] = i7;
            b = b;
            Test.byFld *= Test.byFld;
            i7 |= i7;
            f += (73L + (i8 * i8));
            f = i3;
        }
        vMeth_check_sum += l1 + i3 + i4 + i5 + i6 + l2 + i7 + (b ? 1 : 0) + i8 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(double d, int i1, int i2) {


        vMeth(Test.instanceCount, i2, 1);
        Test.instanceCount -= 13537;
        long meth_res = Double.doubleToLongBits(d) + i1 + i2;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i=-151, i9=164, i10=-13, iArr[]=new int[N];
        double d1=2.39681;
        float f1=-50.65F, fArr[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(fArr, 53.63F);

        iArr[(i >>> 1) % N] &= (int)((iArr[(i >>> 1) % N] >>= (int)Test.instanceCount) + (--Test.instanceCount));
        i = (iMeth1(d1, i, 3) - i);
        try {
            i += (int)l;
            l >>= i;
            i9 = 1;
            do {
                Test.byFld += (byte)i9;
            } while (++i9 < 328);
            f1 = l;
            i10 = 1;
            while (++i10 < 380) {
                iArr[i10 - 1] >>>= i9;
                if (b1) {
                    f1 += i10;
                    Test.instanceCount *= Test.instanceCount;
                    i ^= (int)Test.instanceCount;
                }
                i += (i10 * i10);
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            fArr[(189 >>> 1) % N] = i;
        }
        long meth_res = l + i + Double.doubleToLongBits(d1) + i9 + Float.floatToIntBits(f1) + i10 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=21872, i12=211, i13=10, i14=6693, i15=-57164;
        boolean b2=true, bArr[]=new boolean[N];
        double d3=2.39755;

        FuzzerUtils.init(bArr, true);

        Test.instanceCount = (-iMeth(7119784480478898756L));
        for (i11 = 12; i11 < 367; ++i11) {
            if (b2) {
                bArr[i11 + 1] = true;
                Test.instanceCount += (i11 * Test.instanceCount);
                for (i13 = i11; i13 < 71; i13++) {
                    i12 = (int)1.74800;
                    i15 = 1;
                    while (--i15 > 0) {
                        i14 >>= 9;
                        switch ((i15 % 5) + 114) {
                        case 114:
                            iArrFld[i11 + 1] *= (int)Test.instanceCount;
                            iArrFld[i15 + 1] = i15;
                            i12 = i13;
                            break;
                        case 115:
                            i14 -= i11;
                            Test.instanceCount += (((i15 * i13) + i12) - Test.sFld);
                            try {
                                i14 = (i11 / i14);
                                iArrFld[i13 + 1] = (-340212689 % iArrFld[i11]);
                                i12 = (64124 / i15);
                            } catch (ArithmeticException a_e) {}
                        case 116:
                            if (b2) {
                                Test.fFld = i11;
                                i14 += i11;
                                Test.fFld += Test.fFld;
                                i14 -= i11;
                            } else if (b2) {
                                i14 -= i13;
                                i12 = i12;
                            } else {
                                Test.fFld -= i11;
                                i14 += (-3525 + (i15 * i15));
                                iArrFld[i15 - 1] = i13;
                            }
                            d3 -= i15;
                            i12 = (int)27.393F;
                        case 117:
                            Test.byFld |= (byte)Test.instanceCount;
                            break;
                        case 118:
                            Test.lArrFld[i11 - 1] = i11;
                            break;
                        default:
                            i14 -= Test.byFld;
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
