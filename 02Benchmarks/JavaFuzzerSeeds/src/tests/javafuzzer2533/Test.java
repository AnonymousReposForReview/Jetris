package tests.javafuzzer2533;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:19:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1244681588308960387L;
    public byte byFld=62;
    public static float fFld=-1.733F;
    public volatile double dFld=47.81322;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld1[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5L);
        FuzzerUtils.init(Test.fArrFld, 1.26F);
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.fArrFld1, 1.134F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i=49532, iArr[]=new int[N];
        short s=-10931;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, 1.860F);

        iArr[(-9 >>> 1) % N] += i;
        i -= (int)(((i + i) - (-50237 - (++s))) - (--fArr[(i >>> 1) % N]));
        vSmallMeth_check_sum += i + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth1(long l, int i3, byte by) {


        i3 = (int)Test.lArrFld[(i3 >>> 1) % N];
        long meth_res = l + i3 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public byte byMeth() {

        float f1=-10.933F;
        int i6=-52322, i7=16801, i8=-64963, i9=-66, i10=36185;
        short s2=3868;

        byFld *= (byte)-147;
        for (f1 = 10; f1 < 301; ++f1) {
            for (i7 = (int)(f1); i7 < 6; i7++) {
                Test.fArrFld[i7 - 1] = 3501770229599431091L;
                for (i9 = 1; 1 > i9; ++i9) {
                    i10 = (i8 = (-i10));
                }
            }
            Test.iArrFld[(int)(f1 - 1)] -= (int)(i7 - (9L + (Test.iArrFld[(int)(f1 + 1)] = s2)));
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + s2;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i11, long l1, int i12) {

        int i13=69, i14=1, i15=0, i16=-24, i17=-16678, i18=-30, i19=-14407, i20=-43253;
        double d1=1.59801;
        float f2=-1.141F;

        vSmallMeth();
        for (i13 = 234; i13 > 3; --i13) {
            for (i15 = 7; i15 > 1; --i15) {
                Test.fFld -= i11;
                Test.instanceCount >>= 212L;
                d1 *= i14;
            }
            i17 = 1;
            do {
                i16 += i17;
                Test.fArrFld[i17 + 1] = i15;
            } while (++i17 < 7);
            for (i18 = 1; 7 > i18; i18++) {
                for (f2 = 2; f2 > 1; f2 -= 2) {
                    try {
                        i19 = (-63582 % i11);
                        i19 = (Test.iArrFld[i13] / Test.iArrFld[(int)(f2)]);
                        Test.iArrFld[(int)(f2)] = (454345513 % i15);
                    } catch (ArithmeticException a_e) {}
                }
                i11 += (int)Test.instanceCount;
            }
            l1 *= i14;
            i19 = i18;
        }
        vMeth_check_sum += i11 + l1 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + i17 + i18 + i19 +
            Float.floatToIntBits(f2) + i20;
    }

    public int iMeth() {

        int i2=-1700, i4=-11, i5=-25307, iArr1[]=new int[N];
        float f=2.100F;
        short s1=11023;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)28);
        FuzzerUtils.init(iArr1, 11);

        i2 += (int)(((i2 + 11L) + (i2 * Test.instanceCount)) * (i2++));
        f = 1;
        while (++f < 169) {
            double d=0.116078;
            boolean b=false;
            switch ((int)(((f % 9) * 5) + 27)) {
            case 67:
                i2 = (int)(--d);
                break;
            case 30:
                i2 += (int)(-21.809F + (f * f));
                byArr = (byArr = (byArr = byArr));
                i2 %= (int)((i2 -= ((-i2) + (-(i2 + i2)))) | 1);
            case 56:
                vSmallMeth();
                if (i2 != 0) {
                }
                i2 = Math.min(iMeth1(--Test.instanceCount, i2--, (byte)(byFld - d)), i2);
            case 47:
                vSmallMeth();
                break;
            case 51:
                i2 += (int)((byFld + iMeth1(Test.instanceCount, i2, byFld)) - (++Test.instanceCount));
                for (i4 = 9; i4 > f; i4 -= 3) {
                    byFld -= (byte)i4;
                }
                if (b == (((i4 + i5) + (i4 - i2)) > ((f + i4) * (iArr1[(int)(f + 1)]++)))) break;
            case 69:
                s1 = (short)(-byMeth());
                break;
            case 45:
                vMeth(i5, Test.instanceCount, i5);
            case 46:
                Test.fFld = i4;
                break;
            case 59:
                i2 = (int)f;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i4 + i5 + s1 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-13, i21=6, i22=-14, i23=12, i24=-29, i25=2005, i26=60378, i27=62, i28=49106, i29=14;
        short s3=-18997;
        boolean b1=false;

        for (int smallinvoc=0; smallinvoc<823; smallinvoc++) vSmallMeth();
        i1 = iMeth();
        i1 = i1;
        for (i21 = 7; i21 < 297; ++i21) {
            Test.fArrFld = Test.fArrFld;
            Test.fArrFld1[i21 - 1] = 28597;
            for (i23 = 5; i23 < 87; ++i23) {
                Test.iArrFld[i23] += i22;
                Test.instanceCount = i22;
                Test.fArrFld[i21 + 1] *= i23;
                i25 = 1;
                do {
                    i24 += (i25 + i24);
                    i22 = (int)46.846F;
                    Test.instanceCount += (((i25 * s3) + Test.fFld) - Test.instanceCount);
                    b1 = b1;
                    i1 += (i25 * i25);
                    i1 *= i21;
                    Test.iArrFld[i21 + 1] /= (int)(i23 | 1);
                    dFld = Test.fFld;
                    i24 <<= (int)-1100149971L;
                    if (b1) break;
                } while (++i25 < 2);
                switch (((-22216 >>> 1) % 10) + 73) {
                case 73:
                    for (i26 = 1; i26 < 2; i26++) {
                        i22 -= byFld;
                        i1 = (int)Test.instanceCount;
                    }
                    Test.instanceCount += (i23 - i26);
                    for (i28 = 1; i28 < 2; i28++) {
                        Test.instanceCount -= i25;
                        i1 = s3;
                        i1 -= -466;
                    }
                    break;
                case 74:
                case 75:
                    Test.instanceCount = -21216;
                    break;
                case 76:
                    i24 += i28;
                    break;
                case 77:
                    if (false) break;
                    break;
                case 78:
                    s3 -= (short)i28;
                    break;
                case 79:
                    Test.fFld = -64830;
                    break;
                case 80:
                    i1 = (int)Test.instanceCount;
                case 81:
                    Test.fFld -= i21;
                    break;
                case 82:
                    Test.fFld += (15577 + (i23 * i23));
                    break;
                default:
                    Test.instanceCount -= i29;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth vMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
