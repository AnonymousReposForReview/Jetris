package tests.javafuzzer387;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:09:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-39894L;
    public static int iFld=51678;
    public static float fFld=-32.190F;
    public static byte byFld=14;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 33);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, int i3, float f1) {

        int i4=-10, i5=-152, i6=9, i7=-209, i8=-62, iArr[]=new int[N];
        double d2=-21.14689;
        byte by=122, byArr[]=new byte[N];
        short s=-13407;

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(byArr, (byte)-93);

        for (i4 = 19; 317 > i4; i4++) {
            boolean b1=true;
            i3 = i5;
            d2 += i4;
            switch ((i4 % 8) + 17) {
            case 17:
                i3 += i4;
                break;
            case 18:
                i5 += i3;
                Test.instanceCount = 0;
                if (b1) {
                    for (i6 = 1; i6 < 6; ++i6) {
                        iArr[i4 + 1] >>= i3;
                        i8 = 1;
                        while (++i8 < 2) {
                            iArr[i4] -= i8;
                            f1 = 124;
                            i7 >>= (int)Test.instanceCount;
                            i3 = i6;
                        }
                    }
                }
            case 19:
                f = i8;
                break;
            case 20:
                Test.iFld += (i4 - f1);
                break;
            case 21:
                by = (byte)d2;
                break;
            case 22:
                f -= by;
                break;
            case 23:
                iArr[i4 - 1] -= s;
                break;
            case 24:
                byArr = FuzzerUtils.byte1array(N, (byte)24);
                break;
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + i4 + i5 +
            Double.doubleToLongBits(d2) + i6 + i7 + i8 + by + s + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(double d1, int i2) {

        int i9=-194, i10=6, i11=218, i12=-211, i13=50014, i14=12877;
        boolean b2=false;

        vMeth2(Test.fFld, i2, Test.fFld);
        switch (((i2 >>> 1) % 1) + 71) {
        case 71:
            i2 &= (int)Test.instanceCount;
            Test.iArrFld[(Test.iFld >>> 1) % N] <<= (int)Test.instanceCount;
            for (i9 = 1; 217 > i9; i9++) {
                Test.fFld = Test.instanceCount;
                Test.instanceCount *= i9;
                if (b2) {
                    if (b2) break;
                    for (i11 = 1; 7 > i11; i11++) {
                        i12 += -53731;
                        for (i13 = 1; i13 < 2; i13++) {
                            Test.instanceCount = Test.instanceCount;
                            i12 = (int)Test.fFld;
                            i12 >>= -12;
                        }
                    }
                }
            }
            break;
        default:
            i12 = i14;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i2 + i9 + i10 + (b2 ? 1 : 0) + i11 + i12 + i13 + i14;
    }

    public static void vMeth(int i, boolean b, int i1) {

        double d=2.6350, dArr[]=new double[N];
        int i15=74, i16=-5, i17=29, i18=117, i19=123, i20=23, i21=14;
        short s1=7921;

        FuzzerUtils.init(dArr, -2.92363);

        d *= (Test.instanceCount += -15534);
        vMeth1(65.104574, -4);
        i15 = 379;
        do {
            i <<= i1;
        } while ((i15 -= 2) > 0);
        for (i16 = 349; i16 > 16; i16--) {
            Test.instanceCount >>= -76;
            for (i18 = 1; i18 < 5; ++i18) {
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.iFld ^= Test.iFld;
                    i = i20;
                    if (b) {
                        Test.instanceCount += (i20 * i20);
                        vMeth_check_sum += i + (b ? 1 : 0) + i1 + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 +
                            i19 + i20 + i21 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    } else if (b) {
                        i1 &= s1;
                        Test.byFld ^= (byte)i20;
                        dArr = dArr;
                    }
                }
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i1 + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 + i19 + i20 + i21
            + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        boolean b3=true;
        int i22=2601, i23=-3, i24=12, i25=26524, i26=132, i27=2, i28=26, i29=-5;
        short s2=-22755;
        float f2=0.559F;
        double d3=-123.55428;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2L);

        vMeth(-2550, b3, Test.iFld);
        Test.fFld = 11;
        for (i22 = 14; 282 > i22; ++i22) {
            Test.iFld = (int)-4L;
            Test.instanceCount += (((i22 * Test.instanceCount) + Test.iFld) - s2);
            i23 -= (int)Test.fFld;
            Test.iFld *= (int)1279281126L;
            if (b3) {
                for (f2 = 4; 94 > f2; ++f2) {
                    for (i25 = 1; i25 < 2; ++i25) {
                        i23 >>= (int)Test.instanceCount;
                        lArr = FuzzerUtils.long1array(N, (long)-44L);
                        Test.fFld += i25;
                        if (b3) break;
                        i24 |= Test.iFld;
                    }
                    switch (((i22 >>> 1) % 1) + 69) {
                    case 69:
                        Test.iArrFld[i22] = (int)f2;
                        try {
                            Test.iArrFld[i22] = (Test.iFld % -78);
                            Test.iFld = (Test.iArrFld[(int)(f2)] % -1928577705);
                            i24 = (i24 / -43778);
                        } catch (ArithmeticException a_e) {}
                        if (b3) continue;
                        break;
                    }
                }
                i26 *= (int)Test.instanceCount;
                i27 = 1;
                while (++i27 < 94) {
                    i24 >>= i24;
                    Test.iArrFld[i22] -= Test.iFld;
                    Test.iArrFld[i22] = i26;
                }
                i26 *= Test.iFld;
            } else {
                i24 *= i27;
                if (false) break;
                for (i28 = 1; i28 < 94; ++i28) {
                    Test.fFld += (i28 * i22);
                    i24 -= (int)d3;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
