package tests.javafuzzer3457;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static double dFld=-75.25094;
    public static short sFld=-31106;
    public static int iFld=-148;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;

    public static double dMeth1(int i9, int i10, double d1) {

        int i11=-12, i12=-18759, i13=3480, iArr[]=new int[N];
        float f2=0.466F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(iArr, 0);

        i11 = 1;
        do {
            i10 += (((i11 * i11) + Test.instanceCount) - Test.sFld);
            f2 = i11;
            for (i12 = 1; i12 < 6; ++i12) {
                if (true) {
                    i13 += i10;
                    Test.dFld -= i11;
                    i10 >>= i11;
                } else {
                    lArr = FuzzerUtils.long1array(N, (long)1057535880L);
                    Test.instanceCount = Test.instanceCount;
                    i9 >>= i11;
                }
                Test.instanceCount <<= i11;
                i10 += (int)-74L;
                try {
                    i10 = (167 / i10);
                    i13 = (i9 / i9);
                    iArr[i12] = (i13 % i11);
                } catch (ArithmeticException a_e) {}
                i9 += i9;
            }
        } while (++i11 < 293);
        long meth_res = i9 + i10 + Double.doubleToLongBits(d1) + i11 + Float.floatToIntBits(f2) + i12 + i13 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static double dMeth(int i8) {

        float f1=-1.413F;
        int i14=-13, i15=29576, i16=-8, i17=-16501, iArr1[]=new int[N];
        byte byArr[]=new byte[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -52323);
        FuzzerUtils.init(byArr, (byte)-13);
        FuzzerUtils.init(lArr1, 818285842L);

        i8 = (int)Test.instanceCount;
        f1 = (float)(dMeth1(i8, i8, Test.dFld) * i8);
        for (i14 = 2; i14 < 181; ++i14) {
            try {
                i15 = (i8 % i14);
                iArr1[i14 + 1] = (i15 / i14);
                i8 = (i15 % -205);
            } catch (ArithmeticException a_e) {}
            iArr1[i14 - 1] += i14;
            i8 += (int)-26138L;
            i15 -= i8;
            for (i16 = 1; 9 > i16; i16++) {
                byArr[i16 - 1] *= (byte)i8;
                iArr1[i14] = 44707;
                Test.dFld *= i8;
                lArr1[i14][i14] = i14;
                Test.instanceCount >>= i17;
                Test.instanceCount += (i16 | Test.instanceCount);
                i8 <<= -240;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(float f, int i1, long l) {

        int i2=0, i3=1, i4=24, i5=-13, i6=-2591, i7=-1;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.148F);

        l <<= (long)(((i1 - f) + (l + i1)) - ((Test.dFld - i1) + i1));
        for (i2 = 20; 378 > i2; ++i2) {
            i3 += i2;
            for (i4 = i2; i4 < 5; i4++) {
                Test.bArrFld[i2 - 1] = Test.bArrFld[i4 - 1];
                for (i6 = i2; i6 < 1; ++i6) {
                    Test.instanceCount = (-((i1++) + (l + i4)));
                    f *= (float)Math.abs(dMeth(i4));
                    i7 = i3;
                    Test.bArrFld[i6 - 1] = b;
                }
                switch (((i2 % 5) * 5) + 21) {
                case 32:
                    Test.instanceCount >>= Test.instanceCount;
                    i1 += 120;
                    i5 += (((i4 * i1) + i3) - f);
                    l = Test.sFld;
                case 23:
                    i3 += (((i4 * i6) + i4) - l);
                case 46:
                    fArr[i4 + 1] *= Test.instanceCount;
                    break;
                case 30:
                    i5 -= i2;
                    break;
                case 29:
                    Test.sFld *= (short)i4;
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + l + i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=13, i18=26541, i19=118, i20=3884, i21=185, i22=11, i23=-12, i24=2, i25=31836, i26=7, iArr2[]=new int[N];
        double d=-76.16555;
        float f3=1.755F, fArr1[]=new float[N];
        boolean b1=true, b2=false;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr2, 34762);
        FuzzerUtils.init(byArr1, (byte)48);
        FuzzerUtils.init(fArr1, -1.321F);

        i = (int)(Test.instanceCount - d);
        vMeth(f3, i, Test.instanceCount);
        iArr2[(i >>> 1) % N] = (int)91.647F;
        for (i18 = 2; i18 < 225; ++i18) {
            Test.instanceCount += Test.instanceCount;
            i |= (int)Test.instanceCount;
            i19 += i18;
        }
        i20 = 1;
        do {
            i19 = (int)f3;
            switch (((i20 % 4) * 5) + 39) {
            case 56:
                i += i18;
                b1 = b1;
                f3 += (i20 * i);
                iArr2[i20] += 5;
                break;
            case 50:
                for (i21 = i20; i21 < 68; i21++) {
                    for (i23 = i20; 1 > i23; ++i23) {
                        byArr1[i21 - 1] += (byte)Test.instanceCount;
                    }
                    switch ((i20 % 9) + 65) {
                    case 65:
                        i24 += i21;
                        break;
                    case 66:
                        for (i25 = 1; 1 > i25; ++i25) {
                            iArr2[i20 - 1] = -60;
                            fArr1[i21 + 1] += 13;
                            i = i20;
                            i += (145 + (i25 * i25));
                            f3 = i22;
                            i26 >>= (int)101L;
                            Test.instanceCount *= 242;
                            iArr2[i25 - 1] = i26;
                        }
                        f3 %= (i23 | 1);
                        i26 += (((i21 * i26) + Test.iFld) - i22);
                        break;
                    case 67:
                    case 68:
                        i24 *= i26;
                        break;
                    case 69:
                        i += 5;
                        break;
                    case 70:
                        iArr2[i21] += 40;
                    case 71:
                        Test.sFld *= (short)193;
                        break;
                    case 72:
                        if (b2) continue;
                    case 73:
                        f3 += f3;
                        break;
                    }
                }
                break;
            case 42:
                i26 = (int)Test.dFld;
                break;
            case 44:
                Test.bArrFld[i20] = b2;
                break;
            }
        } while (++i20 < 370);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
