package tests.javafuzzer2824;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:01:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static int iFld=-6;
    public byte byFld=-101;
    public static boolean bFld=false;
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[][]=new int[N][N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 1);
        FuzzerUtils.init(Test.sArrFld, (short)17693);
        FuzzerUtils.init(Test.lArrFld, 7L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=-33817, i4=2, i5=239, i6=-230, i7=6406, i8=-180;
        byte by=-74;
        double d=65.21644;
        float f=121.714F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2786334084L);

        for (i3 = 3; 242 > i3; ++i3) {
            i5 = 1;
            while (++i5 < 7) {
                for (i6 = 1; i6 < 1; ++i6) {
                    switch (((i5 % 8) * 5) + 124) {
                    case 149:
                        i8 += (((i6 * Test.instanceCount) + i6) - Test.instanceCount);
                        Test.iFld -= 62;
                    case 141:
                        Test.iArrFld1[i5][i3] = by;
                    case 138:
                        i8 += i5;
                        Test.sArrFld[i5 - 1] += (short)i8;
                        d -= Test.iFld;
                        Test.iArrFld1 = Test.iArrFld1;
                        break;
                    case 140:
                        i4 *= i3;
                        break;
                    case 144:
                        i2 -= (int)f;
                        i8 += (((i6 * i5) + i4) - i4);
                        i7 += (-2700 + (i6 * i6));
                    case 157:
                        Test.instanceCount = Test.iFld;
                        break;
                    case 147:
                        i8 = 30;
                        break;
                    case 161:
                        lArr[i3 + 1] -= (long)d;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + by + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i=-30946, i1=-116, i9=43256, i10=-209, i11=247, i12=127;
        double d1=-57.16272;
        long l2=-1192985252L;
        float f1=-1.942F, fArr[][]=new float[N][N];
        boolean b=true;

        FuzzerUtils.init(fArr, -68.287F);

        for (i = 2; 304 > i; ++i) {
            vMeth1(i);
            i1 = (int)d1;
            for (i9 = 5; i9 > 1; --i9) {
                switch ((i % 6) + 35) {
                case 35:
                    i1 += i9;
                    for (l2 = 1; l2 < 2; l2 += 3) {
                        d1 = i9;
                        i11 -= i12;
                        i10 += (int)l2;
                        if (i11 != 0) {
                        }
                        i12 *= -13;
                        f1 = -12L;
                        Test.iArrFld1[(int)(l2)][i9 - 1] = (int)d1;
                        Test.lArrFld[i][i9 - 1] = Test.iFld;
                    }
                    break;
                case 36:
                    Test.instanceCount += i9;
                    break;
                case 37:
                    i11 += -40;
                    break;
                case 38:
                    fArr[i9 + 1][i9] *= Test.iFld;
                case 39:
                    if (b) break;
                    break;
                case 40:
                    Test.iArrFld1[i][i9 - 1] = i10;
                    break;
                default:
                    Test.instanceCount ^= i9;
                }
            }
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d1) + i9 + i10 + l2 + i11 + i12 + Float.floatToIntBits(f1) +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l, long l1) {

        int i13=26637, i14=-31, i15=-62986, i16=-41, i17=47, i18=-7946;
        float f2=0.9F, fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr1, 85.1022F);
        FuzzerUtils.init(dArr, 1.45601);

        iArrFld[(Test.iFld >>> 1) % N][(180 >>> 1) % N] += iMeth();
        Test.iFld = Test.iFld;
        l -= Test.iFld;
        fArr1[(-3 >>> 1) % N] -= Test.iFld;
        for (i13 = 1; i13 < 212; i13++) {
            Test.iFld |= 6;
            Test.iFld += i13;
            i14 = i13;
            if (true) {
                i14 *= i14;
                for (i15 = 1; i15 < 8; i15++) {
                    for (i17 = 1; i17 < 2; i17 += 2) {
                        f2 = i15;
                        Test.iFld -= i18;
                        dArr[i15 + 1] = i13;
                    }
                }
                vMeth_check_sum += l + l1 + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            } else if (Test.bFld) {
                byFld += (byte)i13;
            } else if (false) {
                Test.lArrFld[i13 + 1][i13] -= Test.iFld;
            }
        }
        vMeth_check_sum += l + l1 + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.instanceCount, 1407358817L);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
