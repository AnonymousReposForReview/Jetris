package tests.javafuzzer1537;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:11:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1779108363963145011L;
    public static float fFld=21.970F;
    public static int iFld=-2666;
    public static double dFld=0.7908;
    public static short sFld=17496;
    public static float fFld1=-2.90F;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f) {

        int i6=22753, i7=38252, i8=-198, i9=4, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 903727657L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 30.36990);
        FuzzerUtils.init(iArr1, -7);

        Test.iFld >>= (int)Test.instanceCount;
        for (i6 = 4; i6 < 254; i6++) {
            Test.instanceCount -= i6;
            i7 += (i6 * i6);
            Test.instanceCount <<= Test.instanceCount;
            lArr[i6 - 1] >>= i7;
            Test.instanceCount >>= i6;
            for (i8 = 1; i8 < 7; i8++) {
                i9 = (int)Test.dFld;
                bArr[i8] = b;
            }
            switch ((((i8 >>> 1) % 9) * 5) + 39) {
            case 50:
                dArr[i6 + 1] = Test.fFld;
                Test.iFld = i8;
                dArr[i6 - 1] = i8;
            case 77:
                Test.instanceCount *= Test.instanceCount;
            case 61:
                try {
                    i9 = (Test.iFld % -17842);
                    i9 = (-61536 / i8);
                    Test.iFld = (1585 / iArr1[i6 - 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 62:
                Test.sFld <<= (short)i7;
                break;
            case 65:
                Test.instanceCount = 14;
                break;
            case 57:
                Test.instanceCount += (8 + (i6 * i6));
                break;
            case 63:
                i9 -= Test.iFld;
                break;
            case 43:
            case 53:
                Test.instanceCount += i6;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i5=101, i10=-116, i11=2;
        float fArr[][]=new float[N][N], fArr1[]=new float[N];

        FuzzerUtils.init(fArr, -43.306F);
        FuzzerUtils.init(fArr1, 0.680F);

        i5 = 1;
        do {
            Test.iFld = iMeth1(Test.fFld);
            Test.iFld += i5;
        } while (++i5 < 371);
        i10 = 1;
        while (++i10 < 273) {
            Test.iFld = i10;
            fArr = fArr;
            Test.iFld += i10;
            Test.iArrFld[i10][i10] = (int)Test.instanceCount;
            Test.iFld += (((i10 * i5) + i10) - i10);
        }
        Test.dFld = Test.iFld;
        Test.iFld &= i10;
        i11 = 1;
        do {
            Test.iFld >>= i5;
            Test.iFld += (i11 - i5);
            Test.iFld = (int)-444289620L;
        } while (++i11 < 208);
        vMeth_check_sum += i5 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(int i4, long l, long l1) {

        int i12=90, i13=-6;

        i4 = i4;
        vMeth();
        for (i12 = 13; i12 < 260; ++i12) {
            l = Test.iFld;
            i13 = (int)2.722F;
            try {
                Test.iFld = (i12 / 209);
                i4 = (Test.iFld / 43211);
                i13 = (-1714553045 % Test.iArrFld[i12][i12]);
            } catch (ArithmeticException a_e) {}
            Test.iFld = (int)l;
        }
        Test.iArrFld[(i12 >>> 1) % N][(i12 >>> 1) % N] = -4;
        long meth_res = i4 + l + l1 + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=48014, i1=47582, i2=184, i3=-58175, i14=35578, i15=52722, i16=68, i17=13, i18=39785, iArr[]=new int[N];
        byte by=-48;
        boolean b1=false;
        long lArr1[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr, -185);
        FuzzerUtils.init(lArr1, -3698669736180416209L);
        FuzzerUtils.init(dArr1, -22.77701);

        for (i = 6; i < 200; ++i) {
            Test.fFld = i1;
            i1 %= (int)((iArr[i + 1]++) | 1);
            for (i2 = 4; i2 < 129; i2++) {
                if (b1) {
                    iMeth(i, Test.instanceCount, Test.instanceCount);
                } else if (b1) {
                    lArr1[i + 1] = -56825;
                    for (i14 = 1; 2 > i14; i14++) {
                        by += (byte)103;
                        lArr1[i2 - 1] -= i2;
                        dArr1[i2] = -3307573063554255550L;
                        if (b1) continue;
                    }
                    for (i16 = 1; i16 < 2; ++i16) {
                        Test.sFld %= (short)((long)(Test.dFld) | 1);
                        Test.fFld += i3;
                        switch (((i16 >>> 1) % 7) + 10) {
                        case 10:
                            i15 += (i16 * i16);
                            i3 >>= (int)Test.instanceCount;
                            Test.instanceCount = i17;
                            break;
                        case 11:
                            Test.fFld -= 52689;
                            i3 = i14;
                            i1 = (int)Test.instanceCount;
                            break;
                        case 12:
                            i1 += i16;
                            if (b1) {
                                i3 = (int)Test.instanceCount;
                            } else if (b1) {
                                i18 += (int)Test.fFld1;
                                i18 = i15;
                            } else {
                                if (b1) {
                                    i17 -= 225;
                                    Test.iArrFld[i2][i16] -= (int)Test.instanceCount;
                                }
                            }
                            break;
                        case 13:
                        case 14:
                            i1 -= (int)-1.327F;
                            break;
                        case 15:
                            i15 = i18;
                            break;
                        case 16:
                            i18 *= i2;
                            break;
                        }
                    }
                } else {
                    Test.instanceCount = i3;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
