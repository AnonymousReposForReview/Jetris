package tests.javafuzzer2599;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:12:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-703295248L;
    public static boolean bFld=true;
    public static long lFld=-564506597L;
    public int iFld=-8;
    public static byte byArrFld[]=new byte[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)113);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=66, i6=-106, i7=-121, i8=-31017, i9=135, i10=10, i11=-6, i12=-246, iArr[]=new int[N];
        short s=-3405;
        double d=2.1930;
        float f2=0.474F;

        FuzzerUtils.init(iArr, -40729);

        i5 = 1;
        do {
            switch (((i5 % 1) * 5) + 17) {
            case 18:
                Test.instanceCount = -13;
                break;
            default:
                switch ((i5 % 10) + 85) {
                case 85:
                    for (i6 = 1; 5 > i6; i6++) {
                        s -= (short)i6;
                        Test.instanceCount += i6;
                        for (i8 = 1; i8 < 2; i8++) {
                            i9 += (((i8 * i10) + Test.instanceCount) - i9);
                            i10 += (int)d;
                            Test.instanceCount += (6 + (i8 * i8));
                            Test.lFld += -110;
                        }
                    }
                    i7 += i9;
                    try {
                        i9 = (i5 / 1451234860);
                        i7 = (i10 / -15403);
                        i10 = (i9 % 671855813);
                    } catch (ArithmeticException a_e) {}
                    i11 += (((i5 * f2) + i5) - f2);
                    break;
                case 86:
                    iArr[i5] = 3;
                    break;
                case 87:
                    d = d;
                case 88:
                    Test.instanceCount -= i11;
                case 89:
                    i11 = s;
                    break;
                case 90:
                    i10 = (int)Test.lFld;
                case 91:
                    Test.instanceCount += s;
                    break;
                case 92:
                    try {
                        i11 = (iArr[i5] % -60912);
                        i12 = (29812 % i7);
                        iArr[i5 - 1] = (41222 / i5);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 93:
                case 94:
                    i9 += i5;
                    break;
                }
            }
        } while (++i5 < 350);
        long meth_res = i5 + i6 + i7 + s + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f2)
            + i12 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f1, long l) {

        int i3=-63, i4=-8684, i13=117, i14=-17, i15=-33, i16=56, i17=-213, i18=-149, i19=41444, iArr1[]=new int[N];
        double d1=2.112901;
        short s1=21193;

        FuzzerUtils.init(iArr1, 65140);

        for (i3 = 10; i3 < 241; ++i3) {
            i4 = (int)(((-i3) * iMeth1()) * l);
        }
        for (i13 = 13; i13 < 211; i13++) {
            Test.byArrFld[i13 + 1] += (byte)-7517;
            iArr1[i13 - 1] += (int)d1;
            for (i15 = 1; i15 < 8; i15++) {
                i14 = i3;
                for (i17 = 2; i17 > 1; i17 -= 3) {
                    l *= Test.lFld;
                    i19 |= i17;
                    s1 = (short)i15;
                    i4 += i16;
                    Test.lFld += i15;
                    d1 = -15259;
                    i19 = (int)l;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + l + i3 + i4 + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16
            + i17 + i18 + i19 + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i) {

        int i1=92, i2=2985, i20=-36, i21=-11, i22=5, i23=-19981, iArr2[]=new int[N];
        float f3=0.328F;
        double d2=0.80391, d3=15.18438;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -51222);
        FuzzerUtils.init(lArr, -35L);

        for (i1 = 10; i1 < 188; ++i1) {
            vMeth(f3, Test.lFld);
            i2 += i;
            iArr2[i1] -= i1;
            d2 -= 14;
            i2 *= 33640;
            for (i20 = 1; 9 > i20; i20++) {
                Test.bFld = Test.bFld;
                i = (int)Test.instanceCount;
                lArr[i20] += Test.lFld;
                switch ((i1 % 1) + 52) {
                case 52:
                    for (d3 = i1; d3 < 2; d3++) {
                        try {
                            i2 = (-23972 % i);
                            i2 = (i20 / i23);
                            i21 = (i21 / i20);
                        } catch (ArithmeticException a_e) {}
                        d2 *= i1;
                        iArr2[i20] <<= (int)2843932188L;
                    }
                    break;
                default:
                    i23 += -231;
                }
            }
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d2) + i20 + i21 +
            Double.doubleToLongBits(d3) + i22 + i23 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=76.366F, fArr[]=new float[N];
        int i24=63491, i25=3679, i26=-181, i27=-82, i28=8, i29=14466, i30=-99, i31=12, i32=-11, i33=37, i34=-54,
            iArr3[][]=new int[N][N];
        double d4=2.8199;

        FuzzerUtils.init(iArr3, -35739);
        FuzzerUtils.init(fArr, 31.837F);

        Test.bFld = (f != (-iMeth(iFld)));
        switch (((iFld >>> 1) % 7) + 60) {
        case 60:
            for (i24 = 2; i24 < 336; i24 += 3) {
                i25 += (i24 + Test.lFld);
                Test.lFld = (long)d4;
                Test.instanceCount += (((i24 * f) + Test.lFld) - i24);
                iFld = 0;
            }
            f -= -46;
            i26 = 356;
            while (--i26 > 0) {
                try {
                    iFld = (i25 / i25);
                    i25 = (44816 / i26);
                    i25 = (-145 % iArr3[i26 - 1][i26]);
                } catch (ArithmeticException a_e) {}
                iFld += (-3 + (i26 * i26));
                f += i26;
            }
            for (i27 = 4; i27 < 247; ++i27) {
                Test.lFld *= (long)f;
                iArr3[i27 - 1] = iArr3[i27];
                f += (i27 * i27);
                for (i29 = 4; i29 < 103; i29++) {
                    i28 = i26;
                }
                i28 += i27;
                i28 = i30;
                for (i31 = 6; i31 < 103; i31++) {
                    iArr3[i31 - 1][i31] = (int)Test.instanceCount;
                    switch ((i31 % 2) + 57) {
                    case 57:
                        iArr3[i31 + 1][i27] *= (int)Test.lFld;
                        iFld += i31;
                        break;
                    case 58:
                        for (i33 = 1; i33 < 2; i33++) {
                            i34 = (int)Test.lFld;
                            fArr[i27 + 1] = i34;
                            f += i31;
                        }
                        Test.lFld = 12;
                        break;
                    default:
                        i34 -= i29;
                    }
                }
            }
            break;
        case 61:
            i28 = i27;
        case 62:
            iArr3[(i30 >>> 1) % N][(i25 >>> 1) % N] += i29;
            break;
        case 63:
            Test.lFld = Test.instanceCount;
        case 64:
            iArr3[(57573 >>> 1) % N][(i32 >>> 1) % N] = i27;
            break;
        case 65:
        case 66:
            d4 = i34;
            break;
        default:
            f *= i28;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
