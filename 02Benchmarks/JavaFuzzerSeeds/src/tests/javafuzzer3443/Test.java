package tests.javafuzzer3443;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:24:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=174L;
    public float fFld=2.85F;
    public static boolean bFld=false;
    public long lFld=-1636233072L;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, int i8) {

        int i9=6, i10=-62311, i11=5371, i12=47, i13=-215, i14=-158, i16=-233, i17=12, i18=228, iArr1[]=new int[N];
        byte by=-78;
        float f=2.431F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(fArr1, -2.317F);

        i7 -= -7;
        for (i9 = 7; i9 < 299; i9++) {
            iArr1[i9] -= i10;
            iArr1 = iArr1;
        }
        for (i11 = 2; i11 < 303; ++i11) {
            double d=2.33806;
            by = (byte)d;
            f -= (float)d;
            Test.instanceCount = i11;
        }
        for (i13 = 3; 140 > i13; i13 += 2) {
            iArr1 = FuzzerUtils.int1array(N, (int)48275);
            for (i16 = i13; i16 < 23; i16 += 3) {
                if (i17 != 0) {
                    vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + by + Float.floatToIntBits(f) + i13 + i14
                        + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                    return;
                }
                i18 = 1;
                while (++i18 < 1) {
                    fArr1[i18 - 1] += i18;
                    i14 += (int)f;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + by + Float.floatToIntBits(f) + i13 + i14 + i16 + i17
            + i18 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static long lMeth(boolean b, int i2, int i3) {

        int i4=-10920, i5=-9, i19=8, iArr2[]=new int[N];
        double d1=107.66001;
        byte by1=-107;

        FuzzerUtils.init(iArr2, -20344);

        for (i4 = 5; i4 < 253; i4 += 3) {
            vMeth1(i4, i5, i4);
            if (b) continue;
            i3 = i5;
            b = b;
            Test.instanceCount += (-47250 + (i4 * i4));
            switch ((i4 % 5) + 12) {
            case 12:
                i19 = 1;
                while (++i19 < 19) {
                    i5 *= i3;
                    i3 += i5;
                    i3 += (i19 * i19);
                    i2 += (int)Test.instanceCount;
                    i3 += 64221;
                    i3 += (i19 * i19);
                    b = b;
                }
                break;
            case 13:
                i5 = (int)d1;
                break;
            case 14:
                iArr2[i4] >>>= i3;
            case 15:
                i5 <<= i19;
                break;
            case 16:
                by1 <<= (byte)i5;
            }
        }
        long meth_res = (b ? 1 : 0) + i2 + i3 + i4 + i5 + i19 + Double.doubleToLongBits(d1) + by1 +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        long l=-846911601359465720L;
        int i1=-188, i20=-47118, i21=-248;
        float f1=23.711F, fArr2[]=new float[N];
        double d2=0.78577;

        FuzzerUtils.init(fArr2, -29.153F);

        for (l = 7; l < 124; ++l) {
            lMeth(false, i1, -15198);
            Test.instanceCount = l;
            fArr2[(int)(l)] /= (i1 | 1);
            f1 *= f1;
            i1 += (4 + (l * l));
            for (i20 = 1; i20 < 13; i20++) {
                int i22=-9;
                if (Test.bFld) {
                    Test.bFld = Test.bFld;
                    f1 -= i1;
                    i22 *= 241;
                    fArr2[i20 + 1] -= f1;
                } else {
                    d2 -= i20;
                }
                Test.instanceCount += i20;
                i21 = i20;
            }
        }
        vMeth_check_sum += l + i1 + Float.floatToIntBits(f1) + i20 + i21 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i23=61318, i24=8, i25=-8, i26=60999, i27=-15974, i28=16478, i29=189, i30=14, i31=7, i32=45,
            iArr[]=new int[N];
        float f2=-54.666F, fArr[]=new float[N];
        byte by2=-10;

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(fArr, -2.641F);

        fFld += iArr[(i >>> 1) % N];
        fArr[(i >>> 1) % N] += i;
        vMeth();
        for (i23 = 327; i23 > 3; i23 -= 2) {
            for (i25 = 7; 155 > i25; i25 += 3) {
                for (i27 = 1; 4 > i27; ++i27) {
                    Test.instanceCount += (((i27 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                }
                Test.instanceCount += (((i25 * i28) + lFld) - i);
                i24 += i25;
                i >>>= (int)Test.instanceCount;
                i28 += (i25 ^ i24);
                i26 += (i25 * i25);
                i26 <<= -216;
            }
            i29 = 1;
            while ((i29 += 2) < 155) {
                for (f2 = 1; 3 > f2; f2++) {
                    lFld += (-140 + (f2 * f2));
                    lFld *= (long)1.22822;
                }
                by2 = (byte)i29;
                i30 += i27;
            }
            fFld += (0 + (i23 * i23));
            iArr = iArr;
            i26 += i23;
            for (i31 = 9; i31 < 155; ++i31) {
                i += i31;
                Test.instanceCount -= i24;
                i26 = i28;
                i <<= i26;
                iArr[i31] += i27;
                Test.instanceCount *= i27;
                i32 = 34;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
