package tests.javafuzzer2647;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:58:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=33785L;
    public static float fFld=1.1022F;
    public static boolean bFld=false;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2102L);
        FuzzerUtils.init(Test.iArrFld, 95);
        FuzzerUtils.init(Test.fArrFld, -2.758F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        byte by=24;
        int i3=-219, i4=27114, i5=-156, i6=23695, i7=16480, i8=190;
        short s=11544;
        boolean b=true, bArr[]=new boolean[N];
        double d=2.112176;
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 199L);

        by <<= (byte)-6317;
        for (i3 = 3; 338 > i3; ++i3) {
            s = (short)i3;
            i4 = i3;
            bArr[i3 - 1] = b;
            Test.instanceCount += 14200L;
            Test.fFld += (float)d;
            Test.instanceCount *= 9;
            for (i5 = 1; i5 < 5; i5++) {
                for (i7 = 2; i7 > 1; --i7) {
                    i4 <<= 57570;
                    i8 += (i7 + s);
                    lArr[i7] += 40;
                    Test.instanceCount >>>= 45;
                    Test.instanceCount = i7;
                }
            }
        }
        vMeth_check_sum += by + i3 + i4 + s + (b ? 1 : 0) + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(int i2) {

        double d1=2.85177;
        int i9=-9, i10=111;
        byte by1=-55;

        vMeth();
        for (d1 = 5; d1 < 227; d1 += 3) {
            i9 -= (int)Test.instanceCount;
            i10 = 1;
            do {
                Test.bFld = Test.bFld;
                Test.lArrFld[i10] *= i10;
                Test.instanceCount -= Test.instanceCount;
                if (Test.bFld) continue;
                try {
                    i9 = (i2 % -11451);
                    i9 = (i2 % -3);
                    Test.iArrFld[i10 + 1] = (i2 % Test.iArrFld[(int)(d1 - 1)]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += i10;
                switch ((int)(((d1 % 5) * 5) + 85)) {
                case 97:
                    Test.instanceCount <<= i9;
                    Test.iArrFld[(int)(d1 - 1)] = by1;
                    i2 += i2;
                    break;
                case 88:
                    i9 -= 76;
                    break;
                case 92:
                    if (i2 != 0) {
                    }
                    break;
                case 100:
                    Test.fFld += i10;
                    break;
                case 105:
                    Test.instanceCount += (i10 * i10);
                    break;
                default:
                    Test.fArrFld[(int)(d1)] = i10;
                }
            } while (++i10 < 21);
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + i9 + i10 + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i1) {


        i1 = i1;
        i1 = (int)(10 + lMeth(i1));
        vSmallMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        double d2=-2.79171, dArr[]=new double[N];
        int i11=62366, i12=-178, i13=117, i14=-234, i15=16677, i16=-175, i17=28557, i18=9401, i19=-241, i20=53926,
            iArr[]=new int[N];
        byte by2=50;
        short s1=32197;
        long l=1L;

        FuzzerUtils.init(iArr, 35645);
        FuzzerUtils.init(dArr, -26.82442);

        for (int i : iArr) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(34114);
            Test.bFld = false;
            d2 = 27858;
        }
        i11 -= i11;
        for (i12 = 7; i12 < 364; i12++) {
            switch (((i12 % 5) * 5) + 4) {
            case 5:
                Test.lArrFld[i12] = i13;
            case 25:
                Test.fFld += Test.fFld;
                break;
            case 21:
                switch ((((0 >>> 1) % 4) * 5) + 126) {
                case 141:
                    i11 += i12;
                    dArr[i12] %= (i13 | 1);
                    break;
                case 143:
                    i11 = (int)Test.instanceCount;
                    d2 *= i13;
                    break;
                case 132:
                    i11 &= i11;
                case 146:
                    i11 += (i12 * i12);
                    for (i14 = 71; 2 < i14; --i14) {
                        i16 = i13;
                        i11 *= (int)-7.6861;
                        by2 >>>= (byte)-59311;
                    }
                    break;
                }
                for (i17 = 2; i17 < 71; i17++) {
                    i11 <<= -114;
                    dArrFld[i12] = 3821;
                    for (i19 = 1; i19 < 2; ++i19) {
                        iArr = FuzzerUtils.int1array(N, (int)-139);
                        switch ((i19 % 2) + 52) {
                        case 52:
                            if (Test.bFld) break;
                            Test.instanceCount += i17;
                        case 53:
                            i15 <<= i16;
                            i20 += (((i19 * i11) + s1) - l);
                            break;
                        default:
                            i16 <<= i16;
                        }
                    }
                }
                break;
            case 16:
                Test.fFld = i16;
                break;
            case 6:
                l = i18;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
