package tests.javafuzzer221;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:18:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public static int iFld=-46804;
    public static float fFld=0.398F;
    public double dFld=-118.44116;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 154);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=-20269, i2=-15546, i3=-3, i4=47197, i5=2, iArr[]=new int[N];
        long l1=-11L;
        boolean b=true;
        double d1=-2.10449;
        byte by1=-110;

        FuzzerUtils.init(iArr, 37421);

        for (i1 = 9; i1 < 170; ++i1) {
            for (i3 = 1; i3 < 10; ++i3) {
                try {
                    iArr[i1] = (iArr[i3 - 1] % i2);
                    i2 = (-89 / iArr[i3]);
                    Test.iFld = (1506543713 % iArr[i1 + 1]);
                } catch (ArithmeticException a_e) {}
                switch (((-145 >>> 1) % 8) + 34) {
                case 34:
                    for (l1 = 1; l1 < 2; ++l1) {
                        Test.fFld += l1;
                        if (b) continue;
                        i2 += (int)(l1 * l1);
                        Test.fFld += (float)d1;
                        Test.iFld += i2;
                        Test.instanceCount += i3;
                        Test.fFld += (l1 * Test.iFld);
                        i5 = i3;
                        Test.fFld += l1;
                    }
                    break;
                case 35:
                    d1 -= i5;
                case 36:
                    if (b) continue;
                    break;
                case 37:
                    Test.fFld += i3;
                    break;
                case 38:
                    by1 = (byte)i1;
                    break;
                case 39:
                    Test.fFld += i3;
                case 40:
                    i5 += (i3 - Test.fFld);
                    break;
                case 41:
                    Test.fFld = i5;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + l1 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i) {

        int i6=-2, i7=-23250, i8=-53319, i9=3, i10=-1, i11=-6, i12=-10;
        short s=1341;
        double d2=119.7399;
        boolean b1=true;

        vMeth();
        Test.instanceCount *= Test.instanceCount;
        Test.iFld -= i;
        for (i6 = 16; i6 < 297; ++i6) {
            i7 += (((i6 * Test.fFld) + Test.instanceCount) - s);
            i = (int)d2;
        }
        i8 = 361;
        do {
            for (i9 = 1; 5 > i9; i9++) {
                int i13=13828;
                switch ((i8 % 2) + 23) {
                case 23:
                case 24:
                    for (i11 = 2; i11 > 1; --i11) {
                        if (b1) break;
                    }
                    if (b1) continue;
                    break;
                default:
                    if (false) {
                        try {
                            i13 = (i11 / 32699);
                            i10 = (i12 % i);
                            i12 = (i12 / -1467422264);
                        } catch (ArithmeticException a_e) {}
                        Test.fFld += -60183;
                    } else {
                        i7 = i10;
                    }
                }
            }
        } while (--i8 > 0);
        long meth_res = i + i6 + i7 + s + Double.doubleToLongBits(d2) + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, double d, byte by) {

        short s1=-22086;
        int i14=-12, i15=9, i16=12, i17=19089, i18=9, i19=-12;
        boolean b2=true;

        Test.iFld >>= (int)((long)(-(Test.fFld--)) | (lMeth(Test.iFld) + s1));
        for (i14 = 376; i14 > 23; --i14) {
            for (i16 = 1; 5 > i16; ++i16) {
                Test.iArrFld[i16] = (int)Test.instanceCount;
                for (i18 = i14; i18 < 2; ++i18) {
                    Test.instanceCount = i15;
                    switch ((i16 % 1) + 104) {
                    case 104:
                        Test.instanceCount /= 13;
                        Test.iArrFld[i14] = -14;
                        switch ((i16 % 2) + 72) {
                        case 72:
                            Test.iArrFld[i18 - 1] = i15;
                            if (b2) break;
                            break;
                        case 73:
                            Test.iArrFld[i14 - 1] -= (int)Test.instanceCount;
                            break;
                        default:
                            if (true) break;
                            i17 += (i18 * i18);
                        }
                        break;
                    default:
                        i15 -= (int)79.42360;
                    }
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + by + s1 + i14 + i15 + i16 + i17 + i18 + i19 + (b2 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=-58, byArr[]=new byte[N];
        int i20=6, i21=56179, i22=46691, i23=-8, i24=-33, i25=46803, i26=4, i27=-5, i28=-7, i29=22846;
        short s2=12222, sArr[][]=new short[N][N];
        boolean b3=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)82);
        FuzzerUtils.init(fArr, -77.331F);
        FuzzerUtils.init(sArr, (short)16049);

        iMeth(Test.instanceCount, dFld, by2);
        for (i20 = 2; i20 < 130; i20++) {
            Test.instanceCount = i21;
            if (b3) {
                for (i22 = 12; i22 < 196; ++i22) {
                    for (i24 = 1; i24 < 2; ++i24) {
                        i25 += i25;
                        dFld *= Test.fFld;
                        i23 += (i24 * i24);
                    }
                    for (i26 = i20; i26 < 2; ++i26) {
                        Test.iArrFld[i20] <<= i24;
                        Test.iArrFld[i26 - 1] = (int)14L;
                        Test.iArrFld[i22] &= s2;
                        try {
                            i23 = (Test.iArrFld[i20] / i23);
                            i25 = (i20 / 160);
                            i23 = (Test.iArrFld[i26 - 1] % -156);
                        } catch (ArithmeticException a_e) {}
                        byArr[i22 - 1] = (byte)i27;
                        Test.instanceCount += Test.instanceCount;
                        i23 = i22;
                        i23 += i22;
                    }
                    fArr[i22 - 1] -= Test.iFld;
                    dFld = 22719;
                    Test.iArrFld[i20 - 1] <<= i22;
                    for (i28 = 1; i28 < 2; i28++) {
                        i29 += (i28 + i26);
                        Test.fFld = Test.fFld;
                        s2 += (short)Test.instanceCount;
                        Test.iFld *= i20;
                    }
                    dFld -= i25;
                    sArr[i20][i22] = (short)i26;
                    s2 = (short)i27;
                }
                Test.fFld += -29;
            } else {
                i23 += i21;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
