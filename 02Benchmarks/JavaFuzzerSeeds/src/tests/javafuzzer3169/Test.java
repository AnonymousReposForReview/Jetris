package tests.javafuzzer3169;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:08:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5322670728578665056L;
    public static int iFld=103;
    public static short sFld=-31234;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -63);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {


        Test.iFld -= (int)Test.instanceCount;
        Test.iFld = (int)-2.65733;
        Test.iArrFld[(i2 >>> 1) % N] = Test.sFld;
        vMeth1_check_sum += i2;
    }

    public static void vMeth() {

        float f2=2.841F;
        double d=2.23944, d1=94.60443;
        int i3=72, i4=-63254, i5=-235, i6=-8;
        boolean b=true;

        Test.iFld *= (int)(Test.iArrFld[(Test.iFld >>> 1) % N] + (--f2));
        Test.sFld = (short)d;
        vMeth1(-8);
        i3 = 149;
        while (--i3 > 0) {
            f2 += (44971 + (i3 * i3));
            for (d1 = 1; d1 < 11; ++d1) {
                Test.iFld -= (int)Test.instanceCount;
                b = b;
                Test.instanceCount >>= 18699;
                b = b;
                for (i5 = 1; i5 < 2; ++i5) {
                    i6 += (((i5 * i3) + Test.iFld) - i3);
                    i6 &= i4;
                }
            }
            Test.instanceCount *= Test.instanceCount;
            f2 -= i6;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i3 + Double.doubleToLongBits(d1) +
            i4 + (b ? 1 : 0) + i5 + i6;
    }

    public static int iMeth(float f1, int i) {

        int i1=-102, i7=-38, i8=39702;
        byte by=80;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -49L);

        Test.instanceCount = (Test.iFld--);
        Test.iArrFld = Test.iArrFld;
        lArr[(-11097 >>> 1) % N] >>= (Test.iArrFld[(i >>> 1) % N]--);
        Test.iArrFld[(i >>> 1) % N] = (int)(-Test.instanceCount);
        i1 = 1;
        while (++i1 < 294) {
            vMeth();
            f1 *= Test.instanceCount;
            Test.iFld ^= i1;
            for (i7 = 1; i7 < 6; ++i7) {
                try {
                    i8 = (Test.iFld / -177);
                    i = (Test.iArrFld[i7 - 1] / i1);
                    Test.iArrFld[i7 - 1] = (i1 / 51010);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (i7 * i7);
                i <<= (int)Test.instanceCount;
                Test.instanceCount = by;
                f1 += (i7 - f1);
                i = i;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i + i1 + i7 + i8 + by + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.636F;

        f = (((Test.iFld + Test.iFld) - iMeth(-2.456F, Test.iFld)) * Test.iFld);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
