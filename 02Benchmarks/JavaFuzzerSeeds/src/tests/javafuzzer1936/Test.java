package tests.javafuzzer1936;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2935619666L;
    public static byte byFld=-80;
    public static double dFld=77.22455;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l, int i4) {

        int i5=-241, i6=-7, i7=118, i8=40481, iArr1[]=new int[N];
        short s1=1991;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -11498);
        FuzzerUtils.init(dArr, 0.129801);

        for (i5 = 10; 178 > i5; i5++) {
            l = -75;
            i6 = -4;
            for (i7 = 1; i7 < 9; i7++) {
                boolean b=false;
                byte by=118;
                switch (((i6 >>> 1) % 1) + 61) {
                case 61:
                    l = s1;
                default:
                    iArr1 = iArr1;
                    i3 -= i6;
                    l += i8;
                }
                if (b) break;
                dArr[(i4 >>> 1) % N] += i5;
                switch (((i4 >>> 1) % 2) + 97) {
                case 97:
                    iArr1[i7 + 1] = i8;
                    break;
                case 98:
                    l += i4;
                    s1 += (short)(((i7 * i6) + by) - i3);
                    break;
                }
            }
        }
        vMeth1_check_sum += i3 + l + i4 + i5 + i6 + i7 + i8 + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static double dMeth() {

        int i9=113, i10=84, i11=23445, i12=136, i13=-46695, i14=-12, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 11);

        vMeth1(i9, Test.instanceCount, i9);
        i10 = 1;
        while (++i10 < 162) {
            i9 = i9;
            i9 = -215;
            for (i11 = 1; 10 > i11; i11++) {
                i9 = i11;
                for (i13 = 2; i11 < i13; i13--) {
                    byte by1=-12;
                    i12 = by1;
                    i9 = i12;
                    iArr2 = iArr2;
                }
                Test.instanceCount *= -996661087L;
                if (i12 != 0) {
                }
            }
            Test.instanceCount += i11;
            Test.byFld ^= (byte)-252;
        }
        i14 += i12;
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i2) {

        short s=-20453;
        int i15=-42262, i16=77, i17=12656, i18=-40, iArr[]=new int[N];
        boolean b1=false;
        double d=100.29963;
        float f=-1.750F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 3931331116L);
        FuzzerUtils.init(iArr, 232);
        FuzzerUtils.init(byArr, (byte)45);

        lArr = (lArr = (lArr = lArr));
        iArr[(i2 >>> 1) % N] += (int)((i2 + s) - dMeth());
        byArr[(i2 >>> 1) % N] |= (byte)Test.instanceCount;
        for (i15 = 10; i15 < 194; i15++) {
            Test.instanceCount += i15;
            Test.bArrFld[i15] = b1;
            try {
                i2 = (i16 % -9893);
                i2 = (-51773 / i16);
                iArr[i15 - 1] = (i15 / 222);
            } catch (ArithmeticException a_e) {}
            if (b1) {
                for (i17 = i15; i17 < 9; ++i17) {
                    d = -1;
                    Test.instanceCount += (i17 * i17);
                    i16 = i17;
                    i18 |= (int)Test.instanceCount;
                    i18 += i15;
                    i18 *= (int)f;
                }
            }
        }
        vMeth_check_sum += i2 + s + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=41839, i19=82, i20=-57, i21=26710, i22=-24632, i23=-196, iArr3[]=new int[N];
        boolean b2=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, 42632);
        FuzzerUtils.init(lArr1, -15765L);

        for (i = 6; i < 307; ++i) {
            short s2=26156;
            float f1=-1.513F;
            vMeth(i1);
            for (i19 = 84; i19 > 1; i19 -= 2) {
                Test.instanceCount >>= -44;
                i1 += (i19 - Test.instanceCount);
                Test.instanceCount = 4;
                i20 += (i19 * i19);
                iArr3[i19 + 1] = -5118;
            }
            s2 = (short)f1;
            switch ((i % 1) + 66) {
            case 66:
                Test.instanceCount *= s2;
            default:
                i20 *= i20;
                if (b2) break;
            }
            for (i21 = i; 84 > i21; i21++) {
                f1 += i;
                f1 += i21;
                i23 = 1;
                do {
                    i1 >>= i21;
                    b2 = b2;
                    if (b2) {
                        Test.byFld = (byte)Test.instanceCount;
                    } else {
                        Test.instanceCount += (((i23 * i20) + Test.instanceCount) - Test.instanceCount);
                        f1 = i1;
                        i1 = i19;
                    }
                    lArr1[i - 1] -= i;
                    i22 = i;
                } while (++i23 < 1);
                Test.dFld += 1.33670;
                Test.instanceCount += (i21 * i21);
                Test.instanceCount += (i21 * i21);
                Test.dFld += -24128;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
