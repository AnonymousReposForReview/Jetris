package tests.javafuzzer2686;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:41:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-22533L;
    public volatile byte byFld=57;
    public static float fFld=85.894F;
    public static volatile int iFld=-7;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f, int i3) {

        int i4=41415, i5=0, i6=-9, i7=12, i8=3, iArr[][]=new int[N][N];
        short s1=-21704;
        boolean b=true;

        FuzzerUtils.init(iArr, 62338);

        for (i4 = 4; 165 > i4; i4 += 3) {
            s1 <<= (short)i3;
            Test.instanceCount = i5;
            iArr[i4 - 1][i4] = i5;
        }
        i5 = (int)-9128092303714861581L;
        for (i6 = 5; i6 < 324; i6++) {
            if (b) break;
            Test.instanceCount += (((i6 * Test.instanceCount) + f) - Test.instanceCount);
            i3 += i7;
            i7 <<= s1;
            i7 <<= 8;
            if (true) {
                i3 += i6;
                i3 = i6;
                i8 = i3;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + s1 + i6 + i7 + (b ? 1 : 0) + i8 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        short s=-15780;
        int i9=193, i10=-11, i11=-6, i12=-8567, i13=-14, i14=-14;
        double d=-125.70563;

        s += (short)iMeth(Test.fFld, Test.iFld);
        for (i9 = 4; i9 < 150; ++i9) {
            for (i11 = 1; i11 < 11; ++i11) {
                for (i13 = 1; i13 < 2; ++i13) {
                    boolean b1=false;
                    if (b1) continue;
                    switch ((i13 % 2) + 59) {
                    case 59:
                        Test.iFld += (i13 * i13);
                        Test.instanceCount ^= i11;
                        i10 -= (int)Test.fFld;
                        break;
                    case 60:
                        i12 -= Test.iFld;
                        i10 += (((i13 * i13) + i13) - Test.iFld);
                        b1 = b1;
                        break;
                    }
                    d = i10;
                    i10 = i11;
                    Test.instanceCount /= -12;
                }
            }
        }
        vMeth1_check_sum += s + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d);
    }

    public static void vMeth(long l, int i2) {

        int i15=32161, i16=-1, i17=130, i18=240, i19=14, iArr1[]=new int[N];
        double d1=0.116961;
        boolean b2=false;

        FuzzerUtils.init(iArr1, -4);

        vMeth1();
        Test.fFld += Test.iFld;
        i2 = (int)1895625397L;
        i15 = 1;
        while (++i15 < 125) {
            for (i16 = 13; i16 > 1; --i16) {
                switch ((i15 % 5) + 105) {
                case 105:
                    iArr1[i15 - 1] = (int)Test.fFld;
                case 106:
                case 107:
                    i2 = i15;
                    if (b2) {
                        d1 -= d1;
                    } else if (b2) {
                        iArr1[i16 + 1] -= (int)l;
                        Test.fFld += Test.iFld;
                        for (i18 = 1; i18 < 2; i18++) {
                            Test.iFld += i18;
                            try {
                                Test.iFld = (i2 % i2);
                                Test.iFld = (Test.iFld % 125);
                                iArr1[i18] = (i15 / Test.iFld);
                            } catch (ArithmeticException a_e) {}
                        }
                        vMeth_check_sum += l + i2 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b2 ? 1
                            : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    } else {
                        l += (long)Test.fFld;
                        vMeth_check_sum += l + i2 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b2 ? 1
                            : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 108:
                    d1 -= l;
                    break;
                case 109:
                    i17 += i16;
                    break;
                default:
                    i2 += Test.iFld;
                }
            }
        }
        vMeth_check_sum += l + i2 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-213, i1=-28220;

        for (i = 163; i > 2; i -= 3) {
            i1 -= (int)(-(Integer.reverseBytes(i) / ((33027 + (byFld + Test.instanceCount)) | 1)));
            i1 += (i | i);
            byFld = (byte)(++Test.instanceCount);
            vMeth(Test.instanceCount, Test.iFld);
        }
        Test.iFld *= (int)Test.fFld;
        Test.fFld -= i1;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
