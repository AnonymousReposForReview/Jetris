package tests.javafuzzer227;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:23:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-25420L;
    public static boolean bFld=false;
    public static double dFld=-1.104440;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -36);
        FuzzerUtils.init(Test.dArrFld, -63.95640);
        FuzzerUtils.init(Test.lArrFld, 11L);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i8, int i9, int i10) {

        int i11=-84, i12=249, i13=125, i14=-23678, i15=8, i16=234;
        double d=-65.111476;
        short s=5342;
        float f1=2.648F;
        boolean b=false;

        for (i11 = 8; i11 < 164; i11++) {
            d *= i8;
            for (i13 = 1; i13 < 10; i13++) {
                s -= (short)1.42258;
                try {
                    i12 = (i8 / -156);
                    i14 = (i11 / -21319);
                    i10 = (i9 % -17);
                } catch (ArithmeticException a_e) {}
            }
            i14 = (int)Test.instanceCount;
            if (b) {
                i9 <<= i13;
            } else if (b) {
                for (i15 = 1; 10 > i15; ++i15) {
                    Test.instanceCount ^= i15;
                    i14 >>= i12;
                    switch ((i15 % 5) + 24) {
                    case 24:
                        i16 = -20573;
                        i12 += (((i15 * i16) + i8) - s);
                        break;
                    case 25:
                        i16 = i8;
                    case 26:
                        i14 ^= -10;
                        break;
                    case 27:
                        Test.dArrFld[i15 + 1] = f1;
                    case 28:
                        Test.instanceCount = -31503L;
                        break;
                    }
                }
            } else if (b) {
                i10 = i13;
            } else {
                i9 *= 14;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 + s + i15 + i16 +
            Float.floatToIntBits(f1) + (b ? 1 : 0);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i3, int i4, int i5) {

        int i6=11, i7=109, i17=108, i18=-96, i19=-5;
        float f2=-1.326F;
        short s1=-19019;

        for (i6 = 1; i6 < 142; ++i6) {
            dMeth(i4, i7, i4);
            for (i17 = 1; i17 < 11; i17++) {
                Test.bFld = Test.bFld;
                switch ((i17 % 8) + 100) {
                case 100:
                    Test.instanceCount = (long)f2;
                    i7 = 10816;
                    i5 *= s1;
                    Test.dFld -= Test.instanceCount;
                    break;
                case 101:
                    i18 -= (int)-2.961F;
                    i7 = (int)f2;
                case 102:
                    i5 += (i17 - Test.instanceCount);
                    i19 = 1;
                    do {
                        i3 -= i18;
                    } while (++i19 < 2);
                case 103:
                    Test.lArrFld[i6] += (long)Test.dFld;
                case 104:
                    if (Test.bFld) break;
                case 105:
                    i18 = (int)Test.instanceCount;
                    break;
                case 106:
                    i7 = s1;
                case 107:
                    Test.iArrFld[i6 + 1] += (int)Test.dFld;
                default:
                    Test.instanceCount += (i17 | i18);
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i17 + i18 + Float.floatToIntBits(f2) + s1 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i2=-31721;

        i2 = (i2 - iMeth(i2, i2, -87));
        long meth_res = i2;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.6F, fArr[][]=new float[N][N];
        int i1=2, i20=10, i21=28170, i22=-25522, i23=82, i24=-172, i25=155, i26=-202, i27=11, i28=-36, i29=2;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 50L);
        FuzzerUtils.init(fArr, -2.303F);

        lArr = (lArr = (lArr = lArr));
        for (int i : Test.iArrFld) {
            try {
                i = (i % 34425);
                Test.iArrFld[(-111 >>> 1) % N] = (i / 45);
                i = (i / i);
            } catch (ArithmeticException a_e) {}
            Test.iArrFld[(i >>> 1) % N] -= (int)(-Math.sqrt(f + Test.instanceCount));
            f *= (Math.max(Math.min(i, i), (int)(i / (Test.instanceCount | 1))) + (--i));
            Test.instanceCount >>>= (Test.instanceCount * ((i + 2) - (++i)));
            i1 = 1;
            do {
                i = (int)(f + fMeth());
            } while (++i1 < 63);
        }
        for (i20 = 9; i20 < 274; i20++) {
            for (i22 = 2; 95 > i22; i22++) {
                i24 = 1;
                while (++i24 < 2) {
                    fArr[i24][i20] -= 57797;
                    i23 = (int)Test.instanceCount;
                    Test.bFld = false;
                }
                if (Test.bFld) {
                    if (false) break;
                }
                i21 = i21;
                Test.iArrFld[i22] = (int)Test.dFld;
                for (i25 = 1; i25 < 2; i25++) {
                    i23 = (int)f;
                }
                i21 += i22;
                Test.dFld -= 43;
                Test.iArrFld[i22 - 1] += i20;
                switch ((i20 % 10) + 12) {
                case 12:
                    i23 >>= i22;
                    for (i27 = 1; i27 < 2; i27++) {
                        Test.iArrFld[i20 + 1] -= (int)Test.instanceCount;
                    }
                    Test.instanceCount += i24;
                    break;
                case 13:
                    i23 = (int)Test.instanceCount;
                    lArr[i22 + 1] = (long)f;
                    break;
                case 14:
                    Test.dFld -= Test.instanceCount;
                case 15:
                    Test.iArrFld[i20 + 1] = -126;
                    break;
                case 16:
                    i28 = i26;
                    break;
                case 17:
                case 18:
                    i28 = (int)Test.instanceCount;
                    break;
                case 19:
                    Test.instanceCount += i22;
                case 20:
                    f = -176;
                    break;
                case 21:
                    i29 = i24;
                    break;
                default:
                    Test.instanceCount = i25;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
