package tests.javafuzzer3450;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:31:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=55L;
    public static int iFld=23892;
    public static byte byFld=-37;
    public static short sFld=28805;
    public static double dFld=2.118088;
    public static int iFld1=7;
    public double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1198603465L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i3, float f2) {

        int i4=0, i5=-43407, i6=-6, i7=-47, i8=-186, i9=39261, i10=0;

        for (i4 = 3; i4 < 279; i4++) {
            i5 += 62780;
            i6 = 1;
            do {
                for (i7 = i4; i7 < 1; ++i7) {
                    i5 = Test.byFld;
                    Test.byFld *= (byte)-33721;
                }
                i3 = (int)0L;
                i3 -= (int)Test.instanceCount;
            } while (++i6 < 6);
            i8 ^= Test.iFld;
            Test.instanceCount += i7;
        }
        Test.lArrFld[(i7 >>> 1) % N] = Test.instanceCount;
        for (i9 = 6; 124 > i9; ++i9) {
            i5 += (i9 ^ Test.instanceCount);
            l >>= i4;
            l += Test.iFld;
        }
        vMeth1_check_sum += l + i3 + Float.floatToIntBits(f2) + i4 + i5 + i6 + i7 + i8 + i9 + i10;
    }

    public static void vMeth() {

        double d=-1.35486;
        short s=-30428;
        int i1=1432, i2=-83, i11=-14, i12=-4, i13=210, i14=171, i15=225, iArr1[]=new int[N];
        float f3=116.696F;

        FuzzerUtils.init(iArr1, 172);

        iArr1[(Test.iFld >>> 1) % N] <<= (int)(d - Test.iFld);
        Test.iFld *= (s--);
        for (i1 = 17; i1 < 294; ++i1) {
            vMeth1(Test.instanceCount, 40400, f3);
        }
        for (i11 = 5; 218 > i11; ++i11) {
            for (i13 = 1; i13 < 8; ++i13) {
                i14 += i2;
            }
            Test.instanceCount = i2;
            f3 = i2;
            i15 = 1;
            while (++i15 < 8) {
                boolean b=false;
                i14 += (i15 + s);
                if (b) {
                    i2 += (((i15 * Test.byFld) + i13) - Test.iFld);
                    i12 = (int)Test.instanceCount;
                    Test.instanceCount -= -23286;
                } else {
                    if (b) continue;
                    vMeth_check_sum += Double.doubleToLongBits(d) + s + i1 + i2 + Float.floatToIntBits(f3) + i11 + i12
                        + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + s + i1 + i2 + Float.floatToIntBits(f3) + i11 + i12 + i13 + i14
            + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        int i16=-13, i17=-130, i18=-40478, i19=-104, i20=3, i21=-70, iArr2[]=new int[N];
        long l1=-3625910877L;
        float f4=-1.327F;

        FuzzerUtils.init(iArr2, -4);

        vMeth();
        for (i16 = 1; i16 < 237; i16++) {
            i17 = i17;
            Test.sFld -= (short)Test.dFld;
        }
        iArr2[(i17 >>> 1) % N] += i16;
        for (i18 = 17; i18 < 313; i18++) {
            boolean b1=true;
            if (b1) continue;
            for (i20 = 1; i20 < 6; i20++) {
                i17 += i17;
            }
            i17 &= (int)Test.instanceCount;
            Test.iFld = i18;
            i21 = i18;
            if (b1) {
                iArr2[i18] &= (int)l1;
                Test.instanceCount = -98;
            } else {
                f4 += Test.sFld;
            }
        }
        long meth_res = i16 + i17 + i18 + i19 + i20 + i21 + l1 + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-50.160F, f1=-37.31F, f5=1.542F;
        int i=0, i22=206, i23=-32768, i24=129, i25=13, i26=-115, i27=50918, iArr[]=new int[N];
        long l2=-78L, l3=-8L;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 1759);
        FuzzerUtils.init(sArr, (short)-26758);

        switch (((iArr[(Test.iFld >>> 1) % N] >>> 1) % 1) + 26) {
        case 26:
            Test.iFld = (int)f;
            for (f1 = 215; f1 > 5; --f1) {
                dArrFld[(int)(f1 + 1)] *= ((~Test.iFld) + lMeth());
            }
            break;
        }
        f -= i;
        Test.iFld = (int)Test.instanceCount;
        for (i22 = 2; i22 < 189; ++i22) {
            i23 *= (int)Test.dFld;
            switch (((i23 >>> 1) % 1) + 59) {
            case 59:
                for (l2 = 134; l2 > 7; --l2) {
                    i23 += (int)(l2 * l2);
                    i25 = 1;
                    do {
                        sArr[(int)(l2)] >>= (short)l2;
                    } while (++i25 < 2);
                    Test.instanceCount = i23;
                    i24 = (int)Test.instanceCount;
                    Test.instanceCount += (((l2 * f1) + f) - Test.iFld1);
                    for (f5 = l2; f5 < 2; ++f5) {
                        l3 = 242;
                        Test.instanceCount = 14214;
                        Test.instanceCount &= Test.sFld;
                        f += l3;
                        i24 += (int)Test.dFld;
                        i = i24;
                        f += ((long)f5 ^ (long)f5);
                        i23 <<= 37918;
                    }
                }
                Test.iFld >>= i26;
                Test.iFld1 = -29;
                i27 = 1;
                while (++i27 < 134) {
                    int i28=12;
                    i28 >>>= -42404;
                    iArr = iArr;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
