package tests.javafuzzer769;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:16:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=40256L;
    public float fFld=81.977F;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -43390);
        FuzzerUtils.init(Test.iArrFld1, -29949);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5) {

        double d=-1.60589;

        i5 >>>= (int)Test.instanceCount;
        i4 *= (int)d;
        Test.instanceCount = -46;
        vMeth1_check_sum += i4 + i5 + Double.doubleToLongBits(d);
    }

    public void vMeth() {

        int i6=-13928, i7=-25643, i8=8, i9=20002, i10=4;
        short s=13865;

        vMeth1(-28, i6);
        for (i7 = 7; i7 < 148; ++i7) {
            i8 >>>= i7;
            Test.iArrFld[i7] += -9;
            i9 = 1;
            while (++i9 < 11) {
                i6 += (int)(-2852046370L + (i9 * i9));
                i10 = 1;
                while (++i10 < 1) {
                    i8 += i6;
                    i6 *= i8;
                    i6 += i6;
                }
                s <<= (short)Test.instanceCount;
                Test.instanceCount += i7;
                i8 = (int)3511202016378940573L;
                fFld -= i7;
                i8 += (203 + (i9 * i9));
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + s;
    }

    public int iMeth(int i2, int i3, long l) {


        vMeth();
        l -= i3;
        i2 >>>= i2;
        i2 -= i3;
        i2 >>>= i2;
        long meth_res = i2 + i3 + l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7358, i1=-9, i11=148, i12=-5;
        double d1=0.111222, dArr[]=new double[N];
        byte by=40;
        boolean b=true;
        short s1=5917;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(dArr, -2.59939);

        for (i = 17; 379 > i; ++i) {
            lArr = (lArr = FuzzerUtils.long1array(N, (long)-22227L));
            i1 /= (int)(iMeth(i, i1, Test.instanceCount) | 1);
            i1 += 12082;
            i11 = 1;
            while (++i11 < 70) {
                i1 += i11;
                Test.iArrFld1[i + 1] *= i11;
                i1 = i1;
                fFld %= (i11 | 1);
                d1 *= i;
                fFld += (((i11 * fFld) + i1) - Test.instanceCount);
                i1 = by;
                i12 = 1;
                do {
                    i1 *= i11;
                    Test.instanceCount >>>= i12;
                    i1 = (int)Test.instanceCount;
                    sArrFld[i + 1] = (short)65.610F;
                    Test.iArrFld[i12] *= i;
                    if (b) continue;
                    switch ((((i12 >>> 1) % 10) * 5) + 54) {
                    case 102:
                        switch ((i % 4) + 113) {
                        case 113:
                            i1 <<= (int)Test.instanceCount;
                            Test.instanceCount += 83;
                            break;
                        case 114:
                            Test.instanceCount >>= i;
                            lArr[i11 - 1] /= ((long)(d1) | 1);
                            i1 -= (int)Test.instanceCount;
                            break;
                        case 115:
                            s1 -= (short)-46870;
                            i1 += (i12 | i);
                            Test.iArrFld1[i11] = (int)fFld;
                            i1 += (12802 + (i12 * i12));
                            break;
                        case 116:
                        }
                        break;
                    case 64:
                        dArr[(i11 >>> 1) % N] *= i12;
                        break;
                    case 55:
                        i1 -= i12;
                    case 57:
                        d1 *= i;
                        break;
                    case 73:
                        i1 += (int)fFld;
                        break;
                    case 86:
                        i1 += i11;
                    case 98:
                        Test.iArrFld1 = FuzzerUtils.int1array(N, (int)-1);
                    case 92:
                        i1 %= (int)(i1 | 1);
                        break;
                    case 80:
                        if (b) continue;
                        break;
                    case 72:
                        i1 += i12;
                    default:
                        Test.instanceCount <<= 30163;
                    }
                } while (++i12 < 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
