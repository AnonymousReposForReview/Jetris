package tests.javafuzzer2875;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:06:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3600350357674012590L;
    public double dFld=0.107752;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 30438);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l2, float f) {

        int i9=21, i10=28469, i11=70, i12=-19, i13=-8, i14=3, i15=25627, iArr1[]=new int[N];
        double d1=1.69564, dArr[]=new double[N];
        short s=7967;
        boolean b1=true;
        long l3=-1747128506L;

        FuzzerUtils.init(iArr1, 16532);
        FuzzerUtils.init(dArr, 0.11804);

        for (int i8 : iArr1) {
            f = i8;
            for (i9 = 1; 4 > i9; ++i9) {
                iArr1[i9 + 1] += (int)d1;
                i10 += i9;
            }
            s += (short)f;
        }
        for (i11 = 13; i11 < 210; ++i11) {
            if (b1) break;
        }
        for (l3 = 4; 272 > l3; ++l3) {
            b1 = b1;
            for (i14 = 1; i14 < 6; i14 += 2) {
                i12 += i10;
                Test.instanceCount <<= 14;
                dArr[i14 - 1] += i12;
                i12 += i14;
            }
        }
        long meth_res = l2 + Float.floatToIntBits(f) + i9 + i10 + Double.doubleToLongBits(d1) + s + i11 + i12 + (b1 ? 1
            : 0) + l3 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(long l1) {

        double d=-107.58478;
        int i5=-1, i6=-41275, i7=127, i16=-57480, i17=-26863, iArr[]=new int[N];
        byte by=41;
        float f1=-119.359F;
        boolean b2=false, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 63237);
        FuzzerUtils.init(lArr, -4L);

        for (d = 8; d < 136; d++) {
            if (bArr[(int)(d + 1)]) break;
            i5 -= (int)(((by - i5) - (iArr[(int)(d)]--)) - (lArr[(int)(d)]++));
            for (i6 = 1; i6 < 12; ++i6) {
                i5 += i6;
                i7 *= (int)(iArr[i6 + 1] + (++l1));
                Test.instanceCount -= (long)(l1 = (long)dMeth(l1, f1));
                i5 = i7;
                i5 -= i7;
                for (i16 = 1; i16 < 2; i16++) {
                    i5 >>= i6;
                    Test.instanceCount += (i16 * i16);
                    b2 = b2;
                    i5 = i7;
                    i17 += (i16 | i6);
                }
            }
        }
        vMeth_check_sum += l1 + Double.doubleToLongBits(d) + i5 + by + i6 + i7 + Float.floatToIntBits(f1) + i16 + i17 +
            (b2 ? 1 : 0) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static boolean bMeth(int i3, int i4) {

        int i18=-20868, i19=-1, i20=-43405;
        float f2=0.716F;
        double d2=0.12247, dArr1[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr1, 88.36838);
        FuzzerUtils.init(sArr, (short)-16557);

        vMeth(-1L);
        dArr1 = FuzzerUtils.double1array(N, (double)69.30024);
        i4 += (int)-1.121162;
        dArr1[(-226 >>> 1) % N] = i3;
        i18 = 1;
        do {
            i4 >>= (int)Test.instanceCount;
            Test.instanceCount = -42;
            for (i19 = 6; i19 > 1; i19--) {
                Test.iArrFld = Test.iArrFld;
                sArr[i18 - 1] |= (short)i20;
                i3 -= (int)Test.instanceCount;
                i20 += (int)Test.instanceCount;
                i3 *= i18;
                f2 += i19;
                i20 -= (int)d2;
            }
        } while (++i18 < 271);
        long meth_res = i3 + i4 + i18 + i19 + i20 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(sArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-246, i1=64482, i2=-3, i21=-2, i22=50, i23=-38626, i24=-9, i25=7;
        long l=2498284487L, lArr1[]=new long[N];
        boolean b3=true;
        float f3=-1.667F;
        double d4=1.122655;
        byte by1=14;

        FuzzerUtils.init(lArr1, 604532359882909603L);

        for (i = 4; i < 134; i++) {
            for (l = i; 193 > l; ++l) {
                boolean b=false;
                if ((b = bMeth(i2, i1)) ^ b3) continue;
                for (i21 = 1; i21 < 1; i21++) {
                    double d3=83.129741;
                    i1 = (int)d3;
                    i2 = i;
                    Test.instanceCount -= Test.instanceCount;
                    b = b3;
                }
                i1 = (int)dFld;
                Test.instanceCount += -170L;
                dFld = i1;
                f3 -= i;
                switch ((i % 9) + 67) {
                case 67:
                    Test.iArrFld[(int)(l - 1)] -= -71;
                    i22 += (int)(l + Test.instanceCount);
                    for (i23 = 1; i23 > 1; i23--) {
                        i24 ^= (int)l;
                    }
                    break;
                case 68:
                    try {
                        i22 = (i23 % 65);
                        i25 = (39150 % Test.iArrFld[(int)(l)]);
                        Test.iArrFld[i + 1] = (i2 % 148);
                    } catch (ArithmeticException a_e) {}
                    i2 += i23;
                    i1 *= i;
                case 69:
                    Test.instanceCount += (long)(-8.406F + (l * l));
                case 70:
                    Test.iArrFld = Test.iArrFld;
                    if (b3) break;
                    break;
                case 71:
                    i24 |= i24;
                    lArr1[i - 1] <<= i23;
                    break;
                case 72:
                    i22 *= i21;
                    break;
                case 73:
                    d4 = 1;
                    while (++d4 < 1) {
                        by1 += (byte)d4;
                        i2 -= i2;
                        if (b) break;
                    }
                case 74:
                case 75:
                    Test.instanceCount = i24;
                    break;
                default:
                    lArr1[(int)(l - 1)] -= l;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
