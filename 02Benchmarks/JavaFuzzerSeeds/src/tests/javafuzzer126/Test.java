package tests.javafuzzer126;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:46:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1671059835L;
    public float fFld=2.844F;
    public static byte byFld=104;
    public static double dFld=1.29744;
    public static int iFld=10;
    public static boolean bFld=true;
    public volatile long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {

        int i4=-35, i5=53472, i6=-113, i7=50429;
        float f1=-1.279F;
        boolean b=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)70);

        Test.iFld &= Test.iFld;
        l1 = Test.iFld;
        i4 = 1;
        while (++i4 < 232) {
            f1 -= Test.iFld;
            Test.instanceCount = 61708;
            for (i5 = 1; i5 < 7; ++i5) {
                i6 -= Test.iFld;
                i7 = 1;
                while ((i7 += 3) < 2) {
                    if (b) {
                        f1 += (i7 * i7);
                        Test.instanceCount <<= 9451L;
                        byArr[i5 - 1] = (byte)i4;
                        f1 += i7;
                    } else if (b) {
                        i6 += (int)Test.dFld;
                        Test.dFld *= Test.byFld;
                    } else {
                        i6 = i6;
                    }
                }
            }
        }
        vMeth_check_sum += l1 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(int i2) {

        float f=-113.1007F;
        int i8=10548, i9=-5771, i10=43854, i11=22365, iArr1[]=new int[N];
        short s=27458;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 50421L);
        FuzzerUtils.init(iArr1, -182);

        i2 = (int)(((i2 * i2) + (i2--)) - (lArr[(74 >>> 1) % N]++));
        for (int i3 : iArr1) {
            if (i3 != 0) {
            }
            Test.dFld = (f--);
        }
        vMeth(Test.instanceCount);
        try {
            for (i8 = 9; i8 < 173; i8++) {
                iArr1[i8] += (int)Test.instanceCount;
                i2 <<= (int)Test.instanceCount;
                iArr1[i8] += i9;
                for (i10 = 10; i10 > 1; i10--) {
                    i2 *= i2;
                    i11 -= i9;
                    iArr1[i8] = (int)Test.instanceCount;
                }
                Test.byFld = (byte)Test.iFld;
            }
        }
        catch (ArithmeticException exc1) {
            s = (short)126;
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + s + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l) {

        int i1=177;

        i1 <<= ((--i1) + (-iMeth(Test.iFld)));
        i1 = i1;
        vSmallMeth_check_sum += l + i1;
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i12=33754, i13=-22116, i14=-28, i15=174, i16=18, i17=244, i18=-120, i19=-15888, i20=159, iArr[]=new
            int[N];
        short s1=-14955;

        FuzzerUtils.init(iArr, -51493);

        i = 1;
        while (++i < 244) {
            fFld = ((iArr[i + 1]--) >> ((Test.instanceCount--) * (Test.byFld - i)));
        }
        for (int smallinvoc=0; smallinvoc<365; smallinvoc++) vSmallMeth(Test.instanceCount);
        Test.instanceCount += Test.instanceCount;
        fFld *= 16.105F;
        iArr[(i >>> 1) % N] = Test.iFld;
        for (i12 = 6; i12 < 247; i12 += 3) {
            fFld = -197;
            i13 += (i12 * i12);
            for (i14 = 2; 313 > i14; i14++) {
                for (i16 = 1; i16 < 2; ++i16) {
                    fFld += (i16 * i14);
                    Test.instanceCount += (long)fFld;
                    i13 *= i;
                    iArr[i16] += i17;
                }
                i18 = 1;
                do {
                    i17 = (int)fFld;
                    i15 += i12;
                    Test.iFld += (int)2.89627;
                    i15 <<= -10;
                    iArr = FuzzerUtils.int1array(N, (int)0);
                    i15 = s1;
                    fFld += i18;
                    lArrFld[i18] <<= i13;
                    Test.iFld -= i15;
                } while (++i18 < 2);
                Test.instanceCount -= i12;
                for (i19 = 1; i19 < 2; ++i19) {
                    s1 = (short)i19;
                    lArrFld[i12] >>= -21293;
                    if (Test.bFld) continue;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
