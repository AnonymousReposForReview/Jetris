package tests.javafuzzer3000;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:43:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2870472133142608117L;
    public static int iFld=-4;
    public static byte byFld=-24;
    public static int iFld1=222;
    public float fFld=81.237F;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        double d=0.7512, d1=0.119692, dArr[][]=new double[N][N];
        int i11=9, i12=14, iArr[]=new int[N];
        long l=18459L;

        FuzzerUtils.init(iArr, 2468);
        FuzzerUtils.init(dArr, -26.65981);

        iArr[(Test.iFld >>> 1) % N] <<= Test.iFld;
        Test.iFld -= Test.iFld;
        d -= Test.iFld;
        for (d1 = 15; 371 > d1; d1++) {
            Test.byFld += (byte)d1;
            for (l = 1; l < 5; ++l) {
                float f1=-101.53F;
                i12 -= i11;
                dArr[(int)(d1 - 1)] = dArr[(int)(d1 - 1)];
                Test.instanceCount >>>= i12;
                if (false) continue;
                f1 = f1;
                Test.instanceCount = -43510L;
                Test.instanceCount ^= Test.iFld;
            }
            i12 -= i11;
            Test.instanceCount = i11;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i11 + l + i12 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i8, int i9, int i10) {

        int i13=12131, i14=228, i15=168, i16=-103, i17=13, i18=-45721, i19=2, i20=-133;
        double d2=-1.63012;
        short s=-19563;
        boolean b=true;

        vMeth1();
        for (i13 = 5; i13 < 177; i13++) {
            for (i15 = 9; i15 > 1; --i15) {
                Test.instanceCount -= i16;
                d2 -= Test.instanceCount;
                i16 = i8;
                s = (short)i10;
                d2 += -4657638241792456244L;
                if (i14 != 0) {
                }
                Test.instanceCount += i9;
            }
            for (i17 = i13; 9 > i17; i17++) {
                for (i19 = 1; 1 > i19; i19 += 3) {
                    i14 = -10414;
                    if (b) continue;
                    i8 -= i14;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d2) + s + i17 + i18 + i19 + i20
            + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=13, i5=-3, i6=-38353, i7=62505, i21=8, iArr1[]=new int[N];
        float f=-2.770F;
        short s1=10580;
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(dArr1, 1.81188);
        FuzzerUtils.init(iArr1, -10377);

        for (i4 = 17; i4 < 336; ++i4) {
            i6 = 1;
            while (++i6 < 5) {
                f = (lArr[i6 + 1]--);
                try {
                    i2 = (i4 / -120);
                    i2 = (i5 % -64948);
                    i5 = (36232 % i6);
                } catch (ArithmeticException a_e) {}
                i7 = 1;
                while (++i7 < 1) {
                    f = Math.min((int)((f + i7) * (Test.instanceCount * f)), iMeth(i3, i4, i5));
                    i2 = i7;
                    dArr1[i7 + 1] -= Test.instanceCount;
                    Test.instanceCount += (((i7 * f) + Test.iFld) - i21);
                    i21 *= (int)Test.instanceCount;
                    i2 = 215;
                    switch (((i6 % 6) * 5) + 38) {
                    case 53:
                        i5 += (i7 ^ Test.instanceCount);
                        i3 -= i7;
                        Test.iFld /= (int)(Test.iFld | 1);
                        break;
                    case 48:
                        iArr1[i4 - 1] -= (int)Test.instanceCount;
                        break;
                    case 42:
                        s1 >>= (short)-58;
                        break;
                    case 50:
                        Test.instanceCount = s1;
                        break;
                    case 41:
                        i5 *= 128;
                        break;
                    case 40:
                        i5 = i5;
                    default:
                        i2 -= i3;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i21 + s1 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-58, i1=-1389, i22=-190, i23=5, i24=9, i25=22067, i26=-14, i27=-205, i28=-13, i29=-65505, i30=-36,
            i31=-5, i32=42492, i33=13, i34=-7, iArr2[]=new int[N];
        short s2=-3803;
        double d3=-56.85293;
        long l1=85L, lArr1[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, -31320);
        FuzzerUtils.init(lArr1, 10864L);

        Test.instanceCount = -19429L;
        for (i = 2; i < 136; i++) {
            vMeth(i1, 46100);
            i1 = i1;
        }
        for (i22 = 12; i22 < 225; ++i22) {
            for (i24 = i22; i24 < 118; ++i24) {
                i25 = (int)Test.instanceCount;
            }
        }
        for (i26 = 4; i26 < 202; i26++) {
            i27 = (int)Test.instanceCount;
        }
        for (i28 = 19; i28 < 364; ++i28) {
            i23 += (((i28 * i23) + Test.instanceCount) - i1);
            if (b1) {
                Test.instanceCount <<= i1;
                i29 *= Test.iFld1;
                Test.instanceCount += -3;
                i25 += -5;
            } else if (b1) {
                for (i30 = 73; i28 < i30; --i30) {
                    i25 = s2;
                }
                for (d3 = 2; d3 < 73; ++d3) {
                    Test.instanceCount -= -186;
                    for (l1 = 1; 2 > l1; l1++) {
                        Test.instanceCount += l1;
                        fFld -= i34;
                        Test.iFld += (int)(((l1 * i28) + fFld) - Test.iFld);
                    }
                    Test.instanceCount = Test.byFld;
                    fFld += (float)(d3 * d3);
                    Test.iFld >>= Test.iFld1;
                    i32 ^= i23;
                    iArr2[i28 + 1] = i25;
                    lArr1[(64750 >>> 1) % N] -= i28;
                }
            } else {
                i32 -= (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
