package tests.javafuzzer1093;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:25:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1610953280873869091L;
    public static int iFld=0;
    public static double dFld=0.40233;
    public int iFld1=58;
    public static byte byFld=-9;
    public static float fFld=-16.471F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth(double d) {

        byte by=60;
        int i6=5;
        float f=0.589F;

        Test.instanceCount -= (Test.iFld++);
        Test.iFld <<= (int)(((Test.instanceCount + 103.18266) - (Test.iFld & by)) % (((long)((Test.iArrFld[(i6 >>> 1) %
            N]--) + (f + i6))) | 1));
        long meth_res = Double.doubleToLongBits(d) + by + i6 + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i12) {

        int i13=249, i14=0, i15=55373, i16=213;
        double d1=109.50298;
        float f2=-2.333F, fArr[]=new float[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8277978871651362699L);
        FuzzerUtils.init(fArr, 17.419F);

        for (i13 = 8; i13 < 255; ++i13) {
            for (i15 = 1; i15 < 7; ++i15) {
                d1 = 1;
                while (++d1 < 2) {
                    Test.dFld *= i14;
                    Test.iFld *= i13;
                    Test.iFld *= (int)f2;
                    if (b1) break;
                    i14 += (int)(d1 - l);
                    i16 = Test.iFld;
                    if (true) {
                        if (b1) break;
                        i12 *= (int)Test.dFld;
                    } else if (b1) {
                        b1 = b1;
                        lArr[i13 - 1] = l;
                        fArr[i15] = f2;
                    } else if (false) {
                        Test.byFld = (byte)229;
                    }
                }
            }
        }
        vMeth1_check_sum += l + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i10, int i11) {

        int i17=7, i18=0, i19=-60531, i20=-5, i21=10, i22=-3, i23=-78;
        boolean b2=false;
        float f3=0.118F;

        vMeth1(Test.instanceCount, i11);
        i10 = Test.iFld;
        i17 = 1;
        while (++i17 < 232) {
            b2 = b2;
            for (i18 = 1; i18 < 7; i18++) {
                for (i20 = i18; i20 < 2; ++i20) {
                    Test.instanceCount += i20;
                }
                i22 = 1;
                do {
                    Test.iFld |= i18;
                } while (++i22 < 2);
                i23 = 1;
                do {
                    f3 -= 538833308L;
                } while (++i23 < 2);
                i11 -= Test.byFld;
                i19 <<= i20;
                i19 = (int)Test.instanceCount;
                if (b2) break;
            }
        }
        vMeth_check_sum += i10 + i11 + i17 + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + i23 +
            Float.floatToIntBits(f3);
    }

    public static long lMeth() {

        int i7=-113, i8=-64367, i9=-32882, i24=-11, i25=-3, i26=-19, i27=12;
        boolean b=false;
        byte by2=121;

        i7 = 1;
        while (++i7 < 215) {
            for (i8 = 1; 7 > i8; ++i8) {
                if (b = b) {
                    i9 -= (iMeth(Test.dFld--) + -242);
                    i9 <<= ((i9--) * (--i9));
                }
                Test.iArrFld[i8 - 1] -= by2;
            }
            i9 -= (int)(--Test.instanceCount);
            vMeth(-3, 8);
        }
        for (i24 = 277; i24 > 6; i24 -= 3) {
            for (i26 = 1; i26 < 17; ++i26) {
                i25 += (i26 - Test.instanceCount);
                Test.fFld -= i27;
                Test.fFld *= -13;
                i25 += i26;
                i27 = i27;
            }
        }
        long meth_res = i7 + i8 + i9 + (b ? 1 : 0) + by2 + i24 + i25 + i26 + i27;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-185, i1=8, i2=0, i3=39444, i4=29490, i5=-62692, i28=3, i29=8, iArr[][]=new int[N][N];
        float f1=0.711F;
        byte by1=-45, byArr[]=new byte[N];
        long l1=-10L;

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(byArr, (byte)-91);

        for (i = 21; i < 337; i++) {
            for (i2 = 4; i2 < 80; ++i2) {
                switch ((((iArr[i][i] >>> 1) % 7) * 5) + 108) {
                case 143:
                    i1 += i2;
                    for (i4 = 1; i4 < 2; i4 += 3) {
                        Test.instanceCount += iMeth((-6496131055022504612L * (Test.instanceCount - 1)) + i);
                        f1 *= (Test.iFld + ((Test.iFld + i5) + (Test.instanceCount * 0.769F)));
                        byArr[i + 1] <<= (byte)(i3++);
                        Test.dFld *= (-60L - (++Test.instanceCount));
                        if (Test.bFld) {
                            i3 = (iFld1 & ((i3--) - (i3 = by1)));
                        } else if (Test.bFld) {
                            iArr[i + 1][i4] <<= (int)lMeth();
                        } else {
                            i1 = i4;
                            i3 = (int)Test.instanceCount;
                            try {
                                iArr[i4][i2] = (61941 / i2);
                                iArr[i][i + 1] = (iFld1 % 98);
                                Test.iArrFld[i4 + 1] = (i / i1);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = -8340300870177587353L;
                        }
                        i1 += (int)-3712495375L;
                        i1 += i4;
                    }
                    i1 *= (int)Test.fFld;
                    Test.iArrFld[i2 - 1] += (int)Test.instanceCount;
                    break;
                case 119:
                    Test.iArrFld[i] += (int)Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 122:
                    i1 >>= i5;
                case 125:
                    Test.dFld = i4;
                    Test.instanceCount += Test.iFld;
                    i1 = i4;
                    break;
                case 127:
                    for (i28 = 2; i < i28; i28 -= 3) {
                        Test.instanceCount -= (long)Test.fFld;
                        i1 = i1;
                        l1 -= i3;
                    }
                    break;
                case 126:
                    Test.iFld ^= i29;
                    break;
                case 134:
                    Test.instanceCount >>= 3287948030L;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
