package tests.javafuzzer87;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:07:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8636654558680225352L;
    public static byte byFld=96;
    public static float fFld=2.772F;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -139);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d2) {

        int i2=-2, i3=-18520, i4=-55, i5=6;
        float f2=-12.733F, f3=-34.141F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.8756);

        i2 += Test.byFld;
        f2 -= i2;
        for (f3 = 1; f3 < 188; ++f3) {
            i3 ^= -195;
            i2 /= (int)(i3 | 1);
            Test.iArrFld[(int)(f3)] = i2;
            i2 = (int)Test.instanceCount;
            dArr[(int)(f3 + 1)] = f3;
            i4 = 1;
            while (++i4 < 9) {
                Test.iArrFld = Test.iArrFld;
                Test.instanceCount += (((i4 * Test.instanceCount) + i2) - i3);
                switch (((i3 >>> 1) % 4) + 112) {
                case 112:
                    i2 += (i4 * i4);
                    i3 = (int)Test.instanceCount;
                    break;
                case 113:
                    f2 %= (i4 | 1);
                case 114:
                    i2 += i4;
                    break;
                case 115:
                    f2 *= f3;
                    break;
                default:
                    Test.byFld = (byte)i5;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + i2 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i3
            + i4 + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(long l, long l1) {

        float f1=-76.602F, f4=0.122F, f5=-1.726F;
        int i1=37537, i6=-1, i7=7, i8=84;
        double d1=0.35567;
        byte by=114;

        try {
            for (f1 = 7; f1 < 181; f1++) {
                d1 = (((--i1) - by) - ((i1 + i1) - (i1 - i1)));
                vMeth1(d1);
                i1 = (int)Test.instanceCount;
                f4 += f1;
                i1 += (int)(f1 * f1);
                i1 = i1;
                for (f5 = 9; f5 > 1; f5--) {
                    for (i7 = 1; i7 < 2; ++i7) {
                        Test.instanceCount ^= i6;
                        f4 = l;
                        f4 += f1;
                        i6 += (((i7 * i7) + i1) - i1);
                    }
                    Test.iArrFld[(int)(f1 - 1)] >>= i1;
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.iArrFld[(-6 >>> 1) % N] = i8;
        }
        vMeth_check_sum += l + l1 + Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d1) + by +
            Float.floatToIntBits(f4) + Float.floatToIntBits(f5) + i6 + i7 + i8;
    }

    public static void vSmallMeth(double d) {


        vMeth(Test.instanceCount, Test.instanceCount);
        Test.fFld += 14;
        vSmallMeth_check_sum += Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        float f=0.194F, f6=63.920F;
        int i=58434, i9=58149, i10=-31, i11=-16399, i12=-39477, i13=28143, i14=48, i15=-99;
        double d3=54.13714;
        short s=19625;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        for (f = 20; f < 340; f++) {
            i = (int)Float.intBitsToFloat(-(i + i));
        }
        i *= i;
        for (int smallinvoc=0; smallinvoc<670; smallinvoc++) vSmallMeth(d3);
        i = (int)Test.instanceCount;
        i = i;
        Test.fFld = i;
        Test.instanceCount >>>= i;
        for (f6 = 3; 215 > f6; ++f6) {
            i += (int)(f6 * f6);
            for (i10 = 3; i10 < 118; i10++) {
                d3 *= i11;
                for (i12 = 1; i12 < 2; i12++) {
                    Test.iArrFld[i10] = -21821;
                    i11 += i10;
                }
                i11 -= (int)f6;
                switch (((i10 % 3) * 5) + 12) {
                case 18:
                    Test.fFld += -127;
                    lArr[(int)(f6 + 1)] >>= Test.instanceCount;
                    Test.iArrFld[i10] |= i13;
                    break;
                case 16:
                    switch (((-67 >>> 1) % 6) + 54) {
                    case 54:
                        i9 >>>= i10;
                        Test.iArrFld = Test.iArrFld;
                        for (i14 = 1; 2 > i14; ++i14) {
                            s = (short)f;
                            i += (i14 - i13);
                            i += i14;
                            i = (int)Test.instanceCount;
                            if (b) break;
                            Test.iArrFld[i10 + 1] <<= i12;
                        }
                    case 55:
                    case 56:
                        i13 *= i13;
                        break;
                    case 57:
                        i15 ^= -182;
                        break;
                    case 58:
                        i13 ^= (int)Test.instanceCount;
                        break;
                    case 59:
                        Test.instanceCount *= i9;
                    default:
                        i13 += (40594 + (i10 * i10));
                    }
                case 25:
                    s ^= (short)Test.instanceCount;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
