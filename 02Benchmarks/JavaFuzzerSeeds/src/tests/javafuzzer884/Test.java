package tests.javafuzzer884;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:18:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=64367L;
    public static int iFld=-2;
    public static double dFld=0.18448;
    public static short sFld=31163;
    public static float fFld=-89.908F;
    public byte byFld=112;
    public long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 123.211F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12, double d, float f) {

        int i13=129, i14=-69, i15=160, i16=99, i17=8, i18=63993, iArr2[]=new int[N];
        byte by=-38;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 165L);
        FuzzerUtils.init(iArr2, 7);

        Test.iFld |= 1;
        for (i13 = 13; i13 < 305; ++i13) {
            by += (byte)(i13 ^ Test.instanceCount);
        }
        by += (byte)i13;
        i14 = (int)-9189185262717044483L;
        for (i15 = 140; i15 > 6; i15--) {
            i12 += (59535 + (i15 * i15));
            lArr[i15] += (long)-113.483F;
            i14 *= (int)Test.instanceCount;
            iArr2[i15] -= (int)Test.instanceCount;
            switch ((((i12 >>> 1) % 1) * 5) + 113) {
            case 116:
                for (i17 = 12; i17 > 1; i17 -= 3) {
                    i16 = Test.sFld;
                    if (b) continue;
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += i12 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i13 + i14 + by
                            + i15 + i16 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i13 + i14 + by + i15 + i16 +
            i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l) {

        float f1=-1.669F;
        byte by1=-37;
        int i19=-2, i20=52909, i21=-14, i22=9, i23=-1, i24=-8067, iArr3[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr3, 203);

        vMeth1(16, Test.dFld, f1);
        l |= by1;
        i19 = 1;
        do {
            for (i20 = 1; i20 < 17; i20++) {
                iArr3[i19] = (int)Test.instanceCount;
                if (b1) break;
                f1 = Test.iFld;
                i22 = 1;
                do {
                    i21 = Test.iFld;
                } while (++i22 < 2);
            }
            iArr3[i19] -= (int)f1;
            for (i23 = 1; 17 > i23; i23++) {
                by1 = (byte)i22;
                Test.sFld *= (short)i23;
                i21 = Test.iFld;
                Test.instanceCount = Test.iFld;
            }
        } while ((i19 += 3) < 267);
        vMeth_check_sum += l + Float.floatToIntBits(f1) + by1 + i19 + i20 + i21 + (b1 ? 1 : 0) + i22 + i23 + i24 +
            FuzzerUtils.checkSum(iArr3);
    }

    public static long lMeth(int i6) {

        int i7=111, i8=205, i10=-57195, i11=-34230, i25=253, i26=2, iArr1[]=new int[N];
        byte by2=-10, byArr[]=new byte[N];
        boolean b2=true;

        FuzzerUtils.init(iArr1, 174);
        FuzzerUtils.init(byArr, (byte)56);

        for (i7 = 3; 200 > i7; ++i7) {
            Test.iFld >>= (int)((Test.iFld - (i6 - 46867)) * ((Test.instanceCount + 47323) - (++Test.fArrFld[i7 - 1][i7
                - 1])));
            for (i10 = i7; i10 < 8; ++i10) {
                i6 &= (Test.sFld >>= (short)Integer.reverseBytes((int)(-(Test.instanceCount + -57413))));
                Test.fArrFld[i10][i7 - 1] -= Test.instanceCount;
                vMeth(Test.instanceCount);
                i8 += i10;
                i25 = 1;
                while ((i25 -= 2) > 0) {
                    if (i25 != 0) {
                    }
                    try {
                        i6 = (-82 / i11);
                        i8 = (i8 % iArr1[i7]);
                        i11 = (i8 % iArr1[i10]);
                    } catch (ArithmeticException a_e) {}
                    byArr[i25 - 1] = (byte)52;
                    Test.iFld -= i6;
                    Test.fFld += by2;
                    if (b2) continue;
                    if (i26 != 0) {
                    }
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i10 + i11 + i25 + by2 + (b2 ? 1 : 0) + i26 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=68, i1=-9565, i2=11, i3=20495, i4=63509, i5=14149, i27=-2, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 197);

        Test.iFld += (int)((Test.instanceCount = Integer.reverseBytes(Test.iFld)) - lArrFld[(21856 >>> 1) % N]);
        Test.iFld -= (int)((--Test.instanceCount) ^ (Test.iFld--));
        for (i = 16; i < 360; i++) {
            for (i2 = 1; 73 > i2; ++i2) {
                for (i4 = i2; i4 < 2; i4++) {
                    switch ((i2 % 2) + 109) {
                    case 109:
                        Test.instanceCount += i4;
                        i5 = (int)(((Test.dFld--) - i1) + iArr[i2 + 1]);
                        i3 *= (int)(((++i5) - lMeth(i3)) * Test.fFld);
                        switch ((i2 % 4) + 83) {
                        case 83:
                            byFld *= (byte)Test.iFld;
                            i5 *= (int)Test.fFld;
                            break;
                        case 84:
                            Test.fFld += i4;
                            i5 += i4;
                            iArr[i - 1] = i1;
                            break;
                        case 85:
                            i1 <<= (int)Test.instanceCount;
                            Test.dFld /= (Test.instanceCount | 1);
                            Test.instanceCount += (long)Test.fFld;
                            break;
                        case 86:
                            Test.instanceCount += i3;
                            Test.fArrFld = Test.fArrFld;
                            i3 = i5;
                        default:
                            Test.fFld += -243;
                            i1 *= i1;
                            Test.instanceCount += (((i4 * Test.instanceCount) + Test.iFld) - i27);
                        }
                        break;
                    case 110:
                        Test.iFld = (int)-43.749F;
                        lArrFld[i - 1] = 172L;
                        Test.instanceCount *= Test.instanceCount;
                    default:
                        i27 *= (int)Test.instanceCount;
                        Test.instanceCount = (long)Test.dFld;
                        i3 += 28278;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
