package tests.javafuzzer2910;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:58:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1596L;
    public static short sFld=2821;
    public static boolean bFld=false;
    public static float fFld=-2.209F;
    public static double dFld=115.93266;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -248L);
        FuzzerUtils.init(Test.iArrFld, -9164);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f, int i3, long l1) {

        int i4=-58954, i5=-133, i6=-16461, i7=54, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -3);

        for (i4 = 237; i4 > 10; --i4) {
            i5 = i5;
            i6 = 1;
            while (++i6 < 7) {
                i3 = i3;
                i3 %= (int)(i4 | 1);
                Test.instanceCount += (((i6 * Test.instanceCount) + i3) - i5);
                i7 = 1;
                do {
                    Test.bFld = Test.bFld;
                    Test.instanceCount = i6;
                    l1 = i3;
                    if (Test.bFld) break;
                    iArr[i4] >>= i6;
                    i3 *= (int)f;
                    l1 += i7;
                    i3 += (i7 + f);
                } while (++i7 < 1);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i3 + l1 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(short s, long l) {

        int i8=9, i9=-52328, i10=-3, i11=10200;
        long l2=126L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 24.867F);

        vMeth(Test.fFld, i8, -4377L);
        i9 = 1;
        while (++i9 < 166) {
            l += -113;
            i10 = 1;
            while (++i10 < 10) {
                for (l2 = i9; l2 < 1; l2 += 2) {
                    double d=-118.9473;
                    fArr[(int)(l2 - 1)] %= ((long)(d) | 1);
                    l += (long)d;
                    i11 += (-11 + (l2 * l2));
                }
            }
            Test.lArrFld[i9 - 1] -= Test.instanceCount;
            if (Test.bFld) break;
            Test.iArrFld[i9] -= (int)l;
            Test.instanceCount += (long)Test.fFld;
            Test.bFld = false;
        }
        l = i10;
        i8 <<= i10;
        long meth_res = s + l + i8 + i9 + i10 + l2 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i2) {

        int i13=6, i14=7, i15=-14, i16=12, i17=-2, i18=51078, i19=-58068;
        byte by=-18;
        double d1=1.38961;

        Test.instanceCount -= ((Test.sFld - -28) - iMeth(Test.sFld, Test.instanceCount));
        i2 += 205;
        for (i13 = 7; i13 < 157; ++i13) {
            by = (byte)i14;
            Test.instanceCount = -2996189729L;
            for (i15 = i13; i15 < 11; i15++) {
                Test.iArrFld[i15] -= i2;
                i14 -= Test.sFld;
                switch ((((14 >>> 1) % 9) * 5) + 102) {
                case 138:
                    i2 %= (int)(i16 | 1);
                    Test.fFld += i15;
                    for (i17 = 1; 1 > i17; i17++) {
                        i14 >>= i17;
                        i18 += (((i17 * Test.instanceCount) + i16) - i19);
                        Test.iArrFld[i15 - 1] += (int)d1;
                    }
                    break;
                case 127:
                    Test.iArrFld[i13] += i15;
                    break;
                case 108:
                    by += (byte)(i15 * i15);
                    break;
                case 142:
                case 120:
                    i18 = Test.sFld;
                case 129:
                    i18 += (int)Test.instanceCount;
                    break;
                case 134:
                    i14 = i17;
                case 124:
                    by -= (byte)Test.instanceCount;
                    break;
                case 109:
                    i2 += -31;
                    break;
                default:
                    i16 -= i13;
                }
            }
        }
        long meth_res = i2 + i13 + i14 + by + i15 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-975, i1=-14, i20=-4, i21=-36112, i22=-250, i23=-33, i24=6, i25=-23803, i26=-23946;
        float f1=-120.22F, f2=0.124F, f3=-101.318F;

        i = 1;
        while (++i < 164) {
            i1 = (int)(lMeth(i1) / ((long)(Test.fFld) | 1));
            i1 *= i;
        }
        Test.dFld += i1;
        Test.fFld = Test.instanceCount;
        i1 = i;
        for (i20 = 3; i20 < 209; i20++) {
            for (i22 = 4; i22 < 122; ++i22) {
                if (Test.bFld) continue;
                Test.iArrFld[i22 + 1] >>= (int)Test.instanceCount;
            }
            Test.instanceCount += (long)93.87363;
            i21 -= (int)Test.fFld;
            i1 += (i20 | i22);
        }
        for (f1 = 176; f1 > 3; --f1) {
            f2 = 1;
            do {
                i1 *= (int)f1;
                Test.lArrFld[(int)(f2 - 1)] = -151;
                Test.lArrFld[(int)(f2)] &= i1;
                i21 = i20;
                Test.dFld -= Test.instanceCount;
                for (i25 = 1; 1 > i25; ++i25) {
                    Test.bFld = Test.bFld;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)44699);
                    i26 = i20;
                }
                i23 &= -77;
                i23 *= (int)Test.instanceCount;
                Test.iArrFld[(int)(f2 + 1)] -= (int)Test.instanceCount;
            } while (++f2 < 145);
            f3 = 1;
            while (++f3 < 145) {
                i1 += 10;
                Test.fFld += (f3 - Test.instanceCount);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
