package tests.javafuzzer2561;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:39:32 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public volatile int iFld=1;
    public static short sFld=23225;
    public static boolean bFld=false;
    public static float fFld=0.817F;
    public static double dFld=-2.9695;
    public volatile int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i5, int i6) {

        float f=99.652F;
        int i7=51995, i8=-26183, i9=10372, i10=-10, i11=5484, iArr1[]=new int[N];
        double d=-61.47855;
        byte by=-73;
        boolean b=true;

        FuzzerUtils.init(iArr1, 7);

        i6 = i6;
        f = -7252;
        for (i7 = 4; 310 > i7; i7++) {
            i5 += (int)d;
            if (i6 != 0) {
                vMeth1_check_sum += l + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + Double.doubleToLongBits(d) + by +
                    i9 + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i8 += i8;
            Test.instanceCount %= (by | 1);
            for (i9 = 1; i9 < 5; i9++) {
                switch (((i8 >>> 1) % 2) + 45) {
                case 45:
                    l >>= -64;
                    i8 = (int)Test.instanceCount;
                    break;
                case 46:
                    iArr1[i9 - 1] -= (int)f;
                    i11 = 1;
                    do {
                        b = b;
                        i5 -= i5;
                    } while (++i11 < 2);
                    break;
                }
            }
        }
        vMeth1_check_sum += l + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + Double.doubleToLongBits(d) + by + i9 +
            i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i2, int i3, int i4) {

        int i12=-11, i13=-59003, i14=-144, i15=1, i16=114, iArr2[]=new int[N];
        float f1=0.581F;
        byte by1=61;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -92);

        vMeth1(Test.instanceCount, i2, i2);
        for (i12 = 12; i12 < 216; i12++) {
            iArr2[i12 + 1] *= Test.sFld;
            if (b1) {
                for (f1 = 1; 8 > f1; ++f1) {
                    i13 += (int)f1;
                    i14 = i2;
                    iArr2[i12 - 1] = i2;
                    for (i15 = (int)(f1); i15 < 2; i15++) {
                        switch ((i12 % 4) + 80) {
                        case 80:
                            i2 = -60;
                            if (false) continue;
                            Test.instanceCount += -11;
                            i4 += (int)f1;
                            break;
                        case 81:
                            by1 += (byte)(i15 * Test.instanceCount);
                            break;
                        case 82:
                            i4 += (((i15 * f1) + i4) - Test.instanceCount);
                        case 83:
                            i4 >>= i15;
                            break;
                        default:
                            by1 = (byte)i14;
                        }
                    }
                }
            } else if (b1) {
                by1 = (byte)Test.sFld;
            } else {
                i2 -= i16;
            }
        }
        long meth_res = i2 + i3 + i4 + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 + by1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int iArr[]=new int[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr, 20);
        FuzzerUtils.init(bArr, true);

        iArr[(i >>> 1) % N] = (int)((lMeth(i1, i1, i) | 13225) - i);
        i1 <<= i;
        bArr[(i >>> 1) % N] = bArr[(i1 >>> 1) % N];
        vMeth_check_sum += i + i1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=35343, i18=43123, i19=-40, i20=-43409, i21=135, i22=0, i23=-8;
        double d1=124.72490;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.178F);

        Test.instanceCount += iFld;
        vMeth(6, iFld);
        iFld &= iFld;
        Test.bFld = Test.bFld;
        iArrFld[(iFld >>> 1) % N] >>= 2;
        iArrFld[(iFld >>> 1) % N] = (int)Test.instanceCount;
        iFld = (int)Test.instanceCount;
        for (i17 = 6; 142 > i17; ++i17) {
            i18 += (i17 * i17);
        }
        for (d1 = 7; d1 < 141; ++d1) {
            Test.sFld += (short)(d1 - i18);
            i19 += (int)(((d1 * Test.fFld) + Test.instanceCount) - i18);
            switch ((int)(((d1 % 6) * 5) + 108)) {
            case 116:
                Test.fFld *= i18;
                for (i20 = 4; i20 < 187; ++i20) {
                    switch ((int)((d1 % 8) + 51)) {
                    case 51:
                        for (i22 = 1; i22 < 2; ++i22) {
                            iFld += (i22 * i23);
                            Test.instanceCount += (long)Test.fFld;
                            iArrFld[(int)(d1)] -= i18;
                        }
                        i18 -= 11;
                        i19 = -119;
                    case 52:
                        Test.dFld += i20;
                        Test.instanceCount -= Test.sFld;
                        i23 = 0;
                        Test.bFld = Test.bFld;
                    case 53:
                        Test.instanceCount += (5 + (i20 * i20));
                        break;
                    case 54:
                        try {
                            i23 = (i22 / i18);
                            iArrFld[(int)(d1 - 1)] = (i20 % -58216);
                            i19 = (-44568 % i20);
                        } catch (ArithmeticException a_e) {}
                        i21 += (int)1.706F;
                        Test.fFld += (i20 * i20);
                    case 55:
                        i21 += i20;
                        break;
                    case 56:
                        try {
                            i23 = (iArrFld[i20] / i22);
                            i19 = (i18 % 13071);
                            i19 = (10552 / i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 57:
                        i21 += (i20 * i21);
                        break;
                    case 58:
                        i21 += -39;
                        break;
                    default:
                        i19 ^= i21;
                    }
                }
                break;
            case 138:
                fArr = fArr;
                break;
            case 125:
                i18 -= i20;
                break;
            case 131:
                i19 >>= -53;
                break;
            case 132:
                Test.instanceCount -= 8L;
                break;
            case 123:
                iArrFld[(int)(d1 - 1)] -= (int)Test.instanceCount;
                break;
            default:
                i19 += (int)(d1 + Test.instanceCount);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
