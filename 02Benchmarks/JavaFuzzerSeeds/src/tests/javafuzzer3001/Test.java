package tests.javafuzzer3001;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:43:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static int iFld=-25455;
    public static byte byFld=-20;
    public static int iFld1=4;
    public volatile long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, 20L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(double d1, long l1, long l2) {

        int i2=51427, i3=-40512, i4=-9, i5=-248, i6=238, i7=-8, i8=102, i9=35109, iArr1[][]=new int[N][N];
        float f=-64.413F;

        FuzzerUtils.init(iArr1, -15851);

        for (i2 = 2; i2 < 209; i2++) {
            for (i4 = 1; i4 < 8; i4++) {
                Test.byFld -= (byte)2.792F;
                for (i6 = 1; i6 < 2; i6++) {
                    i7 -= i3;
                    i7 += (int)l2;
                    i7 += i2;
                }
                Test.lArrFld1[i4 + 1][i4] -= i6;
                i7 = i5;
                l2 = l2;
                i8 = 1;
                while (++i8 < 2) {
                    i3 /= (int)-5.3006;
                }
                for (f = 1; 2 > f; ++f) {
                    iArr1[i4 - 1][i2] = (int)2.473F;
                    iArr1[i4 - 1][i4] += Test.byFld;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + l1 + l2 + i2 + i3 + i4 + i5 + i6 + i7 + i8 +
            Float.floatToIntBits(f) + i9 + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i1) {

        double d2=0.21094;
        float f1=32.116F;
        int i10=23620, i11=27194;
        boolean b=false;
        long l3=-2L;

        lArrFld[(33 >>> 1) % N] = (long)(lMeth1(d2, -1423858090540551481L, Test.instanceCount) + d2);
        f1 = 1;
        do {
            i10 = 1;
            do {
                i11 = 1;
                while (++i11 < 1) {
                    if (b) break;
                    fArrFld[i11] -= i11;
                    i1 *= i10;
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + i10 + i11 + (b
                            ? 1 : 0) + l3;
                        return;
                    }
                    i1 >>>= (int)Test.instanceCount;
                }
            } while (++i10 < 12);
            Test.instanceCount = Test.instanceCount;
            fArrFld[(int)(f1)] += -147L;
            l3 = 1;
            do {
                Test.iFld += i11;
                Test.instanceCount += i1;
                Test.instanceCount *= 52938L;
            } while (++l3 < 12);
        } while (++f1 < 128);
        vMeth_check_sum += i1 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + i10 + i11 + (b ? 1 : 0) + l3;
    }

    public long lMeth(int i, long l) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 144);

        vMeth(i);
        iArr2[(Test.iFld >>> 1) % N] = (int)-2.593F;
        long meth_res = i + l + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-22.115377, dArr[]=new double[N];
        int i12=-101, i13=-8, i14=159, i15=-15736, i16=4971, i17=10, i18=-13, i19=43893, i20=-44467, i21=-7,
            i22=-65390, i23=12, i24=132, iArr[]=new int[N];
        float f2=-9.814F, f3=-1.918F;
        long l4=-38L;
        boolean b1=false;
        short s=1445;

        FuzzerUtils.init(iArr, -22856);
        FuzzerUtils.init(dArr, 90.97756);

        d *= iArr[(Test.iFld >>> 1) % N];
        lArrFld[(3 >>> 1) % N] = lMeth(0, Test.instanceCount);
        for (i12 = 17; i12 < 330; i12 += 2) {
            i13 *= i12;
            Test.iFld += (i12 ^ i13);
        }
        for (i14 = 6; i14 < 389; ++i14) {
            i13 -= i12;
            Test.instanceCount = -8;
        }
        for (f2 = 9; f2 < 289; ++f2) {
            for (i17 = 1; 90 > i17; ++i17) {
                for (l4 = i17; l4 < 2; ++l4) {
                    Test.iFld1 <<= i12;
                    f3 += f3;
                    Test.byFld *= (byte)18776;
                    Test.instanceCount *= i16;
                    b1 = b1;
                }
                Test.instanceCount = i19;
                iArr[i17 - 1] -= -49132;
                for (i20 = 1; i20 < 2; ++i20) {
                    try {
                        i22 = (i21 / -43);
                        i18 = (iArr[i20 - 1] / i12);
                        Test.iFld1 = (48 / i15);
                    } catch (ArithmeticException a_e) {}
                }
                Test.instanceCount += (-18887L + (i17 * i17));
                if (b1) continue;
                f3 *= i12;
            }
            if (b1) break;
            i13 = i22;
            iArr[(int)(f2)] = -39;
        }
        dArr[(i18 >>> 1) % N] -= i12;
        for (i23 = 8; i23 < 282; i23++) {
            d -= s;
            Test.instanceCount -= Test.iFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
