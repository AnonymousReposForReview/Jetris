package tests.javafuzzer1154;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:55:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-45480L;
    public static short sFld=-25352;
    public static boolean bFld=true;
    public static int iFld=-15073;
    public static float fFld=-2.555F;
    public static byte byFld=18;
    public static int iArrFld[]=new int[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 184);
        FuzzerUtils.init(Test.byArrFld, (byte)-88);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, float f, int i4) {

        int i5=10, i6=-12, i7=-7314;
        byte by=-47;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -807440209135011729L);

        i4 = 25;
        i4 = (int)-2198692951992387335L;
        for (i5 = 15; 312 > i5; i5++) {
            i7 = 6;
            do {
                by += (byte)(i7 ^ l);
                Test.instanceCount = Test.sFld;
                l = i7;
                switch ((((-6 >>> 1) % 5) * 5) + 122) {
                case 129:
                    b = false;
                    Test.iArrFld[i5 - 1] -= by;
                    break;
                case 124:
                    i4 -= (int)f;
                    if (false) continue;
                    i6 <<= 7018;
                case 134:
                    Test.sFld += (short)i7;
                    break;
                case 138:
                    lArr[i5] -= 13081;
                    break;
                case 127:
                    i6 += (i7 + i5);
                }
            } while (--i7 > 0);
        }
        long meth_res = l + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + by + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2, int i3) {

        float f1=0.761F;
        int i8=221, i9=-239, i10=59, i11=-61343, i12=35675;
        long l1=80L;

        i3 -= (i2 - ((19744 >> (++Test.iArrFld[(i3 >>> 1) % N])) + (i2 = i1)));
        iMeth(Test.instanceCount, f1, i3);
        i2 >>= i3;
        for (i8 = 193; i8 > 12; i8 -= 2) {
            for (l1 = 17; l1 > 1; l1--) {
                i9 *= i2;
                if (Test.bFld) continue;
                Test.instanceCount <<= i1;
                i2 >>= i8;
            }
        }
        Test.byArrFld[(i10 >>> 1) % N] += (byte)i3;
        i1 %= (int)(i9 | 1);
        for (i11 = 8; i11 < 319; ++i11) {
            if (i2 != 0) {
                vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f1) + i8 + i9 + l1 + i10 + i11 + i12;
                return;
            }
            Test.iArrFld[i11 + 1] %= (int)(i11 | 1);
            i3 += (((i11 * i11) + i12) - i10);
        }
        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f1) + i8 + i9 + l1 + i10 + i11 + i12;
    }

    public static void vMeth() {

        long l2=-1524763312L;
        int i13=4, i14=-42, i15=43, i16=-143;
        float f2=-2.496F;
        double d1=54.40794;

        vMeth1(-61943, Test.iFld, Test.iFld);
        for (l2 = 10; l2 < 331; l2++) {
            for (i14 = (int)(l2); i14 < 5; ++i14) {
                byte by1=-28;
                i15 = i13;
                Test.instanceCount += l2;
                i13 = Test.iFld;
                by1 += (byte)i14;
                Test.iFld += (((i14 * Test.instanceCount) + i14) - i14);
                f2 += Test.iFld;
                i13 <<= i15;
                Test.instanceCount -= i14;
                f2 *= Test.iFld;
            }
            i16 = 1;
            do {
                i15 -= (int)f2;
                d1 /= -69.535F;
            } while (++i16 < 5);
        }
        vMeth_check_sum += l2 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=8, i17=-14, i18=77, i19=-250, i20=-62, i21=-131, i22=3, i23=28605, i24=-47681;
        double d=0.69304;
        long l3=-2386841244L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 7811483937948882554L);
        FuzzerUtils.init(fArr, -2.210F);

        i += (Math.max(-57530, (int)(d + i)) * Test.iArrFld[(16999 >>> 1) % N]);
        vMeth();
        i = (int)Test.instanceCount;
        lArr1 = lArr1;
        for (i17 = 10; i17 < 220; i17++) {
            Test.instanceCount = i17;
            i19 = 1;
            do {
                i18 -= (int)d;
            } while (++i19 < 120);
            fArr[i17] -= Test.fFld;
            i -= (int)15486L;
            for (l3 = 2; l3 < 120; l3++) {
                i21 = 1;
                do {
                    Test.instanceCount *= 2341264611L;
                    i18 = (int)l3;
                    i20 += (int)l3;
                    d = i19;
                    Test.fFld -= Test.instanceCount;
                    Test.instanceCount = Test.iFld;
                    Test.iArrFld[(int)(l3)] -= i18;
                    try {
                        Test.iArrFld[(int)(l3)] = (-21 / i17);
                        i18 = (12318 / i20);
                        i22 = (i21 / -222);
                    } catch (ArithmeticException a_e) {}
                    if (true) continue;
                } while (++i21 < 2);
                switch ((i17 % 7) + 59) {
                case 59:
                    Test.iFld += (int)(l3 - Test.byFld);
                    Test.iFld = 47404;
                    fArr[i17] = i21;
                case 60:
                    try {
                        i = (-1878575111 / Test.iFld);
                        i = (Test.iArrFld[i17] / 10892);
                        i = (44989 % i18);
                    } catch (ArithmeticException a_e) {}
                    for (i23 = 1; i23 < 2; i23 += 2) {
                        i *= i23;
                        Test.instanceCount /= (i18 | 1);
                        Test.instanceCount -= (long)-1.458F;
                    }
                    break;
                case 61:
                    Test.fFld += l3;
                case 62:
                    Test.fFld *= Test.instanceCount;
                    break;
                case 63:
                    Test.instanceCount >>= -2190712960L;
                    break;
                case 64:
                    Test.instanceCount = -13;
                case 65:
                    lArr1[(int)(l3 - 1)] = 60388;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
