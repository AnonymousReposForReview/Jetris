package tests.javafuzzer2550;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:28:26 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-58135L;
    public int iFld=-157;
    public static boolean bFld=false;
    public short sFld=-16684;
    public static byte byFld=-7;
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];
    public short sArrFld[]=new short[N];
    public static float fArrFld[]=new float[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4609007684651180432L);
        FuzzerUtils.init(Test.fArrFld, 0.841F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        short s=29866;
        int i4=-179, i5=179, i6=-136, i7=-10, i8=109, i9=39569, iArr[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr, -23985);

        i3 -= -26769;
        iArr[(i3 >>> 1) % N][(i3 >>> 1) % N] >>= i3;
        i3 -= i3;
        i3 |= s;
        i3 = 7068;
        for (i4 = 359; 6 < i4; i4--) {
            try {
                i3 = (20336 % iArr[i4 + 1][i4]);
                i3 = (iArr[i4 + 1][i4 + 1] / iArr[i4 + 1][i4 - 1]);
                i5 = (i3 % 90);
            } catch (ArithmeticException a_e) {}
            for (i6 = 5; i6 > 1; i6 -= 3) {
                for (i8 = i4; 5 > i8; i8++) {
                    i7 -= (int)Test.instanceCount;
                    if (b) continue;
                    Test.lArrFld[i8 - 1] = s;
                    Test.instanceCount >>= i6;
                }
                i5 = (int)Test.instanceCount;
                i7 += (i6 + Test.instanceCount);
            }
        }
        vMeth2_check_sum += i3 + s + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(int i, int i1, int i2) {

        int i10=56506, i11=-24290, i12=-7, i13=-7, i14=8, iArr1[]=new int[N];
        float f=2.464F;
        byte by=-54;

        FuzzerUtils.init(iArr1, 221);

        vMeth2(i1);
        i10 = 1;
        do {
            for (i11 = 1; i11 < 12; i11++) {
                Test.instanceCount = i2;
                iArr1[i10] >>= i10;
                for (i13 = 1; 2 > i13; ++i13) {
                    i2 = iFld;
                    i1 += (i13 - iFld);
                }
                switch (((i11 % 8) * 5) + 116) {
                case 138:
                    i14 >>>= (int)Test.instanceCount;
                    break;
                case 124:
                    iArr1[i10 - 1] &= (int)Test.instanceCount;
                case 121:
                    if (Test.bFld) break;
                    if (false) {
                        i1 *= i;
                        i2 += i11;
                    } else if (Test.bFld) {
                        f *= Test.instanceCount;
                    } else if (Test.bFld) {
                        Test.instanceCount *= i11;
                    }
                    break;
                case 152:
                    Test.lArrFld[i11 - 1] = -138L;
                    break;
                case 135:
                    i14 += (((i11 * f) + i) - by);
                case 132:
                    Test.lArrFld[i10 + 1] <<= i1;
                    break;
                case 125:
                case 134:
                    bArrFld[i11 - 1] = Test.bFld;
                    break;
                default:
                    Test.instanceCount <<= Test.instanceCount;
                }
            }
        } while (++i10 < 133);
        vMeth1_check_sum += i + i1 + i2 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {

        long l=-2L;
        int i15=165, i16=-15319, i17=-10, i18=-100, i19=-4;
        float f2=-13.164F;
        double d=97.45865;

        vMeth1(-94, iFld, iFld);
        iFld %= (int)(Test.instanceCount | 1);
        sArrFld[(iFld >>> 1) % N] -= (short)iFld;
        for (float f1 : Test.fArrFld) {
            f1 += iFld;
            Test.instanceCount = l;
            for (i15 = 1; i15 < 4; ++i15) {
                iFld += (int)l;
                for (f2 = 2; 1 < f2; f2--) {
                    l &= l;
                    d *= -45806;
                }
            }
            for (i18 = 1; i18 < 4; ++i18) {
                if (Test.bFld) continue;
                i19 = i16;
                sFld = sFld;
            }
        }
        vMeth_check_sum += l + i15 + i16 + Float.floatToIntBits(f2) + i17 + Double.doubleToLongBits(d) + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i20=-134, i21=-2, i22=85, i23=16111, i24=-251, i25=64813;
        double d1=-2.62880;
        float f3=0.727F;

        Test.instanceCount += (long)2.598F;
        iFld *= iFld;
        Test.instanceCount += Test.lArrFld[(155 >>> 1) % N];
        vMeth();
        iArrFld[(iFld >>> 1) % N][(167 >>> 1) % N] <<= (int)-2L;
        for (i20 = 11; i20 < 225; i20++) {
            if (Test.bFld) break;
            Test.instanceCount = i21;
            for (i22 = 117; i22 > 3; --i22) {
                d1 %= (i20 | 1);
                for (i24 = 1; 2 > i24; i24++) {
                    i21 <<= -97;
                    if (Test.bFld) break;
                    switch (((iFld >>> 1) % 2) + 37) {
                    case 37:
                        iArrFld[i24 - 1][i22 + 1] += i24;
                        i21 *= i21;
                        i23 = i21;
                        Test.instanceCount += iFld;
                        break;
                    case 38:
                        bArrFld[i24 + 1] = Test.bFld;
                        i23 += (i24 * i24);
                        break;
                    default:
                        iFld = i24;
                    }
                    sFld += (short)iFld;
                    try {
                        i25 = (iFld / 245);
                        iArrFld[i20 - 1][i20 - 1] = (iFld % -184);
                        i23 = (iArrFld[i22 - 1][i24 - 1] / -40048);
                    } catch (ArithmeticException a_e) {}
                }
                d1 += i20;
                iFld += (i22 * i22);
                i23 = (int)f3;
                iFld += (((i22 * Test.instanceCount) + i24) - i24);
            }
            i25 += (((i20 * i23) + i20) - f3);
        }
        Test.byFld += (byte)iFld;
        i21 >>= (int)Test.instanceCount;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
