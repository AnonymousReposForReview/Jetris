package tests.javafuzzer3029;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:59:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-22701L;
    public static volatile byte byFld=-10;
    public static int iFld=236;
    public boolean bFld=true;
    public static volatile boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, -8045447415540958283L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-168, i4=4657, i5=-6, i6=-159, i7=24359;
        boolean b=true;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 123.119966);

        Test.instanceCount = i3;
        Test.instanceCount = Test.instanceCount;
        for (i4 = 192; i4 > 8; --i4) {
            for (i6 = i4; i6 < 9; i6++) {
                float f=-2.491F;
                Test.instanceCount = i4;
                Test.instanceCount *= 21277;
                f += i5;
                i5 ^= (int)Test.instanceCount;
                i7 = (int)-1101248663L;
                dArr = dArr;
                i5 += i6;
            }
            Test.bArrFld[i4] = b;
            if (i6 != 0) {
                vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
        }
        i5 -= i6;
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i2=-26423, i8=-99, i9=16557, i10=17391, iArr[]=new int[N];
        double d1=0.41542;
        float f1=-1.74F, fArr1[]=new float[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 2.866F);
        FuzzerUtils.init(iArr, -8748);
        FuzzerUtils.init(lArr, 1771047707990261073L);

        i2 = 1;
        do {
            vMeth2();
            if (b1) {
                for (i8 = 1; 5 > i8; ++i8) {
                    i9 = -34;
                    i9 -= (int)-8L;
                    switch ((i2 % 10) + 21) {
                    case 21:
                        i9 += i8;
                        break;
                    case 22:
                        for (d1 = 1; d1 < 2; d1++) {
                            i10 = (int)Test.instanceCount;
                            fArr1[(i9 >>> 1) % N] *= Test.byFld;
                            iArr[i2] = i2;
                            iArr[(int)(d1 + 1)] += (int)d1;
                            i9 += i10;
                            i9 *= (int)Test.instanceCount;
                        }
                        break;
                    case 23:
                        fArr1[i2] %= (i8 | 1);
                        break;
                    case 24:
                        Test.instanceCount += -192;
                        break;
                    case 25:
                        i9 += i8;
                        break;
                    case 26:
                        i10 <<= i2;
                        break;
                    case 27:
                        Test.instanceCount += Test.byFld;
                        break;
                    case 28:
                        i10 -= i9;
                        break;
                    case 29:
                        f1 -= i9;
                        break;
                    case 30:
                        i9 = (int)d1;
                        break;
                    default:
                        f1 = i8;
                    }
                }
            } else if (b1) {
                if (b1) continue;
            } else {
                lArr[i2] *= 3;
            }
        } while (++i2 < 340);
        vMeth1_check_sum += i2 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + Float.floatToIntBits(f1) + (b1 ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1, double d) {

        int i11=-129, i12=-12478, i13=-63, i14=60, i15=-90, i16=38, i17=-2, iArr1[]=new int[N];
        double d2=-86.50085;
        float f2=117.61F, fArr2[]=new float[N];
        short s=7534;

        FuzzerUtils.init(fArr2, -31.725F);
        FuzzerUtils.init(iArr1, -4);

        vMeth1();
        for (i11 = 4; 211 > i11; ++i11) {
            switch ((i11 % 2) + 102) {
            case 102:
                for (i13 = 1; i13 < 8; ++i13) {
                    for (d2 = i13; d2 < 2; ++d2) {
                        fArr2[i13 + 1] += f2;
                        Test.iFld = Test.byFld;
                        i12 = i12;
                    }
                    Test.instanceCount <<= Test.instanceCount;
                    Test.instanceCount -= s;
                    switch ((i13 % 2) + 82) {
                    case 82:
                    case 83:
                        iArr1[i13] *= Test.iFld;
                        break;
                    }
                    for (i16 = 2; i16 > 1; i16--) {
                        i17 += (((i16 * Test.iFld) + i1) - Test.instanceCount);
                        Test.lArrFld = Test.lArrFld;
                    }
                }
                break;
            case 103:
                i15 = (int)d;
                break;
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d2) + i15
            + Float.floatToIntBits(f2) + s + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=46, i18=-24567, i19=-35971, i20=-111, i21=15422, i22=231, i23=-7, i24=-15867, i25=48719;
        short s1=-14126;
        double d3=81.20982;
        float f3=111.781F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 1.115F);

        fArr[(i >>> 1) % N] = (fArr[(i >>> 1) % N] = fArr[(i >>> 1) % N]);
        vMeth(-119, -22.39004);
        for (i18 = 8; i18 < 278; i18++) {
            for (i20 = 4; i20 < 93; i20 += 2) {
                Test.instanceCount += (i20 - i20);
                for (i22 = 3; i18 < i22; i22--) {
                    i21 = i22;
                    i23 -= Test.iFld;
                    i23 += (i22 * i19);
                    bFld = bFld;
                    Test.instanceCount = i22;
                    Test.instanceCount += (i22 ^ i22);
                    fArr[(i19 >>> 1) % N][i22 - 1] /= (i22 | 1);
                    i23 -= i20;
                    i21 = (int)-51.58365;
                    i += s1;
                }
                i = i19;
                for (i24 = 1; i24 < 3; i24++) {
                    switch (((i24 % 2) * 5) + 55) {
                    case 59:
                        Test.iFld = Test.iFld;
                        break;
                    case 63:
                        iArrFld[i20] <<= i25;
                        iArrFld[i18 - 1] ^= -3;
                        break;
                    default:
                        Test.iFld = i21;
                    }
                    try {
                        Test.iFld = (1 / iArrFld[i20]);
                        i19 = (i % iArrFld[i18 - 1]);
                        iArrFld[i24] = (i19 % i20);
                    } catch (ArithmeticException a_e) {}
                }
                Test.iFld += i20;
                d3 += d3;
                Test.iFld >>= i18;
                s1 += (short)(((i20 * f3) + i25) - i25);
                i25 += -8;
                i21 += (i20 + i23);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
