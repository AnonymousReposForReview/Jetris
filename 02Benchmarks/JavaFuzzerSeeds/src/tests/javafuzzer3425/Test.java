package tests.javafuzzer3425;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:05:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-51766L;
    public boolean bFld=true;
    public static boolean bFld1=true;
    public static volatile short sFld=18589;
    public boolean bArrFld[]=new boolean[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        byte by=122;
        int i10=162, i11=-214, i12=-236, i13=193, i14=154, i15=41, iArr[]=new int[N];
        short s=2627;
        float f4=1.505F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr1, -114L);

        by -= (byte)Test.instanceCount;
        i10 = i10;
        for (i11 = 1; i11 < 216; i11++) {
            i10 = (int)Test.instanceCount;
            i10 -= (int)Test.instanceCount;
        }
        i13 = 1;
        do {
            s %= (short)(i12 | 1);
            switch (((i13 % 8) * 5) + 62) {
            case 66:
                i12 *= i13;
                for (i14 = 1; i14 < 8; i14++) {
                    f4 += Test.instanceCount;
                }
                break;
            case 67:
                i12 = i14;
                iArr[i13 + 1] -= (int)f4;
                if (Test.bFld1) continue;
                iArr[i13 - 1] = (int)Test.instanceCount;
                break;
            case 72:
                Test.bFld1 = Test.bFld1;
                break;
            case 79:
                lArr1[i13][i13 - 1] *= i12;
                break;
            case 99:
                i10 += i10;
                break;
            case 68:
                i15 >>>= (int)Test.instanceCount;
                break;
            case 81:
                i12 /= (int)(i11 | 1);
                break;
            case 102:
                i12 += (157 + (i13 * i13));
            default:
                f4 = 11216;
            }
        } while (++i13 < 190);
        vMeth1_check_sum += by + i10 + i11 + i12 + i13 + s + i14 + i15 + Float.floatToIntBits(f4) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d, int i5) {

        float f1=61.900F, f2=-58.632F, f3=-126.324F;
        int i6=228, i7=25415, i8=-16747, i9=3, i16=66;
        byte by1=48;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1662932902L);

        i5 -= (-i5);
        switch ((((((int)(f1 / (Test.instanceCount | 1))) >>> 1) % 5) * 5) + 10) {
        case 19:
            for (i6 = 5; i6 < 262; ++i6) {
                lArr[i6] = (lArr[i6 - 1]++);
            }
            for (f2 = 21; 340 > f2; ++f2) {
                for (f3 = 5; f2 < f3; --f3) {
                    vMeth1();
                    f1 -= 23995;
                    i8 *= (int)-1L;
                }
                Test.instanceCount += i7;
                by1 += (byte)(((f2 * i7) + i9) - Test.instanceCount);
                Test.instanceCount += (long)f2;
                if (Test.bFld1) continue;
                i5 += i8;
                try {
                    i7 = (75 / i5);
                    i7 = (i5 % i5);
                    i5 = (i7 / i9);
                } catch (ArithmeticException a_e) {}
            }
        case 26:
            f1 = f1;
        case 24:
            f1 += Test.instanceCount;
            break;
        case 29:
            i8 -= Test.sFld;
        case 22:
            Test.instanceCount += i16;
            break;
        default:
            i8 >>= (int)Test.instanceCount;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + i6 + i7 +
            Float.floatToIntBits(f2) + i8 + Float.floatToIntBits(f3) + i9 + by1 + i16 + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(float f, int i4) {

        double d1=1.123704;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        bArr[(i4 >>> 1) % N] = Test.bFld1;
        vMeth(d1, i4);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=23328, i1=-130, i2=-57063, i3=-39, i17=-38940, i18=-22691, i19=-138;
        float f5=2.1002F;
        byte by2=25;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 6359706755387528136L);

        for (i = 3; i < 228; ++i) {
            switch (((i % 1) * 5) + 100) {
            case 102:
                bArrFld[i + 1] = bFld;
                for (i2 = 7; 112 > i2; ++i2) {
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(-2.131F, i3);
                    Test.instanceCount = Test.instanceCount;
                    f5 -= -35179;
                    switch (((i2 % 2) * 5) + 50) {
                    case 53:
                        i3 -= i;
                        break;
                    case 59:
                        Test.instanceCount >>= i1;
                        break;
                    }
                    i1 += (i2 * i2);
                    f5 -= i;
                    i3 = i2;
                }
                i3 &= (int)Test.instanceCount;
                i1 += i;
                break;
            }
            lArr2[i + 1] += Test.instanceCount;
            i1 <<= i2;
            i3 = (int)1.934F;
            f5 += (((i * Test.sFld) + i1) - by2);
            if (false) break;
            f5 += i2;
            try {
                i1 = (i1 / i3);
                i3 = (i2 / 14349);
                i1 = (i1 / 1892273637);
            } catch (ArithmeticException a_e) {}
            i17 = 1;
            while ((i17 += 2) < 112) {
                i3 += i17;
                i1 = (int)Test.instanceCount;
            }
        }
        for (i18 = 5; i18 < 204; i18++) {
            f5 = -179;
            i3 += (int)f5;
            lArr2 = lArr2;
            i3 *= (int)-1.118809;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
