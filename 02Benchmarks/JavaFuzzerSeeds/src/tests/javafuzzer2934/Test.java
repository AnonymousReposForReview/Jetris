package tests.javafuzzer2934;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:20:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10489L;
    public static volatile float fFld=-106.622F;
    public static short sFld=975;
    public float fFld1=-91.424F;
    public byte byFld=-102;
    public double dFld=-32.74998;
    public static volatile int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 202);
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.sArrFld, (short)-15816);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, int i5) {

        int i6=-9996, i7=159, i8=2, i9=9, i10=-42475;
        float f1=-95.199F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -414620958L);

        Test.instanceCount <<= i5;
        for (i6 = 359; 8 < i6; i6 -= 3) {
            switch (((i5 >>> 1) % 7) + 6) {
            case 6:
                f1 -= -1.628F;
                switch (((i6 % 10) * 5) + 44) {
                case 75:
                    f1 += i5;
                    Test.fFld /= 47;
                    i7 += (((i6 * i7) + i7) - i6);
                    break;
                case 60:
                    Test.instanceCount += i6;
                    Test.instanceCount -= (long)d;
                    for (i8 = 1; 13 > i8; i8++) {
                        f1 += (((i8 * Test.instanceCount) + Test.instanceCount) - i5);
                        i10 = 1;
                        while (++i10 < 2) {
                            byte by1=24;
                            i9 *= by1;
                            Test.iArrFld[i8][i6 - 1] = (int)d;
                        }
                    }
                    break;
                case 84:
                    i5 = 4;
                    break;
                case 80:
                    i5 += i6;
                    break;
                case 85:
                    Test.iArrFld[i6][i6] = Test.sFld;
                case 58:
                    i7 -= 197;
                case 61:
                    Test.iArrFld[i6][i6 - 1] <<= i8;
                    break;
                case 68:
                    Test.iArrFld[i6][i6 - 1] += i7;
                    break;
                case 83:
                    lArr = lArr;
                case 57:
                }
                break;
            case 7:
                Test.instanceCount = i9;
            case 8:
                i9 += (i6 + i10);
                break;
            case 9:
                i7 &= i5;
            case 10:
                Test.instanceCount += (-203L + (i6 * i6));
            case 11:
                i9 = i10;
                break;
            case 12:
                i7 = i5;
                break;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i4=-110, i11=226, i12=-9, i13=111, i14=-57, i15=13142, iArr[]=new int[N];
        float f=-70.300F;
        double d1=44.51244, d2=-95.30291;
        boolean b=true;

        FuzzerUtils.init(iArr, 3);

        iArr[(i4 >>> 1) % N] >>= (int)(((-63722 >> (i4 + i4)) - (i4 + 111)) * f);
        vMeth2(d1, i4);
        if (b) {
            for (i11 = 4; i11 < 265; ++i11) {
                Test.lArrFld[i11] *= i11;
            }
            try {
                i13 = 201;
                while ((i13 -= 2) > 0) {
                    Test.lArrFld[i13 + 1] *= i13;
                    i14 *= (int)Test.instanceCount;
                    for (d2 = 15; d2 > 1; d2--) {
                        Test.fFld = i15;
                        Test.instanceCount >>= i11;
                        i15 = -15761;
                        i14 = (int)Test.instanceCount;
                        i14 = (int)d2;
                    }
                }
            }
            catch (ArithmeticException exc2) {
                i12 -= Test.sFld;
            }
            finally {
                Test.instanceCount -= Test.instanceCount;
            }
        } else if (b) {
            Test.iArrFld[(138 >>> 1) % N][(i11 >>> 1) % N] = i4;
        } else if (b) {
            Test.fFld *= -7L;
        } else {
            Test.instanceCount *= i11;
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(d2) + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i2, byte by, int i3) {

        float f2=-25.789F, fArr[]=new float[N];
        int i16=-244;

        FuzzerUtils.init(fArr, 2.89F);

        vMeth1();
        for (f2 = 16; f2 < 295; ++f2) {
            double d3=-2.127120;
            switch ((int)((f2 % 2) + 81)) {
            case 81:
                i3 -= i2;
                switch ((int)((f2 % 8) + 53)) {
                case 53:
                    i3 *= i2;
                    i16 += (int)(f2 * f2);
                    i2 = Test.sFld;
                    Test.instanceCount += (long)(((f2 * Test.instanceCount) + i2) - i16);
                    break;
                case 54:
                    i2 *= -124;
                    break;
                case 55:
                    switch ((int)(((f2 % 5) * 5) + 125)) {
                    case 141:
                        Test.iArrFld[(int)(f2 + 1)][(int)(f2 - 1)] = (int)Test.instanceCount;
                        break;
                    case 140:
                        Test.fFld *= (float)0.64178;
                        Test.fFld -= by;
                        break;
                    case 126:
                        Test.iArrFld[(int)(f2)][(int)(f2)] += i16;
                    case 128:
                        i3 = -93;
                        break;
                    case 142:
                        d3 = i16;
                        break;
                    }
                    break;
                case 56:
                    Test.instanceCount *= i2;
                case 57:
                    try {
                        i16 = (Test.iArrFld[(int)(f2)][(int)(f2 + 1)] % 42863);
                        i16 = (Test.iArrFld[(int)(f2 - 1)][(int)(f2 + 1)] % Test.iArrFld[(int)(f2)][(int)(f2 - 1)]);
                        i16 = (i16 % 38613);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 58:
                    Test.fFld -= fFld1;
                    break;
                case 59:
                    Test.iArrFld[(int)(f2)][(int)(f2 - 1)] += (int)-5344345160911464700L;
                    break;
                case 60:
                    Test.fFld += f2;
                    break;
                default:
                    fArr[(int)(f2)] = Test.instanceCount;
                }
                break;
            case 82:
                Test.instanceCount = -33713L;
                break;
            }
        }
        vMeth_check_sum += i2 + by + i3 + Float.floatToIntBits(f2) + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-19943, i1=33, i17=49850, i18=-3, i19=2, i20=-3, i21=215, i22=1, i23=-40534;
        long l=94L;
        boolean b2=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.94308);

        for (i = 18; 378 > i; ++i) {
            vMeth(i, byFld, i);
            i1 -= i;
            i1 ^= (int)Test.instanceCount;
            dArr[i - 1] = i;
            Test.instanceCount <<= -32000;
        }
        if (b2) {
            for (i17 = 1; i17 < 259; ++i17) {
                i1 |= 8;
                i1 += (i17 ^ i18);
                i1 = i1;
                switch (((i17 % 8) * 5) + 11) {
                case 15:
                    Test.instanceCount += Test.instanceCount;
                    break;
                case 45:
                    for (i19 = 2; i19 < 97; ++i19) {
                        i21 <<= i21;
                    }
                    Test.fFld -= Test.instanceCount;
                    Test.iArrFld[i17][i17 + 1] = i18;
                    break;
                case 44:
                    Test.instanceCount += byFld;
                    Test.instanceCount = i1;
                    break;
                case 48:
                    i1 += (i17 * i17);
                    Test.sArrFld[i17] -= (short)i21;
                    for (i22 = 4; i22 < 97; ++i22) {
                        l = 1;
                        do {
                            boolean b1=false;
                            if (b1) continue;
                            switch ((((i1 >>> 1) % 2) * 5) + 3) {
                            case 6:
                                i21 -= (int)dFld;
                                break;
                            case 5:
                                Test.sArrFld[(int)(l)] = (short)l;
                            }
                            i20 += (-33515 + (l * l));
                            b1 = b1;
                            b1 = b1;
                        } while (++l < 2);
                    }
                    break;
                case 19:
                    fFld1 += i22;
                case 37:
                    i20 <<= byFld;
                case 41:
                    i20 += (((i17 * i23) + i21) - i23);
                    break;
                case 20:
                    i1 += i17;
                    break;
                default:
                    b2 = b2;
                }
            }
        } else if (b2) {
            i18 -= i21;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
