package tests.javafuzzer1368;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:52:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=63235L;
    public int iFld=51012;
    public static int iFld1=17788;
    public static float fFld=-1.333F;
    public static volatile int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.fArrFld, 0.377F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5) {

        int i6=8, i7=-253, i8=40381, i9=2, i10=6;
        boolean b=true;
        short s=-904;
        double d=82.6318;
        float f2=124.33F;

        i6 = 1;
        do {
            byte by=-105;
            if (b) {
                for (i7 = i6; i7 < 5; ++i7) {
                    Test.fArrFld[i6] = i4;
                }
                switch ((((Test.iFld1 >>> 1) % 9) * 5) + 51) {
                case 82:
                    Test.instanceCount = i5;
                    Test.iArrFld[i6 + 1][i6 + 1] -= i8;
                    break;
                case 90:
                    Test.iFld1 += (i6 - i6);
                    b = b;
                    break;
                case 89:
                    i5 = by;
                    break;
                case 53:
                    try {
                        i4 = (i7 / Test.iArrFld[i6][i6 + 1]);
                        Test.iFld1 = (i8 / Test.iArrFld[i6 + 1][(i8 >>> 1) % N]);
                        i8 = (i5 % i7);
                    } catch (ArithmeticException a_e) {}
                case 68:
                    Test.fFld += 4555;
                    for (i9 = 1; i9 < 5; ++i9) {
                        s *= (short)Test.fFld;
                        i4 += (((i9 * Test.fFld) + Test.instanceCount) - i10);
                    }
                case 86:
                    i8 += i10;
                    break;
                case 88:
                    s += (short)i6;
                    break;
                case 67:
                    i5 >>= (int)Test.instanceCount;
                case 52:
                    d = i10;
                    break;
                default:
                    i5 += (((i6 * Test.fFld) + i9) - i9);
                }
            } else if (false) {
                i10 >>= i8;
            } else if (b) {
                f2 = i8;
            } else {
                i10 = s;
            }
        } while (++i6 < 314);
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + s + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2);
    }

    public static void vMeth1() {

        double d1=1.77980;

        Test.iArrFld[(Test.iFld1 >>> 1) % N][(Test.iFld1 >>> 1) % N] &= (int)(Test.instanceCount - Math.abs(Test.iFld1
            - Test.iFld1));
        vMeth2(Test.iFld1, Test.iFld1);
        Test.instanceCount += (long)d1;
        Test.fFld -= Test.instanceCount;
        Test.iFld1 += Test.iFld1;
        vMeth1_check_sum += Double.doubleToLongBits(d1);
    }

    public static void vMeth(int i2, float f1, long l) {

        int i3=100, i11=-10, i12=55673, i13=-23891, i14=-17126, i15=-251, i16=-11871;
        long l1=-14L;
        double d2=0.50650;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.501F);

        Test.iFld1 = (int)(i2 * ((f1 + f1) + (Test.iFld1 - 23571)));
        fArr[(i3 >>> 1) % N] = (l--);
        vMeth1();
        for (i11 = 8; 175 > i11; i11++) {
            for (l1 = 9; l1 > 1; l1 -= 3) {
                for (i14 = 1; 5 > i14; ++i14) {
                    Test.instanceCount ^= 110;
                    switch ((int)((l1 % 1) + 90)) {
                    case 90:
                        Test.instanceCount += i13;
                        Test.iFld1 = i11;
                        break;
                    default:
                        i13 -= i12;
                    }
                    i16 &= 61328;
                    Test.fFld = i2;
                    f1 = (float)d2;
                    d2 *= i15;
                }
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + l + i3 + i11 + i12 + l1 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=4, i1=158, i17=5, i18=-177, i19=-254, i20=-9304, i21=-149, i22=10;
        float f=0.466F, fArr1[]=new float[N];
        double d3=72.81483, d4=8.72242;
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)62);
        FuzzerUtils.init(fArr1, 0.752F);
        FuzzerUtils.init(lArr, -38L);

        Test.iArrFld[(iFld >>> 1) % N][(-18688 >>> 1) % N] *= (Test.iArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N]++);
        for (i = 359; i > 10; i -= 2) {
            byArr[i + 1] += (byte)(iFld * (i1 * (31048 + (Test.instanceCount * iFld))));
            Test.instanceCount += (0 + (i * i));
            i1 >>= Math.max((int)(Integer.reverseBytes(iFld) + (Test.instanceCount - 174)), (int)((Test.instanceCount
                |= i) * (Test.instanceCount + i1)));
        }
        iFld += (--Test.iArrFld[(i1 >>> 1) % N][(-11 >>> 1) % N]);
        iFld -= (int)(f--);
        vMeth(iFld, 0.528F, Test.instanceCount);
        try {
            Test.iArrFld[(Test.iFld1 >>> 1) % N] = FuzzerUtils.int1array(N, (int)-81);
        }
        catch (ArithmeticException exc2) {
            i1 >>= (int)Test.instanceCount;
        }
        catch (ArrayIndexOutOfBoundsException exc3) {
            iFld &= i;
            Test.instanceCount *= Test.instanceCount;
            d3 = 1;
            while (++d3 < 392) {
                fArr1[(int)(d3)] = 0;
                i17 = 1;
                do {
                    for (i18 = 1; i18 < 1; i18++) {
                        i1 -= (int)1.960F;
                        lArr[i17 + 1][i17 - 1] %= -27723;
                        Test.fArrFld[i18] = (float)d3;
                        i1 += (int)Test.instanceCount;
                        f -= i1;
                        i1 -= (int)Test.instanceCount;
                        Test.instanceCount += i19;
                        d4 *= i20;
                        iFld = i18;
                    }
                    switch (((235 >>> 1) % 1) + 55) {
                    case 55:
                        for (i21 = 1; 1 < i21; i21 -= 3) {
                            Test.instanceCount += (-7 + (i21 * i21));
                        }
                        break;
                    default:
                        i22 += i19;
                    }
                } while (++i17 < 64);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
