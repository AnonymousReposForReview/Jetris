package tests.javafuzzer600;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:20:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-201L;
    public static boolean bFld=true;
    public byte byFld=-102;
    public float fFld=1.64F;
    public static int iFld=2;
    public static float fFld1=1.396F;
    public static double dFld=0.63947;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i10) {

        int i11=-34472, i12=-163, i13=-9, i14=-68, i15=28, i16=-62, iArr1[]=new int[N];
        double d=-1.86578;
        byte by=-78;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6259241055280752386L);
        FuzzerUtils.init(iArr1, -78);

        for (i11 = 8; i11 < 213; ++i11) {
            for (i13 = i11; 8 > i13; i13++) {
                float f2=-114.925F;
                i12 = i10;
                Test.instanceCount = (long)f2;
                lArr[i11] = Test.instanceCount;
                for (i15 = 1; i15 < 1; ++i15) {
                    i16 -= (int)Test.instanceCount;
                    lArr[i11 + 1] += (long)Test.fFld1;
                }
                i12 = (int)f2;
                f2 %= (i12 | 1);
                i10 += i13;
                iArr1[i11 - 1] -= (int)1319232508L;
            }
            d = by;
            iArr1[i11 + 1] >>= i11;
            Test.iFld = (int)Test.instanceCount;
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i4, int i5) {

        float f=-20.8F, f1=36.4F;
        int i6=-151, i7=64, i8=4, i9=-4, iArr2[]=new int[N];
        short s1=31795;
        double d1=0.34884;

        FuzzerUtils.init(iArr2, 53825);

        f = 1;
        do {
            Test.instanceCount += Test.instanceCount;
            for (i6 = 8; i6 > 1; --i6) {
                for (i8 = 1; 2 > i8; i8++) {
                    f1 -= Math.min((int)(19512L + (i5 * Test.instanceCount)), --i9);
                    i9 += (int)((i9++) - ((Test.instanceCount + i5) * (-45097 + (Test.iFld * s1))));
                    if (bMeth(i9) || Test.bFld) continue;
                    switch ((i8 % 6) + 56) {
                    case 56:
                    case 57:
                        i4 >>= i7;
                        break;
                    case 58:
                        Test.instanceCount = i7;
                        iArr2[(int)(f)] >>>= i4;
                        i7 += (-11 + (i8 * i8));
                        iArr2[(int)(f)] += 13;
                        break;
                    case 59:
                        d1 += -2.90F;
                        i4 *= (int)Test.instanceCount;
                        break;
                    case 60:
                        i4 = i4;
                        break;
                    case 61:
                        i7 = (int)f1;
                        break;
                    default:
                        i9 -= s1;
                    }
                }
            }
        } while (++f < 195);
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s1 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(long l, int i3) {

        short s=-19407;
        int i17=-183, iArr3[]=new int[N];
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 2.959F);
        FuzzerUtils.init(lArr1, 31774L);
        FuzzerUtils.init(iArr3, 8);

        i3 *= (-s);
        vMeth(Test.iFld, i3);
        for (float f3 : fArr) {
            i3 = Test.iFld;
            i17 = 1;
            while (++i17 < 4) {
                i3 += (int)fFld;
                i3 += (int)l;
                lArr1[i17] = -766;
                byFld >>= (byte)i17;
            }
            if (Test.bFld) break;
            Test.dFld *= -96;
        }
        iArr3[(i3 >>> 1) % N] += (int)Test.dFld;
        Test.dFld = -35;
        iArr3 = iArr3;
        Test.instanceCount |= i17;
        long meth_res = l + i3 + s + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-57559, i1=-64221, i2=-10, i18=6, i19=-11, i20=111, i21=-5, i22=-7, i23=182, i24=-5, i25=-16, i26=-59151,
            i27=42, iArr[]=new int[N];
        short s2=279, sArr[]=new short[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(sArr, (short)783);

        Test.bFld = (((iArr[(i >>> 1) % N]--) - byFld) == ((i * 61.88332) * iArr[(i >>> 1) % N]));
        for (i1 = 2; i1 < 125; ++i1) {
            iArr[i1 + 1] += (i2 * sArr[i1]);
            Test.instanceCount -= Math.min((int)(-9L - (i2 - fFld)), i2);
            i = (iMeth(Test.instanceCount, 32712) - -80);
            Test.iFld %= -30450;
            iArr[i1] = i2;
            i2 >>>= Test.iFld;
            for (i18 = 6; i18 < 204; i18++) {
                s2 += (short)-86;
            }
            iArr[i1] -= i1;
            i2 ^= (int)-122L;
            i = (int)Test.instanceCount;
        }
        for (i20 = 9; i20 < 165; i20++) {
            for (i22 = i20; i22 < 161; ++i22) {
                Test.instanceCount += (-12 + (i22 * i22));
                for (i24 = 1; i24 < 1; ++i24) {
                    i25 = (int)Test.dFld;
                    i ^= i22;
                    Test.instanceCount *= i24;
                    i21 *= i;
                    Test.instanceCount = Test.instanceCount;
                    fFld *= i1;
                    i >>= i2;
                }
                Test.bFld = Test.bFld;
                i19 = i2;
            }
            byFld += (byte)(((i20 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            for (i26 = 161; i26 > 10; i26--) {
                i2 &= i23;
                iArr[i26] -= 11;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
