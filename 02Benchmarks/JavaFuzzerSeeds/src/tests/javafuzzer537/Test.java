package tests.javafuzzer537;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:23:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2271L;
    public static double dFld=-2.99240;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 76);
        FuzzerUtils.init(Test.dArrFld, 2.8173);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i9=1, i10=49, i11=-9, i12=-97, i13=-64, i14=238;
        byte by=-44;
        float f2=-2.66F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 46557L);

        Test.iArrFld[(i9 >>> 1) % N] *= i9;
        for (i10 = 12; i10 < 258; i10 += 3) {
            switch (((i10 % 5) * 5) + 105) {
            case 121:
                i9 -= by;
                i11 <<= i10;
                for (i12 = 1; i12 < 19; i12++) {
                    i13 *= (int)Test.dFld;
                    i13 = 7;
                    try {
                        Test.iArrFld[i12 + 1] = (i14 % i12);
                        i9 = (Test.iArrFld[i12] % i9);
                        Test.iArrFld[i12 - 1] = (i12 / -174);
                    } catch (ArithmeticException a_e) {}
                    i14 -= (int)f2;
                    Test.instanceCount ^= i13;
                    Test.instanceCount += i12;
                    by -= (byte)i11;
                    lArr1[i10 + 1] += i13;
                    Test.instanceCount >>= i14;
                }
                break;
            case 124:
            case 126:
                f2 += i10;
                break;
            case 111:
                i13 *= i12;
            case 110:
                i14 *= i12;
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + by + i12 + i13 + i14 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static double dMeth() {

        int i8=-4, i15=59753, i16=-62060, i17=-9, i18=3238, i19=-7;
        float f3=1.206F, fArr1[]=new float[N];
        byte by1=-46;
        boolean b=true;

        FuzzerUtils.init(fArr1, -2.813F);

        i8 = (i8--);
        vMeth1();
        for (i15 = 17; i15 < 277; i15++) {
            i8 -= i16;
            for (i17 = 6; i17 > 1; --i17) {
                if (b) {
                    Test.iArrFld[i17 + 1] -= (int)Test.dFld;
                    switch (((i17 % 2) * 5) + 78) {
                    case 88:
                        i16 = 22993;
                        Test.instanceCount += i17;
                        i19 = 1;
                        while (++i19 < 2) {
                            if (i17 != 0) {
                            }
                            i8 = -6;
                            f3 -= i19;
                            f3 = 5;
                        }
                        break;
                    case 82:
                        i18 >>= i15;
                        break;
                    }
                } else if (b) {
                    Test.dFld = f3;
                } else if (b) {
                    fArr1[i15] += by1;
                } else {
                    Test.iArrFld[i15 - 1] += (int)f3;
                }
            }
        }
        long meth_res = i8 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f3) + by1 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i5=209, i7=80, i20=28736, i21=7;
        float f1=-74.250F;
        short s=19473;
        boolean b1=true;
        long lArr[][]=new long[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(dArr, 0.115213);

        Test.iArrFld[(i5 >>> 1) % N] <<= ((Math.max(i5, i5) + (++i5)) + Integer.reverseBytes((int)(-117.638F - i5)));
        lArr[(i5 >>> 1) % N][(i5 >>> 1) % N] <<= Test.iArrFld[(i5 >>> 1) % N];
        for (int i6 : Test.iArrFld) {
            for (f1 = 1; f1 < 4; ++f1) {
                i7 += (58 + (f1 * f1));
                i5 += (int)dMeth();
                switch (((i6 >>> 1) % 10) + 104) {
                case 104:
                    Test.instanceCount = i5;
                    Test.dFld *= Test.instanceCount;
                    for (i20 = 1; i20 < 2; i20++) {
                        Test.instanceCount += (i20 - i7);
                        dArr[i20 + 1] -= i21;
                        i5 += -2;
                        i5 <<= i20;
                        Test.iArrFld[i20 - 1] -= (int)Test.instanceCount;
                    }
                    break;
                case 105:
                    i7 += (int)(f1 + Test.instanceCount);
                case 106:
                    i21 -= s;
                    break;
                case 107:
                    lArr[(int)(f1)][(int)(f1)] += (long)f1;
                    break;
                case 108:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 109:
                    try {
                        i21 = (i20 / -61355);
                        i5 = (i6 / i6);
                        Test.iArrFld[(int)(f1 - 1)] = (i7 / 40468);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 110:
                    i5 = i6;
                    break;
                case 111:
                    i5 = i21;
                case 112:
                case 113:
                    b1 = b1;
                    break;
                }
            }
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i7 + i20 + i21 + s + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=96, i1=-12, i2=3, i3=-197, i4=-240, i22=-3, i23=9, i24=151, i25=89, i26=-133, iArr[]=new int[N];
        float f=0.297F, fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -39);
        FuzzerUtils.init(fArr, -28.714F);
        FuzzerUtils.init(bArr, false);

        iArr = iArr;
        fArr[(i >>> 1) % N] = ((--i) - (--i));
        for (i1 = 9; i1 < 264; ++i1) {
            for (i3 = 1; i3 < 99; i3 += 2) {
                Test.instanceCount += i3;
            }
            f += i1;
            vMeth();
        }
        for (i22 = 14; i22 < 242; i22++) {
            f += 12;
            for (i24 = 110; i24 > i22; i24 -= 3) {
                boolean b2=true;
                Test.dFld *= 5;
                fArr[i24 + 1] += i24;
                switch ((i22 % 8) + 6) {
                case 6:
                    if (b2) {
                        if (b2) break;
                        Test.instanceCount = i2;
                        i2 += (((i24 * Test.instanceCount) + Test.instanceCount) - i3);
                        Test.instanceCount *= 54956;
                    }
                    Test.instanceCount += i24;
                    break;
                case 7:
                    Test.dFld -= 5201L;
                    i26 = 1;
                    do {
                        iArr = iArr;
                        bArr[i24 - 1] = b2;
                        i25 = i4;
                        i4 *= i;
                        f += (((i26 * i24) + i25) - i23);
                    } while (++i26 < 1);
                    i = (int)-1.85398;
                    Test.dFld += i23;
                    break;
                case 8:
                    i4 = (int)Test.instanceCount;
                    i += (i24 | Test.instanceCount);
                    break;
                case 9:
                    i4 = i2;
                case 10:
                    i23 <<= i1;
                    break;
                case 11:
                    i = (int)f;
                    break;
                case 12:
                    Test.dArrFld[i22] *= f;
                    break;
                case 13:
                    i23 += i24;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
