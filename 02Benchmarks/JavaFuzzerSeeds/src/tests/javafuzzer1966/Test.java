package tests.javafuzzer1966;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:44:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4029001300L;
    public volatile short sFld=14074;
    public static double dFld=0.37333;
    public static float fArrFld[][]=new float[N][N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 84.315F);
        FuzzerUtils.init(Test.lArrFld, 20287L);
        FuzzerUtils.init(Test.iArrFld, 244);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l2, int i8) {

        int i9=225, i10=-33108, iArr1[]=new int[N];
        short s=-18573;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 8451);
        FuzzerUtils.init(dArr, 0.106169);

        l2 = i8;
        for (i9 = 1; i9 < 306; i9++) {
            iArr1[i9 + 1] += -125;
            i8 += (int)(64602L + (i9 * i9));
            Test.instanceCount >>= -3265L;
        }
        Test.dFld = i10;
        try {
            i10 -= i9;
            i8 <<= i9;
            Test.instanceCount &= i10;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            s -= (short)l2;
        }
        finally {
            dArr[(i9 >>> 1) % N] += 93.323F;
        }
        iArr1[(i8 >>> 1) % N] = (int)Test.instanceCount;
        b1 = true;
        Test.lArrFld[(i8 >>> 1) % N] <<= i10;
        long meth_res = l2 + i8 + i9 + i10 + s + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i12=-191, i13=-24874, i14=17409, i15=-6, i16=176, i17=-12;
        float f=98.373F, f1=2.675F;
        short s1=-1162;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-85);

        Test.instanceCount *= (long)dMeth(Test.instanceCount, i12);
        f += Test.instanceCount;
        for (i13 = 216; i13 > 13; i13--) {
            Test.instanceCount = (long)f;
            Test.instanceCount = s1;
            i15 = 1;
            while (++i15 < 8) {
                for (f1 = 1; f1 < 1; ++f1) {
                    byArr[(int)(f1)] += (byte)-931074280L;
                    Test.instanceCount += 4213365271963756634L;
                    f -= i13;
                    s1 = (short)Test.instanceCount;
                    f = i12;
                    Test.dFld += 36792;
                    i17 <<= i16;
                    i16 -= i17;
                }
            }
        }
        vMeth1_check_sum += i12 + Float.floatToIntBits(f) + i13 + i14 + s1 + i15 + Float.floatToIntBits(f1) + i16 + i17
            + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(long l1, int i6) {

        byte by=51;
        int i7=-39508, i18=14, i19=-33303, i20=-83, i21=57557, i22=139, i23=-46;
        float f2=-2.1005F;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)20509);

        i6 += ((sArr[(i6 >>> 1) % N][(i6 >>> 1) % N] - by) - (--i6));
        i7 = 1;
        do {
            Test.lArrFld[i7] += (i6++);
        } while (++i7 < 181);
        Test.dFld = Test.lArrFld[(i6 >>> 1) % N];
        vMeth1();
        for (i18 = 8; i18 < 290; i18++) {
            for (i20 = 1; 6 > i20; ++i20) {
                l1 -= l1;
                Test.iArrFld[i18 - 1] = i19;
                i19 <<= 10591;
                i21 += (int)Test.dFld;
            }
        }
        Test.iArrFld[(i7 >>> 1) % N] -= (int)f2;
        for (i22 = 8; i22 < 307; i22++) {
            Test.dFld -= Test.dFld;
        }
        i6 -= i19;
        vMeth_check_sum += l1 + i6 + by + i7 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2) + i22 + i23 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=171, i1=50629, i2=10, i3=49187, i4=9, i5=6699, i24=-61551, i25=-117, i26=21611, i27=-3, i28=3296,
            iArr[]=new int[N];
        boolean b=true;
        float f3=1.381F;
        byte by1=97;
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr, -123);
        FuzzerUtils.init(sArr1, (short)-15270);

        for (i = 4; i < 194; i++) {
            long l=-155L;
            if (b) break;
            i1 -= (int)(((-(i + l)) - (i1++)) + (iArr[i]--));
        }
        sFld += (short)(i1 + Test.fArrFld[(i >>> 1) % N][(i1 >>> 1) % N]);
        for (i2 = 5; 261 > i2; i2++) {
            for (i4 = 98; i4 > 4; i4--) {
                Test.instanceCount = Math.max(--i5, 13);
            }
            sFld -= (short)i4;
            vMeth(Test.instanceCount, i5);
            i3 = (int)Test.instanceCount;
            Test.instanceCount >>= i;
            for (i24 = 3; i24 < 98; ++i24) {
                i26 = 1;
                do {
                    try {
                        i25 = (i3 % i5);
                        i5 = (i24 % i26);
                        i5 = (Test.iArrFld[i24 + 1] % i2);
                    } catch (ArithmeticException a_e) {}
                    Test.fArrFld[i2 + 1][i24 + 1] -= 83;
                    switch (((i24 % 4) * 5) + 30) {
                    case 50:
                        iArr = iArr;
                        Test.instanceCount += Test.instanceCount;
                        Test.lArrFld[i26] <<= 43700L;
                        Test.instanceCount -= i2;
                        break;
                    case 37:
                        Test.iArrFld[i2 - 1] = (int)f3;
                        break;
                    case 41:
                        i1 += (int)Test.instanceCount;
                        i1 >>= i24;
                        break;
                    case 42:
                        i5 += (int)f3;
                        i3 = by1;
                        i1 >>= i3;
                        break;
                    }
                } while (++i26 < 2);
            }
        }
        i3 = i5;
        for (i27 = 12; 220 > i27; i27++) {
            by1 = (byte)-11564L;
            i5 += (i27 * i27);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
