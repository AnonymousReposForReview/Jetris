package tests.javafuzzer2941;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:25:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-134639481L;
    public static boolean bFld=false;
    public static int iFld=-191;
    public static float fFld=-67.283F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i4) {


        i4 -= (int)Math.max(Test.instanceCount, Test.instanceCount);
        vSmallMeth_check_sum += i4;
    }

    public static long lMeth(int i10, int i11, int i12) {

        double d=88.129899;
        int i13=37839, i14=4852, i15=128, i16=-13, i17=219, i18=-61, i19=175;
        boolean b=false;

        d = i12;
        i11 -= i11;
        i13 = 1;
        while ((i13 += 2) < 176) {
            if (b) break;
            i14 = 1;
            do {
                i11 += (((i14 * i10) + i14) - i13);
                for (i15 = 1; i15 > 1; i15 -= 3) {
                    byte by1=-3;
                    i11 += i15;
                    i17 *= i12;
                    Test.instanceCount >>= Test.instanceCount;
                    d -= by1;
                }
                for (i18 = 1; 1 > i18; ++i18) {
                    Test.iArrFld[i18] -= i17;
                    Test.instanceCount += i18;
                    i19 -= i19;
                }
            } while (++i14 < 18);
        }
        long meth_res = i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + (b ? 1 : 0) + i14 + i15 + i16 + i17 + i18
            + i19;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l1, int i9, long l2) {

        int i20=0, i21=-10661, i22=-120, i23=-68, i24=-27756, iArr[]=new int[N];
        float f=0.261F;
        byte by2=55;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(sArr, (short)-28704);

        iArr[(i9 >>> 1) % N] -= i9;
        i9 = (i9 - (i9--));
        i9 -= (int)lMeth(215, i9, 36879);
        for (i20 = 4; i20 < 296; i20++) {
            for (i22 = 6; i22 > 1; i22--) {
                i24 += (int)f;
                try {
                    i9 = (2044697106 / i23);
                    i24 = (i21 / 58111);
                    iArr[i22 - 1] = (148 % i21);
                } catch (ArithmeticException a_e) {}
                i24 = i21;
                sArr[i20] *= (short)10;
                sArr[i20] *= (short)i9;
                i21 -= i22;
                i9 = 8;
                by2 += (byte)i22;
                i9 += (((i22 * i24) + i9) - l1);
                i23 -= i20;
            }
        }
        long meth_res = l1 + i9 + l2 + i20 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f) + by2 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i5=-10, i6=2, i7=75, i8=210, i25=-22472, i26=3559, i27=-54768, i28=9;
        byte by=55;
        long l3=-4179019455500590467L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2L);

        for (long l : lArr) {
            for (i5 = 1; 4 > i5; ++i5) {
                for (i7 = i5; i7 < 2; ++i7) {
                    by = (byte)(--i6);
                    i6 = (-227 + iMeth(-69L, i6, l));
                }
                Test.instanceCount += (22578 + (i5 * i5));
            }
            i6 = i5;
            for (l3 = 1; l3 < 4; ++l3) {
                for (i26 = 1; i26 < 2; ++i26) {
                    i27 = (int)24.751F;
                    Test.bFld = Test.bFld;
                    by -= (byte)i8;
                    i6 -= 51073;
                }
                i25 = i28;
                if (i8 != 0) {
                    vMeth_check_sum += i5 + i6 + i7 + i8 + by + l3 + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + by + l3 + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-196, i1=76, i2=-15434, i3=60893, i29=-2, i30=22916;
        boolean b1=false;
        double d1=-101.120601;

        for (i = 6; i < 359; i++) {
            if (Test.bFld) {
                for (i2 = i; i2 < 71; ++i2) {
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(44);
                    vMeth();
                    Test.iArrFld[i2] <<= i3;
                }
                Test.instanceCount /= (i3 | 1);
                i1 += i3;
                i3 = i1;
            } else if (Test.bFld) {
                Test.instanceCount += (2 + (i * i));
            } else if (b1) {
            } else {
                Test.instanceCount = Test.instanceCount;
                for (i29 = 1; i29 < 71; ++i29) {
                    int i31=-2;
                    short s=20575;
                    i1 = 4;
                    Test.iFld -= i30;
                    if (b1) break;
                    Test.iArrFld[i29] += (int)Test.instanceCount;
                    d1 %= -9;
                    switch ((((i1 >>> 1) % 5) * 5) + 111) {
                    case 133:
                        Test.instanceCount = i29;
                        Test.iFld = (int)Test.instanceCount;
                        Test.instanceCount *= Test.instanceCount;
                    case 122:
                        Test.bFld = Test.bFld;
                        break;
                    case 113:
                        Test.fFld *= 62720;
                        i1 += (i29 + i31);
                        Test.instanceCount >>= i;
                        i1 >>>= i1;
                    case 121:
                        i3 *= (int)Test.fFld;
                        Test.instanceCount += s;
                        i30 += i29;
                        break;
                    case 117:
                        i3 = (int)Test.instanceCount;
                        break;
                    default:
                        if (b1) continue;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
