package tests.javafuzzer1206;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:33:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=129L;
    public static double dFld=-1.64107;
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -54124);
        FuzzerUtils.init(Test.iArrFld1, -84);
        FuzzerUtils.init(Test.fArrFld, -69.716F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i6) {

        float f2=-84.48F;
        byte by=-68;
        short s=4068;
        int i7=-62889, i8=0, i9=190, i10=-188;
        double d2=-1.48167;

        f2 *= i6;
        i6 = by;
        i6 *= 81;
        s = (short)l1;
        for (i7 = 6; i7 < 131; i7 += 2) {
            by -= (byte)i6;
            l1 = (long)d2;
            Test.instanceCount += i7;
            Test.iArrFld[i7 + 1][i7] >>>= i7;
            i8 = (int)Test.instanceCount;
        }
        for (i9 = 6; 268 > i9; i9 += 2) {
            f2 = i7;
        }
        i6 = (int)l1;
        i6 >>= -252;
        i8 *= 50297;
        vMeth_check_sum += l1 + i6 + Float.floatToIntBits(f2) + by + s + i7 + i8 + Double.doubleToLongBits(d2) + i9 +
            i10;
    }

    public static float fMeth(long l, int i4, int i5) {

        int i12=21, i13=13, i14=-22171, i15=9, i16=466, i17=-6, i18=32193;
        boolean b=true;
        float f3=-74.726F;
        byte by1=-38;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)22068);

        sArr[(i5 >>> 1) % N] -= (short)(((Test.instanceCount++) - 249) * ((i5 + i4) - i4));
        vMeth(l, i4);
        for (int i11 : Test.iArrFld1) {
            for (i12 = 1; i12 < 4; ++i12) {
                for (i14 = 1; 2 > i14; i14 += 3) {
                    i4 += i13;
                }
                i15 = -224;
                for (i16 = 1; 2 > i16; i16++) {
                    b = b;
                    f3 *= i18;
                    Test.fArrFld[i16 + 1] = (float)Test.dFld;
                    Test.iArrFld[i12 - 1][i16 - 1] <<= by1;
                    i4 += (i16 + Test.instanceCount);
                    if (b) continue;
                    i4 += (int)12855L;
                }
            }
        }
        long meth_res = l + i4 + i5 + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i18
            + by1 + FuzzerUtils.checkSum(sArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public int iMeth(double d1, float f1) {

        int i2=-86, i3=54870, i19=111, i20=-64881, i21=1;
        long l2=-970384L, lArr[]=new long[N];
        boolean b1=true;

        FuzzerUtils.init(lArr, -1749755743L);

        for (i2 = 2; i2 < 235; ++i2) {
            i3 -= (int)(-((-(i3 * Test.instanceCount)) - (-(d1 = i2))));
            fMeth(252L, -239, -128);
            Test.instanceCount -= (long)d1;
            Test.iArrFld1[i2 - 1] = (int)Test.instanceCount;
            for (l2 = 1; l2 < 7; l2++) {
                lArr[(int)(l2 - 1)] = l2;
                for (i20 = 1; i20 < 2; i20++) {
                    i21 = (int)Test.instanceCount;
                    i21 -= i2;
                    if (b1) break;
                    Test.instanceCount += i20;
                    Test.iArrFld1[i20] += i20;
                    Test.instanceCount *= l2;
                    i3 = i3;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i2 + i3 + l2 + i19 + i20 + i21 + (b1 ?
            1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-21622, i1=3, i22=-6, i23=4, i24=12;
        double d=43.115241, dArr[]=new double[N];
        float f=1.475F, f4=124.308F;
        boolean b2=true;
        short s1=22613;

        FuzzerUtils.init(dArr, 0.22492);

        dArr = (dArr = (dArr = FuzzerUtils.double1array(N, (double)44.73694)));
        for (i = 8; i < 248; ++i) {
            i1 += (int)(((d + f) - Test.instanceCount) * iMeth(Test.dFld, f));
            for (f4 = 105; f4 > 2; f4 -= 2) {
                b2 = b2;
                for (i23 = 1; 3 > i23; ++i23) {
                    i24 = s1;
                    Test.iArrFld[i23][i] = (int)Test.instanceCount;
                    i22 += (i23 * i23);
                    switch ((i % 6) + 67) {
                    case 67:
                        i24 += i23;
                        d -= i1;
                        Test.instanceCount += i22;
                        i22 = (int)f4;
                    case 68:
                        try {
                            i22 = (i24 % i22);
                            i1 = (i24 / 37624);
                            i1 = (Test.iArrFld1[i23 - 1] / -206);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 69:
                        i1 = (int)f;
                        i24 = i;
                        break;
                    case 70:
                        i22 += (int)(0L + (i23 * i23));
                    case 71:
                        Test.instanceCount += i23;
                        Test.instanceCount += (long)(-15.318F + (i23 * i23));
                        f = -10;
                        i1 = (int)Test.instanceCount;
                        break;
                    case 72:
                        Test.iArrFld[i - 1][i + 1] = (int)Test.dFld;
                        i1 += (i23 - f4);
                        break;
                    }
                    Test.iArrFld1[(int)(f4)] -= i23;
                    s1 += (short)i22;
                    Test.dFld *= 0;
                    f *= i24;
                    i24 <<= (int)Test.instanceCount;
                    f *= 32;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
