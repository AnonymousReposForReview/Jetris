package tests.javafuzzer289;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:19:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1547L;
    public static volatile int iFld=35634;
    public static float fFld=0.327F;
    public static boolean bFld=true;
    public byte byFld=-106;
    public static volatile float fFld1=1.114F;
    public static int iFld1=-61640;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.127945);
        FuzzerUtils.init(Test.iArrFld, 1);
        FuzzerUtils.init(Test.sArrFld, (short)29965);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        double d=-1.82698;

        d *= Test.iFld;
        vMeth1_check_sum += Double.doubleToLongBits(d);
    }

    public static int iMeth(int i6, boolean b, int i7) {

        int i8=-218, i9=-11, i10=213, i11=-9, i12=-119, i13=-52216;
        short s=-12064;
        byte by=41;

        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld));
        for (i8 = 2; i8 < 259; ++i8) {
            i7 += i9;
            vMeth1();
            Test.iArrFld = Test.iArrFld;
            for (i10 = 1; i10 < 6; i10++) {
                Test.instanceCount >>= Test.instanceCount;
                Test.fFld *= Test.instanceCount;
                i7 += (i10 * i10);
            }
            if (b) break;
            s += (short)i8;
            by -= (byte)-174;
        }
        for (i12 = 10; i12 < 364; i12++) {
            Test.instanceCount |= Test.instanceCount;
            i9 += (i12 + Test.instanceCount);
        }
        long meth_res = i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + s + by + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=-16, i3=-9, i4=-25081, i5=-12, iArr[]=new int[N];
        float f=1.1017F;
        boolean b1=false;
        byte by1=9;

        FuzzerUtils.init(iArr, -18747);

        for (i2 = 1; 181 > i2; i2++) {
            for (i4 = i2; i4 < 9; i4++) {
                switch ((((i2 >>> 1) % 2) * 5) + 16) {
                case 21:
                    i5 += (--i1);
                    i5 = (int)(iArr[i2] >>> ((i1 >>= i2) % (Test.instanceCount | 1)));
                case 25:
                    Test.instanceCount = (long)(i4 + 2.120180);
                    iArr[i2 - 1] *= (int)-3677930492L;
                    i5 += (((i4 * i1) + i4) - f);
                    break;
                }
                try {
                    iArr[i4 + 1] = (iArr[i4 + 1] % -30486);
                    i3 = (i4 / -262862231);
                    i1 = (19028 / i4);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = (++i1);
            }
            i5 &= (int)((Test.dArrFld[i2]--) * Test.instanceCount);
            f += (~iMeth(i1, b1, i2));
            Test.instanceCount = i3;
            by1 -= (byte)i3;
        }
        i5 <<= i2;
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i15=3, i16=150, i17=61244;
        double d1=-1.113289, d2=-1.38229;
        short s1=16558;

        i = 224;
        while (--i > 0) {
            switch (((i >>> 1) % 7) + 95) {
            case 95:
                if (Test.bFld) {
                    vMeth(Test.iFld);
                    Test.iFld += i;
                    if (Test.bFld) continue;
                } else {
                    Test.fFld += 1.499F;
                    Test.iFld += i;
                    fArrFld[i - 1] += Test.instanceCount;
                }
                Test.instanceCount += i;
                for (i15 = 5; 112 > i15; i15++) {
                    for (d1 = 1; 2 > d1; ++d1) {
                        Test.iFld *= -237;
                        Test.bFld = false;
                        if (Test.bFld) {
                            i16 = Test.iFld;
                            byFld |= (byte)i16;
                            i17 |= (int)Test.instanceCount;
                        }
                        Test.bFld = Test.bFld;
                        byFld *= (byte)Test.instanceCount;
                        d2 = Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                        Test.iFld = i15;
                    }
                    s1 = (short)i;
                    Test.sArrFld = Test.sArrFld;
                    try {
                        Test.iArrFld[i] = (Test.iArrFld[i15 + 1] % Test.iArrFld[i + 1]);
                        Test.iFld = (Test.iFld % -23994);
                        Test.iArrFld[i15 + 1] = (-56024 % Test.iArrFld[i15 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i16 -= i16;
                    i17 += (i15 | i16);
                }
                if (Test.bFld) continue;
                break;
            case 96:
                i17 >>>= i16;
                break;
            case 97:
                Test.iFld += (i + i16);
                break;
            case 98:
                byFld = (byte)i15;
            case 99:
            case 100:
                Test.iFld = (int)Test.fFld1;
            case 101:
                Test.iFld <<= (int)748804296908881133L;
            default:
                Test.iFld1 <<= byFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
