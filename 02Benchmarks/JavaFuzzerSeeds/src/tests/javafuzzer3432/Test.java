package tests.javafuzzer3432;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:15:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1L;
    public static int iFld=25512;
    public static volatile float fFld=-88.208F;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -32414);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b) {

        int i4=-13, i5=149, i6=130, i7=-14, i8=85, i9=9399, i10=37247, i11=-242, i12=-48516;

        Test.iFld -= Test.iFld;
        Test.iFld >>= Test.iFld;
        Test.instanceCount = (long)Test.fFld;
        for (i4 = 11; i4 < 317; ++i4) {
            for (i6 = i4; i6 < 5; ++i6) {
                i7 = i7;
            }
            Test.iFld = (int)Test.fFld;
            Test.iArrFld1[i4 + 1] = (int)8L;
            Test.iFld |= i6;
            Test.instanceCount <<= -11;
            Test.iFld = i6;
            for (i8 = 1; i8 < 5; ++i8) {
                for (i10 = 1; i10 < 2; i10++) {
                    Test.fFld += (((i10 * i12) + Test.fFld) - i10);
                    i9 += (i10 * i10);
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12;
    }

    public static int iMeth(int i3, long l) {

        double d1=1.110337, dArr[]=new double[N];
        short s=-22042;
        int i13=35, i14=90, i15=-36638, i16=182, i17=6, i18=-10;
        boolean b2=false;

        FuzzerUtils.init(dArr, 46.108432);

        for (double d : dArr) {
            boolean b1=false;
            vMeth1(b1);
        }
        d1 -= Test.instanceCount;
        Test.iFld = s;
        for (i13 = 171; 5 < i13; --i13) {
            i3 += (i13 * i13);
            for (i15 = i13; i15 < 10; i15++) {
                Test.iArrFld1[i15 + 1] /= 4;
                for (i17 = 1; i17 < 1; i17++) {
                    i16 = (int)-838910070451326051L;
                    b2 = false;
                    Test.instanceCount %= (l | 1);
                    d1 -= Test.iFld;
                    Test.iFld += (i17 ^ i14);
                    i14 |= (int)l;
                }
            }
        }
        long meth_res = i3 + l + Double.doubleToLongBits(d1) + s + i13 + i14 + i15 + i16 + i17 + i18 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=12, i2=-121, i19=-1997, i20=69, i21=11, i22=1, i23=237;
        float f=1.455F;

        for (i1 = 14; i1 < 265; ++i1) {
            i2 += (i2 - -12);
            i2 = (int)(iMeth(Test.iFld, 39656L) * Test.fFld);
            Test.fFld -= 43569;
        }
        for (f = 183; f > 3; f -= 2) {
            i19 += (int)Test.instanceCount;
            for (i20 = 1; i20 < 17; i20++) {
                i19 += (int)Test.instanceCount;
                for (i22 = 1; i22 < 2; i22++) {
                    double d2=101.115775;
                    Test.iFld += -146;
                    i2 = 18;
                    i23 = (int)-1.105037;
                    i2 = -42844;
                    d2 = i23;
                    Test.iArrFld1[i22] = (int)1443188913529044517L;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i19 + i20 + i21 + i22 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i=-42780, i24=-158, i25=24573, i26=81, i27=42686, i28=3, i29=-103, i30=9555, i31=-156;
        float f1=-1.835F;
        short s1=-9121;
        boolean b3=true;
        byte by=-17;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 44.8544);

        i = (iArrFld[(i >>> 1) % N]--);
        vMeth();
        for (i24 = 193; i24 > 7; i24--) {
            Test.fFld = i25;
            f1 = 135;
            do {
                Test.instanceCount = -18;
                i += (6397 + (f1 * f1));
                try {
                    Test.iFld = (i24 / i25);
                    i25 = (i / -166);
                    Test.iFld = (i % 128);
                } catch (ArithmeticException a_e) {}
            } while ((f1 -= 2) > 0);
            Test.instanceCount += (((i24 * s1) + i25) - i);
            i -= Test.iFld;
            i25 += i;
            Test.fFld = 11;
        }
        for (i26 = 14; i26 < 262; i26++) {
            Test.iArrFld1[i26 + 1] *= i26;
            for (i28 = 2; i28 < 101; ++i28) {
                for (i30 = i28; 2 > i30; i30++) {
                    double d3=0.48084;
                    Test.instanceCount += (i30 + i28);
                    i25 = 2;
                    i25 = i29;
                    i27 += i26;
                    switch ((((i25 >>> 1) % 7) * 5) + 1) {
                    case 23:
                        b3 = b3;
                        d3 += i30;
                        i27 = i29;
                        switch (((i30 % 1) * 5) + 67) {
                        case 71:
                            by += (byte)(124.790F + (i30 * i30));
                            i = -31025;
                            Test.fFld -= Test.instanceCount;
                            s1 -= (short)7715029888765194014L;
                        default:
                            i29 = 13610;
                        }
                        break;
                    case 10:
                        Test.iFld -= (int)61049L;
                        break;
                    case 22:
                        dArr1[i26] -= d3;
                    case 9:
                        i25 += (i30 ^ i30);
                        break;
                    case 13:
                        i25 += 8;
                        break;
                    case 18:
                        Test.instanceCount += (((i30 * i28) + Test.instanceCount) - f1);
                    case 12:
                        i31 += (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
