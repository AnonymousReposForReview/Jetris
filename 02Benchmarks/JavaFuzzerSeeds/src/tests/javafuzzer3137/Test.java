package tests.javafuzzer3137;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:33:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1023707219L;
    public static float fFld=117.134F;
    public static volatile double dFld=0.16564;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        double d=0.40541;
        short s=23665;
        int i5=-56863, i6=-7, i7=-9, i8=-23113, i9=-42129;
        long l1=-1422041150L, lArr[]=new long[N];
        byte by=-88;

        FuzzerUtils.init(lArr, -20021L);

        d += 22830;
        Test.fFld = s;
        lArr[(i5 >>> 1) % N] = Test.instanceCount;
        for (l1 = 2; l1 < 123; l1++) {
            lArr[(int)(l1)] += i6;
            lArr[(int)(l1 + 1)] -= i6;
            i6 += (int)l1;
            for (i7 = 1; i7 < 13; ++i7) {
                i9 = 1;
                do {
                    boolean b=false;
                    Test.instanceCount >>= 23668;
                    i8 = i6;
                    Test.instanceCount <<= i6;
                    if (b) break;
                    i5 += by;
                    i8 >>= (int)l1;
                } while ((i9 += 3) < 2);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + i5 + l1 + i6 + i7 + i8 + i9 + by + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2) {

        int i3=-2868, i4=-166, i10=37859, i11=-55, i12=59912, i13=48, iArr1[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, -6);

        for (i3 = 4; i3 < 148; i3++) {
            byte by1=-4;
            iMeth();
            by1 ^= (byte)8;
            i2 *= -101;
            for (i10 = i3; i10 < 11; i10++) {
                Test.dFld -= -9;
                i2 += (i10 * i10);
                iArr1[i3 + 1] >>= by1;
                i2 -= i11;
                i2 += i10;
                Test.instanceCount *= -253;
                for (i12 = 1; i12 > 1; i12--) {
                    if (i12 != 0) {
                        vMeth1_check_sum += i2 + i3 + i4 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                }
                i2 += (((i10 * i13) + i13) - Test.fFld);
            }
            if (b1) continue;
        }
        vMeth1_check_sum += i2 + i3 + i4 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        int i=-218, i1=2, i14=-145, iArr[]=new int[N];
        short s1=10052;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -29434);
        FuzzerUtils.init(lArr1, 928400571L);

        for (i = 2; i < 155; i++) {
            iArr[i - 1] %= (int)((i1++) | 1);
            vMeth1(i1);
            i1 -= i;
            i14 = 1;
            do {
                switch (((i1 >>> 1) % 2) + 21) {
                case 21:
                    iArr[i] = 24446;
                    iArr[i + 1] = i;
                    break;
                case 22:
                    switch (((i14 % 2) * 5) + 109) {
                    case 117:
                        lArr1[i] *= s1;
                        break;
                    case 119:
                        i1 -= (int)Test.fFld;
                        i1 = (int)Test.dFld;
                        break;
                    }
                    lArr1[i + 1] -= (long)1.61307;
                    break;
                }
                l = i14;
                Test.instanceCount <<= l;
            } while ((i14 += 3) < 10);
        }
        vMeth_check_sum += l + i + i1 + i14 + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i15=-39009, i16=-4, i17=16721, i18=55230, i19=141, i20=-4, i21=-2, i22=185, iArr2[]=new int[N];
        long l2=-5705126694526622202L, l3=3786612975L;
        byte by2=33;
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 62420);
        FuzzerUtils.init(fArr, -2.816F);

        vMeth(Test.instanceCount);
        i15 = i15;
        i15 = i15;
        for (l2 = 23; l2 < 389; l2++) {
            for (l3 = 1; l3 < 69; l3++) {
                i17 = i15;
                Test.instanceCount += (l3 * l3);
                Test.fFld += (l3 * l3);
                if (b2) {
                    i17 = i17;
                    iArr2[(int)(l3 - 1)] &= by2;
                    dArrFld[(int)(l3 + 1)] += i15;
                } else if (b2) {
                    iArr2[(int)(l2 - 1)] = i15;
                    i15 += i16;
                    i16 = i17;
                } else {
                    i16 = i15;
                    Test.dFld = i15;
                    by2 *= (byte)i17;
                    i15 += (int)(((l3 * i17) + i17) - i16);
                }
                for (i18 = (int)(l2); i18 < 2; i18++) {
                    Test.fFld -= i17;
                    Test.fFld += (((i18 * i17) + i15) - Test.fFld);
                }
            }
            Test.instanceCount <<= l2;
            iArr2[(int)(l2)] <<= (int)Test.instanceCount;
            i16 = i19;
            for (i20 = (int)(l2); i20 < 69; ++i20) {
                i17 = i18;
                i22 = 1;
                do {
                    i17 += i22;
                    Test.dFld = i17;
                } while (++i22 < 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
