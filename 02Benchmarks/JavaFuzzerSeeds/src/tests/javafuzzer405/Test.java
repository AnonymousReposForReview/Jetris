package tests.javafuzzer405;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:17:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-69L;
    public static double dFld=-1.103382;
    public static byte byFld=-60;
    public boolean bFld=false;
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-14283);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, int i10) {

        short s=129;
        int i11=5, i12=63294, i13=-79, i14=2, i15=162, i16=-13, iArr1[][]=new int[N][N];
        float f=2.732F;

        FuzzerUtils.init(iArr1, -14);

        s += (short)i10;
        i10 >>= i9;
        for (i11 = 288; i11 > 10; i11 -= 2) {
            i12 = s;
            i9 += (int)8058880846057317703L;
            i12 = i13;
            Test.dFld -= i12;
            i9 += i9;
        }
        i10 -= -2;
        i14 = 1;
        do {
            i13 = (int)Test.dFld;
            iArr1[i14][i14 - 1] = (int)f;
        } while (++i14 < 156);
        for (i15 = 320; i15 > 10; i15--) {
            i9 >>= i14;
            f -= i15;
        }
        vMeth1_check_sum += i9 + i10 + s + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i5, int i6, byte by) {

        int i7=8423, i8=37455, i17=-8, i18=55977, i19=-25632, i20=-7, i21=14, i22=0, iArr[]=new int[N];
        float f1=-2.490F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 30549);
        FuzzerUtils.init(dArr, 0.123397);

        iArr[(i6 >>> 1) % N] = (int)dArr[(i5 >>> 1) % N];
        for (i7 = 137; i7 > 5; --i7) {
            Test.instanceCount = (long)Test.dFld;
            Test.sArrFld[i7 - 1] *= (short)i6;
            vMeth1(i6, i6);
            i5 = 12;
        }
        try {
            for (i17 = 1; i17 < 237; ++i17) {
                i19 = 1;
                do {
                    iArr[i17] <<= i20;
                    i6 = i17;
                    i20 += (int)Test.instanceCount;
                } while (++i19 < 7);
                for (i21 = 1; i21 < 7; i21++) {
                    f1 -= i19;
                    i18 *= by;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            Test.instanceCount = Test.instanceCount;
        }
        finally {
            i18 = (int)64839L;
        }
        long meth_res = i5 + i6 + by + i7 + i8 + i17 + i18 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i) {

        double d=-1.127247, d1=7.69961;
        int i1=15363, i2=4, i3=-105, i4=-99;
        byte by1=-23;
        float f2=1.521F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5L);

        d = ((-(Test.instanceCount + i)) + Math.abs(i));
        for (i1 = 2; i1 < 377; ++i1) {
            for (i3 = 1; i3 < 5; i3 += 3) {
                d = fMeth(i2, i1, by1);
                d1 = 1;
                do {
                    lArr = FuzzerUtils.long1array(N, (long)3L);
                    if (b) {
                        if (b) {
                            if (i3 != 0) {
                                vMeth_check_sum += i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + by1 +
                                    Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                                    FuzzerUtils.checkSum(lArr);
                                return;
                            }
                            f2 += (float)(((d1 * Test.instanceCount) + i3) - i3);
                            lArr[i1] += -56581;
                        } else {
                            i *= (int)f2;
                        }
                        lArr[i1 - 1] += -518363285L;
                    }
                    i2 = (int)Test.instanceCount;
                } while (++d1 < 5);
            }
            i4 += (int)2.44132;
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + by1 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=-2, i24=-2962, i25=-4, i26=152, i27=-3618, i28=62452, i29=-7, i30=-222, i31=6, iArr2[]=new int[N];
        float f3=-1.174F;
        short s1=-8270;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 55505);
        FuzzerUtils.init(lArr1, 9L);

        vMeth(i23);
        iArr2 = FuzzerUtils.int1array(N, (int)-206);
        i23 -= i23;
        i23 = (int)Test.instanceCount;
        i23 += (int)f3;
        for (i24 = 337; i24 > 17; i24--) {
            i26 = 1;
            while (++i26 < 79) {
                iArr2[i24] <<= i24;
                Test.instanceCount += (i26 | i23);
                switch (((i26 % 2) * 5) + 24) {
                case 34:
                    if (false) break;
                    break;
                case 33:
                    Test.byFld = (byte)-234;
                    break;
                default:
                    for (i27 = 1; i27 > 1; i27--) {
                        iArr2[i24 - 1] = i26;
                    }
                    i25 = (int)Test.instanceCount;
                    i25 += i27;
                }
                i29 += (int)f3;
                i25 -= s1;
                Test.instanceCount = i29;
                try {
                    i23 = (1684020440 % iArr2[i26 - 1]);
                    i28 = (251870399 % i25);
                    i28 = (iArr2[i26 - 1] / 24520);
                } catch (ArithmeticException a_e) {}
            }
            switch (((i24 % 6) * 5) + 2) {
            case 19:
                i28 += (-57262 + (i24 * i24));
                for (i30 = 4; i30 < 79; ++i30) {
                    iArr2[i30] = (int)Test.instanceCount;
                    i25 -= i23;
                    i31 += (i30 | i24);
                }
                lArr1[i24 + 1] *= Test.byFld;
                s1 |= (short)i30;
            case 6:
                Test.instanceCount += (((i24 * Test.byFld) + i27) - i30);
                break;
            case 12:
                if (bFld) continue;
                break;
            case 23:
                i31 += i24;
                break;
            case 8:
                Test.instanceCount >>= Test.instanceCount;
                break;
            case 3:
                s1 = (short)i29;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
