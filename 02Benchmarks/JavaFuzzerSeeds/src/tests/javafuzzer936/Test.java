package tests.javafuzzer936;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:50:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2335050287L;
    public static boolean bFld=true;
    public static volatile short sFld=-26901;
    public static double dFld=-5.75021;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static volatile boolean bArrFld[]=new boolean[N];
    public volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8346332455498127019L);
        FuzzerUtils.init(Test.fArrFld, 56.158F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8) {

        double d=25.70514, d1=70.96063, d2=26.129006;
        int i9=-19213, i10=2, iArr2[]=new int[N];
        byte by1=18;
        boolean b=true;
        float f2=1.780F;

        FuzzerUtils.init(iArr2, 154);

        for (d = 8; d < 156; ++d) {
            if (b) {
                for (d1 = d; d1 < 11; ++d1) {
                    Test.instanceCount = by1;
                    d2 += i8;
                    i8 = (int)d;
                    b = b;
                    i8 = (int)Test.instanceCount;
                    try {
                        i10 = (i8 / iArr2[(int)(d - 1)]);
                        i8 = (i8 % i10);
                        iArr2[(int)(d1 - 1)] = (i8 / -250);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount <<= i10;
                    Test.instanceCount = (long)f2;
                }
                vMeth_check_sum += i8 + Double.doubleToLongBits(d) + i9 + Double.doubleToLongBits(d1) + i10 + by1 +
                    Double.doubleToLongBits(d2) + (b ? 1 : 0) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
                return;
            } else {
                by1 &= (byte)i8;
                i10 >>>= i10;
                f2 += i10;
                Test.instanceCount = i9;
            }
        }
        vMeth_check_sum += i8 + Double.doubleToLongBits(d) + i9 + Double.doubleToLongBits(d1) + i10 + by1 +
            Double.doubleToLongBits(d2) + (b ? 1 : 0) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(byte by) {

        int i7=-60597, i11=29711, i12=-3, i13=-55299, iArr3[]=new int[N];
        double d3=1.93933, d4=-70.43172;
        float f3=110.440F;

        FuzzerUtils.init(iArr3, -115);

        Test.fArrFld[(i7 >>> 1) % N] += Math.abs(170);
        vMeth(i7);
        i7 = -24671;
        i7 = i7;
        iArr3[(i7 >>> 1) % N] += 4;
        for (d3 = 8; d3 < 314; d3++) {
            i7 = (int)Test.instanceCount;
            for (d4 = 1; d4 < 5; d4++) {
                i13 = 2;
                while (--i13 > 0) {
                    iArr3[i13] = i12;
                    if (false) continue;
                    i7 >>= (int)Test.instanceCount;
                }
                Test.instanceCount += (long)(((d4 * f3) + i12) - f3);
                i7 += i12;
                i12 ^= i12;
            }
        }
        long meth_res = by + i7 + Double.doubleToLongBits(d3) + i11 + Double.doubleToLongBits(d4) + i12 + i13 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i6=0, i14=-94, i15=-14, i16=-36877, i17=-10, i18=12, i19=-238, iArr1[]=new int[N];
        float f1=0.951F;
        byte by2=-5;
        double d5=-2.36519;

        FuzzerUtils.init(iArr1, 11);

        i6 -= (int)(((i6 + f1) - i6) * ((i6 *= i6) + 0));
        iArr1[(i6 >>> 1) % N] -= ((++i6) + iMeth(by2));
        f1 = i6;
        Test.lArrFld[(i6 >>> 1) % N] += Test.instanceCount;
        for (i14 = 2; i14 < 137; ++i14) {
            i15 += (((i14 * Test.instanceCount) + i6) - f1);
            for (i16 = 1; i16 < 12; i16++) {
                i15 += (i16 * i16);
                for (i18 = 1; i18 < 2; i18++) {
                    switch ((i18 % 7) + 31) {
                    case 31:
                        i15 -= -172;
                        switch (((49487 >>> 1) % 7) + 18) {
                        case 18:
                            Test.bFld = Test.bFld;
                            break;
                        case 19:
                            i15 = i16;
                            Test.bArrFld[i16 + 1] = Test.bFld;
                            break;
                        case 20:
                            Test.instanceCount = i16;
                            break;
                        case 21:
                            if (i16 != 0) {
                            }
                        case 22:
                        case 23:
                            by2 = (byte)Test.instanceCount;
                            break;
                        case 24:
                            i15 += (int)d5;
                        }
                        break;
                    case 32:
                        i6 += (int)d5;
                        break;
                    case 33:
                        i17 -= i6;
                        break;
                    case 34:
                        iArr1[i16 - 1] *= i16;
                        break;
                    case 35:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 36:
                        Test.instanceCount += (((i18 * i6) + i17) - Test.instanceCount);
                        break;
                    case 37:
                    default:
                        i15 <<= -7;
                    }
                }
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f1) + by2 + i14 + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d5) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-146, i1=-174, i2=23, i3=-138, i4=-40978, i5=65288, i20=12144, i21=125, i22=83, i23=-229, i24=-230,
            iArr[]=new int[N];
        float f=100.145F, fArr[]=new float[N];
        short s=-18935;
        boolean b1=false;
        byte by3=18;
        double d6=2.13812;

        FuzzerUtils.init(fArr, 123.771F);
        FuzzerUtils.init(iArr, -5);

        Test.instanceCount = (i--);
        for (i1 = 11; i1 < 389; i1++) {
            for (i3 = 1; i3 < 67; ++i3) {
                i4 %= (int)1.214F;
                i -= (int)(((i1 + f) + (-Integer.reverseBytes(i2))) + (i4 ^= (++i)));
            }
        }
        for (long l : Test.lArrFld) {
            i5 = 1;
            while (++i5 < 63) {
                if (b1) {
                    fArr[i5] += i;
                    iArr[i5 + 1] = (i4 + s);
                    i4 ^= (int)((++i) ^ (long)(i2 -= (int)fMeth()));
                    Test.instanceCount >>= i3;
                }
                i2 += by3;
                i2 -= s;
                i4 += i5;
                for (i20 = 1; i20 < 1; ++i20) {
                    iArr[i5 + 1] -= i21;
                    if (false) continue;
                }
                try {
                    iArr[i5] = (iArr[i5] % -10);
                    iArr[i5] = (-28042 / i5);
                    i21 = (i / -25839);
                } catch (ArithmeticException a_e) {}
            }
            for (i22 = 3; i22 < 63; i22++) {
                i2 = Test.sFld;
                for (d6 = 1; d6 < 2; ++d6) {
                    iArr[i22 - 1] = i2;
                    i += (int)(d6 + i3);
                    Test.instanceCount = 10;
                    if (b1) {
                        i2 += (int)(((d6 * i4) + l) - i2);
                    } else if (b1) {
                        Test.dFld += i22;
                        f = -212;
                        dArrFld[(int)(d6)] = l;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
