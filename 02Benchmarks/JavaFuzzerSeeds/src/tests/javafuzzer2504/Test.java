package tests.javafuzzer2504;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:39:46 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9L;
    public short sFld=11917;
    public static short sFld1=17854;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        float f=2.665F, f1=1.537F;
        int i8=7962, i9=-27924, i10=223, i11=-59649;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 108.83103);

        i7 += (int)f;
        for (f1 = 9; f1 < 221; ++f1) {
            i7 = i8;
            dArr[(int)(f1 + 1)] *= i7;
            f -= i7;
            i7 = (int)-1L;
            for (i9 = 1; i9 < 8; i9++) {
                i11 = 1;
                do {
                    Test.iArrFld[i9] %= 16784;
                    Test.instanceCount &= Test.instanceCount;
                    i8 += i11;
                    i10 += (i11 + f);
                    i7 += i9;
                    i10 = Test.sFld1;
                    i8 += i7;
                } while ((i11 += 2) < 2);
            }
        }
        vMeth_check_sum += i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(int i6) {

        int i12=-41750, i13=-10, i14=-60305, i15=2, i16=65, i17=11, i18=-1481, i19=-160;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.750F);

        vMeth(i6);
        fArr[(i6 >>> 1) % N] = 10950;
        i6 <<= i6;
        i6 *= i6;
        for (i12 = 354; i12 > 15; i12 -= 2) {
            i6 -= i6;
            for (i14 = 9; i14 > 1; --i14) {
                Test.instanceCount = i12;
                for (i16 = 2; i16 > 1; i16--) {
                    i6 = i12;
                }
                b = b;
            }
            i6 = i16;
            for (i18 = 1; 9 > i18; ++i18) {
                if (b) continue;
                i19 += i18;
            }
        }
        long meth_res = i6 + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3) {

        int i4=146, i5=64797, i20=35500, i21=-2, i22=60;
        byte by=2, byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-7373);
        FuzzerUtils.init(byArr, (byte)58);

        for (i4 = 1; 181 > i4; ++i4) {
            if (i5 != 0) {
            }
            lMeth(i3);
            for (i20 = 9; 1 < i20; i20--) {
                by += (byte)(((i20 * i21) + i20) - i4);
                i22 = 1;
                while (++i22 < 2) {
                    sArr[i4 + 1] = (short)i3;
                    if (Test.bFld) continue;
                    switch ((i22 % 3) + 81) {
                    case 81:
                        Test.iArrFld[i20 + 1] >>= i21;
                        Test.instanceCount += i22;
                    case 82:
                        i21 *= i21;
                        if (false) continue;
                        byArr[i20] = (byte)Test.sFld1;
                        i21 = i21;
                    case 83:
                        i3 += i22;
                        break;
                    default:
                        i5 += i5;
                    }
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i20 + i21 + by + i22 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2182, i1=4, i2=35710, i23=-2883, i24=37317, i25=11, i26=-156, iArr[][]=new int[N][N];
        double d=29.24276, d1=0.94604;
        float f2=2.23F;
        byte by1=-33;
        short sArr1[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(sArr1, (short)-9024);
        FuzzerUtils.init(lArr, 8095967994897146111L);

        iArr[(i >>> 1) % N][(20164 >>> 1) % N] -= (int)(-(Test.instanceCount += (i - sFld)));
        if (Test.bFld) {
            for (i1 = 1; i1 < 245; ++i1) {
                iMeth(i1);
                i2 = i2;
                for (d = 103; 3 < d; d -= 2) {
                    Test.instanceCount = i2;
                    if (Test.bFld) {
                        i += i;
                        i = (int)Test.instanceCount;
                        try {
                            i = (50242 % i23);
                            i = (i1 / -643715433);
                            i23 = (-135 % i);
                        } catch (ArithmeticException a_e) {}
                    } else if (Test.bFld) {
                        d1 = 3;
                        do {
                            f2 -= 64570L;
                            i23 += (int)d1;
                            f2 += (float)(d1 * i2);
                        } while ((d1 -= 3) > 0);
                        i24 = 1;
                        do {
                            sArr1 = sArr1;
                            i = i1;
                            i23 *= -6;
                            i2 += (i24 * i24);
                            i2 -= i1;
                            i23 += (i24 ^ (long)f2);
                            i = 5775;
                        } while (++i24 < 3);
                        switch ((int)((d % 2) + 29)) {
                        case 29:
                            for (i25 = 3; 1 < i25; --i25) {
                                Test.iArrFld[i25 - 1] = (int)d1;
                                by1 = (byte)Test.instanceCount;
                                Test.iArrFld[(int)(d)] <<= i26;
                                lArr[i25] += i25;
                            }
                            i -= -13;
                            break;
                        case 30:
                            i2 = (int)Test.instanceCount;
                            break;
                        default:
                            if (Test.bFld) break;
                        }
                    } else {
                        i26 *= i24;
                    }
                }
            }
        } else {
            iArr[(i >>> 1) % N][(-56138 >>> 1) % N] = (int)-1.87708;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
