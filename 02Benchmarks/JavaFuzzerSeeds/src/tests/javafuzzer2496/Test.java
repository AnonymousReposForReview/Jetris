package tests.javafuzzer2496;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:26:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-216L;
    public static volatile short sFld=-22371;
    public static volatile double dFld=0.73700;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3832L);
        FuzzerUtils.init(Test.fArrFld, 0.374F);
        FuzzerUtils.init(Test.iArrFld, -44541);
        FuzzerUtils.init(Test.iArrFld1, 187);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vSmallMeth(long l) {

        int i=58251;
        double d=0.13426;

        i = (int)(d + (Test.instanceCount--));
        Test.instanceCount >>= (++i);
        vSmallMeth_check_sum += l + i + Double.doubleToLongBits(d);
    }

    public static void vMeth2() {

        double d2=-2.115909;
        int i11=8, i12=13, i13=10;
        float f1=-75.89F;

        Test.instanceCount = (long)d2;
        i11 += (int)Test.instanceCount;
        i12 = 136;
        do {
            i11 -= (int)Test.instanceCount;
            i13 = 33;
            do {
                f1 = Test.instanceCount;
                f1 += (((i13 * i13) + i13) - Test.instanceCount);
            } while ((i13 -= 3) > 0);
            f1 += (i12 * i12);
            if (i13 != 0) {
                vMeth2_check_sum += Double.doubleToLongBits(d2) + i11 + i12 + i13 + Float.floatToIntBits(f1);
                return;
            }
            f1 += -25304;
            switch (((i12 % 2) * 5) + 89) {
            case 91:
                Test.fArrFld[i12] = i11;
                Test.iArrFld[i12 + 1][i12 - 1] >>>= i13;
                d2 -= -37;
                break;
            case 90:
                i11 -= i12;
                break;
            default:
                Test.instanceCount <<= i12;
            }
        } while ((i12 -= 3) > 0);
        vMeth2_check_sum += Double.doubleToLongBits(d2) + i11 + i12 + i13 + Float.floatToIntBits(f1);
    }

    public static void vMeth1() {

        int i3=176, i4=-10, i5=60301, i6=75, i7=35837, i8=-247, i9=-32007, i10=6, iArr[]=new int[N];
        byte by1=7;
        float f=-61.873F;

        FuzzerUtils.init(iArr, -10);

        for (i3 = 11; i3 < 298; i3++) {
            Test.instanceCount = i4;
            for (i5 = 1; i5 < 6; ++i5) {
                i6 -= (int)Test.lArrFld[i3 + 1];
                iArr[i3] = ((--i6) + by1);
                Test.sFld = (short)Test.instanceCount;
                i4 = (i4 *= by1);
                i6 += (i5 * i5);
                for (i7 = 1; i7 < 2; ++i7) {
                    i6 <<= (int)(f - (f++));
                }
                i6 += (i5 * i5);
                i4 += -42018;
            }
            for (i9 = 1; i9 < 6; i9++) {
                vMeth2();
                i8 /= (int)(i7 | 1);
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + by1 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(short s, boolean b, int i2) {

        int i14=253, i15=-48823, i16=-8, i17=-23, i18=1;
        float f2=2.994F;

        vMeth1();
        Test.iArrFld[(i2 >>> 1) % N][(-34741 >>> 1) % N] -= i2;
        i2 = 61087;
        i2 += (int)Test.dFld;
        for (i14 = 341; i14 > 1; --i14) {
            Test.sFld += (short)i14;
            for (i16 = 1; i16 < 5; i16++) {
                i15 += (i16 ^ Test.instanceCount);
                i17 = i17;
                i18 = 1;
                while (++i18 < 2) {
                    i17 = (int)Test.instanceCount;
                    switch (((-6 >>> 1) % 6) + 35) {
                    case 35:
                        i2 += (i18 * i18);
                        i17 = i16;
                        Test.instanceCount += (i18 - i18);
                        break;
                    case 36:
                        i2 -= (int)Test.dFld;
                    case 37:
                        i2 += (int)f2;
                    case 38:
                        Test.instanceCount += (i18 * i18);
                        break;
                    case 39:
                    case 40:
                        Test.iArrFld1[i14] = i14;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += s + (b ? 1 : 0) + i2 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i1=12, i19=183, i20=-218, i21=-6, i22=2, i23=13, i24=-101, i25=-240, i26=38255, i27=6;
        byte by=-62;
        double d1=124.91415;
        boolean b1=true;
        float f3=84.548F;
        long l1=3L;

        for (int smallinvoc=0; smallinvoc<797; smallinvoc++) vSmallMeth(Test.lArrFld[(i1 >>> 1) % N]);
        Test.instanceCount += (-((by + Test.instanceCount) + 3183786058872610548L));
        vSmallMeth((long)(Test.instanceCount = (long)(++d1)));
        vMeth(Test.sFld, b1, i1);
        i19 = 1;
        while (++i19 < 168) {
            Test.sFld += (short)1.792F;
            switch ((((i19 >>> 1) % 2) * 5) + 84) {
            case 92:
                i1 <<= (int)397758068L;
                break;
            case 90:
                for (i20 = 2; i20 < 149; ++i20) {
                    for (i22 = i20; i22 < 2; i22++) {
                        by %= (byte)(Test.instanceCount | 1);
                        Test.instanceCount += (((i22 * i19) + Test.instanceCount) - Test.instanceCount);
                        b1 = b1;
                    }
                    b1 = true;
                    i23 = i1;
                    i21 *= (int)Test.instanceCount;
                }
                for (i24 = 3; i24 < 149; i24++) {
                    for (i26 = 1; i26 < 2; ++i26) {
                        i27 = i27;
                        switch ((i26 % 8) + 20) {
                        case 20:
                            try {
                                i21 = (i1 % i21);
                                Test.iArrFld1[i24] = (i1 % i1);
                                i1 = (Test.iArrFld1[i26 - 1] % -854016099);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = 0;
                        case 21:
                            f3 = l1;
                            if (b1) {
                                Test.iArrFld1[i19] = i20;
                            } else if (b1) {
                                i1 = i26;
                                i23 += (int)-6310L;
                                Test.iArrFld[i26 - 1][i24] >>= 229;
                            } else {
                                Test.sFld += (short)(13779 + (i26 * i26));
                                f3 += i26;
                            }
                            break;
                        case 22:
                        case 23:
                            i21 *= (int)2.95042;
                            break;
                        case 24:
                            Test.instanceCount *= -4;
                            break;
                        case 25:
                            i27 += i19;
                            break;
                        case 26:
                        case 27:
                            Test.iArrFld = FuzzerUtils.int2array(N, (int)20391);
                        }
                    }
                }
                break;
            default:
                i23 = i26;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
