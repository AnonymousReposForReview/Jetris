package tests.javafuzzer1020;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:55:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8382000372269538588L;
    public static int iFld=7;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 93.38551);
        FuzzerUtils.init(Test.lArrFld, 32324L);
        FuzzerUtils.init(Test.fArrFld, 0.118F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        int i6=30, i7=201, iArr1[]=new int[N];
        boolean b=true;
        float f=0.450F;
        byte by=102;
        short s=-8708;

        FuzzerUtils.init(iArr1, 141);

        i6 = 1;
        while (++i6 < 299) {
            if (b) continue;
            iArr1[i6] = (int)Test.instanceCount;
            switch ((((i5 >>> 1) % 2) * 5) + 106) {
            case 109:
                i5 = i5;
                Test.instanceCount += (4 + (i6 * i6));
                break;
            case 115:
                switch (((i6 % 2) * 5) + 115) {
                case 120:
                    i7 = 1;
                    while (++i7 < 6) {
                        Test.instanceCount += (long)f;
                        Test.instanceCount = Test.instanceCount;
                        i5 += (int)Test.instanceCount;
                        i5 >>= i6;
                        i5 &= -203;
                        i5 = i5;
                        f = by;
                    }
                    break;
                case 116:
                    Test.instanceCount *= i6;
                    break;
                default:
                    s *= (short)i6;
                }
                break;
            }
        }
        vMeth2_check_sum += i5 + i6 + (b ? 1 : 0) + i7 + Float.floatToIntBits(f) + by + s + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 7834);

        vMeth2(Test.iFld);
        iArr2[(Test.iFld >>> 1) % N] += (int)-2.65227;
        Test.lArrFld[(Test.iFld >>> 1) % N] = Test.lArrFld[(Test.iFld >>> 1) % N];
        vMeth1_check_sum += FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(double d) {

        int i=-32, i1=2, i2=-231, i3=12, i4=42429, i8=35, iArr[]=new int[N];
        float f1=2.529F;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 80);
        FuzzerUtils.init(byArr, (byte)49);

        i = 1;
        do {
            for (i1 = 5; 1 < i1; --i1) {
                iArr[i] = (iArr[(-26834 >>> 1) % N]++);
                for (i3 = 1; i3 < 2; i3++) {
                    Test.dArrFld[i1 + 1] *= (i4--);
                    vMeth1();
                    f1 += Test.instanceCount;
                    byArr[i + 1] /= (byte)-39;
                    Test.iFld = i2;
                }
                if (b1) break;
                Test.instanceCount += (i1 ^ Test.instanceCount);
            }
        } while (++i < 372);
        iArr[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        i8 = 1;
        do {
            i2 -= i3;
            if (true) continue;
        } while (++i8 < 238);
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + (b1 ? 1 : 0)
            + i8 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        double d1=0.30922, d2=-2.123651;
        int i9=-1, i10=-5, i11=59232, i12=0, i13=-202, i14=-149, i15=-14831, i16=-7, i17=-13, i18=-2, i19=-39296,
            iArr3[]=new int[N];
        byte by2=8, byArr1[]=new byte[N];
        float f2=-2.998F;
        boolean b2=false;

        FuzzerUtils.init(iArr3, 4);
        FuzzerUtils.init(byArr1, (byte)99);

        vMeth(d1);
        if (b2) {
            i9 = 1;
            do {
                iArr3[i9 + 1] = Test.iFld;
                for (i10 = 139; i10 > 4; i10--) {
                    by2 += (byte)Test.iFld;
                    Test.instanceCount = -31454;
                    f2 *= Test.instanceCount;
                }
                for (i12 = 6; 139 > i12; ++i12) {
                    if (b2) continue;
                    i11 = by2;
                    Test.instanceCount >>= i10;
                    Test.fArrFld[i9] = Test.instanceCount;
                    i11 = 204;
                    for (i14 = i9; 2 > i14; ++i14) {
                        Test.instanceCount -= i10;
                    }
                    i13 = Test.iFld;
                    i13 ^= (int)Test.instanceCount;
                }
                Test.instanceCount += (i9 * i15);
                i13 += (i9 - i11);
                d1 *= Test.instanceCount;
            } while (++i9 < 181);
            Test.iFld -= i15;
            i15 += 155;
            i16 = 1;
            do {
                for (d2 = 10; 162 > d2; ++d2) {
                    f2 -= i9;
                }
                i11 = i9;
                for (i18 = i16; i18 < 162; ++i18) {
                    f2 += i9;
                    i17 = (int)Test.instanceCount;
                }
            } while (++i16 < 155);
        } else if (b2) {
            Test.dArrFld = Test.dArrFld;
        } else {
            f2 += i13;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
