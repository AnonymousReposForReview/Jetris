package tests.javafuzzer1457;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:02:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=950328633264086266L;
    public volatile short sFld=-16090;
    public static volatile int iFld=-227;
    public float fFld=1.553F;
    public static boolean bArrFld[]=new boolean[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i5=-6, i6=-4, i7=-5520, i8=56, i9=-75, iArr[]=new int[N];
        float f=9.408F;
        boolean b2=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -140);
        FuzzerUtils.init(dArr, 0.122963);

        i5 -= i5;
        iArr[(-14 >>> 1) % N] = i5;
        i5 %= (int)(i5 | 1);
        i5 *= i5;
        f *= i5;
        for (i6 = 5; i6 < 172; i6++) {
            for (i8 = 1; i8 < 9; i8++) {
                int i10=-53727;
                try {
                    i7 = (i7 % i7);
                    iArr[i8] = (iArr[i8 + 1] / 73);
                    i7 = (i6 / -2090112716);
                } catch (ArithmeticException a_e) {}
                if (i5 != 0) {
                    vMeth1_check_sum += l1 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + (b2 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                if (b2) break;
                dArr[i8 - 1] = Test.iFld;
                i10 += (-3 + (i8 * i8));
                i5 = i8;
                iArr[i6 + 1] = i5;
                i10 = i5;
            }
        }
        vMeth1_check_sum += l1 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i3, int i4) {

        int i11=-46093, i12=166;
        boolean b3=false;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.466F);
        FuzzerUtils.init(lArr, 46828L);

        if (true) {
            vMeth1(Test.instanceCount);
            vMeth_check_sum += i3 + i4 + i11 + i12 + (b3 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))
                + FuzzerUtils.checkSum(lArr);
            return;
        } else if (b3) {
            for (i11 = 4; i11 < 196; ++i11) {
                fArr[(-94 >>> 1) % N] = -140;
                lArr[i11 - 1] = 44544;
                i3 -= i3;
                if (b3) continue;
                if (true) break;
            }
            lArr[(Test.iFld >>> 1) % N] >>= i4;
            Test.instanceCount >>= i11;
        }
        vMeth_check_sum += i3 + i4 + i11 + i12 + (b3 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(long l) {

        boolean b1=true;
        int i1=234, i2=61900, i13=-58036, i14=-14816, i15=144;
        byte by=38;
        float f1=-78.556F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 246L);

        b1 = b1;
        for (i1 = 10; i1 < 300; ++i1) {
            l = (i2 + ((by + sFld) - (Test.instanceCount - i1)));
            vMeth(Test.iFld, i1);
        }
        l -= i1;
        i13 = 1;
        do {
            i2 += i13;
            Test.instanceCount = i13;
        } while (++i13 < 321);
        if (b1) {
            i14 = 1;
            do {
                Test.bArrFld[i14] = b1;
                i15 = 1;
                while (++i15 < 8) {
                    lArr1[i14 + 1] -= i15;
                    i2 *= (int)l;
                    f1 -= i15;
                }
            } while (++i14 < 190);
        }
        long meth_res = l + (b1 ? 1 : 0) + i1 + i2 + by + i13 + i14 + i15 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i16=12, i17=-229, i18=-92, i19=-133, i20=-60753, i21=-6, iArr1[]=new int[N];
        boolean b=false;
        byte by1=102;
        double d=0.78218;

        FuzzerUtils.init(iArr1, -8);

        Test.instanceCount = ((Test.instanceCount++) * i);
        b = ((Test.instanceCount = iMeth(-6L)) == -4826L);
        by1 = (byte)Test.iFld;
        i = Test.iFld;
        by1 -= (byte)Test.instanceCount;
        Test.iFld &= (int)Test.instanceCount;
        for (i16 = 146; i16 > 7; i16--) {
            iArr1[i16] >>= i16;
            fFld *= 100.555F;
            Test.iFld = i17;
            for (i18 = 10; i18 < 180; i18 += 2) {
                for (i20 = 1; i20 < 3; ++i20) {
                    Test.iFld ^= 4;
                    iArr1[i18 - 1] = i18;
                    switch ((((i19 >>> 1) % 1) * 5) + 33) {
                    case 35:
                        b = b;
                        i19 = i20;
                    default:
                        switch ((i18 % 10) + 24) {
                        case 24:
                            Test.iFld += i20;
                            i17 += i20;
                            break;
                        case 25:
                            Test.instanceCount = (long)d;
                            break;
                        case 26:
                            lArrFld[i20 + 1] >>>= Test.instanceCount;
                            switch ((i20 % 10) + 70) {
                            case 70:
                            case 71:
                                Test.instanceCount -= Test.instanceCount;
                                Test.bArrFld[i18] = b;
                                i17 = (int)Test.instanceCount;
                                iArr1[i20] = (int)Test.instanceCount;
                            case 72:
                                iArr1 = iArr1;
                                break;
                            case 73:
                                i17 += (i20 ^ i20);
                            case 74:
                            case 75:
                                fFld = i18;
                            case 76:
                                fFld = i19;
                                break;
                            case 77:
                                iArr1 = iArr1;
                                break;
                            case 78:
                                fFld += Test.instanceCount;
                                break;
                            case 79:
                                sFld = by1;
                            default:
                                Test.instanceCount += (long)fFld;
                            }
                            break;
                        case 27:
                            i21 += (i20 * i20);
                            break;
                        case 28:
                            i19 *= 8;
                            break;
                        case 29:
                            i19 -= sFld;
                            break;
                        case 30:
                            try {
                                iArr1[i16 + 1] = (60623 / iArr1[i20 + 1]);
                                i17 = (i19 % i20);
                                i17 = (i17 % -7);
                            } catch (ArithmeticException a_e) {}
                        case 31:
                            fFld = i18;
                            break;
                        case 32:
                        case 33:
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
