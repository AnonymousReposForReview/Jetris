package tests.javafuzzer1957;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:30:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=57650L;
    public static float fFld=109.155F;
    public static boolean bFld=false;
    public static volatile short sFld=-4530;
    public long lFld=-3890632031L;
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)12215);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3) {

        double d=-59.111506, d1=84.35644;
        int i4=4, i5=163, i6=-237, i7=160, iArr[]=new int[N];
        long l1=-11L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 202);
        FuzzerUtils.init(lArr, -8L);

        i3 = i2;
        Test.instanceCount += i3;
        switch ((((i3 >>> 1) % 1) * 5) + 47) {
        case 50:
            d = 1;
            while (++d < 371) {
                i3 = i3;
                i2 = i3;
                iArr[(int)(d + 1)] &= (int)Test.instanceCount;
            }
            break;
        default:
            switch (((64877 >>> 1) % 3) + 35) {
            case 35:
                i3 = -15600;
                break;
            case 36:
                for (i4 = 253; i4 > 9; i4--) {
                    for (i6 = 1; i6 < 7; i6++) {
                        switch ((i4 % 6) + 116) {
                        case 116:
                            l1 -= i3;
                            iArr[i6] = i6;
                            l1 >>= i3;
                        case 117:
                            d1 = Test.instanceCount;
                            break;
                        case 118:
                            Test.fFld -= 0;
                            break;
                        case 119:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 120:
                            i2 -= (int)71L;
                            break;
                        case 121:
                            iArr[i4] = i6;
                            break;
                        }
                    }
                }
                break;
            case 37:
                lArr[(i2 >>> 1) % N] = i7;
            default:
                i5 |= i7;
            }
        }
        vMeth1_check_sum += i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + l1 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i8=-9, i10=-190, i11=8, i12=-49, i13=-5, iArr1[]=new int[N], iArr2[]=new int[N];
        long l2=125L;

        FuzzerUtils.init(iArr1, 43610);
        FuzzerUtils.init(iArr2, -21);

        vMeth1(i8, -11);
        i8 |= (int)Test.instanceCount;
        for (int i9 : iArr1) {
            switch (((i8 >>> 1) % 7) + 19) {
            case 19:
                iArr2[(i9 >>> 1) % N] *= i9;
                Test.instanceCount *= i8;
                break;
            case 20:
                Test.instanceCount = i8;
                break;
            case 21:
                for (i10 = 1; 4 > i10; ++i10) {
                    if (Test.bFld) break;
                }
                for (i12 = 1; 4 > i12; ++i12) {
                    Test.instanceCount += (((i12 * i12) + i13) - i13);
                    Test.instanceCount += (((i12 * Test.instanceCount) + Test.fFld) - i9);
                }
                Test.fFld -= i12;
                break;
            case 22:
                Test.instanceCount <<= Test.instanceCount;
                iArr2[(i11 >>> 1) % N] += i13;
            case 23:
            case 24:
                Test.instanceCount *= (long)Test.fFld;
                break;
            case 25:
                i9 += (int)l2;
            }
        }
        vMeth_check_sum += i8 + i10 + i11 + i12 + i13 + l2 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(int i1, long l) {

        int i15=29000, i16=-32, i17=-7, i18=9, iArr3[][]=new int[N][N];
        short s=9951;
        double d2=-99.20761, dArr[]=new double[N];
        byte by=-113;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr3, -50103);
        FuzzerUtils.init(dArr, -89.107674);
        FuzzerUtils.init(lArr1, -6L);
        FuzzerUtils.init(fArr, -26.105F);

        i1 += 0;
        i1 ^= (int)(-((Test.instanceCount * l) + (++Test.fFld)));
        vMeth();
        for (i15 = 6; 248 > i15; i15++) {
            i16 = i16;
            iArr3[i15][i15] |= i1;
            if (true) continue;
            iArr3[i15][i15] = (int)l;
        }
        i17 = 1;
        while (++i17 < 170) {
            switch (i17 + 95) {
            case 95:
                Test.fFld -= 36873L;
                i1 += i17;
                iArr3[i17 - 1][i17 + 1] <<= (int)Test.instanceCount;
            case 96:
                if (Test.bFld) break;
                i1 *= i16;
                break;
            case 97:
                i1 = (int)Test.fFld;
                break;
            case 98:
                dArr[i17 + 1] -= i1;
                break;
            case 99:
                lArr1[i17] += i16;
                break;
            case 100:
                i1 *= i15;
                break;
            case 101:
                Test.instanceCount *= i17;
                break;
            case 102:
                i1 = 4;
                break;
            case 103:
                iArr3[i17][i17] <<= i1;
                break;
            case 104:
                s += (short)d2;
            case 105:
                s += (short)i1;
                break;
            case 106:
                i16 = 12;
                break;
            case 107:
                i16 += (i17 * i17);
                break;
            case 108:
            case 109:
                try {
                    i16 = (i1 % -68101137);
                    i16 = (i16 / i17);
                    i1 = (-234 / i17);
                } catch (ArithmeticException a_e) {}
                break;
            case 110:
                Test.fFld += i16;
                break;
            case 111:
                Test.instanceCount += (-46027 + (i17 * i17));
                break;
            case 112:
                iArr3[i17 + 1][i17 + 1] = (int)l;
                break;
            case 113:
                i1 -= (int)Test.fFld;
            case 114:
                iArr3[(i15 >>> 1) % N][i17 - 1] = i15;
            case 115:
                if (false) continue;
                break;
            case 116:
                i1 <<= (int)l;
                break;
            case 117:
                if (Test.bFld) break;
            case 118:
                fArr[i17 + 1] = (float)101.113853;
                break;
            case 119:
                Test.sArrFld = Test.sArrFld;
            case 120:
                if (i16 != 0) {
                }
                break;
            case 121:
                by >>>= (byte)Test.instanceCount;
            case 122:
                i1 %= (int)(l | 1);
            case 123:
                Test.fFld *= -332;
                break;
            case 124:
                i1 *= -366;
            case 125:
                s *= (short)Test.fFld;
                break;
            case 126:
                Test.bFld = Test.bFld;
                break;
            case 127:
                l = i15;
                break;
            case 128:
                i1 *= i16;
                break;
            case 129:
                i1 += (i17 + i1);
            case 130:
                iArr3[i17 + 1][i17 + 1] += i17;
                break;
            case 131:
                if (Test.bFld) continue;
                break;
            case 132:
                i16 <<= i17;
                break;
            case 133:
                l >>= i17;
            case 134:
                Test.instanceCount += i17;
            case 135:
                i16 >>= -15897;
                break;
            case 136:
                i16 += i17;
                break;
            case 137:
                Test.instanceCount <<= i16;
                break;
            case 138:
                i1 >>= s;
                break;
            case 139:
            case 140:
                if (i17 != 0) {
                }
                break;
            case 141:
                Test.instanceCount = i1;
            case 142:
                Test.fFld = Test.instanceCount;
                break;
            case 143:
                l = (long)Test.fFld;
            case 144:
                s += (short)(i17 | Test.instanceCount);
            case 145:
                i16 = (int)1181441659L;
                break;
            case 146:
                i1 += (i17 * i17);
                break;
            case 147:
                i16 >>>= -11;
                break;
            case 148:
                iArr3[i17][i17] = i17;
                break;
            case 149:
                i1 = i16;
            case 150:
                i1 *= i18;
            case 151:
                i1 += (-37469 + (i17 * i17));
                break;
            case 152:
                if (Test.bFld) continue;
                break;
            case 153:
                i18 *= (int)Test.fFld;
            case 154:
                iArr3[i17 - 1] = iArr3[i17 - 1];
                break;
            case 155:
                i16 += (i17 + by);
                break;
            case 156:
                i16 = i1;
                break;
            case 157:
                Test.fFld += (((i17 * i18) + i1) - Test.instanceCount);
                break;
            case 158:
                Test.instanceCount = Test.instanceCount;
            case 159:
                iArr3[i17][i17] >>= i1;
            case 160:
            case 161:
                i16 = (int)l;
                break;
            case 162:
                i18 = (int)l;
                break;
            case 163:
                d2 -= i15;
                break;
            case 164:
                i18 = s;
            default:
                Test.instanceCount = by;
            }
        }
        long meth_res = i1 + l + i15 + i16 + i17 + s + Double.doubleToLongBits(d2) + by + i18 +
            FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10180, i19=129, i20=8, i21=19, i22=14, i23=94, i24=12, i25=-5, i26=10;
        byte by1=-112, byArr[]=new byte[N];
        double dArr1[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr1, 23.32872);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)59);

        i = (int)(fMeth(i, Test.instanceCount) - i);
        for (double d3 : dArr1) {
            dArr1[(i >>> 1) % N] = -62;
            Test.sFld = (short)i;
            bArr[(i >>> 1) % N] = Test.bFld;
            for (i19 = 63; i19 > 1; i19--) {
                for (i21 = 1; i21 < 2; i21++) {
                    Test.sArrFld[i21][i21] >>= (short)-132;
                    Test.instanceCount <<= i;
                }
                for (i23 = i19; i23 < 2; i23++) {
                    i22 += (i23 | Test.instanceCount);
                    i = i24;
                    i20 += (i23 ^ Test.instanceCount);
                    i24 <<= (int)Test.instanceCount;
                    i24 += (((i23 * Test.instanceCount) + i23) - i23);
                }
                for (i25 = 2; i25 > 1; i25 -= 2) {
                    i24 += (26958 + (i25 * i25));
                    i22 %= (int)(i26 | 1);
                    dArr1[i25] = -129;
                    d3 -= Test.instanceCount;
                    byArr[i19 - 1] <<= (byte)i19;
                    lFld = i26;
                    i22 += (((i25 * Test.fFld) + i) - Test.instanceCount);
                    by1 = (byte)i22;
                    lFld += (i25 | (long)Test.fFld);
                    switch ((((75 >>> 1) % 1) * 5) + 95) {
                    case 100:
                        Test.fFld /= (i25 | 1);
                        Test.sFld -= (short)Test.fFld;
                        break;
                    }
                }
                i24 = (int)lFld;
                i26 ^= i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
