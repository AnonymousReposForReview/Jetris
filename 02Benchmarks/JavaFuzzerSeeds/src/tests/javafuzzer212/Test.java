package tests.javafuzzer212;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:16:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static boolean bFld=true;
    public float fFld=2.937F;
    public double dFld=0.25455;
    public double dArrFld[]=new double[N];
    public volatile long lArrFld[][]=new long[N][N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(boolean b, long l) {

        float f1=0.775F, fArr[][]=new float[N][N];
        int i4=-40002, i6=-92, iArr1[]=new int[N];
        double d1=49.58189;

        FuzzerUtils.init(fArr, -123.776F);
        FuzzerUtils.init(iArr1, -181);

        for (f1 = 5; 197 > f1; f1++) {
            if (b) continue;
            l = Test.instanceCount;
            if (b) continue;
        }
        i4 += (int)l;
        l += 0L;
        fArr[(i4 >>> 1) % N][(i4 >>> 1) % N] = i4;
        Test.instanceCount += i4;
        i4 -= (int)d1;
        for (int i5 : iArr1) {
            l += l;
            Test.instanceCount -= i5;
        }
        i6 = 1;
        while (++i6 < 369) {
            l += 3;
            iArr1[i6 - 1] >>= (int)l;
        }
        long meth_res = (b ? 1 : 0) + l + Float.floatToIntBits(f1) + i4 + Double.doubleToLongBits(d1) + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(int i3, double d) {

        float f=-1.163F;
        byte by=-53;
        long l1=3353882540465454639L;
        int i7=-81, i8=8, i9=-7335;
        double d2=-121.41152;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        f -= (fMeth(Test.bFld, Test.instanceCount) + by);
        for (l1 = 1; l1 < 134; l1++) {
            if (i3 != 0) {
            }
            if (Test.bFld) {
                i3 %= (int)((long)(f) | 1);
                for (i8 = 1; i8 < 12; i8++) {
                    Test.instanceCount ^= i8;
                    i9 = (int)l1;
                    if (i9 != 0) {
                    }
                    d2 = 1;
                    do {
                        d -= 63396;
                        bArr[(int)(d2)] = Test.bFld;
                        i3 -= (int)l1;
                        Test.instanceCount += i8;
                        i9 -= (int)Test.instanceCount;
                    } while (++d2 < 2);
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + by + l1 + i7 + i8 + i9 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        long l2=7L;
        int i10=-13, i12=57619, i13=3, i14=245, iArr2[]=new int[N], iArr3[]=new int[N];
        float f2=0.31F;
        double d3=63.67923;

        FuzzerUtils.init(iArr2, 11);
        FuzzerUtils.init(iArr3, -17);

        i2 |= ((iMeth1(i2, -26.103893) - i2) * i2);
        for (l2 = 1; 203 > l2; ++l2) {
            switch ((int)(((l2 % 3) * 5) + 20)) {
            case 27:
                iArr2 = iArr3;
                i10 = (int)f2;
                i12 -= (int)l2;
                break;
            case 33:
                for (i13 = 8; i13 > 1; i13 -= 3) {
                    if (Test.bFld) break;
                    iArr2[i13 - 1] -= i14;
                }
                break;
            case 35:
                Test.instanceCount >>>= i10;
                i10 += (int)l2;
                Test.instanceCount %= (i2 | 1);
                break;
            default:
                iArr3[(int)(l2 + 1)] *= (int)d3;
                Test.instanceCount = i2;
                i10 += (int)l2;
            }
        }
        long meth_res = i2 + l2 + i10 + Float.floatToIntBits(f2) + i12 + i13 + i14 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-107, i1=-34919, i15=9185, i16=-189, i17=6418, i18=5, i19=1708, i20=213, i21=-185, i22=11, i23=-13,
            iArr[]=new int[N];
        boolean b1=true, bArr1[][]=new boolean[N][N];

        FuzzerUtils.init(iArr, 4971);
        FuzzerUtils.init(bArr1, true);

        for (i = 5; i < 381; ++i) {
            i1 += (-10 + (i * i));
            iArr[i - 1] = iMeth(i1);
            for (i15 = 4; i15 < 67; ++i15) {
                float f3=-1.86F;
                f3 += i16;
                i16 = (int)Test.instanceCount;
                i1 *= 0;
                iArr[i] += (int)53946L;
            }
            dArrFld[i] += Test.instanceCount;
            i1 = (int)fFld;
        }
        for (i17 = 13; i17 < 363; ++i17) {
            bArr1[i17][i17 + 1] = b1;
        }
        i19 = 1;
        do {
            i1 <<= i17;
            Test.instanceCount = i15;
            for (i20 = 116; i20 > i19; i20 -= 3) {
                b1 = Test.bFld;
                switch (((i20 % 1) * 5) + 116) {
                case 120:
                    Test.instanceCount *= (long)dFld;
                }
                i16 = 6;
            }
            iArr[i19 - 1] = i19;
            i21 += (((i19 * fFld) + i16) - i);
            if (b1) continue;
            b1 = b1;
            dArrFld[i19 - 1] += i;
            for (i22 = 6; i22 < 116; ++i22) {
                iArr[i19] <<= i16;
                if (Test.bFld) continue;
                iArr[i19 - 1] = i19;
                lArrFld = lArrFld;
            }
        } while (++i19 < 217);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
