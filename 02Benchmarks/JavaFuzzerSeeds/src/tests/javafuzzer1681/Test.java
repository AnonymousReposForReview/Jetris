package tests.javafuzzer1681;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static short sFld=-15479;
    public static boolean bFld=true;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.136F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6) {

        int i7=5, i8=-9, i9=-63785, i10=24964, i11=-9, iArr1[]=new int[N];
        double d2=-2.87934;

        FuzzerUtils.init(iArr1, -4);

        for (i7 = 8; 228 > i7; ++i7) {
            d2 = 1;
            do {
                for (i9 = 1; i9 < 1; i9++) {
                    if (false) {
                        switch (((-238 >>> 1) % 6) + 62) {
                        case 62:
                            i11 += i9;
                            break;
                        case 63:
                            Test.instanceCount += (-41 + (i9 * i9));
                            Test.instanceCount ^= i9;
                            if (i9 != 0) {
                            }
                            i10 >>= i10;
                        case 64:
                            i11 &= 20067;
                            try {
                                i8 = (iArr1[(int)(d2)] / -650999324);
                                i8 = (i7 % i6);
                                i8 = (i11 / -30900);
                            } catch (ArithmeticException a_e) {}
                        case 65:
                            i6 = (int)Test.instanceCount;
                            break;
                        case 66:
                            i8 = i11;
                            Test.instanceCount *= -13;
                            break;
                        case 67:
                            i11 = -11;
                            break;
                        default:
                            i6 *= Test.sFld;
                        }
                    }
                }
            } while (++d2 < 7);
        }
        long meth_res = i6 + i7 + i8 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(double d, int i2, int i3) {

        int i5=29320, i12=20, iArr[]=new int[N];
        short s=-11780, sArr[]=new short[N];
        double d1=-124.92220;
        float f1=-17.315F;

        FuzzerUtils.init(iArr, 24096);
        FuzzerUtils.init(sArr, (short)-30123);

        d = i3;
        for (int i4 : iArr) {
            i5 = 1;
            while (++i5 < 4) {
                s = (short)1;
            }
            iArr[(i4 >>> 1) % N] = (int)(d1 * (i2 + (++iArr[(i5 >>> 1) % N])));
            iArr[(i3 >>> 1) % N] *= (Math.abs((int)(-f1)) * i4);
            lMeth(i4);
            i2 = i3;
            f1 -= Test.instanceCount;
            i2 += i3;
            Test.bFld = Test.bFld;
        }
        i12 = 324;
        do {
            i3 += i3;
            sArr = sArr;
            i2 *= (int)d1;
        } while ((i12 -= 2) > 0);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i5 + s + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(float f) {

        double d3=2.38101, d4=6.27201;
        int i13=-14181, i14=0, i15=8, i16=176, i18=9847, i19=253;
        byte by=111;
        long l=206L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -236L);

        vMeth1(d3, i13, i13);
        for (i14 = 1; i14 < 209; i14++) {
            for (d4 = 1; d4 < 8; d4++) {
                int i17=5;
                switch (((i14 >>> 1) % 8) + 71) {
                case 71:
                    Test.instanceCount = by;
                    i15 -= i16;
                case 72:
                    i17 += (int)(d4 * d4);
                    lArr[(int)(d4 + 1)] += by;
                    break;
                case 73:
                    i15 -= (int)6551L;
                    i13 = (int)f;
                    i15 -= (int)Test.instanceCount;
                    for (i18 = 1; i18 < 2; i18++) {
                        i15 *= i14;
                        i16 += i18;
                        i15 = 50321;
                    }
                case 74:
                    Test.instanceCount += (long)((long)d4 | i14);
                    break;
                case 75:
                    f -= (float)d4;
                    break;
                case 76:
                    if (Test.bFld) break;
                    break;
                case 77:
                    i15 = (int)l;
                    break;
                case 78:
                    i19 += (int)d4;
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i13 + i14 + i15 +
            Double.doubleToLongBits(d4) + i16 + by + i18 + i19 + l + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-142, i1=102, i20=3518, i21=57114, i22=240, i23=46901, i24=5362, i25=-31379, i26=-46563, i27=-14,
            iArr2[]=new int[N];
        double d5=-113.78666;
        long l1=-3318868140343536050L;
        float f2=-1.858F, f3=-92.1011F, f4=65.778F;
        byte by1=-88;

        FuzzerUtils.init(iArr2, -30059);

        for (i = 12; i < 231; ++i) {
            vMeth(-78.610F);
            Test.instanceCount = Test.instanceCount;
        }
        i1 += i1;
        for (i20 = 15; i20 < 284; i20++) {
            Test.fArrFld[i20] *= (float)d5;
            Test.instanceCount *= 85;
        }
        i21 -= i21;
        for (i22 = 214; i22 > 10; i22 -= 3) {
            if (Test.bFld) continue;
            for (l1 = 20; l1 < 368; ++l1) {
                Test.instanceCount += l1;
                i1 += (int)f2;
                Test.instanceCount += i20;
                Test.instanceCount >>= 142L;
                Test.sFld += (short)i23;
                iArr2[i22 - 1] = i1;
                i25 = 1;
                while (++i25 < 2) {
                    i21 = i25;
                    i23 <<= i1;
                    iArr2[(int)(l1 - 1)] ^= by1;
                    d5 *= i23;
                    i24 = (int)f2;
                }
            }
            for (f3 = 9; f3 < 368; f3++) {
                for (f4 = 1; 2 > f4; ++f4) {
                    f2 -= i1;
                    Test.instanceCount = -123;
                    Test.instanceCount += (long)(((f4 * i22) + i) - by1);
                    Test.fArrFld[(int)(f4 - 1)] -= i25;
                    i26 = i21;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
