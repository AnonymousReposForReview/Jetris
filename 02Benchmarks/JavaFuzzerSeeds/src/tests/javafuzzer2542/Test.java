package tests.javafuzzer2542;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public short sFld=17995;
    public int iFld=-13;
    public static float fFld=-8.647F;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 120);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i10, int i11) {

        int i12=110, i13=9, i14=181, i15=148, i16=242, i17=192;
        double d=-40.68718;
        boolean b=true;

        for (i12 = 21; 339 > i12; ++i12) {
            Test.iArrFld[i12] |= i11;
            i10 += i12;
            d *= i13;
            for (i14 = i12; i14 < 5; ++i14) {
                i10 = i14;
                d -= -117;
                i10 <<= -9970;
                i10 <<= 73;
                for (i16 = 1; i16 < 1; i16++) {
                    Test.instanceCount <<= i16;
                    switch (((i14 % 9) * 5) + 100) {
                    case 102:
                        Test.iArrFld[i12] &= i11;
                        if (false) continue;
                        break;
                    case 136:
                    case 107:
                        i15 += (int)d;
                        break;
                    case 116:
                        Test.instanceCount = i12;
                        break;
                    case 104:
                        i10 += (int)12L;
                    case 108:
                        d = -1012880035L;
                        break;
                    case 145:
                        i17 *= (int)Test.instanceCount;
                        break;
                    case 121:
                        if (b) break;
                        break;
                    case 110:
                        Test.iArrFld[i14 + 1] = i17;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + (b ? 1 : 0);
    }

    public static void vMeth1(int i7, int i8) {

        int i9=-15548;
        float f=-91.752F;

        i9 = 1;
        while (++i9 < 156) {
            i7 += (((i9 * Test.instanceCount) + f) - i7);
            vMeth2(i9, i7);
            f = -13960;
            Test.instanceCount = i9;
            Test.instanceCount = i9;
        }
        vMeth1_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f);
    }

    public void vMeth(int i2) {

        int i3=-10, i4=-31120, i5=0, i6=-22565, i18=61834, i19=-8407;
        long l=-92L, lArr[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(lArr, 250L);

        for (i3 = 22; i3 < 362; ++i3) {
            lArr[i3 - 1] ^= ((++lArr[i3]) + Test.instanceCount);
            switch (((i4 >>> 1) % 2) + 11) {
            case 11:
                for (i5 = 1; 5 > i5; i5++) {
                    vMeth1(56, i4);
                    Test.instanceCount = i6;
                    l *= i3;
                    Test.iArrFld[i5 + 1] *= -6;
                    i4 += i4;
                }
                break;
            case 12:
                for (i18 = 5; i18 > 1; i18--) {
                    i4 = 224;
                    Test.iArrFld[i3 + 1] += i6;
                    sFld += (short)(i18 * i2);
                    dArrFld[i3] = -11;
                    if (b1) break;
                }
                break;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + l + i18 + i19 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=155, i1=0, i20=14161, i21=1, i22=-243, i23=5, i24=-61791, i25=-14, i26=-4;
        boolean b2=true;
        byte by=-37, byArr[]=new byte[N];
        double d1=-14.37086;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, -58L);
        FuzzerUtils.init(byArr, (byte)-115);
        FuzzerUtils.init(fArr, 24.18F);

        for (i = 8; i < 204; i++) {
            vMeth(i1);
            i1 = 22413;
            if (b2) break;
        }
        b2 = b2;
        by = (byte)Test.instanceCount;
        for (i20 = 18; i20 < 295; ++i20) {
            lArr1[i20 - 1] >>= i;
            try {
                i1 = (Test.iArrFld[i20] % 14214);
                i1 = (12927 % i20);
                i1 = (59 / i);
            } catch (ArithmeticException a_e) {}
            byArr[i20 - 1] -= (byte)Test.instanceCount;
            Test.instanceCount += (i20 * i20);
            i21 <<= i1;
        }
        i21 = (int)8108247727883963004L;
        lArr1[(i1 >>> 1) % N] += sFld;
        i22 = 1;
        while (++i22 < 151) {
            for (i23 = i22; i23 < 166; ++i23) {
                i21 += (28935 + (i23 * i23));
                i21 = i;
                dArrFld[i23 + 1] += i1;
                for (i25 = i23; i25 < 1; ++i25) {
                    i26 = i24;
                    i26 += i25;
                    iFld = i21;
                    b2 = b2;
                }
                iFld = -42003;
                Test.instanceCount = i24;
                switch ((i23 % 5) + 24) {
                case 24:
                    i1 = -29;
                    Test.fFld += i23;
                    i26 += (i23 ^ i25);
                    break;
                case 25:
                    fArr[i22 + 1] -= 4;
                    break;
                case 26:
                    d1 *= i1;
                    break;
                case 27:
                    i26 >>= sFld;
                    break;
                case 28:
                    i1 -= i;
                    break;
                default:
                    Test.instanceCount <<= by;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
