package tests.javafuzzer1323;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:16:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=87L;
    public static int iFld=5;
    public static float fFld=2.474F;
    public double dFld=43.6476;
    public static int iFld1=157;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        float f=0.340F;
        byte by=-69;

        f += (--by);
        Test.iFld *= (--Test.iArrFld[(Test.iFld >>> 1) % N]);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + by;
    }

    public int iMeth1(int i5, double d) {

        long l=-236L;
        int i6=-1;
        byte by1=117;
        boolean b1=true;

        Test.iFld -= Integer.reverseBytes((int)((-(i5++)) + (Test.instanceCount + Test.iFld)));
        Test.iArrFld[(i5 >>> 1) % N] <<= ((i5++) * (Test.iFld - Test.iFld));
        vSmallMeth();
        Test.iArrFld[(i5 >>> 1) % N] -= i5;
        Test.iFld -= Test.iFld;
        for (l = 16; l < 348; ++l) {
            by1 += (byte)l;
            Test.iArrFld[(int)(l)] -= i5;
            i5 += (int)(l ^ i6);
            if (b1) continue;
            Test.iArrFld[(int)(l)] /= (int)44.71841;
            i6 *= i6;
            Test.fFld = l;
            i5 += (int)(((l * i6) + Test.iFld) - i5);
            Test.fFld *= i5;
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + l + i6 + by1 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i3, boolean b, int i4) {

        int i7=-144, i8=-1, i9=-44, i10=-51505;
        short s=16974;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-102);

        vSmallMeth();
        vSmallMeth();
        Test.iFld = iMeth1(Test.iFld, dFld);
        Test.instanceCount = Test.iFld;
        Test.fFld -= -196;
        for (i7 = 5; 257 > i7; ++i7) {
            for (i9 = 6; i7 < i9; i9 -= 3) {
                byArr[i9 - 1] += (byte)Test.instanceCount;
            }
            Test.iArrFld[i7 - 1] = (int)dFld;
            if (b) {
                Test.instanceCount += (i7 + i7);
                i10 *= Test.iFld1;
            } else if (b) {
                Test.iFld += (((i7 * Test.fFld) + Test.iFld1) - s);
                Test.iArrFld = FuzzerUtils.int1array(N, (int)13);
            }
            dFld += Test.iFld1;
        }
        long meth_res = i3 + (b ? 1 : 0) + i4 + i7 + i8 + i9 + i10 + s + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-59996, i1=11, i2=-249, i11=9, i12=12, i13=-10, i14=10038;
        long l1=16L;
        short s1=22435;
        byte by2=86;

        Test.iArrFld[(7 >>> 1) % N] >>= Test.iArrFld[(i >>> 1) % N];
        for (int smallinvoc=0; smallinvoc<764; smallinvoc++) vSmallMeth();
        for (i1 = 14; i1 < 360; ++i1) {
            if (false) continue;
            Test.fFld -= (float)((-(dFld--)) - iMeth(i, Test.bFld, 100));
            Test.iFld += 28745;
            i -= i2;
            for (l1 = 2; l1 < 73; ++l1) {
                for (i12 = 1; 2 > i12; i12++) {
                    i11 = 4;
                    switch (((i13 >>> 1) % 2) + 55) {
                    case 55:
                        i11 = i11;
                        lArrFld[i1 - 1][(int)(l1 - 1)] >>>= Test.instanceCount;
                        break;
                    case 56:
                        i ^= i2;
                        Test.iArrFld[(int)(l1 - 1)] = s1;
                        Test.instanceCount = -63;
                        break;
                    default:
                        Test.instanceCount += i1;
                        i *= i14;
                        Test.instanceCount <<= by2;
                        Test.iArrFld[i12 + 1] += i14;
                    }
                    i11 += i14;
                    Test.instanceCount += 4L;
                    switch ((i12 % 7) + 116) {
                    case 116:
                        Test.iArrFld[i1] *= i13;
                        i11 -= i12;
                        Test.iArrFld[(int)(l1 - 1)] >>= (int)l1;
                        Test.iArrFld[(int)(l1)] *= (int)Test.fFld;
                        break;
                    case 117:
                        i13 += i12;
                        i14 += (i12 + s1);
                        if (Test.bFld) break;
                        break;
                    case 118:
                        dFld = 2.553F;
                    case 119:
                        i11 -= i1;
                    case 120:
                        i13 ^= i1;
                        break;
                    case 121:
                        i = i2;
                        break;
                    case 122:
                        Test.iFld += i11;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth iMeth1
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
