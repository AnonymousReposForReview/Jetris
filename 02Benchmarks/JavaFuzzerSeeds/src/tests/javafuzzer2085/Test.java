package tests.javafuzzer2085;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:47:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static short sFld=-462;
    public static double dFld=-2.79663;
    public volatile int iFld=-14;
    public float fFld=0.627F;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-8369);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i2, float f1) {

        short s=-22436;
        long l2=2898658455969268316L;
        double d=0.118867, dArr[]=new double[N];
        int i3=-13, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 44450);
        FuzzerUtils.init(dArr, 2.55405);

        i2 = s;
        l2 = 1;
        do {
            i2 >>= -29;
            i2 += (20724 + (l2 * l2));
            Test.instanceCount -= Test.instanceCount;
            i2 = 199;
            f1 += f1;
            Test.instanceCount = i2;
            i2 = (int)f1;
            if (b) {
                switch ((int)((l2 % 10) + 27)) {
                case 27:
                    switch ((int)((l2 % 10) + 29)) {
                    case 29:
                        Test.instanceCount *= (long)3.129630;
                        i2 += (int)l2;
                        i2 /= (int)(l2 | 1);
                        break;
                    case 30:
                        Test.sArrFld[(int)(l2 + 1)] <<= s;
                        break;
                    case 31:
                        d += i2;
                        break;
                    case 32:
                        i2 += (int)l2;
                        break;
                    case 33:
                        try {
                            iArr[(i2 >>> 1) % N] = (i2 / -45372);
                            i2 = (-58 % i2);
                            i2 = (i2 % i2);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 34:
                        Test.instanceCount += (l2 - f1);
                        break;
                    case 35:
                        f1 -= l2;
                        break;
                    case 36:
                        f1 += l2;
                        break;
                    case 37:
                    case 38:
                        Test.instanceCount = (long)d;
                        break;
                    default:
                        s += (short)(((l2 * i3) + l2) - i2);
                    }
                    break;
                case 28:
                    dArr[(int)(l2 + 1)] += l2;
                    break;
                case 29:
                    i3 += (int)l2;
                case 30:
                    i2 *= 50009;
                    break;
                case 31:
                    Test.instanceCount *= i2;
                case 32:
                    Test.instanceCount += -171;
                case 33:
                    i3 = i2;
                    break;
                case 34:
                case 35:
                    b = b;
                    break;
                case 36:
                    d -= -22.276F;
                default:
                    i2 = (int)l2;
                }
            } else if (b) {
            } else {
                f1 *= 34;
            }
        } while ((l2 += 3) < 395);
        long meth_res = i2 + Float.floatToIntBits(f1) + s + l2 + Double.doubleToLongBits(d) + i3 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth1() {

        int i1=105, i4=-196, i5=45395, i6=-119, i7=-7, i8=-11;
        float f=51.901F;

        switch ((((((int)(i1 * f)) >>> 1) % 1) * 5) + 51) {
        case 56:
            Test.instanceCount = i1;
            Test.instanceCount -= (-29304 - sMeth(i1, -28.999F));
            i1 -= i1;
            i1 -= i1;
            break;
        default:
            Test.sFld <<= (short)i1;
            Test.dFld -= Test.instanceCount;
        }
        i4 = 330;
        do {
            Test.iArrFld[i4 + 1] -= i1;
            i1 += (i4 * i4);
            for (i5 = 5; i5 > 1; i5--) {
                for (i7 = 1; i7 < 2; ++i7) {
                    f += (i7 * Test.sFld);
                    i8 += (((i7 * Test.instanceCount) + i1) - Test.instanceCount);
                    i1 *= i6;
                }
            }
        } while (--i4 > 0);
        long meth_res = i1 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i, long l, long l1) {

        int i9=10828, i10=0, i11=-13, i12=-20, i13=8254;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -75.724F);

        l1 = lMeth1();
        i = (int)l;
        fArr = FuzzerUtils.float1array(N, (float)-2.238F);
        i -= (int)Test.instanceCount;
        i9 = 178;
        while (--i9 > 0) {
            i = i9;
            for (i10 = 1; i10 < 9; ++i10) {
                l = i10;
                Test.instanceCount *= i9;
                i += (((i10 * l) + Test.instanceCount) - i11);
                i11 = i;
                l1 >>>= i10;
                for (i12 = 1; i12 < 2; i12++) {
                    i13 += i12;
                    i = i12;
                }
            }
        }
        long meth_res = i + l + l1 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=1, i15=7821, i16=-171, i17=0, i18=0, i19=12763, i20=-221, i21=-12, i22=0, i23=3075;
        byte by=117;
        long l3=-3034197090L, lArr[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(lArr, 216L);

        lMeth(i14, Test.instanceCount, Test.instanceCount);
        Test.iArrFld[(i14 >>> 1) % N] |= (int)Test.instanceCount;
        i14 = by;
        i14 += i14;
        iFld |= (int)Test.instanceCount;
        for (l3 = 5; l3 < 132; l3++) {
            Test.instanceCount ^= l3;
            Test.iArrFld[(int)(l3)] -= i15;
        }
        iFld >>= i15;
        Test.instanceCount = l3;
        Test.instanceCount -= i15;
        Test.instanceCount = iFld;
        for (i16 = 13; 345 > i16; ++i16) {
            Test.sFld |= (short)i14;
            Test.instanceCount <<= i16;
            lArr[i16 - 1] = i17;
            for (i18 = 2; 76 > i18; ++i18) {
                i14 = (int)-44092L;
                i14 += (((i18 * l3) + i14) - fFld);
                Test.dFld -= i19;
                by = (byte)i18;
                i15 += (int)l3;
                for (i20 = i18; i20 < 2; ++i20) {
                    Test.instanceCount <<= i17;
                }
                i15 >>= (int)l3;
            }
            if (b1) continue;
            for (i22 = i16; i22 < 76; ++i22) {
                i17 = i19;
                try {
                    i23 = (iFld % i23);
                    iFld = (-231 / i14);
                    i19 = (84 % i16);
                } catch (ArithmeticException a_e) {}
                lArr[i22] <<= i21;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
