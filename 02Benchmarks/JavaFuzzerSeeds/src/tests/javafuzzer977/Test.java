package tests.javafuzzer977;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:16:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1124302889L;
    public static volatile byte byFld=-70;
    public static double dFld=31.123085;
    public static short sFld=12229;
    public static volatile float fFld=0.897F;
    public int iFld=77;
    public double dFld1=124.14439;
    public double dArrFld[]=new double[N];
    public int iArrFld[][]=new int[N][N];
    public short sArrFld[]=new short[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(int i, long l, float f) {


        i = (Test.byFld *= (byte)(--i));
        vSmallMeth_check_sum += i + l + Float.floatToIntBits(f);
    }

    public static int iMeth1(float f1) {

        int i2=1, i3=-14, i5=17, i6=32, i7=11, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 107);

        vSmallMeth(-220, Test.instanceCount, 0.857F);
        i2 += (int)f1;
        i2 += (int)Test.instanceCount;
        i3 = 1;
        while (++i3 < 298) {
            Test.instanceCount -= i2;
            Test.instanceCount += i3;
            for (i5 = 1; i5 < 6; i5++) {
                boolean b1=false;
                i6 = (int)50918L;
                i7 = 1;
                do {
                    i2 = (int)Test.instanceCount;
                    i2 = i7;
                    i2 = -1434;
                    i2 |= Test.byFld;
                } while ((i7 += 2) < 2);
                b1 = b1;
            }
            i2 >>= -47151;
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(boolean b, int i1) {

        float f2=71.184F, fArr[]=new float[N];
        int i8=8, i9=-9, i10=150, i11=1792, iArr1[][]=new int[N][N];
        byte by=-114;
        short s=-18546;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 45859);
        FuzzerUtils.init(fArr, 0.947F);
        FuzzerUtils.init(lArr, -28L);

        Test.dFld -= (Math.min(i1, i1) - iMeth1(f2));
        iArr1[(i1 >>> 1) % N][(i1 >>> 1) % N] -= Test.byFld;
        for (i8 = 24; 386 > i8; i8++) {
            i9 = (int)f2;
            for (i10 = 1; i10 < 5; i10++) {
                i9 -= -25228;
                i11 += i10;
                switch (i10 + 51) {
                case 51:
                    i9 = i10;
                    i9 = (int)198L;
                    i11 = i11;
                    i11 += (((i10 * i1) + i1) - i8);
                    break;
                case 52:
                    Test.instanceCount |= i1;
                    Test.instanceCount = i9;
                    by -= (byte)i8;
                    break;
                case 53:
                    i1 += (int)f2;
                    break;
                case 54:
                    fArr[i10 + 1] = by;
                    break;
                case 55:
                    f2 += (i10 - i10);
                    break;
                case 56:
                    Test.instanceCount += i10;
                    break;
                case 57:
                case 58:
                    by >>= (byte)Test.instanceCount;
                    break;
                case 59:
                    Test.sFld = (short)i10;
                    break;
                case 60:
                    fArr[i10 - 1] = i10;
                    break;
                case 61:
                    i1 += (i10 + i9);
                    break;
                case 62:
                    dArrFld = dArrFld;
                    break;
                case 63:
                    i1 += (((i10 * Test.instanceCount) + i10) - f2);
                    break;
                case 64:
                    if (b) continue;
                    break;
                case 65:
                    i9 += (((i10 * i1) + i9) - i9);
                case 66:
                case 67:
                    Test.dFld += -13;
                case 68:
                    Test.instanceCount -= s;
                    break;
                case 69:
                    Test.fFld = 85.377F;
                    break;
                case 70:
                    Test.instanceCount += (i10 ^ (long)f2);
                    break;
                case 71:
                    i1 += i9;
                    break;
                case 72:
                    Test.instanceCount -= i1;
                    break;
                case 73:
                    f2 = Test.instanceCount;
                    break;
                case 74:
                    Test.fFld *= Test.instanceCount;
                    break;
                case 75:
                    Test.dFld = -240L;
                    break;
                case 76:
                    Test.dFld = Test.instanceCount;
                    break;
                case 77:
                    i1 = 3;
                    break;
                case 78:
                    Test.instanceCount += (((i10 * i1) + i10) - Test.instanceCount);
                    break;
                case 79:
                    i1 += (int)Test.instanceCount;
                    break;
                case 80:
                    Test.fFld = Test.byFld;
                    break;
                case 81:
                    i9 += (((i10 * i11) + i9) - i10);
                    break;
                case 82:
                    if (b) break;
                case 83:
                    i11 -= i8;
                case 84:
                    i9 *= i8;
                    break;
                case 85:
                    iArr1[i8][i8] = (int)Test.dFld;
                case 86:
                    i11 = iFld;
                    break;
                case 87:
                    s &= (short)iFld;
                    break;
                case 88:
                    Test.dFld += 64.227F;
                    break;
                case 89:
                case 90:
                    i11 -= -218;
                case 91:
                    i1 = (int)Test.instanceCount;
                    break;
                case 92:
                    iArr1[i8] = iArr1[i10];
                    break;
                case 93:
                    lArr[i10 + 1] = Test.sFld;
                    break;
                case 94:
                    iFld -= (int)Test.instanceCount;
                case 95:
                    i9 += (int)Test.fFld;
                case 96:
                case 97:
                    Test.fFld = i1;
                    break;
                case 98:
                    Test.instanceCount >>= Test.instanceCount;
                    break;
                case 99:
                    iFld *= (int)Test.instanceCount;
                    break;
                case 100:
                    i1 = i10;
                case 101:
                case 102:
                    iFld -= 19;
                    break;
                case 103:
                    iArr1[i10 + 1][(i1 >>> 1) % N] = s;
                    break;
                case 104:
                    i1 -= (int)Test.fFld;
                case 105:
                    iArr1[i10][i10 - 1] = i9;
                case 106:
                    i11 = i8;
                    break;
                case 107:
                    i9 += (((i10 * i1) + i11) - Test.fFld);
                    break;
                case 108:
                    Test.instanceCount >>= 6;
                    break;
                case 109:
                case 110:
                    if (b) break;
                    break;
                case 111:
                    lArr[i10 + 1] -= Test.byFld;
                    break;
                case 112:
                    Test.instanceCount -= (long)f2;
                    break;
                case 113:
                    iArr1[i10 - 1][i10 + 1] = i10;
                case 114:
                    dArrFld[i8 + 1] += by;
                case 115:
                    Test.instanceCount -= i1;
                    break;
                case 116:
                    Test.instanceCount += (long)f2;
                    break;
                case 117:
                    by += (byte)i10;
                    break;
                case 118:
                    Test.dFld *= 242;
                    break;
                case 119:
                    i1 = -10;
                    break;
                case 120:
                    i1 += i1;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i1 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + by + s +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true, bArr[]=new boolean[N];
        int i12=5922, i13=-11, i14=-11, i15=19460, i16=28575, i17=55748, i18=-8, i19=6;
        double d=47.130314;

        FuzzerUtils.init(bArr, true);

        for (int smallinvoc=0; smallinvoc<554; smallinvoc++) vSmallMeth(iMeth(b2, iFld) - iFld, Test.instanceCount,
            Test.fFld);
        for (i12 = 13; i12 < 369; i12++) {
            iArrFld[i12 + 1] = FuzzerUtils.int1array(N, (int)-219);
            Test.dFld = 0;
            bArr[i12] = b2;
            i13 += (((i12 * i13) + Test.sFld) - iFld);
            for (i14 = 2; i14 < 71; i14 += 2) {
                b2 = b2;
                i15 = (int)Test.instanceCount;
                iArrFld[i14][i12] ^= i14;
                sArrFld[i14 - 1] <<= (short)Test.instanceCount;
                i15 *= (int)Test.instanceCount;
                i15 = (int)Test.instanceCount;
                i15 <<= i13;
            }
            for (i16 = 3; i16 < 71; i16++) {
                Test.fFld -= i12;
                switch (((i16 % 5) * 5) + 122) {
                case 135:
                    iFld += i16;
                    i15 = i14;
                    Test.sFld -= (short)i12;
                case 144:
                    i15 /= (int)1177946160979109914L;
                    dArrFld = dArrFld;
                    break;
                case 125:
                    dFld1 -= 13;
                    i13 += (-194 + (i16 * i16));
                    iFld *= 11;
                    if (b2) {
                        for (d = 1; 2 > d; d++) {
                            i19 *= iFld;
                        }
                    } else {
                        iArrFld[i16 - 1][i16] <<= i15;
                    }
                    break;
                case 139:
                case 129:
                    i17 = (int)Test.instanceCount;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth1 iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
