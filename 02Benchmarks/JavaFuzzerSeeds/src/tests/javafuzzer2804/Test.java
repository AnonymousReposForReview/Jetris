package tests.javafuzzer2804;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:34:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-54171L;
    public short sFld=21483;
    public float fFld=1.593F;
    public static long lFld=5L;
    public static float fFld1=1.691F;
    public static byte byFld=14;

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i9=-50, i10=242, i11=13, i12=-10010, iArr1[]=new int[N];
        short s=29453;
        byte by=73;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(fArr, 2.592F);

        Test.lFld = (long)Test.fFld1;
        for (i9 = 20; i9 < 342; ++i9) {
            double d1=0.63347;
            iArr1[i9] = i9;
            d1 *= i9;
            for (i11 = 1; i11 < 5; ++i11) {
                fArr[i11] *= i11;
                iArr1[i9 + 1] = i12;
                fArr[i9 - 1] += i12;
                i10 += (((i11 * i10) + i12) - Test.lFld);
                s += (short)(((i11 * i12) + i10) - i12);
                i12 += (((i11 * i12) + i11) - i10);
                iArr1 = iArr1;
                by -= (byte)-18460;
            }
            Test.fFld1 = 5445;
            if (false) break;
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + s + by + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i4, int i5, int i6) {

        int i7=-4130, i8=121, i13=63570, i14=-62777, i15=13389, i16=7879, iArr2[]=new int[N];
        double d2=-18.45077;

        FuzzerUtils.init(iArr2, 237);

        for (i7 = 18; i7 < 322; i7++) {
            double d=0.75271;
            d = i7;
            vMeth1();
            i5 = (int)Test.instanceCount;
            i8 += (i7 * i7);
            d2 = 1;
            do {
                i8 = i8;
                i5 = Test.byFld;
                iArr2[(int)(d2 - 1)] *= i7;
            } while (++d2 < 5);
            for (i13 = 1; i13 < 5; i13++) {
                for (i15 = 1; i15 < 2; i15 += 3) {
                    if (i6 != 0) {
                        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16
                            + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i6 += (4 + (i15 * i15));
                    i4 <<= i14;
                }
                Test.byFld += (byte)Test.fFld1;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth() {

        int i3=-10, i17=-219;
        float f=0.540F;
        long l1=3357204571L, l2=-4379L, lArr[]=new long[N];
        short s1=23131;
        boolean b=false;

        FuzzerUtils.init(lArr, -46552L);

        i3 = (int)(--f);
        for (long l : lArr) {
            vMeth(-205, i3, i3);
            l1 = 4;
            do {
                s1 += (short)(((l1 * Test.fFld1) + i3) - l1);
                i3 *= (int)f;
                if (i3 != 0) {
                }
                i3 >>>= i3;
                f += i3;
                f += Test.lFld;
            } while (--l1 > 0);
            for (l2 = 1; l2 < 4; l2 += 3) {
                Test.lFld += i3;
                i3 &= i3;
                Test.instanceCount -= (long)f;
                if (b) continue;
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f) + l1 + s1 + l2 + i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=63839, i1=6, i2=122, i18=-3, i19=-245, i20=-14, i21=-12, i22=-11, i23=-177, i24=-60622, i25=252,
            iArr[]=new int[N];
        double d3=1.87021;
        byte byArr[]=new byte[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, 252);
        FuzzerUtils.init(byArr, (byte)-20);
        FuzzerUtils.init(lArr1, 2839191465L);

        for (i = 6; i < 153; i++) {
            boolean b1=true;
            Test.instanceCount <<= (long)((sFld ^ (i + i1)) - fFld);
            Test.instanceCount = Integer.reverseBytes(Math.min(iArr[i + 1], i2 - i1));
            fFld -= (byArr[i] + fMeth());
            iArr[i] -= i2;
            Test.lFld += (((i * i) + i) - i2);
            switch ((i % 2) + 93) {
            case 93:
                for (i18 = 1; i18 < 171; i18++) {
                    try {
                        i2 = (153 % iArr[i18]);
                        i2 = (62214 % i1);
                        i19 = (i / iArr[i]);
                    } catch (ArithmeticException a_e) {}
                    i1 += (47500 + (i18 * i18));
                    i19 -= i19;
                    for (i20 = i18; i20 < 2; i20++) {
                        i1 += (((i20 * Test.lFld) + Test.instanceCount) - Test.byFld);
                        i1 = 11;
                        d3 -= d3;
                        Test.instanceCount = i19;
                        Test.instanceCount = Test.lFld;
                        i2 += (int)Test.lFld;
                        lArr1[i][i20] -= i22;
                        fFld += i20;
                    }
                    Test.instanceCount += -68;
                }
                i1 |= (int)Test.instanceCount;
                break;
            case 94:
                i1 = i18;
            default:
                b1 = true;
            }
            i23 = 1;
            do {
                Test.instanceCount -= i2;
                sFld = sFld;
                for (i24 = 1; i24 < 1; i24++) {
                    i2 = Test.byFld;
                    i22 = i19;
                }
            } while (++i23 < 171);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
