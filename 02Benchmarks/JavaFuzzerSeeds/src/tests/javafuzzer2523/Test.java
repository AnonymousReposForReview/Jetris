package tests.javafuzzer2523;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:13:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static short sFld=-29066;
    public static byte byFld=-95;
    public float fArrFld[]=new float[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        long l=23556L, lArr1[]=new long[N];
        int i8=-181, i9=-5, i10=33133, i11=215, i12=10, i13=0, iArr[]=new int[N];
        byte by=33;

        FuzzerUtils.init(lArr1, -13L);
        FuzzerUtils.init(iArr, 13621);

        Test.instanceCount <<= i7;
        lArr1 = lArr1;
        Test.instanceCount = i7;
        i7 = i7;
        for (l = 4; l < 158; ++l) {
            for (i9 = 1; i9 < 10; i9++) {
                try {
                    i10 = (i10 % i7);
                    i8 = (13376 % i7);
                    iArr[i9] = (-8859 / i10);
                } catch (ArithmeticException a_e) {}
            }
            by = (byte)l;
            i7 = i8;
            i11 = 1;
            while (++i11 < 10) {
                for (i12 = 1; 1 > i12; ++i12) {
                    i8 = i12;
                    i7 += i9;
                    by |= (byte)i13;
                    i13 += (i12 * i12);
                }
            }
        }
        vMeth_check_sum += i7 + l + i8 + i9 + i10 + by + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        int i4=-7, i5=-12, i6=85, i14=193, i15=7559, i16=7, i17=254, iArr1[]=new int[N];
        float f=-1.294F;
        boolean b=true;
        long lArr[]=new long[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(lArr, 200L);
        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(byArr1, (byte)-75);

        i4 |= (int)lArr[(55 >>> 1) % N];
        for (i5 = 10; 283 > i5; ++i5) {
            i6 += i5;
            if (i4 != 0) {
            }
            Test.instanceCount += (i5 + i5);
            vMeth(i5);
            iArr1 = iArr1;
            f = Test.instanceCount;
            if (b) break;
            for (i14 = 1; i14 < 6; ++i14) {
                switch ((i14 % 6) + 117) {
                case 117:
                    for (i16 = i14; i16 < 2; i16++) {
                        short s=3408;
                        Test.instanceCount = s;
                        try {
                            i6 = (-377373769 / i6);
                            i15 = (i5 % 60145);
                            i15 = (i5 % i6);
                        } catch (ArithmeticException a_e) {}
                        byArr1[i5 - 1] <<= (byte)Test.instanceCount;
                    }
                    break;
                case 118:
                    f += i14;
                    break;
                case 119:
                    try {
                        i15 = (i16 / iArr1[i5]);
                        i17 = (i5 / 71);
                        iArr1[i5 - 1] = (i14 % 63530);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 120:
                    Test.instanceCount <<= i6;
                    break;
                case 121:
                    i4 -= i5;
                    break;
                case 122:
                    i15 += (-153 + (i14 * i14));
                    break;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f) + (b ? 1 : 0) + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i18=33860, i19=-4285, i20=10, i21=-9, i22=-69, i23=-13194;
        float f1=-2.206F;

        Test.instanceCount += iMeth1();
        i1 -= -3;
        for (i18 = 3; i18 < 277; ++i18) {
            i3 += Test.sFld;
            i1 = Test.byFld;
        }
        i2 += (int)f1;
        i19 = i3;
        for (i20 = 8; i20 < 159; ++i20) {
            for (i22 = 1; i22 < 10; i22++) {
                i23 += (((i22 * i18) + i1) - i1);
                if (i20 != 0) {
                }
                i2 <<= i3;
                Test.instanceCount += i22;
                Test.instanceCount += i20;
            }
            i19 *= i2;
        }
        long meth_res = i1 + i2 + i3 + i18 + i19 + Float.floatToIntBits(f1) + i20 + i21 + i22 + i23;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i24=-77, i25=13440, i26=-253, i27=11878, i28=-4, i29=34, i30=-106, i31=-39381, i32=7, i33=-17,
            i34=7972, iArr2[]=new int[N];
        long l1=-4730815240362155688L, lArr2[]=new long[N];
        boolean b2=false;
        float f2=0.843F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)115);
        FuzzerUtils.init(lArr2, 55L);
        FuzzerUtils.init(iArr2, -58699);

        byArr[(i >>> 1) % N] -= (byte)(75 - i);
        Test.instanceCount >>= i;
        Test.instanceCount *= (Long.reverseBytes(Test.instanceCount) - (-Test.instanceCount));
        i -= iMeth(i, i, -212);
        i24 = 1;
        while (++i24 < 325) {
            for (l1 = i24; l1 < 77; ++l1) {
                boolean b1=false;
                if (b1) break;
            }
        }
        i25 &= i25;
        for (i26 = 17; i26 < 339; ++i26) {
            for (i28 = 2; i28 < 78; ++i28) {
                lArr2[i26 + 1] >>= i25;
                if (b2) continue;
                i <<= i27;
            }
            i29 *= -206;
            for (i30 = 4; i30 < 78; i30++) {
                Test.instanceCount = (long)f2;
                iArr2[i30 - 1] = 58382;
                Test.instanceCount += i30;
            }
            for (i32 = 78; i32 > 4; i32--) {
                fArrFld[i26] += f2;
                i34 = 2;
                do {
                    i += i34;
                    iArr2 = iArr2;
                    i27 = i33;
                    f2 *= i28;
                    i31 = -46378;
                    i29 += (i34 | i28);
                    i27 &= i32;
                } while ((i34 -= 3) > 0);
            }
        }
        i29 -= i29;
        Test.bArrFld[(i30 >>> 1) % N] = b2;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
