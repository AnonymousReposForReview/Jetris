package tests.javafuzzer675;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:42:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7454453547784729946L;
    public static double dFld=126.73146;
    public static volatile float fFld=104.763F;
    public static int iFld=-20274;
    public static boolean bFld=true;
    public static long lFld=8577664443238997345L;
    public static byte byFld=-96;
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 36.56914);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-13, i6=44735, i7=-219, i8=35288, i9=-50, iArr1[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 142);
        FuzzerUtils.init(lArr, -5568759919206306441L);

        i5 = (int)Test.dFld;
        Test.instanceCount *= i5;
        iArr1[(i5 >>> 1) % N][(i5 >>> 1) % N] -= i5;
        for (i6 = 18; 297 > i6; i6++) {
            try {
                i5 = (i6 % -56797);
                i7 = (115 / i5);
                i7 = (i7 % i7);
            } catch (ArithmeticException a_e) {}
            lArr[i6 + 1] *= Test.instanceCount;
            i7 += i6;
            for (i8 = 1; i8 < 6; i8++) {
                i7 += i8;
            }
            i7 -= -56758;
            i9 = i9;
            i9 *= (int)Test.fFld;
            i5 %= (int)(Test.instanceCount | 1);
        }
        iArr1[(42578 >>> 1) % N][(i8 >>> 1) % N] <<= i8;
        iArr1[(-9 >>> 1) % N][(i9 >>> 1) % N] = i6;
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i4) {

        double d=0.47988;
        int i10=-10906, i11=-33, i12=-7, i13=197, i14=-43950, i15=-128;
        byte by=-27;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)20664);

        vMeth();
        d = 281;
        do {
            i4 >>= i4;
            Test.instanceCount += -13;
            i4 *= i4;
            for (i10 = 1; i10 < 6; ++i10) {
                Test.iFld = Test.iFld;
            }
            for (i12 = 1; i12 < 6; i12++) {
                Test.fFld = i4;
                Test.dFld = -52014;
                Test.instanceCount = Test.iFld;
                for (i14 = 1; i14 < 2; i14++) {
                    sArr[i14] = by;
                    Test.instanceCount += (((i14 * i13) + Test.instanceCount) - Test.instanceCount);
                    Test.iFld = (int)Test.instanceCount;
                }
            }
        } while (--d > 0);
        long meth_res = i4 + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + i15 + by +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        int i16=59062, i17=14, i18=12, i19=20539, iArr[]=new int[N];
        double d1=0.88941;
        float f1=27.538F, fArr[]=new float[N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 2.337F);

        if (b) {
            Test.instanceCount <<= ((iArr[(i2 >>> 1) % N] | iMeth(-199)) / (i2 | 1));
        } else if (false) {
            bArr[(i2 >>> 1) % N] = Test.bFld;
            for (i16 = 4; i16 < 217; i16++) {
                for (i18 = 1; i18 < 8; i18++) {
                    d1 = 1;
                    while (++d1 < 2) {
                        i17 = (int)Test.fFld;
                    }
                    if (Test.bFld) break;
                    iArr = iArr;
                    if (Test.bFld) continue;
                    i3 -= (int)Test.fFld;
                    f1 = 1;
                    do {
                        if (i16 != 0) {
                        }
                        i2 += (int)(((f1 * i18) + Test.instanceCount) - Test.lFld);
                    } while (++f1 < 2);
                    Test.fFld *= 55111;
                }
            }
        } else if (Test.bFld) {
            fArr[(i17 >>> 1) % N] -= -14;
        }
        long meth_res = i2 + i3 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=58858, i1=-12, i20=-13, i21=-68, i22=14, i23=-55886, iArr2[]=new int[N];
        float f=1.8F;
        double d2=36.51053;
        short s=-25847;

        FuzzerUtils.init(iArr2, -25);

        Test.instanceCount |= ((Math.max(i, i) - -923164822L) - Integer.reverseBytes(i--));
        i1 = 1;
        while (++i1 < 305) {
            f = (float)(Double.longBitsToDouble(lMeth(-9, Test.iFld)) * i1);
            i += i1;
            Test.iFld <<= i1;
            for (d2 = 3; d2 < 82; ++d2) {
                Test.iFld = i20;
                try {
                    i20 = (Test.iFld % 38812);
                    i = (63265 % i1);
                    i20 = (57735 % iArr2[(int)(d2)]);
                } catch (ArithmeticException a_e) {}
                i = Test.iFld;
                for (i21 = 1; i21 < 2; i21++) {
                    if (Test.bFld) {
                        Test.lFld = s;
                        if (Test.bFld) {
                            Test.dArrFld = Test.dArrFld;
                            Test.bFld = Test.bFld;
                            try {
                                Test.iFld = (iArr2[(int)(d2 - 1)] / 126);
                                i20 = (24 % i);
                                Test.iFld = (i / 124);
                            } catch (ArithmeticException a_e) {}
                        } else if (true) {
                            switch (((i1 % 2) * 5) + 67) {
                            case 73:
                                i20 += (-32467 + (i21 * i21));
                            case 74:
                                i22 = i20;
                                break;
                            }
                            Test.iFld *= Test.byFld;
                            Test.instanceCount = i1;
                            i20 = i20;
                        }
                        Test.lFld /= (i20 | 1);
                        i20 += (((i21 * Test.instanceCount) + i) - i21);
                    } else {
                        Test.instanceCount += i23;
                        i20 += (i21 * i21);
                        Test.iFld -= 14;
                    }
                }
                Test.fFld += (float)(d2 * d2);
                Test.lFld += (long)(d2 * d2);
                try {
                    i = (i23 % -34444);
                    Test.iFld = (Test.iFld / i22);
                    i20 = (-8943 % i);
                } catch (ArithmeticException a_e) {}
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
