package tests.javafuzzer1354;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:38:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static boolean bFld=false;
    public static short sFld=21782;
    public volatile float fFld=-74.287F;
    public int iFld=-5;
    public static byte byFld=-22;
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -86.102126);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2) {

        int i5=-1407, i6=12, i7=109, i8=-9, i9=-12, iArr1[]=new int[N];
        double d2=-19.98174;
        byte byArr[][]=new byte[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 186);
        FuzzerUtils.init(byArr, (byte)113);
        FuzzerUtils.init(sArr, (short)21704);

        iArr1[(i5 >>> 1) % N] += i5;
        i6 = 1;
        do {
            i7 = 1;
            do {
                byArr[i6][i7 + 1] = (byte)-40250;
                i5 = i6;
                i5 -= i6;
                for (i8 = 1; i8 > 1; i8 -= 2) {
                    byArr[i8 + 1] = byArr[i7 - 1];
                    sArr[i6] = (short)53253;
                    iArr1[i6] -= Test.sFld;
                }
                iArr1[i7] >>= i5;
                d2 = 1;
                do {
                    i9 += (0 + (d2 * d2));
                    l2 = i9;
                    i9 += -229;
                } while (++d2 < 1);
            } while (++i7 < 21);
        } while ((i6 += 3) < 218);
        vMeth_check_sum += l2 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth1(long l1) {

        int i2=216, i3=-1, i4=-1, iArr[][]=new int[N][N];
        float f=112.1005F;

        FuzzerUtils.init(iArr, -11);

        for (i2 = 348; i2 > 10; i2 -= 2) {
            double d3=-87.24034;
            if (Test.bFld) continue;
            for (f = i2; f < 9; f++) {
                double d1=2.78062;
                iArr[(int)(f + 1)][i2 - 1] >>= (int)(((iArr[i2][i2 + 1]--) + (l1 + d1)) - ((1 * iArr[i2 + 1][(-65 >>>
                    1) % N]) + (Test.instanceCount <<= Test.instanceCount)));
                vMeth(Test.instanceCount);
                iArr[(int)(f - 1)][(int)(f)] = i2;
            }
            d3 = i4;
        }
        iArr[(i4 >>> 1) % N][(i3 >>> 1) % N] = i2;
        i3 = 7;
        i3 <<= i4;
        long meth_res = l1 + i2 + i3 + Float.floatToIntBits(f) + i4 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i1=-14, i10=-35064, i11=212, i12=47101, i13=14, i14=65097, iArr2[]=new int[N];
        double d4=2.24115;
        float f1=32.1023F, f2=39.535F, fArr[]=new float[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)20880);
        FuzzerUtils.init(iArr2, -126);
        FuzzerUtils.init(fArr, 1.272F);

        i1 -= (iMeth1(28766L) + 93);
        for (i10 = 12; i10 < 303; ++i10) {
            d4 = 1;
            while (++d4 < 6) {
                for (f1 = 1; f1 < 1; ++f1) {
                    sArr1[(int)(f1 + 1)] += (short)l;
                    iArr2[(int)(d4)] = i10;
                }
                for (i13 = 1; i13 > 1; --i13) {
                    fArr[i10 + 1] = Test.instanceCount;
                    f2 += i12;
                }
                iArr2[i10] += (int)66.323F;
            }
            l = i1;
            i11 += i13;
            i12 %= (int)((long)(f1) | 1);
            i12 += (-21244 + (i10 * i10));
            i1 = 7;
        }
        long meth_res = l + i1 + i10 + i11 + Double.doubleToLongBits(d4) + Float.floatToIntBits(f1) + i12 + i13 + i14 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=52165, i16=-49424, i17=-10, i18=-225, i19=-26754, i20=6, i21=-37338, iArr3[][]=new int[N][N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, 58174);
        FuzzerUtils.init(bArr, true);

        for (double d : Test.dArrFld) {
            int i=5;
            i = (iMeth(Test.instanceCount) - -52145);
            i15 = 63;
            do {
                i += i15;
                for (i16 = 1; 1 > i16; ++i16) {
                    fFld *= 5061316261627093684L;
                    if (true) continue;
                    i -= -58247;
                }
                iArr3[i15 - 1][i15] -= (int)Test.instanceCount;
                iArr3[i15] = iArr3[i15];
                i = i17;
                lArrFld[i15 + 1] <<= i16;
                for (i18 = 1; i18 < 1; ++i18) {
                    b = b;
                    iArr3[i18][i18] = i19;
                    i = i17;
                    i19 -= i18;
                    Test.bFld = b;
                    Test.instanceCount = Test.instanceCount;
                    i19 <<= i16;
                    Test.instanceCount += -96;
                    i19 |= i15;
                    bArr[i15 + 1] = true;
                }
                iFld += i15;
            } while (--i15 > 0);
            switch ((((i18 >>> 1) % 9) * 5) + 9) {
            case 42:
            case 39:
                for (i20 = 2; i20 < 63; ++i20) {
                    i19 <<= 7;
                    i = i16;
                    Test.instanceCount += i20;
                }
                iArr3[(i >>> 1) % N][(i18 >>> 1) % N] += i21;
            case 20:
                if (false) break;
                break;
            case 14:
                i21 = i17;
                break;
            case 48:
                iArr3[(i17 >>> 1) % N][(i16 >>> 1) % N] -= i19;
            case 37:
                i21 >>= Test.byFld;
                break;
            case 19:
                i21 -= 74;
                break;
            case 32:
                try {
                    i17 = (-113 / i15);
                    iArr3[(i16 >>> 1) % N][(i20 >>> 1) % N] = (i20 % iArr3[(i17 >>> 1) % N][(i15 >>> 1) % N]);
                    iArr3[(i19 >>> 1) % N][(i18 >>> 1) % N] = (iArr3[(i18 >>> 1) % N][(34562 >>> 1) % N] % 16);
                } catch (ArithmeticException a_e) {}
                break;
            case 54:
                i >>= i20;
                break;
            default:
                b = true;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
