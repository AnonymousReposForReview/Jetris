package tests.javafuzzer176;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:20:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1906227190L;
    public static float fFld=65.817F;
    public static int iFld=22342;
    public static byte byFld=-35;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 38);
        FuzzerUtils.init(Test.lArrFld, 168L);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l, long l1) {

        int i3=-199, i5=-10;
        double d1=1.6194, dArr[]=new double[N];
        boolean b1=false;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 50.96258);
        FuzzerUtils.init(lArr, 36185L);
        FuzzerUtils.init(sArr, (short)-16540);

        i3 = 1;
        while (++i3 < 335) {
            i2 = i3;
            Test.fFld -= Test.fFld;
            i2 -= i2;
            d1 *= d1;
            Test.instanceCount += (i3 | Test.instanceCount);
            i2 = (int)l1;
            if (b1) break;
        }
        for (int i4 : Test.iArrFld) {
            switch (((i5 >>> 1) % 10) + 90) {
            case 90:
                if (b1) {
                    switch (((25 >>> 1) % 2) + 98) {
                    case 98:
                        if (b1) {
                            if (b1) continue;
                            dArr[(i2 >>> 1) % N] = i4;
                            vMeth1_check_sum += i2 + l + l1 + i3 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i5 +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
                                FuzzerUtils.checkSum(sArr);
                            return;
                        } else {
                            i2 += (int)-27L;
                        }
                        break;
                    case 99:
                        Test.fFld -= i2;
                        break;
                    }
                    vMeth1_check_sum += i2 + l + l1 + i3 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i5 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(sArr);
                    return;
                } else if (b1) {
                    lArr[(i4 >>> 1) % N] >>= i5;
                }
                break;
            case 91:
                i2 *= i3;
                break;
            case 92:
                i4 = i5;
                break;
            case 93:
                i4 += (int)d1;
                break;
            case 94:
                if (true) continue;
                break;
            case 95:
            case 96:
                i4 *= (int)Test.instanceCount;
                break;
            case 97:
                sArr[(i2 >>> 1) % N] %= (short)((long)(d1) | 1);
                break;
            case 98:
            case 99:
                i5 *= i2;
                break;
            }
        }
        vMeth1_check_sum += i2 + l + l1 + i3 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i5 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        int i6=-5, i7=51734, i8=-254;

        vMeth1(i6, Test.instanceCount, Test.instanceCount);
        for (i7 = 8; i7 < 245; ++i7) {
            i8 -= (int)-22L;
        }
        vMeth_check_sum += i6 + i7 + i8;
    }

    public static short sMeth(int i1, boolean b, double d) {

        int i9=-157, i10=241;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -115.994F);

        vMeth();
        Test.lArrFld[(i1 >>> 1) % N][(Test.iFld >>> 1) % N] -= Test.iFld;
        Test.iFld -= (int)Test.instanceCount;
        for (i9 = 1; i9 < 359; ++i9) {
            if (b) {
                switch ((i9 % 10) + 68) {
                case 68:
                    Test.instanceCount *= Test.iFld;
                    Test.iFld >>= (int)Test.instanceCount;
                    fArr[i9 + 1][i9] *= i10;
                    break;
                case 69:
                    Test.iArrFld[i9 + 1] >>= (int)Test.instanceCount;
                case 70:
                    i1 += (((i9 * i9) + i9) - i1);
                    switch ((i9 % 7) + 24) {
                    case 24:
                        i1 -= i10;
                        i1 += (((i9 * i1) + i9) - Test.iFld);
                        Test.fFld = i1;
                        break;
                    case 25:
                        try {
                            Test.iArrFld[i9] = (-53922 / i1);
                            i10 = (Test.iFld / i10);
                            Test.iArrFld[i9 - 1] = (Test.iArrFld[i9 + 1] / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 26:
                    case 27:
                        i10 -= (int)-8L;
                        break;
                    case 28:
                        i10 += (i9 | Test.instanceCount);
                        break;
                    case 29:
                        Test.instanceCount *= (long)1.418F;
                    case 30:
                        if (i9 != 0) {
                        }
                        break;
                    default:
                        Test.iArrFld[i9 - 1] >>= i1;
                    }
                    break;
                case 71:
                    Test.iFld *= -55;
                case 72:
                    Test.iFld >>= i1;
                    break;
                case 73:
                    Test.iFld -= i10;
                    break;
                case 74:
                    Test.iFld += i9;
                case 75:
                    Test.iFld += (i9 - i10);
                    break;
                case 76:
                    Test.fFld += i10;
                    break;
                case 77:
                    Test.byFld *= (byte)i1;
                    break;
                }
            } else if (true) {
                i1 = i1;
            } else if (b) {
                Test.iArrFld[i9 - 1] >>= i10;
            }
        }
        long meth_res = i1 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i11=12, i12=547, i13=-6500, i14=-222, i15=11037, i16=3;
        boolean b2=false;
        double d2=-56.96826, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -124.47231);

        i += sMeth(-134, b2, d2);
        for (i11 = 318; 2 < i11; i11 -= 3) {
            for (i13 = 3; i13 < 239; ++i13) {
                i15 = 1;
                while (++i15 < 2) {
                    i14 = (int)Test.instanceCount;
                    Test.iArrFld[i13] -= 234;
                    Test.iArrFld[i13 - 1] = Test.iFld;
                    Test.fFld -= i12;
                    Test.fFld *= (float)-71.92421;
                    fArrFld[i15 - 1] -= Test.iFld;
                    Test.instanceCount = -29451;
                    Test.iArrFld[i13] >>>= i11;
                }
                i += (int)Test.instanceCount;
                dArr1[i13 + 1] *= Test.fFld;
                Test.instanceCount += (i13 * i13);
                try {
                    i = (i15 % -1394518771);
                    i12 = (i12 / Test.iArrFld[i11 + 1]);
                    i12 = (i / i14);
                } catch (ArithmeticException a_e) {}
                Test.fFld -= (float)d2;
                i = i15;
                i16 = 1;
                while (++i16 < 2) {
                    i14 = i11;
                    i14 = (int)Test.instanceCount;
                    dArr1[i13] = 60;
                    d2 = i16;
                    i14 -= (int)Test.instanceCount;
                    Test.iArrFld[i13] -= 12602;
                    i12 += (((i16 * Test.fFld) + Test.iFld) - i16);
                    Test.iFld <<= (int)-48876L;
                    i14 >>= i15;
                    i += (((i16 * i14) + Test.fFld) - Test.iFld);
                }
                Test.instanceCount += i13;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
