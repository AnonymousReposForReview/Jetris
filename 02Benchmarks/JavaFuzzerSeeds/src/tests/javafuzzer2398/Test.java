package tests.javafuzzer2398;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:07:30 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1721936005L;
    public static boolean bFld=false;
    public static int iFld=12;
    public static float fFld=-1.279F;
    public byte byFld=43;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-13577);
        FuzzerUtils.init(Test.lArrFld, 30035L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i9=60865, i10=0, i11=-109, i12=196, i13=46, i14=25, i15=-51778, iArr1[]=new int[N];
        double d=88.101323;
        short s=-29753;
        float f1=-2.324F;
        boolean b=false;

        FuzzerUtils.init(iArr1, 144);

        for (i9 = 3; i9 < 197; i9++) {
            i10 += (int)d;
            for (i11 = 1; i11 < 8; ++i11) {
                Test.instanceCount += (-11153 + (i11 * i11));
                Test.instanceCount += 58116;
                i13 = 1;
                while (++i13 < 2) {
                    s += (short)i9;
                    f1 *= i11;
                }
                if (i12 != 0) {
                    vMeth1_check_sum += i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + s +
                        Float.floatToIntBits(f1) + (b ? 1 : 0) + i14 + i15 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                iArr1[i9 - 1] *= i9;
                if (b) break;
            }
            d -= -4209193337L;
            for (i14 = 1; i14 < 8; i14++) {
                i10 = s;
                f1 = i10;
            }
        }
        vMeth1_check_sum += i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + s + Float.floatToIntBits(f1) + (b
            ? 1 : 0) + i14 + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i3, int i4) {

        int i5=3, i6=-169, i7=68, i8=2, i16=-145, i17=-12, iArr2[]=new int[N];
        float f2=0.679F;
        byte by1=124;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 34743L);
        FuzzerUtils.init(iArr2, 241);

        for (i5 = 10; 176 > i5; ++i5) {
            for (i7 = 1; i7 < 10; ++i7) {
                vMeth1();
                f2 -= i4;
                i3 >>= i6;
                lArr[i5] -= i3;
                Test.instanceCount = -245L;
                by1 >>= (byte)i5;
                Test.sArrFld[i7] = (short)i6;
            }
            for (i16 = i5; i16 < 10; i16++) {
                double d1=-83.109142;
                d1 -= f2;
                f2 += (((i16 * i8) + i4) - i4);
                iArr2[i5] <<= i17;
                i8 += (i16 * i17);
                i3 += i16;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + by1 + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(int i1, byte by, int i2) {

        int i18=204, i19=20, i20=-11, i21=2, i22=-8375, iArr3[]=new int[N];
        double d2=1.85570;
        float f3=2.280F;

        FuzzerUtils.init(iArr3, -4);

        vMeth(i2, i1);
        for (i18 = 12; i18 < 261; ++i18) {
            if (Test.bFld) {
                i1 += i18;
                i20 = 1;
                while ((i20 += 2) < 7) {
                    for (i21 = i18; i21 < 3; ++i21) {
                        i22 = (int)d2;
                        switch (((i21 % 1) * 5) + 97) {
                        case 98:
                            i19 -= i21;
                            break;
                        }
                        Test.instanceCount += (((i21 * i21) + i22) - Test.instanceCount);
                        switch (((i19 >>> 1) % 10) + 118) {
                        case 118:
                            if (Test.bFld) {
                                f3 = i19;
                            } else if (Test.bFld) {
                                i22 -= i19;
                            }
                            i19 = i22;
                            break;
                        case 119:
                            i1 *= (int)167L;
                        case 120:
                            Test.instanceCount -= i21;
                            break;
                        case 121:
                            i1 *= i18;
                            break;
                        case 122:
                            f3 = i2;
                            break;
                        case 123:
                            Test.instanceCount <<= Test.instanceCount;
                            break;
                        case 124:
                            iArr3[i21 - 1] = (int)d2;
                            break;
                        case 125:
                            Test.instanceCount += (long)d2;
                            break;
                        case 126:
                            Test.instanceCount = i18;
                            break;
                        case 127:
                            Test.lArrFld = Test.lArrFld;
                        default:
                            i1 &= i22;
                        }
                    }
                }
            } else if (false) {
                Test.instanceCount += i18;
            }
        }
        long meth_res = i1 + by + i2 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-76, i23=-72, i24=4, i25=32, i26=-11, i27=48929, i28=-18165, i29=-32, i30=-5493, iArr[]=new int[N];
        float f=1.683F, f4=-90.309F;
        byte by2=84;
        double d3=-106.33275;
        short s1=-1820;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(bArr, false);

        iArr = (iArr = (iArr = iArr));
        i -= (int)(((++f) + (i + Test.instanceCount)) / (((long)((~(i * i)) + fMeth(i, by2, i))) | 1));
        i -= 29344;
        i += -4;
        for (i23 = 8; i23 < 135; ++i23) {
            f4 = 1;
            while (++f4 < 197) {
                i *= i24;
                i24 = i;
                d3 -= s1;
                Test.instanceCount = i;
                for (i25 = 1; i25 < 1; i25++) {
                    Test.iFld += i25;
                    i24 += (i25 ^ i);
                    iArr = iArr;
                    Test.iFld -= -7;
                    i *= (int)Test.fFld;
                    s1 |= (short)143L;
                    byFld += (byte)(4173783795477571661L + (i25 * i25));
                }
            }
            bArr[i23 - 1] = Test.bFld;
        }
        for (i27 = 20; 396 > i27; i27++) {
            Test.fFld = f;
            i28 = -5;
            switch ((((-4 >>> 1) % 3) * 5) + 1) {
            case 11:
                Test.iFld = (int)Test.instanceCount;
                for (i29 = 3; i29 < 67; i29++) {
                    f += i26;
                    if (Test.bFld) {
                        iArr[i29] = i;
                        Test.instanceCount += i26;
                        d3 *= i26;
                    } else if (Test.bFld) {
                        i26 <<= (int)Test.instanceCount;
                    } else if (Test.bFld) {
                        Test.bFld = Test.bFld;
                    }
                }
                break;
            case 16:
                i = i30;
            case 12:
                Test.lArrFld[i27] = i23;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
