package tests.javafuzzer1953;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:25:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=31L;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 0L);
        FuzzerUtils.init(Test.sArrFld, (short)-2150);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, boolean b, long l1) {

        int i3=44420, i4=-23766, i5=22, i6=-46649, i7=30241, i8=126;
        float f=-120.82F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 9L);

        i3 = 1;
        do {
            i2 = (int)l1;
            Test.instanceCount += (i3 + i3);
        } while (++i3 < 349);
        for (i4 = 239; i4 > 7; --i4) {
            i5 += i3;
            i5 <<= i3;
            i5 += (i4 + i3);
            i2 += (int)f;
            if (b) {
                for (i6 = i4; i6 < 7; ++i6) {
                    try {
                        i7 = (i3 / i4);
                        i5 = (i8 / 31799);
                        i8 = (i8 / 1329399687);
                    } catch (ArithmeticException a_e) {}
                    i8 = (int)l1;
                    i5 *= (int)l1;
                }
                Test.lArrFld[i4] = Test.instanceCount;
                i7 *= i7;
                vMeth1_check_sum += i2 + (b ? 1 : 0) + l1 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 +
                    FuzzerUtils.checkSum(lArr);
                return;
            } else if (b) {
                l1 = -62354;
            } else {
                lArr = Test.lArrFld;
            }
        }
        vMeth1_check_sum += i2 + (b ? 1 : 0) + l1 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i1=-11, i9=-81, i10=-19133, i11=-55572, i12=204, i13=176, i14=-81, iArr1[]=new int[N];
        long l=-9L, l2=0L;
        boolean b1=false;
        float f1=55.521F;
        double d=50.34101;

        FuzzerUtils.init(iArr1, 103);

        iArr1[(i1 >>> 1) % N] = (int)(++l);
        vMeth1(i1, b1, Test.instanceCount);
        i1 += (int)7L;
        for (l2 = 9; l2 < 255; ++l2) {
            Test.sArrFld[(int)(l2)] = (short)f1;
            f1 += (l2 * f1);
            f1 -= i9;
        }
        d -= i9;
        for (i10 = 2; i10 < 283; ++i10) {
            for (i12 = 1; i12 < 6; ++i12) {
                i13 -= i11;
                if (i10 != 0) {
                    vMeth_check_sum += i1 + l + (b1 ? 1 : 0) + l2 + i9 + Float.floatToIntBits(f1) +
                        Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                l += (-14 + (i12 * i12));
            }
            i14 += (int)d;
        }
        vMeth_check_sum += i1 + l + (b1 ? 1 : 0) + l2 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth() {

        int i=-132, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 47897);

        i = (-((iArr[(i >>> 1) % N]--) * 28676));
        vMeth();
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=-5, i16=88;

        for (int smallinvoc=0; smallinvoc<141; smallinvoc++) vSmallMeth();
        i15 = -17;
        i16 = (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
