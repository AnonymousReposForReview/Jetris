package tests.javafuzzer1487;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-275053635L;
    public static float fFld=53.966F;
    public static volatile short sFld=11024;
    public double dFld=0.77857;
    public volatile boolean bFld=false;
    public byte byFld=51;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, int i3) {

        float f=5.213F;
        int i4=-30650, i5=39257, i6=7, i7=-7, i8=6;
        boolean b=false, bArr[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-28029);
        FuzzerUtils.init(bArr, false);

        for (f = 303; f > 8; --f) {
            Test.fFld = i4;
            i3 += (int)(((f * Test.instanceCount) + i4) - Test.instanceCount);
            Test.sFld %= (short)-34.307F;
            Test.instanceCount += -4;
            i4 >>= i5;
            for (i6 = 1; 6 > i6; i6++) {
                i8 = 1;
                while (++i8 < 2) {
                    b = b;
                    Test.fFld += (i8 * i8);
                    i5 -= (int)Test.instanceCount;
                    i3 -= i6;
                    sArr[i8] = (short)Test.instanceCount;
                    bArr = Test.bArrFld;
                    bArr[(int)(f - 1)] = b;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + (b ? 1
            : 0) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i2, long l) {

        double d1=-46.110148;

        vMeth1(d1, i2);
        i2 = i2;
        long meth_res = i2 + l + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=31032, i9=158, i10=205, i11=-6, iArr[][]=new int[N][N];
        double d2=114.97885;

        FuzzerUtils.init(iArr, -12);

        i1 = 1;
        do {
            i = (int)(iArr[i1][i1 + 1] + ((i = (int)Test.instanceCount) - (iArr[i1 - 1][i1 - 1]--)));
            switch (((i1 % 2) * 5) + 70) {
            case 72:
                i += (((i1 * Test.instanceCount) + Test.fFld) - i1);
                i |= (iMeth(230, Test.instanceCount) - i);
            case 77:
            default:
                for (d2 = 1; d2 < 8; ++d2) {
                    i10 = 1;
                    while (++i10 < 2) {
                        i9 <<= -39;
                        i9 = i9;
                        iArr[i10][i1] = 22711;
                    }
                    Test.instanceCount += (long)d2;
                    iArr[(int)(d2)][(int)(d2 - 1)] = 3506;
                }
                i11 = 1;
                do {
                    Test.instanceCount += i11;
                    Test.fFld += (i11 * i11);
                } while (++i11 < 8);
            }
        } while (++i1 < 192);
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=-64732, i13=-63608, i14=-16063, i15=207, i16=1, i17=49, i18=-45, i19=-86;
        float f1=-16.266F, f2=-2.120F, fArr[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.681F);
        FuzzerUtils.init(lArr, 3L);

        vMeth(i12);
        dFld = i12;
        Test.iArrFld[(i12 >>> 1) % N][(i12 >>> 1) % N] >>= i12;
        i13 = 1;
        while (++i13 < 189) {
            i12 += (((i13 * i13) + Test.fFld) - i13);
            i12 += (42003 + (i13 * i13));
            Test.instanceCount += (long)Test.fFld;
            if (bFld) continue;
            i12 += (i13 * i13);
            for (f1 = 6; 133 > f1; f1++) {
                dFld += i14;
                Test.fFld -= (float)dFld;
                fArr[(int)(f1)][i13] += -1;
                Test.iArrFld[i13][(int)(f1 + 1)] <<= i14;
            }
            f2 = 1;
            while (++f2 < 133) {
                for (i15 = i13; i15 < 1; i15++) {
                    bFld = false;
                    Test.iArrFld[i13][(int)(f2)] |= i16;
                    i16 = i15;
                }
                i14 <<= 254;
                byFld = (byte)i12;
                for (i17 = 1; 1 > i17; ++i17) {
                    i14 -= 6;
                }
                i16 -= (int)Test.instanceCount;
                if (bFld) break;
                if (bFld) break;
            }
            i19 = 1;
            while (++i19 < 133) {
                i16 *= i14;
                i14 += (int)f1;
                lArr[i19] += byFld;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
