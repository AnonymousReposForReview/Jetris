package tests.javafuzzer99;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:21:20 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=46L;
    public static int iFld=-87;
    public static volatile byte byFld=-11;
    public float fFld=15.569F;
    public int iFld1=56;
    public int iArrFld[][]=new int[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, float f, long l) {


        Test.iFld += (int)f;
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f) + l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth() {

        int i2=46612, i4=-213, i5=6, i6=-45555, i7=-6, iArr1[]=new int[N];
        boolean b1=false;
        float f1=92.876F;
        byte by=-25;
        double d=-76.51440;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -185);
        FuzzerUtils.init(sArr, (short)9296);
        FuzzerUtils.init(lArr, -3L);

        i2 = 1;
        while (++i2 < 161) {
            int i3=-9;
            i3 += (iMeth(b1, f1, -12L) + by);
            d = by;
            i3 = (int)1154172719416644767L;
            for (i4 = 10; i4 > 1; i4--) {
                Test.instanceCount = -175L;
                try {
                    iArr1[i4] = (-47190 % iArr1[i2 + 1]);
                    i5 = (i5 / 6386);
                    Test.iFld = (i2 / 904066051);
                } catch (ArithmeticException a_e) {}
                for (i6 = 1; i6 < 2; i6++) {
                    i5 ^= -9;
                    i5 -= (int)-24.404F;
                    i5 += (i6 + i6);
                    Test.instanceCount = i3;
                    sArr[i2 - 1] += (short)Test.iFld;
                    lArr[i6] -= Test.iFld;
                }
                d -= i4;
            }
        }
        long meth_res = i2 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + by + Double.doubleToLongBits(d) + i4 + i5 + i6 +
            i7 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vSmallMeth(int i, int i1) {


        i *= (int)(((i1--) - dMeth()) - Test.instanceCount);
        vSmallMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        int i8=9, i9=225, i10=250, i11=-13, i12=-71, i13=-13568, i14=208, iArr[]=new int[N];
        short s=13430, sArr1[]=new short[N];
        float f2=0.942F, fArr[]=new float[N];
        boolean b2=true;
        double d1=2.49306;

        FuzzerUtils.init(iArr, -24303);
        FuzzerUtils.init(sArr1, (short)273);
        FuzzerUtils.init(fArr, -2.808F);

        iArr = (iArr = (iArr = (iArr = iArr)));
        for (int smallinvoc=0; smallinvoc<516; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld);
        for (i8 = 11; i8 < 204; ++i8) {
            Test.byFld *= (byte)i9;
            i9 += i8;
            Test.byFld += (byte)(i8 + Test.iFld);
            iArr[i8] = i9;
            s += (short)i8;
            Test.instanceCount += i8;
            Test.iFld <<= Test.iFld;
            i10 = 1;
            do {
                i9 = i8;
            } while (++i10 < 130);
        }
        i9 += (int)fFld;
        Test.iFld += i11;
        iArr[(i10 >>> 1) % N] = i8;
        sArr1[(i8 >>> 1) % N] <<= (short)i11;
        Test.iFld |= 3726;
        try {
            for (i12 = 5; i12 < 396; i12++) {
                i11 = (int)Test.instanceCount;
                switch (((i12 % 8) * 5) + 60) {
                case 79:
                    Test.instanceCount += i12;
                    iArrFld = iArrFld;
                    switch (((i12 % 6) * 5) + 48) {
                    case 59:
                        switch ((i12 % 10) + 63) {
                        case 63:
                            fArr = fArr;
                            for (f2 = 1; f2 < 64; ++f2) {
                                iFld1 -= (int)fFld;
                            }
                            b2 = b2;
                            break;
                        case 64:
                            i13 -= (int)Test.instanceCount;
                            break;
                        case 65:
                            s = (short)i8;
                            break;
                        case 66:
                            Test.instanceCount += (((i12 * i12) + iFld1) - i8);
                            break;
                        case 67:
                            d1 += i8;
                            break;
                        case 68:
                        case 69:
                            i13 += (i12 | Test.instanceCount);
                        case 70:
                        case 71:
                            Test.iFld += (int)-37310L;
                            break;
                        case 72:
                            if (b2) break;
                            break;
                        }
                        break;
                    case 72:
                        i13 -= (int)Test.instanceCount;
                    case 56:
                        Test.instanceCount = i14;
                        break;
                    case 74:
                        try {
                            i11 = (-14020 / i11);
                            i14 = (Test.iFld / -1854266559);
                            Test.iFld = (i8 / i14);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 78:
                        i13 = Test.byFld;
                        break;
                    case 54:
                        Test.byFld += (byte)(-1.543F + (i12 * i12));
                        break;
                    }
                case 73:
                case 66:
                    Test.byFld = (byte)Test.iFld;
                    break;
                case 70:
                    iArr[i12] = (int)Test.instanceCount;
                case 62:
                    d1 = i11;
                    break;
                case 84:
                case 95:
                    Test.instanceCount = -33909L;
                case 64:
                    i13 += i13;
                }
            }
        }
        catch (NullPointerException exc1) {
            i13 <<= 3818;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth dMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
