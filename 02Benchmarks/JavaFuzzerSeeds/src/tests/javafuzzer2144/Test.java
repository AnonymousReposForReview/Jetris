package tests.javafuzzer2144;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:22:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static float fFld=-60.879F;
    public static volatile int iFld=58929;
    public long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, long l1, int i8) {

        int i9=-1, i10=3491, i11=118, i12=30068, i13=33, i14=-111, iArr2[]=new int[N];
        double d=0.83363;
        short s1=-22877;

        FuzzerUtils.init(iArr2, 10);

        for (i9 = 10; i9 < 207; ++i9) {
            try {
                i8 = (139 / i9);
                iArr2[i9 - 1] = (i7 / 41637);
                i8 = (i8 % -248);
            } catch (ArithmeticException a_e) {}
            switch ((i9 % 9) + 15) {
            case 15:
                d = i10;
                i8 = i8;
            case 16:
                d = i9;
                for (i11 = 1; 8 > i11; i11++) {
                    for (i13 = 1; i13 < 2; i13++) {
                        Test.instanceCount += (((i13 * i11) + Test.fFld) - i10);
                        i10 -= i12;
                        d += Test.instanceCount;
                        i12 *= i10;
                        i10 = 206;
                    }
                    i7 += (i11 | i9);
                    i12 = s1;
                }
                break;
            case 17:
                i14 = i14;
                break;
            case 18:
                Test.instanceCount = 11858;
                break;
            case 19:
                i10 = (int)Test.fFld;
                break;
            case 20:
                Test.instanceCount += -6L;
            case 21:
                l1 -= i10;
            case 22:
                i10 = -71;
                break;
            case 23:
                i14 += (i9 * i9);
                break;
            }
        }
        long meth_res = i7 + l1 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + s1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i1, int i2, int i3) {

        int i4=-191, i5=85, i6=4, i15=213, i16=-87, iArr1[]=new int[N];
        long l=-41767L;
        short s=-5906, s2=15396;
        boolean b=false;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -35375);
        FuzzerUtils.init(fArr, -1.107F);
        FuzzerUtils.init(dArr, 39.34571);

        for (i4 = 12; 252 > i4; i4 += 2) {
            iArr1[i4 + 1] *= i3;
            if (b) {
                i2 = (int)(--fArr[i4 + 1]);
                for (l = 1; l < 13; ++l) {
                    i3 += (int)(l * i5);
                    s = (short)iMeth(i6, l, i2);
                    i5 /= (int)(l | 1);
                    i1 = i3;
                    if (b) {
                        i5 /= (int)(i4 | 1);
                    } else if (false) {
                        for (i15 = i4; i15 < 2; i15++) {
                            i2 += i15;
                            s2 &= (short)Test.iFld;
                            if (b) break;
                        }
                    }
                }
            } else if (b) {
                i1 = (int)Test.instanceCount;
            } else {
                Test.fFld -= Test.instanceCount;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + l + i6 + s + i15 + i16 + s2 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vSmallMeth(int i, float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -23949);

        f = Math.max(iArr[(-62378 >>> 1) % N], (int)(32002L * dMeth(-154, -8, i)));
        vSmallMeth_check_sum += i + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=-6, i18=54, i19=-101, i20=6, i21=6334, i22=-36, i23=158, i24=-51005, i25=-16787, i26=116, i27=195,
            i28=-56, iArr3[]=new int[N];
        boolean b1=false;
        double d2=-1.103102, d3=-1.14382;
        byte byArr[]=new byte[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, -13);
        FuzzerUtils.init(byArr, (byte)61);
        FuzzerUtils.init(fArr1, 4.995F);

        for (int smallinvoc=0; smallinvoc<139; smallinvoc++) vSmallMeth(Test.iFld, Test.fFld);
        for (i17 = 20; i17 < 343; ++i17) {
            lArrFld[i17 + 1] -= Test.instanceCount;
        }
        i19 = 1;
        while (++i19 < 228) {
            Test.instanceCount -= (long)Test.fFld;
            for (i20 = 1; i20 < 110; i20++) {
                Test.instanceCount += (((i20 * i17) + Test.instanceCount) - i17);
                Test.fFld = i18;
                iArr3[i19 + 1] <<= -25172;
                if (b1) continue;
                i22 = 1;
                while (++i22 < 2) {
                    Test.iFld = Test.iFld;
                }
            }
            i21 += (((i19 * i20) + Test.fFld) - Test.instanceCount);
            Test.iFld = 42;
            Test.iFld *= Test.iFld;
            Test.instanceCount -= (long)d2;
        }
        for (i23 = 2; i23 < 339; ++i23) {
            if (b1) break;
            d2 -= -7260886668838784820L;
        }
        i25 = 1;
        do {
            Test.instanceCount *= i18;
            Test.instanceCount = -146;
            if (true) {
                byArr[i25 + 1] = (byte)i25;
                b1 = b1;
                fArr1[i25 + 1] += Test.instanceCount;
                for (i26 = 2; 76 > i26; i26++) {
                    for (d3 = 1; 2 > d3; d3 += 2) {
                        i24 += (int)(((d3 * i25) + i28) - Test.instanceCount);
                        Test.instanceCount = i24;
                    }
                }
            } else if (true) {
                i18 <<= i28;
            } else {
            }
        } while (++i25 < 330);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth dMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
