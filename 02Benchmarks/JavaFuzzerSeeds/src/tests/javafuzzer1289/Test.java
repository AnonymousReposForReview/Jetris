package tests.javafuzzer1289;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:41:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-183L;
    public volatile short sFld=-22339;
    public int iFld=3;
    public int iFld1=72;
    public static double dFld=1.45112;
    public short sFld1=-11986;
    public float fFld=1.326F;
    public boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -5.505F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth(int i) {

        int i1=-5, i2=-7, i3=-187, i4=-51660, i5=-4449;
        float f=0.501F;

        i1 = 1;
        do {
            i <<= (int)Test.instanceCount;
            for (i2 = 12; i2 > i1; --i2) {
                i <<= (int)Long.reverseBytes(Test.instanceCount);
                i <<= (int)(++Test.instanceCount);
                i *= (int)((Long.reverseBytes(Test.instanceCount) * i3) * ((i2 + 171L) + (iArrFld[i2][i2 + 1] >>= i1)));
                for (i4 = 1; i4 < 1; i4++) {
                    iArrFld[i1 - 1][i4 - 1] -= (int)(--f);
                    i5 += (int)((++i) + (iArrFld[i4 - 1][(i4 >>> 1) % N] + (-11295L * Test.instanceCount)));
                    f -= (i3++);
                    i3 = (int)((iArrFld[i1][i2 - 1]++) - ((i5 * 17582L) - i));
                    f += (((i4 * sFld) + Test.instanceCount) - Test.instanceCount);
                    i = (int)(iFld * (--f));
                    iFld1 <<= Integer.reverseBytes(Math.abs((int)(i5 += (int)f)));
                    Test.instanceCount += (i4 | iFld);
                }
            }
        } while (++i1 < 130);
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f);
    }

    public long lMeth(int i8, double d) {

        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 69.90323);

        dArr1[(i8 >>> 1) % N] += (iFld1--);
        long meth_res = i8 + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(int i9) {

        int i10=-6, i11=31618, i12=45105, i13=-14;
        byte by=85;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -65L);

        for (i10 = 20; i10 < 395; i10++) {
            vMeth(iFld);
            by -= (byte)i11;
            Test.dFld -= i10;
            iFld -= 11;
        }
        for (i12 = 11; i12 < 360; i12++) {
            i9 += -24426;
            i11 = i9;
            sFld >>= (short)iFld1;
            i13 -= sFld1;
        }
        iFld += i9;
        iArrFld[(i11 >>> 1) % N][(i12 >>> 1) % N] = i11;
        fFld += Test.instanceCount;
        Test.instanceCount <<= Test.instanceCount;
        iArrFld[(i9 >>> 1) % N][(i10 >>> 1) % N] *= (int)Test.instanceCount;
        long meth_res = i9 + i10 + i11 + by + i12 + i13 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1() {

        int i14=-6, i15=32, i16=-126, i17=-14437, i18=-5;
        byte by1=-113;

        iFld1 = (iFld * (iMeth(iFld1) + iFld));
        for (i14 = 14; i14 < 306; ++i14) {
            i15 += (int)Test.instanceCount;
            for (i16 = 1; i16 < 6; i16 += 2) {
                Test.dFld += i16;
                i15 = i17;
                i18 = 1;
                while (++i18 < 3) {
                    Test.fArrFld[i14] = -2;
                    if (bFld) continue;
                    if (bFld) continue;
                    i15 += (((i18 * Test.instanceCount) + fFld) - i16);
                    i15 += (int)Test.instanceCount;
                    by1 <<= (byte)i16;
                    iFld = iFld1;
                    Test.instanceCount = iFld1;
                }
            }
        }
        vMeth1_check_sum += i14 + i15 + i16 + i17 + i18 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i6=11, i7=-13, i19=-1, i20=9, i21=208;
        float f1=-1.530F, fArr[]=new float[N];
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -21.803F);
        FuzzerUtils.init(dArr, 0.49516);

        vMeth(iFld);
        for (i6 = 12; i6 < 334; i6++) {
            switch ((i6 % 9) + 31) {
            case 31:
                vMeth(i6);
                iFld1 -= (int)(-(-(-93 * (iArrFld[i6 - 1][i6] |= (int)Test.instanceCount))));
                iFld1 += (((i6 * i6) + iFld) - sFld);
                switch ((i6 % 7) + 38) {
                case 38:
                    fArr[i6 - 1] -= (float)(dArr[i6 - 1] += (0.104069 + lMeth(iFld, Test.dFld)));
                    vMeth1();
                    i7 += (int)Test.dFld;
                    fFld -= sFld;
                    break;
                case 39:
                    iFld1 = (int)fFld;
                    f1 = 1;
                    do {
                        for (i19 = 1; 3 > i19; i19 += 3) {
                            i20 += (i19 * i19);
                            iFld1 ^= (int)Test.instanceCount;
                            fFld += -3087074117445405502L;
                            iFld = (int)Test.instanceCount;
                            b = true;
                        }
                        i21 = 1;
                        while (++i21 < 3) {
                            fFld -= i20;
                            iFld *= -27651;
                            Test.dFld -= Test.instanceCount;
                            iFld = iFld1;
                            Test.instanceCount += i21;
                            iFld1 = (int)Test.instanceCount;
                            i7 -= iFld1;
                            iFld1 = (int)f1;
                            iFld1 += (int)41L;
                        }
                        iFld1 = i19;
                    } while ((f1 += 3) < 78);
                    break;
                case 40:
                    fFld = Test.instanceCount;
                    break;
                case 41:
                    iFld = i7;
                    break;
                case 42:
                    if (b) continue;
                    break;
                case 43:
                    i7 = i21;
                    break;
                case 44:
                    iArrFld[i6 - 1] = iArrFld[i6 - 1];
                    break;
                default:
                    Test.instanceCount += (((i6 * i19) + fFld) - Test.instanceCount);
                }
                break;
            case 32:
                iArrFld[i6][i6] += (int)Test.instanceCount;
                break;
            case 33:
                if (bFld) break;
                break;
            case 34:
                i7 += i19;
                break;
            case 35:
                i7 = (int)Test.instanceCount;
                break;
            case 36:
                i7 *= (int)Test.instanceCount;
                break;
            case 37:
                iArrFld[i6][i6 - 1] >>= i21;
                break;
            case 38:
                iFld1 += i6;
            case 39:
                if (b) continue;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth vMeth1
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
