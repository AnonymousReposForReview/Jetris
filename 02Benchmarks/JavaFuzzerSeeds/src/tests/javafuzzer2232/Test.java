package tests.javafuzzer2232;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:36:06 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1863809011L;
    public static float fFld=84.761F;
    public double dFld=-2.13153;
    public static float fFld1=1.48F;
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.24866);
        FuzzerUtils.init(Test.byArrFld, (byte)-97);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, long l1) {

        int i10=187, i11=-52158, i12=-16, i13=213, i14=12;
        boolean b=true;
        double d=-86.27505;
        short s=14519;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 5422336532767109627L);

        i10 = 1;
        do {
            if (b) continue;
            i9 += i10;
            for (i11 = 1; 11 > i11; ++i11) {
                d += s;
                if (false) break;
                lArr1[i10 + 1] >>= i10;
                for (i13 = i10; i13 < 2; ++i13) {
                    Test.fFld -= i10;
                    i9 = i14;
                    Test.fFld = i10;
                    i12 += (((i13 * Test.instanceCount) + i9) - i14);
                    l1 = l1;
                }
                if (b) continue;
                l1 *= -42;
            }
        } while (++i10 < 143);
        vMeth1_check_sum += i9 + l1 + i10 + (b ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d) + s + i13 + i14 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i8) {

        double d1=0.121158;

        vMeth1(i8, Test.instanceCount);
        d1 += Test.instanceCount;
        vMeth_check_sum += i8 + Double.doubleToLongBits(d1);
    }

    public static long lMeth(int i4, int i5, int i6) {

        long l=-50550L, l2=3619595110806709147L;
        int i7=-25, i15=224, i16=49434, i17=214, i18=111, iArr1[][]=new int[N][N];
        byte by=35;
        short s1=32233;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 147);

        for (l = 4; l < 183; ++l) {
            switch ((int)((l % 5) + 125)) {
            case 125:
                vMeth(i5);
                i15 = 1;
                do {
                    Test.fFld += (((i15 * Test.fFld) + Test.fFld) - i4);
                } while (++i15 < 9);
                break;
            case 126:
                for (i16 = 1; 9 > i16; i16++) {
                    i5 += (i16 | i17);
                    Test.fFld *= i16;
                    by -= (byte)l;
                    l2 = 1;
                    do {
                        i5 = (int)Test.instanceCount;
                        i7 <<= s1;
                        try {
                            i5 = (i5 % i15);
                            i17 = (iArr1[i16 + 1][(int)(l)] % i5);
                            iArr1[(int)(l)][(int)(l2 - 1)] = (i16 / 1213);
                        } catch (ArithmeticException a_e) {}
                        if (b1) break;
                        i17 -= -1;
                    } while (++l2 < 2);
                }
                break;
            case 127:
                i5 >>= (int)58446L;
                break;
            case 128:
                i18 += (int)6L;
                break;
            case 129:
                Test.instanceCount &= 40118;
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + l + i7 + i15 + i16 + i17 + by + l2 + s1 + (b1 ? 1 : 0) + i18 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-18, i1=172, i2=3, i3=118, i19=-23230, i20=-13539, i21=8971, i22=97, i23=162, iArr[]=new int[N];
        byte by1=-57;
        short s2=22059;
        boolean b2=true;
        long l3=-203L, lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(fArr, -74.404F);
        FuzzerUtils.init(lArr, -90L);

        for (i = 5; i < 138; ++i) {
            for (i2 = 4; i2 < 188; i2++) {
                iArr[i2 - 1] %= (int)(i1 | 1);
                i1 = (int)(fArr[i] * (++Test.fFld));
            }
            lArr[i + 1] = (long)(i * (lMeth(20802, i1, i2) + -9.495F));
            if (b2) {
                Test.instanceCount += by1;
                Test.dArrFld[i + 1] *= s2;
                for (i19 = 188; i19 > i; i19 -= 3) {
                    dFld *= -107;
                }
            } else {
                i3 *= i20;
                if (b2) {
                    for (l3 = 188; 2 < l3; --l3) {
                        for (i22 = 1; 2 > i22; ++i22) {
                            iArr = FuzzerUtils.int1array(N, (int)-136);
                            i23 = 50;
                            if (b2) {
                                i21 *= i;
                                Test.fFld += Test.instanceCount;
                                i23 = i22;
                                i21 += i22;
                            } else if (false) {
                                s2 = (short)i23;
                                lArr[i22 + 1] %= ((long)(dFld) | 1);
                                i23 -= (int)-101.639F;
                            }
                        }
                        iArr[i - 1] -= i21;
                        i1 += (int)l3;
                        Test.byArrFld[i] += (byte)Test.fFld;
                    }
                    lArr[i] = i2;
                } else {
                    Test.instanceCount += (((i * i23) + i1) - Test.fFld1);
                    Test.instanceCount |= -100;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
