package tests.javafuzzer1186;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:10:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4221506358L;
    public int iFld=108;
    public static short sFld=30221;
    public float fFld=4.522F;
    public static volatile double dFld=-20.108182;
    public static byte byFld=75;
    public int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public boolean bArrFld[]=new boolean[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -25314L);
        FuzzerUtils.init(Test.dArrFld, 110.64009);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        double d=-17.66850;
        int i5=-126, i6=-14, i7=64, i8=5, i9=9862, i10=3, i11=-4;
        boolean b=true;

        if (false) {
            d = l;
        } else if (b) {
            for (i5 = 9; i5 < 376; i5++) {
                l = (long)d;
                for (i7 = 1; i7 < 5; i7++) {
                    i6 += i6;
                    if (b) continue;
                    Test.instanceCount *= (long)-67.68627;
                    Test.lArrFld[i5][i7 + 1] -= i7;
                    Test.instanceCount = l;
                }
                if (b) continue;
            }
            i9 = 317;
            while (--i9 > 0) {
                for (i10 = i9; i10 < 5; i10 += 2) {
                    i6 += (i10 - i7);
                    l = i5;
                }
            }
        } else {
            Test.sFld = (short)Test.instanceCount;
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11;
    }

    public static long lMeth(float f, int i1, int i2) {

        int i3=-146, i4=35909, i12=-11, i13=43694, i14=145, i15=-11, i16=232, iArr[]=new int[N];
        double d1=33.16663;
        float f1=-10.235F;
        boolean b1=true;

        FuzzerUtils.init(iArr, -3);

        for (i3 = 10; 191 > i3; i3++) {
            vMeth1(Test.instanceCount);
        }
        if (b1) {
            for (i12 = 4; i12 < 230; ++i12) {
                i14 = 1;
                while (++i14 < 7) {
                    d1 *= 1.437F;
                    Test.instanceCount = i3;
                    i4 += (((i14 * i2) + i4) - i13);
                    for (f1 = 1; f1 < 1; f1++) {
                        iArr[i14] *= -39722;
                        i16 = i12;
                        try {
                            i16 = (-17455 / iArr[i14]);
                            i15 = (-35211 % i13);
                            i15 = (i12 / -17517);
                        } catch (ArithmeticException a_e) {}
                        f %= (i3 | 1);
                        try {
                            i13 = (i12 / -248);
                            i2 = (54797 % i3);
                            i13 = (143 % i3);
                        } catch (ArithmeticException a_e) {}
                        if (b1) break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i12 + i13 + i14 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + i15 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        float f2=0.906F;
        int i17=10169, i19=16, i20=-55668, i21=-153;
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.62211);

        dArr = (dArr = dArr);
        iArrFld[(iFld >>> 1) % N] = (int)lMeth(fFld, -177, 37353);
        iFld = 7;
        iFld *= 3;
        for (f2 = 11; f2 < 185; f2++) {
            if (b2) {
                Test.instanceCount = iFld;
                iFld >>>= (int)Test.instanceCount;
            } else if (b2) {
                Test.instanceCount -= Test.instanceCount;
                iFld %= (int)(iFld | 1);
                iFld -= iFld;
            } else {
                i19 = 9;
                while ((i19 -= 3) > 0) {
                    for (i20 = 1; i20 < 3; i20++) {
                        if (b2) break;
                        Test.instanceCount <<= i21;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i17 + (b2 ? 1 : 0) + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=31957, i23=228, i24=-11, i25=-240, i26=-2, i27=158, i28=-206, i29=-191, i30=0, i31=-1;
        boolean b3=true;

        for (int i : iArrFld) {
            vMeth();
            for (i22 = 2; i22 < 63; ++i22) {
                iArrFld[i22 + 1] = i24;
                i24 += (-24818 + (i22 * i22));
                i = (int)Test.dFld;
                bArrFld[i22] = b3;
                switch ((((i22 >>> 1) % 1) * 5) + 43) {
                case 46:
                    Test.lArrFld[i22 + 1][i22 + 1] /= (i24 | 1);
                    i25 = 1;
                    do {
                        switch ((((i25 >>> 1) % 2) * 5) + 120) {
                        case 125:
                            Test.dFld = Test.dFld;
                            iFld += (((i25 * i22) + i22) - iFld);
                            Test.byFld += (byte)(i25 * Test.instanceCount);
                            Test.instanceCount = 13716;
                        case 127:
                            i += i25;
                        }
                        if (b3) continue;
                        i24 += (int)-88.72F;
                    } while (++i25 < 2);
                    iArrFld[i22] -= (int)fFld;
                    for (i26 = 1; 2 > i26; ++i26) {
                        i24 <<= i26;
                    }
                }
                Test.dArrFld[i22 - 1][i22] = -40;
            }
        }
        for (i28 = 6; i28 < 253; ++i28) {
            Test.instanceCount += (i28 - i24);
            i23 -= Test.byFld;
            i24 |= -4821;
        }
        for (i30 = 332; i30 > 1; i30--) {
            Test.lArrFld[i30][i30 - 1] -= Test.instanceCount;
            fFld += i22;
            Test.dArrFld[i30 + 1][i30] += Test.dFld;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
