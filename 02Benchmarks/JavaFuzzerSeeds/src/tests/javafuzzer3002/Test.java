package tests.javafuzzer3002;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:44:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3168585047L;
    public byte byFld=5;
    public static short sFld=-18674;
    public static double dFld=40.45875;
    public static int iFld=-2;
    public static volatile boolean bFld=false;
    public static float fFld=0.245F;
    public static int iFld1=-64989;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 55809L);
        FuzzerUtils.init(Test.iArrFld, 246);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i10) {

        int i11=233, i12=-1, i13=-4, i14=52246;
        long l=-164L;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -31.844F);

        i10 = i10;
        fArr[(i10 >>> 1) % N] += -4L;
        for (i11 = 203; i11 > 10; --i11) {
            byte by1=69;
            Test.instanceCount += (((i11 * i12) + i12) - f1);
            Test.instanceCount >>>= -3542;
            i10 *= i12;
            for (i13 = 8; i13 > 1; i13--) {
                f1 += (((i13 * i14) + f1) - Test.instanceCount);
                i10 = (int)f1;
            }
            if (b1) {
                l += Test.instanceCount;
                i10 = i14;
                i14 ^= i14;
                by1 <<= (byte)-8;
            } else if (b1) {
                i12 += (i11 * f1);
            } else if (b1) {
                f1 = i11;
                vMeth1_check_sum += Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + l + (b1 ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            } else {
                Test.instanceCount *= l;
                vMeth1_check_sum += Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + l + (b1 ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + l + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i9, float f) {

        boolean b=false;
        byte by=-45;
        int i15=26051, i16=-51642;

        b = ((++i9) == (i9 = (int)(Test.instanceCount + i9)));
        i9 = (by - i9);
        vMeth1(f, -1032);
        Test.lArrFld[(i9 >>> 1) % N] *= i9;
        Test.instanceCount >>>= by;
        for (i15 = 5; i15 < 176; ++i15) {
            Test.dFld += i16;
            Test.lArrFld[i15] = 81;
            i16 += Test.iFld;
            i16 += Test.iFld;
            if (b) continue;
        }
        Test.instanceCount *= i16;
        Test.sFld <<= (short)Test.instanceCount;
        i16 += 38644;
        b = b;
        vMeth_check_sum += i9 + Float.floatToIntBits(f) + (b ? 1 : 0) + by + i15 + i16;
    }

    public static int iMeth() {

        int i4=-13, i5=-11, i6=34171, i7=-31549, i8=53;
        float f2=98.404F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -127.965F);

        for (i4 = 2; 190 > i4; ++i4) {
            i5 += (((i4 * i4) + i5) - i5);
            switch (((i4 % 2) * 5) + 23) {
            case 24:
                for (i6 = i4; i6 < 8; ++i6) {
                    Test.lArrFld[i4 - 1] = (-i6);
                    switch (((i4 % 7) * 5) + 113) {
                    case 115:
                        i5 = i7;
                        break;
                    case 129:
                        i8 = 1;
                        do {
                            double d=-84.113909;
                            try {
                                i5 = (i8 / i8);
                                i7 = (29314 / i6);
                                i5 = (i5 % -247807526);
                            } catch (ArithmeticException a_e) {}
                            i5 = (Test.iArrFld[i8] - Integer.reverseBytes(i5++));
                            Test.instanceCount += i8;
                            d += (++Test.iArrFld[i6 - 1]);
                            vMeth(Test.iFld, f2);
                            d %= 34.370F;
                            f2 += (i8 * i6);
                        } while (++i8 < 1);
                        break;
                    case 126:
                        if (Test.bFld) break;
                        break;
                    case 114:
                        i5 += (i6 * i6);
                        break;
                    case 145:
                        fArr1[i6 - 1] *= Test.iFld;
                        break;
                    case 128:
                        i7 |= i7;
                    case 138:
                        if (Test.bFld) break;
                        break;
                    }
                }
            case 28:
                Test.iFld -= Test.sFld;
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-36, i1=-78, i2=197, i3=-54460, i17=-13, i18=-17937, i19=-1, i20=36502, i21=-2, i22=-125, i23=-8, i24=12;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -106.110384);

        for (i = 10; i < 184; ++i) {
            if ((byFld + Test.sFld) != (i1++)) continue;
            for (i2 = i; i2 < 144; i2++) {
                i3 += i2;
                iMeth();
                Test.fFld *= i1;
                Test.dFld = i1;
                Test.bFld = Test.bFld;
                i3 *= i2;
            }
            switch ((((Test.iFld >>> 1) % 5) * 5) + 69) {
            case 83:
                Test.instanceCount += -3989709103L;
                Test.instanceCount += i;
                break;
            case 93:
                for (i17 = 144; i17 > 2; i17--) {
                    dArr[i17 + 1] = Test.dFld;
                }
                switch (((125 >>> 1) % 9) + 4) {
                case 4:
                    Test.fFld = Test.instanceCount;
                case 5:
                    i3 = -5;
                    for (i19 = i; i19 < 144; i19 += 2) {
                        Test.iArrFld[i] *= i19;
                        if (false) {
                            Test.fFld = i2;
                        }
                        Test.instanceCount = Test.instanceCount;
                    }
                    break;
                case 6:
                    i21 = 1;
                    while (++i21 < 144) {
                        for (i22 = 1; i22 > 1; i22 -= 2) {
                            byFld ^= (byte)i24;
                            Test.instanceCount += i22;
                            try {
                                Test.iArrFld[i] = (i21 % i);
                                Test.iFld = (i21 % 15887);
                                Test.iFld = (-14861 % i17);
                            } catch (ArithmeticException a_e) {}
                            Test.lArrFld[i22] += Test.instanceCount;
                            i24 = (int)Test.instanceCount;
                            Test.instanceCount += i22;
                        }
                    }
                case 7:
                    Test.iArrFld[i + 1] *= (int)Test.instanceCount;
                    break;
                case 8:
                    Test.iFld += i19;
                    break;
                case 9:
                    Test.iFld *= (int)3546341940L;
                    break;
                case 10:
                    i3 -= Test.iFld1;
                    break;
                case 11:
                    i1 += (i * i3);
                    break;
                case 12:
                    Test.fFld = -124;
                    break;
                }
            case 74:
                Test.instanceCount >>= Test.instanceCount;
                break;
            case 77:
                Test.instanceCount += (i ^ i22);
                break;
            case 86:
                Test.instanceCount = i2;
                break;
            default:
                Test.fFld -= byFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
