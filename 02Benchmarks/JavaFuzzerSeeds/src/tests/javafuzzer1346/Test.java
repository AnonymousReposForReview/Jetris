package tests.javafuzzer1346;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:32:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7090457645447830210L;
    public byte byFld=70;
    public static int iFld=155;
    public int iFld1=13;
    public boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 169);
    }

    public static long fMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, long l2, int i17) {

        int i18=-11426, i19=-1, i20=-196, i21=38481, i22=-422, i23=-1, i24=46511, i25=23;
        boolean b1=true;
        float f1=56.220F;

        for (i18 = 18; i18 < 390; ++i18) {
            for (i20 = 1; i20 < 5; ++i20) {
                Test.iArrFld[i18] += (int)l1;
                for (i22 = 1; i22 < 2; i22++) {
                    i17 += i22;
                    i21 += (3 + (i22 * i22));
                }
                for (i24 = 2; i24 > i20; --i24) {
                    if (b1) {
                        i19 = i24;
                        vMeth_check_sum += l1 + l2 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + (b1 ? 1 : 0)
                            + Float.floatToIntBits(f1);
                        return;
                    } else if (b1) {
                        i19 += (i24 ^ i21);
                        Test.iArrFld[i18 + 1] >>= (int)l1;
                        i17 |= i25;
                        l2 *= Test.iFld;
                    } else {
                        i25 += (int)f1;
                        l1 *= -23737;
                    }
                }
            }
        }
        vMeth_check_sum += l1 + l2 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f1);
    }

    public static double dMeth(long l, int i16) {


        vMeth(Test.instanceCount, l, Test.iFld);
        long meth_res = l + i16;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static float fMeth(int i7, int i8) {

        int i9=-3, i10=58775, i11=-1, i12=225, i13=27527, i14=-6, i15=167, i26=213, i27=6, iArr1[][]=new int[N][N];
        short s1=31689;
        double d1=2.20638;
        float f=35.281F;

        FuzzerUtils.init(iArr1, -7);

        for (i9 = 14; i9 < 331; ++i9) {
            iArr1[i9 + 1][i9] -= (int)(((Test.instanceCount++) + (s1 - Test.instanceCount)) + d1);
        }
        for (i11 = 17; 285 > i11; ++i11) {
            d1 -= i8;
            for (i13 = 1; i13 < 6; i13++) {
                i7 ^= (int)(Test.instanceCount * (-(f * Test.instanceCount)));
            }
            iArr1[i11][i11] *= iArr1[i11][i11];
        }
        i15 = 1;
        do {
            dMeth(60334L, i9);
            try {
                i12 = (-185 % iArr1[i15 - 1][i15]);
                Test.iFld = (1519936873 % i8);
                i10 = (Test.iArrFld[i15] / 18481);
            } catch (ArithmeticException a_e) {}
            i26 = 1;
            do {
                Test.instanceCount += (((i26 * Test.instanceCount) + i12) - Test.iFld);
                i8 >>= i27;
                i7 += i26;
                Test.instanceCount += (((i26 * i7) + f) - i15);
            } while (++i26 < 4);
        } while (++i15 < 379);
        long meth_res = i7 + i8 + i9 + i10 + s1 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f) + i15 + i26 + i27 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i=-32, i1=-240, i2=42553, i3=0, i4=-216, i5=-9, i6=9, i28=34765, i29=13, i30=9, iArr[]=new int[N];
        double d=122.79685;
        short s=-22674;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -48401);
        FuzzerUtils.init(lArr, 774470717L);

        b = bArrFld[(i >>> 1) % N][(i >>> 1) % N];
        Test.instanceCount = (-(i + i));
        i %= (int)(((long)(-10L * d)) | 1);
        Test.instanceCount -= ((++i) * ((i *= -39) * Integer.reverseBytes(i)));
        iArr[(i >>> 1) % N] += (int)(Test.instanceCount++);
        for (i1 = 1; i1 < 217; ++i1) {
            for (i3 = 116; i3 > i1; --i3) {
                iArr[i3 - 1] = (++byFld);
                for (i5 = 1; i5 > i3; i5--) {
                    Test.instanceCount += (i5 - Test.instanceCount);
                    i += (i5 ^ i3);
                    s = (short)fMeth(Test.iFld, i6);
                    Test.instanceCount += (long)d;
                    i %= (int)(i | 1);
                    i4 += (i5 * i5);
                    try {
                        i4 = (Test.iFld / i3);
                        i28 = (-136 % i1);
                        i6 = (i2 / i5);
                    } catch (ArithmeticException a_e) {}
                    i4 = i6;
                    Test.instanceCount |= -13;
                }
                i6 /= -2;
                for (i29 = 1; 1 < i29; i29--) {
                    d = i1;
                    i6 = (int)Test.instanceCount;
                    i6 >>>= i2;
                    Test.instanceCount = Test.iFld;
                    i30 <<= i1;
                    iFld1 -= i1;
                    lArr[i3 + 1] += Test.iFld;
                }
                i6 += (i3 ^ i28);
            }
            Test.iFld = (int)Test.instanceCount;
            if (b) break;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  dMeth ->  dMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
