package tests.javafuzzer2635;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:38:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public volatile float fFld=40.285F;
    public static int iFld=175;
    public static volatile int iFld1=231;
    public float fArrFld[]=new float[N];
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 59735);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f=-2.108F;
        int i7=-3, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, 92);

        f *= Test.iFld;
        Test.instanceCount >>= Test.iFld;
        iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] |= Test.iFld;
        Test.instanceCount *= i7;
        vMeth1_check_sum += Float.floatToIntBits(f) + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i4, double d, int i5) {

        int i6=33378, i8=-32851, i9=-64, i10=-4, iArr2[]=new int[N];
        float f1=0.71F;

        FuzzerUtils.init(iArr2, -166);

        i6 = 1;
        do {
            vMeth1();
            i5 += (i6 | i4);
            i8 = 1;
            while (++i8 < 8) {
                Test.instanceCount = Test.instanceCount;
                f1 = i4;
                for (i9 = 1; i9 < 1; i9++) {
                    iArr2[i8 + 1] >>= i4;
                    i10 += i9;
                    Test.instanceCount <<= i5;
                    Test.iFld <<= (int)Test.instanceCount;
                    Test.iFld &= i10;
                    i10 = i10;
                    i10 += (i9 * i9);
                    Test.instanceCount = Test.iFld1;
                }
            }
        } while (++i6 < 211);
        long meth_res = i4 + Double.doubleToLongBits(d) + i5 + i6 + i8 + Float.floatToIntBits(f1) + i9 + i10 +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i2, long l, int i3) {

        int i11=-2, i12=-7525, i13=98, i14=-11, i15=-18, iArr[]=new int[N];
        boolean b=true;
        double d1=21.119287, d2=22.41299;

        FuzzerUtils.init(iArr, -182);

        fFld *= iArr[(-13 >>> 1) % N];
        i3 = (int)(((Test.instanceCount <<= i2) - (i2 + i3)) + ((-i3) - (i2 - i2)));
        i3 = (int)lMeth(Test.iFld1, -17.74253, Test.iFld);
        for (i11 = 2; 372 > i11; i11++) {
            if (b) continue;
            d1 += Test.instanceCount;
            fArrFld[i11 + 1] *= fFld;
            if (b) continue;
            for (d2 = 1; d2 < 5; d2++) {
                for (i14 = 1; i14 < 2; ++i14) {
                    fFld *= Test.instanceCount;
                    fFld -= Test.iFld;
                    d1 -= fFld;
                    Test.iFld -= i13;
                    i15 -= (int)1.58857;
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-165, i16=1, i17=-30966, i18=16376, i19=-5, i20=-53636, i21=63610, i22=-166, i23=17076, i24=13;
        byte by=-5;
        double d3=0.112366;
        boolean b1=false;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-24511);
        FuzzerUtils.init(lArr, -7864927380612556343L);

        if (b1) {
            i = 1;
            while (++i < 386) {
                i1 = (i1++);
                vMeth(i, Test.instanceCount, Test.iFld);
            }
            for (i16 = 291; i16 > 14; --i16) {
                byArrFld[i16 - 1] -= (byte)8L;
                for (i18 = 5; i18 < 91; i18++) {
                    Test.iArrFld[i16 - 1] = by;
                }
            }
            d3 += i;
            fFld = Test.iFld1;
        } else {
            Test.iArrFld[(Test.iFld >>> 1) % N] -= i1;
            switch ((((Test.iFld >>> 1) % 9) * 5) + 44) {
            case 75:
                Test.iFld += Test.iFld;
                i1 = i17;
                Test.instanceCount += 65299;
                i19 ^= -37712;
            case 55:
                i1 >>>= -81;
                for (i20 = 1; i20 < 368; ++i20) {
                    i22 = 1;
                    do {
                        for (i23 = 1; 1 > i23; i23++) {
                            sArr[i23] = (short)Test.instanceCount;
                            Test.iFld1 += (i23 * i23);
                            switch (((i22 % 1) * 5) + 98) {
                            case 100:
                                i1 += (int)-54.720F;
                                break;
                            default:
                                Test.iFld -= 247;
                                lArr[i20 + 1] = Test.instanceCount;
                            }
                            d3 += i19;
                            i19 = -194;
                            i19 += i23;
                        }
                    } while (++i22 < 69);
                    i19 += (i20 - Test.instanceCount);
                }
                break;
            case 88:
                Test.instanceCount *= i24;
                break;
            case 67:
                Test.iFld = i17;
                break;
            case 66:
            case 65:
                fFld -= Test.instanceCount;
                break;
            case 53:
                Test.iArrFld[(i1 >>> 1) % N] <<= i18;
                break;
            case 64:
                i21 -= -6;
                break;
            case 51:
                Test.iFld += i16;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
