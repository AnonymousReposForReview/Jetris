package tests.javafuzzer1204;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:33:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static int iFld=-51;
    public volatile double dFld=1.58443;
    public int iFld1=-13;
    public static boolean bFld=false;
    public float fFld=0.151F;
    public float fFld1=-2.353F;
    public short sFld=7517;
    public static int iFld2=60330;
    public volatile long lFld=-829521083L;
    public int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public int iMeth() {


        Test.instanceCount += Test.iFld;
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth2(int i7, long l2, int i8) {

        int i9=3, i10=14, i11=-206, i12=9018, i13=-176;
        long l3=-12L;

        iArrFld[(Test.iFld >>> 1) % N] = iFld1;
        i9 = 1;
        do {
            Test.iFld <<= 0;
            bArrFld[i9] = Test.bFld;
            for (i10 = 1; i10 < 8; i10++) {
                i11 >>= Test.iFld;
                fFld += -38515;
                Test.instanceCount += (long)(0.316F + (i10 * i10));
                fFld += (((i10 * fFld1) + fFld) - Test.instanceCount);
                Test.instanceCount = (long)fFld;
            }
            l3 = i11;
            i12 = 1;
            do {
                i13 = 1;
                do {
                    byte by1=93;
                    by1 >>= (byte)i12;
                    iFld1 += Test.iFld;
                } while (++i13 < 1);
            } while (++i12 < 8);
        } while (++i9 < 197);
        vMeth2_check_sum += i7 + l2 + i8 + i9 + i10 + i11 + l3 + i12 + i13;
    }

    public void vMeth1(boolean b, int i3, int i4) {

        int i5=-53076, i6=-63769, i14=-244, i15=-5;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6813149716727143429L);

        Test.iFld = (int)dFld;
        Test.instanceCount = iArrFld[(iFld1 >>> 1) % N];
        for (i5 = 12; i5 < 388; ++i5) {
            if (b) {
                vMeth2(i4, Test.instanceCount, Test.iFld);
                dFld = -23;
                for (i14 = 1; 4 > i14; i14++) {
                    i15 += (int)(-1.111F + (i14 * i14));
                    lArr[i14 - 1] >>= i4;
                    Test.instanceCount -= i6;
                    Test.instanceCount += i6;
                }
                lArr[i5] = i15;
                vMeth1_check_sum += (b ? 1 : 0) + i3 + i4 + i5 + i6 + i14 + i15 + FuzzerUtils.checkSum(lArr);
                return;
            } else {
                iFld1 += (0 + (i5 * i5));
                Test.iFld += i5;
                if (Test.bFld) continue;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i3 + i4 + i5 + i6 + i14 + i15 + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(long l, byte by, long l1) {

        int i=51562, i1=36616, i2=21734, i16=-64742, i17=227, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -47601);

        iArr[(i >>> 1) % N][(i >>> 1) % N] %= (int)((((i + i) + Short.reverseBytes((short)(9195))) + i) | 1);
        i1 *= ((--i1) * i);
        iMeth();
        i2 = 1;
        while (++i2 < 357) {
            vMeth1(false, iFld1, i1);
            iArrFld[i2] = i;
            l1 *= i;
            for (i16 = 1; i16 < 5; i16++) {
                iFld1 = (int)fFld1;
                if (i16 != 0) {
                    vMeth_check_sum += l + by + l1 + i + i1 + i2 + i16 + i17 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                fFld += (((i16 * i) + i17) - sFld);
                i17 *= (int)fFld1;
                i1 *= (int)l1;
                Test.iFld = (int)fFld1;
                Test.iFld >>>= i;
            }
        }
        vMeth_check_sum += l + by + l1 + i + i1 + i2 + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by2=115;
        int i18=0, i19=10, i20=-142, i21=-9, i22=39491, i23=-202;

        vMeth(Test.instanceCount, by2, Test.instanceCount);
        for (i18 = 3; i18 < 164; i18++) {
            for (i20 = 6; i20 < 156; i20++) {
                Test.iFld = iFld1;
                for (i22 = i18; i22 < 2; ++i22) {
                    switch (((i21 >>> 1) % 2) + 85) {
                    case 85:
                        Test.instanceCount = -144;
                        i19 >>= Test.iFld2;
                        Test.iFld = i20;
                        i19 *= iFld1;
                        break;
                    case 86:
                        if (Test.bFld) continue;
                        fFld1 *= Test.instanceCount;
                        iArrFld[i22 + 1] = i18;
                        break;
                    default:
                        Test.instanceCount *= (long)dFld;
                        fFld += (((i22 * i19) + Test.instanceCount) - Test.iFld);
                        Test.instanceCount = i18;
                    }
                    Test.instanceCount += -9028909234347760883L;
                    Test.iFld += (i22 + Test.instanceCount);
                    if (Test.bFld) break;
                    Test.instanceCount += (i22 * i22);
                    iArrFld[i22 - 1] += i20;
                    i21 += (-10 + (i22 * i22));
                }
                Test.iFld -= (int)-55289L;
                Test.iFld2 >>= (int)Test.instanceCount;
                i23 = sFld;
                Test.instanceCount += (i20 * i20);
                bArrFld[i18 - 1] = Test.bFld;
                Test.iFld2 = (int)fFld;
                lFld = lFld;
            }
            iArrFld = iArrFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
