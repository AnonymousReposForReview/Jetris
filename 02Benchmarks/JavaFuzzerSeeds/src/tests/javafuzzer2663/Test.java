package tests.javafuzzer2663;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:19:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=249L;
    public volatile int iFld=110;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 0L);
        FuzzerUtils.init(Test.iArrFld, -23481);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s, short s1) {

        double d1=58.28878;

        d1 += 4;
        long meth_res = s + s1 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        int i7=8100, i8=-9, i9=30002;
        double d=2.48374;
        short s2=-1890;
        byte by=99;
        boolean b=false, bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 35.264F);

        i7 = (int)(Test.instanceCount / (Test.instanceCount | 1));
        i6 = i7;
        d = ((iMeth(s2, s2) + i5) + i7);
        i7 <<= i5;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)-22633);
        bArr = bArr;
        fArr[(i7 >>> 1) % N] += Test.instanceCount;
        if (b) {
            i8 = 1;
            do {
                by += (byte)38390;
                switch (((i8 % 7) * 5) + 108) {
                case 131:
                    switch (((i8 % 3) * 5) + 48) {
                    case 54:
                        i9 = 6;
                        do {
                            d += i6;
                            Test.instanceCount = i7;
                        } while (--i9 > 0);
                    case 57:
                        Test.instanceCount += (i8 * i8);
                        break;
                    case 61:
                        try {
                            i6 = (Test.iArrFld[i8] % Test.iArrFld[i8 + 1]);
                            i6 = (-101 / i5);
                            i7 = (-40860 / i5);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                    break;
                case 124:
                    try {
                        i5 = (i5 / i9);
                        Test.iArrFld[i8 - 1] = (Test.iArrFld[i8] / i9);
                        Test.iArrFld[i8 + 1] = (i5 / i8);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 139:
                    Test.iArrFld[i8] = i9;
                    break;
                case 141:
                    i5 += i8;
                    break;
                case 126:
                    if (i7 != 0) {
                        vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + s2 + i8 + by + i9 + (b ? 1 : 0)
                            + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                case 115:
                    Test.instanceCount *= Test.instanceCount;
                    break;
                case 137:
                    i6 += i8;
                }
            } while (++i8 < 263);
        } else if (b) {
            Test.instanceCount -= Test.instanceCount;
        }
        vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + s2 + i8 + by + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth() {

        short s3=-9532;

        iFld ^= (int)(Test.instanceCount++);
        Test.instanceCount = (Test.lArrFld[(iFld >>> 1) % N]++);
        vMeth(iFld, iFld);
        iFld += s3;
        long meth_res = s3;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=32231, i2=3506, i3=13, i4=-2, i10=-3, i11=-8947, i12=11, i13=-6, i14=-10, i15=-9, i16=-35294, iArr[]=new
            int[N];
        double d2=-119.390;
        byte by1=67;
        float f=-7.556F;

        FuzzerUtils.init(iArr, -58585);

        for (int i : iArr) {
            for (i1 = 3; i1 < 63; i1++) {
                for (i3 = 1; 2 > i3; ++i3) {
                    i2 = (int)4929151032958173383L;
                    i = (int)Test.lArrFld[i3 - 1];
                    i4 += (int)(-lMeth());
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += (i3 - Test.instanceCount);
                    iFld += (i3 | Test.instanceCount);
                    iFld *= -194;
                }
                Test.instanceCount >>>= i3;
                Test.instanceCount += (((i1 * Test.instanceCount) + i2) - Test.instanceCount);
                for (i10 = 1; i10 < 2; ++i10) {
                    i <<= (int)Test.instanceCount;
                    i11 += (i10 * i3);
                    d2 = i1;
                    i4 += (i10 * i10);
                    i4 |= 2;
                    by1 -= (byte)i2;
                    i4 += i4;
                    i4 = (int)f;
                }
                Test.instanceCount += (((i1 * f) + iFld) - i12);
                for (i13 = 1; i13 < 2; ++i13) {
                    i14 -= 40476;
                }
                Test.instanceCount = i4;
            }
        }
        for (i15 = 4; i15 < 131; i15++) {
            i16 += (i15 * i15);
            f += i14;
        }
        Test.iArrFld[(i1 >>> 1) % N] = i12;
        i12 = -225;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
