package tests.javafuzzer467;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:13:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3996108096400048108L;
    public static short sFld=-2803;
    public static int iFld=3;
    public byte byFld=28;
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=183, i3=39893, i4=-2, i5=63158, i6=133, iArr[]=new int[N];
        long l1=18276L, lArr[]=new long[N];
        float f=2.442F, f1=-1.799F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(lArr, 62264L);
        FuzzerUtils.init(fArr, 52.307F);
        FuzzerUtils.init(iArr, -71);

        i2 *= Test.sFld;
        i2 -= i2;
        l1 = 1;
        while (++l1 < 343) {
            lArr = lArr;
        }
        for (f = 21; f < 383; f++) {
            i4 = 1;
            do {
                f1 += i4;
                for (i5 = 1; i5 > 1; i5--) {
                    if (b) {
                        f1 *= l1;
                        fArr[(int)(f)] = -63;
                        iArr[(int)(f + 1)] -= (int)15567L;
                        i2 <<= i3;
                    } else if (b) {
                        iArr[i5 + 1] = (int)f1;
                        Test.sFld += (short)(((i5 * i3) + i5) - Test.instanceCount);
                    } else {
                        i6 += i5;
                    }
                }
            } while (++i4 < 5);
        }
        long meth_res = i2 + l1 + Float.floatToIntBits(f) + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + (b ? 1 : 0)
            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i1) {

        boolean b1=false;
        int i7=142, i8=-6686, i9=-3713, i10=92, i11=-18805, i12=-7730, i13=-11852, iArr1[]=new int[N];
        float f2=35.707F;

        FuzzerUtils.init(iArr1, 38350);

        i1 += (int)(((Test.instanceCount--) * (Test.instanceCount - i1)) * (i1--));
        i1 = (i1 + (-(-iMeth())));
        b1 = b1;
        i1 = i1;
        for (i7 = 10; i7 < 315; i7++) {
            if (false) {
                for (i9 = 1; 5 > i9; i9++) {
                    i11 = 1;
                    while (++i11 < 2) {
                        f2 += (((i11 * i1) + i8) - i9);
                    }
                    switch (((i8 >>> 1) % 2) + 108) {
                    case 108:
                        for (i12 = i7; i12 < 2; i12++) {
                            i8 -= i12;
                            try {
                                i8 = (-1542784185 % iArr1[i9 + 1]);
                                i8 = (1735317936 / i13);
                                iArr1[i9 - 1] = (i10 / -96);
                            } catch (ArithmeticException a_e) {}
                            iArr1[i7 + 1] /= (int)(i10 | 1);
                        }
                        iArr1[i9 - 1] = i12;
                    case 109:
                    }
                }
            }
        }
        long meth_res = i1 + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, long l) {

        int i14=13592, i15=-5, i16=5, i17=-4, i18=-2;
        boolean b2=true;
        short s=12704;
        byte by=-38;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -45540L);

        Test.instanceCount += ((i - i) - (i - lMeth(i)));
        for (i14 = 212; i14 > 8; --i14) {
            if (b2) continue;
            i15 &= (int)l;
            l += i14;
            i16 = 1;
            do {
                i15 ^= i16;
                i15 <<= i14;
                for (i17 = i16; i17 < 1; i17++) {
                    i15 ^= (int)l;
                }
                i15 = s;
                by += (byte)i18;
                i = i16;
                lArr1[i16 + 1] += Test.instanceCount;
                Test.sFld = (short)63736;
            } while (++i16 < 8);
        }
        vMeth_check_sum += i + l + i14 + i15 + (b2 ? 1 : 0) + i16 + i17 + i18 + s + by + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f3=-2.281F;
        int i19=-209, i20=-9, i21=-28, i22=178, i23=-214, i24=-10, i25=1840, i26=-14, i27=-55316, iArr2[]=new int[N];
        boolean b3=true;
        double d=-1.129274;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 33042);
        FuzzerUtils.init(lArr2, 36182L);

        vMeth(Test.iFld, Test.instanceCount);
        iArr2[(1 >>> 1) % N] += (int)-24.559F;
        for (f3 = 11; f3 < 214; ++f3) {
            try {
                i19 = (Test.iFld % i19);
                Test.iFld = (iArr2[(int)(f3 + 1)] / 112);
                Test.iFld = (37 % i19);
            } catch (ArithmeticException a_e) {}
            Test.iFld = byFld;
            Test.bArrFld[(int)(f3)] = b3;
            for (i20 = (int)(f3); i20 < 124; i20++) {
                Test.instanceCount -= -11;
                Test.bArrFld[i20 + 1] = b3;
                Test.instanceCount *= i19;
                i19 |= Test.iFld;
                iArr2[i20 - 1] = Test.iFld;
                lArr2[i20 + 1] += i21;
                Test.sFld += (short)(i20 * i20);
                if (b3) continue;
                iArr2[i20 - 1] = i21;
            }
        }
        i21 = i21;
        i19 ^= i20;
        for (i22 = 7; i22 < 350; ++i22) {
            i19 += i22;
            i23 += (i22 * i22);
            i23 += (int)Test.instanceCount;
            i23 = (int)f3;
        }
        for (i24 = 295; i24 > 9; --i24) {
            if (b3) break;
            try {
                i19 = (62380 / i24);
                i19 = (i23 / iArr2[(i24 >>> 1) % N]);
                i21 = (-27124 / i25);
            } catch (ArithmeticException a_e) {}
            for (i26 = 88; i26 > 3; --i26) {
                d += -59572L;
                b3 = b3;
                i25 -= (int)Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
