package tests.javafuzzer845;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-151L;
    public double dFld=75.7591;
    public static volatile boolean bFld=false;
    public static volatile float fFld=2.221F;
    public static volatile int iFld=-69;
    public byte byFld=121;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 19406L);
        FuzzerUtils.init(Test.byArrFld, (byte)121);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i5=-5, i6=112, i7=-12, i8=23608, i9=-196, i10=36037, i11=-2976;
        float f=3.609F;
        byte by=32;

        i5 -= i5;
        for (i6 = 5; 325 > i6; ++i6) {
            i5 += (((i6 * f) + Test.instanceCount) - Test.instanceCount);
            Test.instanceCount += (i6 - i6);
            i5 = -7806;
            i5 = i5;
            i5 += (i6 * i6);
            for (i8 = 1; i8 < 5; i8++) {
                switch ((i8 % 1) + 101) {
                case 101:
                    Test.bFld = Test.bFld;
                    f = Test.instanceCount;
                    i9 <<= i8;
                    break;
                }
                for (i10 = 2; i10 > 1; i10--) {
                    i5 = by;
                    i5 = i6;
                }
            }
        }
        vMeth1_check_sum += l + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + by;
    }

    public static void vMeth(double d, int i2) {

        int i3=103, i4=13, i12=51518, i13=37, i14=-69, iArr[]=new int[N];
        short s=-15502;
        float f1=51.226F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.441F);
        FuzzerUtils.init(iArr, -13);

        for (i3 = 7; i3 < 381; ++i3) {
            vMeth1(Test.instanceCount);
            i12 = 1;
            do {
                if (Test.bFld) continue;
            } while (++i12 < 5);
            switch ((((i4 >>> 1) % 3) * 5) + 122) {
            case 124:
                Test.lArrFld[i3 - 1] = s;
                i4 *= i2;
            case 126:
            case 132:
                for (i13 = 1; 5 > i13; ++i13) {
                    switch (((i13 % 10) * 5) + 90) {
                    case 116:
                        fArr[i13 + 1] *= i12;
                        Test.instanceCount = (long)f1;
                        iArr[i3 - 1] += i4;
                        break;
                    case 129:
                        iArr = iArr;
                        i14 = (int)41L;
                        i2 *= i2;
                        break;
                    case 128:
                        i4 += (int)Test.instanceCount;
                        break;
                    case 136:
                        i4 += i12;
                        break;
                    case 137:
                        Test.instanceCount >>= i13;
                        break;
                    case 91:
                        i4 *= s;
                        break;
                    case 122:
                        i2 -= (int)Test.instanceCount;
                    case 96:
                        i4 += i13;
                        break;
                    case 124:
                        i14 += (((i13 * i4) + Test.instanceCount) - i2);
                        break;
                    case 120:
                        i14 = i4;
                        break;
                    }
                }
                break;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + i12 + s + i13 + i14 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        double d1=17.80706, d2=0.8615, d3=56.39802, dArr[]=new double[N];
        int i15=10, i16=224, i17=56789, i18=-2, iArr1[]=new int[N];
        long l1=63468L;
        short s1=28268;

        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(dArr, 51.116429);

        vMeth(d1, i15);
        d2 = 1;
        while (++d2 < 271) {
            for (d3 = 6; d3 > d2; --d3) {
                Test.instanceCount += i15;
                iArr1[(int)(d2 - 1)] = i16;
                for (i17 = 1; i17 < 1; i17++) {
                    i16 = (int)l1;
                    Test.instanceCount = Test.instanceCount;
                    if (true) {
                        i18 += i17;
                    } else if (Test.bFld) {
                        iArr1 = FuzzerUtils.int1array(N, (int)41);
                        i16 += i17;
                    } else {
                        s1 = (short)i17;
                    }
                    i15 += i17;
                    dArr[(int)(d3 - 1)] = 5;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i15 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) +
            i16 + i17 + i18 + l1 + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-3, i19=-12, i20=25234, i21=25261, i22=-197, i23=2361, i24=-34800, i25=-46056, iArr2[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 119.801F);
        FuzzerUtils.init(iArr2, 132);

        for (i = 21; i < 340; ++i) {
            Test.instanceCount = (long)(dFld + Integer.reverseBytes((int)(-48.898F + i1)));
            Test.instanceCount -= (iMeth() + i);
            Test.fFld += i;
            if (Test.bFld) {
                dArrFld[i - 1] -= i;
            } else if (Test.bFld) {
                for (i19 = 79; i19 > 3; i19 -= 3) {
                    i1 -= i1;
                    i1 = (int)dFld;
                    fArr1[i] *= i;
                    try {
                        i1 = (-113 / i19);
                        i20 = (i1 / i1);
                        Test.iFld = (i19 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i19 + 1] = i20;
                    Test.lArrFld[i19] = Test.instanceCount;
                    for (i21 = i19; i21 < 4; ++i21) {
                        switch ((((i21 >>> 1) % 2) * 5) + 127) {
                        case 130:
                            i20 += Test.iFld;
                            break;
                        case 135:
                            i1 = (int)Test.instanceCount;
                            i20 = i1;
                            Test.iFld = (int)Test.fFld;
                            Test.instanceCount += i21;
                        }
                        Test.fFld += Test.fFld;
                    }
                    switch ((i % 3) + 59) {
                    case 59:
                        i20 += (201 + (i19 * i19));
                        for (i23 = 4; i23 > 1; i23--) {
                            Test.iFld = i;
                            i24 *= -22763;
                            i1 *= i1;
                            Test.instanceCount = i22;
                            i1 = byFld;
                        }
                        break;
                    case 60:
                        Test.byArrFld = Test.byArrFld;
                        break;
                    case 61:
                        Test.iFld %= (int)57.92216;
                        break;
                    default:
                        Test.iFld = i19;
                    }
                }
            } else if (Test.bFld) {
                byFld = (byte)53.41F;
            } else {
                try {
                    iArr2[i - 1] = (-50490 / i22);
                    Test.iFld = (i % 162);
                    i25 = (i25 % -1242768336);
                } catch (ArithmeticException a_e) {}
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
