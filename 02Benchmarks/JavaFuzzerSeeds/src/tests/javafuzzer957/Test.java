package tests.javafuzzer957;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:05:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4545627796808866105L;
    public static volatile short sFld=21457;
    public static boolean bFld=true;
    public static double dFld=37.98297;
    public volatile byte byFld=102;
    public volatile int iArrFld[][]=new int[N][N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, double d) {

        int i7=43, i8=-16896, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -3);

        i6 = i6;
        iArr[(i6 >>> 1) % N] = 22062;
        for (i7 = 5; 320 > i7; i7++) {
            short s1=-21408;
            i6 -= s1;
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d) + i7 + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i5) {

        double d1=-1.1905;
        int i9=51, iArr1[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -47737);
        FuzzerUtils.init(fArr1, -1.890F);

        vMeth1(i5, d1);
        i5 += Test.sFld;
        iArr1[(i9 >>> 1) % N] += i9;
        fArr1 = fArr1;
        vMeth_check_sum += i5 + Double.doubleToLongBits(d1) + i9 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(int i4) {

        byte by=11;
        int i10=10406, i11=-78, i12=24873, i13=25018, iArr2[]=new int[N];
        float f1=2.50F;
        short s2=-4498;
        double d2=-28.31834;

        FuzzerUtils.init(iArr2, -2);

        i4 = by;
        vMeth(243);
        for (i10 = 13; i10 < 392; i10++) {
            switch (((i10 % 2) * 5) + 119) {
            case 125:
                i4 = (int)Test.instanceCount;
                iArr2[i10 + 1] = i11;
                break;
            case 128:
                i4 -= i10;
                break;
            default:
                i11 = i4;
                f1 += (175L + (i10 * i10));
                for (i12 = 1; 4 > i12; i12++) {
                    Test.instanceCount += s2;
                    i11 = i10;
                    d2 += i4;
                    Test.instanceCount <<= i12;
                    f1 += i12;
                }
            }
        }
        long meth_res = i4 + by + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + s2 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=44850, i1=-58954, i2=193, i3=-14, i14=0, i15=-15654, i16=-17;
        float f=-80.111F, f2=78.690F, fArr[]=new float[N];
        short s=-31237, sArr[]=new short[N];
        long l=-20487L, lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 0.93F);
        FuzzerUtils.init(lArr, -6577L);
        FuzzerUtils.init(sArr, (short)11510);

        for (i = 7; i < 204; i++) {
            iArrFld[i - 1][i + 1] = (int)(((--i1) + (Test.instanceCount - i)) + ((i1 * i) & Test.instanceCount));
            if (false) {
                for (i2 = i; i2 < 127; ++i2) {
                    if (bArr[i2 + 1] = ((-(i1 * f)) <= -12)) continue;
                    s = (short)((i3 -= (i1++)) % (((long)((fArr[i2 + 1]--) * (--iArrFld[i2][i - 1]))) | 1));
                }
                i1 = iMeth(i2);
            } else {
                i3 = i1;
                i1 *= (int)f;
                i3 -= (int)Test.instanceCount;
            }
            if (Test.bFld) break;
            i3 -= i3;
            i1 = (int)Test.instanceCount;
            i3 -= i3;
            f = i3;
            i1 = i;
            lArr = lArr;
        }
        fArr[(i3 >>> 1) % N] -= 3708725292L;
        for (f2 = 9; f2 < 288; f2++) {
            i3 += (int)f2;
        }
        i1 = s;
        iArrFld[(i2 >>> 1) % N][(i3 >>> 1) % N] -= 115;
        for (l = 6; l < 269; l++) {
            switch ((int)(l + 2)) {
            case 2:
                i1 = i15;
            case 3:
                if (Test.bFld) break;
                Test.instanceCount = s;
                break;
            case 4:
                iArrFld[(int)(l + 1)][(int)(l + 1)] >>= (int)l;
            case 5:
                Test.instanceCount = i2;
                i15 = i1;
            case 6:
                f += (((l * i3) + f) - Test.instanceCount);
                break;
            case 7:
                Test.instanceCount = (long)Test.dFld;
                break;
            case 8:
                i3 += i1;
                break;
            case 9:
                lArr[(int)(l)] += (long)Test.dFld;
                break;
            case 10:
            case 11:
                Test.instanceCount -= -103;
            case 12:
                i14 += i2;
            case 13:
                f *= f;
                break;
            case 14:
                f *= i15;
            case 15:
                f += 25270;
            case 16:
                i15 += i3;
                break;
            case 17:
                Test.instanceCount = i14;
            case 18:
                lArr[(int)(l + 1)] = l;
                break;
            case 19:
                iArrFld[(int)(l)][(int)(l + 1)] <<= i14;
                break;
            case 20:
                i1 = i15;
                break;
            case 21:
                if (Test.bFld) continue;
                break;
            case 22:
                iArrFld[(int)(l + 1)][(int)(l)] *= (int)1.119476;
                break;
            case 23:
                Test.dFld -= i2;
                break;
            case 24:
                f *= 5932;
            case 25:
                i14 = (int)l;
                break;
            case 26:
            case 27:
                i15 += (int)(((l * l) + l) - Test.instanceCount);
                break;
            case 28:
            case 29:
                i1 += (int)(((l * Test.instanceCount) + l) - Test.instanceCount);
                break;
            case 30:
                iArrFld[(int)(l - 1)][(int)(l + 1)] ^= i3;
                break;
            case 31:
                try {
                    i15 = (65018 / i15);
                    iArrFld[(int)(l)][(int)(l + 1)] = (i1 % -177);
                    iArrFld[(int)(l - 1)][(int)(l)] = (i2 % -8190);
                } catch (ArithmeticException a_e) {}
                break;
            case 32:
                i14 = i14;
                break;
            case 33:
                f -= i15;
                break;
            case 34:
            case 35:
                Test.instanceCount += l;
            case 36:
                i1 += (int)(3726336401561435442L + (l * l));
                break;
            case 37:
                f = -5;
                break;
            case 38:
                i14 <<= i15;
            case 39:
                i15 += 197;
                break;
            case 40:
                i15 -= (int)Test.instanceCount;
                break;
            case 41:
                i14 += i2;
                break;
            case 42:
                byFld += (byte)i;
                break;
            case 43:
                i3 = i15;
                break;
            case 44:
                Test.dFld += 9;
            case 45:
                i1 += (int)(((l * Test.instanceCount) + i1) - l);
                break;
            case 46:
                i1 = (int)Test.instanceCount;
                break;
            case 47:
            case 48:
                i15 += i1;
                break;
            case 49:
                Test.instanceCount += (l + l);
                break;
            case 50:
                i3 += (int)(l + i16);
                break;
            case 51:
                iArrFld[(int)(l - 1)][(int)(l)] += (int)f2;
            case 52:
                i16 |= i3;
            case 53:
                i16 = -223;
                break;
            case 54:
                Test.bFld = Test.bFld;
                break;
            case 55:
                iArrFld[(int)(l)] = iArrFld[(int)(l + 1)];
                break;
            case 56:
                Test.bFld = true;
                break;
            case 57:
                Test.instanceCount += l;
                break;
            case 58:
                i16 = i3;
                break;
            case 59:
                try {
                    iArrFld[(int)(l + 1)][(int)(l)] = (i3 % -98);
                    i3 = (i2 % -159);
                    i1 = (i2 / i3);
                } catch (ArithmeticException a_e) {}
                break;
            case 60:
                byFld = (byte)128L;
                break;
            case 61:
                if (true) break;
                break;
            case 62:
                i16 += (int)l;
                break;
            case 63:
                Test.instanceCount = i1;
                break;
            case 64:
                sArr = sArr;
                break;
            case 65:
                iArrFld[(int)(l + 1)][(int)(l - 1)] *= i3;
                break;
            case 66:
                f = 2;
                break;
            case 67:
                i16 -= -246;
            case 68:
                Test.instanceCount += i3;
                break;
            case 69:
                i16 += (int)(l * l);
                break;
            case 70:
                i16 += (int)(l | i);
                break;
            case 71:
                i1 += (int)(((l * i) + i) - i1);
                break;
            default:
                Test.instanceCount += i2;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
