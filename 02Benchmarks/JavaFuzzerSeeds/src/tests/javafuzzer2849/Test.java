package tests.javafuzzer2849;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:27:28 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=216L;
    public static byte byFld=-127;
    public volatile double dFld=-36.75780;
    public static volatile float fFld=-2.118F;
    public static long lFld=-2132012415L;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -164L);
        FuzzerUtils.init(Test.iArrFld, 208);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i13, int i14) {

        int i15=-65133, i16=11, i17=-33136, i18=-233;

        Test.instanceCount = i14;
        i14 = i14;
        for (i15 = 10; i15 < 210; ++i15) {
            i13 <<= (int)Test.instanceCount;
            i13 = -143;
            Test.iArrFld[i15 + 1][i15] -= i16;
            Test.instanceCount -= Test.instanceCount;
        }
        Test.instanceCount = -75;
        Test.byFld = (byte)i13;
        Test.instanceCount += Test.byFld;
        Test.byFld *= (byte)i15;
        for (i17 = 12; i17 < 230; i17++) {
            i18 += (int)7848188047616586212L;
            if (i17 != 0) {
            }
            i18 -= -13;
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i8, int i9) {

        int i10=-13, i11=-7, i12=-8, i19=165, i20=-6;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 55.112123);

        i10 = 1;
        while (++i10 < 224) {
            for (i11 = 1; i11 < 7; ++i11) {
                dArr = (dArr = (dArr = (dArr = dArr)));
                Test.lArrFld[i10 + 1] += lMeth(i11, i9);
                i19 = 2;
                do {
                    short s1=663;
                    Test.lArrFld[i19 + 1] += Test.instanceCount;
                    i12 = s1;
                    i20 = i10;
                    Test.instanceCount += (i19 * i19);
                    dArr[i19 + 1] = 14627;
                    i9 += (int)Test.instanceCount;
                    Test.byFld = Test.byFld;
                    Test.instanceCount = i9;
                } while ((i19 -= 3) > 0);
                i20 &= i19;
                i12 -= 13;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(float f, long l, long l1) {

        int i3=37290, i4=-8, i5=-7906, i6=181, i7=-7;
        float f1=0.862F;
        double d=-6.98501;
        short s2=-10797;

        l *= ((Test.byFld + (i3 + i3)) - (-(i3--)));
        i3 |= Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N];
        i4 = 1;
        do {
            for (i5 = i4; i5 < 8; ++i5) {
                for (f1 = 1; f1 < 1; f1++) {
                    switch ((i5 % 3) + 80) {
                    case 80:
                        i3 -= (-(i3 - (++i7)));
                        i3 = (int)((-(++Test.byFld)) - (++f));
                        break;
                    case 81:
                        d += (i7--);
                        vMeth1(i4, i5);
                        break;
                    case 82:
                        i6 = -8;
                        s2 = (short)i3;
                        l >>= i4;
                        break;
                    }
                    if (i3 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + l + l1 + i3 + i4 + i5 + i6 +
                            Float.floatToIntBits(f1) + i7 + Double.doubleToLongBits(d) + s2;
                        return;
                    }
                    i6 *= i4;
                }
            }
        } while (++i4 < 213);
        vMeth_check_sum += Float.floatToIntBits(f) + l + l1 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 +
            Double.doubleToLongBits(d) + s2;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=-204, i2=-2, i21=-19014, i22=-8, i23=-31388, i24=229, i25=0, i26=183, iArr[][]=new int[N][N];
        short s=13700, s3=13577;
        double d1=0.99392;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(fArr, 0.937F);

        i += (int)(((Test.instanceCount--) - (--Test.instanceCount)) - iArr[(i >>> 1) % N][(i >>> 1) % N]);
        for (i1 = 6; i1 < 306; ++i1) {
            Test.lArrFld[i1 - 1] = (i2++);
            if ((-((i - Test.instanceCount) - (--Test.byFld))) > (dFld - (iArr[i1 - 1][i1 + 1] - (s - i1)))) break;
            vMeth(Test.fFld, Test.instanceCount, 33760L);
            iArr[i1 + 1][i1 + 1] += i2;
            for (i21 = i1; i21 < 84; i21++) {
                Test.iArrFld[i1 + 1] = FuzzerUtils.int1array(N, (int)-45873);
                i <<= i2;
                for (i23 = 1; i23 < 1; i23++) {
                    dArrFld[i1 - 1] -= i2;
                    i |= i1;
                    Test.iArrFld[i1 + 1][i23] += (int)Test.instanceCount;
                    i24 += i2;
                }
                if (false) break;
                i25 = 1;
                do {
                    i += (-58369 + (i25 * i25));
                    fArr[i25 + 1] -= 109.755F;
                    i22 -= i24;
                    s3 -= (short)Test.instanceCount;
                } while (++i25 < 1);
                i24 += (((i21 * i) + i21) - i2);
                for (d1 = i1; d1 < 1; d1++) {
                    Test.instanceCount *= i23;
                    if (b) continue;
                    i26 = i22;
                    i24 |= Test.byFld;
                    if (b) continue;
                    i24 += (int)((long)d1 | Test.lFld);
                    i2 += (-9 + (d1 * d1));
                }
                try {
                    i26 = (-171 % i26);
                    i22 = (-1704389741 / i1);
                    iArr[i1][i1] = (-189175883 % i22);
                } catch (ArithmeticException a_e) {}
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
