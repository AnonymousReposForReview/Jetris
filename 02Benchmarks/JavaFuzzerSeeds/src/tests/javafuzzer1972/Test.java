package tests.javafuzzer1972;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:54:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-235L;
    public static volatile float fFld=-117.831F;
    public static int iFld=0;
    public byte byFld=-19;
    public static volatile long lArrFld[]=new long[N];
    public static volatile long lArrFld1[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -220L);
        FuzzerUtils.init(Test.lArrFld1, 2375588472393718470L);
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-13577, i4=129, i5=-7, i6=61969, i7=11, i8=-5, i9=59, iArr1[]=new int[N];
        float f1=95.153F, f2=-111.85F;
        double d=-64.41189;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 24494);

        i3 = 1;
        do {
            for (i4 = 6; 1 < i4; i4--) {
                for (f1 = 1; f1 < 2; f1++) {
                    Test.lArrFld1 = Test.lArrFld1;
                    f2 *= (float)d;
                    i6 = i4;
                    if (b1) continue;
                    i7 &= (int)8224632015784590790L;
                }
                Test.instanceCount += (((i4 * i8) + i6) - i9);
                iArr1[i4] -= (int)Test.instanceCount;
                d -= i7;
                Test.instanceCount += i4;
                Test.instanceCount += i4;
                i9 -= i4;
            }
            b1 = b1;
        } while (++i3 < 260);
        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(float f, int i) {

        int i1=11713, i2=25, i10=0, i11=191, i12=-3, iArr[]=new int[N];
        boolean b=false;
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 50134);
        FuzzerUtils.init(dArr, 1.122050);
        FuzzerUtils.init(fArr, 65.437F);

        iArr[(i >>> 1) % N] = (int)dArr[(i >>> 1) % N];
        i1 = 1;
        while (++i1 < 203) {
            i2 = 1;
            do {
                byte by=78;
                switch (((i2 % 5) * 5) + 8) {
                case 13:
                case 16:
                    fArr[i1 + 1] /= ((-(Math.min(Test.instanceCount, Test.instanceCount) * (by + i1))) | 1);
                    b = (Math.max(Test.lArrFld[i1 + 1], ++Test.instanceCount) >= i);
                    vMeth2();
                    break;
                case 31:
                case 19:
                    for (i10 = 1; i10 < 1; i10++) {
                        if (b) continue;
                        iArr = iArr;
                        iArr[i1 - 1] += 8;
                        Test.instanceCount = i;
                        i11 -= i11;
                        by += (byte)i10;
                        b = b;
                    }
                    break;
                case 29:
                    i = i12;
                    break;
                default:
                    fArr[i2 - 1] -= Test.instanceCount;
                }
            } while (++i2 < 8);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + (b ? 1 : 0) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {

        int i13=-39411, i14=216, i15=-6, i16=-53514, i17=191, i18=8, i19=-39072, i20=56630;
        byte by1=-86;
        boolean b2=true;

        vMeth1(Test.fFld, i13);
        by1 -= (byte)Test.instanceCount;
        i13 |= i13;
        for (i14 = 5; i14 < 332; i14++) {
            i15 -= (int)Test.instanceCount;
        }
        for (i16 = 1; i16 < 313; ++i16) {
            Test.iArrFld[(i14 >>> 1) % N] += (int)Test.fFld;
            i18 = 1;
            while (++i18 < 5) {
                for (i19 = i16; i19 < 1; i19++) {
                    short s=1598;
                    i15 += (i19 - i13);
                    i20 >>= 25940;
                    Test.iArrFld[i18 + 1] = i20;
                    if (b2) {
                        i13 = (int)Test.instanceCount;
                        i15 = -30216;
                    } else {
                        i20 = s;
                    }
                }
            }
        }
        vMeth_check_sum += l + i13 + by1 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i21=-42656, i22=7, i23=-19283, i24=-40427, i25=150, i26=27060, i27=-14, i28=0, i29=-25, i30=-58410, i31=528;
        boolean b3=true, b4=true;

        vMeth(Test.instanceCount);
        Test.iFld <<= Test.iFld;
        for (i21 = 10; i21 < 223; i21++) {
            Test.iFld ^= i22;
            i23 = 1;
            do {
                b3 = b3;
                Test.instanceCount = 11;
                Test.instanceCount += (i23 - i23);
                for (i24 = 1; i24 < 1; i24++) {
                    Test.iFld += (((i24 * i21) + i21) - i25);
                    i22 = -74;
                    i25 += (-6 + (i24 * i24));
                    b3 = false;
                }
                for (i26 = 1; i26 < 1; i26++) {
                    i25 *= (int)Test.instanceCount;
                    i22 += i26;
                    Test.iArrFld[i23] = (int)Test.instanceCount;
                    i25 %= -185;
                    Test.instanceCount += (i26 - Test.fFld);
                    i22 >>= 12;
                }
                i22 = i22;
            } while (++i23 < 118);
            Test.iFld = i24;
            bArrFld[i21] = b3;
        }
        for (i28 = 3; i28 < 281; ++i28) {
            for (i30 = 3; i30 < 90; i30++) {
                i27 += (i30 + i22);
                byFld = (byte)i28;
                i29 *= i27;
                i25 <<= i26;
                b4 = false;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
