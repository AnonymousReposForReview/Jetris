package tests.javafuzzer484;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:33:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public int iFld=-24558;
    public static float fFld=-27.1001F;
    public static byte byFld=8;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.103035);
        FuzzerUtils.init(Test.lArrFld, -13L);
        FuzzerUtils.init(Test.fArrFld, 1.591F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i5) {

        double d1=2.126272;
        int i6=77, i7=-14, i8=57, i9=-7, iArr1[]=new int[N];
        byte byArr[][]=new byte[N][N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(byArr, (byte)-10);
        FuzzerUtils.init(iArr1, -174);
        FuzzerUtils.init(fArr1, -7.359F);

        Test.fFld -= (float)d1;
        Test.instanceCount = i5;
        Test.fFld += Test.byFld;
        for (double d2 : Test.dArrFld) {
            if (Test.bFld) {
                for (i6 = 1; i6 < 4; ++i6) {
                    for (i8 = 1; i8 < 2; ++i8) {
                        Test.lArrFld[i8 - 1] = Test.instanceCount;
                        byArr[i6][(i5 >>> 1) % N] >>= (byte)-1330;
                        i7 += (i8 | Test.instanceCount);
                        switch (((i8 >>> 1) % 2) + 43) {
                        case 43:
                            Test.fFld -= -30581L;
                            i9 -= (int)Test.instanceCount;
                            iArr1[i6] >>= i8;
                            Test.fFld -= Test.fFld;
                            break;
                        case 44:
                            fArr1[i8 - 1][i6 + 1] -= -16149;
                            break;
                        }
                    }
                }
            } else {
                i7 += i9;
            }
        }
        vMeth1_check_sum += s + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static long lMeth(boolean b, int i3, int i4) {

        double d=-1.32119;
        short s1=-31254;
        int i10=10089, i11=-93, i12=-26585, iArr2[][]=new int[N][N];

        FuzzerUtils.init(iArr2, 32160);

        d -= ((--i4) - (-i3));
        vMeth1(s1, i3);
        i3 += (int)30630L;
        i10 = 1;
        while (++i10 < 383) {
            switch ((((-11 >>> 1) % 2) * 5) + 1) {
            case 3:
                for (i11 = 1; i11 < 4; i11++) {
                    Test.instanceCount <<= i10;
                    if (i11 != 0) {
                    }
                    try {
                        iArr2[i11 + 1][i11] = (iArr2[i10 + 1][i11 + 1] / i3);
                        i4 = (i3 % i11);
                        i12 = (i12 % 245);
                    } catch (ArithmeticException a_e) {}
                    i4 <<= i4;
                    if (Test.bFld) break;
                    i12 += (((i11 * s1) + i10) - i10);
                    if (i10 != 0) {
                    }
                    iArr2[i11 - 1][i11] -= i10;
                    Test.fFld += i11;
                }
            case 9:
                d *= 241;
                break;
            default:
                Test.fArrFld[i10 - 1] = i11;
            }
        }
        long meth_res = (b ? 1 : 0) + i3 + i4 + Double.doubleToLongBits(d) + s1 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, int i1, long l) {

        double d3=0.36067, dArr[]=new double[N];
        int i13=9, i14=8, i15=35, i16=3, i17=157, iArr[]=new int[N], iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr, 60804);
        FuzzerUtils.init(dArr, 1.66979);
        FuzzerUtils.init(iArr3, 28838);

        for (int i2 : iArr) {
            dArr[(i2 >>> 1) % N] += (--i2);
            i1 += (int)l;
            Test.fFld -= i1;
            i1 >>= i2;
            l *= (((-10 - lMeth(Test.bFld, i, i2)) + Test.byFld) - i2);
            iArr3 = iArr3;
        }
        for (d3 = 1; d3 < 146; ++d3) {
            if (Test.bFld) break;
            i -= (int)Test.fFld;
            for (i14 = 1; 11 > i14; ++i14) {
                for (i16 = 1; i16 < 2; i16++) {
                    if (false) continue;
                    Test.instanceCount = i13;
                    try {
                        i = (55232 / i15);
                        iArr3[i16 - 1][i14 + 1] = (-118 % i17);
                        iArr[i16 - 1] = (-27981 / iArr3[i14 - 1][(int)(d3 + 1)]);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i + i1 + l + Double.doubleToLongBits(d3) + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i18=11, i19=39139, i20=208, i21=26590, i22=-3, i23=-46, i24=13, iArr4[]=new int[N];
        short s2=-5531;
        double d4=75.37550;
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -2.476F);
        FuzzerUtils.init(iArr4, -103);
        FuzzerUtils.init(bArr, true);

        fArr[(iFld >>> 1) % N] = iFld;
        vMeth(iFld, 100, -236L);
        i18 = 1;
        while (++i18 < 190) {
            for (i19 = 5; i19 < 132; ++i19) {
                switch ((i18 % 1) + 26) {
                case 26:
                    iArr4[i18 + 1] = i20;
                    i20 = i19;
                    Test.fFld -= -57;
                }
                Test.instanceCount = 1462;
                Test.lArrFld[i19] += Test.instanceCount;
            }
            Test.lArrFld[i18 + 1] -= i19;
            iArr4[i18 - 1] = i19;
            iFld = iFld;
            for (i21 = 3; i21 < 132; ++i21) {
                iFld += (((i21 * i22) + iFld) - Test.instanceCount);
                iFld += (-31405 + (i21 * i21));
                i22 -= s2;
                bArr[i18] = Test.bFld;
                Test.instanceCount += (i21 - iFld);
                for (i23 = 1; i23 < 2; ++i23) {
                    i22 += (int)d4;
                    i20 = i21;
                    Test.fFld += i23;
                    iFld = (int)Test.instanceCount;
                    i20 += i23;
                    i20 = (int)2196944388640202085L;
                    i24 += (-47 + (i23 * i23));
                    if (Test.bFld) break;
                    Test.fFld *= i20;
                    i22 = (int)Test.instanceCount;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
