package tests.javafuzzer3385;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:13:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4132L;
    public static int iFld=2;
    public static int iFld1=39563;
    public static volatile boolean bFld=true;
    public static byte byFld=-73;
    public static double dFld=-17.8779;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        boolean b=false;
        int i6=119, i7=-13, iArr[]=new int[N];
        short s=-28446;
        float f1=-32.657F, f2=109.443F, fArr[]=new float[N];
        byte by=92;

        FuzzerUtils.init(iArr, 19186);
        FuzzerUtils.init(fArr, -2.108F);

        switch ((((Test.iFld >>> 1) % 10) * 5) + 23) {
        case 28:
            Test.iFld *= Test.iFld;
            Test.instanceCount <<= Test.iFld;
            for (int i5 : iArr) {
                iArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
                iArr[(i5 >>> 1) % N] = i5;
                b = b;
                fArr[(i5 >>> 1) % N] = 50;
                iArr[(Test.iFld >>> 1) % N] = Test.iFld;
            }
        case 38:
            iArr[(44604 >>> 1) % N] *= Test.iFld;
            Test.instanceCount += Test.iFld;
            break;
        case 68:
            for (i6 = 2; 262 > i6; i6++) {
                Test.instanceCount -= s;
                Test.iFld += (int)7592943809997139846L;
                i7 ^= (int)Test.instanceCount;
            }
            break;
        case 69:
            Test.iFld1 &= -85;
            break;
        case 53:
            Test.iFld1 >>= 80;
        case 24:
            f1 = -7274731407991462143L;
        case 65:
            Test.iFld1 -= by;
        case 35:
            Test.instanceCount += (long)f2;
            break;
        case 51:
            by *= (byte)8;
            break;
        case 33:
            iArr = iArr;
            break;
        default:
            Test.iFld1 = (int)-28249L;
        }
        vMeth_check_sum += (b ? 1 : 0) + i6 + i7 + s + Float.floatToIntBits(f1) + by + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1() {

        int i8=31340, i9=38791, i10=130, i11=-32432, i12=13, iArr1[]=new int[N];
        float f3=-44.145F;
        short s1=32196;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -114);
        FuzzerUtils.init(lArr, -1783L);

        vMeth();
        Test.iFld >>= (int)Test.instanceCount;
        for (i8 = 18; i8 < 341; i8++) {
            if (Test.bFld) break;
            i9 = -2;
            i9 += 93;
            for (i10 = 1; i10 < 5; i10++) {
                switch ((((i10 >>> 1) % 2) * 5) + 16) {
                case 24:
                    i12 = 2;
                    while (--i12 > 0) {
                        int i13=-20647;
                        iArr1[i8 + 1] >>= Test.iFld1;
                        i9 >>= (int)Test.instanceCount;
                        i9 *= (int)f3;
                        Test.iFld1 <<= i10;
                        iArr1[i10] += i13;
                    }
                    Test.iFld = i8;
                case 20:
                    lArr[i8 + 1] = s1;
                    break;
                default:
                    iArr1[i10 - 1] *= 49763;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) + s1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, int i4) {

        int i14=-49760, i15=-203, i17=-200, i18=0, iArr2[]=new int[N];
        byte by1=-45;
        short s2=-28687;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 40L);
        FuzzerUtils.init(iArr2, 142);

        iMeth1();
        for (i14 = 6; i14 < 349; i14++) {
            f *= Test.instanceCount;
            lArr1[i14 - 1] += 209;
            by1 >>= (byte)Test.iFld;
            i15 = i14;
            i15 += (i14 * Test.iFld1);
            f -= i4;
            Test.iFld = (int)Test.instanceCount;
            for (i17 = 1; 5 > i17; ++i17) {
                if (Test.bFld) {
                    i4 += i17;
                } else {
                    Test.iFld += Test.iFld1;
                    Test.instanceCount += (i17 | i18);
                    s2 += (short)(i17 * i17);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i4 + i14 + i15 + by1 + i17 + i18 + s2 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-115, i1=135, i2=34545, i3=5847, i19=-204, i20=23968, i21=-4035, i22=7, i23=-216, iArr3[]=new int[N];
        float f4=1.187F, fArr1[][]=new float[N][N];
        short s3=-14849;

        FuzzerUtils.init(iArr3, -61354);
        FuzzerUtils.init(fArr1, -1.662F);

        for (i = 6; i < 265; i++) {
            for (i2 = i; i2 < 97; i2++) {
                switch (((((++i1) >>> 1) % 10) * 5) + 34) {
                case 76:
                    Test.instanceCount -= iMeth(f4, i2);
                    break;
                case 57:
                    Test.instanceCount += (i2 + i);
                    switch (((45 >>> 1) % 2) + 25) {
                    case 25:
                        if (Test.bFld) continue;
                        for (i19 = 1; i19 < 1; i19++) {
                            Test.instanceCount += i19;
                            Test.iFld >>= -131;
                            lArrFld[i2] |= i3;
                        }
                    case 26:
                        switch (((i3 >>> 1) % 4) + 68) {
                        case 68:
                        case 69:
                            if (Test.bFld) {
                                switch ((i % 4) + 79) {
                                case 79:
                                    i21 = 1;
                                    while (++i21 < 1) {
                                        f4 += (((i21 * f4) + Test.instanceCount) - i21);
                                        i20 += (((i21 * i2) + i20) - s3);
                                        f4 += i19;
                                        if (false) continue;
                                    }
                                    for (i22 = 1; i22 < 1; ++i22) {
                                        Test.instanceCount *= Test.iFld;
                                        switch (((i2 >>> 1) % 6) + 106) {
                                        case 106:
                                            if (Test.bFld) continue;
                                            i1 += (((i22 * i23) + Test.instanceCount) - Test.instanceCount);
                                            i3 = i22;
                                            i23 += (-40714 + (i22 * i22));
                                            break;
                                        case 107:
                                            i3 += Test.byFld;
                                            i1 += i2;
                                            f4 -= -52984L;
                                        case 108:
                                            lArrFld[i] *= Test.iFld;
                                            break;
                                        case 109:
                                            i1 -= Test.byFld;
                                            break;
                                        case 110:
                                            Test.byFld += (byte)(90L + (i22 * i22));
                                        case 111:
                                            Test.iFld += (i22 ^ i22);
                                            break;
                                        default:
                                            Test.instanceCount += i22;
                                        }
                                    }
                                    break;
                                case 80:
                                    Test.dFld -= Test.instanceCount;
                                case 81:
                                    Test.instanceCount += (((i2 * i21) + Test.instanceCount) - Test.instanceCount);
                                case 82:
                                    Test.instanceCount &= i;
                                    break;
                                }
                            } else if (true) {
                                Test.bFld = Test.bFld;
                            } else if (Test.bFld) {
                                iArr3[i2] *= i20;
                            }
                        case 70:
                            Test.byFld = (byte)i22;
                            break;
                        case 71:
                            i20 <<= i21;
                        default:
                            Test.iFld = Test.iFld1;
                        }
                        break;
                    }
                case 78:
                    i3 += (((i2 * Test.instanceCount) + f4) - i19);
                case 80:
                    i20 += (27915 + (i2 * i2));
                    break;
                case 37:
                    f4 = i2;
                    break;
                case 54:
                    iArr3[i - 1] = i23;
                    break;
                case 79:
                    Test.iFld = Test.byFld;
                case 62:
                    fArr1[i2 - 1][i2] -= Test.instanceCount;
                    break;
                case 44:
                    f4 -= Test.instanceCount;
                case 35:
                    Test.byFld = (byte)Test.instanceCount;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
