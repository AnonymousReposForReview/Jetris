package tests.javafuzzer1422;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:14:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4957313526514677990L;
    public static float fFld=-67.966F;
    public static volatile int iFld=-5;
    public static boolean bFld=true;
    public static volatile int iFld1=6726;
    public double dFld=-1.83527;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i9=-27758, i10=35321, i11=-18947, i12=86;
        double d1=-78.94070;
        boolean b=false;
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, 1.786F);
        FuzzerUtils.init(byArr, (byte)9);

        if (b) {
            Test.instanceCount = Test.iFld;
            for (i9 = 5; 149 > i9; i9 += 3) {
                i10 *= (int)d1;
                Test.instanceCount &= Test.instanceCount;
                Test.instanceCount += (i9 - Test.iFld);
                if (b) {
                    fArr[i9 + 1] += Test.fFld;
                    Test.iArrFld[i9 + 1] -= i10;
                    i10 += (((i9 * Test.iFld) + i9) - i10);
                    Test.iFld = -192;
                } else if (b) {
                    for (i11 = 1; i11 < 32; ++i11) {
                        byArr = byArr;
                        i12 >>= Test.iFld;
                        i10 = i11;
                    }
                } else if (b) {
                    if (b) continue;
                } else {
                    d1 += i9;
                }
            }
        }
        long meth_res = i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i8, long l) {

        int i13=-32, i14=235, i15=-1, i16=1, i17=29521, i18=251;
        double d2=109.31112;
        byte by=127;
        short s=-13564;
        float fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, -1.240F);
        FuzzerUtils.init(lArr, -974142132L);

        Test.fFld = Float.intBitsToFloat((int)(Test.fFld + lMeth()));
        for (i13 = 6; i13 < 298; ++i13) {
            fArr1[i13 - 1] += (float)d2;
            i14 += i13;
        }
        Test.iFld *= Test.iFld;
        lArr[(-4 >>> 1) % N] >>>= i8;
        for (i15 = 178; i15 > 3; i15--) {
            l = i14;
            for (i17 = 1; i17 < 9; ++i17) {
                i16 += by;
                s += (short)i18;
                Test.iFld += (int)Test.fFld;
            }
            Test.iFld -= i17;
            i16 = (int)l;
        }
        lArr[(Test.iFld >>> 1) % N] = s;
        vMeth_check_sum += i8 + l + i13 + i14 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + by + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth(int i1, double d, int i2) {

        int i3=2, i4=-15588, i5=50836, i6=12, i7=-54984;
        float f=57.519F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -89.128453);

        for (i3 = 4; i3 < 393; ++i3) {
            f %= (((long)(f--)) | 1);
            for (i5 = 4; i5 > i3; --i5) {
                if (true) {
                    i7 = 1;
                    do {
                        try {
                            i6 = (12961 / i5);
                            i4 = (i1 % i4);
                            i6 = (173494708 / Test.iArrFld[i7 + 1]);
                        } catch (ArithmeticException a_e) {}
                    } while (++i7 < 1);
                    vMeth(i3, -12834L);
                } else if (Test.bFld) {
                    switch ((i3 % 6) + 31) {
                    case 31:
                        Test.iFld += (int)Test.instanceCount;
                        i4 += (i5 | Test.iFld);
                        break;
                    case 32:
                        i6 %= (int)(i4 | 1);
                        dArr = FuzzerUtils.double1array(N, (double)-1.3463);
                    case 33:
                        Test.instanceCount = i4;
                        i4 += (i5 ^ Test.iFld);
                        Test.instanceCount = -7;
                    case 34:
                        f += (((i5 * i1) + i7) - i6);
                        break;
                    case 35:
                        if (i2 != 0) {
                        }
                    case 36:
                        f += i6;
                        break;
                    }
                } else {
                    d = -27664;
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-148, i19=39581, i20=5, i21=8, i22=-95, i23=48625, i24=61037, i25=6993, i26=63;
        double d3=96.110003;
        short s1=-17652;
        long l1=-856726987L;
        byte by1=-88;

        Test.instanceCount += i;
        i = (sMeth(Test.iFld, -2.95465, Test.iFld) - i);
        Test.iFld = Test.iFld;
        for (d3 = 12; d3 < 234; ++d3) {
            i += Test.iFld;
            Test.instanceCount <<= i;
            Test.iArrFld[(int)(d3 - 1)] <<= i19;
        }
        i -= Test.iFld;
        i19 = Test.iFld1;
        for (i20 = 2; i20 < 389; i20++) {
            s1 *= (short)Test.fFld;
            Test.iFld ^= -239;
            i += i20;
            Test.instanceCount += (((i20 * Test.fFld) + i21) - Test.instanceCount);
            for (i22 = 3; i22 < 65; ++i22) {
                Test.fFld = -32712;
                i21 -= -9;
                i23 = Test.iFld;
                dFld += i22;
            }
        }
        i21 *= i19;
        for (l1 = 5; l1 < 125; ++l1) {
            i = (int)Test.instanceCount;
            if (Test.bFld) {
                by1 += (byte)-42;
                for (i25 = 8; i25 < 209; i25++) {
                    Test.instanceCount -= (long)Test.fFld;
                    i21 = i;
                }
                Test.iFld = by1;
            } else if (Test.bFld) {
                i26 += i20;
                try {
                    i19 = (Test.iArrFld[(int)(l1 - 1)] % Test.iArrFld[(int)(l1 + 1)]);
                    i21 = (i20 % -50310);
                    i26 = (Test.iFld1 / Test.iFld1);
                } catch (ArithmeticException a_e) {}
            } else if (false) {
                i19 -= (int)d3;
            } else {
                Test.iFld1 = Test.iFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
