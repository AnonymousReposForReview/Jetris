package tests.javafuzzer956;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:05:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3666865840751527492L;
    public static volatile float fFld=-1.283F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 186);
        FuzzerUtils.init(Test.dArrFld, -108.109401);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=215, i5=-10, i6=19246, i7=-2, i8=-36451, i9=160, i10=-58916;
        double d=0.121753;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-6080);
        FuzzerUtils.init(lArr, -24L);

        Test.iArrFld[(i4 >>> 1) % N] <<= (int)Test.instanceCount;
        for (i5 = 171; i5 > 3; i5--) {
            i4 = i5;
            for (i7 = 1; i7 < 9; ++i7) {
                i4 += (-14 + (i7 * i7));
                for (i9 = 2; i9 > 1; i9 -= 2) {
                    boolean b=true;
                    if (b) {
                        i10 += (((i9 * i8) + Test.fFld) - i4);
                        sArr[(i10 >>> 1) % N] = (short)-12;
                        i8 -= (int)d;
                        i6 |= i4;
                    } else if (b) {
                        i4 -= -43859;
                        i10 &= i8;
                        Test.instanceCount += (long)d;
                    } else {
                        lArr[i5 + 1] ^= i7;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, long l) {

        long l1=126L;
        int i3=9, i11=5, i12=13906, i13=-12, i14=13;
        byte by1=-2, byArr[]=new byte[N];
        short s=-26152;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-10);
        FuzzerUtils.init(dArr, 61.26277);

        l += -15042;
        for (l1 = 5; 243 > l1; l1++) {
            byArr[(int)(l1)] *= (byte)iMeth();
            for (i11 = 1; i11 < 7; ++i11) {
                by1 >>= (byte)l;
                s = (short)-61199;
                if (b1) {
                    for (i13 = 1; i13 < 2; i13++) {
                        i14 = 12;
                        Test.iArrFld[i13] = i11;
                    }
                    switch ((int)(((l1 % 3) * 5) + 64)) {
                    case 67:
                        if (i11 != 0) {
                            vMeth_check_sum += i1 + i2 + l + l1 + i3 + i11 + i12 + by1 + s + i13 + i14 + (b1 ? 1 : 0) +
                                FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 79:
                        i2 = i2;
                        s -= (short)i3;
                        i3 >>= (int)7977257970791657632L;
                    case 66:
                        i2 <<= (int)l;
                    }
                } else {
                    dArr[(int)(l1 + 1)] = -206;
                    vMeth_check_sum += i1 + i2 + l + l1 + i3 + i11 + i12 + by1 + s + i13 + i14 + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + l + l1 + i3 + i11 + i12 + by1 + s + i13 + i14 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(byte by, int i) {


        vMeth(i, i, Test.instanceCount);
        vSmallMeth_check_sum += by + i;
    }

    public void mainTest(String[] strArr1) {

        byte by2=-27, by3=75;
        int i15=17355, i16=70, i17=-200, i18=-14, i19=-10587, i20=-130, i21=8, i22=1;
        short s1=24916, sArr1[]=new short[N];
        float f=-2.520F;
        double d1=0.101048;

        FuzzerUtils.init(sArr1, (short)9022);

        for (int smallinvoc=0; smallinvoc<324; smallinvoc++) vSmallMeth(by2, i15);
        Test.fFld += Test.fFld;
        for (i16 = 20; i16 < 352; ++i16) {
            switch (((i17 >>> 1) % 5) + 51) {
            case 51:
                for (i18 = 2; i18 < 76; ++i18) {
                    Test.fFld -= s1;
                    for (f = 1; f < 2; f++) {
                        i19 = i19;
                        Test.dArrFld[i16] %= -8;
                        Test.instanceCount <<= 57701;
                        i15 += (int)(f * i16);
                        Test.instanceCount = by2;
                        i15 = (int)12L;
                        sArr1[(int)(f)] >>= (short)i20;
                        Test.fFld *= by3;
                        i19 += (int)f;
                        if (Test.bFld) continue;
                    }
                    Test.instanceCount += (i18 * i18);
                }
            case 52:
                i17 = i18;
                for (i21 = 76; i21 > 3; i21--) {
                    i20 >>= (int)-1799330065L;
                    i15 += (i21 ^ i20);
                    i17 += i21;
                    by2 = (byte)Test.instanceCount;
                    Test.iArrFld[i16 - 1] <<= (int)Test.instanceCount;
                    if (Test.bFld) break;
                }
                lArrFld[i16 - 1] <<= i19;
                i19 += (i16 ^ i16);
                break;
            case 53:
                d1 -= 200;
                break;
            case 54:
                Test.instanceCount += (-11 + (i16 * i16));
                break;
            case 55:
                Test.instanceCount *= i17;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
