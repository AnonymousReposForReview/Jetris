package tests.javafuzzer759;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static int iFld=-95;
    public static boolean bFld=false;
    public static short sFld=1138;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, float f1, float f2) {

        int i3=-2, i4=11926;

        for (i3 = 7; i3 < 122; ++i3) {
            Test.instanceCount += -60;
            if (Test.bFld) continue;
        }
        f2 = Test.instanceCount;
        i4 <<= 61061;
        vMeth1_check_sum += s + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i3 + i4;
    }

    public int iMeth(double d, long l1) {

        float f3=-2.527F;
        int i5=2, i6=57, i7=-47410, i8=12, i9=-37545, i10=-240;
        long l2=-110L;
        byte by=-21;

        vMeth1(Test.sFld, f3, f3);
        i5 = 1;
        while (++i5 < 360) {
            Test.instanceCount += (-9479L + (i5 * i5));
        }
        for (l2 = 8; l2 < 148; l2++) {
            for (i7 = 1; 11 > i7; ++i7) {
                for (i9 = 1; i9 < 2; ++i9) {
                    Test.iArrFld[i7 - 1] = 50708;
                    if (Test.bFld) continue;
                    l1 >>= l1;
                    i10 = (int)-1.83460;
                    i10 *= (int)-2.908F;
                    i8 += i9;
                    l1 += by;
                    Test.iArrFld[i7 + 1] *= (int)-2.195F;
                }
                i10 = 11870;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l1 + Float.floatToIntBits(f3) + i5 + l2 + i6 + i7 + i8 + i9 + i10
            + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        int i1=8, i2=-8, i11=7, i12=0;
        double d1=2.88503;
        float f4=-123.288F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);

        for (long l : lArr) {
            for (i1 = 1; i1 < 4; ++i1) {
                Test.iFld += (i1 * i1);
                Test.iFld = (((i2 + i1) - i2) - Test.iFld);
                Test.iArrFld[i1 - 1] = iMeth(d1, Test.instanceCount);
                switch ((i1 % 1) + 44) {
                case 44:
                    Test.iFld += (i1 * i1);
                    i *= 42378;
                    i2 = i2;
                }
                f4 += f4;
            }
            for (i11 = 1; i11 < 4; ++i11) {
                Test.iFld -= i1;
                Test.iArrFld[i11 - 1] += (int)l;
                i = (int)-7L;
                if (Test.bFld) break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f4) + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=2.252F;
        int i14=46690, i15=9, i16=-28720, i17=50884, i18=-63, i19=7, i20=0;
        double d2=88.103060;
        byte by1=-63;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -217L);

        Test.iFld += (int)(f--);
        vMeth(Test.iFld);
        for (int i13 : Test.iArrFld) {
            Test.iArrFld = Test.iArrFld;
            Test.iFld -= Test.iFld;
            for (i14 = 2; i14 < 63; i14++) {
                try {
                    i15 = (Test.iFld / 89);
                    i13 = (i15 / Test.iFld);
                    Test.iFld = (Test.iArrFld[i14 - 1] % -244);
                } catch (ArithmeticException a_e) {}
                switch ((i14 % 2) + 13) {
                case 13:
                    d2 += i16;
                    for (i17 = 2; i17 > 1; --i17) {
                        i16 = 73;
                        i16 &= Test.sFld;
                        i18 = Test.iFld;
                        Test.iArrFld[i17 + 1] *= i16;
                        lArr1[i14 - 1] -= i15;
                        try {
                            i15 = (Test.iArrFld[i14 + 1] / -176);
                            Test.iArrFld[i14 + 1] = (Test.iArrFld[i17 + 1] % i15);
                            Test.iFld = (-38 / i16);
                        } catch (ArithmeticException a_e) {}
                        i15 += (((i17 * Test.sFld) + i15) - i16);
                    }
                    Test.instanceCount /= (i13 | 1);
                    for (i19 = 1; 2 > i19; ++i19) {
                        Test.iFld &= i18;
                        Test.instanceCount %= ((long)(f) | 1);
                        if (Test.bFld) break;
                        by1 = (byte)Test.sFld;
                        Test.instanceCount >>= i18;
                        Test.instanceCount += (long)95.813F;
                        i15 = by1;
                        if (Test.bFld) {
                            Test.instanceCount += i19;
                            i16 += i14;
                        }
                        fArrFld[i19] /= (i17 | 1);
                    }
                case 14:
                    fArrFld[i14 - 1] += Test.instanceCount;
                default:
                    i13 = i16;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
