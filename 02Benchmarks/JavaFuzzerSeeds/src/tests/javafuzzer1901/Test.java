package tests.javafuzzer1901;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6157227185404114654L;
    public static short sFld=9455;
    public static byte byFld=102;
    public volatile float fFld=2.246F;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4603);
        FuzzerUtils.init(Test.fArrFld, 125.85F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i7, int i8) {

        double d=-123.26063, d1=2.43226;
        int i9=-14, i10=-10;
        float f2=0.186F, fArr[]=new float[N];
        byte by=40;

        FuzzerUtils.init(fArr, 97.436F);

        fArr[(i7 >>> 1) % N] = i8;
        d = 1;
        do {
            Test.instanceCount += (-141 + (d * d));
            i8 -= (int)d;
            Test.instanceCount += i7;
            i9 = 1;
            do {
                i10 = 1;
                while (++i10 < 1) {
                    i7 = (int)f2;
                    Test.iArrFld = Test.iArrFld;
                    by += (byte)(-11 + (i10 * i10));
                    i8 += (int)-59.92144;
                    i8 *= i10;
                    d1 += f2;
                    d1 = Test.instanceCount;
                    Test.instanceCount -= 13;
                }
            } while (++i9 < 8);
        } while (++d < 195);
        long meth_res = i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + Float.floatToIntBits(f2) + by +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static float fMeth(float f1) {

        long l=4L;
        int i1=-6, i2=-174, i3=-11, i4=-12, i5=13, i6=-13, iArr[]=new int[N];
        boolean b=true;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr, -74);
        FuzzerUtils.init(byArr, (byte)75);

        l -= (long)-69.87632;
        for (i1 = 19; 326 > i1; i1++) {
            i2 /= (int)((i1 + (i2--)) | 1);
            iArr = (iArr = (iArr = iArr));
            byArr[i1 + 1][i1 + 1] = (byte)i1;
            for (i3 = 1; i3 < 5; ++i3) {
                for (i5 = 1; 2 > i5; i5++) {
                    int i11=-63836;
                    i6 = (int)(l -= Test.instanceCount);
                    i6 += (i2 >>= Math.max(i1, ++iArr[i3]));
                    i4 = (int)(i6 = (int)(i2 + (i5 - f1)));
                    Test.instanceCount -= ((byMeth(i5, i4) + i6) + Test.instanceCount);
                    i11 >>>= i3;
                    Test.sFld -= (short)i4;
                    if (b) continue;
                    i11 += i11;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i) {

        float f=1.692F;
        int i12=6, i13=-170, i14=-137, i15=-187, i16=41829;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -7889011571067123378L);
        FuzzerUtils.init(dArr, 118.106204);

        i += (int)((Math.max(i, i) * (f + f)) - (i - (--i)));
        Test.instanceCount = (long)(((i & 167L) - fMeth(f)) - f);
        for (i12 = 8; i12 < 143; i12++) {
            i += i13;
            Test.iArrFld[i12] >>>= (int)248L;
            Test.instanceCount += i12;
            i14 = 1;
            do {
                f = f;
                Test.instanceCount *= i13;
                switch (((-45177 >>> 1) % 10) + 112) {
                case 112:
                    try {
                        i = (i / -658106826);
                        i = (i12 / i14);
                        i13 = (-44753 % i12);
                    } catch (ArithmeticException a_e) {}
                    lArr[i12] = i;
                    break;
                case 113:
                    for (i15 = 1; i15 < 1; i15++) {
                        dArr[i12] = f;
                        Test.instanceCount *= (long)f;
                    }
                    break;
                case 114:
                    i = (int)Test.instanceCount;
                    break;
                case 115:
                    Test.fArrFld[i14 + 1] = f;
                    break;
                case 116:
                    i16 <<= i13;
                case 117:
                    i16 >>= i16;
                    break;
                case 118:
                    Test.instanceCount = (long)f;
                    break;
                case 119:
                    Test.instanceCount = i16;
                    break;
                case 120:
                    i13 += i14;
                    break;
                case 121:
                    Test.instanceCount += i14;
                default:
                    i += 29272;
                }
            } while (++i14 < 12);
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i17=65172, i18=-12, i19=5, i20=67, i21=-3, i22=-1, i23=-70, i24=-7975, i25=7, i26=-35673;
        float f3=99.432F;

        vMeth(i17);
        i17 >>>= Test.byFld;
        for (i18 = 390; i18 > 5; i18 -= 2) {
            for (i20 = i18; i20 < 131; ++i20) {
                Test.iArrFld[i18] *= i21;
                i19 <<= i17;
                i19 += (i20 * i20);
                for (i22 = 1; 1 > i22; ++i22) {
                    i23 *= (int)-119.114056;
                    fFld += (((i22 * i22) + i18) - fFld);
                    Test.iArrFld[i22] ^= i17;
                    i23 -= -98;
                    Test.instanceCount = i22;
                    i17 += i22;
                    try {
                        i17 = (i23 / Test.iArrFld[i20 - 1]);
                        i21 = (i22 % i20);
                        i23 = (26 / i23);
                    } catch (ArithmeticException a_e) {}
                    f3 += (-23L + (i22 * i22));
                }
            }
            i19 >>= i21;
            i17 = i20;
            i24 = 1;
            while (++i24 < 131) {
                i21 += (i24 + Test.instanceCount);
                for (i25 = 1; i25 < 1; ++i25) {
                    Test.instanceCount = i22;
                    i21 = i21;
                    i19 = i22;
                    Test.sFld = (short)i18;
                }
                i17 /= 8475;
                Test.sFld += (short)(i24 + i22);
                Test.instanceCount |= i22;
                Test.iArrFld[i24 + 1] += i23;
                i17 += (i24 * i18);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
