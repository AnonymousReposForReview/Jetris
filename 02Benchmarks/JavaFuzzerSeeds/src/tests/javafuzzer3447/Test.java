package tests.javafuzzer3447;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:29:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13436L;
    public static double dFld=2.94942;
    public static boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-739);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f=-2.371F;
        int i3=-47911, i4=-119, i5=44172, i6=-41, i7=-54329, i8=-225, i9=4, iArr1[]=new int[N];
        long l2=-37536L;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -54268);
        FuzzerUtils.init(dArr, -44.68023);

        f -= Test.instanceCount;
        i3 *= i3;
        i4 = 210;
        while ((i4 -= 2) > 0) {
            try {
                i3 = (i4 / i4);
                i3 = (252 % i3);
                iArr1[i4] = (-5808 % i3);
            } catch (ArithmeticException a_e) {}
            for (i5 = 1; i5 < 15; i5++) {
                i3 += i5;
                Test.instanceCount = (long)f;
                i3 = i4;
            }
            for (l2 = 1; 15 > l2; ++l2) {
                i3 *= i3;
                dArr[(int)(l2 + 1)] = i6;
                for (i8 = 1; 2 > i8; i8++) {
                    i3 = i4;
                    f += (182 + (i8 * i8));
                    f = -43;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + l2 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        byte by=-60;
        int i10=-13, i11=52100, i12=-7, i13=-2927, i14=2, iArr[][]=new int[N][N];
        float f1=2.939F;
        boolean b=true;
        long l3=-143L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 174);
        FuzzerUtils.init(lArr, 7L);

        i2 = (int)(++Test.instanceCount);
        iArr[(i2 >>> 1) % N][(i2 >>> 1) % N] >>= i2;
        by /= (byte)((++Test.instanceCount) | 1);
        iMeth1();
        for (i10 = 5; i10 < 238; ++i10) {
            f1 *= i2;
            Test.instanceCount += (i10 * i10);
            if (b) break;
            by = (byte)Test.instanceCount;
            i2 += i10;
            lArr[i10] -= (long)Test.dFld;
            for (i12 = 1; i12 < 7; i12++) {
                for (l3 = 1; l3 < 2; ++l3) {
                    if (b) continue;
                    if (true) break;
                }
            }
        }
        vMeth_check_sum += i2 + by + i10 + i11 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i12 + i13 + l3 + i14 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(long l, long l1) {

        int i1=130, i16=-9, i17=7;
        short s=115;
        long l4=-2638L;
        byte by1=25;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.99216);

        i1 = (int)Math.abs((i1 = i1) / ((Test.instanceCount * s) | 1));
        vMeth(i1);
        for (int i15 : iArrFld) {
            i16 = 1;
            do {
                i1 >>>= -5;
                i1 = i16;
                dArr1[i16 + 1] *= i1;
                s = (short)i15;
                i15 += (int)Test.dFld;
                for (l4 = 1; l4 < 1; l4++) {
                    boolean b1=true;
                    i15 *= -7819;
                    iArrFld[i16] -= by1;
                    i1 += (int)(((l4 * i17) + i17) - i16);
                    iArrFld[(int)(l4)] = i15;
                    if (b1) break;
                }
            } while (++i16 < 4);
        }
        long meth_res = l + l1 + i1 + s + i16 + l4 + i17 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i18=-237, i19=253, i20=-61475, i21=-57, i22=-5, i23=-130, i24=-74, i25=-86, i26=43954;
        byte by2=-59;
        short s1=-20879;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -5L);

        i += (int)(((Test.dFld * i) + -22) + i);
        Test.instanceCount <<= (Math.min(++i, ++i) + iMeth(Test.instanceCount, 39322L));
        i = i;
        for (i18 = 6; i18 < 175; ++i18) {
            Test.instanceCount *= Test.instanceCount;
            for (i20 = 7; i20 < 148; ++i20) {
                switch ((i18 % 1) + 15) {
                case 15:
                    i22 = 1;
                    do {
                        Test.instanceCount <<= Test.instanceCount;
                        if (Test.bFld) continue;
                        i21 ^= i19;
                    } while (++i22 < 2);
                    break;
                default:
                    Test.instanceCount = -6;
                }
                i = i20;
                i19 = -33277;
                if (Test.bFld) {
                    for (i23 = 1; i23 < 2; ++i23) {
                        float f2=35.543F;
                        i21 += (int)6304648620697677111L;
                        i21 = i;
                        lArr1 = lArr1;
                        Test.sArrFld[i23 + 1] -= (short)i24;
                        Test.instanceCount += (((i23 * i18) + f2) - i24);
                        i21 -= by2;
                        f2 = i21;
                        iArrFld[i20] = (int)Test.instanceCount;
                        try {
                            i21 = (i24 % i23);
                            i = (-137 % iArrFld[i18]);
                            iArrFld[i20] = (i % -145);
                        } catch (ArithmeticException a_e) {}
                    }
                } else {
                    for (i25 = i18; 2 > i25; ++i25) {
                        i <<= (int)3L;
                        iArrFld = iArrFld;
                        i26 <<= i25;
                        s1 -= (short)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
