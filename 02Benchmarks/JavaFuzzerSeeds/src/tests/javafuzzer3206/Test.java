package tests.javafuzzer3206;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:54:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=209L;
    public static int iFld=-1;
    public static double dFld=1.9843;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, float f, byte by) {

        int i1=-207, i2=-33, i3=-76, i5=-16402, i6=-58978, i7=-200, i8=-55, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5);

        for (i1 = 16; i1 < 302; ++i1) {
            Test.iFld += (i1 * i1);
        }
        i3 = 1;
        do {
            Test.iFld -= (int)-155L;
            i5 = 1;
            while (++i5 < 12) {
                iArr[i3] *= -111;
            }
            iArr[i3 + 1] = -3;
            i6 = 1;
            while (++i6 < 12) {
                l = 26264;
                i2 += i2;
                Test.dFld = i1;
                for (i7 = i3; i7 < 1; ++i7) {
                    iArr[i3] = (int)f;
                    l *= (long)Test.dFld;
                    Test.iFld = i5;
                }
            }
        } while (++i3 < 131);
        vMeth2_check_sum += l + Float.floatToIntBits(f) + by + i1 + i2 + i3 + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        float f1=35.43F;
        byte by1=66;
        int i9=-14, i10=8, i11=31911, i12=9, i13=8, iArr1[]=new int[N];
        double d=-120.97472, dArr[]=new double[N];
        short s=-22156;

        FuzzerUtils.init(iArr1, -60);
        FuzzerUtils.init(dArr, 23.59544);

        Test.iFld &= (int)Test.instanceCount;
        vMeth2(Test.instanceCount, f1, by1);
        for (i9 = 7; i9 < 245; ++i9) {
            iArr1[i9 - 1] = i10;
            for (i11 = 1; i11 < 7; ++i11) {
                dArr[i9] -= Test.instanceCount;
                for (d = 1; d < 2; d++) {
                    Test.instanceCount += (43 + (d * d));
                    Test.iFld <<= by1;
                    i12 += (int)((long)d ^ Test.iFld);
                    s <<= (short)52169L;
                    s = (short)i11;
                    i12 += (int)d;
                    Test.iFld += (int)(((d * by1) + Test.instanceCount) - i9);
                    i13 += (int)d;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + by1 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 +
            s + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i) {

        long l1=7237922182510352755L, l2=0L;
        float f2=0.691F, f3=86.932F;
        int i14=0, i15=-104, i16=34583, iArr2[]=new int[N];
        short s1=16320;
        boolean b=true, bArr[]=new boolean[N];
        byte by2=13;

        FuzzerUtils.init(iArr2, -14564);
        FuzzerUtils.init(bArr, true);

        vMeth1();
        l1 = 1;
        do {
            l2 = Test.iFld;
            if (b) {
                for (f2 = 1; f2 < 4; ++f2) {
                    if (true) {
                        iArr2 = iArr2;
                    } else if (b) {
                        iArr2[(int)(l1 + 1)] = (int)Test.dFld;
                        l2 -= s1;
                        i ^= i;
                    } else {
                        iArr2[(int)(l1)] = (int)Test.instanceCount;
                        switch ((int)(((l1 % 2) * 5) + 39)) {
                        case 44:
                            for (i15 = 1; 2 > i15; i15++) {
                                i = by2;
                                f3 += -5;
                            }
                            break;
                        case 43:
                            bArr[(int)(l1)] = b;
                            break;
                        }
                    }
                }
            } else {
                i16 += (int)l1;
            }
        } while (++l1 < 393);
        vMeth_check_sum += i + l1 + l2 + Float.floatToIntBits(f2) + i14 + s1 + (b ? 1 : 0) + i15 + i16 + by2 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.iFld);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
