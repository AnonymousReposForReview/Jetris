package tests.javafuzzer714;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:22:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7408770391181505568L;
    public static float fFld=-90.17F;
    public static double dFld=2.51797;
    public static boolean bFld=true;
    public long lFld=11096L;
    public int iFld=30210;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, -8823);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, long l2) {

        boolean b=false;
        short s=-4163;
        int i9=-110, i10=191, i11=48929, i12=10, i13=-248, iArr[]=new int[N];
        byte by=7;

        FuzzerUtils.init(iArr, -3);

        b = b;
        i8 = (int)Test.fFld;
        i8 = s;
        i8 = i8;
        for (i9 = 14; 341 > i9; i9++) {
            iArr = iArr;
            i8 *= 43923;
            i10 *= i8;
            Test.dFld += Test.fFld;
            if (true) break;
            i11 = 1;
            do {
                by >>= (byte)i11;
                for (i12 = 1; i12 > 1; i12 -= 3) {
                    Test.instanceCount = i9;
                    i10 = -32;
                }
            } while (++i11 < 5);
        }
        vMeth2_check_sum += i8 + l2 + (b ? 1 : 0) + s + i9 + i10 + i11 + by + i12 + i13 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, long l1, int i7) {

        int i14=-5, i15=-64159, i16=5, i17=-92, i18=5, i19=57921, i20=-1, i21=-13;
        boolean b1=false;

        vMeth2(i7, Test.instanceCount);
        for (i14 = 22; 353 > i14; ++i14) {
            i15 += (((i14 * i15) + i7) - l1);
            i16 = 1;
            while (++i16 < 5) {
                Test.bArrFld = Test.bArrFld;
                i7 >>= i14;
                i15 = (int)Test.dFld;
                Test.bArrFld[i16 + 1] = b1;
            }
            for (i17 = 1; i17 < 5; ++i17) {
                i19 -= 46206;
                b1 = b1;
                i18 += (i17 * i17);
                for (i20 = 1; i20 < 2; i20 += 3) {
                    Test.dFld += i17;
                    Test.iArrFld[i14 + 1] >>= i15;
                }
            }
        }
        vMeth1_check_sum += l + l1 + i7 + i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 + i19 + i20 + i21;
    }

    public static void vMeth() {

        int i3=95, i4=11, i5=218, i6=-128, i22=148;
        short s1=-3261;

        for (i3 = 2; i3 < 158; ++i3) {
            for (i5 = 1; 10 > i5; ++i5) {
                vMeth1(Test.instanceCount, Test.instanceCount, i6);
                i4 *= (int)Test.fFld;
                i22 = 1;
                do {
                    Test.iArrFld = Test.iArrFld;
                    s1 += s1;
                    Test.iArrFld[i3] -= 105;
                    if (true) {
                        i4 -= i22;
                        vMeth_check_sum += i3 + i4 + i5 + i6 + i22 + s1;
                        return;
                    } else if (Test.bFld) {
                        Test.instanceCount = i6;
                        if (i4 != 0) {
                            vMeth_check_sum += i3 + i4 + i5 + i6 + i22 + s1;
                            return;
                        }
                    } else if (Test.bFld) {
                        Test.instanceCount += (((i22 * Test.instanceCount) + i4) - i3);
                    } else {
                        i4 = i3;
                    }
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-13);
                } while (++i22 < 2);
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i22 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-97, i2=-8, i23=-7070, i24=130, i25=-57871, i26=31, i27=150, i28=-1;
        short s2=-10434;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -114L);

        for (i = 162; i > 3; --i) {
            i2 = 1;
            while (++i2 < 158) {
                i1 = i;
            }
            vMeth();
            lFld >>>= -7;
            i1 = (int)Test.fFld;
            Test.instanceCount += i1;
            for (i23 = 8; i23 < 158; i23++) {
                i1 ^= (int)lFld;
                i1 += i23;
            }
            i25 = 158;
            do {
                i24 = i2;
                i1 ^= i1;
                i24 >>= s2;
                lArr[i25] += i24;
                switch ((i % 6) + 113) {
                case 113:
                    i1 >>= i23;
                    lArr[i] <<= i25;
                case 114:
                    lFld -= Test.instanceCount;
                    break;
                case 115:
                    for (i26 = 1; i26 < 1; ++i26) {
                        i1 += (i26 * i26);
                        i1 = i1;
                        iFld >>= 34761;
                        i27 ^= i;
                        Test.iArrFld[i26] = 5;
                        Test.instanceCount <<= i24;
                    }
                    i24 += (i25 | i28);
                    lFld = i2;
                    iFld -= i1;
                case 116:
                    Test.iArrFld[i - 1] = (int)Test.dFld;
                case 117:
                    lFld = -2;
                case 118:
                    i24 += i25;
                    break;
                default:
                    if (Test.bFld) continue;
                }
            } while (--i25 > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
