package tests.javafuzzer2441;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:38:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static byte byFld=-24;
    public float fFld=-1.339F;
    public double dFld=-87.29759;
    public static float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -37.711F);
        FuzzerUtils.init(Test.iArrFld, -164);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7, int i8, float f) {

        double d1=109.127307;
        int iArr[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr1, 159L);

        iArr[(i7 >>> 1) % N][(i8 >>> 1) % N] = (int)Test.instanceCount;
        lArr1[(-93 >>> 1) % N] -= i7;
        f = (float)d1;
        long meth_res = i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, double d, int i6) {

        float f1=-56.848F;
        int i9=-81, i10=42892, i11=9263, i12=-59926;
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 32547L);

        Test.byFld = (byte)(-iMeth1(i5, i6, f1));
        f1 += i5;
        for (i9 = 13; i9 < 294; i9 += 2) {
            Test.instanceCount -= i10;
            Test.instanceCount = Test.instanceCount;
            i6 <<= (int)Test.instanceCount;
            switch ((((i5 >>> 1) % 3) * 5) + 9) {
            case 22:
                lArr2[i9] *= Test.instanceCount;
                break;
            case 15:
                for (i11 = 1; i11 < 11; i11 += 2) {
                    switch ((i9 % 3) + 78) {
                    case 78:
                        i10 = Test.byFld;
                        break;
                    case 79:
                        lArr2[i11] &= 13;
                        Test.fArrFld = FuzzerUtils.float2array(N, (float)1.92F);
                        break;
                    case 80:
                        if (b) break;
                        if (i6 != 0) {
                            vMeth_check_sum += i5 + Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f1) + i9 +
                                i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr2);
                            return;
                        }
                        break;
                    }
                }
                break;
            case 11:
                Test.byFld += (byte)-49;
                break;
            }
        }
        vMeth_check_sum += i5 + Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + (b
            ? 1 : 0) + FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(int i1, int i2) {

        int i3=-181, i4=-14, i13=14430, i14=13;
        double d2=2.12306, dArr[]=new double[N];
        boolean b1=false;
        float f2=-111.721F;

        FuzzerUtils.init(dArr, 0.32343);

        for (i3 = 8; i3 < 272; ++i3) {
            i1 += (i3 * i3);
            i1 += i3;
            dArr[i3 - 1] = i3;
        }
        vMeth(-4, d2, i2);
        if (b1) {
            i1 = 26886;
        } else {
            for (i13 = 157; i13 > 6; i13 -= 2) {
                f2 = i14;
                i1 -= (int)f2;
                i1 = (int)Test.instanceCount;
                i2 -= i14;
                if (false) continue;
                i1 = i2;
                Test.iArrFld[i13 + 1] >>>= i1;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i13 + i14 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-56032, i15=7315, i16=13, i17=-102, i18=-72, i19=59654, i20=27184, i21=-4, i22=5;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4188069930L);

        Test.instanceCount *= i;
        for (long l : lArr) {
            i -= iMeth(i, i);
            i -= i;
            for (i15 = 3; i15 < 63; ++i15) {
                lArr[i15] >>>= 7;
                lArr[i15 + 1] += i;
                i17 = 1;
                while (++i17 < 2) {
                    float f3=4.852F;
                    f3 = -9731;
                }
                i += i15;
            }
            i18 = 1;
            do {
                short s=-3900;
                for (i19 = 1; i19 < 1; ++i19) {
                    i20 /= (int)(l | 1);
                    l -= Test.instanceCount;
                    i += i19;
                    Test.iArrFld[i19] = i20;
                }
                i20 >>>= (int)l;
                i20 = (int)Test.instanceCount;
                i20 *= (int)fFld;
                i -= s;
                for (i21 = 1; i21 > 1; i21 -= 2) {
                    i += (((i21 * i19) + Test.instanceCount) - i);
                    l = i21;
                    i20 ^= 140;
                    Test.instanceCount += (((i21 * fFld) + i) - i18);
                    i22 = (int)dFld;
                    Test.iArrFld[i18] *= i18;
                    i20 = (int)Test.instanceCount;
                    fFld += (i21 * i21);
                }
            } while (++i18 < 63);
            dFld = i20;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
