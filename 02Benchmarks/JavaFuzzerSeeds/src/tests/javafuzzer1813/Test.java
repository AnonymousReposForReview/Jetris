package tests.javafuzzer1813;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:34:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static volatile float fFld=-1.303F;
    public static byte byFld=40;
    public static volatile boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static volatile int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -16998);
        FuzzerUtils.init(Test.lArrFld, -240L);
        FuzzerUtils.init(Test.dArrFld, -109.44244);
        FuzzerUtils.init(Test.iArrFld1, 116);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        int i7=-200, i8=-5, i9=-19992, i10=10, i11=8, i12=-241, i13=1, i14=-11;
        double d=-99.65174;
        short s=-30817;

        for (long l1 : Test.lArrFld) {
            for (i7 = 1; i7 < 4; ++i7) {
                i8 += (((i7 * i6) + i7) - Test.fFld);
            }
        }
        for (i9 = 7; 168 > i9; ++i9) {
            switch (((i9 % 2) * 5) + 125) {
            case 126:
                i8 &= (int)Test.instanceCount;
            case 127:
                if (Test.bFld) {
                    Test.dArrFld[i9] += d;
                    i11 = 1;
                    do {
                        Test.fFld = Test.byFld;
                        Test.iArrFld[i11 + 1][i11 - 1] <<= s;
                    } while ((i11 += 2) < 10);
                    for (i12 = 10; i12 > i9; i12 -= 2) {
                        i6 = Test.byFld;
                        Test.lArrFld[i12 + 1] = Test.instanceCount;
                        i14 += (int)(5L + (i12 * i12));
                    }
                    vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + s + i12 + i13 +
                        i14;
                    return;
                } else if (false) {
                    s = (short)-12173L;
                    vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + s + i12 + i13 +
                        i14;
                    return;
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + s + i12 + i13 + i14;
    }

    public static void vMeth1() {

        int i2=205, i3=-4947, i4=23777, i5=4, i15=-26445, i16=-82, i17=48829;

        for (i2 = 7; i2 < 139; i2++) {
            for (i4 = i2; 12 > i4; ++i4) {
                vMeth2(i3);
            }
            Test.fFld += Test.fFld;
            Test.instanceCount += (i2 | Test.instanceCount);
            i15 = 1;
            do {
                Test.instanceCount = i15;
                Test.iArrFld[i2 - 1][i15] -= (int)Test.fFld;
                i5 += i15;
                i5 <<= 218;
                Test.lArrFld[i2 - 1] -= i15;
                i3 = (int)-173L;
                for (i16 = 1; i16 < 1; ++i16) {
                    Test.iArrFld[i15 - 1][i15 + 1] += (int)Test.instanceCount;
                    i5 += (-2 + (i16 * i16));
                }
            } while (++i15 < 12);
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i15 + i16 + i17;
    }

    public static void vMeth(long l, int i1) {

        double d1=112.84484, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.108813);

        Test.iArrFld[(i1 >>> 1) % N][(243 >>> 1) % N] = (int)((-i1) - ((i1 - Test.fFld) * (Test.fFld + Test.fFld)));
        i1 = ((i1++) & i1);
        l = (long)Math.sqrt(dArr[(33 >>> 1) % N]);
        vMeth1();
        Test.instanceCount = i1;
        d1 -= i1;
        switch (((i1 >>> 1) % 9) + 35) {
        case 35:
            for (int i18 : Test.iArrFld1) {
                Test.instanceCount *= (long)Test.fFld;
                i1 >>= i1;
                Test.instanceCount -= 0;
                try {
                    i1 = (2680971 / Test.iArrFld[(i18 >>> 1) % N][(0 >>> 1) % N]);
                    i18 = (i18 % 242);
                    i1 = (238 % i18);
                } catch (ArithmeticException a_e) {}
                Test.lArrFld = Test.lArrFld;
                i18 >>= i18;
                if (Test.bFld) break;
            }
        case 36:
        case 37:
            i1 -= (int)d1;
            break;
        case 38:
            d1 += i1;
        case 39:
            i1 >>= i1;
            break;
        case 40:
            Test.iArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] = i1;
            break;
        case 41:
            i1 -= (int)d1;
            break;
        case 42:
            i1 |= i1;
            break;
        case 43:
            i1 -= -60953;
            break;
        }
        vMeth_check_sum += l + i1 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-62836, i19=12, iArr[]=new int[N];
        byte by=104;
        long l2=6427009708659835582L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 27);
        FuzzerUtils.init(fArr, 2.237F);

        iArr[(i >>> 1) % N] -= (-(by++));
        Test.instanceCount = 4;
        Test.fFld = 22225;
        vMeth(Test.instanceCount, i);
        Test.bFld = false;
        Test.iArrFld1 = Test.iArrFld1;
        for (l2 = 8; l2 < 325; ++l2) {
            Test.iArrFld[(int)(l2 + 1)][(int)(l2 - 1)] *= i19;
        }
        fArr = fArr;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
