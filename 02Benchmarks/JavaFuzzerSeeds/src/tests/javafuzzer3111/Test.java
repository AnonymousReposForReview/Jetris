package tests.javafuzzer3111;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:55:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=57773;
    public static int iFld1=-250;
    public static double dFld=0.78740;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public volatile short sArrFld[]=new short[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -225);
        FuzzerUtils.init(Test.dArrFld, 1.24366);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth() {

        float f2=0.208F;
        int i1=6096;
        short s1=3899;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -29146L);

        f2 = Math.max((i1 + i1) - (s1 + -31672), Math.abs(i1) + (++i1));
        lArr[(i1 >>> 1) % N] = (i1 >> Math.abs(i1 - i1));
        long meth_res = Float.floatToIntBits(f2) + i1 + s1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(int i5, short s3, int i6) {

        int i7=-47, i8=-3, i9=-242, iArr1[]=new int[N];
        double d1=-98.72356;
        byte by1=-78;
        long l2=-2354841694852500760L;
        float f4=73.44F;

        FuzzerUtils.init(iArr1, 168);

        i7 = 1;
        do {
            Test.iFld += (i7 * i7);
            i8 = 8;
            do {
                iArr1[i8 - 1] -= (int)Test.instanceCount;
                d1 = by1;
                iArr1[i8] += Test.iFld;
                for (l2 = 1; l2 < 3; ++l2) {
                    i5 = by1;
                    f4 *= Test.iFld;
                    Test.instanceCount = (long)f4;
                    i6 -= Test.iFld;
                }
                Test.instanceCount += 8;
                d1 += i8;
                iArr1[i8 - 1] *= (int)42.698F;
                i9 += (((i8 * i6) + Test.iFld1) - l2);
            } while ((i8 -= 3) > 0);
        } while (++i7 < 195);
        vMeth2_check_sum += i5 + s3 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + by1 + l2 + i9 +
            Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i2=61179, i3=-226, i4=5050, iArr[]=new int[N];
        long l1=918864009L;
        double d=1.48153;
        byte by=-19;
        short s2=29746;
        float f3=-1.250F, fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 94);
        FuzzerUtils.init(fArr, -1.462F);

        iArr[(i2 >>> 1) % N] += (int)(--Test.instanceCount);
        l1 = 1;
        do {
            for (i3 = 1; i3 < 5; i3++) {
                d -= i3;
                by <<= (byte)((-(++s2)) * i2);
                switch ((i3 % 2) + 101) {
                case 101:
                    fArr[(i4 >>> 1) % N][(int)(l1 + 1)] += Test.iFld;
                    by -= (byte)(i2 *= (int)d);
                    d = (i4 -= (int)((l1 - f3) % (((long)(-(d + l1))) | 1)));
                    break;
                case 102:
                    i4 = Test.iFld;
                    switch ((int)((l1 % 5) + 21)) {
                    case 21:
                        Test.instanceCount >>= (-Math.min(i3 - i3, (int)(Test.instanceCount * f3)));
                        i4 = Test.iFld;
                        Test.iFld += (((i3 * i2) + i2) - i2);
                        vMeth2(i4, s2, i3);
                        break;
                    case 22:
                        Test.instanceCount += Test.iFld1;
                    case 23:
                        i4 *= i4;
                        break;
                    case 24:
                        iArr[i3 - 1] += (int)Test.dFld;
                        break;
                    case 25:
                        i4 = Test.iFld1;
                        break;
                    default:
                        Test.iFld1 += i3;
                    }
                    break;
                default:
                    try {
                        i2 = (i3 % 36970);
                        i4 = (i2 / -113);
                        Test.iArrFld[i3] = (i2 % -30);
                    } catch (ArithmeticException a_e) {}
                }
            }
        } while (++l1 < 360);
        vMeth1_check_sum += i2 + l1 + i3 + i4 + Double.doubleToLongBits(d) + by + s2 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, float f1) {

        long l=-4737504050948802774L, lArr1[]=new long[N];
        int i=23184, i10=-4;
        short s=5398;

        FuzzerUtils.init(lArr1, 26699624L);

        for (l = 19; l < 332; l++) {
            s += (short)(((l * i) + i) - l);
            i = i;
            i = iMeth();
            i += (int)(l ^ i);
            vMeth1();
            i += (int)l;
        }
        i10 = 1;
        while (++i10 < 271) {
            boolean b=true;
            Test.iFld1 <<= (int)Test.instanceCount;
            if (b) {
                i += (((i10 * i) + i) - Test.iFld1);
            } else {
                lArr1[(-14229 >>> 1) % N] &= Test.iFld;
                Test.iArrFld[i10] = (int)Test.instanceCount;
                Test.instanceCount -= -86;
                Test.instanceCount = l;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + l + i + s + i10 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f5=0.476F, f6=0.493F;
        int i11=-86, i12=147, i13=13, i14=-164, iArr2[][]=new int[N][N];
        short s4=-13866;
        byte by2=121;

        FuzzerUtils.init(iArr2, 11);

        vMeth(f5, 100.131F);
        Test.instanceCount += (long)Test.dFld;
        Test.iFld1 -= Test.iFld1;
        i11 = 1;
        while (++i11 < 272) {
            Test.iArrFld[i11] = Test.iFld;
            for (i12 = 2; i12 < 92; ++i12) {
                Test.iFld1 *= (int)Test.instanceCount;
                sArrFld[i11 - 1] = (short)-235;
                for (f6 = 2; f6 > 1; f6 -= 2) {
                    switch (((i12 % 3) * 5) + 75) {
                    case 82:
                        switch ((i11 % 2) + 117) {
                        case 117:
                            switch ((i11 % 2) + 21) {
                            case 21:
                                i13 += (int)Test.instanceCount;
                                Test.dFld = i12;
                                Test.iArrFld = Test.iArrFld;
                                iArr2 = iArr2;
                                break;
                            case 22:
                                Test.instanceCount *= Test.iFld1;
                                break;
                            }
                            Test.iFld1 = 8;
                            Test.dArrFld[i12 - 1] *= -50975L;
                            break;
                        case 118:
                        default:
                            iArr2[i11 - 1][i12] += i11;
                            iArr2[(int)(f6 + 1)] = iArr2[(int)(f6 + 1)];
                            if (bFld) continue;
                        }
                        iArr2[i12 + 1][(Test.iFld >>> 1) % N] -= (int)3260650438299244147L;
                        i14 -= s4;
                    case 84:
                        Test.instanceCount += (long)f6;
                        break;
                    case 88:
                        switch (((i11 % 7) * 5) + 85) {
                        case 117:
                            s4 ^= by2;
                            Test.iFld1 -= i14;
                        case 100:
                            if (bFld) break;
                            i13 += (int)(f6 * f5);
                            break;
                        case 102:
                            iArr2[(int)(f6 - 1)][i12] += i13;
                            break;
                        case 94:
                            f5 = Test.instanceCount;
                            break;
                        case 97:
                            Test.instanceCount *= 14L;
                        case 88:
                            Test.iFld -= (int)Test.instanceCount;
                            break;
                        case 108:
                            f5 = by2;
                        default:
                            Test.dArrFld[i12 + 1] += f5;
                        }
                        break;
                    default:
                        Test.iArrFld[(int)(f6 - 1)] -= i11;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
