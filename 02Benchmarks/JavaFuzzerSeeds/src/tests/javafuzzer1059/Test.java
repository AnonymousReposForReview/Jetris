package tests.javafuzzer1059;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:43:25 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=47571L;
    public static boolean bFld=false;
    public static volatile int iFld=24631;
    public double dFld=45.56612;
    public byte byFld=-101;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35330);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=9513;

        i2 = (int)Test.instanceCount;
        vMeth2_check_sum += i2;
    }

    public static void vMeth1(int i1, double d) {

        float f=117.793F, f1=-76.773F;
        int i3=34043, i4=-10644, i5=7, i6=-64917, iArr[][]=new int[N][N];
        byte by=-98;
        short s=-11617;

        FuzzerUtils.init(iArr, -21564);

        vMeth2();
        for (f = 13; 375 > f; ++f) {
            switch ((int)((f % 4) + 59)) {
            case 59:
                for (f1 = 1; f1 < 5; f1++) {
                    i1 += (int)(((f1 * Test.instanceCount) + i4) - i3);
                    if (false) continue;
                    switch ((int)((f % 9) + 90)) {
                    case 90:
                    case 91:
                        i3 = 95;
                        Test.bFld = Test.bFld;
                        break;
                    case 92:
                        by = (byte)s;
                        break;
                    case 93:
                        i1 *= 31610;
                        for (i5 = 1; i5 < 2; i5++) {
                            i3 <<= -14;
                            if (true) continue;
                            d -= d;
                        }
                        break;
                    case 94:
                        Test.instanceCount = i4;
                        break;
                    case 95:
                        Test.bFld = Test.bFld;
                        break;
                    case 96:
                        iArr[(int)(f1 + 1)][(int)(f1)] |= i3;
                        break;
                    case 97:
                        if (true) continue;
                        break;
                    case 98:
                        if (true) continue;
                        break;
                    }
                }
                break;
            case 60:
                Test.instanceCount = Test.instanceCount;
                break;
            case 61:
                i6 += i6;
            case 62:
                i6 *= i3;
                break;
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) +
            i4 + by + s + i5 + i6 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i7=-24582, i8=-95, i9=-24, i10=12;

        vMeth1(Test.iFld, dFld);
        i7 = 1;
        while (++i7 < 135) {
            for (i8 = 1; i8 < 12; i8++) {
                Test.instanceCount += i8;
                Test.iFld = 31623;
                Test.iFld >>= 42816;
                Test.instanceCount = 10;
                i10 = 1;
                do {
                    Test.iFld -= Test.iFld;
                    switch ((i7 % 3) + 28) {
                    case 28:
                        i9 += i10;
                        Test.iFld = i10;
                        byFld = (byte)i7;
                        Test.instanceCount = 8;
                        break;
                    case 29:
                        if (Test.bFld) break;
                    case 30:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    default:
                        Test.iArrFld[i10] = i8;
                    }
                } while (++i10 < 2);
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10;
    }

    public void mainTest(String[] strArr1) {

        int i=23, i11=148, i12=12, i13=-8, i14=61456, i15=0;
        float f2=0.442F, fArr[]=new float[N];
        long l=-11359L, l1=-3L, lArr[]=new long[N];
        short s1=23826;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 3957070746001603270L);
        FuzzerUtils.init(fArr, 116.760F);
        FuzzerUtils.init(byArr, (byte)13);

        lArr[(-44035 >>> 1) % N] = (i--);
        vMeth();
        for (i11 = 5; 244 > i11; ++i11) {
            if (true) break;
            i -= Test.iFld;
            i13 = 1;
            do {
                dFld *= i;
                try {
                    i = (i12 % Test.iFld);
                    i = (Test.iArrFld[i13] / 67);
                    Test.iFld = (i11 / 36044);
                } catch (ArithmeticException a_e) {}
                f2 *= i;
                dFld *= i;
                i12 *= 48679;
                i = (int)1.45786;
                switch ((i11 % 9) + 115) {
                case 115:
                    if (Test.bFld) {
                        i *= i12;
                        fArr[i11] = i12;
                        Test.instanceCount |= i11;
                        i = (int)l;
                    } else {
                        for (i14 = 1; i14 < 1; ++i14) {
                            lArr[i13 + 1] &= i14;
                            i15 -= (int)l;
                            switch ((((i15 >>> 1) % 2) * 5) + 11) {
                            case 21:
                                byFld = (byte)f2;
                                break;
                            case 15:
                                s1 += (short)(i14 * i15);
                                break;
                            default:
                                i >>>= i14;
                                byFld += (byte)(((i14 * i11) + f2) - i15);
                                i12 -= Test.iFld;
                                Test.iFld += i14;
                            }
                        }
                    }
                    break;
                case 116:
                    Test.iFld += (i13 * i13);
                    break;
                case 117:
                    l = i12;
                case 118:
                    Test.iFld = (int)f2;
                    break;
                case 119:
                    byArr[i11] = (byte)l1;
                    break;
                case 120:
                    f2 = Test.iFld;
                    break;
                case 121:
                    i12 *= i13;
                    break;
                case 122:
                    i -= i12;
                    break;
                case 123:
                    l1 = 162;
                }
            } while (++i13 < 105);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
