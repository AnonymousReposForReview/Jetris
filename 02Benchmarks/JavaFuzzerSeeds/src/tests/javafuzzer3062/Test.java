package tests.javafuzzer3062;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:22:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-174525146L;
    public byte byFld=-98;
    public static float fFld=-92.266F;
    public static double dFld=-38.100946;
    public int iFld=-35;
    public static short sFld=-20852;
    public int iFld1=-8;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2433905571L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i5=37, i6=-6, i7=170, i8=-26001, i10=239, iArr1[]=new int[N];
        long l1=187L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-390);
        FuzzerUtils.init(iArr1, 29094);

        for (i5 = 156; i5 > 8; i5 -= 2) {
            if (i6 != 0) {
                vMeth2_check_sum += l + i5 + i6 + i7 + i8 + l1 + i10 + FuzzerUtils.checkSum(sArr) +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
        }
        sArr[(i6 >>> 1) % N] = (short)Test.instanceCount;
        l += i5;
        i6 += (int)Test.instanceCount;
        for (i7 = 276; i7 > 15; i7 -= 3) {
            i6 = i6;
            Test.lArrFld[(i7 >>> 1) % N] ^= i6;
        }
        for (int i9 : iArr1) {
            i9 *= 83;
            l >>= l;
            i9 ^= i5;
            l1 = 1;
            while (++l1 < 4) {
                i10 += (int)(((l1 * i9) + i5) - Test.instanceCount);
                i8 >>= (int)l1;
            }
        }
        vMeth2_check_sum += l + i5 + i6 + i7 + i8 + l1 + i10 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(float f, float f1) {

        int i11=86, i12=52, i13=-41, i15=119, i16=-12, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -63185);

        vMeth2(Test.instanceCount);
        Test.dFld += Test.instanceCount;
        for (i11 = 9; 216 > i11; ++i11) {
            f1 += i13;
            i13 += (-8 + (i11 * i11));
            i12 -= (int)Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
        }
        for (i15 = 18; 291 > i15; ++i15) {
            i13 += i11;
            i13 = i16;
            Test.fFld = i13;
            Test.dFld += i13;
            i16 += 30965;
            Test.instanceCount += Test.instanceCount;
            i12 = (int)176674941931187091L;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i11 + i12 + i13 + i15 + i16 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth() {

        int i2=-11, i3=57, i4=167, i17=-37531, iArr[]=new int[N];
        long l2=-999572365L;

        FuzzerUtils.init(iArr, 20610);

        Test.fFld *= (float)(--Test.dFld);
        Test.lArrFld[(iFld >>> 1) % N] >>>= iFld;
        byFld = (byte)(Test.instanceCount + ((iFld - iFld) % ((--iFld) | 1)));
        i2 = 1;
        do {
            i3 = 1;
            do {
                i4 = 1;
                do {
                    short s=26664;
                    iArr[i3 + 1] -= (int)((Integer.reverseBytes(i3) + (i3 - Test.instanceCount)) << (iFld >>= (int)(i4
                        * Test.dFld)));
                    iFld += (s = (short)(iFld++));
                    Test.fFld += (i2 + (iFld += iArr[i3]));
                    iArr[i4] -= (int)(Math.min(Test.instanceCount, Math.max(-8L, Test.instanceCount)) * (iFld >>=
                        (int)(7 - (Test.instanceCount++))));
                } while ((i4 -= 3) > 0);
            } while (++i3 < 5);
            vMeth1(Test.fFld, Test.fFld);
            for (l2 = 1; l2 < 5; ++l2) {
                Test.sFld >>= (short)iFld1;
                Test.fFld *= iFld1;
                iFld = iFld1;
            }
        } while (++i2 < 362);
        vMeth_check_sum += i2 + i3 + i4 + l2 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=157, i1=-14, i18=-3, i19=103, i20=132, i21=-12, i22=-4, i23=-3, i24=-3, i25=5085, i26=62, iArr3[]=new
            int[N];
        boolean b=true;
        long l3=-7L;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr3, 1);
        FuzzerUtils.init(dArr, -114.101969);

        for (i = 5; i < 192; ++i) {
            switch ((i % 1) + 72) {
            case 72:
                Test.instanceCount += (((i * i) + i) - byFld);
                vMeth();
                iFld1 += iFld;
                iFld1 += i;
                break;
            }
            for (i18 = 2; i18 < 134; i18++) {
                for (i20 = 1; i20 < 2; ++i20) {
                    b = true;
                }
                Test.instanceCount -= (long)Test.dFld;
                iFld1 = (int)3L;
                i21 |= i;
                for (i22 = 1; 2 > i22; ++i22) {
                    i21 -= i1;
                    i21 <<= 3962;
                    iFld1 = 58049;
                    i23 = (int)Test.instanceCount;
                }
            }
            iArr3[i] = (int)Test.instanceCount;
            switch (((i % 3) * 5) + 62) {
            case 64:
                Test.dFld %= -114;
                dArr = dArr;
                try {
                    i1 = (180 % i18);
                    iFld = (57456 / i19);
                    iArr3[i - 1] = (i19 / iFld);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
                break;
            case 69:
                for (l3 = 134; 4 < l3; l3--) {
                    for (i25 = 1; i25 < 2; i25++) {
                        iFld += 65408;
                        i24 += i25;
                        Test.fFld += (i25 * i25);
                        iArr3[(int)(l3 + 1)] = (int)Test.instanceCount;
                        i26 += (int)-246L;
                    }
                }
                break;
            case 77:
                iArr3 = iArr3;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
