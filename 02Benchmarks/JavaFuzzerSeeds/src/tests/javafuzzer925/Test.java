package tests.javafuzzer925;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:48:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38963L;
    public double dFld=0.54188;
    public int iFld=-22586;
    public static byte byFld=-93;
    public static volatile float fFld=36.433F;
    public int iArrFld[]=new int[N];
    public volatile boolean bArrFld[]=new boolean[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public void vMeth(float f) {

        int i5=-10, i6=-171, i7=11, i8=-6;
        boolean b1=true;
        float f1=2.607F;

        for (i5 = 13; 370 > i5; i5++) {
            i6 >>= i5;
            if (b1) continue;
            i6 += (i5 * i6);
            if (b1) {
                i7 = 1;
                do {
                    i6 += (i7 * i7);
                    try {
                        i6 = (-188 / i6);
                        i6 = (iArrFld[i7 + 1] / i6);
                        iFld = (iArrFld[i5 - 1] % -115);
                    } catch (ArithmeticException a_e) {}
                    iArrFld[i5] += (int)dFld;
                    switch (((i6 >>> 1) % 6) + 118) {
                    case 118:
                        Test.byFld *= (byte)i6;
                        iFld = 250;
                        for (f1 = 3; 1 < f1; f1--) {
                            iArrFld[i7] -= -37573;
                        }
                        break;
                    case 119:
                        i6 = (int)Test.instanceCount;
                        break;
                    case 120:
                        iArrFld[i5] -= i7;
                        break;
                    case 121:
                    case 122:
                        f = i8;
                        break;
                    case 123:
                        Test.instanceCount *= iFld;
                        break;
                    }
                } while ((i7 += 2) < 5);
            } else {
                i8 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i5 + i6 + (b1 ? 1 : 0) + i7 + Float.floatToIntBits(f1) + i8;
    }

    public int iMeth1() {

        boolean b=true;
        int i4=-185, i9=41942, i10=-14, i11=4, i12=21280, i13=14, i14=-59505;
        float f2=0.118F;
        short s=-22698;

        b = (false && bArrFld[(-7 >>> 1) % N]);
        i4 *= i4;
        vMeth(f2);
        iArrFld[(24904 >>> 1) % N] = iFld;
        i4 -= -125;
        for (i9 = 8; i9 < 166; i9++) {
            for (i11 = 1; i11 < 10; ++i11) {
                i12 -= s;
                Test.fFld = Test.fFld;
                for (i13 = 1; i13 < 2; ++i13) {
                    try {
                        i12 = (iArrFld[i13] % 61212);
                        iFld = (146 / i4);
                        i4 = (i11 % 11214);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount *= i4;
                    if (b) continue;
                    i4 >>= 22180;
                    iArrFld[i13] = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i4 + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + s + i13 + i14;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i=57182, i1=5486, i2=-10, i3=-10, i15=-1, i16=9, i17=159;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1424276639646576619L);

        for (i = 293; i > 9; i -= 2) {
            i1 &= (iArrFld[i] - i);
            for (i2 = 1; i2 < 11; i2++) {
                Test.instanceCount -= iMeth1();
                Test.fFld += i2;
            }
            for (i15 = i; i15 < 11; ++i15) {
                i3 += i15;
                Test.instanceCount -= i3;
                lArr[i] += i1;
                Test.instanceCount *= i;
            }
            if (b2) {
                i17 = 1;
                while (++i17 < 11) {
                    Test.instanceCount = (long)1.45047;
                    Test.instanceCount += i17;
                    Test.instanceCount *= i;
                }
            } else if (b2) {
                Test.instanceCount *= i17;
            } else {
                Test.instanceCount += -4;
            }
        }
        long meth_res = i + i1 + i2 + i3 + i15 + i16 + i17 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=58611, i19=46613;
        long lArr1[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr1, -2357265341L);
        FuzzerUtils.init(dArr, 8.25499);

        dFld += ((iMeth() - i18) - i18);
        i19 = 153;
        do {
            lArr1[i19 - 1] -= i18;
            dArr[i19 - 1][i19 + 1] = i18;
        } while (--i19 > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
