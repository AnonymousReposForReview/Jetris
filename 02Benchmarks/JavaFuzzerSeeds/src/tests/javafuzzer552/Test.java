package tests.javafuzzer552;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:32:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1556283220L;
    public static int iFld=195;
    public boolean bFld=true;
    public int iFld1=222;
    public static float fFld=-1.594F;
    public static boolean bArrFld[]=new boolean[N];
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte)38);
        FuzzerUtils.init(Test.iArrFld, 125);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b1, int i3) {

        int i4=7, i5=-31, i6=-63443, i7=23750, i8=14, iArr[][]=new int[N][N];
        float f1=0.576F, fArr[]=new float[N];
        byte by=121;
        double d1=48.40882;
        short s=-12780;

        FuzzerUtils.init(fArr, 46.999F);
        FuzzerUtils.init(iArr, -30728);

        for (i4 = 6; 180 > i4; ++i4) {
            i5 >>>= (int)Test.instanceCount;
            for (i6 = 1; i6 < 9; ++i6) {
                Test.instanceCount -= (long)f1;
                switch ((i6 % 4) + 118) {
                case 118:
                    by = (byte)Test.instanceCount;
                    fArr[i4 + 1] *= Test.instanceCount;
                    break;
                case 119:
                    Test.iFld = i6;
                    switch ((i6 % 9) + 48) {
                    case 48:
                        Test.byArrFld[i4 - 1] >>= (byte)i3;
                        i3 <<= 93;
                        break;
                    case 49:
                        i8 = 2;
                        while (--i8 > 0) {
                            Test.iFld >>= 34465;
                            iArr[i4][i8 - 1] = (int)d1;
                            i3 = (int)Test.instanceCount;
                        }
                        break;
                    case 50:
                    case 51:
                        i5 += i6;
                        break;
                    case 52:
                        Test.byArrFld[i4 - 1] = (byte)s;
                        break;
                    case 53:
                        Test.iFld ^= (int)Test.instanceCount;
                    case 54:
                        iArr[i4 - 1][i6 - 1] %= 62;
                        break;
                    case 55:
                        Test.iFld *= i5;
                        break;
                    case 56:
                        i7 -= s;
                        break;
                    }
                    break;
                case 120:
                    iArr[i4 - 1][i4] >>>= 10;
                    break;
                case 121:
                    Test.iFld *= i7;
                default:
                    i7 *= 5;
                }
            }
        }
        long meth_res = (b1 ? 1 : 0) + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + by + i8 +
            Double.doubleToLongBits(d1) + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l) {

        float f=-1.328F, f2=-1.680F;
        boolean b=true;
        int i9=196, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -12147);

        if (true) {
            f = 1;
            do {
                if (b = (Test.bArrFld[(int)(f + 1)] = b)) continue;
                if (b) {
                    Test.iFld -= (int)(Math.abs(lMeth(b, Test.iFld)) + Test.instanceCount);
                    for (f2 = 1; 4 > f2; ++f2) {
                        l += Test.iFld;
                        l = l;
                        Test.bArrFld[(int)(f2 - 1)] = b;
                        l += (105 + (f2 * f2));
                        i9 %= (int)(i9 | 1);
                        iArr1[(int)(f)] *= i9;
                        l += i9;
                        try {
                            Test.iFld = (36462 / Test.iFld);
                            i9 = (iArr1[(int)(f2)] / 120);
                            i9 = (Test.iFld % iArr1[(int)(f)]);
                        } catch (ArithmeticException a_e) {}
                        iArr1[(int)(f2 - 1)] <<= Test.iFld;
                    }
                } else {
                    if (b) continue;
                }
            } while (++f < 385);
        } else {
            Test.instanceCount *= i9;
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f) + (b ? 1 : 0) + Float.floatToIntBits(f2) + i9 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(double d, int i2) {

        int i10=-8740, i11=-12, i12=5;
        float f3=1.323F;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 1932557264L);
        FuzzerUtils.init(sArr, (short)-11952);

        i2 += (int)(Test.instanceCount--);
        vMeth1(Test.instanceCount);
        i2 >>= 53485;
        for (i10 = 7; i10 < 311; i10++) {
            Test.iArrFld[i10 - 1] = (int)Test.instanceCount;
            Test.instanceCount <<= i10;
            lArr[i10] -= Test.instanceCount;
            sArr[i10 - 1] += (short)Test.iFld;
        }
        f3 += i2;
        Test.instanceCount = Test.instanceCount;
        for (long l1 : lArr) {
            if (i2 != 0) {
                vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i10 + i11 + Float.floatToIntBits(f3) + i12 +
                    FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                return;
            }
            i11 >>= -154;
            i2 -= (int)103.377F;
            Test.iFld >>= i12;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i10 + i11 + Float.floatToIntBits(f3) + i12 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=122, i1=9, i13=-1, i14=76, i15=-24047, i16=215, i17=-209;
        double d2=2.118782;
        float f4=0.891F, f5=2.524F;
        byte by1=-55;

        for (i = 10; i < 326; ++i) {
            vMeth(d2, i1);
            Test.instanceCount *= Test.iFld;
            if (bFld) break;
            Test.iFld = Test.iFld;
            for (f4 = 3; 80 > f4; ++f4) {
                i14 = 1;
                do {
                    Test.byArrFld[(int)(f4)] = (byte)iFld1;
                    iFld1 = (int)Test.instanceCount;
                    Test.iFld &= i1;
                    Test.iFld >>= -241;
                    Test.instanceCount = 3429L;
                    Test.iFld = Test.iFld;
                } while (++i14 < 2);
                i13 += (int)(((f4 * f4) + i14) - i13);
                Test.iArrFld[i] = i15;
                Test.iFld = i13;
                Test.instanceCount += (long)(f4 * i15);
                Test.iFld += (int)f4;
                Test.fFld += by1;
                bFld = bFld;
                for (i16 = 1; i16 < 2; ++i16) {
                    i15 = 10;
                }
                if (true) continue;
            }
            if (bFld) {
                f5 = 1;
                do {
                    i1 += (int)(((f5 * i17) + i13) - Test.instanceCount);
                    i17 += Test.iFld;
                    i15 = iFld1;
                    Test.fFld += f5;
                    i13 = i13;
                } while (++f5 < 80);
            } else if (bFld) {
                i15 >>= 149;
            } else {
                Test.instanceCount = i14;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
