package tests.javafuzzer2353;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:06:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-40108L;
    public static float fFld=-105.558F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld1[][]=new long[N][N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -34504);
        FuzzerUtils.init(Test.lArrFld, -2L);
        FuzzerUtils.init(Test.fArrFld, -116.566F);
        FuzzerUtils.init(Test.lArrFld1, -3470298235202017951L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, long l1, int i7) {

        int i8=-12, i9=-230, i10=-9187, i11=230, iArr[]=new int[N];
        double d1=-106.128385;
        boolean b1=true;
        short s=16137;
        byte by=-89, byArr[]=new byte[N];
        long l2=1577652489L;
        float f2=-2.117F;

        FuzzerUtils.init(byArr, (byte)-2);
        FuzzerUtils.init(iArr, -79);

        Test.instanceCount *= i7;
        Test.iArrFld[(i6 >>> 1) % N] += i6;
        for (i8 = 6; i8 < 138; i8++) {
            i9 ^= i9;
            if (i7 != 0) {
                vMeth1_check_sum += i6 + l1 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + s + by
                    + i11 + l2 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
                return;
            }
            i10 = 1;
            do {
                l1 += l1;
                switch (i10 + 121) {
                case 121:
                    i9 -= (int)l1;
                    Test.fArrFld[i10 - 1] = 0.28F;
                    break;
                case 122:
                case 123:
                    d1 += i9;
                    break;
                case 124:
                    try {
                        i9 = (i6 % i9);
                        i7 = (Test.iArrFld[i8] % 53830);
                        i9 = (181 / i6);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 125:
                    Test.iArrFld[i10 - 1] = i9;
                    break;
                case 126:
                    i6 = i8;
                case 127:
                    byArr[i8] -= (byte)i6;
                    break;
                case 128:
                case 129:
                    Test.instanceCount += (i10 | i6);
                    break;
                case 130:
                case 131:
                    i9 += i10;
                    break;
                case 132:
                    if (b1) continue;
                    break;
                case 133:
                    i6 = i10;
                    break;
                case 134:
                    s %= (short)19700;
                case 135:
                    i6 = i6;
                    break;
                case 136:
                    Test.iArrFld[i8 + 1] <<= i7;
                    break;
                case 137:
                    s -= by;
                    break;
                case 138:
                    byArr[i8 - 1] -= (byte)Test.instanceCount;
                case 139:
                    b1 = b1;
                    break;
                case 140:
                case 141:
                    i6 += (int)Test.instanceCount;
                    break;
                case 142:
                    d1 += i10;
                    break;
                case 143:
                    l1 += i10;
                    break;
                case 144:
                    i9 = i9;
                    break;
                case 145:
                    try {
                        i9 = (65514 / i8);
                        i7 = (Test.iArrFld[i10 + 1] % Test.iArrFld[i8 + 1]);
                        Test.iArrFld[i8 + 1] = (Test.iArrFld[i10 + 1] % i8);
                    } catch (ArithmeticException a_e) {}
                case 146:
                    i6 = i7;
                case 147:
                    Test.lArrFld[i10 - 1] += i8;
                    break;
                case 148:
                case 149:
                    i7 *= (int)Test.instanceCount;
                    break;
                case 150:
                    i9 = i10;
                case 151:
                case 152:
                    i9 += (i10 * Test.instanceCount);
                    break;
                case 153:
                case 154:
                    i7 += i10;
                    break;
                case 155:
                    try {
                        i6 = (iArr[i8 + 1] / i10);
                        i6 = (28493 / i6);
                        i7 = (i6 % -129);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 156:
                    i9 += (((i10 * i8) + l1) - i8);
                case 157:
                    i7 = i10;
                    break;
                case 158:
                    try {
                        i6 = (i10 % -132);
                        i7 = (i9 % 21686);
                        i11 = (Test.iArrFld[i10] / 118);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 159:
                case 160:
                    iArr[i10] = i6;
                case 161:
                    i7 = i8;
                    break;
                case 162:
                    i11 = (int)l1;
                    break;
                case 163:
                    i9 = 12098;
                    break;
                case 164:
                    l2 += i10;
                case 165:
                    i9 -= -11432;
                case 166:
                    l2 += i7;
                case 167:
                    i6 -= i9;
                    break;
                case 168:
                    i6 += (i10 * by);
                    break;
                case 169:
                case 170:
                    if (b1) break;
                    break;
                case 171:
                case 172:
                    l2 >>= l1;
                    break;
                case 173:
                    f2 += (((i10 * i10) + i9) - i11);
                    break;
                case 174:
                    i7 += i10;
                    break;
                case 175:
                    by += (byte)i6;
                    break;
                case 176:
                    Test.instanceCount += (i10 * i10);
                case 177:
                    if (b1) continue;
                case 178:
                    i9 = i8;
                    break;
                case 179:
                    if (b1) break;
                    break;
                case 180:
                    by += (byte)(2707560365590502829L + (i10 * i10));
                    break;
                case 181:
                    i7 += (((i10 * i11) + i7) - by);
                case 182:
                    Test.iArrFld = iArr;
                    break;
                case 183:
                    i7 += i10;
                    break;
                case 184:
                    Test.instanceCount |= l1;
                    break;
                case 185:
                    Test.lArrFld[i10] ^= Test.instanceCount;
                case 186:
                    i11 -= i10;
                    break;
                case 187:
                    i11 >>= i8;
                    break;
                case 188:
                    i9 = i9;
                    break;
                case 189:
                    i11 += (i10 * i10);
                    break;
                case 190:
                    by = (byte)i8;
                default:
                    i7 = i9;
                }
            } while (++i10 < 12);
        }
        vMeth1_check_sum += i6 + l1 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + s + by + i11 +
            l2 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, int i1, double d) {

        int i2=6, i3=-12, i4=11, i5=27850, i12=-134, i13=-46980;
        float f1=39.850F;
        boolean b=true;
        short s1=31330;

        for (i2 = 217; i2 > 11; --i2) {
            f1 = i2;
        }
        i1 -= (int)Test.instanceCount;
        i1 -= (int)((28484 + (Test.instanceCount * i1)) + l);
        for (i4 = 13; 358 > i4; i4++) {
            i5 += (-2 + (i4 * i4));
            b = ((-i3) != (f1--));
            Test.iArrFld[i4 + 1] ^= (int)(-(Test.lArrFld[i4 + 1] += (Test.instanceCount++)));
            vMeth1(i2, -4238630552L, i1);
            switch ((i4 % 3) + 108) {
            case 108:
                s1 ^= (short)i2;
                for (i12 = i4; i12 < 5; ++i12) {
                    l += (i12 - i12);
                    l = Test.instanceCount;
                    i5 = -10269;
                }
                break;
            case 109:
                Test.iArrFld[i4 + 1] >>= s1;
                break;
            case 110:
                i5 = i3;
                break;
            }
        }
        long meth_res = l + i1 + Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + (b ? 1 :
            0) + s1 + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i14=-177, i15=-9, i16=-63366, i17=-17636, i18=-13, iArr1[][]=new int[N][N];
        double d2=1.93013;

        FuzzerUtils.init(iArr1, -9);

        iMeth(Test.instanceCount, i14, d2);
        for (i15 = 2; i15 < 206; ++i15) {
            iArr1[i15] = iArr1[i15 + 1];
            Test.lArrFld[i15 - 1] -= i14;
            i16 = i14;
            i14 *= -176;
            for (i17 = 1; i17 < 8; ++i17) {
                int i19=2;
                Test.lArrFld = Test.lArrFld;
                iArr1[i17 - 1][i15 - 1] = i18;
                Test.lArrFld1[i15][i17] <<= i17;
                i14 = i16;
                iArr1[i15 - 1][i17] -= i17;
                i16 = 32132;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-33);
                i19 = i19;
            }
        }
        vMeth_check_sum += i14 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-32.721F;
        int i=-50, i20=-253, i21=-44458, i22=-199;
        boolean b2=true;
        short s2=-13617;
        byte by1=125;
        double d3=66.112932;

        for (f = 7; f < 211; ++f) {
            vMeth();
            i = (int)-121.29F;
            switch ((int)((f % 1) + 68)) {
            case 68:
                Test.bArrFld[(int)(f)] = b2;
                try {
                    i = (i / 118);
                    i = (Test.iArrFld[(int)(f)] / Test.iArrFld[(int)(f - 1)]);
                    Test.iArrFld[(int)(f)] = (i % 243);
                } catch (ArithmeticException a_e) {}
                break;
            }
            Test.fFld *= Test.instanceCount;
            i = (int)Test.instanceCount;
            i20 = 1;
            do {
                switch ((i20 % 9) + 89) {
                case 89:
                    Test.iArrFld[(int)(f + 1)] <<= 36373;
                    break;
                case 90:
                    i += (((i20 * s2) + by1) - by1);
                    d3 = Test.instanceCount;
                    break;
                case 91:
                    switch (((50282 >>> 1) % 3) + 79) {
                    case 79:
                        i -= i20;
                        for (i21 = 1; i21 < 1; i21++) {
                            switch ((i20 % 7) + 52) {
                            case 52:
                            case 53:
                                Test.iArrFld[i21 - 1] *= (int)Test.instanceCount;
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 54:
                                i22 <<= i20;
                            case 55:
                                i >>>= i20;
                                i = (int)Test.instanceCount;
                                i22 += (i21 * i21);
                                break;
                            case 56:
                                i22 &= i21;
                                d3 *= i21;
                                i22 += (i21 ^ i);
                                i22 += (((i21 * Test.instanceCount) + i21) - i20);
                                break;
                            case 57:
                                s2 >>= (short)i21;
                                break;
                            case 58:
                                i += i20;
                                i22 = -13;
                                break;
                            }
                        }
                        break;
                    case 80:
                        i -= i20;
                    case 81:
                    }
                    break;
                case 92:
                    i = i21;
                    break;
                case 93:
                    if (b2) break;
                    break;
                case 94:
                    i >>>= i;
                    break;
                case 95:
                    i -= 31518;
                    break;
                case 96:
                    Test.iArrFld[i20 - 1] = -52692;
                    break;
                case 97:
                    i += (((i20 * i21) + i22) - Test.instanceCount);
                    break;
                }
            } while (++i20 < 123);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
