package tests.javafuzzer817;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:21:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2072821867L;
    public static float fFld=-16.592F;
    public static long lFld=1408213772554867597L;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i4=8, i5=127, iArr[]=new int[N];
        boolean b=false;
        short s=-20124;
        float f=2.865F;
        double d2=0.16127;
        long l2=5946384875403884832L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -30L);
        FuzzerUtils.init(iArr, 43251);

        Test.instanceCount *= i4;
        lArr[(22467 >>> 1) % N] -= i4;
        i5 = 1;
        while (++i5 < 351) {
            i4 &= (int)Test.instanceCount;
            if (b) break;
            s += (short)(((i5 * Test.instanceCount) + Test.instanceCount) - f);
            d2 = i5;
            Test.instanceCount *= -13;
            i4 = (int)10L;
            Test.instanceCount += (i5 + i5);
            iArr[i5] >>= i4;
            Test.instanceCount >>>= i5;
            i4 -= (int)d2;
        }
        Test.instanceCount += Test.instanceCount;
        i4 = (int)l2;
        long meth_res = i4 + i5 + (b ? 1 : 0) + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + l2 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l1, int i3) {

        int i6=-26290, i7=-72, i8=-14, i9=-29863, iArr1[]=new int[N];
        short s1=-25125;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 15000);

        i3 *= (int)(dMeth() + i3);
        for (i6 = 2; i6 < 162; i6++) {
            s1 = (short)i6;
            i3 = i6;
            i3 >>= i3;
            i7 = (int)l1;
            i7 -= (int)Test.fFld;
            b1 = b1;
            Test.fFld -= i3;
            iArr1[i6] = i3;
            Test.instanceCount <<= i7;
            for (i8 = 1; i8 < 10; i8++) {
                if (b1) {
                    i9 *= -233;
                    i3 += i8;
                } else {
                    i7 = (int)25.288F;
                    vMeth1_check_sum += l1 + i3 + i6 + i7 + s1 + (b1 ? 1 : 0) + i8 + i9 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
            }
        }
        vMeth1_check_sum += l1 + i3 + i6 + i7 + s1 + (b1 ? 1 : 0) + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(double d, double d1, long l) {

        int i10=-10, i11=41737, i12=46426, i13=4, i14=-166;

        vMeth1(Test.instanceCount, -1733);
        i10 = 1;
        do {
            l += (i10 * i10);
            for (i11 = 1; i11 < 7; ++i11) {
                i12 = (int)d;
                l = l;
                iArrFld[i11 - 1] = i10;
                Test.instanceCount -= i11;
            }
            i13 = 1;
            do {
                try {
                    iArrFld[i13 + 1] = (-107 % iArrFld[i10 + 1]);
                    i12 = (16145 / i13);
                    i12 = (i11 / i13);
                } catch (ArithmeticException a_e) {}
            } while (++i13 < 7);
            Test.instanceCount += i11;
            i14 = 1;
            while (++i14 < 7) {
                Test.fFld -= i12;
            }
            try {
                i12 = (i13 % 58663804);
                i12 = (i11 / -254);
                i12 = (i12 / i11);
            } catch (ArithmeticException a_e) {}
            d1 -= d1;
        } while (++i10 < 241);
        vMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + l + i10 + i11 + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=0, i2=-35095, i15=8, i16=241, i18=-12, i19=1598;
        double d3=2.79826;
        boolean b2=false;
        byte by=-51;
        long l3=-11L;
        short s2=-24564;

        i = 1;
        do {
            for (i1 = i; i1 < 234; i1++) {
                vMeth(d3, d3, Test.instanceCount);
                iArrFld[i1 + 1] = (int)6L;
                i2 += (int)-114L;
                i2 = i2;
                if (b2) continue;
                by >>>= (byte)i;
                Test.fFld = i;
            }
            for (l3 = 10; l3 < 234; ++l3) {
                i2 = i2;
                i16 = 1;
                do {
                    int i17=4;
                    i15 -= i15;
                    Test.fFld -= i17;
                    i17 <<= (int)-10L;
                    i17 = i15;
                    i15 >>>= i16;
                } while (++i16 < 2);
                Test.instanceCount += l3;
                i15 = (int)-926170703L;
            }
            Test.fFld += (-4 + (i * i));
            Test.instanceCount += (2740009063L + (i * i));
            i15 += (int)(5424845117300081391L + (i * i));
            Test.instanceCount <<= by;
        } while ((i += 3) < 321);
        i2 = i16;
        Test.instanceCount = (long)Test.fFld;
        for (i18 = 10; i18 < 319; i18++) {
            i15 = 4;
            i2 >>>= i1;
            Test.lFld = s2;
            Test.lFld *= i1;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
