package tests.javafuzzer2058;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:12:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8756986039656812511L;
    public double dFld=-118.9729;
    public static boolean bFld=true;
    public static volatile byte byFld=115;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.63976);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i8=-179, i9=9, i10=118, i11=1, i12=-62349, iArr[]=new int[N];
        double d1=74.113389;
        float f1=0.353F;
        short s=-27618;
        byte by=44;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -49671);
        FuzzerUtils.init(bArr, true);

        i8 -= 2;
        Test.instanceCount <<= Test.instanceCount;
        if (Test.bFld) {
            i8 += (int)d1;
            i8 += i8;
            iArr = iArr;
            for (i9 = 15; 267 > i9; i9++) {
                for (f1 = 1; 6 > f1; ++f1) {
                    i11 *= i10;
                    bArr[(int)(f1 + 1)] = Test.bFld;
                    i10 += (int)(((f1 * f) + s) - i10);
                    f *= Test.instanceCount;
                    if (Test.bFld) break;
                    i11 = by;
                }
                i8 += 20162;
            }
        } else {
            i12 += i8;
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d1) + i9 + i10 +
            Float.floatToIntBits(f1) + i11 + s + by + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(long l, int i7) {

        float f2=0.330F;
        long l1=3465029235L;
        double d2=-67.50111;
        int i13=-11, i15=-35163, i16=-125, i17=-34693, iArr1[]=new int[N];
        short s1=-25827;

        FuzzerUtils.init(iArr1, -58843);

        i7 += -33964;
        vMeth2(f2);
        l1 = 12339;
        for (d2 = 5; d2 < 147; d2++) {
            i15 = 1;
            do {
                f2 *= i15;
                for (i16 = 1; 1 > i16; i16++) {
                    iArr1[i16 - 1] -= (int)-33175L;
                    l1 = i7;
                    i13 >>>= -64583;
                    i7 = i16;
                    iArr1[i15] += i17;
                    if (Test.bFld) {
                        try {
                            i17 = (iArr1[i15] % -35295);
                            i7 = (iArr1[i15 + 1] % i16);
                            i17 = (i15 / -11378);
                        } catch (ArithmeticException a_e) {}
                        i7 -= (int)d2;
                    } else if (Test.bFld) {
                        i13 += (((i16 * i16) + s1) - l1);
                    } else {
                        l &= s1;
                    }
                }
            } while (++i15 < 11);
        }
        vMeth1_check_sum += l + i7 + Float.floatToIntBits(f2) + l1 + Double.doubleToLongBits(d2) + i13 + i15 + i16 +
            i17 + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i4, int i5) {

        double d=0.66416, d3=1.73442;
        int i6=-102, i18=96, i19=160, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -15647);

        for (d = 18; d < 310; ++d) {
            vMeth1(Test.instanceCount, i4);
            i5 += (int)d;
            Test.byFld = (byte)i6;
            if (Test.bFld) break;
            Test.instanceCount = i4;
            d3 = 1;
            while (++d3 < 6) {
                i5 = (int)Test.instanceCount;
            }
            for (i18 = 1; i18 < 6; i18++) {
                i5 >>= (int)Test.instanceCount;
                Test.byFld <<= (byte)Test.instanceCount;
                i5 <<= i6;
                try {
                    i4 = (-186 % i5);
                    iArr2[(int)(d + 1)] = (112 % i19);
                    i4 = (i18 % iArr2[(int)(d)]);
                } catch (ArithmeticException a_e) {}
                if (Test.bFld) continue;
            }
            i19 >>>= i4;
        }
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d) + i6 + Double.doubleToLongBits(d3) + i18 + i19 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-69, i1=20353, i2=-14, i3=61947, i20=-12078, i21=17046, i22=-235, i23=175, iArr3[]=new int[N];
        float f3=0.234F, fArr[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr3, 121);
        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(fArr, -1.647F);

        for (i = 13; 304 > i; i++) {
            for (i2 = 2; i2 < 86; i2++) {
                short s2=-7638;
                i1 <<= (int)(32513 + (--dFld));
                vMeth(i, i1);
                Test.dArrFld[i - 1] *= 183;
                Test.dArrFld = FuzzerUtils.double1array(N, (double)1.83678);
                i1 -= Test.byFld;
                Test.instanceCount += i;
                i1 += i2;
                Test.instanceCount = s2;
            }
            i1 = 4;
            Test.instanceCount |= i2;
            i1 *= (int)-5L;
            for (i20 = 86; 3 < i20; i20--) {
                f3 += (((i20 * i2) + i3) - Test.instanceCount);
                for (i22 = 1; i22 < 2; i22++) {
                    iArr3[i] %= (int)(i1 | 1);
                    Test.instanceCount += i22;
                    i1 = (int)Test.instanceCount;
                    i1 += (i22 ^ i2);
                    switch (((i % 1) * 5) + 99) {
                    case 100:
                        dFld -= -5557;
                        i23 = (int)Test.instanceCount;
                        break;
                    default:
                        Test.instanceCount *= (long)dFld;
                        lArr = FuzzerUtils.long1array(N, (long)-37246L);
                    }
                    iArr3[i] *= i;
                    fArr[i22 - 1][i22] = -190;
                    dFld = i21;
                    iArr3[i22 + 1] = (int)Test.instanceCount;
                    f3 += i1;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
