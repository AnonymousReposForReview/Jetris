package tests.javafuzzer3295;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:40:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 49754);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        short s=-8036;
        int i4=-57569, i5=13, i7=-12, i8=11, i9=31242, iArr[][]=new int[N][N];
        float f=-54.285F;
        boolean b=false;
        byte by=-22, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)105);
        FuzzerUtils.init(iArr, 5);

        s = (short)i4;
        i4 *= i4;
        f %= (i4 | 1);
        i5 = 1;
        do {
            if (b) break;
            i4 += i4;
            for (i7 = 1; 5 > i7; ++i7) {
                i8 += i5;
                i8 ^= i4;
            }
        } while (++i5 < 336);
        Test.iArrFld[(i9 >>> 1) % N] <<= i4;
        byArr[(i8 >>> 1) % N] = (byte)-64340;
        i8 <<= (int)Test.instanceCount;
        by += (byte)i5;
        i9 <<= (int)Test.instanceCount;
        iArr = iArr;
        vMeth1_check_sum += s + i4 + Float.floatToIntBits(f) + i5 + (b ? 1 : 0) + i7 + i8 + i9 + by +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i3, long l) {

        float f1=-17.339F, f2=75.710F;
        int i10=-57312, i11=-1, i12=2, i13=-3;
        boolean b1=false;

        vMeth1();
        f1 += l;
        for (i10 = 15; i10 < 320; ++i10) {
            for (i12 = 1; i12 < 5; i12 += 3) {
                Test.instanceCount = 98;
                i3 -= i12;
                i13 += 10;
            }
            Test.instanceCount *= -14;
            f2 = i13;
            if (b1) break;
            f1 += i10;
            f2 += l;
            b1 = false;
        }
        Test.instanceCount = i10;
        i11 &= (int)Test.instanceCount;
        vMeth_check_sum += i3 + l + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + (b1 ?
            1 : 0);
    }

    public long lMeth(int i) {

        int i1=-134, i2=-1, i14=83, i15=-7352, i16=226, i17=-49563, i18=-27092, i19=-3, i20=-224;
        float f3=1.591F;
        double d=0.31082;
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1195757563L);

        for (i1 = 4; i1 < 275; i1++) {
            vMeth(-48565, Test.instanceCount);
            Test.instanceCount = i2;
        }
        for (i14 = 3; i14 < 303; ++i14) {
            for (i16 = 1; i16 < 6; i16++) {
                i15 += (int)f3;
                lArr = lArr;
                for (i18 = 1; 2 > i18; i18++) {
                    i20 /= (int)((long)(f3) | 1);
                    i19 = i1;
                    d = 33;
                    i >>>= (int)Test.instanceCount;
                    if (b2) break;
                    Test.instanceCount += (i18 | i16);
                    d += i1;
                }
            }
        }
        long meth_res = i + i1 + i2 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f3) + i18 + i19 + i20 +
            Double.doubleToLongBits(d) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=45586, i22=6, i23=21179, i24=88, i25=-13, i26=-13575, i27=-53, iArr1[]=new int[N];
        float f4=0.773F, fArr[]=new float[N];
        short s1=-11598;
        double d1=1.45181;

        FuzzerUtils.init(fArr, 80.296F);
        FuzzerUtils.init(iArr1, 10);

        lMeth(-154);
        i21 = 1;
        while (++i21 < 226) {
            Test.instanceCount = i21;
        }
        for (i22 = 12; i22 < 249; i22++) {
            for (i24 = 2; i24 < 106; i24++) {
                switch ((((i22 >>> 1) % 10) * 5) + 29) {
                case 56:
                    Test.iArrFld = Test.iArrFld;
                    for (i26 = i24; 2 > i26; i26++) {
                        Test.instanceCount += Test.instanceCount;
                        i25 += (int)Test.instanceCount;
                        fArr[i22] = (float)34.48751;
                        i27 = (int)Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                        i27 += -225;
                        switch (((i26 >>> 1) % 10) + 65) {
                        case 65:
                        case 66:
                            i25 /= (int)(i24 | 1);
                            Test.iArrFld[i22] <<= i21;
                            Test.instanceCount += (((i26 * i27) + Test.instanceCount) - i27);
                            break;
                        case 67:
                            switch (((i26 >>> 1) % 10) + 36) {
                            case 36:
                                Test.instanceCount %= -2462201958968079856L;
                                i27 += (((i26 * Test.instanceCount) + Test.instanceCount) - f4);
                            case 37:
                                fArr = fArr;
                                fArr[i26 - 1] = i25;
                                break;
                            case 38:
                                i23 -= i24;
                                i23 = i27;
                                Test.instanceCount += (14565 + (i26 * i26));
                                break;
                            case 39:
                            case 40:
                            case 41:
                                s1 += (short)(i26 * i26);
                                f4 -= Test.instanceCount;
                                Test.iArrFld[i26 + 1] = i24;
                                i23 -= -2;
                                break;
                            case 42:
                                i25 >>= i27;
                                break;
                            case 43:
                                if (bFld) break;
                                break;
                            case 44:
                                iArr1 = iArr1;
                                break;
                            case 45:
                            }
                            break;
                        case 68:
                            d1 += i22;
                        case 69:
                            i25 = i23;
                            break;
                        case 70:
                            Test.instanceCount = i23;
                        case 71:
                            i23 = i26;
                        case 72:
                            d1 -= i26;
                            break;
                        case 73:
                            f4 += i26;
                            break;
                        case 74:
                            if (false) break;
                            break;
                        default:
                            iArr1[i26] -= 4;
                        }
                    }
                    break;
                case 53:
                    i27 = i22;
                    break;
                case 50:
                    iArr1[i22] = i26;
                    break;
                case 60:
                    i25 += (int)d1;
                    break;
                case 71:
                    f4 += (i24 * i24);
                    break;
                case 78:
                    i25 += (int)(46567L + (i24 * i24));
                    break;
                case 61:
                    i25 |= (int)Test.instanceCount;
                case 73:
                    i23 -= (int)d1;
                    break;
                case 59:
                    i23 += (((i24 * i21) + i27) - f4);
                case 42:
                    i23 >>= i26;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
