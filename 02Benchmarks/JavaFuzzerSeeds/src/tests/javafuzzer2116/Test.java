package tests.javafuzzer2116;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:09:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6381338682904204353L;
    public static int iFld=25;
    public static byte byFld=71;
    public float fFld=1.285F;
    public static int iFld1=-2;
    public static volatile byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)30);
        FuzzerUtils.init(Test.lArrFld, 7731371803950578116L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i=-1822, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 5);

        iArr[(i >>> 1) % N] = (iArr[(i >>> 1) % N] = (iArr[(i >>> 1) % N] = (iArr[(154 >>> 1) % N] = iArr[(i >>> 1) %
            N])));
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f1, int i12) {

        int i13=-54512, i14=90, i15=41246, iArr2[]=new int[N];
        float f2=1.1006F;
        long l1=-3139224856L;
        double d2=-22.81934, dArr[]=new double[N];
        short s=21733;

        FuzzerUtils.init(dArr, 12.25795);
        FuzzerUtils.init(iArr2, -201);

        i13 = 1;
        do {
            for (f2 = 1; f2 < 18; f2++) {
                dArr[i13] += -11;
                Test.byFld = (byte)l1;
                Test.iFld = i13;
                f1 = i12;
                dArr = dArr;
                d2 = Test.byFld;
                d2 -= Test.instanceCount;
            }
            i14 += i13;
            iArr2[i13 - 1] = s;
            i15 = 1;
            while (++i15 < 18) {
                f1 *= -72;
                i14 <<= s;
                f1 = -82.67F;
            }
        } while ((i13 += 3) < 265);
        vMeth1_check_sum += Float.floatToIntBits(f1) + i12 + i13 + Float.floatToIntBits(f2) + i14 + l1 +
            Double.doubleToLongBits(d2) + s + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i8, int i9, long l) {

        int i10=-96, i11=-5, i16=-6, i17=-12159, i18=31571, i19=-70, i20=79, i21=-22583, i22=2, i23=0, iArr3[]=new
            int[N];
        float f3=2.474F;
        short s1=-7681;

        FuzzerUtils.init(iArr3, -111);

        for (i10 = 13; i10 < 210; ++i10) {
            vMeth1(f3, 62180);
            for (i16 = 1; i16 < 8; i16++) {
                for (i18 = 2; i18 > 1; i18--) {
                    i11 *= -21;
                    iArr3[i16 + 1] += i8;
                    l += (((i18 * Test.iFld1) + Test.iFld) - i8);
                    s1 = (short)118;
                    f3 = i11;
                }
                for (i20 = 2; i20 > 1; i20--) {
                    iArr3[i10 - 1] -= Test.iFld;
                }
                for (i22 = 1; 2 > i22; i22++) {
                    Test.instanceCount = l;
                    i11 = i21;
                    i19 = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + l + i10 + i11 + Float.floatToIntBits(f3) + i16 + i17 + i18 + i19 + s1 + i20 + i21
            + i22 + i23 + FuzzerUtils.checkSum(iArr3);
    }

    public static int iMeth(int i6) {

        double d1=-1.61528;
        int i7=-10322, i24=-46439, i25=3, i26=35327, i27=-10, iArr4[][]=new int[N][N];
        boolean b=true;
        float f4=0.797F;

        FuzzerUtils.init(iArr4, 10403);

        Test.iFld += Test.iFld;
        for (d1 = 9; d1 < 186; d1++) {
            vMeth(35049, -3, Test.instanceCount);
            i7 += (int)d1;
            Test.byArrFld[(int)(d1)] -= (byte)47857;
            if (b) {
                for (i24 = 1; i24 < 9; ++i24) {
                    Test.instanceCount = 242;
                    for (i26 = 2; i26 > 1; i26 -= 2) {
                        try {
                            i27 = (i24 % i24);
                            Test.iFld = (-337082146 / i26);
                            Test.iFld1 = (Test.iFld1 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        b = false;
                        Test.instanceCount = i6;
                        i25 = 228;
                        i7 *= (int)Test.instanceCount;
                        f4 += i26;
                    }
                }
            } else if (b) {
                Test.lArrFld[(int)(d1 - 1)] += i27;
            } else {
                iArr4[(int)(d1 + 1)] = iArr4[(int)(d1 - 1)];
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d1) + i7 + i24 + i25 + i26 + i27 + (b ? 1 : 0) +
            Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr4);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-67.33131;
        int i1=-1, i2=12, i3=-127, i4=9, i5=33944, i28=4349, i29=-10, i30=1865, i31=61147, iArr1[]=new int[N];
        float f=0.468F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -113);
        FuzzerUtils.init(lArr, -1L);
        FuzzerUtils.init(byArr, (byte)9);

        for (int smallinvoc=0; smallinvoc<899; smallinvoc++) vSmallMeth();
        Test.instanceCount += (((29760 * (-4288 - (Test.iFld * Test.iFld))) - Test.byFld) * (Test.iFld++));
        Test.instanceCount = (long)(iArr1[(Test.iFld >>> 1) % N] = (int)(--d));
        Test.iFld += (int)(lArr[(-191 >>> 1) % N] - (fFld + 148));
        for (i1 = 4; i1 < 158; ++i1) {
            Test.iFld = (int)(((-31230 - (fFld - -100.857F)) + (i1 + -23873)) - (i1 | byArr[i1 + 1]));
        }
        f = 1;
        do {
            i3 = 1;
            while (++i3 < 69) {
                try {
                    Test.iFld = (17456 / i1);
                    Test.iFld = (Test.iFld1 / i2);
                    Test.iFld1 = (260287980 % iArr1[(int)(f + 1)]);
                } catch (ArithmeticException a_e) {}
                for (i4 = 1; i4 < 1; i4 += 2) {
                    if ((((Test.iFld -= Test.iFld1) - (Test.iFld + d)) + ((i4 - 125) + lArr[i3 + 1])) != i2) continue;
                    i2 <<= (int)(((iArr1[(int)(f + 1)]--) - Test.iFld) + ((Test.instanceCount << i5) *
                        Test.instanceCount));
                    fFld += (i4 + fFld);
                    try {
                        Test.iFld1 = (-34031 % i1);
                        Test.iFld1 = (-104 / Test.iFld1);
                        i5 = (39681 % i2);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount |= iMeth(i1);
                    lArr[i4 - 1] -= Test.iFld1;
                }
                iArr1[i3 + 1] >>= (int)Test.instanceCount;
                i2 /= (int)(i2 | 1);
                for (i28 = 1; i28 < 1; i28 += 3) {
                    i5 = (int)Test.instanceCount;
                    if (false) break;
                    Test.iFld -= -169;
                }
                Test.instanceCount += (i3 | Test.instanceCount);
                i5 -= (int)118.782F;
                i2 = i1;
                Test.iFld += i3;
                Test.instanceCount = i5;
            }
            i30 = 1;
            while ((i30 += 3) < 69) {
                i31 >>= (int)Test.instanceCount;
                Test.iFld1 >>= Test.iFld1;
            }
        } while (++f < 365);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
