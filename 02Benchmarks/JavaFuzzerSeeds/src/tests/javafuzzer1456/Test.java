package tests.javafuzzer1456;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:02:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4183490519L;
    public static short sFld=1958;
    public static int iFld=-10;
    public static float fFld=-2.966F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2213);
        FuzzerUtils.init(Test.lArrFld, 10L);
        FuzzerUtils.init(Test.dArrFld, -1.81460);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6) {

        int i7=214;

        i7 = 1;
        do {
            short s=768;
            i6 *= s;
        } while (++i7 < 341);
        long meth_res = i6 + i7;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b, int i, int i1) {

        int i2=4, i3=10, i4=6, i5=-36381, iArr[]=new int[N];
        byte by=71;
        float f=1.492F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 167);
        FuzzerUtils.init(lArr, -139168375L);

        for (i2 = 4; 342 > i2; i2 += 3) {
            i4 = 1;
            while (++i4 < 14) {
                i5 = 1;
                do {
                    iArr[i5] -= (((-iMeth1(5)) * by) + i1);
                    f = -35;
                    switch (((i >>> 1) % 5) + 10) {
                    case 10:
                        i3 /= (int)(i | 1);
                        try {
                            i3 = (122 / i2);
                            i = (iArr[i2] / 49018);
                            iArr[i2] = (1871068404 % i5);
                        } catch (ArithmeticException a_e) {}
                        if (i2 != 0) {
                        }
                        lArr[i2 - 1] -= i5;
                    case 11:
                        i3 = i;
                    case 12:
                        lArr[i2] -= Test.instanceCount;
                        i3 = 7510;
                        iArr[i2 + 1] += i3;
                    case 13:
                        Test.instanceCount = -1886334162L;
                        break;
                    case 14:
                        i += (i5 | i2);
                    }
                } while (++i5 < 1);
            }
        }
        long meth_res = (b ? 1 : 0) + i + i1 + i2 + i3 + i4 + i5 + by + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        boolean b1=true;
        int i8=0, i9=-21976, i10=11, i11=-2, i12=-238;
        byte by1=36, byArr[]=new byte[N];
        float f1=-2.551F;
        double d=1.11584;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -640627651039158689L);
        FuzzerUtils.init(byArr, (byte)-63);

        switch (((iMeth(b1, i8, i8) >>> 1) % 9) + 21) {
        case 21:
            Test.sFld <<= by1;
            Test.iArrFld[(i8 >>> 1) % N] = i8;
            lArr1[(i8 >>> 1) % N] += i8;
            for (i9 = 12; i9 < 306; ++i9) {
                i11 = 1;
                while ((i11 += 3) < 6) {
                    Test.instanceCount -= Test.instanceCount;
                    i8 = i9;
                    by1 |= (byte)i10;
                    i12 = 1;
                    while (++i12 < 3) {
                        switch (((i11 % 6) * 5) + 121) {
                        case 137:
                            Test.iArrFld[i11] -= (int)Test.instanceCount;
                            byArr = byArr;
                            Test.iArrFld[i9] = (int)1103695460L;
                            f1 += (float)d;
                            break;
                        case 129:
                            i8 += (int)Test.instanceCount;
                        case 141:
                            i8 <<= i10;
                            break;
                        case 146:
                            d -= d;
                            break;
                        case 124:
                            f1 -= 22008;
                            break;
                        case 127:
                            Test.instanceCount = i10;
                            break;
                        }
                    }
                }
            }
            break;
        case 22:
            Test.instanceCount = i8;
            break;
        case 23:
            Test.iArrFld[(i11 >>> 1) % N] += i11;
        case 24:
            d = i11;
            break;
        case 25:
            i10 = by1;
            break;
        case 26:
            i10 = (int)f1;
            break;
        case 27:
            Test.iArrFld[(i10 >>> 1) % N] = (int)Test.instanceCount;
            break;
        case 28:
            i10 *= Test.iFld;
            break;
        case 29:
            lArr1[(i12 >>> 1) % N] -= i9;
            break;
        default:
            Test.iFld = -18;
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i8 + by1 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=-215, i14=199, i15=-9282, i16=172, i17=-21165, i18=-77;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.120F);

        vMeth();
        Test.instanceCount = Test.instanceCount;
        switch (((Test.iFld >>> 1) % 2) + 116) {
        case 116:
            i13 = 1;
            do {
                Test.instanceCount = (long)Test.fFld;
                for (i14 = 3; i14 < 66; i14++) {
                    i15 -= i14;
                    Test.instanceCount += Test.instanceCount;
                    Test.lArrFld[i14 + 1] = -27593;
                    i15 = Test.sFld;
                }
                Test.dArrFld[i13 - 1] /= (Test.instanceCount | 1);
                i16 = 1;
                while (++i16 < 66) {
                    i15 ^= i15;
                    Test.instanceCount <<= i15;
                    i15 += i16;
                }
            } while (++i13 < 384);
            break;
        case 117:
        default:
            Test.iFld %= (int)(Test.iFld | 1);
            Test.instanceCount = (long)Test.fFld;
            for (i17 = 2; i17 < 186; ++i17) {
                boolean b2=true;
                Test.iFld -= (int)Test.instanceCount;
                i18 += i17;
                Test.instanceCount += i17;
                Test.instanceCount += i17;
                i15 -= i18;
                Test.dArrFld[i17 - 1] += Test.fFld;
                try {
                    Test.iArrFld[i17 - 1] = (i15 % i13);
                    i15 = (-8462 % i14);
                    Test.iArrFld[i17] = (i18 / i15);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
                if (b2) continue;
            }
            Test.iArrFld = Test.iArrFld;
        }
        Test.fFld *= 3052443491L;
        Test.iFld += 12;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
