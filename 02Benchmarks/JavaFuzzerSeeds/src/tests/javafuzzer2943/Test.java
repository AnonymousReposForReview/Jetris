package tests.javafuzzer2943;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:26:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-107L;
    public static float fFld=-68.378F;
    public static volatile int iFld=142;
    public static boolean bFld=true;
    public static int iFld1=-9;
    public double dFld=1.56229;
    public static byte byFld=-63;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=5869, i5=-928, i6=-868, i7=49, i8=191, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5832);

        for (i4 = 12; i4 < 314; ++i4) {
            switch (((-5 >>> 1) % 4) + 34) {
            case 34:
                for (i6 = i4; i6 < 5; i6++) {
                    double d=0.78763;
                    iArr[i6 - 1] -= i4;
                    i5 *= (int)Test.fFld;
                    Test.instanceCount = 0;
                    i5 = (int)Test.instanceCount;
                    iArr[i6 - 1] -= (int)d;
                    if (true) continue;
                    Test.instanceCount = i6;
                    i8 = 1;
                    do {
                        Test.instanceCount = (long)d;
                        i7 <<= i7;
                        Test.instanceCount += (i8 - Test.instanceCount);
                        i5 -= i8;
                    } while (++i8 < 1);
                }
                break;
            case 35:
            case 36:
                Test.instanceCount *= i7;
                break;
            case 37:
                Test.instanceCount -= -3934222606L;
                break;
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i9=27946, i10=0, i11=14, i12=-3, i13=91, i14=-197, iArr1[]=new int[N];
        double d1=-47.111160;
        long l=-63755L;

        FuzzerUtils.init(iArr1, 29423);

        vMeth1();
        i9 *= -6;
        for (i10 = 2; i10 < 321; ++i10) {
            i11 = i9;
            if (Test.bFld) {
                i12 = 1;
                do {
                    iArr1[i10 - 1] = Test.iFld;
                    i11 = i11;
                    d1 = 6;
                    i9 <<= i12;
                } while (++i12 < 5);
            } else {
                for (i13 = i10; i13 < 5; ++i13) {
                    l = i13;
                    d1 -= 2.381F;
                }
            }
            Test.instanceCount = Test.iFld;
            i11 = (int)49125L;
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i13 + i14 + l +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1, int i2, int i3) {


        i3 *= (int)(Test.instanceCount++);
        vMeth();
        long meth_res = i1 + i2 + i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i15=-4, i16=8579, i17=14468, i18=18117, i19=-13, i21=-209, i22=-61236, i23=181, i24=2148, i25=49047,
            i26=12, iArr2[]=new int[N];
        short s=-14160;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -137);
        FuzzerUtils.init(lArr, -6534711277356954463L);
        FuzzerUtils.init(dArr, 75.75900);

        i = iMeth(Test.iFld, i, Test.iFld);
        for (i15 = 18; 368 > i15; i15++) {
            switch (((31428 >>> 1) % 5) + 74) {
            case 74:
                i = i15;
                i17 = 1;
                while (++i17 < 72) {
                    for (i18 = 1; i18 < 1; ++i18) {
                        Test.iFld1 += -29932;
                        dFld -= Test.instanceCount;
                        switch ((i15 % 2) + 27) {
                        case 27:
                            Test.byFld *= (byte)i17;
                            break;
                        case 28:
                            Test.instanceCount >>= s;
                            i16 *= i18;
                            break;
                        }
                        Test.instanceCount >>= Test.iFld;
                    }
                }
                Test.iFld1 = (int)Test.instanceCount;
                break;
            case 75:
                lArr[i15 + 1] *= -35;
                Test.instanceCount *= i18;
                Test.fFld += i15;
                for (i21 = 2; i21 < 72; i21++) {
                    Test.instanceCount = (long)dFld;
                }
                break;
            case 76:
                Test.iFld += (i15 ^ i16);
            case 77:
                i22 *= (int)dFld;
                dArr[i15 - 1] += Test.iFld1;
                for (i23 = 2; i23 < 72; i23++) {
                    i19 += (((i23 * i17) + Test.fFld) - i22);
                    for (i25 = i23; i25 < 2; i25++) {
                        i += (((i25 * Test.instanceCount) + i16) - i22);
                    }
                    try {
                        iArr2[i23 + 1] = (-49200 % i15);
                        iArr2[i23] = (i21 / 8425);
                        i16 = (iArr2[i23] / i15);
                    } catch (ArithmeticException a_e) {}
                    i19 = (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    Test.bFld = false;
                }
            case 78:
                i26 *= (int)Test.fFld;
                break;
            default:
                i26 >>>= 7;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
