package tests.javafuzzer812;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:21:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1733183204707950159L;
    public static volatile int iFld=-7;
    public static double dFld=76.95068;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long lMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=-66, i7=-28447, i8=-47438, i9=3, i10=12, i11=10, i12=7, i13=6, iArr[]=new int[N];
        double d1=-5.91528;
        float f1=-2.129F;

        FuzzerUtils.init(iArr, -17541);

        for (i6 = 15; 392 > i6; i6++) {
            i7 = i7;
            Test.instanceCount += i6;
            i7 /= (int)(Test.iFld | 1);
            i7 = (int)Test.instanceCount;
            for (i8 = 1; i8 < 4; ++i8) {
                iArr = iArr;
                i7 = (int)Test.instanceCount;
                Test.instanceCount |= Test.instanceCount;
                iArr = iArr;
            }
        }
        for (i10 = 5; i10 < 154; ++i10) {
            Test.instanceCount *= i10;
            for (d1 = i10; d1 < 11; d1++) {
                try {
                    iArr[i10 - 1] = (i11 % Test.iFld);
                    i13 = (i6 % i6);
                    i12 = (Test.iFld % 48415);
                } catch (ArithmeticException a_e) {}
                iArr[(int)(d1 + 1)] = (int)f1;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static short sMeth(int i3, int i4) {

        int i5=211;
        double d=-61.36798;

        i5 = 330;
        do {
            d += -243;
            vMeth();
            i4 = i5;
            Test.instanceCount += 60316;
            Test.instanceCount = i4;
        } while (--i5 > 0);
        Test.instanceCount = i3;
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth(int i2, float f) {

        int i14=13, i15=3, i16=3, i17=1598, i18=0, i19=-157;
        byte by=71;
        short s=-2559;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        i2 -= ((sMeth(i2, -143) + i2) * i2);
        for (i14 = 171; i14 > 1; i14 -= 3) {
            f *= Test.iFld;
            for (i16 = 1; i16 < 27; i16 += 2) {
                by >>= (byte)Test.iFld;
                Test.iArrFld[i14] += Test.iFld;
                for (i18 = 1; 3 > i18; i18++) {
                    by *= (byte)Test.dFld;
                    try {
                        i17 = (i17 / Test.iArrFld[i18]);
                        i15 = (Test.iFld % i14);
                        Test.iFld = (i17 / i17);
                    } catch (ArithmeticException a_e) {}
                    switch ((((i18 >>> 1) % 2) * 5) + 63) {
                    case 64:
                        if (i17 != 0) {
                        }
                        i17 = (int)88.105100;
                        Test.iArrFld[i18 - 1] >>= (int)-9L;
                        i2 = i14;
                        break;
                    case 66:
                        Test.iArrFld[i18 - 1] -= s;
                        break;
                    default:
                        lArr[i14 - 1] += i17;
                    }
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + by + i18 + i19 + s +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-119, i1=-80, i20=27910, i21=2, i22=58941, i23=-126, i24=8, i25=-236, i26=5, i27=-49, i28=-47831;
        float f2=-80.351F;
        long l=-10L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-7);

        for (i = 386; i > 9; --i) {
            switch (((i % 2) * 5) + 101) {
            case 108:
                Test.iFld = (int)lMeth(i, f2);
                f2 = (float)Test.dFld;
                for (i20 = i; 67 > i20; ++i20) {
                    f2 = 126.135F;
                    byArr[i20 - 1] -= (byte)-109;
                    i1 = i20;
                    Test.instanceCount -= (long)Test.dFld;
                }
            case 105:
                switch (((4 >>> 1) % 8) + 6) {
                case 6:
                    for (i22 = i; 67 > i22; i22++) {
                        boolean b=true;
                        i21 += i22;
                        i1 += (i22 ^ i20);
                        if (b) {
                            for (i24 = 1; i24 < 1; ++i24) {
                                f2 -= (float)Test.dFld;
                                try {
                                    i23 = (-102 / i25);
                                    i21 = (-203 / i);
                                    i25 = (-33401 % Test.iArrFld[i22 + 1]);
                                } catch (ArithmeticException a_e) {}
                                Test.iArrFld[i24] = i1;
                                i25 += i21;
                            }
                            for (i26 = 1; i26 < 1; ++i26) {
                                Test.iArrFld[i26 - 1] += i21;
                                i21 *= Test.iFld;
                                Test.instanceCount += (i26 ^ i20);
                                i21 -= i20;
                            }
                            switch (((i % 4) * 5) + 15) {
                            case 21:
                                i1 *= i1;
                                break;
                            case 28:
                                i25 = -29;
                                i23 <<= i1;
                                break;
                            case 34:
                                i28 += i23;
                                l *= i;
                                break;
                            case 33:
                                Test.iArrFld[i] += i22;
                                break;
                            default:
                                i27 = i28;
                            }
                        } else {
                            i1 <<= i27;
                        }
                    }
                    break;
                case 7:
                    i28 *= i21;
                    break;
                case 8:
                    i23 <<= i28;
                    break;
                case 9:
                    i28 *= (int)-1.374F;
                    break;
                case 10:
                    i1 += (int)l;
                case 11:
                    i28 += (int)93.81576;
                case 12:
                    Test.iArrFld[i + 1] -= (int)20.112331;
                    break;
                case 13:
                    i23 = i28;
                    break;
                }
                break;
            default:
                i28 = -58794;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
