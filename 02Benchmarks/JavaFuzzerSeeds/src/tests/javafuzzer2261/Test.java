package tests.javafuzzer2261;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:05:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2572185476L;
    public static boolean bFld=false;
    public double dFld=0.48047;
    public static float fFld=0.680F;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 115.129875);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5) {

        int i6=-54329, i7=57161, i8=-27064, i9=-5, i10=7, i11=-50949;
        float f2=2.865F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -14L);

        i6 = 1;
        do {
            for (i7 = 1; i7 < 4; ++i7) {
                Test.instanceCount += (9 + (i7 * i7));
                for (f2 = 1; f2 < 2; ++f2) {
                    i9 *= i8;
                    i9 = (int)-111.373F;
                    Test.instanceCount = (long)f2;
                }
                i5 += (140 + (i7 * i7));
                if (Test.bFld) {
                    i9 &= i9;
                    i5 = i6;
                    for (i10 = 2; 1 < i10; i10--) {
                        float f3=-9.726F;
                        lArr1[i10 - 1] -= i10;
                        i11 += (((i10 * i7) + i8) - Test.instanceCount);
                        f3 -= Test.instanceCount;
                    }
                } else {
                    Test.instanceCount <<= Test.instanceCount;
                }
            }
        } while (++i6 < 398);
        long meth_res = i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=0.228F;
        int i2=30382, i3=-8301, i4=13, i12=11943, i13=-45411, i14=55296, i15=-13, iArr[]=new int[N];
        double d=78.99604;
        byte by=-80;
        short s=22307;

        FuzzerUtils.init(iArr, 39447);

        f1 *= (float)(((--i2) + (i2--)) % (((long)(0.127455 * (i2 * d))) | 1));
        for (i3 = 14; i3 < 308; i3++) {
            f1 -= ((iMeth(i2) - f1) + i3);
            by -= (byte)Test.instanceCount;
            i4 = (int)Test.instanceCount;
            i2 += (((i3 * i4) + f1) - i4);
            Test.dArrFld[i3 + 1] += 78.548F;
            i4 += (i3 | s);
            for (i12 = 6; i12 > i3; i12 -= 3) {
                i13 += (-35 + (i12 * i12));
            }
            for (i14 = 6; i14 > 1; --i14) {
                Test.dArrFld[i14] += f1;
                iArr[i3] = (int)Test.instanceCount;
                Test.instanceCount = (long)d;
                Test.instanceCount = by;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i2 + Double.doubleToLongBits(d) + i3 + i4 + by + s + i12 + i13 +
            i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(float f, boolean b) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3418098255L);

        vMeth();
        vSmallMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-26245, i1=-14, i16=8, i17=-29690, i18=-14, i19=-6, i20=166, i21=-5, iArr1[]=new int[N];
        short s1=-16502, sArr[]=new short[N];
        byte by1=3;
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)18232);
        FuzzerUtils.init(lArr2, -85L);
        FuzzerUtils.init(iArr1, -5);

        for (i = 9; 235 > i; i++) {
            i1 -= i;
        }
        for (int smallinvoc=0; smallinvoc<975; smallinvoc++) vSmallMeth(54.402F, Test.bFld);
        i1 += 11;
        for (i16 = 19; i16 < 310; i16++) {
            if (Test.bFld) continue;
            s1 += (short)(i16 + i);
            s1 = (short)dFld;
            for (i18 = 86; i18 > 3; --i18) {
                i1 += (i18 * i18);
                for (i20 = 1; i20 < 2; ++i20) {
                    i1 *= i17;
                    i19 += i20;
                    Test.fFld = -153;
                    if (Test.bFld) continue;
                    i1 &= (int)Test.instanceCount;
                    i1 *= -66;
                    Test.fFld += i17;
                    i17 -= i;
                    i21 += i21;
                }
                Test.fFld -= 1;
                sArr = sArr;
                i19 = i17;
                lArr2[i18 - 1] = i;
                Test.instanceCount &= i20;
            }
            i19 = (int)Test.instanceCount;
            iArr1[i16] -= (int)Test.instanceCount;
            i17 += (i16 * by1);
            i21 = i18;
            Test.instanceCount *= (long)dFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
