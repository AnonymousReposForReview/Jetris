package tests.javafuzzer1398;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:46:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9819L;
    public static float fFld=27.341F;
    public static boolean bFld=true;
    public int iFld=-42069;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -5.107369);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(int i) {

        int i1=-51, i2=-38665;

        Test.fFld = i;
        for (i1 = 7; i1 < 122; i1++) {
            i2 += (((i1 * i2) + i) - Test.instanceCount);
        }
        long meth_res = i + i1 + i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        double d=68.36267;
        int i10=-60763, i11=-65280, i12=-205, i13=-480, iArr1[]=new int[N];
        short s1=11347;
        boolean b=true;
        float f2=-40.475F;

        FuzzerUtils.init(iArr1, 17415);

        for (int i9 : iArr1) {
            switch (((i9 >>> 1) % 10) + 54) {
            case 54:
                i9 *= (int)d;
                for (i10 = 4; i10 > 1; i10 -= 3) {
                    i9 = i10;
                    Test.fFld += i9;
                    i11 += (i10 * s1);
                    Test.fFld *= Test.instanceCount;
                    try {
                        i11 = (i9 / -12);
                        i11 = (iArr1[i10 - 1] / i10);
                        i9 = (-1991717039 % i10);
                    } catch (ArithmeticException a_e) {}
                    if (b) continue;
                    for (i12 = 4; i12 > i10; i12--) {
                        Test.dArrFld[i12] -= i9;
                        i9 += (i12 ^ i11);
                        Test.instanceCount >>>= i13;
                        f2 *= (float)d;
                    }
                }
                break;
            case 55:
                Test.instanceCount = i9;
                break;
            case 56:
                Test.instanceCount *= 137;
                break;
            case 57:
                i11 = (int)d;
            case 58:
                i9 += i10;
                break;
            case 59:
                f2 -= i9;
            case 60:
                iArr1[(i10 >>> 1) % N] *= i13;
                break;
            case 61:
                Test.fFld += i11;
                break;
            case 62:
                i11 += (int)Test.fFld;
                break;
            case 63:
                iArr1[(-102 >>> 1) % N] *= (int)d;
                break;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i10 + i11 + s1 + (b ? 1 : 0) + i12 + i13 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth2(int i5, int i6, float f1) {

        int i7=-4, i8=50, i14=-3, i15=10, i16=-11, i17=8, i18=-14, iArr2[]=new int[N];
        byte by1=-58;
        float f3=1.818F;

        FuzzerUtils.init(iArr2, 53782);

        Test.instanceCount = i6;
        for (i7 = 1; i7 < 131; ++i7) {
            Test.instanceCount >>= -8;
            vMeth();
            for (i14 = 1; i14 < 12; ++i14) {
                for (i16 = 1; i16 < 2; i16 += 2) {
                    Test.instanceCount *= (long)f1;
                    i8 -= (int)104L;
                    Test.instanceCount += (i16 * i16);
                    by1 *= (byte)i8;
                    iArr2[i7 - 1] >>= -38071;
                    i6 = i6;
                }
                for (f3 = 1; f3 < 2; f3++) {
                    i15 >>= (int)Test.instanceCount;
                    i6 >>= i18;
                }
            }
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i14 + i15 + i16 + i17 + by1 +
            Float.floatToIntBits(f3) + i18 + FuzzerUtils.checkSum(iArr2);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i3) {

        byte by=49;
        int i4=-6941, iArr[]=new int[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -19.209F);
        FuzzerUtils.init(iArr, -344);
        FuzzerUtils.init(lArr, -56906L);

        by -= (byte)i3;
        for (float f : fArr) {
            Test.fFld += ((Math.abs(i3) * 3215) * i3);
            i3 += (int)((--i3) + ((i3 + f) + (-198 - (i3 ^ i3))));
            i4 = 1;
            while (++i4 < 4) {
                short s=-30158;
                Test.dArrFld[i4 - 1] += i4;
                i3 += (s--);
                iArr[i4] += i4;
                Test.instanceCount += (((i3--) - (-146 + (++by))) + ((0L + (10 - (-33926 & iMeth(-48)))) - (i3--)));
                i3 += (((i4 * Test.fFld) + i4) - f);
                lArr[i4 - 1] = ((lArr[i4] = (++i3)) - i3);
                i3 += (int)(iMeth2(i3, i3, Test.fFld) - f);
                i3 += (int)-67.78910;
                i3 += -3;
            }
            i3 *= (int)Test.instanceCount;
        }
        long meth_res = i3 + by + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=50, i20=61680, i21=88, i22=13, i23=-11, i24=-78, i25=-59, iArr3[]=new int[N];
        short s2=16259;
        double d1=1.15221, d2=109.31730;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -14L);
        FuzzerUtils.init(iArr3, -51337);

        iMeth(iMeth1(i19));
        i19 += (int)Test.instanceCount;
        for (i20 = 12; i20 < 294; i20 += 2) {
            s2 = s2;
            for (d1 = i20; 178 > d1; ++d1) {
                for (i23 = 1; i23 < 1; i23++) {
                    i24 += (((i23 * i24) + i23) - Test.fFld);
                    lArr1[(int)(d1 + 1)] >>= i23;
                }
                lArr1[(int)(d1 + 1)] = 4167;
                Test.instanceCount += i24;
                for (d2 = 1; d2 > 1; d2--) {
                    iArr3[(int)(d1 + 1)] <<= -39465;
                    i19 = i23;
                    i22 = i20;
                    Test.bFld = false;
                    iArr3 = iArr3;
                    i19 = i25;
                    i19 *= (int)Test.instanceCount;
                    i19 >>= (int)Test.instanceCount;
                }
                Test.instanceCount += (long)((long)d1 ^ i21);
                i19 <<= i21;
                Test.instanceCount *= 6;
                Test.fFld -= i25;
                i25 = i23;
            }
            lArr1[i20 - 1] += Test.instanceCount;
            i24 *= iFld;
            Test.fFld += i22;
            i19 += (41444 + (i20 * i20));
            i24 = (int)Test.instanceCount;
            iArr3[i20 + 1] -= iFld;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest iMeth1
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 mainTest
//DEBUG  vMeth ->  vMeth iMeth2 iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
