package tests.javafuzzer3012;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:01 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-14L;
    public static short sFld=4727;
    public static float fFld=-1.746F;
    public static byte byFld=-28;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 93L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, long l) {

        boolean b=false;
        float f=1.304F, f1=-1.83F;
        byte by1=105;
        int i3=-26550, i4=-27557, i5=-54, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -13);

        if (b) {
            i2 -= 12;
            i2 >>= (int)l;
            l >>>= i2;
        } else if (b) {
            Test.instanceCount <<= 3;
            i2 = i2;
        }
        f = by1;
        iArr = iArr;
        i2 = i2;
        for (f1 = 12; f1 < 352; f1++) {
            for (i4 = 1; i4 < 5; i4++) {
                l = i2;
                i5 = (int)f;
                iArr[(int)(f1)] += -219;
                Test.lArrFld[i4 - 1] = -31444909L;
            }
        }
        vMeth2_check_sum += i2 + l + (b ? 1 : 0) + Float.floatToIntBits(f) + by1 + Float.floatToIntBits(f1) + i3 + i4 +
            i5 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i1) {

        long l1=33116L;
        int i6=6, i7=9, i8=90, i9=-224, i10=-13214, iArr1[]=new int[N];
        float f2=83.81F;
        boolean b1=true, bArr[]=new boolean[N];
        byte by2=102;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 12);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, -123.25190);

        vMeth2(6, l1);
        for (i6 = 8; 303 > i6; i6++) {
            i1 >>= i1;
            iArr1[i6 + 1] -= 22;
            switch ((((i6 >>> 1) % 10) * 5) + 6) {
            case 15:
                f2 = -597815538L;
                i8 = 1;
                do {
                    for (i9 = 1; i9 > 1; --i9) {
                        switch (((i7 >>> 1) % 8) + 20) {
                        case 20:
                        case 21:
                            i1 = i8;
                            break;
                        case 22:
                            i1 -= i9;
                            i7 = i10;
                            bArr[i9 - 1] = b1;
                            i1 += (((i9 * i1) + l1) - i8);
                            break;
                        case 23:
                            i10 ^= i7;
                            break;
                        case 24:
                            i10 -= i1;
                            break;
                        case 25:
                            i10 += -7;
                            break;
                        case 26:
                            i10 += i7;
                        case 27:
                            iArr1 = iArr1;
                            break;
                        default:
                            i7 -= Test.sFld;
                        }
                    }
                } while (++i8 < 6);
                break;
            case 25:
                i10 = i10;
            case 29:
                by2 += (byte)(i6 | l1);
                break;
            case 44:
                Test.lArrFld[i6 - 1] = Test.instanceCount;
                break;
            case 35:
                f2 *= i1;
                break;
            case 30:
                Test.sFld = (short)i6;
                break;
            case 34:
                if (b1) break;
                break;
            case 7:
                iArr1[i6 + 1] *= (int)f2;
                break;
            case 37:
                Test.instanceCount += i10;
                break;
            case 23:
                l1 *= (long)18.87561;
            }
        }
        vMeth1_check_sum += i1 + l1 + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + (b1 ? 1 : 0) + by2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i, byte by, double d) {

        boolean b2=true;
        int i11=58127, i12=-933, i13=14, i14=4, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 11);

        vMeth1(235);
        Test.lArrFld[(i >>> 1) % N] = Test.instanceCount;
        i *= (int)Test.instanceCount;
        b2 = b2;
        iArr2[(i >>> 1) % N] = (int)-1.63825;
        i += (int)Test.instanceCount;
        Test.instanceCount = -59462L;
        Test.fFld -= -144;
        for (i11 = 9; i11 < 201; ++i11) {
            for (i13 = i11; i13 < 8; ++i13) {
                i12 *= (int)-14L;
                Test.lArrFld[i13] = i11;
                i12 -= i12;
                i14 = i11;
                b2 = false;
            }
        }
        vMeth_check_sum += i + by + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i15=-57731, i17=52540, i18=-195, i19=-49981, i20=1, i21=-36973, i22=-10, i23=-9, i24=-35, i25=18877,
            i26=-48139, i27=-185, i28=6, iArr3[]=new int[N];
        double d2=40.33757;
        boolean b3=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr3, 110);
        FuzzerUtils.init(fArr, -2.261F);

        vMeth(i15, Test.byFld, d2);
        for (int i16 : iArr3) {
            if (b3) continue;
        }
        Test.instanceCount = (long)d2;
        for (i17 = 5; i17 < 210; i17++) {
            Test.instanceCount = i15;
            i15 ^= i17;
            switch ((((i15 >>> 1) % 10) * 5) + 115) {
            case 132:
                Test.lArrFld[i17 - 1] ^= i15;
                break;
            case 154:
                d2 += i15;
                i18 += (i17 * i17);
                break;
            case 147:
                i18 += (int)Test.instanceCount;
                i18 += i17;
                for (i19 = 1; i19 < 122; i19++) {
                    Test.fFld = Test.instanceCount;
                    for (i21 = i19; i21 < 2; i21++) {
                        i20 = i21;
                    }
                    switch (((i17 % 1) * 5) + 15) {
                    case 16:
                        Test.instanceCount = (long)d2;
                        break;
                    }
                    Test.instanceCount -= i21;
                    i15 = (int)-125.97883;
                    i18 += i21;
                    if (b3) break;
                }
                i15 += (126 + (i17 * i17));
                break;
            case 141:
                for (i24 = 6; i24 < 122; ++i24) {
                    Test.instanceCount = Test.instanceCount;
                    Test.lArrFld[i24 - 1] &= i21;
                    for (i26 = 1; i26 < 2; i26++) {
                        Test.instanceCount += (((i26 * Test.fFld) + Test.byFld) - Test.fFld);
                        try {
                            i28 = (-95 % i21);
                            i20 = (153 / iArr3[i26]);
                            i25 = (46572 % i25);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                break;
            case 153:
                Test.instanceCount %= (i28 | 1);
            case 162:
                i23 += i17;
                break;
            case 160:
                if (b3) break;
            case 138:
                Test.instanceCount *= (long)Test.fFld;
                break;
            case 133:
                i18 = i26;
                break;
            case 120:
                Test.fFld = i17;
                break;
            default:
                if (b3) continue;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
