package tests.javafuzzer2204;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:16:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-29L;
    public static double dFld=71.66987;
    public static byte byFld=-127;
    public static boolean bFld=false;
    public int iFld=73;
    public short sFld=11939;
    public float fFld=-63.165F;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -40062L);
        FuzzerUtils.init(Test.iArrFld, -50642);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, boolean b1, int i8) {

        double d1=-76.1891;
        int i9=-56739, i10=45027, i11=-208, i12=-241, i13=175;
        float f3=74.309F;

        if (b1) {
            for (d1 = 3; d1 < 132; d1++) {
                Test.dFld -= Test.instanceCount;
                for (i10 = 1; i10 < 12; ++i10) {
                    Test.iArrFld[i10 - 1] *= -118;
                    for (i12 = (int)(d1); i12 < 2; ++i12) {
                        f3 += (float)Test.dFld;
                        i8 += (i12 + i13);
                        i13 += (i12 ^ (long)f3);
                        Test.byFld = (byte)i12;
                        i8 *= (int)l1;
                        i11 -= i12;
                        l1 <<= 10750;
                    }
                    i9 += (-1 + (i10 * i10));
                    Test.dFld += i12;
                }
            }
        } else {
            i13 = -129;
        }
        long meth_res = l1 + (b1 ? 1 : 0) + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 +
            Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, boolean b, int i6) {

        float f1=0.431F, f2=-1.345F;
        int i7=-31, i14=0, i15=-24262, i16=-75;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)26);

        i6 += Math.abs((int)((--l) - (l - -5985L)));
        for (f1 = 3; f1 < 245; f1++) {
            i6 += (int)((long)f1 ^ i6);
            f2 = ((iMeth(109L, b, i7) + -5443536548542841403L) * 4176);
            i7 += (35638 + (f1 * f1));
            i14 = 1;
            while (++i14 < 7) {
                for (i15 = 1; i15 < 1; ++i15) {
                    if (i14 != 0) {
                        vMeth1_check_sum += l + (b ? 1 : 0) + i6 + Float.floatToIntBits(f1) + i7 +
                            Float.floatToIntBits(f2) + i14 + i15 + i16 + FuzzerUtils.checkSum(byArr);
                        return;
                    }
                    i7 = -11;
                    if (i16 != 0) {
                        vMeth1_check_sum += l + (b ? 1 : 0) + i6 + Float.floatToIntBits(f1) + i7 +
                            Float.floatToIntBits(f2) + i14 + i15 + i16 + FuzzerUtils.checkSum(byArr);
                        return;
                    }
                    i7 = i6;
                    i6 += (i15 + f2);
                    i7 += (((i15 * f1) + i6) - i15);
                    i16 -= (int)Test.instanceCount;
                    byArr[i14][(i7 >>> 1) % N] -= (byte)i14;
                }
            }
        }
        vMeth1_check_sum += l + (b ? 1 : 0) + i6 + Float.floatToIntBits(f1) + i7 + Float.floatToIntBits(f2) + i14 + i15
            + i16 + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i=-201, i1=44946, i2=-13, i3=46234, i4=10, i5=8, iArr[][]=new int[N][N];
        float f=-122.256F;
        double d=1.21818;

        FuzzerUtils.init(iArr, 62762);

        Test.instanceCount >>>= (--i);
        for (i1 = 11; i1 < 181; i1++) {
            Test.instanceCount += i1;
            Test.instanceCount += (i1 * i1);
            Test.instanceCount -= 3942314207L;
            for (i3 = 1; i3 < 9; i3++) {
                for (f = 1; f < 2; f++) {
                    short s=11172;
                    iArr[(int)(f - 1)][i1] = (int)Test.instanceCount;
                    try {
                        i5 = (207 % i2);
                        i2 = (i5 / 180);
                        iArr[i1][i1 - 1] = (i4 % iArr[i1 + 1][(int)(f + 1)]);
                    } catch (ArithmeticException a_e) {}
                    d = f;
                    s = (short)((-(i5++)) - Math.max((int)(i - 4L), (int)(-(Test.lArrFld[(int)(f)]--))));
                }
                vMeth1(Test.instanceCount, Test.bFld, i);
                i4 &= (int)Test.instanceCount;
                Test.iArrFld[i3] *= i1;
                i5 <<= Test.byFld;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=5073, i18=-63469, i19=-4, i20=181, i21=-150, i22=5, i23=119, i24=8;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)80);

        vMeth();
        Test.iArrFld[(i17 >>> 1) % N] <<= i17;
        i17 >>>= iFld;
        iFld = i17;
        i17 <<= i17;
        byArr1[(i17 >>> 1) % N] += (byte)0;
        for (i18 = 5; i18 < 123; ++i18) {
            for (i20 = i18; i20 < 212; ++i20) {
                for (i22 = 1; i22 < 1; i22++) {
                    sFld += (short)(i22 * i22);
                    Test.iArrFld[i22 - 1] = (int)fFld;
                    Test.byFld += (byte)(i22 | Test.instanceCount);
                    iFld += (i22 - i18);
                    if (Test.bFld) break;
                    i23 += i22;
                    try {
                        Test.iArrFld[i22 - 1] = (i22 / i21);
                        i23 = (i17 % i21);
                        i19 = (i19 / i21);
                    } catch (ArithmeticException a_e) {}
                    i21 = (int)Test.instanceCount;
                    Test.iArrFld[i22] -= (int)Test.instanceCount;
                    i23 += (((i22 * fFld) + Test.instanceCount) - i22);
                }
                i24 = 1;
                do {
                    Test.dFld = i23;
                    iFld = (int)Test.instanceCount;
                    i19 += 18135;
                    i21 *= (int)2.971F;
                    switch ((i24 % 1) + 7) {
                    case 7:
                        Test.dFld += i24;
                        Test.instanceCount += (i24 | iFld);
                        i23 += (int)59206L;
                        i19 = (int)2411628133743583510L;
                        break;
                    }
                    i17 += i23;
                } while (--i24 > 0);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
