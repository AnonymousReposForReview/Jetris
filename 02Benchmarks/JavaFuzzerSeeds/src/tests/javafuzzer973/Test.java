package tests.javafuzzer973;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:16:13 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=41846L;
    public volatile int iFld=-199;

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(int i1, boolean b, float f) {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -10);

        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth_check_sum += i1 + (b ? 1 : 0) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i3, float f2, int i4) {

        int i5=50681, i6=12, i7=-1808, i8=61765, iArr1[]=new int[N];
        double d=-2.73795, dArr[]=new double[N];
        boolean b1=true;
        short s=-21908;

        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(dArr, 0.13581);

        iArr1[(i4 >>> 1) % N] += i3;
        iArr1[(i3 >>> 1) % N] = (int)Test.instanceCount;
        i5 = 1;
        while (++i5 < 309) {
            Test.instanceCount >>= i4;
            switch (((i5 >>> 1) % 10) + 116) {
            case 116:
                i4 += -37182;
                iArr1[i5 - 1] -= -55424;
                for (i6 = 1; i6 < 5; ++i6) {
                    f2 *= (float)d;
                }
                Test.instanceCount += (((i5 * i3) + Test.instanceCount) - Test.instanceCount);
            case 117:
                d += i3;
                i7 -= i3;
                break;
            case 118:
                b1 = b1;
                i3 &= i4;
                f2 = i4;
                break;
            case 119:
                i3 -= s;
            case 120:
                Test.instanceCount += (((i5 * i4) + s) - Test.instanceCount);
            case 121:
                Test.instanceCount ^= i3;
                break;
            case 122:
                iArr1[i5 - 1] = i7;
                break;
            case 123:
                i3 = (int)f2;
                break;
            case 124:
                f2 -= i3;
                break;
            case 125:
                iArr1[i5] -= i8;
                break;
            default:
                dArr[i5 - 1] += s;
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f2) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) +
            s + i8 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        float f3=-127.451F;
        int i10=33689, i11=-249, i12=-153, i13=150, iArr2[]=new int[N];
        byte by=-73;
        boolean b2=true;

        FuzzerUtils.init(iArr2, -65280);

        Test.instanceCount = iMeth1(i2, f3, i2);
        for (int i9 : iArr2) {
            Test.instanceCount = i9;
            i9 = -251;
            for (i10 = 1; 4 > i10; i10 += 3) {
                for (i12 = 1; i12 < 4; i12 += 3) {
                    Test.instanceCount <<= i11;
                    Test.instanceCount = i13;
                    switch (((i10 % 3) * 5) + 125) {
                    case 139:
                        f3 += by;
                        switch ((i12 % 1) + 110) {
                        case 110:
                            f3 += i11;
                            break;
                        }
                        break;
                    case 137:
                        if (b2) {
                            Test.instanceCount += (i12 ^ (long)f3);
                            i2 = 0;
                        } else {
                            i9 = i9;
                        }
                        break;
                    case 133:
                        i9 = 14754;
                    default:
                        i11 += i12;
                    }
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f3) + i10 + i11 + i12 + i13 + by + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i) {

        float f1=39.807F;
        boolean b3=false;
        int i14=-6, i15=9, i16=1818, i17=12, i18=22961, i19=14, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, 39404);

        vMeth((int)((-(--i)) + ((f1++) - iMeth(-9))), b3, -1.176F);
        for (i14 = 12; 234 > i14; i14++) {
            for (i16 = 7; i16 > i14; i16 -= 3) {
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount = i16;
                    i17 += i18;
                    i += (i18 ^ i18);
                    Test.instanceCount %= (i16 | 1);
                    i15 -= i14;
                    Test.instanceCount += i18;
                    iArr3[i16 + 1] -= i14;
                    Test.instanceCount *= (long)f1;
                    i15 = i;
                }
                iArr3[i14 + 1] = -164;
                i15 = i;
            }
        }
        long meth_res = i + Float.floatToIntBits(f1) + (b3 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-50710, i21=-10, i22=-56981, i23=10, i24=-12692, i25=2734, i26=95, i27=-11536, iArr4[]=new int[N];
        float f4=90.572F;
        double d1=0.46663, dArr1[]=new double[N];
        boolean b4=true;
        byte by1=127;

        FuzzerUtils.init(iArr4, -104);
        FuzzerUtils.init(dArr1, 0.122414);

        iFld <<= (--iFld);
        lMeth(iFld);
        for (i20 = 5; i20 < 280; i20++) {
            Test.instanceCount += (i20 - Test.instanceCount);
        }
        iFld *= i20;
        Test.instanceCount = Test.instanceCount;
        i21 += i21;
        switch (((iFld >>> 1) % 8) + 53) {
        case 53:
            for (f4 = 327; f4 > 8; f4 -= 2) {
                for (i23 = 158; i23 > 4; i23--) {
                    i22 += -9;
                    i21 += (i23 ^ i20);
                    i22 -= (int)d1;
                    iFld = -10;
                    i21 += (i23 * i23);
                }
                iFld = i20;
                for (i25 = (int)(f4); i25 < 158; i25 += 3) {
                    i27 = 1;
                    do {
                        try {
                            i21 = (iArr4[(int)(f4)] / -34367);
                            i22 = (i25 % i26);
                            i26 = (i22 % -16394);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount <<= Test.instanceCount;
                        d1 *= 13;
                        b4 = b4;
                        i26 >>>= (int)-14L;
                        i21 += i27;
                        iArr4 = iArr4;
                    } while (++i27 < 1);
                    dArr1[(int)(f4)] -= by1;
                    i21 += (i25 | (long)f4);
                    i26 += (64832 + (i25 * i25));
                    iArr4[i25 + 1] -= i22;
                    i26 = (int)2L;
                }
            }
            break;
        case 54:
            i21 >>= i25;
            break;
        case 55:
            i24 = 25293;
            break;
        case 56:
            iArr4[(i27 >>> 1) % N] = i21;
            break;
        case 57:
            b4 = b4;
            break;
        case 58:
            d1 /= (i25 | 1);
            break;
        case 59:
            i22 -= (int)Test.instanceCount;
            break;
        case 60:
            i21 += (int)f4;
            break;
        default:
            iFld = i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
