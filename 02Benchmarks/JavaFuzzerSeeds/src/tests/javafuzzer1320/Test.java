package tests.javafuzzer1320;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:10:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=526L;
    public int iFld=50097;
    public static double dFld=0.10894;
    public static float fFld=-2.577F;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.783F);
        FuzzerUtils.init(Test.iArrFld, -51);
        FuzzerUtils.init(Test.sArrFld, (short)14136);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(float f, int i, int i1) {

        short s=-30099;

        s ^= (short)(++Test.instanceCount);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + i1 + s;
    }

    public static long lMeth(short s1, boolean b, long l) {

        int i3=-38, i4=-229, i5=-238, i6=-11;
        float f1=-29.1019F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -110.89850);

        i3 = (int)((Test.iArrFld[(i3 >>> 1) % N]--) * Float.intBitsToFloat((int)(i3 - 18907L)));
        for (f1 = 13; f1 < 289; f1++) {
            i4 *= (int)((Test.fArrFld[(int)(f1)] + (Test.instanceCount = -50484)) - ((i3++) + 110));
            for (i5 = 1; i5 < 6; i5++) {
                i4 += i5;
                switch (((i6 >>> 1) % 4) + 83) {
                case 83:
                    vSmallMeth(f1, i6, i6);
                    Test.dFld *= i5;
                    break;
                case 84:
                    Test.fFld -= -66;
                case 85:
                    b = false;
                    Test.instanceCount += (long)Test.fFld;
                    Test.iArrFld = Test.iArrFld;
                case 86:
                }
                dArr[(int)(f1 + 1)] += f1;
                i6 += i5;
                Test.iArrFld[(int)(f1 - 1)] -= i3;
            }
        }
        long meth_res = s1 + (b ? 1 : 0) + l + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2) {

        short s2=-17031;
        boolean b1=true;
        int i7=111, i8=-191, i9=152, i10=11, i11=-2, i12=31116, iArr1[]=new int[N];
        byte by=3;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(lArr, -1L);

        i2 = (iArr1[(i2 >>> 1) % N]++);
        i2 >>= i2;
        i2 = (int)lMeth(s2, b1, Test.instanceCount);
        for (i7 = 10; i7 < 205; ++i7) {
            i8 += i7;
            i2 = 10;
            for (i9 = 1; i9 < 8; ++i9) {
                try {
                    i8 = (iArr1[i7 + 1] % -1968597374);
                    i10 = (-119112697 / i8);
                    i8 = (i7 % i2);
                } catch (ArithmeticException a_e) {}
                i2 = by;
                Test.instanceCount >>>= Test.instanceCount;
                lArr[i9] = Test.instanceCount;
                for (i11 = 1; i11 < 2; ++i11) {
                    by += (byte)(i11 - i12);
                    i10 -= i10;
                    if (b1) continue;
                }
            }
        }
        long meth_res = i2 + s2 + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + by + i11 + i12 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=2.964;
        int i13=-237, i14=214, i15=-62346, i16=0, i17=-11, i18=-10, i19=51598, i20=-3, i21=3338, i22=150, i23=53398,
            iArr[]=new int[N];
        byte by1=58;
        short s3=-15589;

        FuzzerUtils.init(iArr, -102);

        iFld >>>= (int)(2L + (iFld + (Test.instanceCount + d)));
        Test.instanceCount = (long)(d + iFld);
        for (int smallinvoc=0; smallinvoc<670; smallinvoc++) vSmallMeth(Test.fArrFld[(iFld >>> 1) % N]++, iArr[(iFld
            >>> 1) % N], iMeth(iFld));
        for (i13 = 2; 313 > i13; i13++) {
            Test.fFld += (i13 * Test.instanceCount);
        }
        for (i15 = 17; i15 < 392; ++i15) {
            i14 *= 1;
            if (bFld) {
                for (i17 = 2; i17 < 67; i17++) {
                    if (bFld) {
                        for (i19 = 1; i19 < 2; ++i19) {
                            by1 = (byte)Test.instanceCount;
                            i18 = s3;
                            Test.sArrFld[i19 - 1] += (short)iFld;
                        }
                        i20 = i15;
                    }
                    for (i21 = 1; i21 < 2; i21++) {
                        iArr[i17] -= i16;
                        i20 = i22;
                        iArr[i21] %= (int)(Test.instanceCount | 1);
                        i14 = 16082;
                        Test.instanceCount *= i21;
                        i18 += i19;
                        i16 *= 6;
                        Test.instanceCount += (i21 | Test.instanceCount);
                    }
                    Test.instanceCount = i20;
                }
                iArr[i15 - 1] = (int)65.201F;
                iArr[i15 + 1] += (int)-1.295F;
                Test.instanceCount -= (long)Test.fFld;
            } else if (bFld) {
                i14 >>= (int)Test.instanceCount;
                Test.instanceCount += i22;
            } else if (bFld) {
                i20 += (((i15 * i23) + Test.instanceCount) - iFld);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
