package tests.javafuzzer2461;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-54680L;
    public static double dFld=62.76607;
    public static volatile float fFld=-29.416F;
    public static volatile byte byFld=25;
    public int iFld=-5815;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 79.173F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l1, int i3) {

        int i4=-37011, i5=-8219, i6=108;
        float f=-1.869F;
        short s=-633;
        double d=40.23779, dArr[]=new double[N];
        boolean b1=true;

        FuzzerUtils.init(dArr, 86.72127);

        i4 = 1;
        while (++i4 < 319) {
            for (i5 = 1; i5 < 5; i5++) {
                int i7=8;
                Test.instanceCount += (((i5 * i5) + i5) - f);
                i6 += (((i5 * i4) + i3) - i3);
                switch ((i4 % 9) + 13) {
                case 13:
                    i3 <<= s;
                    break;
                case 14:
                case 15:
                    Test.instanceCount *= i3;
                    i6 = (int)l1;
                    if (i5 != 0) {
                        return ((int)(l1 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d)
                            + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)))) % 2 > 0;
                    }
                    break;
                case 16:
                    i6 += i4;
                    dArr[i4 - 1] %= (i3 | 1);
                    i3 -= (int)Test.instanceCount;
                    break;
                case 17:
                    d *= i5;
                    dArr[i5 + 1] = 237;
                    i3 = -14;
                    break;
                case 18:
                    f += (i5 * i5);
                case 19:
                    if (b1) continue;
                case 20:
                    i6 = 175;
                    break;
                case 21:
                    f += i4;
                    break;
                default:
                    i6 >>= i7;
                }
            }
        }
        long meth_res = l1 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d) + (b1 ? 1 :
            0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i1, int i2, long l) {

        boolean b=true, bArr[]=new boolean[N];
        int i8=4, i9=49, i10=42, i11=-14410, i12=77;
        float f1=-98.5F;
        byte by=25;

        FuzzerUtils.init(bArr, false);

        bArr[(i1 >>> 1) % N] = (b = bMeth(Test.instanceCount, i1));
        for (i8 = 5; 306 > i8; ++i8) {
            for (i10 = 5; i10 > 1; i10--) {
                Test.instanceCount += i10;
                i11 -= i8;
                switch ((i10 % 1) + 70) {
                case 70:
                    Test.instanceCount *= (long)f1;
                    i9 = (int)f1;
                    by -= (byte)i2;
                    i11 = -3;
                    break;
                default:
                    i9 = i9;
                }
                i11 *= (int)Test.dFld;
                i12 = 1;
                while (++i12 < 2) {
                    i9 += i12;
                    i11 += (i12 - f1);
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + l + (b ? 1 : 0) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + by + i12 +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i) {

        short s1=-28720;
        int i13=1, i14=-244, i15=-2, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -9);

        vMeth1(-5, i, 169L);
        i += i;
        iArr[(i >>> 1) % N][(i >>> 1) % N] >>>= s1;
        for (i13 = 15; i13 < 347; ++i13) {
            iArr[i13 + 1][i13 + 1] = i;
            iArr[i13][i13] ^= (int)Test.instanceCount;
            if (i14 != 0) {
                vMeth_check_sum += i + s1 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
                return;
            }
            i15 = 5;
            while (--i15 > 0) {
                byte by1=-10;
                by1 += (byte)(-48361 + (i15 * i15));
                iArr[i15][i15 - 1] = (int)Test.instanceCount;
                i = (int)Test.fFld;
                i += (int)Test.instanceCount;
                Test.instanceCount -= i13;
                iArr[i13 + 1][i15] += 52;
                i = i;
            }
        }
        vMeth_check_sum += i + s1 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=-3097, i17=-13, i18=60408, i19=-31, i20=64979, i21=-217, i22=25224, i23=44;
        float f2=80.884F;
        long l2=-3263016457L, l3=-8303L, lArr[]=new long[N];
        boolean b2=false;

        FuzzerUtils.init(lArr, 59354L);

        vMeth(i16);
        for (f2 = 1; f2 < 382; f2++) {
            Test.fFld += f2;
            i16 = Test.byFld;
            i16 = i17;
            Test.fArrFld[(int)(f2 - 1)] %= -29199;
            Test.instanceCount = i17;
            if (true) {
                Test.fFld -= (float)121.46031;
                for (i18 = 3; i18 < 66; i18++) {
                    i17 = (int)7L;
                    for (i20 = 1; i20 < 2; ++i20) {
                        iArrFld = iArrFld;
                        l2 = i20;
                        i19 = i18;
                        iFld = (int)l2;
                        if (false) break;
                        i19 = (int)l3;
                        i19 >>= i16;
                        Test.byFld *= (byte)i20;
                        lArr[(int)(f2)] = i19;
                    }
                    Test.fArrFld[(int)(f2 - 1)] -= (float)Test.dFld;
                    iArrFld[i18 + 1] *= (int)l3;
                    i17 = i18;
                    iArrFld[(int)(f2)] = i21;
                    for (i22 = 1; i22 < 2; ++i22) {
                        Test.dFld = i22;
                        i16 = i19;
                        iArrFld[i18 + 1] -= (int)832005984L;
                    }
                }
                b2 = false;
            } else {
                Test.instanceCount ^= l3;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
