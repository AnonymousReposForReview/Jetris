package tests.javafuzzer256;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=183L;
    public boolean bFld=false;
    public static double dFld=-1.27981;
    public static short sFld=21347;
    public static boolean bFld1=true;
    public volatile float fFld=-2.88F;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 152L);
        FuzzerUtils.init(Test.iArrFld, -77);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        byte by=-14;
        int i8=87, i9=-4, i10=-6, i11=-46287, i12=-18427, iArr[]=new int[N];
        float f=2.418F;

        FuzzerUtils.init(iArr, 9);

        by *= (byte)i8;
        Test.dFld += i8;
        i8 -= i8;
        Test.instanceCount >>= i8;
        Test.dFld -= f;
        for (i9 = 395; 6 < i9; i9 -= 3) {
            i10 = (int)Test.instanceCount;
            i10 = (int)-124L;
        }
        Test.lArrFld[(-146 >>> 1) % N] >>= i10;
        iArr[(i9 >>> 1) % N] = 35332;
        for (long l1 : Test.lArrFld) {
            Test.lArrFld[(i8 >>> 1) % N] = Test.sFld;
            for (i11 = 1; i11 < 4; i11++) {
                Test.bFld1 = Test.bFld1;
                i10 += (i11 * i11);
            }
        }
        vMeth2_check_sum += by + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(long l, int i5, int i6) {

        int i7=-151, i13=-24, i14=9;

        i7 = 1;
        do {
            vMeth2();
            i5 = i6;
        } while (++i7 < 179);
        dArrFld[(38524 >>> 1) % N] -= i6;
        i6 += -5;
        for (i13 = 293; i13 > 8; i13--) {
            Test.iArrFld[i13 - 1] <<= (int)Test.instanceCount;
            fFld *= Test.instanceCount;
            Test.iArrFld[i13] = i7;
        }
        i6 = (int)-8L;
        Test.iArrFld[(i7 >>> 1) % N] = (int)fFld;
        i6 = i14;
        vMeth1_check_sum += l + i5 + i6 + i7 + i13 + i14;
    }

    public void vMeth() {

        int i=26918, i1=-8, i2=-90, i3=-7, i4=-76, i15=0, i16=0;
        boolean b=true;

        for (i = 6; 231 > i; ++i) {
            i2 = 1;
            do {
                for (i3 = 1; i3 > 1; i3--) {
                    bFld = (b = ((i > i4) == (Test.instanceCount > Test.instanceCount)));
                    vMeth1(Test.instanceCount, -9029, i2);
                }
                for (i15 = 1; i15 < 1; ++i15) {
                    Test.instanceCount = i1;
                    i4 -= i2;
                    Test.sFld += (short)(i15 - Test.instanceCount);
                    switch ((((i16 >>> 1) % 5) * 5) + 27) {
                    case 30:
                        Test.iArrFld[i - 1] -= i;
                        i16 += (3 + (i15 * i15));
                        i4 += -4;
                        b = b;
                    case 39:
                        i16 ^= (int)Test.instanceCount;
                        break;
                    case 46:
                        Test.instanceCount = i4;
                        break;
                    case 43:
                    case 48:
                        i4 -= i15;
                        break;
                    }
                }
            } while (++i2 < 7);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + (b ? 1 : 0) + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i17=-15053, i18=-52885, i19=64243, i20=-13, i21=45807, i22=-12, i23=3, i24=-155;
        double d=-13.93550;
        long l2=590200270980261773L;
        byte by1=14;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.924F);

        vMeth();
        i17 = i17;
        bFld = Test.bFld1;
        Test.instanceCount = i17;
        i18 = 1;
        do {
            i17 /= (int)(i18 | 1);
            Test.sFld = (short)214;
        } while (++i18 < 311);
        for (d = 353; d > 9; d -= 2) {
            fFld += (0 + (d * d));
            for (i20 = 3; i20 < 146; i20++) {
                fFld += i20;
                switch (((i20 % 4) * 5) + 15) {
                case 27:
                    i21 = (int)fFld;
                    i17 = i20;
                    i17 += i20;
                    break;
                case 21:
                    i21 += (i20 | i17);
                    for (l2 = 2; i20 < l2; l2 -= 2) {
                        i22 /= (int)(i20 | 1);
                        i21 = (int)Test.instanceCount;
                    }
                    if (Test.bFld1) continue;
                    break;
                case 30:
                    for (i23 = 2; i23 > 1; i23 -= 3) {
                        i22 += i20;
                        Test.instanceCount += (i23 ^ i23);
                        if (Test.bFld1) break;
                        i19 = i18;
                        i17 = i22;
                        i22 = i19;
                        i22 -= (int)Test.dFld;
                        Test.instanceCount <<= -27;
                        i21 += i23;
                    }
                    break;
                case 32:
                    i22 += (((i20 * by1) + i24) - Test.instanceCount);
                default:
                    fArr[i20 + 1] -= i23;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
