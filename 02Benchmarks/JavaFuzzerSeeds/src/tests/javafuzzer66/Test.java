package tests.javafuzzer66;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:44:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4950L;
    public static double dFld=-47.14021;
    public volatile int iFld=1;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i9) {

        double d1=1.61533;
        int i10=-37, i11=181, i12=47043, i13=9, i14=-27313;
        byte by=-88;
        float f=56.22F;

        Test.instanceCount += i9;
        d1 -= Test.instanceCount;
        Test.instanceCount = i9;
        i10 = 1;
        do {
            for (i11 = 1; i11 < 9; ++i11) {
                i9 *= by;
                for (i13 = 1; i13 < 2; i13++) {
                    f += f;
                    i14 += (int)l1;
                    i12 += i13;
                    Test.instanceCount ^= i13;
                    switch ((i13 % 3) + 62) {
                    case 62:
                        l1 += (-3 + (i13 * i13));
                        Test.instanceCount = (long)d1;
                        l1 = (long)1.337F;
                        break;
                    case 63:
                        i14 += (i13 * i9);
                        break;
                    case 64:
                        Test.instanceCount <<= -14;
                        break;
                    }
                }
            }
        } while (++i10 < 184);
        vMeth1_check_sum += l1 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + by + i13 + i14 +
            Float.floatToIntBits(f);
    }

    public static byte byMeth(int i3, long l) {

        short s=-12084;
        int i4=-52847, i5=6, i6=-13978, i7=-10, i8=180, iArr[]=new int[N];
        double d2=-1.117048;
        boolean b=true;
        float f1=19.105F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -155);
        FuzzerUtils.init(lArr, -7787828402955024174L);

        i3 = i3;
        s = (short)(++Test.instanceCount);
        i4 = 1;
        while (++i4 < 388) {
            for (i5 = 1; i5 < 4; ++i5) {
                for (i7 = i5; i7 < 2; ++i7) {
                    i6 = (i8++);
                    i3 *= (++i3);
                    i8 = iArr[i5 + 1];
                    i3 += i7;
                    switch ((((((int)(l * i3)) >>> 1) % 8) * 5) + 122) {
                    case 127:
                        lArr[i7 + 1] -= (9 + ((i8 + l) - -4191804773L));
                        vMeth1(l, i7);
                        d2 /= -3418711023L;
                        break;
                    case 144:
                        b = b;
                    case 124:
                        Test.instanceCount = l;
                        break;
                    case 153:
                        i8 = i3;
                        break;
                    case 151:
                        i8 += (((i7 * l) + f1) - f1);
                        break;
                    case 150:
                        i8 += (i7 ^ s);
                    case 155:
                        f1 += Test.instanceCount;
                        break;
                    case 143:
                        i8 += i7;
                        break;
                    }
                }
            }
        }
        long meth_res = i3 + l + s + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d2) + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i1, int i2, double d) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.642F);

        i1 -= (byMeth(i2, Test.instanceCount) * i2);
        Test.instanceCount += i1;
        fArr[(i2 >>> 1) % N] = i2;
        Test.instanceCount -= i1;
        i1 -= (int)Test.instanceCount;
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=12498, i15=1, i16=-12, i17=4, i18=-59817, i19=-19734, i20=-7, i21=-34754, i22=34208;
        float f2=98.182F;
        boolean b1=false, bArr[]=new boolean[N];
        byte by1=-52;

        FuzzerUtils.init(bArr, true);

        i = 364;
        do {
            vMeth(i, i, Test.dFld);
            Test.instanceCount += (long)f2;
            if (b1) break;
            iFld += i;
            iArrFld[i + 1] = iFld;
        } while ((i -= 3) > 0);
        Test.instanceCount >>= i;
        for (i15 = 4; i15 < 155; i15++) {
            iFld = -11;
            for (i17 = 6; i17 < 166; i17++) {
                b1 = b1;
                iFld -= i15;
                i16 *= iFld;
                iArrFld[i15 - 1] = i15;
            }
            if (b1) break;
            for (i19 = 5; 166 > i19; i19++) {
                Test.instanceCount -= (long)f2;
                Test.instanceCount = i15;
                iArrFld[i19] &= (int)Test.instanceCount;
                for (i21 = i15; i21 < 2; i21++) {
                    bArr[i15 - 1] = b1;
                    lArrFld = lArrFld;
                    iArrFld[i15 - 1] <<= i21;
                    switch (((i15 % 3) * 5) + 53) {
                    case 58:
                        f2 += 61772;
                        iArrFld[i21] = i15;
                        i22 *= by1;
                        break;
                    case 57:
                        by1 += (byte)(i21 + i18);
                        break;
                    case 63:
                        i16 *= (int)Test.dFld;
                        bArr[i21 - 1] = b1;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
