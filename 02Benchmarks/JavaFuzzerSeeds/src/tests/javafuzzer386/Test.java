package tests.javafuzzer386;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:09:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6689300515693095658L;
    public static double dFld=2.83617;
    public volatile float fFld=-23.443F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -43342L);
        FuzzerUtils.init(Test.iArrFld, 157);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        short s2=-24242;
        int i10=-14418, i11=-187, i12=-61415, i13=17139;
        float f=-2.130F;
        boolean b=true;
        byte by=-89;

        switch (((0 >>> 1) % 4) + 87) {
        case 87:
            try {
                switch (((4 >>> 1) % 8) + 86) {
                case 86:
                    s2 |= (short)Test.instanceCount;
                    break;
                case 87:
                    for (i10 = 7; i10 < 251; i10++) {
                        Test.lArrFld[i10 + 1] = i11;
                        Test.dFld *= i10;
                        f += s2;
                        Test.iArrFld[(i10 >>> 1) % N] = i10;
                        if (b) continue;
                        for (i12 = 1; i12 < 7; ++i12) {
                            i11 -= i12;
                            i11 *= (int)Test.dFld;
                            i13 += (((i12 * Test.instanceCount) + f) - i12);
                            f = i11;
                        }
                    }
                    break;
                case 88:
                    i11 = i11;
                case 89:
                    i11 -= (int)f;
                case 90:
                    Test.iArrFld[(i11 >>> 1) % N] %= (int)(i11 | 1);
                    break;
                case 91:
                    Test.dFld = s2;
                    break;
                case 92:
                    Test.iArrFld[(i13 >>> 1) % N] >>= (int)Test.instanceCount;
                    break;
                case 93:
                    Test.instanceCount = i12;
                    break;
                default:
                    i13 = (int)f;
                }
            }
            catch (NegativeArraySizeException exc2) {
                i13 <<= i13;
            }
            break;
        case 88:
            i13 = by;
        case 89:
            i13 >>>= (int)Test.instanceCount;
            break;
        case 90:
            i11 -= i13;
        default:
            i13 <<= (int)Test.instanceCount;
        }
        long meth_res = s2 + i10 + i11 + Float.floatToIntBits(f) + (b ? 1 : 0) + i12 + i13 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i8=18, i9=1, i14=41185, i15=-12, i16=0, iArr[]=new int[N];
        short s1=-1714;

        FuzzerUtils.init(iArr, -34787);

        for (i8 = 7; i8 < 265; i8++) {
            iArr[i8] = (i9--);
            s1 += (short)iMeth();
            i9 = i9;
            i14 = 1;
            do {
                i15 = 1;
                while (++i15 < 1) {
                    i9 = (int)Test.instanceCount;
                    i9 -= i14;
                }
                i16 = 1;
                do {
                    switch (((i8 % 4) * 5) + 91) {
                    case 93:
                        i9 += i8;
                        i9 = s1;
                        Test.iArrFld[i16] *= (int)Test.dFld;
                        break;
                    case 95:
                        Test.instanceCount *= i9;
                        Test.iArrFld = iArr;
                    case 109:
                        Test.instanceCount += i16;
                        break;
                    case 107:
                        i9 *= i16;
                        break;
                    default:
                        Test.lArrFld[i14 + 1] = i15;
                    }
                } while (++i16 < 1);
            } while (++i14 < 6);
        }
        vMeth_check_sum += i8 + i9 + s1 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i4, short s, int i5) {

        int i6=14, i7=730, i17=0, i18=-15759, i19=-20, i20=-54884;
        boolean b1=false;

        i4 = i5;
        for (i6 = 164; i6 > 5; i6--) {
            vMeth();
            for (i17 = 10; i17 > i6; --i17) {
                i5 += (i17 | i5);
                i18 += (63037 + (i17 * i17));
                i7 += (int)(-3401839315L + (i17 * i17));
                if (true) continue;
                Test.iArrFld[i17 - 1] &= i5;
            }
            Test.dFld -= Test.instanceCount;
            Test.lArrFld = FuzzerUtils.long1array(N, (long)25267L);
        }
        Test.iArrFld[(i4 >>> 1) % N] = (int)Test.instanceCount;
        for (i19 = 14; i19 < 371; ++i19) {
            if (b1) continue;
        }
        Test.instanceCount = 2;
        long meth_res = i4 + s + i5 + i6 + i7 + i17 + i18 + i19 + i20 + (b1 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=39, i1=-53, i2=-46137, i3=-13, i21=-195, i22=-25878, i23=-167, i24=22850, i25=3, i26=-50085;
        short s3=-10695, sArr[][]=new short[N][N];
        float f1=1.499F;
        boolean b2=true;

        FuzzerUtils.init(sArr, (short)20618);

        for (i = 134; 3 < i; i--) {
            for (i2 = 8; i2 < 191; i2++) {
                Test.instanceCount *= i3;
                i1 = (int)(-26239 + ((i1 + 11L) << i1));
            }
            i3 += (int)(i3 / (lMeth(i2, s3, i1) | 1));
            for (i21 = 191; i21 > 2; i21 -= 3) {
                switch (((i3 >>> 1) % 4) + 26) {
                case 26:
                    i22 = i21;
                    i1 -= i;
                    Test.instanceCount += i21;
                case 27:
                    Test.instanceCount = i;
                    Test.instanceCount += i21;
                    break;
                case 28:
                    i3 = (int)-6414238104143238598L;
                    Test.instanceCount += (((i21 * i1) + i22) - f1);
                case 29:
                    i3 -= (int)fFld;
                    for (i23 = 1; i23 < 4; i23++) {
                        i22 -= i;
                        if (false) break;
                    }
                    i24 = i1;
                    Test.instanceCount += i23;
                    break;
                default:
                    i1 += i21;
                }
                for (i25 = i21; 4 > i25; i25++) {
                    i22 += (((i25 * f1) + i22) - i26);
                    i3 += (((i25 * Test.instanceCount) + s3) - i26);
                    sArr[i + 1][i - 1] = (short)-53.186F;
                    i3 += (-115 + (i25 * i25));
                    i22 -= 6;
                    i1 *= i23;
                    try {
                        i1 = (-22571 % i23);
                        Test.iArrFld[i + 1] = (i23 / -165);
                        i24 = (i1 / -42409);
                    } catch (ArithmeticException a_e) {}
                    if (b2) break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
