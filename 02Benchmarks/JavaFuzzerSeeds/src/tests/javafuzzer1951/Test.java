package tests.javafuzzer1951;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:24:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3220L;
    public static double dFld=-100.26426;
    public static float fFld=-76.790F;
    public static byte byFld=87;
    public static boolean bFld=false;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, int i10, long l) {

        int i11=9, i12=51, i13=3;
        float f1=-2.459F, fArr[]=new float[N];
        byte by1=66;

        FuzzerUtils.init(fArr, -1.337F);

        i11 = 1;
        do {
            for (f1 = 1; f1 < 20; f1++) {
                fArr[i11 + 1] -= (float)Test.dFld;
                i10 += (int)Test.instanceCount;
                i9 = i9;
                if (i9 != 0) {
                    vMeth1_check_sum += i9 + i10 + l + i11 + Float.floatToIntBits(f1) + i12 + by1 + i13 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                l = l;
                i9 = i12;
                Test.dFld *= by1;
                i13 = 1;
                while (++i13 < 2) {
                    Test.fFld -= 168;
                    i9 = i12;
                    i9 = (int)l;
                }
                Test.dFld += i11;
                i9 *= i12;
            }
        } while ((i11 += 2) < 157);
        vMeth1_check_sum += i9 + i10 + l + i11 + Float.floatToIntBits(f1) + i12 + by1 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i2=161, i3=-210, i4=14, i5=-11491, i6=-60, i7=-126, i8=-31820;
        short s=-30006;

        for (i2 = 10; 236 > i2; ++i2) {
            for (i4 = 1; i4 < 7; i4++) {
                i6 = 1;
                while (++i6 < 2) {
                    Test.instanceCount += i5;
                }
                for (i7 = 1; i7 < 2; i7 += 3) {
                    Test.instanceCount = (long)(Test.dFld++);
                    vMeth1(i6, i6, Test.instanceCount);
                    i8 += i7;
                    i5 += (i7 | i6);
                    switch ((i7 % 1) + 85) {
                    case 85:
                        i5 += (int)Test.dFld;
                        Test.byFld += (byte)i7;
                    }
                    i5 = i3;
                    Test.fFld += -63;
                    i8 -= s;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, int i1, float f) {

        int i14=-38341, i15=174, i16=13, i17=50060, i18=13995, i19=63;
        float fArr1[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, -116.141F);
        FuzzerUtils.init(lArr, -7357817248472767408L);

        i1 *= iMeth();
        for (i14 = 13; i14 < 227; i14++) {
            fArr1[i14 + 1][i14] = Test.fFld;
            if (i15 != 0) {
                vMeth_check_sum += by + i1 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
                return;
            }
            i1 *= i1;
        }
        fArr1[(i15 >>> 1) % N][(241 >>> 1) % N] = Test.instanceCount;
        for (i16 = 11; i16 < 200; i16++) {
            Test.instanceCount = i17;
            for (i18 = 1; i18 < 8; i18++) {
                i19 = i14;
                i1 -= -14;
                i1 = i17;
                i17 >>= i18;
            }
            Test.instanceCount += i16;
            lArr[i16] = i19;
        }
        vMeth_check_sum += by + i1 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-1582, i20=74, i21=-133, i22=0, i23=51971, i24=-48755, i25=43355, i26=-5, i27=167, i28=-250, iArr[]=new
            int[N];
        long l2=51216L, l3=228395944L;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr, 183);
        FuzzerUtils.init(sArr, (short)-16196);

        i = ((i--) * (--iArr[(i >>> 1) % N]));
        vMeth(Test.byFld, i, Test.fFld);
        for (long l1 : lArrFld) {
            try {
                i = (iArr[(i >>> 1) % N] % 65154);
                iArr[(i >>> 1) % N] = (14794 % i);
                i = (iArr[(2 >>> 1) % N] / -166);
            } catch (ArithmeticException a_e) {}
        }
        iArr[(i >>> 1) % N] = i;
        for (i20 = 154; i20 > 4; i20 -= 3) {
            iArr[i20 - 1] = 8;
            Test.dFld = Test.fFld;
            i += (((i20 * i21) + i) - i20);
            l2 = 3;
        }
        for (i22 = 15; i22 < 327; ++i22) {
            if (false) {
                i23 += i;
            }
            Test.bFld = Test.bFld;
            i23 -= i21;
            for (i24 = 81; 4 < i24; i24 -= 2) {
                i -= i;
                Test.bFld = false;
                sArr[i22][i24] <<= (short)-253;
            }
            iArr[i22 + 1] <<= 79;
            for (i26 = 1; 81 > i26; ++i26) {
                i25 -= i24;
                Test.dFld -= i22;
                i27 <<= i21;
                for (l3 = 2; l3 > i26; --l3) {
                    Test.bFld = Test.bFld;
                    Test.bFld = Test.bFld;
                    i25 = i28;
                }
                Test.fFld = i22;
                Test.instanceCount *= i25;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
