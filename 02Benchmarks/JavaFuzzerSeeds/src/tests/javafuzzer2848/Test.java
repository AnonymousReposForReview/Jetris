package tests.javafuzzer2848;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:27:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-205L;
    public int iFld=252;
    public static volatile byte byFld=22;
    public static float fFld=54.320F;
    public static int iFld1=139;
    public static short sFld=-27213;
    public volatile boolean bArrFld[]=new boolean[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i5) {

        double d1=-54.126214;
        boolean b=false;
        int i6=1, i7=-150, i8=96, i9=-13, i10=-45767;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -223L);

        d1 = i5;
        b = b;
        d1 = i5;
        Test.instanceCount <<= -10;
        for (i6 = 6; 149 > i6; i6++) {
            for (i8 = 1; i8 < 11; ++i8) {
                Test.byFld = (byte)i5;
                i9 = (int)Test.instanceCount;
                i10 = 1;
                do {
                    i9 += (int)Test.instanceCount;
                    Test.instanceCount += -1745L;
                    i5 |= 12129;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount = i5;
                    lArr[i10 + 1] += i6;
                } while ((i10 += 3) < 2);
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l, int i3) {

        float f=2.541F;
        int i4=4033, i11=9879, i12=117, iArr[]=new int[N], iArr1[][]=new int[N][N], iArr2[]=new int[N];
        double d=-1.89334;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(iArr1, 60364);
        FuzzerUtils.init(iArr2, -36665);
        FuzzerUtils.init(lArr1, -180905816772626453L);

        i3 = (int)((f--) * 3319913418L);
        i4 = 299;
        do {
            Test.instanceCount = (((Test.instanceCount + i3) - Math.abs(l)) * i4);
            switch (((((i3--) >>> 1) % 2) * 5) + 56) {
            case 61:
                if (b1) {
                    if (i4 != iArr2[i4 + 1]) {
                        iArr[i4 - 1] *= (int)(Test.instanceCount * ((-98.896F / ((i4 - -62827) | 1)) -
                            (Test.instanceCount <<= i4)));
                        iArr1 = iArr1;
                    } else {
                        d = iMeth2(i3);
                        l = Test.instanceCount;
                        i3 += (-35625 + (i4 * i4));
                    }
                    Test.instanceCount += i4;
                } else if (b1) {
                    for (i11 = i4; i11 < 6; ++i11) {
                        i12 *= 0;
                        Test.instanceCount += (-1 + (i11 * i11));
                    }
                } else if (b1) {
                    i12 += (i4 * i4);
                } else {
                    lArr1[i4 + 1] += i4;
                }
                break;
            case 65:
                i3 += (((i4 * i12) + i11) - l);
                break;
            default:
                b1 = b1;
            }
        } while (--i4 > 0);
        long meth_res = l + i3 + Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d) + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i1=-3, i2=7, i14=-68, i15=-7;
        byte by=-75;
        long l1=-4L;
        boolean b2=false;
        double d2=-125.45825;

        for (i1 = 257; i1 > 8; --i1) {
            i /= (int)(Math.max(++i2, (i + by) - iMeth1(Test.instanceCount, i)) | 1);
            for (l1 = 1; l1 < 7; l1++) {
                i += (int)(l1 * Test.fFld);
                b2 = false;
                for (d2 = 2; d2 > l1; d2--) {
                    Test.iFld1 -= i15;
                    Test.sFld = (short)0;
                    i15 = Test.iFld1;
                    i15 += i2;
                }
                Test.iFld1 += (int)(l1 * i2);
                Test.iFld1 -= Test.iFld1;
                b2 = b2;
                i2 += (int)(((l1 * i14) + Test.fFld) - i);
            }
        }
        long meth_res = i + i1 + i2 + by + l1 + i14 + (b2 ? 1 : 0) + Double.doubleToLongBits(d2) + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=27930;
        int i16=-6, i17=-13, i18=-1, i19=11, i20=-12, i21=-2, i22=123, i23=8, iArr3[]=new int[N];
        boolean b3=false, b4=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -140L);
        FuzzerUtils.init(iArr3, -39);

        iFld ^= (int)(((iFld = (int)Test.instanceCount) + s) + ((-79.296F + (Test.instanceCount - 28344)) + iMeth(14)));
        for (i16 = 2; i16 < 280; ++i16) {
            for (i18 = 1; i18 < 90; i18++) {
                switch (((i18 % 6) * 5) + 123) {
                case 130:
                    Test.byFld ^= (byte)Test.instanceCount;
                    Test.instanceCount = i17;
                    for (i20 = 1; i20 < 2; ++i20) {
                        iFld = (int)Test.instanceCount;
                        i17 += i20;
                        Test.iFld1 = -60;
                        lArr2[i20] -= (long)Test.fFld;
                    }
                    iArr3[i16] += i19;
                    break;
                case 126:
                    Test.instanceCount = (long)Test.fFld;
                    iFld = iFld;
                    for (i22 = 2; i22 > 1; i22 -= 2) {
                        Test.iFld1 += (i22 - iFld);
                        iArr3[i16 - 1] *= s;
                        try {
                            i21 = (i20 % i18);
                            iArr3[i16] = (iFld % Test.iFld1);
                            Test.iFld1 = (iArr3[i16 + 1] / iFld);
                        } catch (ArithmeticException a_e) {}
                        i17 >>= 1049;
                        Test.fFld += (((i22 * iFld) + i16) - i17);
                    }
                    lArr2[i18 - 1] = i22;
                case 152:
                case 137:
                    b3 = b4;
                    Test.instanceCount = i23;
                case 131:
                    iFld = i23;
                    Test.instanceCount = i20;
                    iFld += -225;
                    i19 = (int)Test.fFld;
                case 134:
                    iArr3[i16] = Test.iFld1;
                    break;
                default:
                    bArrFld[i18] = b4;
                    iArr3[i16] = (int)Test.instanceCount;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
