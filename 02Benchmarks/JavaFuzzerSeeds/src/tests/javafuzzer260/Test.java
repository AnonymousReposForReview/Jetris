package tests.javafuzzer260;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6379739956074921320L;
    public static short sFld=28177;
    public static byte byFld=-78;
    public boolean bFld=true;
    public static double dFld=71.87356;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -40);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, long l, int i2) {

        int i3=4, i4=48663, i5=-34564, i6=-125, i7=-7, i8=34304, i9=-7;
        boolean b1=false;
        float fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr1, 1.585F);
        FuzzerUtils.init(dArr, -59.29895);

        for (i3 = 7; i3 < 224; ++i3) {
            for (i5 = 7; 1 < i5; i5--) {
                i7 = (int)1.837F;
                i7 += (int)-4L;
                Test.iArrFld = Test.iArrFld;
                i2 <<= (int)7L;
                for (i8 = i3; i8 < 2; i8++) {
                    fArr1[i3 - 1] *= Test.instanceCount;
                    i4 += i4;
                    try {
                        i4 = (i5 / i8);
                        Test.iArrFld[i3 - 1] = (i8 / -437690142);
                        i4 = (i3 / Test.iArrFld[i8 - 1]);
                    } catch (ArithmeticException a_e) {}
                    dArr[i8 - 1] = Test.sFld;
                    i9 = i8;
                    i4 += (int)(31416L + (i8 * i8));
                }
                b1 = b1;
                l *= Test.sFld;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + l + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i1, float f) {

        boolean b=true;
        int i10=3, i11=-180, i12=-138, i13=-5402;
        double d1=-21.65938;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 98.6F);

        Test.iArrFld[(i1 >>> 1) % N] ^= (-(--i1));
        i1 *= (int)(((i1++) * (-2.252F * (++Test.instanceCount))) * (--Test.iArrFld[(i1 >>> 1) % N]));
        b = ((fArr[(i1 >>> 1) % N] * (++i1)) > (++Test.instanceCount));
        vMeth1(0.101343, Test.instanceCount, -39);
        Test.byFld -= (byte)f;
        Test.byFld *= (byte)Test.instanceCount;
        for (i10 = 22; 388 > i10; i10++) {
            for (i12 = 1; i12 < 5; ++i12) {
                if (b) break;
                i11 += (i12 * i12);
                i1 -= (int)-3679473400L;
                Test.byFld = (byte)Test.instanceCount;
            }
            Test.instanceCount *= i12;
            d1 += i10;
            i13 <<= i12;
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + (b ? 1 : 0) + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i) {

        float f1=1.228F;
        int i14=-121, i15=17321, i16=5, i17=54220, i18=-12687, i19=-14;
        boolean b2=false;

        vMeth(i, f1);
        i14 = 1;
        do {
            i += (((i14 * f1) + f1) - Test.byFld);
            for (i15 = 9; i15 > 1; --i15) {
                i17 = 1;
                do {
                    i *= i16;
                    Test.instanceCount += (i17 + f1);
                    i16 -= 15693;
                } while (++i17 < 2);
                for (i18 = i14; i18 < 2; ++i18) {
                    Test.iArrFld[i18 - 1] = i19;
                    i *= -9748;
                    i19 -= i15;
                    if (b2) continue;
                    i16 = i18;
                    Test.instanceCount += Test.instanceCount;
                }
            }
        } while (++i14 < 168);
        long meth_res = i + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + i19 + (b2 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=24931, i21=193, i22=-32752, i23=100, i24=2, i25=21817, i26=14, iArr[]=new int[N];
        float f2=-1.254F, fArr2[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 65166);
        FuzzerUtils.init(fArr2, 0.363F);
        FuzzerUtils.init(lArr, 13L);

        iArr[(101 >>> 1) % N] >>= -206;
        Test.sFld = (short)(Float.intBitsToFloat(iMeth(i20)) - i20);
        Test.byFld = Test.byFld;
        Test.byFld *= (byte)57930;
        i20 <<= -18795;
        i20 &= 24251;
        i20 = i20;
        Test.byFld -= (byte)i20;
        for (i21 = 137; i21 > 4; i21 -= 3) {
            Test.iArrFld[i21] += (int)2.64F;
            f2 += (((i21 * Test.instanceCount) + i21) - Test.instanceCount);
            i23 = 1;
            do {
                if (bFld) break;
                f2 *= i22;
                i24 = 1;
                while (++i24 < 2) {
                    i20 += (0 + (i24 * i24));
                    i20 -= i22;
                    Test.instanceCount = i24;
                    Test.dFld *= Test.instanceCount;
                    f2 -= f2;
                    i20 = i22;
                    i22 = i21;
                    i22 *= i20;
                    fArr2[i23] += i21;
                }
                for (i25 = 1; i25 < 2; ++i25) {
                    i20 += (i25 * i25);
                    lArr[i23] = Test.instanceCount;
                    i26 = (int)Test.instanceCount;
                    i20 |= (int)0L;
                }
                Test.dFld -= Test.byFld;
            } while (++i23 < 394);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
