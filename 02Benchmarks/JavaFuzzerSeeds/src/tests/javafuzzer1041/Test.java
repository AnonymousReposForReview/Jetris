package tests.javafuzzer1041;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:09:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-392859330L;
    public byte byFld=-60;
    public static short sFld=10277;
    public static int iFld=-6;
    public static float fFld=69.483F;
    public static boolean bFld=false;
    public static boolean bFld1=true;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 38447);
        FuzzerUtils.init(Test.fArrFld, -29.430F);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d1, int i7) {

        int i8=12, i9=56790, i10=-56035, i11=-209, i12=25168;
        long l1=-1646361162L, l2=-11L;
        byte by1=91;

        for (i8 = 2; i8 < 267; ++i8) {
            float f=-2.823F;
            i7 = (int)f;
            for (i10 = 1; i10 < 6; ++i10) {
                for (l1 = 1; l1 < 2; ++l1) {
                    boolean b1=true;
                    Test.iArrFld[i10 - 1] = -242;
                    switch (((i10 % 2) * 5) + 63) {
                    case 67:
                        if (b1) break;
                    case 69:
                        b1 = b1;
                        switch (((i7 >>> 1) % 5) + 80) {
                        case 80:
                            l2 += (long)f;
                            i9 += (int)(l1 ^ i8);
                            Test.iArrFld[(int)(l1 - 1)] -= by1;
                            i7 = -14284;
                            break;
                        case 81:
                            f -= 0.418F;
                            f += (((l1 * Test.sFld) + i8) - i9);
                            break;
                        case 82:
                            f = i9;
                            break;
                        case 83:
                            i12 += (int)(-10L + (l1 * l1));
                            break;
                        case 84:
                            i7 -= i8;
                            break;
                        }
                    default:
                        i11 *= (int)d1;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10 + i11 + l1 + i12 + l2 + by1;
    }

    public static int iMeth(int i6) {

        double d2=0.2556, d3=-2.64323;
        int i13=119, i14=-125, i15=155, i16=-228, i17=9;
        byte by2=-123;
        boolean b2=true;

        vMeth(d2, 0);
        for (d3 = 18; d3 < 321; d3++) {
            for (i14 = 1; i14 < 5; ++i14) {
                Test.instanceCount = Test.iFld;
                Test.instanceCount *= 54056;
                if (b2) {
                } else if (b2) {
                    Test.iArrFld[i14 + 1] ^= (int)Test.instanceCount;
                    Test.fArrFld[i14 + 1] = i13;
                    d2 /= (i15 | 1);
                    try {
                        i6 = (-26 % i14);
                        i13 = (i6 % i14);
                        Test.iArrFld[(int)(d3 - 1)] = (-199 / i13);
                    } catch (ArithmeticException a_e) {}
                } else if (b2) {
                    i15 += i14;
                    for (i16 = 2; i16 > 1; i16--) {
                        Test.sFld ^= (short)i16;
                        by2 += (byte)(-7 + (i16 * i16));
                        i15 <<= Test.iFld;
                    }
                }
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i13 + i14 + i15 + i16 + i17 +
            by2 + (b2 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(long l) {

        int i4=240, i5=23334, i18=151, i19=5, i20=-38797;
        byte by=-114;

        for (i4 = 12; i4 < 325; i4 += 2) {
            i5 = (int)Math.max(Test.instanceCount, -13L);
            Test.iArrFld[i4] <<= (int)(((28.31276 + Test.instanceCount) + (by - -3)) * iMeth(i4));
            for (i18 = i4; 10 > i18; ++i18) {
                i20 = 1;
                do {
                    Test.iArrFld[i4 + 1] *= 40010;
                    i5 -= i18;
                } while (++i20 < 1);
                i5 = 180;
                Test.iFld -= (int)Test.fFld;
                if (Test.bFld1) {
                    i19 = (int)Test.instanceCount;
                    Test.iFld += (i18 * Test.instanceCount);
                    if (Test.bFld) continue;
                } else {
                    try {
                        i5 = (-199 / i19);
                        Test.iArrFld[i4] = (-78 % Test.iFld);
                        Test.iArrFld[i18 + 1] = (i19 / i18);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = i18;
                }
            }
        }
        long meth_res = l + i4 + i5 + by + i18 + i19 + i20;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=9162, i1=-7, i2=26671, i3=-59, i21=129, i22=83, i23=9, i24=48774, iArr[]=new int[N];
        short s=-13323;
        double d=-2.49799, d4=-54.87738;
        boolean b=true;

        FuzzerUtils.init(iArr, 2);

        for (i = 17; i < 340; i++) {
            iArr[i] -= ((byFld - (-(s >> i1))) - (-(-9 << (i1 >> i))));
            i1 += i;
            for (i2 = 2; i2 < 78; i2++) {
                d += (-(byFld++));
                i3 += (i2 ^ i2);
                b = bMeth(Test.instanceCount);
                i21 = 1;
                do {
                    Test.instanceCount = 4;
                    i1 = i2;
                    Test.iArrFld[i21 + 1] = i3;
                    Test.instanceCount ^= Test.iFld;
                    i3 = (int)Test.instanceCount;
                    Test.iFld = Test.iFld;
                    i1 *= (int)0L;
                    Test.instanceCount = Test.iFld;
                    d += -13117;
                } while ((i21 += 3) < 2);
                Test.fFld += i2;
            }
            Test.iFld *= i;
            for (d4 = 1; d4 < 78; ++d4) {
                switch (((i21 >>> 1) % 3) + 55) {
                case 55:
                    for (i23 = 1; i23 < 2; i23++) {
                        i24 <<= Test.iFld;
                        Test.iArrFld[i23 - 1] += i;
                        Test.iArrFld[i + 1] = i24;
                        Test.instanceCount *= (long)1.61070;
                        i3 <<= (int)Test.instanceCount;
                        i3 >>= i1;
                        i3 += i23;
                        i1 = s;
                    }
                    break;
                case 56:
                    i3 = Test.iFld;
                    break;
                case 57:
                    Test.instanceCount += (long)d4;
                default:
                    iArr[(int)(d4)] += (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
