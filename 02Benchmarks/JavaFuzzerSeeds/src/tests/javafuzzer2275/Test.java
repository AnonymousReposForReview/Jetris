package tests.javafuzzer2275;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:16:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3757800058675848591L;
    public static float fFld=37.1018F;
    public static double dFld=-20.31148;
    public static volatile float fFld1=2.685F;
    public static byte byFld=-9;
    public volatile long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];
    public static volatile long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.586F);
        FuzzerUtils.init(Test.lArrFld1, 21996L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d) {

        int i7=2968, i8=-19339, i9=5, i10=44218, i11=19433, i12=-21325;
        short s=5463;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i7 = i7;
        Test.fFld -= i7;
        for (i8 = 1; i8 < 273; i8++) {
            i9 -= i7;
            bArr = bArr;
            for (i10 = 1; 6 > i10; ++i10) {
                Test.fArrFld[i10 + 1] = i7;
                Test.lArrFld1[i10] = s;
                Test.instanceCount += (7982 + (i10 * i10));
                i12 = 1;
                while (++i12 < 2) {
                    Test.instanceCount = Test.instanceCount;
                    i7 = i12;
                    i11 = i11;
                    Test.instanceCount += (i12 | i10);
                    if (b1) continue;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11 + s + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {

        int i3=-3, i4=7, i5=-200, i6=4, i13=1645, i14=6, iArr1[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr1, 47290);
        FuzzerUtils.init(fArr, -1.609F);
        FuzzerUtils.init(lArr, -2969914566784272629L);
        FuzzerUtils.init(dArr, -2.85363);

        for (i3 = 228; i3 > 5; i3 -= 2) {
            switch ((i3 % 5) + 50) {
            case 50:
                i4 = -122;
                for (i5 = 1; i5 < 14; i5++) {
                    b = (iArr1[i5] == (++fArr[i5 - 1]));
                    Test.instanceCount += (++i6);
                    vMeth2(Test.dFld);
                    i6 += (((i5 * i6) + Test.fFld) - Test.fFld);
                    for (i13 = 1; i13 < 2; ++i13) {
                        iArr1[i3] %= (int)-53347L;
                        lArr = lArr;
                        Test.fFld += (((i13 * i6) + i6) - i14);
                        Test.instanceCount -= (long)Test.fFld;
                    }
                    Test.instanceCount = 28039;
                    Test.instanceCount += (6 + (i5 * i5));
                }
                break;
            case 51:
                Test.instanceCount += Test.instanceCount;
            case 52:
                dArr[i3 + 1][i3] += Test.fFld;
                break;
            case 53:
                iArr1[i3 - 1] -= 1;
                break;
            case 54:
                Test.instanceCount += Test.instanceCount;
                break;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + (b ? 1 : 0) + i13 + i14 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2) {

        float f1=0.29F, f2=-95.540F;
        int i15=67;

        i2 = (int)f1;
        vMeth1();
        Test.instanceCount = i2;
        i2 >>>= (int)-3567L;
        for (f2 = 3; 245 > f2; f2++) {
            i2 += (int)(((f2 * Test.fFld) + i2) - i2);
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i15;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=61, i16=-9, i17=59203, i18=14765, i19=43756, iArr[]=new int[N];
        float f=0.369F, f3=2.910F;
        boolean b2=false;
        short s1=-439;

        FuzzerUtils.init(iArr, 9);

        i <<= (int)(f - Long.reverseBytes(lArrFld[(-2 >>> 1) % N]));
        f = ((i1 - (f--)) % ((-iArr[(i >>> 1) % N]) | 1));
        vMeth(i1);
        if (b2) {
            lArrFld[(i >>> 1) % N] = i;
            i16 = 1;
            do {
                Test.dFld = -4078367362L;
                Test.instanceCount ^= i1;
            } while (++i16 < 292);
        } else {
            i1 -= i1;
            i1 += -65193;
        }
        i17 = 1;
        do {
            i1 += (int)f;
            i1 = (int)Test.instanceCount;
            lArrFld = Test.lArrFld1;
        } while (++i17 < 231);
        f3 = 1;
        do {
            lArrFld[(int)(f3)] -= s1;
            b2 = b2;
            i18 = 1;
            while (++i18 < 94) {
                Test.fFld += (i18 - Test.instanceCount);
                i = (int)Test.fFld1;
                i <<= i1;
                i19 = 1;
                do {
                    switch ((i19 % 2) + 67) {
                    case 67:
                        i1 += (i19 | i16);
                        i1 += (int)Test.fFld1;
                        break;
                    case 68:
                        Test.instanceCount >>>= i18;
                        i >>= Test.byFld;
                        i >>>= 29356;
                        break;
                    }
                    iArr[i18 + 1] >>= (int)Test.instanceCount;
                    i1 ^= i17;
                } while (++i19 < 1);
            }
        } while (++f3 < 266);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
