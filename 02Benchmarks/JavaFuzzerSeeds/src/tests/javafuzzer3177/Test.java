package tests.javafuzzer3177;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:19:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5717515675082841409L;
    public static float fFld=-79.899F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.487F);
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.dArrFld, -65.88475);
    }

    public static long sMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=5, i6=54, i7=-9, i8=20, i9=1, i10=38729, i11=-8;
        double d=-1.91786;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i5 = i5;
        for (i6 = 291; i6 > 14; i6 -= 3) {
            short s=-7499;
            if (i7 != 0) {
                vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
            d = 209;
            Test.instanceCount = s;
            bArr[i6] = true;
            Test.fArrFld = Test.fArrFld;
            if (b) {
                for (i8 = 17; 1 < i8; --i8) {
                    i5 = (int)Test.fFld;
                    Test.fFld += i8;
                    i10 = 1;
                    do {
                        try {
                            i7 = (Test.iArrFld[i10 + 1] % i6);
                            i7 = (-38250 / i9);
                            Test.iArrFld[i6] = (Test.iArrFld[i10] / -1908380892);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = i7;
                        i5 = s;
                    } while (++i10 < 2);
                }
            } else if (b) {
                Test.iArrFld[i6] = i5;
            } else if (b) {
                i9 = i11;
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public static float fMeth(int i3, int i4) {

        int i12=-14, i13=-23556, i14=22442;
        short s1=-10959;
        boolean b1=false;
        byte by1=-78;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 58L);

        vMeth();
        for (i12 = 17; i12 < 381; i12++) {
            Test.iArrFld[i12 - 1] <<= s1;
            i13 += (int)Test.instanceCount;
            lArr[i12] = (long)Test.fFld;
            switch (((i12 >>> 1) % 3) + 7) {
            case 7:
                Test.instanceCount = i3;
                Test.fFld *= i12;
                i14 = 1;
                while (++i14 < 5) {
                    i4 |= i4;
                    if (false) {
                        Test.fFld = i4;
                        Test.iArrFld[i14] -= (int)Test.instanceCount;
                        if (i12 != 0) {
                        }
                    } else if (b1) {
                        lArr[i14] = (long)Test.fFld;
                    }
                }
                break;
            case 8:
                Test.instanceCount += i12;
                break;
            case 9:
                i3 = by1;
            }
        }
        long meth_res = i3 + i4 + i12 + i13 + s1 + i14 + (b1 ? 1 : 0) + by1 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static short sMeth(int i2) {


        Test.instanceCount >>= (long)(((Test.instanceCount++) - (-(Test.fArrFld[(i2 >>> 1) % N] -= i2))) * (i2 +
            fMeth(i2, i2)));
        long meth_res = i2;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=117, i1=-52196, i15=-33, i16=8, i17=-11, i18=-7, i19=-86, i20=13, i21=-3, i22=4, i23=-1, i24=-1, i25=-236;
        byte by=101;
        double d1=1.118804;
        boolean b2=false;

        for (i = 324; i > 6; --i) {
            by += (byte)(-3 + (i * i));
            i1 &= sMeth(i1);
            Test.iArrFld[i - 1] -= i1;
            i1 = i;
            i1 >>>= (int)Test.instanceCount;
            i1 ^= i1;
            for (i15 = 79; i15 > 3; i15--) {
                Test.instanceCount = i15;
            }
            i17 = i1;
            switch ((((i16 >>> 1) % 6) * 5) + 62) {
            case 86:
                for (i18 = i; i18 < 79; ++i18) {
                    i19 += i16;
                }
                for (i20 = i; 79 > i20; ++i20) {
                    i22 = 1;
                    while (++i22 < 1) {
                        i1 = i1;
                        i19 -= 27487;
                        try {
                            Test.iArrFld[i] = (Test.iArrFld[i + 1] / i15);
                            Test.iArrFld[i20] = (i % 231);
                            i16 = (i22 / i17);
                        } catch (ArithmeticException a_e) {}
                        d1 *= by;
                        i23 = i15;
                        Test.instanceCount *= (long)Test.fFld;
                        Test.instanceCount = -59835;
                        Test.dArrFld[i22] = -249;
                        Test.fFld = i20;
                    }
                    b2 = b2;
                    switch (((i24 >>> 1) % 2) + 34) {
                    case 34:
                        i25 = 1;
                        do {
                            i19 += i25;
                            i21 = (int)d1;
                            Test.iArrFld[i25 - 1] += i1;
                        } while (++i25 < 1);
                        break;
                    case 35:
                        d1 = -261090054L;
                        break;
                    default:
                        Test.iArrFld[i] -= (int)44885L;
                    }
                }
                break;
            case 85:
                Test.fFld *= (float)d1;
                break;
            case 67:
                i24 >>= (int)Test.instanceCount;
                break;
            case 74:
                i24 &= -183;
                break;
            case 79:
                try {
                    i16 = (i17 / 35547);
                    i16 = (i1 / Test.iArrFld[i + 1]);
                    i16 = (203 / Test.iArrFld[i - 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 63:
                Test.iArrFld[i + 1] <<= (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount += i;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  fMeth ->  fMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
