package tests.javafuzzer780;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:42:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=49976L;
    public static volatile double dFld=-102.51687;
    public static byte byFld=95;
    public static long lFld=-134L;
    public static volatile float fFld=0.769F;
    public static long lFld1=1998529490L;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-10634);
        FuzzerUtils.init(Test.iArrFld, -11);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, int i6) {

        int i7=-37587, i8=10, i9=-114, i10=-10, i11=-4, i12=0, i13=-22056, i14=11, iArr[]=new int[N];
        float f=2.686F;

        FuzzerUtils.init(iArr, 203);

        i7 = i6;
        for (i8 = 1; i8 < 393; ++i8) {
            Test.dFld += 117.524F;
            iArr[i8 + 1] *= i6;
        }
        i10 = 133;
        do {
            Test.instanceCount += (((i10 * i7) + i10) - i5);
            f += 6049;
            iArr = iArr;
            for (i11 = 1; i11 < 12; i11++) {
                Test.byFld += (byte)i7;
            }
            if (true) break;
            for (i13 = 1; i13 < 12; ++i13) {
                Test.instanceCount <<= 6513905872168866054L;
                i5 += i11;
                Test.instanceCount += (long)f;
            }
        } while (--i10 > 0);
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, double d) {

        int i3=66, i4=9165, i15=-54654, i16=53678, i17=-10;
        byte by=-3;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.12251);

        for (i3 = 5; i3 < 270; i3++) {
            by = (byte)((-42758 + (18.4188 + iMeth(i4, i3))) + -39467);
            Test.sArrFld[i3 + 1] += (short)117.618F;
            switch ((((i2 >>> 1) % 2) * 5) + 15) {
            case 25:
                i4 += (-43910 + (i3 * i3));
                i2 = (int)Test.dFld;
                i2 |= -232;
            case 19:
                for (i15 = 1; i15 < 6; i15++) {
                    if (false) continue;
                }
                Test.iArrFld[i3 + 1] = i3;
            default:
                dArr[i3] = 45203;
                if (b) {
                    i17 = 6;
                    do {
                        dArr = dArr;
                        i2 += (i17 - i16);
                    } while (--i17 > 0);
                } else {
                    Test.instanceCount |= i16;
                }
            }
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + by + i15 + i16 + i17 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(short s, int i, int i1) {


        vMeth(i1, Test.dFld);
        i1 *= i1;
        vSmallMeth_check_sum += s + i + i1;
    }

    public void mainTest(String[] strArr1) {

        short s1=9499;
        int i18=12, i19=149, i20=7859, i22=-40007, i23=57467, i24=-37745, i25=200, i26=-3;
        float f1=-82.867F, f2=-85.874F;

        for (int smallinvoc=0; smallinvoc<691; smallinvoc++) vSmallMeth(s1, i18, i18);
        Test.instanceCount = i18;
        for (i19 = 10; i19 < 253; ++i19) {
            Test.lFld += Test.instanceCount;
            Test.byFld += (byte)(-10 + (i19 * i19));
            Test.lFld *= i19;
            Test.iArrFld[i19] += (int)Test.lFld;
        }
        for (i22 = 18; i22 < 316; ++i22) {
            Test.iArrFld[i22 + 1] *= (int)Test.fFld;
            Test.lFld = Test.lFld1;
            Test.fFld %= (i19 | 1);
        }
        switch ((((i19 >>> 1) % 2) * 5) + 96) {
        case 98:
            Test.lFld1 = Test.lFld;
            for (i24 = 11; 185 > i24; i24++) {
                i20 *= i20;
                Test.lFld1 += i24;
                f1 = 1;
                do {
                    switch ((int)(((f1 % 7) * 5) + 121)) {
                    case 149:
                        Test.byFld = (byte)Test.dFld;
                        Test.dFld *= i24;
                        break;
                    case 122:
                        i23 += (int)(f1 * Test.instanceCount);
                        i26 = 1;
                        while (++i26 < 1) {
                            boolean b1=true;
                            f2 -= 33941;
                            b1 = b1;
                            i23 = -11;
                            Test.iArrFld[i26 + 1] = i23;
                            i18 &= 13;
                            i23 = -49985;
                            i23 &= i26;
                            Test.lFld >>= 45097L;
                        }
                        break;
                    case 156:
                        Test.iArrFld[(int)(f1)] >>= i23;
                    case 154:
                        Test.dFld = -5486;
                        break;
                    case 142:
                        i20 >>>= Test.byFld;
                        break;
                    case 147:
                        Test.instanceCount = (long)f2;
                        break;
                    case 131:
                        i23 = (int)Test.dFld;
                        break;
                    }
                } while (++f1 < 144);
            }
            break;
        case 102:
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
