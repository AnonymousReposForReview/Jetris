package tests.javafuzzer1495;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:26:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3313845584L;
    public int iFld=88;
    public static short sFld=17764;
    public boolean bFld=true;
    public int iFld1=99;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, int i8) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.715F);

        fArr[(i7 >>> 1) % N] = -148;
        vMeth_check_sum += i7 + i8 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l, int i6) {

        int i9=-8, i10=30334, i11=-7, i12=219, iArr[]=new int[N];
        double d=2.106322;
        byte by=23;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 15121);
        FuzzerUtils.init(sArr, (short)24293);

        i6 = (int)(i6 * -185L);
        vMeth(i6, -2);
        for (i9 = 1; i9 < 136; ++i9) {
            l = i9;
            iArr[i9] = (int)d;
            by += (byte)(8823184595788990241L + (i9 * i9));
            i6 *= (int)Test.instanceCount;
            sArr[i9 + 1] ^= (short)i10;
            for (i11 = i9; i11 < 12; ++i11) {
                i6 <<= i10;
            }
        }
        long meth_res = l + i6 + i9 + i10 + Double.doubleToLongBits(d) + by + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public boolean bMeth(int i1) {

        int i2=9, i3=-57895, i4=-14524, i5=8, i13=-10246, i14=3;
        float f1=26.331F, fArr1[]=new float[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -52565L);
        FuzzerUtils.init(fArr1, 0.442F);

        for (i2 = 16; i2 < 291; ++i2) {
            Test.sFld = (short)Integer.reverseBytes((int)((i3 * iFld) + (i3 % (Test.instanceCount | 1))));
            if (b) {
                iFld <<= (int)Math.abs(Test.instanceCount);
                for (i4 = 6; 1 < i4; i4 -= 2) {
                    Test.instanceCount -= ((lArr[i4]++) + (i5++));
                    Test.instanceCount += (iMeth(Test.instanceCount, 2) * -10);
                    fArr1[i4 - 1] += i4;
                    for (i13 = i2; i13 < 3; i13++) {
                        Test.iArrFld[i4 + 1] = i13;
                        Test.instanceCount >>= i4;
                        Test.instanceCount = i5;
                        i3 += i5;
                    }
                    f1 += (6 + (i4 * i4));
                    if (b) continue;
                }
            } else if (b) {
                Test.instanceCount >>= i13;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i13 + i14 + Float.floatToIntBits(f1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i15=-4, i16=250, i17=53466, i18=-94, i19=162;
        float f=0.681F, f2=-63.250F;
        byte by1=-37;
        double d1=0.117281;

        i = 1;
        do {
            iFld += (i ^ iFld);
            f = 1;
            do {
                if (bMeth(iFld)) break;
                f2 = iFld;
                iFld += (int)(((f * iFld) + i) - i);
                iFld += (int)f;
                Test.instanceCount -= -128;
                by1 = (byte)Test.instanceCount;
                iFld -= i;
            } while (++f < 76);
            iFld <<= (int)-6764513064510247587L;
            iFld *= (int)Test.instanceCount;
            f2 -= iFld;
            iFld <<= i;
            if (bFld) continue;
            Test.sFld += (short)6618155623623099624L;
        } while (++i < 333);
        d1 = d1;
        f2 *= Test.instanceCount;
        for (i15 = 10; i15 < 199; i15++) {
            iFld += i15;
            Test.instanceCount += i15;
            by1 = (byte)iFld1;
            for (i17 = 2; i17 < 133; i17++) {
                i18 -= 19853;
                iFld += (((i17 * Test.instanceCount) + iFld) - i17);
            }
            iFld += i15;
            iFld1 -= (int)Test.instanceCount;
        }
        i19 = 1;
        do {
            i18 >>= i17;
            Test.iArrFld = Test.iArrFld;
        } while (++i19 < 323);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
