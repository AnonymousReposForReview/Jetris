package tests.javafuzzer2622;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=833959706L;
    public static byte byFld=-53;
    public double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 24207);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4) {

        float f1=0.533F;

        i4 -= (int)f1;
        long meth_res = i4 + Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        int i3=65465, i5=11, i6=32428;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.340F);

        Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N] <<= (int)(((--fArr[(i3 >>> 1) % N]) - (Test.byFld >>> 17755)) *
            (-(Test.iArrFld[(58415 >>> 1) % N][(i3 >>> 1) % N]--)));
        Test.byFld <<= (byte)(Test.instanceCount--);
        i3 = (int)Long.reverseBytes(lMeth(i3));
        for (i5 = 2; i5 < 305; ++i5) {
            i6 = (int)Test.instanceCount;
        }
        long meth_res = i3 + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=6, i2=2, i7=-65058, i8=1, iArr[]=new int[N];
        long l=13L;
        float f2=-126.41F;
        boolean b=true;
        double d1=80.41183;

        FuzzerUtils.init(iArr, -36398);

        Test.iArrFld[(i1 >>> 1) % N][(37 >>> 1) % N] += (i1 * ((-14 + (i1 -= i1)) * (-(40077 * Math.max(i1, 7)))));
        for (l = 10; l < 267; ++l) {
            i2 *= (int)(iMeth1() + l);
            i7 = 1;
            do {
                double d=-2.27362;
                i2 = i2;
                Test.instanceCount ^= -43223;
                d -= 162;
                f2 = i7;
                if (b) continue;
            } while (++i7 < 6);
            i8 = 1;
            while (++i8 < 6) {
                Test.iArrFld[(int)(l)][i8 + 1] = i7;
                switch (((i1 >>> 1) % 1) + 44) {
                case 44:
                default:
                    f2 += i2;
                    Test.iArrFld[(int)(l + 1)] = iArr;
                }
            }
            d1 -= -14;
        }
        long meth_res = i1 + l + i2 + i7 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i8 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=63.838F, f3=-18.372F;
        int i=-15083, i9=-10, i10=-197, i11=-16959, i12=-14, i13=7, i14=139, i15=517, i16=7;
        byte by=-63;
        boolean b1=true, b2=false;
        short s=-32553;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -250L);

        dArrFld[(-248 >>> 1) % N] *= (f + (Test.instanceCount - (i + by)));
        i = iMeth();
        f += i;
        Test.instanceCount ^= Test.instanceCount;
        Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] = i;
        for (i9 = 172; i9 > 6; --i9) {
            i += -6;
            Test.iArrFld[i9][i9 + 1] = i9;
            for (i11 = 4; i11 < 151; ++i11) {
                i10 = i;
                i10 |= i12;
                for (i13 = i11; i13 < 2; ++i13) {
                    i14 = -176;
                }
            }
            i15 = 1;
            while (++i15 < 151) {
                switch ((((i13 >>> 1) % 8) * 5) + 109) {
                case 126:
                    lArr[i9] ^= -1;
                    f += i15;
                    break;
                case 116:
                    if (b1) break;
                    b1 = b2;
                    break;
                case 113:
                    for (f3 = 1; f3 < 1; f3 += 2) {
                        i12 = i;
                        i16 = 0;
                        Test.instanceCount ^= s;
                    }
                    Test.iArrFld = Test.iArrFld;
                    if (true) {
                        i16 >>= 141;
                    }
                    break;
                case 140:
                    b1 = b1;
                    break;
                case 123:
                    i10 = i10;
                    i12 -= -44;
                    Test.iArrFld[i9 - 1][i15] <<= i12;
                    break;
                case 136:
                    f += (i15 * i14);
                case 148:
                    try {
                        i16 = (i15 / -1261699377);
                        i12 = (i10 / 1597476730);
                        i14 = (190 / i12);
                    } catch (ArithmeticException a_e) {}
                case 139:
                    Test.instanceCount += i14;
                    break;
                default:
                    i14 += (((i15 * i11) + i14) - Test.instanceCount);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
