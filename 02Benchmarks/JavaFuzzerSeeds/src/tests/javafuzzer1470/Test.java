package tests.javafuzzer1470;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:11:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-60159L;
    public static byte byFld=-118;
    public static int iFld=69;
    public short sFld=-4216;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld1[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 55355);
        FuzzerUtils.init(Test.fArrFld, 2.170F);
        FuzzerUtils.init(Test.iArrFld1, -11);
        FuzzerUtils.init(Test.lArrFld, -3069369703L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f2=1.282F, f3=39.804F;
        int i9=221, i10=-22470, i11=-34751, i12=55402;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 59105L);

        for (f2 = 10; 184 > f2; f2++) {
            for (i10 = (int)(f2); i10 < 9; i10++) {
                f3 += (((i10 * Test.byFld) + i10) - i11);
                if (b) continue;
                i12 = 1;
                do {
                    f3 = Test.iFld;
                    Test.iFld = i9;
                    i11 -= (int)-6702209854519283206L;
                    try {
                        i9 = (Test.iFld % i10);
                        i11 = (i11 / -38);
                        Test.iFld = (197 / i12);
                    } catch (ArithmeticException a_e) {}
                    if (b) {
                        lArr1[(int)(f2 - 1)] = i12;
                        Test.iFld += (i12 * i12);
                        i9 -= 14376;
                        i11 += (int)-6.64638;
                    } else {
                        i9 += Test.iFld;
                    }
                } while (++i12 < 1);
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + i9 + i10 + i11 + Float.floatToIntBits(f3) + (b ? 1 : 0) + i12 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(int i1, int i2) {

        int i3=-183, i4=1, i5=2, i6=13, i7=-42221, i8=239;
        float f1=2.748F, fArr[]=new float[N];
        double d=-2.76758;
        boolean b1=false;

        FuzzerUtils.init(fArr, -2.189F);

        for (i3 = 10; 176 > i3; i3++) {
            Test.iArrFld[i3 + 1] = (int)(i4 *= (int)(f1++));
            i4 += (int)((fArr[i3 + 1] -= (float)(i2 + d)) * ((-243 * Test.instanceCount) - (208L >> (11 + (i2 * i2)))));
            for (i5 = i3; i5 < 10; ++i5) {
                Test.byFld ^= (byte)(Test.iArrFld[i5] + Test.byFld);
                for (i7 = 1; 1 > i7; i7++) {
                    i8 += (int)f1;
                    i6 = i1;
                    vMeth2();
                    fArr[i3] = -13;
                    f1 += (i7 * i7);
                    if (b1) {
                        Test.iFld -= (int)Test.instanceCount;
                        Test.instanceCount += (i7 * i7);
                        i2 = i1;
                    } else if (b1) {
                        if (b1) break;
                    } else if (b1) {
                        f1 += i4;
                    } else {
                        Test.instanceCount += i7;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i5 + i6 + i7 +
            i8 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, float f) {

        boolean b2=true;
        int i13=-54, i14=-31270, i15=-232, i16=14, iArr[]=new int[N];
        byte by=21;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -8773);
        FuzzerUtils.init(lArr, 4205306219L);
        FuzzerUtils.init(dArr, 2.73728);

        Test.instanceCount = (Test.instanceCount++);
        for (int i : iArr) {
            lArr = (lArr = (lArr = lArr));
            dArr[(i >>> 1) % N] += (--i);
            vMeth1(-39708, Test.iFld);
            if (b2) break;
            i *= -15554;
        }
        for (i13 = 354; i13 > 10; --i13) {
            f += i13;
            Test.instanceCount += (((i13 * l) + i14) - i14);
            by += (byte)32838;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)25980);
            for (i15 = 1; i15 < 5; i15++) {
                Test.instanceCount += i15;
                i14 = i15;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + (b2 ? 1 : 0) + i13 + i14 + by + i15 + i16 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i17=-12, i18=-61, i19=196, i20=-8849, i21=14, i22=-10;
        double d1=2.10189, d2=-2.15267;
        float f4=0.984F;
        long l1=14L;
        boolean b3=false;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)108);

        vMeth(Test.instanceCount, -43.130F);
        Test.fArrFld[(Test.iFld >>> 1) % N] += -27;
        Test.instanceCount = 30490;
        for (i17 = 13; i17 < 283; ++i17) {
            Test.iFld = i17;
            Test.iFld += Test.iFld;
        }
        for (i19 = 9; i19 < 263; i19++) {
            i18 = i17;
            Test.instanceCount += i19;
        }
        i18 *= (int)Test.instanceCount;
        switch ((((i18 >>> 1) % 3) * 5) + 24) {
        case 35:
            i18 = i17;
            break;
        case 31:
            i21 = 377;
            while (--i21 > 0) {
                for (d1 = 2; d1 < 67; ++d1) {
                    sFld = (short)Test.instanceCount;
                    Test.iArrFld1 = Test.iArrFld1;
                    switch ((((i20 >>> 1) % 7) * 5) + 91) {
                    case 96:
                        Test.lArrFld[i21 + 1] *= (long)f4;
                        i18 = i21;
                        Test.iArrFld[(int)(d1)] *= (int)-25578L;
                        break;
                    case 117:
                        l1 = 1;
                        while (++l1 < 2) {
                            i22 = i18;
                            i20 += (int)(l1 + Test.iFld);
                            i20 += (int)27377L;
                            byArr = byArr;
                            sFld += (short)(l1 * l1);
                            if (b3) {
                                Test.instanceCount = i20;
                                i20 += (int)(((l1 * i18) + i19) - f4);
                            } else {
                                d2 -= i22;
                            }
                        }
                        break;
                    case 108:
                        i18 += (int)114.896F;
                        break;
                    case 113:
                        i20 += (int)-59.300F;
                        break;
                    case 105:
                        f4 -= Test.instanceCount;
                        break;
                    case 97:
                    case 118:
                    }
                }
            }
            break;
        case 38:
            i20 -= i17;
        default:
            i18 = -106;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
