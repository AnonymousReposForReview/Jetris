package tests.javafuzzer373;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:56:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2182878818L;
    public static boolean bFld=false;
    public double dFld=3.115414;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i3) {

        int i5=-53498, i6=4, i7=-226, i8=-62, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        float f1=79.633F, fArr[]=new float[N];
        double d1=0.5147;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 2.254F);
        FuzzerUtils.init(lArr1, -65164L);
        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(iArr2, 12);

        i3 = (int)Test.instanceCount;
        i3 += -15620;
        i3 = (int)Test.instanceCount;
        fArr[(i3 >>> 1) % N] -= i3;
        lArr1[(i3 >>> 1) % N] *= Test.instanceCount;
        for (int i4 : iArr1) {
            for (i5 = 1; i5 < 4; ++i5) {
                i6 += i5;
                iArr2 = iArr2;
                f1 += i6;
                for (i7 = 1; i7 < 2; i7++) {
                    d1 = f1;
                    iArr2[i5][i5] += 37722;
                    i3 <<= i6;
                    i8 = i4;
                }
            }
        }
        long meth_res = i3 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i1, long l, int i2) {

        float f=-93.963F;
        double d=1.57720;
        int i9=-14, i10=-4, i11=6, i12=3, i13=-59932, iArr[][]=new int[N][N];
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-34);
        FuzzerUtils.init(iArr, 46785);
        FuzzerUtils.init(lArr, 823562545L);

        byArr[(i2 >>> 1) % N] = (byte)(l--);
        iArr[(2 >>> 1) % N][(i1 >>> 1) % N] *= (int)((iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] + (f--)) - (lArr[(i2 >>> 1)
            % N] + i1));
        f = (float)d;
        iArr[(-10985 >>> 1) % N][(i2 >>> 1) % N] = (int)fMeth(i2);
        for (i9 = 8; 175 > i9; i9++) {
            Test.instanceCount += i9;
            if (Test.bFld) break;
            i2 = (int)f;
            i2 += -8;
            iArr[i9][i9 + 1] -= i1;
            for (i11 = i9; 9 > i11; ++i11) {
                i10 >>= (int)Test.instanceCount;
                i2 = (int)d;
                i1 -= i13;
                if (i1 != 0) {
                    vMeth1_check_sum += i1 + l + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i9 + i10 +
                        i11 + i12 + i13 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += i1 + l + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 +
            i13 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i) {

        int i14=9, i15=74, i16=81, i17=-129, i18=-14, iArr3[]=new int[N];
        long l1=0L;
        float f2=-50.222F;
        double d2=-51.18301;
        byte by=-12;
        short s=18663;

        FuzzerUtils.init(iArr3, 9);

        i <<= i;
        vMeth1(i, Test.instanceCount, i);
        for (i14 = 12; i14 < 253; ++i14) {
            Test.instanceCount += (i14 + i14);
            for (l1 = i14; l1 < 7; ++l1) {
                Test.instanceCount = i;
                i15 /= (int)((long)(f2) | 1);
                d2 -= -89;
                i *= by;
                if (Test.bFld) break;
                iArr3[(int)(l1)] = i15;
                Test.instanceCount += l1;
                for (i17 = 1; i17 < 1; ++i17) {
                    d2 += d2;
                    i16 = s;
                }
            }
        }
        vMeth_check_sum += i + i14 + i15 + l1 + i16 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + by + i17
            + i18 + s + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i19=-2, i20=-62374, i21=-64797, i22=217, i23=-208, i24=55, i25=-595, i26=27247, i27=7;
        byte by1=79;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 36L);

        vMeth(10);
        for (i19 = 270; i19 > 3; i19--) {
            for (i21 = 94; i21 > i19; --i21) {
                dFld *= i20;
                for (i23 = 1; i23 < 1; ++i23) {
                    i20 |= (int)Test.instanceCount;
                    Test.iArrFld[i21 + 1] = (int)-2527606835L;
                    i20 %= (int)(i19 | 1);
                    try {
                        i22 = (45081 % i22);
                        i22 = (Test.iArrFld[i19 + 1] % -14739);
                        i25 = (i21 % i22);
                    } catch (ArithmeticException a_e) {}
                }
                i22 *= (int)3306039464L;
            }
            i20 += (((i19 * Test.instanceCount) + Test.instanceCount) - i25);
            i24 = (int)Test.instanceCount;
            i25 *= i21;
            Test.bFld = Test.bFld;
            if (Test.bFld) {
                i22 += i19;
                by1 *= (byte)i23;
                dFld -= i25;
                Test.instanceCount = i22;
            } else if (Test.bFld) {
                for (i26 = i19; i26 < 94; ++i26) {
                    lArr2[i26] <<= Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    if (Test.bFld) continue;
                    Test.iArrFld[i26 - 1] += i19;
                    Test.iArrFld[i19] <<= 9854;
                    Test.iArrFld[i26] = i22;
                    Test.instanceCount += (((i26 * by1) + i20) - by1);
                    Test.bFld = Test.bFld;
                    i25 *= i21;
                }
                i25 += 6805;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
