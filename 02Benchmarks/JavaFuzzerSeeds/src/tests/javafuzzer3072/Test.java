package tests.javafuzzer3072;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:31:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static short sFld=24001;
    public static boolean bFld=true;
    public float fFld=0.873F;
    public double dFld=-75.105547;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i3=-183, i4=40656, i5=7, iArr1[]=new int[N];
        float f=0.250F, f1=-102.819F;
        byte by=-91, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)0);
        FuzzerUtils.init(iArr1, -53643);

        for (i3 = 2; i3 < 211; ++i3) {
            Test.instanceCount -= i4;
            Test.instanceCount >>= 25240;
            i4 -= (int)f;
            i4 >>= i3;
            switch ((i3 % 2) + 21) {
            case 21:
                for (f1 = 1; f1 < 8; f1 += 3) {
                    l1 += (-236 + (f1 * f1));
                    switch ((i3 % 1) + 64) {
                    case 64:
                        i5 += i5;
                        break;
                    default:
                        l1 = -9;
                    }
                    i4 -= (int)Test.instanceCount;
                    l1 <<= by;
                    i5 = 44831;
                    byArr = byArr;
                }
            case 22:
                iArr1[i3] = i4;
                break;
            default:
                i4 += (int)147L;
            }
        }
        vMeth1_check_sum += l1 + i3 + i4 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + by +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, int i2) {

        float f2=-118.833F, f3=0.360F;
        int i6=197, i7=7;
        boolean b=false;

        vMeth1(Test.instanceCount);
        for (f2 = 191; f2 > 6; f2 -= 3) {
            f3 = Test.instanceCount;
            if (i6 != 0) {
                vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i6 + Float.floatToIntBits(f3) + i7 + (b ? 1 :
                    0);
                return;
            }
            if (b) {
                i2 = i6;
                Test.instanceCount += (long)(((f2 * Test.instanceCount) + i1) - i2);
                i2 = (int)Test.instanceCount;
            } else if (b) {
                Test.sFld += (short)(((f2 * i1) + i2) - f2);
            } else if (b) {
                i7 = 1;
                do {
                    i2 += (((i7 * i7) + f3) - f2);
                    i6 = i6;
                    try {
                        i1 = (32127 / i6);
                        Test.iArrFld[(int)(f2 - 1)] = (i2 / -52701);
                        Test.iArrFld[(int)(f2 + 1)] = (Test.iArrFld[i7] / i2);
                    } catch (ArithmeticException a_e) {}
                    i2 += (i7 - i2);
                    i6 -= (int)Test.instanceCount;
                } while (++i7 < 25);
                vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i6 + Float.floatToIntBits(f3) + i7 + (b ? 1 :
                    0);
                return;
            } else {
                i6 >>= 176;
                vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i6 + Float.floatToIntBits(f3) + i7 + (b ? 1 :
                    0);
                return;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i6 + Float.floatToIntBits(f3) + i7 + (b ? 1 : 0);
    }

    public int iMeth(short s, int i, long l) {

        int i8=34416, i9=48, i10=-112, i11=-4, i12=50, i13=-111, iArr[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -62);
        FuzzerUtils.init(fArr1, -16.128F);

        iArr[(i >>> 1) % N] ^= (i--);
        vMeth(i, i);
        if (Test.bFld) {
            for (i8 = 15; i8 < 375; i8++) {
                for (i10 = 1; i10 < 5; i10++) {
                    i11 += (i10 ^ i);
                }
                i11 += (i8 | i11);
                switch ((i8 % 9) + 3) {
                case 3:
                    if (Test.bFld) continue;
                    i12 = 5;
                    do {
                        i9 = (int)Test.instanceCount;
                    } while (--i12 > 0);
                    i9 %= (int)(Test.instanceCount | 1);
                    fFld += (i8 * i8);
                case 4:
                    i9 = i11;
                    dFld -= fFld;
                    break;
                case 5:
                    iArr[i8 + 1] = i9;
                    break;
                case 6:
                    i += i13;
                    break;
                case 7:
                    iArr[i8 + 1] *= -60382;
                    break;
                case 8:
                    l *= Test.instanceCount;
                    break;
                case 9:
                    fFld += l;
                case 10:
                    i9 += (((i8 * Test.instanceCount) + i) - i9);
                    break;
                case 11:
                    iArr[i8] = s;
                default:
                    iArr[i8 + 1] += (int)1.967F;
                }
            }
        } else if (Test.bFld) {
            fArr1[(i11 >>> 1) % N] += 1;
        } else if (Test.bFld) {
            l = i11;
        } else {
            i9 -= (int)34.706F;
        }
        long meth_res = s + i + l + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 107.387F);

        fArr[(-1 >>> 1) % N] *= iMeth(Test.sFld, -6, -4L);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
