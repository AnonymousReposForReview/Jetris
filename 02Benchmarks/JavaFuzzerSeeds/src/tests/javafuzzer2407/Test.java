package tests.javafuzzer2407;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:20:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=56354L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -41.47F);
        FuzzerUtils.init(Test.iArrFld, 84);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=23, i4=202, i5=-62407, i6=0, iArr1[][]=new int[N][N];
        double d=87.57636;
        float f=-85.360F;

        FuzzerUtils.init(iArr1, -72);

        Test.instanceCount -= -16484;
        i3 = 1;
        while (++i3 < 164) {
            i4 *= i3;
            for (i5 = 1; i5 < 10; ++i5) {
                d /= (Test.instanceCount | 1);
                f = -42784;
                i4 &= i3;
                f += (i5 - i6);
                Test.fArrFld[i3 - 1] = i4;
                iArr1[i5][i5 + 1] *= i3;
                i4 -= 14;
                try {
                    i4 = (i4 / 2041024593);
                    i6 = (-52251 % iArr1[i3 - 1][i5 - 1]);
                    i6 = (-1604460777 % i6);
                } catch (ArithmeticException a_e) {}
            }
            i6 += i3;
            i4 = (int)-39.44067;
            i6 *= i6;
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth1() {

        int i7=-7, i8=251, i9=42, i11=3, i12=128, i13=-53007;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 29L);

        vMeth2();
        Test.iArrFld[(i7 >>> 1) % N] <<= i7;
        for (i8 = 8; i8 < 211; i8++) {
            lArr[i8 + 1] <<= 6;
            i7 *= (int)Test.instanceCount;
            try {
                i7 = (i9 / i9);
                i9 = (i8 % i9);
                i7 = (Test.iArrFld[i8 + 1] / 191);
            } catch (ArithmeticException a_e) {}
            i9 >>>= i8;
            for (i11 = i8; i11 < 8; i11++) {
                lArr[i8 - 1] <<= i7;
                Test.instanceCount = 2836766453L;
                i13 = 1;
                do {
                    Test.iArrFld[i13 + 1] ^= 29695;
                    i7 -= i11;
                    if (b) continue;
                    i12 += (((i13 * i8) + i13) - i9);
                } while (++i13 < 1);
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i11 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {

        int i=-9, i1=-13, i2=-13, i14=-56562, i15=-163, i16=-35, i17=40111, iArr[]=new int[N];
        short s=3220;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 36.980F);
        FuzzerUtils.init(iArr, -200);

        i += (int)((i++) - fArr[(i >>> 1) % N]);
        i1 = 1;
        while (++i1 < 210) {
            fArr[i1] *= i;
            s += (short)((iArr[i1]--) - (i2 += (-7098 * i1)));
            vMeth1();
        }
        Test.instanceCount += i2;
        for (i14 = 20; i14 < 322; i14++) {
            lArrFld[i14] = lArrFld[i14];
            if (false) break;
            for (i16 = 1; i16 < 5; i16++) {
                if (b1) break;
                Test.bArrFld[i16 + 1] = b1;
                iArr[i14 + 1] >>= i16;
                Test.iArrFld[i14] = (int)-1.64217;
                Test.instanceCount += (-3 + (i16 * i16));
            }
        }
        vMeth_check_sum += i + i1 + s + i2 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f1=2.209F, f2=64.521F;
        int i18=1, i19=35373, i20=-185, i21=175, i22=43713, i23=-9, i24=-65, i25=14, i27=55847, i28=7, i30=51012,
            i31=248, i32=7, i33=9, i34=14;
        long l=-2072L, lArr1[]=new long[N];
        double d1=-73.17941, d2=-123.55880;
        boolean b2=true;

        FuzzerUtils.init(lArr1, 50425L);

        vMeth();
        f1 *= i18;
        for (i19 = 14; i19 < 249; ++i19) {
            for (i21 = 107; i21 > 1; i21 -= 3) {
                i20 = i22;
            }
            i18 += i19;
            Test.instanceCount += (((i19 * i19) + i21) - i20);
            i18 += (((i19 * i21) + f1) - Test.instanceCount);
        }
        i22 += i19;
        for (i23 = 16; i23 < 304; ++i23) {
            for (l = 2; l < 87; ++l) {
                lArrFld[(int)(l)][i23 + 1] += i23;
            }
            i24 += (i23 - i20);
            i18 -= (int)436889490675297802L;
        }
        Test.instanceCount -= -104;
        for (i27 = 8; i27 < 276; i27++) {
            if (b2) {
                switch (((-7768 >>> 1) % 8) + 79) {
                case 79:
                    switch ((i27 % 2) + 21) {
                    case 21:
                        switch ((i27 % 3) + 56) {
                        case 56:
                            for (i30 = 3; i30 < 94; ++i30) {
                                for (i32 = 1; i32 < 2; i32++) {
                                    Test.instanceCount = (long)d1;
                                }
                                d2 = 2;
                                while (--d2 > 0) {
                                    Test.instanceCount = i19;
                                    Test.iArrFld = Test.iArrFld;
                                    f1 += l;
                                }
                                for (f2 = 1; f2 < 2; ++f2) {
                                    short s1=15635;
                                    s1 -= (short)l;
                                    d1 = -62887;
                                }
                            }
                            break;
                        case 57:
                            i25 += -14;
                        case 58:
                            i18 -= i21;
                            break;
                        }
                        break;
                    case 22:
                        Test.instanceCount = i25;
                        break;
                    default:
                        f1 += (((i27 * i28) + l) - i21);
                    }
                case 80:
                    d1 -= i34;
                    break;
                case 81:
                case 82:
                    d1 += i28;
                    break;
                case 83:
                    Test.instanceCount <<= i33;
                case 84:
                    Test.iArrFld[i27 + 1] += (int)l;
                    break;
                case 85:
                    i31 -= (int)Test.instanceCount;
                    break;
                case 86:
                    f1 += i27;
                default:
                    i20 >>= i28;
                }
            } else if (b2) {
                i25 += (int)l;
            } else {
                b2 = b2;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
