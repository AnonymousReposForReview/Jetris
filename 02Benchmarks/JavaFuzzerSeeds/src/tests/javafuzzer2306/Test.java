package tests.javafuzzer2306;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:02:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3748982222342402760L;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f) {

        long l=-329545578L;
        int i1=0, i2=233, i3=211, i4=190, i5=-1;
        byte by=-98, byArr[]=new byte[N];
        double d=1.115291;

        FuzzerUtils.init(byArr, (byte)-17);

        for (l = 11; l < 219; l++) {
            for (i2 = 1; i2 < 8; ++i2) {
                for (i4 = 1; i4 < 2; i4++) {
                    f += (-2L + (i4 * i4));
                    i1 += (((i4 * i2) + l) - Test.instanceCount);
                    i5 |= by;
                    i3 = (int)l;
                    i3 += i4;
                    i3 = i4;
                    i5 <<= (int)l;
                }
                d += 57444;
            }
            byArr[(int)(l + 1)] >>= (byte)l;
            i1 = -27672;
            i5 *= i4;
            Test.instanceCount += (((l * i2) + i5) - f);
        }
        long meth_res = Float.floatToIntBits(f) + l + i1 + i2 + i3 + i4 + i5 + by + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=0.48F;
        boolean b=true;
        short s=-2388;
        int i7=1, i8=-5, i9=-10, i10=8, i11=13, iArr[]=new int[N];
        double d1=-86.67452;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr, -4005788106L);

        iMeth(f1);
        b = b;
        for (int i6 : iArr) {
            s ^= (short)i6;
            lArr[(7 >>> 1) % N] += 127L;
            for (i7 = 1; i7 < 4; i7++) {
                i6 = i6;
                s -= (short)d1;
                f1 += (((i7 * s) + i7) - i6);
                for (i9 = 1; i9 < 2; i9++) {
                    Test.instanceCount = i8;
                    i6 = s;
                    if (i7 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + s + i7 + i8 +
                            Double.doubleToLongBits(d1) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    i10 = -14;
                    i8 -= i11;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + s + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
            i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i) {


        vMeth();
        Test.instanceCount = i;
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i12=36590, i13=0, i14=-2, i15=43491, i16=91, iArr1[]=new int[N];
        double d2=0.88180;
        short s1=-29570;

        FuzzerUtils.init(iArr1, 209);

        for (int smallinvoc=0; smallinvoc<200; smallinvoc++) vSmallMeth(i12);
        Test.instanceCount >>= i12;
        i12 = (int)-7325484328757219264L;
        i12 += (int)Test.instanceCount;
        i12 = (int)-97.120F;
        i12 = i12;
        Test.instanceCount = -5778;
        for (i13 = 1; 134 > i13; i13++) {
            for (i15 = i13; 188 > i15; i15++) {
                switch (((i16 >>> 1) % 1) + 80) {
                case 80:
                    i12 <<= i12;
                    break;
                default:
                    i16 -= (int)Test.instanceCount;
                    i14 *= i13;
                    i14 = (int)Test.instanceCount;
                    d2 = 1;
                    do {
                        float f2=0.572F;
                        i12 -= (int)f2;
                        Test.instanceCount = i13;
                        if (false) continue;
                        i16 -= i16;
                        i14 += (int)(d2 * Test.instanceCount);
                        switch ((i15 % 5) + 120) {
                        case 120:
                            i16 = i14;
                            i14 = (int)6L;
                            i14 -= s1;
                            Test.instanceCount >>>= -1912074952L;
                            break;
                        case 121:
                        case 122:
                            i12 = (int)Test.instanceCount;
                            iArr1[i15 - 1] += (int)d2;
                            i16 &= i14;
                            Test.instanceCount += (long)d2;
                            break;
                        case 123:
                            iArr1[i13 - 1] *= i13;
                        case 124:
                            i16 = i14;
                            break;
                        default:
                            i12 = i16;
                        }
                    } while (++d2 < 1);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
