package tests.javafuzzer3186;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:29:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=15718L;
    public double dFld=-1.15692;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f1=52.628F, f2=-107.960F;
        double d=0.110262;
        int i5=-64, i6=10, i7=-28301, i8=78, i9=-7, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 2);

        f1 -= f1;
        d = Test.instanceCount;
        for (i5 = 6; i5 < 393; i5++) {
            for (i7 = i5; i7 < 4; i7++) {
                iArr2 = FuzzerUtils.int1array(N, (int)53716);
            }
            i6 += (((i5 * i8) + i8) - i5);
            iArr2[i5] -= i8;
            switch (((i7 >>> 1) % 5) + 55) {
            case 55:
                for (f2 = 1; f2 < 4; ++f2) {
                    iArr2 = iArr2;
                }
                i8 += (i5 * i9);
                i9 = i7;
                break;
            case 56:
                i6 = (int)Test.instanceCount;
                i8 += i5;
                Test.instanceCount += i6;
                break;
            case 57:
            case 58:
                i9 = i9;
                break;
            case 59:
                i9 >>= i9;
                break;
            default:
                d += 114;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 +
            Float.floatToIntBits(f2) + i9 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(byte by) {

        int i4=4, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 12);

        iArr1[(i4 >>> 1) % N] *= 44;
        vMeth1();
        vMeth_check_sum += by + i4 + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i2, float f, int i3) {

        double d1=-120.41640;

        i2 += (int)(i2 - -1.98483);
        vMeth((byte)(93));
        d1 = i3;
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i1=-235, i10=85, i11=8, i12=13, i13=17, i14=34730, i15=226, i16=138, i17=-4, i18=-245, i19=-11,
            i20=-6, iArr[]=new int[N];
        float f3=-102.557F, f4=54.842F, f5=57.79F;
        byte by1=-91;
        long l=441044715L;
        short s=14281, sArr[]=new short[N];

        FuzzerUtils.init(iArr, -51701);
        FuzzerUtils.init(sArr, (short)-9018);

        for (i = 6; i < 398; i++) {
            iArr[i - 1] = ((iMeth(i1, f3, -243) - i) / (by1 | 1));
            if (true) break;
            for (l = 64; 3 < l; l -= 3) {
                i10 >>= i;
                iArr[i - 1] += i1;
                i10 |= (int)0L;
                for (f4 = i; f4 < 4; ++f4) {
                    sArr[(int)(f4 - 1)] = (short)i;
                }
            }
            i10 = i1;
        }
        by1 -= (byte)i11;
        lArrFld[(i >>> 1) % N] -= i;
        Test.instanceCount *= s;
        for (i12 = 9; i12 < 198; ++i12) {
            for (i14 = 3; i14 < 133; i14 += 2) {
                Test.instanceCount += i13;
            }
            Test.instanceCount += (((i12 * i10) + i10) - i);
            by1 *= (byte)i10;
            Test.instanceCount += i15;
            for (i16 = 7; i16 < 133; ++i16) {
                for (f5 = 1; f5 < 2; f5++) {
                    Test.instanceCount += (long)((long)f5 | i11);
                }
                i10 *= i16;
                for (i19 = 2; i19 > 1; i19--) {
                    Test.instanceCount = i13;
                    dFld -= i16;
                    f3 = i16;
                }
                i15 >>= i10;
                s += (short)(((i16 * i11) + Test.instanceCount) - i);
                by1 |= (byte)i14;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
