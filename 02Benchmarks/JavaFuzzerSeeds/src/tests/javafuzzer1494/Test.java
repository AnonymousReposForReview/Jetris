package tests.javafuzzer1494;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:26:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8437655381736056317L;
    public static float fFld=-125.965F;
    public static byte byFld=-92;
    public static short sFld=12188;
    public static volatile int iFld=-11;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -104);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, long l, byte by) {

        int i4=-59627;
        boolean b=true;

        i4 += (int)d;
        if (b) {
            Test.fFld += Test.fFld;
            Test.iArrFld1[(i4 >>> 1) % N] %= (int)(i4 | 1);
            vMeth1_check_sum += Double.doubleToLongBits(d) + l + by + i4 + (b ? 1 : 0);
            return;
        } else if (b) {
            Test.iArrFld1[(i4 >>> 1) % N] >>>= (int)8L;
            i4 += i4;
        }
        i4 >>>= i4;
        vMeth1_check_sum += Double.doubleToLongBits(d) + l + by + i4 + (b ? 1 : 0);
    }

    public static short sMeth() {

        double d1=0.84066, d2=2.2520;
        int i5=-179, i6=0, i7=-8, i8=11, i9=-206, i10=-87;
        long l1=-6L, lArr[]=new long[N];
        boolean b1=true;

        FuzzerUtils.init(lArr, 205L);

        vMeth1(d1, 2244882723L, Test.byFld);
        for (d2 = 14; d2 < 355; ++d2) {
            for (l1 = (long)(d2); l1 < 5; l1++) {
                Test.instanceCount += (((l1 * Test.instanceCount) + i5) - i6);
                for (i7 = 1; 1 > i7; i7++) {
                    i5 = i8;
                    i5 += Test.byFld;
                    lArr[(int)(d2 - 1)] >>= i7;
                    b1 = b1;
                    Test.instanceCount += i6;
                    i8 >>= i7;
                }
                d1 -= l1;
                for (i9 = 1; i9 < 1; ++i9) {
                    lArr[(int)(d2)] *= i5;
                }
                i8 = i6;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i5 + l1 + i6 + i7 + i8 + (b1 ? 1 :
            0) + i9 + i10 + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        short s=17141;
        int i11=-43084, i12=174, i13=-25560, i14=6, i15=0, i16=31630, i17=-232, i18=-206, i19=-170;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)41);
        FuzzerUtils.init(lArr1, -55042L);

        byArr[(5 >>> 1) % N] = (byte)((--i1) - (s--));
        sMeth();
        for (i11 = 5; i11 < 312; i11++) {
            i1 = (int)Test.instanceCount;
        }
        Test.iArrFld1[(i11 >>> 1) % N] += i11;
        for (i13 = 14; i13 < 312; ++i13) {
            i1 = -58291;
            Test.instanceCount += (((i13 * i14) + i11) - i11);
        }
        Test.instanceCount |= i2;
        i15 = 1;
        while ((i15 += 3) < 343) {
            for (i16 = 1; i16 < 14; ++i16) {
                Test.instanceCount = i2;
            }
            for (i18 = 1; i18 < 14; i18++) {
                Test.instanceCount &= Test.instanceCount;
                lArr1[i15 - 1] -= (long)73.467F;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + s + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=9, i21=10, i22=38051, i23=2, i24=-41385;
        boolean b2=false;
        double d3=2.45571;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)111);

        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
        i = 1;
        do {
            vMeth(i, i, i);
        } while (++i < 253);
        for (int i20 : Test.iArrFld1) {
            switch ((((i >>> 1) % 8) * 5) + 62) {
            case 75:
            case 77:
                Test.iArrFld1[(i >>> 1) % N] -= Test.byFld;
                b2 = b2;
                byArr1[(i20 >>> 1) % N] -= (byte)i;
                Test.byFld >>= (byte)i;
            case 87:
                Test.byFld /= (byte)(Test.byFld | 1);
                break;
            case 79:
                for (i21 = 2; 63 > i21; i21++) {
                    i22 = (int)d3;
                    switch ((i21 % 2) + 84) {
                    case 84:
                        for (i23 = 1; i23 < 2; i23 += 3) {
                            Test.sFld += (short)(i23 ^ i);
                        }
                        i24 >>= Test.byFld;
                        if (b2) {
                            i22 = (int)Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            lArrFld[i21 - 1] = Test.instanceCount;
                            i24 -= i22;
                        } else {
                            if (b2) {
                                i20 += (((i21 * Test.instanceCount) + i21) - i24);
                                i22 += (int)Test.fFld;
                                lArrFld[i21] &= Test.instanceCount;
                            }
                            i20 = i22;
                            i22 += i;
                        }
                        i24 >>>= i21;
                        break;
                    case 85:
                        try {
                            i20 = (236 / Test.iArrFld1[i21]);
                            i24 = (-1923781744 % iArrFld[i21 - 1]);
                            i24 = (i22 / 71);
                        } catch (ArithmeticException a_e) {}
                        i20 <<= i24;
                        break;
                    default:
                        dArrFld[i21] -= i21;
                    }
                }
                break;
            case 90:
                Test.fFld *= Test.fFld;
                break;
            case 97:
                i20 += Test.iFld;
                break;
            case 88:
                iArrFld[(i24 >>> 1) % N] -= (int)d3;
                break;
            case 102:
                if (true) continue;
                break;
            default:
                if (false) continue;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
