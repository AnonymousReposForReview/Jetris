package tests.javafuzzer2265;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:06:55 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=50103L;
    public static boolean bFld=false;
    public static double dFld=84.90499;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 159);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d) {

        int i5=17, i6=-196, i7=236, i8=216, i9=-18103, i10=-47416, i11=-10;
        double d1=56.83199;
        float f2=95.421F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.561F);

        for (i5 = 6; i5 < 211; ++i5) {
            Test.instanceCount -= i5;
            i6 += 631;
            i6 += (((i5 * i6) + i6) - i5);
            Test.instanceCount = i5;
            i6 += (int)d;
        }
        for (d1 = 6; d1 < 131; d1++) {
            for (i8 = 13; 1 < i8; i8--) {
                i7 += (54602 + (i8 * i8));
                i6 *= (int)6682L;
                Test.iArrFld[(int)(d1 - 1)] = (int)f2;
                Test.bFld = Test.bFld;
                for (i10 = 1; 2 > i10; ++i10) {
                    Test.iArrFld[(int)(d1)] += (int)f2;
                    fArr[i10 - 1] = 41;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + i9 +
            Float.floatToIntBits(f2) + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(float f1, int i4, long l) {

        double d2=-1.99555;
        int i12=185, i13=8, i14=-156, iArr1[]=new int[N];
        short s=6458;
        float f3=108.397F;

        FuzzerUtils.init(iArr1, 7);

        i4 = ((iArr1[(i4 >>> 1) % N]--) + (Math.abs(5) + Math.abs(i4)));
        vMeth2(d2);
        i4 *= (int)Test.instanceCount;
        d2 -= -19495;
        i4 = i4;
        for (i12 = 2; i12 < 302; ++i12) {
            i13 -= i12;
            i4 += (int)(6886233359673360541L + (i12 * i12));
            i13 = i13;
            f1 *= -59270;
            i13 %= (int)(s | 1);
        }
        i4 += (int)f1;
        for (f3 = 1; f3 < 183; f3++) {
            if (Test.bFld) continue;
            l *= (long)-31.734F;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + l + Double.doubleToLongBits(d2) + i12 + i13 + s +
            Float.floatToIntBits(f3) + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        int i1=154, i2=6528, i3=0, i15=-13, i16=10208, iArr[]=new int[N];
        float f=116.18F;

        FuzzerUtils.init(iArr, -37215);

        iArr[(i >>> 1) % N] >>= (int)((Test.instanceCount - Math.min(i, -6013)) + ((++i) + Math.min(-31457, 4774)));
        for (i1 = 5; i1 < 177; ++i1) {
            for (f = 1; 9 > f; f++) {
                vMeth1(f, i, -1844947958L);
                for (i15 = 1; 2 > i15; i15++) {
                    Test.instanceCount = i16;
                    i16 = (int)Test.instanceCount;
                    Test.dFld *= i16;
                }
            }
            iArr[i1] += (int)Test.instanceCount;
            i = i15;
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i15 + i16 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=-9391, i18=2, i19=-39277, i20=17416, i21=11411, i22=-135, i23=3, i24=-52, i25=3, i26=-818, i27=18818;
        float f4=-19.535F;
        long l1=75L;

        vMeth(i17);
        for (i18 = 11; i18 < 202; ++i18) {
            Test.iArrFld[i18 + 1] ^= (int)Test.instanceCount;
            i20 = 1;
            while (++i20 < 131) {
                if (Test.bFld) continue;
                i21 = 1;
                do {
                    byte by=-33;
                    Test.dFld += by;
                    f4 = i21;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount = i18;
                    i17 *= i17;
                    Test.iArrFld[i20 - 1] = i21;
                } while (++i21 < 1);
            }
            for (i22 = i18; i22 < 131; i22++) {
                for (l1 = 1; l1 < 1; ++l1) {
                    Test.iArrFld = Test.iArrFld;
                    i23 <<= i22;
                    i23 *= (int)Test.instanceCount;
                    i19 *= (int)Test.dFld;
                    i23 += (int)(l1 + f4);
                }
                f4 -= 1L;
                Test.iArrFld[i18] &= (int)l1;
                i17 += (int)Test.instanceCount;
                for (i25 = 1; i25 < 1; ++i25) {
                    i17 += (i25 ^ i18);
                    if (Test.bFld) continue;
                }
                i23 *= i19;
                i19 *= i17;
                i27 = 1;
                while (++i27 < 1) {
                    Test.instanceCount += (((i27 * l1) + f4) - i27);
                    i24 = i20;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
