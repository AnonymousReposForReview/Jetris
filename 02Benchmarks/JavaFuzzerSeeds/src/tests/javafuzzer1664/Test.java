package tests.javafuzzer1664;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:03:27 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7L;
    public static double dFld=-111.107477;
    public static byte byFld=-86;
    public static short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)30882);
        FuzzerUtils.init(Test.dArrFld, -42.32219);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(float f, int i2) {

        int i3=138, i4=9, i5=-11186, i6=35203, i7=-35225, iArr1[]=new int[N];
        boolean b=false;
        short s=-8046;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1161722661L);
        FuzzerUtils.init(iArr1, -3);

        Test.dFld -= i2;
        i3 = 1;
        do {
            switch ((i3 % 4) + 19) {
            case 19:
                for (i4 = 1; i4 < 6; i4++) {
                    for (i6 = 1; i6 < 2; i6++) {
                        i2 = -224;
                        Test.instanceCount = i3;
                        if (b) break;
                        Test.dFld = i6;
                        lArr1 = lArr1;
                        i7 = i4;
                        iArr1[i4 - 1] = Test.byFld;
                    }
                }
                break;
            case 20:
                Test.instanceCount -= Test.instanceCount;
                i2 += (i3 * i2);
                Test.instanceCount *= i4;
            case 21:
                i2 /= (int)(s | 1);
            case 22:
                iArr1[i3 - 1] -= i3;
                break;
            default:
                i5 = (int)Test.dFld;
            }
        } while (++i3 < 273);
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + s +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i1=-12, i8=-245, iArr[]=new int[N];
        long l=-12L, lArr[]=new long[N];
        float f1=-98.875F;
        boolean b1=false;
        double d1=-1.111016;
        short s1=-29419;

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(lArr, 3333567251340938101L);

        Test.dFld *= (((Test.instanceCount + -1) - (5172911021756120626L + (--i1))) - -11708);
        i1 += (--iArr[(i1 >>> 1) % N]);
        lArr[(i1 >>> 1) % N] = (Test.instanceCount--);
        l = 1;
        while (++l < 209) {
            Test.dFld = lMeth1(f1, i1);
            Test.dFld = i1;
            if (true) continue;
            if (b1) break;
            f1 += (((l * i1) + f1) - i1);
            for (d1 = l; d1 < 8; ++d1) {
                iArr[(int)(d1)] += i8;
                i1 >>= s1;
                Test.sArrFld[(int)(d1 + 1)] += (short)i1;
                iArr[(int)(d1)] /= (int)(Test.instanceCount | 1);
                lArr = lArr;
            }
        }
        long meth_res = i1 + l + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i8 + s1 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        int i=53397;
        double d=47.42205;

        i += (int)((d++) + (lMeth() * 11L));
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i9=21746, i10=-11, i11=219, i12=3010, i13=53, i14=0, i15=2, i16=76, iArr2[]=new int[N];
        long l2=3722667914329274865L, lArr2[]=new long[N];
        boolean b2=true;

        FuzzerUtils.init(iArr2, -23196);
        FuzzerUtils.init(lArr2, 9L);

        for (int smallinvoc=0; smallinvoc<495; smallinvoc++) vSmallMeth();
        Test.dFld += Test.instanceCount;
        for (i9 = 6; i9 < 270; i9++) {
            Test.instanceCount <<= -66;
            for (l2 = 3; l2 < 95; l2++) {
                i10 += i10;
                iArr2[(int)(l2 + 1)] = i11;
                Test.dArrFld[i9] *= i9;
                iArr2[(int)(l2 + 1)] >>= i11;
                try {
                    i10 = (iArr2[i9] % i10);
                    i10 = (i12 / 233);
                    i12 = (27250 / i12);
                } catch (ArithmeticException a_e) {}
                i11 <<= i9;
                for (i13 = (int)(l2); 2 > i13; ++i13) {
                    i12 &= i14;
                }
                iArr2 = iArr2;
                switch ((i9 % 4) + 59) {
                case 59:
                    i10 <<= i9;
                case 60:
                case 61:
                    Test.instanceCount = i12;
                    for (i15 = (int)(l2); 2 > i15; ++i15) {
                        float f2=35.240F;
                        b2 = true;
                        Test.instanceCount = (long)Test.dFld;
                        i14 -= (int)Test.instanceCount;
                        iArr2[i15] = i9;
                        iArr2 = iArr2;
                        Test.dArrFld[(int)(l2)] = f2;
                        iArr2[i15] = (int)Test.instanceCount;
                        iArr2 = iArr2;
                    }
                    Test.instanceCount = i15;
                    break;
                case 62:
                    lArr2[(int)(l2 - 1)] = i13;
                    i11 = (int)Test.dFld;
                    Test.byFld += (byte)-25L;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  lMeth1 ->  lMeth1 lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
