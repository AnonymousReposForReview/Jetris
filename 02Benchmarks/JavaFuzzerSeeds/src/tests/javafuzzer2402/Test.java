package tests.javafuzzer2402;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:12:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6806845264106857128L;
    public int iFld=-103;
    public static int iFld1=-31;
    public static float fFld=-90.1017F;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 757);
        FuzzerUtils.init(Test.fArrFld, -48.693F);
        FuzzerUtils.init(Test.dArrFld, -98.73982);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i, int i1) {

        double d=12.56067;

        i1 = i;
        Test.iArrFld[(i >>> 1) % N] = (int)d;
        i -= i;
        d += i;
        vMeth1_check_sum += i + i1 + Double.doubleToLongBits(d);
    }

    public static void vMeth() {

        int i2=0, i3=5, i4=26433, i5=1040, i6=13;
        long l1=1569436567800709373L, lArr[]=new long[N];
        double d1=-59.62344;
        boolean b=false;
        byte by=-97;
        short s=-24532;

        FuzzerUtils.init(lArr, -19065L);

        Test.instanceCount = ((Test.iFld1 = (int)(Test.instanceCount + Test.iFld1)) * (++Test.iFld1));
        vMeth1(-13274, Test.iFld1);
        for (i2 = 1; 246 > i2; ++i2) {
            Test.iFld1 += (((i2 * Test.iFld1) + Test.iFld1) - i3);
            i3 >>= i2;
            switch (((-4 >>> 1) % 10) + 78) {
            case 78:
                for (l1 = 1; 7 > l1; ++l1) {
                    switch ((int)((l1 % 6) + 12)) {
                    case 12:
                        for (i5 = 1; 2 > i5; i5++) {
                            Test.iFld1 = (int)d1;
                            if (b) continue;
                            Test.instanceCount >>= l1;
                        }
                        break;
                    case 13:
                        by += (byte)i4;
                        Test.fArrFld[(int)(l1 + 1)] = -63549L;
                        if (i5 != 0) {
                            vMeth_check_sum += i2 + i3 + l1 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + (b ? 1 : 0)
                                + by + s + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    case 14:
                        Test.fFld = Test.iFld1;
                        break;
                    case 15:
                        Test.iFld1 = i4;
                        break;
                    case 16:
                        i6 += (int)(-2.677F + (l1 * l1));
                    case 17:
                        Test.iFld1 >>= Test.iFld1;
                        break;
                    }
                }
            case 79:
                Test.instanceCount |= i3;
                break;
            case 80:
                Test.instanceCount |= Test.instanceCount;
                break;
            case 81:
                lArr[i2] = i5;
            case 82:
                i3 -= (int)l1;
            case 83:
                Test.fArrFld[i2] = 3;
                break;
            case 84:
                Test.fFld -= 2632698826L;
                break;
            case 85:
                Test.iArrFld = FuzzerUtils.int1array(N, (int)88);
            case 86:
                s += (short)12933;
                break;
            case 87:
                Test.iArrFld[i2 + 1] += (int)l1;
                break;
            }
        }
        vMeth_check_sum += i2 + i3 + l1 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + by + s +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l) {

        int i7=-46762, i8=14551, i9=-41404, i10=232, i11=0, i12=-13, i13=-46603;
        boolean b1=true;
        double d2=6.105009;

        vMeth();
        for (i7 = 4; i7 < 166; ++i7) {
            Test.iFld1 <<= (int)l;
            Test.iFld1 -= (int)1368647295L;
            Test.iFld1 -= Test.iFld1;
            if (b1) continue;
            Test.instanceCount = 1;
            i9 = 1;
            do {
                d2 = Test.instanceCount;
            } while (++i9 < 10);
            Test.instanceCount += i10;
            for (i11 = 10; i11 > 1; i11 -= 3) {
                i10 = (int)l;
                Test.iFld1 = -155;
                i12 = i13;
                i12 >>= i11;
            }
        }
        long meth_res = l + i7 + i8 + (b1 ? 1 : 0) + i9 + Double.doubleToLongBits(d2) + i10 + i11 + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=9, i15=7, i16=-63509, i17=36526, i18=82, i19=12, i20=-14, i21=-44, i22=5, i23=-3;
        short s1=-2955;
        long l2=-3207834540L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1371785197059777934L);

        Test.iArrFld[(iFld >>> 1) % N] -= iMeth(Test.instanceCount);
        for (i14 = 5; i14 < 329; i14++) {
            iFld += (int)3422086682L;
            Test.iArrFld[i14 - 1] = (int)Test.fFld;
            if (false) {
                Test.instanceCount = Test.iFld1;
                for (i16 = 1; i16 < 78; ++i16) {
                    Test.instanceCount |= i16;
                    s1 <<= (short)Test.iFld1;
                    lArr1[i14 - 1] = i16;
                    Test.iFld1 <<= 12;
                    i17 ^= (int)Test.instanceCount;
                    Test.iFld1 = i17;
                    l2 <<= i15;
                    Test.fFld += (((i16 * Test.fFld) + Test.instanceCount) - iFld);
                    for (i18 = 1; i18 < 2; ++i18) {
                        try {
                            iFld = (-53166 / i16);
                            iFld = (-198 % i14);
                            i15 = (146 % i19);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.instanceCount = iFld;
                }
                Test.iFld1 += (i14 + l2);
                iFld -= Test.iFld1;
            } else {
                l2 *= (long)Test.fFld;
            }
        }
        for (i20 = 133; i20 > 2; --i20) {
            Test.dArrFld[i20 + 1] *= i21;
            i19 *= i20;
            l2 ^= l2;
            Test.instanceCount = i21;
            switch ((i20 % 7) + 67) {
            case 67:
                i22 = 1;
                do {
                    i15 += (((i22 * iFld) + i21) - iFld);
                    try {
                        Test.iFld1 = (i16 / -56719);
                        i21 = (iFld % -138);
                        i15 = (Test.iArrFld[i22 + 1] % Test.iFld1);
                    } catch (ArithmeticException a_e) {}
                } while (++i22 < 191);
            case 68:
                i15 -= i20;
                break;
            case 69:
                i19 = i18;
                break;
            case 70:
                Test.fFld = i14;
            case 71:
                Test.iArrFld[i20 - 1] -= (int)l2;
            case 72:
                Test.iFld1 >>>= i22;
                break;
            case 73:
                i23 += (i20 + s1);
                break;
            default:
                i17 ^= i18;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
