package tests.javafuzzer2488;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:24:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-623522027L;
    public static volatile byte byFld=111;
    public int iFld=11;
    public static boolean bFld=true;
    public static float fFld=12.565F;
    public static short sFld=-3237;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 92);
        FuzzerUtils.init(Test.lArrFld, -64570L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i11, long l, int i12) {

        int i13=180, i14=13, i15=43394, i16=-211;
        float f1=111.299F;
        short s=-6218;

        for (i13 = 6; i13 < 192; ++i13) {
            i12 >>= i14;
            if (true) {
                f1 = i14;
                Test.instanceCount >>= i11;
                s = (short)i12;
                Test.iArrFld[i13] = i13;
            } else {
                i11 *= 11549;
                Test.instanceCount = i12;
                if (i13 != 0) {
                }
            }
            Test.instanceCount += (i13 | (long)f1);
            s += (short)(i13 + i12);
            for (i15 = 1; i15 < 9; ++i15) {
                f1 += (((i15 * i15) + i12) - l);
                Test.instanceCount <<= l;
            }
        }
        long meth_res = i11 + l + i12 + i13 + i14 + Float.floatToIntBits(f1) + s + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        int i5=-169, i6=91, i7=-2, i8=-5, i9=49235, i10=26649;
        float f=72.473F;
        double d=1.62240;
        boolean b=true;

        for (i5 = 271; i5 > 6; i5 -= 2) {
            for (i7 = 1; i7 < 12; ++i7) {
                for (i9 = 1; i9 < 2; i9++) {
                    f += (i9 - Test.byFld);
                    Test.iArrFld[i9 + 1] ^= (--i8);
                    f += (--i10);
                    if ((iMeth(i8, Test.instanceCount, 11) > Test.instanceCount) || b) {
                        i10 += (i9 * i9);
                    } else if (true) {
                        i3 = (int)(d - Test.instanceCount);
                        i3 = Test.iArrFld[i5 - 1];
                    } else {
                        i4 -= i4;
                        d += f;
                        i4 = -27575;
                        i6 *= i10;
                    }
                    i3 -= 73;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d) + (b ? 1 : 0);
    }

    public static void vSmallMeth(int i, int i1) {


        i1 = (i--);
        vMeth(i, i);
        vSmallMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        int i17=42426, i18=26, i19=13, i20=135, i21=-53, i22=-13, i23=-223, i24=-31005, i25=26553, i26=-53, i27=-11;
        double d1=109.42826;

        Test.byFld = (byte)((Test.byFld--) - (++Test.byFld));
        for (int smallinvoc=0; smallinvoc<637; smallinvoc++) vSmallMeth(iFld, iFld);
        for (i17 = 14; i17 < 234; i17++) {
            for (i19 = 7; 114 > i19; ++i19) {
                iFld = 3;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount *= Test.instanceCount;
                for (i21 = 1; i21 < 2; ++i21) {
                    iFld += (-82 + (i21 * i21));
                    Test.iArrFld[i21 + 1] -= 2;
                    Test.instanceCount += (23431 + (i21 * i21));
                    if (Test.bFld) break;
                    i20 = i19;
                    iFld += -48594;
                    i20 -= (int)Test.instanceCount;
                    i20 *= (int)Test.instanceCount;
                    Test.fFld = (float)d1;
                    d1 *= i17;
                }
                Test.instanceCount += -14;
            }
            i20 = i23;
            Test.bFld = Test.bFld;
            Test.instanceCount += (i17 * i23);
            Test.instanceCount |= 10;
            for (i24 = 7; i24 < 114; ++i24) {
                if (Test.bFld) break;
                for (i26 = 1; i26 < 2; ++i26) {
                    i18 -= (int)Test.fFld;
                    Test.instanceCount = (long)Test.fFld;
                    Test.byFld = (byte)Test.sFld;
                    Test.instanceCount = iFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
