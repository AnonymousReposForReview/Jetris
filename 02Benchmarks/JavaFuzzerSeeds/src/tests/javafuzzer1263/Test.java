package tests.javafuzzer1263;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:32:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-31840L;
    public static volatile double dFld=-112.78632;
    public static int iFld=-32886;
    public float fFld=0.261F;
    public static boolean bFld=false;
    public volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -27);
        FuzzerUtils.init(Test.lArrFld, 869L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i1=-34358, i2=24141, i4=6, i5=35499, i6=197;
        byte by2=-8;
        float f=77.680F;
        boolean b1=false;

        for (i1 = 3; i1 < 222; i1++) {
            i2 += i1;
            Test.instanceCount += (i1 - i2);
            if (b1) {
                i4 = 1;
                do {
                    i2 -= i1;
                    i2 -= i4;
                    for (i5 = 1; i5 < 1; ++i5) {
                        by2 *= (byte)i2;
                        Test.iArrFld[i5 - 1] = (int)Test.instanceCount;
                        Test.iArrFld[i5] = i2;
                        i2 += i6;
                        i6 -= by2;
                        i6 *= -55191;
                        Test.instanceCount -= (long)f;
                    }
                } while (++i4 < 7);
            }
        }
        long meth_res = i1 + i2 + i4 + i5 + i6 + by2 + Float.floatToIntBits(f) + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i, short s) {

        double d=121.64204;
        int i7=-238, i8=62070, i9=-8, i10=60285;
        byte by3=-38;

        switch ((((iMeth() >>> 1) % 6) * 5) + 28) {
        case 38:
            try {
                for (d = 373; 4 < d; d -= 3) {
                    for (i8 = 1; i8 < 13; ++i8) {
                        i7 += (i8 + i7);
                        Test.instanceCount = i;
                        Test.instanceCount %= (by3 | 1);
                        i9 -= i7;
                        i *= (int)Test.instanceCount;
                        i10 <<= i9;
                        i10 += i8;
                    }
                    i7 = 66;
                    i = i10;
                    Test.iArrFld[(int)(d + 1)] *= i7;
                }
                i += i7;
            }
            catch (NullPointerException exc2) {
                Test.dFld = -9;
            }
            break;
        case 48:
            Test.instanceCount ^= by3;
            break;
        case 45:
            i *= 199;
        case 34:
            i10 = (int)d;
            break;
        case 56:
            i7 = i9;
            break;
        case 55:
            by3 |= by3;
            break;
        }
        vMeth1_check_sum += i + s + Double.doubleToLongBits(d) + i7 + i8 + i9 + by3 + i10;
    }

    public void vMeth(byte by, boolean b) {

        int i11=-53123, i12=-27464;
        long l=11L, lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.270F);
        FuzzerUtils.init(lArr, 48627L);

        for (byte by1 : byArrFld) {
            vMeth1(26464, (short)(27988));
            i11 = 4;
            while (--i11 > 0) {
                Test.iFld += (i11 * i11);
            }
            Test.iFld -= (int)fFld;
            Test.iFld = (int)fFld;
            if (false) break;
            i12 = 1;
            while (++i12 < 4) {
                Test.iFld ^= Test.iFld;
                Test.iFld += (int)fFld;
                l = 1;
                while (++l < 1) {
                    lArr[(int)(l)] = i11;
                    Test.iFld -= (int)fFld;
                }
                Test.iFld += (((i12 * Test.iFld) + i12) - Test.iFld);
                Test.iFld += (i12 * i12);
            }
        }
        vMeth_check_sum += by + (b ? 1 : 0) + i11 + i12 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by4=-122;
        int i13=1, i14=-37226, i15=-150, i16=158, i18=-219, i19=4, i20=13948, i21=101, i22=59864, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 56251);

        vMeth(by4, Test.bFld);
        Test.iFld = Test.iFld;
        Test.lArrFld[(Test.iFld >>> 1) % N] = 2;
        Test.instanceCount += Test.iFld;
        i13 = 1;
        do {
            try {
                iArr[i13 - 1] = (i13 / i13);
                Test.iFld = (-60277 / i13);
                Test.iFld = (Test.iFld % Test.iFld);
            } catch (ArithmeticException a_e) {}
            Test.iFld += i13;
            Test.iFld += (i13 - Test.instanceCount);
            i14 = 1;
            while (++i14 < 100) {
                iArr[i14 - 1] = Test.iFld;
                fFld += i15;
                i16 = 1;
                do {
                    int i17=-25267;
                    Test.instanceCount += (i16 - i16);
                    Test.iArrFld[i13] = (int)58919L;
                    i15 <<= i17;
                    try {
                        i17 = (18189 % i15);
                        iArr[i16] = (-237 % i15);
                        i15 = (iArr[i13 + 1] % i15);
                    } catch (ArithmeticException a_e) {}
                    by4 = (byte)i13;
                    i17 >>= i14;
                    i17 = i14;
                } while (++i16 < 1);
                Test.instanceCount += i13;
            }
        } while (++i13 < 252);
        for (i18 = 6; 271 > i18; i18++) {
            i19 += (((i18 * fFld) + Test.instanceCount) - i19);
            fFld += (i18 + Test.instanceCount);
            i20 = 1;
            do {
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.instanceCount = 9;
                    Test.lArrFld[i21] = i14;
                    i22 += 77;
                    iArrFld1[i20] = 159;
                    Test.instanceCount >>= Test.instanceCount;
                }
            } while (++i20 < 95);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
