package tests.javafuzzer3234;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:23:16 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2539884981181944071L;
    public static short sFld=-25851;
    public volatile int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 47.41138);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i8, int i9, double d) {

        int i10=-58084, i11=31745, i12=-24743, i13=8;
        double d1=-1.85519;
        short s=4559;
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -139L);

        i9 += i8;
        i10 = 1;
        do {
            for (d1 = 23; d1 > 1; --d1) {
                i8 = i9;
                s += (short)d1;
                i11 = i9;
                for (i12 = 1; i12 < 2; i12++) {
                    switch ((((i9 >>> 1) % 1) * 5) + 43) {
                    case 45:
                        i8 += i8;
                        switch (((i9 >>> 1) % 1) + 19) {
                        case 19:
                            lArr1[i10 + 1] *= Test.instanceCount;
                            try {
                                i13 = (i11 % -524522816);
                                i11 = (-228 / i8);
                                i9 = (-97 % i9);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                        i9 = i13;
                        b = true;
                        break;
                    default:
                        Test.instanceCount *= i9;
                    }
                }
            }
        } while ((i10 += 3) < 202);
        long meth_res = i8 + i9 + Double.doubleToLongBits(d) + i10 + Double.doubleToLongBits(d1) + i11 + s + i12 + i13
            + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(int i7) {

        double d2=0.122190;
        int i14=-19247, i15=-14, i16=-11, i17=-176, i18=-220, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -53L);
        FuzzerUtils.init(fArr, 1.323F);
        FuzzerUtils.init(iArr, 19949);

        lArr[(i7 >>> 1) % N] *= iMeth1(i7, -8, d2);
        i14 = 1;
        while (++i14 < 346) {
            Test.dArrFld[i14] *= 42.592F;
            Test.instanceCount += (long)d2;
            for (i15 = i14; 5 > i15; i15++) {
                i7 *= (int)d2;
            }
            fArr[i14 + 1] *= Test.instanceCount;
            if (b1) {
                for (i17 = 1; 5 > i17; ++i17) {
                    Test.instanceCount -= 1494647586L;
                    switch ((i17 % 10) + 54) {
                    case 54:
                        i18 *= (int)d2;
                        i18 = (int)Test.instanceCount;
                        break;
                    case 55:
                        i18 += (((i17 * i16) + i16) - Test.instanceCount);
                    case 56:
                        i16 >>= (int)Test.instanceCount;
                        break;
                    case 57:
                        i16 = (int)-48.34859;
                        break;
                    case 58:
                    case 59:
                        iArr = iArr;
                        break;
                    case 60:
                        d2 = Test.instanceCount;
                    case 61:
                        i16 -= -2;
                        break;
                    case 62:
                        i7 = -181;
                        break;
                    case 63:
                        i7 *= (int)Test.instanceCount;
                        break;
                    default:
                        Test.instanceCount = 247;
                    }
                }
            } else if (b1) {
                iArr[i14] = i7;
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(long l, int i3, int i4) {

        int i5=189, i6=-6218, i19=-53, i20=0, iArr1[][]=new int[N][N];
        boolean b2=false;
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)25808);
        FuzzerUtils.init(iArr1, -133);
        FuzzerUtils.init(lArr2, 8192122976706543761L);

        i5 = 1;
        while (++i5 < 252) {
            i6 = 1;
            while (++i6 < 6) {
                sArr[i6] <<= byMeth(i3);
                if (b2) continue;
                Test.instanceCount += 10;
            }
            i3 >>= Test.sFld;
            for (i19 = i5; i19 < 6; i19++) {
                iArr1[i19][i5] = 14;
                lArr2[i5 - 1] *= i6;
                i4 += 173;
                i20 += (((i19 * Test.sFld) + i20) - Test.instanceCount);
                i3 = i19;
                iArr1[i5 - 1][i19] = i19;
            }
            i3 = i3;
            if (true) break;
        }
        long meth_res = l + i3 + i4 + i5 + i6 + (b2 ? 1 : 0) + i19 + i20 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=27, byArr[][]=new byte[N][N];
        int i=7918, i1=-13, i2=-204;
        double d3=2.72311;

        FuzzerUtils.init(byArr, (byte)44);

        by >>= (byte)(++byArr[(i >>> 1) % N][(i >>> 1) % N]);
        i *= (int)(--Test.instanceCount);
        for (i1 = 251; i1 > 15; --i1) {
            i2 >>>= (i2 = (iArrFld[i1][i1 + 1] = (-iMeth(181L, i1, i2))));
            i2 = i;
            switch (((i1 % 1) * 5) + 83) {
            case 87:
                d3 *= i2;
                break;
            }
            by += (byte)(i1 * i1);
        }
        i2 |= i2;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
