package tests.javafuzzer219;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:18:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static volatile int iFld=-98;
    public static short sFld=24192;
    public byte byFld=55;
    public volatile long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        float f1=0.175F;

        Test.instanceCount <<= Test.instanceCount;
        Test.iFld = (int)f1;
        long meth_res = Float.floatToIntBits(f1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i2, long l) {

        int i3=-54930, i4=-33733, i5=28, i6=-209, iArr[]=new int[N];
        boolean b1=false;
        float f2=-12.213F;
        double d2=-83.85126;

        FuzzerUtils.init(iArr, -8);

        for (i3 = 4; i3 < 351; i3++) {
            i5 = 1;
            while (++i5 < 5) {
                if (b1) break;
                i6 = 1;
                while (++i6 < 1) {
                    iArr[i5] = (Test.iFld + ((-(Test.sFld -= (short)Test.iFld)) + (i3 - i5)));
                    i4 *= (++i4);
                    Test.instanceCount |= (long)(fMeth() + i3);
                    f2 = i6;
                    switch ((((-16732 >>> 1) % 8) * 5) + 42) {
                    case 61:
                        Test.instanceCount *= Test.iFld;
                        i4 |= (int)Test.instanceCount;
                        i4 += i4;
                        break;
                    case 75:
                        iArr[i5 + 1] -= (int)-64518L;
                        f2 *= Test.instanceCount;
                        l = i2;
                        break;
                    case 45:
                        l -= Test.sFld;
                        break;
                    case 71:
                        i4 = i6;
                        break;
                    case 73:
                        Test.instanceCount = i5;
                        break;
                    case 78:
                        d2 -= 9;
                    case 59:
                        i2 |= i6;
                        break;
                    case 79:
                    default:
                        Test.iFld -= i4;
                    }
                }
            }
        }
        long meth_res = i2 + l + i3 + i4 + i5 + (b1 ? 1 : 0) + i6 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, double d1) {

        float f=-2.673F;
        int i1=-8, i7=22756, i8=-23498, iArr1[]=new int[N];
        byte by=124;
        boolean b2=false;

        FuzzerUtils.init(iArr1, -252);

        for (f = 16; f < 350; f++) {
            float f3=1.848F;
            if (b2) {
                by = (byte)iMeth(i1, Test.instanceCount);
                Test.instanceCount >>= i;
                if (b2) {
                    i = by;
                    for (i7 = (int)(f); i7 < 5; i7++) {
                        i1 += i7;
                        Test.instanceCount += (((i7 * i7) + f) - Test.iFld);
                        iArr1[(int)(f - 1)] -= i7;
                        i1 = (int)f;
                    }
                    f3 += Test.instanceCount;
                }
            } else if (b2) {
                try {
                    iArr1[(int)(f + 1)] = (1292108987 / Test.iFld);
                    i = (Test.iFld % i7);
                    iArr1[(int)(f + 1)] = (i7 / i1);
                } catch (ArithmeticException a_e) {}
                Test.iFld |= i7;
                if (b2) break;
            } else {
                i -= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i1 + by + i7 + i8 + (b2 ? 1 : 0)
            + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        double d=1.113248, d3=-1.123051, dArr[]=new double[N];
        int i9=-194, i10=36, i11=58, i12=-4, i13=-102, i14=8, i15=-37963, i16=-39032, iArr2[]=new int[N];
        long l1=6114728093970920802L, l2=-7150L;
        float f4=0.791F, f5=-1.96F;

        FuzzerUtils.init(dArr, -77.122730);
        FuzzerUtils.init(iArr2, 11);

        b = (b = (b = b));
        d = (d = (++Test.iFld));
        vMeth(Test.iFld, d);
        Test.instanceCount += Test.iFld;
        Test.iFld >>>= Test.iFld;
        for (d3 = 8; d3 < 184; ++d3) {
            for (i10 = 6; i10 < 143; ++i10) {
                Test.instanceCount += (-202 + (i10 * i10));
                for (l1 = 1; l1 < 2; l1++) {
                    dArr[i10 - 1] -= Test.instanceCount;
                    switch ((int)(((d3 % 2) * 5) + 120)) {
                    case 127:
                        Test.instanceCount /= ((long)(d3) | 1);
                        break;
                    case 130:
                    }
                    i12 -= (int)18084L;
                    lArrFld[(i9 >>> 1) % N] = l1;
                    Test.instanceCount = i11;
                    i12 = i12;
                    Test.instanceCount += (((l1 * i11) + i9) - i10);
                }
            }
            for (l2 = 143; l2 > 1; l2--) {
                Test.sFld = (short)l2;
                d -= f4;
            }
            lArrFld[(int)(d3 + 1)] *= Test.instanceCount;
            iArr2[(int)(d3 + 1)] >>= Test.iFld;
            i13 = Test.iFld;
            for (i14 = 6; 143 > i14; i14++) {
                for (f5 = 1; f5 < 2; f5++) {
                    Test.instanceCount = l1;
                }
                f4 *= i13;
                byFld += (byte)i10;
            }
            Test.instanceCount += (long)(d3 * i10);
        }
        iArr2 = iArr2;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
