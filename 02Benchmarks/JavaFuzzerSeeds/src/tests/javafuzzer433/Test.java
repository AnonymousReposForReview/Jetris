package tests.javafuzzer433;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=55549L;
    public static float fFld=1.680F;
    public static double dFld=60.110473;
    public static int iFld=-104;
    public byte byFld=88;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6403);
        FuzzerUtils.init(Test.fArrFld, -93.367F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, float f, int i7) {

        int i8=-7, i9=19866, i10=1, i11=-26270, i12=0;
        double d=1.71877;
        boolean b=false;
        byte by=-117;

        i8 = 1;
        do {
            for (i9 = 1; i9 < 5; i9++) {
                i7 = i9;
                Test.instanceCount = i10;
                i10 <<= i9;
                for (i11 = 1; i11 < 2; i11 += 3) {
                    if (b) {
                        i7 = (int)Test.instanceCount;
                        Test.fArrFld[i8] = (float)d;
                    } else {
                        Test.iArrFld[i8] *= (int)f;
                    }
                    by = (byte)Test.instanceCount;
                    f += -14;
                    try {
                        i12 = (Test.iArrFld[i9] / -177);
                        i6 = (Test.iArrFld[i11] % -18995);
                        Test.iArrFld[i9 + 1] = (Test.iArrFld[i9 + 1] / -181);
                    } catch (ArithmeticException a_e) {}
                    f += (((i11 * Test.instanceCount) + i10) - i8);
                    by -= (byte)i7;
                }
            }
        } while (++i8 < 314);
        vMeth1_check_sum += i6 + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d)
            + (b ? 1 : 0) + by;
    }

    public static void vMeth(int i1, int i2) {

        int i3=2, i4=-24872, i5=1, i13=-11130, i14=-50660, i15=6;
        boolean b1=false;
        short s=22743;
        byte by1=-73;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.10586);

        i2 *= (Test.iArrFld[(i2 >>> 1) % N]++);
        i3 = 1;
        do {
            i1 += i3;
        } while ((i3 += 2) < 162);
        for (i4 = 201; i4 > 2; i4--) {
            Test.iArrFld[i4 + 1] -= (i1--);
        }
        if (b1) {
            vMeth1(i1, Test.fFld, -1);
            i13 = 164;
            do {
                b1 = b1;
                s *= (short)Test.dFld;
                Test.instanceCount |= Test.instanceCount;
                for (i14 = i13; i14 < 28; i14++) {
                    Test.iArrFld[i13 - 1] <<= by1;
                }
                dArr[i13 + 1] -= i2;
                i2 = (int)Test.fFld;
            } while ((i13 -= 3) > 0);
        } else {
            i15 -= (int)Test.fFld;
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i13 + (b1 ? 1 : 0) + s + i14 + i15 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(long l, int i) {

        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -84.122059);

        vMeth(i, 97);
        dArr1[(i >>> 1) % N] %= 17.111598;
        vSmallMeth_check_sum += l + i + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i17=49977, i18=-19942, i19=-22, i20=39697, i21=2;
        double d1=0.19335, dArr2[]=new double[N];
        short s1=22183;

        FuzzerUtils.init(dArr2, -118.35088);

        for (int smallinvoc=0; smallinvoc<674; smallinvoc++) vSmallMeth(Test.instanceCount, Test.iFld);
        for (int i16 : Test.iArrFld) {
            Test.fFld = -62;
            b2 = b2;
            i17 = 1;
            while (++i17 < 63) {
                i16 -= (int)Test.fFld;
                lArrFld[i17 - 1] |= 42844;
                i16 += (i17 * Test.instanceCount);
                for (d1 = 1; d1 < 1; ++d1) {
                    Test.iArrFld[i17 + 1] &= i16;
                }
            }
            i19 = 1;
            while (++i19 < 63) {
                Test.instanceCount += (147 + (i19 * i19));
                Test.instanceCount = byFld;
                i18 /= (int)((long)(Test.fFld) | 1);
                lArrFld[i19 + 1] |= i16;
                for (i20 = 1; i20 < 1; ++i20) {
                    Test.iFld = i19;
                    Test.iFld -= i18;
                    Test.iFld = i19;
                    Test.instanceCount += i19;
                    i16 += Test.iFld;
                    Test.instanceCount += (((i20 * s1) + Test.fFld) - Test.instanceCount);
                    Test.iFld += (int)Test.fFld;
                    dArr2[i19] = i20;
                    Test.instanceCount += (i20 + i19);
                }
                Test.iArrFld[i19 + 1] = s1;
                if (false) {
                    if (b2) continue;
                } else {
                    i18 -= i18;
                    i18 -= i20;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
