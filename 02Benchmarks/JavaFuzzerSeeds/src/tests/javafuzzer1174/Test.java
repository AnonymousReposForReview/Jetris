package tests.javafuzzer1174;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:57:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static volatile double dFld=-124.8001;
    public int iFld=8;
    public float fFld=-80.707F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27363);
        FuzzerUtils.init(Test.lArrFld, -13L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        int i1=6, i2=-203, i3=-11, i4=-129, i5=227, i6=4;
        float f1=0.41F;
        byte by1=-120;
        long l=6L;
        boolean b=true;

        switch (((i1 >>> 1) % 3) + 119) {
        case 119:
            Test.iArrFld[(i1 >>> 1) % N] = i1;
        case 120:
            Test.instanceCount = i1;
            for (i2 = 292; i2 > 3; i2 -= 2) {
                for (i4 = 1; 11 > i4; i4++) {
                    i5 *= (int)f1;
                    by1 = (byte)i4;
                    Test.instanceCount = 220;
                    Test.iArrFld[i2 + 1] -= (int)-58.787F;
                    i5 += (i4 * i1);
                    for (l = i2; 2 > l; ++l) {
                        Test.instanceCount = i1;
                        i6 += (-46376 + (l * l));
                        f1 *= i1;
                        if (b) continue;
                    }
                }
            }
        case 121:
            i3 |= (int)l;
            break;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + by1 + l +
            i6 + (b ? 1 : 0);
    }

    public static void vMeth(int i) {

        int i7=-6, i8=-57092, i9=-2125, i10=12148, i11=67, i12=8, i13=-152, i14=14;
        float f2=0.461F;

        vMeth1(0.117079);
        for (i7 = 7; 265 > i7; ++i7) {
            i = -7;
            i += i7;
            i8 += (((i7 * f2) + i8) - i8);
            for (i9 = 1; i9 < 6; ++i9) {
                Test.iArrFld[i9 - 1] -= -131;
                try {
                    i = (254 / i7);
                    i10 = (i8 % i8);
                    i10 = (3711 % Test.iArrFld[i9 + 1]);
                } catch (ArithmeticException a_e) {}
                i *= i7;
            }
            for (i11 = 1; i11 < 6; ++i11) {
                i13 = 1;
                while (++i13 < 2) {
                    switch ((i7 % 7) + 84) {
                    case 84:
                        i -= (int)Test.instanceCount;
                    case 85:
                        i14 = (int)-4L;
                        i8 /= (int)(i14 | 1);
                        break;
                    case 86:
                        i8 += (int)(0.891F + (i13 * i13));
                        break;
                    case 87:
                        Test.iArrFld[i7] += i14;
                    case 88:
                        f2 *= f2;
                        break;
                    case 89:
                        Test.instanceCount = i7;
                        break;
                    case 90:
                        Test.dFld = Test.dFld;
                        break;
                    default:
                        i8 = (int)f2;
                    }
                }
            }
        }
        vMeth_check_sum += i + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + i14;
    }

    public int iMeth(byte by) {

        float f3=0.174F;

        vMeth(iFld);
        iFld -= (int)f3;
        iFld = iFld;
        long meth_res = by + Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=5.312F;
        byte by2=112;
        int i15=39409, i16=-9, i17=12, i18=-45898, i19=-151, i20=1251, i21=4;

        f = 1;
        while (++f < 248) {
            Test.iArrFld[(int)(f + 1)] = iMeth(by2);
            Test.instanceCount += 1775366137L;
            for (i15 = (int)(f); i15 < 101; ++i15) {
                for (i17 = (int)(f); i17 < 1; i17++) {
                    i18 += (int)Test.instanceCount;
                    i16 = (int)56118354421285901L;
                    Test.iArrFld[i15 + 1] = (int)Test.instanceCount;
                    fFld = 8;
                    Test.instanceCount >>>= i18;
                }
                i19 = 1;
                while (++i19 < 1) {
                    i18 = (int)Test.instanceCount;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)175L);
                    i16 = iFld;
                    i18 /= (int)(i18 | 1);
                    i16 <<= i18;
                    i18 -= (int)-109.115F;
                }
                Test.dFld = Test.instanceCount;
                Test.iArrFld[i15 - 1] -= (int)Test.instanceCount;
                for (i20 = (int)(f); i20 < 1; i20++) {
                    switch ((int)((f % 5) + 90)) {
                    case 90:
                        Test.instanceCount += (i20 - iFld);
                        by2 += (byte)(((i20 * i20) + i16) - f);
                        break;
                    case 91:
                        Test.lArrFld[i15 - 1] = (long)Test.dFld;
                        i18 -= (int)911925443L;
                        i18 += i20;
                        break;
                    case 92:
                        i18 += i20;
                        try {
                            i16 = (i19 % i19);
                            i18 = (-51094 % iFld);
                            i16 = (180 % i16);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 93:
                        Test.instanceCount += (i20 * i20);
                        Test.instanceCount += i17;
                        break;
                    case 94:
                        i21 <<= (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
