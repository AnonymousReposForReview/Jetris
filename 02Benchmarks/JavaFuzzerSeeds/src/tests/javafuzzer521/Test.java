package tests.javafuzzer521;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:04:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4325879703607392094L;
    public static float fFld=-56.342F;
    public static double dFld=109.115272;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -32391);
        FuzzerUtils.init(Test.sArrFld, (short)-21205);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(short s1, int i10) {

        long l1=194168578L;
        int i11=36354, i12=-224, i13=-172, i14=-41495;
        float f1=-1.1007F;
        boolean b=false;

        for (l1 = 1; 147 > l1; ++l1) {
            for (i12 = 1; i12 < 11; ++i12) {
                Test.instanceCount = s1;
                Test.fFld = Test.instanceCount;
                for (f1 = l1; f1 < 2; ++f1) {
                    switch ((int)(((l1 % 1) * 5) + 10)) {
                    case 12:
                        b = true;
                        break;
                    default:
                        Test.iArrFld[i12] *= -10;
                        if (b) {
                            i13 *= i14;
                        } else if (true) {
                            if (b) continue;
                        } else if (b) {
                            i11 *= -125;
                            i11 <<= i11;
                            try {
                                i13 = (-1274491391 % i13);
                                i11 = (i12 / -30);
                                i10 = (157 / i13);
                            } catch (ArithmeticException a_e) {}
                            b = b;
                        } else {
                            Test.fFld -= i10;
                        }
                    }
                }
            }
        }
        long meth_res = s1 + i10 + l1 + i11 + i12 + i13 + Float.floatToIntBits(f1) + i14 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, double d) {

        int i8=13, i9=-30038, i15=-11, i16=-65, i17=-28486, i18=-50845, i19=-15765;
        short s2=-26681;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-101);

        for (i8 = 18; i8 < 296; i8++) {
            Test.iArrFld[i8 - 1] <<= (byArr[i8 + 1] - (i9--));
            Test.iArrFld[i8 - 1] = iMeth1((short)(24018), -204);
        }
        d = -2;
        for (i15 = 10; i15 < 188; ++i15) {
            Test.instanceCount *= i15;
            i7 += (int)Test.fFld;
            i16 = (int)d;
            Test.fFld = Test.instanceCount;
            Test.instanceCount <<= i9;
        }
        for (i17 = 10; i17 < 194; ++i17) {
            i19 = 1;
            do {
                s2 = (short)Test.instanceCount;
                s2 -= (short)Test.instanceCount;
                Test.instanceCount -= i15;
            } while (++i19 < 9);
        }
        long meth_res = i7 + Double.doubleToLongBits(d) + i8 + i9 + i15 + i16 + i17 + i18 + i19 + s2 +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i3=0, i4=1, i5=-12, i6=16, i20=-52440, i21=-6555;
        short s=-15261;
        float f=70.1013F;
        byte by=23;

        i3 >>= s;
        for (f = 5; f < 284; f++) {
            Test.fFld += (f * f);
            Test.fFld += (f + Test.instanceCount);
            i4 += (int)Test.instanceCount;
            i3 >>>= (int)(Test.instanceCount *= (long)(Test.fFld--));
            i3 *= (int)(Test.iArrFld[(int)(f - 1)] = (int)(108.99300 + (by - i4)));
        }
        for (i5 = 2; i5 < 154; i5++) {
            switch ((((iMeth(i4, 0.41578) >>> 1) % 6) * 5) + 11) {
            case 18:
            case 22:
                i6 += (((i5 * i6) + Test.instanceCount) - i6);
                Test.fFld = -77L;
                for (i20 = 10; i20 > 1; --i20) {
                    i6 += i20;
                    i21 -= (int)Test.instanceCount;
                }
                try {
                    i3 = (-36959 / i3);
                    Test.iArrFld[i5] = (15641 / i6);
                    i4 = (Test.iArrFld[i5] % i5);
                } catch (ArithmeticException a_e) {}
                break;
            case 35:
                if (false) continue;
                break;
            case 38:
                i4 = by;
                break;
            case 21:
                Test.instanceCount <<= -9;
                break;
            case 34:
                i3 = i5;
                break;
            }
        }
        long meth_res = i3 + s + Float.floatToIntBits(f) + i4 + by + i5 + i6 + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=161, i1=-11174, i2=-14, i22=-74, i23=34664, i24=52, i25=-6, i26=-8116, i27=172, i28=-10872, i29=11,
            i30=-14, i31=-110, iArr[][]=new int[N][N];
        long l=103L;
        byte by1=-65;
        boolean b1=true;
        short s3=-14791;
        float f2=-1.553F;

        FuzzerUtils.init(iArr, 200);

        for (i = 226; i > 7; i--) {
            for (l = 2; l < 115; ++l) {
                i1 *= i1;
            }
            iArr[i + 1][i - 1] += (int)(((Test.fFld--) + lMeth()) - i1);
            for (i22 = 6; i22 < 115; ++i22) {
                i2 += (((i22 * Test.instanceCount) + i1) - l);
                i2 = i2;
                Test.instanceCount = i23;
                iArr[i22 + 1][i22 - 1] &= by1;
            }
            for (i24 = 115; 2 < i24; --i24) {
                Test.instanceCount += (i24 * i25);
                for (i26 = 2; i26 > 1; --i26) {
                    Test.instanceCount -= i28;
                    Test.iArrFld[i24 - 1] <<= i26;
                    i23 += i23;
                    i25 += i27;
                    iArr[i24 + 1][i24 + 1] = (int)l;
                    b1 = b1;
                    Test.fFld *= 5;
                    by1 = (byte)168L;
                    i28 = s3;
                    b1 = b1;
                }
            }
        }
        f2 = 1;
        do {
            Test.fFld *= (float)Test.dFld;
            Test.sArrFld = Test.sArrFld;
        } while (++f2 < 211);
        for (i29 = 14; i29 < 321; i29++) {
            i31 = 1;
            do {
                i25 += i31;
                i28 *= (int)Test.instanceCount;
            } while (++i31 < 82);
            iArr[i29 - 1][i29 - 1] = i31;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
