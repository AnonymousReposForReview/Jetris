package tests.javafuzzer1950;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:24:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-46563L;
    public static short sFld=-7422;
    public static boolean bFld=true;
    public static float fFld=-63.741F;
    public static volatile byte byFld=-112;
    public double dFld=1.117478;
    public int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i4=52653, i5=14, i6=61899, i7=-2, i8=14, i9=-24504, iArr[][]=new int[N][N];
        float f=0.974F;
        double d2=0.106670;

        FuzzerUtils.init(iArr, -3);

        for (i4 = 6; i4 < 179; i4++) {
            Test.instanceCount += (((i4 * Test.sFld) + f) - i5);
            i5 -= i5;
        }
        i5 -= 30;
        Test.bFld = Test.bFld;
        for (i6 = 4; 208 > i6; i6++) {
            Test.instanceCount <<= i7;
            if (true) break;
        }
        d2 -= Test.instanceCount;
        i7 -= i7;
        i7 &= i5;
        iArr[(i4 >>> 1) % N][(i5 >>> 1) % N] = i4;
        for (i8 = 3; i8 < 287; i8++) {
            Test.instanceCount *= i4;
            i9 += i4;
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + Double.doubleToLongBits(d2) + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l, int i3) {

        int i10=50454, i11=44564, i12=133, i13=-3, i14=4;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -223L);

        i3 *= (--i3);
        vMeth();
        for (i10 = 347; i10 > 1; --i10) {
            i11 += (((i10 * i11) + Test.fFld) - i10);
            for (i12 = 1; i12 < 5; i12++) {
                i13 >>>= i3;
                i14 = 1;
                do {
                    i3 = i13;
                    i11 *= -45403;
                    i13 += (18081 + (i14 * i14));
                } while (++i14 < 2);
                switch (((i10 >>> 1) % 4) + 60) {
                case 60:
                    i11 += i12;
                    i11 -= (int)Test.instanceCount;
                    break;
                case 61:
                    i11 = i12;
                    lArr[i12] *= 57741;
                    break;
                case 62:
                    i13 += i12;
                    break;
                case 63:
                }
            }
        }
        long meth_res = l + i3 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i2=-144, i15=-10036, i16=-43, i17=13, i18=-11, iArr1[]=new int[N];
        double d1=1.27582;
        byte by=-103;
        long l1=-42125L;
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -1.739F);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -2754);

        i2 += (int)(Integer.reverseBytes((int)(10 - (++Test.instanceCount))) + d1);
        i2 *= (int)(Test.instanceCount + (-(i2 * -8)));
        lMeth(Test.instanceCount, i2);
        Test.instanceCount += by;
        for (l1 = 3; l1 < 339; ++l1) {
            for (i16 = 5; i16 > 1; i16 -= 3) {
                i17 = (int)Test.instanceCount;
                switch ((int)(((l1 % 8) * 5) + 19)) {
                case 32:
                    Test.instanceCount += Test.sFld;
                    i15 = 33033;
                    fArr[(int)(l1)] += 28141;
                    break;
                case 50:
                    Test.instanceCount >>= l1;
                    Test.instanceCount += (0 + (i16 * i16));
                    bArr[i16 - 1] = true;
                    i17 <<= i16;
                    break;
                case 52:
                    i15 = i15;
                    break;
                case 53:
                    i15 &= i17;
                    break;
                case 33:
                    i15 += i18;
                case 25:
                    i15 = i2;
                    break;
                case 23:
                    try {
                        i2 = (i15 % 56545);
                        iArr1[i16] = (517890024 / iArr1[i16]);
                        i2 = (-235 % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 58:
                    i17 *= i18;
                    break;
                default:
                    Test.fFld += Test.instanceCount;
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + by + l1 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=24459, i1=-32264, i19=19637, i20=23419, i21=-5586, i22=27555, i23=45219;
        double d=2.76375;

        i -= (int)(((iArrFld[(37310 >>> 1) % N] = (int)Test.instanceCount) - (Test.instanceCount / 225L)) - (iArrFld[(i
            >>> 1) % N]--));
        i1 = 1;
        while (++i1 < 271) {
            i += (i1 - i1);
        }
        i += (i1 + ((i1 - i1) - -243));
        d = Math.min(lArrFld[(203 >>> 1) % N], (-22445 * (i + i1)) * (-iMeth()));
        i += Test.byFld;
        d -= Test.instanceCount;
        i = i1;
        i19 = 1;
        while (++i19 < 385) {
            for (i20 = i19; i20 < 65; ++i20) {
                iArrFld[i20 + 1] += i21;
                i21 = i19;
                switch (((i1 >>> 1) % 1) + 100) {
                case 100:
                    i21 = (int)Test.instanceCount;
                default:
                    for (i22 = 1; 1 > i22; ++i22) {
                        iArrFld[i22] <<= i23;
                        Test.instanceCount = i23;
                        i21 <<= i19;
                        i21 -= i1;
                        Test.fFld = -100;
                        i21 = i20;
                        i23 = (int)d;
                        i23 += i22;
                        switch ((i20 % 1) + 87) {
                        case 87:
                            switch (((i23 >>> 1) % 10) + 4) {
                            case 4:
                                iArrFld[i20 + 1] -= (int)d;
                                d += i19;
                                i += i22;
                                i21 += i22;
                                break;
                            case 5:
                                Test.instanceCount += i22;
                                break;
                            case 6:
                                try {
                                    i21 = (i20 / 89);
                                    i23 = (i22 / i23);
                                    i21 = (-51505 % i);
                                } catch (ArithmeticException a_e) {}
                            case 7:
                                Test.instanceCount += (i22 + i20);
                                break;
                            case 8:
                                iArrFld = iArrFld;
                                break;
                            case 9:
                                i21 = (int)dFld;
                            case 10:
                                lArrFld[i20 + 1] -= Test.instanceCount;
                                break;
                            case 11:
                                i21 = i19;
                            case 12:
                                lArrFld[i20 - 1] += 57730;
                                break;
                            case 13:
                                i23 = i22;
                            }
                        default:
                            i23 += (8667 + (i22 * i22));
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
