package tests.javafuzzer259;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7129419994497333226L;
    public byte byFld=-126;
    public static byte byFld1=-101;
    public static double dFld=-2.100467;
    public float fFld=2.104F;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public volatile short sArrFld[]=new short[N];
    public volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4267164477L);
        FuzzerUtils.init(Test.iArrFld, 97);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i6=-16, i7=19846, i8=-193, i9=-156, i10=121;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.instanceCount |= Test.instanceCount;
        for (i6 = 364; i6 > 16; i6 -= 3) {
            if (b) continue;
            switch (((i6 % 8) * 5) + 107) {
            case 120:
                Test.instanceCount += i7;
                i7 *= i6;
            case 135:
            case 144:
                i8 = 1;
                while ((i8 += 3) < 13) {
                    i7 *= i6;
                    i7 -= (int)Test.instanceCount;
                }
                i7 += i6;
                Test.iArrFld[i6 - 1][i6 - 1] += i7;
                break;
            case 113:
                for (i9 = 1; i9 < 13; ++i9) {
                    i7 = i6;
                    i7 -= i8;
                }
                i10 += (i6 * i6);
                break;
            case 117:
                Test.iArrFld[i6 + 1][i6] -= Test.byFld1;
                break;
            case 143:
                i7 = i8;
                break;
            case 108:
                i7 = (int)Test.dFld;
                break;
            case 133:
                bArr[i6] = b;
                break;
            default:
                i7 += i9;
            }
        }
        long meth_res = i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5) {

        int i11=16146, i12=63048;
        short s1=11896;

        Test.lArrFld[(i5 >>> 1) % N] = (i5 + ((Test.instanceCount -= Test.instanceCount) * lMeth()));
        for (i11 = 20; i11 < 372; i11++) {
            s1 -= (short)i11;
            Test.instanceCount >>= i12;
        }
        Test.iArrFld[(153 >>> 1) % N][(252 >>> 1) % N] >>= i11;
        vMeth1_check_sum += i5 + i11 + i12 + s1;
    }

    public void vMeth(int i2, short s, long l) {

        int i3=-2, i4=-31644, i13=238, i14=0;

        for (i3 = 130; i3 > 3; --i3) {
            vMeth1(i4);
            i2 *= (int)Test.dFld;
            Test.iArrFld[i3][i3 + 1] = i2;
            i13 = 1;
            while (++i13 < 12) {
                i4 >>= (int)l;
                l += (11 + (i13 * i13));
                sArrFld[i3] = (short)l;
                i14 = 1;
                while (++i14 < 1) {
                    Test.instanceCount += (i14 + fFld);
                    Test.dFld = 164L;
                    if (i4 != 0) {
                        vMeth_check_sum += i2 + s + l + i3 + i4 + i13 + i14;
                        return;
                    }
                    i4 += i13;
                    Test.instanceCount += (long)fFld;
                    if (bFld) break;
                }
            }
        }
        vMeth_check_sum += i2 + s + l + i3 + i4 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i=-44523, i1=14, i15=4, i16=2574, i17=-204, i18=-9, i19=9, i20=59332, i21=42846, i22=64024, i23=-63383,
            iArr[]=new int[N];
        short s2=-19383;
        long l1=-9L;

        FuzzerUtils.init(iArr, 13);

        for (i = 14; i < 268; i++) {
            i1 = ((iArr[i + 1] * 39) % ((byFld -= (byte)(14 + byFld)) | 1));
            vMeth(i, s2, Test.instanceCount);
            i1 += i;
            bFld = bFld;
            Test.instanceCount += (i * i);
            i1 -= s2;
            i15 = 1;
            while (++i15 < 99) {
                i1 <<= (int)Test.instanceCount;
                i1 = i1;
            }
            i1 = (int)fFld;
            Test.instanceCount += i;
            fFld -= Test.instanceCount;
        }
        for (i16 = 20; i16 < 363; ++i16) {
            i17 = i;
            i1 ^= i15;
            i17 *= i17;
            i17 += i1;
            Test.byFld1 <<= (byte)-2506232976484960275L;
        }
        for (l1 = 13; l1 < 306; ++l1) {
            i19 = 1;
            do {
                try {
                    Test.iArrFld[(int)(l1)][i19 - 1] = (Test.iArrFld[i19 + 1][(int)(l1 + 1)] / Test.iArrFld[(int)(l1 +
                        1)][(int)(l1 + 1)]);
                    i17 = (i19 % Test.iArrFld[i19 - 1][i19]);
                    Test.iArrFld[(int)(l1)][(i1 >>> 1) % N] = (i / i19);
                } catch (ArithmeticException a_e) {}
            } while (++i19 < 86);
            i18 += (17591 + (l1 * l1));
            i17 -= (int)Test.instanceCount;
            for (i20 = 3; i20 < 86; ++i20) {
                i1 = i18;
                fFld = i;
                for (i22 = 1; i22 < 2; i22++) {
                    Test.iArrFld[(int)(l1 + 1)][i20] = i22;
                }
            }
            if (bFld) break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
