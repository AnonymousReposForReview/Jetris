package tests.javafuzzer2579;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:51:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public static boolean bFld=false;
    public float fFld=1.520F;
    public static byte byFld=13;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-16);
        FuzzerUtils.init(Test.iArrFld, -60449);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l2) {

        int i3=-198, i4=-28736, i5=10, i6=-17, i7=-3607, i8=50, i9=24, i10=-11, iArr[]=new int[N];
        float f1=0.54F;

        FuzzerUtils.init(iArr, -42119);

        for (i3 = 336; i3 > 1; --i3) {
            for (i5 = 1; i5 < 5; i5++) {
                Test.instanceCount += (((i5 * l2) + f1) - Test.instanceCount);
                i4 = (int)Test.instanceCount;
                i4 = i5;
                for (i7 = 2; i7 > 1; i7--) {
                    l2 = Test.instanceCount;
                    if (Test.bFld) break;
                    try {
                        i4 = (i6 / -49294);
                        iArr[i5 - 1] = (i4 % -49733);
                        i4 = (-59435 % i3);
                    } catch (ArithmeticException a_e) {}
                    iArr = iArr;
                    i6 += (((i7 * i6) + f1) - i7);
                }
                for (i9 = i3; i9 < 2; ++i9) {
                    l2 -= i5;
                    iArr[i5 - 1] += i6;
                    i10 += i9;
                }
            }
        }
        long meth_res = l2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, float f, long l1) {

        int i2=253, i12=25921, i13=-1, i14=14, i15=-26, i16=10799;
        byte by=-109;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)6890);

        i2 -= ((++i2) - (Test.byArrFld[(-6326 >>> 1) % N] - (i2 * -12)));
        i2 |= (int)lMeth(l1);
        by -= (byte)-13834;
        for (int i11 : Test.iArrFld) {
            Test.iArrFld[(i11 >>> 1) % N] *= i11;
            switch (((13 >>> 1) % 4) + 66) {
            case 66:
                i12 = 1;
                do {
                    for (i13 = 1; i13 < 1; i13++) {
                        by = (byte)f;
                        i14 = i12;
                        f += Test.instanceCount;
                    }
                    for (i15 = 1; i15 < 1; i15++) {
                        Test.bFld = Test.bFld;
                    }
                    l1 -= i16;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)170);
                } while (++i12 < 4);
                break;
            case 67:
                i11 += 49;
                break;
            case 68:
                if (Test.bFld) continue;
                break;
            case 69:
                sArr[(i14 >>> 1) % N] *= (short)i13;
                break;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + l1 + i2 + by + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth() {

        double d=92.89640;
        int i1=241, i17=63684, i18=181, i19=-14, i20=-6, i21=0, i22=-1, i23=8;
        float f2=-126.976F, f3=0.834F;
        short s=12710, sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-27252);

        for (d = 1; d < 360; ++d) {
            vMeth(Test.instanceCount, 54.631F, Test.instanceCount);
            i1 -= (int)f2;
        }
        for (i17 = 21; i17 < 345; ++i17) {
            i1 >>= i1;
            for (i19 = 5; i19 > 1; --i19) {
                for (f3 = i17; f3 < 2; ++f3) {
                    sArr1[(int)(f3 - 1)] -= (short)i18;
                    i21 = (int)Test.instanceCount;
                    i1 *= i22;
                }
                i20 <<= i1;
                i20 += s;
                Test.bFld = false;
                try {
                    i23 = (i17 / 126);
                    i21 = (Test.iArrFld[(i23 >>> 1) % N] / Test.iArrFld[i17]);
                    Test.iArrFld[i19] = (i21 % i17);
                } catch (ArithmeticException a_e) {}
                i21 *= (int)Test.instanceCount;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 +
            Float.floatToIntBits(f3) + i21 + i22 + s + i23 + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=27843, i24=5, i25=-31997, i26=147, i27=-147, i28=8836, i29=14, i30=47, i31=58627, i32=91;
        short s1=-26766;

        i -= iMeth();
        i24 = 204;
        do {
            i %= (int)(i24 | 1);
            i -= i;
            Test.instanceCount -= (long)-100.492F;
            Test.iArrFld[i24] -= i24;
            for (i25 = 7; i25 < 123; i25++) {
                i26 += (((i25 * i26) + i) - fFld);
                if (Test.bFld) {
                    for (i27 = i24; i27 < 2; ++i27) {
                        i26 /= (int)-192L;
                        i |= i;
                        Test.iArrFld[i24 - 1] %= (int)(i27 | 1);
                        i <<= i27;
                        Test.instanceCount >>= -62417;
                        i26 = -73;
                        i26 = (int)207L;
                        fFld -= s1;
                        Test.byFld <<= (byte)i28;
                    }
                    i29 = 1;
                    while ((i29 += 2) < 2) {
                        fFld -= -9;
                    }
                    i28 <<= (int)Test.instanceCount;
                    Test.byFld += (byte)i25;
                } else {
                    Test.instanceCount += (-12L + (i25 * i25));
                }
            }
        } while (--i24 > 0);
        for (i30 = 13; i30 < 376; ++i30) {
            i = (int)-61616L;
            switch ((i30 % 2) + 31) {
            case 31:
                i31 |= i27;
                Test.instanceCount >>= i32;
                i32 >>>= i32;
                break;
            case 32:
                i = i32;
                break;
            default:
                fFld += i30;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
