package tests.javafuzzer1399;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:46:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1951255679L;
    public static double dFld=-2.14611;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static double dArrFld[]=new double[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -85);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.dArrFld, 0.84392);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f1, long l, double d) {

        int i13=-63443, i14=0, i15=6, i16=2, i17=5;
        double d1=45.4603;
        byte by2=-41;

        for (i13 = 198; i13 > 8; i13--) {
            for (i15 = 1; 8 > i15; ++i15) {
                i16 <<= i16;
                Test.dArrFld[i13] *= i13;
                i16 = i16;
                for (d1 = 1; d1 < 2; ++d1) {
                    f1 = f1;
                    d *= i17;
                    i16 ^= (int)l;
                    i17 >>>= (int)20177L;
                    i16 -= (int)103393526L;
                    by2 ^= (byte)l;
                    i14 *= i13;
                    i17 = 6619;
                    i16 -= i16;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d1) + i17 + by2;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(byte by1, int i8) {

        int i9=-13, i10=-10, i11=8, i12=10, i18=-160;
        float f2=-126.24F, fArr[]=new float[N];
        short s1=29823;
        boolean b=true;

        FuzzerUtils.init(fArr, -2.56F);

        fArr[(253 >>> 1) % N] -= i8;
        i9 = 1;
        do {
            i10 = 1;
            do {
                by1 += (byte)i10;
                i8 -= (int)(Test.instanceCount--);
                i8 += (((i10 * i8) + Test.instanceCount) - i9);
                for (i11 = 1; i11 < 1; ++i11) {
                    if (b) {
                        if ((i8++) != Test.iArrFld[i11]) {
                            i8 = (int)Test.instanceCount;
                            vMeth_check_sum += by1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + i18 + s1 +
                                (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        } else {
                            Test.bArrFld[i9 + 1][i10 - 1] = bMeth(f2, Test.instanceCount, Test.dFld);
                            i8 += i8;
                            try {
                                i8 = (i9 % i8);
                                i8 = (17 % i10);
                                i18 = (-54844 / i8);
                            } catch (ArithmeticException a_e) {}
                            fArr[i11 - 1] = s1;
                        }
                        i8 *= i9;
                    } else {
                        i12 = i11;
                    }
                }
            } while (++i10 < 8);
        } while (++i9 < 211);
        vMeth_check_sum += by1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + i18 + s1 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i, int i1) {

        int i2=111, i3=-6, i4=-11, i5=13, i6=2, i7=150, iArr[][]=new int[N][N];
        float f=-2.686F;
        short s=-30214;
        byte by3=-97;

        FuzzerUtils.init(iArr, 215);

        i2 = 1;
        do {
            Test.instanceCount = (long)f;
            i = (int)(--Test.instanceCount);
            i3 = 1;
            do {
                iArr[i3 + 1] = (iArr[i2] = (iArr[i2 - 1] = (iArr[i3] = iArr[i3])));
                for (i4 = 1; i4 < 1; ++i4) {
                    i1 += (i4 | i4);
                }
                for (i6 = i3; i6 < 1; ++i6) {
                    i5 ^= (int)((++Test.instanceCount) + (i7 - (-136 + (Test.instanceCount + s))));
                    vMeth(by3, -149);
                    i -= i6;
                    Test.instanceCount += i6;
                    Test.instanceCount += Test.instanceCount;
                    s -= (short)2503914620L;
                    i5 += (((i6 * i1) + Test.instanceCount) - i3);
                }
            } while (++i3 < 11);
        } while (++i2 < 147);
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + s + by3 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=-65;
        int i19=4679, i20=-4, i21=115, i22=-12, i23=-38, i24=192, i25=-166, i26=-38509, iArr1[][]=new int[N][N];
        short s2=-28322;

        FuzzerUtils.init(iArr1, -140);

        by <<= (byte)(iMeth(i19, i19) + Test.instanceCount);
        for (i20 = 7; 161 > i20; i20++) {
            i19 += 13;
            for (i22 = i20; i22 < 163; ++i22) {
                float f3=-66.659F;
                f3 += 0.953F;
                i19 += i20;
                for (i24 = 1; i24 < 1; i24++) {
                    i19 /= (int)((long)(f3) | 1);
                    switch ((((i25 >>> 1) % 10) * 5) + 100) {
                    case 119:
                        i25 += -191;
                        try {
                            i25 = (i20 / 18990);
                            i19 = (i21 % 1224273303);
                            i23 = (i23 % i25);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += 46953;
                    case 120:
                        iArr1[i24] = Test.iArrFld;
                        byArrFld[i24] = (byte)Test.instanceCount;
                        i19 >>= i19;
                        if (Test.bFld) {
                            f3 += ((long)i24 | (long)f3);
                            i23 = i20;
                        } else {
                            i21 |= i25;
                        }
                        break;
                    case 129:
                        Test.bFld = Test.bFld;
                        i25 = i25;
                        break;
                    case 113:
                        i21 -= i22;
                        break;
                    case 145:
                        i21 += i24;
                        Test.bArrFld[i24 + 1][i20 - 1] = Test.bFld;
                        i21 = (int)Test.instanceCount;
                        Test.instanceCount |= -250;
                    case 133:
                        i21 = (int)Test.instanceCount;
                        Test.instanceCount += (i24 * i24);
                        break;
                    case 135:
                        i25 += (int)1.871F;
                        Test.instanceCount = i21;
                        break;
                    case 147:
                        i26 -= 14;
                    case 111:
                        Test.dFld += s2;
                    case 126:
                        Test.dFld -= -21860;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
