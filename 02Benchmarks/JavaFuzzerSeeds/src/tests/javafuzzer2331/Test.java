package tests.javafuzzer2331;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:38:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=51670L;
    public static double dFld=2.36431;
    public static byte byFld=101;
    public static float fFld=2.131F;
    public boolean bFld=true;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-29);
        FuzzerUtils.init(Test.iArrFld, -8715);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i3, long l1) {

        int i4=-11, i5=7, i6=-211, i7=-127, i8=-6924, i9=50223, i10=11268;
        boolean b=false;
        long l2=10L;

        for (i4 = 5; 154 > i4; i4++) {
            for (i6 = 1; i6 < 11; i6++) {
                if (b) continue;
                i5 ^= i5;
                i3 = i7;
                i5 = (int)-79.118370;
            }
            for (i8 = 1; i8 < 11; i8++) {
                i9 = 54570;
                Test.dFld = i3;
                for (l2 = 2; 1 < l2; --l2) {
                    switch ((int)((l2 % 7) + 78)) {
                    case 78:
                        i7 += (int)199L;
                    case 79:
                        if (b) break;
                        i9 = 14655;
                        i3 += (int)(1820318461L + (l2 * l2));
                    case 80:
                        l1 += l2;
                        break;
                    case 81:
                        f += i8;
                    case 82:
                        f += (-12 + (l2 * l2));
                        break;
                    case 83:
                        i5 += (int)1.26402;
                        break;
                    case 84:
                        i3 = -140;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + l1 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + l2 + i10;
    }

    public static void vMeth() {

        int i2=-4, i11=-4, i12=-39, i13=-13, i14=-2, i15=-2093;
        float f1=0.524F, f2=-116.649F;
        short s=-5599;

        i2 &= (--i2);
        vMeth1(f1, i2, -1241264110848370850L);
        for (f2 = 342; f2 > 17; f2--) {
            for (i12 = 1; i12 < 5; i12++) {
                i2 += (18250 + (i12 * i12));
                s -= (short)i11;
                for (i14 = 1; i14 < 2; i14++) {
                    i15 >>= (int)Test.instanceCount;
                }
                Test.instanceCount >>>= -63866;
            }
        }
        i2 = (int)Test.instanceCount;
        i11 = i12;
        i13 |= (int)Test.instanceCount;
        i13 = i11;
        Test.dFld += i2;
        i15 -= i12;
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i11 + i12 + i13 + s + i14 + i15;
    }

    public static int iMeth() {

        short s1=-9300;
        int i16=81, i17=-18108, i18=-3;
        float f3=-2.401F, fArr[]=new float[N];
        boolean b1=true;

        FuzzerUtils.init(fArr, 96.20F);

        vMeth();
        s1 = (short)i16;
        for (i17 = 3; i17 < 182; ++i17) {
            Test.byArrFld[i17 - 1] += (byte)s1;
            f3 = 1;
            do {
                switch ((int)((f3 % 3) + 17)) {
                case 17:
                    fArr[i17 + 1] += i16;
                case 18:
                    Test.instanceCount = i17;
                    b1 = b1;
                case 19:
                    i18 = i17;
                    if (b1) {
                        i18 &= -5191;
                        Test.instanceCount = -14;
                        Test.instanceCount = Test.instanceCount;
                        if (false) continue;
                    } else {
                        s1 -= (short)5.445F;
                    }
                    break;
                default:
                    i16 -= i17;
                }
            } while (++f3 < 9);
        }
        long meth_res = s1 + i16 + i17 + i18 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=-51290, i19=-23719, i20=33094, i21=246, i22=3, i23=-24919, i24=-241, i25=-89, i26=-1, iArr[][]=new
            int[N][N];
        long l=2867607921451549697L, l3=-25L;
        double d=0.271, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 10275);
        FuzzerUtils.init(dArr, 31.83019);

        i /= (int)(((Math.min(Test.instanceCount, Test.instanceCount) - (-(Test.instanceCount * i))) * i) | 1);
        for (l = 359; l > 16; l -= 2) {
            Test.instanceCount = ((--i1) * ((Test.instanceCount++) + (i1 + Test.instanceCount)));
        }
        i -= Math.min((int)(206 / (((long)(d - d)) | 1)), -61);
        i -= (int)(Test.instanceCount = (iMeth() - i1));
        for (i19 = 11; i19 < 249; i19++) {
            i1 += i19;
            i1 += (((i19 * i19) + i) - Test.instanceCount);
        }
        Test.iArrFld[(i19 >>> 1) % N] |= i19;
        iArr = iArr;
        for (i21 = 2; 122 > i21; ++i21) {
            i1 %= (int)(Test.byFld | 1);
            Test.fFld += i22;
            Test.fFld += 26350;
            i += (i21 * i21);
            for (l3 = 11; 209 > l3; ++l3) {
                for (i24 = 1; i24 < 2; i24++) {
                    try {
                        iArr[i24][i21] = (180 / iArr[(int)(l3 + 1)][i21 + 1]);
                        iArr[i21][(int)(l3 + 1)] = (1981002131 / i22);
                        i = (i23 % 19147);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i24 - Test.instanceCount);
                    i23 -= i21;
                    Test.fFld += (float)d;
                    i23 -= (int)30651929L;
                    Test.byFld <<= (byte)-2858513267L;
                    i1 *= (int)-3126534152L;
                    if (bFld) {
                        Test.fFld += i24;
                        iArr[i24][i21] += i1;
                        Test.fFld += l3;
                    } else if (bFld) {
                        dArr[(int)(l3)] = i26;
                    } else {
                        i22 += i24;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
