package tests.javafuzzer2705;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5092094734676193105L;
    public static boolean bFld=true;
    public volatile float fFld=-1.330F;
    public int iFld=-130;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i10=11, i11=-247, i12=-57608;
        byte by=-119;
        double d2=74.6274;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1L);

        if (Test.bFld) {
            for (i10 = 13; i10 < 346; i10++) {
                short s=-20778;
                float f2=-2.432F;
                Test.iArrFld = Test.iArrFld;
                by -= (byte)s;
                try {
                    i11 = (i10 / i10);
                    i11 = (-166 / i11);
                    i11 = (i11 / -2024344388);
                } catch (ArithmeticException a_e) {}
                f2 -= i11;
                if (Test.bFld) {
                    Test.instanceCount += (i10 * i10);
                    for (d2 = 1; d2 < 5; ++d2) {
                        switch (((i12 >>> 1) % 9) + 113) {
                        case 113:
                            i11 += (int)d2;
                            Test.iArrFld[(int)(d2 - 1)] = i12;
                            i12 += (int)(d2 - Test.instanceCount);
                            break;
                        case 114:
                            i11 &= i10;
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 115:
                            lArr[(int)(d2)] += 4;
                            break;
                        case 116:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 117:
                            Test.instanceCount += (long)d2;
                            break;
                        case 118:
                            f2 += Test.instanceCount;
                            break;
                        case 119:
                            by += (byte)(((d2 * Test.instanceCount) + Test.instanceCount) - i12);
                            break;
                        case 120:
                            i12 = 20;
                            break;
                        case 121:
                            i12 += (int)d2;
                            break;
                        default:
                            i11 = i10;
                        }
                    }
                } else if (true) {
                    i11 += (int)51356L;
                } else {
                    i11 += i10;
                }
            }
        } else if (Test.bFld) {
            Test.instanceCount += i10;
        } else if (b) {
            Test.instanceCount = i10;
        } else {
            b = b;
        }
        long meth_res = i10 + i11 + by + Double.doubleToLongBits(d2) + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public long lMeth1(float f, float f1, int i5) {

        int i6=40222, i7=18150, i8=-3, i9=175, i13=-13;
        short s1=-15867;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, -91L);
        FuzzerUtils.init(bArr, false);

        for (i6 = 8; 146 > i6; i6++) {
            for (i8 = 11; i8 > 1; i8--) {
                Test.instanceCount += (long)fMeth();
                lArr1[i8 - 1] = i9;
                f *= i6;
                i13 = 1;
                while (++i13 < 2) {
                    i5 <<= i9;
                    i7 = -28866;
                    i9 += (((i13 * i9) + i9) - i9);
                    i5 -= s1;
                    if (i6 != 0) {
                    }
                    i7 += i13;
                    Test.iArrFld[i13] = (int)Test.instanceCount;
                }
            }
            bArr = FuzzerUtils.boolean1array(N, (boolean)true);
            Test.iArrFld[i6 - 1] >>= i6;
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i13 + s1 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(int i, double d, double d1) {

        int i1=52, i2=-206, i3=-9, i4=-21411, i14=52574, i15=-53864, i16=0, i17=-36113, iArr[]=new int[N];
        short s2=-27244;

        FuzzerUtils.init(iArr, 10);

        for (i1 = 8; i1 < 198; ++i1) {
            for (i3 = 8; 1 < i3; i3--) {
                if (Test.bFld) continue;
                d = ((iArr[i1 - 1]++) * ((--i2) * lMeth1(fFld, 1.411F, i3)));
                i4 += -16355;
                i4 = (int)2L;
            }
        }
        i14 = 153;
        while (--i14 > 0) {
            Test.instanceCount = -178;
            for (i15 = 1; 10 > i15; i15++) {
                i17 = 1;
                do {
                    i2 -= s2;
                    i += (int)fFld;
                    Test.instanceCount += i1;
                    i4 += i16;
                    i2 += (i17 | i);
                } while (++i17 < 2);
            }
        }
        long meth_res = i + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i1 + i2 + i3 + i4 + i14 + i15 +
            i16 + i17 + s2 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d3=-74.29489;
        float f3=-29.1015F, fArr[]=new float[N];
        int i18=11, i19=-51, i20=-64757, i21=4, i22=9, i23=17238, i24=23752;
        byte by1=41;
        short s3=7953;
        boolean bArr1[][]=new boolean[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 0.72F);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(lArr2, 3371791756L);

        Test.instanceCount = lMeth(iFld, d3, 1.124263);
        iFld -= (int)Test.instanceCount;
        fArr[(iFld >>> 1) % N] -= Test.instanceCount;
        d3 = iFld;
        iFld ^= iFld;
        switch ((((3 >>> 1) % 2) * 5) + 124) {
        case 129:
            for (f3 = 10; 274 > f3; ++f3) {
                fFld -= i18;
                iFld -= (int)d3;
                bArr1[(int)(f3 - 1)] = bArr1[(int)(f3 + 1)];
            }
        case 128:
            d3 *= d3;
            i18 = (int)Test.instanceCount;
            break;
        default:
        }
        Test.iArrFld[(iFld >>> 1) % N] += i18;
        fArr[(i18 >>> 1) % N] = i18;
        for (i19 = 3; i19 < 324; ++i19) {
            for (i21 = 4; i21 < 78; i21++) {
                iFld += i21;
                i22 <<= (int)Test.instanceCount;
                lArr2[i21] >>>= i22;
                Test.instanceCount -= (long)d3;
                lArr2[i21] = by1;
            }
            fFld -= i18;
            Test.instanceCount += i19;
        }
        i22 >>= i22;
        s3 -= (short)i19;
        iFld = -47235;
        i22 -= iFld;
        for (i23 = 7; i23 < 284; i23++) {
            if (true) continue;
            fFld += 75.87F;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
