package tests.javafuzzer2695;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:47:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public double dFld=-124.99022;
    public static volatile short sFld=4514;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 802697322L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, int i3, long l3) {

        int i4=-1, i5=-66, i6=-5, i7=-62494, i8=-146;
        float f=18.330F;
        double d=56.13246;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-73);

        for (i4 = 8; i4 < 380; i4++) {
            i5 = i3;
            Test.lArrFld = Test.lArrFld;
            Test.lArrFld[i4 - 1] = 53315;
            i6 = 1;
            do {
                for (i7 = 1; i7 < 1; i7++) {
                    boolean b=true;
                    l2 = 34913;
                    i3 += (((i7 * i5) + i8) - i5);
                    if (b) break;
                    b = b;
                    i8 *= (int)l2;
                    if (true) {
                        i8 += -46796;
                        Test.instanceCount += (((i7 * i8) + i7) - f);
                        i3 -= (int)d;
                    } else {
                        byArr[i7] += (byte)-3361468737L;
                    }
                }
            } while (++i6 < 5);
        }
        vMeth1_check_sum += l2 + i3 + l3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(long l1) {

        int i1=-24, i2=-190, i9=-44320, i10=-251, i11=-13, i12=248;
        float f1=1.223F;
        double d1=39.116662;
        short s=6990;
        boolean b1=true;
        byte by=-40;

        for (i1 = 2; 179 > i1; ++i1) {
            vMeth1(l1, i2, 8676622814590476244L);
            for (i9 = 1; i9 < 9; ++i9) {
                l1 -= (long)f1;
                for (i11 = 1; 2 > i11; ++i11) {
                    i12 -= i12;
                    i12 <<= i12;
                    i10 = i2;
                    d1 += -30431;
                    f1 = i9;
                    if (true) {
                        i10 += (int)l1;
                        i12 = i11;
                        s = (short)Test.instanceCount;
                        b1 = b1;
                    } else if (b1) {
                        i2 = i1;
                    } else {
                        by -= (byte)l1;
                    }
                }
            }
        }
        vMeth_check_sum += l1 + i1 + i2 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + Double.doubleToLongBits(d1)
            + s + (b1 ? 1 : 0) + by;
    }

    public static void vSmallMeth() {


        vMeth(Test.instanceCount);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        long l=286154505225041422L, l4=1201724350L;
        int i=-516, i13=-10, i14=123, i15=-7, i16=-2, i17=-25914, i18=50612, i19=-11, iArr[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr, 52119);

        for (l = 14; l < 249; l++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
        }
        for (i13 = 10; i13 < 261; ++i13) {
            i = (int)Test.instanceCount;
            i14 = (int)dFld;
            for (l4 = 100; l4 > 2; l4--) {
                for (i16 = 1; i16 < 2; ++i16) {
                    switch (((i >>> 1) % 2) + 21) {
                    case 21:
                        iArr[i13 + 1] = i17;
                    case 22:
                    }
                    try {
                        i = (-376427748 % i15);
                        i14 = (-5 % i17);
                        i15 = (144 % i16);
                    } catch (ArithmeticException a_e) {}
                    i17 = i;
                    switch ((((i15 >>> 1) % 2) * 5) + 88) {
                    case 95:
                        if (b2) {
                            i14 <<= i17;
                            iArr[(int)(l4)] = (int)Test.instanceCount;
                        }
                        Test.instanceCount += (((i16 * Test.sFld) + l4) - i14);
                        dFld += i14;
                    case 94:
                        i15 = (int)l4;
                        i17 -= Test.sFld;
                        break;
                    default:
                        i = i13;
                        Test.instanceCount += i14;
                        i17 += i16;
                    }
                    i17 *= i15;
                    i15 += i16;
                    i17 += (i16 | Test.instanceCount);
                    i = (int)l4;
                }
                for (i18 = 1; i18 < 2; i18++) {
                    iArr[(int)(l4)] = (int)Test.instanceCount;
                    i17 += (int)Test.instanceCount;
                    i14 += i18;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
