package tests.javafuzzer306;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:34:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=34401L;
    public static volatile double dFld=-1.72164;
    public static int iFld=-163;
    public boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.109F);
        FuzzerUtils.init(Test.iArrFld, 64623);
        FuzzerUtils.init(Test.lArrFld, 187L);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10, double d2) {

        byte by=10;
        int i11=-234, i12=240, i13=17108, i14=39179, i15=4, i16=72, iArr2[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        float f2=0.648F;
        short s1=-24507;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 196L);
        FuzzerUtils.init(iArr2, -8);
        FuzzerUtils.init(bArr, false);

        by *= (byte)d2;
        for (i11 = 18; i11 < 368; ++i11) {
            switch ((i11 % 3) + 116) {
            case 116:
                for (i13 = 1; i13 < 5; ++i13) {
                    d2 *= d2;
                    for (i15 = 2; i15 > 1; --i15) {
                        if (b1) break;
                        try {
                            i14 = (i12 / i12);
                            i10 = (iArr2[i13 + 1] % iArr2[i11]);
                            i16 = (i14 / iArr2[i13 - 1]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = (long)f2;
                        f2 *= Test.instanceCount;
                        i12 -= i10;
                        iArr2[i13] += 2;
                        d2 *= i16;
                        i10 = i13;
                    }
                    bArr[i11] = b1;
                }
            case 117:
                s1 -= (short)i12;
                break;
            case 118:
                Test.instanceCount = i16;
                break;
            default:
                iArr2[i11] = i10;
            }
        }
        vMeth_check_sum += i10 + Double.doubleToLongBits(d2) + by + i11 + i12 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f2) + s1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth1() {

        int i5=-173, i6=154, i7=-97, i8=-6685, i9=-9, i17=-46844, iArr1[][]=new int[N][N];
        float f1=-1.545F;
        short s=9853;
        boolean b=true;

        FuzzerUtils.init(iArr1, -1);

        iArr1[(i5 >>> 1) % N][(i5 >>> 1) % N] -= (int)(i5 - (f1--));
        Test.instanceCount = (--s);
        for (i6 = 4; i6 < 352; i6++) {
            for (i8 = 1; i8 < 5; ++i8) {
                if (b) break;
                vMeth(169, Test.dFld);
                Test.fArrFld[i6 + 1] = s;
                i17 = 1;
                do {
                    i5 <<= i6;
                    iArr1[i6][i8 + 1] = (int)Test.instanceCount;
                    try {
                        iArr1[i8][i17 + 1] = (-80 / i17);
                        i9 = (-746059089 % iArr1[i17 + 1][i17 + 1]);
                        iArr1[i8][i17 - 1] = (-17052 / i7);
                    } catch (ArithmeticException a_e) {}
                    if (b) continue;
                    i7 &= i6;
                    Test.iFld %= (int)((long)(f1) | 1);
                    i9 = s;
                } while (++i17 < 2);
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + s + i6 + i7 + i8 + i9 + (b ? 1 : 0) + i17 +
            FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(double d1, float f) {

        int i18=-22536, i19=-109, i20=185, i21=-85;
        boolean b2=false;

        Test.instanceCount = (long)(--f);
        f -= lMeth1();
        i18 = 1;
        do {
            Test.iArrFld[i18 - 1] <<= Test.iFld;
            Test.iFld *= i18;
            b2 = b2;
            for (i19 = i18; i19 < 4; i19++) {
                i20 += i19;
                Test.iArrFld[i18 - 1] -= Test.iFld;
                i20 *= i20;
                d1 -= Test.iFld;
                i21 -= (int)1.192F;
                Test.instanceCount = i21;
                Test.instanceCount += Test.instanceCount;
                Test.iArrFld = Test.iArrFld;
            }
        } while (++i18 < 383);
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i18 + (b2 ? 1 : 0) + i19 + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=79, i1=107, i2=-179, i3=-14555, i4=20923, i22=-26801, i23=7, iArr[]=new int[N];
        double d=-1.66565;
        float f3=24.727F;
        short s2=-31617;
        byte by1=0;
        long lArr[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr, 2870570052L);
        FuzzerUtils.init(bArr1, true);

        if (bFld) {
            for (i = 259; i > 9; --i) {
                for (d = 4; 101 > d; d++) {
                    i1 += (int)(d * d);
                    i2 *= i;
                    iArr[(i2 >>> 1) % N] = iArr[i - 1];
                    for (i3 = 1; 2 > i3; i3++) {
                        lArr[i3 + 1] -= (long)(Long.reverseBytes(Test.instanceCount) + (d + (i4 - 4737)));
                        iArr[(int)(d)] >>= (int)lMeth(d, f3);
                        s2 += (short)i3;
                        Test.dFld = i2;
                        Test.instanceCount += (-7 + (i3 * i3));
                        Test.lArrFld = Test.lArrFld;
                        Test.iFld += (((i3 * Test.iFld) + Test.instanceCount) - i1);
                        Test.instanceCount = i4;
                        i4 += (int)Test.instanceCount;
                    }
                    i1 *= (int)f3;
                    for (i22 = 2; i22 > 1; --i22) {
                        if (bFld) {
                            Test.iFld <<= i1;
                        } else {
                            Test.instanceCount += (i22 | Test.instanceCount);
                            i4 = Test.iFld;
                        }
                        bArr1[(int)(d - 1)] = bFld;
                        i1 += Test.iFld;
                        i23 -= Test.iFld;
                        i4 <<= i2;
                        i2 = by1;
                        Test.instanceCount >>= Test.instanceCount;
                        if (true) continue;
                        Test.iFld ^= i23;
                    }
                }
            }
        } else {
            iArr[(i22 >>> 1) % N] -= i;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
