package tests.javafuzzer2408;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:21:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5120069215030066343L;
    public static volatile float fFld=2.557F;
    public volatile short sFld=15682;
    public static float fArrFld[]=new float[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -75.581F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1) {

        int i2=124, i3=-13813, iArr1[][]=new int[N][N];
        boolean b=false, bArr[]=new boolean[N];
        double d1=-81.69013, dArr[]=new double[N];
        byte by1=-62;
        short s1=-24954;
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(lArr, 5775800005800718669L);
        FuzzerUtils.init(dArr, 1.108484);

        bArr[(i2 >>> 1) % N] = b;
        d1 = 1;
        do {
            iArr1[(int)(d1)][(int)(d1 - 1)] = -54036;
            switch ((int)(((d1 % 8) * 5) + 6)) {
            case 15:
                if (i2 != 0) {
                }
                i3 = 1;
                while (++i3 < 7) {
                    lArr[i3] %= ((long)(d1) | 1);
                    iArr1[(int)(d1 + 1)] = iArr1[(int)(d1 + 1)];
                    if (b) {
                        b = b;
                        dArr[(int)(d1)] *= 179;
                    } else if (b) {
                        i2 = (int)2000659110124031197L;
                        i2 = i3;
                        i2 -= (int)Test.instanceCount;
                        by1 += (byte)(i3 ^ i3);
                    }
                }
                break;
            case 42:
                Test.instanceCount *= Test.instanceCount;
                break;
            case 30:
                iArr1[(int)(d1)][(int)(d1 + 1)] = (int)Test.instanceCount;
                break;
            case 17:
                if (i3 != 0) {
                }
                break;
            case 36:
                iArr1[(int)(d1)][(int)(d1)] -= -8;
                break;
            case 32:
                Test.instanceCount = s1;
                break;
            case 10:
                by1 -= (byte)i3;
                break;
            case 11:
                i2 >>= 216;
                break;
            }
        } while (++d1 < 249);
        long meth_res = Float.floatToIntBits(f1) + i2 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i3 + by1 + s1 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i1) {

        short s=-5300;
        double d=1.126054;
        int i4=171, i5=-7, i6=-246, i7=-2, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -5814);

        s += (short)(iArr[(14734 >>> 1) % N] + i1);
        d += iMeth(Test.fFld);
        Test.instanceCount = i1;
        switch (((i1 >>> 1) % 7) + 121) {
        case 121:
            for (i4 = 6; i4 < 324; ++i4) {
                for (i6 = i4; i6 < 5; i6++) {
                    switch (((i7 >>> 1) % 7) + 91) {
                    case 91:
                        if (b1) {
                            i7 >>= (int)Test.instanceCount;
                        } else {
                            if (b1) continue;
                            Test.fFld += i6;
                            vMeth_check_sum += l + i1 + s + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + (b1 ? 1 :
                                0) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        i7 += i6;
                        i7 += (int)(3545584342L + (i6 * i6));
                        break;
                    case 92:
                        i1 += i6;
                        break;
                    case 93:
                        Test.fArrFld[i4] -= Test.fFld;
                        break;
                    case 94:
                        i5 <<= (int)-60866L;
                        break;
                    case 95:
                        i5 |= (int)l;
                        break;
                    case 96:
                        i7 -= i4;
                        break;
                    case 97:
                        i7 = i4;
                        break;
                    }
                }
            }
            break;
        case 122:
            i5 /= (int)(Test.instanceCount | 1);
            break;
        case 123:
            Test.fFld = i1;
            break;
        case 124:
            Test.fFld = i6;
            break;
        case 125:
        case 126:
            iArr[(i1 >>> 1) % N] = i4;
            break;
        case 127:
            b1 = b1;
        }
        vMeth_check_sum += l + i1 + s + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(float f, byte by, int i) {


        vMeth(Test.instanceCount, i);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + by + i;
    }

    public void mainTest(String[] strArr1) {

        int i8=-65031, i9=146, i10=175, i11=0, i12=15, i13=90, i14=-21, i15=-219, i16=26438, i17=-55365, i18=-216,
            i19=-8;
        double d2=-7.91122;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)4);

        for (int smallinvoc=0; smallinvoc<511; smallinvoc++) vSmallMeth(Test.fFld, (byte)(9), 18824);
        Test.fFld = i8;
        i8 = (int)d2;
        for (i9 = 331; 19 < i9; --i9) {
            i8 += (int)-101.68352;
            i10 <<= (int)36724L;
            for (i11 = 5; i11 < 81; i11 += 2) {
                for (i13 = 3; i13 > i9; --i13) {
                    i8 += (int)d2;
                }
            }
            i15 = 1;
            do {
                Test.instanceCount -= Test.instanceCount;
                i14 |= i15;
                byArr[i15 - 1] = (byte)i13;
                for (i16 = 1; i16 > 1; i16--) {
                    sFld = (short)Test.instanceCount;
                    iArrFld = iArrFld;
                    byArr[i15] = (byte)i10;
                    iArrFld[i15 - 1] -= (int)Test.fFld;
                    Test.fArrFld[i16 + 1] *= i13;
                    Test.instanceCount = i9;
                    i8 += (int)(-53L + (i16 * i16));
                    i8 *= i14;
                    Test.instanceCount = i16;
                }
                for (i18 = 1; i18 < 1; ++i18) {
                    Test.instanceCount >>>= i10;
                    i8 <<= (int)Test.instanceCount;
                    if (false) {
                        try {
                            i12 = (i19 % 7856);
                            i14 = (i12 % 2091540081);
                            i19 = (-130 / i11);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = i8;
                    }
                    Test.instanceCount = i18;
                }
            } while (++i15 < 81);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
