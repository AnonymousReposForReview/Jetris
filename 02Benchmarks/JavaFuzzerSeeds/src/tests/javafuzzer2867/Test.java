package tests.javafuzzer2867;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:53:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8712841002496493057L;
    public static float fFld=57.635F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 173);
        FuzzerUtils.init(Test.dArrFld, 41.106024);
        FuzzerUtils.init(Test.fArrFld, 28.359F);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, int i7) {

        int i8=37486, i9=-230, i10=-5, i11=-2, iArr1[][]=new int[N][N];
        double d=-1.99153, d1=-1.54921;
        byte by=16;
        boolean b=false;

        FuzzerUtils.init(iArr1, -7);

        iArr1 = iArr1;
        i8 = 1;
        while (++i8 < 280) {
            i7 += (i8 + i7);
            i5 >>= (int)5194528023174224011L;
            for (i9 = 1; i9 < 6; ++i9) {
                i7 += (i9 ^ i7);
                i7 >>= i8;
            }
            iArr1[i8 + 1][i8] = i7;
            d = 1;
            while (++d < 6) {
                by <<= (byte)Test.instanceCount;
                for (d1 = d; d1 < 1; ++d1) {
                    b = false;
                    Test.instanceCount = (long)d1;
                    i10 = (int)Test.instanceCount;
                    i5 += (112 + (d1 * d1));
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + by +
            Double.doubleToLongBits(d1) + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static short sMeth(long l, int i2, int i3) {

        float f=1.912F;
        int i4=-10, i12=1, i13=4;
        short s=26538;
        boolean b1=true, b2=true;
        byte by1=35;

        for (f = 14; f < 390; ++f) {
            if (b1) {
                i4 += (int)f;
            } else if (b2) {
                vMeth1(i3, i2, i3);
                for (i12 = 1; i12 < 4; ++i12) {
                    i3 += (i12 * i4);
                    i3 -= i2;
                    if (b1) {
                        Test.instanceCount = i12;
                        i2 += (i12 + f);
                        s += (short)-238;
                        Test.fFld += i4;
                    } else {
                        i4 += (i12 ^ i12);
                        i4 += (((i12 * i12) + i2) - Test.instanceCount);
                        by1 += (byte)(((i12 * i4) + Test.instanceCount) - i3);
                    }
                }
            } else if (b2) {
                Test.iArrFld[(int)(f)] = i3;
            } else {
                Test.fFld += (f - i4);
            }
        }
        long meth_res = l + i2 + i3 + Float.floatToIntBits(f) + i4 + i12 + i13 + s + (b1 ? 1 : 0) + by1 + (b2 ? 1 : 0);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i14=-9, i15=-19302, i16=50291, i17=-24564, i18=234, i19=53595, i20=6887, iArr[]=new int[N];
        double d2=83.3424, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 44616);
        FuzzerUtils.init(dArr, -88.66600);

        iArr[(i1 >>> 1) % N] += Short.reverseBytes(sMeth(Test.instanceCount, i, 12));
        Test.instanceCount -= 38;
        for (i14 = 11; 180 > i14; ++i14) {
            Test.fFld += Test.instanceCount;
            try {
                i = (i15 % i15);
                i = (44115 / i15);
                Test.iArrFld[i14 - 1] = (Test.iArrFld[i14] / i1);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount *= Test.instanceCount;
            i16 = 1;
            while (++i16 < 9) {
                i %= (int)((long)(d2) | 1);
                i15 -= i1;
                i15 += i15;
            }
            for (i17 = 1; i17 < 9; ++i17) {
                Test.instanceCount <<= i16;
                for (i19 = 1; i19 < 2; i19++) {
                    Test.instanceCount *= Test.instanceCount;
                    dArr[i14 - 1] = i20;
                }
            }
        }
        vMeth_check_sum += i + i1 + i14 + i15 + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=55, i22=28687, i23=-39630, i24=-80, i25=31964, i26=-11, i27=180, i28=-45607, i29=-141;
        double d3=-98.12801;
        boolean b3=true;
        short s1=5162;

        vMeth(i21, i21);
        for (i22 = 10; i22 < 192; ++i22) {
            for (i24 = 138; i24 > 2; i24 -= 2) {
                i23 += (int)d3;
                i25 += i24;
                Test.iArrFld[i22 - 1] -= (int)600730141L;
                Test.dArrFld = FuzzerUtils.double1array(N, (double)1.91023);
                if (b3) {
                    switch (((i21 >>> 1) % 10) + 55) {
                    case 55:
                        Test.fFld += Test.fFld;
                        break;
                    case 56:
                        for (i26 = 1; 3 > i26; ++i26) {
                            d3 *= Test.instanceCount;
                            Test.fArrFld[i24 + 1] -= i26;
                            i21 *= i24;
                            i21 |= (int)-71L;
                        }
                        switch ((i22 % 5) + 106) {
                        case 106:
                            i23 += i24;
                            i21 = (int)Test.instanceCount;
                            for (i28 = 1; i28 < 3; i28++) {
                                d3 = 35;
                                try {
                                    i23 = (i24 / i22);
                                    i27 = (i26 / -77322943);
                                    Test.iArrFld[i22 - 1] = (i23 % -25301);
                                } catch (ArithmeticException a_e) {}
                            }
                            break;
                        case 107:
                            if (b3) break;
                            s1 += (short)(i24 + i23);
                            Test.instanceCount -= (long)d3;
                            break;
                        case 108:
                            i23 += (int)Test.instanceCount;
                            i21 >>>= 20;
                            break;
                        case 109:
                            i21 -= i28;
                            i29 += (((i24 * i21) + i23) - i28);
                            break;
                        case 110:
                            i23 >>= i27;
                            Test.iArrFld = Test.iArrFld;
                            break;
                        }
                        break;
                    case 57:
                        i23 = (int)d3;
                        break;
                    case 58:
                        i29 += i26;
                        break;
                    case 59:
                        i29 = i21;
                        break;
                    case 60:
                        Test.fFld = i24;
                    case 61:
                        Test.instanceCount += i24;
                    case 62:
                        Test.instanceCount += (16333 + (i24 * i24));
                    case 63:
                        Test.iArrFld[i22 + 1] -= -3;
                        break;
                    case 64:
                        Test.fFld += ((long)i24 | (long)Test.instanceCount);
                        break;
                    default:
                        i27 *= s1;
                    }
                } else if (b3) {
                    i23 = (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
