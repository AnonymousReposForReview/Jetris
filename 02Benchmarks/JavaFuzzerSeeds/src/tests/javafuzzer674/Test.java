package tests.javafuzzer674;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:42:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1905179194L;
    public static int iFld=57844;
    public byte byFld=74;
    public static int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -204);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d1, int i4) {

        int i5=248, i6=44539, i7=4, i8=20594, i9=1, iArr1[]=new int[N];
        float f=-67.254F;
        boolean b=false;
        byte by=-63;

        FuzzerUtils.init(iArr1, 32281);

        Test.instanceCount *= i4;
        i4 -= -6;
        i5 = 231;
        do {
            i4 = 20932;
            for (i6 = i5; 7 > i6; i6 += 3) {
                i4 = 132;
                f += f;
                if (b) {
                    d1 = i7;
                    d1 = 7299;
                    i7 += (int)d1;
                }
                for (i8 = 1; i8 > 1; i8 -= 2) {
                    iArr1[i6] += i4;
                    f += by;
                    Test.instanceCount >>>= i5;
                }
            }
        } while (--i5 > 0);
        long meth_res = Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + i8 +
            i9 + by + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i2=13, i3=249, i10=49279, i11=-55275, i12=-170, iArr2[]=new int[N];
        double d=-51.15177;
        float f1=-1.1002F, fArr[]=new float[N];
        short s2=-3795, sArr[]=new short[N];

        FuzzerUtils.init(fArr, 0.983F);
        FuzzerUtils.init(iArr2, -13);
        FuzzerUtils.init(sArr, (short)-8286);

        l -= Test.iFld;
        Test.iFld >>= (Test.iFld++);
        for (i2 = 17; i2 < 300; ++i2) {
            fArr[i2 + 1] -= (--i3);
            d -= Math.max(iMeth1(-34.130851, i2), i3);
            i3 <<= (int)Test.instanceCount;
            i10 = 1;
            while (++i10 < 6) {
                iArr2[i10 + 1] = (int)d;
                l >>= l;
                Test.instanceCount >>= 19342;
                Test.iFld <<= 137;
                f1 -= s2;
                for (i11 = 1; i11 < 1; i11++) {
                    f1 += i12;
                    sArr[i10] = (short)l;
                }
            }
        }
        vMeth_check_sum += l + i2 + i3 + Double.doubleToLongBits(d) + i10 + Float.floatToIntBits(f1) + s2 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(sArr);
    }

    public int iMeth(int i1) {

        short s1=-19584;
        int i13=88, i14=-194, i15=15639, i16=-44494, i17=-50152, i18=-9744, iArr[]=new int[N];
        float f2=1.268F;
        double d2=-2.37334, d3=-1.6696;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -28560);
        FuzzerUtils.init(byArr, (byte)-66);

        iArr[(i1 >>> 1) % N] += (s1--);
        i1 += ((-i1) % (i1 | 1));
        vMeth(Test.instanceCount);
        for (i13 = 346; i13 > 12; i13--) {
            iArr[i13] -= i14;
            for (i15 = 1; i15 < 5; ++i15) {
                Test.instanceCount = (long)f2;
                Test.instanceCount += (((i15 * i13) + i14) - byFld);
                for (i17 = 2; i17 > 1; --i17) {
                    d2 += d3;
                    i1 = -135;
                    byArr[i17] -= (byte)i15;
                    Test.iFld = i14;
                    Test.iFld += i18;
                    Test.iFld += (((i17 * i18) + Test.instanceCount) - i18);
                }
            }
        }
        long meth_res = i1 + s1 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-5700;
        int i=-5, i19=-14, i20=21490, i21=-4459, i22=-52648, i23=-52719, i24=14, i25=42401;
        float f3=2.787F, f4=0.447F;
        boolean b1=false;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -105.124008);
        FuzzerUtils.init(lArr, -170L);

        s += (short)((i * (i * i)) + ((dArr[(i >>> 1) % N] += Test.instanceCount) + iMeth(i)));
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount <<= i;
        Test.iArrFld[(i >>> 1) % N] -= Test.iFld;
        if (b1) {
            for (i19 = 7; 257 > i19; ++i19) {
                i20 = i;
                dArr[i19] = i19;
                Test.iArrFld[i19] *= i19;
                for (f3 = 3; f3 < 101; ++f3) {
                    switch (i19 % 2) {
                    case 0:
                        switch (((i21 >>> 1) % 9) + 45) {
                        case 45:
                            lArr[(i >>> 1) % N] >>>= Test.instanceCount;
                            break;
                        case 46:
                            i21 >>>= Test.iFld;
                            for (i22 = 1; i22 < 2; i22++) {
                                f4 += (((i22 * i21) + i23) - Test.instanceCount);
                                i20 -= (int)f3;
                                i %= (int)(i | 1);
                                Test.iFld -= (int)145L;
                            }
                        case 47:
                            i24 = 1;
                            while (++i24 < 2) {
                                lArr[i19 - 1] = i25;
                            }
                            i21 = i24;
                            Test.instanceCount = i24;
                            try {
                                Test.iFld = (-206 % i24);
                                i20 = (1471373155 % i25);
                                i20 = (-4474 / Test.iFld);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 48:
                            try {
                                Test.iArrFld[i19 - 1] = (i24 / Test.iArrFld[i19 + 1]);
                                Test.iArrFld[i19] = (-7216 / i23);
                                Test.iFld = (-232 / i23);
                            } catch (ArithmeticException a_e) {}
                            sArrFld[(int)(f3)] ^= (short)i25;
                            byFld = (byte)2.539F;
                            byFld = (byte)Test.instanceCount;
                            break;
                        case 49:
                            i20 += (int)(((f3 * i25) + s) - i21);
                            Test.instanceCount <<= Test.instanceCount;
                            break;
                        case 50:
                            byFld = (byte)Test.iFld;
                        case 51:
                            Test.iArrFld[i19 - 1] = (int)8L;
                        case 52:
                            s >>= (short)i22;
                            break;
                        case 53:
                        }
                        break;
                    case 1:
                        Test.iFld = 1;
                        break;
                    }
                }
            }
        } else {
            Test.instanceCount += i24;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
