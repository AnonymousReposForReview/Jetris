package tests.javafuzzer1116;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:42:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4080855291511904736L;
    public static double dFld=49.5348;
    public static float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.161F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s, boolean b) {

        int i3=-5, i4=112, i5=6, i6=-4, iArr1[]=new int[N];
        float f1=-69.306F;

        FuzzerUtils.init(iArr1, 8164);

        for (i3 = 9; i3 < 166; ++i3) {
            f1 += (((i3 * i3) + Test.instanceCount) - f1);
            f1 *= 123L;
            i4 = i3;
            for (i5 = 1; 10 > i5; ++i5) {
                b = b;
                b = false;
                f1 = f1;
            }
            i6 = -14;
            i4 = (int)f1;
            Test.fArrFld[i3][i3] *= i4;
            iArr1[i3] += i3;
        }
        i6 <<= (int)9167194941610682608L;
        s -= (short)50817;
        Test.dFld -= i6;
        long meth_res = s + (b ? 1 : 0) + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, byte by, float f) {

        short s1=-28706;
        boolean b1=true;
        int i7=-140, i8=4, i9=-236, i10=240, i11=-38562, iArr[][]=new int[N][N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr, -89);
        FuzzerUtils.init(dArr, -2.103587);

        i2 &= ((iArr[(i2 >>> 1) % N][(i2 >>> 1) % N] |= (i2 * by)) - (-(--i2)));
        try {
            i2 += iMeth(s1, b1);
            i2 *= i2;
            for (i7 = 19; i7 < 328; i7 += 2) {
                by += (byte)f;
                for (i9 = 1; i9 < 10; ++i9) {
                    i11 = 1;
                    while (++i11 < 2) {
                        iArr[(i7 >>> 1) % N][i11 + 1] -= i7;
                        if (false) continue;
                        switch ((i11 % 2) + 56) {
                        case 56:
                            try {
                                i8 = (-14477 % iArr[i9 + 1][i9]);
                                i8 = (117 % i7);
                                iArr[i7][i9 + 1] = (iArr[i11 - 1][i7] / 79);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount -= (long)Test.dFld;
                            i2 = i9;
                            break;
                        case 57:
                            dArr[i11][i9] += Test.instanceCount;
                            break;
                        }
                    }
                }
            }
        }
        catch (NullPointerException exc1) {
            Test.fArrFld[(i7 >>> 1) % N][(i8 >>> 1) % N] -= i2;
        }
        vMeth1_check_sum += i2 + by + Float.floatToIntBits(f) + s1 + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i) {

        int i1=-3, i12=-6, i13=11, i14=10414, i15=61840, i16=57045, i17=-32541;
        byte by1=-54;
        float f2=1.367F;
        boolean b2=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i |= i;
        i1 = 1;
        while (++i1 < 220) {
            vMeth1(i, by1, f2);
            for (i12 = 1; i12 < 7; i12++) {
                for (i14 = 1; i14 < 2; i14++) {
                    i += (i14 * i14);
                    Test.instanceCount = i;
                    b2 = b2;
                }
                i13 += (i12 * i12);
                Test.instanceCount += (i12 * i12);
                Test.instanceCount -= i15;
                i15 = i1;
                for (i16 = i12; 2 > i16; i16++) {
                    bArr[i12 + 1] = b2;
                    i17 *= 24998;
                }
            }
        }
        vMeth_check_sum += i + i1 + by1 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + (b2 ? 1 : 0) + i16 + i17 +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-22021, i19=10, i20=-47157, i21=101, i22=43;
        double d=-18.100112;
        long l=-28495L;
        float f3=0.141F, f4=-116.837F;
        byte by2=105;
        short s2=10690;

        vMeth(i18);
        d = 1;
        while (++d < 272) {
            i18 = (int)115L;
            for (i19 = 92; 2 < i19; --i19) {
                switch ((i19 % 9) + 38) {
                case 38:
                    for (l = 1; l < 2; ++l) {
                        Test.instanceCount = i21;
                        iArrFld[(int)(l)] *= -248;
                        i18 += i20;
                        Test.instanceCount = i20;
                        i21 = (int)f3;
                        i20 *= i19;
                        iArrFld[(int)(d + 1)] = (int)l;
                        Test.instanceCount += i19;
                        i21 += (int)(l * l);
                    }
                    i21 += (i19 * l);
                case 39:
                    i20 += by2;
                    Test.instanceCount += i19;
                    i18 = s2;
                    Test.instanceCount += (((i19 * i21) + f3) - i21);
                    break;
                case 40:
                    for (f4 = 1; 2 > f4; ++f4) {
                        i22 = i20;
                        Test.instanceCount <<= 52;
                        i22 = -60892;
                        i21 += (int)((long)f4 ^ i22);
                        i21 >>= (int)-6911089395209728168L;
                        i21 *= (int)0L;
                    }
                    i20 += (int)-125.113042;
                    by2 += (byte)(((i19 * f4) + i20) - f3);
                    break;
                case 41:
                    i20 = i22;
                case 42:
                    s2 += (short)(44006 + (i19 * i19));
                    break;
                case 43:
                    Test.instanceCount += (((i19 * i20) + s2) - f4);
                    break;
                case 44:
                    iArrFld[i19] = i20;
                    break;
                case 45:
                    i20 = 0;
                    break;
                case 46:
                    i22 += (i19 * Test.instanceCount);
                default:
                    i21 = i21;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
