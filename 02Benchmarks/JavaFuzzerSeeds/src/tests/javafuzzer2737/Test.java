package tests.javafuzzer2737;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:41:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2706317017L;
    public static boolean bFld=true;
    public static int iFld=247;
    public static short sFld=13677;
    public static byte byFld=-8;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -24975);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1) {


        Test.iFld <<= Test.iFld;
        vMeth1_check_sum += Float.floatToIntBits(f1);
    }

    public static void vMeth(int i9) {

        int i10=-147, i11=15, i12=-2;
        float f=-48.864F;
        double d1=41.15339, d2=-24.125409;

        for (i10 = 272; 4 < i10; i10 -= 3) {
            i9 = (int)(((i9 - Test.iFld) / ((Test.instanceCount - i11) | 1)) + ((f + i9) * (Test.instanceCount *
                -53.123131)));
            vMeth1(f);
            for (d1 = 17; d1 > 1; d1--) {
                i11 += (int)(d1 * d1);
                f += i10;
                Test.instanceCount = Test.iFld;
                d2 += d1;
            }
            Test.sFld >>= (short)Test.iFld;
            switch ((((i11 >>> 1) % 1) * 5) + 23) {
            case 25:
                Test.instanceCount >>= 155;
                break;
            }
            Test.iFld = Test.iFld;
            i9 >>= 148;
            Test.instanceCount *= (long)f;
        }
        Test.instanceCount = (long)f;
        vMeth_check_sum += i9 + i10 + i11 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i12 +
            Double.doubleToLongBits(d2);
    }

    public static int iMeth(long l, int i5, int i6) {

        int i7=66, i8=24381, i13=2, i14=-3276, i15=-32757;
        double d3=0.119428;
        float f2=-83.595F;
        long l1=-5L;

        for (i7 = 379; i7 > 16; i7--) {
            vMeth(i5);
        }
        d3 /= (Test.iFld | 1);
        Test.iArrFld[(-43 >>> 1) % N] <<= (int)l;
        for (i13 = 2; i13 < 214; ++i13) {
            i15 = 1;
            while (++i15 < 8) {
                int i16=0;
                i16 = (int)1547394360L;
                Test.instanceCount /= 34219;
                i8 = (int)f2;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-7041);
                Test.byFld += (byte)(((i15 * i13) + l) - f2);
                switch ((i13 % 2) + 117) {
                case 117:
                    if (Test.bFld) {
                        Test.instanceCount -= l;
                        i16 += (((i15 * i16) + i13) - i14);
                    } else if (Test.bFld) {
                        Test.instanceCount += -2;
                    } else if (true) {
                        i8 += (((i15 * l1) + i16) - l);
                    } else {
                        i8 += i15;
                    }
                    break;
                case 118:
                    if (i5 != 0) {
                    }
                    break;
                }
            }
        }
        long meth_res = l + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d3) + i13 + i14 + i15 +
            Float.floatToIntBits(f2) + l1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=53609, i1=-36906, i2=8, i3=-199, i4=-7292, i17=-99, i18=-6203, i19=38, i20=14, iArr[]=new int[N];
        double d=33.10589, d4=2.8437;
        short s=-17567;
        float f3=0.414F, f4=73.489F, f5=-2.336F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 29825);
        FuzzerUtils.init(lArr, 152L);
        FuzzerUtils.init(byArr, (byte)-88);

        for (i = 19; i < 344; i++) {
            Test.bFld = (Math.abs(i) >= ((iArr[i]--) ^ iArr[i]));
            lArr[i] >>= (--lArr[i]);
            iArr[i + 1] /= (int)((iArr[i - 1]--) | 1);
        }
        i2 = 1;
        do {
            i1 -= (int)((Test.instanceCount += Test.instanceCount) + (lArr[i2] + Test.instanceCount));
        } while (++i2 < 200);
        d += (i1 >>> (long)((-(--i1)) + (d * i1)));
        for (i3 = 14; i3 < 367; i3++) {
            d += ((11 + s) + iMeth(Test.instanceCount, i1, i4));
            d4 = 1;
            do {
                for (i17 = 1; i17 < 1; ++i17) {
                    i18 -= i4;
                    Test.instanceCount = 59339;
                    f3 += i2;
                    i4 = (int)Test.instanceCount;
                    byArr[i17 + 1] *= (byte)i4;
                    d = f4;
                }
                i4 += (int)Test.instanceCount;
                for (i19 = 1; 1 > i19; ++i19) {
                    f4 -= -5;
                    i18 ^= i17;
                    try {
                        i20 = (i19 % -194);
                        i18 = (Test.iArrFld[i19] % Test.iFld);
                        Test.iArrFld[(int)(d4)] = (-6 % i19);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i3 - 1] ^= i1;
                    Test.instanceCount >>= i19;
                    i18 >>= (int)Test.instanceCount;
                    i4 += Test.iFld;
                    i4 = (int)f5;
                    Test.iFld = 165;
                }
                i4 = Test.iFld;
            } while (++d4 < 71);
            Test.iFld <<= i4;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
