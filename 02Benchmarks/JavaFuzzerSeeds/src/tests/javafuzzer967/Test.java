package tests.javafuzzer967;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:15:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-419591457L;
    public static boolean bFld=true;
    public static double dFld=2.63851;
    public static short sFld=23676;
    public static boolean bFld1=true;
    public static byte byFld=-10;
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1) {

        int i4=-151, i5=6, i6=7, i7=38, i8=56235, i9=-53181, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8);

        i4 += i4;
        for (i5 = 363; i5 > 17; i5--) {
            i4 = i4;
            iArr[i5] *= i4;
            i4 += (i5 + i6);
            l1 = Test.instanceCount;
            Test.lArrFld[(i5 >>> 1) % N] += (long)Test.dFld;
            i7 = 1;
            do {
                i6 = -20320;
                for (i8 = 1; i8 < 5; ++i8) {
                    i9 += (((i8 * i4) + i8) - i9);
                    l1 -= 22448;
                    if (Test.bFld) {
                        i4 += i8;
                        i9 += (i8 * i8);
                    } else {
                        i6 -= i4;
                    }
                }
            } while ((i7 += 3) < 5);
        }
        long meth_res = l1 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, int i2, int i3) {

        long l2=46381L;
        int i10=1, i11=0, i12=143, i13=37503, iArr1[]=new int[N];
        byte by=121;
        float f2=-54.612F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -39);
        FuzzerUtils.init(fArr, -100.252F);

        Test.bFld = (Math.abs(i3) == lMeth(Test.instanceCount));
        i2 -= i3;
        for (l2 = 1; 143 > l2; l2++) {
            switch ((((i2 >>> 1) % 6) * 5) + 25) {
            case 35:
                i11 = 1;
                while (++i11 < 11) {
                    float f1=-42.82F;
                    switch ((i11 % 5) + 108) {
                    case 108:
                        for (i12 = 1; i12 > 1; i12--) {
                            float f=-86.913F;
                            i13 = -198;
                            Test.dFld += l;
                            Test.dFld += l;
                            Test.dFld += 9;
                            if (Test.bFld1) {
                                if (Test.bFld) continue;
                            } else if (Test.bFld1) {
                                i13 -= Test.sFld;
                                f += (i12 * i11);
                            } else {
                                Test.instanceCount += (186 + (i12 * i12));
                            }
                        }
                        break;
                    case 109:
                        try {
                            i3 = (-55240 / iArr1[(int)(l2 - 1)]);
                            i10 = (-14 / i11);
                            i2 = (-88401654 % iArr1[(int)(l2 + 1)]);
                        } catch (ArithmeticException a_e) {}
                    case 110:
                        by += (byte)(((i11 * i3) + Test.instanceCount) - i3);
                        break;
                    case 111:
                        f1 = i2;
                        break;
                    case 112:
                        i13 = 21151;
                    }
                }
                break;
            case 27:
                Test.lArrFld[(int)(l2 - 1)] = -6;
            case 42:
                fArr[(int)(l2 + 1)] += f2;
                break;
            case 41:
                iArr1 = FuzzerUtils.int1array(N, (int)-12);
                break;
            case 44:
                if (false) break;
            case 37:
                i13 *= i2;
                break;
            default:
                i10 -= i10;
            }
        }
        vMeth1_check_sum += l + i2 + i3 + l2 + i10 + i11 + i12 + i13 + by + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i=-17326, i1=27410, i15=-5, i16=247, iArr2[]=new int[N];
        byte by1=48, byArr[]=new byte[N];
        float f3=0.762F, fArr1[]=new float[N];
        long lArr[][]=new long[N][N];
        double dArr[][]=new double[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, -3);
        FuzzerUtils.init(fArr1, -2.316F);
        FuzzerUtils.init(lArr, -67L);
        FuzzerUtils.init(dArr, 62.42446);
        FuzzerUtils.init(byArr, (byte)78);
        FuzzerUtils.init(bArr, true);

        for (i = 13; i < 390; ++i) {
            int i14=-1;
            i1 += (int)69.946F;
            switch (i + 49) {
            case 49:
                vMeth1(-47578L, i, i1);
                break;
            case 50:
                i1 += (-50091 + (i * i));
                i1 = i;
                break;
            case 51:
                i1 += (i * i);
                break;
            case 52:
                i14 = i14;
            case 53:
                Test.bFld = Test.bFld;
                switch ((i % 1) + 59) {
                case 59:
                    by1 ^= (byte)i1;
                    for (i15 = 1; 4 > i15; i15++) {
                        i16 += i15;
                    }
                    if (i16 != 0) {
                        vMeth_check_sum += i + i1 + by1 + i15 + i16 + Float.floatToIntBits(f3) +
                            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
                            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    Test.instanceCount *= Test.instanceCount;
                default:
                    Test.sFld = (short)i16;
                }
                break;
            case 54:
                f3 -= i16;
                break;
            case 55:
                Test.sFld *= (short)i15;
                break;
            case 56:
                f3 -= 47535;
                break;
            case 57:
                try {
                    iArr2[i] = (i14 / i);
                    i16 = (i14 % 221);
                    i14 = (-5 / i14);
                } catch (ArithmeticException a_e) {}
                break;
            case 58:
                i1 *= (int)Test.instanceCount;
                break;
            case 59:
                Test.instanceCount = 46692;
            case 60:
                i16 += (i + Test.instanceCount);
                break;
            case 61:
                i16 += (int)Test.instanceCount;
            case 62:
                i14 = Test.sFld;
                break;
            case 63:
                i1 = (int)Test.instanceCount;
            case 64:
                if (i15 != 0) {
                    vMeth_check_sum += i + i1 + by1 + i15 + i16 + Float.floatToIntBits(f3) +
                        FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                break;
            case 65:
                i1 = i15;
                break;
            case 66:
            case 67:
                fArr1[i] = i15;
                break;
            case 68:
            case 69:
                Test.byFld += (byte)Test.sFld;
                break;
            case 70:
                Test.instanceCount += (((i * i16) + Test.instanceCount) - i15);
            case 71:
                i14 <<= i16;
            case 72:
                fArr1[i] *= Test.instanceCount;
            case 73:
                i14 = i1;
                break;
            case 74:
                if (i16 != 0) {
                    vMeth_check_sum += i + i1 + by1 + i15 + i16 + Float.floatToIntBits(f3) +
                        FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                break;
            case 75:
                i14 = (int)f3;
                break;
            case 76:
                i14 = Test.sFld;
                break;
            case 77:
                f3 = i16;
                break;
            case 78:
                Test.instanceCount = Test.instanceCount;
            case 79:
                i1 += (((i * i14) + i1) - i14);
                break;
            case 80:
                i16 >>= -48843;
                break;
            case 81:
                iArr2 = iArr2;
                break;
            case 82:
                i14 -= (int)Test.instanceCount;
            case 83:
                Test.dFld += i15;
                break;
            case 84:
                f3 += ((long)i | (long)i1);
            case 85:
                Test.lArrFld[(i16 >>> 1) % N] += i14;
                break;
            case 86:
                f3 += -10L;
                break;
            case 87:
                Test.lArrFld[i] >>= i;
                break;
            case 88:
                i1 <<= (int)Test.instanceCount;
                break;
            case 89:
                i16 += (i | Test.instanceCount);
                break;
            case 90:
                lArr = lArr;
                break;
            case 91:
                Test.instanceCount -= i1;
            case 92:
                iArr2[i - 1] -= (int)Test.instanceCount;
                break;
            case 93:
            case 94:
                i16 += (int)f3;
            case 95:
                Test.dFld += Test.instanceCount;
                break;
            case 96:
                Test.bFld = Test.bFld1;
                break;
            case 97:
                by1 /= (byte)60791;
                break;
            case 98:
                i16 -= i15;
                break;
            case 99:
                f3 = Test.instanceCount;
            case 100:
                i14 -= (int)Test.instanceCount;
                break;
            case 101:
                i16 = (int)-66.936F;
                break;
            case 102:
                i16 = i1;
                break;
            case 103:
                Test.lArrFld[i + 1] -= (long)Test.dFld;
                break;
            case 104:
                dArr[i - 1][i] = Test.dFld;
                break;
            case 105:
                i14 += (i | i16);
            case 106:
                Test.bFld = true;
                break;
            case 107:
                i16 = i1;
                break;
            case 108:
                byArr[i - 1] = (byte)i16;
                break;
            case 109:
                Test.instanceCount = i15;
            case 110:
                i1 += (i * i);
                break;
            case 111:
                if (false) continue;
                break;
            case 112:
                bArr[i - 1] = Test.bFld;
                break;
            case 113:
                i14 = (int)Test.instanceCount;
                break;
            case 114:
                i16 = i;
                break;
            case 115:
                iArr2[i - 1] = i1;
                break;
            case 116:
                i14 >>>= i14;
                break;
            case 117:
                i14 += 6;
            case 118:
                i1 *= i14;
                break;
            }
        }
        vMeth_check_sum += i + i1 + by1 + i15 + i16 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=11509, i21=-110, i22=62141, i23=14, i24=-154, i25=-9, i26=-166;
        float f5=-5.785F;

        vMeth();
        i20 >>= 46141;
        i20 += Test.byFld;
        i20 = (int)115.953F;
        i20 = i20;
        Test.bFld1 = Test.bFld;
        f5 = i20;
        f5 += i20;
        i21 = 1;
        do {
            f5 = 175;
            i20 >>= (int)9074466161625037717L;
            i22 = 1;
            do {
                i20 = i22;
                Test.instanceCount += 58021L;
                i20 += i20;
                i20 = i22;
                for (i23 = 1; i23 < 1; ++i23) {
                    i20 += (-19129 + (i23 * i23));
                }
                for (i25 = 1; i25 < 1; i25++) {
                    Test.dFld *= Test.instanceCount;
                    i20 -= i24;
                    Test.byFld *= (byte)-16380;
                    i20 += i22;
                    i20 = i24;
                    Test.bArrFld[i21 + 1] = Test.bFld1;
                    i20 -= i23;
                    i26 += (int)Test.dFld;
                }
                i20 += (((i22 * Test.instanceCount) + i21) - i24);
                i20 += (((i22 * i26) + i20) - i22);
                i26 = i20;
            } while (++i22 < 269);
        } while ((i21 += 3) < 281);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
