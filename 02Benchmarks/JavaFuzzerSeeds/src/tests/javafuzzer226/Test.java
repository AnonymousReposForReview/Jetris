package tests.javafuzzer226;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:23:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static double dFld=-45.26974;
    public volatile boolean bFld=true;
    public short sFld=16437;

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f, byte by) {

        int i8=37678, i9=-20973, i10=15246, i11=-51776, i12=-59, i13=-69, i14=13314, iArr[]=new int[N];
        boolean b=false;
        short s1=1093;

        FuzzerUtils.init(iArr, 66);

        for (i8 = 19; i8 < 383; i8++) {
            for (i10 = 1; i10 < 5; i10++) {
                for (i12 = 1; 2 > i12; i12++) {
                    i11 = i8;
                    f += 5340;
                    Test.instanceCount >>= i9;
                    i9 = i11;
                    b = true;
                    switch ((i12 % 2) + 2) {
                    case 2:
                        iArr[i12 + 1] -= i10;
                    case 3:
                        i11 += i11;
                        iArr[i8 - 1] ^= i12;
                        i11 *= s1;
                        iArr[(i10 >>> 1) % N] -= (int)Test.dFld;
                        break;
                    }
                    Test.instanceCount = i14;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + s1 + i14 +
            FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(int i7) {

        float f1=0.168F;
        byte by1=85;
        int i15=154, i16=-11;

        vMeth(f1, by1);
        for (i15 = 12; i15 < 314; i15++) {
            i7 += i15;
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + by1 + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i4) {

        int i5=60, i6=-4, i17=14, i18=-29496, i19=1612;
        short s=3437;
        float f2=2.871F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -2.516F);

        switch ((((((int)(i4 -= (int)Test.dFld)) >>> 1) % 9) * 5) + 96) {
        case 104:
            for (i5 = 5; i5 < 168; ++i5) {
                s = (short)((i6 += iMeth(40475)) * -2.33563);
            }
            break;
        case 112:
            if (bFld) {
                i6 -= i5;
                Test.instanceCount += -52830L;
            }
            break;
        case 120:
            Test.instanceCount -= i6;
            Test.dFld = 30825;
            for (i17 = 8; 306 > i17; i17++) {
                Test.instanceCount += (i17 * Test.instanceCount);
                i18 += i17;
                fArr1[i17 - 1] += i6;
                i6 -= i18;
                f2 *= i18;
            }
        case 110:
            i4 += (int)f2;
        case 109:
            i18 = i5;
            break;
        case 123:
            i18 &= -65;
            break;
        case 125:
            f2 = i17;
            break;
        case 122:
            i18 = (int)Test.instanceCount;
        case 118:
            i19 -= (int)Test.instanceCount;
            break;
        default:
            s -= (short)Test.dFld;
        }
        long meth_res = i4 + i5 + i6 + s + i17 + i18 + Float.floatToIntBits(f2) + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=33286, i1=-13, i2=-10, i3=30, i20=79, i21=201, i22=3385, i23=13, i24=126, i25=-13238, iArr1[]=new int[N];
        float f3=-92.519F, fArr[]=new float[N];
        long l=1894358152257782884L;
        byte by2=60;

        FuzzerUtils.init(fArr, -1.453F);
        FuzzerUtils.init(iArr1, -9);

        switch (((((int)(i - Test.instanceCount)) >>> 1) % 6) + 76) {
        case 76:
            for (i1 = 17; 321 > i1; i1++) {
                i3 = 1;
                do {
                    i += (int)(fArr[i1] - (-Test.instanceCount));
                    i2 -= (int)((lMeth(-20895) + i) + i3);
                    i = (int)-3364498729231425499L;
                    f3 += (-86 + (i3 * i3));
                    l = 1;
                    while (++l < 1) {
                        i2 >>= i2;
                        i2 = sFld;
                        try {
                            iArr1[(int)(l)] = (i2 % i);
                            i2 = (i3 / i3);
                            i = (1728663400 / i);
                        } catch (ArithmeticException a_e) {}
                        f3 += i2;
                        i2 /= 14;
                        iArr1[i1] >>>= by2;
                        if (bFld) {
                            iArr1 = iArr1;
                            i >>= i3;
                        } else {
                            iArr1[(int)(l)] >>= (int)Test.instanceCount;
                            i2 = (int)Test.dFld;
                        }
                    }
                } while (++i3 < 83);
                for (i20 = 1; i20 < 83; i20++) {
                    i2 |= sFld;
                    iArr1[i20] <<= -96;
                    switch ((i20 % 3) + 76) {
                    case 76:
                        for (i22 = 1; i22 < 2; ++i22) {
                            i23 *= by2;
                        }
                        for (i24 = 1; i24 < 2; ++i24) {
                            f3 = i2;
                            f3 -= 15962;
                            i25 -= i25;
                            sFld -= (short)-6L;
                        }
                        break;
                    case 77:
                        iArr1 = iArr1;
                        break;
                    case 78:
                        Test.dFld = 29;
                        break;
                    }
                }
            }
        case 77:
            Test.instanceCount += i22;
            break;
        case 78:
            i25 += (int)f3;
        case 79:
            iArr1[(-11 >>> 1) % N] = -40;
        case 80:
            i *= i20;
            break;
        case 81:
            Test.dFld -= i;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
