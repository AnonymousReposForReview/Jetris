package tests.javafuzzer1528;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:10:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static volatile short sFld=-28877;
    public int iFld=-665;
    public static float fFld=1.681F;
    public static double dFld=-116.94331;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, float f1, short s) {

        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -156L);

        for (long l : lArr2) {
            lArr2 = lArr2;
        }
        i10 *= i10;
        s = (short)Test.instanceCount;
        vMeth1_check_sum += i10 + Float.floatToIntBits(f1) + s + FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(int i5) {

        double d1=0.22236, d2=75.104674, d4=-2.21791;
        int i6=-10, i7=-50036, i8=1, i9=-73, iArr[][]=new int[N][N];
        float f=54.549F;
        byte by1=-7;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -9L);
        FuzzerUtils.init(iArr, -11);

        for (d1 = 18; 326 > d1; d1++) {
            lArr1[(int)(d1 + 1)] = (long)(f - Long.reverseBytes((long)(0.49196 * Math.sqrt(77.6897))));
        }
        i5 %= (int)(((-(-(Test.sFld % (i5 | 1)))) - (i5 + (++iArr[(i5 >>> 1) % N][(52 >>> 1) % N]))) | 1);
        d2 = 1;
        do {
            i7 = 1;
            do {
                i5 -= (int)((--i5) + (i6 = (int)(f - Test.sFld)));
                if (i7 != 0) {
                }
            } while (++i7 < 8);
            for (i8 = (int)(d2); i8 < 8; ++i8) {
                double d3=65.33741;
                vMeth1(i9, f, Test.sFld);
                f += i6;
                iArr[(int)(d2 + 1)][i8] = i8;
                i6 = i8;
                d3 *= Test.instanceCount;
                d3 -= d4;
                i6 -= by1;
            }
        } while (++d2 < 208);
        long meth_res = i5 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) +
            i7 + i8 + i9 + Double.doubleToLongBits(d4) + by1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, int i, int i1) {

        double d=59.21940;
        int i2=-163, i3=-83, i4=110, i11=-10, i12=32744, i13=-252, i14=-57820;
        float f2=100.28F;
        long l1=38556L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8L);

        d = (i1--);
        i2 = 1;
        do {
            boolean b=true;
            for (i3 = i2; 5 > i3; ++i3) {
                Test.instanceCount = (i1 = i3);
                i4 += (int)((Test.instanceCount--) * ((--lArr[i3]) * (-36102 * Test.instanceCount)));
            }
            if (b) {
                lArr[i2 + 1] = (long)((iMeth(i1) + -1.16157) * i1);
                for (i11 = 1; i11 < 5; i11++) {
                    i4 -= (int)-161L;
                }
                vMeth_check_sum += by + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i11 + i12 + i13 + i14 +
                    Float.floatToIntBits(f2) + l1 + FuzzerUtils.checkSum(lArr);
                return;
            } else {
                i1 += (((i2 * i4) + i) - i1);
                for (i13 = 5; i13 > 1; --i13) {
                    Test.instanceCount -= i13;
                    f2 += (i13 - l1);
                    Test.instanceCount += i1;
                    f2 = Test.instanceCount;
                }
            }
        } while (++i2 < 346);
        vMeth_check_sum += by + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f2) + l1 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by2=-31, byArr[]=new byte[N];
        int i15=218, i16=217, i17=-135, i18=-41820, i19=-21764, i20=-238, iArr1[]=new int[N];
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -206);
        FuzzerUtils.init(byArr, (byte)106);
        FuzzerUtils.init(fArr, 0.536F);

        vMeth(by2, i15, i15);
        i16 = 1;
        while (++i16 < 197) {
            for (i17 = 127; i17 > 7; i17--) {
                Test.sFld <<= (short)i17;
                for (i19 = 2; 1 < i19; i19--) {
                    iArr1[i16 + 1] = i17;
                    Test.instanceCount = Test.instanceCount;
                    byArr[i19] -= (byte)4;
                    switch (((i16 % 5) * 5) + 71) {
                    case 94:
                        i15 = (int)Test.instanceCount;
                        try {
                            iArr1[i17] = (iArr1[i19] / i17);
                            iFld = (-55656 / i15);
                            i18 = (20539 / iArr1[i17 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 72:
                        Test.fFld += iFld;
                        b1 = b1;
                        break;
                    case 90:
                        fArr[i19] -= i15;
                        Test.instanceCount = i20;
                        i15 = i15;
                        Test.instanceCount = i16;
                        break;
                    case 76:
                        i18 = iFld;
                        iArr1[i19 + 1] |= by2;
                        Test.instanceCount += i19;
                        i15 += i17;
                    case 87:
                    default:
                        Test.dFld -= Test.instanceCount;
                        if (false) {
                            i18 += (((i19 * i18) + Test.instanceCount) - Test.instanceCount);
                            iArr1[i19 + 1] -= 8665;
                        } else if (b1) {
                            i15 = (int)Test.instanceCount;
                            if (b1) continue;
                            i18 = (int)Test.instanceCount;
                        } else {
                            iFld -= i15;
                            iArr1[i17 + 1] *= (int)Test.instanceCount;
                        }
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
