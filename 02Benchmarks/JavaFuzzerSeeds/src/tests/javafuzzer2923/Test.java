package tests.javafuzzer2923;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:04:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static double dFld=2.65189;
    public static volatile byte byFld=-9;
    public static short sFld=-19816;
    public boolean bFld=true;
    public float fFld=2.420F;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2903323312630887223L);
        FuzzerUtils.init(Test.fArrFld, 1.685F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i6, long l2) {


        i6 = -11;
        i6 *= i6;
        long meth_res = i6 + l2;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i4, int i5, long l1) {

        float f=2.449F;
        int i7=-158, i8=6, i9=243, i10=44006, i11=67, i12=3442;
        boolean b=false;

        Test.dFld = Test.dFld;
        i4 += (int)(((i4 * f) - Test.byFld) % (l1 | 1));
        switch (((((int)(Test.instanceCount + Test.byFld)) >>> 1) % 1) + 42) {
        case 42:
            iMeth2(i5, -64598L);
        default:
            for (i7 = 13; i7 < 327; i7++) {
                l1 += Test.sFld;
                i4 += i7;
            }
        }
        i8 *= i7;
        i5 *= i7;
        i4 += i7;
        for (i9 = 6; i9 < 235; i9++) {
            if (b) break;
            for (i11 = 1; i11 < 7; i11++) {
                Test.dFld *= -47574L;
            }
            Test.instanceCount += i12;
        }
        long meth_res = i4 + i5 + l1 + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i3=24071, i13=-3217, i14=-6352, i16=0, i17=245, i18=-66, i19=-3755, iArr[]=new int[N];
        boolean b1=true;
        float f1=-1.567F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(dArr, 40.123811);

        Test.lArrFld[(i3 >>> 1) % N] += iMeth1(i3, i3, Test.instanceCount);
        for (i13 = 11; i13 < 325; ++i13) {
            if (b1) break;
            dArr[i13 - 1] += i14;
            for (i16 = 1; i16 < 5; i16 += 3) {
                dArr[i13] = i14;
                Test.lArrFld = Test.lArrFld;
            }
            Test.fArrFld[i13][i13 - 1] += f1;
            i14 = i17;
            Test.byFld <<= (byte)l;
            Test.dFld *= i13;
            if (b1) continue;
        }
        for (i18 = 3; i18 < 381; ++i18) {
            try {
                i3 = (-36776 / i3);
                i14 = (-18759 / iArr[i18 + 1]);
                i19 = (i18 % i18);
            } catch (ArithmeticException a_e) {}
            i14 = (int)60763L;
        }
        long meth_res = l + i3 + i13 + i14 + (b1 ? 1 : 0) + i16 + i17 + Float.floatToIntBits(f1) + i18 + i19 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12893, i1=-239, i2=8, i20=-200, i21=90, i22=-1, i23=-5, i24=-48328, i25=176, iArr1[]=new int[N];
        long l3=-35934L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 32);
        FuzzerUtils.init(bArr, true);

        i = (int)(i * ((i--) - (Test.instanceCount--)));
        for (i1 = 4; i1 < 147; ++i1) {
            switch (((i1 % 7) * 5) + 114) {
            case 135:
                iMeth(Test.instanceCount);
                break;
            case 124:
                for (i20 = 3; i20 < 175; i20++) {
                    iArr1[i1 - 1] += -10;
                    for (i22 = i1; i22 < 2; ++i22) {
                        i2 -= i21;
                        i2 += i22;
                    }
                    i21 = i21;
                    i21 = (int)Test.dFld;
                    l3 = 1;
                    do {
                        if (bFld) {
                            i >>>= 5066;
                        } else if (bFld) {
                            i23 ^= (int)Test.instanceCount;
                        } else {
                            Test.dFld += -38464;
                            Test.instanceCount += (l3 * l3);
                            Test.sFld = (short)Test.dFld;
                        }
                        Test.instanceCount = i;
                        fFld += i23;
                        fFld += (l3 - i1);
                        i21 -= i22;
                        Test.sFld %= (short)(i23 | 1);
                        i23 += (int)l3;
                        Test.lArrFld[(int)(l3 - 1)] += 10187L;
                    } while (++l3 < 2);
                    for (i24 = 1; 2 > i24; ++i24) {
                        iArrFld[i1 + 1][i24] -= 178;
                        Test.instanceCount *= l3;
                        i21 += i24;
                        Test.lArrFld[i20 + 1] = i21;
                    }
                }
                break;
            case 117:
                bArr = bArr;
            case 131:
                i21 = (int)777470572920664766L;
                break;
            case 122:
                iArr1 = FuzzerUtils.int1array(N, (int)136);
                break;
            case 133:
                i23 += (i1 | i1);
                break;
            case 134:
                Test.sFld -= (short)i;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
