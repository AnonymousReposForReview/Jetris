package tests.javafuzzer736;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:48:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=215L;
    public static volatile double dFld=-41.9706;
    public static byte byFld=109;
    public static float fFld=2.443F;
    public static boolean bFld=false;
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public short sArrFld[]=new short[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9) {

        short s=26170;
        int i10=0, i11=54, i12=-38016, i13=-11, i14=-65, iArr[]=new int[N];
        long l1=12L;
        float f1=-1.233F;

        FuzzerUtils.init(iArr, 8);

        s = (short)Test.instanceCount;
        for (i10 = 11; i10 < 281; i10++) {
            i9 *= (int)Test.instanceCount;
            for (i12 = 1; i12 < 6; i12++) {
                for (l1 = 2; l1 > 1; l1--) {
                    Test.dFld = l1;
                    i13 *= (int)1.116033;
                    iArr[i10 - 1] += (int)l1;
                    f1 += (float)Test.dFld;
                    try {
                        i9 = (i11 / i14);
                        iArr[i12 + 1] = (i10 / 726588679);
                        iArr[(i13 >>> 1) % N] = (iArr[(int)(l1 - 1)] % i14);
                    } catch (ArithmeticException a_e) {}
                    switch (((i12 % 3) * 5) + 69) {
                    case 70:
                        i11 = i10;
                        i11 += (int)(((l1 * f1) + f1) - l1);
                        Test.instanceCount = l1;
                        Test.byFld &= (byte)-13;
                        break;
                    case 75:
                        i9 = -249;
                        break;
                    case 77:
                        i13 -= -143;
                        break;
                    default:
                        i13 -= 1;
                    }
                }
            }
        }
        vMeth2_check_sum += i9 + s + i10 + i11 + i12 + i13 + l1 + i14 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f, long l, int i8) {

        int i15=151, i16=0, i17=-47344, i18=-31444, i19=-36351;
        float f2=-100.792F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -26221L);

        vMeth2(i8);
        i15 = 1;
        while (++i15 < 347) {
            for (f2 = 5; i15 < f2; f2 -= 3) {
                i17 = 1;
                while (++i17 < 1) {
                    i16 += i17;
                    i16 += (i17 + Test.instanceCount);
                    l = (long)Test.dFld;
                    i16 += (i17 * f);
                    i8 += i17;
                    l <<= i8;
                    Test.dFld = Test.instanceCount;
                    i16 -= (int)f2;
                }
                for (i18 = 1; i18 < 1; i18++) {
                    if (true) continue;
                }
                lArr[(int)(f2 - 1)] += i19;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l + i8 + i15 + Float.floatToIntBits(f2) + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i5=171, i6=-55, i7=11;
        long l2=-4979335564080097916L, lArr1[]=new long[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr1, 60550L);
        FuzzerUtils.init(bArr, true);

        for (i5 = 10; i5 < 168; i5 += 3) {
            i6 -= i6;
            i7 = 1;
            do {
                i6 += (i7 | Test.instanceCount);
                Test.instanceCount += (long)(--Test.dFld);
            } while (++i7 < 29);
            vMeth1(Test.fFld, l2, -7);
            i6 += i5;
            lArr1[i5] |= 5L;
            Test.bFld = Test.bFld;
            switch ((((i5 >>> 1) % 3) * 5) + 62) {
            case 72:
                Test.fFld += (((i5 * i7) + i7) - i5);
                break;
            case 65:
                lArr1[i5 - 1] -= i5;
                i6 = i5;
                bArr[i5][i5] = true;
                break;
            case 68:
                if (i7 != 0) {
                    vMeth_check_sum += i5 + i6 + i7 + l2 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                break;
            default:
                l2 = l2;
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + l2 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i1=-2, i2=12, i3=16352, i4=21061, i20=5, i21=-1, i22=-62681;

        for (i = 19; i < 368; ++i) {
            for (i2 = 4; i2 < 72; ++i2) {
                lArrFld = (lArrFld = (lArrFld = (lArrFld = lArrFld)));
                i3 += (i2 + i3);
                iArrFld[i][i] -= i1;
                Test.instanceCount -= ((-(Test.instanceCount & i4)) - Math.max(++i4, iArrFld[i + 1][i2 - 1]));
                i4 += i2;
            }
            vMeth();
            for (i20 = 3; i20 < 72; i20++) {
                i4 = i1;
                i22 = 1;
                while (++i22 < 2) {
                    iArrFld[i][i20] += i4;
                    if (Test.bFld) {
                        try {
                            i3 = (iArrFld[i22 + 1][i22 + 1] % iArrFld[(-179 >>> 1) % N][i20 + 1]);
                            i21 = (242 / i4);
                            i21 = (i3 % i4);
                        } catch (ArithmeticException a_e) {}
                        sArrFld[i + 1] |= (short)Test.instanceCount;
                        if (Test.bFld) {
                            i1 += (((i22 * Test.instanceCount) + i2) - i21);
                            i3 -= -19970;
                        } else {
                            i4 += (((i22 * Test.byFld) + i20) - i4);
                            i3 = i1;
                            i1 = i20;
                            iArrFld[i + 1][i22] += (int)Test.fFld;
                        }
                    } else if (Test.bFld) {
                        i1 += (i22 * i21);
                        Test.instanceCount -= 3;
                        if (Test.bFld) {
                            i21 = i;
                        } else if (Test.bFld) {
                            lArrFld[i22] = i1;
                            i1 *= -30513;
                        }
                        Test.dFld += Test.instanceCount;
                    } else if (Test.bFld) {
                        Test.byFld += (byte)i20;
                    } else {
                        iArrFld[i - 1][i + 1] <<= (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
