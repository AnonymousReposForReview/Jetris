package tests.javafuzzer3279;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:32:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8892531163691456557L;
    public static double dFld=49.67892;
    public int iFld=87;
    public int iFld1=44880;
    public int iArrFld[][]=new int[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-34676, i4=16939, i5=-44, i6=-13, i7=-198, i8=201, iArr[]=new int[N];
        short s=30308;
        float f=-121.939F;

        FuzzerUtils.init(iArr, -47136);

        Test.instanceCount -= Test.instanceCount;
        Test.instanceCount %= -14;
        for (i3 = 2; 315 > i3; ++i3) {
            for (i5 = 1; 5 > i5; ++i5) {
                s += (short)Test.dFld;
                i6 >>= i6;
                Test.dFld *= -21725;
                for (i7 = 1; i7 < 2; i7++) {
                    Test.dFld -= s;
                    iArr[i3 + 1] = -238;
                    i4 += (int)f;
                    Test.dFld += Test.instanceCount;
                    i4 -= (int)Test.dFld;
                }
            }
            i8 = s;
            i6 >>= (int)Test.instanceCount;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + s + i7 + i8 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(byte by, int i2) {


        vMeth1();
        vMeth_check_sum += by + i2;
    }

    public static void vSmallMeth(int i, long l, int i1) {

        byte by1=92;

        vMeth(by1, -213);
        vSmallMeth_check_sum += i + l + i1 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i9=180, i10=53252, i11=84, i12=-7, i13=-61307, i14=-13, i15=-28760, i16=-171, i17=-130;
        short s1=-22372;
        float f1=-2.57F, f2=2.787F, fArr[]=new float[N];
        byte by2=56;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -28362L);
        FuzzerUtils.init(fArr, -11.861F);

        for (int smallinvoc=0; smallinvoc<973; smallinvoc++) vSmallMeth(1, Test.instanceCount, iFld);
        iFld *= iFld;
        for (i9 = 305; i9 > 3; i9--) {
            i11 = 1;
            while (++i11 < 83) {
                s1 += (short)i11;
                lArr = lArr;
                i10 += (i11 + iFld1);
            }
            fArr[i9 - 1] -= f1;
        }
        for (i12 = 2; i12 < 214; i12++) {
            if (true) continue;
            for (f2 = i12; f2 < 118; ++f2) {
                switch ((int)((f2 % 2) + 89)) {
                case 89:
                    if (true) continue;
                    iFld1 = i15;
                    i15 >>= i11;
                    break;
                case 90:
                    i15 = iFld1;
                    by2 -= (byte)Test.instanceCount;
                    Test.dFld = iFld1;
                    for (i16 = 1; i16 < 1; i16++) {
                        if (b) {
                            i14 += (((i16 * i11) + i16) - i15);
                            fArr[i12] = i11;
                        } else {
                            i15 += (int)Test.instanceCount;
                            try {
                                i14 = (-43546 % iFld);
                                i17 = (i13 / i14);
                                iArrFld[(int)(f2 + 1)][(int)(f2 - 1)] = (-50 % i10);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount -= iFld;
                        }
                    }
                }
                i10 = iFld1;
                iArrFld[(int)(f2)][i12 - 1] = (int)f1;
            }
            i13 -= i16;
            iFld1 += i12;
            iFld <<= s1;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
