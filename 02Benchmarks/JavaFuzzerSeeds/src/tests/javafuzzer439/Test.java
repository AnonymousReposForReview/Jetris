package tests.javafuzzer439;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=426L;
    public static boolean bFld=false;
    public float fFld=-89.74F;
    public static volatile byte byFld=86;
    public long lFld=14L;
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.69);
        FuzzerUtils.init(Test.fArrFld, -127.390F);
        FuzzerUtils.init(Test.lArrFld, 274370379995919053L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -9);

        Test.bFld = Test.bFld;
        Test.instanceCount += i5;
        iArr[(i3 >>> 1) % N] = i4;
        vMeth2_check_sum += i3 + i4 + i5 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f) {

        int i6=-6216, i8=-3, i9=14, iArr1[]=new int[N];
        byte by=17, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-86);
        FuzzerUtils.init(iArr1, 37085);

        vMeth2(-32980, i6, -9);
        byArr[(-114 >>> 1) % N] += (byte)-12764;
        if (Test.bFld) {
            for (int i7 : iArr1) {
                i6 = i7;
                i6 |= (int)Test.instanceCount;
                i7 = i6;
                f = by;
                i6 >>= 104;
                i8 = 1;
                while (++i8 < 4) {
                    i9 = 1;
                    while (++i9 < 1) {
                        i7 -= (int)-1.99F;
                        i7 = (int)Test.instanceCount;
                        i7 += i6;
                        iArr1[(i7 >>> 1) % N] += -48999;
                    }
                }
            }
            vMeth1_check_sum += Float.floatToIntBits(f) + i6 + by + i8 + i9 + FuzzerUtils.checkSum(byArr) +
                FuzzerUtils.checkSum(iArr1);
            return;
        } else {
            i6 = 20400;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i6 + by + i8 + i9 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        float f1=-10.15F;
        int i10=54856, i11=-35068, i12=0, i13=-119, i14=-64851, i15=-41378, iArr2[]=new int[N];
        double d=53.67180;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -2);
        FuzzerUtils.init(lArr, 5L);

        vMeth1(f1);
        for (i10 = 8; i10 < 332; i10++) {
            Test.dArrFld[i10 - 1] = Test.instanceCount;
        }
        iArr2[(i10 >>> 1) % N] >>= 60491;
        Test.instanceCount ^= -195;
        Test.fArrFld[(21 >>> 1) % N] = i10;
        for (i12 = 6; i12 < 345; ++i12) {
            f1 += (float)d;
            Test.instanceCount = Test.instanceCount;
            iArr2[i12] = 102;
            for (i14 = i12; i14 < 5; i14++) {
                d += i15;
            }
            i13 = i15;
        }
        lArr[(i14 >>> 1) % N] += i14;
        iArr2[(i10 >>> 1) % N] -= (int)Test.instanceCount;
        vMeth_check_sum += Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        short s=-9031;
        int i=9, i1=0, i2=194, i16=-33, i17=-27412, i18=-159, i19=-159, i20=4, iArr3[]=new int[N];
        double d1=-60.102496;

        FuzzerUtils.init(iArr3, 13);

        s = (short)Math.abs((int)((s + Test.instanceCount) * (i % (i | 1))));
        for (i1 = 2; i1 < 345; i1++) {
            vMeth();
            i |= -157;
            for (i16 = i1; 73 > i16; i16++) {
                for (i18 = 1; i18 < 1; ++i18) {
                    Test.instanceCount += (-2 + (i18 * i18));
                    i19 = (int)2.207F;
                    i += (int)-14L;
                    d1 -= 13;
                    Test.lArrFld[i16] <<= i2;
                    s += (short)fFld;
                    i17 <<= i18;
                    s += (short)i16;
                }
                i17 += i;
                i17 += i16;
                i -= i17;
                i20 = 1;
                while (++i20 < 1) {
                    i2 += i20;
                    switch ((i1 % 7) + 69) {
                    case 69:
                        if (Test.bFld) break;
                        i19 -= (int)Test.instanceCount;
                        try {
                            i17 = (i2 / i);
                            i19 = (i18 % i18);
                            i19 = (i19 / i19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 70:
                        switch (((i2 >>> 1) % 9) + 37) {
                        case 37:
                            fFld += i;
                            Test.byFld -= (byte)43;
                            iArr3[i1 + 1] >>= i20;
                            break;
                        case 38:
                            s = (short)Test.instanceCount;
                            fFld = lFld;
                            lFld += (i20 ^ i1);
                            break;
                        case 39:
                            s ^= (short)-11L;
                            break;
                        case 40:
                            d1 -= lFld;
                            break;
                        case 41:
                            s -= (short)Test.instanceCount;
                            break;
                        case 42:
                            if (true) break;
                        case 43:
                            Test.lArrFld[i1 + 1] -= 0;
                        case 44:
                            bArrFld[i1] = Test.bFld;
                            break;
                        case 45:
                            i = -7;
                            break;
                        default:
                            i19 = (int)Test.instanceCount;
                        }
                        break;
                    case 71:
                        Test.instanceCount -= lFld;
                        break;
                    case 72:
                        i19 = Test.byFld;
                    case 73:
                        Test.dArrFld[i1 + 1] *= i;
                        break;
                    case 74:
                        lFld += i20;
                    case 75:
                        iArr3[i16] = (int)fFld;
                        break;
                    default:
                        i19 += i2;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
