package tests.javafuzzer2182;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:47:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static volatile int iFld=-1;
    public static short sFld=26953;
    public static volatile float fFld=62.847F;
    public static byte byFld=111;
    public int iFld1=63343;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -242L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s) {

        int i5=119, i6=-171, i7=-51, i8=-4, i9=-113;
        boolean b=false;
        double d=64.45627;
        byte by1=-30;

        for (i5 = 18; i5 < 372; i5++) {
            if (b) continue;
            for (i7 = i5; i7 < 5; i7++) {
                i9 = 1;
                do {
                    d = Test.instanceCount;
                    Test.iFld += (int)0L;
                    if (false) {
                        i8 *= (int)2L;
                    } else if (b) {
                        i8 *= by1;
                    } else if (b) {
                        i6 -= (int)65.103395;
                        Test.iFld += i7;
                    } else {
                        Test.iFld *= i6;
                        Test.instanceCount = i8;
                    }
                    Test.iFld >>>= (int)Test.instanceCount;
                    d = 0.9467;
                } while (++i9 < 1);
            }
        }
        vMeth1_check_sum += s + i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + Double.doubleToLongBits(d) + by1;
    }

    public static void vMeth(byte by, float f1, int i3) {

        int i4=-49819, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 218);

        iArr[(i3 >>> 1) % N] = (iArr[(i4 >>> 1) % N] = iArr[(i4 >>> 1) % N]);
        i4 *= (i3 >>> (iArr[(i4 >>> 1) % N][(194 >>> 1) % N] + by));
        Test.instanceCount ^= (i3++);
        vMeth1(Test.sFld);
        vMeth_check_sum += by + Float.floatToIntBits(f1) + i3 + i4 + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(int i, long l) {

        int i1=6, i2=-26, i10=19, iArr1[]=new int[N];
        byte by2=19;
        double d1=1.105912;

        FuzzerUtils.init(iArr1, 44);

        for (i1 = 7; i1 < 311; ++i1) {
            vMeth(by2, Test.fFld, Test.iFld);
            i2 += (i1 * i1);
            i2 += Test.iFld;
            iArrFld[i1 - 1] *= i;
            d1 *= i2;
            fArrFld[i1 - 1] -= i1;
            Test.iFld *= i;
            iArr1[i1] = i10;
            d1 = i10;
        }
        by2 = (byte)Test.iFld;
        Test.lArrFld[(i1 >>> 1) % N] += (long)-1.650F;
        long meth_res = i + l + i1 + i2 + by2 + Double.doubleToLongBits(d1) + i10 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=22.612F;
        int i11=7, i12=-162, i13=-18043, i14=-62527, i15=-5, i16=-7;
        double d2=-2.4394;
        boolean b1=false;
        long l1=23L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-30657);

        Test.instanceCount += (long)(((-2 * (f--)) + (Test.iFld - f)) + iMeth(Test.iFld, Test.instanceCount));
        sArr = sArr;
        for (i11 = 1; 153 > i11; i11++) {
            for (d2 = 10; 165 > d2; d2++) {
                if (true) {
                    Test.lArrFld[(int)(d2)] = Test.byFld;
                } else {
                    for (i14 = 1; i14 < 2; ++i14) {
                        iArrFld[(int)(d2)] += (int)-2.268F;
                        i15 = i13;
                        Test.sFld = (short)iFld1;
                        b1 = b1;
                        Test.lArrFld[i11 - 1] = iFld1;
                        i13 += i11;
                        Test.sFld *= (short)i15;
                        Test.lArrFld[i14 + 1] = (long)f;
                    }
                    Test.iFld = (int)l1;
                }
                l1 = Test.iFld;
                i13 -= i12;
                if (false) break;
                Test.fFld = Test.byFld;
                Test.lArrFld[i11 + 1] *= l1;
            }
            i16 = 1;
            do {
                b1 = true;
            } while (++i16 < 165);
            iArrFld[i11 + 1] = (int)Test.instanceCount;
            iArrFld[i11 + 1] = -188;
            Test.fFld += (92 + (i11 * i11));
            i15 -= Test.byFld;
            Test.instanceCount = 0;
        }
        b1 = b1;
        l1 = Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
