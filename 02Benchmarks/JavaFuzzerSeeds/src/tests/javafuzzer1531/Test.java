package tests.javafuzzer1531;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:10:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-209L;
    public volatile float fFld=-2.242F;
    public static float fFld1=-13.795F;
    public volatile byte byFld=117;
    public float fArrFld[]=new float[N];
    public volatile short sArrFld[]=new short[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i8=-187, i9=-63325, i10=-97, i11=-9954, i12=50655, i13=-11, i14=54504, i15=-52133, i16=55363, iArr1[]=new
            int[N];
        short s=25908;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 142);
        FuzzerUtils.init(fArr, 35.149F);

        for (i8 = 4; i8 < 188; ++i8) {
            i10 = 1;
            do {
                float f1=0.585F;
                f1 += i10;
            } while (++i10 < 9);
            for (i11 = i8; i11 < 9; ++i11) {
                try {
                    i12 = (i13 / i12);
                    iArr1[i11 + 1] = (i8 % i13);
                    i9 = (-54205 / i9);
                } catch (ArithmeticException a_e) {}
                i12 <<= i12;
                Test.fFld1 += 127;
                i9 = 5;
                s = (short)i10;
            }
            Test.instanceCount = i11;
            i14 = 1;
            do {
                switch (((-187 >>> 1) % 2) + 23) {
                case 23:
                    for (i15 = 1; 1 > i15; i15++) {
                        i16 = i12;
                        i12 = i11;
                    }
                case 24:
                    fArr[i8 - 1] = i10;
                }
            } while (++i14 < 9);
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + s + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth1(int i3, double d1, float f) {

        int i4=2, i5=-56975, i6=4, i7=-60482, i17=45, i18=-8, iArr[]=new int[N];
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -212L);
        FuzzerUtils.init(dArr, -53.109403);
        FuzzerUtils.init(iArr, 8227);

        for (i4 = 359; i4 > 19; i4 -= 2) {
            Test.instanceCount *= (((Test.instanceCount - Test.instanceCount) + lArr1[i4]) - ((Test.instanceCount *
                Test.instanceCount) / ((i4 - i3) | 1)));
            Test.instanceCount += (i4 ^ i3);
            dArr[i4 - 1] = iArr[i4 - 1];
        }
        for (i6 = 8; i6 < 146; ++i6) {
            d1 *= Math.abs(dMeth());
            i7 = i7;
            fArrFld = fArrFld;
        }
        d1 *= i5;
        fArrFld[(i6 >>> 1) % N] = i4;
        byFld += (byte)i6;
        for (i17 = 6; i17 < 134; ++i17) {
            i7 >>>= (int)-14926L;
            lArr1[i17 - 1] %= (i18 | 1);
            i7 |= i7;
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i17 + i18
            + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(double d, boolean b) {

        int i1=-10, i2=-70, i19=-2, i20=2;
        short s1=6038;
        float f2=68.341F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 1030170285L);

        for (i1 = 10; i1 < 179; i1++) {
            vMeth1(i2, d, 0.4F);
            for (i19 = i1; i19 < 9; i19++) {
                i2 += (((i19 * i20) + i19) - byFld);
                fArrFld[i1] -= s1;
                switch ((i19 % 4) + 108) {
                case 108:
                    i2 += (((i19 * byFld) + i1) - i19);
                case 109:
                    i20 = i1;
                    f2 = 1;
                    do {
                        i20 -= i19;
                        i2 += (int)(((f2 * i1) + i19) - i20);
                        fArrFld = fArrFld;
                        i20 += (int)(((f2 * i1) + i1) - i1);
                    } while (--f2 > 0);
                    break;
                case 110:
                    lArr2[i19 + 1] -= Test.instanceCount;
                    break;
                case 111:
                    i20 *= i19;
                    break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + (b ? 1 : 0) + i1 + i2 + i19 + i20 + s1 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=23537, i21=15729, i22=-11, i23=12, i24=168, i25=-41276, i26=32, i27=0, iArr2[]=new int[N];
        boolean b1=false;
        short s2=-5060;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(iArr2, 13);

        Test.instanceCount = (long)(((lArr[(41536 >>> 1) % N][(i >>> 1) % N]++) - (fFld * -13L)) - (i--));
        vMeth(1.76311, b1);
        byFld += (byte)i;
        i21 = 1;
        while (++i21 < 253) {
            for (i22 = 6; i22 < 99; ++i22) {
                i23 *= (int)Test.instanceCount;
                i <<= i;
                i >>= (int)Test.instanceCount;
                fArrFld = fArrFld;
                i23 = (int)Test.instanceCount;
                switch (((i >>> 1) % 9) + 114) {
                case 114:
                    i <<= (int)-5L;
                    Test.instanceCount += (i22 * i22);
                    break;
                case 115:
                    i23 >>= i22;
                    if (b1) {
                        for (i24 = 2; i24 > 1; i24--) {
                            i23 = (int)Test.instanceCount;
                            fFld += 58916L;
                            Test.fFld1 += i24;
                            Test.instanceCount += i22;
                            iArr2[i22 + 1] += i22;
                        }
                        i &= (int)-7294989924598593761L;
                        switch ((i21 % 1) + 113) {
                        case 113:
                            for (i26 = 1; i26 < 2; i26++) {
                                i25 *= (int)Test.instanceCount;
                                iArr2 = FuzzerUtils.int1array(N, (int)-62904);
                            }
                            i25 += i24;
                            break;
                        default:
                            i += (i22 ^ byFld);
                            i *= i;
                        }
                        iArr2[i21] = i24;
                    } else {
                        i -= i23;
                    }
                    break;
                case 116:
                    Test.fFld1 *= s2;
                    break;
                case 117:
                    iArr2[i22] = i26;
                    break;
                case 118:
                    i27 += (int)577816555L;
                case 119:
                    iArr2[i22 - 1] &= i25;
                    break;
                case 120:
                    i25 += 3445;
                    break;
                case 121:
                    i23 = i27;
                case 122:
                    b1 = b1;
                    break;
                default:
                    sArrFld[i21] = (short)Test.instanceCount;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
