package tests.javafuzzer3343;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:22:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public short sFld=-27313;
    public static volatile int iFld=61120;
    public static byte byFld=13;
    public static float fFld=0.202F;
    public static short sFld1=-9157;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 47.284F);
        FuzzerUtils.init(Test.iArrFld, 29064);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        byte by=0;
        int i5=205, i6=-4837, i8=-22, i9=112, iArr[]=new int[N];
        short s=2334;
        float f=-67.444F;

        FuzzerUtils.init(iArr, -248);

        Test.iFld -= -1;
        Test.instanceCount += Test.iFld;
        by <<= (byte)Test.iFld;
        Test.iFld = Test.iFld;
        for (i5 = 320; i5 > 20; --i5) {
            Test.instanceCount *= Test.iFld;
            i6 -= Test.iFld;
            s *= (short)f;
            Test.iFld = 10;
            i6 = by;
            f += i6;
            i6 = (int)Test.instanceCount;
            for (i8 = i5; i8 < 6; ++i8) {
                f *= i9;
                Test.iFld += (int)f;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + by + i5 + i6 + s + Float.floatToIntBits(f) + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i3=168, i4=-192, i10=201, i11=-56519, iArr1[]=new int[N], iArr2[]=new int[N];
        double d1=0.122272;
        float f1=-103.421F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 23700);
        FuzzerUtils.init(iArr2, 16374);
        FuzzerUtils.init(sArr, (short)32236);

        i3 = 1;
        while (++i3 < 318) {
            i4 = 1;
            do {
                vMeth1(d1);
                iArr1[i4] = (int)Test.instanceCount;
                try {
                    Test.iFld = (-1750 % iArr1[i3]);
                    iArr1[i4 - 1] = (Test.iFld / 746947248);
                    iArr1[i4 + 1] = (iArr2[i4] / -870962337);
                } catch (ArithmeticException a_e) {}
                for (i10 = 1; i10 < 1; ++i10) {
                    short s1=-1088;
                    f1 = f1;
                    iArr2[i10] += i4;
                    Test.iFld = Test.byFld;
                    Test.iFld >>>= i4;
                    if (i4 != 0) {
                    }
                    if (i11 != 0) {
                    }
                    Test.instanceCount = Test.instanceCount;
                    s1 = (short)Test.iFld;
                    sArr[i3] -= (short)Test.iFld;
                }
            } while (++i4 < 5);
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, int i2) {

        int i12=-66, i13=-106, i14=0, i15=-10, i16=-26577, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, 14);

        i2 *= (int)(iMeth() * 111.3455);
        i12 = 1;
        while (++i12 < 201) {
            for (i13 = 1; 8 > i13; i13 += 3) {
                for (i15 = 1; i15 < 4; i15++) {
                    Test.iFld += (i15 * i15);
                    switch (((i13 % 10) * 5) + 127) {
                    case 160:
                        switch (((i15 % 1) * 5) + 32) {
                        case 36:
                            Test.fFld += i15;
                            i2 = i13;
                            Test.iFld += i15;
                            Test.instanceCount += (long)-2.60809;
                            break;
                        default:
                            i2 &= i12;
                            i14 -= (int)Test.instanceCount;
                            Test.instanceCount += i15;
                            if (i12 != 0) {
                                vMeth_check_sum += (b ? 1 : 0) + i2 + i12 + i13 + i14 + i15 + i16 +
                                    FuzzerUtils.checkSum(iArr3);
                                return;
                            }
                        }
                        break;
                    case 156:
                        i2 += (int)(-39.969F + (i15 * i15));
                        break;
                    case 174:
                        i2 >>>= i15;
                        break;
                    case 151:
                        iArr3[i15] = 117;
                        break;
                    case 137:
                        Test.iFld -= i14;
                        break;
                    case 158:
                        Test.fArrFld[i12 + 1] += Test.iFld;
                        break;
                    case 147:
                        Test.iFld = Test.sFld1;
                        break;
                    case 143:
                        i14 += (((i15 * i15) + i14) - i13);
                        break;
                    case 170:
                        Test.instanceCount *= i16;
                        break;
                    case 136:
                        Test.instanceCount -= 28470;
                    default:
                        Test.instanceCount &= 24177;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i2 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=111, i1=45610;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 10L);

        for (i = 6; 309 > i; ++i) {
            sFld *= (short)-54;
            vMeth(b1, Test.iFld);
            Test.iArrFld[i + 1] -= i1;
            Test.iFld *= i;
            lArr[i + 1] -= Test.iFld;
        }
        i1 -= i1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
