package tests.javafuzzer1846;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:25:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-140L;
    public static int iFld=-3366;
    public static byte byFld=31;
    public static volatile long lFld=3656532770L;
    public static double dFld=-104.17391;
    public static long lArrFld[][]=new long[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 125L);
        FuzzerUtils.init(Test.dArrFld, 2.76133);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        double d2=0.24892, d3=0.94727;
        float f1=-2.562F;
        int i9=-9751, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -65201);

        iArr1[(Test.iFld >>> 1) % N] = (int)d2;
        d3 = 1;
        while (++d3 < 321) {
            d2 -= f1;
            Test.iFld *= Test.iFld;
            iArr1[(int)(d3)] = (int)f1;
            if (false) {
                if (false) {
                    i9 = 1;
                    while (++i9 < 5) {
                        if (b) continue;
                        Test.iFld *= Test.iFld;
                        Test.iFld += i9;
                    }
                    f1 += (float)(d3 + f1);
                    Test.iFld -= (int)d2;
                    Test.byFld += (byte)(((d3 * Test.instanceCount) + Test.instanceCount) - Test.iFld);
                } else {
                    Test.lArrFld[(int)(d3 - 1)][(int)(d3 - 1)] += i9;
                }
                vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) +
                    Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                return;
            } else if (b) {
                Test.iFld += (int)d3;
            } else if (b) {
                b = b;
            } else {
                Test.iFld >>= i9;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + Float.floatToIntBits(f1) + i9 +
            (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(float f, byte by) {

        int i3=0, i4=172, i5=10, i6=-195, i7=-29764, i8=-7, iArr[]=new int[N];
        double d=-27.12600, d1=-49.60146;

        FuzzerUtils.init(iArr, -245);

        for (i3 = 3; i3 < 276; ++i3) {
            for (i5 = 1; 6 > i5; i5++) {
                for (i7 = 1; i7 < 2; ++i7) {
                    d = (--Test.lArrFld[i3][i3 + 1]);
                    Test.instanceCount += (((i7 * by) + i8) - f);
                    switch (((i5 % 7) * 5) + 42) {
                    case 70:
                        f = (float)(((i3 + d1) * (--iArr[i3 + 1])) + Test.instanceCount);
                        i6 += (int)((Integer.reverseBytes(21824) + (d * 14)) * Test.dArrFld[i3 + 1]);
                        i8 += (int)((long)(Test.lArrFld[i3 + 1][i3 - 1] -= (long)(d1--)) ^ (Math.max(i3, 249) *
                            (Test.instanceCount | 104)));
                        break;
                    case 65:
                        vMeth1();
                        try {
                            i4 = (i6 / iArr[i7 + 1]);
                            Test.iFld = (i6 / -907069548);
                            i6 = (i3 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 66:
                        iArr[i3 + 1] = (int)Test.instanceCount;
                        i6 >>= i6;
                        Test.instanceCount += i3;
                        Test.lArrFld[i5 - 1][(i5 >>> 1) % N] -= Test.iFld;
                        break;
                    case 52:
                        if (true) break;
                        break;
                    case 51:
                    case 48:
                        i8 >>>= -63289;
                        break;
                    case 47:
                        Test.iFld += (((i7 * i3) + i8) - i8);
                    default:
                        i8 = (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i, int i1, int i2) {

        int i10=-10, i11=10, i12=41341, i13=-15039, i14=173, i15=-42, i16=-8, i17=114, iArr2[][]=new int[N][N];
        float f2=-124.995F;

        FuzzerUtils.init(iArr2, 4744);

        vMeth(120.823F, Test.byFld);
        for (i10 = 4; i10 < 316; i10++) {
            if (i10 != 0) {
            }
            for (i12 = 1; i12 < 5; i12++) {
                Test.lFld += (((i12 * i) + i10) - i10);
                iArr2[i12 + 1][i10 + 1] += -148;
            }
            iArr2[i10 + 1][i10 + 1] *= i1;
            for (i14 = 1; i14 < 5; i14++) {
                Test.lFld += (-1304408699L + (i14 * i14));
                i11 += (int)(0.724F + (i14 * i14));
                Test.dFld -= Test.iFld;
                i2 -= (int)Test.lFld;
                for (i16 = 2; i16 > 1; --i16) {
                    i17 += (((i16 * Test.byFld) + i) - f2);
                    iArr2[i16 - 1][i14] += i14;
                }
            }
        }
        long meth_res = i + i1 + i2 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=2783881504L;
        int i18=-8, i19=38942, i20=202, iArr3[]=new int[N];
        float f3=-30.715F;
        short s=22098;
        boolean b1=true;

        FuzzerUtils.init(iArr3, 3678);

        l = 364;
        do {
            iMeth(Test.iFld, Test.iFld, Test.iFld);
            Test.iFld >>>= Test.iFld;
            Test.iFld += (int)Test.instanceCount;
            iArr3[(int)(l - 1)] = 71;
            Test.dArrFld[(int)(l)] -= 124.970F;
            i18 = 1;
            while (++i18 < 138) {
                f3 = Test.lFld;
                for (i19 = 1; i19 > 1; --i19) {
                    switch (((i18 % 2) * 5) + 45) {
                    case 55:
                        i20 += 123;
                    case 49:
                        f3 += 5.650F;
                        i20 = (int)l;
                        switch (((i20 >>> 1) % 1) + 124) {
                        case 124:
                            Test.iFld <<= i18;
                            s = (short)-3L;
                            switch ((((i18 >>> 1) % 6) * 5) + 24) {
                            case 38:
                                if (b1) break;
                                f3 = i18;
                                i20 += i19;
                                break;
                            case 40:
                                Test.byFld = (byte)-2;
                                i20 = Test.iFld;
                            case 44:
                                Test.iFld = Test.iFld;
                                break;
                            case 28:
                            case 33:
                                switch ((((6 >>> 1) % 2) * 5) + 54) {
                                case 64:
                                    switch (((i19 >>> 1) % 5) + 122) {
                                    case 122:
                                    case 123:
                                        if (b1) break;
                                        break;
                                    case 124:
                                    case 125:
                                        if (b1) {
                                            Test.iFld *= -4;
                                            Test.iFld -= Test.iFld;
                                            Test.instanceCount += (-57357 + (i19 * i19));
                                        } else {
                                            Test.lFld -= -31898L;
                                        }
                                    case 126:
                                        f3 = i19;
                                        break;
                                    default:
                                        s = (short)Test.lFld;
                                    }
                                case 57:
                                    iArr3 = FuzzerUtils.int1array(N, (int)194);
                                default:
                                    Test.lFld *= i20;
                                }
                            case 53:
                                iArr3[(int)(l)] %= (int)((long)(f3) | 1);
                            default:
                                iArr3 = iArr3;
                            }
                        }
                        break;
                    }
                }
            }
        } while ((l -= 2) > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
