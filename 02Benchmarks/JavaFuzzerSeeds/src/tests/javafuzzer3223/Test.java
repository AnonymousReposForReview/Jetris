package tests.javafuzzer3223;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:17:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4658425343097586715L;
    public static boolean bFld=false;
    public static double dFld=14.4347;
    public static short sFld=10534;
    public static int iFld=-165;
    public static float fFld=-116.477F;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4387428682920359314L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, long l, int i4) {

        int i5=8, i6=69, i7=-15462, i8=-30091, i9=-11, iArr[][]=new int[N][N];
        long l1=-6L;
        byte by=-13;

        FuzzerUtils.init(iArr, -7);

        Test.bFld = Test.bFld;
        for (i5 = 11; i5 < 241; i5++) {
            for (l1 = 7; i5 < l1; l1 -= 3) {
                i7 = -42786;
                iArr[i5 - 1][i5 - 1] *= i7;
                i6 += (int)l1;
                by -= (byte)i6;
                try {
                    iArr[(int)(l1)][(int)(l1 - 1)] = (-56843 % i8);
                    iArr[(i6 >>> 1) % N][i5 + 1] = (i8 % i5);
                    i7 = (-1371639287 % i6);
                } catch (ArithmeticException a_e) {}
                if (true) break;
                d -= i4;
            }
            i9 = 7;
            do {
                i6 = i9;
                iArr[i5 - 1][i9 + 1] += -18831;
                i6 = i7;
                i8 = i7;
            } while ((i9 -= 3) > 0);
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + l + i4 + i5 + i6 + l1 + i7 + by + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i1, int i2) {

        float f=93.718F, f1=1.311F;
        int i3=-12, iArr1[]=new int[N];
        double d1=40.48521;
        short s=-7893;

        FuzzerUtils.init(iArr1, 22121);

        for (f = 230; 7 < f; f -= 3) {
            vMeth2(d1, Test.instanceCount, i1);
            i3 *= -15;
            iArr1[(int)(f)] = (int)f;
        }
        f1 = 1;
        do {
            i2 -= (int)Test.instanceCount;
            d1 += Test.instanceCount;
            Test.instanceCount += i3;
            i2 -= -121;
            d1 = i2;
            i1 = (int)Test.instanceCount;
            i1 += (int)(f1 + i3);
            i2 |= s;
            iArr1[(int)(f1)] = i2;
        } while (++f1 < 124);
        Test.instanceCount += Test.instanceCount;
        vMeth1_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + s + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i) {

        int i10=1, i11=40568, i12=4, i13=6999, i14=-3, i15=5, i16=-57, i17=-12;

        vMeth1(i, i);
        i /= (int)(Test.instanceCount | 1);
        Test.dFld -= Test.sFld;
        i -= i;
        i += i;
        for (i10 = 1; i10 < 173; i10 += 3) {
            for (i12 = i10; i12 < 27; i12++) {
                for (i14 = 1; 1 > i14; ++i14) {
                    i15 = i13;
                    i11 = (int)Test.instanceCount;
                }
                i15 += (i12 | i10);
                for (i16 = i10; i16 < 1; i16++) {
                    Test.sFld &= (short)Test.instanceCount;
                }
                i11 <<= (int)1L;
                i11 += (9 + (i12 * i12));
            }
        }
        vMeth_check_sum += i + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        byte by1=-40, by2=-62;
        int i18=-2, i19=-14, i20=-51720, i21=-58482, i22=-20397, i23=-54557, i24=-33154, i25=12;

        vMeth(Test.iFld);
        Test.dFld += Test.iFld;
        Test.instanceCount = by1;
        try {
            for (i18 = 15; i18 < 264; i18++) {
                i20 = 1;
                while (++i20 < 101) {
                    for (i21 = 1; 1 > i21; ++i21) {
                        i19 = i22;
                        Test.iFld += (-6 + (i21 * i21));
                        iArrFld[i20] >>= (int)Test.instanceCount;
                        Test.instanceCount >>= i22;
                        Test.fFld *= 61306;
                        by1 += (byte)(i21 | Test.instanceCount);
                    }
                    Test.iFld += (i20 * i20);
                    i23 = 1;
                    while ((i23 += 2) < 1) {
                        i19 <<= (int)-3L;
                        Test.iFld /= (int)Test.fFld;
                        Test.iFld ^= i20;
                        try {
                            iArrFld[i20] = (i23 % -104);
                            i22 = (219 % i21);
                            i22 = (i22 % i19);
                        } catch (ArithmeticException a_e) {}
                        iArrFld[i18 - 1] += i22;
                        i19 = i23;
                        switch ((i20 % 2) + 42) {
                        case 42:
                        case 43:
                            Test.lArrFld[i20 + 1] = (long)Test.fFld;
                            i19 = i21;
                            i19 -= (int)Test.instanceCount;
                            break;
                        }
                    }
                    Test.dFld -= i20;
                    for (i24 = 1; i24 < 1; i24++) {
                        Test.instanceCount >>= -2132;
                        by2 = (byte)Test.instanceCount;
                        i22 = -151;
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
