package tests.javafuzzer2185;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:48:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8198L;
    public static byte byFld=-74;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8) {

        int i9=-9, i10=168, i11=31886, i12=66, i13=10, iArr1[]=new int[N];
        boolean b=true;
        float f3=2.628F;
        double d=0.61520;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)115);
        FuzzerUtils.init(iArr1, -47007);

        i8 = (int)Test.instanceCount;
        i9 = 1;
        do {
            i8 += (i9 * i9);
            i8 = (int)Test.instanceCount;
            if (b) continue;
            i8 -= i9;
            for (i10 = 1; 5 > i10; i10++) {
                f3 = i10;
                for (i12 = i9; 2 > i12; ++i12) {
                    byArr[i9] -= (byte)i11;
                    i13 += (int)d;
                    Test.instanceCount = Test.instanceCount;
                    b = b;
                    i11 = (int)Test.instanceCount;
                }
                iArr1[i10 - 1] = i10;
            }
        } while (++i9 < 357);
        vMeth_check_sum += i8 + i9 + (b ? 1 : 0) + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l1) {

        int i5=8, i6=-57929, i7=185, i14=-39, i15=2694;
        float f4=-1.407F;
        boolean b1=true;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 2.28002);

        for (i5 = 4; 385 > i5; ++i5) {
            switch (((i5 % 2) * 5) + 33) {
            case 37:
                i7 = 1;
                while (++i7 < 4) {
                    vMeth(i7);
                    i6 *= i5;
                    for (i14 = 1; i14 < 1; i14++) {
                        i15 += (i14 * l1);
                        i6 += i6;
                        dArr1[i5 + 1] += Test.byFld;
                        i6 >>= i14;
                    }
                    Test.byFld = (byte)i5;
                    l1 += (((i7 * i5) + f4) - l1);
                    i15 += (((i7 * i14) + i5) - i7);
                    i15 = 29796;
                    l1 += 44;
                }
                break;
            case 34:
                if (b1) break;
                break;
            }
        }
        long meth_res = l1 + i5 + i6 + i7 + i14 + i15 + Float.floatToIntBits(f4) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i4, float f2, long l) {


        Test.instanceCount *= (long)(((i4 - i4) << i4) + ((i4 + 13) + f2));
        iMeth(Test.instanceCount);
        vSmallMeth_check_sum += i4 + Float.floatToIntBits(f2) + l;
    }

    public void mainTest(String[] strArr1) {

        int i=-6048, i1=-4, i2=9, i3=-184, i16=-34045, i17=-4941, i18=14, i19=-64542, i20=-149, iArr[]=new int[N];
        float f=54.11F, f1=2.862F;
        short s=2702, sArr[]=new short[N];
        double d1=-1.103532, dArr[]=new double[N];
        long lArr[]=new long[N];
        byte byArr1[][]=new byte[N][N];

        FuzzerUtils.init(iArr, 5332);
        FuzzerUtils.init(lArr, 3704328016L);
        FuzzerUtils.init(dArr, -2.47988);
        FuzzerUtils.init(byArr1, (byte)40);
        FuzzerUtils.init(sArr, (short)5472);

        for (i = 12; i < 293; ++i) {
            i1 ^= (int)(Test.instanceCount - (--f));
            i1 += (int)48.260F;
            for (i2 = 1; 89 > i2; i2++) {
                iArr[i] = (int)(-13L / ((long)(f) | 1));
                lArr = (lArr = (lArr = (lArr = FuzzerUtils.long1array(N, (long)-5L))));
                dArr[i - 1] *= (i3++);
                i3 = (((i2 * i3) ^ iArr[i2 + 1]) - (--i1));
                i1 += (((i2 * f1) + i3) - i2);
            }
        }
        for (int smallinvoc=0; smallinvoc<840; smallinvoc++) vSmallMeth(i1, 2.980F, Test.instanceCount);
        i3 >>= Test.byFld;
        i1 /= (int)(i1 | 1);
        byArr1[(i2 >>> 1) % N][(i2 >>> 1) % N] <<= (byte)i;
        s *= (short)i1;
        Test.instanceCount *= -193;
        for (d1 = 16; 327 > d1; d1++) {
            for (i17 = 4; i17 < 81; ++i17) {
                i18 = i3;
                sArr[(int)(d1 - 1)] &= s;
                Test.instanceCount = i1;
                i16 += i1;
                for (i19 = 1; i19 < 2; i19++) {
                    i1 += (int)d1;
                    i18 += i18;
                    Test.instanceCount = i18;
                    Test.instanceCount = (long)f1;
                }
                iArr[(int)(d1)] -= i2;
                i16 += (((i17 * i20) + Test.instanceCount) - i18);
                i16 += (int)Test.instanceCount;
                i18 += (-31 + (i17 * i17));
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
