package tests.javafuzzer3243;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:29:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-115L;
    public volatile double dFld=0.28644;
    public static float fFld=98.268F;
    public static byte byFld=102;
    public static volatile double dFld1=-1.62970;
    public short sFld=-25366;
    public int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(long l1) {

        int i11=-13, i12=-2, i13=2, i14=4, i15=-1, i16=-13030, iArr1[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 0.841F);
        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(lArr, 6063L);

        for (i11 = 265; i11 > 13; --i11) {
            switch (((i12 >>> 1) % 5) + 82) {
            case 82:
                for (i13 = 6; i13 > 1; i13--) {
                    fArr[i13] = Test.fFld;
                    iArr1[i11] &= i14;
                    i12 = (int)l1;
                }
                i14 = i11;
                lArr[i11][i11 + 1] %= (long)1.179F;
                break;
            case 83:
                for (i15 = 6; i15 > 1; i15--) {
                    l1 = Test.byFld;
                    i14 -= i16;
                    i16 += (i15 * i15);
                    i14 *= i15;
                    i14 += (int)(0.976F + (i15 * i15));
                    Test.dFld1 = i12;
                }
                break;
            case 84:
                i12 += (i11 | i16);
                break;
            case 85:
                iArr1 = iArr1;
                break;
            case 86:
                Test.fFld = l1;
                break;
            default:
                b = b;
            }
        }
        long meth_res = l1 + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth(int i9, int i10) {

        int i17=199, i18=0, i19=8, i20=53718, i21=9, i22=-208, iArr[]=new int[N];
        short s=21351;
        float f=0.991F;

        FuzzerUtils.init(iArr, 1);

        iArr[(i9 >>> 1) % N] = i9;
        fMeth1(Test.instanceCount);
        for (i17 = 21; i17 < 378; i17++) {
            iArr[i17 + 1] = s;
            Test.instanceCount = -3;
            i18 *= i10;
            for (i19 = i17; i19 < 5; i19++) {
                Test.byFld *= (byte)Test.instanceCount;
                Test.byFld += (byte)Test.fFld;
                Test.instanceCount += (i19 | i20);
                for (i21 = 1; i21 < 1; i21++) {
                    i18 += (int)f;
                }
            }
            Test.byFld &= (byte)i9;
            Test.instanceCount += i17;
            f = (float)Test.dFld1;
        }
        long meth_res = i9 + i10 + i17 + i18 + s + i19 + i20 + i21 + i22 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i2, long l) {

        int i3=156, i4=20132, i5=-30947, i6=-58532, i7=-38730, i8=-71;
        boolean b1=true;

        i2 = (int)(Integer.reverseBytes(i2 += i2) - (i2 = (int)(Test.instanceCount++)));
        for (i3 = 9; i3 < 290; i3++) {
            try {
                i2 = (715551269 / i2);
                i4 = (i2 % iArrFld[i3]);
                i2 = (50088 / i4);
            } catch (ArithmeticException a_e) {}
            for (i5 = 1; i5 < 6; i5 += 2) {
                switch (((i3 % 10) * 5) + 116) {
                case 153:
                    for (i7 = 1; 3 > i7; ++i7) {
                        Test.instanceCount += (long)dFld;
                        iArrFld[i7] = (int)((Test.fFld += (-Test.fFld)) * (dFld++));
                        i4 = (int)((7 * iArrFld[i3]) - fMeth(i6, 38469));
                        i6 *= sFld;
                        l += (-13 + (i7 * i7));
                        i8 = i6;
                    }
                    b1 = b1;
                    dArrFld[i3 - 1] += i5;
                    l = -19589;
                    break;
                case 123:
                    i8 *= i2;
                case 144:
                    if (b1) break;
                    break;
                case 154:
                    i8 -= i2;
                case 162:
                    i8 -= (int)Test.instanceCount;
                    break;
                case 128:
                    i4 += i6;
                    break;
                case 119:
                    i8 <<= (int)2L;
                case 161:
                    iArrFld[i3] <<= (int)-4057274030L;
                case 145:
                case 163:
                    i2 *= (int)-4063989326545211198L;
                    break;
                default:
                    l += (((i5 * Test.instanceCount) + Test.fFld) - i8);
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + i5 + i6 + i7 + i8 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-49973, i1=-3, i23=-234, i24=82, i25=7;
        boolean b2=false;
        double d=6.111973;
        long l2=-9L;

        for (i = 15; i < 244; i++) {
            if (b2) {
                vMeth(i1, Test.instanceCount);
                Test.byFld += (byte)(i * i);
                Test.instanceCount = -91;
                i1 = i;
            } else {
                for (i23 = 5; i23 < 110; i23++) {
                    iArrFld[(i1 >>> 1) % N] = (int)-25409688L;
                    lArrFld[i] = i23;
                    iArrFld[i23 + 1] = i24;
                }
            }
            sFld >>= (short)i1;
            i24 += (((i * i24) + i23) - i23);
            Test.instanceCount *= i;
            d = 1;
            do {
                dArrFld = dArrFld;
            } while (++d < 110);
            if (b2) {
                i1 += i;
                l2 -= (long)Test.fFld;
                i1 += (i * i);
                l2 >>= -64363;
            } else {
                i24 += i;
                sFld += (short)i;
            }
            i25 -= (int)Test.fFld;
            lArrFld[i - 1] <<= i24;
            i24 = (int)-4950L;
            Test.dFld1 -= i;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
