package tests.javafuzzer2333;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:38:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=194L;
    public static volatile boolean bFld=true;
    public static int iFld=40058;
    public static long lFld=-3274628006L;
    public byte byFld=-47;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-23);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=-11, i3=40374, i4=-76, i5=-38439, i6=4220, i7=2, i8=53, i9=16699;
        double d=79.105291;
        short s=-3703;
        float f1=-47.409F;

        for (i2 = 334; 17 < i2; i2--) {
            Test.instanceCount = i3;
        }
        Test.instanceCount *= (long)d;
        for (i4 = 11; i4 < 203; ++i4) {
            for (i6 = 8; 1 < i6; i6 -= 3) {
                for (i8 = 1; i8 < 4; i8++) {
                    i9 -= i5;
                    if (Test.bFld) {
                        Test.instanceCount += i4;
                    } else {
                        s -= (short)i3;
                    }
                    Test.bFld = Test.bFld;
                    i5 += i3;
                    d = f1;
                }
                d *= i5;
                Test.instanceCount += (-1L + (i6 * i6));
            }
        }
        vMeth2_check_sum += i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + s +
            Float.floatToIntBits(f1);
    }

    public static void vMeth1(long l) {

        int i10=142, i11=-9, i12=-24987, i13=2, i14=-21702, i15=27742, iArr[]=new int[N];
        float f2=-2.341F, f3=45.63F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(fArr, -106.22F);

        vMeth2();
        iArr[(Test.iFld >>> 1) % N] = -154;
        for (i10 = 15; 379 > i10; i10++) {
            i11 -= i10;
            f2 -= Test.instanceCount;
            fArr[i10] *= -215;
            for (i12 = 1; i12 < 5; ++i12) {
                Test.iFld -= i13;
                f2 -= i11;
                i13 += (i12 * f3);
                for (i14 = 1; i14 < 2; ++i14) {
                    i11 = i11;
                    iArr[i12] = Test.iFld;
                    Test.iFld += i14;
                }
                i13 += (((i12 * i11) + i11) - f2);
            }
        }
        vMeth1_check_sum += l + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + Float.floatToIntBits(f3) + i14 + i15
            + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(float f) {

        int i16=216, i17=93, i18=-6, i19=-124, i20=10165, iArr1[]=new int[N];
        float f4=65.161F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(lArr, 29850L);

        vMeth1(-14L);
        for (i16 = 8; 228 > i16; ++i16) {
            f4 = 1;
            do {
                Test.iFld = Test.iFld;
                Test.instanceCount += (long)(f4 + Test.iFld);
                for (i18 = (int)(f4); 1 > i18; ++i18) {
                    i19 = i17;
                    Test.iFld -= i19;
                    iArr1 = iArr1;
                }
                Test.instanceCount = Test.instanceCount;
                Test.bFld = true;
                f *= i19;
                i20 = 1;
                do {
                    f += (i20 + i16);
                    lArr[i16 - 1] = i20;
                } while (++i20 < 1);
            } while (++f4 < 7);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i16 + i17 + Float.floatToIntBits(f4) + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=-50776, i21=12, i22=226, i23=-4, i24=-25714, i25=7005, i26=9, iArr2[]=new int[N];
        float f5=0.604F, fArr1[]=new float[N];
        short s1=8540;
        double d1=2.124224;

        FuzzerUtils.init(iArr2, 30);
        FuzzerUtils.init(fArr1, -1.734F);

        for (i = 12; i < 317; i++) {
            vMeth(f5);
            i21 = 1;
            while (++i21 < 82) {
                try {
                    iArr2[i - 1] = (1575933524 % Test.iFld);
                    iArr2[i21 + 1] = (iArr2[i - 1] / 39538);
                    i1 = (iArr2[i] / iArr2[i]);
                } catch (ArithmeticException a_e) {}
                Test.bFld = false;
                Test.lFld = i21;
                Test.iFld += (i21 * i21);
                Test.iFld += (106 + (i21 * i21));
                Test.byArrFld[i21 + 1] += (byte)f5;
                fArr1[i21 - 1] -= s1;
                Test.iFld -= i;
                f5 = Test.iFld;
                s1 += byFld;
            }
            for (i22 = 2; i22 < 82; i22++) {
                Test.instanceCount += (((i22 * f5) + Test.instanceCount) - i23);
                i23 = i21;
                i1 = Test.iFld;
                d1 /= (i23 | 1);
                i23 -= (int)f5;
                byFld &= (byte)Test.iFld;
                Test.lFld <<= Test.lFld;
            }
            Test.lFld = (long)f5;
            i24 = 1;
            do {
                for (i25 = 1; i25 < 1; ++i25) {
                    byFld = (byte)i;
                    byFld = (byte)-6;
                    if (Test.bFld) {
                        Test.instanceCount = i22;
                        i1 = Test.iFld;
                        d1 += s1;
                    } else {
                        Test.iFld = i22;
                    }
                }
            } while (++i24 < 82);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
