package tests.javafuzzer283;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:09:42 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2409336663L;
    public static int iFld=46593;
    public static volatile byte byFld=-1;
    public static int iFld1=55;
    public volatile boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5682);
        FuzzerUtils.init(Test.fArrFld, -65.209F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, double d, double d1) {


        Test.iFld |= (int)Test.instanceCount;
        d += -3140268470L;
        Test.iArrFld[(i1 >>> 1) % N] *= i1;
        i1 |= i1;
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1);
    }

    public static int iMeth(int i) {

        double d2=-8.74129;
        int i2=-9, i3=246, i4=-64, i5=9412, i6=141, i7=-2;
        short s=5811;
        long l=48527L;
        byte by=25;
        float f1=0.785F;
        boolean b=true;

        vMeth(i, d2, d2);
        for (i2 = 20; i2 < 393; ++i2) {
            Test.fArrFld[i2] *= s;
            for (i4 = 1; i4 < 5; ++i4) {
                if (b) {
                    Test.instanceCount = (long)d2;
                    switch ((i4 % 1) + 6) {
                    case 6:
                        Test.iFld /= (int)(i3 | 1);
                        for (i6 = i2; i6 < 2; i6++) {
                            Test.iArrFld[i4 + 1] = (int)Test.instanceCount;
                            i3 = i6;
                            Test.instanceCount -= i6;
                            l += l;
                            i = s;
                        }
                        by >>= (byte)12;
                    default:
                        d2 = i4;
                    }
                } else if (b) {
                    Test.iArrFld[(59684 >>> 1) % N] *= (int)f1;
                } else {
                    s = (short)1;
                }
            }
        }
        long meth_res = i + Double.doubleToLongBits(d2) + i2 + i3 + s + i4 + i5 + i6 + i7 + l + by +
            Float.floatToIntBits(f1) + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        float f=-116.616F;
        double d3=-1.114436, d4=23.12699;
        int i8=-21051, i9=-15110, i10=-52973;
        short s1=-16054;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -115L);

        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        lArr[(Test.iFld >>> 1) % N][(-17905 >>> 1) % N] *= (long)(Test.fArrFld[(Test.iFld >>> 1) % N]--);
        f = ((Test.iFld = iMeth(Test.iFld)) - Test.iFld);
        for (d3 = 19; 355 > d3; ++d3) {
            d4 -= Test.instanceCount;
            switch ((int)(((d3 % 3) * 5) + 13)) {
            case 22:
                Test.iFld = (int)d4;
            case 24:
                Test.iArrFld[(i8 >>> 1) % N] = i8;
                i8 += (int)(((d3 * Test.iFld) + Test.iFld) - s1);
                break;
            case 18:
                for (i9 = 5; i9 > 1; i9 -= 2) {
                    Test.instanceCount += i9;
                    i10 += Test.iFld;
                    Test.iFld += i8;
                    s1 -= (short)0;
                    Test.iArrFld[(int)(d3 + 1)] += (int)Test.instanceCount;
                }
                break;
            default:
                lArr[(int)(d3 - 1)][(int)(d3 + 1)] = Test.byFld;
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i8 + Double.doubleToLongBits(d4) + s1 +
            i9 + i10 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=126, i12=-95, i13=7, i14=-75, i15=11469, i16=-206, i17=55870;
        float f2=-112.229F;
        short s2=22464, sArr[]=new short[N];
        double d5=2.106377;
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)-20094);
        FuzzerUtils.init(lArr1, 49082L);

        Test.instanceCount >>>= ((~lMeth()) << -9014045697308423642L);
        Test.iFld <<= Test.iFld;
        Test.iFld = Test.iFld;
        for (i11 = 7; i11 < 201; i11++) {
            i12 = (int)Test.instanceCount;
            for (i13 = 1; i13 < 129; ++i13) {
                if (bFld) {
                    Test.iArrFld[i11 - 1] += Test.iFld;
                    sArr[i11] += (short)i13;
                    i12 += (((i13 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    switch (((i11 % 8) * 5) + 73) {
                    case 86:
                        f2 -= 170;
                        break;
                    case 93:
                        Test.instanceCount = Test.instanceCount;
                        for (i15 = 2; i15 > 1; --i15) {
                            switch (((i11 % 9) * 5) + 12) {
                            case 24:
                                Test.iArrFld[i15] = Test.byFld;
                                Test.iFld >>>= i13;
                                break;
                            case 21:
                                i16 -= (int)Test.instanceCount;
                                i14 *= i15;
                                Test.iFld = i15;
                                i12 += i15;
                                break;
                            case 40:
                                switch ((i11 % 8) + 20) {
                                case 20:
                                    Test.iArrFld = Test.iArrFld;
                                    try {
                                        i14 = (-496045379 / i13);
                                        i16 = (Test.iFld / -218);
                                        i17 = (Test.iFld % i12);
                                    } catch (ArithmeticException a_e) {}
                                    switch (((i11 % 2) * 5) + 119) {
                                    case 121:
                                        s2 += (short)(((i15 * Test.iFld) + Test.iFld) - Test.instanceCount);
                                        Test.iFld1 -= (int)12L;
                                        break;
                                    case 123:
                                        Test.iFld1 += (int)Test.instanceCount;
                                        break;
                                    }
                                    break;
                                case 21:
                                    Test.instanceCount += Test.iFld1;
                                    Test.iFld <<= (int)Test.instanceCount;
                                    break;
                                case 22:
                                    Test.iFld += (((i15 * Test.instanceCount) + i14) - i15);
                                    break;
                                case 23:
                                    i16 = (int)Test.instanceCount;
                                    break;
                                case 24:
                                    if (true) break;
                                    break;
                                case 25:
                                    Test.iArrFld = FuzzerUtils.int1array(N, (int)14301);
                                case 26:
                                    i16 = (int)Test.instanceCount;
                                case 27:
                                    Test.iArrFld[i15] = i11;
                                    break;
                                }
                                break;
                            case 52:
                                Test.iFld1 += i11;
                                break;
                            case 22:
                                s2 -= (short)i13;
                                break;
                            case 33:
                                i12 = -63604;
                            case 50:
                            case 31:
                                lArr1[i11] = Test.iFld1;
                            case 37:
                                i16 = i16;
                                break;
                            }
                        }
                    case 75:
                        i12 <<= Test.iFld1;
                        break;
                    case 79:
                        d5 = i17;
                        break;
                    case 108:
                        f2 = Test.instanceCount;
                        break;
                    case 74:
                        f2 -= i15;
                        break;
                    case 88:
                        d5 = f2;
                        break;
                    case 94:
                        Test.byFld += (byte)(i13 | i16);
                        break;
                    }
                } else if (bFld) {
                    f2 = (float)d5;
                } else if (bFld) {
                    try {
                        i12 = (i17 / -532917350);
                        i16 = (i14 % 50601);
                        i17 = (i12 / i16);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
