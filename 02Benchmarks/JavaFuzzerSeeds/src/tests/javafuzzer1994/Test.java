package tests.javafuzzer1994;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:00:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2060391572014995459L;
    public static double dFld=-51.26283;
    public static volatile float fFld=0.649F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public volatile byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 26821);
        FuzzerUtils.init(Test.fArrFld, 105.758F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l) {

        int i10=101, i11=-14, i12=-6, i13=82, i14=15402, i15=6, iArr1[]=new int[N];
        short s2=14097;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 145);
        FuzzerUtils.init(lArr, -220L);

        l += i10;
        Test.instanceCount = -4866529078796356498L;
        iArr1[(i10 >>> 1) % N] <<= 116;
        s2 -= (short)Test.dFld;
        i11 = 1;
        do {
            for (i12 = 1; i12 < 5; ++i12) {
                Test.dFld = Test.fFld;
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount += i10;
                }
                i13 += (i12 * i12);
                i13 *= -4;
                lArr[i11 - 1] = l;
                s2 += (short)l;
                i13 |= i11;
                if (Test.bFld) continue;
            }
        } while (++i11 < 369);
        long meth_res = l + i10 + s2 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b) {

        int i8=161, i9=-23, i16=-253, i17=223, iArr[]=new int[N];
        double d=-101.122343, d1=0.105759;
        byte by=76, byArr[]=new byte[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)-12);
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(lArr1, 2334921634L);

        byArr[(-50308 >>> 1) % N] += (byte)i8;
        Test.instanceCount -= (long)(d++);
        i9 = 1;
        while (++i9 < 248) {
            iArr = (iArr = (iArr = (iArr = iArr)));
            i8 -= (int)-112L;
            Test.instanceCount &= (--by);
            i8 *= (--i8);
            i8 ^= Math.max(iMeth1(Test.instanceCount), i8);
            i8 = (int)Test.instanceCount;
            Test.fFld = i8;
            iArr[i9] = i8;
        }
        d1 = 1;
        while (++d1 < 227) {
            for (i16 = 7; i16 > 1; i16--) {
                Test.fFld += (((i16 * i8) + i8) - Test.fFld);
                lArr1[(int)(d1 - 1)][i16] = 9;
            }
        }
        long meth_res = (b ? 1 : 0) + i8 + Double.doubleToLongBits(d) + i9 + by + Double.doubleToLongBits(d1) + i16 +
            i17 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s1, int i4, float f) {

        int i5=-19033, i6=51485, i7=-32, i18=-2, i19=-31543;
        byte by1=-32;

        i5 = 1;
        do {
            for (i6 = i5; 9 > i6; ++i6) {
                Test.instanceCount = iMeth(Test.bFld);
                Test.instanceCount += (((i6 * i4) + i5) - i7);
                i4 += i6;
                i7 = i7;
                for (i18 = 1; i18 < 1; i18++) {
                    i4 = i18;
                    Test.iArrFld[i5] = s1;
                    i7 >>= (int)Test.instanceCount;
                    i4 = by1;
                    i7 += (i18 * i18);
                    Test.iArrFld[i18] <<= i18;
                    i4 <<= -182;
                    Test.instanceCount += i18;
                }
            }
        } while (++i5 < 175);
        vMeth_check_sum += s1 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i18 + i19 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i=-199, i1=5, i2=-13, i3=10, i20=46778, i21=-31380, i22=5932, i23=0, i24=32, i25=-50913;
        short s=210;
        byte by2=-46;

        for (i = 19; 396 > i; i++) {
            i2 = 67;
            do {
                s += (short)(-2992L + (i2 * i2));
                i3 = 1;
                while (++i3 < 1) {
                    short s3=31838;
                    vMeth(s3, i3, Test.fFld);
                    i20 = (int)Test.instanceCount;
                    i20 += (int)1.89953;
                }
                i21 = 1;
                do {
                    byArrFld[i2] += (byte)Test.instanceCount;
                } while (++i21 < 1);
                Test.instanceCount = i3;
                i1 <<= 14;
            } while (--i2 > 0);
            i20 += i21;
            try {
                i1 = (226 % Test.iArrFld[i]);
                Test.iArrFld[i] = (-29 % i);
                i1 = (-104 % i);
            } catch (ArithmeticException a_e) {}
            i20 -= (int)-1115638974L;
            by2 >>= (byte)12;
            if (Test.bFld) {
                by2 = (byte)Test.instanceCount;
                i1 = i;
            } else {
            }
            i1 = i3;
            switch (((i % 3) * 5) + 69) {
            case 77:
                try {
                    i1 = (i2 % Test.iArrFld[i + 1]);
                    i1 = (i % Test.iArrFld[i + 1]);
                    i20 = (-35528 % i20);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i + 1] = i2;
                i20 = -29734;
            case 75:
                for (i22 = i; 67 > i22; i22++) {
                    Test.iArrFld[i] ^= (int)2457761604L;
                    for (i24 = 1; i24 < 1; i24++) {
                        Test.dFld = Test.instanceCount;
                        i20 = -8;
                        Test.iArrFld = Test.iArrFld;
                        i25 -= i1;
                    }
                }
                break;
            case 80:
                Test.fArrFld[i + 1] = i2;
            default:
                i23 += i;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
