package tests.javafuzzer1296;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5310714716655222959L;
    public double dFld=18.106103;
    public static byte byFld=60;
    public static short sFld=-18505;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i6) {

        int i7=-246, i8=-192, i9=28172, i10=-42285, i11=80, i12=4;
        float f1=0.877F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 12.0F);

        Test.iArrFld[(i6 >>> 1) % N] += i6;
        for (i7 = 155; 4 < i7; i7--) {
            for (i9 = 1; i9 < 10; i9 += 3) {
                i10 += (-151 + (i9 * i9));
                f1 -= i10;
                for (i11 = 4; i11 > 1; --i11) {
                    double d1=59.71693;
                    i12 *= i8;
                    d1 -= d1;
                    i12 = i11;
                    fArr[i11 + 1] -= i12;
                    i8 = i11;
                    i6 += i11;
                    i12 -= i11;
                    Test.instanceCount += i11;
                }
                i6 >>= (int)Test.instanceCount;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static boolean bMeth(double d) {

        int i5=26, i13=-13761, i14=8, i15=-202;
        float f2=-1.923F;

        i5 += (int)lMeth1(i5);
        i13 = 1;
        while ((i13 += 2) < 352) {
            Test.instanceCount += (3758619371L + (i13 * i13));
            for (i14 = 1; i14 < 9; ++i14) {
                i15 -= (int)Test.instanceCount;
                Test.instanceCount += (11 + (i14 * i14));
                Test.instanceCount += (i14 | i14);
                Test.iArrFld[i13 + 1] <<= (int)Test.instanceCount;
                f2 -= i14;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i5 + i13 + i14 + i15 + Float.floatToIntBits(f2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth(int i) {

        int i1=243, i2=-10, i3=-4, i4=145, i16=66, i17=21, iArr[]=new int[N];
        float f=2.818F;
        boolean b=true, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -200L);
        FuzzerUtils.init(iArr, 54);
        FuzzerUtils.init(bArr, true);

        Test.byFld *= (byte)(i++);
        for (i1 = 17; i1 < 294; ++i1) {
            i2 -= (int)((-(lArr[i1] += i)) - f);
            for (i3 = i1; i3 < 6; ++i3) {
                double d2=2.36081;
                if (true) break;
                try {
                    i2 = (i1 % 107);
                    i2 = (i3 % i3);
                    iArr[i1] = (i4 % iArr[i1]);
                } catch (ArithmeticException a_e) {}
                lArr = (lArr = (lArr = lArr));
                if (bArr[i3 + 1]) continue;
                switch (((((iArr[i3 - 1]--) >>> 1) % 2) * 5) + 98) {
                case 108:
                    if (bMeth(d2) == b) break;
                    Test.iArrFld[i3 + 1] = i3;
                    break;
                case 106:
                    for (i16 = i3; i16 < 1; ++i16) {
                        i17 <<= 10;
                        Test.instanceCount += (((i16 * f) + Test.instanceCount) - i2);
                    }
                    i17 = i17;
                    break;
                default:
                    i4 -= Test.sFld;
                }
            }
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + (b ? 1 : 0) + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-223, i19=-36, i20=4, i21=193, i22=8, i23=2, i24=8, i25=-191, i26=-21500;
        float f3=0.24F;
        boolean b1=true, bArr1[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)17487);
        FuzzerUtils.init(bArr1, false);

        dFld = (lMeth(i18) * 21710);
        for (i19 = 7; i19 < 143; ++i19) {
            i20 = -13;
            i18 *= i20;
            i20 += (((i19 * f3) + Test.instanceCount) - i18);
            Test.instanceCount >>>= i20;
            Test.iArrFld = Test.iArrFld;
            i20 += (i19 - i18);
            i20 = i19;
            for (i21 = i19; i21 < 184; i21++) {
                i20 += i21;
                i18 += (i21 * Test.instanceCount);
                Test.instanceCount = (long)f3;
                i22 += (int)(-4098370959158067811L + (i21 * i21));
                Test.sFld *= (short)i18;
                for (i23 = 1; 1 > i23; i23++) {
                    i22 |= i24;
                    if (b1) break;
                    dFld = i23;
                    i24 <<= (int)-8928811050898189812L;
                    sArr[i23] = (short)i21;
                }
                i24 = Test.sFld;
                if (b1) continue;
                for (i25 = 1; i25 < 1; i25++) {
                    switch (((i21 % 10) * 5) + 123) {
                    case 152:
                        try {
                            i18 = (i19 % i21);
                            i20 = (i21 / 57549);
                            i22 = (i19 % -129);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = i20;
                        dFld -= f3;
                        break;
                    case 148:
                        i26 += -4;
                        break;
                    case 160:
                        Test.instanceCount = i23;
                        break;
                    case 163:
                        i20 = Test.byFld;
                        break;
                    case 166:
                        i18 += i24;
                        break;
                    case 153:
                        i22 += i23;
                        break;
                    case 165:
                        f3 += (i25 + i26);
                        break;
                    case 134:
                        Test.sFld += Test.byFld;
                        break;
                    case 130:
                        i20 += 155;
                    case 145:
                        bArr1[i19 - 1] = b1;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 bMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
