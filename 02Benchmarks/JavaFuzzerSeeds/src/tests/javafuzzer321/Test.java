package tests.javafuzzer321;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:49:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6009L;
    public static volatile float fFld=0.445F;
    public static byte byFld=23;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];
    public short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 83);
        FuzzerUtils.init(Test.lArrFld, -2084281980025979945L);
        FuzzerUtils.init(Test.byArrFld, (byte)89);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=4, i7=10, i8=-14, i9=-62, i10=61397, i11=9;

        for (i6 = 2; i6 < 277; ++i6) {
            for (i8 = 1; i8 < 6; i8++) {
                for (i10 = 1; 2 > i10; ++i10) {
                    i11 -= Test.byFld;
                    i7 += i10;
                    i9 += (((i10 * i8) + i8) - i9);
                    Test.instanceCount += i9;
                    switch (((i6 % 2) * 5) + 26) {
                    case 35:
                        i11 += (i10 * Test.instanceCount);
                        Test.iArrFld[i10] >>>= Test.byFld;
                        i9 = 8900;
                    case 29:
                        i11 *= (int)68.68544;
                    }
                    Test.fFld -= i7;
                    i11 += i10;
                    i9 -= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3, byte by) {

        int i4=-9, i5=-22333, i12=-152, i13=-14413, i14=6, i15=106;
        short s1=9757;

        by = (byte)i3;
        i3 = (i3--);
        for (i4 = 136; i4 > 4; i4--) {
            Test.fFld = iMeth();
            i5 += i4;
            for (i12 = 1; i12 < 12; i12++) {
                Test.iArrFld[i4 - 1] += i5;
                i3 += i13;
                Test.iArrFld[i4] |= i4;
                for (i14 = 1; i14 < 2; ++i14) {
                    s1 *= (short)Test.fFld;
                    Test.lArrFld[i12 + 1] = i13;
                    i13 -= i4;
                    try {
                        i13 = (192 % i4);
                        i5 = (56103 / i12);
                        i5 = (i5 / -460802995);
                    } catch (ArithmeticException a_e) {}
                    i5 *= i14;
                }
            }
        }
        vMeth1_check_sum += i3 + by + i4 + i5 + i12 + i13 + i14 + i15 + s1;
    }

    public static void vMeth() {

        int i=155, i1=-8, i2=0, i16=6;
        double d=100.2552;
        short s=18985;

        Test.instanceCount = i;
        for (i1 = 201; i1 > 1; i1 -= 2) {
            i += (int)(8790281273190933700L + (i1 * i1));
            switch (((((i - i2) >>> 1) % 5) * 5) + 77) {
            case 87:
                if (i1 != 0) {
                    vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + s + i16;
                    return;
                }
                break;
            case 90:
                Test.instanceCount |= i;
                i += (int)((d % (Test.iArrFld[i1 - 1] | 1)) * ((i = i) - (i2 -= s)));
                vMeth1(i2, (byte)(94));
                i2 = i;
            case 101:
                i += (34101 + (i1 * i1));
                i ^= i16;
                i = i16;
                Test.byArrFld[i1] *= (byte)-53529;
                break;
            case 98:
            case 91:
                i2 += (i1 + s);
                i = (int)Test.fFld;
            }
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + s + i16;
    }

    public void mainTest(String[] strArr1) {

        int i17=7, i18=-8, i19=-42388, i20=37397, i21=4062, i22=-7, i23=0, i24=54589;
        short s2=-8632;
        boolean b=false;
        double d1=-1.19127, dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 94.570F);
        FuzzerUtils.init(dArr, 0.102221);

        vMeth();
        fArr = fArr;
        for (i17 = 13; i17 < 299; ++i17) {
            i18 = (int)Test.instanceCount;
            i18 = i18;
            for (i19 = 2; 88 > i19; ++i19) {
                dArr[i19 - 1] = s2;
                if (false) continue;
                i18 += -114;
                for (i21 = 1; i21 < 2; i21++) {
                    i18 += (((i21 * i19) + Test.instanceCount) - i22);
                    i20 += i21;
                    sArrFld[i17 - 1][i21] += (short)-3912072293090807440L;
                    Test.byFld += (byte)Test.fFld;
                    Test.fFld = 34368;
                    i20 = (int)-87L;
                    fArr = fArr;
                    i20 %= (int)(i19 | 1);
                }
                for (i23 = i17; i23 < 2; i23++) {
                    i22 = i23;
                    b = true;
                    b = b;
                    i24 = (int)Test.instanceCount;
                    Test.instanceCount += (((i23 * i23) + i21) - i23);
                    i22 = (int)Test.instanceCount;
                    i22 = i18;
                    if (b) {
                        Test.fFld -= 5;
                        i20 += i17;
                        Test.lArrFld[i17] = Test.instanceCount;
                    } else {
                        d1 = i21;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
