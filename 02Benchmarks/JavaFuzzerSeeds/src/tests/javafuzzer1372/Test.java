package tests.javafuzzer1372;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:08:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=480531166486993609L;
    public int iFld=-180;
    public static byte byFld=76;
    public static float fFld=-43.504F;
    public static long lFld=-1L;
    public static volatile int iFld1=0;
    public static long lFld1=138L;
    public static boolean bFld=false;
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-12406);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, boolean b1) {

        short s1=-31152;
        int i4=-106, i5=9, i6=-42680, i7=200, i8=35888, iArr1[]=new int[N];
        double d1=-82.21875;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -109L);
        FuzzerUtils.init(iArr1, -113);

        i3 ^= (int)Test.lFld;
        i3 *= (int)-1.413F;
        lArr[(i3 >>> 1) % N] = i3;
        Test.lFld -= Test.instanceCount;
        s1 >>>= (short)i3;
        for (i4 = 392; i4 > 14; i4 -= 2) {
            i3 = (int)d1;
            i6 += (((i4 * Test.instanceCount) + Test.lFld) - Test.lFld);
        }
        iArr1[(i4 >>> 1) % N] /= (int)(i4 | 1);
        iArr1[(i5 >>> 1) % N] = 65;
        Test.sArrFld[(164 >>> 1) % N] = (short)i3;
        for (i7 = 5; 396 > i7; i7++) {
            Test.iFld1 += (int)-56931L;
            i3 = i7;
            iArr1[i7 + 1] *= -7;
        }
        vMeth_check_sum += i3 + (b1 ? 1 : 0) + s1 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i2) {

        boolean b2=false;

        vMeth(-13, b2);
        Test.iFld1 = (int)Test.lFld;
        long meth_res = i2 + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(double d) {

        int i1=197, i9=-8, iArr[][]=new int[N][N];
        boolean b=true;
        long l=75L;

        FuzzerUtils.init(iArr, 3);

        Test.byFld <<= (byte)iArr[(i1 >>> 1) % N][(i1 >>> 1) % N];
        b = ((Test.instanceCount++) != ((i1 + l) - (i1++)));
        i1 = (int)(i1 = (int)(-27381 - Test.fFld));
        Test.instanceCount &= lMeth(12);
        i9 *= i9;
        long meth_res = Double.doubleToLongBits(d) + i1 + (b ? 1 : 0) + l + i9 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=10474;
        int i=6593, i10=28, i11=1089, i12=19486, i13=-172, i14=2, i15=-10, i16=-31373, i17=8;
        double d2=66.66068;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3947807996L);

        s = (short)(iFld * iFld);
        i = 1;
        do {
            iFld += (i - iFld);
            Test.byFld = (byte)iFld;
            Test.fFld *= iMeth(d2);
            for (i10 = 155; i10 > 8; i10--) {
                lArr1[i] += Test.lFld1;
                Test.iFld1 += (i10 + Test.instanceCount);
                iFld += (((i10 * i10) + i) - iFld);
                s = (short)i10;
                iFld = iFld;
                Test.bFld = false;
            }
            Test.iFld1 -= (int)Test.lFld;
            for (i12 = i; i12 < 155; i12++) {
                iFld ^= 151;
            }
            Test.iFld1 += (((i * Test.instanceCount) + Test.iFld1) - i12);
            for (i14 = 5; i14 < 155; i14++) {
                Test.lFld += (i14 * i14);
                Test.bFld = Test.bFld;
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.fFld += i10;
                    if (Test.bFld) break;
                    Test.fFld += Test.lFld1;
                    i11 += i16;
                    Test.instanceCount += (i16 * i16);
                    i13 *= Test.byFld;
                    i13 += (((i16 * i12) + i14) - Test.fFld);
                }
                Test.iFld1 = i13;
                Test.lFld <<= Test.instanceCount;
                iFld = i11;
            }
        } while (++i < 162);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
