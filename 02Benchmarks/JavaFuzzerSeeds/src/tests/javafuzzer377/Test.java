package tests.javafuzzer377;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:01:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=216L;
    public static volatile double dFld=0.78224;
    public static float fFld=126.411F;
    public int iFld=-14;
    public boolean bFld=true;
    public static short sFld=2398;
    public static int iArrFld[]=new int[N];
    public volatile double dArrFld[]=new double[N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 223);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vSmallMeth() {

        int i=44849;

        Test.iArrFld[(i >>> 1) % N] += i;
        vSmallMeth_check_sum += i;
    }

    public static void vMeth2(int i4) {

        int i5=-6, i6=-243, i7=0, i8=11;
        short s=-18292;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6794139400850455912L);

        i4 = i4;
        for (i5 = 12; 305 > i5; i5++) {
            float f=2.911F;
            f = i6;
            i6 = s;
            i4 *= (int)Test.instanceCount;
            i4 = (int)-14009L;
            for (i7 = i5; i7 < 6; ++i7) {
                f = i6;
                lArr[i5] -= Test.instanceCount;
                Test.instanceCount *= -227;
                i6 += i6;
                Test.iArrFld[i5 - 1] = i6;
                i6 -= (int)Test.dFld;
            }
            if (b) continue;
            i8 = i8;
        }
        vMeth2_check_sum += i4 + i5 + i6 + s + i7 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i1, int i2, int i3) {

        byte by=82, byArr[]=new byte[N];
        int i9=-96, i10=60763, i11=-8677, i12=-5779, i13=-12;
        short s1=30993;

        FuzzerUtils.init(byArr, (byte)-126);

        i3 -= ((i1--) >>> i2);
        vMeth2(i2);
        i1 = by;
        i9 = 1;
        while (++i9 < 331) {
            byArr[i9 - 1] <<= (byte)i3;
            Test.iArrFld[i9 - 1] >>= (int)Test.instanceCount;
            i3 -= i1;
            Test.dFld -= -4227727645L;
            for (i10 = i9; i10 < 5; ++i10) {
                i11 += (((i10 * i9) + Test.fFld) - Test.instanceCount);
                Test.iArrFld[i9 - 1] = (int)Test.instanceCount;
                for (i12 = 1; i12 < 1; ++i12) {
                    i2 >>= i10;
                    i13 = i1;
                    s1 &= (short)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + by + i9 + i10 + i11 + i12 + i13 + s1 + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i14=-3;

        Test.dFld += 0;
        vMeth1(i14, i14, i14);
        i14 += (int)Test.instanceCount;
        i14 = i14;
        vMeth_check_sum += i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=12697, i16=-40, i17=-6, i18=-12, i19=-15391, i20=-165, i21=109, i22=236;

        for (int smallinvoc=0; smallinvoc<244; smallinvoc++) vSmallMeth();
        vMeth();
        Test.iArrFld[(iFld >>> 1) % N] -= iFld;
        iFld += 13;
        i15 = 1;
        do {
            for (i16 = 4; 70 > i16; i16++) {
                if (bFld) {
                    Test.instanceCount = i16;
                    iFld *= i17;
                } else {
                    i17 = i16;
                    dArrFld = dArrFld;
                    iFld *= -7;
                    i17 += (i16 * i16);
                }
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.sFld = (short)i18;
                    iArrFld1 = FuzzerUtils.int2array(N, (int)137);
                }
                iFld >>= i17;
                i20 = 1;
                do {
                    if (false) {
                        iFld = iFld;
                        iFld = i16;
                    }
                    bFld = bFld;
                } while ((i20 += 3) < 2);
                if (bFld) continue;
                i17 -= (int)Test.instanceCount;
                switch (((i16 % 2) * 5) + 106) {
                case 116:
                    for (i21 = 1; i21 < 2; ++i21) {
                        try {
                            i17 = (Test.iArrFld[i21 - 1] % 945698736);
                            iArrFld1[i16][i15 - 1] = (i18 % i15);
                            iFld = (Test.iArrFld[i21] % iArrFld1[i21 + 1][i15]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount <<= i16;
                        Test.iArrFld[i21 - 1] -= i17;
                        iArrFld1[i16][i16] >>= Test.sFld;
                    }
                    break;
                case 107:
                    if (true) continue;
                    break;
                default:
                    bFld = bFld;
                }
            }
        } while (++i15 < 358);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
