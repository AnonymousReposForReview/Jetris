package tests.javafuzzer1868;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:01:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static int iFld=8;
    public static double dFld=0.56906;
    public static int iFld1=5;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 8790626316464938635L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s, long l, int i4) {

        float f1=-78.984F;
        int i5=0, i6=62318, i7=-147, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -43380);

        for (f1 = 4; f1 < 168; f1++) {
            for (i6 = 10; i6 > f1; --i6) {
                double d2=2.2144;
                iArr1[(int)(f1)] = (int)Test.instanceCount;
                Test.instanceCount += 3360L;
                d2 -= -62916;
                Test.iFld = (int)42.138F;
            }
        }
        Test.iFld ^= Test.iFld;
        vMeth2_check_sum += s + l + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i2=40176, i3=0, i8=60082, i9=179, i10=-110, iArr[]=new int[N];
        float f=-2.190F;
        boolean b=true;

        FuzzerUtils.init(iArr, 8);

        for (i2 = 4; i2 < 328; ++i2) {
            if ((Test.lArrFld[i2] >= (f--)) == false) break;
            b = b;
            Test.instanceCount += (((i2 * i2) + Test.instanceCount) - Test.instanceCount);
            i3 -= (int)(iArr[i2 + 1] |= (int)(-Test.instanceCount));
            Test.iFld += (i2 - Test.iFld);
            vMeth2((short)(8334), Test.instanceCount, 0);
            if (b) {
                for (i8 = 1; 5 > i8; ++i8) {
                    Test.dFld = 95;
                    Test.iFld1 -= (int)Test.instanceCount;
                    Test.iFld %= (int)(Test.instanceCount | 1);
                    i10 = 1;
                    while (++i10 < 2) {
                        i9 = 4;
                        Test.instanceCount = i9;
                    }
                }
                vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + (b ? 1 : 0) + i8 + i9 + i10 +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
        }
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + (b ? 1 : 0) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1, double d1) {

        int i11=11, i12=0, i13=-14, i14=52221, iArr2[][]=new int[N][N];
        float f2=0.271F;

        FuzzerUtils.init(iArr2, -42);

        vMeth1();
        for (i11 = 5; 226 > i11; i11++) {
            f2 %= (i12 | 1);
            Test.iFld <<= (int)Test.instanceCount;
            if (Test.iFld1 != 0) {
                vMeth_check_sum += i + i1 + Double.doubleToLongBits(d1) + i11 + i12 + Float.floatToIntBits(f2) + i13 +
                    i14 + FuzzerUtils.checkSum(iArr2);
                return;
            }
            switch ((i11 % 2) + 28) {
            case 28:
                i1 = i12;
                i = (int)Test.instanceCount;
                for (i13 = 1; i13 < 7; ++i13) {
                    f2 *= i13;
                    Test.iFld -= (int)Test.instanceCount;
                    i12 <<= Test.iFld;
                    try {
                        iArr2[i11 + 1][i11] = (iArr2[(i >>> 1) % N][i11] % Test.iFld1);
                        i1 = (iArr2[i13][i13 - 1] % Test.iFld);
                        Test.iFld = (iArr2[i13][i13] % i1);
                    } catch (ArithmeticException a_e) {}
                }
                Test.instanceCount &= i13;
                break;
            case 29:
                Test.instanceCount *= 42379L;
                break;
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d1) + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        double d=0.122652;
        int i15=23675, i16=-6, i17=-10, i18=47901, i19=-6322, i20=23899, i21=0, iArr3[]=new int[N], iArr4[]=new int[N];
        float f3=67.932F, f4=0.284F;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-13038);
        FuzzerUtils.init(iArr3, 238);
        FuzzerUtils.init(lArr, -7916110467231908691L);
        FuzzerUtils.init(iArr4, -157);

        Test.iFld -= (int)((-60848 + (d - Test.iFld)) + (8 + (Test.iFld--)));
        vMeth(Test.iFld1, Test.iFld1, d);
        for (i15 = 1; i15 < 256; ++i15) {
            for (f3 = 2; f3 < 99; ++f3) {
                sArr = sArr;
                try {
                    i17 = (-65337 / i17);
                    Test.iFld1 = (-3 / iArr3[(int)(f3)]);
                    Test.iFld1 = (Test.iFld % i17);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = (long)d;
            }
            i16 += -129;
            Test.iFld1 = -240;
        }
        Test.instanceCount = i17;
        for (long l1 : Test.lArrFld) {
            short s1=-17159;
            switch (((i15 >>> 1) % 6) + 22) {
            case 22:
                switch (((Test.iFld1 >>> 1) % 7) + 14) {
                case 14:
                    for (i18 = 1; i18 < 63; i18++) {
                        iArr3 = iArr3;
                        l1 *= -28189;
                        iArr3[i18 - 1] = i15;
                        i16 = (int)l1;
                        i17 += (int)d;
                        sArr[i18 - 1] = (short)l1;
                        iArr3 = iArr3;
                    }
                    i16 = (int)l1;
                case 15:
                    for (i20 = 2; i20 < 63; ++i20) {
                        try {
                            i21 = (iArr3[i20 + 1] % i18);
                            i16 = (i16 % -63234);
                            i17 = (i17 / 142);
                        } catch (ArithmeticException a_e) {}
                        i19 = (int)Test.instanceCount;
                        iArr3[i20] = i15;
                        i19 = i17;
                        Test.iFld += i20;
                        i17 ^= i20;
                        Test.bFld = true;
                    }
                    break;
                case 16:
                    Test.iFld1 ^= i16;
                    break;
                case 17:
                    i16 = (int)5798386424103920053L;
                case 18:
                    Test.iFld1 = i21;
                    break;
                case 19:
                    f4 += Test.iFld;
                    break;
                case 20:
                    lArr[(i18 >>> 1) % N] >>= i18;
                    break;
                default:
                }
                break;
            case 23:
            case 24:
                iArr4[(Test.iFld1 >>> 1) % N] ^= i15;
                break;
            case 25:
                i19 >>= i21;
                break;
            case 26:
                iArr4[(Test.iFld1 >>> 1) % N] = i17;
                break;
            case 27:
                iArr3[(-4 >>> 1) % N] += s1;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
