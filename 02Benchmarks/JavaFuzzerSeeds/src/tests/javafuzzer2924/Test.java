package tests.javafuzzer2924;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:04:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2131842667L;
    public static int iFld=234;
    public double dFld=0.84746;
    public static float fFld=-70.455F;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 102);
        FuzzerUtils.init(Test.dArrFld, 103.93382);
        FuzzerUtils.init(Test.fArrFld, 0.568F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=46910, i7=158, i8=-204, i9=253, i10=-12, i11=-61, i12=193;
        byte by=-32;
        float f=0.48F;
        double d1=-5.106360;

        for (i6 = 3; i6 < 327; i6++) {
            for (i8 = i6; i8 < 5; i8++) {
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.instanceCount *= Test.instanceCount;
                    Test.iFld -= 106;
                    i9 = i8;
                    by *= (byte)f;
                    Test.instanceCount = -12597L;
                    i9 += (int)Test.instanceCount;
                    i7 -= (int)f;
                }
                i11 &= i6;
                i12 = 1;
                while (++i12 < 1) {
                    Test.iFld += Test.iFld;
                    i11 += (i12 | (long)f);
                    d1 *= by;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + by + Float.floatToIntBits(f) + i12 +
            Double.doubleToLongBits(d1);
    }

    public static long lMeth() {

        int i13=11, i14=-14;
        boolean b=false;

        Test.iFld |= Test.iArrFld[(Test.iFld >>> 1) % N];
        for (double d : Test.dArrFld) {
            Test.instanceCount = Test.iArrFld[(Test.iFld >>> 1) % N];
            Test.iFld += (int)((Test.iArrFld[(2 >>> 1) % N]++) + ((d - -4) - Integer.reverseBytes(Test.iFld)));
            vMeth1();
            for (i13 = 1; i13 < 4; i13++) {
                b = b;
                Test.instanceCount >>>= i13;
                Test.instanceCount = Test.iFld;
            }
            i14 += 17794;
            i14 /= -16248;
        }
        long meth_res = i13 + i14 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, long l) {

        int i2=-1, i3=155, i4=-75, i5=-34263, i15=15, i16=11;
        double d2=-126.88631;
        float f1=0.886F;
        short s=16757;
        boolean b1=true;

        for (i2 = 7; i2 < 161; ++i2) {
            for (i4 = 1; i4 < 10; ++i4) {
                if (false) {
                    i1 *= (i3--);
                    i5 -= (int)Math.max(lMeth(), Test.instanceCount);
                    Test.iFld = (int)l;
                    d2 = i1;
                    vMeth_check_sum += i1 + l + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d2) +
                        Float.floatToIntBits(f1) + s + i15 + i16 + (b1 ? 1 : 0);
                    return;
                } else {
                    l += (((i4 * i2) + i1) - f1);
                    s -= (short)63182;
                    for (i15 = 1; i15 < 2; i15++) {
                        if (b1) {
                            i5 += (6 + (i15 * i15));
                        } else if (true) {
                            s -= (short)l;
                        } else {
                            Test.iArrFld[i15 - 1] += i3;
                            i3 >>= i5;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + s +
            i15 + i16 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i17=-14, i18=-111, i19=194, i20=133, i21=-107, i22=19902, i23=30, iArr[]=new int[N], iArr1[][]=new
            int[N][N];
        double d3=0.84186;
        boolean b2=false, bArr[]=new boolean[N];
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(iArr1, 8635);
        FuzzerUtils.init(byArr, (byte)-43);
        FuzzerUtils.init(lArr, -1L);
        FuzzerUtils.init(bArr, true);

        iArr[(i >>> 1) % N] += ((-iArr1[(i >>> 1) % N][(i >>> 1) % N]) - (byArr[(-26408 >>> 1) % N] = (byte)Math.max(i,
            210)));
        vMeth(Test.iFld, Test.instanceCount);
        for (i17 = 6; i17 < 181; i17++) {
            Test.instanceCount = (long)dFld;
            lArr[i17 - 1] >>= -191;
            i18 = i;
            dFld += 9;
        }
        for (d3 = 14; 312 > d3; ++d3) {
            switch ((((i18 >>> 1) % 4) * 5) + 126) {
            case 142:
                Test.iFld = i18;
            case 131:
                i += (int)(((d3 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                Test.fArrFld[(int)(d3 - 1)] *= i17;
            case 139:
                Test.instanceCount = i18;
                i20 = 1;
                do {
                    i19 *= (int)35382L;
                    i = i19;
                } while (++i20 < 84);
                for (i21 = (int)(d3); 84 > i21; ++i21) {
                    Test.instanceCount += (i21 - i18);
                }
                Test.fFld -= Test.fFld;
                break;
            case 137:
                switch ((int)(((d3 % 7) * 5) + 37)) {
                case 68:
                    i23 = 1;
                    while (++i23 < 84) {
                        Test.iFld = -48218;
                        i19 = (int)Test.instanceCount;
                        Test.instanceCount += (i23 + i20);
                        bArr[i23 + 1] = b2;
                        byArr[(int)(d3)] -= (byte)-14;
                        i19 *= 9;
                    }
                    break;
                case 60:
                    Test.instanceCount += (long)(d3 * i20);
                    break;
                case 55:
                    dFld *= i22;
                    if (b2) continue;
                    break;
                case 51:
                    try {
                        i19 = (48621 % i17);
                        i22 = (190 % i);
                        i = (i17 / i23);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 47:
                    try {
                        i = (i22 / 39250);
                        i19 = (i22 / i23);
                        i19 = (i21 % -39590);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 58:
                    i22 = -7477;
                    break;
                case 52:
                    Test.fFld += (float)(((d3 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                    break;
                }
                break;
            default:
                Test.iFld <<= Test.iFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
