package tests.javafuzzer2117;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:10:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2328375034L;
    public static boolean bFld=false;
    public static short sFld=8159;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11330);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(double d, long l) {

        short s=-2131;
        int i4=226, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 74);

        s = (short)(((--Test.instanceCount) - (iArr[(i4 >>> 1) % N] -= i4)) * l);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + l + s + i4 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i8, long l1, int i9) {

        byte by1=-72;
        int i10=-10, iArr2[]=new int[N];
        double d3=-86.28879;

        FuzzerUtils.init(iArr2, 23692);

        Test.instanceCount >>= -7814601267933087559L;
        i9 /= (int)(Test.instanceCount | 1);
        iArr2[(i8 >>> 1) % N] += (int)l1;
        i9 *= by1;
        i8 += (int)8L;
        i10 = 1;
        while (++i10 < 156) {
            if (i10 != 0) {
            }
            d3 = -104;
            l1 >>>= i10;
        }
        long meth_res = i8 + l1 + i9 + by1 + i10 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth1(byte by) {

        int i7=-12565, i11=251, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -32917);

        i7 = 1;
        do {
            float f=0.456F;
            if (Test.bFld) break;
            iArr1[i7 + 1] -= iMeth(4, Test.instanceCount, 60662);
            Test.instanceCount += (-17833 + (i7 * i7));
            i11 -= i7;
            f -= Test.sFld;
        } while ((i7 += 2) < 235);
        long meth_res = by + i7 + i11 + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i5, int i6) {

        double d2=-2.38320;
        byte by2=90;
        int i12=194, i13=-22500, i14=-7717;
        long l2=-13L;
        float f1=-93.524F;

        vSmallMeth(++d2, lMeth1(by2));
        i5 = -60679;
        by2 -= (byte)-34339;
        for (i12 = 12; i12 < 216; ++i12) {
            Test.instanceCount *= i13;
            for (l2 = 1; l2 < 8; l2++) {
                try {
                    i6 = (i6 / 137);
                    Test.iArrFld[(int)(l2)] = (i6 / 168);
                    i13 = (i14 % i12);
                } catch (ArithmeticException a_e) {}
                d2 = f1;
                Test.instanceCount += l2;
                i13 = i13;
            }
            Test.instanceCount *= i5;
            Test.instanceCount = i6;
            i14 += (i12 * i12);
            Test.instanceCount = -76L;
            Test.sFld -= (short)i14;
        }
        long meth_res = i5 + i6 + Double.doubleToLongBits(d2) + by2 + i12 + i13 + l2 + i14 + Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-22677, i1=-3, i2=2, i3=120, i16=-29, i17=12, i18=-27901, i19=-1, i20=48874, i21=-12;
        double d1=70.112709, dArr[]=new double[N];
        float f2=1.681F;
        byte by3=88, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -96.102126);
        FuzzerUtils.init(lArr, -1200357145L);
        FuzzerUtils.init(byArr, (byte)-17);

        i = 1;
        do {
            i1 += (i - i1);
            for (i2 = 5; i2 < 114; ++i2) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(--dArr[i - 1], Math.abs((-(i1 +
                    Test.instanceCount)) - (++i3)));
                vSmallMeth(d1, lMeth(i2, i));
                i3 *= (int)f2;
            }
            for (i16 = 4; i16 < 114; ++i16) {
                if (false) break;
            }
            for (i18 = 114; i18 > 1; i18--) {
                i17 = i17;
                i1 = (int)Test.instanceCount;
                i3 &= i18;
                for (i20 = 1; i20 < 2; i20++) {
                    switch (((i20 % 3) * 5) + 95) {
                    case 96:
                        Test.iArrFld[i20] = 3;
                        break;
                    case 106:
                        lArr = FuzzerUtils.long1array(N, (long)1386849039L);
                        Test.sFld *= (short)i19;
                    case 97:
                        Test.iArrFld[i20 + 1] = Test.sFld;
                        i19 += (((i20 * by3) + Test.instanceCount) - i1);
                    default:
                        byArr[i20] = (byte)i16;
                        i1 += i20;
                        i3 += i2;
                    }
                    Test.bFld = false;
                    i1 = i20;
                }
                i3 <<= i21;
                i17 += i19;
                Test.instanceCount |= i19;
                i19 -= (int)Test.instanceCount;
                Test.sFld = (short)10;
                i1 = i2;
            }
        } while (++i < 220);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
