package tests.javafuzzer2213;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:22:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3852369311L;
    public static int iFld=164;
    public static int iFld1=7905;
    public static double dFld=109.117072;
    public boolean bFld=true;
    public long lFld=2282583860L;
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 44823L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vSmallMeth(int i1, float f, int i2) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 14);

        iArr1[(i1 >>> 1) % N] = i1;
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f) + i2 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i3, double d) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2724462290L);

        i3 >>= (int)(i3 * ((0L + (--lArr[(i3 >>> 1) % N])) - (i3 + Test.instanceCount)));
        long meth_res = i3 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(boolean b) {

        float f1=-82.983F;
        int i6=35201, i7=-72, i8=-11, i9=176, iArr2[]=new int[N];
        short s1=12428;

        FuzzerUtils.init(iArr2, 0);

        if (false) {
            vSmallMeth(Test.iFld, f1, Test.iFld);
            Test.iFld |= Test.iFld;
            Test.iFld += (int)Test.instanceCount;
        } else if (b) {
            iArr2[(Test.iFld >>> 1) % N] = Test.iFld;
            i6 -= i6;
        } else if (false) {
            i7 = 1;
            while (++i7 < 354) {
                Test.iFld = Test.iFld;
                Test.iFld += (int)Test.instanceCount;
                Test.instanceCount &= -21196;
                f1 -= s1;
                for (i8 = i7; i8 < 5; i8++) {
                    iArr2[i8] += i6;
                    i6 = (int)Test.instanceCount;
                }
                Test.lArrFld[i7] >>= 64439L;
            }
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f1) + i6 + i7 + s1 + i8 + i9 + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(int i4, int i5) {

        boolean b1=false;
        int i10=-27, i11=-160, i12=3, i13=19311, i14=37074, i15=16535, iArr3[]=new int[N];
        float f2=66.92F;
        byte by=-2;

        FuzzerUtils.init(iArr3, 76);

        vSmallMeth(--i4, fMeth(b1), 11);
        for (i10 = 17; i10 < 345; i10++) {
            iArr3[i10] = Test.iFld1;
            for (i12 = 5; i12 > 1; i12--) {
                Test.dFld -= i12;
                if (Test.iFld1 != 0) {
                }
            }
            switch (((i10 % 6) * 5) + 84) {
            case 100:
                i11 += i11;
                iArr3[i10 - 1] = Test.iFld1;
                break;
            case 96:
                for (i14 = i10; i14 < 5; i14++) {
                    Test.iFld = -41;
                    if (Test.iFld != 0) {
                    }
                    i4 = (int)Test.instanceCount;
                    Test.iFld -= (int)f2;
                    Test.instanceCount += (2628339982L + (i14 * i14));
                }
            case 98:
                f2 *= Test.instanceCount;
            case 102:
                by *= (byte)i4;
                break;
            case 94:
                Test.lArrFld[i10] = Test.iFld1;
                break;
            case 101:
                by += (byte)i10;
                break;
            default:
                i5 = (int)Test.instanceCount;
            }
        }
        long meth_res = i4 + i5 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + by +
            FuzzerUtils.checkSum(iArr3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-191, i16=-141, i17=26, i18=-7, i19=-33203, i20=12634, iArr[]=new int[N];
        short s=-8585, s2=-32222, sArr[]=new short[N];
        double d1=0.99072;
        float f3=-114.852F, f4=1.277F;
        byte by1=-123, byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr, 24265);
        FuzzerUtils.init(byArr, (byte)103);
        FuzzerUtils.init(sArr, (short)-20885);

        switch ((((-iArr[(i >>> 1) % N]) >>> 1) % 10) + 17) {
        case 17:
            for (int smallinvoc=0; smallinvoc<921; smallinvoc++) vSmallMeth((s--) + (Integer.reverseBytes(-5) * iArr[(i
                >>> 1) % N]), -74.938F, Math.max(iMeth(iMeth1(i, Test.iFld1), -4.130151), Test.iFld));
            for (d1 = 11; d1 < 343; ++d1) {
                if (bFld) break;
                bFld = bFld;
                switch ((int)(((d1 % 10) * 5) + 116)) {
                case 119:
                    Test.iFld1 >>= i16;
                    break;
                case 127:
                    Test.lArrFld[(int)(d1)] = i16;
                    for (i17 = 1; i17 < 76; i17++) {
                        iArr[i17 - 1] -= (int)-1.978F;
                        if (bFld) break;
                        i18 -= (int)4L;
                        f3 = f3;
                        f4 = 1;
                        do {
                            fArrFld[i17 - 1] = i17;
                            Test.iFld = -5;
                            if (bFld) {
                                fArrFld[(int)(d1 + 1)] += 27;
                            } else {
                                Test.iFld1 = -44977;
                                iArr[i17] += i;
                            }
                            Test.iFld += (int)f4;
                            Test.iFld1 += Test.iFld1;
                            i16 -= i;
                        } while (++f4 < 2);
                        byArr[(int)(d1)][(int)(d1 + 1)] -= (byte)Test.iFld;
                        f3 += 0.379F;
                    }
                    f3 *= Test.instanceCount;
                    i19 = 1;
                    do {
                        by1 += (byte)(i19 * i19);
                        iArr[i19 - 1] -= (int)Test.instanceCount;
                    } while (++i19 < 76);
                case 161:
                    i18 = i16;
                    break;
                case 147:
                    i18 = 59285;
                    break;
                case 149:
                    if (bFld) break;
                    break;
                case 166:
                    iArr[(int)(d1 - 1)] *= (int)Test.instanceCount;
                    break;
                case 121:
                    Test.iFld1 += (int)(d1 + f3);
                case 164:
                    Test.instanceCount += (long)d1;
                    break;
                case 152:
                    s += (short)d1;
                    break;
                case 120:
                    by1 >>>= (byte)i19;
                default:
                    Test.iFld1 += (int)d1;
                }
            }
        case 18:
            i16 *= (int)Test.instanceCount;
            break;
        case 19:
            iArr[(Test.iFld >>> 1) % N] *= Test.iFld;
            break;
        case 20:
            s2 /= (short)(Test.instanceCount | 1);
            break;
        case 21:
            Test.iFld /= (int)(i16 | 1);
            break;
        case 22:
            Test.dFld = Test.instanceCount;
            break;
        case 23:
            i16 = -4567;
            break;
        case 24:
            i |= (int)lFld;
            break;
        case 25:
            i = i;
            break;
        case 26:
            sArr[(Test.iFld1 >>> 1) % N] *= (short)i20;
            break;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth1 fMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  fMeth ->  fMeth iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
