package tests.javafuzzer561;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:52:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2658863925842584965L;
    public static float fFld=-23.128F;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.4536);
        FuzzerUtils.init(Test.iArrFld, -45111);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(long l, int i5) {

        int i6=-35287, i7=115, i8=-15893, i9=112, i10=-64485, i11=62297, i12=77, i13=-14, i14=2829;
        boolean b=true;

        for (i6 = 14; i6 < 371; i6++) {
            i8 = 1;
            do {
                if (b) continue;
            } while (++i8 < 5);
            i5 += i7;
            if (true) continue;
        }
        Test.instanceCount = 133;
        for (i9 = 13; i9 < 222; i9++) {
            for (i11 = 1; 8 > i11; ++i11) {
                for (i13 = 1; i13 < 2; ++i13) {
                    i12 >>= (int)l;
                    i14 -= i6;
                    Test.instanceCount += i13;
                    i12 = (int)1.695F;
                    i12 += i5;
                    i7 += i13;
                }
            }
        }
        long meth_res = l + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + i13 + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(int i3, int i4) {

        int i15=-45, i16=-11, i17=-11, i18=-163, i19=-45655;
        double d=0.122379;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.944F);

        Test.dArrFld[(i3 >>> 1) % N] += ((fArr[(i4 >>> 1) % N] + (-3 - (Test.instanceCount + 2.26593))) -
            lMeth(Test.instanceCount, i3));
        for (i15 = 368; i15 > 15; --i15) {
            d = i3;
            Test.instanceCount = i3;
            Test.iArrFld[(i17 >>> 1) % N] -= (int)Test.instanceCount;
            i3 += (i15 * i15);
            i16 += (int)Test.fFld;
            i3 |= i17;
            for (i18 = 1; i18 < 5; i18++) {
                i3 <<= -197;
                i16 = i16;
                i17 += i18;
                i19 &= i16;
                i16 -= (int)d;
                Test.instanceCount += (long)Test.fFld;
            }
        }
        long meth_res = i3 + i4 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1, int i2) {

        int i20=-212, i21=14, i22=-60, i23=-48, i24=-156, iArr[]=new int[N];
        byte by1=-14;

        FuzzerUtils.init(iArr, -57269);

        iArr[(i2 >>> 1) % N] -= (i1--);
        iMeth(i, i);
        i20 = 1;
        do {
            for (i21 = 1; i21 < 5; i21++) {
                for (i23 = 1; i23 < 2; ++i23) {
                    i24 += (int)-1359987571930943048L;
                    i24 = (int)Test.instanceCount;
                    Test.instanceCount *= i1;
                    Test.fFld = i20;
                    try {
                        i1 = (i1 % -2917);
                        Test.iArrFld[i20 + 1] = (i % 28791);
                        i1 = (649 % i);
                    } catch (ArithmeticException a_e) {}
                }
                i24 += by1;
                if (Test.bFld) break;
            }
            i24 -= i20;
            i -= i2;
            i22 += (i20 * i20);
        } while (++i20 < 345);
        vMeth_check_sum += i + i1 + i2 + i20 + i21 + i22 + i23 + i24 + by1 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=-34;
        int i25=0, i26=59380, i27=-28195, i28=170, i29=2, i30=0, i31=-2, i32=2, i33=1012, i34=-6, i35=-173, i36=-7,
            i37=-5, i38=-7;
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-20985);
        FuzzerUtils.init(lArr, 11L);

        Test.instanceCount <<= by;
        vMeth(i25, i25, i25);
        i25 -= i25;
        for (i26 = 1; i26 < 315; i26++) {
            for (i28 = 80; i28 > 1; --i28) {
                for (i30 = 1; i30 < 2; ++i30) {
                    i31 += (((i30 * i25) + i31) - i31);
                }
                i27 += i28;
                Test.iArrFld[i26 + 1] += i25;
                sArr[i26][i28] <<= (short)i26;
            }
            for (i32 = 2; i32 < 80; i32++) {
                for (i34 = 1; i34 < 2; i34++) {
                    double d1=9.9970;
                    Test.iArrFld[i32] *= (int)d1;
                    i33 -= i28;
                    Test.iArrFld = Test.iArrFld;
                    i27 -= i33;
                    i27 = i28;
                }
                Test.fFld *= -5;
                i25 += i32;
            }
            Test.instanceCount += i27;
        }
        i35 &= (int)Test.instanceCount;
        for (i36 = 6; i36 < 289; i36 += 3) {
            Test.instanceCount = i34;
            Test.instanceCount += (((i36 * Test.instanceCount) + i27) - by);
            i38 = 1;
            while (++i38 < 266) {
                i29 *= i31;
                i33 ^= i38;
                i31 *= i28;
                i33 = 5003;
            }
            lArr[i36] = Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
