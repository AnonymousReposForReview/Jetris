package tests.javafuzzer2211;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:22:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8357257111885829909L;
    public static byte byFld=110;
    public static short sFld=12507;
    public static boolean bFld=true;
    public static int iFld=-34233;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 29208);
        FuzzerUtils.init(Test.fArrFld, 0.5F);
        FuzzerUtils.init(Test.lArrFld, 2796664395L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3, int i4) {

        int i5=-6, i6=35397, i7=13, i8=254, i9=108, i10=59;
        double d1=57.101531;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 861039666989679957L);

        for (i5 = 15; i5 < 288; ++i5) {
            switch (((i5 % 5) * 5) + 127) {
            case 138:
                if (true) {
                    Test.instanceCount += (1 + (i5 * i5));
                    for (i7 = 1; i7 < 6; ++i7) {
                        lArr[i5 - 1] <<= i2;
                        Test.iArrFld = Test.iArrFld;
                        for (i9 = 2; i9 > 1; i9 -= 2) {
                            switch ((i5 % 9) + 6) {
                            case 6:
                                i10 += i9;
                            case 7:
                                Test.iArrFld[i7 + 1] |= 94;
                                break;
                            case 8:
                            case 9:
                                i10 = (int)Test.instanceCount;
                                break;
                            case 10:
                                if (i4 != 0) {
                                }
                                i2 = i10;
                                break;
                            case 11:
                                Test.byFld += (byte)i8;
                                break;
                            case 12:
                                i2 += i9;
                                break;
                            case 13:
                                i3 >>>= Test.sFld;
                            case 14:
                                i10 = i3;
                            }
                        }
                    }
                } else {
                    d1 -= Test.instanceCount;
                }
                break;
            case 149:
                Test.iArrFld[i5] *= i2;
                break;
            case 134:
                i4 >>>= (int)Test.instanceCount;
            case 148:
            case 139:
                if (Test.bFld) break;
                break;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i11=-25121;
        double d2=2.792;

        iMeth(-10, i11, i11);
        i11 = i11;
        i11 = (int)d2;
        long meth_res = i11 + Double.doubleToLongBits(d2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth(float f) {

        int i1=35609;

        Test.instanceCount -= (--i1);
        f += (fMeth() - Test.instanceCount);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i1;
    }

    public void mainTest(String[] strArr1) {

        double d=12.65083, dArr[]=new double[N];
        int i=8, i12=-11, i13=-1, i14=-58;
        float f1=-120.88F, f2=0.476F;

        FuzzerUtils.init(dArr, 2.24618);

        switch ((((((int)(d - i)) >>> 1) % 2) * 5) + 3) {
        case 7:
            for (int smallinvoc=0; smallinvoc<445; smallinvoc++) vSmallMeth(f1);
            i *= i;
            Test.instanceCount >>= Test.instanceCount;
            i = (int)f1;
        case 11:
            f1 /= (i | 1);
            i = i;
            i12 = 1;
            while (++i12 < 229) {
                Test.fArrFld[i12 + 1] += i;
                try {
                    i = (29614 / i);
                    i = (40123 / i12);
                    i = (i12 / Test.iArrFld[i12]);
                } catch (ArithmeticException a_e) {}
                i += (-14 + (i12 * i12));
                Test.byFld = (byte)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                Test.lArrFld[i12 - 1] += Test.instanceCount;
                try {
                    i = (-78 % i);
                    i = (i / 200);
                    i = (Test.iArrFld[i12] / 43870);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; i13 < 110; i13++) {
                    switch ((i13 % 10) + 113) {
                    case 113:
                        i14 = (int)Test.instanceCount;
                        break;
                    case 114:
                        i <<= i;
                        i14 <<= i13;
                        switch (((i13 % 1) * 5) + 14) {
                        case 17:
                            i14 = Test.sFld;
                            break;
                        default:
                            f2 = 1;
                            do {
                                Test.instanceCount |= Test.instanceCount;
                                i14 >>= (int)Test.instanceCount;
                                switch (((i12 % 1) * 5) + 8) {
                                case 9:
                                    Test.iArrFld[i12 - 1] |= (int)Test.instanceCount;
                                    Test.byFld = (byte)Test.instanceCount;
                                    i14 <<= (int)Test.instanceCount;
                                    if (true) continue;
                                    break;
                                default:
                                    dArr = FuzzerUtils.double1array(N, (double)-87.104812);
                                }
                            } while (++f2 < 2);
                        }
                        break;
                    case 115:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 116:
                        i14 += (i13 * i13);
                        break;
                    case 117:
                    case 118:
                        i14 -= (int)Test.instanceCount;
                        break;
                    case 119:
                        f1 += i13;
                        break;
                    case 120:
                        i14 >>= i;
                    case 121:
                        i14 += Test.iFld;
                    case 122:
                        Test.instanceCount <<= i;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
