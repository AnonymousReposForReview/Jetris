package tests.javafuzzer1811;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:34:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=834441747317909626L;
    public static volatile int iFld=-149;
    public static float fFld=0.483F;
    public static short sFld=-9884;
    public static volatile boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-181, i3=-43231, i4=30993, i5=27580, iArr1[]=new int[N];
        float f3=-2.976F;
        short s=14786;

        FuzzerUtils.init(iArr1, -13);

        for (i2 = 2; i2 < 224; i2++) {
            i3 -= i2;
            Test.instanceCount -= i3;
            for (i4 = i2; i4 < 7; i4++) {
                i3 += (i4 * i4);
                i5 <<= i4;
                f3 = 1;
                do {
                    s += (short)Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    i5 += (int)(((f3 * i2) + i3) - i4);
                    i3 += (int)f3;
                    if (i4 != 0) {
                    }
                    Test.instanceCount = -2L;
                    iArr1[(int)(f3)] = i4;
                } while (++f3 < 1);
                Test.instanceCount += i3;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + Float.floatToIntBits(f3) + s + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f1, long l, float f2) {

        byte by1=55;
        double d1=0.14045;
        int i1=-7266, i6=1, i7=-1, i8=-14, iArr2[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2930009377L);
        FuzzerUtils.init(iArr2, 0);

        by1 = (byte)(d1 / (i1 | 1));
        lArr[(35 >>> 1) % N] -= iMeth();
        for (i6 = 261; i6 > 6; i6 -= 2) {
            i1 = i7;
        }
        i8 = 1;
        while (++i8 < 209) {
            if (false) {
                i1 += Test.iFld;
                if (b) continue;
                Test.iFld += (int)l;
            } else if (b) {
                Test.iFld *= Test.iFld;
                Test.instanceCount += (33967L + (i8 * i8));
                i7 = Test.iFld;
                f2 += (((i8 * i1) + i6) - l);
            } else if (b) {
                i1 += i8;
            } else {
                i7 += (int)d1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + l + Float.floatToIntBits(f2) + by1 + Double.doubleToLongBits(d1)
            + i1 + i6 + i7 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vSmallMeth(float f, double d) {


        vMeth(f, Test.instanceCount, f);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i10=-18, i11=38779, i12=-217, i13=4690, i14=30663, iArr[]=new int[N];
        byte by=108, by2=-35;
        double d2=0.33553;
        long l1=6L, l2=-1288L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 51370);
        FuzzerUtils.init(fArr, -2.726F);

        i = (int)(i >> ((by = (byte)Test.instanceCount) * (i * i)));
        iArr[(i >>> 1) % N] >>= i;
        for (int smallinvoc=0; smallinvoc<908; smallinvoc++) vSmallMeth(Test.fFld, d2);
        Test.sFld += (short)l1;
        iArr[(19 >>> 1) % N] += (int)d2;
        switch (((Test.iFld >>> 1) % 7) + 54) {
        case 54:
            for (i10 = 2; i10 < 337; i10++) {
                i += (-205 + (i10 * i10));
                Test.fFld += -165;
                for (l2 = 2; l2 < 75; ++l2) {
                    Test.iFld = i12;
                    i13 = 1;
                    do {
                        i11 += (i13 * i13);
                        i -= (int)l2;
                        Test.iFld += (i13 ^ l2);
                        i12 >>= (int)l2;
                        d2 = Test.iFld;
                        Test.instanceCount -= Test.sFld;
                        switch ((i13 % 5) + 83) {
                        case 83:
                            l1 += (i13 * i13);
                            break;
                        case 84:
                            i *= by;
                            Test.instanceCount += (i13 * Test.iFld);
                            i14 = by2;
                            Test.fFld -= i10;
                            break;
                        case 85:
                            fArr[(int)(l2)] -= l2;
                            break;
                        case 86:
                            i11 /= (int)(l1 | 1);
                            Test.sFld = (short)-3366498149L;
                            i11 += (i13 - Test.iFld);
                            i12 += (((i13 * Test.iFld) + l2) - i14);
                            break;
                        case 87:
                            Test.iFld += i13;
                        default:
                            Test.iFld |= Test.iFld;
                        }
                    } while (++i13 < 2);
                }
            }
        case 55:
            Test.instanceCount *= i11;
        case 56:
            i <<= i10;
            break;
        case 57:
            Test.bFld = Test.bFld;
        case 58:
            i12 += i12;
            break;
        case 59:
            iArr = iArr;
            break;
        case 60:
            iArr[(i12 >>> 1) % N] *= Test.iFld;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
