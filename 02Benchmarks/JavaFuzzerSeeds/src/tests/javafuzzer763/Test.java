package tests.javafuzzer763;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2748599476L;
    public static float fFld=-57.471F;
    public static volatile short sFld=-31223;
    public volatile double dFld=22.99898;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 91L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        int i2=21, i3=-5, i4=23177, iArr[]=new int[N];
        short s=-4437;
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(dArr, -76.1628);
        FuzzerUtils.init(fArr, 12.101F);

        i2 = i2;
        i3 = 1;
        while (++i3 < 132) {
            i2 &= (int)Test.instanceCount;
            switch ((i3 % 9) + 118) {
            case 118:
                i2 += (i3 * i3);
                break;
            case 119:
                i4 = 1;
                while ((i4 += 3) < 12) {
                    Test.instanceCount += (i4 | i4);
                    i2 <<= i2;
                    Test.fFld = i2;
                    i2 += i2;
                    Test.instanceCount += i4;
                    iArr[i4] *= i3;
                    dArr[i3] += Test.fFld;
                    Test.instanceCount -= Test.instanceCount;
                    iArr[i3 - 1] |= s;
                }
                break;
            case 120:
            case 121:
                iArr[i3 - 1] += (int)Test.fFld;
                break;
            case 122:
                i2 -= i2;
                break;
            case 123:
                i2 += (((i3 * Test.instanceCount) + i4) - i2);
                break;
            case 124:
                fArr[i3] -= Test.instanceCount;
                break;
            case 125:
                i2 += (((i3 * Test.fFld) + Test.instanceCount) - i3);
                break;
            case 126:
                i2 += (i3 * i3);
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        double d1=103.123427, dArr1[][]=new double[N][N];
        int i5=-55825, i6=215, i7=-6, i8=58;
        short s1=31890;
        byte by=51, byArr[]=new byte[N];
        boolean b=true;

        FuzzerUtils.init(byArr, (byte)23);
        FuzzerUtils.init(dArr1, 92.130957);

        vMeth1(d1);
        for (i5 = 12; i5 < 194; i5++) {
            s1 = by;
            byArr[i5] = (byte)i6;
            d1 = i5;
            s1 = (short)i6;
            for (i7 = 1; i7 < 9; ++i7) {
                i6 *= 91;
                switch (((i8 >>> 1) % 2) + 80) {
                case 80:
                    d1 = i5;
                    Test.instanceCount = i6;
                    if (b) break;
                case 81:
                    dArr1[i7 + 1][i7 - 1] += -141;
                    Test.instanceCount += (-11 + (i7 * i7));
                    i8 = i7;
                    break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i5 + i6 + s1 + by + i7 + i8 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vSmallMeth(int i1) {

        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-21907);

        vMeth();
        sArr[(i1 >>> 1) % N] >>= (short)i1;
        vSmallMeth_check_sum += i1 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-34, i9=35058, i10=-28, i11=236, i12=165, i13=-8, i14=-35, i15=-16345, i16=-22732, i17=9, i18=37886,
            i19=162, iArr1[]=new int[N];
        float f=0.679F;
        byte by1=-38;

        FuzzerUtils.init(iArr1, 4);

        Test.lArrFld[(i >>> 1) % N] = (++i);
        for (int smallinvoc=0; smallinvoc<248; smallinvoc++) vSmallMeth(29);
        for (f = 17; 356 > f; ++f) {
            Test.sFld <<= (short)i9;
            i += (int)(f * Test.instanceCount);
            for (i10 = 1; i10 < 74; ++i10) {
                Test.instanceCount += (i10 | i);
                for (i12 = 1; i12 < 2; ++i12) {
                    by1 *= (byte)Test.instanceCount;
                }
                Test.fFld += ((long)i10 ^ (long)i9);
                i11 -= -7296;
                for (i14 = 1; i14 < 2; i14++) {
                    dFld -= 26.1001F;
                    Test.instanceCount = i11;
                    iArr1[(int)(f - 1)] += i10;
                }
                i11 = -55389;
                dFld = f;
                for (i16 = (int)(f); i16 < 2; ++i16) {
                    i9 ^= (int)Test.instanceCount;
                }
                Test.sFld += (short)(((i10 * i11) + i) - f);
                Test.lArrFld[i10] = 9;
            }
            i9 -= (int)f;
        }
        for (i18 = 12; i18 < 329; ++i18) {
            i *= i12;
            i19 += (-3 + (i18 * i18));
            if (Test.bFld) break;
            if (Test.bFld) {
                i13 += i18;
                i15 = (int)Test.instanceCount;
                Test.fFld += i12;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
