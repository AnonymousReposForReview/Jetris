package tests.javafuzzer109;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static short sFld=-4839;
    public float fFld=0.642F;
    public static int iFld=-30847;
    public static long lFld=-64800L;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -109);
        FuzzerUtils.init(Test.sArrFld, (short)-15004);
        FuzzerUtils.init(Test.lArrFld, -3730702975L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i2=-121, i3=-18567, i4=6, i5=9, i6=1;
        double d1=-2.90488, dArr[]=new double[N];
        float f1=2.180F;

        FuzzerUtils.init(dArr, -16.105512);

        i2 += 231;
        try {
            for (i3 = 12; i3 < 226; i3 += 2) {
                i4 *= i3;
                dArr[i3] += i4;
                i5 = 1;
                do {
                    i6 = 1;
                    while (++i6 < 1) {
                        d1 = d1;
                        i4 -= (int)Test.instanceCount;
                    }
                    i4 -= i3;
                    Test.instanceCount -= i2;
                    f1 += (float)d1;
                } while (++i5 < 15);
                i4 |= i6;
                i4 *= (int)l;
            }
            Test.sFld += (short)i4;
        }
        catch (ArithmeticException exc1) {
            Test.sFld <<= (short)l;
        }
        vMeth2_check_sum += l + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i, int i1) {

        int i7=-5, i8=-183, i9=-10;
        float f2=0.352F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -30L);

        vMeth2(Test.instanceCount);
        for (long l1 : lArr) {
            i7 = 1;
            do {
                boolean b=false;
                long l2=-152L;
                Test.iArrFld[i7] = Test.sFld;
                i1 = i7;
                i = i7;
                if (b) break;
                f2 += i;
                Test.instanceCount += i7;
                for (i8 = 1; i8 < 2; i8++) {
                    if (b) break;
                    Test.instanceCount -= i7;
                    i -= (int)Test.instanceCount;
                }
                f2 += (((i7 * l2) + i8) - i8);
                Test.sArrFld[i7] &= (short)32435;
            } while ((i7 += 2) < 4);
        }
        vMeth1_check_sum += i + i1 + i7 + Float.floatToIntBits(f2) + i8 + i9 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, double d) {

        int i10=45825, i11=11, i12=-7, i13=43552, i14=-29068, i15=197, i16=32216, i17=-70;
        boolean b1=true;
        long l3=8523942584839060030L;

        vMeth1(i10, i10);
        i10 -= i10;
        switch (((-6 >>> 1) % 9) + 90) {
        case 90:
            for (i11 = 5; i11 < 163; i11++) {
                Test.instanceCount += -201;
                if (b1) {
                    i13 += (int)d;
                    for (i14 = 1; i14 < 10; ++i14) {
                        i16 = 1;
                        do {
                            i10 += i16;
                            i10 = i16;
                            Test.instanceCount = i14;
                            i12 = (int)53122L;
                            if (i11 != 0) {
                                vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i10 + i11 +
                                    i12 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + l3;
                                return;
                            }
                            Test.instanceCount <<= i14;
                        } while (++i16 < 2);
                    }
                } else if (b1) {
                    Test.lArrFld[i11 + 1] = i16;
                }
            }
            break;
        case 91:
            i12 -= 1;
            break;
        case 92:
            i10 >>= i12;
            break;
        case 93:
            i17 = i15;
            break;
        case 94:
            Test.instanceCount = i10;
            break;
        case 95:
            Test.lArrFld[(i10 >>> 1) % N] = i14;
        case 96:
            Test.instanceCount *= (long)d;
        case 97:
            i12 += i16;
            break;
        case 98:
            l3 *= (long)d;
            break;
        default:
            i17 = (int)-4242013208961810333L;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + i15 +
            i16 + (b1 ? 1 : 0) + i17 + l3;
    }

    public void mainTest(String[] strArr1) {

        byte by=76;
        int i18=-12, i19=39, i20=-185, i21=0, i22=-108, i23=36791;
        boolean b2=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        by += (byte)Test.instanceCount;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)52);
        vMeth(fFld, 2.128977);
        Test.iFld <<= (int)-7205646145789176524L;
        for (i18 = 9; i18 < 232; i18++) {
            for (i20 = 7; i20 < 113; ++i20) {
                i19 >>= i18;
                Test.iFld += Test.iFld;
                switch (((i18 % 2) * 5) + 84) {
                case 92:
                    Test.instanceCount += i20;
                    Test.iFld *= i18;
                    by = (byte)i19;
                    Test.iArrFld[i20 - 1] *= i21;
                    break;
                case 88:
                    Test.iFld += (i20 * i20);
                    i21 = (int)Test.instanceCount;
                    if (true) {
                        try {
                            i21 = (Test.iFld / -55200);
                            i19 = (55474 % i19);
                            Test.iFld = (Test.iArrFld[i20 + 1] / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        if (b2) break;
                    } else if (true) {
                        i19 += (int)1.39288;
                        i19 -= by;
                        switch ((i18 % 8) + 119) {
                        case 119:
                            switch (((i18 % 2) * 5) + 116) {
                            case 122:
                            case 118:
                            default:
                                if (false) continue;
                            }
                            break;
                        case 120:
                            Test.instanceCount >>= i19;
                            Test.iArrFld[i18] = 12372;
                            for (i22 = 2; i22 > 1; --i22) {
                                fFld /= (float)38.60135;
                                Test.iFld *= (int)Test.instanceCount;
                                Test.sFld %= (short)(Test.iFld | 1);
                                bArr[i20] = b2;
                            }
                        case 121:
                        case 122:
                            by -= (byte)Test.instanceCount;
                        case 123:
                            Test.sArrFld[i18] = (short)Test.instanceCount;
                        case 124:
                            Test.lArrFld[i20 - 1] >>= i19;
                            break;
                        case 125:
                            if (b2) break;
                        case 126:
                        default:
                            Test.iArrFld[i20 - 1] <<= i19;
                        }
                    } else if (b2) {
                        fFld -= Test.lFld;
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
