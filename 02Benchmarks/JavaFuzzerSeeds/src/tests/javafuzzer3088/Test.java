package tests.javafuzzer3088;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:34:47 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public volatile float fFld=-2.582F;
    public volatile short sFld=31597;
    public static boolean bFld=false;
    public int iFld=215;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)73);
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 118L);
        FuzzerUtils.init(Test.iArrFld1, 6);
    }

    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1) {

        int i7=-200, i8=46894, i9=-5568, i10=6097;
        short s=-11533;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.984F);

        i7 -= i7;
        Test.instanceCount = Test.instanceCount;
        i8 = 1;
        while (++i8 < 226) {
            for (i9 = i8; i9 < 7; ++i9) {
                Test.iArrFld[i9] >>>= 44385;
                f1 %= (i7 | 1);
                Test.instanceCount <<= i7;
                if (i7 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + s +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                switch (((i9 >>> 1) % 1) + 107) {
                case 107:
                    i7 += i9;
                    fArr[i8 - 1] -= f1;
                    i10 += i10;
                    Test.instanceCount += s;
                    break;
                }
                f1 = i7;
            }
            if (true) continue;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(float f, int i6) {

        float f2=-116.113F, f3=-6.948F;
        double d=2.3887;
        int i11=24, i12=49037;
        boolean b=true, bArr[]=new boolean[N];
        short s1=6719;

        FuzzerUtils.init(bArr, true);

        vMeth(f);
        f2 = 1;
        do {
            switch ((int)(((f2 % 10) * 5) + 125)) {
            case 161:
                d = 5;
                do {
                    i6 = i6;
                    i6 += (int)((long)d ^ i6);
                    Test.iArrFld[(int)(d + 1)] *= i6;
                    try {
                        i6 = (i6 / -36829);
                        Test.iArrFld[(int)(f2)] = (i6 % i6);
                        i6 = (Test.iArrFld[(int)(f2)] / Test.iArrFld[(int)(d - 1)]);
                    } catch (ArithmeticException a_e) {}
                    i6 *= (int)Test.instanceCount;
                    for (f3 = 1; f3 < 1; f3++) {
                        b = b;
                        i11 += (int)f3;
                        i11 = 62372;
                    }
                    i11 += (int)(d * i11);
                    i6 += (int)(d * d);
                } while (--d > 0);
                break;
            case 130:
                s1 += (short)((long)f2 ^ i11);
                break;
            case 151:
                i11 = i12;
                break;
            case 136:
                if (false) continue;
                break;
            case 152:
                i12 += (int)Test.instanceCount;
                break;
            case 174:
                bArr[(int)(f2 - 1)] = b;
                break;
            case 134:
                i6 += (int)(((f2 * f2) + Test.instanceCount) - i12);
                break;
            case 162:
                Test.iArrFld[(int)(f2 - 1)] -= -13;
            case 132:
                Test.instanceCount += Test.instanceCount;
                break;
            case 167:
                f += (((f2 * i11) + s1) - i6);
                break;
            }
        } while (++f2 < 358);
        long meth_res = Float.floatToIntBits(f) + i6 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f3) + i11 + (b ? 1 : 0) + s1 + i12 + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(int i, int i1) {

        int i2=-7, i3=-3, i4=-8, i5=-34, i13=-11585, i14=1, i15=-8, iArr[]=new int[N];
        float f4=-1.358F;

        FuzzerUtils.init(iArr, 243);

        Test.instanceCount = iArr[(i1 >>> 1) % N];
        for (i2 = 388; 5 < i2; i2 -= 3) {
            for (i4 = 1; i4 < 12; i4++) {
                Test.byArrFld[i2 - 1] *= (byte)(lMeth(f4, i5) * i3);
                i1 /= (int)-2021L;
                i3 *= -103;
            }
            i5 *= (int)Test.instanceCount;
            i3 ^= i5;
            i1 = (int)Test.instanceCount;
            for (i13 = i2; 12 > i13; i13++) {
                i15 = 1;
                do {
                    Test.bArrFld[i15 + 1] = true;
                    i5 += (int)Test.instanceCount;
                    i = i1;
                    i1 += (24766 + (i15 * i15));
                } while (++i15 < 1);
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f4) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=-54835, i17=-4, i18=-10749, i19=-19655, i20=28868, i21=0, i22=52403, i23=99, i24=244;
        byte by=91;
        double d1=-18.125634;

        fFld *= byMeth(-45120, 5);
        i16 -= i16;
        fFld -= i16;
        i16 |= i16;
        for (i17 = 300; i17 > 2; i17--) {
            sFld += (short)(((i17 * i17) + i17) - Test.instanceCount);
            Test.lArrFld = Test.lArrFld;
            i19 = 1;
            do {
                Test.iArrFld[i17] = i19;
                i18 += i17;
                i16 -= i17;
                if (Test.bFld) {
                }
                i20 = 1;
                do {
                    Test.iArrFld1 = Test.iArrFld1;
                    i16 += i18;
                    i16 += (i20 | by);
                    i16 += (((i20 * i20) + i16) - fFld);
                    Test.iArrFld1[i17 - 1][i20] = (int)fFld;
                    i16 %= (int)(i18 | 1);
                    i16 <<= (int)Test.instanceCount;
                    i18 %= (int)(i19 | 1);
                } while ((i20 += 3) < 1);
            } while (++i19 < 84);
            d1 += Test.instanceCount;
            i21 = 1;
            do {
                iFld += i21;
            } while (++i21 < 84);
        }
        for (i22 = 271; i22 > 15; i22 -= 2) {
            Test.iArrFld[i22 - 1] *= -197;
            i16 ^= -209;
            i24 = 196;
            do {
                fFld += 10;
                Test.instanceCount %= (Test.instanceCount | 1);
            } while (--i24 > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
