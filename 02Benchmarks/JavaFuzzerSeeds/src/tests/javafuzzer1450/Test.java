package tests.javafuzzer1450;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:50:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1747723463L;
    public static long lFld=-7914513203262035267L;
    public static boolean bFld=true;
    public static volatile short sFld=-23959;
    public static volatile int iFld=-9;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 23294);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, int i1) {

        int i2=-46013, i3=7, i4=122, i5=3, i6=23, i7=11;
        short s=19064, sArr[]=new short[N];
        byte byArr[]=new byte[N], byArr1[]=new byte[N];

        FuzzerUtils.init(sArr, (short)-19425);
        FuzzerUtils.init(byArr, (byte)-35);
        FuzzerUtils.init(byArr1, (byte)-107);

        for (i2 = 19; i2 < 324; ++i2) {
            for (i4 = 1; i4 < 5; ++i4) {
                Test.iArrFld[i2] = (int)Test.instanceCount;
                switch ((((i4 >>> 1) % 2) * 5) + 109) {
                case 115:
                    sArr[i4 - 1] *= (short)163;
                    byArr = byArr1;
                    i1 = -178;
                    break;
                case 119:
                    for (i6 = 1; 2 > i6; i6++) {
                        i5 += (((i6 * i2) + Test.lFld) - i4);
                        Test.instanceCount -= i2;
                        switch (((i1 >>> 1) % 9) + 91) {
                        case 91:
                            Test.iArrFld[i6] += 4076;
                            Test.iArrFld[i6 - 1] <<= i2;
                            Test.lFld += (i6 | i6);
                        case 92:
                            i5 += i5;
                        case 93:
                            Test.iArrFld[i2] = i6;
                        case 94:
                            i3 *= i7;
                            break;
                        case 95:
                            Test.iArrFld[i4] -= -27846;
                        case 96:
                            Test.instanceCount += (-7L + (i6 * i6));
                            break;
                        case 97:
                            Test.iArrFld[i2] -= (int)Test.lFld;
                            break;
                        case 98:
                            s -= (short)i5;
                            break;
                        case 99:
                            i1 += i6;
                            break;
                        default:
                            i7 += -8;
                        }
                    }
                }
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + i1 + i2 + i3 + i4 + i5 + i6 + i7 + s + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(byArr1);
    }

    public static void vMeth1(long l1, float f1, long l2) {

        int i8=-54321, i9=-235, i10=-9, i11=-132, i12=148, i13=-58471, i14=6, i15=-9600, i16=-11035;
        byte by=-55;

        vMeth2(Test.bFld, i8);
        for (i9 = 19; 370 > i9; ++i9) {
            i11 = 1;
            while (++i11 < 5) {
                i8 ^= (int)-77L;
            }
            i10 += i11;
            i12 = 1;
            while (++i12 < 5) {
                for (i13 = 1; 1 > i13; ++i13) {
                    i14 = i9;
                }
                Test.iArrFld[i12] *= 6;
                i8 -= i14;
                for (i15 = 1; i15 < 1; i15++) {
                    Test.iArrFld[i12 + 1] >>= 204;
                }
                i10 += (((i12 * i8) + i10) - i13);
                by += (byte)(i12 ^ l2);
                f1 = i15;
            }
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f1) + l2 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + by;
    }

    public static void vMeth(long l, int i, double d) {

        float f=-2.272F;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 24675);

        i += (int)(f++);
        i &= iArr[(i >>> 1) % N];
        vMeth1(l, f, 3L);
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=-5928, i18=-9331, i19=167, i20=40, i21=-19900, i22=5, i23=-3, i24=99, i25=-9, i26=5, i27=-5;
        double d1=67.100545;
        long l3=-69L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);

        vMeth(35L, i17, d1);
        i17 += i17;
        for (i18 = 8; i18 < 249; ++i18) {
            for (i20 = i18; i20 < 104; i20++) {
                for (i22 = 1; i22 < 1; ++i22) {
                    i23 = (int)Test.lFld;
                }
                i23 <<= i19;
                Test.instanceCount += Test.lFld;
                for (l3 = 1; 1 > l3; ++l3) {
                    fArrFld[i18] = Test.sFld;
                    lArr[(int)(l3 - 1)] *= i21;
                    d1 *= i20;
                    if (Test.bFld) break;
                }
                for (i25 = 1; i25 > 1; i25 -= 3) {
                    i23 -= i20;
                }
                i27 = 1;
                while (++i27 < 1) {
                    float f2=-1.991F;
                    d1 *= i17;
                    i17 = 35044;
                    i24 *= (int)f2;
                    Test.iFld = i19;
                }
                Test.iFld = i21;
                if (Test.bFld) break;
                Test.bFld = Test.bFld;
                i24 += i20;
            }
            lArr[i18] -= (long)d1;
            Test.iFld -= i26;
        }
        Test.iArrFld = Test.iArrFld;
        Test.iFld += Test.iFld;
        i19 <<= (int)Test.instanceCount;
        i23 = 0;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
