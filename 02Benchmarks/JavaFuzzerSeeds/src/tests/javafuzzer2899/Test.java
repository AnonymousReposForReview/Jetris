package tests.javafuzzer2899;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:43:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static int iFld=-19300;
    public static float fFld=2.397F;
    public static byte byFld=-15;
    public boolean bFld=true;
    public int iFld1=110;
    public int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 94.77097);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, int i7) {

        short s=-15193;
        int i8=34455, i9=9, i10=-12174, i11=-228, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 8827);

        Test.iFld >>= i7;
        s += (short)Test.instanceCount;
        Test.byFld = (byte)i7;
        for (i8 = 4; i8 < 124; ++i8) {
            Test.instanceCount = i6;
            i7 += Test.iFld;
            Test.instanceCount += i6;
            i10 = 1;
            while (++i10 < 13) {
                iArr[i10 - 1] ^= Test.iFld;
                Test.iFld += (((i10 * Test.fFld) + i7) - i8);
                i11 = 1;
                do {
                    Test.iFld += i11;
                    Test.iFld += i11;
                    i9 = (int)Test.instanceCount;
                    i6 += (((i11 * Test.fFld) + i6) - i9);
                } while (++i11 < 1);
            }
        }
        long meth_res = i6 + i7 + s + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        long l2=5763841630217407294L;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 10097);

        Test.instanceCount -= ((Test.iFld--) + (1 - (Test.instanceCount - l2)));
        lMeth(Test.iFld, Test.iFld);
        l2 += Test.iFld;
        iArr1[(62484 >>> 1) % N] = (int)l2;
        iArr1[(Test.iFld >>> 1) % N] -= Test.iFld;
        Test.instanceCount -= Test.iFld;
        vMeth_check_sum += l2 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l1, int i, int i1) {

        int i2=-50221, i3=13, i4=8446, i5=-36672;
        boolean b=false;
        double d1=-86.120044;
        byte by=105;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.185F);
        FuzzerUtils.init(lArr, 14310L);

        for (i2 = 1; i2 < 379; i2++) {
            fArr[i2] -= (float)Test.dArrFld[i2 - 1];
            Test.instanceCount -= Math.max((i2 - -14854) + (i + 1523), (int)((l1 - 15723) + (i2 - Test.fFld)));
            for (i4 = 1; i4 < 4; i4 += 3) {
                i5 += (int)(++lArr[i2 + 1]);
                if (false) {
                    i5 += (i4 * i1);
                    b = (((d1 != -7056) & (b || true)) != (b = false));
                } else if (true) {
                    l1 += (long)((i3++) * d1);
                    by *= (byte)(i3++);
                    i += i4;
                    Test.fFld *= (float)d1;
                } else if (b) {
                    vMeth();
                    i1 += (((i4 * i3) + i2) - Test.instanceCount);
                    fArr[i2 - 1] += (float)d1;
                }
            }
        }
        long meth_res = l1 + i + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.76707;
        long l=-12L;
        float f=0.257F, fArr1[]=new float[N];
        int i12=10123, i13=-51393, i14=-171, i15=-11, i16=1, i17=-78, i18=-161;
        short s1=236;

        FuzzerUtils.init(fArr1, -6.219F);

        iArrFld[(Test.iFld >>> 1) % N] += (int)(Math.min(10L, (long)(Test.iFld - d)) + ((Test.iFld + Test.iFld) +
            (--l)));
        f = Math.max(iMeth(l, Test.iFld, Test.iFld) + Test.iFld, Test.iFld);
        for (i12 = 3; i12 < 396; i12++) {
            for (i14 = 4; i14 < 64; i14++) {
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.bArrFld[i16] = bFld;
                    i13 = i15;
                    i15 = 55698;
                    l |= Test.instanceCount;
                    i17 += s1;
                    i15 = i15;
                    i17 &= i15;
                    iArrFld = iArrFld;
                    if (false) break;
                    if (bFld) continue;
                }
                f = i14;
                switch ((i14 % 2) + 113) {
                case 113:
                    switch ((i14 % 3) + 78) {
                    case 78:
                        Test.instanceCount -= Test.instanceCount;
                        d -= i14;
                        break;
                    case 79:
                        i13 += (i14 * i14);
                        Test.byFld += (byte)i17;
                        Test.instanceCount += l;
                        break;
                    case 80:
                        bFld = bFld;
                        Test.iFld >>>= i16;
                        break;
                    default:
                        iArrFld[i14 + 1] = (int)Test.instanceCount;
                        switch (((i14 >>> 1) % 9) + 98) {
                        case 98:
                            i17 += (i14 | i12);
                            i15 *= i16;
                            break;
                        case 99:
                            l += 45995;
                            break;
                        case 100:
                            Test.instanceCount += (i14 | Test.iFld);
                            break;
                        case 101:
                            fArr1[i14 + 1] = Test.instanceCount;
                        case 102:
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        case 103:
                            try {
                                Test.iFld = (i14 / i12);
                                i13 = (-3024 % Test.iFld);
                                i13 = (iArrFld[i14] / i14);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 104:
                            l += -35108;
                            break;
                        case 105:
                            try {
                                iArrFld[i12] = (Test.iFld / Test.iFld);
                                iArrFld[i14 + 1] = (i16 / i13);
                                i18 = (i18 / i12);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 106:
                            iFld1 *= i12;
                            break;
                        default:
                            Test.fFld -= Test.byFld;
                        }
                    }
                    break;
                case 114:
                    l += (((i14 * i12) + iFld1) - Test.fFld);
                    break;
                default:
                    iFld1 = i12;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
