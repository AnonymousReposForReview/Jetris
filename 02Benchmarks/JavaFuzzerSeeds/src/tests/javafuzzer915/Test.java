package tests.javafuzzer915;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:31:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=187L;
    public static short sFld=32326;
    public static boolean bFld=false;
    public double dFld=54.48930;
    public static byte byArrFld[][]=new byte[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-125);
        FuzzerUtils.init(Test.iArrFld, 10792);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vMeth1(int i4, int i5) {


        i4 = (i5--);
        vMeth1_check_sum += i4 + i5;
    }

    public static byte byMeth(byte by, int i8, int i9) {

        int i10=-6, i11=-159, i12=0, iArr[]=new int[N];
        long l1=122L;
        float f=1.1019F;
        double d=-79.95080;

        FuzzerUtils.init(iArr, 4);

        for (i10 = 16; i10 < 366; i10++) {
            iArr[i10] /= (int)(i11 | 1);
            i12 = 1;
            while (++i12 < 5) {
                l1 = 1;
                while (++l1 < 1) {
                    i11 += (int)l1;
                    Test.byArrFld[i12 + 1][i12 + 1] = (byte)-10;
                    if (Test.bFld) break;
                    f = i8;
                    Test.sFld += (short)l1;
                    by += (byte)(((l1 * i11) + i12) - f);
                    i11 &= 79;
                    switch ((int)((l1 % 6) + 72)) {
                    case 72:
                        i8 -= (int)f;
                        i9 = (int)d;
                        i8 += (int)(2.185F + (l1 * l1));
                    case 73:
                        i11 += (int)l1;
                        break;
                    case 74:
                        iArr[i12 - 1] += i12;
                        break;
                    case 75:
                        i11 += (int)(l1 * l1);
                    case 76:
                        by += (byte)(((l1 * l1) + i12) - i9);
                        break;
                    case 77:
                        by = (byte)Test.instanceCount;
                        break;
                    }
                }
            }
        }
        long meth_res = by + i8 + i9 + i10 + i11 + i12 + l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i6, long l, int i7) {

        byte by1=100;
        int i13=-2, i14=36303, i15=64, i16=0;
        float f1=0.309F, fArr[]=new float[N];
        double d1=-1.94295;

        FuzzerUtils.init(fArr, -84.256F);

        Test.sFld = byMeth(by1, i6, i7);
        for (i13 = 19; 326 > i13; ++i13) {
            i14 += (((i13 * i13) + i6) - i14);
            i14 -= (int)-2.143F;
            i6 += (int)f1;
        }
        i6 = (int)174L;
        d1 += i14;
        for (i15 = 341; i15 > 12; i15 -= 2) {
            i14 += (i15 | i16);
            Test.instanceCount += l;
            Test.iArrFld[i15] += by1;
            f1 = i16;
            fArr[i15 - 1] -= i14;
            f1 -= 48;
        }
        Test.iArrFld[(28832 >>> 1) % N] -= -3;
        long meth_res = i6 + l + i7 + by1 + i13 + i14 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i15 +
            i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=-9, i3=37638, i17=-123, i18=44309, i19=0, i20=-40137;
        double d2=-2.48392;
        float fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 0.468F);
        FuzzerUtils.init(lArr, -7L);

        for (i2 = 13; i2 < 296; i2++) {
            vMeth1(i2, i2 - iMeth(i3, 39145L, i3));
            fArr1[(-58435 >>> 1) % N] *= 29178;
        }
        for (i17 = 12; 324 > i17; i17++) {
            lArr[i17 - 1] = i3;
            d2 -= Test.sFld;
            for (i19 = 1; i19 < 5; ++i19) {
                i3 >>= (int)Test.instanceCount;
                if (i19 != 0) {
                    vMeth_check_sum += i2 + i3 + i17 + i18 + Double.doubleToLongBits(d2) + i19 + i20 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                if (i20 != 0) {
                    vMeth_check_sum += i2 + i3 + i17 + i18 + Double.doubleToLongBits(d2) + i19 + i20 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i20 = Test.sFld;
                if (Test.bFld) continue;
                Test.instanceCount += i3;
                Test.iArrFld[i19] = 251;
            }
            i3 *= Test.sFld;
        }
        vMeth_check_sum += i2 + i3 + i17 + i18 + Double.doubleToLongBits(d2) + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=19, i1=4, i21=-14;
        byte by2=-90;
        double d3=-38.52727;
        float f3=0.675F, f4=-1.736F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 44968L);

        for (i = 1; i < 240; ++i) {
            short s=14001;
            s = (short)i1;
            i1 += 22939;
            vMeth();
            i1 >>= by2;
            for (d3 = 2; d3 < 105; d3++) {
                dFld -= -14;
                i21 &= by2;
                lArr1[i] = i;
                f3 -= 223L;
                Test.iArrFld = Test.iArrFld;
                i21 += (int)Test.instanceCount;
                Test.instanceCount += i21;
                i1 += (int)(((d3 * i) + Test.instanceCount) - i21);
            }
            i21 = 14;
            i1 -= i1;
            Test.instanceCount >>= Test.instanceCount;
            Test.iArrFld[i] += (int)f4;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
