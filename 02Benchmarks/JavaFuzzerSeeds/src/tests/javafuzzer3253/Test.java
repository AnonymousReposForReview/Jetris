package tests.javafuzzer3253;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:44:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-34L;
    public static byte byFld=-127;
    public static short sFld=-24450;
    public static boolean bFld=false;
    public float fFld=14.754F;
    public int iArrFld[]=new int[N];
    public static volatile int iArrFld1[]=new int[N];
    public static int iArrFld2[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -12);
        FuzzerUtils.init(Test.iArrFld2, -56409);
        FuzzerUtils.init(Test.fArrFld, 0.361F);
        FuzzerUtils.init(Test.lArrFld, 23L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(short s, int i3) {

        int i4=0, i5=-196, i6=55127, i7=97, i8=0, i9=8;

        i3 *= (int)-248L;
        for (i4 = 21; i4 < 387; i4++) {
            Test.instanceCount = i4;
            for (i6 = 1; i6 < 5; i6++) {
                i8 = 1;
                do {
                    i7 /= (int)(i6 | 1);
                    i5 += i7;
                } while (++i8 < 2);
                i9 = 1;
                while (++i9 < 2) {
                    float f1=0.169F;
                    s += (short)(i9 * i9);
                    i7 -= i9;
                    Test.instanceCount += (i9 - f1);
                }
                Test.iArrFld1[i6] = i3;
                Test.iArrFld1[i6] *= i7;
                Test.instanceCount -= 4920108942856139852L;
                Test.byFld += (byte)(i6 | i9);
            }
        }
        vMeth_check_sum += s + i3 + i4 + i5 + i6 + i7 + i8 + i9;
    }

    public static int iMeth(int i1, int i2) {

        int i10=21643, i11=-234;
        float f2=0.455F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 927046690L);

        vMeth(Test.sFld, -233);
        for (long l1 : lArr) {
            Test.instanceCount |= 150;
        }
        for (i10 = 7; 223 > i10; ++i10) {
            if (i2 != 0) {
            }
            f2 = 1;
            while (++f2 < 7) {
                i2 *= Test.sFld;
                i11 = i11;
                i2 += (int)Test.instanceCount;
                Test.bFld = Test.bFld;
                i1 = (int)5587976955657830244L;
                Test.instanceCount = i2;
                i2 += (int)(f2 * i10);
                i11 += (int)f2;
                i2 -= Test.byFld;
            }
        }
        long meth_res = i1 + i2 + i10 + i11 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(int i, long l) {

        byte by=4;
        int i12=-10783, i13=-157;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-2119);

        i += (int)(((++iArrFld[(i >>> 1) % N]) + Math.min(15L, l)) + iArrFld[(30658 >>> 1) % N]);
        by = (byte)iMeth(-13686, i);
        sArr[(i >>> 1) % N] *= (short)i;
        i <<= i;
        i12 = 1;
        while (++i12 < 176) {
            i13 = 9;
            while ((i13 -= 2) > 0) {
                i = -7177;
            }
            i += (int)l;
            i -= by;
            Test.instanceCount += i12;
            fFld = i;
        }
        i = (int)l;
        long meth_res = i + l + by + i12 + i13 + FuzzerUtils.checkSum(sArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.117F;
        int i14=-10, i15=-13, i16=0, i17=6, i18=56740, i19=3, i20=173, i21=6116, i22=-145, i23=-56135, i24=-56449,
            i25=-41;
        double d=23.39624, d1=10.81594;

        f -= (float)dMeth(12, Test.instanceCount);
        i14 = (int)Test.instanceCount;
        for (i15 = 11; i15 < 382; i15++) {
            for (i17 = 1; i17 < 68; ++i17) {
                fFld = i14;
                Test.sFld >>= (short)43;
                Test.iArrFld2[i17 - 1] = (int)Test.instanceCount;
                i18 = i17;
            }
            i14 += (((i15 * f) + Test.instanceCount) - Test.instanceCount);
            i18 += i15;
        }
        switch ((((i16 >>> 1) % 3) * 5) + 124) {
        case 128:
            i19 = 1;
            while (++i19 < 162) {
                if (Test.bFld) continue;
            }
            Test.instanceCount = i14;
            break;
        case 131:
            d = Test.instanceCount;
            i18 >>= i17;
            i16 = i17;
        case 125:
            for (d1 = 4; d1 < 347; ++d1) {
                for (i21 = 4; i21 < 73; ++i21) {
                    for (i23 = 2; 1 < i23; i23 -= 2) {
                        Test.fArrFld[i23 - 1][i21] *= i20;
                        iArrFld[i23] += i18;
                        Test.byFld += (byte)i23;
                    }
                    fFld += Test.instanceCount;
                    i22 = (int)Test.instanceCount;
                    Test.lArrFld[(int)(d1 + 1)][(int)(d1)] = Test.instanceCount;
                }
                i16 *= i21;
                i25 = 73;
                do {
                    try {
                        i24 = (i25 / iArrFld[(int)(d1 - 1)]);
                        i16 = (-22708 / Test.iArrFld2[(int)(d1 - 1)]);
                        i18 = (iArrFld[i25 + 1] / i19);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld2[(int)(d1 + 1)] -= (int)fFld;
                } while (--i25 > 0);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
