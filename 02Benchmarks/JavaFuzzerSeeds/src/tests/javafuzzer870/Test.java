package tests.javafuzzer870;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:56:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=23684L;
    public double dFld=-117.106020;
    public static float fFld=0.83F;
    public long lFld=4825882960610822766L;
    public static double dFld1=45.38736;
    public static byte byFld=-34;
    public boolean bFld=true;
    public static volatile float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 103.600F);
        FuzzerUtils.init(Test.dArrFld, 0.24358);
        FuzzerUtils.init(Test.iArrFld, -20);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b) {

        int i3=173, i4=56, i5=49, i6=-59761, i7=-52156, i8=-122, iArr[][]=new int[N][N];
        double d=113.10059;

        FuzzerUtils.init(iArr, 47673);

        i3 *= (int)Test.fFld;
        Test.fArrFld[(i3 >>> 1) % N] *= Test.instanceCount;
        for (i4 = 16; i4 < 258; ++i4) {
            i3 %= (int)(i4 | 1);
            i3 = (int)Test.instanceCount;
            iArr = FuzzerUtils.int2array(N, (int)-4);
            if (b) continue;
            i3 <<= i5;
        }
        i5 = (int)d;
        for (i6 = 308; i6 > 7; i6 -= 2) {
            Test.instanceCount += i6;
            i8 = 1;
            do {
                Test.instanceCount *= i5;
                i7 = i8;
            } while (++i8 < 11);
            Test.fFld += (i6 * i6);
        }
        vMeth2_check_sum += (b ? 1 : 0) + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i1, int i2) {

        boolean b1=true;
        int i9=38220, i10=-153, i11=-6875, i12=-13800, i13=33886, i14=9, iArr1[]=new int[N];
        float f=-96.361F;
        double d1=2.72440, d2=-2.13419;
        byte by=-90;

        FuzzerUtils.init(iArr1, 88);

        vMeth2(b1);
        i2 *= i2;
        Test.fArrFld[(i2 >>> 1) % N] -= i1;
        for (i9 = 8; i9 < 138; i9++) {
            for (i11 = i9; i11 < 12; i11++) {
                f += Test.instanceCount;
                try {
                    i12 = (iArr1[i11] % 45);
                    i12 = (i11 / 58313);
                    iArr1[i9] = (iArr1[i9 - 1] % 206);
                } catch (ArithmeticException a_e) {}
                b1 = b1;
                d1 += i10;
                i12 -= i13;
                for (d2 = 1; d2 > 1; d2 -= 2) {
                    i2 ^= i10;
                    i12 += (int)61020L;
                    i1 -= (int)32160L;
                    Test.dArrFld[i9 + 1] %= (by | 1);
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + (b1 ? 1 : 0) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d1) + i13 + Double.doubleToLongBits(d2) + i14 + by + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i15=-32, i16=0, i17=-57, i18=-244, i19=136, i20=-9;
        byte by1=105, byArr[]=new byte[N];
        float f1=-1.796F;

        FuzzerUtils.init(byArr, (byte)-1);

        vMeth1(i15, i15);
        Test.iArrFld[(i15 >>> 1) % N] += i15;
        Test.instanceCount += -48524L;
        by1 -= (byte)19;
        Test.fFld += i15;
        i15 %= (int)(i15 | 1);
        Test.fFld += (float)Test.dFld1;
        for (i16 = 253; i16 > 9; --i16) {
            for (i18 = 1; i18 < 7; ++i18) {
                Test.dFld1 *= 5277;
            }
            for (f1 = 1; f1 < 7; f1++) {
                i19 *= (int)Test.instanceCount;
                byArr[(int)(f1)] -= (byte)Test.dFld1;
                i19 = (int)Test.instanceCount;
                Test.instanceCount *= 79;
            }
        }
        vMeth_check_sum += i15 + by1 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f1) + i20 +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=114, i21=-2, i22=-33196, i23=-44724, i24=-45643, i25=-166, i26=-168, i27=118;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3481067831L);

        dFld += Math.min(Test.instanceCount, (long)(Test.fFld - (Test.fFld + i)));
        Test.fFld = (Test.instanceCount <<= (long)((i - i) + (Test.fFld - lFld)));
        vMeth();
        i = -3693;
        i = i;
        lFld /= (i | 1);
        lFld = i;
        lFld += i;
        Test.byFld -= (byte)i;
        for (i21 = 4; i21 < 165; ++i21) {
            lFld <<= Test.instanceCount;
            Test.fFld += (((i21 * i22) + i21) - Test.byFld);
            Test.iArrFld[i21 - 1] = i22;
            Test.iArrFld[i21] &= (int)lFld;
            Test.iArrFld[i21 - 1] += (int)Test.instanceCount;
            for (i23 = 156; i23 > i21; i23--) {
                for (i25 = 1; 1 > i25; i25++) {
                    i26 = (int)Test.instanceCount;
                    bFld = bFld;
                    lArr[i25 + 1] >>= -192L;
                    i22 += (int)(213L + (i25 * i25));
                    Test.fFld = lFld;
                    i24 += (((i25 * i21) + i23) - i22);
                    if (bFld) continue;
                    Test.instanceCount = lFld;
                }
                Test.fArrFld[i23] = i22;
                lArr[i21] *= Test.instanceCount;
                i27 = 1;
                do {
                    lFld += i26;
                    i *= (int)-2.61F;
                } while (++i27 < 1);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
