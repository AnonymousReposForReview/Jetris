package tests.javafuzzer2319;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:15:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=146L;
    public static int iFld=14;
    public static float fFld=53.133F;
    public static boolean bFld=false;
    public static volatile int iFld1=-28968;
    public double dFld=94.61281;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -21510);
        FuzzerUtils.init(Test.lArrFld, -1143440178L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, double d, long l) {

        int i4=0, i5=-11, i6=-3, i7=1, i8=-2685, i9=-6, i10=-10, i11=58926;
        boolean b=true;
        short s=-8096;
        byte by1=-105;

        Test.instanceCount = i3;
        for (i4 = 6; i4 < 180; i4++) {
            i3 += (1 + (i4 * i4));
            for (i6 = 9; i6 > 1; i6 -= 3) {
                for (i8 = 1; i8 < 5; ++i8) {
                    byte by=-105;
                    i5 += (i8 ^ by);
                    Test.fFld -= i3;
                    Test.fFld /= 11;
                    b = b;
                    i9 += (-6 + (i8 * i8));
                }
                s += (short)(((i6 * i7) + l) - Test.fFld);
                for (i10 = 1; i10 < 5; ++i10) {
                    by1 = (byte)i5;
                }
                i9 <<= (int)l;
                l = i3;
            }
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d) + l + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + s + i10 +
            i11 + by1;
    }

    public static double dMeth(int i2) {

        double d1=60.36537;
        byte by2=49;
        int i12=57186, i13=-23703, i14=-14, iArr[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, 189);

        vMeth1(i2, d1, 1960867697L);
        i2 += (int)d1;
        Test.iFld = by2;
        for (i12 = 18; i12 < 397; i12++) {
            i14 = 1;
            do {
                switch (((i12 % 2) * 5) + 6) {
                case 11:
                    Test.iFld = 24369;
                    Test.iFld *= (int)Test.instanceCount;
                    Test.fFld += (((i14 * i13) + Test.iFld) - i12);
                    break;
                case 16:
                    i13 = (int)Test.instanceCount;
                    iArr[i14] = by2;
                    break;
                default:
                    i13 = (int)d1;
                }
                iArr[i12 - 1] |= i13;
            } while ((i14 += 2) < 4);
            try {
                iArr[i12 + 1] = (i12 % 52184);
                i2 = (i2 / -209);
                i2 = (i14 / 64858);
            } catch (ArithmeticException a_e) {}
            b1 = Test.bFld;
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + by2 + i12 + i13 + i14 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(float f) {

        int i15=-11, i16=-217, i17=-201, i18=56808;
        boolean b2=false;
        float fArr[]=new float[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(fArr, -28.952F);
        FuzzerUtils.init(dArr, 40.66542);

        fArr[(Test.iFld >>> 1) % N] = (float)dMeth(Test.iFld);
        for (i15 = 19; 397 > i15; i15++) {
            Test.iArrFld[i15 + 1] -= -19;
            i17 = 1;
            do {
                i18 = 1;
                do {
                    fArr[i15 - 1] += i18;
                    Test.lArrFld[i18 - 1] = 0;
                    Test.instanceCount += (((i18 * Test.iFld) + i17) - i18);
                    i16 *= Test.iFld1;
                    dArr[i17][i18 - 1] -= i16;
                    f *= Test.iFld;
                    Test.iFld1 /= (int)(Test.iFld | 1);
                } while (++i18 < 1);
                Test.bFld = b2;
                Test.instanceCount -= Test.instanceCount;
                Test.fFld = Test.iFld1;
            } while (++i17 < 4);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i15 + i16 + i17 + i18 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=744, i1=121, i19=14, i20=4;
        byte by3=-56;
        short s1=-28250;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.184F);

        for (i = 2; i < 209; i++) {
            vMeth(Test.fFld);
            by3 += (byte)i;
            try {
                Test.iFld1 = (Test.iFld1 % -199);
                Test.iArrFld[i] = (1987936565 % Test.iArrFld[i + 1]);
                i1 = (120 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            i1 <<= i;
            i19 = 1;
            do {
                dFld -= 1;
                i1 += (int)Test.instanceCount;
                switch ((((-4 >>> 1) % 2) * 5) + 69) {
                case 78:
                    i1 += (int)Test.instanceCount;
                    Test.iFld1 = (int)Test.fFld;
                    Test.instanceCount -= 26;
                    break;
                case 72:
                    Test.iFld *= (int)Test.instanceCount;
                    i20 = 1;
                    do {
                        Test.fFld -= Test.iFld1;
                        Test.bFld = Test.bFld;
                        dFld = i20;
                        Test.iArrFld[i20 + 1] = (int)Test.fFld;
                        i1 = Test.iFld;
                        if (Test.bFld) {
                            i1 = Test.iFld1;
                            fArr1[i19] *= 61169;
                            Test.fFld = (float)dFld;
                            Test.iArrFld[i19] += i20;
                        } else if (Test.bFld) {
                            Test.iFld1 = (int)Test.instanceCount;
                            switch ((((i19 >>> 1) % 2) * 5) + 35) {
                            case 44:
                                Test.iFld1 -= Test.iFld1;
                                i1 = s1;
                                Test.instanceCount = Test.iFld1;
                                Test.instanceCount >>>= i;
                            case 42:
                                Test.instanceCount += i1;
                                break;
                            }
                        }
                    } while ((i20 -= 2) > 0);
                    break;
                }
            } while (++i19 < 121);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
