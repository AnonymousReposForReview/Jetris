package tests.javafuzzer414;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:20:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4089950330989840790L;
    public static byte byFld=-94;
    public static short sFld=-29350;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.956F);
    }

    public static long dMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long byMeth1_check_sum = 0;

    public static byte byMeth1() {

        int i6=5, i7=24079, i8=-12, i9=-2315, i10=9, i11=-147, i12=11, iArr1[]=new int[N];
        long l=6945072243556429293L;

        FuzzerUtils.init(iArr1, 0);

        i6 -= i6;
        for (l = 1; l < 200; ++l) {
            iArr1[(int)(l + 1)] -= i7;
        }
        Test.instanceCount = 6;
        for (i8 = 167; 5 < i8; i8 -= 2) {
            i6 *= i9;
            i9 -= (int)-1.109323;
            i9 += (((i8 * i7) + i8) - i10);
            for (i11 = 1; i11 < 19; i11++) {
                if (i9 != 0) {
                }
                if (false) break;
                Test.instanceCount >>>= i12;
                i10 = i10;
            }
        }
        iArr1[(i6 >>> 1) % N] = (int)4496741379187682253L;
        Test.instanceCount -= l;
        long meth_res = i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        byMeth1_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static byte byMeth(int i5) {

        double d1=0.19762;
        int i13=10, i14=234, i15=-6, i16=-17, i17=0, i18=38;
        boolean b=true;

        byMeth1();
        d1 -= i5;
        for (i13 = 4; 160 > i13; ++i13) {
            for (i15 = 1; i15 < 10; i15++) {
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.fArrFld[i17] = (float)-116.64169;
                    if (i17 != 0) {
                    }
                    Test.instanceCount *= (long)34.158F;
                }
            }
            b = b;
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static double dMeth(int i1, int i2, int i3) {

        double d=0.27022;
        int i4=-49451, i19=45690, i20=-51353, i21=-10, i22=6;
        float f1=-63.1008F;

        for (d = 4; 197 > d; d++) {
            i4 += (int)(d + f1);
            i3 /= (int)(((i1 - byMeth(i1)) - Test.instanceCount) | 1);
            for (i19 = 1; i19 < 8; ++i19) {
                i1 *= i3;
                i20 >>= (int)Test.instanceCount;
                i2 += (int)f1;
                Test.instanceCount += (i19 * i19);
                i4 += i2;
            }
            f1 += i20;
            i4 -= (int)d;
            i2 += (int)(((d * i20) + i1) - i2);
        }
        for (i21 = 3; i21 < 310; i21++) {
            boolean b1=false;
            Test.instanceCount ^= -3;
            if (b1) continue;
        }
        long meth_res = i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i19 + i20 + i21 +
            i22;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.949F;
        int i=14502, i23=26902, i24=32300, i25=-4, i26=-11, i27=-28, i28=-160, i29=-9, i30=-250, iArr[]=new int[N];
        long l1=38138L, lArr[][]=new long[N][N];
        double d2=1.10416;

        FuzzerUtils.init(iArr, 70);
        FuzzerUtils.init(lArr, 804477831L);

        switch (((((int)(-2210499514L + f)) >>> 1) % 2) + 66) {
        case 66:
            iArr[(i >>> 1) % N] += (int)dMeth(-150, i, i);
            for (i23 = 16; i23 < 383; ++i23) {
                i24 += i23;
                i += (((i23 * Test.instanceCount) + f) - Test.byFld);
            }
            Test.instanceCount += i23;
            for (l1 = 17; 304 > l1; l1++) {
                Test.instanceCount >>= i24;
            }
            break;
        case 67:
            i -= i24;
            break;
        default:
            for (i26 = 12; i26 < 368; ++i26) {
                i24 += (i26 * i26);
                i25 += (i26 * i26);
                switch (((i26 >>> 1) % 6) + 94) {
                case 94:
                    Test.fArrFld[i26 - 1] = i23;
                    lArr[i26][i26 + 1] = i27;
                    iArr[i26 + 1] -= (int)-47152L;
                    break;
                case 95:
                    for (i28 = 71; i28 > 4; i28 -= 2) {
                        i24 = i25;
                        i29 = 17;
                        iArr[i26] = i28;
                        lArr[i28 - 1][i28 - 1] += (long)d2;
                        i29 = -117;
                        Test.instanceCount >>= i26;
                        i29 <<= Test.sFld;
                        i30 = 1;
                        do {
                            i -= 3;
                            if (false) continue;
                            i29 -= (int)-5L;
                            Test.byFld += (byte)(75.671F + (i30 * i30));
                            i29 >>= i29;
                        } while (++i30 < 3);
                    }
                    break;
                case 96:
                    i *= i;
                    break;
                case 97:
                    iArr[i26 - 1] = i30;
                    break;
                case 98:
                    iArr = iArr;
                case 99:
                    i27 = i28;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  byMeth ->  byMeth dMeth mainTest
//DEBUG  byMeth1 ->  byMeth1 byMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
