package tests.javafuzzer2322;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:20:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38L;
    public static int iFld=-1;
    public int iFld1=197;
    public static double dFld=16.74621;
    public boolean bFld=true;
    public static byte byArrFld[]=new byte[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-22);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2) {

        int i3=2, i4=25217, i5=44027, i6=-65, i7=-47;
        boolean b=true, bArr[]=new boolean[N];
        float f=2.733F;

        FuzzerUtils.init(bArr, true);

        for (i3 = 2; 179 > i3; ++i3) {
            i4 |= i4;
            bArr[i3] = b;
            i2 %= -27170;
            Test.instanceCount *= i2;
            for (i5 = 1; i5 < 9; i5++) {
                switch ((i5 % 2) + 25) {
                case 25:
                case 26:
                    f *= l;
                    break;
                default:
                    i4 -= (int)l;
                    i7 = 1;
                    while ((i7 += 3) < 2) {
                        i2 = i4;
                        if (true) continue;
                        i2 += (((i7 * f) + i3) - i2);
                        i4 = 42;
                        i2 = (int)f;
                    }
                }
            }
        }
        vMeth1_check_sum += l + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + Float.floatToIntBits(f) + i7 +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i) {

        int i1=10, i8=54, i9=-24626, i11=44911, i12=-51874, iArr[]=new int[N];
        long l1=6358746198026436979L, l2=846287311786259294L;
        double d=0.126273;
        boolean b1=false, bArr1[]=new boolean[N];
        short s=1733;
        byte by=15;

        FuzzerUtils.init(iArr, 133);
        FuzzerUtils.init(bArr1, true);

        i1 = 1;
        do {
            vMeth1(l1, -17455);
        } while (++i1 < 146);
        for (l2 = 11; l2 < 328; ++l2) {
            float f1=28.985F;
            i8 |= i8;
            i += (int)f1;
        }
        for (d = 20; d < 341; ++d) {
            if (b1) break;
            Test.instanceCount *= i9;
        }
        i9 = i1;
        for (int i10 : iArr) {
            Test.byArrFld[(i9 >>> 1) % N] = (byte)62849L;
            switch ((((i10 >>> 1) % 10) * 5) + 48) {
            case 96:
                for (i11 = 1; i11 < 4; i11++) {
                    s += (short)(i11 + i9);
                    bArr1[(i12 >>> 1) % N] = b1;
                }
                break;
            case 88:
                by *= (byte)i11;
                break;
            case 90:
                i8 = i9;
                break;
            case 84:
                i9 -= i1;
            case 66:
                iArr[(Test.iFld >>> 1) % N] += i1;
            case 59:
                i = i11;
                break;
            case 57:
                i8 <<= i12;
                break;
            case 97:
            case 81:
                l1 -= (long)d;
                break;
            case 89:
                i9 = i1;
            }
        }
        vMeth_check_sum += i + i1 + l1 + l2 + i8 + Double.doubleToLongBits(d) + i9 + (b1 ? 1 : 0) + i11 + i12 + s + by
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr1);
    }

    public static void vSmallMeth() {


        vMeth(Test.iFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i13=-7, i14=-101, i15=-104, i16=-14, i17=-5, i18=-220, i19=63, iArr1[]=new int[N];
        boolean b2=false;
        float f2=-104.430F;
        short s1=-1171;

        FuzzerUtils.init(iArr1, -11);

        for (int smallinvoc=0; smallinvoc<758; smallinvoc++) vSmallMeth();
        for (i13 = 331; i13 > 13; i13--) {
            switch ((i13 % 4) + 60) {
            case 60:
                i14 -= Test.iFld;
                b2 = b2;
                Test.iFld += i14;
                lArrFld[i13 + 1] *= Test.instanceCount;
            case 61:
                Test.iFld += (2 + (i13 * i13));
                iFld1 += iFld1;
                break;
            case 62:
                if (b2) continue;
                iFld1 >>= (int)Test.instanceCount;
                break;
            case 63:
                for (i15 = 2; i15 < 79; i15++) {
                    for (i17 = 1; i17 < 2; i17++) {
                        i18 += i18;
                        f2 += i14;
                        Test.instanceCount += (i17 * Test.instanceCount);
                        i16 = Test.iFld;
                    }
                    b2 = b2;
                    if (b2) {
                        Test.iFld = i13;
                        iFld1 += (((i15 * iFld1) + i13) - i16);
                        try {
                            iFld1 = (iFld1 % i18);
                            i14 = (-30650 % i16);
                            i16 = (Test.iFld % i15);
                        } catch (ArithmeticException a_e) {}
                    } else if (b2) {
                        s1 = (short)Test.dFld;
                        if (b2) continue;
                    } else {
                        lArrFld[i15 + 1] = Test.instanceCount;
                        switch ((i13 % 9) + 50) {
                        case 50:
                            if (true) {
                                i16 >>= i15;
                            } else {
                                i14 <<= iFld1;
                                Test.instanceCount += i16;
                            }
                            break;
                        case 51:
                            iFld1 -= (int)Test.instanceCount;
                            break;
                        case 52:
                            Test.byArrFld[i13] >>= (byte)i19;
                            break;
                        case 53:
                            iArr1[i15] -= (int)Test.instanceCount;
                            break;
                        case 54:
                            if (b2) continue;
                            break;
                        case 55:
                            Test.iFld += -12;
                            break;
                        case 56:
                            Test.instanceCount -= i14;
                        case 57:
                            if (bFld) break;
                            break;
                        case 58:
                            Test.dFld -= iFld1;
                            break;
                        default:
                            iArr1 = iArr1;
                        }
                    }
                }
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
