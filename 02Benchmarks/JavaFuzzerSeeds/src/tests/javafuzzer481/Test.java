package tests.javafuzzer481;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:32:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=161L;
    public static int iFld=-210;
    public static byte byFld=79;
    public static double dFld=-120.42349;
    public static volatile boolean bFld=false;
    public short sFld=-20360;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 71);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i2=-3, i3=0, i4=130;
        short s1=-26823;
        float f=115.335F;
        double d=2.118891;
        boolean b=true;

        i2 = 1;
        while (++i2 < 394) {
            Test.iArrFld[i2] = Test.iFld;
            Test.iFld *= s1;
            Test.byFld ^= (byte)Test.iFld;
            Test.instanceCount = (long)f;
            Test.instanceCount = (long)d;
            switch ((i2 % 4) + 56) {
            case 56:
                Test.iFld += (((i2 * Test.iFld) + Test.iFld) - l);
                Test.iFld += (i2 ^ i2);
                for (i3 = 1; i3 < 4; ++i3) {
                    if (b) break;
                    l += (i3 * l);
                    l -= i4;
                    f += i3;
                    i4 += i2;
                }
                break;
            case 57:
                Test.iFld -= Test.iFld;
                break;
            case 58:
                Test.instanceCount -= (long)d;
                break;
            case 59:
                if (b) continue;
            }
        }
        vMeth1_check_sum += l + i2 + s1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i3 + i4 + (b ? 1 : 0);
    }

    public static int iMeth() {

        int i5=-62449, i6=13419, i7=25, i8=-176, i9=-3, i10=64, i11=52889;
        float f1=29.394F;

        Test.instanceCount = Test.iArrFld[(Test.iFld >>> 1) % N];
        vMeth1(Test.instanceCount);
        for (i5 = 3; 234 > i5; ++i5) {
            for (i7 = 1; 7 > i7; ++i7) {
                f1 += (i7 * i5);
                Test.iFld <<= Test.byFld;
                try {
                    i8 = (-60297 % Test.iArrFld[i5 - 1]);
                    i6 = (Test.iFld / -833126513);
                    i8 = (703487124 / i9);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (long)Test.dFld;
            }
            if (Test.bFld) continue;
            f1 *= Test.iFld;
            for (i10 = 1; i10 < 7; ++i10) {
                Test.instanceCount = i6;
                i9 = i5;
                Test.instanceCount = i9;
                Test.instanceCount = -71;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=0, i1=-2, i12=46264, i13=190, iArr[]=new int[N];
        short s=-9370, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -31107);
        FuzzerUtils.init(sArr, (short)-8111);
        FuzzerUtils.init(lArr, 431959459876758127L);

        Test.instanceCount = ((--i) * ((i + s) * (i + 9)));
        i += iArr[(i >>> 1) % N];
        i -= (int)((Test.instanceCount++) * (Test.instanceCount + (sArr[(i >>> 1) % N]--)));
        i1 = 382;
        while (--i1 > 0) {
            i /= (int)(Math.max((int)((-159L - (i1 + i)) - iArr[i1 + 1]), iMeth()) | 1);
            i12 = 1;
            while ((i12 += 2) < 4) {
                Test.dFld = Test.instanceCount;
            }
        }
        Test.iFld += i1;
        Test.iArrFld[(5 >>> 1) % N] <<= i;
        Test.instanceCount += i12;
        switch (((i >>> 1) % 3) + 6) {
        case 6:
            if (false) {
                i13 = 1;
                do {
                    if (i12 != 0) {
                        vMeth_check_sum += i + s + i1 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    lArr[i13 + 1] -= (long)Test.dFld;
                } while (++i13 < 356);
            }
        case 7:
            Test.iFld = (int)Test.instanceCount;
            break;
        case 8:
            Test.instanceCount = i;
            break;
        default:
            Test.iFld *= i12;
        }
        vMeth_check_sum += i + s + i1 + i12 + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=164, i15=41072, i16=-14, i17=-7340, i18=-11;
        float f2=-60.27F;
        double d1=81.75505;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-11163);

        vMeth();
        i14 = 1;
        do {
            for (i15 = i14; i15 < 199; i15++) {
                sFld &= (short)118;
                for (i17 = 1; 1 > i17; i17 += 3) {
                    long l1=-2960766182L;
                    f2 = i14;
                    i16 += (i17 * i17);
                    i16 = i16;
                    f2 += i17;
                    switch ((i15 % 9) + 70) {
                    case 70:
                        i16 *= (int)f2;
                        i18 -= i15;
                        switch (((i15 % 2) * 5) + 79) {
                        case 81:
                            Test.iArrFld[i14 - 1] -= 2;
                            d1 = i14;
                            break;
                        case 89:
                            i16 += -236;
                            Test.instanceCount >>= Test.instanceCount;
                            break;
                        }
                        break;
                    case 71:
                        lArrFld[i17 + 1] >>= i18;
                        Test.iArrFld[i17 + 1] -= (int)Test.instanceCount;
                        break;
                    case 72:
                    case 73:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 74:
                        i18 -= -218;
                        Test.iArrFld[i15 + 1] = i17;
                        d1 = f2;
                        break;
                    case 75:
                        Test.iFld += i17;
                        sFld += (short)f2;
                        Test.iFld += (((i17 * Test.instanceCount) + i16) - Test.instanceCount);
                        i18 -= i18;
                    case 76:
                        sArr1[i15] >>= (short)2511L;
                        Test.bFld = Test.bFld;
                        break;
                    case 77:
                    case 78:
                        i18 += (((i17 * i17) + l1) - Test.instanceCount);
                        break;
                    }
                }
            }
        } while (++i14 < 126);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
