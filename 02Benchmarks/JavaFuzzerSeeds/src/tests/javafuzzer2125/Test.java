package tests.javafuzzer2125;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:13:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7666274879966228818L;
    public static float fFld=2.466F;
    public static double dFld=1.11158;
    public static short sFld=3438;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.fArrFld, 0.866F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, long l, long l1) {

        int i7=11, i8=-13375, i9=-12, i10=10, i11=-36537, i12=239;
        long l2=70L;

        i7 = 1;
        do {
            for (l2 = 1; l2 < 5; ++l2) {
                for (i9 = 1; i9 < 2; i9++) {
                    i10 += (i9 * i9);
                    i8 = i9;
                    l ^= l1;
                    Test.fArrFld[i7] += l1;
                    i8 += (i9 * i9);
                    i6 += (i9 * i9);
                    try {
                        i6 = (-103 / i8);
                        Test.iArrFld[i7] = (i8 % i6);
                        i10 = (i7 % -41);
                    } catch (ArithmeticException a_e) {}
                    i8 = (int)l2;
                    Test.dFld -= -63125;
                }
                for (i11 = 2; i11 > i7; --i11) {
                    i6 = i10;
                    i8 += i11;
                }
            }
        } while (++i7 < 337);
        vMeth1_check_sum += i6 + l + l1 + i7 + l2 + i8 + i9 + i10 + i11 + i12;
    }

    public static void vMeth() {

        int i3=-11585, i4=216, i13=32125, i14=-222, i15=3;
        short s=28149;
        boolean b1=true;
        long lArr[]=new long[N];
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 102L);
        FuzzerUtils.init(fArr, 0.109F);
        FuzzerUtils.init(dArr, -11.82581);

        i3 += (int)(((i3 - Test.fFld) + (-7 - (i4 * Test.instanceCount))) * Float.intBitsToFloat((int)(i3 *
            Test.instanceCount)));
        for (int i5 : Test.iArrFld) {
            i3 *= (int)((lArr[(i3 >>> 1) % N]++) - (fArr[(i3 >>> 1) % N]--));
            vMeth1(i5, Test.instanceCount, -166L);
            for (i13 = 1; i13 < 4; ++i13) {
                dArr[i13] += s;
                i15 = 1;
                while (++i15 < 2) {
                    i3 *= 0;
                    lArr[i15] >>>= i15;
                    s += (short)(i15 + Test.instanceCount);
                    i14 += (i15 ^ i4);
                }
                Test.instanceCount -= i14;
            }
            Test.instanceCount <<= i13;
            Test.iArrFld[(i15 >>> 1) % N] = i13;
            if (b1) break;
        }
        vMeth_check_sum += i3 + i4 + i13 + i14 + s + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i1, int i2) {


        vMeth();
        vSmallMeth_check_sum += i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i=59, i16=-59357, i17=-49977, i18=-120, i19=9, i20=185, i21=31962, i22=61547, i23=9808, i24=5, i25=-1,
            i26=-14;
        boolean b=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        i = 1;
        while (++i < 126) {
            b = (bArr[i + 1][i - 1] = ((--Test.instanceCount) != (-3 - (1579822881L - (i - -4316)))));
        }
        for (int smallinvoc=0; smallinvoc<655; smallinvoc++) vSmallMeth(i, i);
        i16 += i;
        for (i17 = 8; i17 < 228; i17++) {
            dArrFld[i17 - 1] += i18;
        }
        for (i19 = 314; i19 > 11; --i19) {
            for (i21 = 5; i21 < 83; i21++) {
                Test.fFld += (i21 - i17);
                i23 = 1;
                while (++i23 < 2) {
                    i20 *= i22;
                    Test.fArrFld[i19] = i17;
                    i18 = (int)Test.instanceCount;
                    i22 += (i23 - i19);
                    i18 = (int)Test.instanceCount;
                    Test.fFld = Test.instanceCount;
                    i20 *= (int)Test.fFld;
                    i18 -= i18;
                }
                i18 = (int)Test.instanceCount;
                i22 += (((i21 * i20) + Test.fFld) - Test.instanceCount);
                if (true) break;
            }
            Test.instanceCount -= 53217;
            for (i24 = 4; i24 < 83; i24++) {
                i16 |= i21;
                i16 -= i19;
            }
            i26 = 1;
            while (++i26 < 83) {
                Test.fFld -= i;
                Test.sFld = Test.sFld;
                Test.instanceCount -= (long)Test.dFld;
                i18 = i23;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
