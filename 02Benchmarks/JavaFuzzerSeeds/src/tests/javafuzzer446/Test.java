package tests.javafuzzer446;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:02:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2364505421L;
    public static float fFld=5.842F;
    public static short sFld=-26380;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(long l) {

        double d1=2.13606;

        Test.fFld = (float)(++d1);
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d1);
    }

    public static int iMeth() {

        int i4=-139;

        i4 = 55622;
        long meth_res = i4;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, double d3, int i10) {

        byte by=63;
        int i11=7879, i12=-2, i13=98, i14=0, i15=-12, i16=13, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 1);

        i10 -= by;
        i10 = (int)Test.instanceCount;
        for (i11 = 9; i11 < 289; ++i11) {
            for (i13 = 1; i13 < 6; i13++) {
                for (i15 = 2; i15 > 1; i15 -= 2) {
                    b = b;
                    b = b;
                    Test.instanceCount -= i10;
                    i14 += i15;
                }
                i14 += i10;
                iArr1[(i15 >>> 1) % N] -= (int)Test.instanceCount;
                Test.fFld -= i12;
                Test.fFld += (i13 * i13);
            }
            i16 += i11;
            iArr1[i11 + 1] += i12;
        }
        vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d3) + i10 + by + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(long l1, int i9) {

        boolean b1=true;
        double d4=2.2835;
        int i17=-57630, i18=-12, i19=21543, i20=4, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -70);
        FuzzerUtils.init(lArr, 17065L);

        vMeth(b1, d4, i9);
        i17 = 1;
        while (++i17 < 298) {
            iArr2[i17] = Test.sFld;
            for (i18 = 1; 6 > i18; ++i18) {
                i9 += (1 + (i18 * i18));
                i20 = -251;
                lArr[i17 - 1] = i18;
                i9 += (((i18 * i17) + Test.instanceCount) - l1);
            }
            switch (((i17 >>> 1) % 8) + 125) {
            case 125:
                i9 >>>= i18;
                break;
            case 126:
                i9 += i9;
                break;
            case 127:
                Test.instanceCount = i18;
                break;
            case 128:
                Test.instanceCount <<= i17;
                i9 = (int)l1;
                break;
            case 129:
                i20 = i19;
                break;
            case 130:
                i20 -= (int)2.153F;
            case 131:
                l1 >>= i18;
            case 132:
                Test.fFld = i19;
                break;
            }
        }
        long meth_res = l1 + i9 + (b1 ? 1 : 0) + Double.doubleToLongBits(d4) + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5, int i6, int i7) {

        double d2=12.103022;
        int i8=-214, i21=229, i22=10, i23=-193;
        boolean b2=false;

        for (d2 = 17; d2 < 277; d2++) {
            vSmallMeth(Test.instanceCount = Test.instanceCount);
            Test.fFld *= Math.abs(iMeth1(Test.instanceCount, i8));
            i6 <<= i7;
            Test.instanceCount *= (long)d2;
        }
        i6 += (int)Test.fFld;
        for (i21 = 7; i21 < 170; i21 += 3) {
            i22 += (int)d2;
            Test.instanceCount += (i21 | (long)Test.fFld);
            i8 += (((i21 * i5) + i8) - i5);
            i5 = i8;
            i23 = 1;
            while (++i23 < 28) {
                Test.fFld += (((i23 * i22) + Test.sFld) - Test.instanceCount);
                Test.fFld -= Test.instanceCount;
            }
            if (b2) break;
        }
        long meth_res = i5 + i6 + i7 + Double.doubleToLongBits(d2) + i8 + i21 + i22 + i23 + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=18.48179;
        int i=2, i1=-134, i2=105, i3=-168, i24=-6, i25=51596, iArr[]=new int[N];
        short s=-4962;
        float f=0.301F;
        boolean b3=false;

        FuzzerUtils.init(iArr, 65);

        for (d = 7; d < 181; d++) {
            Test.instanceCount = (++i);
            i -= (-Math.max((int)(i + 0.1015F), Integer.reverseBytes(i)));
            i = (int)(--Test.instanceCount);
            for (i1 = 144; i1 > 6; i1--) {
                i3 = 1;
                while (++i3 < 2) {
                    i2 += (int)(((Test.instanceCount * i) - Test.fFld) - 1.52355);
                }
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth((long)((-2 - (iArr[(int)(d)] += i1)) +
                    (41642 + (Test.fFld + i2))));
                iArr = (iArr = (iArr = (iArr = iArr)));
                switch (((iMeth() >>> 1) % 7) + 50) {
                case 50:
                    Test.fFld *= (-((Test.instanceCount * -40770) << (i2++)));
                    Test.fFld *= ((Math.min(i, i) + (i++)) * s);
                    vSmallMeth(((i3 - Test.instanceCount) + (-17 + (i2++))) - Test.instanceCount);
                    f -= (float)(((65134 * (d + d)) - (f++)) + (i2--));
                    break;
                case 51:
                    Test.instanceCount %= (((long)(lMeth(i, i, i) - d)) | 1);
                    b3 = b3;
                    Test.fFld = i2;
                    for (i24 = 2; 1 < i24; --i24) {
                        i = i3;
                        Test.fFld += i25;
                        switch ((((i >>> 1) % 4) * 5) + 36) {
                        case 39:
                            i &= 23057;
                            try {
                                i25 = (30163 % i3);
                                i = (i / i25);
                                i2 = (i25 / 35);
                            } catch (ArithmeticException a_e) {}
                            i25 *= i;
                        case 54:
                            i25 -= (int)f;
                            i25 |= i25;
                            break;
                        case 43:
                            Test.fFld -= i3;
                            i2 &= 216;
                            i25 += (int)Test.fFld;
                            break;
                        case 41:
                            Test.fFld -= i24;
                            break;
                        default:
                            Test.fFld = i1;
                        }
                    }
                case 52:
                    i = (int)-6059285504108889564L;
                    break;
                case 53:
                    Test.fFld -= i;
                    break;
                case 54:
                    if (false) continue;
                    break;
                case 55:
                    i25 *= i;
                case 56:
                    i25 += (((i1 * i2) + i) - i1);
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
