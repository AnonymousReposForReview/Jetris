package tests.javafuzzer3198;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:47:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=57180L;
    public static int iFld=-34700;
    public static double dFld=0.66220;
    public short sFld=-26238;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, double d) {

        int i2=245, i3=-61410, i4=-44371, i5=-11, i6=44, i7=3;
        boolean b1=true;
        float f=26.171F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6438975149641095647L);

        Test.iFld += Test.iFld;
        l1 = Test.instanceCount;
        for (i2 = 139; 7 < i2; i2--) {
            b1 = b1;
            Test.iArrFld[i2 - 1] *= Test.iFld;
            Test.iFld %= (int)(i2 | 1);
            Test.iFld *= (int)Test.instanceCount;
            for (i4 = 1; i4 < 12; i4++) {
                for (i6 = 2; 1 < i6; i6--) {
                    Test.iFld *= (int)f;
                    f -= i2;
                    if (b1) continue;
                    lArr[i6] /= ((long)(f) | 1);
                    l1 = i2;
                }
            }
            Test.instanceCount += (i2 - i2);
        }
        vMeth2_check_sum += l1 + Double.doubleToLongBits(d) + i2 + i3 + (b1 ? 1 : 0) + i4 + i5 + i6 + i7 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, boolean b) {

        int i1=3422, i8=-6, i9=-156, i10=-25166, i11=51820;
        long l2=-8L;
        float f1=95.359F;
        byte by=106;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)18282);

        i1 = 1;
        while (++i1 < 207) {
            vMeth2(l2, Test.dFld);
            for (i8 = 1; 8 > i8; ++i8) {
                i9 >>= i9;
                l2 *= l2;
                for (i10 = 1; 2 > i10; i10++) {
                    i9 *= -14;
                    l += (i10 - f1);
                    i11 *= i9;
                }
                Test.iFld -= (int)l2;
                i9 = by;
                sArr[i8 - 1] >>= (short)Test.instanceCount;
            }
            l2 = Test.instanceCount;
        }
        i9 >>= by;
        i11 <<= i1;
        vMeth1_check_sum += l + (b ? 1 : 0) + i1 + l2 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + by +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i) {


        vMeth1(Test.instanceCount, false);
        i = (int)Test.instanceCount;
        vMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        float f2=-114.762F, f3=116.694F;
        int i12=-1, i13=-12, i14=-164, i15=-155, i16=-21672, i17=-59, i18=2, i19=43898, i20=-8, i21=-14, i22=237,
            i23=-5;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth(Test.iFld);
        Test.iFld >>= sFld;
        Test.iFld *= (int)f2;
        for (i12 = 5; i12 < 136; i12++) {
            boolean b2=true;
            b2 = b2;
            Test.iFld >>= 22235;
            for (i14 = 3; i14 < 191; i14++) {
                Test.instanceCount += (((i14 * i15) + Test.instanceCount) - Test.instanceCount);
                i16 += (i14 + i16);
                i13 |= Test.iFld;
                for (i17 = 1; 2 > i17; i17++) {
                    fArrFld[i14 - 1] += (float)91.16810;
                    i13 += (i17 + f2);
                }
                try {
                    i13 = (Test.iArrFld[i12 + 1] % i17);
                    i16 = (-132 / Test.iArrFld[i14]);
                    i16 = (Test.iFld / Test.iFld);
                } catch (ArithmeticException a_e) {}
                i13 = (int)Test.instanceCount;
                Test.instanceCount = 8;
                b2 = b2;
                i16 = i16;
                Test.iFld += (50777 + (i14 * i14));
            }
            f3 *= i18;
            for (i19 = 4; i19 < 191; ++i19) {
                Test.iFld += (int)Test.dFld;
                for (i21 = 1; 2 > i21; ++i21) {
                    i20 += (i21 ^ sFld);
                    f2 += i18;
                    bArr[i21 - 1] = b2;
                    Test.iArrFld[i12 - 1] -= i12;
                    i13 *= (int)Test.instanceCount;
                    i23 = i20;
                    try {
                        Test.iFld = (Test.iArrFld[i12 - 1] % i15);
                        Test.iArrFld[i21 - 1] = (Test.iArrFld[i21] / i16);
                        i16 = (i22 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
