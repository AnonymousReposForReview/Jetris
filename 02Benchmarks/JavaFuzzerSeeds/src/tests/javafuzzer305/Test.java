package tests.javafuzzer305;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:34:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7004L;
    public static short sFld=25566;
    public static volatile double dFld=0.90621;

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, short s) {

        int i19=4, i20=60, i21=63960, i22=-48, i23=-1, i24=-5, i25=-114, i26=-109, iArr3[]=new int[N];
        double d=0.21142;

        FuzzerUtils.init(iArr3, 42983);

        i19 = 173;
        while (--i19 > 0) {
            i20 -= (int)Test.instanceCount;
            for (i21 = 1; i21 < 9; ++i21) {
                iArr3[i21] ^= i21;
            }
            try {
                i20 = (i21 / 19025);
                i20 = (i22 % -394599856);
                i22 = (i22 % i20);
            } catch (ArithmeticException a_e) {}
            i20 = (int)l;
            l = i20;
            Test.instanceCount += i19;
            d += i22;
        }
        i20 += i21;
        for (i23 = 8; i23 < 327; ++i23) {
            i20 = i22;
            for (i25 = 1; i25 < 5; i25++) {
                i20 = (int)2262366587L;
                i26 += (0 + (i25 * i25));
            }
        }
        long meth_res = l + s + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d) + i23 + i24 + i25 + i26 +
            FuzzerUtils.checkSum(iArr3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i14=-167, i15=231, i16=203, i17=190, i18=-13, i27=46, iArr2[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(lArr, -4L);

        i14 = 153;
        while (--i14 > 0) {
            for (i15 = 1; i15 < 10; i15++) {
                for (i17 = i15; i17 < 2; i17++) {
                    iArr2[i17] = iMeth1(Test.instanceCount, Test.sFld);
                    i18 += (-11 + (i17 * i17));
                    i18 -= i18;
                    Test.instanceCount += (85 + (i17 * i17));
                    iArr2[i15 - 1] = i18;
                    iArr2[i14] = -210;
                    iArr2 = FuzzerUtils.int1array(N, (int)-50459);
                    i18 += (i17 | Test.instanceCount);
                    i18 |= i17;
                }
                try {
                    i27 = (i16 % 63106);
                    i16 = (i16 / -7);
                    i27 = (i18 % -1348678959);
                } catch (ArithmeticException a_e) {}
            }
            Test.instanceCount -= -551L;
            lArr[i14 + 1][i14] >>= i27;
        }
        long meth_res = i14 + i15 + i16 + i17 + i18 + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i5, int i6, int i7) {

        int i8=3, i9=-63, i10=105, i11=-24938, i12=-21717, i13=74, i28=-48030, iArr1[]=new int[N];
        byte by=-31;
        boolean b=false;
        double d1=-1.65909;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(sArr, (short)-17134);

        for (i8 = 8; i8 < 138; i8++) {
            for (i10 = 1; 12 > i10; i10++) {
                i9 += i10;
                for (i12 = 1; i12 < 2; i12++) {
                    iArr1[i10 - 1] += (int)fMeth();
                    by += (byte)i12;
                    if (b) break;
                    sArr[i10 + 1] += by;
                    i28 += (i12 * i12);
                    iArr1[i12] = i5;
                    i13 += i8;
                    d1 = i10;
                    if (i28 != 0) {
                    }
                    i28 = i8;
                }
                Test.instanceCount += i8;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + (b ? 1 : 0) + i28 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-252, i1=52405, i2=20956, i3=-12, i4=-8, i29=-2, i30=-5, i32=1, i33=3, i34=16464, iArr[]=new int[N];
        float f=-19.26F, f1=-2.412F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 34821);
        FuzzerUtils.init(lArr1, -55588L);

        i = 1;
        do {
            i1 = 1;
            while (++i1 < 116) {
                i2 += (((i1 * Test.instanceCount) + i2) - Test.instanceCount);
                for (i3 = 1; 1 > i3; i3++) {
                    iArr[i + 1] -= iArr[i1];
                    iMeth(i, i3, i3);
                    i4 = i;
                    iArr[i3 - 1] *= (int)1.181F;
                    i4 -= 122;
                    Test.instanceCount <<= i;
                }
                Test.instanceCount += i2;
                lArr1[i1 - 1] = 12;
            }
            i2 <<= i2;
            f += Test.instanceCount;
            for (i29 = 3; i29 < 116; ++i29) {
                i4 /= (int)(i2 | 1);
            }
            i2 -= (int)-118.775F;
            i2 += i;
            i4 -= i30;
        } while (++i < 216);
        try {
            iArr[(i >>> 1) % N] -= 13;
            Test.instanceCount += i2;
            for (f1 = 23; f1 < 371; ++f1) {
                i2 = 167;
                for (i33 = 3; i33 < 72; ++i33) {
                    i32 -= 143;
                    i2 = i1;
                    i30 = -4574;
                    Test.instanceCount = (long)Test.dFld;
                    i32 -= i2;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            iArr = FuzzerUtils.int1array(N, (int)59347);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
