package tests.javafuzzer2984;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:26:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3151064218L;
    public static int iFld=3721;
    public static float fFld=1.869F;
    public static double dFld=1.64825;
    public int iArrFld[][]=new int[N][N];
    public long lArrFld[][]=new long[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9) {

        int i10=-4, i11=-67, i12=-39576, i13=-6, i14=38, i15=88, i16=49281;
        double d1=108.45258;
        short s1=25500, s2=-13231;
        float f1=1.824F;

        Test.instanceCount = Test.iFld;
        for (i10 = 9; i10 < 207; i10++) {
            Test.iFld *= (int)d1;
            i9 = i11;
        }
        for (i12 = 4; i12 < 170; i12++) {
            i11 <<= -9;
            i11 = (int)d1;
            i11 += i12;
            i14 = 1;
            while (++i14 < 10) {
                for (i15 = 1; i15 < 1; i15++) {
                    switch (((i12 >>> 1) % 3) + 101) {
                    case 101:
                        Test.instanceCount = i8;
                        s1 += (short)(i15 - f1);
                        s2 >>>= (short)4;
                        Test.instanceCount += (((i15 * Test.iFld) + i11) - i8);
                        break;
                    case 102:
                        i13 += i8;
                        break;
                    case 103:
                        s1 <<= (short)Test.iFld;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 + s1 +
            Float.floatToIntBits(f1) + s2;
    }

    public static void vMeth1(long l) {

        int i17=-9, i18=-247, i19=44, i20=21, i21=427;
        short s3=5417;
        long lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, 372059561229508317L);
        FuzzerUtils.init(byArr, (byte)-74);

        vMeth2(Test.iFld, Test.iFld);
        Test.dFld *= Test.fFld;
        lArr1[(Test.iFld >>> 1) % N] *= Test.iFld;
        Test.fFld = Test.iFld;
        i17 = 1;
        do {
            for (i18 = 1; 12 > i18; i18++) {
                l *= 16988;
                lArr1[i17 - 1] = -56218;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount = i20;
                }
                i19 |= (int)63610L;
                Test.iFld /= (int)(i19 | 1);
                i19 = s3;
                byArr = byArr;
            }
            Test.fFld *= Test.instanceCount;
        } while (++i17 < 131);
        vMeth1_check_sum += l + i17 + i18 + i19 + i20 + i21 + s3 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(byte by, int i7) {

        int i22=-248, i23=-39690, i24=-29320, i25=-14666, i26=59884, i27=-99;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -218L);

        i7 -= (int)Math.min(Long.reverseBytes((long)(Test.fFld - i7)), -2643854157L);
        i7 -= (int)lArr[(i7 >>> 1) % N];
        vMeth1(Test.instanceCount);
        Test.fFld += Test.iFld;
        for (i22 = 188; i22 > 4; --i22) {
            for (i24 = i22; i24 < 9; ++i24) {
                Test.fFld = i25;
                i25 <<= i7;
                for (i26 = 1; i26 < 1; i26++) {
                    i25 *= (int)-1053157278427482344L;
                    lArr = lArr;
                    Test.iFld = i24;
                    i23 = i7;
                    lArr[i24] -= Test.instanceCount;
                    i25 *= i24;
                }
            }
        }
        vMeth_check_sum += by + i7 + i22 + i23 + i24 + i25 + i26 + i27 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=32.281F;
        int i=-8, i1=213, i2=143, i3=8, i4=5, i5=-30966, i6=-28542, i28=63717;
        double d=-88.85548;
        short s=13389;

        Test.instanceCount = (long)((--f) * i);
        i -= (int)((++d) + (i++));
        f *= (float)((++i) + ((d + i) + Math.abs(i)));
        for (i1 = 17; 278 > i1; i1++) {
            for (i3 = 6; 96 > i3; ++i3) {
                Test.iFld *= (i2++);
                for (i5 = 1; i5 < 2; ++i5) {
                    s = (short)((Test.instanceCount++) + (Math.max(-1397149060L, Test.instanceCount) - (i6++)));
                    vMeth((byte)(-53), i3);
                }
                Test.iFld += (i3 ^ Test.instanceCount);
                Test.dFld = 4L;
                Test.instanceCount ^= i4;
                Test.instanceCount >>>= i6;
                try {
                    i2 = (i2 % i6);
                    i2 = (-63197 % i6);
                    i6 = (42817 / iArrFld[i3][i3]);
                } catch (ArithmeticException a_e) {}
                i2 += (((i3 * Test.instanceCount) + i4) - Test.instanceCount);
                i28 = 1;
                while (++i28 < 2) {
                    f *= Test.fFld;
                    i = i28;
                    i4 += i3;
                    f += (((i28 * i5) + Test.iFld) - Test.instanceCount);
                    switch ((i28 % 2) + 51) {
                    case 51:
                        lArrFld[i1 - 1][i1] += i28;
                        switch (((21009 >>> 1) % 3) + 102) {
                        case 102:
                            iArrFld[i28 + 1] = iArrFld[i28];
                            break;
                        case 103:
                            i6 *= i;
                        case 104:
                            iArrFld[i3][i1] = i4;
                            i >>= (int)Test.instanceCount;
                            i4 = (int)Test.instanceCount;
                            iArrFld[i28][i1] += (int)f;
                            break;
                        }
                        break;
                    case 52:
                        i4 = i;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
