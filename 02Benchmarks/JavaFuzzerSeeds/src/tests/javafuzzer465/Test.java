package tests.javafuzzer465;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:13:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=55847L;
    public static float fFld=-74.962F;
    public static boolean bFld=true;
    public static byte byFld=-80;
    public static volatile byte byArrFld[]=new byte[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)111);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        double d=-1.106201;
        int i11=-181, i12=-53215, i13=-59973, i14=-91, i16=-44939, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -141);

        iArr1[(17089 >>> 1) % N] -= (int)d;
        i11 = (int)Test.instanceCount;
        Test.fFld %= ((long)(d) | 1);
        for (i12 = 193; i12 > 6; i12 -= 2) {
            i14 = 1;
            while ((i14 += 3) < 17) {
                i11 -= (int)Test.instanceCount;
                i11 += (i14 | (long)Test.fFld);
                i11 -= i12;
            }
            Test.instanceCount <<= i12;
            switch ((i12 % 2) + 10) {
            case 10:
                i13 *= (int)Test.instanceCount;
                break;
            case 11:
                i16 = 1;
                do {
                    d += Test.fFld;
                    d -= Test.fFld;
                    Test.fFld -= Test.instanceCount;
                } while (++i16 < 17);
                break;
            default:
                Test.fFld = 8;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i16 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i8, float f1) {

        int i9=-33297, i10=53514, i17=42658, i18=-10, i20=14, iArr2[]=new int[N];
        float f2=0.228F, fArr[]=new float[N];
        short s=-31839;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3424697630L);
        FuzzerUtils.init(iArr2, -26);
        FuzzerUtils.init(fArr, -77.43F);

        for (i9 = 9; i9 < 165; i9++) {
            lArr[i9] = Math.max(i8++, i10--);
        }
        switch (((iMeth() >>> 1) % 9) + 118) {
        case 118:
            for (f2 = 1; f2 < 141; ++f2) {
                i8 += i17;
                iArr2[(int)(f2 - 1)] = -8;
                i18 = 1;
                do {
                    i8 = -42024;
                } while (++i18 < 11);
            }
            Test.fFld += i9;
            break;
        case 119:
            fArr[(i8 >>> 1) % N] += -32335;
            i17 = (int)l;
            i8 *= 83;
            break;
        case 120:
            iArr2[(i10 >>> 1) % N] += s;
            i8 -= i9;
        case 121:
            i17 <<= i17;
            break;
        case 122:
            l = i17;
            break;
        case 123:
            i8 = -6;
        case 124:
            i10 &= 7;
        case 125:
            i20 <<= i10;
            break;
        case 126:
            i20 -= i18;
            break;
        }
        vMeth1_check_sum += l + i8 + Float.floatToIntBits(f1) + i9 + i10 + Float.floatToIntBits(f2) + i17 + i18 + s +
            i20 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, int i1, int i2) {

        int i3=-6, i4=-7, i5=-149, i6=-16, i7=-12, i21=-24873, i22=-227, i23=-14, iArr3[]=new int[N];
        double d1=2.113957;

        FuzzerUtils.init(iArr3, 6);

        i1 = i1;
        for (i3 = 3; i3 < 231; ++i3) {
            i5 = 7;
            do {
                for (i6 = 1; i6 < 1; i6 += 2) {
                    vMeth1(Test.instanceCount, i21, -94.997F);
                    i1 += i4;
                }
                for (i22 = 1; i22 < 1; i22++) {
                    int i24=-11;
                    i4 += i22;
                    i21 *= -3;
                    i23 += (int)63336L;
                    iArr3[i22 + 1] = 52;
                    i23 = i22;
                    i7 += i6;
                    Test.bFld = Test.bFld;
                    i24 += (int)d1;
                }
            } while (--i5 > 0);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i21 + i22 + i23 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=35, i25=-10, i26=-92, i27=5, i28=37241, i29=-205, i30=-57, i31=-35865, i32=-96, iArr[]=new int[N];
        double d2=65.108438, dArr[][]=new double[N][N];
        long l1=5L;
        short s1=-1293;

        FuzzerUtils.init(iArr, -29753);
        FuzzerUtils.init(dArr, -32.129515);

        Test.instanceCount *= ((++i) * -29);
        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth(Test.fFld, i, i);
        for (i25 = 1; i25 < 242; ++i25) {
            if (Test.bFld) continue;
        }
        i -= i;
        i26 += (int)d2;
        for (i27 = 281; 11 < i27; i27 -= 3) {
            Test.fFld -= Test.instanceCount;
            i29 = 1;
            do {
                Test.instanceCount *= i26;
                for (l1 = 1; l1 > 1; l1--) {
                    i += (0 + (l1 * l1));
                    try {
                        iArr[i29 + 1] = (i27 % -18556);
                        i30 = (i27 % -1760624286);
                        i26 = (i % 74);
                    } catch (ArithmeticException a_e) {}
                    i = i26;
                }
                i30 = i25;
                s1 -= (short)-58465L;
                i28 <<= -61264;
            } while (++i29 < 278);
        }
        for (i31 = 2; i31 < 173; ++i31) {
            if (true) break;
            i30 += (int)(1838767811447573353L + (i31 * i31));
            Test.fFld = -6782;
            i26 += (-141 + (i31 * i31));
            dArr = dArr;
            Test.fFld -= i30;
            if (Test.bFld) {
                switch ((((20225 >>> 1) % 6) * 5) + 21) {
                case 44:
                    iArrFld[i31 - 1] -= (int)Test.instanceCount;
                    break;
                case 36:
                    i32 = i32;
                    iArr[i31] = i32;
                    break;
                case 26:
                    Test.instanceCount = i29;
                    break;
                case 51:
                    i32 = 7;
                    break;
                case 37:
                case 29:
                    iArr[i31 + 1] = i25;
                    break;
                }
            } else {
                Test.byFld += (byte)i31;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
