package tests.javafuzzer1643;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26160L;
    public static volatile int iFld=57;
    public static double dFld=0.84434;
    public static volatile byte byFld=112;
    public static boolean bFld=false;
    public static volatile float fFld=-55.776F;

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, long l) {

        int i9=3, i10=11, i11=-45893, i12=-90, i13=-217, i14=-232;
        byte by=62;
        double d1=-1.8402;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7920547351651680241L);

        i8 += Test.iFld;
        if (false) {
            lArr1[(i8 >>> 1) % N] >>= i8;
        } else {
            for (i9 = 16; i9 < 263; ++i9) {
                Test.iFld -= i9;
                for (i11 = 1; i11 < 7; i11++) {
                    for (i13 = 1; i13 < 2; ++i13) {
                        short s1=-334;
                        i12 += i13;
                        Test.iFld <<= (int)0L;
                        i10 = i12;
                        by += (byte)(i13 * i11);
                        s1 <<= (short)-2786482233L;
                        d1 -= i9;
                    }
                    if (false) break;
                    lArr1[i9 - 1] = l;
                }
            }
        }
        long meth_res = i8 + l + i9 + i10 + i11 + i12 + i13 + i14 + by + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i4=-179, i5=100, i6=31363, i7=-1515, i15=-10398, i16=17, iArr1[]=new int[N];
        float f=-99.140F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3781137970L);
        FuzzerUtils.init(iArr1, 108);

        Test.iFld = (int)((Test.iFld++) * ((-lArr[(75 >>> 1) % N]) * (Test.instanceCount--)));
        for (i4 = 1; i4 < 155; i4++) {
            for (i6 = 1; i6 < 10; ++i6) {
                iMeth(i7, Test.instanceCount);
                Test.iFld /= (int)(Test.iFld | 1);
                i7 -= (int)50385L;
                Test.iFld -= (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.instanceCount += (((i15 * f) + Test.instanceCount) - f);
                    i5 += (int)Test.instanceCount;
                }
                f += f;
            }
            f *= Test.instanceCount;
            Test.instanceCount -= i15;
            iArr1[i4] = i16;
            i5 <<= i7;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i15 + i16 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth() {

        int i1=-20465, i2=16274, i3=86, i17=9, iArr[]=new int[N];
        short s=-30059;
        boolean b=true;
        float f1=-1.841F;
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(dArr1, 7.79700);

        Test.instanceCount %= ((++i1) | 1);
        if (Test.bFld) {
            for (i2 = 4; i2 < 148; ++i2) {
                i1 = (int)(i2 * ((i3 - -183) - (Test.instanceCount + s)));
                Test.instanceCount += iArr[i2];
                dArr1[i2][i2] += i1;
                vMeth(Test.dFld);
                s = s;
                i3 -= i1;
                try {
                    iArr[i2] = (i3 % -43012);
                    i3 = (iArr[i2] / -218);
                    i3 = (iArr[i2 - 1] / 69);
                } catch (ArithmeticException a_e) {}
                switch (((i2 % 9) * 5) + 42) {
                case 46:
                    i17 -= i1;
                    if (i2 != 0) {
                    }
                    Test.instanceCount = i3;
                    if (b) break;
                    break;
                case 61:
                    Test.instanceCount += i1;
                    break;
                case 70:
                case 74:
                    try {
                        Test.iFld = (Test.iFld % iArr[i2 - 1]);
                        iArr[i2 - 1] = (i1 / i3);
                        i1 = (-887105290 / iArr[i2]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 48:
                    f1 += (3181650896319346427L + (i2 * i2));
                    break;
                case 78:
                    Test.instanceCount -= Test.byFld;
                case 44:
                    Test.iFld += i2;
                    break;
                case 83:
                    i3 *= (int)Test.instanceCount;
                    break;
                case 59:
                    i17 = i2;
                default:
                    i17 += (((i2 * i17) + i3) - Test.instanceCount);
                }
            }
        } else {
            iArr[(13 >>> 1) % N] = (int)Test.instanceCount;
        }
        long meth_res = i1 + i2 + i3 + s + i17 + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i18=-14292, i19=-63, i20=23965, i21=-92;
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -1.65189);
        FuzzerUtils.init(fArr, 8.712F);

        dArr[(-13 >>> 1) % N] = ((Test.instanceCount * (-8 * i)) | (byMeth() - Test.iFld));
        i = Test.iFld;
        Test.byFld = (byte)i;
        fArr[(i >>> 1) % N] -= Test.byFld;
        for (i18 = 7; i18 < 228; ++i18) {
            for (i20 = 114; i20 > 1; i20--) {
                i += (int)Test.instanceCount;
                i = i18;
                Test.instanceCount += (((i20 * i) + Test.fFld) - i20);
                Test.iFld >>>= -119;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
