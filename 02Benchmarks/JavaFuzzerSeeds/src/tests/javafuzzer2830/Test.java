package tests.javafuzzer2830;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:02:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3556610810L;
    public static volatile double dFld=113.15926;
    public static byte byFld=102;
    public short sFld=-4466;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[][]=new long[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.byArrFld, (byte)-79);
        FuzzerUtils.init(Test.sArrFld, (short)-666);
        FuzzerUtils.init(Test.lArrFld, -13L);
        FuzzerUtils.init(Test.dArrFld, 0.70810);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1, int i8, int i9) {

        int i11=162, i12=-25327, i13=27, i14=165, i15=-60938;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 29.57F);

        for (int i10 : Test.iArrFld) {
            Test.instanceCount = 4L;
        }
        i9 = -58437;
        for (i11 = 7; i11 < 186; ++i11) {
            b1 = b1;
            Test.iArrFld[i11] -= (int)2.96869;
            for (i13 = 1; i13 < 9; ++i13) {
                Test.byFld += (byte)(3 + (i13 * i13));
                Test.iArrFld = Test.iArrFld;
            }
            i15 = 1;
            do {
                Test.instanceCount += i11;
                Test.instanceCount = (long)f1;
                Test.lArrFld[i15 - 1] = FuzzerUtils.long1array(N, (long)-9L);
                fArr[i11] = f1;
            } while (++i15 < 9);
            i14 -= i9;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i8 + i9 + i11 + i12 + (b1 ? 1 : 0) + i13 + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(int i5, short s1) {

        int i6=-111, i7=-11092, i16=42951, i17=42031;
        long l=40L;
        boolean b2=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.53F);

        for (i6 = 5; i6 < 143; i6 += 2) {
            vMeth(1.900F, i7, i5);
            l = 1;
            while (++l < 22) {
                i7 += i6;
                s1 = (short)-12;
                for (i16 = 1; i16 < 1; ++i16) {
                    i17 = (int)l;
                    fArr1 = FuzzerUtils.float1array(N, (float)0.808F);
                    i17 = i16;
                    i5 *= i17;
                    if (false) break;
                    Test.instanceCount /= 4;
                    i17 += (((i16 * i16) + i7) - i17);
                }
                if (b2) break;
                Test.dArrFld[(int)(l)] = i5;
            }
        }
        long meth_res = i5 + s1 + i6 + i7 + l + i16 + i17 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(short s, float f, int i2) {

        int i3=-14, i4=-12;
        boolean b=false;

        i2 >>= (i2--);
        Test.dFld += ((i2 - (Test.instanceCount - i2)) + (Math.abs(Test.instanceCount) * (f - -20667)));
        Test.iArrFld[(0 >>> 1) % N] += (--i2);
        i2 = -8;
        for (i3 = 5; i3 < 222; i3++) {
            Test.byFld += (byte)(i2--);
            i2 += i3;
            Test.iArrFld[i3 - 1] *= (int)Long.reverseBytes(Test.instanceCount++);
            switch ((((i4 >>> 1) % 2) * 5) + 5) {
            case 15:
                i4 = i4;
                if ((i4++) != (++Test.instanceCount)) break;
                Test.iArrFld[i3] += ((i2 -= Test.byArrFld[i3 + 1]) + Test.sArrFld[i3]);
            case 9:
                b = ((Test.dFld + iMeth1(i3, (short)(29868))) >= f);
                if (i4 != 0) {
                }
                Test.dFld += i2;
            }
        }
        long meth_res = s + Float.floatToIntBits(f) + i2 + i3 + i4 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=46760, i1=6767, i18=-11, i19=10, i20=33107, i21=193, i22=-164, i23=8;
        boolean b3=true;

        for (i = 8; i < 217; i++) {
            float f2=-102.391F;
            if (((i1++) + iMeth(sFld, f2, i)) != Test.instanceCount) continue;
            try {
                i1 = (255818699 / Test.iArrFld[i + 1]);
                i1 = (i1 % 2632);
                i1 = (i1 / 31924);
            } catch (ArithmeticException a_e) {}
            switch (((i >>> 1) % 8) + 25) {
            case 25:
                i1 <<= i;
                Test.iArrFld[i] = i1;
                for (i18 = 2; i18 < 120; i18++) {
                    i19 = i;
                    i20 = 1;
                    while (++i20 < 2) {
                        sFld += (short)i20;
                        Test.lArrFld[i20][i20] = Test.instanceCount;
                        try {
                            i19 = (-240 % Test.iArrFld[i20 - 1]);
                            i1 = (615697938 % i);
                            i19 = (-446160793 % i20);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                i19 = (int)Test.instanceCount;
            case 26:
                i19 <<= i19;
                for (i21 = 1; i21 < 120; i21++) {
                    i19 >>= 4;
                    i1 *= (int)Test.instanceCount;
                    Test.iArrFld[i21 - 1] = i22;
                    Test.iArrFld[i + 1] += i21;
                    i1 = i20;
                    f2 = i1;
                }
                break;
            case 27:
                if (b3) break;
                f2 = -119;
                Test.iArrFld[i] = -183;
                i23 = 120;
                do {
                    i22 = i22;
                    i22 += (i23 * i23);
                    Test.instanceCount += (((i23 * i21) + i19) - i18);
                    f2 += i21;
                    i1 += i;
                } while ((i23 -= 2) > 0);
            case 28:
                Test.iArrFld[i] += i20;
                break;
            case 29:
            case 30:
                Test.dFld += Test.instanceCount;
            case 31:
                f2 += (float)Test.dFld;
                break;
            case 32:
                Test.iArrFld[i - 1] = (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount -= i1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
