package tests.javafuzzer2970;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:08:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1169277440L;
    public static int iFld=24;
    public static byte byFld=-62;
    public static volatile float fFld=-78.99F;
    public static double dFld=2.91020;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -31349);
        FuzzerUtils.init(Test.lArrFld, 1047L);
        FuzzerUtils.init(Test.byArrFld, (byte)19);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth() {

        float f1=-2.175F;
        boolean b=false;
        double d=-2.71001;

        Test.iFld = (int)(Test.iFld - (f1--));
        Test.iFld += (int)Test.instanceCount;
        f1 = ((Test.instanceCount++) * Test.instanceCount);
        b = (Math.min((int)(-4 + (++f1)), (int)(d * Test.iFld)) != ((Test.iFld--) + (++Test.iFld)));
        vMeth_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + Double.doubleToLongBits(d);
    }

    public static int iMeth1() {

        int i7=-194, i8=12, i9=62464, i10=-240;
        double d2=0.64548;
        short s=14612;
        boolean b1=true;
        long l1=12L;

        i7 = 1;
        do {
            Test.iFld -= (int)d2;
        } while (++i7 < 276);
        Test.instanceCount = s;
        for (i8 = 10; i8 < 205; i8++) {
            s = (short)i7;
            d2 = i8;
        }
        Test.byFld = (byte)i9;
        Test.iFld /= -1;
        b1 = false;
        i9 = -121;
        Test.iFld = 41763;
        Test.fFld = Test.byFld;
        for (l1 = 3; 318 > l1; ++l1) {
            d2 = Test.fFld;
            i10 %= (int)(Test.instanceCount | 1);
        }
        long meth_res = i7 + Double.doubleToLongBits(d2) + s + i8 + i9 + (b1 ? 1 : 0) + l1 + i10;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i6=55650, i11=-4, i12=8, i13=-117, i14=12, i15=-159, i16=60249;

        Test.iFld = Test.iFld;
        i6 = 1;
        while (++i6 < 145) {
            Test.instanceCount ^= (long)(iMeth1() - Test.dFld);
            Test.iFld += (i6 | Test.instanceCount);
            for (i11 = 1; 11 > i11; i11 += 3) {
                i12 = (int)Test.fFld;
                i12 = 59829;
                Test.instanceCount -= (long)1.34F;
            }
            for (i13 = 11; i13 > 1; i13--) {
                Test.byFld += (byte)i13;
                Test.iArrFld[i6] = (int)Test.dFld;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.lArrFld = Test.lArrFld;
                    Test.byFld += (byte)(171 + (i15 * i15));
                    i12 *= (int)Test.dFld;
                }
            }
        }
        vMeth1_check_sum += i6 + i11 + i12 + i13 + i14 + i15 + i16;
    }

    public static int iMeth(int i3, int i4, int i5) {

        double d1=-110.65327;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1206631688515306015L);

        vMeth();
        d1 = (((Test.iFld++) - (-6 - lArr[(Test.iFld >>> 1) % N])) * ((--Test.iArrFld[(i4 >>> 1) % N]) * (i4 *
            -8.781F)));
        vMeth1();
        Test.iFld = Test.iFld;
        i3 *= i3;
        i5 = i4;
        i3 = (int)Test.instanceCount;
        Test.instanceCount += Test.instanceCount;
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=-74;
        int i=42, i1=10, i2=11, i17=43383, i18=14, i19=11, i20=-42151;
        long l=0L;
        float f=8.384F;
        short s1=12074;
        boolean b2=true;

        by *= (byte)(Test.iArrFld[(i >>> 1) % N] *= (int)((-(Test.instanceCount--)) + Math.max(-2, i)));
        for (l = 9; l < 177; ++l) {
            i += (int)(l * l);
            for (f = 8; f < 149; f++) {
                Test.instanceCount *= iMeth(Test.iFld, i2, -22969);
                i2 %= (int)(i2 | 1);
                if (b2) {
                    Test.instanceCount = i1;
                    Test.iFld += (int)(((f * l) + s1) - Test.iFld);
                    for (i17 = (int)(l); i17 < 2; ++i17) {
                        Test.instanceCount += l;
                        Test.instanceCount = s1;
                        Test.byArrFld = Test.byArrFld;
                        i1 *= (int)l;
                        Test.fFld -= Test.iFld;
                        i2 = 244;
                        Test.iArrFld[i17] = (int)l;
                        Test.iArrFld[i17 + 1] >>= (int)l;
                    }
                    s1 += (short)f;
                } else if (b2) {
                    for (i19 = 1; 2 > i19; ++i19) {
                        i += (i19 * i19);
                        Test.iFld = i;
                        Test.iFld += -13258;
                        i1 = (int)454761081258771391L;
                        Test.iFld = (int)l;
                        Test.iFld -= (int)-2.87108;
                        Test.instanceCount -= i20;
                    }
                } else if (b2) {
                    Test.instanceCount = i20;
                    Test.instanceCount ^= Test.iFld;
                }
                Test.instanceCount &= i;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
