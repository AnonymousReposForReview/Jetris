package tests.javafuzzer567;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:59:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2994549519805247893L;
    public static volatile double dFld=2.116717;
    public static float fFld=-2.238F;
    public volatile int iArrFld[]=new int[N];
    public int iArrFld1[][]=new int[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i3) {

        int i4=-54726, i5=-125, i6=1, i7=-249, iArr[]=new int[N];
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.98734);
        FuzzerUtils.init(iArr, 14193);

        l -= (long)48.113F;
        for (double d : dArr) {
            for (i4 = 1; 4 > i4; i4++) {
                Test.dFld = i4;
                i6 = 1;
                while (++i6 < 2) {
                    long l1=145L;
                    i3 >>= i5;
                    if (b) {
                        i3 -= i4;
                        iArr[i6 - 1] -= i6;
                        i5 = -108;
                    } else if (b) {
                        i7 = i4;
                        iArr[i4 + 1] = -9;
                        Test.fFld = (float)0.73068;
                    } else {
                        l = -1;
                        l1 += i4;
                    }
                }
            }
        }
        long meth_res = l + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        int i2=-13, i8=-132, i9=-29752, i10=-197, i11=9, i12=-5;
        byte by=5;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -195L);

        i2 = iMeth(Test.instanceCount, i2);
        i2 += by;
        for (i8 = 8; i8 < 376; i8++) {
            Test.fFld *= -6394;
            lArr[i8 - 1] <<= Test.instanceCount;
        }
        lArr[(i10 >>> 1) % N] = i8;
        Test.instanceCount = Test.instanceCount;
        i9 *= 55;
        for (i11 = 7; i11 < 298; i11++) {
            if (i9 != 0) {
            }
            Test.instanceCount -= i10;
            i2 &= i11;
            i9 += (i11 + Test.instanceCount);
        }
        lArr[(i2 >>> 1) % N] = Test.instanceCount;
        i12 &= i12;
        long meth_res = i2 + by + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vSmallMeth(int i1) {

        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)49);

        byArr[(0 >>> 1) % N] = (byte)(((i1 + i1) + -127) * sMeth());
        Test.instanceCount = i1;
        vSmallMeth_check_sum += i1 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i13=232, i14=1, i15=-8, i16=-5, i17=-221, i18=-194;
        short s=-14944;
        double d1=-2.74461;
        byte by1=121;
        boolean b1=false;
        float fArr[]=new float[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, 122.642F);
        FuzzerUtils.init(lArr1, 32L);

        try {
            fArr[(i >>> 1) % N] += (float)(--Test.dFld);
            i *= (int)(((i * i) + (-(-Test.instanceCount))) + (i - (111.61520 - s)));
        }
        catch (NullPointerException exc2) {
            for (int smallinvoc=0; smallinvoc<651; smallinvoc++) vSmallMeth(i);
        }
        catch (UserDefinedExceptionTest exc3) {
            i = (int)Test.instanceCount;
            i13 = 1;
            while (++i13 < 226) {
                i += (i13 * i13);
                i -= i13;
                for (d1 = 2; d1 < 111; d1++) {
                    for (i15 = 1; 2 > i15; i15++) {
                        i14 += (((i15 * Test.fFld) + i13) - Test.instanceCount);
                        iArrFld[(int)(d1 + 1)] &= i15;
                        iArrFld1 = iArrFld1;
                        i += i15;
                        if (true) {
                            by1 ^= (byte)i13;
                            i14 += i15;
                            Test.fFld = s;
                            i <<= (int)1938718438L;
                        } else if (b1) {
                            i14 += (((i15 * Test.fFld) + Test.instanceCount) - i15);
                        } else if (b1) {
                            i14 += i14;
                        }
                        lArr1[i13 + 1][i13 - 1] += i15;
                        i14 |= 54080;
                    }
                    i14 += (int)d1;
                }
                for (i17 = 2; 111 > i17; ++i17) {
                    Test.fFld -= i18;
                    iArrFld1[i17 - 1] = iArrFld;
                    i14 -= (int)Test.fFld;
                    i ^= i15;
                    lArr1[i17] = lArr1[i13];
                }
            }
        }
        finally {
            iArrFld1[(i14 >>> 1) % N] = iArrFld1[(i16 >>> 1) % N];
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth sMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
