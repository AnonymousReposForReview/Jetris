package tests.javafuzzer3396;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:20:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static float fFld=44.755F;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1, int i3, int i4) {

        int i5=-46481, i6=9144, i7=20, i8=3, i9=-11, iArr1[]=new int[N];
        float f=0.331F, f1=-107.440F;
        boolean b=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-18943);
        FuzzerUtils.init(iArr1, 9);

        for (i5 = 1; i5 < 253; i5++) {
            for (f = i5; 6 > f; ++f) {
                if (b) continue;
                for (i8 = (int)(f); 1 > i8; ++i8) {
                    f1 *= i7;
                    i4 = -40153;
                    Test.instanceCount ^= i6;
                    i7 += (i8 * i8);
                    b = b;
                    i7 += (i8 - i7);
                    sArr = sArr;
                }
                iArr1[(int)(f - 1)] = i8;
            }
            i9 = i9;
            iArr1[i5] <<= i4;
            d1 -= i6;
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + (b ? 1 :
            0) + i8 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i2) {

        double d=-1.73357;
        float f2=-1.907F;
        long l=-30562L;
        int i10=5, i11=5, i12=-208, i13=63, iArr[]=new int[N];
        boolean b1=true;
        byte by=-87;

        FuzzerUtils.init(iArr, -181);

        i2 >>= (int)(((--iArr[(i2 >>> 1) % N]) + Math.abs(d)) * iArr[(i2 >>> 1) % N]);
        i2 = (Integer.reverseBytes(i2) & iArr[(-45 >>> 1) % N]);
        vMeth2(-39.926, 10685, i2);
        f2 = Test.instanceCount;
        for (l = 8; l < 398; ++l) {
            b1 = b1;
            f2 += (((l * Test.instanceCount) + Test.instanceCount) - l);
            for (i11 = 1; i11 < 4; ++i11) {
                iArr[(int)(l)] = (int)Test.instanceCount;
                try {
                    i10 = (i12 % i12);
                    i12 = (i2 % i12);
                    i2 = (iArr[i11] % 140);
                } catch (ArithmeticException a_e) {}
                i2 = (int)Test.instanceCount;
                i13 = 1;
                do {
                    i12 = i11;
                    if (i13 != 0) {
                        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + l + i10 + (b1
                            ? 1 : 0) + i11 + i12 + i13 + by + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i10 = by;
                } while (++i13 < 2);
            }
        }
        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + l + i10 + (b1 ? 1 : 0) + i11 +
            i12 + i13 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1) {

        int i14=1177, i15=-235, i16=9, i17=174, iArr2[]=new int[N];
        short s=27130;
        float f3=2.494F;

        FuzzerUtils.init(iArr2, -29857);

        vMeth1(i1);
        i1 = i1;
        for (i14 = 11; i14 < 370; i14++) {
            Test.instanceCount = s;
            i16 = 5;
            do {
                i1 += (((i16 * Test.instanceCount) + i14) - Test.instanceCount);
                iArr2[i14 + 1] -= (int)Test.instanceCount;
                i1 += (((i16 * i15) + f3) - i16);
                i17 = 1;
                while (++i17 < 2) {
                    i1 += i1;
                    f3 += i16;
                    Test.instanceCount -= 1317;
                    Test.instanceCount = i17;
                    s = (short)Test.instanceCount;
                    f3 = i17;
                }
            } while ((i16 -= 2) > 0);
        }
        vMeth_check_sum += i1 + i14 + i15 + s + i16 + Float.floatToIntBits(f3) + i17 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i18=-1, i19=7, i20=117, i21=-220, i22=-152, i23=17126;
        byte by1=-58;
        boolean b2=false;
        double d3=0.33529, d4=1.22700, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.43620);

        Test.instanceCount = i;
        vMeth(i);
        i18 = 1;
        do {
            for (i19 = 1; i19 < 133; i19++) {
                i20 = (int)Test.fFld;
                for (i21 = 1; i21 < 2; ++i21) {
                    double d2=-1.36426;
                    Test.iArrFld[i19] = (int)d2;
                    by1 = (byte)i;
                    if (b2) break;
                    i = i20;
                    Test.instanceCount += 40658;
                    fArrFld[i18 - 1] += Test.fFld;
                    i22 += (i21 - i19);
                    Test.iArrFld[i19 + 1] = (int)-126.410F;
                    dArr = dArr;
                    Test.iArrFld[i18 - 1] *= i21;
                }
                for (d3 = 1; d3 < 2; d3++) {
                    i = i20;
                    i23 -= i18;
                    i23 += (68 + (d3 * d3));
                    b2 = b2;
                    Test.instanceCount *= Test.instanceCount;
                    i22 = i20;
                    Test.instanceCount = i23;
                }
                i22 += i;
                i22 *= i18;
                i20 += (int)Test.fFld;
                i *= (int)Test.instanceCount;
            }
        } while (++i18 < 189);
        d4 += Test.instanceCount;
        i -= (int)Test.fFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
