package tests.javafuzzer269;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:07:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1930779918927676701L;
    public static double dFld=2.110430;
    public static volatile boolean bFld=true;
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 47006L);
        FuzzerUtils.init(Test.dArrFld, 58.49452);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i5, int i6) {

        int i7=-221, i8=-98, i9=0, i10=-173, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -42230);

        i7 = 1;
        do {
            Test.instanceCount -= Test.instanceCount;
            i6 = i6;
            for (i8 = 1; i8 < 5; i8++) {
                switch ((i7 % 1) + 102) {
                case 102:
                    Test.dFld -= i6;
                    Test.dFld -= Test.instanceCount;
                    Test.bFld = Test.bFld;
                    i10 = 1;
                    do {
                        iArr[i8] = i9;
                        i5 *= -3;
                        i5 = 25392;
                        if (false) continue;
                        Test.lArrFld[i10] -= (long)Test.dFld;
                    } while (++i10 < 2);
                    break;
                }
            }
            i9 += (int)Test.instanceCount;
        } while (++i7 < 323);
        vMeth2_check_sum += Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(int i3, int i4, float f) {

        int i11=35092, i12=7, i13=11, i14=-6447, i15=-5, iArr1[]=new int[N];
        byte by=18;

        FuzzerUtils.init(iArr1, -11);

        vMeth2(f, -74, i3);
        for (i11 = 8; i11 < 311; i11++) {
            Test.instanceCount -= i11;
            i13 = 5;
            do {
                iArr1[i11] <<= (int)Test.instanceCount;
                iArr1[i13 + 1] = i11;
                i12 = i3;
                for (i14 = i13; i14 < 3; i14++) {
                    i15 = i15;
                    Test.instanceCount += Test.instanceCount;
                    i12 %= (int)(i11 | 1);
                    iArr1[i14 - 1] += i3;
                    i4 = (int)f;
                    f += i14;
                    Test.instanceCount += (((i14 * f) + f) - by);
                }
            } while ((i13 -= 3) > 0);
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i2) {

        int i16=14, i17=-1, i18=65063, i19=-13, i20=-27876, iArr2[]=new int[N];
        float f2=88.736F;

        FuzzerUtils.init(iArr2, 64186);

        vMeth1(i2, i2, -123.701F);
        i2 = 12;
        i16 = 1;
        do {
            iArr2[i16] += i2;
            for (i17 = 1; i17 < 4; i17++) {
                iArr2[i17 + 1] = -217;
                i2 += (int)Test.instanceCount;
            }
            if (i2 != 0) {
                vMeth_check_sum += i2 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
                    FuzzerUtils.checkSum(iArr2);
                return;
            }
            i18 += (1 + (i16 * i16));
            for (i19 = 1; i19 < 4; i19 += 2) {
                try {
                    i2 = (132 % i18);
                    i20 = (i17 / i16);
                    i20 = (i18 / i20);
                } catch (ArithmeticException a_e) {}
                Test.bFld = Test.bFld;
                Test.dArrFld[i16] = f2;
            }
        } while (++i16 < 386);
        i20 = i19;
        iArr2[(i17 >>> 1) % N] = (int)Test.instanceCount;
        vMeth_check_sum += i2 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-25598, i1=-1, i21=58496, i22=4, i23=-60686, i24=-1, i25=222, i26=2, i27=14, i28=-47130, i29=-104,
            i30=158, i31=-61150, i32=-10, i33=-207, iArr3[]=new int[N];
        short s=12525, sArr[]=new short[N];
        float f3=1.439F, fArr[]=new float[N];
        double d1=-2.112475;

        FuzzerUtils.init(iArr3, -8);
        FuzzerUtils.init(fArr, -1.130F);
        FuzzerUtils.init(sArr, (short)19958);

        if (Test.bFld) {
            i = 1;
            while (++i < 344) {
                Test.lArrFld[i] -= ((++i1) - (++i1));
                vMeth(i1);
            }
        } else {
            i1 += s;
            for (i21 = 2; i21 < 156; ++i21) {
                i1 = i22;
                i1 += (int)Test.dFld;
                i23 = 163;
                do {
                    byte by1=9;
                    by1 += (byte)(i23 * i23);
                    Test.dFld = f3;
                    i22 ^= 33202;
                } while (--i23 > 0);
                if (false) break;
            }
            i24 = 1;
            while (++i24 < 272) {
                iArr3[i24] <<= i21;
                for (i25 = 3; i25 < 92; i25++) {
                    fArr = fArr;
                    for (i27 = 1; i27 < 2; i27++) {
                        Test.instanceCount += (((i27 * i24) + i28) - i25);
                        i22 -= i21;
                    }
                    i22 += (i25 ^ i22);
                    for (i29 = 1; i29 < 2; i29++) {
                        Test.iArrFld = Test.iArrFld;
                        Test.instanceCount = Test.instanceCount;
                    }
                }
                i22 += -243;
                for (i31 = 1; i31 < 92; ++i31) {
                    for (d1 = 1; d1 < 2; d1++) {
                        i30 = i;
                        sArr[i31] -= (short)f3;
                        Test.instanceCount += (long)(d1 * d1);
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
