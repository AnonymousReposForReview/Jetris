package tests.javafuzzer417;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:21:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2648036591L;
    public int iFld=59197;
    public static volatile float fFld=0.859F;
    public static byte byFld=-54;
    public static double dFld=-1.2096;
    public static float fArrFld[][]=new float[N][N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.964F);
        FuzzerUtils.init(Test.sArrFld, (short)-25683);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-2668, i6=173, i7=-13, i8=12, i9=-40, iArr1[]=new int[N];
        byte by=73;
        double d=1.95099, d1=0.62453;
        short s=24071;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 32L);
        FuzzerUtils.init(iArr1, -21886);

        for (i5 = 7; i5 < 143; i5++) {
            i6 += (i5 - i6);
            i6 = i5;
            Test.fArrFld[i5 - 1][i5 - 1] -= Test.instanceCount;
            i6 += (i5 ^ by);
            i6 += (int)d;
            s = (short)i6;
        }
        for (i7 = 262; 11 < i7; --i7) {
            for (d1 = 6; i7 < d1; d1--) {
                if (i9 != 0) {
                    vMeth1_check_sum += i5 + i6 + by + Double.doubleToLongBits(d) + s + i7 + i8 +
                        Double.doubleToLongBits(d1) + i9 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.fArrFld[i7][i7 - 1] -= i7;
                i8 *= i7;
                lArr[i7] |= i5;
                iArr1[i7 + 1] *= s;
            }
            i8 *= i7;
        }
        vMeth1_check_sum += i5 + i6 + by + Double.doubleToLongBits(d) + s + i7 + i8 + Double.doubleToLongBits(d1) + i9
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i3=53, i4=-11, i10=5, i11=-2545, i12=1, iArr[]=new int[N];
        double d2=2.10500;
        long l1=-12L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(lArr1, 13L);

        for (i3 = 5; i3 < 372; ++i3) {
            try {
                i4 = (iArr[i3] % i3);
                i4 = (i3 / i4);
                iArr[i3] = (iArr[i3] / i4);
            } catch (ArithmeticException a_e) {}
        }
        vMeth1();
        lArr1[(i4 >>> 1) % N] = i3;
        for (i10 = 306; 8 < i10; i10 -= 2) {
            Test.instanceCount += i11;
            for (d2 = 1; d2 < 11; d2++) {
                l1 += (long)d2;
                Test.fFld += (float)(d2 * Test.fFld);
                i12 = i3;
                switch ((i10 % 2) + 123) {
                case 123:
                    i12 += (int)l1;
                    break;
                case 124:
                    Test.byFld = (byte)i11;
                    Test.instanceCount = i11;
                    break;
                default:
                    iArr[i10 - 1] = i4;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i10 + i11 + Double.doubleToLongBits(d2) + i12 + l1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(float f, boolean b) {

        long l=-3235326044071347932L;
        int i=-9, i1=-83, i2=-61, i13=-225;

        for (l = 1; l < 148; ++l) {
            for (i1 = 1; i1 < 11; i1++) {
                Test.instanceCount += i1;
                vMeth();
                switch ((int)(((l % 2) * 5) + 27)) {
                case 37:
                    i13 = 1;
                    while (++i13 < 2) {
                        Test.sArrFld[i1] *= (short)i2;
                        f = i13;
                        switch (((i1 >>> 1) % 4) + 37) {
                        case 37:
                            i2 += (i13 - i);
                        case 38:
                            if (b) continue;
                            f -= i;
                            i -= i13;
                            i2 <<= i;
                            break;
                        case 39:
                            Test.fFld -= -6;
                            break;
                        case 40:
                            i2 = (int)-7811776876907881727L;
                        default:
                            Test.iArrFld[(int)(l)] -= (int)l;
                        }
                    }
                    break;
                case 33:
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + (b ? 1 : 0) + l + i + i1 + i2 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        int i15=-38454, i16=2, i17=-12;

        iFld <<= Math.max((iFld - iFld) - iMeth(Test.fFld, b1), iFld);
        for (int i14 : Test.iArrFld) {
            Test.iArrFld[(i14 >>> 1) % N] -= iFld;
            i15 = 1;
            do {
                iFld = iFld;
                for (i16 = 1; i16 < 1; i16++) {
                    short s1=-13334;
                    switch (((i15 % 9) * 5) + 73) {
                    case 92:
                        i14 += 62655;
                        break;
                    case 83:
                        iFld -= i16;
                        iFld += i16;
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    case 81:
                        try {
                            Test.iArrFld[i15 - 1] = (-18 / i14);
                            i17 = (Test.iArrFld[i16] % i17);
                            i14 = (i15 % Test.iArrFld[i15]);
                        } catch (ArithmeticException a_e) {}
                        try {
                            iFld = (i15 / i17);
                            i17 = (-535032000 % i16);
                            Test.iArrFld[i16 - 1] = (i15 / -42);
                        } catch (ArithmeticException a_e) {}
                        iFld -= i14;
                        s1 *= (short)Test.instanceCount;
                        break;
                    case 96:
                        Test.instanceCount = (long)Test.fFld;
                        Test.instanceCount >>>= i14;
                        i14 *= i17;
                        i17 += i14;
                        break;
                    case 88:
                        if (b1) {
                            i14 = iFld;
                        } else {
                            Test.iArrFld[i16 + 1] <<= i17;
                            iFld = s1;
                            iFld *= (int)Test.fFld;
                            switch ((i15 % 9) + 35) {
                            case 35:
                                Test.byFld *= (byte)i14;
                                iFld = i14;
                                iFld += (-32 + (i16 * i16));
                                break;
                            case 36:
                                Test.instanceCount <<= Test.instanceCount;
                                i17 = (int)Test.instanceCount;
                                break;
                            case 37:
                            case 38:
                                Test.instanceCount += (((i16 * Test.instanceCount) + iFld) - i17);
                            case 39:
                                i14 += (i16 * i16);
                                break;
                            case 40:
                                Test.dFld *= i14;
                                break;
                            case 41:
                                Test.instanceCount += i16;
                                break;
                            case 42:
                                i17 = i14;
                            case 43:
                                i17 += i14;
                                break;
                            }
                        }
                        break;
                    case 82:
                        i17 <<= Test.byFld;
                        break;
                    case 75:
                        i14 += (((i16 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                        break;
                    case 116:
                        Test.iArrFld[i16] <<= (int)Test.instanceCount;
                        break;
                    case 95:
                        Test.instanceCount = 1359647261L;
                        break;
                    }
                }
            } while (++i15 < 63);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
