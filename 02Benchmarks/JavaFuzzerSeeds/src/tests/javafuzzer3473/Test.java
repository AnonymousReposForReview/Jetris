package tests.javafuzzer3473;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:05:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3220806404L;
    public static int iFld=-6;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -67.1001F);
        FuzzerUtils.init(Test.dArrFld, -35.62499);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {


        Test.iFld <<= (int)Test.instanceCount;
        vMeth2_check_sum += 0;
    }

    public static void vMeth1(int i) {

        int i1=4, i2=2, i3=-225, iArr[][]=new int[N][N];
        float f1=1.836F;
        double d1=-9.54526;
        boolean b=true;

        FuzzerUtils.init(iArr, 7);

        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += (int)((-Math.abs(i)) ^ -560218659L);
        vMeth2();
        for (i1 = 1; 266 > i1; i1++) {
            i3 = 1;
            while (++i3 < 6) {
                i = i1;
                f1 *= (float)d1;
                i <<= i3;
                if (b) continue;
                iArr[i1 - 1][i1] -= (int)d1;
                Test.instanceCount = -19855;
                if (false) break;
                Test.instanceCount += (i3 + f1);
                Test.instanceCount = i3;
            }
            i *= 24613;
            i *= (int)-44121L;
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        float f=90.994F;
        double d=39.45287;
        int i4=70, i5=213, i6=-1, i7=60667, i8=151, i9=-20, i10=-52191, iArr1[]=new int[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)7293);
        FuzzerUtils.init(lArr, -7821221274999872987L);
        FuzzerUtils.init(iArr1, 13);

        f *= (float)((sArr[(10459 >>> 1) % N] + (Test.iFld - Test.iFld)) * ((44418L - d) - f));
        vMeth1(Test.iFld);
        for (i4 = 15; i4 < 366; i4 += 2) {
            for (i6 = 1; i6 < 9; i6++) {
                i8 = 1;
                while (++i8 < 2) {
                    i5 *= -13;
                    lArr[i6 + 1] += (long)f;
                }
                Test.iFld >>= (int)-14L;
                i5 += i6;
                for (i9 = 1; i9 < 2; i9++) {
                    if (i4 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 +
                            i8 + i9 + i10 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i10 -= (int)1.401F;
                    iArr1 = iArr1;
                    Test.iFld /= (int)(i6 | 1);
                    iArr1[i9 + 1] <<= i8;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        int i11=34, i12=-44427, iArr2[]=new int[N];
        long l=-23263L;
        byte by=86;
        double d2=-19.11727;

        FuzzerUtils.init(iArr2, 10);

        vMeth();
        b1 = b1;
        for (float f2 : Test.fArrFld) {
            for (i11 = 63; 2 < i11; i11--) {
                l = 1;
                do {
                    i12 += (int)l;
                    Test.iFld -= i11;
                    iArr2[i11] = i12;
                    Test.iFld = 141;
                    switch ((i11 % 2) + 46) {
                    case 46:
                        by = (byte)l;
                        iArr2[(int)(l + 1)] = Test.iFld;
                    case 47:
                        Test.iFld -= i12;
                        break;
                    }
                    f2 += l;
                    f2 %= (i12 | 1);
                    Test.iFld |= Test.iFld;
                    i12 -= 12;
                    switch ((i11 % 9) + 102) {
                    case 102:
                        switch (((i11 % 2) * 5) + 34) {
                        case 41:
                            iArr2 = iArr2;
                            Test.iFld = i11;
                            iArr2[(int)(l)] *= (int)f2;
                            break;
                        case 40:
                            if (false) break;
                            if (true) continue;
                            Test.instanceCount *= i11;
                            break;
                        default:
                            iArr2 = iArr2;
                            i12 >>= i12;
                            Test.dArrFld[(int)(l - 1)] -= Test.instanceCount;
                            if (b1) continue;
                        }
                        Test.iFld = (int)-124L;
                    case 103:
                        Test.instanceCount += (l - Test.iFld);
                        break;
                    case 104:
                        if (true) continue;
                        break;
                    case 105:
                        Test.iFld = -6;
                        break;
                    case 106:
                        iArr2[i11] = 57066;
                        break;
                    case 107:
                        b1 = b1;
                        break;
                    case 108:
                        iArr2[i11] = 30255;
                    case 109:
                        d2 -= 1;
                    case 110:
                        f2 = i12;
                    }
                } while (++l < 2);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
