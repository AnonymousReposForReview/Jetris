package tests.javafuzzer1765;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:08:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1256656936457831110L;
    public int iFld=117;
    public static int iFld1=3;
    public short sFld=21916;
    public byte byFld=58;
    public static float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -19.823F);
        FuzzerUtils.init(Test.lArrFld, 8L);
        FuzzerUtils.init(Test.iArrFld, 8);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f=-1.25F;
        int i3=-11, i4=3, i5=28293, i6=59958, i7=-26175;
        short s=1426;
        long l=18485L, lArr[]=new long[N];
        byte by=16;
        boolean b=false;

        FuzzerUtils.init(lArr, 67L);

        lArr[(Test.iFld1 >>> 1) % N] = (long)f;
        for (i3 = 4; i3 < 269; i3++) {
            for (i5 = 1; i5 < 6; ++i5) {
                Test.iFld1 -= i5;
                i4 = i6;
                s += (short)(i5 * i5);
                Test.iFld1 += (i5 + i6);
                for (l = 1; l < 2; ++l) {
                    Test.iFld1 += (int)(((l * l) + i7) - by);
                    s += (short)(-121 + (l * l));
                    Test.fArrFld[i3 + 1] *= Test.instanceCount;
                    Test.instanceCount <<= -120;
                }
                i7 >>>= -209;
                if (i7 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + s + l + i7 + by + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
                b = b;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + s + l + i7 + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1() {

        double d=85.94943, dArr[]=new double[N];
        int i1=3, i2=-20711, i8=13, i9=141, iArr[][]=new int[N][N];
        boolean b1=false;

        FuzzerUtils.init(dArr, 66.8526);
        FuzzerUtils.init(iArr, -12);

        for (d = 9; 338 > d; ++d) {
            i2 = 1;
            while (++i2 < 5) {
                dArr[(int)(d - 1)] += (--Test.instanceCount);
                vMeth();
                for (i8 = 1; i8 < 1; i8++) {
                    iArr[i2][i2] <<= Test.iFld1;
                    if (b1) break;
                    Test.instanceCount += i1;
                    if (b1) continue;
                    i1 = i8;
                    Test.iFld1 += i8;
                    i1 -= i8;
                    Test.iFld1 <<= -16910;
                }
                i9 = i8;
            }
            i9 = i8;
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + i8 + i9 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i10=-1, iArr1[]=new int[N];
        short s1=-28898, sArr[]=new short[N];
        double d1=-2.19638;
        float f1=0.945F;
        long l2=-227L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -61774);
        FuzzerUtils.init(sArr, (short)18245);
        FuzzerUtils.init(lArr1, 743095918329701547L);

        i <<= (i--);
        iMeth1();
        i10 = 1;
        while (++i10 < 215) {
            boolean b2=true;
            byte by1=103;
            Test.iFld1 -= (int)63L;
            Test.instanceCount = Test.iFld1;
            switch (i10 + 50) {
            case 50:
                Test.instanceCount -= (long)2.700F;
                if (false) {
                    Test.iFld1 = -27727;
                    s1 = (short)Test.instanceCount;
                } else {
                    iArr1[i10 + 1] = (int)-99.153F;
                }
            case 51:
                i += (int)d1;
                Test.instanceCount = Test.iFld1;
                Test.instanceCount += (((i10 * f1) + i10) - i10);
            case 52:
                i &= s1;
                break;
            case 53:
                if (Test.iFld1 != 0) {
                }
                break;
            case 54:
                Test.instanceCount *= Test.iFld1;
                break;
            case 55:
                f1 -= i10;
            case 56:
                if (b2) continue;
            case 57:
            case 58:
                Test.iFld1 += i10;
                break;
            case 59:
                iArr1[i10] = (int)f1;
                break;
            case 60:
                if (b2) continue;
            case 61:
                Test.iFld1 >>>= Test.iFld1;
                break;
            case 62:
                iArr1[i10] <<= s1;
            case 63:
                Test.iFld1 *= i10;
                break;
            case 64:
                by1 = (byte)Test.instanceCount;
                break;
            case 65:
                if (b2) continue;
            case 66:
                i -= by1;
                break;
            case 67:
                Test.instanceCount *= Test.iFld1;
                break;
            case 68:
                f1 -= i;
                break;
            case 69:
                by1 ^= (byte)i;
                break;
            case 70:
                Test.iFld1 = i;
                break;
            case 71:
                Test.iFld1 = i10;
                break;
            case 72:
                if (b2) continue;
                break;
            case 73:
                s1 += (short)(i10 + Test.instanceCount);
            case 74:
                i = s1;
                break;
            case 75:
                iArr1[i10 + 1] <<= (int)Test.instanceCount;
                break;
            case 76:
                if (b2) break;
                break;
            case 77:
                b2 = b2;
                break;
            case 78:
                i += Test.iFld1;
                break;
            case 79:
                Test.iFld1 *= i;
                break;
            case 80:
                l2 += i10;
            case 81:
                Test.iFld1 += i10;
                break;
            case 82:
                b2 = b2;
                break;
            case 83:
            case 84:
                Test.lArrFld[i10 + 1] >>= i;
                break;
            case 85:
                iArr1[i10 + 1] = (int)Test.instanceCount;
            case 86:
                by1 = by1;
                break;
            case 87:
                Test.iFld1 += (((i10 * f1) + f1) - i);
                break;
            case 88:
                l2 = i;
            case 89:
                s1 >>= (short)i10;
            case 90:
                f1 += i10;
            case 91:
                iArr1[i10 - 1] = 62;
                break;
            case 92:
                s1 = (short)4965L;
                break;
            case 93:
                i += 6771;
                break;
            case 94:
                Test.iFld1 += i10;
                break;
            case 95:
                b2 = false;
            case 96:
                Test.instanceCount += (i10 * i10);
                break;
            case 97:
                sArr[i10] >>= (short)i;
                break;
            case 98:
                d1 /= (l2 | 1);
                break;
            case 99:
                iArr1[i10] = 58318;
                break;
            case 100:
                Test.iFld1 *= (int)l2;
                break;
            case 101:
                by1 >>>= (byte)i10;
            case 102:
                i <<= -10;
            case 103:
                if (Test.iFld1 != 0) {
                }
                break;
            case 104:
                lArr1[i10 + 1] -= Test.iFld1;
                break;
            case 105:
                i += (i10 * i);
            case 106:
                iArr1[i10 - 1] = i10;
                break;
            case 107:
                Test.instanceCount *= i;
                break;
            case 108:
                Test.instanceCount = i10;
                break;
            case 109:
                iArr1[i10] *= 6;
                break;
            case 110:
                l2 += i;
                break;
            case 111:
                i = Test.iFld1;
                break;
            case 112:
                Test.iFld1 = (int)Test.instanceCount;
                break;
            case 113:
                Test.iArrFld[i10] -= i;
                break;
            case 114:
                b2 = b2;
                break;
            case 115:
                i <<= (int)l2;
                break;
            case 116:
                Test.instanceCount = i10;
            case 117:
                i += (int)Test.instanceCount;
                break;
            case 118:
                by1 = (byte)i;
                break;
            case 119:
            }
        }
        long meth_res = i + i10 + s1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=171, i13=0, i14=-35, i15=-200, i16=54805, i17=-7, i18=235, i19=-76, i20=6, i21=-222;
        float f2=2.416F;
        double d2=1.114803;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)123);

        iFld *= iMeth(iFld);
        for (i12 = 152; i12 > 4; i12 -= 2) {
            iFld = i13;
            switch ((i12 % 10) + 18) {
            case 18:
                Test.iArrFld[i12 + 1] = (int)Test.instanceCount;
                sFld = (short)Test.iFld1;
                break;
            case 19:
                Test.instanceCount *= Test.iFld1;
                for (i14 = i12; i14 < 338; i14++) {
                    Test.iFld1 += (-49609 + (i14 * i14));
                    Test.iFld1 += (int)f2;
                    Test.bArrFld[i14 - 1] = Test.bArrFld[i14 + 1];
                    Test.instanceCount = i15;
                    Test.iArrFld[i12] = i15;
                }
                d2 -= i12;
                for (i16 = 2; i16 < 338; i16++) {
                    Test.iFld1 >>>= (int)Test.instanceCount;
                    Test.lArrFld[i16 + 1] += i17;
                    i17 += (int)d2;
                    for (i18 = 1; i18 < 2; ++i18) {
                        i13 = (int)f2;
                        Test.instanceCount <<= 238;
                        i17 <<= (int)10L;
                        byFld += (byte)i18;
                        i17 = byFld;
                    }
                    byArr[(i13 >>> 1) % N] -= (byte)iFld;
                    byFld += (byte)(((i16 * Test.iFld1) + i14) - i13);
                    f2 = Test.iFld1;
                    for (i20 = 1; i20 < 2; ++i20) {
                        byFld += (byte)(i20 - Test.instanceCount);
                        byFld += (byte)i20;
                    }
                }
            case 20:
                f2 *= f2;
            case 21:
                iFld >>>= Test.iFld1;
                break;
            case 22:
                Test.instanceCount = Test.iFld1;
                break;
            case 23:
                f2 -= (float)d2;
                break;
            case 24:
                Test.instanceCount += (i12 - Test.instanceCount);
                break;
            case 25:
                i13 = i15;
            case 26:
                i19 += (i12 * i12);
            case 27:
                i13 = i21;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
