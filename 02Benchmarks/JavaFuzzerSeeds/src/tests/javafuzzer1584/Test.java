package tests.javafuzzer1584;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:23:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8432L;
    public static byte byFld=102;
    public static int iFld=1;
    public boolean bFld=true;
    public int iFld1=95;
    public short sFld=-17204;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 28673L);
        FuzzerUtils.init(Test.sArrFld, (short)-18340);
        FuzzerUtils.init(Test.iArrFld, -8);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static float fMeth() {

        int i2=0;
        float f=2.165F;

        Test.lArrFld[(i2 >>> 1) % N] = (long)(((Test.instanceCount + i2) - (f * i2)) + ((-250 - (Test.instanceCount++))
            & (--i2)));
        long meth_res = i2 + Float.floatToIntBits(f);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth2(int i4, boolean b, int i5) {

        int i6=34, i7=10944, i8=-10854, i9=-46774, i10=-254, i11=-31736, iArr[]=new int[N];
        float f1=-102.905F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 55950);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount += i5;
        for (i6 = 5; i6 < 272; i6++) {
            i7 += (i6 ^ i7);
            for (i8 = 1; i8 < 6; i8++) {
                i7 &= i7;
            }
            i5 = 249;
            iArr[i6 + 1] = i5;
            for (i10 = 1; i10 < 6; ++i10) {
                i9 += (int)Test.instanceCount;
                bArr = bArr;
                if (b) continue;
                f1 *= i11;
                Test.lArrFld[(i4 >>> 1) % N] |= -955879598125895241L;
                f1 *= f1;
                i9 += (((i10 * Test.instanceCount) + i9) - i11);
            }
        }
        vMeth2_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i3) {

        boolean b1=false, b2=true;
        int i12=8, i13=98, i14=-27555, i15=-194, i16=-7966;
        long l=749893591158682472L;
        double d=-2.11946;
        float f2=-2.36F;
        short s=5029;

        vMeth2(14, b1, 208);
        Test.sArrFld[(0 >>> 1) % N] >>= (short)Test.instanceCount;
        for (i12 = 5; i12 < 142; i12++) {
            b1 = b2;
            i13 >>= i14;
        }
        for (l = 1; 218 > l; ++l) {
            d += 38.770F;
            i3 += (int)(l * i3);
            i3 -= i14;
            i3 -= i13;
            Test.iArrFld = Test.iArrFld;
            Test.iFld += Test.iFld;
            d -= f2;
        }
        i16 = -132;
        s = (short)f2;
        vMeth1_check_sum += i3 + (b1 ? 1 : 0) + i12 + i13 + (b2 ? 1 : 0) + i14 + l + i15 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + i16 + s;
    }

    public static void vMeth() {

        float f3=105.425F, f4=-1.761F;
        int i17=-115, i18=38, i19=48368, i20=42331;

        vMeth1(Test.iFld);
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= Test.iFld;
        Test.iFld += Test.iFld;
        Test.instanceCount *= (long)f3;
        for (i17 = 126; i17 > 6; --i17) {
            i19 = 1;
            while (++i19 < 13) {
                double d1=21.25573;
                switch ((i17 % 2) + 79) {
                case 79:
                    Test.iFld += (i19 ^ Test.instanceCount);
                    d1 = i17;
                    break;
                case 80:
                    d1 += i18;
                    f4 = 1;
                    while (++f4 < 1) {
                        f3 += i19;
                        Test.iArrFld = Test.iArrFld;
                        i20 -= -10;
                        i18 = -1973;
                    }
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f3) + i17 + i18 + i19 + Float.floatToIntBits(f4) + i20;
    }

    public void mainTest(String[] strArr1) {

        int i=17982, i1=159, i21=174, i22=247, i23=-207, i24=6, i25=-18448, i26=-7;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)28);

        for (i = 13; i < 365; ++i) {
            i1 += (int)(-141L + (i * i));
            i1 = (int)fMeth();
            Test.byFld += (byte)(i - i);
            vMeth();
        }
        for (i21 = 2; i21 < 215; i21++) {
            Test.instanceCount += i21;
            i22 = i22;
            fArrFld[i21] -= i;
            i1 ^= 4;
            if (bFld) break;
            i23 = 1;
            while (++i23 < 118) {
                i24 = 1;
                while (--i24 > 0) {
                    i1 -= i;
                    if (true) break;
                    iFld1 *= i23;
                    Test.iFld = i24;
                    iFld1 += i;
                    i1 = 251;
                    byArr = byArr;
                }
                for (i25 = 1; 1 > i25; i25++) {
                    Test.iArrFld[i25] = i1;
                    Test.lArrFld[i23] = 5L;
                    i26 /= (int)(0 | 1);
                    i1 = i21;
                    if (false) continue;
                    Test.lArrFld[i21] <<= -6;
                    i22 &= (int)-9L;
                    iFld1 = sFld;
                }
                i22 += (i23 * i23);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
