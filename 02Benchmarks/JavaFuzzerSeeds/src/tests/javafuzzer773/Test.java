package tests.javafuzzer773;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:26:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-187L;
    public static double dFld=0.2392;
    public static volatile float fFld=-55.558F;
    public int iFld=42520;
    public byte byFld=66;
    public static boolean bFld=true;
    public static volatile float fArrFld[][]=new float[N][N];
    public static short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.836F);
        FuzzerUtils.init(Test.sArrFld, (short)-18344);
        FuzzerUtils.init(Test.dArrFld, 0.116842);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(long l, int i4) {

        int i5=32105, i6=54597, i7=-7, i8=36064, i9=-9, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -5);

        i4 = i4;
        Test.instanceCount = i4;
        for (i5 = 1; 202 > i5; ++i5) {
            Test.fFld -= l;
            i4 += (i5 * i6);
            i4 = i6;
            Test.fArrFld[i5][i5] = i5;
            for (i7 = 8; i7 > 1; --i7) {
                i6 += i5;
                i8 >>= i8;
                i4 = (int)l;
                i9 = 1;
                do {
                    iArr[i7 - 1][i7] = i9;
                    i6 -= -4;
                    i8 = (int)Test.instanceCount;
                } while (++i9 < 2);
            }
        }
        long meth_res = l + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(int i1, int i2) {

        int i3=33434, i10=54530, i11=251;
        boolean b=false;
        byte by=-49;

        Test.instanceCount -= (long)((-(++Test.dFld)) * ((i1 * Test.fFld) - (Test.instanceCount + Test.dFld)));
        i3 = 1;
        while (++i3 < 388) {
            short s=-13409;
            if ((b = (i3 != sMeth(Test.instanceCount, i1))) && false) continue;
            Test.instanceCount *= (long)44.34F;
            by >>= (byte)i3;
            Test.sArrFld[i3 - 1] += (short)Test.instanceCount;
            Test.dFld -= i3;
            b = b;
            s = (short)i3;
            i2 += (10268 + (i3 * i3));
            Test.dArrFld[i3 - 1] = 39377L;
        }
        i2 -= (int)152L;
        for (i10 = 10; i10 < 251; ++i10) {
            i11 <<= i10;
            i1 = by;
        }
        vMeth1_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + by + i10 + i11;
    }

    public static void vMeth(int i) {

        int i12=-149, i13=14, i14=-19, i15=12, i16=1284, i17=-18, i18=9, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 15);

        vMeth1(i, i);
        i <<= i;
        i = i;
        for (i12 = 9; i12 < 225; i12++) {
            i13 -= (int)Test.fFld;
        }
        for (i14 = 19; 393 > i14; i14++) {
            iArr1[i14 - 1] = -224;
            i16 = 5;
            while ((i16 -= 2) > 0) {
                for (i17 = 1; i17 < 2; i17 += 2) {
                    i15 = (int)Test.instanceCount;
                    i15 ^= i16;
                    if (i14 != 0) {
                        vMeth_check_sum += i + i12 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                }
                i += i16;
                i13 += (i16 * i17);
                Test.fFld -= Test.fFld;
            }
        }
        vMeth_check_sum += i + i12 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=32964, i20=150, i21=-13519, i22=51, i23=246, i24=4006, i25=10, i26=179, i27=250, i28=17, iArr2[]=new
            int[N];
        float f=0.100F, f1=115.1012F;
        short s1=-2518;

        FuzzerUtils.init(iArr2, 13816);

        vMeth(i19);
        i20 = 1;
        do {
            i19 *= i19;
            iFld >>= i19;
            for (i21 = i20; i21 < 172; ++i21) {
                i22 += i19;
                i19 += (i21 | i20);
            }
            i22 >>= 152;
            for (i23 = 172; i23 > 7; --i23) {
                iFld -= -47828;
                Test.fFld += i21;
                f -= i22;
            }
            switch (((i22 >>> 1) % 5) + 90) {
            case 90:
                byFld *= (byte)3;
                s1 += (short)i20;
                for (i25 = 2; i25 < 172; ++i25) {
                    if (Test.bFld) break;
                    for (i27 = i20; i27 < 2; i27++) {
                        Test.instanceCount += (i27 ^ i24);
                        if (Test.bFld) continue;
                        i24 = i25;
                        i19 <<= -39;
                        i24 |= i22;
                        i28 = (int)Test.instanceCount;
                        Test.instanceCount >>= i24;
                        Test.instanceCount /= ((long)(Test.fFld) | 1);
                        if (false) continue;
                    }
                    f1 *= byFld;
                    if (Test.bFld) break;
                    Test.instanceCount -= -189;
                }
                break;
            case 91:
                iArr2 = FuzzerUtils.int1array(N, (int)-12);
                break;
            case 92:
            case 93:
                iFld = (int)-2L;
                break;
            case 94:
                Test.fFld = 20416;
                break;
            default:
                i19 = i22;
            }
        } while ((i20 += 2) < 292);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
