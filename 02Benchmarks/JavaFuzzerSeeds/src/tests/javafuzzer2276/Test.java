package tests.javafuzzer2276;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:16:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=207L;
    public static volatile float fFld=-48.640F;
    public static volatile int iFld=-6581;
    public static byte byFld=-95;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -733339245L);
        FuzzerUtils.init(Test.iArrFld, -62066);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(byte by, int i8, int i9) {

        int i10=126, i11=78, i13=7, i14=-28606, i15=-35161, i16=54117, i17=47, iArr2[]=new int[N];
        short s=8802;
        double d1=0.8637;

        FuzzerUtils.init(iArr2, -38617);

        for (i10 = 15; 329 > i10; ++i10) {
            s &= (short)-10719;
        }
        for (int i12 : iArr2) {
            try {
                i11 = (-159 % i8);
                i12 = (i8 % -908575488);
                iArr2[(i9 >>> 1) % N] = (-44 % i10);
            } catch (ArithmeticException a_e) {}
            iArr2[(i8 >>> 1) % N] = i10;
            for (i13 = 1; i13 < 4; ++i13) {
                i14 += (i13 * i13);
            }
            by -= (byte)Test.instanceCount;
            Test.instanceCount += (long)2.408F;
            d1 += Test.fFld;
            iArr2 = FuzzerUtils.int1array(N, (int)-165);
            Test.lArrFld[(i15 >>> 1) % N] = Test.instanceCount;
            for (i16 = 4; i16 > 1; --i16) {
                i12 /= (int)(i15 | 1);
                Test.fFld -= Test.instanceCount;
            }
        }
        long meth_res = by + i8 + i9 + i10 + i11 + s + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, int i7) {

        double d2=2.53849;
        int i18=-8, i19=36019, i20=11, iArr1[][]=new int[N][N];
        long l1=-3674617653835611282L;
        short s1=31042;

        FuzzerUtils.init(iArr1, -6);

        iArr1[(63582 >>> 1) % N][(i7 >>> 1) % N] = (--i7);
        i7 &= (int)(lMeth(Test.byFld, i7, i7) + d2);
        Test.instanceCount -= i7;
        for (i18 = 244; i18 > 6; i18 -= 2) {
            switch ((i18 % 8) + 51) {
            case 51:
                try {
                    i7 = (254 / i18);
                    i7 = (-91 / i19);
                    i7 = (-1142767349 % i7);
                } catch (ArithmeticException a_e) {}
                Test.fFld = i19;
                iArr1[i18 + 1][(Test.iFld >>> 1) % N] = i7;
                break;
            case 52:
                iArr1[i18][i18] = (int)Test.instanceCount;
                Test.iFld -= i20;
                Test.instanceCount -= 37292;
                break;
            case 53:
                l1 = 13;
                while ((l1 -= 3) > 0) {
                    i19 >>= Test.iFld;
                }
                iArr1[i18 - 1][i18] *= (int)l1;
                i19 <<= 18162;
                break;
            case 54:
                iArr1[i18 - 1][i18 + 1] += Test.byFld;
                break;
            case 55:
                l *= l;
                break;
            case 56:
                l += (long)d2;
                break;
            case 57:
                d2 -= l;
            case 58:
                s1 -= (short)2.952F;
                break;
            }
        }
        long meth_res = l + i7 + Double.doubleToLongBits(d2) + i18 + i19 + i20 + l1 + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, double d) {

        int i2=115, i3=-128, i4=-3, i5=-50940, i6=15, i21=13, iArr[][]=new int[N][N];
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 81.52630);
        FuzzerUtils.init(iArr, 10);

        for (i2 = 1; i2 < 265; i2++) {
            i <<= (int)Long.reverseBytes(Math.min(Test.instanceCount++, ++Test.lArrFld[i2 + 1]));
            for (i4 = 1; i4 < 6; ++i4) {
                short s2=-16526;
                i1 <<= (int)(i5 - (dArr[i4] - (75L + (++iArr[i2 - 1][i4 - 1]))));
                i6 = 1;
                do {
                    i1 = (int)d;
                    iArr[i2][i2 - 1] = Math.abs(i5--);
                    i1 += (int)Test.instanceCount;
                    Test.iFld += (((i6 * Test.fFld) + Test.instanceCount) - i2);
                    b = (((iArr[i6][i6 - 1]--) + (-iMeth(Test.instanceCount, i4))) <= i4);
                } while (++i6 < 2);
                i21 = 1;
                do {
                    Test.instanceCount <<= Test.instanceCount;
                } while (++i21 < 2);
                Test.lArrFld[i4 - 1] -= s2;
                i5 += (int)3354393461L;
                Test.iFld -= i;
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d3=1.126130;
        int i22=34626, i23=-126, i24=-4, i25=88, i26=-10259, i27=45652, i29=-62301, i30=-4, i31=-11, i32=55313,
            i33=201, i34=28782;
        boolean b1=true;

        if (b1) {
            Test.fFld += (++Test.iFld);
            vMeth(Test.iFld, 5, d3);
            Test.iFld >>= 109;
            for (i22 = 10; 199 > i22; i22++) {
                try {
                    Test.iArrFld[i22] = (3 % i22);
                    i23 = (Test.iArrFld[i22 - 1] % -171);
                    i23 = (-178 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.iFld += Test.iFld;
                Test.iArrFld[i22 - 1] = i23;
                for (i24 = 133; i24 > 2; i24--) {
                    i23 = i24;
                    if (b1) continue;
                }
            }
        }
        for (i26 = 10; i26 < 245; ++i26) {
            Test.iFld = Test.iFld;
            i27 >>= (int)3073896836L;
            i29 = 1;
            while (++i29 < 107) {
                for (i30 = 1; 1 > i30; ++i30) {
                    Test.iArrFld[i30 - 1] = i30;
                    Test.instanceCount >>= -3750804783927006215L;
                    i23 += i30;
                    if (b1) {
                        Test.iArrFld[i29] *= i26;
                        Test.iArrFld[i29] *= (int)1.61025;
                    }
                }
                i31 += i22;
                i27 = (int)Test.fFld;
                Test.fFld *= i30;
                for (i32 = 1; i32 > 1; --i32) {
                    Test.iArrFld[i29 + 1] += (int)Test.fFld;
                    i25 <<= (int)Test.instanceCount;
                    b1 = b1;
                    Test.instanceCount &= Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
