package tests.javafuzzer3444;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:24:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2860L;
    public static double dFld=1.121085;
    public boolean bFld=true;
    public volatile float fArrFld[]=new float[N];

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=-13, i9=-4, i10=-11, i11=222, i12=-31250, i13=126, i14=-89, i15=38552;
        float f=-87.953F;
        boolean b=true;

        i8 += (int)f;
        for (i9 = 9; i9 < 337; ++i9) {
            i8 -= i9;
        }
        for (i11 = 362; i11 > 21; i11--) {
            i12 >>= i12;
            i13 = 1;
            do {
                for (i14 = 1; 1 > i14; i14++) {
                    long l=36109L;
                    f += (float)Test.dFld;
                    switch ((((-4 >>> 1) % 2) * 5) + 39) {
                    case 46:
                        i10 += (((i14 * f) + Test.instanceCount) - i12);
                        break;
                    case 41:
                        f += (((i14 * i12) + f) - f);
                        b = b;
                        break;
                    default:
                        i15 -= i8;
                        l += i15;
                    }
                    i8 = i10;
                }
            } while (++i13 < 5);
        }
        vMeth_check_sum += i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0);
    }

    public static int iMeth(byte by, int i7) {

        int i16=-6, i17=0, i18=-62248, i19=165, i20=-166, iArr1[]=new int[N];
        float f1=22.359F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)127);
        FuzzerUtils.init(iArr1, -47834);

        vMeth();
        Test.instanceCount = i7;
        i7 -= 61;
        byArr[(i7 >>> 1) % N] *= (byte)127;
        i7 <<= i7;
        for (i16 = 386; i16 > 21; --i16) {
            for (i18 = 1; i18 < 5; i18 += 2) {
                try {
                    i17 = (79 / i19);
                    iArr1[i18 + 1] = (15560 % iArr1[i18]);
                    i19 = (-466996155 % i18);
                } catch (ArithmeticException a_e) {}
                i17 -= (int)f1;
                i19 = -12955;
            }
            Test.dFld -= -6136267244930146062L;
            i19 *= (int)Test.instanceCount;
            i20 = 5;
            do {
                iArr1[i16] *= (int)-1396093431326081206L;
                i19 += (i20 ^ Test.instanceCount);
            } while (--i20 > 0);
        }
        long meth_res = by + i7 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f1) + i20 + FuzzerUtils.checkSum(byArr)
            + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i2, int i3, int i4) {

        int i5=-11, i6=79, i21=40523, i22=12, i23=-7074, i24=41783, i25=3, i26=26422, i27=-140;
        byte by1=64;
        short s=-506;
        float f2=2.92F;
        boolean b1=true;

        for (i5 = 5; i5 < 126; i5++) {
            i6 -= iMeth(by1, i2);
        }
        for (i21 = 178; i21 > 10; i21--) {
            Test.dFld %= (i3 | 1);
        }
        for (i23 = 3; i23 < 128; ++i23) {
            i25 = 1;
            do {
                for (i26 = 1; i26 < 1; ++i26) {
                    i22 = i22;
                    i22 *= i26;
                    s = (short)i6;
                    i27 |= (int)Test.instanceCount;
                    if (b1) {
                        i27 += (int)Test.dFld;
                        fArrFld[i26] = f2;
                    } else {
                        i6 /= (int)((long)(f2) | 1);
                    }
                }
            } while (++i25 < 13);
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + by1 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + s +
            Float.floatToIntBits(f2) + (b1 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-144, i1=227, i28=9, i29=-41519, i30=0, i31=9420, i32=-212, i33=4, i34=0, iArr[][]=new int[N][N];
        short s1=-11583;
        double d=2.51119;
        float f3=0.313F;

        FuzzerUtils.init(iArr, -49);

        for (i = 5; i < 263; ++i) {
            i1 += (0 + (i * i));
            fArrFld[i] = (iArr[i][i + 1] + (-lMeth(i1, i, i)));
            i1 *= 230;
            i1 += (((i * Test.instanceCount) + s1) - i1);
        }
        i28 = 144;
        do {
            for (d = 6; d < 174; ++d) {
                i1 += (int)f3;
                i1 += i;
                iArr[i28 + 1][i28] *= i28;
                for (i30 = 1; i30 < 2; ++i30) {
                    i31 -= (int)f3;
                    bFld = bFld;
                    i1 -= (int)-194L;
                }
                switch (((i28 % 1) * 5) + 40) {
                case 43:
                }
                Test.instanceCount = Test.instanceCount;
            }
            i1 = i30;
            i29 *= (int)Test.instanceCount;
            iArr[(i28 >>> 1) % N][i28 + 1] *= (int)-119.176F;
        } while (--i28 > 0);
        i32 = 1;
        do {
            try {
                i1 = (i31 / i1);
                i1 = (i32 % i31);
                i1 = (i28 / -105);
            } catch (ArithmeticException a_e) {}
            i31 &= i31;
            for (i33 = i32; i33 < 135; ++i33) {
                i29 += i32;
                if (true) continue;
                i31 = 16313;
                iArr[i33][i32] = i1;
                i29 = i34;
                Test.instanceCount -= i32;
                iArr[i33][i32 + 1] <<= i30;
            }
        } while (++i32 < 186);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
