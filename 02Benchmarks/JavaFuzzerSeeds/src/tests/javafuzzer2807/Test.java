package tests.javafuzzer2807;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:40:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2499812428227381256L;
    public static volatile boolean bFld=false;
    public static short sFld=-15479;
    public static long lFld=0L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5843L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(long l, int i2, int i3) {

        int i4=123, i5=-32641, i6=103, i7=-18074, i8=1942, i9=-13;
        byte by=-109;
        double d=-74.121205;
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 1.449F);

        i2 |= i3;
        for (i4 = 300; i4 > 16; --i4) {
            i2 <<= 39;
            i3 += i4;
            Test.instanceCount += i5;
            i5 |= i3;
            for (i6 = 1; i6 < 6; ++i6) {
                by /= (byte)(Test.instanceCount | 1);
            }
            by += (byte)i3;
        }
        bArr[(i5 >>> 1) % N] = Test.bFld;
        Test.sFld <<= (short)i2;
        i7 -= (int)d;
        for (i8 = 11; 257 > i8; i8++) {
            fArr[i8 + 1] = by;
            i5 += (i8 + i3);
        }
        long meth_res = l + i2 + i3 + i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d) + i8 + i9 +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i1=-241, i10=-8, i11=-37, iArr[]=new int[N];
        float f=43.118F, fArr1[]=new float[N];
        byte by1=113;

        FuzzerUtils.init(iArr, -10481);
        FuzzerUtils.init(fArr1, 2.304F);

        i1 *= (int)lMeth1(-2579787476196846345L, i1, i1);
        iArr[(i1 >>> 1) % N] = (int)f;
        iArr[(i1 >>> 1) % N] |= (int)Test.lFld;
        Test.bFld = Test.bFld;
        for (i10 = 201; i10 > 1; i10 -= 2) {
            iArr[i10 - 1] += by1;
            iArr[i10 + 1] = i1;
        }
        for (int i13 : iArr) {
            i11 += by1;
            i13 = i13;
            i11 = i1;
            Test.instanceCount *= (long)f;
            Test.lFld = Test.instanceCount;
            i13 = i1;
            Test.lFld += (long)f;
        }
        long meth_res = i1 + Float.floatToIntBits(f) + i10 + i11 + by1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s) {

        int i=-2, i14=42381, i15=-144, i16=42, i17=54945;
        byte by2=-46;
        long l1=7794277157908832065L;
        float f2=-2.892F, f3=-46.402F;

        Test.instanceCount = (Math.abs(i * s) + lMeth());
        by2 = (byte)i;
        Test.bFld = Test.bFld;
        i = (int)Test.instanceCount;
        for (l1 = 22; l1 < 364; ++l1) {
            for (f2 = l1; f2 < 5; f2++) {
                Test.instanceCount += i14;
                f3 *= -236;
                i15 += (int)l1;
                Test.instanceCount += (long)(f2 * f2);
                switch ((int)(((f2 % 2) * 5) + 116)) {
                case 119:
                    switch ((int)(((f2 % 2) * 5) + 106)) {
                    case 114:
                        for (i16 = 1; i16 < 1; ++i16) {
                            if (Test.bFld) break;
                            Test.lFld = i;
                        }
                        break;
                    case 109:
                        Test.lArrFld[(int)(l1)] *= -146;
                    }
                    break;
                case 120:
                    i15 *= (int)f2;
                    break;
                default:
                    i17 += (int)f2;
                }
            }
        }
        vMeth_check_sum += s + i + by2 + l1 + i14 + Float.floatToIntBits(f2) + i15 + Float.floatToIntBits(f3) + i16 +
            i17;
    }

    public void mainTest(String[] strArr1) {

        int i19=56207, i20=211, i21=-58, iArr1[]=new int[N];
        float f4=110.357F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(dArr, -12.29283);

        vMeth(Test.sFld);
        Test.instanceCount -= Test.lFld;
        for (int i18 : iArr1) {
            i18 += i18;
            for (i19 = 1; i19 < 63; i19++) {
                i21 = 2;
                while (--i21 > 0) {
                    byte by3=92;
                    i18 = i21;
                    dArr[i21] -= f4;
                    i18 = i19;
                    if (Test.bFld) break;
                    if (Test.bFld) continue;
                    switch ((((-42477 >>> 1) % 9) * 5) + 70) {
                    case 107:
                        i20 = i20;
                        i18 = i19;
                        f4 += 35895;
                        Test.lFld = i21;
                        break;
                    case 87:
                        iArr1[i21 + 1] <<= 21196;
                        Test.bFld = true;
                        i18 = i18;
                        break;
                    case 88:
                        i20 += (int)(415670632L + (i21 * i21));
                        break;
                    case 109:
                        if (Test.bFld) continue;
                        Test.sFld *= (short)i19;
                    case 79:
                        Test.instanceCount = 19709;
                        i20 += i21;
                        Test.instanceCount = i21;
                    case 100:
                        Test.instanceCount -= i18;
                        i18 += (((i21 * i19) + Test.lFld) - by3);
                        if (Test.bFld) continue;
                        iArr1[i19] -= (int)f4;
                        break;
                    case 75:
                        try {
                            i20 = (i21 % i18);
                            i18 = (iArr1[i21 - 1] / i20);
                            iArr1[i21] = (-7590 / i20);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 112:
                        i18 = 5;
                    case 91:
                        by3 |= (byte)i18;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
