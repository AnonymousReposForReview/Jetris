package tests.javafuzzer2644;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:58:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static byte byFld=112;
    public int iFld=44;
    public static boolean bFld=false;
    public static volatile int iFld1=-25;
    public static volatile float fFld=-110.934F;
    public static int iFld2=-20146;
    public static double dFld=-2.56571;
    public boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -114);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, long l1, int i3) {

        int i4=1402, i5=-64970, i6=-244, i7=12, i8=38732, i9=95;
        double d=0.36741;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.946F);

        Test.iFld1 = (int)l1;
        for (i4 = 5; i4 < 206; i4++) {
            i5 += 12629;
            Test.iArrFld = Test.iArrFld;
            Test.iFld1 += i4;
            switch ((i4 % 1) + 40) {
            case 40:
                for (i6 = 1; i6 < 8; i6++) {
                    Test.iArrFld[i6] -= (int)d;
                    if (Test.bFld) continue;
                    for (i8 = 1; i8 < 2; i8++) {
                        d += d;
                        i3 = 37419;
                        Test.instanceCount += -112;
                        fArr[i4 - 1] *= f;
                        Test.iFld1 = (int)l1;
                    }
                }
                break;
            default:
                i3 |= 13;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 +
            i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i10=-129, i11=-43937, i12=209, i13=67, i14=-8;
        short s=-11304;

        Test.bFld = (Integer.reverseBytes((int)(Test.iFld1 + Test.instanceCount)) < ((8 * Test.iArrFld[(Test.iFld1 >>>
            1) % N]) - Math.max(Test.iFld1, 61003)));
        vMeth1(Test.fFld, Test.instanceCount, Test.iFld1);
        for (i10 = 221; i10 > 3; i10--) {
            i11 = (int)Test.instanceCount;
            i11 -= s;
            for (i12 = 1; i12 < 7; ++i12) {
                i11 = i11;
                i13 *= 61867;
                Test.instanceCount = 9;
                Test.instanceCount += (-14 + (i12 * i12));
                i11 += i12;
                Test.iFld2 += -55324;
                i14 = 1;
                while (++i14 < 2) {
                    try {
                        Test.iFld2 = (Test.iFld2 % -40321);
                        i11 = (Test.iFld1 % -34307);
                        i13 = (13640 % Test.iFld2);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld = Test.iArrFld;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + s + i12 + i13 + i14;
    }

    public static int iMeth(long l) {

        int i15=-32371, i16=0, i17=80;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -82.47101);

        vMeth();
        Test.iFld1 <<= -122;
        Test.iFld2 -= Test.iFld2;
        Test.iArrFld = Test.iArrFld;
        Test.iFld2 = (int)-2.284F;
        i15 = 1;
        while (++i15 < 301) {
            Test.iFld1 += (int)Test.instanceCount;
            for (i16 = i15; i16 < 5; i16++) {
                Test.iFld2 <<= (int)Test.instanceCount;
                Test.iArrFld[i16 - 1] &= Test.iFld2;
                dArr[i16 - 1] -= Test.iFld1;
                Test.fFld = i15;
                i17 += Test.iFld1;
                Test.iFld2 = Test.iFld2;
                Test.fFld += (((i16 * Test.iFld1) + Test.byFld) - Test.instanceCount);
            }
        }
        long meth_res = l + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-17599, i1=-9425, i2=-22512, i18=-3, i19=14, i20=-8, i21=12, i22=13, iArr[]=new int[N];
        float f1=-59.971F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -21369);
        FuzzerUtils.init(sArr, (short)-3063);

        Test.byFld += (byte)(((iFld - Test.instanceCount) + Math.max(iFld, -56316)) - iFld);
        for (i = 326; i > 15; --i) {
            Test.byFld += (byte)(i * i);
            if (Test.bFld = (Test.bFld | (!bArrFld[i - 1][i + 1]))) break;
            i2 = 1;
            do {
                iArr[i - 1] = iMeth(Test.instanceCount);
                iArr[i2 - 1] <<= i1;
                Test.instanceCount *= Test.instanceCount;
                i1 += (i2 * i2);
            } while (++i2 < 81);
            for (i18 = 4; i18 < 81; i18++) {
                try {
                    i1 = (i18 / -226);
                    Test.iFld2 = (-278686962 % Test.iFld2);
                    i19 = (Test.iFld1 / 56028);
                } catch (ArithmeticException a_e) {}
            }
            i1 = i18;
            sArr[i] *= (short)i;
            Test.iFld1 *= (int)Test.fFld;
        }
        i20 = 1;
        do {
            Test.byFld >>= (byte)i;
            Test.instanceCount = -5L;
            Test.iFld2 = i19;
            lArrFld = FuzzerUtils.long1array(N, (long)-48084L);
            for (f1 = 15; f1 < 278; ++f1) {
                Test.byFld -= (byte)Test.iFld2;
                iArr[i20 - 1] -= i1;
                Test.bFld = Test.bFld;
                Test.iFld1 /= (int)(i1 | 1);
                i22 = 1;
                while (++i22 < 2) {
                    Test.iFld1 -= (int)Test.dFld;
                    Test.iFld2 = i19;
                    Test.instanceCount += i18;
                    i19 += i18;
                }
                Test.iFld2 &= (int)435576283L;
            }
        } while ((i20 += 2) < 181);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
