package tests.javafuzzer2988;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:27:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2371864689L;
    public int iFld=0;
    public static short sFld=-26644;
    public short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i8, int i9) {

        int i10=-36600, i11=-57848, i12=1, i13=-38;
        float f2=7.411F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -52394L);

        for (long l1 : lArr) {
            for (i10 = 1; i10 < 4; ++i10) {
                l1 += (((i10 * i10) + i9) - Test.instanceCount);
                for (i12 = 1; i12 < 2; ++i12) {
                    switch ((i10 % 2) + 82) {
                    case 82:
                        i8 = i10;
                        f2 += (((i12 * l1) + f2) - i11);
                        Test.instanceCount <<= Test.instanceCount;
                    case 83:
                        f2 -= i9;
                        if (b) {
                            f2 += i12;
                            i13 = (int)Test.instanceCount;
                            Test.instanceCount -= 128;
                        } else if (b) {
                            i9 = i12;
                            Test.instanceCount <<= 8232630130527465181L;
                        } else if (b) {
                            Test.instanceCount >>= i13;
                        } else {
                            try {
                                i9 = (i11 % 117);
                                i13 = (i9 % 24518);
                                i13 = (i11 % 1434040721);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    }
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(float f1) {

        int i2=63626, i3=-8, i4=-65093, i5=94, i6=-248, i7=-13, iArr[]=new int[N];
        short s=-10958;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(dArr, 2.81626);

        for (i2 = 5; i2 < 202; ++i2) {
            for (i4 = i2; i4 < 8; ++i4) {
                i5 += (i4 ^ i5);
                i5 = -8;
                switch (((i4 % 3) * 5) + 120) {
                case 129:
                    for (i6 = 1; i6 < 1; ++i6) {
                        i7 += i6;
                        try {
                            iArr[i2 + 1] = (i5 % -180);
                            iArr[i4 - 1] = (iArr[i6 - 1] / -7738);
                            i7 = (213 % iArr[i4 - 1]);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 131:
                    i7 += (int)(iMeth2(i3, i4) * 8386004301955460152L);
                    iArr[i4] *= i2;
                    s = s;
                    break;
                case 133:
                    iArr[i4 - 1] ^= (int)Test.instanceCount;
                    break;
                }
                Test.instanceCount += (i4 * i4);
                dArr[i4 - 1] *= f1;
                if (false) break;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + i5 + i6 + i7 + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i1) {

        float f3=1.208F, f4=-2.866F;
        byte by=-109;
        short s1=12238;
        int i14=122, i15=2, i16=-142, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 0);

        Test.instanceCount -= (((i1 >>> Test.instanceCount) + iMeth1(f3)) + Test.instanceCount);
        by <<= (byte)i1;
        s1 <<= (short)20734;
        i14 = 1;
        while (++i14 < 232) {
            i15 = 1;
            while (++i15 < 7) {
                i1 >>= i14;
            }
            f4 = 1;
            do {
                switch ((((i15 >>> 1) % 6) * 5) + 126) {
                case 143:
                    try {
                        iArr1[i14] = (i15 % 13619);
                        i1 = (17278 / i14);
                        iFld = (i15 % iFld);
                    } catch (ArithmeticException a_e) {}
                    iFld = (int)466539016580698866L;
                    i16 += iFld;
                    f3 = Test.instanceCount;
                    break;
                case 142:
                    Test.instanceCount += (long)((long)f4 | i1);
                    break;
                case 137:
                    iFld *= i16;
                    sArrFld = sArrFld;
                    break;
                case 138:
                    Test.instanceCount += (long)(((f4 * i15) + iFld) - i14);
                    break;
                case 134:
                    s1 = by;
                    break;
                case 132:
                    Test.instanceCount *= iFld;
                    break;
                }
            } while (++f4 < 7);
        }
        long meth_res = i1 + Float.floatToIntBits(f3) + by + s1 + i14 + i15 + Float.floatToIntBits(f4) + i16 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.904F;
        long l=82L;
        int i=3, i17=-7, i18=-3, i19=-7, i20=-7, i21=-2;
        double d=97.93998, d1=87.125063;
        boolean b1=false;

        iFld = (int)(--Test.instanceCount);
        iFld *= (int)(f - (Test.instanceCount--));
        for (l = 23; l < 393; ++l) {
            i = iMeth(iFld);
            d += l;
            for (i17 = (int)(l); 68 > i17; i17++) {
                iFld += (i17 * i);
                iFld -= -19745;
                for (d1 = 1; d1 < 1; d1++) {
                    f -= i18;
                    if (b1) continue;
                    i = Test.sFld;
                    i18 += (int)(d1 * d1);
                    f += l;
                    Test.iArrFld = Test.iArrFld;
                    switch ((int)(((l % 1) * 5) + 30)) {
                    case 31:
                        Test.instanceCount = i;
                        iFld -= (int)d1;
                    }
                    i18 = (int)58.870F;
                }
                if (b1) break;
            }
            Test.iArrFld[(int)(l)] <<= -5;
            for (i20 = 2; i20 < 68; i20++) {
                Test.instanceCount += (((i20 * i) + i17) - i18);
                d = f;
                Test.instanceCount += (((i20 * i20) + i20) - i);
                Test.instanceCount = i19;
                iFld -= i19;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-217);
                b1 = b1;
                i21 = iFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
