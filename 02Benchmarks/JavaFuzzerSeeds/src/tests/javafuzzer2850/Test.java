package tests.javafuzzer2850;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:27:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10976L;
    public static double dFld=-1.25192;
    public float fFld=31.176F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -46687);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i4) {

        int i5=-1, i6=-46, i7=27587, i8=49725, i9=7, iArr[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        double d=-1.96345;
        long l2=55L;
        float f1=-7.706F;
        byte by1=52;
        short s=3458;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, 3);

        for (i5 = 387; i5 > 11; i5 -= 3) {
            i4 = (int)-12802L;
            bArr[i5 - 1] = b1;
            i6 = (int)d;
            for (l2 = 13; l2 > i5; l2 -= 3) {
                f1 += (float)d;
                iArr[i5 - 1] += by1;
                by1 -= (byte)s;
                if (i5 != 0) {
                    vMeth1_check_sum += l1 + i4 + i5 + i6 + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + l2 + i7 +
                        Float.floatToIntBits(f1) + by1 + s + i8 + i9 + FuzzerUtils.checkSum(bArr) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (i8 = 1; i8 > 1; i8 -= 2) {
                    Test.instanceCount = s;
                    i7 = -14634;
                    f1 *= i5;
                    i9 = (int)f1;
                    i6 >>= i5;
                }
            }
        }
        vMeth1_check_sum += l1 + i4 + i5 + i6 + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + l2 + i7 +
            Float.floatToIntBits(f1) + by1 + s + i8 + i9 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(boolean b) {

        int i10=1, i11=-41814, i12=-17703, i13=-188, iArr1[]=new int[N];
        byte by2=122, byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(byArr, (byte)46);

        vMeth1(Test.instanceCount, i10);
        Test.instanceCount = i10;
        iArr1[(i10 >>> 1) % N] -= i10;
        i11 = 1;
        while (++i11 < 247) {
            byArr[i11 - 1] -= (byte)-43219;
            if (true) break;
            for (i12 = 1; i12 < 7; i12++) {
                Test.instanceCount = (long)-2.311F;
                if (b) {
                    i10 += (int)Test.instanceCount;
                    i10 *= i12;
                    switch (((i12 % 2) * 5) + 124) {
                    case 125:
                        i10 = i11;
                        b = b;
                        i10 += i11;
                        break;
                    case 131:
                        by2 = (byte)i12;
                        break;
                    }
                } else {
                    i10 = (int)2480464469L;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i10 + i11 + i12 + i13 + by2 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, float f) {

        int i=28231, i1=-32248, i2=6, i3=100, i14=6690, i15=-126, i16=57, i17=-9, i18=14;
        byte by=-80;
        boolean b2=false;

        for (i = 4; 147 > i; ++i) {
            for (i2 = i; i2 < 11; ++i2) {
                by |= (byte)i;
                iMeth(b2);
                for (i14 = 1; i14 > 1; --i14) {
                    Test.iArrFld[i2] *= (int)f;
                }
                if (i1 != 0) {
                    vMeth_check_sum += l + Float.floatToIntBits(f) + i + i1 + i2 + i3 + by + (b2 ? 1 : 0) + i14 + i15 +
                        i16 + i17 + i18;
                    return;
                }
                i3 = (int)Test.dFld;
                for (i16 = 1; 1 > i16; i16++) {
                    Test.instanceCount += i16;
                    Test.iArrFld[i16] -= (int)-180L;
                    Test.iArrFld[i2] <<= i;
                    i18 = (int)Test.instanceCount;
                    i17 |= i1;
                    Test.iArrFld[i16 - 1] = i15;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i + i1 + i2 + i3 + by + (b2 ? 1 : 0) + i14 + i15 + i16 + i17 +
            i18;
    }

    public void mainTest(String[] strArr1) {

        int i19=-9, i20=49, i21=46, i22=-12, i23=185, i24=-3;
        long l3=-160L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -113.267F);

        vMeth(-181L, fFld);
        if (Test.bFld) {
            for (i19 = 5; 144 > i19; ++i19) {
                for (i21 = 180; 7 < i21; i21--) {
                    switch (((i19 % 1) * 5) + 33) {
                    case 37:
                        Test.dFld = Test.instanceCount;
                        for (i23 = 1; 2 > i23; i23 += 2) {
                            fFld += -81;
                            Test.instanceCount += (0 + (i23 * i23));
                            switch ((i21 % 4) + 98) {
                            case 98:
                                Test.instanceCount = i23;
                                i24 = -35644;
                                i20 -= -53935;
                                switch ((((i20 >>> 1) % 2) * 5) + 75) {
                                case 79:
                                    i22 = i21;
                                    Test.iArrFld = FuzzerUtils.int1array(N, (int)7);
                                    break;
                                case 85:
                                    Test.instanceCount -= i23;
                                }
                                break;
                            case 99:
                                try {
                                    i22 = (Test.iArrFld[i23] / 21722);
                                    i20 = (34721 % i21);
                                    i20 = (i24 % 183);
                                } catch (ArithmeticException a_e) {}
                                fFld -= i20;
                                i20 += i23;
                            case 100:
                                Test.iArrFld[(i21 >>> 1) % N] = i21;
                                Test.dFld += i19;
                            case 101:
                                switch (((i23 % 2) * 5) + 18) {
                                case 22:
                                    i20 -= (int)2.632F;
                                    fArr[i21] = i19;
                                    break;
                                case 27:
                                    if (Test.bFld) continue;
                                    break;
                                default:
                                    Test.bFld = Test.bFld;
                                    l3 += i20;
                                }
                                break;
                            }
                            if (Test.bFld) break;
                        }
                        fArr[i21] *= Test.instanceCount;
                    default:
                        try {
                            i22 = (-9406 / i19);
                            i22 = (-177 / i24);
                            i24 = (i22 % 62910);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        } else {
            Test.instanceCount <<= i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
