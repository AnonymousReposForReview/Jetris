package tests.javafuzzer89;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:13:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static short sFld=-30409;
    public static float fFld=-2.490F;
    public static int iFld=4;
    public long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-122);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5) {

        int i6=-4581;

        Test.instanceCount += i5;
        i6 = 283;
        while ((i6 -= 3) > 0) {
            i5 = i6;
            Test.sFld = (short)i5;
        }
        Test.fFld -= -228L;
        vMeth2_check_sum += i4 + i5 + i6;
    }

    public void vMeth1(int i2, short s1, int i3) {

        int i7=0, i8=-43506, i9=22, i10=1, iArr[][]=new int[N][N];
        double d=-30.124383;

        FuzzerUtils.init(iArr, -36);

        i2 >>= (int)Test.instanceCount;
        vMeth2(i2, i2);
        for (i7 = 6; i7 < 225; i7++) {
            Test.instanceCount += (i7 * i7);
            switch ((((i7 >>> 1) % 5) * 5) + 108) {
            case 130:
                Test.instanceCount = i2;
                for (i9 = i7; i9 < 7; ++i9) {
                    Test.fFld -= i7;
                    i3 -= (int)Test.instanceCount;
                    i2 <<= (int)Test.instanceCount;
                    Test.instanceCount += i9;
                }
                iArr[i7] = iArr[i7];
                Test.instanceCount += (14 + (i7 * i7));
                break;
            case 122:
                i8 += (i7 | i10);
                Test.instanceCount >>= Test.sFld;
            case 132:
                Test.fFld %= (i2 | 1);
            case 111:
                iArr[i7 - 1][i7] -= (int)d;
            case 131:
                i2 >>>= i10;
                break;
            default:
                iArr[i7 - 1] = iArr[i7];
            }
        }
        vMeth1_check_sum += i2 + s1 + i3 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i=-2225, i1=2, i11=-182, i12=-12, iArr1[]=new int[N];
        float f=-90.503F;
        short s=12024;
        boolean b=false, b1=false;

        FuzzerUtils.init(iArr1, -220);

        for (i = 1; i < 129; i++) {
            f += (((i * i1) + i) - Test.instanceCount);
            i1 >>= (s++);
            if (b) {
                vMeth1(i1, s, -37225);
                if (b) break;
                for (i11 = 1; i11 < 12; i11++) {
                    double d1=-32.101715;
                    switch (((i % 8) * 5) + 126) {
                    case 164:
                        switch (((i % 7) * 5) + 55) {
                        case 88:
                            i12 *= (int)Test.fFld;
                            Test.instanceCount += i;
                            iArr1[i11] -= i11;
                            break;
                        case 69:
                            i1 |= i;
                            break;
                        case 76:
                            iArr1[i] = i;
                            i12 -= i11;
                            break;
                        case 56:
                            Test.instanceCount *= (long)Test.fFld;
                            break;
                        case 77:
                            Test.instanceCount *= (long)-108.100528;
                            break;
                        case 81:
                            iArr1 = FuzzerUtils.int1array(N, (int)126);
                            break;
                        case 90:
                            d1 = d1;
                            break;
                        }
                        break;
                    case 165:
                        i12 <<= (int)Test.instanceCount;
                    case 130:
                        Test.iFld -= i11;
                        break;
                    case 148:
                        Test.instanceCount += i11;
                        break;
                    case 149:
                        i1 = (int)Test.instanceCount;
                    case 146:
                        Test.iFld += (((i11 * i1) + i11) - Test.instanceCount);
                        break;
                    case 153:
                        i12 += i11;
                        break;
                    case 141:
                        i12 -= i11;
                        break;
                    default:
                        lArrFld[i11 + 1] -= i1;
                    }
                }
            } else if (b1) {
                if (Test.iFld != 0) {
                    vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + s + (b ? 1 : 0) + i11 + i12 + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
            } else {
                Test.iFld >>= i12;
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + s + (b ? 1 : 0) + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d2=0.56953;
        int i13=63781, i14=22248, i15=-44723, i16=-10078, i17=200, i18=24393, i19=67, i20=-1, i21=-14150, iArr2[]=new
            int[N];
        boolean b2=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -37385);
        FuzzerUtils.init(sArr, (short)15013);

        vMeth();
        d2 -= Test.iFld;
        Test.fFld -= Test.fFld;
        Test.iFld -= Test.iFld;
        for (i13 = 245; 1 < i13; i13 -= 3) {
            Test.instanceCount += (long)d2;
            Test.iFld <<= Test.sFld;
        }
        for (i15 = 4; i15 < 311; i15++) {
            iArr2[i15 - 1] = (int)Test.instanceCount;
        }
        switch ((((Test.iFld >>> 1) % 7) * 5) + 56) {
        case 78:
            i14 += (int)17044L;
            i17 = 1;
            do {
                i16 += (int)Test.instanceCount;
                sArr[i17] += (short)d2;
                for (i18 = 159; i18 > i17; --i18) {
                    try {
                        i16 = (Test.iFld / -1490723174);
                        iArr2[i18 - 1] = (i14 % 21807);
                        i14 = (-436935228 % iArr2[i17]);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i18] = Test.sFld;
                    i14 *= i16;
                    for (i20 = 1; i20 < 1; ++i20) {
                        i19 = i13;
                        if (b2) continue;
                    }
                    Test.instanceCount -= Test.sFld;
                    i14 = 22620;
                    if (b2) {
                        d2 -= i15;
                        i19 = (int)Test.fFld;
                    } else if (b2) {
                        iArr2[i17 - 1] -= (int)Test.fFld;
                        Test.iFld -= i18;
                        Test.iFld += (i18 + Test.instanceCount);
                        Test.byArrFld[i18 + 1] = (byte)2214381603L;
                    } else if (b2) {
                        iArr2[i18 - 1] <<= 6;
                    } else {
                        i21 <<= (int)Test.instanceCount;
                    }
                }
            } while (++i17 < 158);
        case 80:
            i14 >>= i21;
        case 58:
        case 88:
            Test.instanceCount -= i20;
        case 82:
            Test.instanceCount = i13;
            break;
        case 85:
            i21 *= (int)Test.instanceCount;
            break;
        case 84:
            Test.iFld = (int)Test.instanceCount;
            break;
        default:
            Test.iFld = i19;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
