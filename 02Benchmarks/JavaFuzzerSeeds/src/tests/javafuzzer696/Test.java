package tests.javafuzzer696;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:08:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7950912441914504355L;
    public static int iFld=-123;
    public static byte byFld=-84;
    public boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        boolean b=true;
        int i8=-232, i9=1427, i10=7;
        byte by1=28;
        float f=0.819F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(fArr, -2.692F);

        b = b;
        if (true) {
            i8 = 1;
            while (++i8 < 327) {
                for (i9 = 1; i9 < 5; ++i9) {
                    i10 += i9;
                    by1 = (byte)Test.instanceCount;
                    lArr = FuzzerUtils.long1array(N, (long)-4416L);
                    Test.iFld += (i9 * i9);
                    Test.instanceCount *= Test.iFld;
                    i10 = (int)2.8541;
                }
                if (b) break;
                i10 = i9;
                i10 -= i8;
                f += Test.iFld;
                f = Test.iFld;
            }
        } else {
            i10 += i10;
        }
        long meth_res = (b ? 1 : 0) + i8 + i9 + i10 + by1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(short s) {

        int i2=-24364, i3=225, i4=-4, i5=38, i6=-30, i7=0, i11=6, iArr1[]=new int[N];
        float f2=-82.48F;
        long l=3L;
        boolean b1=true;
        byte by2=-39;
        double d=26.29846, dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, -17734);
        FuzzerUtils.init(dArr1, 0.41327);

        for (i2 = 8; i2 < 236; ++i2) {
            for (i4 = 7; i4 > 1; --i4) {
                for (i6 = 2; i6 > i4; --i6) {
                    iArr1[i2] *= (int)(156 + lMeth());
                    iArr1[i4] = i2;
                }
                i7 -= (int)Test.instanceCount;
                i3 = Test.iFld;
                i3 += (int)Test.instanceCount;
                switch ((i4 % 10) + 123) {
                case 123:
                    iArr1[i2] += (int)f2;
                    i3 = Test.byFld;
                    i11 = Test.iFld;
                    if (b1) {
                        i7 = (int)l;
                        l += (((i4 * f2) + f2) - l);
                    } else {
                        Test.instanceCount -= 106L;
                    }
                    break;
                case 124:
                    i5 += (162 + (i4 * i4));
                    break;
                case 125:
                    i3 <<= by2;
                    break;
                case 126:
                    f2 += i4;
                    break;
                case 127:
                    iArr1[i4 - 1] = 1;
                case 128:
                    if (i4 != 0) {
                        vMeth1_check_sum += s + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + i11 + l + (b1
                            ? 1 : 0) + by2 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                        return;
                    }
                    break;
                case 129:
                    dArr1[i2] = d;
                    break;
                case 130:
                    by2 = (byte)s;
                    break;
                case 131:
                    Test.instanceCount -= i7;
                    break;
                case 132:
                    Test.instanceCount >>>= Test.instanceCount;
                    break;
                default:
                    b1 = b1;
                }
            }
        }
        vMeth1_check_sum += s + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + i11 + l + (b1 ? 1 : 0) + by2 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void vMeth(int i, byte by, int i1) {

        short s1=28241;
        float f3=1.398F, f4=108.243F;
        int i12=-130, i13=161, i14=-12, i15=202, i16=10024, iArr2[][]=new int[N][N];
        double d1=0.15894, dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 69.76194);
        FuzzerUtils.init(iArr2, 5);

        if (true) {
            Test.instanceCount *= (long)Math.abs(dArr[(i1 >>> 1) % N][(i1 >>> 1) % N]);
            vMeth1(s1);
        }
        f3 = 1;
        while (++f3 < 151) {
            i12 = 1;
            while (++i12 < 10) {
                i13 = 1;
                while (++i13 < 1) {
                    iArr2[(int)(f3 - 1)][i13 - 1] *= i12;
                    Test.instanceCount = -90L;
                }
                d1 = d1;
            }
            Test.instanceCount = (long)f3;
            Test.instanceCount = (long)f3;
            for (f4 = 1; f4 < 10; f4++) {
                for (i15 = (int)(f4); 2 > i15; i15++) {
                    Test.instanceCount *= i14;
                    Test.iFld >>= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + by + i1 + s1 + Float.floatToIntBits(f3) + i12 + i13 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f4) + i14 + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i17=26777, i18=-12, i19=-24848, i20=1, i21=6695, i22=44, i23=19633, i24=-11, i25=9, iArr[]=new int[N];
        float f5=11.797F, f6=-47.1015F;
        double d2=-17.40948;
        byte byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 219);
        FuzzerUtils.init(byArr, (byte)8);
        FuzzerUtils.init(bArr, false);

        Test.iFld -= (int)-93.16079;
        iArr[(Test.iFld >>> 1) % N] += (int)(((Test.instanceCount - Test.iFld) - (byArr[(Test.iFld >>> 1) % N]--)) +
            (iArr[(-6 >>> 1) % N] - Test.iFld));
        vMeth(Test.iFld, Test.byFld, 7);
        for (i17 = 3; 128 > i17; i17++) {
            short s2=-15440;
            Test.iFld *= i17;
            switch ((i17 % 10) + 39) {
            case 39:
                Test.iFld += i17;
                s2 = (short)Test.iFld;
            case 40:
            case 41:
                Test.iFld -= (int)Test.instanceCount;
                f5 = i17;
                for (i19 = 201; i19 > 10; i19--) {
                    i18 = s2;
                    if (bFld) break;
                    i20 *= (int)Test.instanceCount;
                    for (i21 = 1; i21 < 2; i21++) {
                        Test.instanceCount = i22;
                        Test.iFld = 14738;
                    }
                    f5 -= f5;
                    for (i23 = 2; i23 > 1; i23 -= 3) {
                        d2 = 48.9004;
                        f6 += (float)d2;
                        d2 *= s2;
                    }
                    i24 -= (int)Test.instanceCount;
                    i24 *= (int)f5;
                    d2 -= i19;
                }
                break;
            case 42:
                f5 -= s2;
                i24 = i19;
            case 43:
                i25 = 1;
                do {
                    d2 = i19;
                    bArr[i25 - 1] = false;
                } while (++i25 < 201);
                break;
            case 44:
                i24 = (int)d2;
                break;
            case 45:
                i22 += (((i17 * i23) + s2) - i21);
            case 46:
                d2 = d2;
                break;
            case 47:
                f6 = i20;
            case 48:
                i18 = (int)f5;
                break;
            default:
                d2 *= i24;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
