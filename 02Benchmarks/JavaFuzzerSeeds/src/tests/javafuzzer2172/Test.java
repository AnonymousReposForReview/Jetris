package tests.javafuzzer2172;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:44:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-191L;
    public static short sFld=17724;
    public static short sFld1=30082;
    public static double dFld=0.113385;
    public static volatile boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i, long l) {

        int i2=2, i3=53353, i4=-172, i5=167, i6=-11, i7=13, i8=-21927, i9=116, i10=-44, i11=17134, iArr[][]=new
            int[N][N];
        float f=102.901F;

        FuzzerUtils.init(iArr, 19652);

        Test.iArrFld[(i >>> 1) % N] -= i;
        if (Test.bFld) {
            for (int i1 : Test.iArrFld) {
                for (i2 = 1; i2 < 4; ++i2) {
                    i1 += i2;
                    i = i2;
                    f += i3;
                }
            }
            for (i4 = 3; i4 < 144; ++i4) {
                for (i6 = 1; i6 < 11; i6 += 2) {
                    Test.sFld += (short)(((i6 * i8) + i9) - Test.instanceCount);
                    Test.sFld1 -= (short)Test.instanceCount;
                    for (i10 = 3; i10 > 1; i10--) {
                        f += (((i10 * i3) + Test.instanceCount) - i9);
                        Test.dFld -= 6;
                        Test.iArrFld[i4] -= -85;
                    }
                }
            }
        } else if (Test.bFld) {
            iArr = iArr;
        }
        long meth_res = i + l + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i12=47906, i13=75, i14=-96, i15=-57992, i16=53527;
        float f1=0.710F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 39.69505);

        lMeth(11729, Test.instanceCount);
        i12 &= -1;
        i13 = 1;
        do {
            f1 += i12;
            i12 -= i12;
            i12 = i13;
            i12 >>= 17;
            i12 = i13;
            i12 = i13;
            f1 = i12;
            dArr[(i13 >>> 1) % N] += i13;
        } while (++i13 < 195);
        i14 = 1;
        do {
            for (i15 = 10; i15 > 1; i15 -= 2) {
                i12 += i15;
                i12 *= i12;
            }
        } while (++i14 < 162);
        vMeth1_check_sum += i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        int i17=77, i18=120, i19=33836, i20=12, i21=-20601;
        double d=-2.108792;
        byte by=56;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-9099);

        vMeth1();
        i17 -= i17;
        sArr[(i17 >>> 1) % N] -= Test.sFld;
        Test.iArrFld[(i17 >>> 1) % N] *= -28;
        for (i18 = 7; i18 < 278; i18++) {
            switch ((i18 % 2) + 77) {
            case 77:
                d = 1;
                while (++d < 6) {
                    i17 = by;
                    i17 <<= -184;
                    i19 = 10;
                    Test.iArrFld = Test.iArrFld;
                    if (Test.bFld) break;
                    for (i20 = 1; i20 > d; i20 -= 3) {
                        i17 -= i20;
                        Test.iArrFld = Test.iArrFld;
                    }
                }
            case 78:
                i17 >>>= i19;
                break;
            }
        }
        vMeth_check_sum += i17 + i18 + i19 + Double.doubleToLongBits(d) + by + i20 + i21 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i22=211, i23=-36013, i24=-157, i25=3, i26=42154, i27=-22944, i28=-18622, i29=13, i30=19;
        float f2=2.377F, f3=1.640F;
        double d1=1.10903, dArr1[][]=new double[N][N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(dArr1, -33.44901);
        FuzzerUtils.init(sArr1, (short)-6779);

        vMeth();
        Test.iArrFld[(i22 >>> 1) % N] <<= (int)Test.instanceCount;
        Test.instanceCount = 62624;
        i22 += (int)Test.instanceCount;
        switch (((i22 >>> 1) % 1) + 75) {
        case 75:
            for (i23 = 129; 5 < i23; i23 -= 2) {
                for (i25 = 1; i25 < i23; ++i25) {
                    i26 += (((i25 * Test.instanceCount) + f2) - i26);
                    for (i27 = 1; i27 < 2; i27++) {
                        Test.iArrFld[i25] |= (int)Test.instanceCount;
                        i24 += i27;
                        i26 *= (int)Test.instanceCount;
                        i24 = i28;
                        Test.instanceCount += (((i27 * i27) + i24) - f3);
                        f3 = Test.instanceCount;
                        try {
                            i22 = (Test.iArrFld[i23] % Test.iArrFld[i23 + 1]);
                            i24 = (i26 % -219);
                            Test.iArrFld[i27 - 1] = (i23 / 56482);
                        } catch (ArithmeticException a_e) {}
                    }
                    i29 = 1;
                    do {
                        Test.bFld = true;
                        dArr1[i25] = dArr1[i29];
                    } while (++i29 < 2);
                    Test.dFld -= Test.instanceCount;
                    Test.dFld -= 52158;
                    if (true) break;
                    Test.instanceCount -= -39711;
                }
                i28 -= (int)f3;
                i24 = i26;
                if (Test.bFld) {
                    i30 = 1;
                    do {
                        Test.instanceCount = Test.instanceCount;
                        d1 -= i28;
                        sArr1[i30 - 1] *= (short)i30;
                    } while (++i30 < 285);
                } else {
                    f3 += (i23 * i23);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
