package tests.javafuzzer2476;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:16:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=33072L;
    public double dFld=-11.114206;
    public static volatile int iFld=-8173;
    public static volatile short sFld=-27797;
    public static volatile int iFld1=246;
    public static volatile float fFld=-10.563F;
    public static byte byFld=13;
    public static volatile boolean bFld=false;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public long lMeth1() {

        int i7=17, i8=105, i9=6, i10=-3, i11=-14, i12=4, i13=0, iArr[]=new int[N];
        float f=2.513F, f1=2.343F;

        FuzzerUtils.init(iArr, -5);

        for (i7 = 9; 147 > i7; i7 += 3) {
            iArrFld = iArrFld;
            iArrFld[i7 + 1] <<= i7;
            i8 += (((i7 * f) + Test.instanceCount) - Test.iFld);
            f = -4;
            Test.iFld = i7;
        }
        iArrFld[(i8 >>> 1) % N] = i8;
        Test.instanceCount += Test.instanceCount;
        for (i9 = 13; 262 > i9; i9++) {
            for (i11 = 1; i11 < 7; i11++) {
                switch ((((i9 >>> 1) % 8) * 5) + 87) {
                case 91:
                    for (f1 = 1; f1 < 2; f1++) {
                        iArrFld[i9 + 1] = (int)Test.instanceCount;
                        i10 += (int)-88.86614;
                        i8 += (-46493 + (f1 * f1));
                    }
                    break;
                case 105:
                    iArr[i9 + 1] -= Test.iFld;
                    break;
                case 90:
                    i8 -= Test.iFld;
                    break;
                case 124:
                    Test.instanceCount = 11;
                    break;
                case 118:
                case 122:
                    Test.sFld -= (short)dFld;
                    break;
                case 110:
                    dFld *= f1;
                    break;
                case 98:
                    iArrFld[i11 - 1] = (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + i13 +
            FuzzerUtils.checkSum(iArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(int i2) {

        int i3=2106, i4=-10, i5=-7, i6=-10, i14=-24, i15=-204, i16=166, i17=-227;
        boolean b=false, bArr[]=new boolean[N];
        float f2=-84.758F;

        FuzzerUtils.init(bArr, false);

        for (i3 = 3; 172 > i3; ++i3) {
            for (i5 = i3; i5 < 9; i5++) {
                Test.sFld <<= (short)lMeth1();
            }
            iArrFld[i3 + 1] >>= Test.iFld;
            for (i14 = 1; i14 < 9; ++i14) {
                byte by=-63;
                bArr[i3] = b;
                iArrFld[i3 - 1] = by;
                for (i16 = 1; i16 < 2; i16++) {
                    b = b;
                }
                iArrFld[i3 + 1] += i4;
                i2 *= (int)Test.instanceCount;
                i2 = Test.sFld;
                Test.iFld += (((i14 * i6) + Test.instanceCount) - i17);
                iArrFld[i3 - 1] = Test.iFld1;
            }
            f2 += -2;
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i14 + i15 + (b ? 1 : 0) + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i, int i1, short s) {

        int i18=8, i19=139, i20=17905, i21=-9, i22=16036, i23=-11;

        dFld -= 9L;
        i1 += (int)((lMeth(Test.iFld) + Test.iFld1) - dFld);
        for (i18 = 6; i18 < 267; i18++) {
            Test.instanceCount = 160;
            Test.iFld -= (int)6.4308;
            Test.iFld = -75;
            Test.fFld += (i18 - Test.byFld);
            i1 += (int)55889L;
            for (i20 = 1; i20 < 6; i20++) {
                iArrFld[i18 + 1] = (int)-33944L;
                i1 += (i20 * i20);
                for (i22 = 1; i22 < 2; i22++) {
                    i21 = Test.iFld;
                    i19 += (i22 - i);
                    Test.fFld -= 10949;
                }
            }
        }
        vMeth_check_sum += i + i1 + s + i18 + i19 + i20 + i21 + i22 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i24=37734, i25=14, i26=-62345, i27=-12, i28=0, i29=-8, i30=-11, i31=14, i32=-1, i33=-2;
        double d=103.57370;

        dFld = Test.iFld;
        vMeth(Test.iFld1, Test.iFld1, Test.sFld);
        for (i24 = 363; i24 > 3; i24 -= 3) {
            Test.iFld = Test.iFld;
            Test.iFld = Test.byFld;
            Test.iFld1 >>= i25;
            for (i26 = 11; i26 < 209; ++i26) {
                Test.instanceCount = i25;
            }
            Test.instanceCount = Test.instanceCount;
            for (d = i24; d < 209; d++) {
                i25 += (int)(d * d);
                try {
                    Test.iFld = (9 % iArrFld[(int)(d)]);
                    i28 = (iArrFld[(int)(d + 1)] % i28);
                    i28 = (i25 % i25);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (int)d;
                if (Test.bFld) continue;
                for (i29 = 1; i29 < 1; ++i29) {
                    if (Test.bFld) {
                        i25 += 12;
                    }
                    i27 |= i26;
                    iArrFld[i29] = 195;
                }
                Test.iFld = i24;
                i31 = 1;
                while ((i31 += 2) < 1) {
                    Test.fFld -= Test.iFld1;
                    Test.sFld = (short)dFld;
                    dFld -= 150;
                    i30 += i31;
                    i25 *= i27;
                }
                Test.instanceCount *= Test.iFld;
            }
        }
        for (i32 = 17; i32 < 373; ++i32) {
            i25 = i26;
            dFld = i32;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
