package tests.javafuzzer1888;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:22:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5524143156332926585L;
    public static float fFld=-69.523F;
    public static boolean bFld=true;
    public double dFld=37.40058;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {

        int i7=-248, i8=4, i9=12, i10=6, i11=-167, i12=55, iArr1[]=new int[N];
        double d2=-54.65729;
        byte by=-60;
        float fArr[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -116.434F);
        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(iArr1, -184);

        for (i7 = 8; 150 > i7; i7++) {
            for (i9 = 1; i9 < 11; ++i9) {
                boolean b=false;
                switch ((i7 % 8) + 36) {
                case 36:
                    d2 -= i10;
                    for (i11 = i9; i11 < 2; i11++) {
                        fArr = fArr;
                        Test.fFld /= (i12 | 1);
                    }
                    break;
                case 37:
                    lArr[i9 - 1] += i9;
                    break;
                case 38:
                    by *= (byte)-14;
                    fArr[i9][i7] = i6;
                    break;
                case 39:
                    Test.fFld = i10;
                    Test.instanceCount = 224;
                    break;
                case 40:
                    if (true) continue;
                    Test.instanceCount += (i9 * i9);
                    if (b) continue;
                case 41:
                    iArr1 = iArr1;
                    break;
                case 42:
                    Test.instanceCount += i10;
                case 43:
                    b = b;
                    break;
                default:
                    Test.fFld = Test.fFld;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5, double d1) {

        int i14=-1, i15=0, i16=-197, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -48201);
        FuzzerUtils.init(lArr1, -5L);

        Test.instanceCount += (long)(iMeth(10) - d1);
        for (int i13 : iArr2) {
            for (i14 = 4; i14 > 1; --i14) {
                Test.instanceCount -= i5;
                i16 = 1;
                while (++i16 < 2) {
                    i15 -= (int)Test.fFld;
                    Test.instanceCount += i16;
                    switch ((i14 % 7) + 68) {
                    case 68:
                        Test.fFld = Test.fFld;
                        i5 = (int)-195L;
                        break;
                    case 69:
                        iArr2[i14 + 1] >>= i13;
                        if (true) continue;
                        lArr1[i16 - 1] = i14;
                        if (Test.bFld) continue;
                    case 70:
                        i15 += (-184 + (i16 * i16));
                        break;
                    case 71:
                        lArr1[i14 - 1] = 13;
                        break;
                    case 72:
                        i5 = (int)Test.instanceCount;
                        break;
                    case 73:
                        Test.fFld = i5;
                        break;
                    case 74:
                        iArr2[i14] = i14;
                        break;
                    }
                }
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i2=95, i3=19424, i4=-49, i17=-39408, i18=1720, iArr[]=new int[N];
        double d=-92.103062, d3=-127.107019;
        byte by1=126;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, -20);
        FuzzerUtils.init(lArr2, 13L);

        i2 = 147;
        while (--i2 > 0) {
            i3 = 1;
            while (++i3 < 11) {
                i4 = (int)(Test.instanceCount * Test.fFld);
                i4 += (-25772 + (i3 * i3));
                if (i3 != 0) {
                    vMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d) + i17 + i18 + by1 +
                        Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2);
                    return;
                }
            }
            iArr[i2 + 1] = (i4--);
            d = lMeth(-9423, d);
            i4 += i4;
            for (i17 = i2; i17 < 11; ++i17) {
                by1 += (byte)Test.instanceCount;
                i18 -= i4;
                i18 ^= i4;
                d = -12;
            }
            Test.instanceCount += (((i2 * i3) + Test.instanceCount) - Test.instanceCount);
            by1 -= (byte)d3;
        }
        vMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d) + i17 + i18 + by1 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=40159, i1=-176, i19=-49850, i20=59718, i21=-51, i22=62003, iArr3[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, -163);
        FuzzerUtils.init(fArr1, 36.553F);

        for (i = 3; 143 > i; ++i) {
            vMeth();
            for (i19 = i; i19 < 179; ++i19) {
                i1 *= (int)Test.fFld;
                i1 += i19;
                switch (((i19 % 2) * 5) + 21) {
                case 27:
                    i20 += (int)113.29131;
                    Test.fFld = i19;
                case 31:
                    if (Test.bFld) continue;
                    iArr3[i - 1] += 65;
                    break;
                default:
                    switch ((i % 4) + 108) {
                    case 108:
                        i1 >>= i;
                        iArr3[i - 1] >>>= i20;
                    case 109:
                        i1 -= i20;
                        i1 += (61996 + (i19 * i19));
                        for (i21 = 1; i21 < 1; ++i21) {
                            i1 >>= i1;
                            Test.instanceCount %= (i22 | 1);
                            Test.instanceCount += (-1 + (i21 * i21));
                            i20 *= i20;
                            iArr3[i19 + 1] *= (int)dFld;
                            i22 -= i;
                            i1 = i21;
                            Test.instanceCount >>>= 12236;
                            i22 = i1;
                        }
                        break;
                    case 110:
                        fArr1[i19 - 1] = i21;
                        i22 <<= -49495;
                        i22 -= i22;
                    case 111:
                        Test.bFld = false;
                        i22 = i20;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
