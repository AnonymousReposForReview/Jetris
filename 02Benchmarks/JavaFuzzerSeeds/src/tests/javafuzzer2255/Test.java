package tests.javafuzzer2255;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=51859L;
    public static int iFld=15605;
    public static volatile float fFld=-79.299F;
    public volatile boolean bFld=false;
    public volatile byte byFld=100;
    public double dFld=-110.28067;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.fArrFld, 1.704F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d2, long l1, long l2) {

        int i12=91, i13=15, i14=140, i15=20587, i16=-38685;
        byte by=-16;
        boolean b=true;

        Test.fArrFld[(6 >>> 1) % N] += Test.fFld;
        Test.iFld = (int)l2;
        for (i12 = 17; i12 < 311; i12++) {
            for (i14 = 1; i14 < 6; i14++) {
                l1 = by;
                if (b) continue;
                if (false) continue;
                i16 = 1;
                do {
                    if (b) continue;
                    Test.instanceCount = l2;
                    i15 = (int)-2112926824L;
                    i15 = (int)d2;
                    d2 -= 5;
                    i15 += (i16 * i16);
                    i15 += i16;
                } while (++i16 < 2);
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d2) + l1 + l2 + i12 + i13 + i14 + i15 + by + (b ? 1 : 0) + i16;
    }

    public static void vMeth1(long l, double d1) {

        int i6=-13, i7=-9, i8=-13, i9=-45683, i10=-14, i11=21030;
        short s1=-4884, sArr[]=new short[N];
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(lArr, 5616701541885373037L);
        FuzzerUtils.init(sArr, (short)2558);
        FuzzerUtils.init(lArr1, 150L);

        lArr[(Test.iFld >>> 1) % N] -= Test.iFld;
        Test.iFld = (int)(Test.fFld++);
        d1 = -2347496964L;
        for (i6 = 5; i6 < 331; ++i6) {
            lArr = (lArr = (lArr = (lArr = lArr)));
            for (i8 = 5; i8 > i6; i8--) {
                i9 += (((i8 * i6) + i8) - i6);
                for (i10 = 1; i10 < 1; ++i10) {
                    vMeth2(d1, Test.instanceCount, Test.instanceCount);
                    if (true) continue;
                    Test.iFld = (int)d1;
                    sArr[i6] += s1;
                    Test.iArrFld[i6 - 1] = i9;
                }
                lArr1 = lArr;
                lArr[i8 - 1] += Test.iFld;
            }
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + i11 + s1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        int i4=-44, i5=-213, i17=-6, i18=-223, i19=-130, i20=5, i21=140;
        short s=-26179;
        double d3=-2.119334;

        i4 = 1;
        do {
            double d=2.30280;
            s += (short)((i5--) + ((i5 * -13540) + (0.1220 + (d + Test.instanceCount))));
        } while (++i4 < 311);
        vMeth1(Test.instanceCount, d3);
        for (i17 = 1; i17 < 234; i17++) {
            i5 += (((i17 * i4) + i17) - Test.instanceCount);
            for (i19 = 1; i19 < 7; i19++) {
                i21 = 1;
                do {
                    i20 <<= (int)Test.instanceCount;
                    Test.instanceCount = (long)d3;
                    Test.instanceCount -= i19;
                    Test.instanceCount >>= i18;
                    i20 *= (int)Test.instanceCount;
                    Test.instanceCount = i20;
                    Test.iFld += (int)-24756L;
                    Test.instanceCount += Test.instanceCount;
                } while (++i21 < 2);
            }
        }
        vMeth_check_sum += i4 + s + i5 + Double.doubleToLongBits(d3) + i17 + i18 + i19 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i=54, i1=41102, i2=-4962, i3=75;
        float f=36.437F;
        short s2=29945;

        i = 1;
        while (++i < 353) {
            Test.iArrFld = Test.iArrFld;
            for (f = 71; f > i; f--) {
                for (i2 = 1; i2 > f; i2 -= 2) {
                    Test.instanceCount = (i3++);
                    i3 = ((i1 - (--i3)) - ((i1--) + (i1--)));
                    i3 -= (int)(((-(i1++)) * i3) + (i3 >>>= (int)(Test.instanceCount = i)));
                    switch ((((i1 >>> 1) % 1) * 5) + 82) {
                    case 87:
                        vMeth();
                        i3 += (i2 * i2);
                        bFld = bFld;
                    default:
                        byFld = (byte)i3;
                        Test.iFld <<= 114;
                        switch ((i % 7) + 18) {
                        case 18:
                            Test.instanceCount += (((i2 * i2) + i3) - i1);
                            if (true) {
                                switch ((i % 6) + 75) {
                                case 75:
                                    i1 += i2;
                                    i3 -= (int)Test.instanceCount;
                                case 76:
                                    Test.instanceCount -= i3;
                                    Test.iArrFld[(int)(f - 1)] = i3;
                                case 77:
                                    i1 = Test.iFld;
                                    Test.iFld -= (int)dFld;
                                case 78:
                                    s2 += (short)Test.instanceCount;
                                    switch ((int)((f % 1) + 121)) {
                                    case 121:
                                        Test.instanceCount += i2;
                                        if (bFld) continue;
                                        Test.iFld = -4;
                                        if (false) continue;
                                        break;
                                    }
                                    Test.iFld = i3;
                                case 79:
                                    Test.iArrFld[i2] = -8;
                                    break;
                                case 80:
                                }
                            } else if (bFld) {
                                Test.iFld += (((i2 * Test.instanceCount) + i1) - i1);
                            } else {
                                Test.iArrFld[i2] *= (int)Test.instanceCount;
                            }
                            break;
                        case 19:
                            i1 -= (int)dFld;
                            break;
                        case 20:
                            Test.iFld = 189;
                            break;
                        case 21:
                            i1 = (int)Test.fFld;
                        case 22:
                            if (bFld) continue;
                            break;
                        case 23:
                            Test.iFld += s2;
                            break;
                        case 24:
                            bFld = bFld;
                            break;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
