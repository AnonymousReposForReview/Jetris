package tests.javafuzzer2661;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:11:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static int iFld=20367;
    public static volatile float fFld=-10.757F;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 72);
        FuzzerUtils.init(Test.iArrFld1, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;
    public static long iMeth3_check_sum = 0;

    public static int iMeth1() {

        int i3=-24987;
        float f=0.486F;

        Test.iArrFld[(i3 >>> 1) % N] *= (int)(((f - 20458) + Math.abs(i3)) * 8L);
        long meth_res = i3 + Float.floatToIntBits(f);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth3(boolean b) {

        int i4=-1988, i5=-46813;
        long l1=15860L;
        float f1=1.174F;
        double d2=1.4090, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.98343);

        Test.iFld >>= Test.iFld;
        Test.iFld >>>= Test.iFld;
        i4 = 1;
        do {
            Test.instanceCount = l1;
            Test.iFld += i4;
            Test.iArrFld[i4] += (int)-7357511160415758386L;
            Test.iFld <<= i4;
            dArr[i4] *= f1;
            if (b) continue;
            Test.iArrFld[i4 - 1] <<= i4;
            try {
                Test.iFld = (Test.iFld / -37969);
                Test.iFld = (Test.iFld / i4);
                Test.iFld = (i4 % -215);
            } catch (ArithmeticException a_e) {}
            d2 *= i4;
        } while ((i4 += 2) < 217);
        i5 = 1;
        while (++i5 < 271) {
            Test.iFld += i5;
            Test.iFld += (-9 + (i5 * i5));
        }
        long meth_res = (b ? 1 : 0) + i4 + l1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i5 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth3_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth2(long l, byte by) {

        boolean b1=false;
        int i6=68, i7=-241, i8=-143, i9=6, i10=32467;
        float f2=0.673F, fArr[]=new float[N];
        short s=11049, sArr[][]=new short[N][N];
        double d3=-2.16118;

        FuzzerUtils.init(fArr, 0.353F);
        FuzzerUtils.init(sArr, (short)703);

        iMeth3(b1);
        for (i6 = 6; i6 < 398; ++i6) {
            b1 = b1;
            for (f2 = 1; f2 < 4; f2++) {
                for (i9 = 1; 2 > i9; ++i9) {
                    Test.instanceCount += (((i9 * l) + Test.instanceCount) - i6);
                    try {
                        Test.iArrFld[i6 + 1] = (i8 % Test.iArrFld[i6 - 1]);
                        i7 = (i9 % 237);
                        i7 = (i6 % 1039359496);
                    } catch (ArithmeticException a_e) {}
                    switch ((i9 % 10) + 2) {
                    case 2:
                        if (b1) {
                            fArr[(int)(f2)] -= 41.932F;
                            if (b1) continue;
                        }
                        Test.fFld = i9;
                        s = (short)Test.iFld;
                    case 3:
                    case 4:
                        sArr[i6 + 1][(int)(f2 - 1)] += (short)-1725020834L;
                        Test.iArrFld[(int)(f2)] = 17;
                    case 5:
                        d3 += Test.iFld;
                        break;
                    case 6:
                        Test.iFld <<= -31;
                        break;
                    case 7:
                        Test.iFld = (int)f2;
                        break;
                    case 8:
                        by += (byte)i9;
                        break;
                    case 9:
                        i7 += (int)l;
                        break;
                    case 10:
                        if (b1) continue;
                    case 11:
                        Test.iFld <<= 3;
                    default:
                        d3 = f2;
                    }
                }
            }
        }
        long meth_res = l + by + (b1 ? 1 : 0) + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + s +
            Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(sArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        double d1=-2.41864, d4=-121.62409;
        byte by1=21;
        int i11=-9, i12=-61265, iArr[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 163);
        FuzzerUtils.init(lArr, -125L);

        i1 |= (int)((iMeth1() - (32748 - d1)) - iMeth2(Test.instanceCount, by1));
        for (i11 = 9; i11 < 305; ++i11) {
            i12 = (int)-38007L;
            Test.iArrFld1[i11] -= -220;
            d4 = 6;
            do {
                iArr = iArr;
                Test.instanceCount += (long)(d4 * d4);
                Test.fFld += (float)(d4 * Test.iFld);
                switch (((i1 >>> 1) % 1) + 50) {
                case 50:
                    Test.iFld += i11;
                    break;
                }
                lArr[(int)(d4 - 1)] += Test.iFld;
                Test.iFld = (int)Test.instanceCount;
                iArr[i11][i11 - 1] -= 167;
                i12 *= i2;
                i1 += i11;
            } while ((d4 -= 2) > 0);
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d1) + by1 + i11 + i12 + Double.doubleToLongBits(d4) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=51.93337, dArr1[]=new double[N];
        int i=7, i13=-60504, i14=9, i15=-12268, i16=-25885, i17=3, i18=-2, i19=-9, i20=-13;
        byte by2=92;
        boolean b2=false;
        float f3=2.800F;
        long l2=-34053L;

        FuzzerUtils.init(dArr1, 0.48512);

        d += (((Test.instanceCount - i) * 2252) - iMeth(Test.iFld, Test.iFld));
        i += by2;
        i >>>= (int)Test.instanceCount;
        for (i13 = 316; i13 > 3; --i13) {
            if (b2) {
                Test.instanceCount += i13;
                i15 = 80;
                do {
                    i *= (int)-8430047356859450236L;
                    Test.instanceCount -= Test.instanceCount;
                    i14 *= (int)Test.instanceCount;
                    for (i16 = 1; i16 < 1; ++i16) {
                        Test.iFld += (i16 ^ i17);
                        dArr1[i15 - 1] = 6L;
                        Test.instanceCount >>= Test.instanceCount;
                    }
                    i14 += (((i15 * Test.instanceCount) + i) - i13);
                    Test.instanceCount += (i15 ^ i13);
                    i14 = (int)Test.instanceCount;
                    Test.iFld += i15;
                    dArr1[i13] -= Test.fFld;
                    i >>= i;
                } while (--i15 > 0);
            } else if (b2) {
                switch ((i13 % 1) + 50) {
                case 50:
                    b2 = b2;
                    Test.instanceCount += i;
                }
                Test.iFld -= (int)Test.instanceCount;
            } else if (b2) {
                i14 += i13;
                switch ((i13 % 3) + 22) {
                case 22:
                    for (i18 = 80; i18 > 3; --i18) {
                        for (f3 = 1; 2 > f3; ++f3) {
                            i17 += (int)(((f3 * f3) + i13) - i18);
                            i19 += (int)(f3 + i13);
                        }
                    }
                case 23:
                    i20 += (i13 + i20);
                    break;
                case 24:
                    i20 *= i17;
                default:
                    Test.instanceCount += l2;
                }
            } else {
                Test.iFld = i13;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth mainTest
//DEBUG  iMeth3 ->  iMeth3 iMeth2 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
