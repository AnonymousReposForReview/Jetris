package tests.javafuzzer2675;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:26:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-17434L;
    public static short sFld=23250;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 42);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, boolean b) {

        int i10=12, i11=-1570, i12=-60496, iArr[]=new int[N];
        float f1=1.202F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -9097);
        FuzzerUtils.init(byArr, (byte)-40);

        for (i10 = 10; i10 < 221; ++i10) {
            i12 = 1;
            while (++i12 < 8) {
                f1 += Test.instanceCount;
                Test.instanceCount += (((i12 * i12) + Test.instanceCount) - f1);
                switch (((i10 % 1) * 5) + 124) {
                case 129:
                    i9 += (i12 * i12);
                    break;
                }
                switch ((i12 % 2) + 99) {
                case 99:
                    if (b) {
                        i9 += i12;
                        i9 &= i11;
                        Test.instanceCount += (i12 * i12);
                    } else if (b) {
                        if (b) {
                            f1 += i9;
                            iArr[i12] -= i11;
                            byArr[i10] >>>= (byte)i10;
                        }
                    } else if (b) {
                        Test.instanceCount <<= i10;
                    }
                    break;
                case 100:
                    Test.instanceCount = Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i9 + (b ? 1 : 0) + i10 + i11 + i12 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        float f=-33.451F, fArr[]=new float[N];
        int i3=-21402, i4=177, i5=-31684, i6=-12, i7=9, i8=246, iArr1[]=new int[N];
        short s=17945;
        byte by=-126;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 87);
        FuzzerUtils.init(fArr, 2.907F);

        f = 1;
        while (++f < 201) {
            Test.instanceCount |= ((++i1) - (i1 / ((Test.instanceCount - i2) | 1)));
            for (i3 = 1; i3 < 8; i3++) {
                i2 += (((i3 * i2) + i2) - Test.instanceCount);
                i4 += (int)(-6460338719460237097L + (i3 * i3));
            }
            i1 = (++i4);
            i4 -= -166;
            for (i5 = 8; i5 > 1; --i5) {
                i2 += (((i5 * s) + i2) - i2);
                i4 += (12 + (i5 * i5));
            }
            for (i7 = 1; 8 > i7; ++i7) {
                by = (byte)iMeth(i3, b1);
                i2 += i7;
                try {
                    i2 = (-49 % iArr1[(int)(f)]);
                    i4 = (i2 % -237);
                    i1 = (i6 / 60);
                } catch (ArithmeticException a_e) {}
                fArr[i7] = by;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + s + i7 + i8 + by + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(int i, double d) {


        vMeth(i, i);
        i |= -64864;
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        double d1=2.67912;
        int i13=-3, i15=-147, i16=46193, i17=7, i18=10, i19=9077, i20=147, i21=-1;
        float f2=64.994F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1623931947L);
        FuzzerUtils.init(fArr1, 0.781F);

        for (int smallinvoc=0; smallinvoc<760; smallinvoc++) vSmallMeth(-18375, d1);
        i13 = i13;
        for (int i14 : Test.iArrFld) {
            byte by1=-121;
            Test.iArrFld[(i14 >>> 1) % N] += -72;
            i13 -= by1;
            Test.instanceCount >>= i13;
            for (i15 = 1; i15 < 63; i15++) {
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.iArrFld[i15] *= -111;
                    lArr[i15 + 1] = (long)-70.108F;
                }
                i19 = 1;
                while (++i19 < 2) {
                    Test.iArrFld[i15] += i15;
                    i13 += i19;
                    Test.iArrFld[i19 - 1] = i17;
                }
                i14 = i19;
                i13 = (int)f2;
                for (i20 = 1; 2 > i20; ++i20) {
                    i14 = i14;
                    Test.instanceCount = (long)f2;
                    i21 += i20;
                    switch ((i15 % 6) + 45) {
                    case 45:
                        f2 = Test.sFld;
                        fArr1[i20] += i14;
                        lArr[i15 + 1] += 2834801437L;
                        i14 -= i21;
                        break;
                    case 46:
                        switch ((i20 % 1) + 115) {
                        case 115:
                            i14 = i20;
                            f2 -= i20;
                        }
                        break;
                    case 47:
                        i13 += -1226;
                        break;
                    case 48:
                        i16 *= i13;
                    case 49:
                        i21 += (((i20 * i16) + i21) - i18);
                        break;
                    case 50:
                        i18 = i19;
                        break;
                    default:
                        i21 += (((i20 * i17) + f2) - i20);
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
