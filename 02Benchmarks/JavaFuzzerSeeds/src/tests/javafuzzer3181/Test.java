package tests.javafuzzer3181;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:21:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=224805712051366090L;
    public static short sFld=-21996;
    public float fFld=-124.364F;
    public static volatile float fFld1=76.471F;
    public static boolean bFld=true;
    public static long lArrFld[][]=new long[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 52538L);
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.sArrFld, (short)-12528);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public void vMeth(long l, int i, float f) {


        Test.sFld = (short)(--Test.instanceCount);
        vMeth_check_sum += l + i + Float.floatToIntBits(f);
    }

    public static double dMeth(long l1, long l2, int i5) {

        double d1=-74.45101;
        int i6=-5, i7=-6157, iArr1[]=new int[N];
        byte by1=106;

        FuzzerUtils.init(iArr1, 7);

        Test.instanceCount /= 204;
        iArr1 = FuzzerUtils.int1array(N, (int)-5);
        i5 *= (int)d1;
        i5 += i5;
        i5 -= (int)1.386F;
        l1 = i5;
        i5 = i5;
        i5 -= (int)Test.fFld1;
        i6 = 1;
        do {
            by1 += (byte)i6;
            Test.bFld = Test.bFld;
            i5 = i5;
            i7 = 1;
            while (++i7 < 4) {
                i5 = (int)l2;
            }
        } while (++i6 < 385);
        i5 ^= (int)55195L;
        long meth_res = l1 + l2 + i5 + Double.doubleToLongBits(d1) + i6 + by1 + i7 + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i8=2903, i9=7, i10=34283, i11=-12, i12=24638;
        byte by2=17;
        double d2=0.88482;

        dMeth(Test.instanceCount, Test.instanceCount, i8);
        i9 = 1;
        do {
            i10 = 1;
            do {
                Test.iArrFld[i9 + 1] >>>= -220;
                Test.lArrFld[i9 - 1][i9] = i10;
                for (i11 = 1; i11 > 1; i11--) {
                    Test.fFld1 = i8;
                    i12 = i11;
                    by2 >>= (byte)i10;
                    i12 = i11;
                    i8 >>>= i11;
                    switch ((((i10 >>> 1) % 2) * 5) + 8) {
                    case 14:
                        if (i12 != 0) {
                            vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + by2 + Double.doubleToLongBits(d2);
                            return;
                        }
                        break;
                    case 16:
                        i12 >>>= -161;
                        Test.lArrFld[i9 + 1][i10 - 1] >>= i9;
                    default:
                        Test.fFld1 = (float)d2;
                    }
                }
            } while (++i10 < 9);
        } while (++i9 < 182);
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + by2 + Double.doubleToLongBits(d2);
    }

    public static long lMeth() {

        float f1=-99.578F;
        int i13=-27, i14=-210, i15=-53846, i16=-55434, i17=-208, i18=-63123, i19=29839, i20=9;
        double d3=75.54807;

        f1 = (++f1);
        vMeth1();
        i13 = 1;
        do {
            i14 += i14;
            for (i15 = 1; i15 < 9; ++i15) {
                if (i16 != 0) {
                }
            }
            i17 = 1;
            do {
                for (i18 = 1; i18 < 1; ++i18) {
                    Test.instanceCount = Test.sFld;
                }
            } while (++i17 < 9);
            if (Test.bFld) {
                i20 = 1;
                do {
                    if (Test.bFld) continue;
                    i16 *= Test.sFld;
                } while (++i20 < 9);
                i14 = i17;
                d3 -= i17;
            } else {
                Test.iArrFld[i13 + 1] <<= i20;
            }
        } while (++i13 < 167);
        long meth_res = Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(d3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=9, i2=5, i3=11, i4=-203, i21=-59898, i22=180, i23=10407, i24=44, iArr[]=new int[N];
        double d=18.54197, d4=-97.94108;
        byte by=-61;
        long l3=-123L, l4=4309212705862532886L;
        float f2=1.673F;

        FuzzerUtils.init(iArr, 121);

        vMeth(-44532 + Math.min((int)(Test.instanceCount + i1), ++i1), (int)(i1 + fFld), Math.abs(fFld));
        for (d = 7; d < 204; d++) {
            i1 += (int)d;
        }
        for (i3 = 15; 328 > i3; i3++) {
            i1 -= (int)((Test.lArrFld[i3 + 1][i3 - 1]++) + ((i3 + fFld) * (by++)));
            i1 *= (iArr[i3 - 1]--);
            iArr[i3] += -72;
            if ((Test.instanceCount--) == Math.sqrt((133 * (Test.sFld++)) + lMeth())) break;
        }
        i4 = i4;
        for (l3 = 8; l3 < 170; ++l3) {
            i22 = 1;
            while (++i22 < 155) {
                Test.iArrFld[(int)(l3)] -= (int)Test.instanceCount;
                i1 <<= i21;
                for (f2 = 1; f2 < 1; f2++) {
                    Test.sArrFld[(int)(f2)] -= (short)-7;
                    i4 = (int)fFld;
                    fFld *= l3;
                    i4 += i4;
                    Test.fFld1 -= Test.instanceCount;
                    Test.instanceCount *= i1;
                    i2 += 5;
                    Test.instanceCount *= -5;
                    i2 &= i1;
                    i2 += i22;
                }
                i24 = 1;
                while (++i24 < 1) {
                    Test.instanceCount = i22;
                    d4 = by;
                    if (Test.bFld) continue;
                    i4 += i24;
                    Test.instanceCount = l4;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
