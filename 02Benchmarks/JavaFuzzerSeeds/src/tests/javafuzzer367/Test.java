package tests.javafuzzer367;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:50:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-129L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 108.981F);
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i3, int i4) {

        double d=1.101130;
        float f1=-1.352F;
        boolean b1=false;
        int i5=-4, i6=-5, i7=1, i8=-50;
        byte by1=-122;

        d = i4;
        switch ((((i3 >>> 1) % 7) * 5) + 98) {
        case 111:
            if (b1) {
                f1 *= i4;
            }
            for (i5 = 9; i5 < 230; i5++) {
                Test.instanceCount <<= i3;
                d += -11;
                Test.instanceCount = -41791L;
                for (i7 = i5; i7 < 7; i7++) {
                    i3 ^= (int)Test.instanceCount;
                    i6 += (i7 * i7);
                    if (b1) {
                        Test.iArrFld[i5 - 1] -= (int)Test.instanceCount;
                        i4 += i7;
                        i3 <<= (int)Test.instanceCount;
                    } else if (b1) {
                        i6 += i4;
                    } else {
                        if (i4 != 0) {
                            vMeth1_check_sum += s + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
                                (b1 ? 1 : 0) + i5 + i6 + i7 + i8 + by1;
                            return;
                        }
                    }
                }
            }
            break;
        case 99:
            i4 = by1;
            break;
        case 103:
        case 118:
        case 101:
            i4 = (int)Test.instanceCount;
        case 121:
            Test.iArrFld[(i6 >>> 1) % N] = (int)Test.instanceCount;
            break;
        case 107:
            i3 *= i6;
            break;
        default:
            i4 <<= i8;
        }
        vMeth1_check_sum += s + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i5 +
            i6 + i7 + i8 + by1;
    }

    public static void vMeth(int i2) {

        int i9=-5, i10=149, i11=0, i12=-6, i13=58, i14=0;
        float f2=28.235F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.126776);

        i2 = (--Test.iArrFld[(-12 >>> 1) % N]);
        vMeth1((short)(31547), i2, 12644);
        for (i9 = 12; i9 < 347; i9++) {
            i10 -= (int)f2;
            Test.iArrFld[i9 - 1] = i2;
            i10 += (int)f2;
            Test.iArrFld[i9] *= (int)7102042754520858448L;
            for (i11 = 1; i11 < 5; ++i11) {
                double d2=-59.105531;
                Test.fArrFld[i11 + 1] = (float)d2;
                Test.iArrFld[i9 + 1] <<= i2;
                i2 &= (int)-4741059868837520987L;
                Test.fArrFld[i9 - 1] = -38;
                for (i13 = 1; i13 < 2; i13++) {
                    i2 = 153;
                    Test.instanceCount += (i13 * i13);
                }
            }
        }
        vMeth_check_sum += i2 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(boolean b) {

        int i15=12;
        short s1=29710;

        vMeth(i15);
        s1 += (short)i15;
        long meth_res = (b ? 1 : 0) + i15 + s1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=52367, i1=76, i16=-40169, i17=37, i18=-145, i19=32136, i20=-219, i21=4, i22=9, i23=9, iArr[]=new int[N];
        float f=-52.354F;
        byte by=107;
        boolean b2=true;
        short s2=22056, sArr[][]=new short[N][N];
        double d3=-1.23288;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -9147358512427632059L);
        FuzzerUtils.init(iArr, -38099);
        FuzzerUtils.init(sArr, (short)2141);

        for (i = 16; i < 281; ++i) {
            Test.instanceCount *= i;
            lArr = (lArr = (lArr = (lArr = FuzzerUtils.long2array(N, (long)-29568L))));
            Test.instanceCount ^= (i1--);
            if (b2) {
                Test.instanceCount = ((i1--) + ((--iArr[i + 1]) - -62865));
                Test.fArrFld[i] = iArr[i + 1];
                i1 += (int)(Math.max((int)(i1 + f), (int)(-10055 * (by * Test.instanceCount))) * ((--i1) -
                    (~lMeth(b2))));
            } else if (false) {
                by += (byte)(i * i);
                f += Test.instanceCount;
            } else {
                i1 = i;
                i16 = 95;
                do {
                    s2 += (short)(i16 ^ i);
                    d3 = d3;
                    d3 += 86L;
                } while ((i16 -= 2) > 0);
                b2 = false;
            }
            sArr[i][i] <<= (short)i;
            i1 += i;
            if (false) break;
            lArr[i + 1][i] -= Test.instanceCount;
            for (i17 = 95; i17 > 2; i17 -= 2) {
                f -= Test.instanceCount;
                Test.iArrFld[i - 1] += i;
                i1 >>= i18;
                Test.instanceCount = by;
            }
        }
        for (i19 = 14; i19 < 367; ++i19) {
            for (i21 = 2; i21 < 71; ++i21) {
                i1 %= 2;
                i18 += (35019 + (i21 * i21));
                i23 += (i21 * i21);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
