package tests.javafuzzer2141;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:21:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=40790L;
    public float fFld=-77.153F;
    public static byte byFld=-4;
    public static double dFld=73.61582;
    public static volatile float fFld1=2.1019F;
    public static boolean bFld=false;
    public static int iFld=44353;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -102.90398);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=3, i9=34287, i10=14, i11=-49462, i12=8782, i13=-28111, iArr1[]=new int[N];
        float f=-113.478F;
        double d1=-1.111787;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(lArr, 166L);

        for (i8 = 2; i8 < 182; i8++) {
            f -= -201;
            iArr1[i8 + 1] *= Test.byFld;
            try {
                iArr1[i8 + 1] = (-32 % i7);
                i9 = (i7 / i8);
                i9 = (i7 % 876132409);
            } catch (ArithmeticException a_e) {}
            d1 %= (i7 | 1);
            i10 = 1;
            do {
                i9 *= -18757;
            } while (++i10 < 9);
            Test.instanceCount <<= i10;
            i9 = i7;
            f -= i9;
            i11 = 9;
            do {
                f = i8;
                for (i12 = 1; i12 < 1; ++i12) {
                    i7 <<= -4;
                    lArr[i12 + 1] |= Test.instanceCount;
                }
            } while (--i11 > 0);
        }
        vMeth_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1() {

        int i14=-3, i15=1, i16=14, i17=-251, i18=-7, i19=134;
        short s=-7372, sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)23406);

        vMeth(i14);
        sArr1[(-55813 >>> 1) % N] += (short)Test.dFld;
        i14 -= i14;
        Test.instanceCount -= (long)Test.dFld;
        for (i15 = 5; i15 < 205; i15++) {
            i14 += (int)Test.fFld1;
            i16 <<= i16;
            s += (short)(i15 ^ i16);
            i14 = i15;
            for (i17 = i15; i17 < 8; i17++) {
                Test.instanceCount += (-31178784L + (i17 * i17));
                i19 += i15;
                Test.instanceCount *= i15;
                Test.dFld += i19;
                Test.bFld = Test.bFld;
            }
        }
        long meth_res = i14 + i15 + i16 + s + i17 + i18 + i19 + FuzzerUtils.checkSum(sArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        long l=-3586829937L, l1=7L;
        double d=-2.45953;
        int i4=25, i5=-41784, i6=-243, iArr[]=new int[N];
        byte by=54;
        short sArr[]=new short[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 92);
        FuzzerUtils.init(sArr, (short)25426);
        FuzzerUtils.init(bArr, true);

        l = 1;
        do {
            i2 = i2;
            i2 += (int)(((166 - (i2 * l)) + (i3 % (i2 | 1))) | Test.instanceCount);
            d *= ((++Test.instanceCount) + (i2 % (l | 1)));
            i3 = (iArr[(int)(l)]++);
            for (i4 = 9; i4 > 1; i4 -= 3) {
                for (l1 = 1; 5 > l1; ++l1) {
                    by = (byte)(iArr[(int)(l)] - (i3++));
                    sArr = sArr;
                    sArr[(int)(l)] = (short)iMeth1();
                    i2 += (int)(((l1 * i2) + Test.instanceCount) - i2);
                    i5 += (int)(((l1 * Test.instanceCount) + Test.fFld1) - i5);
                    iArr[(int)(l1 - 1)] &= i4;
                    i5 = i5;
                    bArr[i4] = true;
                }
            }
        } while (++l < 173);
        long meth_res = i2 + i3 + l + Double.doubleToLongBits(d) + i4 + i5 + l1 + i6 + by + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=235, i1=-46133, i20=-27713, i21=-41520, i22=4, i23=51819, i24=135, i25=-60880, i26=48, i27=-10,
            iArr2[][]=new int[N][N];
        float f1=-1.589F, fArr[]=new float[N];
        short s1=32334;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -754243775L);
        FuzzerUtils.init(iArr2, -8);
        FuzzerUtils.init(fArr, 0.444F);

        for (i = 6; i < 222; i += 3) {
            i1 = (int)(Test.dArrFld[i - 1] - ((long)(i1 - fFld) >> (-iMeth(216, i1))));
            i20 = 1;
            while (++i20 < 348) {
                lArr1[i20 - 1] -= 188;
                iArr2[i][i - 1] *= i1;
                Test.instanceCount += i20;
                for (f1 = i20; f1 < 1; f1++) {
                    lArr1[i] /= 168;
                    iArr2[i20] = iArr2[i];
                }
                i22 = 1;
                while (++i22 < 1) {
                    Test.dFld -= i20;
                    Test.instanceCount = i20;
                    i21 += i1;
                    if (Test.bFld) break;
                }
            }
            Test.fFld1 += i;
            for (i23 = 6; i23 < 348; i23 += 2) {
                i25 = 1;
                do {
                    i21 -= (int)0L;
                    Test.instanceCount = s1;
                    fArr[i23 + 1] = i25;
                } while (++i25 < 3);
                for (i26 = i; i26 < 3; i26 += 2) {
                    i24 += (int)Test.instanceCount;
                    Test.instanceCount = i24;
                    i21 %= (int)((long)(fFld) | 1);
                    i24 = (int)Test.instanceCount;
                    i27 *= i21;
                    switch (i26 % 10) {
                    case 0:
                        i27 += i26;
                        i21 = (int)Test.instanceCount;
                        iArr2[i][i] += i23;
                        break;
                    case 1:
                        i24 = Test.byFld;
                        break;
                    case 2:
                        iArr2[i26] = FuzzerUtils.int1array(N, (int)-57736);
                        break;
                    case 3:
                        Test.instanceCount += i26;
                    case 4:
                        s1 += (short)-181;
                        break;
                    case 5:
                        i24 = i22;
                        break;
                    case 6:
                        Test.instanceCount = Test.iFld;
                        break;
                    case 7:
                        i24 = i24;
                        break;
                    case 8:
                    case 9:
                        iArr2[i23 - 1][i23] += (int)Test.instanceCount;
                        break;
                    default:
                        i1 = i21;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
