package tests.javafuzzer2011;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:26:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=34L;
    public static int iFld=-10;
    public static double dFld=-2.5339;
    public static byte byFld=-42;
    public static boolean bFld=true;
    public static int iFld1=12;
    public static volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.99530);
        FuzzerUtils.init(Test.iArrFld, 20);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=45968, i5=-61118, i6=230, i7=20951, iArr[]=new int[N];
        float f=-55.620F;

        FuzzerUtils.init(iArr, 229);

        for (i4 = 6; i4 < 324; ++i4) {
            f -= i4;
            f = -52835;
            Test.dArrFld[i4 + 1] += f;
            Test.iFld ^= i6;
            i6 = (int)Test.instanceCount;
            iArr[i4 - 1] = i6;
            i6 *= (int)f;
            f += (96L + (i4 * i4));
            Test.instanceCount = -225L;
        }
        i6 = (int)8205682526518097123L;
        Test.dFld = Test.iFld;
        i7 = 1;
        do {
            i5 <<= i6;
            i5 -= (int)-110.259F;
        } while (++i7 < 243);
        vMeth2_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2, boolean b, int i3) {

        int i8=-128, i9=126, i11=63, i12=97, i13=172, i14=11;
        boolean b1=false, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3468154548420707492L);
        FuzzerUtils.init(bArr, false);

        vMeth2();
        for (i8 = 3; i8 < 268; ++i8) {
            Test.iArrFld = Test.iArrFld;
            Test.dFld = i8;
            bArr[i8] = b1;
            Test.instanceCount >>= -90;
            Test.iArrFld[i8 + 1] -= i3;
        }
        for (int i10 : Test.iArrFld) {
            for (i11 = 1; 4 > i11; i11++) {
                for (i13 = 2; i13 > 1; --i13) {
                    b = b;
                    i2 /= (int)(i2 | 1);
                    b = b1;
                    i12 -= Test.byFld;
                    i2 = 0;
                }
            }
        }
        vMeth1_check_sum += i2 + (b ? 1 : 0) + i3 + i8 + i9 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i15=-51320, i16=-6, i17=-22627, i18=-1163, i19=2, i20=-49, i21=54299, i22=-162;
        long l1=65462L;
        float f1=-2.204F;

        Test.iFld = ((++Test.iFld) + (++Test.iFld));
        vMeth1(i15, Test.bFld, i15);
        for (i16 = 214; i16 > 8; i16--) {
            Test.iFld -= Test.iFld;
            switch ((((i16 >>> 1) % 4) * 5) + 3) {
            case 6:
                for (l1 = 1; l1 < 8; ++l1) {
                    for (i19 = 1; i19 < 2; ++i19) {
                        i17 += (((i19 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    }
                    Test.dFld = i20;
                    if (Test.bFld) {
                        f1 = i18;
                    } else if (Test.bFld) {
                        for (i21 = i16; i21 < 2; ++i21) {
                            i22 = i15;
                            Test.instanceCount = 46846;
                            Test.instanceCount += (i21 * i21);
                        }
                    } else if (Test.bFld) {
                        i22 += (int)(13L + (l1 * l1));
                    }
                }
                break;
            case 22:
            case 16:
                i17 += i17;
            case 19:
                Test.instanceCount *= i16;
            default:
                Test.iFld1 -= (int)f1;
            }
        }
        vMeth_check_sum += i15 + i16 + i17 + l1 + i18 + i19 + i20 + Float.floatToIntBits(f1) + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-25220, i23=-5, i24=18, i25=6, i26=62810, i27=-53281, i28=-13, i29=-21148, i30=-1, i31=-68, i32=-50;
        short s=8071;
        long l2=5236979087312857225L, lArr1[][]=new long[N][N];
        float f2=-30.928F;
        double d=-88.46987;

        FuzzerUtils.init(lArr1, 0L);

        for (i = 159; i > 7; i--) {
            vMeth();
            Test.iArrFld[i + 1] <<= s;
        }
        Test.dFld -= Test.instanceCount;
        try {
            Test.bFld = true;
            Test.iFld1 -= (int)1260315076L;
            Test.instanceCount &= Test.iFld1;
            for (i23 = 14; (283 + 400) > i23; ++i23) {
                Test.iFld += s;
                sArrFld[i23 - 1] <<= (short)i;
                for (i25 = 1 - 400; i25 < 63; ++i25) {
                    lArrFld[i23] += i;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i27 = 1;
            do {
                i24 >>= i24;
                s += (short)i26;
                i24 += (i27 + l2);
            } while (++i27 < 340);
        }
        i28 = 1;
        while (++i28 < 269) {
            lArr1 = lArr1;
            Test.iFld1 += i26;
        }
        Test.iArrFld[(Test.iFld >>> 1) % N] -= Test.iFld;
        i1 -= (int)1321258233L;
        for (i29 = 11; i29 < 339; ++i29) {
            for (f2 = i29; f2 < 77; f2++) {
                Test.instanceCount = i23;
                for (d = i29; d < 1; d++) {
                    Test.iFld1 -= (int)l2;
                    Test.iArrFld[(int)(d + 1)] -= i29;
                    i32 = (int)l2;
                    lArr1[i29 + 1] = FuzzerUtils.long1array(N, (long)-17981L);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
