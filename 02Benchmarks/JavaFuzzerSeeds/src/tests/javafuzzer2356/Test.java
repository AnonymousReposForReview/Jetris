package tests.javafuzzer2356;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:12:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public double dFld=-82.73653;
    public static byte byFld=74;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -10L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, int i9, int i10) {

        int i11=4, i12=1, i13=-44746, i14=0, i15=1, iArr1[]=new int[N];
        float f2=0.867F;
        byte by=8;
        short s=-24296;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 2427);
        FuzzerUtils.init(bArr, true);

        for (i11 = 11; i11 < 183; i11++) {
            Test.instanceCount >>>= i9;
            f2 = -5;
            by += (byte)(i11 | i8);
            Test.instanceCount += (-2666 + (i11 * i11));
            Test.instanceCount ^= i8;
            i13 = 1;
            while (++i13 < 9) {
                s += (short)i9;
                for (i14 = 1; i14 < 1; i14++) {
                    i12 *= (int)Test.instanceCount;
                    iArr1[i11] += i15;
                    bArr[i11 - 1] = b1;
                    iArr1 = iArr1;
                    if (b1) break;
                }
                i15 += (((i13 * i14) + i15) - by);
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + by + i13 + s + i14 + i15 + (b1 ? 1 : 0)
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i4=-11, i5=12, i6=14, i7=245, i16=0, i17=144, iArr2[]=new int[N], iArr3[]=new int[N];
        byte by1=52;
        boolean b2=false;

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(iArr3, 19019);

        for (i4 = 11; i4 < 180; i4++) {
            for (i6 = 1; i6 < 9; i6++) {
                i7 = iMeth(i4, i6, i6);
                i7 *= 205;
                iArr2[i4 - 1] <<= i5;
                by1 = (byte)Test.instanceCount;
                b2 = false;
                i5 += i7;
            }
            for (i16 = 1; i16 < 9; i16++) {
                try {
                    iArr2[i4 - 1] = (-52462 / i16);
                    iArr2[i4 - 1] = (-13649 / i6);
                    i5 = (iArr2[i16 + 1] % iArr2[i16 - 1]);
                } catch (ArithmeticException a_e) {}
                if (b2) break;
                i7 >>= i4;
                iArr3[i16 - 1] *= (int)Test.instanceCount;
                i17 -= 101;
                if (b2) break;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + by1 + (b2 ? 1 : 0) + i16 + i17 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, boolean b) {

        int i1=33814, i2=0, i3=-146, i18=3, i19=-32498, i20=-2, i21=-14, i22=-163, iArr[]=new int[N];
        float f1=126.255F;

        FuzzerUtils.init(iArr, -34935);

        iArr[(i1 >>> 1) % N] = (int)(((6.590F + (--f1)) - (l - Test.instanceCount)) - ((i1++) - (--Test.lArrFld[(i1 >>>
            1) % N])));
        for (i2 = 6; i2 < 181; ++i2) {
            i3 *= Integer.reverseBytes(--iArr[i2 + 1]);
        }
        Test.instanceCount >>= lMeth();
        i1 -= i1;
        for (i18 = 20; i18 < 372; ++i18) {
            Test.byFld &= (byte)i19;
        }
        i20 = 1;
        while (++i20 < 300) {
            i3 += i20;
            for (i21 = 1; i21 < 6; i21++) {
                i22 = 44593;
                i3 = -50803;
                i22 -= (int)l;
                i1 += i21;
                i22 = (int)-3517139198662338095L;
            }
        }
        vMeth_check_sum += l + (b ? 1 : 0) + i1 + Float.floatToIntBits(f1) + i2 + i3 + i18 + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.514F, fArr[]=new float[N];
        int i=13, i23=-45455, i24=-16438, i25=-38583, i26=-43, i27=-39985, i28=49241, i29=-24515, i30=-21092,
            iArr4[]=new int[N];
        boolean b3=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr4, -29370);
        FuzzerUtils.init(fArr, -56.255F);
        FuzzerUtils.init(dArr, -67.111496);

        f += i;
        dFld = (++i);
        vMeth(Test.instanceCount, b3);
        if (true) {
            b3 = b3;
            for (i23 = 6; i23 < 227; i23++) {
                i24 += (i23 | i23);
                for (i25 = 2; i25 < 114; ++i25) {
                    i24 |= i24;
                    Test.byFld -= (byte)-27;
                    i24 = (int)Test.instanceCount;
                    i -= (int)Test.instanceCount;
                }
                for (i27 = 114; 5 < i27; i27--) {
                    Test.byFld = (byte)-10;
                    i29 = 1;
                    do {
                        i24 = 4;
                        f -= i29;
                        Test.instanceCount = i28;
                        i24 -= (int)f;
                        try {
                            i26 = (i26 / 223);
                            i24 = (i29 / i28);
                            iArr4[i23] = (i25 / i25);
                        } catch (ArithmeticException a_e) {}
                    } while (++i29 < 2);
                    Test.instanceCount <<= i27;
                    Test.instanceCount += i27;
                    i28 >>>= i28;
                    i = (int)f;
                    i30 = 1;
                    do {
                        i26 -= i30;
                    } while (++i30 < 2);
                    Test.instanceCount >>= i30;
                    fArr[i27] = -189;
                    i26 = (int)dFld;
                }
                iArr4[i23 + 1] += (int)Test.instanceCount;
            }
        } else if (b3) {
            i28 -= i26;
        } else {
            dArr[(i26 >>> 1) % N] *= Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
