package tests.javafuzzer290;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:19:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9002198567425550457L;
    public static float fFld=0.311F;
    public static double dFld=-95.85020;
    public static boolean bFld=false;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=74;

        Test.instanceCount = (long)Test.fFld;
        i3 = (int)4070470813L;
        i3 += i3;
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i1, int i2) {

        int i4=61193, i5=-110, i6=-64005, i7=-8, i8=-228;
        double d=0.50979;
        short s=27328;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.fFld += iMeth();
        i1 = (int)l;
        for (i4 = 2; i4 < 300; i4++) {
            Test.fFld = Test.instanceCount;
        }
        for (i6 = 7; 311 > i6; ++i6) {
            for (d = 5; d > 1; --d) {
                l = 44077;
                bArr[(int)(d + 1)] = false;
                i5 <<= i7;
                i2 -= (int)Test.instanceCount;
                Test.fFld = 163;
                i1 >>= -14;
                try {
                    i8 = (i5 % -64755);
                    i1 = (i7 % i6);
                    i5 = (i4 / 441697923);
                } catch (ArithmeticException a_e) {}
                i5 -= (int)l;
                s = (short)i7;
            }
        }
        vMeth1_check_sum += l + i1 + i2 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + s +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i=65057, i9=-226, i10=-171, i12=-163, i13=-19295, i14=-4, i15=-3, i16=-9, i17=10943, i18=9, iArr[]=new
            int[N];
        short s1=-31327;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 137);
        FuzzerUtils.init(lArr, 9L);

        i = ((-i) + i);
        i = (int)Long.reverseBytes((i - i) - (1 - (--Test.instanceCount)));
        vMeth1(Test.instanceCount, i, i);
        for (i9 = 275; i9 > 15; i9--) {
            Test.instanceCount = (long)Test.fFld;
            Test.dFld = i;
            i12 = 1;
            while (++i12 < 6) {
                lArr[i9 - 1] >>= -1108;
            }
            i >>>= s1;
        }
        if (Test.bFld) {
            for (i13 = 8; i13 < 165; ++i13) {
                for (i15 = 1; i15 < 10; ++i15) {
                    for (i17 = 1; i17 < 2; i17++) {
                        Test.fFld *= i18;
                        s1 = (short)i17;
                    }
                }
            }
        } else {
            iArr[(i13 >>> 1) % N] = -26690;
        }
        vMeth_check_sum += i + i9 + i10 + i12 + s1 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-14, i21=-54674, i22=-37168, iArr1[]=new int[N];
        long l1=3379823231852692111L;
        short s2=7282;

        FuzzerUtils.init(iArr1, -61582);

        vMeth();
        for (i20 = 12; i20 < 287; ++i20) {
            if (Test.bFld) continue;
            i21 += (i20 ^ i20);
            try {
                i21 = (i20 % 56923);
                i21 = (-145 % i21);
                iArr1[i20] = (iArr1[i20 + 1] / i21);
            } catch (ArithmeticException a_e) {}
            for (l1 = i20; l1 < 91; ++l1) {
                s2 += (short)l1;
                Test.instanceCount += l1;
            }
            Test.instanceCount = (long)Test.dFld;
            if (Test.bFld) continue;
            lArrFld[i20 - 1] = i22;
            i22 += (i20 ^ i21);
            s2 += (short)(((i20 * i21) + Test.instanceCount) - l1);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
