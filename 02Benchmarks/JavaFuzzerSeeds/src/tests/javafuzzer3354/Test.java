package tests.javafuzzer3354;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:38:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3320841280L;
    public int iFld=-14;
    public static double dFld=1.69864;
    public static boolean bFld=true;
    public float fFld=-19.32F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4) {

        byte by=34;
        short s=19266;
        int i6=193, i7=-1;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -132L);
        FuzzerUtils.init(fArr, -2.443F);

        lArr[(i4 >>> 1) % N] -= by;
        i4 |= i4;
        for (int i5 : Test.iArrFld) {
            Test.dFld = s;
            fArr = fArr;
            Test.instanceCount ^= i4;
        }
        Test.bFld = Test.bFld;
        Test.iArrFld[(i4 >>> 1) % N] += i4;
        for (i6 = 18; i6 < 373; i6 += 3) {
            i7 += (((i6 * i4) + Test.instanceCount) - i4);
            by += (byte)i6;
            i7 >>>= i4;
            Test.instanceCount = -110;
            i4 <<= i7;
            Test.instanceCount -= Test.instanceCount;
        }
        long meth_res = i4 + by + s + i6 + i7 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public boolean bMeth() {

        int i8=64818, i9=1, i10=-101, i11=-17955;
        double dArr[]=new double[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(dArr, 62.115005);
        FuzzerUtils.init(bArr, false);

        dArr[(iFld >>> 1) % N] = lMeth(iFld);
        Test.iArrFld[(iFld >>> 1) % N] = iFld;
        for (i8 = 3; i8 < 375; ++i8) {
            bArr[i8 - 1][i8 + 1] = Test.bFld;
            fFld += (i8 + i8);
            if (false) {
                Test.instanceCount <<= i8;
                i9 = i8;
            } else if (Test.bFld) {
                try {
                    i9 = (Test.iArrFld[i8] / i8);
                    Test.iArrFld[i8 - 1] = (iFld / 1790401115);
                    iFld = (-23103 / i8);
                } catch (ArithmeticException a_e) {}
            } else {
                switch ((i8 % 2) + 27) {
                case 27:
                    Test.instanceCount ^= i8;
                    break;
                case 28:
                    iFld += i9;
                    for (i10 = 1; i10 < 5; i10 += 2) {
                        i11 += (i10 * fFld);
                        i11 += (i10 * i10);
                    }
                    break;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(bArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void vMeth(long l, int i) {

        int i1=-19453, i2=-205, i3=-23597, i12=36957, i13=-55096, i14=18429, i15=69, i16=-13;
        byte by1=-59;
        short s1=19379;

        for (i1 = 17; i1 < 316; ++i1) {
            i3 = 1;
            do {
                switch ((((Math.min(iFld, i) >>> 1) % 5) * 5) + 83) {
                case 88:
                    switch (((i3 % 1) * 5) + 43) {
                    case 44:
                        switch ((i3 % 1) + 61) {
                        case 61:
                            if (bMeth()) break;
                            for (i12 = 1; 1 > i12; ++i12) {
                                i14 = 916;
                                fFld += (i12 * i12);
                                by1 += (byte)(i12 * i12);
                            }
                            for (i15 = 1; i15 < 1; i15++) {
                                iFld += (i15 ^ Test.instanceCount);
                                i14 -= i16;
                            }
                            i2 += (i3 * i3);
                            break;
                        default:
                            s1 = (short)Test.instanceCount;
                        }
                    }
                    break;
                case 100:
                    fFld += i14;
                    break;
                case 104:
                    i13 += (i3 * i3);
                case 95:
                    i16 = -50201;
                case 85:
                    Test.instanceCount += i3;
                default:
                    if (false) break;
                }
            } while (++i3 < 6);
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + i12 + i13 + i14 + by1 + i15 + i16 + s1;
    }

    public void mainTest(String[] strArr1) {

        byte by2=17;

        Test.iArrFld[(iFld >>> 1) % N] += (int)Test.instanceCount;
        vMeth(-8L, iFld);
        iFld = (int)890731967236141334L;
        iFld += (int)Test.dFld;
        by2 = (byte)207415871868583480L;
        iFld = iFld;
        iFld = iFld;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)82);
        Test.instanceCount += (long)Test.dFld;
        Test.dFld *= iFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
