package tests.javafuzzer2858;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:35:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=900908593L;
    public static double dFld=81.42779;
    public static short sFld=23053;
    public static int iFld=-31714;
    public short sFld1=-27329;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=144, i2=13874, i3=95, i4=-1, i5=-6, i6=175;
        float f1=2.841F;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)88);

        for (i1 = 6; i1 < 240; ++i1) {
            i2 ^= i2;
            byArr = FuzzerUtils.byte1array(N, (byte)-73);
            if (b1) {
                for (i3 = i1; 7 > i3; ++i3) {
                    i4 >>= i4;
                    f1 = i2;
                    Test.dFld *= f1;
                }
                Test.iArrFld[i1] >>>= Test.sFld;
            } else {
                Test.dFld = i4;
                for (i5 = 1; i5 < 7; ++i5) {
                    i2 *= i4;
                    Test.instanceCount >>= i6;
                    i4 += -9;
                    i2 += (i5 | i4);
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i5 + i6 +
            FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth1() {

        int i7=-11, i8=-22833;

        vMeth();
        for (i7 = 18; 335 > i7; ++i7) {
            i8 += (((i7 * i8) + Test.instanceCount) - i8);
        }
        Test.dFld += 179;
        i8 = 22413;
        i8 = i8;
        switch (((i8 >>> 1) % 1) + 115) {
        case 115:
        }
        long meth_res = i7 + i8;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        byte by=-55;
        int i9=-13, i10=13, i11=106, i12=-3, i13=-46634;
        double d=-3.56912;

        i <<= (Math.min(iMeth1(), i) - i);
        i >>>= by;
        switch (((i >>> 1) % 2) + 104) {
        case 104:
            for (i9 = 15; i9 < 321; ++i9) {
                for (i11 = 1; i11 < 5; ++i11) {
                    i = (int)Test.instanceCount;
                    i >>>= (int)247L;
                    Test.iArrFld[i9 + 1] += i11;
                    Test.dFld += Test.instanceCount;
                    i += (int)Test.instanceCount;
                    i10 -= i9;
                    for (d = 1; 2 > d; d++) {
                        try {
                            i13 = (Test.iArrFld[i9] / i10);
                            i12 = (i13 % i10);
                            i13 = (i / Test.iArrFld[i11]);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.instanceCount *= -239;
                    i >>= (int)Test.instanceCount;
                }
            }
            break;
        case 105:
            Test.iArrFld[(i >>> 1) % N] *= (int)32.425F;
        }
        long meth_res = i + by + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true, bArr[]=new boolean[N];
        short s=-13659, sArr[]=new short[N];
        float f=51.320F;
        int i14=0, i15=55451, i16=19561;
        long l1=-65281L, lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -251L);
        FuzzerUtils.init(dArr, -2.99494);
        FuzzerUtils.init(sArr, (short)-12458);
        FuzzerUtils.init(bArr, false);

        b = b;
        Test.instanceCount -= (-54469 + ((--Test.instanceCount) - s));
        for (long l : lArr) {
            switch ((((((int)(f * 3648)) >>> 1) % 4) * 5) + 1) {
            case 7:
                iMeth(i14);
                if (b) continue;
                break;
            case 3:
                lArr[(i14 >>> 1) % N] = (long)f;
                i15 = 1;
                do {
                    Test.iArrFld[i15 + 1] = (int)l;
                    i14 -= i15;
                    l += (i15 | i14);
                    Test.iArrFld[i15] = (int)Test.dFld;
                    Test.iArrFld[(i14 >>> 1) % N] = i14;
                    for (l1 = 1; l1 < 1; ++l1) {
                        i16 += (int)(l1 * l1);
                        b = true;
                        Test.sFld = (short)Test.dFld;
                        Test.iArrFld[(int)(l1)] *= i16;
                        i16 -= i14;
                        f += (l1 * l1);
                        dArr[(int)(l1)] = 8;
                        switch (((Test.iFld >>> 1) % 7) + 84) {
                        case 84:
                            Test.iFld -= i15;
                            byArrFld[i15][(int)(l1 - 1)] = (byte)-14854;
                            Test.dFld = f;
                            Test.instanceCount += (l1 + Test.iFld);
                            break;
                        case 85:
                            switch (((i15 % 4) * 5) + 113) {
                            case 121:
                                l = l1;
                                break;
                            case 120:
                                Test.iArrFld[(int)(l1 - 1)] >>= (int)l;
                                i14 -= i14;
                            case 125:
                                i14 <<= (int)-6L;
                                break;
                            case 124:
                                l += (l1 * f);
                            }
                            break;
                        case 86:
                            sArr[i15] >>>= (short)Test.instanceCount;
                            break;
                        case 87:
                            bArr[i15 + 1] = true;
                            break;
                        case 88:
                            Test.iFld %= (int)(sFld1 | 1);
                            break;
                        case 89:
                            Test.iFld += i15;
                            break;
                        case 90:
                            l += i14;
                            break;
                        }
                    }
                } while (++i15 < 63);
                break;
            case 12:
                lArr[(i14 >>> 1) % N] >>>= i16;
            case 16:
                Test.iFld ^= Test.iFld;
            default:
                lArr[(168 >>> 1) % N] += l;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
