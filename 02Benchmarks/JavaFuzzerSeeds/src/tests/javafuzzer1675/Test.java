package tests.javafuzzer1675;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static double dFld=-2.42675;
    public static volatile byte byFld=-30;
    public float fFld=32.36F;
    public short sFld=-24612;
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35057);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, long l1, long l2) {


        i3 = (int)-2.78051;
        vMeth2_check_sum += i3 + l1 + l2;
    }

    public static void vMeth1(int i1, long l, int i2) {

        int i4=-151, i5=-57897, i6=-9, i7=32278, i8=8;
        float f=1.561F;
        boolean b=true;

        vMeth2(i2, l, l);
        for (i4 = 11; i4 < 269; i4++) {
            if (false) break;
            for (i6 = 1; i6 < 6; ++i6) {
                f -= i6;
                f += (7 + (i6 * i6));
                Test.instanceCount >>>= i2;
                Test.iArrFld[i6 - 1] >>>= i5;
                i8 = 1;
                do {
                    Test.dFld -= Test.byFld;
                    i2 = i5;
                    i1 += (i8 ^ (long)f);
                    if (b) continue;
                    i5 = 51;
                    Test.dFld += 5L;
                } while (++i8 < 2);
            }
        }
        vMeth1_check_sum += i1 + l + i2 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + (b ? 1 : 0);
    }

    public static void vMeth() {

        int i9=-6;

        vMeth1(7, Test.instanceCount, i9);
        i9 += i9;
        i9 *= 9;
        vMeth_check_sum += i9;
    }

    public void mainTest(String[] strArr1) {

        int i=51103, i10=-29880, i11=-13, i12=2, i13=53427, i14=29, i15=-31327, i16=5, i17=7, i18=-32721;
        float f1=0.442F, fArr[][]=new float[N][N];
        long l3=-346393638L, lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 218L);
        FuzzerUtils.init(dArr, -86.18903);
        FuzzerUtils.init(fArr, 62.278F);

        i = 1;
        while (++i < 328) {
            vMeth();
            fFld -= Test.instanceCount;
        }
        Test.iArrFld[(i >>> 1) % N] ^= -63264;
        lArr = lArr;
        i10 += i10;
        for (i11 = 2; i11 < 262; i11++) {
            i13 = 97;
            while ((i13 -= 3) > 0) {
                i10 += (((i13 * i12) + f1) - i12);
                i14 = 3;
                while (--i14 > 0) {
                    i12 *= (int)fFld;
                    Test.instanceCount += (((i14 * i12) + Test.instanceCount) - fFld);
                    dArr[i13 - 1] = Test.instanceCount;
                    i12 = (int)l3;
                    dArrFld = dArrFld;
                    fFld += l3;
                    lArr[i14] = -62088;
                    Test.dFld -= i13;
                }
                Test.iArrFld[i13 + 1] += i13;
            }
            Test.iArrFld[i11 + 1] -= i11;
            Test.iArrFld[i11] *= (int)Test.dFld;
            i12 += (((i11 * i13) + i11) - i);
            for (i15 = 6; i15 < 97; i15++) {
                try {
                    i12 = (2597 / i10);
                    i10 = (208 / i10);
                    i12 = (Test.iArrFld[i15 - 1] / i12);
                } catch (ArithmeticException a_e) {}
                i10 = sFld;
                for (i17 = 1; i17 < 2; i17++) {
                    Test.instanceCount -= l3;
                    fArr[i17][i17] = -2.212F;
                    Test.dFld += i17;
                    Test.dFld += i;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
