package tests.javafuzzer1617;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:11:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=8906;
    public static float fFld=-8.879F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2) {

        int i3=13, i4=6, i5=158, i6=-201, i7=10896, i8=9, i9=0, iArr1[]=new int[N];
        short s=-6359;
        float f=-68.980F, fArr[]=new float[N];
        double d1=-2.65004;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 20002L);
        FuzzerUtils.init(iArr1, -37942);
        FuzzerUtils.init(fArr, 41.780F);

        if (b) {
            i3 = 1;
            while (++i3 < 134) {
                lArr[i3 + 1] += -29123;
                i1 += (i3 * i3);
                for (i4 = i3; i4 < 12; ++i4) {
                    iArr1[i4 + 1] *= Test.iFld;
                    for (i6 = 1; i6 < 1; i6++) {
                        s = (short)Test.instanceCount;
                        fArr[i3 + 1] += i2;
                        Test.instanceCount = i3;
                        f -= (float)d1;
                    }
                    for (i8 = 1; i8 < 1; i8++) {
                        i2 += i8;
                        Test.instanceCount |= -27458;
                        s *= (short)23384;
                    }
                }
            }
        } else if (b) {
            Test.iFld %= 10;
        } else {
            s <<= (short)i2;
            vMeth2_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + s + Float.floatToIntBits(f) +
                Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        }
        vMeth2_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + s + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l) {

        int i10=-131, i11=4303, i12=100, i13=-186, i14=37403, iArr2[]=new int[N];
        float f1=-1.349F;
        double d2=30.97886;
        byte by=-85;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 22503);
        FuzzerUtils.init(lArr1, -2134759827976546707L);

        vMeth2(Test.iFld, Test.iFld);
        Test.iFld = Test.iFld;
        for (i10 = 3; i10 < 169; ++i10) {
            iArr2[i10 + 1] &= Test.iFld;
            i11 >>= (int)l;
            for (i12 = 1; i12 < 10; i12++) {
                iArr2[i12] >>>= i11;
                i13 >>>= i13;
                l = (long)f1;
                f1 += (i12 + i13);
                lArr1[i12 - 1] >>= -7;
                for (d2 = 1; d2 < 2; ++d2) {
                    Test.instanceCount <<= 6;
                    by += (byte)f1;
                    i11 = Test.iFld;
                }
            }
        }
        vMeth1_check_sum += l + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i14 +
            by + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d, int i) {

        int i15=8, i16=-69, i17=21871, i18=56, i19=-26221, iArr3[]=new int[N];
        float f2=-19.276F;
        byte by2=111;

        FuzzerUtils.init(iArr3, -3156);

        vMeth1(10L);
        for (i15 = 6; i15 < 198; ++i15) {
            for (f2 = 8; f2 > 1; --f2) {
                iArr3[i15 - 1] += -94;
                i = i16;
                d = i;
                i = Test.iFld;
                for (i18 = (int)(f2); i18 < 2; i18++) {
                    byte by1=-14;
                    iArr3[i15 - 1] = i;
                    i -= i15;
                    i = i16;
                    by1 = (byte)Test.instanceCount;
                }
                i19 = (int)Test.instanceCount;
                Test.fFld += (((f2 * by2) + i17) - i);
                i = 14370;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 + i19 +
            by2 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        double d3=-108.6964, d4=0.45482;
        int i20=38277, i21=-11, i22=-5, i23=-41605, iArr[]=new int[N];
        boolean b1=false;
        short s1=1558, sArr[]=new short[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(fArr1, -108.825F);
        FuzzerUtils.init(sArr, (short)23742);

        iArr[(Test.iFld >>> 1) % N] = (int)(~(Math.min(Test.instanceCount, 13L) / ((Test.iFld++) | 1)));
        vMeth(d3, 11);
        for (i20 = 1; i20 < 257; ++i20) {
            Test.iFld -= 33;
            i21 *= i20;
            Test.iFld >>= i20;
            for (i22 = 4; i22 < 98; i22++) {
                b1 = b1;
                switch ((i20 % 2) + 96) {
                case 96:
                    s1 += (short)i22;
                    break;
                case 97:
                    i23 -= 1;
                    switch ((i20 % 2) + 100) {
                    case 100:
                        Test.instanceCount = Test.instanceCount;
                        d4 = 1;
                        do {
                            switch ((((i20 >>> 1) % 2) * 5) + 8) {
                            case 10:
                                Test.instanceCount += -8L;
                                i23 += (int)(((d4 * i22) + Test.instanceCount) - Test.fFld);
                                Test.iFld += (int)((long)d4 | Test.iFld);
                                break;
                            case 15:
                                i23 += (int)(d4 * i22);
                            }
                            Test.iFld += (int)(d4 * d4);
                            if (b1) continue;
                            iArr[(int)(d4 - 1)] *= i23;
                            Test.iFld -= i22;
                            Test.instanceCount += (-64797 + (d4 * d4));
                            if (b1) continue;
                            iArr[i22] = s1;
                            fArr1 = fArr1;
                        } while (++d4 < 2);
                        b1 = b1;
                        iArr[i20 - 1] = Test.iFld;
                        break;
                    case 101:
                    }
                    sArr[i22] += (short)i23;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
