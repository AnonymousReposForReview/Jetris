package tests.javafuzzer681;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:52:21 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static boolean bFld=false;
    public static int iFld=-193;
    public static volatile float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 117.129F);
        FuzzerUtils.init(Test.lArrFld, 9042452651911036760L);
        FuzzerUtils.init(Test.sArrFld, (short)2364);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7) {

        int i8=8;

        i8 = 1;
        do {
            i6 += i6;
        } while (++i8 < 276);
        vMeth2_check_sum += i6 + i7 + i8;
    }

    public static void vMeth1(boolean b, long l, int i4) {

        float f=0.503F, f1=127.460F;
        int i5=-45, i9=2, i10=-6656, i11=-12, i12=57491, iArr1[]=new int[N];
        long l1=2682659969688759393L;
        double d1=-35.49573;

        FuzzerUtils.init(iArr1, 121);

        for (f = 313; f > 1; --f) {
            vMeth2(i5, i9);
            i9 = (int)l;
            for (i10 = 1; i10 < 5; ++i10) {
                for (l1 = 1; l1 < 2; l1++) {
                    l = i5;
                    iArr1[i10 - 1] <<= (int)l1;
                    f1 = i4;
                    iArr1[(int)(f)] *= i12;
                    l += (long)(-2.104F + (l1 * l1));
                    i9 -= i4;
                }
                Test.instanceCount -= i11;
                l /= (i10 | 1);
                i4 -= (int)d1;
                if (b) break;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + l + i4 + Float.floatToIntBits(f) + i5 + i9 + i10 + i11 + l1 + i12 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i=-5, i2=-9, i3=5, iArr[]=new int[N];
        double d=12.56020, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 32.21763);
        FuzzerUtils.init(iArr, 18905);
        FuzzerUtils.init(lArr, 31114L);

        i = 1;
        while (++i < 358) {
            int i1=180;
            Test.instanceCount -= (long)(dArr[i] + ((--i1) - (i1 + i1)));
            Test.instanceCount -= (35060 + (i1 -= (--i1)));
            i1 *= (int)(Integer.reverseBytes(i) - (iArr[i + 1] - Test.fArrFld[i]));
            for (i2 = i; i2 < 5; ++i2) {
                d *= i1;
            }
            vMeth1(Test.bFld, Test.instanceCount, -154);
            i1 = i1;
            iArr[i - 1] = -121;
            lArr[i] -= Test.instanceCount;
        }
        vMeth_check_sum += i + i2 + i3 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=-175, i14=-35323, i15=9, i16=30820, i17=205, i18=60331, i19=-7, i20=-8, i21=53796, i22=-140,
            iArr2[][]=new int[N][N];
        float f2=-1.821F;
        double d2=-117.267;

        FuzzerUtils.init(iArr2, -35046);

        vMeth();
        for (i13 = 11; i13 < 177; i13++) {
            for (i15 = 1; i15 < 151; i15++) {
                iArr2[i15 - 1][i13 + 1] += i15;
                iArr2[i15 + 1][i15 - 1] *= (int)Test.instanceCount;
                if (false) break;
                iArr2[i13][i15] += i13;
            }
            for (i17 = 5; i17 < 151; i17++) {
                i14 += (int)1.91F;
                Test.bFld = Test.bFld;
                i16 >>= i16;
                switch (((i13 % 9) * 5) + 12) {
                case 40:
                    for (i19 = 1; i19 < 2; ++i19) {
                        f2 += (i19 * i16);
                        Test.instanceCount -= i15;
                        iArr2[i13 - 1][i17] &= -19060;
                        Test.bFld = Test.bFld;
                        Test.fArrFld[i17 + 1] += -80.704F;
                        Test.lArrFld[i17] -= (long)f2;
                        i20 += (i19 + i20);
                        Test.fArrFld[i17] = (float)d2;
                        Test.iFld -= i13;
                        f2 += (i19 * i16);
                    }
                    f2 = i18;
                    break;
                case 22:
                    Test.instanceCount = i14;
                    for (i21 = 1; i21 < 2; i21++) {
                        switch ((i17 % 3) + 17) {
                        case 17:
                            Test.iFld = 0;
                            break;
                        case 18:
                            try {
                                i22 = (60 / i15);
                                Test.iFld = (i21 / i14);
                                iArr2[i13][i17 - 1] = (48 / i22);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount -= i15;
                            break;
                        case 19:
                            Test.sArrFld[i17 + 1] >>= (short)i16;
                            break;
                        default:
                            iArr2[i17 - 1][i21] = (int)f2;
                        }
                    }
                    break;
                case 37:
                    i22 = (int)36657L;
                    break;
                case 25:
                    i14 += (int)-2398339857L;
                    break;
                case 43:
                    iArr2[i17 + 1] = iArr2[i13 + 1];
                    break;
                case 52:
                    d2 *= d2;
                    break;
                case 53:
                    i22 -= (int)Test.instanceCount;
                    break;
                case 17:
                    i20 += (((i17 * Test.instanceCount) + Test.instanceCount) - i22);
                case 34:
                    i22 += (i17 * i17);
                    break;
                default:
                    i16 *= (int)1376851883L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
