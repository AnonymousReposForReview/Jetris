package tests.javafuzzer1623;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:17:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-248L;
    public static int iFld=44270;
    public short sFld=-1576;
    public static float fFld=17.529F;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1658270897527724136L);
        FuzzerUtils.init(Test.dArrFld, 1.120499);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d, boolean b, long l) {

        int i4=23294, i5=-30192, i6=-196, i7=-189, i8=-123, iArr[]=new int[N];
        short s1=28037;
        byte by=94;

        FuzzerUtils.init(iArr, 164);

        l ^= Test.instanceCount;
        for (i4 = 5; i4 < 238; i4++) {
            i6 = 1;
            do {
                s1 += (short)i6;
                by = (byte)5L;
                d = Test.instanceCount;
                by *= (byte)d;
                i5 += by;
            } while (++i6 < 7);
            for (i7 = 1; i7 < 7; i7++) {
                try {
                    i5 = (i6 / -45339);
                    i8 = (i4 % i6);
                    i5 = (-58065 / i8);
                } catch (ArithmeticException a_e) {}
                iArr[i7] -= i4;
                iArr = iArr;
            }
            i8 += (-3 + (i4 * i4));
            i8 = i7;
            if (i8 != 0) {
            }
        }
        long meth_res = Double.doubleToLongBits(d) + (b ? 1 : 0) + l + i4 + i5 + i6 + s1 + by + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=1870, i1=43, i2=-22064, i3=-12;
        double d1=57.114270;
        boolean b1=false;
        short s2=-29122;

        for (i = 3; i < 273; i++) {
            i1 %= (int)(i1 | 1);
            for (i2 = 6; i2 > i; i2--) {
                if (b1) {
                    switch ((i2 % 4) + 123) {
                    case 123:
                        i1 = (Math.min((int)(62478 * lMeth(d1, b1, 62095L)), i2) - -43023);
                        i1 -= i2;
                    case 124:
                    case 125:
                        i3 += i2;
                        i3 += (((i2 * Test.instanceCount) + i3) - s2);
                        d1 += i3;
                        break;
                    case 126:
                        Test.instanceCount = 129;
                        Test.lArrFld[i] *= -42539;
                        break;
                    default:
                        Test.instanceCount >>>= i2;
                    }
                    try {
                        i1 = (i3 / i3);
                        i3 = (779089030 % i3);
                        i3 = (19246 / i1);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.instanceCount;
                } else {
                    Test.instanceCount += (((i2 * i1) + i1) - Test.instanceCount);
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + s2;
    }

    public static void vSmallMeth(short s) {


        vMeth();
        Test.instanceCount = Test.iFld;
        vSmallMeth_check_sum += s;
    }

    public void mainTest(String[] strArr1) {

        int i9=-13, i10=114, i11=212, i12=54347, i13=202, iArr1[]=new int[N];
        float f=-58.184F;
        double d2=-1.112849;
        byte by1=-110;

        FuzzerUtils.init(iArr1, 164);

        for (int smallinvoc=0; smallinvoc<377; smallinvoc++) vSmallMeth(sFld);
        switch ((((Test.iFld >>> 1) % 9) * 5) + 25) {
        case 50:
            for (i9 = 11; i9 < 271; i9++) {
                boolean b2=false;
                try {
                    i10 = (iArr1[i9] / Test.iFld);
                    Test.iFld = (-25896 % i9);
                    i10 = (Test.iFld % i9);
                } catch (ArithmeticException a_e) {}
                if (b2) {
                    Test.iFld = (int)Test.instanceCount;
                }
                Test.fFld += (i9 * i9);
                for (f = 97; f > 2; f--) {
                    iArr1[i9 - 1] += i11;
                    iArr1[i9] = (int)f;
                    Test.instanceCount = 186842826213282384L;
                    Test.iFld = -35;
                    Test.instanceCount = i9;
                    for (d2 = 1; 2 > d2; d2++) {
                        by1 *= (byte)i9;
                        Test.fFld = Test.instanceCount;
                        i11 ^= i10;
                        Test.instanceCount >>= -19911;
                        iArr1[(int)(f)] = i10;
                        Test.fFld += i10;
                        i10 += i9;
                        Test.fFld *= 77.480F;
                        Test.instanceCount += (long)(((d2 * i9) + i11) - Test.instanceCount);
                        iArr1[(int)(f)] = i9;
                    }
                    Test.instanceCount += (long)(f + i10);
                    Test.instanceCount = i12;
                    i11 += (int)(f * f);
                    i13 = (int)Test.instanceCount;
                }
                i13 -= i10;
                Test.dArrFld[i9 + 1] /= (Test.iFld | 1);
            }
        case 67:
            Test.iFld += (int)d2;
            break;
        case 68:
            i10 *= i10;
        case 39:
            i13 = Test.iFld;
            break;
        case 48:
            i12 = (int)-14246L;
            break;
        case 51:
        case 37:
            Test.instanceCount *= Test.iFld;
            break;
        case 41:
            Test.fFld = 2.977F;
            break;
        case 36:
            Test.dArrFld[(i11 >>> 1) % N] += d2;
            break;
        default:
            Test.lArrFld[(i9 >>> 1) % N] -= i12;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
