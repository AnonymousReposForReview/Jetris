package tests.javafuzzer3429;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:10:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1998979064385897839L;
    public static int iFld=-62718;
    public static byte byFld=-48;
    public static volatile float fFld=-113.962F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long lMeth2_check_sum = 0;

    public static long lMeth2(int i4, long l) {

        int i5=-45689, i6=242, i7=29745, i8=43, i9=11, i10=-430, i11=250, i12=69, i13=46548, i14=34632;
        float f2=-1.72F;

        for (i5 = 6; i5 < 349; ++i5) {
            i4 = (int)f2;
        }
        for (i7 = 144; i7 > 6; --i7) {
            Test.iFld *= Test.iFld;
            for (i9 = 11; i9 > i7; i9--) {
                if (true) break;
                Test.instanceCount += Test.instanceCount;
                Test.iFld = Test.iFld;
            }
            i10 *= (int)f2;
            for (i11 = 1; i11 < 11; i11++) {
                Test.instanceCount -= i12;
                for (i13 = 1; i13 < 2; i13++) {
                    i12 = (int)l;
                    if (Test.iFld != 0) {
                    }
                    Test.iArrFld[i11] -= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i4 + l + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14;
        lMeth2_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth1(float f1) {

        int i2=-23, i3=29050, i15=7, i16=116, i17=-212;
        short s=-12450;
        boolean b=false;

        for (i2 = 2; 137 > i2; i2++) {
            Test.iArrFld[i2 - 1] = (int)(((i3++) + lMeth2(14005, Test.instanceCount)) - s);
            Test.instanceCount += Test.iFld;
            i15 = 1;
            while (++i15 < 12) {
                try {
                    Test.iArrFld[i15] = (Test.iArrFld[i15] / Test.iArrFld[i15 - 1]);
                    i3 = (-25326 / Test.iFld);
                    Test.iFld = (-33108 % i2);
                } catch (ArithmeticException a_e) {}
                for (i16 = 1; i16 > 1; i16 -= 2) {
                    int i18=114;
                    i18 = Test.iFld;
                    if (true) continue;
                    Test.iArrFld[i15 + 1] = (int)Test.instanceCount;
                    i17 = i16;
                    i17 += 49647;
                }
                i3 *= 25034;
                f1 += i16;
                if (b) break;
                Test.instanceCount += (((i15 * s) + i15) - i3);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + s + i15 + i16 + i17 + (b ? 1 : 0);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i=-177, i1=-12, i19=-34364, i20=2, iArr[]=new int[N];
        float f=0.762F, fArr[][]=new float[N][N];
        double d=2.74095;
        boolean b1=false;

        FuzzerUtils.init(iArr, 48023);
        FuzzerUtils.init(fArr, 71.447F);

        for (i = 297; i > 13; i--) {
            f += -53;
            switch (((iArr[i + 1] >>> 1) % 10) + 32) {
            case 32:
                d = ((f *= (iArr[i + 1]++)) + ((i & -1494899724L) + lMeth1(f)));
                break;
            case 33:
                i1 = i1;
                break;
            case 34:
                for (i19 = 6; i19 > 1; i19--) {
                    i1 = i;
                    fArr[i][i19 + 1] -= Test.iFld;
                    Test.iFld += (2 + (i19 * i19));
                    switch ((i19 % 6) + 26) {
                    case 26:
                        Test.iArrFld[i19] -= (int)f;
                        Test.iFld += (183 + (i19 * i19));
                        break;
                    case 27:
                        i1 -= (int)d;
                        d *= Test.iFld;
                        Test.iFld -= (int)f;
                    case 28:
                        Test.iArrFld[i] += (int)d;
                        break;
                    case 29:
                        i1 >>= (int)Test.instanceCount;
                    case 30:
                        Test.instanceCount += i19;
                        break;
                    case 31:
                        Test.iFld = i;
                        break;
                    }
                }
            case 35:
                i1 += (int)Test.instanceCount;
                break;
            case 36:
                Test.instanceCount -= Test.instanceCount;
                break;
            case 37:
                if (b1) continue;
                break;
            case 38:
                d += Test.instanceCount;
                break;
            case 39:
                if (i != 0) {
                }
                break;
            case 40:
                d = Test.instanceCount;
                break;
            case 41:
                Test.instanceCount += (11 + (i * i));
                break;
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i19 + i20 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=-18293, i22=-97, i23=159, i24=-2, i25=38704;
        float f3=-70.262F, f4=116.349F, fArr1[]=new float[N];
        double d1=2.110910;
        boolean b2=true;
        short s1=13915;

        FuzzerUtils.init(fArr1, 34.313F);

        Test.instanceCount += (Test.iFld++);
        lMeth();
        for (i21 = 160; i21 > 7; --i21) {
            i22 += (((i21 * Test.byFld) + i22) - Test.fFld);
            Test.iFld -= (int)Test.instanceCount;
            Test.instanceCount = (long)Test.fFld;
        }
        Test.iArrFld[(i21 >>> 1) % N] = Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        f3 = 1;
        do {
            Test.instanceCount = (long)d1;
        } while (++f3 < 270);
        i23 = 335;
        do {
            i22 = Test.iFld;
            Test.iFld += (i23 ^ Test.iFld);
            Test.iFld += (i23 * i23);
            if (false) break;
            Test.fFld -= (float)d1;
            i22 >>= 8;
            b2 = b2;
        } while (--i23 > 0);
        for (i24 = 6; i24 < 142; ++i24) {
            f4 = 1;
            while ((f4 += 2) < 184) {
                Test.iFld *= i24;
                i25 <<= -46433;
                Test.instanceCount += (long)(((f4 * i21) + s1) - Test.iFld);
                Test.iFld -= (int)Test.fFld;
                fArr1[(int)(f4 + 1)] = Test.instanceCount;
                Test.instanceCount *= Test.byFld;
            }
            i25 *= i21;
            Test.instanceCount += (((i24 * i24) + i25) - i25);
            i25 = 8;
            i22 *= (int)38.785F;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  lMeth2 ->  lMeth2 lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
