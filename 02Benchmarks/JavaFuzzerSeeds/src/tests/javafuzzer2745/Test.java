package tests.javafuzzer2745;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:42:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2394112466L;
    public static long lFld=14770L;
    public static float fFld=-2.241F;
    public static boolean bFld=false;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2485865106L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i10) {

        int i11=-83, i12=23643, i13=-38135, i14=-47, i15=-18894, i16=480;
        short s=29341;
        byte by=0, byArr[]=new byte[N];
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 2.78053);
        FuzzerUtils.init(lArr1, 59628L);
        FuzzerUtils.init(byArr, (byte)58);

        for (i11 = 12; i11 < 358; i11++) {
            Test.instanceCount += (i11 + i10);
            Test.lFld = 0;
            for (i13 = 1; i13 < 5; i13++) {
                Test.lFld += i12;
                i12 *= i14;
                Test.instanceCount <<= i14;
                for (i15 = 1; i15 < 2; i15++) {
                    i10 = i15;
                    switch ((i13 % 9) + 18) {
                    case 18:
                        dArr[i13] = i14;
                    case 19:
                        i12 += i11;
                        break;
                    case 20:
                        Test.instanceCount *= i11;
                        i14 = 14;
                        lArr1[i13] -= Test.lFld;
                        break;
                    case 21:
                        Test.instanceCount ^= i10;
                        break;
                    case 22:
                        i16 -= i10;
                        break;
                    case 23:
                        s += (short)(i15 - i11);
                        break;
                    case 24:
                        by += (byte)-28227;
                    case 25:
                        i14 += (i15 * i15);
                        break;
                    case 26:
                        byArr[i15 + 1] += (byte)i12;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + s + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(int i7, double d1, int i8) {

        int i9=-156, i17=112, i18=49, i19=-33284, i20=209, i21=-73, iArr1[][]=new int[N][N];
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(sArr1, (short)-22546);
        FuzzerUtils.init(iArr1, 9071);

        sArr1[(i8 >>> 1) % N][(-236 >>> 1) % N] = (short)iArr1[(i7 >>> 1) % N][(i9 >>> 1) % N];
        vMeth2(Test.fFld, i8);
        iArr1[(-22064 >>> 1) % N][(-46 >>> 1) % N] |= i9;
        i8 -= i7;
        i17 = 1;
        do {
            Test.lFld = 248L;
            switch ((((i7 >>> 1) % 4) * 5) + 43) {
            case 56:
                switch (((i17 % 1) * 5) + 26) {
                case 31:
                    i7 = i17;
                    i8 |= i18;
                    break;
                default:
                    if (Test.bFld) {
                        for (i19 = 1; i19 < 11; ++i19) {
                            i9 += (105 + (i19 * i19));
                            d1 *= -3284091091L;
                        }
                        i9 = (int)Test.fFld;
                    }
                }
            case 53:
                iArr1[i17 + 1][i17 + 1] = (int)-46703L;
                break;
            case 50:
                i7 += (((i17 * i19) + i8) - i21);
                break;
            case 48:
                Test.lFld = i7;
                break;
            }
        } while (++i17 < 150);
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d1) + i8 + i9 + i17 + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1) {

        int i2=-63783, i3=5, i4=50243, i5=-9762, i6=-46190, iArr[]=new int[N];
        double d=0.24653;
        long l=28592L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6728494241733117610L);
        FuzzerUtils.init(iArr, 249);

        for (i2 = 6; i2 < 275; i2++) {
            if (Test.bFld) {
                switch (((i2 % 2) * 5) + 75) {
                case 85:
                    i4 = 1;
                    while (++i4 < 6) {
                        i3 = (i3--);
                    }
                    for (i5 = 6; 1 < i5; i5 -= 3) {
                        lArr[i2] *= (long)((i1++) + ((i3 >>= i3) - (d + i4)));
                        i3 += (-49625 + (i5 * i5));
                        if (Test.bFld) {
                            iArr[i5] >>>= (int)Test.lFld;
                            i1 <<= iArr[i5 + 1];
                        } else if (true) {
                            vMeth1(-1015, d, i1);
                            i1 += (((i5 * i5) + l) - i1);
                            if (Test.bFld) break;
                            vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + l +
                                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        lArr[i5] = i3;
                    }
                case 83:
                    try {
                        i3 = (i1 % 33822);
                        i6 = (i5 % i1);
                        i3 = (i4 / 119);
                    } catch (ArithmeticException a_e) {}
                }
            } else {
                i3 *= i5;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + l + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i22=12, i23=-4092, i25=31128, i26=7553, i27=97, i28=6, iArr2[]=new int[N];
        float f=-54.805F, f2=-1.937F;
        double d2=-105.66453;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)18165);
        FuzzerUtils.init(iArr2, 75);

        i >>= sArr[(i >>> 1) % N];
        f = (((i - 10) - Test.instanceCount) | (long)((i >>= i) - (42.298F * (Test.instanceCount + -47917))));
        vMeth(i);
        for (i22 = 16; i22 < 273; i22++) {
            i = i;
            for (i25 = 3; i25 < 98; i25++) {
                for (f2 = 1; 2 > f2; ++f2) {
                    byte by1=82;
                    f += Test.instanceCount;
                    switch ((i22 % 2) * 5) {
                    case 7:
                        switch ((i25 % 2) + 87) {
                        case 87:
                            i27 ^= (int)Test.lFld;
                            break;
                        case 88:
                            i += (26 + (f2 * f2));
                            i23 ^= i26;
                            break;
                        default:
                            iArr2[i25] >>>= (int)Test.lFld;
                            i26 += (int)Test.instanceCount;
                            i27 = i23;
                            by1 += by1;
                        }
                        i23 = by1;
                        if (Test.bFld) {
                            d2 -= i27;
                            i += (int)-25164L;
                            i ^= -62389;
                        } else if (Test.bFld) {
                            Test.fFld += (((f2 * i22) + i23) - i23);
                            i28 += (int)f2;
                            iArr2 = iArr2;
                        }
                        break;
                    case 3:
                    }
                }
                iArr2[i25] = (int)Test.instanceCount;
                if (Test.bFld) break;
                i23 += (i25 + Test.lFld);
            }
            Test.lFld += (-7 + (i22 * i22));
            Test.lArrFld[i22 + 1][i22 - 1] = i26;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
