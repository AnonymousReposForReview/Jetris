package tests.javafuzzer459;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:06:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3880414689L;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -221);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static int iMeth(long l, float f, long l1) {

        int i5=-66, i6=-52789;

        for (i5 = 10; i5 < 321; i5++) {
            i6 -= (int)(Test.instanceCount++);
        }
        long meth_res = l + Float.floatToIntBits(f) + l1 + i5 + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(long l3) {

        int i12=-41866, i13=53, i14=7, i15=-154, i16=-45824, i17=-13, i18=129, iArr1[][]=new int[N][N];
        float f1=83.91F;
        short s=-30954;
        boolean b=false;

        FuzzerUtils.init(iArr1, 5);

        i12 = 1;
        while (++i12 < 205) {
            iArr1[i12][i12] >>= i12;
        }
        iArr1[(i12 >>> 1) % N][(43 >>> 1) % N] += (int)f1;
        if (b) {
            for (i13 = 9; i13 < 187; i13++) {
                s >>= (short)i14;
                i14 = 85;
                i14 += (i13 | i12);
                for (i15 = 9; i15 > 1; --i15) {
                    for (i17 = 1; i17 < 2; i17++) {
                        l3 -= (long)f1;
                        f1 += (i17 - Test.instanceCount);
                        i16 += i17;
                        i14 += i15;
                        i18 = i17;
                    }
                }
            }
        } else if (b) {
            Test.instanceCount = i14;
        } else {
            i16 = i12;
        }
        long meth_res = l3 + i12 + Float.floatToIntBits(f1) + i13 + i14 + s + i15 + i16 + i17 + i18 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth(int i7, long l2) {

        int i8=-24908, i9=-9, i10=-12, i11=2, i19=-54, i20=-12;
        short s1=16440;
        byte by=17;
        float f2=0.282F;
        double d=-127.58184;

        for (i8 = 4; i8 < 133; i8++) {
            for (i10 = i8; i10 < 12; i10++) {
                i9 -= (i7 -= i7);
                l2 = (sMeth(l2) + s1);
                l2 += (i10 - i7);
                i11 = by;
                i7 += (int)Test.instanceCount;
                if (i7 != 0) {
                }
                f2 += i9;
            }
            l2 *= (long)f2;
            for (i19 = 1; i19 < 12; ++i19) {
                switch (((i8 % 2) * 5) + 92) {
                case 100:
                    Test.iArrFld[i19] /= (int)(Test.instanceCount | 1);
                    f2 += i8;
                    l2 += (1 + (i19 * i19));
                case 95:
                    d += i10;
                default:
                    i20 += i9;
                }
            }
        }
        long meth_res = i7 + l2 + i8 + i9 + i10 + i11 + s1 + by + Float.floatToIntBits(f2) + i19 + i20 +
            Double.doubleToLongBits(d);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i2, int i3, int i4) {

        float f3=-2.428F, fArr[]=new float[N];
        int i21=-19701, i22=-22348, i23=-45, i24=4248, i25=227, i26=11, i27=61088, i28=-12513;

        FuzzerUtils.init(fArr, -2.276F);

        Test.instanceCount &= iMeth(Math.max(lMeth(i4, Test.instanceCount), Test.instanceCount), f3, 164L);
        for (i21 = 12; 254 > i21; ++i21) {
            f3 -= f3;
        }
        i2 = i2;
        for (i23 = 12; i23 < 329; ++i23) {
            for (i25 = 1; 5 > i25; i25++) {
                i3 <<= (int)-109L;
                i3 = (int)-3601018549801697003L;
                i2 += (-10159 + (i25 * i25));
                i22 += (i25 * i25);
            }
            fArr[i23 - 1] -= i4;
            for (i27 = 1; i27 < 5; ++i27) {
                i28 = i28;
                i4 -= (int)2.74F;
                i4 = 10;
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f3) + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-107, i29=-110, i30=16465, i31=2, i32=-4, i33=21296, i34=9, iArr[]=new int[N];
        double d1=0.55103, d2=0.54537;
        float f4=-1.793F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 243);
        FuzzerUtils.init(sArr, (short)-9621);

        for (i = 2; i < 123; i++) {
            iArr[i - 1] = (int)(((Test.instanceCount++) * -2) + dMeth(i1, i1, -11065));
            d1 = 1;
            while (++d1 < 207) {
                d2 *= f4;
                sArr[(int)(d1)] *= (short)i1;
                for (i29 = 1; i29 < 1; ++i29) {
                    i30 = i31;
                    iArr[(int)(d1)] = i1;
                    Test.bFld = Test.bFld;
                    Test.iArrFld[i - 1] *= i32;
                    i31 += (int)Test.instanceCount;
                    i32 = (int)d2;
                    i32 = i30;
                    d2 = i32;
                    Test.bFld = Test.bFld;
                }
                sArr[i] += (short)d1;
                Test.instanceCount += (long)(((d1 * i) + f4) - i29);
                try {
                    i1 = (1958330772 % i1);
                    i1 = (i31 % i32);
                    Test.iArrFld[(int)(d1)] = (37673 / i29);
                } catch (ArithmeticException a_e) {}
                i1 >>>= i31;
                switch ((int)((d1 % 4) + 102)) {
                case 102:
                    i32 -= i29;
                    iArr[(int)(d1 + 1)] = (int)Test.instanceCount;
                    break;
                case 103:
                    i30 >>= i1;
                    i31 += (int)d1;
                    i32 += i31;
                case 104:
                    i1 = (int)Test.instanceCount;
                    i32 >>= i32;
                    for (i33 = 1; i33 < 1; i33 += 3) {
                        i32 *= i31;
                        Test.instanceCount *= Test.instanceCount;
                    }
                    break;
                case 105:
                default:
                    Test.instanceCount &= Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
