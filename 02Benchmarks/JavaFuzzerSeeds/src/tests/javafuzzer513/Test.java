package tests.javafuzzer513;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:57:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2517126376L;
    public int iFld=-61475;
    public static volatile double dFld=-95.4904;
    public static volatile float fFld=-2.567F;
    public float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];
    public static volatile double dArrFld[][]=new double[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.73820);
        FuzzerUtils.init(Test.iArrFld1, -40742);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5) {

        int i6=-142, i7=11, i8=5280, i9=-6, i10=-53073, iArr[][]=new int[N][N];
        byte by=76;
        boolean b=true;
        long l=-4133232688L;
        double d1=126.57082;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(fArr, -1.395F);

        for (i6 = 6; i6 < 353; i6++) {
            i5 = i5;
            by += (byte)(((i6 * i6) + Test.instanceCount) - Test.instanceCount);
            i5 -= -178;
        }
        b = b;
        iArr = iArr;
        i4 = (int)Test.instanceCount;
        switch (((i5 >>> 1) % 2) + 92) {
        case 92:
            i5 = i5;
            for (i8 = 1; i8 < 304; i8++) {
                l = by;
                for (d1 = 1; d1 < 5; d1++) {
                    iArr[i8 + 1][i8 - 1] += (int)l;
                    iArr[i8 + 1][i8 - 1] = i8;
                    fArr[(int)(d1 - 1)] -= i8;
                }
            }
            break;
        case 93:
            iArr[(i6 >>> 1) % N][(i7 >>> 1) % N] = i4;
            break;
        default:
            Test.instanceCount += -51;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + by + (b ? 1 : 0) + i8 + i9 + l + Double.doubleToLongBits(d1) + i10 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i11=54324, i12=-11, i13=8, i14=-5, i15=-105, i16=14, i17=6, i18=-3, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 62830);

        vMeth1(i11, -11);
        for (i12 = 12; i12 < 335; i12++) {
            i13 += i11;
            for (i14 = 5; i14 > i12; i14--) {
                Test.instanceCount = Test.instanceCount;
                Test.dArrFld[i12][i12] -= i11;
                Test.fFld += i14;
                i16 = 1;
                do {
                    iArr1[i16] -= i15;
                    if (i11 != 0) {
                        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                } while (++i16 < 1);
                Test.dFld = i12;
                Test.instanceCount = i15;
                for (i17 = 1; i17 < 1; ++i17) {
                    i18 = i14;
                    try {
                        i11 = (-175 % iArr1[i17]);
                        iArr1[i14] = (1479565781 % i13);
                        i11 = (iArr1[i17 - 1] / i17);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i, int i1) {

        int i2=35084, i3=-190, i19=10, i20=0, i21=-58043;
        double d=37.66866;
        float f1=35.80F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)33);

        for (i2 = 20; 360 > i2; ++i2) {
            d = 1;
            while ((d += 3) < 5) {
                vMeth();
            }
            i1 = (int)Test.instanceCount;
            i1 += (i2 ^ Test.instanceCount);
        }
        i19 = 1;
        while (++i19 < 321) {
            Test.instanceCount = i1;
        }
        i20 = 1;
        while (++i20 < 313) {
            Test.instanceCount += i20;
        }
        i3 *= i3;
        for (f1 = 13; f1 < 221; ++f1) {
            i3 *= i21;
            try {
                i3 = (63663 % i2);
                i1 = (i21 % i21);
                Test.iArrFld1[(int)(f1)] = (-190 / i);
            } catch (ArithmeticException a_e) {}
            byArr[(int)(f1 - 1)] = (byte)Test.dFld;
            i21 = i20;
        }
        long meth_res = i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i19 + i20 + Float.floatToIntBits(f1) + i21 +
            FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i22=152, i23=2, i24=-9, i25=-11, i26=237, i27=-38745, i28=-17358, i29=47, i30=-181;
        boolean b1=false;
        short s=-3489;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4052849522339763431L);

        fArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N] += (float)Test.dFld;
        iArrFld[(iFld >>> 1) % N] += (int)Test.fFld;
        iFld = (int)(fMeth(63187, iFld) + iFld);
        Test.iArrFld1[(iFld >>> 1) % N] >>= -10;
        Test.iArrFld1[(iFld >>> 1) % N] = iFld;
        iFld = iFld;
        i22 = 1;
        while ((i22 += 3) < 281) {
            iFld += (-12245 + (i22 * i22));
            Test.iArrFld1[i22] = (int)Test.fFld;
        }
        i23 = 1;
        do {
            for (i24 = 4; 79 > i24; i24++) {
                Test.fFld += iFld;
                iFld += (((i24 * i24) + i25) - i23);
                b1 = b1;
                Test.fFld *= 15387L;
                Test.instanceCount = iFld;
            }
            for (i26 = 3; i26 < 79; ++i26) {
                i28 = 2;
                while (--i28 > 0) {
                    if (b1) continue;
                    lArr[i23] <<= s;
                    iArrFld[i26] -= i27;
                }
                Test.dFld += Test.instanceCount;
                i25 += i26;
                i27 = (int)Test.instanceCount;
                iFld += i26;
                if (b1) break;
            }
            for (i29 = i23; i29 < 79; ++i29) {
                Test.iArrFld1[i29] *= 82;
                iArrFld[i23 + 1] -= i26;
                iArrFld[i23 + 1] = (int)Test.fFld;
            }
        } while (++i23 < 320);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
