package tests.javafuzzer1949;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:24:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2028526941L;
    public static int iFld=-46347;
    public static double dFld=1.4455;
    public static byte byFld=81;
    public static volatile float fFld=2.426F;
    public volatile double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f, int i7, int i8) {

        long l1=7L;
        int i9=-9, i10=-37, i11=-199, iArr[]=new int[N];
        short s=32420;
        boolean b=false;
        double d=108.114893, d1=-80.19819;

        FuzzerUtils.init(iArr, 10);

        i7 += (int)18037L;
        l1 = 1;
        while (++l1 < 283) {
            for (i9 = 1; i9 < 6; i9++) {
                i10 += (i9 | l1);
                i8 += (i9 ^ i8);
                i10 = s;
                s += (short)i9;
                switch (((i9 % 2) * 5) + 91) {
                case 92:
                    i11 = 1;
                    while (++i11 < 2) {
                        b = b;
                        i10 >>>= i11;
                        iArr[(int)(l1)] -= (int)d;
                        i10 = i8;
                    }
                    iArr[(int)(l1 + 1)] = (int)l1;
                    break;
                case 100:
                }
                d1 /= (i7 | 1);
            }
        }
        long meth_res = Float.floatToIntBits(f) + i7 + i8 + l1 + i9 + i10 + s + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        float f1=-89.742F;
        int i12=-32873, i13=137, iArr1[]=new int[N];
        short s1=-28218;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.71423);
        FuzzerUtils.init(iArr1, -12);

        dArr[(-2 >>> 1) % N] *= iMeth(f1, Test.iFld, Test.iFld);
        Test.iFld *= (int)8L;
        i12 = 1;
        do {
            i13 = 1;
            do {
                try {
                    Test.iFld = (i13 % 38002);
                    iArr1[i13 - 1] = (i13 % i12);
                    Test.iFld = (57948 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.iFld *= s1;
                Test.iFld -= (int)Test.instanceCount;
                f1 += i13;
                Test.iFld /= (int)((long)(f1) | 1);
                Test.iFld -= i13;
                Test.iFld += i13;
                Test.iFld ^= (int)32L;
                Test.iFld = (int)Test.instanceCount;
            } while (++i13 < 5);
            Test.iFld = Test.iFld;
            iArr1[i12] += (int)Test.dFld;
        } while (++i12 < 317);
        vMeth1_check_sum += Float.floatToIntBits(f1) + i12 + i13 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, long l) {

        int i3=12, i4=-4, i5=-64166, i6=-2, i14=-103, i15=-24614, iArr2[]=new int[N];
        byte by=-127;
        float f2=-1.514F;

        FuzzerUtils.init(iArr2, -16926);

        for (i3 = 6; i3 < 175; i3++) {
            by *= (byte)(i4++);
            for (i5 = i3; i5 < 9; i5++) {
                vMeth1();
                i4 -= (int)-8984244598575489528L;
                f2 -= i3;
                l = i5;
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.instanceCount += i6;
                    i15 = i4;
                    i15 += i4;
                    l += i2;
                    iArr2[i3 + 1] = i3;
                    i15 /= (int)(Test.iFld | 1);
                }
                try {
                    i4 = (i4 / 662701434);
                    iArr2[i3] = (i14 / -154);
                    i6 = (-129 / i2);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + by + i5 + i6 + Float.floatToIntBits(f2) + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=42, i1=30961, i16=-106, i17=5, i18=48425, i19=-28831, i20=-88, i21=-29731, i22=-13816, i23=3281;
        double d2=-1.103833;
        boolean b1=false;

        for (i = 6; i < 129; ++i) {
            vMeth(Test.iFld, Test.instanceCount);
            Test.instanceCount -= -13;
        }
        dArrFld[(i1 >>> 1) % N] += i1;
        i1 -= i1;
        Test.iFld >>= Test.iFld;
        Test.iFld >>= i1;
        for (d2 = 20; d2 < 372; ++d2) {
            for (i17 = 4; 72 > i17; ++i17) {
                i18 -= (int)Test.instanceCount;
            }
            for (i19 = 1; i19 < 72; ++i19) {
                switch ((int)(((d2 % 1) * 5) + 120)) {
                case 124:
                    for (i21 = (int)(d2); i21 < 2; ++i21) {
                        Test.byFld -= (byte)193L;
                        i16 >>= i19;
                        i16 -= (int)Test.instanceCount;
                    }
                    i1 -= i;
                    Test.instanceCount <<= i1;
                    b1 = b1;
                    break;
                }
                iArrFld[(int)(d2)] += (int)Test.instanceCount;
                i20 *= (int)Test.fFld;
            }
            i20 += i22;
            if (b1) break;
        }
        Test.iFld >>= i22;
        i16 *= 11;
        i18 = i19;
        Test.fFld -= i21;
        i23 = 1;
        while (++i23 < 124) {
            i18 >>>= (int)Test.instanceCount;
            i16 += (i23 * Test.instanceCount);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
