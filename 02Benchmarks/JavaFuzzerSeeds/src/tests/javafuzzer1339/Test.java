package tests.javafuzzer1339;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:30:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3341965970L;
    public static double dFld=-2.71223;
    public static byte byFld=-28;
    public static volatile boolean bFld=true;
    public int iFld=7;
    public short sFld=-19090;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i8, int i9) {

        int i10=181, i11=-27633, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -22);

        for (i10 = 8; i10 < 160; i10++) {
            iArr1[i10 - 1] -= i8;
        }
        long meth_res = i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=2, i5=197, i6=0, i7=-58609, i12=87, iArr2[]=new int[N];
        long l=7916L, lArr[][]=new long[N][N];
        float f=2.832F, fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, 28.45F);
        FuzzerUtils.init(iArr2, -62095);
        FuzzerUtils.init(lArr, -7829L);

        Test.instanceCount = Math.abs(--i2);
        for (i4 = 6; 337 > i4; i4++) {
            for (i6 = 1; i6 < 5; i6++) {
                Test.instanceCount -= (iMeth1(i5, i6) >>> i5);
                for (l = i6; l < 2; l++) {
                    fArr1 = fArr1;
                    iArr2[i6 - 1] -= i4;
                    Test.instanceCount = l;
                    Test.dFld += f;
                    i12 = i4;
                    iArr2[i6 + 1] = 162;
                    i7 -= 64016;
                    iArr2[i4 - 1] += i3;
                    lArr[i4][i6] = 168;
                    i12 *= i6;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i7 + l + i12 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i13=-42209, i14=0, i15=8, i16=0, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -244);
        FuzzerUtils.init(fArr, 0.365F);

        for (int i : iArr) {
            fArr[(i >>> 1) % N] += ((i + iMeth(i, i, i)) + Test.byFld);
            i += (int)203L;
            for (i13 = 1; i13 < 4; ++i13) {
                i *= -27696;
                i += (3 + (i13 * i13));
                for (i15 = 1; i15 < 2; ++i15) {
                    if (true) continue;
                    switch ((i13 % 2) + 117) {
                    case 117:
                        i16 *= (int)Test.dFld;
                        i14 += (i15 * Test.instanceCount);
                        i <<= 218;
                        if (Test.bFld) {
                            i14 += i14;
                            i16 -= -14;
                        } else {
                            Test.dFld *= i13;
                        }
                        break;
                    case 118:
                        i16 |= i14;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i17=7, i18=4, i19=208, i20=187, i21=-152, i22=-2877, i23=13, iArr3[]=new int[N];
        float f1=-1.860F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7616396650501274133L);
        FuzzerUtils.init(iArr3, 5584);

        vMeth();
        i17 = 1;
        do {
            iFld += (int)-56L;
            for (i18 = 3; 102 > i18; i18++) {
                short s=-27845;
                i19 -= (int)87L;
                i20 *= 201;
                Test.bArrFld[i18] = Test.bFld;
                i20 = s;
                Test.instanceCount += (((i18 * iFld) + i17) - i20);
                f1 += f1;
                i19 = i19;
                Test.dFld *= -12;
                f1 += i19;
                Test.instanceCount = i17;
            }
            switch ((i17 % 9) + 115) {
            case 115:
                f1 -= Test.instanceCount;
                break;
            case 116:
                lArr1[i17 - 1] ^= i19;
                for (i21 = 3; i21 < 102; ++i21) {
                    i23 = 1;
                    do {
                        i19 = i20;
                        iArr3[i23] += (int)Test.instanceCount;
                        lArr1[i21 + 1] = -3;
                        i19 = 204;
                        Test.instanceCount += i23;
                        Test.byFld = (byte)iFld;
                        Test.dFld -= i19;
                    } while (++i23 < 2);
                    iFld <<= 23553;
                    iFld = 5801;
                    iFld += i17;
                    iFld = i20;
                }
                break;
            case 117:
                if (true) break;
                break;
            case 118:
                iArr3 = FuzzerUtils.int1array(N, (int)-51191);
                break;
            case 119:
                Test.instanceCount += (long)f1;
                break;
            case 120:
                i20 += i17;
            case 121:
                iFld *= i18;
            case 122:
            case 123:
                i19 = (int)589976377L;
            default:
                lArr1[i17] -= sFld;
            }
        } while (++i17 < 246);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
