package tests.javafuzzer95;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:16:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=61870L;
    public float fFld=-37.789F;
    public static byte byFld=-13;
    public static float fFld1=-16.782F;
    public static int iFld=-56839;
    public static volatile short sFld=25992;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10, float f) {

        int i11=240, i12=-2, i13=164, i14=13, i15=220, i16=60684;
        boolean b=false;

        i11 = 1;
        do {
            for (i12 = i11; 13 > i12; ++i12) {
                switch (((i11 % 7) * 5) + 60) {
                case 75:
                    Test.instanceCount -= i14;
                    f = i10;
                    Test.instanceCount = -8634;
                    Test.iArrFld[i12 - 1] -= i12;
                    break;
                case 95:
                    Test.sFld += (short)i12;
                    break;
                case 67:
                    Test.iFld = 24036;
                    for (i15 = 1; i15 < 1; ++i15) {
                        switch (((i15 % 2) * 5) + 48) {
                        case 51:
                        case 50:
                            i14 += (((i15 * i13) + i10) - i12);
                            Test.iArrFld[i11] = i10;
                            break;
                        default:
                            if (Test.iFld != 0) {
                            }
                            f = i12;
                        }
                    }
                    break;
                case 76:
                    if (b) break;
                case 70:
                    i16 += (-4 + (i12 * i12));
                    break;
                case 61:
                    i14 -= (int)Test.fFld1;
                    break;
                case 78:
                    b = true;
                    break;
                }
            }
        } while ((i11 += 2) < 250);
        long meth_res = i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        int i17=-178, i18=-6, i19=151;
        double d1=1.124167, dArr[][]=new double[N][N];
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -6841286665996350878L);
        FuzzerUtils.init(dArr, -1.122780);

        Test.iFld >>= (int)(Test.iFld * ((++Test.byFld) + (58343 - lMeth(-236, -2.943F))));
        lArr1[(Test.iFld >>> 1) % N] /= ((long)(Test.fFld1) | 1);
        i17 = 1;
        while (++i17 < 234) {
            Test.iFld += (i17 - i17);
            if (b1) {
                if (b1) {
                    Test.fFld1 += (i17 * i17);
                    for (i18 = 7; i18 > 1; i18--) {
                        d1 *= -2643880996126184859L;
                        switch (((-2806 >>> 1) % 5) + 10) {
                        case 10:
                            i19 += (i18 * Test.iFld);
                            Test.byFld >>= (byte)i18;
                            Test.iFld *= i17;
                            dArr[i17 - 1][i17 - 1] = Test.instanceCount;
                            break;
                        case 11:
                            i19 = Test.sFld;
                            break;
                        case 12:
                            i19 -= 6;
                            break;
                        case 13:
                            Test.iFld -= i17;
                        case 14:
                            i19 += (((i18 * Test.instanceCount) + i17) - Test.instanceCount);
                        }
                    }
                }
            }
        }
        long meth_res = i17 + i18 + i19 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i5=57, i6=-1, i7=-1, i8=-139, i9=-98, i20=-23475, i21=11403;
        short s=-17106;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 7044252052590122937L);

        for (i5 = 349; i5 > 10; --i5) {
            Test.byFld += (byte)(((i5 * Test.fFld1) + i6) - i6);
            for (i7 = 1; i7 < 5; ++i7) {
                i9 = 1;
                do {
                    s %= (short)(iMeth1() | 1);
                    i8 += s;
                    lArr2[i5 - 1] ^= i8;
                    i8 -= i8;
                } while (++i9 < 2);
            }
            i8 += (((i5 * Test.sFld) + i9) - i8);
            l += (((i5 * Test.instanceCount) + Test.instanceCount) - i8);
            lArr2[i5] += i9;
            for (i20 = 1; i20 < 5; i20++) {
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-63812);
                Test.sFld = (short)-43786;
                i6 = (int)107L;
            }
        }
        long meth_res = l + i5 + i6 + i7 + i8 + i9 + s + i20 + i21 + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13750, i1=-7, i2=254, i3=0, i4=10, i22=-12, i23=-20, iArr[]=new int[N];
        double d=-2.109477;
        byte by=-95;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8103L);
        FuzzerUtils.init(iArr, -9);

        for (i = 267; 3 < i; i--) {
            i1 += (int)(((-18587 + (--Test.instanceCount)) * (fFld + i)) - (Test.instanceCount = (i1 * -9L)));
            i2 = 1;
            while (++i2 < 95) {
                lArr[i - 1] = (long)(++fFld);
                d *= ((++i1) - i);
                for (i3 = 1; i3 < 1; i3++) {
                    i4 += i3;
                    i1 += (i3 * i3);
                    i1 += (i3 * i3);
                    by <<= by;
                    iArr = (iArr = (iArr = (iArr = iArr)));
                    i4 = (i4 - (iMeth(Test.instanceCount) + Test.byFld));
                    Test.iArrFld[i3 - 1] += -7;
                    Test.instanceCount += 11L;
                }
                Test.iFld += (int)d;
                i4 += (-33373 + (i2 * i2));
                i4 = (int)Test.instanceCount;
                switch ((((i >>> 1) % 10) * 5) + 60) {
                case 107:
                    for (i22 = 1; i22 < 1; ++i22) {
                        Test.instanceCount >>= 16;
                        try {
                            i23 = (i % i2);
                            Test.iArrFld[i2 + 1] = (i % i4);
                            Test.iFld = (i3 / -299702720);
                        } catch (ArithmeticException a_e) {}
                        d *= -223;
                        i23 = i4;
                        switch (((i22 % 3) * 5) + 108) {
                        case 120:
                            i4 = i22;
                            break;
                        case 113:
                            i23 *= -4399;
                            Test.iArrFld[i2] += i4;
                            break;
                        case 121:
                            Test.instanceCount = -16858;
                            b2 = b2;
                            break;
                        default:
                            Test.iFld += i4;
                        }
                    }
                case 81:
                    lArr = lArr;
                case 92:
                    d -= i2;
                    break;
                case 85:
                    if (true) continue;
                case 73:
                    i1 = i4;
                    break;
                case 66:
                    Test.instanceCount -= i1;
                case 77:
                    Test.iArrFld = iArr;
                    break;
                case 98:
                case 75:
                    if (b2) continue;
                    break;
                case 83:
                    Test.iFld += i2;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
