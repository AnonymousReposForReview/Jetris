package tests.javafuzzer876;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:07:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-60L;
    public static byte byFld=-25;
    public static short sFld=22942;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.114633);
        FuzzerUtils.init(Test.iArrFld1, 13);
        FuzzerUtils.init(Test.lArrFld, -3660564229L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, long l2) {

        short s=-12412;
        float f=2.487F;

        s += (short)f;
        long meth_res = (b ? 1 : 0) + l2 + s + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i7, int i8, long l1) {

        int i9=-3, i10=239, i11=2, i12=-8;
        boolean b1=true;
        double d1=0.118696;
        float f1=-67.595F;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-28566);

        Test.iArrFld1[(i8 >>> 1) % N] &= Test.byFld;
        for (i9 = 3; i9 < 196; i9++) {
            i7 += (((i9 * i7) + i9) - i10);
            l1 = (i10 ^ (Test.lArrFld[i9]++));
            iMeth(b1, -3L);
            for (i11 = 1; i11 < 8; i11++) {
                i10 += i8;
                d1 = i11;
                l1 = (long)d1;
                f1 = 2.444F;
                i12 -= (int)l1;
                Test.iArrFld1[i9 + 1] = -60292;
                sArr[i9 - 1][i9 - 1] &= (short)12868;
            }
            Test.instanceCount -= (long)f1;
            i12 = i8;
        }
        vMeth1_check_sum += i7 + i8 + l1 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        int i5=-19, i6=-236, i13=-6, i14=-38570;
        double d2=70.1491;
        float f2=86.402F;

        for (i5 = 10; i5 < 330; ++i5) {
            vMeth1(i6, i5, Test.instanceCount);
            i6 *= i5;
            if (false) break;
            if (Test.bFld) {
                switch ((i5 % 7) + 24) {
                case 24:
                    switch (((i5 >>> 1) % 10) + 62) {
                    case 62:
                        i6 = 65476;
                    case 63:
                        for (i13 = 1; i13 < 5; i13++) {
                            d2 = 1;
                            do {
                                f2 += Test.instanceCount;
                                try {
                                    Test.iArrFld1[i5] = (5292 / Test.iArrFld1[i5 - 1]);
                                    Test.iArrFld1[i5 + 1] = (Test.iArrFld1[i13] / -2002025491);
                                    i14 = (i13 / Test.iArrFld1[(int)(d2 + 1)]);
                                } catch (ArithmeticException a_e) {}
                                Test.instanceCount <<= i13;
                                Test.iArrFld1[(int)(d2 - 1)] *= (int)Test.instanceCount;
                                try {
                                    i14 = (1628713493 / i5);
                                    i6 = (-2022755278 / i5);
                                    i6 = (Test.iArrFld1[(int)(d2)] % -43951);
                                } catch (ArithmeticException a_e) {}
                            } while (++d2 < 2);
                        }
                        break;
                    case 64:
                    case 65:
                        i14 <<= i14;
                        break;
                    case 66:
                    case 67:
                        i6 >>= i5;
                        break;
                    case 68:
                        i14 += i13;
                        break;
                    case 69:
                        i6 = i5;
                    case 70:
                        Test.sFld = (short)19826;
                    case 71:
                        if (i6 != 0) {
                            vMeth_check_sum += i5 + i6 + i13 + i14 + Double.doubleToLongBits(d2) +
                                Float.floatToIntBits(f2);
                            return;
                        }
                    }
                case 25:
                case 26:
                    Test.byFld -= (byte)i13;
                case 27:
                case 28:
                    Test.instanceCount = (long)f2;
                case 29:
                    Test.byFld += (byte)82;
                    break;
                case 30:
                    i6 -= i14;
                default:
                    i6 += (((i5 * i13) + i5) - Test.byFld);
                }
            } else if (false) {
                f2 += (i5 * i5);
            } else {
                Test.byFld |= (byte)Test.instanceCount;
            }
        }
        vMeth_check_sum += i5 + i6 + i13 + i14 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i=-38, i1=119, i2=144, i3=-145, i4=12, i15=-9, i16=38, i17=-221, i18=0;
        double d=0.2873, d3=24.74807;
        long l=4800409416251562398L;
        float f3=1.49F;
        boolean bArr[]=new boolean[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)-100);

        Test.instanceCount += i;
        i = iArrFld[(i >>> 1) % N];
        Test.instanceCount *= (i * ((i--) * (Test.byFld - 9490)));
        Test.dArrFld[(i >>> 1) % N] += ((i - 237L) + i);
        fArrFld[(-22798 >>> 1) % N] += ((Test.instanceCount++) - ((i = i) * (--i)));
        i *= i;
        for (d = 8; d < 136; d++) {
            bArr = (bArr = (bArr = (bArr = bArr)));
            for (l = 6; l < 196; ++l) {
                i += (int)(l + i1);
                Test.instanceCount += (l * l);
            }
            Test.instanceCount += 0;
            if (Test.bFld) {
                for (i3 = (int)(d); i3 < 196; i3++) {
                    Test.instanceCount += (i3 - i);
                    vMeth();
                    byArr[i3 - 1] = (byte)i2;
                    i1 = (int)d;
                    d3 -= 0;
                    for (i15 = 1; i15 < 1; ++i15) {
                        fArrFld[i3 - 1] *= i4;
                        f3 -= i3;
                        i2 = i1;
                        i += (int)-1.252F;
                        byArr[(int)(d)] -= (byte)i16;
                        Test.instanceCount >>= i1;
                    }
                    Test.instanceCount >>= i2;
                    for (i17 = 1; i17 > 1; i17--) {
                        f3 /= (i15 | 1);
                    }
                    if (true) continue;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
