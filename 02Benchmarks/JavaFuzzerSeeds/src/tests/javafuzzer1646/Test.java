package tests.javafuzzer1646;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=87L;
    public double dFld=0.97415;
    public static boolean bFld=false;
    public static short sFld=-1638;
    public static double dFld1=-121.115253;
    public double dFld2=12.38522;
    public float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 190);
        FuzzerUtils.init(Test.lArrFld, 4L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        int i8=-4, i9=-221;
        long l1=61L, l2=4090413929L;

        i7 &= i7;
        i8 = 389;
        do {
            l1 = 1;
            while (++l1 < 4) {
                i7 += (int)(((l1 * i8) + i7) - i8);
                if (Test.bFld) continue;
                i7 = -223;
                if (false) continue;
                Test.sFld += (short)i7;
                i7 += (int)(l1 * l1);
            }
            l2 = 1;
            do {
                i9 = 1;
                do {
                    Test.dFld1 -= i7;
                    Test.dFld1 = i8;
                    Test.instanceCount += (((i9 * i8) + l1) - i9);
                    Test.sFld |= (short)1;
                } while (++i9 < 1);
            } while (++l2 < 4);
        } while (--i8 > 0);
        vMeth1_check_sum += i7 + i8 + l1 + l2 + i9;
    }

    public static int iMeth(long l, int i5, int i6) {

        int i10=9, i11=19699, i12=42879, i13=-7, i14=-215, i15=10, i16=7241, i17=-49019, i18=2, iArr[]=new int[N];
        float f1=-1.701F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -1.1008F);
        FuzzerUtils.init(lArr, 212L);
        FuzzerUtils.init(iArr, 186);

        vMeth1(i6);
        for (i10 = 4; 287 > i10; ++i10) {
            for (i12 = 1; i12 < 6; i12++) {
                i6 = i11;
                switch ((((i12 >>> 1) % 5) * 5) + 59) {
                case 84:
                    fArr = FuzzerUtils.float1array(N, (float)-2.848F);
                    switch ((i10 % 6) + 12) {
                    case 12:
                        i11 -= i12;
                        for (i14 = i12; 2 > i14; ++i14) {
                            i15 += i14;
                            i13 ^= 5;
                        }
                        break;
                    case 13:
                    case 14:
                        for (i16 = 1; i16 < 2; i16++) {
                            f1 *= i5;
                            Test.instanceCount -= i14;
                            lArr = lArr;
                        }
                        break;
                    case 15:
                        i6 = (int)l;
                        break;
                    case 16:
                        i15 += (i12 + i18);
                        break;
                    case 17:
                        try {
                            i11 = (74 % iArr[i12 + 1]);
                            i18 = (i12 / 54659);
                            i17 = (33 / i13);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                    break;
                case 78:
                    i15 = i16;
                    break;
                case 79:
                    Test.sFld *= (short)i12;
                case 65:
                    f1 = i11;
                case 68:
                    i5 = (int)Test.instanceCount;
                    break;
                default:
                    i5 = 0;
                }
            }
        }
        long meth_res = l + i5 + i6 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f1) + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, float f, int i2) {

        double d=2.19837;
        int i3=5, i4=-7, i19=-10, i20=-80, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 144);

        for (d = 6; d < 309; ++d) {
            i4 = 1;
            while (++i4 < 5) {
                i3 <<= (i2 % (iMeth(Test.instanceCount, i4, i3) | 1));
                Test.instanceCount |= 10;
                for (i19 = i4; i19 < 1; i19++) {
                    f *= Test.instanceCount;
                    f /= ((long)(d) | 1);
                    switch ((int)(((d % 8) * 5) + 53)) {
                    case 79:
                        Test.instanceCount += i19;
                        i20 += (i19 * i19);
                        Test.instanceCount += (((i19 * i19) + i19) - i3);
                        break;
                    case 61:
                        if (b) continue;
                        iArr1[i4 + 1] = i2;
                        i20 -= 6416;
                    case 68:
                        i3 -= i19;
                        break;
                    case 91:
                        Test.instanceCount %= (i2 | 1);
                    case 93:
                        f += -5;
                        break;
                    case 62:
                        i3 *= (int)Test.instanceCount;
                    case 92:
                        i3 = i4;
                        break;
                    case 87:
                        f = -1;
                        break;
                    default:
                        i2 += (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) + i3 + i4 + i19 +
            i20 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-133, i1=-65, i21=7, i22=-10, i23=11, i24=34322, i25=-62, i26=-14;
        byte by=82;

        for (i = 11; 250 > i; ++i) {
            float f2=97.719F;
            switch (((i % 8) * 5) + 105) {
            case 141:
                dFld -= 37081L;
                vMeth(Test.bFld, f2, i);
                break;
            case 111:
                fArrFld[i] = 28004;
            case 127:
                Test.instanceCount *= (long)-104.36240;
                Test.iArrFld[i] = i1;
                i1 = by;
            case 131:
                Test.sFld = (short)i;
                Test.iArrFld[i + 1] = (int)Test.instanceCount;
                i1 *= (int)dFld;
            case 113:
                Test.iArrFld[i + 1] <<= i21;
                break;
            case 122:
                try {
                    Test.iArrFld[i - 1] = (45 % i21);
                    i21 = (Test.iArrFld[i - 1] % i1);
                    i22 = (Test.iArrFld[i - 1] % i21);
                } catch (ArithmeticException a_e) {}
                f2 += i;
                for (i23 = 105; i23 > i; --i23) {
                    Test.dFld1 = i23;
                    for (i25 = 1; i25 < 1; i25++) {
                        switch ((i % 7) + 69) {
                        case 69:
                            by -= (byte)i;
                            break;
                        case 70:
                            Test.lArrFld[i + 1] += i24;
                            i24 >>= i23;
                            if (false) break;
                            break;
                        case 71:
                            Test.iArrFld[i23 + 1] <<= i22;
                            break;
                        case 72:
                            i22 += i;
                            if (Test.bFld) break;
                            switch ((i25 % 10) + 108) {
                            case 108:
                                Test.instanceCount = i24;
                                break;
                            case 109:
                                i24 = (int)Test.instanceCount;
                                break;
                            case 110:
                                i21 = i25;
                                dFld2 += 3447357225L;
                                break;
                            case 111:
                                i24 = (int)Test.instanceCount;
                                break;
                            case 112:
                                i1 -= i22;
                                break;
                            case 113:
                                i24 += (i25 - Test.instanceCount);
                                break;
                            case 114:
                                dFld += Test.sFld;
                            case 115:
                                dFld2 += dFld2;
                                break;
                            case 116:
                                Test.iArrFld[i23 - 1] = 1;
                                break;
                            case 117:
                                i26 = i26;
                                break;
                            default:
                                i24 = (int)Test.dFld1;
                            }
                            break;
                        case 73:
                        case 74:
                            Test.instanceCount &= Test.instanceCount;
                        case 75:
                            i1 = i25;
                            break;
                        }
                    }
                }
            case 129:
                Test.bFld = Test.bFld;
            case 116:
                if (true) continue;
            default:
                Test.instanceCount += (((i * i22) + i) - i1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
