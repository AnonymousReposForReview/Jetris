package tests.javafuzzer1489;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static short sFld=-7538;
    public static volatile int iFld=203;
    public static float fFld=-2.671F;
    public double dFld=115.67512;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.sArrFld, (short)-7690);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(byte by, long l) {

        int i4=-60282, i5=8, i6=5, i7=103, i8=-64584, i9=-5, i10=55171;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i4 = 1;
        do {
            for (i5 = 1; i5 < 6; ++i5) {
                double d=-87.14235;
                i6 += (int)(5L + (i5 * i5));
                if (i5 != 0) {
                }
                for (i7 = 1; i7 < 2; i7++) {
                    Test.sFld += (short)-48616;
                    if (true) {
                        Test.iArrFld = Test.iArrFld;
                        l = i4;
                    }
                }
                switch ((i4 % 5) + 85) {
                case 85:
                    if (true) continue;
                    break;
                case 86:
                    i8 = (int)-182L;
                    for (i9 = 1; 2 > i9; ++i9) {
                        i8 += (int)Test.instanceCount;
                        Test.instanceCount >>= i9;
                    }
                    break;
                case 87:
                    i8 = (int)d;
                    break;
                case 88:
                    i10 += (98 + (i5 * i5));
                    break;
                case 89:
                    i6 -= (int)Test.instanceCount;
                default:
                    bArr = bArr;
                }
            }
        } while (++i4 < 274);
        long meth_res = by + l + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i, int i1) {

        int i2=-7958, i3=201, i11=138, i12=43681, i13=62132, i14=-109, i15=53938;
        byte by1=95;
        long l1=-3L, lArr[]=new long[N];
        boolean b=false;
        float f=-41.534F;

        FuzzerUtils.init(lArr, 7L);

        for (i2 = 15; i2 < 300; i2++) {
            lMeth(by1, -15785L);
        }
        Test.instanceCount += 29491;
        Test.iArrFld[(i3 >>> 1) % N] += (int)Test.instanceCount;
        for (l1 = 2; 175 > l1; l1 += 3) {
            i3 = (int)Test.instanceCount;
            i11 = i12;
            i1 = i1;
            Test.instanceCount = 54679;
            Test.instanceCount += (l1 | i1);
            b = b;
            for (f = 1; f < 27; f++) {
                for (i14 = (int)(l1); 2 > i14; i14 += 3) {
                    Test.iArrFld[(int)(f + 1)] = i15;
                    i1 <<= 4;
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + by1 + l1 + i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f) + i13 + i14
            + i15 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {


        vMeth1(Test.iFld, -51103);
        Test.sArrFld[(Test.iFld >>> 1) % N] = (short)-82.28F;
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i16=60249, i17=9, i18=1, i19=-36221, i20=221, i21=-165, i22=12;
        byte by2=-80;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.38329);

        vMeth();
        for (i16 = 6; i16 < 267; i16++) {
            Test.iFld = -11508;
            by2 += (byte)i17;
            for (i18 = 6; i18 < 96; ++i18) {
                Test.fFld -= i19;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.iFld += (i20 + i19);
                    Test.instanceCount = -7;
                    lArrFld[i16 + 1] = Test.iFld;
                    Test.iArrFld[i18] = (int)Test.instanceCount;
                    Test.iFld += (i20 + Test.sFld);
                    Test.fFld += (i20 * i20);
                    Test.instanceCount = Test.iFld;
                    switch ((((i20 >>> 1) % 9) * 5) + 40) {
                    case 78:
                        if (b1) continue;
                        Test.instanceCount >>>= by2;
                        break;
                    case 46:
                        Test.instanceCount = (long)-2.109189;
                        break;
                    case 54:
                        switch (((i18 % 1) * 5) + 65) {
                        case 67:
                            switch ((i18 % 9) + 13) {
                            case 13:
                                i21 += i20;
                                dArr[i16 - 1] *= Test.instanceCount;
                                i19 <<= -28259;
                                Test.iArrFld[i16 + 1] *= i21;
                            case 14:
                                lArrFld[(i17 >>> 1) % N] -= Test.instanceCount;
                                Test.instanceCount *= i18;
                                i21 += (int)Test.instanceCount;
                                dFld += i18;
                                break;
                            case 15:
                                Test.instanceCount *= -126;
                                Test.iFld += i20;
                                break;
                            case 16:
                                Test.iArrFld[i16 + 1] = i22;
                            case 17:
                                i22 += (i20 ^ i18);
                                break;
                            case 18:
                                Test.instanceCount <<= i18;
                                break;
                            case 19:
                                Test.instanceCount = -10L;
                                break;
                            case 20:
                                i17 = (int)Test.instanceCount;
                                break;
                            case 21:
                                Test.iArrFld[i16 - 1] -= (int)Test.instanceCount;
                            default:
                                Test.instanceCount = i20;
                            }
                        }
                        break;
                    case 53:
                    case 85:
                        Test.iFld = i21;
                        break;
                    case 59:
                        i22 ^= i18;
                        break;
                    case 60:
                        i21 += (((i20 * i18) + Test.instanceCount) - i16);
                        break;
                    case 65:
                        Test.fFld += i20;
                    case 57:
                        lArrFld[i16] = Test.instanceCount;
                        break;
                    default:
                        try {
                            i22 = (i20 % -61652);
                            Test.iArrFld[i18 - 1] = (i22 / Test.iFld);
                            i21 = (i21 / -3497);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
