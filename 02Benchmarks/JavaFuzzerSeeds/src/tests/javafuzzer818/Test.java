package tests.javafuzzer818;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:22:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-218L;
    public static float fFld=-73.443F;
    public static float fFld1=-2.968F;
    public static short sFld=-28538;
    public static byte byFld=-37;
    public static volatile double dFld=0.24272;
    public static int iFld=14;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth1(int i, long l, int i1) {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 7);

        iArr[(2 >>> 1) % N][(i1 >>> 1) % N] = (int)Test.fFld;
        vMeth1_check_sum += i + l + i1 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(long l1, int i4, int i5) {

        int i6=64021, i7=88, i8=-10, i9=12, i10=-18828;
        byte byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)99);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 232L);

        i6 = 1;
        while (++i6 < 225) {
            Test.iArrFld[i6] += i4;
            if (true) {
                if (i7 != 0) {
                }
            } else if (true) {
                byArr[i6] *= (byte)i4;
                for (i8 = 1; i8 < 7; i8++) {
                    bArr[i8] = false;
                    Test.iArrFld[i6] = (int)l1;
                    i10 = 1;
                    while (++i10 < 2) {
                        boolean b=false;
                        i9 += i10;
                        lArr[i10 + 1] += Test.instanceCount;
                        switch (((-14 >>> 1) % 6) + 93) {
                        case 93:
                            if (b) continue;
                            break;
                        case 94:
                            Test.iArrFld[i6 + 1] -= (int)Test.instanceCount;
                            i9 <<= i6;
                            break;
                        case 95:
                        case 96:
                            i4 -= i8;
                            break;
                        case 97:
                            Test.fFld1 += i9;
                            break;
                        case 98:
                            i5 = i6;
                            break;
                        default:
                            i5 = i4;
                        }
                    }
                }
            }
        }
        long meth_res = l1 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i3, byte by) {

        double d=1.123497;
        int i11=95, i12=14, i13=-194, i14=-128, i15=122;
        long l2=48008L;
        boolean b1=false;

        Test.instanceCount -= (Test.instanceCount * iMeth1(Test.instanceCount, i3, i3));
        Test.sFld += (short)d;
        for (i11 = 10; i11 < 234; ++i11) {
            Test.fFld = i3;
            Test.instanceCount += (4408348319068555190L + (i11 * i11));
        }
        for (i13 = 7; i13 < 208; i13++) {
            i14 -= (int)53.99918;
        }
        i12 = i13;
        if (true) {
            for (l2 = 152; 1 < l2; l2 -= 2) {
                if (b1) {
                    i3 += (int)l2;
                } else if (b1) {
                    i3 -= 3;
                    i3 *= 5585;
                    i12 = 241;
                }
            }
        }
        long meth_res = i3 + by + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + l2 + i15 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=-41205, i16=-13, i17=-125, i18=48934, i19=217, iArr1[][]=new int[N][N];
        boolean b2=true;

        FuzzerUtils.init(iArr1, 75);

        vMeth1((--i2) + ((i2 - i2) - iArr1[(-3 >>> 1) % N][(i2 >>> 1) % N]), (-(43 + (Test.instanceCount - i2))) - i2,
            ((-iMeth(i2, Test.byFld)) * i2) + i2);
        i2 *= (int)Test.instanceCount;
        i2 += (int)Test.instanceCount;
        for (i16 = 9; 173 > i16; i16 += 3) {
            Test.byFld += (byte)i16;
            Test.fFld1 = i2;
            i2 += (i16 * i16);
            i2 >>= (int)Test.instanceCount;
        }
        Test.bArrFld[(42846 >>> 1) % N] = b2;
        for (i18 = 4; i18 < 164; i18++) {
            Test.sFld = (short)i17;
            iArr1[i18 + 1][i18] >>>= i16;
            Test.dFld -= Test.dFld;
            i17 += (int)Test.fFld1;
        }
        i19 = i2;
        vMeth_check_sum += i2 + i16 + i17 + (b2 ? 1 : 0) + i18 + i19 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {


        vMeth();
        Test.instanceCount += (long)Test.fFld;
        Test.instanceCount = Test.iFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
