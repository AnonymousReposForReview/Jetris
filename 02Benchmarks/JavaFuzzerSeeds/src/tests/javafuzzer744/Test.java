package tests.javafuzzer744;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:58:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=44L;
    public static short sFld=-8145;
    public static byte byFld=-74;
    public static int iFld=9;
    public static long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];
    public volatile int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4L);
        FuzzerUtils.init(Test.dArrFld, -114.83647);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=-9, i5=-7, i6=-2018, i7=-210, iArr2[][]=new int[N][N];
        boolean b=true;
        byte by=116;
        short s=-7548;

        FuzzerUtils.init(iArr2, -13);

        for (i4 = 277; i4 > 9; i4--) {
            i5 -= (int)Test.instanceCount;
            i6 = 6;
            do {
                float f2=83.368F;
                i5 += (int)(-247L + (i6 * i6));
                i5 -= i6;
                b = b;
                f2 = -3523058136174108662L;
                switch ((i4 % 2) + 47) {
                case 47:
                case 48:
                    by = (byte)f2;
                    i5 = i7;
                    i5 += (i6 ^ (long)f2);
                    s += s;
                }
                iArr2[i4][i6 + 1] = (int)f2;
            } while (--i6 > 0);
            Test.instanceCount += Test.instanceCount;
            i5 <<= i6;
        }
        vMeth2_check_sum += i4 + i5 + i6 + (b ? 1 : 0) + by + i7 + s + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1() {

        int i3=4766, i9=-9, i10=1, i11=-190, i12=-202, iArr1[]=new int[N];
        double d1=0.28240, dArr[]=new double[N];
        byte by1=32;
        boolean b1=false;
        float f3=-1.608F;

        FuzzerUtils.init(iArr1, -25242);
        FuzzerUtils.init(dArr, -1.44148);

        i3 += (int)(3434636490837744421L + i3);
        Test.instanceCount = Test.instanceCount;
        i3 = (int)(iArr1[(i3 >>> 1) % N] >>= (int)(-(d1 + Test.instanceCount)));
        if (b1) {
            vMeth2();
            for (int i8 : iArr1) {
                Test.lArrFld[(i3 >>> 1) % N] += i3;
                iArr1[(i8 >>> 1) % N] = by1;
                for (i9 = 1; i9 < 4; i9++) {
                    i3 *= (int)Test.instanceCount;
                    i3 = 8;
                    i8 = -12119;
                    for (i11 = i9; i11 < 2; ++i11) {
                        i8 += (0 + (i11 * i11));
                        i3 *= i11;
                    }
                }
            }
        } else if (b1) {
            dArr[(i3 >>> 1) % N] *= -54146L;
        } else if (false) {
            Test.sFld = (short)2969L;
        } else {
            f3 += i12;
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + by1 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(float f1, int i1) {

        int i2=-1, i13=217, i14=-12, i15=-17369, iArr[]=new int[N];
        boolean b2=false;
        double dArr1[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 15569);
        FuzzerUtils.init(dArr1, -85.127690);
        FuzzerUtils.init(fArr, -67.293F);

        i2 = 282;
        do {
            iArr[i2] = i1;
            vMeth1();
        } while ((i2 -= 3) > 0);
        i1 %= (int)(Test.instanceCount | 1);
        iArr[(i1 >>> 1) % N] = i2;
        i13 = 1;
        while (++i13 < 224) {
            for (i14 = 1; i14 < 7; i14++) {
                dArr1 = dArr1;
                switch (((i2 >>> 1) % 2) + 92) {
                case 92:
                case 93:
                default:
                    i1 -= -39;
                    i15 += (((i14 * i14) + Test.instanceCount) - Test.instanceCount);
                    iArr[i13 + 1] = i14;
                    if (b2) {
                        Test.instanceCount &= i13;
                        fArr = fArr;
                    } else {
                        i15 += (int)f1;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i2 + i13 + i14 + i15 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f=0.1006F, f4=0.642F;
        int i=-8, i16=-5958, i17=-8692, i18=-9, i19=-9, i20=-55548, i21=-213, i22=-14707, i23=12;
        double d=-1.69789;
        long l=-4344644819287807360L;
        boolean b3=false;

        f = (float)(i * ((-(i - d)) * (d - i)));
        vMeth(f, 172);
        for (l = 3; l < 143; ++l) {
            for (i17 = 5; i17 < 179; i17++) {
                Test.instanceCount &= i;
            }
            switch ((int)((l % 10) + 10)) {
            case 10:
                i18 += (int)l;
                f -= Test.byFld;
                i = i16;
                i16 += (int)(((l * f) + i16) - Test.byFld);
                break;
            case 11:
            case 12:
                i16 += -53770;
                i -= i;
                sArrFld[(int)(l + 1)] += (short)i16;
                break;
            case 13:
                for (i19 = (int)(l); i19 < 179; i19++) {
                    iArrFld[i19 + 1] += i16;
                    i18 = i21;
                    i16 = 226;
                    switch ((int)((l % 10) + 64)) {
                    case 64:
                        f += -22204;
                    case 65:
                        iArrFld[i19 - 1] = (int)f;
                        for (f4 = l; f4 < 1; ++f4) {
                            fArrFld = fArrFld;
                            Test.instanceCount *= i21;
                            d -= i19;
                            i -= 7671;
                            Test.byFld = (byte)110;
                            i20 = (int)Test.instanceCount;
                            i18 = Test.iFld;
                        }
                        break;
                    case 66:
                    case 67:
                        iArrFld[(int)(l + 1)] = 120;
                        try {
                            i20 = (-54276 % i);
                            i20 = (i22 % 27707);
                            i20 = (iArrFld[(int)(l - 1)] / iArrFld[(int)(l - 1)]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 68:
                        Test.instanceCount = -48146;
                        break;
                    case 69:
                        f = (float)d;
                        break;
                    case 70:
                        try {
                            iArrFld[(int)(l)] = (541759841 / iArrFld[(int)(l - 1)]);
                            Test.iFld = (i16 % 21422);
                            i18 = (i19 % i);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 71:
                        iArrFld = iArrFld;
                        break;
                    case 72:
                        Test.instanceCount += (i19 * f4);
                        break;
                    case 73:
                    }
                }
            case 14:
                Test.dArrFld[(int)(l + 1)] *= i19;
            case 15:
                i22 >>= -5676;
                break;
            case 16:
                iArrFld[(int)(l - 1)] = Test.iFld;
            case 17:
                Test.instanceCount = i20;
                break;
            case 18:
                b3 = b3;
                break;
            case 19:
                f += i23;
                break;
            default:
                i21 = i18;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
