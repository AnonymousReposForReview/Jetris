package tests.javafuzzer2537;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static volatile float fFld=-49.505F;
    public static int iFld=-22324;
    public static double dFld=2.73591;
    public int iFld1=-11;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27);
        FuzzerUtils.init(Test.lArrFld, 10L);
        FuzzerUtils.init(Test.dArrFld, 31.26039);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, byte by, int i4) {


        Test.fFld += -9;
        Test.iArrFld = Test.iArrFld;
        i4 = (int)Test.instanceCount;
        i3 += (int)Test.instanceCount;
        i4 += i4;
        long meth_res = i3 + by + i4;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(double d, boolean b) {

        int i2=180, i5=134, i6=-1, i7=-12, iArr[]=new int[N];
        byte by1=-111;
        long l=-64566L;

        FuzzerUtils.init(iArr, 11);

        iArr[(i2 >>> 1) % N] += (int)Test.fFld;
        i2 *= iMeth(i2, by1, i2);
        Test.instanceCount = Test.iFld;
        Test.iFld = i2;
        l = 1;
        do {
            i2 += (int)l;
            d = Test.iFld;
            i5 = 1;
            while (++i5 < 13) {
                for (i6 = i5; 1 > i6; i6++) {
                    Test.iFld *= (int)Test.fFld;
                    Test.instanceCount -= (long)d;
                    Test.instanceCount += (i6 * i6);
                    i2 += (i6 + Test.instanceCount);
                    Test.instanceCount += (long)Test.fFld;
                    Test.instanceCount = i5;
                }
            }
        } while (++l < 124);
        long meth_res = Double.doubleToLongBits(d) + (b ? 1 : 0) + i2 + by1 + l + i5 + i6 + i7 +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vSmallMeth(int i, int i1) {

        boolean b1=false;

        i1 &= (int)(((i1 + -1.90938) - (-121.663F - Math.min(7, i1))) + (byMeth(Test.dFld, b1) * i1));
        vSmallMeth_check_sum += i + i1 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        short s=-14602;
        long l1=-2312514927L;
        int i8=215, i9=-91, i10=0, i11=-6655, i12=13, i13=9, i14=195, i15=12, i16=76, i17=-5885, i18=0, i19=184;

        s -= (short)10;
        for (int smallinvoc=0; smallinvoc<746; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld);
        Test.iFld |= Test.iFld;
        Test.instanceCount = Test.iFld;
        Test.iFld *= Test.iFld;
        for (l1 = 9; l1 < 390; ++l1) {
            i8 += iFld1;
            iFld1 = Test.iFld;
            iFld1 = (int)l1;
        }
        for (i9 = 19; 320 > i9; ++i9) {
            Test.lArrFld[i9 - 1] = (long)Test.fFld;
            for (i11 = 4; i11 < 84; ++i11) {
                Test.iFld += i12;
                Test.iFld = (int)-3644396773331324154L;
                Test.iFld += i11;
                for (i13 = i9; i13 < 2; ++i13) {
                    Test.iArrFld[i13 + 1] += i8;
                }
                Test.instanceCount = i12;
                Test.iArrFld[i9 - 1] -= i11;
                for (i15 = 1; i15 < 2; i15++) {
                    i14 = Test.iFld;
                }
            }
            Test.instanceCount += i15;
            Test.dArrFld[i9 + 1] = i10;
            for (i17 = 3; 84 > i17; i17 += 3) {
                i14 ^= -13;
                i19 = 1;
                while (++i19 < 4) {
                    Test.fFld = Test.iFld;
                    i18 = i16;
                    Test.fFld += ((long)i19 | (long)l1);
                    if (true) continue;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth byMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
