package tests.javafuzzer1376;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:09:10 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=137L;
    public static float fFld=45.771F;
    public static boolean bFld=true;
    public static volatile double dFld=-73.82858;
    public static long lFld=5L;
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-80);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i8, long l1) {

        int i9=-10, i10=244, i11=-2, i12=14, i13=-10, i14=74, i15=234, iArr[]=new int[N];
        byte by=-50;
        float f1=-29.218F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -30662);
        FuzzerUtils.init(fArr, 0.568F);

        for (i9 = 9; 199 > i9; ++i9) {
            long l2=236L;
            i11 = 1;
            do {
                i8 += (((i11 * i10) + i9) - l1);
                i10 *= i10;
                Test.instanceCount *= by;
                for (i12 = 1; i12 < 1; i12++) {
                    l1 = 9;
                }
                iArr = FuzzerUtils.int1array(N, (int)63377);
                for (i14 = 1; i14 < 1; i14++) {
                    l1 = l1;
                    i10 >>= i8;
                    Test.byArrFld[i9 + 1] ^= (byte)i15;
                    i13 *= i10;
                }
            } while (++i11 < 8);
            fArr[i9 - 1] *= l2;
            f1 += i9;
        }
        long meth_res = i8 + l1 + i9 + i10 + i11 + by + i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(long l, int i3, double d) {

        int i4=-6, i5=7398, i6=-5, i7=-135, i17=-9, iArr1[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 34);
        FuzzerUtils.init(sArr, (short)-2653);

        i4 = 175;
        while (--i4 > 0) {
            i5 = 1;
            while (++i5 < 9) {
                for (i6 = 1; i6 < 1; i6++) {
                    i7 = (int)(fMeth(i3, l) + i4);
                    i3 -= i5;
                    iArr1 = iArr1;
                }
                i7 += (i5 * i5);
                i3 *= -3;
                Test.fFld *= i6;
                i17 = 1;
                while ((i17 += 3) < 1) {
                    Test.bFld = Test.bFld;
                    i3 += i6;
                    Test.fFld = i7;
                    Test.instanceCount += i17;
                    sArr[i5] = (short)d;
                }
            }
        }
        long meth_res = l + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f, int i2) {

        float f2=-13.70F;
        int i18=-5045, i19=-3, i20=5, i21=-2, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -4603);

        i2 >>= iMeth(14L, -2179, Test.dFld);
        Test.instanceCount += i2;
        f2 = 1;
        do {
            iArr2[(int)(f2 - 1)] = i2;
            iArr2[(int)(f2)] *= i2;
            i2 %= (int)(i2 | 1);
            for (i18 = 1; i18 < 7; ++i18) {
                Test.instanceCount %= (i2 | 1);
                i2 -= i19;
                i19 -= i2;
                iArr2[i18] *= 2;
                i2 = i18;
                for (i20 = 1; i20 < 2; i20++) {
                    i2 += (int)Test.instanceCount;
                    if (false) break;
                }
            }
        } while (++f2 < 245);
        long meth_res = Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f2) + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-74, i1=-6, i22=-4, i23=-22165, i24=1, i25=154, i26=-42805, iArr3[]=new int[N];
        short s=-25946;
        byte by1=-15;
        double d1=-36.108973;

        FuzzerUtils.init(iArr3, -9763);

        for (i = 12; i < 269; i++) {
            i1 += (int)(-3L + (i * i));
            i1 ^= (int)lMeth(Test.fFld, i1);
            Test.bFld = Test.bFld;
            i22 = 98;
            while (--i22 > 0) {
                for (i23 = 1; 1 > i23; i23++) {
                    Test.instanceCount -= 56L;
                    s /= (short)(s | 1);
                }
            }
            Test.instanceCount *= (long)Test.fFld;
            for (i25 = 5; i25 < 98; i25++) {
                Test.fFld -= i22;
                i26 += (((i25 * i24) + by1) - i1);
                i1 = 18542;
                i1 = i1;
                if (false) {
                    iArr3[i25 + 1] = (int)Test.instanceCount;
                } else {
                    Test.fFld = Test.instanceCount;
                    i24 = (int)Test.lFld;
                    iArr3[i] = (int)Test.lFld;
                }
                d1 = 1;
                while (++d1 < 2) {
                    i24 >>= -203;
                    iArr3[i25 + 1] += 52996;
                    Test.lFld += (-5 + (d1 * d1));
                    if (Test.bFld) {
                        Test.instanceCount %= ((long)(Test.fFld) | 1);
                        Test.fFld += (float)(((d1 * i25) + Test.lFld) - by1);
                        Test.instanceCount = i23;
                    } else if (true) {
                        iArr3[i25 - 1] += i26;
                        i24 += (int)(((d1 * i25) + s) - s);
                        i24 += (int)(d1 - i);
                    } else {
                        by1 += (byte)d1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
