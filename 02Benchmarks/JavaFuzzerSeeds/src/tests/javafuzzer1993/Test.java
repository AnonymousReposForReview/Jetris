package tests.javafuzzer1993;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:00:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-53409L;
    public volatile int iFld=-123;
    public static int iFld1=-13;
    public static short sFld=593;
    public static volatile float fFld=36.159F;
    public static boolean bFld=false;
    public static byte byFld=111;
    public double dFld=-19.49929;
    public static int iArrFld[][]=new int[N][N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -37980);
        FuzzerUtils.init(Test.sArrFld, (short)-19541);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=11, i2=-8, i3=0, i4=190, i5=-7, i6=0, i7=-41392;
        double d1=0.3737;
        float f=91.418F, fArr[]=new float[N];
        boolean b=true;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, -105.674F);
        FuzzerUtils.init(lArr1, 5828741736281044348L);

        i1 -= i1;
        for (i2 = 24; i2 < 397; i2++) {
            for (i4 = 1; 5 > i4; i4++) {
                Test.instanceCount += i4;
                i1 -= i5;
                Test.instanceCount *= Test.instanceCount;
            }
            try {
                i3 = (i4 / 47562);
                i5 = (i3 / 20943);
                i3 = (i4 / Test.iFld1);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += 51;
            if (b) {
                Test.sArrFld[i2 + 1] >>= (short)i1;
                for (i6 = 1; i6 < 5; i6 += 2) {
                    Test.iFld1 = Test.sFld;
                    Test.iArrFld[i6 + 1][i6 - 1] = (int)Test.instanceCount;
                    fArr[i6 + 1] *= (float)d1;
                    f -= Test.iFld1;
                }
            } else if (b) {
                lArr1[i2 - 1] = lArr1[i2];
            } else {
                d1 *= i2;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static byte byMeth() {

        int i8=-216, i9=40453, i10=-53606, i11=-8;

        vMeth();
        Test.iFld1 += (int)Test.instanceCount;
        if (Test.bFld) {
            i8 = 1;
            do {
                Test.iFld1 = (int)Test.instanceCount;
                for (i9 = i8; 6 > i9; ++i9) {
                    if (i9 != 0) {
                    }
                    Test.sFld += (short)(((i9 * Test.instanceCount) + i9) - Test.instanceCount);
                    Test.fFld += -13;
                    if (i8 != 0) {
                    }
                    switch (((Test.iFld1 >>> 1) % 3) + 27) {
                    case 27:
                        Test.sFld ^= (short)-55053;
                        Test.instanceCount = Test.iFld1;
                        break;
                    case 28:
                        i10 += i9;
                        Test.iFld1 += i8;
                        break;
                    case 29:
                        i11 = (int)Test.fFld;
                    default:
                        if (i10 != 0) {
                        }
                    }
                }
            } while (++i8 < 286);
        }
        long meth_res = i8 + i9 + i10 + i11;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth(double d, int i, long l) {

        int i12=-7, i13=21009, i14=196, i15=-235, i16=-18;
        byte by=127;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.608F);

        i += (int)((Test.instanceCount = byMeth()) * 11L);
        l -= Test.iFld1;
        for (i12 = 3; i12 < 140; i12++) {
            lArrFld[i12] ^= i;
            Test.iArrFld[i12 - 1][i12 - 1] &= (int)Test.instanceCount;
            iFld += (i12 ^ i13);
            for (i14 = 1; i14 < 11; i14++) {
                l = Test.iFld1;
                iFld = i15;
                Test.iArrFld[i14][i14 + 1] = 57762;
                switch ((i12 % 2) + 74) {
                case 74:
                    iFld = -10;
                    i16 = 1;
                    while (++i16 < 2) {
                        fArr1[i12] = i12;
                        i13 = i16;
                    }
                    break;
                case 75:
                    by = (byte)Test.fFld;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + l + i12 + i13 + i14 + i15 + i16 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=27, i18=-44404, i19=6, i20=62539, i21=7, i22=-6, i23=17992, i24=24012;
        float f1=-69.633F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -6581L);
        FuzzerUtils.init(byArr, (byte)-70);

        Test.iArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N] >>>= (int)Math.min(lArr[(11 >>> 1) % N], Test.instanceCount);
        iFld = (int)(iMeth(0.125030, iFld, Test.instanceCount) / ((long)(Test.fFld) | 1));
        for (i17 = 6; i17 < 293; i17++) {
            iFld = -7;
            Test.byFld += (byte)i17;
            lArr[i17] &= i18;
        }
        Test.sFld = (short)i18;
        Test.iFld1 <<= (int)-3240533214L;
        for (f1 = 9; f1 < 214; ++f1) {
            iFld -= 6;
            Test.fFld -= Test.sFld;
            iFld += iFld;
            if (Test.bFld) {
                i19 = (int)Test.fFld;
                i20 = 1;
                do {
                    for (i21 = 1; i21 < 1; ++i21) {
                        iFld += i21;
                        Test.instanceCount *= (long)dFld;
                        Test.iArrFld[i20][(int)(f1 - 1)] *= -47393;
                        iFld = Test.iFld1;
                        i22 = Test.iFld1;
                        Test.iFld1 -= iFld;
                        Test.instanceCount += (i21 * i21);
                        byArr[(int)(f1 - 1)] = (byte)-231;
                    }
                    i18 -= (int)Test.fFld;
                    lArrFld[i20] = Test.instanceCount;
                } while (++i20 < 122);
            } else if (Test.bFld) {
                Test.instanceCount *= i18;
                for (i23 = 6; i23 < 122; i23++) {
                    Test.iFld1 -= Test.byFld;
                    Test.iFld1 = Test.sFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
