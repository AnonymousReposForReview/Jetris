package tests.javafuzzer325;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:55:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6L;
    public static int iFld=9969;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        float f=102.796F, f1=0.164F;
        int i9=2, i10=4, i11=-43, iArr1[]=new int[N];
        boolean b1=true;
        short s=-6682;
        double d1=0.124249;

        FuzzerUtils.init(iArr1, -245);

        for (f = 4; f < 288; ++f) {
            switch ((int)(((f % 2) * 5) + 62)) {
            case 64:
                i9 <<= i9;
                for (i10 = (int)(f); 6 > i10; ++i10) {
                    if (b1) continue;
                }
                break;
            case 67:
                f1 += l;
                b1 = b1;
                Test.instanceCount >>= i9;
                break;
            }
            Test.instanceCount = -14;
            i9 = i9;
            s += (short)((long)f | (long)f);
        }
        i9 *= (int)d1;
        for (int i12 : iArr1) {
            i9 = (int)l;
            iArr1[(i12 >>> 1) % N] -= i9;
        }
        vMeth2_check_sum += l + Float.floatToIntBits(f) + i9 + i10 + i11 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + s
            + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i5, int i6, boolean b) {

        int i7=171, i8=14499, i13=60818, i14=9, i15=-1, i16=155, i17=54154, iArr2[]=new int[N];
        float f2=1.87F;
        byte by=-68;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1432974197904606410L);
        FuzzerUtils.init(iArr2, 4854);

        b = b;
        for (i7 = 9; i7 < 303; ++i7) {
            i5 = (-29411 + (++i8));
            vMeth2(Test.instanceCount);
            for (i13 = 1; 6 > i13; i13 += 2) {
                for (i15 = 1; i15 < 3; ++i15) {
                    short s1=17779;
                    Test.instanceCount = Test.instanceCount;
                    i8 %= (int)(Test.instanceCount | 1);
                    i5 += (i15 ^ s1);
                    Test.instanceCount -= (long)f2;
                    lArr = lArr;
                    iArr2[i13 - 1] *= i7;
                    Test.instanceCount >>= by;
                    i6 <<= i6;
                    i17 = i13;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + (b ? 1 : 0) + i7 + i8 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + by +
            i17 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i1, double d) {

        int i2=-32024, i3=199, i4=2, i18=208, iArr[]=new int[N];
        boolean b2=true;
        long l1=7L, l2=5746L, lArr1[][]=new long[N][N];
        byte by1=-95;

        FuzzerUtils.init(iArr, -143);
        FuzzerUtils.init(lArr1, 426427783918999415L);

        switch ((((iArr[(-2 >>> 1) % N] >>> 1) % 5) * 5) + 45) {
        case 53:
            i2 = 1;
            while (++i2 < 131) {
                for (i3 = 1; i3 < 12; i3++) {
                    vMeth1(-3, i3, b2);
                    try {
                        i1 = (-61589 % i4);
                        i1 = (i4 % i2);
                        i1 = (i2 / i1);
                    } catch (ArithmeticException a_e) {}
                    iArr[i3] = i2;
                    if (b2) {
                        l1 += (i3 ^ i4);
                        i1 >>= i4;
                        for (l2 = 1; l2 < 2; l2++) {
                            i1 *= (int)Test.instanceCount;
                        }
                    } else if (b2) {
                        switch (((i3 % 6) * 5) + 65) {
                        case 95:
                            i1 = i1;
                            i4 = i4;
                            iArr = iArr;
                            break;
                        case 81:
                            i18 += by1;
                            break;
                        case 93:
                            l1 += (((i3 * i1) + by1) - i4);
                            break;
                        case 94:
                            i1 -= -6308;
                        case 66:
                            Test.instanceCount += (i3 * i3);
                            break;
                        case 71:
                            i1 >>= i2;
                            break;
                        default:
                            i1 = (int)2.431F;
                        }
                    } else {
                        lArr1[i2 + 1][i2 - 1] -= i1;
                    }
                }
            }
            break;
        case 66:
            i4 = -58932;
            break;
        case 69:
            i18 = i18;
            break;
        case 64:
            Test.instanceCount = i4;
            break;
        case 51:
            Test.instanceCount >>>= l1;
            break;
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + (b2 ? 1 : 0) + l1 + l2 + i18 + by1 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-50, i19=1, i20=-3, i21=-18424, i22=-7, i23=-241, i24=-126, i25=1, i26=-11, i27=49, i28=0, iArr3[][]=new
            int[N][N];
        float f3=2.409F, fArr[][]=new float[N][N];
        short s2=-29873;
        double d2=0.53050;
        byte by2=-72;
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 0.805F);
        FuzzerUtils.init(iArr3, -27836);
        FuzzerUtils.init(lArr2, 0L);

        i = 1;
        while (++i < 310) {
            fArr[i - 1][i + 1] += Integer.reverseBytes(i);
            vMeth(i, 2.84946);
            Test.iFld += (i | i);
            Test.iFld = 30799;
            f3 += i;
            for (i19 = 4; i19 < 81; i19++) {
                s2 = (short)i20;
            }
        }
        i20 |= i19;
        for (i21 = 3; 238 > i21; ++i21) {
            Test.instanceCount *= Test.instanceCount;
            i22 += (((i21 * f3) + Test.iFld) - i19);
            Test.instanceCount += (i21 + i19);
        }
        for (i23 = 5; i23 < 169; i23++) {
            try {
                i24 = (iArr3[i23 + 1][i23 - 1] % 1965631494);
                i20 = (i24 / i);
                i25 = (i25 / 123);
            } catch (ArithmeticException a_e) {}
            fArr[i23 - 1][i23 + 1] -= -2.87F;
            for (d2 = 5; d2 < 153; ++d2) {
                i25 ^= by2;
                lArr2[i23 - 1] *= (long)f3;
                i20 >>= 1157;
                i20 ^= by2;
                i25 >>= i19;
                for (i27 = (int)(d2); i27 < 2; i27 += 3) {
                    Test.instanceCount += i23;
                    i22 = -8;
                }
                i20 += (2 + (d2 * d2));
            }
            i20 += (((i23 * i20) + f3) - i24);
        }
        i26 = Test.iFld;
        lArr2[(i >>> 1) % N] &= i25;
        f3 -= f3;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
