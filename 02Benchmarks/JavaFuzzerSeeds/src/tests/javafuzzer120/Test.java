package tests.javafuzzer120;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:42:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=14L;
    public static short sFld=-8321;
    public static double dFld=0.73956;
    public static float fFld=86.631F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
        FuzzerUtils.init(Test.lArrFld, -4197783181L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i6, int i7) {

        int i8=-5, i9=-51228, i10=28417, i11=201, i13=33335;

        try {
            for (i8 = 4; i8 < 131; ++i8) {
                int i12=152;
                Test.instanceCount = i8;
                i9 += (((i8 * i7) + Test.sFld) - i8);
                Test.iArrFld[i8 + 1] += (int)Test.instanceCount;
                for (i10 = 12; i10 > i8; --i10) {
                    i9 += (((i10 * i9) + i9) - i8);
                    Test.instanceCount -= (long)Test.dFld;
                    i7 = (int)Test.instanceCount;
                    f1 -= (float)Test.dFld;
                }
                try {
                    Test.iArrFld[i8] = (i10 / i12);
                    i6 = (i13 % -2017239924);
                    i13 = (i8 / -3);
                } catch (ArithmeticException a_e) {}
                i6 = i11;
                f1 += (i8 * i8);
            }
            Test.instanceCount = i10;
            i13 |= i8;
        }
        catch (ArithmeticException exc1) {
            i7 = i6;
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + i11 + i13;
    }

    public static void vMeth1(int i5, double d) {

        int i14=-26311, i15=-58487, i16=2, i17=-10, i18=-61087, i19=-2;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -122.359F);

        vMeth2(Test.fFld, i5, i5);
        for (i14 = 1; i14 < 239; ++i14) {
            i5 = (int)Test.instanceCount;
        }
        if (b) {
            i16 = 1;
            while ((i16 += 2) < 145) {
                fArr[i16] += 56974;
                for (i17 = i16; i17 < 21; ++i17) {
                    i5 >>= i5;
                    i19 &= i5;
                    if (b) break;
                    Test.dFld = i17;
                    b = b;
                    i18 += (int)Test.fFld;
                }
                Test.iArrFld[i16] -= i16;
                i15 = i19;
            }
        } else {
            Test.iArrFld[(i15 >>> 1) % N] = (int)Test.instanceCount;
            vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i2, int i3) {

        int i4=-2, i20=-249, i21=-8, i22=45921, i23=182, i24=-168;
        float f=1.116F;
        byte by=113;
        boolean b1=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-17389);

        i4 = 1;
        while (++i4 < 346) {
            i2 -= (int)(f - (++i2));
            Test.instanceCount -= ((++by) & i4);
            try {
                i3 = (-1888913353 / i3);
                i2 = (i2 % i2);
                i3 = (-18313 % i4);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount -= Integer.reverseBytes(Test.iArrFld[i4 + 1]);
        }
        i2 += i3;
        vMeth1(i4, Test.dFld);
        i20 = 1;
        while (++i20 < 225) {
            if (b1) {
                i2 = i20;
                for (i21 = 1; i21 < 7; ++i21) {
                    Test.fFld += i21;
                    for (i23 = 1; 2 > i23; i23++) {
                        sArr = FuzzerUtils.short1array(N, (short)-832);
                    }
                    Test.lArrFld[i20] &= Test.instanceCount;
                }
            } else {
                Test.iArrFld = Test.iArrFld;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + by + i20 + i21 + i22 + i23 + i24 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=225, i1=-205, i25=44323, i26=61, i27=253, i28=10, i29=13, i30=-117, iArr[][]=new int[N][N];
        boolean b2=false;

        FuzzerUtils.init(iArr, -2);

        for (i = 15; i < 269; ++i) {
            vMeth(i, i1);
            if (b2) continue;
            i1 = (int)Test.instanceCount;
            i1 ^= (int)Test.instanceCount;
            Test.instanceCount *= 28374;
        }
        for (i25 = 9; i25 < 155; ++i25) {
            for (i27 = 172; i27 > 5; --i27) {
                Test.iArrFld[i25] *= (int)Test.dFld;
                Test.dFld = Test.instanceCount;
                b2 = b2;
                iArr = FuzzerUtils.int2array(N, (int)-19650);
                switch (((i27 >>> 1) % 2) + 2) {
                case 2:
                    if (b2) {
                        i28 -= i28;
                        Test.fFld *= Test.instanceCount;
                    } else {
                        i26 += (int)Test.instanceCount;
                        Test.fFld += (7L + (i27 * i27));
                        Test.sFld = (short)Test.instanceCount;
                        i26 += i27;
                    }
                    break;
                case 3:
                    i1 = i26;
                    Test.instanceCount += (i27 * Test.sFld);
                default:
                    i28 *= i25;
                    switch (((i26 >>> 1) % 1) + 120) {
                    case 120:
                        if (b2) break;
                        break;
                    default:
                        Test.instanceCount -= (long)Test.fFld;
                        for (i29 = 1; 2 > i29; ++i29) {
                            i28 += (i29 ^ i26);
                            i26 += i29;
                            Test.instanceCount = i26;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
