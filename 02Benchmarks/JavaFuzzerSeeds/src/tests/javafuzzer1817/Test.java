package tests.javafuzzer1817;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:39:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static double dFld=19.34344;
    public static short sFld=19175;
    public static short sFld1=26415;
    public static volatile boolean bFld=true;
    public byte byFld=-15;
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-107);
        FuzzerUtils.init(Test.fArrFld, 121.258F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i12=-6255, i13=-94, i14=-285, i15=-13, i16=-33286, i17=14, i18=199, iArr1[]=new int[N];
        double d1=-2.38690;
        float f=71.867F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(bArr, true);

        for (i12 = 11; i12 < 266; ++i12) {
            Test.dFld *= i13;
            Test.instanceCount >>>= Test.instanceCount;
            if (Test.bFld) break;
            for (i14 = 1; i14 < 6; ++i14) {
                iArr1[i14 - 1] = i13;
                if (Test.bFld) {
                    d1 = 216;
                    i16 = 1;
                    while (++i16 < 2) {
                        f -= i13;
                        Test.byArrFld[i12] = (byte)Test.instanceCount;
                    }
                    i13 = (int)Test.instanceCount;
                    for (i17 = 1; i17 < 2; ++i17) {
                        f -= i15;
                        Test.instanceCount += i13;
                    }
                } else if (Test.bFld) {
                    bArr[i12] = Test.bFld;
                } else {
                    f += i14;
                }
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + Float.floatToIntBits(f) + i17 + i18
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i7, int i8) {

        int i9=0, i10=-60880, i11=165, iArr[]=new int[N];
        double d=0.116846;
        byte by=48;
        float f1=0.801F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 2.717F);
        FuzzerUtils.init(iArr, 40378);

        Test.instanceCount = i7;
        for (i9 = 6; 173 > i9; ++i9) {
            fArr[i9 - 1][i9] -= (++Test.instanceCount);
            switch ((i9 % 1) + 82) {
            case 82:
                if (false) {
                    for (d = i9; d < 9; d++) {
                        iArr[i9 - 1] *= iArr[i9 - 1];
                        Test.instanceCount = (long)((i7 - (Test.dFld++)) - ((i9 + Test.instanceCount) >> Test.sFld));
                        iArr[i9] >>= (by = (byte)i11);
                        Test.sFld1 = (short)(i7 + lMeth1());
                        i11 += i7;
                    }
                    i8 += (int)1.891F;
                    by = (byte)-54095;
                }
                if (Test.bFld) continue;
                break;
            }
            f1 %= (i7 | 1);
        }
        long meth_res = i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + by + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=-5899, i1=55581, i2=-229, i3=-13145, i4=41739, i5=-10, i6=-11;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7711L);

        for (i = 156; 5 < i; --i) {
            if (Test.bFld) {
                for (i2 = 10; i2 > 1; i2--) {
                    for (i4 = 1; i4 < 2; ++i4) {
                        i6 = (int)lMeth(i5, i);
                        i6 += (i4 + i);
                        i6 *= i4;
                        Test.instanceCount -= -4;
                        Test.sFld |= (short)Test.instanceCount;
                        i1 -= 27;
                        switch ((i2 % 5) + 70) {
                        case 70:
                            i6 >>= i3;
                            i3 |= (int)247L;
                            Test.instanceCount >>= i3;
                            i3 = i6;
                            break;
                        case 71:
                            lArr[i] >>= i5;
                            break;
                        case 72:
                            Test.instanceCount += (i4 * i4);
                            break;
                        case 73:
                            Test.instanceCount <<= Test.instanceCount;
                        case 74:
                            i3 = (int)Test.instanceCount;
                            break;
                        }
                    }
                }
            } else {
                i1 += Test.sFld;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=50801, i20=14, i21=-149, i22=-7, i23=-10, i24=-45, i25=0, i26=173, i27=12, iArr2[]=new int[N];
        float f2=-2.560F;
        long l=86L;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -27399);
        FuzzerUtils.init(dArr, -2.120649);

        vMeth();
        i19 = 1;
        do {
            iArr2[i19 - 1] >>>= -9;
            dArr[i19 + 1] -= -110;
            Test.fArrFld = Test.fArrFld;
            Test.dFld -= i19;
            for (i20 = i19; i20 < 80; ++i20) {
                byFld -= (byte)i20;
                i21 = i20;
                for (i22 = 1; i22 > i20; --i22) {
                    Test.instanceCount *= -201;
                }
                Test.dFld -= -82;
                Test.dFld = i20;
                f2 = i23;
                i23 -= i20;
                i23 >>>= (int)Test.instanceCount;
                i23 += (int)(3039145631386132944L + (i20 * i20));
                i24 = 1;
                while (++i24 < 1) {
                    i23 *= i19;
                    Test.instanceCount += i23;
                    Test.instanceCount += 8L;
                    i21 = (int)l;
                }
            }
            i21 *= i20;
            i23 = i24;
            for (i25 = 4; i25 < 80; ++i25) {
                Test.instanceCount += (i25 ^ i22);
                i27 = 1;
                do {
                    i26 *= (int)Test.dFld;
                    iArr2[i19] *= -9;
                    Test.instanceCount = l;
                } while (++i27 < 2);
            }
        } while (++i19 < 315);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
