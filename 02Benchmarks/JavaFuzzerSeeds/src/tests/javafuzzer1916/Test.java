package tests.javafuzzer1916;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:52:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3870L;
    public float fFld=-29.305F;
    public static float fFld1=45.549F;
    public static double dFld=2.8899;
    public static byte byFld=-104;
    public static volatile short sFld=11049;
    public volatile boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i3=-2, i4=222, i5=-42310, i6=-47, i7=-5, i8=-138, i9=11;
        double d=20.41161;
        byte by=-76;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-276);

        for (i3 = 9; i3 < 159; i3 += 3) {
            d -= i3;
            for (i5 = i3; i5 < 31; ++i5) {
                i4 -= i6;
                d = l;
                i6 *= (int)Test.fFld1;
                for (i7 = 1; i7 < 1; i7++) {
                    sArr[i7] <<= by;
                    i6 += i7;
                }
                switch ((i5 % 2) + 8) {
                case 8:
                    switch ((i5 % 6) + 93) {
                    case 93:
                        i9 = i4;
                        i6 += (i5 * i5);
                        i6 >>= i5;
                        break;
                    case 94:
                        Test.fFld1 = l;
                        break;
                    case 95:
                        Test.fFld1 -= i7;
                    case 96:
                        i9 += i5;
                        break;
                    case 97:
                        by += (byte)i4;
                        break;
                    case 98:
                        l = i7;
                        break;
                    }
                    break;
                case 9:
                    i4 = by;
                    break;
                }
            }
        }
        vMeth2_check_sum += l + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + by + i9 +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth1() {

        boolean b=true;
        int i10=-225, i11=63, i12=2, i13=-76, i14=25007, i15=-48585, i16=12, i17=4, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 206);

        vMeth2(Test.instanceCount);
        b = b;
        for (i10 = 4; i10 < 126; i10++) {
            b = b;
        }
        iArr[(i10 >>> 1) % N][(0 >>> 1) % N] *= i10;
        Test.dFld = 102.85764;
        i11 = 51;
        for (i12 = 14; i12 < 292; i12++) {
            Test.byFld = (byte)Test.instanceCount;
            for (i14 = 1; i14 < 6; i14++) {
                for (i16 = i12; i16 < 2; i16++) {
                    i11 += Test.sFld;
                    Test.instanceCount += (long)Test.fFld1;
                    Test.byFld = (byte)i17;
                    b = b;
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2, float f) {


        vMeth1();
        vMeth_check_sum += i2 + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=31589, i1=-12, i18=-1, i19=-8, i20=-39, i21=-5806, i22=-32214, i23=208, i24=-40635, i25=-149, i26=198,
            i27=-221, iArr1[]=new int[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -62822L);
        FuzzerUtils.init(iArr1, -244);
        FuzzerUtils.init(dArr, 60.129836);

        for (i = 6; i < 301; ++i) {
            i1 += (((i * Test.instanceCount) + fFld) - i1);
            vMeth(i, Test.fFld1);
            switch ((i % 2) + 22) {
            case 22:
                for (i18 = 1; 85 > i18; i18 += 3) {
                    i1 *= i;
                }
                Test.dFld += 14;
                lArr[i - 1] += i1;
            case 23:
                i20 -= i;
                Test.instanceCount -= i1;
                for (i21 = 85; 1 < i21; i21 -= 3) {
                    i1 += (int)Test.instanceCount;
                    i20 += (i21 * i21);
                    i19 += i19;
                    iArr1[i + 1] -= i22;
                    Test.instanceCount <<= i;
                    i1 = i19;
                }
                break;
            }
            Test.instanceCount = 170L;
            switch ((i % 7) + 66) {
            case 66:
                i23 = 85;
                while (--i23 > 0) {
                    for (i24 = 1; 1 < i24; i24 -= 3) {
                        iArr1[i] = (int)Test.instanceCount;
                        i19 += (((i24 * Test.instanceCount) + i20) - i22);
                        iArr1[i24] ^= (int)Test.instanceCount;
                    }
                    i22 = (int)Test.instanceCount;
                    bFld = false;
                    i25 += i23;
                    for (i26 = 1; i26 < 1; i26++) {
                        i25 <<= 6;
                        Test.instanceCount = Test.instanceCount;
                    }
                }
                break;
            case 67:
                dArr[i + 1] *= i;
            case 68:
                Test.instanceCount = 3;
                break;
            case 69:
                iArr1[i] &= i20;
                break;
            case 70:
                Test.instanceCount <<= Test.instanceCount;
                break;
            case 71:
                iArr1[i - 1] <<= (int)Test.instanceCount;
            case 72:
                Test.instanceCount *= 48664;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
