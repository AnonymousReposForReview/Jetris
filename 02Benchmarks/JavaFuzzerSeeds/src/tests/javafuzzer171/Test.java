package tests.javafuzzer171;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:14:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=32L;
    public int iFld=-174;
    public static short sFld=-25432;
    public static byte byFld=-18;
    public static double dFld=-98.73398;
    public int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.59F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public void vMeth(int i, short s) {

        double d=-1.44016, d1=2.55347;
        byte by=-19;
        int i1=10944, i2=193, i3=57960, i4=-49504, i5=26642;
        float f1=0.82F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -123.474F);

        i = (int)(d * ((by - Test.instanceCount) - (9L - (--iArrFld[(i >>> 1) % N]))));
        for (i1 = 6; i1 < 307; ++i1) {
            i3 = 1;
            while (++i3 < 5) {
                boolean b=true;
                if ((b = b) || ((f1--) != (i2--))) continue;
                try {
                    iArrFld[i1] = (-57675 % iArrFld[i1 + 1]);
                    i2 = (i / -56992);
                    i2 = (i % i3);
                } catch (ArithmeticException a_e) {}
                switch ((i3 % 1) + 22) {
                case 22:
                    for (i4 = 1; i4 < 1; i4++) {
                        f1 = Math.abs(-(Test.instanceCount++));
                        i2 += (i4 * i4);
                        i5 *= (int)((--Test.instanceCount) + (iArrFld[i3] * (Test.instanceCount * iFld)));
                        iArrFld[i1 - 1] = i2;
                        if (i5 != 0) {
                            vMeth_check_sum += i + s + Double.doubleToLongBits(d) + by + i1 + i2 + i3 +
                                Float.floatToIntBits(f1) + i4 + i5 + Double.doubleToLongBits(d1) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        i -= (int)(d1--);
                    }
                    d1 = ((f1 * (-8 + iFld)) - -33188);
                    break;
                }
                try {
                    iArrFld[(i3 >>> 1) % N] = (i3 / 1871188591);
                    i = (i3 / iArrFld[i3 - 1]);
                    i = (i2 / 32373);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i + s + Double.doubleToLongBits(d) + by + i1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5
            + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(long l1, int i13, double d3) {

        int i14=-14, i15=240, i16=-52683;
        float f3=118.439F;
        boolean b1=false;

        Test.dFld += 207L;
        i13 = i13;
        l1 += (long)21.339F;
        Test.instanceCount += i13;
        if (true) {
            i14 = 1;
            while (++i14 < 222) {
                i13 >>= i13;
                i15 = 1;
                while (++i15 < 7) {
                    Test.byFld = (byte)l1;
                    i13 >>>= i15;
                    i16 = 1;
                    do {
                        i13 = -45862;
                        Test.dFld /= (l1 | 1);
                        l1 += (i16 * i16);
                        i13 += i15;
                    } while (++i16 < 1);
                }
            }
        } else if (true) {
            f3 = 40428;
        } else if (b1) {
            Test.instanceCount += (long)f3;
        }
        long meth_res = l1 + i13 + Double.doubleToLongBits(d3) + i14 + i15 + i16 + Float.floatToIntBits(f3) + (b1 ? 1 :
            0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i11, int i12) {

        float f2=20.644F, f4=-104.193F;
        int i17=20692, i18=38719, i19=-6, i20=-20547, i21=-81, iArr[]=new int[N];
        boolean b2=true;

        FuzzerUtils.init(iArr, -20569);

        f2 = 1;
        while (++f2 < 191) {
            i11 = iMeth1(Test.instanceCount, i11, 127.97297);
            i12 += (int)(((f2 * i11) + Test.instanceCount) - i11);
            if (i11 != 0) {
                vMeth1_check_sum += i11 + i12 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) +
                    Float.floatToIntBits(f4) + i21 + FuzzerUtils.checkSum(iArr);
                return;
            }
            for (i17 = 8; i17 > 1; --i17) {
                for (i19 = i17; i19 < 2; i19 += 2) {
                    b2 = b2;
                    i20 += i17;
                }
                Test.instanceCount += Test.instanceCount;
                for (f4 = 1; 2 > f4; f4++) {
                    i20 += (int)(f4 * f4);
                    iArr[(int)(f2 - 1)] ^= (int)-3512203252608695426L;
                    Test.instanceCount = i21;
                    i18 >>= i12;
                    i11 |= i18;
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) +
            Float.floatToIntBits(f4) + i21 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i9=-37682, i10=-106, i22=210, i23=143, i24=-6, i25=162, i26=-254, iArr1[]=new int[N];
        double d4=1.96467;
        float f5=106.781F;

        FuzzerUtils.init(iArr1, -29858);

        for (i9 = 2; 138 > i9; i9++) {
            Test.instanceCount *= (long)Test.dFld;
        }
        vMeth1(i10, 7);
        i10 = 7;
        for (d4 = 2; d4 < 167; ++d4) {
            Test.instanceCount += Test.instanceCount;
        }
        iArr1[(47347 >>> 1) % N] = i22;
        for (i23 = 7; 149 > i23; i23++) {
            Test.instanceCount += (32517L + (i23 * i23));
            f5 -= Test.instanceCount;
            Test.instanceCount += i9;
            for (i25 = i23; i25 < 11; i25 += 2) {
                i24 += (int)1.71147;
                Test.fArrFld[i25] -= i23;
                i26 = Test.byFld;
            }
        }
        long meth_res = i9 + i10 + Double.doubleToLongBits(d4) + i22 + i23 + i24 + Float.floatToIntBits(f5) + i25 + i26
            + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i6=-63, i7=11, i8=-10, i27=-10, i28=0, i29=8, i30=-1;
        double d2=0.110397;
        long l=2900616091L, lArr[]=new long[N];
        boolean b3=false;
        float f6=-1.508F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(byArr, (byte)28);

        vMeth(iFld, (short)(++Test.sFld));
        for (i6 = 1; i6 < 227; i6++) {
            i7 = Test.byFld;
            i8 = 111;
            while ((i8 -= 3) > 0) {
                iFld = (int)((--Test.instanceCount) - (-(-i6)));
                if (b3) {
                    Test.instanceCount += (((i8 * i6) + i7) - i7);
                } else if (b3) {
                    iArrFld[i8] -= (int)(((--d2) * Float.intBitsToFloat(10398)) - (Math.abs(iFld) + iFld));
                    iFld += (((i8 * i8) + l) - i6);
                    iFld = (int)((Test.instanceCount - iMeth()) - i6);
                    if (false) break;
                }
                switch ((i8 % 7) + 22) {
                case 22:
                    Test.instanceCount = iFld;
                    break;
                case 23:
                    lArr[i8 + 1] -= i8;
                    if (b3) break;
                    break;
                case 24:
                    i7 -= i6;
                    for (i27 = 1; i27 < 3; i27++) {
                        f6 += iFld;
                        d2 -= 19;
                        iArrFld = iArrFld;
                    }
                    break;
                case 25:
                    iFld += (i8 - Test.sFld);
                case 26:
                    i28 += (i8 * i8);
                    for (i29 = 1; i29 < 3; ++i29) {
                        iArrFld[i29 + 1] = i28;
                        if (b3) continue;
                        i28 += (((i29 * i30) + i28) - i7);
                        byArr[i6] = (byte)i28;
                        i28 <<= i7;
                        f6 = i7;
                        dArrFld[(i6 >>> 1) % N] -= iFld;
                    }
                    break;
                case 27:
                    lArr = lArr;
                    break;
                case 28:
                    i7 = (int)d2;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
