package tests.javafuzzer1511;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:56:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-105L;
    public static int iFld=-142;
    public static byte byFld=-40;
    public static double dFld=0.87164;
    public static volatile int iFld1=-179;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 142);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f1=-110.897F;
        long l2=3530731290L, l3=3926223115L;
        double d1=86.116824, d2=0.74977;
        int i3=-69, i4=-12, i5=-7, i6=10, i7=154;
        short s=-2995;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-53);

        f1 /= (l2 | 1);
        Test.iFld <<= -211;
        for (d1 = 239; d1 > 13; d1 -= 2) {
            for (l3 = 1; l3 < 14; ++l3) {
                i4 += (int)(((l3 * Test.instanceCount) + Test.iFld) - i4);
                for (i5 = 1; i5 < 2; i5++) {
                    i3 >>= Test.byFld;
                }
            }
            d2 = i5;
            f1 /= -222;
            i7 = 1;
            while (++i7 < 14) {
                i4 <<= s;
            }
            i3 = -237;
            Test.iFld = Test.byFld;
            i3 += i5;
            byArr[(int)(d1)] = (byte)i6;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l2 + Double.doubleToLongBits(d1) + i3 + l3 + i4 + i5 + i6 +
            Double.doubleToLongBits(d2) + i7 + s + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(long l1, float f) {

        int i8=12, i9=15477, i10=-2892, i11=0, i12=8027;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-5817);

        for (int i2 : Test.iArrFld) {
            l1 = (i2 - (Math.min(i2, i2) + (i2 + Test.instanceCount)));
            vMeth1();
        }
        for (i8 = 6; i8 < 343; ++i8) {
            i10 = 1;
            while (++i10 < 5) {
                Test.iArrFld[i10] = (int)Test.dFld;
                i9 += (int)-421697218L;
                i9 -= (int)f;
            }
            Test.iArrFld[i8 - 1] -= Test.iFld;
            i9 = i8;
        }
        for (i11 = 215; i11 > 8; --i11) {
            short s1=-20013;
            sArr[i11 - 1] = s1;
        }
        Test.instanceCount &= i9;
        i12 += (int)Test.instanceCount;
        i12 = Test.iFld;
        long meth_res = l1 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i1, long l) {

        double d=-77.71127, d3=-25.76549, dArr[][]=new double[N][N];
        float f2=89.329F;
        int i13=9, i14=160, i15=-43836, i16=1, i17=183, i18=1, i19=-3, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -187);
        FuzzerUtils.init(dArr, -11.90989);

        i1 = (int)(((Test.instanceCount ^ i1) + (i1 - 126)) * (--d));
        Test.instanceCount -= Test.iArrFld[(i1 >>> 1) % N];
        d -= (--Test.instanceCount);
        Test.iArrFld[(i1 >>> 1) % N] = iMeth(Test.instanceCount, f2);
        for (i13 = 205; i13 > 12; i13 -= 2) {
            for (i15 = i13; i15 < 16; ++i15) {
                Test.instanceCount <<= i14;
            }
            d3 = 1;
            while (++d3 < 16) {
                if (b) break;
            }
        }
        i17 = 1;
        do {
            switch ((i17 % 8) + 4) {
            case 4:
                for (i18 = 1; i18 < 6; i18++) {
                    i14 *= i15;
                    Test.iFld *= -11;
                    Test.iArrFld[i17] = i14;
                }
                break;
            case 5:
                Test.iArrFld[i17 + 1] += i1;
            case 6:
                Test.instanceCount = l;
                break;
            case 7:
                if (true) continue;
                break;
            case 8:
                Test.iArrFld = iArr;
                break;
            case 9:
                f2 = 123;
                break;
            case 10:
                i16 <<= Test.iFld;
            case 11:
                dArr[i17 - 1][i17 + 1] = l;
            default:
                d = Test.iFld;
            }
        } while (++i17 < 252);
        vMeth_check_sum += i1 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d3) + (b ? 1 : 0) + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=0, i20=7, i21=148, i22=-189, i23=-26029, i24=46, i25=-15750, i26=1, i27=53631, i28=-34872, i29=9,
            i30=-45, i31=-21;
        boolean b1=true;
        short s2=13627, sArr1[]=new short[N];
        float f3=1.549F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(sArr1, (short)-8190);
        FuzzerUtils.init(lArr, 252L);

        Test.instanceCount |= i;
        vMeth(i, Test.instanceCount);
        for (i20 = 11; i20 < 351; ++i20) {
            Test.iFld = i21;
            i = (int)Test.instanceCount;
            if (b1) break;
            i21 *= s2;
            for (i22 = 4; i22 < 74; ++i22) {
                sArr1[i22 + 1] *= (short)i22;
                i23 |= (int)-2658157754L;
            }
            lArr[(i22 >>> 1) % N][i20 - 1] = i22;
            i23 += s2;
            s2 -= s2;
        }
        Test.iArrFld[(i21 >>> 1) % N] += (int)Test.dFld;
        Test.iArrFld[(i20 >>> 1) % N] -= s2;
        i <<= i22;
        for (i24 = 9; i24 < 380; i24 += 3) {
            f3 += (-12L + (i24 * i24));
            i25 = 59054;
            i += (-62 + (i24 * i24));
        }
        i26 = 1;
        do {
            lArr[i26][i26 - 1] = -23802;
            i -= (int)4255620802116035228L;
            for (i27 = 1; 73 > i27; ++i27) {
                i29 = 1;
                while (++i29 < 2) {
                    Test.instanceCount <<= i26;
                }
                for (i30 = 1; i30 < 2; i30 += 3) {
                    if (b1) break;
                    i = Test.iFld1;
                    Test.instanceCount -= i20;
                }
            }
        } while (++i26 < 343);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
