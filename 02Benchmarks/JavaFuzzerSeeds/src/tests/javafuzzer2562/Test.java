package tests.javafuzzer2562;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:39:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=454825031L;
    public static float fFld=17.651F;
    public static short sFld=-26104;
    public volatile long lArrFld[]=new long[N];

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        long l1=-31645L;
        int i7=1, i8=14, i10=-224, i11=-43713, i12=53, i13=-30988, iArr[]=new int[N];
        float f=-2.981F;
        boolean b=false;
        double d1=0.92226;

        FuzzerUtils.init(iArr, -2);

        l1 = 316;
        do {
            i7 = -4;
            f += (l1 - i7);
            i8 = 1;
            while (++i8 < 5) {
                f += i8;
                i7 <<= -57383;
                if (b) continue;
            }
            iArr[(i8 >>> 1) % N] >>= i7;
            if (b) break;
            for (i10 = (int)(l1); i10 < 5; ++i10) {
                for (i12 = 1; i12 < 1; i12++) {
                    d1 -= i8;
                    try {
                        iArr[(int)(l1)] = (i11 % 55);
                        iArr[i10 - 1] = (31078 / iArr[i12 + 1]);
                        i11 = (-712603817 % i7);
                    } catch (ArithmeticException a_e) {}
                    i7 += (i12 - i12);
                    i13 >>= i11;
                }
            }
        } while (--l1 > 0);
        vMeth_check_sum += l1 + i7 + Float.floatToIntBits(f) + i8 + (b ? 1 : 0) + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i6) {


        vMeth();
        long meth_res = i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i4, int i5, long l) {

        short s=-495;
        int i14=-173, i15=49760, i16=-62998, i17=-24, i18=-50509, iArr1[]=new int[N];
        boolean b1=true;
        long l2=-13L;
        byte by=-15;

        FuzzerUtils.init(iArr1, 128);

        i5 *= (int)(-1840862415L + ((i5 - i4) >> (s - 14)));
        iMeth(i5);
        Test.fFld -= i5;
        i4 = i4;
        i4 = i4;
        for (i14 = 10; i14 < 204; ++i14) {
            for (i16 = 1; i16 < 8; ++i16) {
                if (b1) continue;
                iArr1[i14 - 1] = i15;
                for (l2 = i14; l2 < 2; ++l2) {
                    i17 -= i18;
                    i5 += (int)(((l2 * Test.fFld) + by) - l);
                    i4 += (int)l2;
                    i17 += (156 + (l2 * l2));
                    i17 = (int)l;
                }
            }
        }
        long meth_res = i4 + i5 + l + s + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + l2 + i18 + by +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=156, i1=-46546, i2=29779, i3=58, i19=-63974, i20=-11942, i21=-14389, i22=-20, i23=-3, i24=175, i25=-12,
            iArr2[]=new int[N];
        double d=96.120326;
        long l3=8273L;
        byte by1=-63;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)32263);
        FuzzerUtils.init(iArr2, 0);

        for (i = 17; i < 276; i++) {
            d += (++i1);
            for (i2 = 1; 97 > i2; ++i2) {
                i3 = ((sArr[i + 1] * i2) & sMeth(i, 13, Test.instanceCount));
                Test.instanceCount = i2;
                Test.fFld = i;
                Test.fFld = (float)d;
                iArr2[i2 - 1] += (int)Test.instanceCount;
                i3 = i;
                iArr2[i2] = i1;
                for (i19 = 1; i19 < 2; i19++) {
                    i3 >>>= i1;
                }
                iArr2[i] >>= i19;
            }
            lArrFld[i - 1] = i3;
            Test.instanceCount += i;
            iArr2[(-34329 >>> 1) % N] %= (int)(i20 | 1);
        }
        i20 -= 10;
        iArr2[(i3 >>> 1) % N] = i1;
        for (i21 = 7; i21 < 350; i21++) {
            i22 = i;
        }
        for (i23 = 2; i23 < 234; ++i23) {
            i1 -= Test.sFld;
            Test.instanceCount >>>= i19;
            Test.instanceCount %= 14970;
            switch (((i22 >>> 1) % 2) + 117) {
            case 117:
                i20 += (i23 ^ Test.sFld);
                break;
            case 118:
                Test.instanceCount = i24;
                for (l3 = i23; l3 < 108; ++l3) {
                    i25 = i22;
                    iArr2[(int)(l3)] -= i19;
                }
                break;
            default:
                by1 += (byte)(((i23 * Test.fFld) + i20) - l3);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
