package tests.javafuzzer543;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:26:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1019905953L;
    public static double dFld=-2.119694;
    public static byte byFld=16;
    public static short sFld=24269;
    public long lArrFld[]=new long[N];
    public volatile long lArrFld1[]=new long[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 40.91291);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d) {

        int i7=6, i8=-9, i9=-14, i10=-36348, iArr[]=new int[N];
        long l3=39381L;
        float f2=74.491F, fArr1[]=new float[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)26);
        FuzzerUtils.init(fArr1, 2.1015F);
        FuzzerUtils.init(iArr, 164);

        byArr[(-11 >>> 1) % N][(i7 >>> 1) % N] -= (byte)Test.dFld;
        fArr1 = fArr1;
        l3 = 1;
        while (++l3 < 349) {
            Test.instanceCount %= ((long)(f2) | 1);
            Test.instanceCount += (((l3 * Test.instanceCount) + l3) - i7);
            if (i7 != 0) {
            }
            i7 = i7;
            Test.instanceCount += (((l3 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            for (i8 = 1; i8 < 5; i8++) {
                i10 = 2;
                while (--i10 > 0) {
                    switch ((((i7 >>> 1) % 3) * 5) + 52) {
                    case 64:
                        i7 &= (int)Test.instanceCount;
                        f2 += (((i10 * i9) + l3) - f2);
                        break;
                    case 63:
                        i7 = i8;
                        iArr[(int)(l3 - 1)] += i8;
                        break;
                    case 67:
                        i9 += Test.byFld;
                        break;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i7 + l3 + Float.floatToIntBits(f2) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, long l2, float f1) {

        int i5=26253, i6=46499;

        for (i5 = 2; i5 < 250; i5++) {
            l2 %= (iMeth(-1.81040) | 1);
            Test.sFld = (short)4;
        }
        i6 += i6;
        i6 -= (int)2L;
        Test.dFld -= i6;
        i6 = (int)l1;
        vMeth1_check_sum += l1 + l2 + Float.floatToIntBits(f1) + i5 + i6;
    }

    public void vMeth(long l) {

        int i1=6, i2=39244, i3=12, i4=-137, i11=-8, i12=4;
        boolean b=true;
        float f3=-27.909F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.886F);

        for (i1 = 173; i1 > 3; --i1) {
            if (((i2 += (-(i2 * i1))) != (lArrFld[i1 + 1] -= (long)Test.dFld)) && b) continue;
            for (i3 = 1; i3 < 9; ++i3) {
                i4 += (int)(-5896400756331140802L + (i3 * i3));
                fArr[i3 + 1] = (--i2);
            }
            vMeth1(Test.instanceCount, 48328L, f3);
            i4 = (int)l;
            for (i11 = 1; i11 < 9; i11++) {
                Test.dFld = i2;
                i12 *= Test.sFld;
                switch ((i11 % 9) + 127) {
                case 127:
                    if (i12 != 0) {
                        vMeth_check_sum += l + i1 + i2 + (b ? 1 : 0) + i3 + i4 + Float.floatToIntBits(f3) + i11 + i12 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    i4 = i11;
                    i2 = 22718;
                    break;
                case 128:
                    b = b;
                    break;
                case 129:
                    l = (long)Test.dFld;
                case 130:
                    i4 += (int)l;
                    break;
                case 131:
                    i4 = i11;
                    break;
                case 132:
                    if (false) continue;
                    break;
                case 133:
                    lArrFld1[i11] = i12;
                case 134:
                    lArrFld[i1] += i4;
                    break;
                case 135:
                default:
                    l >>= i11;
                }
            }
        }
        vMeth_check_sum += l + i1 + i2 + (b ? 1 : 0) + i3 + i4 + Float.floatToIntBits(f3) + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f=-2.486F;
        int i=12, i13=-7, i14=215, i15=138, i16=34361, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -234);

        for (f = 16; f < 260; ++f) {
            i += (int)(f * i);
            vMeth(Test.instanceCount);
            for (i13 = 4; i13 < 103; i13++) {
                i = i14;
                Test.dArrFld[i13 + 1] -= Test.instanceCount;
                i *= i;
                i15 = 1;
                while (++i15 < 2) {
                    switch (((i13 % 2) * 5) + 1) {
                    case 2:
                        i >>= i15;
                        Test.instanceCount -= (long)Test.dFld;
                        lArrFld[(int)(f)] ^= -143;
                        break;
                    case 7:
                        Test.dFld *= Test.dFld;
                        Test.instanceCount += -4212074308L;
                    default:
                        i14 += (i15 ^ i13);
                        i -= i15;
                        Test.instanceCount >>= i15;
                    }
                    i14 = (int)f;
                    Test.instanceCount = Test.instanceCount;
                    i -= 5844;
                    i -= (int)2.609F;
                    i14 /= -218;
                    iArr1[(int)(f)] = (int)f;
                    Test.dFld += Test.instanceCount;
                }
                Test.byFld = (byte)i13;
                i16 >>= (int)Test.instanceCount;
                i14 += i13;
            }
            lArrFld1[(int)(f + 1)] += i16;
            Test.instanceCount += (long)(f + i14);
            i = i16;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
