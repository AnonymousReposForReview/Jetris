package tests.javafuzzer378;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:04:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public int iFld=-108;
    public static short sFld=-12478;
    public byte byFld=95;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 679452094634175774L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f1=2.566F;
        int i4=-11, i5=4, i6=95, i7=12, i8=-3, i9=-52362, i10=-65, iArr1[]=new int[N];
        short s=-10053;

        FuzzerUtils.init(iArr1, 12);

        f1 = 1;
        do {
            Test.lArrFld[(int)(f1 + 1)] = i4;
            i4 = (int)Test.instanceCount;
            for (i5 = 1; i5 < 10; ++i5) {
                i6 = -34859;
                Test.instanceCount = i5;
                for (i7 = 1; i7 < 2; i7++) {
                    i8 += (((i7 * i5) + s) - i8);
                    i6 += (i7 ^ i5);
                    iArr1[i5 + 1] = i4;
                }
                i6 += i5;
                iArr1[(int)(f1)] = i7;
                for (i9 = 1; i9 < 2; ++i9) {
                    Test.instanceCount = Test.instanceCount;
                    i4 &= (int)Test.instanceCount;
                }
            }
        } while (++f1 < 166);
        vMeth_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + s + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1() {

        int i11=-34910, i12=-5, i13=145, i14=100, i15=11;
        byte by=98;
        float f2=1.950F;
        boolean b=false;

        vMeth();
        i11 -= Test.sFld;
        for (i12 = 20; i12 < 395; i12 += 2) {
            i13 *= i13;
            i13 -= i12;
            i14 = 9;
            while (--i14 > 0) {
                i13 >>= i11;
                i13 += i12;
                if (b) {
                    by += (byte)i14;
                    f2 = Test.instanceCount;
                    Test.instanceCount ^= i13;
                    i13 = i15;
                }
                Test.instanceCount *= i13;
                i11 *= i15;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + by + Float.floatToIntBits(f2) + i15 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, int i1) {

        double d=0.78313, d1=0.18496;
        int i2=-4, i3=-224, i16=10930, i17=-41571, i18=15439, i19=-211, i20=27806, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 108);

        Test.lArrFld[(i1 >>> 1) % N] = (long)(((i1 - d) + 235) * ((i1 - i1) * (-(i1 - f))));
        for (i2 = 20; i2 < 329; i2++) {
            d = f;
            if (i3 != 0) {
            }
        }
        d *= Integer.reverseBytes(iMeth1());
        for (i16 = 1; i16 < 167; i16++) {
            if (i17 != 0) {
            }
            iArr2[i16 - 1] += 110;
            if (b1) continue;
            for (d1 = 1; 10 > d1; ++d1) {
                i3 = i3;
                for (i19 = 1; i19 < 2; i19 += 3) {
                    f -= i3;
                    i3 = -47115;
                    if (i16 != 0) {
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + i2 + i3 + i16 + i17 + (b1 ? 1 : 0)
            + Double.doubleToLongBits(d1) + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i21=-13, i22=217, i23=1187, i24=-5, i25=-221, i26=10224, i27=220, i28=-194, i29=10, i30=70, i31=12,
            iArr[]=new int[N];
        float f3=-90.589F;
        byte byArr[]=new byte[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr, -27720);
        FuzzerUtils.init(byArr, (byte)61);
        FuzzerUtils.init(dArr, 25.126105);

        i = 206;
        do {
            try {
                iArr[i] = (i % i);
                iFld = (906660064 / i);
                iFld = (iFld % iArr[i + 1]);
            } catch (ArithmeticException a_e) {}
            iMeth(f3, iFld);
            for (i21 = 14; i21 < 243; ++i21) {
                iFld *= (int)Test.instanceCount;
                i22 = 46;
                byFld -= (byte)i;
                Test.lArrFld[i21] += -24018;
                i23 = 1;
                while (++i23 < 2) {
                    byArr[i + 1] = (byte)-30970;
                    Test.lArrFld[i23 - 1] += i23;
                    iFld = byFld;
                }
                for (i24 = 1; i24 < 2; ++i24) {
                    try {
                        iArr[i24 - 1] = (-153 / i23);
                        iFld = (i25 % i23);
                        i25 = (iArr[i] / i23);
                    } catch (ArithmeticException a_e) {}
                    dArr[(i23 >>> 1) % N][i21 - 1] = i21;
                    i25 = i21;
                }
                iFld += i21;
            }
            Test.instanceCount += (((i * i25) + iFld) - i);
            Test.instanceCount = i23;
            for (i26 = 243; i26 > 10; i26 -= 2) {
                i27 += (int)Test.instanceCount;
            }
            i22 = i24;
            iArr[i] = i25;
            i22 >>>= i26;
        } while ((i -= 2) > 0);
        for (i28 = 5; i28 < 322; ++i28) {
            i30 = 1;
            while (++i30 < 79) {
                Test.sFld += (short)-2.77326;
                iFld = iFld;
            }
            i25 = 1;
            i27 *= i31;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
