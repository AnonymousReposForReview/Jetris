package tests.javafuzzer166;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:12:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-203L;
    public static byte byFld=111;
    public static float fFld=-56.942F;
    public static short sFld=-29119;
    public boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1, byte by, int i5) {

        long l1=-239L;
        float f=-117.477F;
        int i6=-41384, i7=199, i8=51950, i9=50063;
        short s=18660;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 85.17535);

        l1 = 339;
        while (--l1 > 0) {
            Test.lArrFld[(int)(l1 + 1)] >>= l1;
            dArr = dArr;
            i5 -= (int)978178455L;
            i5 = i5;
            f += -51824;
            switch ((int)((l1 % 4) + 90)) {
            case 90:
                for (i6 = 1; 5 > i6; i6++) {
                    s = (short)Test.instanceCount;
                    i7 = (int)l1;
                    i7 = i7;
                    for (i8 = (int)(l1); i8 < 2; ++i8) {
                        f *= s;
                        i9 += 194;
                    }
                    i7 += (i6 * i6);
                }
            case 91:
                Test.instanceCount += (l1 * l1);
                break;
            case 92:
                Test.instanceCount += l1;
                break;
            case 93:
                i7 = i5;
                break;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + by + i5 + l1 + Float.floatToIntBits(f) + i6 + i7 + s + i8 +
            i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i4, double d) {

        int i10=10, i11=-41572, i12=-181, i13=-129, i14=62063, iArr[]=new int[N];
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(dArr1, -63.111972);

        vMeth2(d, Test.byFld, i4);
        iArr = iArr;
        Test.byFld >>= (byte)Test.instanceCount;
        i4 = i4;
        iArr = iArr;
        for (i10 = 10; i10 < 254; ++i10) {
            i4 += (i10 * i10);
            switch (((i10 % 4) * 5) + 34) {
            case 53:
                i12 = 7;
                do {
                    for (i13 = 1; 1 > i13; ++i13) {
                        i11 = i10;
                        Test.instanceCount += (((i13 * Test.instanceCount) + i10) - Test.instanceCount);
                        Test.lArrFld[i12 + 1] -= (long)Test.fFld;
                    }
                    i4 += (254 + (i12 * i12));
                    iArr[i10] *= (int)Test.fFld;
                } while (--i12 > 0);
                break;
            case 54:
                dArr1[i10][i10] = -4913792455935061620L;
                break;
            case 38:
            case 43:
                Test.fFld += ((long)i10 | (long)i4);
                break;
            default:
                d = -2250708148841973224L;
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth(boolean b, int i3, long l) {

        double d2=54.66930, dArr2[][]=new double[N][N];

        FuzzerUtils.init(dArr2, 24.92402);

        vMeth1(i3, d2);
        dArr2[(-4311 >>> 1) % N][(i3 >>> 1) % N] = Test.fFld;
        vMeth_check_sum += (b ? 1 : 0) + i3 + l + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2));
    }

    public void mainTest(String[] strArr1) {

        int i=-29461, i1=201, i2=-195, i15=131, i16=-24789, i17=8, i18=14, i19=-11, i20=199, iArr1[]=new int[N];
        boolean b1=true;
        double d3=0.109590, d4=-2.5053;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 31758);
        FuzzerUtils.init(fArr, -29.205F);

        i -= (-181 * (++i));
        bArrFld[(11 >>> 1) % N] = ((++i) <= Integer.reverseBytes(54));
        for (i1 = 16; 329 > i1; ++i1) {
            i2 -= i;
            vMeth(b1, i2, 690765214546616691L);
            switch ((i1 % 1) + 67) {
            case 67:
                Test.lArrFld[i1 - 1] = i;
                i2 -= i1;
            }
            i -= (int)Test.fFld;
            for (i15 = 3; i15 < 80; ++i15) {
                i2 = i1;
                iArr1[i1 + 1] >>= i15;
                i17 = 1;
                do {
                    iArr1[i17] <<= i;
                    fArr[i15] = 23501;
                    i2 >>= Test.byFld;
                    i16 += (((i17 * i) + i16) - i17);
                    Test.instanceCount <<= -21171;
                } while (++i17 < 2);
                Test.instanceCount *= (long)d3;
                for (i18 = 1; i18 < 2; i18++) {
                    Test.byFld = (byte)i17;
                    Test.instanceCount -= (long)d3;
                    Test.byFld += (byte)(((i18 * Test.sFld) + Test.fFld) - Test.instanceCount);
                    i += 7;
                }
                i16 = i19;
                for (d4 = 1; d4 < 2; d4++) {
                    Test.fFld += (float)(((d4 * Test.fFld) + i20) - i16);
                    Test.instanceCount |= Test.instanceCount;
                    i *= i18;
                    Test.instanceCount += (long)d4;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
