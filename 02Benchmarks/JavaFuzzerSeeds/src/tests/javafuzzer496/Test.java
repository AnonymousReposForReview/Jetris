package tests.javafuzzer496;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:41:27 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static double dFld=77.34588;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-104);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i4=-14935, i5=92, i6=62425, i7=5, i8=32114, i9=-3, i10=2, i11=-43, i12=30170;
        float f3=26.497F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.132F);

        for (i4 = 8; i4 < 273; ++i4) {
            i5 += (((i4 * f3) + i4) - f3);
            i5 <<= i4;
        }
        for (i6 = 21; 388 > i6; ++i6) {
            i7 = i5;
            for (i8 = 1; i8 < 5; ++i8) {
                i9 = i7;
                i10 += (i8 | l);
                fArr[i6 - 1][i8] -= i4;
                i9 = (int)-53.182F;
                Test.dFld *= i4;
                for (i11 = 1; i11 < 2; ++i11) {
                    f3 += (((i11 * l) + i6) - i12);
                    i7 = 22430;
                    i7 = i6;
                }
            }
        }
        vMeth1_check_sum += l + i4 + i5 + Float.floatToIntBits(f3) + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f2, byte by, double d) {

        int i3=-11, i13=13026, i14=-229, i15=-246, i16=216, i17=-31586, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 2);

        i3 = 1;
        do {
            vMeth1(Test.instanceCount);
            iArr1[i3 - 1] -= i3;
        } while (++i3 < 194);
        i13 = 1;
        do {
            iArr1[i13 + 1] *= i3;
            switch (((i13 % 1) * 5) + 123) {
            case 124:
                for (i14 = 1; i14 < 8; ++i14) {
                    f2 = i15;
                    for (i16 = 1; i16 < 2; ++i16) {
                        if (b) break;
                        Test.instanceCount += i16;
                        i15 -= (int)f2;
                        i15 >>= 209;
                        try {
                            i17 = (i17 % iArr1[i16 - 1]);
                            i15 = (i3 / iArr1[i14 + 1]);
                            i17 = (i14 / 6);
                        } catch (ArithmeticException a_e) {}
                        iArr1[i14 - 1] *= (int)Test.dFld;
                    }
                }
            }
        } while (++i13 < 209);
        vMeth_check_sum += Float.floatToIntBits(f2) + by + Double.doubleToLongBits(d) + i3 + i13 + i14 + i15 + i16 +
            i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i, int i1, float f1) {

        int i2=-5, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -118);

        i ^= (i >>= Math.min((int)(i1 * Test.instanceCount), ++i1));
        iArr[(i >>> 1) % N] = Test.byArrFld[(i2 >>> 1) % N];
        vMeth(f1, (byte)(-77), Test.dFld);
        i2 = i1;
        i = i1;
        i1 += i;
        long meth_res = i + i1 + Float.floatToIntBits(f1) + i2 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.474F;
        int i18=9, i19=-6, i20=239, i21=-249, i22=0, i23=-6, i24=13, iArr2[]=new int[N];
        byte by1=5;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -23315);

        f -= lMeth(i18, -3, f);
        i19 = 1;
        do {
            Test.instanceCount -= by1;
            i18 >>= i18;
            for (i20 = 1; i20 < 155; ++i20) {
                i21 += i20;
                for (i22 = i19; i22 < 2; i22++) {
                    Test.dFld -= Test.instanceCount;
                    iArr2[i19] += i22;
                    Test.dFld += Test.instanceCount;
                    iArr2[i20] <<= i19;
                    i18 |= (int)3L;
                    i21 += (int)Test.instanceCount;
                    Test.instanceCount = 8417;
                    i18 += (4 + (i22 * i22));
                }
                i21 += i19;
                i24 = 1;
                while (++i24 < 2) {
                    Test.instanceCount = -809;
                    i18 = (int)Test.instanceCount;
                    switch ((i19 % 2) + 13) {
                    case 13:
                        i23 = (int)-1600403602L;
                        b1 = b1;
                    case 14:
                        Test.instanceCount = i21;
                        break;
                    default:
                        Test.instanceCount = i19;
                        b1 = b1;
                    }
                }
                f += (i20 + Test.instanceCount);
                switch (((i19 % 2) * 5) + 102) {
                case 111:
                    i18 += (int)39.142F;
                    f *= i21;
                case 107:
                    f += i20;
                    break;
                default:
                    i18 += (int)Test.instanceCount;
                }
            }
        } while ((i19 += 2) < 325);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
