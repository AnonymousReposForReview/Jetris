package tests.javafuzzer1630;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:27:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-36852L;
    public static float fFld=25.664F;
    public static double dFld=1.124305;
    public static boolean bFld=false;
    public static int iFld=2;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=138, i5=-3, i6=-192, i7=-187;
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 53842L);

        i4 = 1;
        while (++i4 < 321) {
            i5 -= i5;
            i5 = i5;
        }
        Test.fFld -= i5;
        i5 -= (int)-2.41637;
        for (i6 = 221; i6 > 5; i6 -= 3) {
            b = b;
            Test.instanceCount *= (long)Test.dFld;
            i7 -= (int)52721L;
        }
        Test.instanceCount -= i7;
        Test.iArrFld[(i6 >>> 1) % N] <<= (int)Test.instanceCount;
        i5 += i4;
        Test.iArrFld[(i4 >>> 1) % N] *= (int)Test.instanceCount;
        lArr = lArr;
        i7 *= i7;
        vMeth2_check_sum += i4 + i5 + i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, long l1, int i3) {

        int i8=-96, i9=-57673;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)86);
        FuzzerUtils.init(lArr1, -8063943716967766625L);

        vMeth2();
        for (byte by : byArr) {
            i3 += -4;
            i3 = i3;
            i3 >>= i3;
            if (Test.bFld) {
                i3 += (int)l1;
                i3 = -13;
            } else if (false) {
                l >>= i3;
                if (i3 != 0) {
                    vMeth1_check_sum += l + l1 + i3 + i8 + i9 + FuzzerUtils.checkSum(byArr) +
                        FuzzerUtils.checkSum(lArr1);
                    return;
                }
                lArr1[(i3 >>> 1) % N] = i3;
            }
            for (i8 = 1; i8 < 4; ++i8) {
                i3 = (int)Test.fFld;
                Test.fFld -= i9;
                Test.fFld += (((i8 * i8) + i3) - i3);
            }
        }
        vMeth1_check_sum += l + l1 + i3 + i8 + i9 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i, int i1) {

        int i10=0, i11=-4, i12=7, i13=12;
        float f=1.247F, f1=2.527F, fArr[]=new float[N];
        short s=-2970;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 0.657F);
        FuzzerUtils.init(bArr, true);

        switch ((((Test.iArrFld[(10 >>> 1) % N]--) >>> 1) % 5) + 104) {
        case 104:
            i = (int)(fArr[(i1 >>> 1) % N] + Test.instanceCount);
        case 105:
            Test.iArrFld[(i1 >>> 1) % N] -= (int)((i + (i1 * i)) - (-Math.abs(Test.fFld)));
            for (int i2 : Test.iArrFld) {
                vMeth1(-1L, Test.instanceCount, -78);
                Test.iArrFld[(-76 >>> 1) % N] = (int)117L;
            }
            break;
        case 106:
            for (i10 = 4; i10 < 127; ++i10) {
                i1 += (int)Test.instanceCount;
                for (f = 1; f < 13; f++) {
                    Test.instanceCount += (-213 + (f * f));
                    for (f1 = 1; f1 < 2; ++f1) {
                        i1 += (int)f1;
                        bArr[i10 + 1] = Test.bFld;
                        Test.iArrFld = Test.iArrFld;
                        Test.fFld -= i12;
                    }
                }
            }
            break;
        case 107:
            i += s;
            break;
        case 108:
            i1 <<= i13;
        default:
            Test.fFld = 0;
        }
        vMeth_check_sum += i + i1 + i10 + i11 + Float.floatToIntBits(f) + i12 + Float.floatToIntBits(f1) + i13 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=46900, i15=-9, i16=13, i17=-14, i18=-6, i19=156, i20=-16992, i21=29, i22=8;
        byte by1=97;
        long l2=-58219L;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 51.145F);

        vMeth(138, i14);
        i15 = 1;
        do {
            Test.bFld = Test.bFld;
            if (Test.bFld) break;
            Test.iFld += (((i15 * Test.iFld) + i14) - by1);
            i16 = 83;
            do {
                for (i17 = i15; i17 < 1; ++i17) {
                    Test.iArrFld[i15 + 1] += i16;
                    Test.iFld += (((i17 * Test.iFld) + i19) - Test.instanceCount);
                    switch ((i17 % 1) + 44) {
                    case 44:
                        try {
                            i18 = (i15 / 13520);
                            Test.iFld = (Test.iFld % -213);
                            i19 = (i16 % i16);
                        } catch (ArithmeticException a_e) {}
                    default:
                        if (Test.bFld) break;
                        i18 = (int)Test.instanceCount;
                        Test.iArrFld[i15] = -16300;
                    }
                    switch ((i15 % 1) + 32) {
                    case 32:
                        fArr1[i17 - 1] /= (l2 | 1);
                        l2 += i17;
                    default:
                        Test.fFld += i19;
                    }
                    Test.iFld *= (int)l2;
                    i18 += i16;
                }
                i14 += 43304;
                i19 -= -38330;
                Test.iFld += i16;
                Test.iFld = i16;
                i18 += i19;
                for (i20 = i16; i20 < 1; i20 += 3) {
                    i21 = 216;
                }
                i22 = 1;
                while (++i22 < 1) {
                    i21 += -113;
                }
                l2 += (i16 | Test.instanceCount);
            } while (--i16 > 0);
        } while (++i15 < 303);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
