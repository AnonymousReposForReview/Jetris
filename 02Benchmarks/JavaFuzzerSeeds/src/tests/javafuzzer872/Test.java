package tests.javafuzzer872;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:01:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6026L;
    public static int iFld=-38;
    public static float fFld=98.991F;
    public static byte byFld=23;
    public double dFld=-106.76;
    public int iFld1=-45842;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i5) {

        int i6=44, i7=43162, i8=1, i9=1820, iArr[]=new int[N];
        float f=-1.112F;
        byte by=-49;
        short s=20238;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.117225);
        FuzzerUtils.init(iArr, -249);

        i5 -= (int)-355205857L;
        for (i6 = 13; i6 < 380; ++i6) {
            f += (((i6 * by) + f) - Test.instanceCount);
        }
        for (double d1 : dArr) {
            if (false) continue;
            f = s;
            s ^= (short)i6;
            i7 -= i5;
            i5 = -4;
            i8 = 1;
            while (++i8 < 4) {
                iArr[i8 + 1] *= i5;
            }
        }
        i7 -= i7;
        i9 = 1;
        while (++i9 < 123) {
            Test.iFld += i9;
            Test.iFld -= i7;
        }
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f) + by + s + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i) {

        int i1=33143, i2=-23349, i3=12, i4=-179, iArr1[]=new int[N];
        double d=-99.25697;
        short s1=2126;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 84);
        FuzzerUtils.init(bArr, true);

        for (i1 = 2; i1 < 169; i1 += 3) {
            for (i3 = i1; i3 < 28; i3 += 2) {
                d *= (Test.instanceCount - ((27684 + i) - lMeth(Test.iFld)));
                switch ((i1 % 4) + 81) {
                case 81:
                    s1 += (short)(((i3 * i2) + i1) - i3);
                    iArr1[i3 + 1] >>= i1;
                    break;
                case 82:
                    try {
                        iArr1[i3] = (103 % i2);
                        i2 = (Test.iFld / 60537);
                        Test.iFld = (-834262420 / i3);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = 200;
                    iArr1[i3 + 1] -= (int)d;
                    Test.fFld -= Test.iFld;
                    break;
                case 83:
                    i2 += (i3 * i3);
                    Test.fFld += (i3 * i3);
                    Test.byFld = (byte)-1L;
                case 84:
                    bArr = bArr;
                    Test.fFld = 9;
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + s1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
    }

    public void vMeth() {

        boolean b=true;
        int i10=17737, i11=-1, i12=-11, i13=1, i14=-4, i15=41647, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -21219);
        FuzzerUtils.init(lArr, -54337L);

        b = b;
        vMeth1(Test.iFld);
        for (i10 = 3; i10 < 149; i10 += 2) {
            for (i12 = 21; i12 > i10; i12--) {
                i11 <<= i10;
                dFld -= 42.213F;
                i11 = i10;
                iArr2[i10 + 1] = i12;
            }
            Test.fFld += (((i10 * i12) + i13) - Test.fFld);
        }
        Test.instanceCount -= i12;
        i11 -= i12;
        for (i14 = 145; i14 > 2; i14 -= 2) {
            lArr[i14] += i12;
            Test.iFld += (i14 - i15);
            i11 >>= i14;
        }
        vMeth_check_sum += (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=10, i17=-169, i18=-4, i19=-75, i20=29, i21=216, i22=-51751, iArr3[]=new int[N];
        short s3=24395;
        boolean b2=false;

        FuzzerUtils.init(iArr3, 1);

        vMeth();
        i16 = 1;
        do {
            for (i17 = i16; i17 < 72; ++i17) {
                dFld += i17;
                Test.instanceCount = iFld1;
                iFld1 += (((i17 * i18) + i16) - Test.iFld);
                Test.iFld ^= i16;
                i19 = 1;
                do {
                    boolean b1=true;
                    short s2=-4507;
                    iFld1 = i19;
                    Test.fFld *= i17;
                    dFld += 0.948F;
                    iFld1 -= (int)Test.fFld;
                    if (b1) continue;
                    Test.iFld = s2;
                    i18 <<= i19;
                    Test.instanceCount = Test.instanceCount;
                    iArr3[i16 - 1] += (int)-38.436F;
                    if (b1) break;
                } while (--i19 > 0);
            }
            dFld += 2;
            for (i20 = 72; i20 > 1; i20--) {
                iFld1 -= i20;
                i22 = 2;
                do {
                    int i23=-10;
                    i21 = i18;
                    s3 -= (short)i23;
                    Test.instanceCount += (((i22 * Test.instanceCount) + i17) - i18);
                    i18 *= i18;
                    Test.instanceCount += i17;
                } while (--i22 > 0);
                Test.iFld = (int)Test.instanceCount;
                if (b2) break;
                Test.instanceCount += i17;
            }
        } while (++i16 < 349);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
