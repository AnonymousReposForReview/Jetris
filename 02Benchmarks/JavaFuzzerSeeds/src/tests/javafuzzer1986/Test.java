package tests.javafuzzer1986;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3420174535L;
    public static int iFld=1;
    public static double dFld=-1.120497;
    public volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -99);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=5470, i9=51809, i10=236, i11=-35, i12=33189, i13=21;
        short s=16088;
        float f2=2.114F;
        long l1=-1428359811L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-63);

        i8 = 1;
        while (++i8 < 275) {
            try {
                Test.iFld = (Test.iArrFld[i8 - 1] % i8);
                Test.iFld = (228 / Test.iArrFld[i8 + 1]);
                i9 = (Test.iFld % i8);
            } catch (ArithmeticException a_e) {}
            for (i10 = 6; i10 > 1; i10 -= 2) {
                s += (short)i9;
                for (i12 = 3; i12 > 1; i12 -= 2) {
                    byte by=75;
                    i11 += (int)f2;
                    f2 = 252;
                    Test.iArrFld[i8 + 1] = i8;
                    if (i11 != 0) {
                        vMeth1_check_sum += i8 + i9 + i10 + i11 + s + i12 + i13 + Float.floatToIntBits(f2) + l1 +
                            FuzzerUtils.checkSum(byArr);
                        return;
                    }
                    Test.iArrFld[i8] -= (int)Test.dFld;
                    Test.instanceCount = i13;
                    byArr[i12 + 1] = (byte)i11;
                    l1 = Test.iFld;
                    by <<= (byte)7;
                }
                if (i11 != 0) {
                    vMeth1_check_sum += i8 + i9 + i10 + i11 + s + i12 + i13 + Float.floatToIntBits(f2) + l1 +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + s + i12 + i13 + Float.floatToIntBits(f2) + l1 +
            FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(long l, float f1) {

        int i6=-8213, i7=1, i14=-41662, i15=-23;
        boolean b1=false;

        for (i6 = 5; i6 < 239; i6++) {
            vMeth1();
            Test.instanceCount >>= Test.iFld;
            for (i14 = 1; i14 < 7; i14++) {
                i15 *= 53544;
                if (i7 != 0) {
                }
                f1 = -1;
            }
            Test.dFld *= i15;
            if (Test.iFld != 0) {
            }
            Test.iArrFld[i6 + 1] = (int)-3827235246L;
            if (i6 != 0) {
            }
            b1 = false;
        }
        Test.instanceCount = Test.iFld;
        Test.instanceCount += 6;
        i15 = (int)f1;
        long meth_res = l + Float.floatToIntBits(f1) + i6 + i7 + i14 + i15 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        int i4=234, i5=-238, i16=-24553, i17=-59537, i18=30100, i19=-44842;
        float f=1.737F;
        boolean b=false, bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.113839);
        FuzzerUtils.init(bArr, true);

        for (i4 = 14; i4 < 278; i4 += 2) {
            Test.iArrFld[i4 + 1] = (int)(Math.abs(i1++) + (f - Math.abs(i5)));
            dArr[i4 - 1] += (++i5);
            i3 += (int)((--Test.iArrFld[i4]) + Test.instanceCount);
            b = (bArr[i4] == (iMeth(Test.instanceCount, 0.243F) != 23348));
            switch (((i4 % 2) * 5) + 53) {
            case 61:
                for (i16 = 1; i16 < 12; ++i16) {
                    for (i18 = 1; i18 < 2; i18++) {
                        Test.instanceCount += -22548;
                        i2 = (int)Test.dFld;
                        bArr[i4] = b;
                        Test.instanceCount += i18;
                        i1 = (int)Test.instanceCount;
                        if (b) continue;
                        Test.iFld += (i18 * i18);
                    }
                }
            case 63:
                i2 += (i4 * i4);
                break;
            default:
                i19 &= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + (b ? 1 : 0) + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-26847, i20=96, i21=63908, i22=78, i23=121, i24=226, i25=8, i26=-67, i27=12, i28=261, i29=32678,
            iArr[]=new int[N];
        double d=0.105434;
        float f3=23.337F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 189);
        FuzzerUtils.init(lArr, -251699025L);

        i = iArr[(i >>> 1) % N];
        i = iArr[(i >>> 1) % N];
        vMeth(i, -143, Test.iFld);
        for (i20 = 10; 160 > i20; ++i20) {
            Test.instanceCount += (i20 * i20);
            for (d = 5; 167 > d; d++) {
                lArr[(int)(d)] -= Test.iFld;
                i23 = 1;
                do {
                    boolean b2=true;
                    Test.iFld += (int)1.293F;
                    Test.iFld += i23;
                    Test.instanceCount = (long)f3;
                    try {
                        i = (9884 % i21);
                        i = (-18573 / Test.iArrFld[(int)(d - 1)]);
                        Test.iArrFld[i23 + 1] = (i21 % 196);
                    } catch (ArithmeticException a_e) {}
                    i21 = i22;
                    if (b2) continue;
                    i = (int)Test.instanceCount;
                    Test.instanceCount += i20;
                } while (++i23 < 2);
                Test.iFld += (int)(d * d);
                bFld = true;
                try {
                    i = (Test.iArrFld[i20 + 1] / 29005);
                    Test.iArrFld[i20] = (-19951 / Test.iArrFld[i20 - 1]);
                    iArr[i20 + 1] = (15408 % Test.iArrFld[(int)(d + 1)]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount <<= i22;
            }
            i21 = i20;
            Test.instanceCount = 57891;
        }
        i21 = i23;
        for (i24 = 5; 140 > i24; i24++) {
            i26 = 1;
            while (++i26 < 186) {
                for (i27 = 1; 1 > i27; ++i27) {
                    Test.dFld += 2.599F;
                    iArr = Test.iArrFld;
                    try {
                        iArr[i27 + 1] = (i21 / -12);
                        i25 = (-1051928571 % i);
                        i29 = (Test.iArrFld[i27] / i24);
                    } catch (ArithmeticException a_e) {}
                    iArr[i27 + 1] -= i23;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
