package tests.javafuzzer1101;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=36811L;
    public static boolean bFld=false;
    public static int iFld=-29976;
    public static short sFld=25282;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        int i6=-28606, i7=-107, i8=62, i9=62191, i10=7, i11=-5, iArr[]=new int[N];
        double d=6.44802;
        float f=1.730F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr, -112.876F);

        for (i6 = 14; i6 < 341; i6 += 3) {
            iArr[i6] -= -9;
            Test.instanceCount += i6;
            for (i8 = i6; i8 < 14; i8++) {
                i4 += (int)d;
                if (b) {
                    i4 &= (int)Test.instanceCount;
                    fArr[i8 + 1] = i5;
                    for (i10 = i8; i10 < 1; ++i10) {
                        switch ((i10 % 2) + 8) {
                        case 8:
                            Test.instanceCount -= i9;
                            d = 4889284757809957115L;
                            i5 += (i10 * f);
                            if (false) break;
                            break;
                        case 9:
                            Test.instanceCount += i10;
                            break;
                        }
                    }
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 +
            Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {

        int i12=-35284, i13=23050, i14=-65223, i15=-10, i16=178;
        short s=-27313;
        float f1=-1.742F, fArr1[]=new float[N];
        long l=-23L;
        double d1=0.125322, dArr[]=new double[N];
        byte by1=-46;

        FuzzerUtils.init(dArr, -2.83932);
        FuzzerUtils.init(fArr1, 0.65F);

        vMeth2(i12, i12, 176);
        i12 -= i12;
        for (i13 = 3; i13 < 253; ++i13) {
            switch ((i13 % 8) + 7) {
            case 7:
                i12 += (i13 | i14);
                if (Test.bFld) {
                    s += (short)(((i13 * i13) + i13) - i13);
                    if (true) {
                        i15 = 1;
                        while (++i15 < 7) {
                            Test.instanceCount = i13;
                            f1 += (i15 + i14);
                        }
                    }
                } else {
                    for (l = 1; l < 7; l++) {
                        i14 += (int)(l - i14);
                    }
                    i16 += i13;
                    i12 -= i13;
                }
                break;
            case 8:
                Test.instanceCount = (long)-115.166F;
            case 9:
                i12 += (int)l;
                break;
            case 10:
                f1 *= (float)d1;
                break;
            case 11:
                by1 = (byte)i15;
                break;
            case 12:
                i16 >>>= i13;
                break;
            case 13:
                dArr[i13 - 1] -= Test.instanceCount;
                break;
            case 14:
                Test.instanceCount = 25;
                break;
            default:
                fArr1[i13 - 1] = i14;
            }
        }
        vMeth1_check_sum += i12 + i13 + i14 + s + i15 + Float.floatToIntBits(f1) + l + i16 +
            Double.doubleToLongBits(d1) + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(byte by, int i, int i1) {

        int i2=-83, i17=121, i18=-7, i19=6, i20=-14, i21=-13;
        short s1=8703;
        float f2=-2.587F, f3=-61.30F;

        i2 = 1;
        while (++i2 < 171) {
            vMeth1();
            i17 = 9;
            do {
                i1 -= s1;
                Test.instanceCount += (i17 * i17);
                i += (int)Test.instanceCount;
                i += (i17 * i17);
                by = (byte)f2;
                for (f3 = 1; f3 < 1; ++f3) {
                    i = i18;
                    i *= (int)Test.instanceCount;
                }
                i18 = i17;
                for (i19 = 1; i19 < 1; i19++) {
                    Test.instanceCount *= i;
                }
            } while (--i17 > 0);
            by += (byte)(((i2 * i21) + i2) - i);
        }
        vMeth_check_sum += by + i + i1 + i2 + i17 + s1 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i18 +
            i19 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i22=11, i23=165, i24=-4313, i25=153, i26=1, i27=-216, i28=2071, i29=-3068, i30=63803, i31=-126, i32=-96,
            i33=-2;
        byte by2=-6;

        vMeth((byte)(-119), Test.iFld, Test.iFld);
        i22 = 231;
        do {
            Test.instanceCount = Test.instanceCount;
            try {
                Test.iArrFld[i22 - 1] = (Test.iFld % -62712);
                Test.iArrFld[i22 - 1] = (Test.iArrFld[i22] % Test.iFld);
                Test.iFld = (27 % i22);
            } catch (ArithmeticException a_e) {}
        } while (--i22 > 0);
        Test.iFld += i22;
        Test.instanceCount <<= i22;
        for (i23 = 12; i23 < 209; i23++) {
            Test.iArrFld[i23 - 1] = -28347;
        }
        for (i25 = 7; i25 < 143; ++i25) {
            Test.iArrFld[i25] = (int)Test.instanceCount;
            i26 += (((i25 * by2) + i26) - i25);
            Test.iFld *= i25;
        }
        for (i27 = 16; i27 < 308; i27++) {
            lArrFld = lArrFld;
            Test.instanceCount = i24;
            Test.iArrFld[i27 - 1] = (int)Test.instanceCount;
            if (Test.bFld) {
                if (Test.bFld) {
                    Test.sFld += (short)Test.instanceCount;
                } else {
                    for (i29 = 5; i29 < 86; ++i29) {
                        lArrFld[i29] <<= i27;
                        for (i31 = 1; i31 < 2; i31 += 3) {
                            i28 += i31;
                            try {
                                Test.iArrFld[i29] = (i28 % i33);
                                Test.iFld = (Test.iArrFld[i27 - 1] / i29);
                                i24 = (i31 / 664588137);
                            } catch (ArithmeticException a_e) {}
                            i33 = i27;
                            Test.instanceCount ^= -8364840611056565225L;
                            Test.iFld -= (int)Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            if (Test.bFld) break;
                        }
                        i32 >>= i27;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
