package tests.javafuzzer2827;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:01:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1L;
    public short sFld=-1599;
    public static volatile short sFld1=-30615;
    public static boolean bFld=true;
    public static int iFld=-36772;
    public static float fFld=83.125F;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7) {

        int i8=170, i9=-134, i10=-11, i11=-229, i12=-13;
        double d=-117.113378;
        float f1=109.1019F;

        Test.instanceCount = i7;
        i8 = 1;
        while ((i8 += 3) < 328) {
            d += i8;
            i7 -= i8;
            for (i9 = 1; i9 < 14; i9++) {
                i7 = i9;
                for (i11 = 1; i11 < 2; i11++) {
                    try {
                        i10 = (-54509 % i12);
                        Test.iArrFld[i9] = (i10 / 91);
                        Test.iArrFld[i11] = (-1429658817 % i10);
                    } catch (ArithmeticException a_e) {}
                    i12 += (60140 + (i11 * i11));
                }
                d -= f1;
                Test.sFld1 = (short)i10;
                Test.bFld = Test.bFld;
                Test.instanceCount += (i9 * i9);
            }
            Test.iArrFld[i8] *= (int)Test.instanceCount;
        }
        i7 = -99;
        long meth_res = i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        byte by=7, byArr[]=new byte[N];
        float f2=17.956F;
        int i13=13, i14=-9, i15=-194, i16=-54036, i17=171;

        FuzzerUtils.init(byArr, (byte)21);

        i5 = (int)lMeth(-54716);
        Test.instanceCount = i6;
        i5 = by;
        Test.iArrFld[(i6 >>> 1) % N] = (int)-4L;
        for (f2 = 361; f2 > 12; --f2) {
            if (true) break;
            i13 /= (int)2.907F;
            i6 = i6;
            Test.instanceCount = i5;
        }
        for (i14 = 16; i14 < 283; ++i14) {
            i15 *= i15;
            for (i16 = 1; i16 < 6; i16 += 3) {
                i17 = -13;
                Test.instanceCount >>= Test.instanceCount;
                byArr[i14 - 1] = (byte)1.250F;
            }
        }
        vMeth1_check_sum += i5 + i6 + by + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(short s, boolean b) {

        int i18=37778, i19=-14, i20=3403;
        float f3=-33.944F, fArr[]=new float[N];
        double d1=-105.124079;

        FuzzerUtils.init(fArr, 2.520F);

        vMeth1(Test.iFld, Test.iFld);
        for (i18 = 9; i18 < 245; ++i18) {
            Test.iArrFld[i18 + 1] *= (int)Test.instanceCount;
            fArr[i18 - 1] = Test.fFld;
            for (f3 = i18; f3 < 7; f3++) {
                byte by1=127;
                Test.instanceCount *= (long)f3;
                i20 += -7;
                i19 -= (int)d1;
                i19 += (int)(((f3 * by1) + i19) - i18);
                Test.fFld += Test.instanceCount;
                fArr[i18 + 1] += Test.instanceCount;
                try {
                    Test.iArrFld[(int)(f3 + 1)] = (i20 / -24974);
                    i19 = (156 % i19);
                    Test.iArrFld[i18 - 1] = (-12057 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.fFld += (((f3 * i20) + Test.instanceCount) - i20);
            }
            d1 -= d1;
            Test.instanceCount += (i18 * i20);
        }
        vMeth_check_sum += s + (b ? 1 : 0) + i18 + i19 + Float.floatToIntBits(f3) + i20 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=37204, i1=-1, i2=21771, i3=-34211, i4=139, i21=11, i22=123, i23=-12, i24=13177, i25=27, i26=-14, i27=-9,
            i28=11, i29=115;
        float f=-77.332F, fArr1[]=new float[N];
        long l=46096L;
        double d2=-2.35644;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(fArr1, 6.229F);
        FuzzerUtils.init(byArr1, (byte)71);

        try {
            Test.instanceCount -= (i++);
            i1 = 1;
            do {
                for (i2 = 3; i2 < 75; i2 += 3) {
                    i3 = (int)(f + ((Test.instanceCount++) + Test.iArrFld[i2 + 1]));
                }
                Test.iArrFld[i1] = sFld;
                i4 = 1;
                while (++i4 < 75) {
                    vMeth((short)(-31352), Test.bFld);
                    Test.iArrFld[i1] -= i;
                }
                i += i1;
                Test.iArrFld[i1 - 1] = Test.iFld;
            } while (++i1 < 336);
            for (i21 = 2; i21 < 191; i21 += 2) {
                i3 *= (int)Test.instanceCount;
            }
            Test.fFld *= Test.fFld;
            Test.iFld = -10;
            Test.iArrFld = new int[Test.iFld];
            f *= Test.instanceCount;
        }
        catch (NegativeArraySizeException exc1) {
            for (l = 3; 216 > l; ++l) {
                for (i24 = 7; i24 < 118; i24++) {
                    i += (int)(0.161F + (i24 * i24));
                    Test.fFld -= 235L;
                }
                for (i26 = 118; 2 < i26; i26--) {
                    if (Test.bFld) break;
                    f += (((i26 * i22) + i3) - i23);
                    Test.instanceCount |= i27;
                    for (i28 = 2; i28 > 1; i28 -= 3) {
                        i27 += i28;
                        switch ((i26 % 2) + 45) {
                        case 45:
                            Test.instanceCount ^= i29;
                            fArr1[(int)(l)] *= (float)d2;
                            i23 -= -32322;
                            break;
                        case 46:
                            byArr1[i28 + 1] *= (byte)i24;
                            break;
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
