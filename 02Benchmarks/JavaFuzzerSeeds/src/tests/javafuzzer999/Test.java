package tests.javafuzzer999;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:48:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8418114909392928192L;
    public static volatile double dFld=36.90467;
    public volatile short sFld=30263;
    public boolean bFld=false;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2, int i3) {

        int i4=14, i5=-39056, i6=-14, i7=51, i8=2, iArr[]=new int[N];
        boolean b=false;
        byte by=30;
        double d1=124.73952;
        float f=36.182F;

        FuzzerUtils.init(iArr, 3941);

        i4 = 226;
        while (--i4 > 0) {
            for (i5 = 1; i5 < 7; ++i5) {
                i6 *= -63602;
                b = false;
                i2 += (i5 * by);
                if (b) continue;
                d1 = i3;
                f = 237L;
                i2 += 10724;
                iArr[i5 - 1] ^= -79;
                for (i7 = 1; i7 < 2; ++i7) {
                    b = b;
                    if (b) continue;
                    f -= f;
                    if (b) break;
                }
            }
        }
        vMeth1_check_sum += l + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + by + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f) + i7 + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i, int i1) {

        float f1=-2.300F;
        int i9=-12440, i10=1, i11=-32, i12=-7;
        double d2=2.45956;
        boolean b1=true;

        vMeth1(Test.instanceCount, 42515, i);
        i1 = i1;
        f1 += 152;
        if (b1) {
            i1 = (int)58.524F;
            for (i9 = 3; i9 < 138; i9++) {
                for (i11 = 1; i11 < 12; i11++) {
                    f1 = 66;
                    switch (((i11 % 9) * 5) + 39) {
                    case 78:
                        i *= i12;
                        d2 *= f1;
                        d2 = d2;
                    case 67:
                        i12 = (int)Test.instanceCount;
                        i10 = (int)f1;
                        Test.lArrFld[i9 - 1] |= i10;
                        break;
                    case 77:
                        i = (int)Test.instanceCount;
                    case 57:
                        i >>= i12;
                        break;
                    case 84:
                        i += (i11 + i9);
                        break;
                    case 58:
                        b1 = true;
                        break;
                    case 43:
                        i10 += i1;
                    case 72:
                        i &= i12;
                        break;
                    case 76:
                        Test.instanceCount = i12;
                    }
                }
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + (b1 ?
            1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        double d=-52.58783;
        int i13=32485, i14=-2, i15=-82, i16=-29336, i17=-23265, i18=-3, i19=-218;
        boolean b2=true;
        float f2=-91.1012F;

        d += ((lMeth(i13, i13) + Test.instanceCount) * i13);
        for (i14 = 13; i14 < 215; i14++) {
            for (i16 = i14; 8 > i16; ++i16) {
                d = i13;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount = i14;
                    i19 <<= i15;
                    i19 -= i14;
                    Test.instanceCount <<= i19;
                    if (b2) break;
                    i17 += (-43494 + (i18 * i18));
                    i13 += (i18 + i19);
                    f2 += i19;
                    f2 -= -34879;
                    i13 = i18;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + (b2 ? 1 : 0) +
            Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i20=109, i21=169, i22=-28, i23=-7, i24=12, i25=-117, i26=-7, i27=-12, i28=-12, i29=29, i30=44919;
        float f3=111.896F;
        byte by1=96;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        Test.instanceCount = (Test.instanceCount++);
        vMeth();
        for (i20 = 17; 315 > i20; i20++) {
            i21 >>= i21;
            i21 = i21;
            f3 += i20;
        }
        f3 *= f3;
        for (i22 = 7; i22 < 126; ++i22) {
            for (i24 = 12; i24 < 211; i24++) {
                i26 = 2;
                do {
                    Test.dFld = i22;
                    i25 = i22;
                    i21 = i22;
                    Test.instanceCount >>= i25;
                } while (--i26 > 0);
            }
        }
        for (i27 = 2; i27 < 126; i27++) {
            i28 += (i27 | Test.instanceCount);
            by1 >>= (byte)-4L;
            i23 -= i21;
            i21 += (int)167332690521178991L;
            for (i29 = 4; i29 < 202; i29++) {
                switch ((i29 % 1) + 42) {
                case 42:
                    sFld += (short)(i29 + i20);
                    i30 = (int)Test.instanceCount;
                    i25 = -70;
                    Test.dFld *= i29;
                    break;
                default:
                    if (bFld) {
                        Test.lArrFld = Test.lArrFld;
                        bArr[i27][i27] = true;
                        if (bFld) break;
                        i21 >>= (int)-110L;
                    } else if (bFld) {
                        f3 -= i23;
                    } else {
                        f3 = -244;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
