package tests.javafuzzer2024;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5943872130531859878L;
    public static double dFld=-2.7076;
    public static int iFld=-3;
    public static boolean bFld=true;
    public byte byFld=-116;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(byte by1, short s) {


        Test.iFld = Test.iFld;
        long meth_res = by1 + s;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by) {

        int i5=98, i6=2, i7=80, iArr1[]=new int[N];
        short s1=-381;
        float f2=1.446F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 40155);
        FuzzerUtils.init(fArr, 1.231F);

        i5 -= i5;
        if (Test.bFld) {
            for (i6 = 1; i6 < 161; i6 += 2) {
                i7 -= iMeth1(by, s1);
                f2 = 1;
                do {
                    iArr1[i6 + 1] = (int)1.1813;
                    i5 = i6;
                    Test.instanceCount = Test.instanceCount;
                    i5 = Test.iFld;
                    i5 = i6;
                    i7 >>= i5;
                    Test.iFld -= (int)Test.instanceCount;
                    i7 = (int)-225L;
                    i5 += (int)(f2 * f2);
                    Test.dFld = by;
                } while (++f2 < 19);
            }
        } else if (Test.bFld) {
            Test.iFld -= -2;
        } else {
            fArr[(i6 >>> 1) % N] -= -15007;
        }
        vMeth_check_sum += by + i5 + i6 + i7 + s1 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(boolean b, float f1) {

        int i8=-57972, i9=-253, i10=-87, i11=1, i12=-13;
        short s2=10511;

        if (Test.bFld) {
            vMeth((byte)(46));
            for (i8 = 9; 384 > i8; i8++) {
                for (i10 = 1; i10 < 5; i10++) {
                    byte by2=-33;
                    i12 = 1;
                    while (++i12 < 2) {
                        Test.iFld += (i12 ^ i8);
                        i9 += (i12 * i12);
                        Test.instanceCount = Test.iFld;
                        Test.instanceCount += s2;
                        Test.iFld = -159;
                        f1 %= -89;
                        Test.iFld >>= (int)Test.instanceCount;
                    }
                    Test.instanceCount = i12;
                    by2 = (byte)i8;
                    Test.iFld += (int)-9L;
                }
            }
        } else {
            i9 >>= i11;
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + s2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=60142, i2=-236, i3=-55686, i4=-3463, i13=222, i14=-13, i15=3, i16=-140, i17=-62049, iArr[]=new
            int[N];
        float f3=0.449F;
        short s3=-22751, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -22176);
        FuzzerUtils.init(sArr, (short)-23923);
        FuzzerUtils.init(lArr, -14L);

        i = 1;
        do {
            float f=-2.128F;
            i1 >>= i;
            iArr[i + 1] = (int)(((i1--) - (i1 = i1)) - ((f -= i1) + (i + Test.dFld)));
            try {
                i1 = (0 % i);
                i1 = (1673390525 / i1);
                iArr[i - 1] = (i % 26748);
            } catch (ArithmeticException a_e) {}
            switch ((((i1 - i1) >>> 1) % 4) + 43) {
            case 43:
                i2 = 1;
                while (++i2 < 118) {
                    for (i3 = 1; i3 > 1; i3--) {
                        Test.instanceCount >>= ((-(Test.instanceCount + Test.instanceCount)) - (Test.instanceCount -
                            iMeth(true, 0.689F)));
                    }
                    for (i13 = 1; i13 < 1; i13++) {
                        i1 *= 142;
                        Test.dFld = i13;
                        i1 -= (int)f;
                        Test.instanceCount = Test.instanceCount;
                        i14 = i13;
                        f -= i4;
                        switch ((i13 % 2) + 15) {
                        case 15:
                            byFld += (byte)(i13 + Test.instanceCount);
                            i4 = (int)f;
                            break;
                        case 16:
                            sArr[i13] >>>= (short)i13;
                        }
                    }
                    Test.iFld >>>= (int)Test.instanceCount;
                    for (f3 = 1; f3 < 1; ++f3) {
                        Test.instanceCount += (long)(((f3 * Test.instanceCount) + i3) - i);
                        Test.iFld += i1;
                    }
                    Test.iFld += i1;
                    Test.iFld = byFld;
                    for (i16 = 1; 1 > i16; i16++) {
                        Test.iFld >>= i4;
                    }
                    Test.instanceCount = i17;
                    s3 <<= (short)190;
                }
                i15 -= (int)Test.dFld;
                break;
            case 44:
                byFld <<= byFld;
            case 45:
                lArr[i] = Test.instanceCount;
                break;
            case 46:
                Test.dFld = Test.iFld;
                break;
            default:
                i17 -= i16;
            }
        } while (++i < 213);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
