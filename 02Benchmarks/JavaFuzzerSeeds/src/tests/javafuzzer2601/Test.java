package tests.javafuzzer2601;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:14:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-38514L;
    public volatile int iFld=-99;
    public float fFld=2.553F;
    public static volatile boolean bFld=true;
    public double dFld=0.98279;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -59.63037);
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.fArrFld, 108.557F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1(int i6, int i7, double d) {


        d *= fFld;
        vMeth1_check_sum += i6 + i7 + Double.doubleToLongBits(d);
    }

    public long lMeth(long l) {

        int i4=10, i5=71;
        double d1=0.42626;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -53012L);

        Test.dArrFld[(iFld >>> 1) % N] += -3799;
        for (i4 = 6; i4 < 305; i4++) {
            vMeth1(i4, iFld, d1);
            iFld += (int)fFld;
            i5 <<= (int)l;
            iFld >>>= i4;
            i5 += (i4 * i4);
            if (false) {
                d1 *= iFld;
                i5 -= iFld;
                try {
                    iFld = (i5 % -416277046);
                    i5 = (389244540 / i5);
                    Test.iArrFld[i4 - 1] = (i5 / iFld);
                } catch (ArithmeticException a_e) {}
                if (Test.bFld) {
                    d1 = iFld;
                    Test.fArrFld[i4] = 1;
                    lArr1[i4] *= iFld;
                } else if (Test.bFld) {
                } else {
                    Test.iArrFld[i4 + 1] += iFld;
                }
            } else {
                i5 >>= (int)Test.instanceCount;
            }
        }
        long meth_res = l + i4 + i5 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i8=-10, i9=7, i10=8, i11=1, i12=-9, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(lArr, -1758754556L);

        iArr[(iFld >>> 1) % N] &= iFld;
        iFld = (int)Test.instanceCount;
        lArr[(iFld >>> 1) % N] += (long)(fFld++);
        iFld += (int)lMeth(Test.instanceCount);
        i8 = 1;
        while (++i8 < 145) {
            for (i9 = 1; 11 > i9; i9 += 2) {
                for (i11 = 3; 1 < i11; i11 -= 2) {
                    i12 |= i9;
                    iFld = i8;
                    Test.iArrFld[i11] = (int)Test.instanceCount;
                    iFld += (-37183 + (i11 * i11));
                    iFld = (int)Test.instanceCount;
                }
                i10 >>>= i9;
                Test.iArrFld[i9 - 1] += (int)Test.instanceCount;
                lArr[i9 - 1] += 11;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=35, i2=-30350, i3=-10991, i13=0, i14=-56015, i15=-41850, i16=245, i17=197, i18=946, i19=-10,
            i20=9, i21=-12192;
        float f=0.650F;
        byte by=98, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-21);

        iFld -= ((++i) * (i - iFld));
        for (i1 = 3; i1 < 144; i1++) {
            i3 += (i1 ^ i3);
            f = (-Test.instanceCount);
            vMeth();
            i3 <<= i2;
            i += (i1 * i1);
            i += (((i1 * fFld) + f) - iFld);
            i13 += (int)-2.749F;
        }
        for (i14 = 7; i14 < 263; i14++) {
            long l1=5L;
            Test.instanceCount *= 4;
            Test.fArrFld[i14] += i1;
            i3 += (i14 | i14);
            for (i16 = 6; i16 < 98; ++i16) {
                i13 += i2;
                iFld += (i16 | by);
                for (i18 = 1; i18 < 2; ++i18) {
                    f = i3;
                    i15 += (-12 + (i18 * i18));
                }
                i17 -= i1;
            }
            switch (((i14 % 6) * 5) + 63) {
            case 88:
                dFld = by;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount = l1;
                for (i20 = 98; i20 > 4; i20 -= 2) {
                    l1 = i16;
                    if (Test.bFld) break;
                }
                break;
            case 81:
                Test.instanceCount = i21;
                break;
            case 84:
                i2 = i1;
                i *= i20;
                break;
            case 79:
                i += (((i14 * i3) + i3) - i13);
                break;
            case 76:
                Test.instanceCount |= l1;
            case 74:
            default:
                byArr = byArr;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
