package tests.javafuzzer1449;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:49:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=185;
    public static float fFld=-1.705F;
    public static byte byFld=-5;
    public static boolean bArrFld[]=new boolean[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        int i5=5, i6=-28470, i7=-9, i8=-40, i9=-14, i10=40767, i11=-1090, i12=0, i13=-199, iArr1[]=new int[N];
        double d1=26.91111, dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -35832);
        FuzzerUtils.init(dArr, 1.44969);

        for (i5 = 5; i5 < 126; ++i5) {
            i6 = (int)Test.instanceCount;
            iArr1[i5 - 1] = Test.iFld;
            if (i6 != 0) {
                return ((int)(i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 +
                    FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)))) % 2 > 0;
            }
            i6 += Test.iFld;
            for (i7 = 1; i7 < 13; i7++) {
                Test.instanceCount += i8;
                for (d1 = i5; d1 < 2; d1++) {
                    float f2=-57.790F;
                    f2 *= i5;
                }
            }
            for (i10 = 1; 13 > i10; i10++) {
                dArr[i10 + 1] += Test.instanceCount;
                Test.bArrFld[i5] = false;
                for (i12 = 1; 2 > i12; ++i12) {
                    Test.instanceCount += (22530 + (i12 * i12));
                    i13 += i12;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(float f1, long l1) {

        int i3=47265, i4=1, i14=196, i15=-8, iArr2[]=new int[N];
        boolean b=false;
        long l2=13L, lArr[][]=new long[N][N];
        byte by=-59;
        double d2=0.129863;
        short s=16632;

        FuzzerUtils.init(iArr2, -110);
        FuzzerUtils.init(lArr, -1853660517L);

        for (i3 = 7; i3 < 229; i3++) {
            b = (b = bMeth());
            i4 += (i3 * i3);
            f1 *= i3;
            for (l2 = 1; l2 < 7; ++l2) {
                by = (byte)Test.iFld;
                by -= (byte)i14;
                i15 = 1;
                do {
                    b = false;
                    d2 += s;
                    iArr2[i3 - 1] += i15;
                    try {
                        i14 = (i14 / i3);
                        iArr2[i15 - 1] = (i4 % 1648661019);
                        Test.iFld = (i3 / i3);
                    } catch (ArithmeticException a_e) {}
                    lArr[i3 + 1][(int)(l2 + 1)] &= i14;
                    s *= (short)i3;
                    i14 = Test.iFld;
                } while (++i15 < 2);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + l1 + i3 + i4 + (b ? 1 : 0) + l2 + i14 + by + i15 +
            Double.doubleToLongBits(d2) + s + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, int i2) {

        double d=0.6316;
        int i16=-39, i17=91, i18=-3, i19=207, i20=-9490, iArr3[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.441F);
        FuzzerUtils.init(iArr3, -38207);

        l *= Math.min(Test.iFld++, (int)(d * (l * l)));
        vMeth(Test.fFld, l);
        i2 = i2;
        for (i16 = 6; i16 < 145; ++i16) {
            for (i18 = 1; i18 < 11; i18++) {
                Test.fFld *= (float)d;
                fArr[i18 - 1] = i19;
                i17 += i18;
                Test.instanceCount += i18;
                iArr3[i16 + 1] = (int)Test.instanceCount;
                if (i16 != 0) {
                }
            }
            Test.byFld = (byte)i17;
            i2 ^= (int)Test.instanceCount;
            iArr3[i16 + 1] = i20;
            Test.instanceCount >>= l;
        }
        long meth_res = l + i2 + Double.doubleToLongBits(d) + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=120.577F;
        int i=-58951, i1=13, i21=153, i22=-104, i23=-81, i24=30, i25=-50338, i26=-83, i27=-54, i28=32, iArr[]=new
            int[N], iArr4[]=new int[N];
        double d3=50.94239, d4=20.23936;
        boolean b1=false;
        short s1=26750;

        FuzzerUtils.init(iArr, 96);
        FuzzerUtils.init(iArr4, 27202);

        iArr[(Test.iFld >>> 1) % N] >>= (Test.iFld + (++iArr[(Test.iFld >>> 1) % N]));
        iArr[(Test.iFld >>> 1) % N] = (int)f;
        for (i = 7; i < 194; i++) {
            Test.iFld = ((iMeth(Test.instanceCount, i1) * i) - Test.iFld);
            for (i21 = 3; i21 < 134; ++i21) {
                i1 = i22;
                Test.instanceCount -= 198;
            }
        }
        d3 = 201;
        do {
            i23 = 1;
            while (++i23 < 374) {
                sArrFld[i23] = (short)95;
                Test.instanceCount += (long)58.126167;
                i24 = 1;
                while (++i24 < 1) {
                    f += -63879;
                    i22 <<= Test.iFld;
                    Test.iFld += (i24 * i24);
                    if (b1) continue;
                    iArr4[i24] = -72;
                }
                for (i25 = 1; i25 < 1; i25++) {
                    Test.iFld ^= i26;
                    d4 = Test.instanceCount;
                    if (b1) continue;
                    Test.fFld *= Test.instanceCount;
                    i1 += i24;
                }
                for (i27 = 1; i27 > 1; --i27) {
                    Test.iFld += i27;
                    i26 = i26;
                    i22 += (int)d3;
                    if (b1) break;
                    i1 += s1;
                    i28 = i22;
                }
            }
        } while ((d3 -= 3) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
