package tests.javafuzzer628;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:51:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1297429130L;
    public static int iFld=-10;
    public static float fFld=2.756F;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, float f, int i4) {

        short s=10832;
        int i5=-13, i6=14, i7=-122, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 6);

        f += i4;
        Test.iFld = s;
        f *= s;
        Test.iFld >>= i4;
        i4 /= (int)(i3 | 1);
        Test.iFld = -7620;
        i3 >>>= i3;
        for (i5 = 11; i5 < 308; ++i5) {
            iArr[i5 - 1] -= i5;
        }
        iArr[(-9 >>> 1) % N] = i6;
        i7 = 1;
        do {
            iArr[i7] >>= i6;
            f = i6;
            i4 *= i3;
            i3 /= 5;
        } while (++i7 < 326);
        long meth_res = i3 + Float.floatToIntBits(f) + i4 + s + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1) {

        float f1=0.9F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -61.696F);

        iMeth(Test.iFld, f1, Test.iFld);
        fArr[(Test.iFld >>> 1) % N] = l;
        vMeth_check_sum += l + l1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static double dMeth(int i2, byte by) {

        int i8=-64002, i9=-6, i10=-5, i12=-12, i13=-151, iArr1[]=new int[N];
        boolean b=false;
        float f2=11.422F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 187);
        FuzzerUtils.init(lArr, -41531L);

        vMeth(Test.instanceCount, Test.instanceCount);
        if (b) {
            by += (byte)Test.instanceCount;
            i8 = 1;
            while (++i8 < 205) {
                i2 = (int)Test.instanceCount;
                for (i9 = 1; 8 > i9; i9++) {
                    i10 += i9;
                }
                if (b) break;
                Test.instanceCount += (((i8 * by) + Test.instanceCount) - Test.iFld);
                i12 = 1;
                while (++i12 < 8) {
                    i13 = 1;
                    while ((i13 += 3) < 1) {
                        f2 += f2;
                        i10 = -11;
                        lArr[i13 - 1] = -208;
                        Test.iFld -= (int)8682201293341106506L;
                    }
                }
            }
        } else {
            Test.instanceCount *= i2;
        }
        long meth_res = i2 + by + i8 + i9 + i10 + (b ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=16354, i1=50412, i14=3, i16=16791, i17=-12578, i18=20464, i19=-166, i20=-182, i21=-12, i22=179;
        short s1=1737;
        long l2=2128812721L;
        double d=-1.45961, d1=24.36222, dArr[]=new double[N];
        boolean b1=true;
        byte by1=108, byArr[]=new byte[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, 77.55946);
        FuzzerUtils.init(fArr1, 0.358F);
        FuzzerUtils.init(byArr, (byte)68);

        Test.iFld = (++Test.iFld);
        for (i = 6; 303 > i; i++) {
            dArr[i - 1] -= (dMeth(Test.iFld, (byte)(18)) % (Test.iFld | 1));
            Test.iFld ^= 14;
        }
        Test.fFld -= s1;
        i14 = 1;
        do {
            if (false) continue;
        } while (++i14 < 195);
        for (int i15 : iArrFld) {
            i1 += (int)-15189L;
            Test.instanceCount >>= i;
            l2 = i1;
            for (i16 = 63; 2 < i16; i16 -= 2) {
                for (i18 = 1; i18 < 3; ++i18) {
                    Test.instanceCount -= Test.instanceCount;
                    lArrFld[i16] <<= i16;
                    d -= Test.instanceCount;
                    i20 = i20;
                }
                iArrFld[i16] = (int)l2;
                if (b1) break;
            }
            d1 = 63;
            do {
                if (b1) continue;
                i17 >>= by1;
                i21 = 2;
                do {
                    iArrFld[(int)(d1 + 1)] = by1;
                    fArr1[(int)(d1)] = i15;
                    Test.instanceCount *= 79098128L;
                    fArr1[(int)(d1)] += l2;
                    byArr[(int)(d1)] -= (byte)i15;
                } while (--i21 > 0);
                dArr[(int)(d1)] += 6622;
                i22 = i22;
            } while ((d1 -= 2) > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
