package tests.javafuzzer244;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:54:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public byte byFld=41;
    public int iFld=231;
    public boolean bFld=false;
    public float fFld=89.80F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 181L);
        FuzzerUtils.init(Test.iArrFld, 228);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, int i4, int i5) {

        int i6=144, i7=-75, i8=14, i9=49, iArr[]=new int[N];
        float f2=0.905F;
        long l=659L;
        boolean b=false;

        FuzzerUtils.init(iArr, 7);

        i6 = 1;
        do {
            iArr[i6] <<= (int)Test.instanceCount;
            if (false) continue;
            Test.lArrFld = Test.lArrFld;
            f2 += i6;
            i4 = (int)Test.instanceCount;
        } while (++i6 < 368);
        l = i3;
        if (b) {
            i5 = i6;
            for (i7 = 10; i7 < 309; ++i7) {
                i9 = 1;
                while (++i9 < 6) {
                    i8 = i6;
                    i5 -= i8;
                    l = i4;
                    if (b) continue;
                }
            }
        } else if (b) {
            i5 = i8;
        } else {
            i5 += (int)Test.instanceCount;
        }
        long meth_res = i3 + i4 + i5 + i6 + Float.floatToIntBits(f2) + l + i7 + i8 + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        float f1=-3.1013F;
        byte by1=-100;
        int i10=-9, i11=19, i12=-10, i13=229;
        short s=-9608, s1=3522;
        boolean b1=false;

        if (b1) {
            f1 += (((i2 - i1) & i1) - by1);
            i2 -= (int)Test.instanceCount;
            i2 *= iMeth(i1, i1, -2988);
            Test.instanceCount += i2;
        } else if (b1) {
            Test.iArrFld[(i1 >>> 1) % N] -= i1;
            i2 += i2;
            for (i10 = 312; i10 > 15; i10--) {
                i11 = s;
                Test.iArrFld[i10] >>= s1;
                if (i10 != 0) {
                    vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f1) + by1 + i10 + i11 + s + s1 + i12 + i13 + (b1
                        ? 1 : 0);
                    return;
                }
                for (i12 = 1; 6 > i12; i12++) {
                    i11 += i12;
                    Test.instanceCount += (i12 ^ Test.instanceCount);
                    f1 += i12;
                }
            }
        } else {
            Test.instanceCount = Test.instanceCount;
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f1) + by1 + i10 + i11 + s + s1 + i12 + i13 + (b1 ? 1 : 0);
    }

    public static void vSmallMeth(byte by, float f, int i) {


        vMeth(i, i);
        vSmallMeth_check_sum += by + Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        int i14=197, i15=99, i16=-40207, i17=13, i18=-54387;
        long l1=-191L;
        double d=-80.48401;
        short s2=-7400;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        if (bFld) {
            for (int smallinvoc=0; smallinvoc<734; smallinvoc++) vSmallMeth(byFld, -2.317F, iFld);
            iFld = iFld;
            Test.lArrFld[(iFld >>> 1) % N] *= iFld;
        }
        for (i14 = 3; i14 < 150; i14++) {
            switch ((i14 % 2) + 50) {
            case 50:
                i15 -= i15;
                switch (((i14 % 10) * 5) + 11) {
                case 19:
                    for (l1 = 6; l1 < 171; l1++) {
                        Test.instanceCount = 35;
                        i15 = (int)Test.instanceCount;
                        i16 = (int)fFld;
                        bArr = bArr;
                        i15 -= i14;
                        d *= l1;
                        d += i15;
                        i16 += (int)d;
                        for (i17 = 1; i17 < 2; ++i17) {
                            i15 -= s2;
                            Test.iArrFld[i17 - 1] <<= (int)-3127060604L;
                            fFld = l1;
                            i15 = (int)d;
                            fFld -= i16;
                            Test.iArrFld[i17] += i18;
                            i18 += iFld;
                            Test.iArrFld[(int)(l1)] += 57455;
                            i16 -= i16;
                        }
                        d += s2;
                    }
                    break;
                case 57:
                    i16 += (int)(-74.83F + (i14 * i14));
                    break;
                case 22:
                    Test.instanceCount += (-14567 + (i14 * i14));
                case 60:
                    i16 *= i15;
                    break;
                case 37:
                    i16 += (19478 + (i14 * i14));
                case 48:
                    i16 += (((i14 * fFld) + i17) - i15);
                    break;
                case 24:
                    s2 = (short)4;
                    break;
                case 40:
                    i16 = i16;
                    break;
                case 47:
                case 12:
                    Test.instanceCount += l1;
                    break;
                default:
                    Test.lArrFld[i14] = i16;
                }
                break;
            case 51:
                Test.instanceCount = (long)fFld;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
