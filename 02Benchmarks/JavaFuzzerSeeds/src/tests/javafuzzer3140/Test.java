package tests.javafuzzer3140;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:34:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=35828L;
    public static int iFld=0;
    public static float fFld=-125.581F;
    public static double dFld=1.6247;
    public boolean bFld=true;
    public static int iFld1=-2;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
        FuzzerUtils.init(Test.fArrFld, 0.65F);
        FuzzerUtils.init(Test.byArrFld, (byte)-21);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-23605, i4=62329, i5=-12, i6=-3, i7=-144, i8=-49173, i9=-10484, i10=-4;
        boolean b=true;

        for (i3 = 12; 210 > i3; ++i3) {
            if (b) {
                i4 += i3;
                Test.iFld += i3;
            }
            b = b;
            for (i5 = i3; i5 < 8; i5++) {
                i6 += (i5 | i4);
                Test.iFld = (int)Test.instanceCount;
                i4 += i6;
            }
            i4 += (int)Test.instanceCount;
        }
        for (i7 = 15; i7 < 297; i7++) {
            for (i9 = 1; 6 > i9; ++i9) {
                float f1=2.762F;
                i8 >>= i5;
                f1 -= i6;
            }
            Test.iArrFld = Test.iArrFld;
        }
        vMeth1_check_sum += i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + i10;
    }

    public static int iMeth(float f) {

        byte by=-113;
        int i11=7, i12=-239, i13=33, i14=1, i15=55892;

        f += Test.iFld;
        vMeth1();
        f -= by;
        for (i11 = 12; 223 > i11; ++i11) {
            for (i13 = 1; i13 < 8; ++i13) {
                i12 += (i13 ^ (long)f);
                f = i11;
                Test.fArrFld[i13 + 1][i13] = i12;
                i14 += (14 + (i13 * i13));
                i15 = 2;
                while (--i15 > 0) {
                    if (true) {
                        i12 = (int)Test.instanceCount;
                        i12 += (i15 | Test.iFld);
                        Test.iFld = Test.iFld;
                        Test.iFld += (int)f;
                    } else if (true) {
                        Test.instanceCount += by;
                    } else if (true) {
                        Test.instanceCount += (i15 ^ i12);
                    } else {
                        i12 = i11;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + by + i11 + i12 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, long l) {

        int i2=238, i16=-10785, i17=57858, i18=2, i19=144;
        boolean b2=false;

        l += (long)Float.intBitsToFloat((int)((-72 - Math.max(i2, i2)) + (i2 + l)));
        Test.iArrFld[(i2 >>> 1) % N] &= (int)(Test.instanceCount--);
        i2 = iMeth(Test.fFld);
        for (i16 = 12; i16 < 206; ++i16) {
            boolean b1=false;
            i17 -= i16;
            i17 += (int)8L;
            if (b1) continue;
            Test.iFld += (i16 * i16);
            i2 <<= 4;
        }
        for (i18 = 333; i18 > 16; i18 -= 2) {
            if (b2) {
                Test.instanceCount += (24873 + (i18 * i18));
                Test.iArrFld[i18] += Test.iFld;
                i2 >>= 4;
                Test.iFld <<= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i2 + i16 + i17 + i18 + i19 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-226, i1=130, i20=40176, i21=-10635, i22=-6, i23=27787, i25=-98, i26=16243;
        byte by1=80;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 6140154322455804278L);
        FuzzerUtils.init(sArr, (short)-14586);

        for (i = 11; i < 356; i++) {
            vMeth(0.1274, Test.instanceCount);
            lArr[i + 1] += -54;
            Test.iFld -= -9;
            Test.iFld >>= Test.iFld;
            for (i20 = i; i20 < 73; i20++) {
                i21 = i1;
                Test.instanceCount = 38;
            }
            Test.instanceCount *= (long)Test.fFld;
        }
        for (short s : sArr) {
            Test.iArrFld = Test.iArrFld;
            i1 += Test.iFld;
            Test.instanceCount -= 656;
            s += (short)i1;
            i21 = i21;
            by1 += (byte)Test.dFld;
        }
        for (i22 = 5; i22 < 190; i22++) {
            Test.instanceCount += 41;
            switch (((i1 >>> 1) % 10) + 69) {
            case 69:
                Test.fFld = i1;
                break;
            case 70:
                if (bFld) {
                    by1 = (byte)i;
                } else if (false) {
                    i21 *= 828;
                    if (bFld) continue;
                } else if (bFld) {
                    by1 ^= (byte)Test.instanceCount;
                }
                Test.iArrFld[i22] = (int)Test.fFld;
                break;
            case 71:
                i25 = 1;
                while (++i25 < 136) {
                    Test.instanceCount |= i25;
                    Test.instanceCount = -236;
                    Test.fFld += i25;
                }
                break;
            case 72:
                Test.iFld *= i20;
                break;
            case 73:
                i23 = (int)Test.instanceCount;
                break;
            case 74:
                Test.iFld1 *= i25;
                break;
            case 75:
            case 76:
                Test.fArrFld[i22][i22] = 59;
            case 77:
                Test.iFld += (((i22 * i20) + i1) - i21);
                break;
            case 78:
                Test.instanceCount -= i23;
                break;
            default:
                Test.iFld1 = i26;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
