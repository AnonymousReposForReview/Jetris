package tests.javafuzzer1832;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:10:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-129L;
    public static volatile byte byFld=14;
    public static volatile int iFld=219;
    public boolean bFld=true;
    public static volatile double dFld=0.79788;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 24L);
        FuzzerUtils.init(Test.iArrFld, 35019);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        int i4=-38030, i5=-46, i6=-49846, i7=39615, i8=-10, i9=-11, i10=123, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, 3968);

        i3 = Test.byFld;
        if (false) {
            if (b1) {
                Test.instanceCount -= i3;
            } else if (false) {
                if (b1) {
                    i4 = 1;
                    do {
                        Test.instanceCount = i4;
                        for (i5 = i4; i5 < 7; ++i5) {
                            for (i7 = 1; i7 < 1; i7++) {
                                i8 = (int)-7L;
                                i3 += (i7 * i7);
                            }
                            Test.instanceCount &= i5;
                        }
                        for (i9 = i4; 7 > i9; i9++) {
                            i3 += (-1 + (i9 * i9));
                            iArr[i9 - 1] = i3;
                        }
                    } while (++i4 < 239);
                }
            } else if (b1) {
                i6 = -20041;
            } else {
                Test.lArrFld[(i4 >>> 1) % N] = i6;
            }
        } else {
            iArr[(i7 >>> 1) % N] += i9;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, int i2, boolean b) {

        float f=22.819F, fArr[]=new float[N];
        int i11=-11, i12=-4, i13=-64622, i14=48, i15=-11, i16=66;
        short s=5197;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 2.482F);
        FuzzerUtils.init(dArr, 1.113004);

        vMeth1(i1);
        Test.iArrFld[(i2 >>> 1) % N] += (int)f;
        fArr[(i1 >>> 1) % N] += i1;
        for (i11 = 14; i11 < 325; i11++) {
            i12 = i1;
            dArr[i11 - 1] -= Test.byFld;
            i2 = (int)Test.instanceCount;
            i2 = i11;
            for (i13 = 1; i13 < 5; i13++) {
                i12 <<= i14;
                for (i15 = 1; i15 < 2; i15++) {
                    i14 = i2;
                    s = (short)-9190;
                    Test.instanceCount *= i15;
                    Test.instanceCount += i15;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i) {


        i >>= (int)Test.instanceCount;
        vMeth(i, i, false);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i17=-12, i18=143, i19=128, i20=-12, i21=-200, i22=-4642, i23=-3, i24=-9, i25=-6996, i26=-195;
        float f1=-1.226F, fArr1[]=new float[N];
        double d1=-87.122654, dArr1[]=new double[N];

        FuzzerUtils.init(fArr1, 2.284F);
        FuzzerUtils.init(dArr1, 0.29807);

        for (int smallinvoc=0; smallinvoc<524; smallinvoc++) vSmallMeth(Test.iFld);
        for (i17 = 12; i17 < 263; i17++) {
            double d=32.39312;
            if (bFld) break;
            i18 *= Test.iFld;
            for (i19 = 4; 100 > i19; i19++) {
                fArr1[i17 - 1] = Test.iFld;
            }
            f1 += (0.918F + (i17 * i17));
            Test.instanceCount = (long)d;
            i18 += (((i17 * Test.instanceCount) + f1) - i19);
            i18 = i21;
            i21 += (-4 + (i17 * i17));
        }
        i18 += i19;
        Test.lArrFld = Test.lArrFld;
        for (i22 = 1; i22 < 171; ++i22) {
            if (false) {
                for (i24 = i22; i24 < 148; ++i24) {
                    i26 = 1;
                    while (--i26 > 0) {
                        if (bFld) continue;
                        i20 = (int)Test.instanceCount;
                    }
                    i23 = -113;
                    Test.instanceCount += (i24 - i25);
                    Test.dFld = 36499;
                    if (bFld) continue;
                    Test.lArrFld[i22 + 1] >>= Test.instanceCount;
                }
                d1 = 1;
                do {
                    dArr1[i22] -= i21;
                    switch ((i22 % 1) + 41) {
                    case 41:
                        i23 += (int)((long)d1 | Test.instanceCount);
                        Test.lArrFld[i22] += i24;
                        break;
                    default:
                        Test.iArrFld[(int)(d1)] = i23;
                    }
                } while (++d1 < 148);
            } else if (true) {
                Test.instanceCount = i21;
            } else {
                f1 += (((i22 * f1) + Test.instanceCount) - i21);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
