package tests.javafuzzer175;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:20:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=145L;
    public int iFld=-160;
    public static long lFld=-42479L;
    public byte byFld=81;
    public float fFld=0.95F;
    public boolean bFld=false;
    public double dFld=0.126437;
    public static short sArrFld[]=new short[N];
    public volatile long lArrFld[][]=new long[N][N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-23923);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public int iMeth() {


        iFld = (int)Test.instanceCount;
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1() {

        int i1=13718, i2=49179, i3=11, i4=-2, i5=12451, i6=3, i7=-72, iArr[][]=new int[N][N];
        double d=123.69928;
        short s1=-13302, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-4019);
        FuzzerUtils.init(iArr, 176);

        iMeth();
        for (i1 = 8; i1 < 217; ++i1) {
            for (i3 = 1; i3 < 8; ++i3) {
                Test.lFld = i1;
                switch ((i3 % 6) + 60) {
                case 60:
                case 61:
                    d = -3942384443L;
                    sArr[i1 + 1] = (short)iFld;
                    try {
                        i4 = (i1 % iFld);
                        iFld = (i4 / i3);
                        iFld = (i4 / iArr[i3 + 1][i3 - 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 62:
                    iFld = i4;
                    for (i5 = i3; i5 < 2; i5++) {
                        byFld >>= (byte)i1;
                        i2 = (int)10013L;
                        i4 >>= i3;
                        i6 <<= i3;
                        if (i2 != 0) {
                            vMeth1_check_sum += i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + s1 + i7 +
                                FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                    }
                    break;
                case 63:
                    iFld <<= i2;
                    break;
                case 64:
                    i6 += (((i3 * s1) + i3) - i7);
                case 65:
                    i7 = i1;
                    break;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + s1 + i7 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(short s, long l, int i) {

        int i8=-9442, i9=26490, i10=65, i11=-5, i12=-20458, iArr1[]=new int[N];
        long l1=103L;
        float fArr[][]=new float[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(fArr, -2.743F);
        FuzzerUtils.init(dArr, 31.119452);

        vMeth1();
        fFld -= iFld;
        for (i8 = 15; i8 < 381; ++i8) {
            for (l1 = 1; l1 < 5; ++l1) {
                double d1=1.30118;
                Test.sArrFld[i8 + 1] |= (short)i10;
                switch ((i8 % 10) + 11) {
                case 11:
                    d1 -= d1;
                    for (i11 = 1; 2 > i11; i11++) {
                        fFld -= fFld;
                        i9 -= i11;
                        iArr1[i11] = -246;
                        if (bFld) continue;
                        i9 += iFld;
                        fArr[i8][i11] = i9;
                    }
                    i += i10;
                    break;
                case 12:
                    iFld *= i9;
                case 13:
                    try {
                        i10 = (i8 % i12);
                        i = (i10 % i);
                        iArr1[i8 + 1] = (-231 / i8);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 14:
                    fFld += fFld;
                    break;
                case 15:
                    i12 &= i11;
                    break;
                case 16:
                    i10 -= (int)l1;
                case 17:
                    iFld -= i12;
                case 18:
                    byFld = (byte)i12;
                    break;
                case 19:
                    i9 -= iFld;
                    break;
                case 20:
                    dArr[i8 + 1] += Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += s + l + i + i8 + i9 + l1 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        short s2=-21091;
        int i13=47, i14=4, i15=3, i16=6, i17=126, i18=-203, i19=-55466, i20=14246, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -42838);

        vMeth(s2, Test.instanceCount, 4);
        for (i13 = 20; i13 < 390; i13++) {
            if (bFld) continue;
        }
        i15 = 1;
        do {
            iFld += (((i15 * i14) + i14) - s2);
            iFld = (int)Test.lFld;
            iFld += i15;
            fFld -= i13;
            fFld += (((i15 * s2) + Test.lFld) - fFld);
            for (i16 = 3; i16 < 99; ++i16) {
                Test.instanceCount = Test.instanceCount;
                Test.lFld += i14;
                for (i18 = 2; i18 > 1; --i18) {
                    i17 = (int)dFld;
                    try {
                        i19 = (iArr2[i16] % -182);
                        iArr2[i18 - 1] = (i19 / iFld);
                        i14 = (i16 / -136);
                    } catch (ArithmeticException a_e) {}
                    lArrFld[i18][i16] += (long)dFld;
                }
                i14 = s2;
                i20 = 1;
                while (++i20 < 2) {
                    s2 += (short)fFld;
                    fFld -= fFld;
                    iArr2[i16] >>= (int)Test.instanceCount;
                    fArrFld[i16 + 1][i20] -= -230;
                    bFld = false;
                    Test.instanceCount += i20;
                    i14 += (i20 * i15);
                    i17 += (i20 * i20);
                    i17 -= (int)Test.lFld;
                    i19 += i15;
                }
                i19 = i15;
            }
            i14 += (i15 ^ Test.lFld);
        } while (++i15 < 255);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
