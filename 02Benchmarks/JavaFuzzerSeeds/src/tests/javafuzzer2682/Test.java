package tests.javafuzzer2682;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:41:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=133L;
    public byte byFld=101;
    public static volatile int iFld=-1;
    public static float fFld=-118.823F;
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7L);
        FuzzerUtils.init(Test.fArrFld, 91.991F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, boolean b, short s) {

        int i4=-14, i5=204, i6=10642, iArr1[]=new int[N];
        double d1=114.107315;
        byte by=-5, by1=-93;

        FuzzerUtils.init(iArr1, -45407);

        if (b) {
            i4 = 1;
            do {
                int i7=-12;
                Test.iFld += Test.iFld;
                d1 -= -2305825368L;
                Test.iFld = (int)Test.instanceCount;
                switch ((i4 % 9) + 79) {
                case 79:
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld >>= i3;
                    iArr1[i4] = Test.iFld;
                case 80:
                    iArr1[i4 - 1] >>= s;
                    for (i5 = 1; i5 < 5; i5++) {
                        i6 = (int)-2175521407L;
                        Test.iFld += (28993 + (i5 * i5));
                        i3 += (i5 + i4);
                        i3 = i4;
                    }
                    break;
                case 81:
                    Test.iFld *= 187;
                    break;
                case 82:
                    if (true) continue;
                    break;
                case 83:
                    Test.instanceCount = Test.iFld;
                    break;
                case 84:
                    by = by1;
                case 85:
                    Test.iFld = 16;
                    break;
                case 86:
                    by *= (byte)i4;
                case 87:
                    i6 = Test.iFld;
                    break;
                default:
                    i7 = (int)Test.instanceCount;
                }
            } while (++i4 < 312);
        } else {
            b = b;
        }
        long meth_res = i3 + (b ? 1 : 0) + s + i4 + Double.doubleToLongBits(d1) + i5 + i6 + by + by1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        boolean b1=true;
        short s1=19440;
        int i8=5, i9=-2, i10=20272, i11=9, i12=23, i13=10, iArr2[]=new int[N];
        double d2=-1.26539;

        FuzzerUtils.init(iArr2, -17684);

        switch (((iMeth1(Test.iFld, b1, s1) >>> 1) % 1) + 29) {
        case 29:
            Test.lArrFld[(-30395 >>> 1) % N] = Test.iFld;
        }
        for (i8 = 13; i8 < 272; i8++) {
            for (i10 = 6; i10 > i8; --i10) {
                iArr2[i8 + 1] += (int)d2;
                d2 = Test.fFld;
                for (i12 = 1; i12 > 1; i12 -= 3) {
                    i9 += Test.iFld;
                    Test.fArrFld[i12 - 1] -= i9;
                    Test.instanceCount += i12;
                    i9 += (i12 * i12);
                    try {
                        i9 = (iArr2[i8 + 1] / 193);
                        iArr2[i8 - 1] = (iArr2[i8 + 1] / i11);
                        Test.iFld = (i2 % 36980);
                    } catch (ArithmeticException a_e) {}
                    i13 = 0;
                    if (i2 != 0) {
                        vMeth_check_sum += i2 + (b1 ? 1 : 0) + s1 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2) +
                            i12 + i13 + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    Test.instanceCount += (i12 | i13);
                }
            }
        }
        vMeth_check_sum += i2 + (b1 ? 1 : 0) + s1 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2) + i12 + i13 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(double d, float f1, int i1) {

        double d3=-16.48480;
        int i14=43982, i15=10, i16=2, iArr[]=new int[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 204L);
        FuzzerUtils.init(iArr, 10);

        i1 = (i1++);
        for (long l : lArr) {
            iArr[(i1 >>> 1) % N] += (int)lArr[(Test.iFld >>> 1) % N];
            i1 >>>= ((++Test.iFld) * Test.iFld);
            if ((((iArr[(i1 >>> 1) % N] = (int)-1056016327L) + (f1++)) + ((i1 ^ i1) - (-Test.instanceCount))) !=
                Test.iFld) continue;
            vMeth(-7);
            for (d3 = 1; d3 < 4; d3++) {
                f1 -= Test.fFld;
                i14 -= i14;
            }
            if (Test.iFld != 0) {
            }
            b2 = b2;
            for (i15 = 4; i15 > 1; i15 -= 3) {
                Test.iFld -= 112;
                b2 = b2;
                Test.fArrFld = Test.fArrFld;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d3) + i14
            + (b2 ? 1 : 0) + i15 + i16 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.44F;
        int i=-59745, i17=2, i18=-207, i19=3, i20=6629, i21=-170, i22=-213;
        boolean b3=false;
        long l1=4746L, l2=249L;

        if (b3) {
            byFld *= (byte)(((0.116780 - (f - i)) + f) + ((i + f) - (37 + (-7085441247062402691L * iMeth(2.35809,
                Test.fFld, Test.iFld)))));
            for (i17 = 9; i17 < 388; i17++) {
                if (b3) continue;
                Test.instanceCount += (((i17 * Test.iFld) + Test.instanceCount) - Test.instanceCount);
                i18 *= i18;
            }
        }
        Test.instanceCount = i;
        for (short s2 : sArrFld) {
            for (i19 = 3; i19 < 63; i19 += 2) {
                Test.iFld = i19;
                i -= i19;
                Test.instanceCount -= i18;
                Test.instanceCount *= l1;
            }
        }
        iArrFld[(Test.iFld >>> 1) % N] += -61;
        for (float f2 : Test.fArrFld) {
            Test.iFld += (int)f2;
            iArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
            switch ((((i20 >>> 1) % 7) * 5) + 96) {
            case 106:
                for (i21 = 3; i21 < 63; i21++) {
                    Test.iFld = (int)l1;
                    i += (i21 * l1);
                    i20 += i21;
                    i += (i21 * i21);
                    i = 1624;
                    i20 -= 3;
                    Test.fArrFld[i21 - 1] *= i19;
                    i20 += i21;
                    i18 <<= byFld;
                }
                i = 3;
            case 110:
                f2 += -60019;
                break;
            case 108:
                Test.iFld *= i20;
            case 114:
                l2 >>= i20;
                break;
            case 116:
                i = i18;
                break;
            case 124:
                Test.fArrFld[(i20 >>> 1) % N] = l2;
                break;
            case 131:
                i -= -15409;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
