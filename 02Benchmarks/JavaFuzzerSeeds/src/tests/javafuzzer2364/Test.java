package tests.javafuzzer2364;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:34:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30L;
    public static byte byFld=-8;
    public static short sFld=-5838;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.40F);
        FuzzerUtils.init(Test.lArrFld, 2580534991986757183L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i10) {

        int i11=166, i12=8, i13=-50300, i14=-48452, i15=-233, i16=-13, iArr[]=new int[N];
        short s1=384;
        double d=-1.93917;
        boolean b1=false;
        float f1=-1.284F;

        FuzzerUtils.init(iArr, -55);

        i10 -= i10;
        for (i11 = 4; i11 < 205; ++i11) {
            for (i13 = 1; i13 < 8; i13++) {
                i14 -= (int)1.602F;
                for (i15 = 2; i15 > 1; --i15) {
                    i14 *= s1;
                    i14 = (int)Test.instanceCount;
                    Test.fArrFld[i11 + 1] -= i16;
                    iArr[i15 + 1] = 55264;
                    switch ((i11 % 2) + 54) {
                    case 54:
                        switch ((i13 % 7) + 84) {
                        case 84:
                            i16 *= i10;
                            iArr[i15 - 1] = (int)d;
                            Test.instanceCount *= 10;
                            i14 -= s1;
                            break;
                        case 85:
                            i16 &= 9;
                            break;
                        case 86:
                            i12 -= -55468;
                            break;
                        case 87:
                            i10 += (i15 - i15);
                            break;
                        case 88:
                            i10 = i16;
                        case 89:
                            b1 = b1;
                        case 90:
                            f1 = 3298;
                            break;
                        }
                        break;
                    case 55:
                        i14 += i10;
                        break;
                    }
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + s1 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(short s) {

        int i6=76, i7=14, i8=1, i9=153, i17=-4, i18=36, i19=-4, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        float f=-116.999F;
        double d1=0.109390;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, 51431);

        for (i6 = 13; i6 < 283; ++i6) {
            b = bArr[i6 + 1];
            for (i8 = 1; i8 < 6; i8++) {
                i7 += (int)(i6 + ((f - i8) - -103));
                i7 += (i8 * i8);
                dMeth(i6);
                i9 *= i6;
                i17 = (int)d1;
            }
            for (i18 = 1; i18 < 6; i18 += 2) {
                i17 <<= i7;
                i9 *= (int)f;
                i19 += i8;
                i7 = i19;
            }
            iArr1[i6] = 3;
            i19 = (int)8521297117092996196L;
        }
        long meth_res = s + i6 + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f) + i17 +
            Double.doubleToLongBits(d1) + i18 + i19 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i1=27, i2=-18340, i3=55262, i4=51, i5=-61, iArr2[]=new int[N];
        short s2=-22047, s3=19852;
        float f2=2.176F;
        long l=-11L;

        FuzzerUtils.init(iArr2, 49874);

        i1 = 1;
        while (++i1 < 286) {
            for (i2 = i1; i2 < 6; ++i2) {
                for (i4 = 1; i4 < 1; i4++) {
                    byte by=90;
                    Test.instanceCount += i4;
                    by >>= (byte)(((i1 + by) - (-(i1 * 124))) + ((-199 - (Test.instanceCount - i1)) *
                        lMeth((short)(15105))));
                    switch ((i1 % 3) + 42) {
                    case 42:
                        Test.instanceCount >>= i4;
                        i5 = i2;
                        try {
                            i5 = (0 / i3);
                            i3 = (i3 % i2);
                            iArr2[i2] = (-273792275 / i4);
                        } catch (ArithmeticException a_e) {}
                        s2 = (short)i5;
                        break;
                    case 43:
                        i3 = 179;
                        s3 -= (short)12;
                        break;
                    case 44:
                        Test.lArrFld[i1 + 1][i1 + 1] += (long)f2;
                        Test.instanceCount *= -2834;
                        l += (((i4 * i5) + i5) - i3);
                    default:
                        iArr2[i4 + 1] = i5;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + s2 + s3 + Float.floatToIntBits(f2) + l +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=56834, i20=-3, i21=191, i22=-14, i23=245, i24=247, i25=3, i26=-54797, i27=-60035, i28=152, i29=50539,
            i30=-131, i31=59655;
        float f3=0.439F, f4=-105.99F;
        boolean b2=false;
        double d2=-1.96238, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.69164);

        i = 259;
        do {
            vMeth();
        } while (--i > 0);
        for (i20 = 15; i20 < 274; i20++) {
            i21 *= Test.byFld;
            Test.instanceCount += (-5122494101494797418L + (i20 * i20));
            i21 += (int)-10L;
        }
        Test.sFld = (short)1.922F;
        for (f3 = 5; f3 < 264; ++f3) {
            f4 += i22;
            i21 = i;
            for (i23 = 97; 6 < i23; i23--) {
                i24 -= Test.byFld;
                for (i25 = (int)(f3); i25 < 2; ++i25) {
                    if (b2) continue;
                    i21 += (((i25 * Test.instanceCount) + i21) - i27);
                    Test.instanceCount += (i25 - i26);
                    Test.instanceCount = Test.instanceCount;
                }
                i26 = i25;
                f4 += i22;
                i27 = (int)2859182477L;
            }
            i26 += (int)Test.instanceCount;
            dArr = dArr;
            for (i28 = 3; i28 < 97; ++i28) {
                i21 -= i27;
                d2 = Test.byFld;
                i29 = i26;
                for (i30 = 1; i30 < 2; i30++) {
                    i22 -= i21;
                    i24 = (int)Test.instanceCount;
                    b2 = true;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
