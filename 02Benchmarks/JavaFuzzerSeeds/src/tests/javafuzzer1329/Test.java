package tests.javafuzzer1329;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-46272L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -212);
        FuzzerUtils.init(Test.lArrFld, 76L);
        FuzzerUtils.init(Test.iArrFld1, -62327);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        long l=-4042380239L;
        int i8=-32315, i9=-8168, i10=-57291;
        byte by2=-79;
        double d=0.88744;
        short s=1181;
        float f2=2.522F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr, -33.947F);

        Test.iArrFld[(i7 >>> 1) % N] = i7;
        for (l = 3; l < 319; ++l) {
            by2 += (byte)(l * l);
            for (i9 = 1; 5 > i9; i9++) {
                d *= i7;
                fArr[(int)(l)] += Test.instanceCount;
                by2 += (byte)i8;
                switch (((i9 % 9) * 5) + 21) {
                case 35:
                case 41:
                case 25:
                    i10 = -11;
                    Test.instanceCount -= i8;
                    break;
                case 47:
                    i8 -= i10;
                    Test.iArrFld1[(int)(l)] = s;
                    break;
                case 32:
                    f2 -= 4;
                    i8 = i8;
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 48:
                    i8 = i10;
                    break;
                case 26:
                    i7 *= i9;
                case 29:
                    if (b) continue;
                    break;
                case 60:
                    Test.instanceCount >>>= i7;
                default:
                    i8 = i7;
                }
            }
        }
        vMeth1_check_sum += i7 + l + i8 + by2 + i9 + i10 + Double.doubleToLongBits(d) + s + Float.floatToIntBits(f2) +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f1, int i1, int i2) {

        byte by1=-99;
        int i3=-75, i4=2, i5=44628, i6=-7, i11=26012, i12=73;

        Test.lArrFld[(i1 >>> 1) % N] += -156;
        Test.iArrFld[(i2 >>> 1) % N] <<= by1;
        for (i3 = 1; i3 < 140; ++i3) {
            for (i5 = i3; i5 < 11; i5++) {
                vMeth1(i4);
                for (i11 = 1; 1 > i11; i11++) {
                    Test.instanceCount += (0L + (i11 * i11));
                    i2 += (i11 ^ i2);
                    i4 *= i3;
                    try {
                        i1 = (i11 % 266502522);
                        i2 = (i1 % i5);
                        i4 = (320 % i6);
                    } catch (ArithmeticException a_e) {}
                    i6 += (int)(1490081344L + (i11 * i11));
                    if (true) break;
                    Test.iArrFld1[i3] -= i5;
                    i12 &= i12;
                    i1 += (i11 - f1);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i2 + by1 + i3 + i4 + i5 + i6 + i11 + i12;
    }

    public static int iMeth() {

        int i=89, i13=-10, i14=12150, i15=-51, i16=-12, i17=2, iArr[][]=new int[N][N];
        float f=1.460F, fArr1[][]=new float[N][N];
        byte by=115, byArr[]=new byte[N];
        short s1=20357;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 238);
        FuzzerUtils.init(byArr, (byte)-101);
        FuzzerUtils.init(dArr, 2.6489);
        FuzzerUtils.init(fArr1, 0.605F);

        iArr[(-20771 >>> 1) % N][(i >>> 1) % N] = (int)(f - ((i - i) * (Test.instanceCount / -735782840L)));
        i &= (int)((~Test.iArrFld[(i >>> 1) % N]) - (i + (by + Test.instanceCount)));
        vMeth(f, i, i13);
        byArr = byArr;
        for (i14 = 11; i14 < 187; i14++) {
            dArr[i14] = i15;
        }
        f *= Test.instanceCount;
        for (i16 = 7; i16 < 273; i16++) {
            iArr[i16 + 1][i16] <<= i15;
            switch ((((14 >>> 1) % 7) * 5) + 125) {
            case 153:
                i17 -= (int)f;
                break;
            case 159:
                i += (int)Test.instanceCount;
                i13 += (i16 * Test.instanceCount);
                i13 <<= (int)Test.instanceCount;
                s1 = (short)i;
                break;
            case 146:
                f -= i;
            case 132:
                Test.instanceCount = i15;
                break;
            case 140:
                fArr1 = fArr1;
                break;
            case 157:
                dArr[i16 - 1] %= 44634L;
            case 128:
                i17 <<= 1987;
                break;
            default:
                iArr[i16] = Test.iArrFld1;
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + by + i13 + i14 + i15 + i16 + i17 + s1 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {


        iMeth();



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
