package tests.javafuzzer3326;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:16:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=194L;
    public static volatile boolean bFld=false;
    public static volatile float fFld=-2.318F;
    public static byte byFld=-87;
    public static int iFld=0;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i1, long l1) {

        int i2=-7, i3=13, i4=206, i5=-28870;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -106.330F);

        for (i2 = 7; i2 < 180; ++i2) {
            Test.bFld = Test.bFld;
            Test.instanceCount += (i2 + i3);
            i1 -= -7;
            i1 *= i3;
            i3 = (int)11L;
            i3 += (i2 * i2);
        }
        fArr[(i2 >>> 1) % N] *= i3;
        for (i4 = 6; i4 < 332; ++i4) {
            switch ((i4 % 5) + 29) {
            case 29:
                if (Test.bFld) continue;
                if (Test.bFld) continue;
                l1 += i3;
                break;
            case 30:
                fArr[i4] = Test.fFld;
                if (false) continue;
            case 31:
                i5 += (i4 * i4);
                break;
            case 32:
                i3 = i1;
                break;
            case 33:
                Test.bFld = Test.bFld;
            default:
                Test.instanceCount = i3;
            }
        }
        long meth_res = i1 + l1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i6=-7, i7=-3396, i8=-206;

        l <<= iMeth1(i6, l);
        Test.byFld >>>= (byte)i6;
        i6 = (int)Test.instanceCount;
        Test.fFld -= Test.iFld;
        i7 = 138;
        do {
            if (Test.bFld) break;
            i8 = 1;
            while (++i8 < 11) {
                float f=0.721F;
                f += (9 + (i8 * i8));
                l += (long)Test.fFld;
                i6 += (((i8 * Test.instanceCount) + i7) - Test.byFld);
                i6 += (i8 | i6);
                if (Test.bFld) break;
                i6 += i8;
            }
            i6 += i7;
            i6 = Test.iFld;
        } while (--i7 > 0);
        long meth_res = l + i6 + i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {


        Test.instanceCount = iMeth(Test.instanceCount);
        Test.fFld -= Test.instanceCount;
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i9=5, i10=-65337, i11=63716, i12=-6, i13=31582, i14=-207, i15=15505, i16=-1, i17=-51187, i18=1;
        float f1=-38.866F, f2=-84.604F;
        double d=-2.100906;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i <<= (iArrFld[(i >>> 1) % N] - ((i / (i | 1)) * iArrFld[(i >>> 1) % N]));
        vMeth();
        Test.instanceCount = Test.iFld;
        i *= (int)Test.instanceCount;
        Test.iFld -= (int)-225L;
        for (i9 = 223; i9 > 7; --i9) {
            for (i11 = 1; i11 < 116; i11++) {
                lArrFld[i11 - 1] *= Test.instanceCount;
                for (f1 = i9; f1 < 2; ++f1) {
                    lArrFld[(i9 >>> 1) % N] -= -54606;
                    i13 -= i10;
                }
            }
            bArr[i9 - 1] = Test.bFld;
            i10 += i11;
        }
        Test.iFld <<= 25045;
        d += Test.instanceCount;
        for (i14 = 2; 215 > i14; ++i14) {
            Test.byFld = (byte)i11;
            switch (((i9 >>> 1) % 3) + 28) {
            case 28:
                i <<= i9;
                i12 -= i14;
                Test.iFld += i11;
                Test.instanceCount += (((i14 * Test.byFld) + Test.instanceCount) - Test.instanceCount);
            case 29:
                for (f2 = i14; 118 > f2; ++f2) {
                    Test.instanceCount = Test.iFld;
                    iArrFld = iArrFld;
                    lArrFld[i14] = i15;
                    for (i17 = 1; i17 < 1; ++i17) {
                        Test.instanceCount = Test.instanceCount;
                        iArrFld = iArrFld;
                        try {
                            i15 = (Test.iFld % i17);
                            iArrFld[i14] = (-48 / i16);
                            i13 = (i / i13);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                break;
            case 30:
                i12 *= i18;
                break;
            default:
                i10 = 51;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
