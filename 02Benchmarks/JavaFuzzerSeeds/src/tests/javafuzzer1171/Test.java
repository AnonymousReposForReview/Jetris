package tests.javafuzzer1171;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17874L;
    public static volatile boolean bFld=false;
    public static double dFld=-2.66790;
    public volatile long lFld=4L;
    public static float fFld=2.886F;
    public byte byFld=0;
    public int iFld=-35502;
    public static int iFld1=-46459;
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -64);
        FuzzerUtils.init(Test.fArrFld, 0.855F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l) {

        float f=-2.887F, f1=-72.80F, fArr[][]=new float[N][N];
        int i3=-6, i4=27088, i5=1, i6=47518, iArr1[]=new int[N];

        FuzzerUtils.init(fArr, 0.570F);
        FuzzerUtils.init(iArr1, 21583);

        fArr[(i2 >>> 1) % N][(i2 >>> 1) % N] *= l;
        for (f = 13; f < 364; f++) {
            f1 -= -127;
            if (Test.bFld) continue;
            for (i4 = 1; i4 < 5; i4++) {
                i6 = 1;
                do {
                    if (i4 != 0) {
                        vMeth1_check_sum += i2 + l + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + i4 + i5
                            + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    f1 -= i5;
                    Test.bFld = Test.bFld;
                    switch ((int)(((f % 1) * 5) + 67)) {
                    case 72:
                        iArr1[(i6 >>> 1) % N] += (int)l;
                        i2 -= i2;
                        if (i2 != 0) {
                            vMeth1_check_sum += i2 + l + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + i4 +
                                i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        i5 = -26062;
                    }
                    i3 ^= i6;
                } while (++i6 < 2);
            }
        }
        vMeth1_check_sum += i2 + l + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1) {

        short s1=-24238;
        int i8=-19817, i9=48596, i10=-130, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -20);

        vMeth1(i1, Test.instanceCount);
        Test.instanceCount *= Test.instanceCount;
        s1 = (short)i1;
        Test.instanceCount += i1;
        i1 = i1;
        for (int i7 : iArr2) {
            for (i8 = 1; i8 < 4; ++i8) {
                Test.instanceCount <<= i1;
                Test.bFld = Test.bFld;
                if (true) continue;
                i10 = 2;
                while (--i10 > 0) {
                    switch ((((i1 >>> 1) % 3) * 5) + 10) {
                    case 13:
                        Test.instanceCount += i10;
                        i9 = i10;
                        break;
                    case 12:
                        Test.bFld = Test.bFld;
                    case 23:
                        i9 += i10;
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + s1 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, short s) {

        int i11=-13, i12=18554, i13=1, i14=-8, i15=56, iArr[]=new int[N];
        float f2=0.309F;
        byte by=-14;

        FuzzerUtils.init(iArr, 33359);

        iArr[(i >>> 1) % N] -= iMeth(i);
        for (i11 = 6; i11 < 248; ++i11) {
            for (i13 = i11; i13 < 7; ++i13) {
                Test.dFld -= 4093;
                for (f2 = 1; f2 < 1; f2++) {
                    i15 ^= (int)lFld;
                    by -= (byte)i;
                    i12 = i15;
                    if (i12 != 0) {
                        vMeth_check_sum += i + s + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i15 + by +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i15 *= by;
                    Test.fFld -= i15;
                    i += (int)((long)f2 ^ i13);
                    i14 -= (int)-5L;
                }
                i12 += (((i13 * Test.instanceCount) + i15) - i);
                lFld += i11;
            }
        }
        vMeth_check_sum += i + s + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i15 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=56876, i17=-3, i18=-12430, i19=-64038, i20=-107, i21=108, i22=25255;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -3878446006545472342L);
        FuzzerUtils.init(bArr, true);

        vMeth(i16, (short)(9348));
        Test.bFld = Test.bFld;
        for (i17 = 11; i17 < 326; i17++) {
            dArrFld = dArrFld;
            for (i19 = 5; 80 > i19; i19++) {
                dArrFld[i17 - 1] *= i19;
                i18 = i18;
                i21 = 2;
                do {
                    i18 += 53785;
                    switch ((i19 % 2) + 106) {
                    case 106:
                        lArr[i19] += (long)Test.dFld;
                        lFld %= (i19 | 1);
                        bArr = bArr;
                        if (Test.bFld) {
                            byFld += (byte)(4 + (i21 * i21));
                        }
                        break;
                    case 107:
                        Test.instanceCount *= -27699;
                        i16 += (i21 * i21);
                        Test.iArrFld[i17] -= byFld;
                        i18 -= i18;
                        break;
                    default:
                        Test.fFld = iFld;
                        i20 = i21;
                    }
                } while ((i21 -= 2) > 0);
                Test.iArrFld[i19 + 1] *= i20;
                Test.fArrFld[i19] = Test.instanceCount;
                i22 = 1;
                do {
                    Test.instanceCount += (((i22 * i18) + Test.instanceCount) - i17);
                    if (Test.bFld) continue;
                    Test.instanceCount = i22;
                    lArr[i22 - 1] += Test.iFld1;
                    lFld += lFld;
                    i18 = (int)Test.instanceCount;
                } while (++i22 < 2);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
