package tests.javafuzzer1654;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:47:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=14L;
    public static float fFld=1.1010F;
    public static boolean bFld=true;
    public static int iFld=-24788;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -60487L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i9=13, i10=-2, i11=30165, i12=-244, i13=62581, i14=41328, i15=-32297, iArr2[]=new int[N];
        short s=-31478;
        boolean b=false;
        long lArr[][]=new long[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 31039L);
        FuzzerUtils.init(iArr2, 65219);
        FuzzerUtils.init(dArr, 2.73603);

        lArr[(50576 >>> 1) % N][(254 >>> 1) % N] = i9;
        i10 = 1;
        do {
            lArr[i10 - 1][i10] = (long)Test.fFld;
            i9 -= 10;
            try {
                i9 = (iArr2[i10] % -11615994);
                iArr2[i10 - 1] = (-84 / i9);
                i9 = (iArr2[i10 + 1] / i9);
            } catch (ArithmeticException a_e) {}
            dArr[i10 - 1] += i10;
            i9 = s;
            i9 *= (int)Test.instanceCount;
        } while (++i10 < 180);
        for (i11 = 21; i11 < 340; ++i11) {
            Test.instanceCount >>= i9;
            i13 = 1;
            while (++i13 < 5) {
                for (i14 = 1; 1 > i14; ++i14) {
                    i15 >>= i11;
                    i12 = i14;
                    b = b;
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + s + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        double d1=0.21738;
        int i5=3, i6=0, i7=14, i16=-31821, i17=130, i18=9, iArr1[]=new int[N];
        byte by1=115;

        FuzzerUtils.init(iArr1, -9);

        d1 *= Math.abs(-(i5 - i5));
        for (i6 = 6; i6 < 122; ++i6) {
            i5 += (i6 * Test.instanceCount);
            vMeth1();
            Test.instanceCount += 35270;
            for (i16 = 1; i16 < 13; ++i16) {
                Test.instanceCount = i6;
                Test.instanceCount *= i16;
                iArr1[i16] += i6;
                Test.instanceCount ^= i6;
            }
            if (Test.bFld) break;
            i18 += (int)2.331F;
            i17 <<= i6;
        }
        by1 -= (byte)i18;
        i5 = (int)Test.instanceCount;
        long meth_res = Double.doubleToLongBits(d1) + i5 + i6 + i7 + i16 + i17 + i18 + by1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        float f=1.177F;
        double d=-2.107672;
        int i1=-7, i2=-49494, i3=3, i4=-43736, i19=-5, i20=-11280, i21=9, iArr[]=new int[N];
        byte by=-113;

        FuzzerUtils.init(iArr, 152);

        f += (float)(Test.instanceCount - (d++));
        Test.instanceCount = (long)(f--);
        for (i1 = 18; i1 < 333; ++i1) {
            for (i3 = i1; i3 < 5; i3++) {
                if ((((i = i2) - (i1 * d)) != Test.instanceCount) || ((i4 != (-iArr[i3 + 1])) != ((-1.241F >= (i4 =
                    (int)-21702L)) || (Test.instanceCount >= Test.instanceCount)))) continue;
                by += (byte)(iMeth() - i4);
            }
            if (Test.bFld) break;
            i19 = 1;
            do {
                for (i20 = 1; i20 < 1; ++i20) {
                    Test.lArrFld[i19] = i4;
                    switch ((i1 % 6) + 59) {
                    case 59:
                        iArr = iArr;
                        i4 >>>= i20;
                        break;
                    case 60:
                        d += i2;
                        i4 *= (int)35823L;
                        break;
                    case 61:
                    case 62:
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    case 63:
                        Test.lArrFld = Test.lArrFld;
                        break;
                    case 64:
                        if (i19 != 0) {
                            vMeth_check_sum += i + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + i3
                                + i4 + by + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    }
                }
            } while (++i19 < 5);
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + by + i19 +
            i20 + i21 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i22=2, i23=-7803, i24=-98, i25=59572, i26=35355, i27=1, i28=-8, i29=-6, i30=-47634, i31=-12;
        double d2=-94.60071;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -111.968F);

        vMeth(Test.iFld);
        Test.iFld = (int)Test.instanceCount;
        for (i22 = 12; i22 < 268; ++i22) {
            for (i24 = 4; 98 > i24; ++i24) {
                Test.instanceCount -= 51630;
                switch ((i24 % 3) + 39) {
                case 39:
                    i26 = 1;
                    do {
                        i23 += i26;
                        i23 ^= i22;
                        Test.instanceCount = i24;
                    } while (++i26 < 2);
                    Test.bFld = Test.bFld;
                    Test.iFld >>= (int)Test.instanceCount;
                    break;
                case 40:
                    try {
                        i27 = (i24 % -142);
                        i23 = (i25 / -46);
                        i23 = (-7656 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                case 41:
                    Test.instanceCount += i24;
                    Test.iFld *= i27;
                    i25 <<= i24;
                    fArr[i24][i24 - 1] /= (i26 | 1);
                    break;
                }
                i23 <<= i27;
                i25 = 139;
            }
            i25 += 51;
            if (Test.bFld) break;
            Test.instanceCount = (long)d2;
            for (i28 = i22; 98 > i28; i28++) {
                for (i30 = 1; i22 < i30; --i30) {
                    i27 += i30;
                    if (Test.bFld) {
                        i29 += -50412;
                        Test.instanceCount += (i30 + Test.fFld);
                        i31 = i23;
                    } else if (Test.bFld) {
                        i27 += (int)d2;
                    } else if (Test.bFld) {
                        try {
                            i31 = (i31 % 54251);
                            i29 = (i26 % i31);
                            i23 = (46110 % i23);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        i27 += (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
