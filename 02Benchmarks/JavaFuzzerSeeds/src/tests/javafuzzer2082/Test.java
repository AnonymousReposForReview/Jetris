package tests.javafuzzer2082;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:41:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=53L;
    public static volatile boolean bFld=true;
    public static short sFld=-7191;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5380);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i6, long l1) {

        int i7=-242, i8=-124, i9=16, i10=11, iArr[]=new int[N];
        double d1=-39.21356, d2=-2.73496;
        float f=73.51F;

        FuzzerUtils.init(iArr, 8);

        for (i7 = 4; i7 < 389; ++i7) {
            for (i9 = 4; i9 > 1; i9--) {
                iArr[i9 + 1] = i10;
                Test.instanceCount += i9;
                i6 = 10;
                if (Test.bFld) continue;
                d1 = 1;
                do {
                    short s=-954;
                    byte by=120;
                    d2 = i10;
                    i6 *= s;
                    iArr[i7 + 1] <<= (int)l1;
                    l1 = i6;
                    l1 += (long)((long)d1 | by);
                    f *= -2L;
                    iArr[i9 - 1] = i10;
                    iArr[i9] = (int)f;
                } while (++d1 < 2);
            }
        }
        long meth_res = i6 + l1 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(long l, double d) {

        int i3=-43, i4=-61902, i5=-9, i11=-9, i12=-6, i13=9, i14=-168, iArr1[][]=new int[N][N];
        short s1=-4441;
        long l2=-6592539473086686807L;
        float f1=109.629F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 34);

        i3 = 1;
        do {
            for (i4 = i3; i4 < 6; i4++) {
                bArr[i4 - 1] = bMeth(i3, Test.instanceCount);
                i5 = i4;
            }
            if (Test.bFld) {
                i5 += i3;
            } else if (Test.bFld) {
                l >>= i4;
                s1 = (short)i3;
                for (i11 = 1; i11 < 6; i11++) {
                    l2 = i5;
                    for (i13 = i3; i13 < 2; i13++) {
                        f1 *= 0;
                        Test.bFld = Test.bFld;
                        i14 = 55157;
                        try {
                            i14 = (-17385 / i11);
                            i5 = (iArr1[i13 + 1][i13] % i3);
                            iArr1[i11 - 1][i11 + 1] = (i3 / -159);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            } else {
                l += (i3 ^ l);
            }
        } while (++i3 < 280);
        vMeth1_check_sum += l + Double.doubleToLongBits(d) + i3 + i4 + i5 + s1 + i11 + i12 + l2 + i13 + i14 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1, int i2) {

        double d3=-8.2144;
        int i15=7, i16=162, i17=-8413, i18=-8, i19=5;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, true);

        if (Test.bFld) {
            vMeth1(Test.instanceCount, d3);
            Test.iArrFld[(i >>> 1) % N] /= (int)(i | 1);
            i15 = 1;
            do {
                i1 += (8 + (i15 * i15));
                i = i2;
                i16 = 12;
                while (--i16 > 0) {
                    for (i17 = 1; i17 < 1; i17++) {
                        byte by1=91;
                        Test.instanceCount &= i15;
                        Test.iArrFld[i16 + 1] <<= (int)Test.instanceCount;
                        Test.bFld = true;
                        i += (i17 ^ i18);
                        i1 -= Test.sFld;
                        i -= by1;
                        if (i17 != 0) {
                            vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d3) + i15 + i16 + i17 + i18 + i19
                                + FuzzerUtils.checkSum(bArr1);
                            return;
                        }
                    }
                }
            } while (++i15 < 136);
        } else if (Test.bFld) {
            i18 -= i18;
        } else if (Test.bFld) {
            bArr1[(i19 >>> 1) % N] = Test.bFld;
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d3) + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(bArr1);
    }

    public void mainTest(String[] strArr1) {

        int i20=-9, i21=-12, i22=-8588, i23=-12, i24=-207, i25=-10, i26=10, i27=-213, i28=-96;
        double d4=0.99793;
        float f2=-2.179F, fArr[]=new float[N];
        byte by2=-105;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -90.444F);
        FuzzerUtils.init(lArr, -193L);
        FuzzerUtils.init(sArr, (short)-31196);

        vMeth(i20, i20, i20);
        Test.instanceCount = i20;
        fArr[(i20 >>> 1) % N] += i20;
        d4 *= i20;
        switch ((((i20 >>> 1) % 2) * 5) + 94) {
        case 96:
            Test.sFld = (short)i20;
            d4 %= (i20 | 1);
            break;
        case 104:
            i21 = 1;
            while (++i21 < 284) {
                lArr[i21 + 1] += i21;
                i20 &= i21;
                i20 |= i20;
                if (Test.bFld) continue;
                i20 += (((i21 * Test.instanceCount) + f2) - i20);
            }
            by2 += (byte)Test.instanceCount;
        }
        lArr[(i22 >>> 1) % N] -= i21;
        Test.instanceCount -= i22;
        i22 -= (int)Test.instanceCount;
        for (i23 = 1; i23 < 230; ++i23) {
            for (i25 = 110; i25 > 6; --i25) {
                i27 = 1;
                while (++i27 < 2) {
                    Test.iArrFld[i23] = 6;
                    Test.instanceCount = (long)f2;
                }
                i28 = 2;
                do {
                    sArr[i28 + 1] = (short)-23549;
                    f2 = -1214390722L;
                    i20 = i27;
                    Test.instanceCount -= i20;
                    Test.iArrFld[i25] <<= i27;
                    i24 = (int)Test.instanceCount;
                    d4 -= 60556;
                } while (--i28 > 0);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
