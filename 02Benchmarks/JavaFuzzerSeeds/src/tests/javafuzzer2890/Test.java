package tests.javafuzzer2890;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:22:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2352236817490414529L;
    public static volatile float fFld=0.14F;
    public static byte byFld=113;
    public static double dFld=-1.55368;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.lArrFld, 8492868550551752556L);
        FuzzerUtils.init(Test.iArrFld1, 2);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vSmallMeth() {


        Test.instanceCount += (Test.iArrFld[(-8 >>> 1) % N]--);
        vSmallMeth_check_sum += 0;
    }

    public static void vMeth(boolean b, int i3) {

        double d1=0.101653;

        i3 += (int)((-(Test.instanceCount + i3)) + (++Test.iArrFld[(i3 >>> 1) % N]));
        d1 = Test.instanceCount;
        vMeth_check_sum += (b ? 1 : 0) + i3 + Double.doubleToLongBits(d1);
    }

    public static boolean bMeth(float f1, long l) {

        double d2=-74.41931, d3=-1.119842, d4=-1.19717;
        int i4=9, i5=-7, i6=91, i7=170, i8=14, i9=142;

        for (d2 = 12; d2 < 298; ++d2) {
            vSmallMeth();
            i4 = (int)l;
            Test.fFld -= l;
        }
        i4 -= (int)l;
        d3 %= ((long)(d3) | 1);
        for (i5 = 5; i5 < 247; ++i5) {
            for (i7 = 1; i7 < 7; ++i7) {
                l = i6;
                for (d4 = 1; d4 < 2; d4++) {
                    i9 += (int)d2;
                    Test.iArrFld[(int)(d4 - 1)] -= (int)Test.instanceCount;
                    i8 += (int)l;
                }
                Test.instanceCount *= i5;
                l *= i4;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + Double.doubleToLongBits(d2) + i4 + Double.doubleToLongBits(d3) +
            i5 + i6 + i7 + i8 + Double.doubleToLongBits(d4) + i9;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static float fMeth(float f) {

        double d=1.42281;
        int i2=-11, i10=-1, i11=131, i12=-28469, i13=-34717, i14=157;
        boolean b1=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 26.64F);

        switch ((((((int)(d + i2)) >>> 1) % 7) * 5) + 35) {
        case 61:
            i2 -= (++i2);
            break;
        case 70:
            fArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = ((f / 42) - ((Test.iArrFld[(i2 >>> 1) % N]++) + (++i2)));
            vMeth(b1 = bMeth(f, Test.instanceCount), -6);
            i10 <<= i10;
            break;
        case 62:
            try {
                f -= i2;
                i2 = (int)Test.instanceCount;
                i2 = i10;
            }
            catch (UserDefinedExceptionTest exc2) {
                i11 = 1;
                while (++i11 < 337) {
                    Test.lArrFld[i11] %= (Test.instanceCount | 1);
                    Test.instanceCount += (((i11 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                    for (i12 = 5; i12 > 1; i12 -= 3) {
                        i10 = Test.byFld;
                        i10 -= (int)Test.instanceCount;
                    }
                }
            }
            break;
        case 46:
            Test.iArrFld1[(i12 >>> 1) % N] /= (int)(i12 | 1);
            break;
        case 59:
            i10 = i14;
            break;
        case 49:
            i14 += 0;
            break;
        case 68:
            Test.instanceCount = -10;
            break;
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + (b1 ? 1 : 0) + i10 + i11 + i12 +
            i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12207, i1=-14548, i15=161, i16=44, i17=-19769, i18=7, i19=-39442, iArr[][]=new int[N][N];
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(dArr, -1.119674);

        for (int smallinvoc=0; smallinvoc<389; smallinvoc++) vSmallMeth();
        for (i = 8; 304 > i; i++) {
            i1 *= (int)(((Test.fFld * i) + -29424) - fMeth(2.256F));
            b2 = b2;
            Test.iArrFld[i - 1] <<= i1;
            for (i15 = i; 85 > i15; ++i15) {
                Test.fFld = i16;
                Test.fFld -= i16;
                iArr = iArr;
                Test.instanceCount = i1;
                Test.dFld *= Test.dFld;
                try {
                    iArr[i15 - 1][i] = (i15 / -844401553);
                    i1 = (iArr[i][i] % i15);
                    i16 = (149 / i1);
                } catch (ArithmeticException a_e) {}
                i16 <<= i;
                i17 = 1;
                while (++i17 < 1) {
                    Test.instanceCount += i17;
                    Test.instanceCount = i1;
                    i1 += (i17 * i17);
                    Test.dFld += -41831;
                    Test.instanceCount += i17;
                    i1 = i;
                    i1 <<= 117;
                    if (b2) break;
                    Test.instanceCount += (-14 + (i17 * i17));
                    dArr[i + 1] -= i;
                }
                Test.iArrFld1[i + 1] = i17;
            }
            for (i18 = 4; i18 < 85; i18++) {
                i1 += i16;
                i16 = (int)56.668F;
                i16 -= (int)Test.fFld;
                i1 = 1652;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test bMeth fMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  bMeth ->  bMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
