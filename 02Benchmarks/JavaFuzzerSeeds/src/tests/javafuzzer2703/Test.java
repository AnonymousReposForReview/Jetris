package tests.javafuzzer2703;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static int iFld=75;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)21874);
        FuzzerUtils.init(Test.lArrFld, -4283820263L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f, int i8, boolean b) {

        int i9=38752, i10=10, i11=-8, i12=-74, i13=-40834, i14=-104, iArr1[][]=new int[N][N];
        byte by1=-1;

        FuzzerUtils.init(iArr1, -29785);

        for (i9 = 20; i9 < 337; i9++) {
            i10 = 14;
        }
        i10 += i9;
        i10 ^= i10;
        for (i11 = 16; i11 < 374; i11++) {
            i10 += (i11 + f);
            Test.sArrFld[i11 - 1] += (short)i9;
            i12 = i8;
            Test.lArrFld[i11 + 1] *= i8;
            if (true) continue;
            for (i13 = 1; 5 > i13; i13++) {
                i14 >>= i11;
                by1 <<= (byte)i8;
            }
            iArr1[i11 + 1][i11 + 1] *= 34811;
            i10 ^= i11;
        }
        long meth_res = Float.floatToIntBits(f) + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + i13 + i14 + by1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by) {

        int i2=46375, i3=-6, i4=234, i5=4, i6=-29, i7=-8, iArr[]=new int[N];
        double d=-2.7192;
        float f1=0.845F;
        boolean b1=false;

        FuzzerUtils.init(iArr, -10);

        for (i2 = 8; i2 < 158; i2++) {
            i3 += iArr[i2];
            i3 = (i3--);
            i3 -= (int)(d = by);
        }
        for (i4 = 10; i4 < 257; ++i4) {
            for (i6 = i4; i6 < 7; ++i6) {
                if (i7 != 0) {
                    vMeth_check_sum += by + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 +
                        Float.floatToIntBits(f1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i7 = i6;
                switch (((i6 % 1) * 5) + 16) {
                case 17:
                    i3 >>>= iMeth(f1, i7, b1);
                    i3 -= (int)f1;
                    break;
                default:
                    iArr[(i6 >>> 1) % N] = (int)-32052L;
                    Test.instanceCount *= i4;
                    i3 *= i2;
                    if (b1) break;
                }
            }
        }
        vMeth_check_sum += by + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(long l, int i, int i1) {

        byte by2=-29;

        vMeth(by2);
        l -= 3L;
        vSmallMeth_check_sum += l + i + i1 + by2;
    }

    public void mainTest(String[] strArr1) {

        int i15=4, i16=11, i17=-58448, i18=-48545;
        long l1=222L;
        float f2=-32.744F, f3=-2.893F;
        boolean b2=false;

        for (int smallinvoc=0; smallinvoc<877; smallinvoc++) vSmallMeth(Test.instanceCount, i15, -28170);
        l1 = 1;
        while (++l1 < 326) {
            i15 ^= i15;
            for (f2 = 77; f2 > 4; --f2) {
                switch ((int)((l1 % 2) + 110)) {
                case 110:
                    for (i17 = 1; i17 < 2; i17 += 3) {
                        short s=-14515;
                        if (b2) {
                            i15 += -6;
                            i15 += 47539;
                            iArrFld[(int)(l1 - 1)][i17] += i17;
                        } else if (b2) {
                            i16 = 40880;
                            iArrFld[(int)(l1 + 1)][(int)(f2 + 1)] = i18;
                        } else if (b2) {
                            i15 = s;
                        } else {
                            i18 += (((i17 * i18) + i18) - i17);
                        }
                        Test.lArrFld[i17 + 1] = i18;
                        Test.instanceCount = i17;
                        f3 += s;
                        i16 >>= i16;
                        i15 += (i17 * i17);
                        try {
                            i16 = (i17 / 89);
                            iArrFld[(int)(l1)][(int)(l1 - 1)] = (i15 / -2129019439);
                            iArrFld[(int)(f2)][(int)(l1 - 1)] = (30029 % iArrFld[(int)(f2)][(int)(f2)]);
                        } catch (ArithmeticException a_e) {}
                        iArrFld[(int)(f2 - 1)][i17 - 1] -= i16;
                        i15 += (i17 * i17);
                        switch ((i17 % 6) + 54) {
                        case 54:
                            fArrFld[(int)(l1 + 1)] *= i17;
                            i15 = i16;
                        case 55:
                            if (b2) break;
                            f3 *= i15;
                            break;
                        case 56:
                            if (b2) continue;
                            break;
                        case 57:
                            i15 += (((i17 * i15) + i18) - i18);
                            iArrFld[i17 - 1][i17] = i18;
                            break;
                        case 58:
                            i18 >>>= -25605;
                            break;
                        case 59:
                            Test.instanceCount = 5L;
                            break;
                        default:
                            i16 = i15;
                        }
                    }
                    break;
                case 111:
                    Test.iFld >>= 13;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
