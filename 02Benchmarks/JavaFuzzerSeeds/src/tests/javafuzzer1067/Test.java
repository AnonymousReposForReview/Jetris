package tests.javafuzzer1067;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:58:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2430130834727064764L;
    public static int iFld=52246;
    public static short sFld=13865;
    public static volatile byte byFld=-89;
    public static boolean bFld=true;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 114.15488);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l3, double d4) {

        int i9=8, i10=26384, i11=29126, i12=-157, i13=-110, i14=-24, i15=-7, i16=-10;
        float f3=0.26F;

        for (i9 = 2; i9 < 166; i9++) {
            i10 /= -14;
            Test.iFld = i9;
            Test.sFld += (short)(i9 + Test.byFld);
            i10 = -45581;
            l3 = i9;
        }
        for (i11 = 388; i11 > 8; --i11) {
            i12 += i10;
            for (i13 = 1; i13 < 4; i13++) {
                for (i15 = 1; 2 > i15; ++i15) {
                    Test.sFld = (short)i13;
                    f3 += (i15 - f3);
                    l3 &= Test.instanceCount;
                    i10 += (int)l3;
                }
                i12 += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += l3 + Double.doubleToLongBits(d4) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f3);
    }

    public static int iMeth(long l2, double d2) {

        float f2=121.660F;
        double d3=84.35821;
        int i8=-241, i17=-98, i18=9, iArr1[]=new int[N];
        boolean b=true;
        byte by1=-54;

        FuzzerUtils.init(iArr1, 140);

        iArr1 = (iArr1 = (iArr1 = (iArr1 = FuzzerUtils.int1array(N, (int)-9))));
        f2 = f2;
        d2 = ((f2 = Test.iFld) - (++Test.instanceCount));
        for (d3 = 125; d3 > 6; d3--) {
            Test.iFld += iArr1[(int)(d3 - 1)];
            if ((Float.intBitsToFloat((int)(Test.instanceCount - d2)) > (i8 - i8)) != b) break;
            by1 = (byte)Test.iFld;
            Test.iFld <<= Math.max(i8, (int)((Test.iFld + 3145741218L) >> Test.iFld));
        }
        vMeth1(Test.instanceCount, -110.7021);
        try {
            Test.iFld = (int)-3214325850750845973L;
            i8 *= -213;
            for (i17 = 8; i17 < 336; i17++) {
                i8 -= i18;
                Test.instanceCount = 61172;
            }
        }
        catch (NullPointerException exc1) {
            iArr1[(i8 >>> 1) % N] ^= (int)1267796747L;
        }
        long meth_res = l2 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + Double.doubleToLongBits(d3) + i8
            + (b ? 1 : 0) + by1 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, long l, long l1) {

        double d1=120.98271;
        int i2=179, i3=2, i4=-5, i5=12, i6=-125, i7=-2, iArr[]=new int[N];
        float f=-124.1014F, f1=2.237F;
        byte by=51;
        boolean b1=true;

        FuzzerUtils.init(iArr, 35868);

        l1 = Test.iFld;
        for (d1 = 4; d1 < 364; ++d1) {
            i2 = Test.iFld;
            for (f = 1; f < 5; f++) {
                if (b1) {
                    switch ((int)((d1 % 7) + 110)) {
                    case 110:
                        if (Math.max((Test.sFld * -111) - (i3 |= i2), i7) != (--i3)) {
                            i4 = 2;
                            while (--i4 > 0) {
                                l1 += Test.instanceCount;
                                i5 += (i5--);
                                Test.iFld += (((i4 * Test.sFld) + Test.instanceCount) - i3);
                                i2 -= ((++Test.iFld) + (i6++));
                            }
                            d += (-((i6 << i4) * 46721));
                        }
                        d -= (Math.abs(61.748F) * ((f + l) + (--iArr[(int)(f)])));
                        by = (byte)(((--f1) + iMeth(l, -2.126785)) - i4);
                        break;
                    case 111:
                        l1 = -1;
                        break;
                    case 112:
                    case 113:
                        i7 += (int)d;
                        break;
                    case 114:
                        i2 += (int)(90.192F + (f * f));
                        break;
                    case 115:
                        i3 += (int)((long)f | l1);
                    case 116:
                        if (false) break;
                        break;
                    default:
                        i5 = i6;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + l1 + Double.doubleToLongBits(d1) + i2 +
            Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + by + Float.floatToIntBits(f1) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=218, i19=12, i20=224, i21=6, i22=111, i23=15892, iArr2[]=new int[N];
        double d5=-108.3851;
        float f4=0.390F, f5=-2.810F, fArr[]=new float[N];
        long l4=-7130L;
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, 2.584F);
        FuzzerUtils.init(iArr2, 64490);
        FuzzerUtils.init(sArr, (short)-30748);

        i &= (int)(((i + i) + 68.106F) * (18833 - fArr[(-197 >>> 1) % N]));
        i1 = 1;
        while (++i1 < 142) {
            vMeth(d5, Test.instanceCount, Test.instanceCount);
        }
        iArr2[(120 >>> 1) % N] = i1;
        i = (int)3632700179L;
        f4 = 1;
        do {
            iArr2[(int)(f4)] = (int)Test.instanceCount;
            for (l4 = 2; l4 < 119; l4++) {
                iArr2 = iArr2;
                i = i1;
                i19 <<= (int)Test.instanceCount;
                i19 *= 2427;
                f5 += i19;
                Test.byFld -= (byte)i1;
                for (i20 = 1; i20 < 2; i20++) {
                    i19 *= (int)f4;
                    Test.instanceCount >>>= i1;
                    Test.instanceCount = Test.instanceCount;
                    if (Test.bFld) continue;
                }
                Test.iFld *= Test.iFld;
                for (i22 = 1; i22 < 2; ++i22) {
                    iArr2[(int)(f4 + 1)] ^= -34580;
                    switch ((int)((f4 % 3) + 14)) {
                    case 14:
                        try {
                            iArr2[(int)(l4)] = (iArr2[i22 + 1] % -15754);
                            i19 = (i20 % 16744);
                            i23 = (98 / i22);
                        } catch (ArithmeticException a_e) {}
                        Test.dArrFld[(int)(f4)] *= f4;
                        Test.iFld += (i22 * i22);
                        Test.instanceCount %= (Test.instanceCount | 1);
                        break;
                    case 15:
                        i21 += i22;
                        break;
                    case 16:
                        Test.iFld = i22;
                        i23 -= i;
                        break;
                    }
                }
            }
        } while (++f4 < 211);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
