package tests.javafuzzer910;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:30:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-28590L;
    public static int iFld=40875;
    public static boolean bFld=true;
    public static float fFld=21.892F;
    public static short sFld=-17902;
    public int iFld1=122;
    public static double dFld=0.25791;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 150L);
        FuzzerUtils.init(Test.fArrFld, -103.97F);
        FuzzerUtils.init(Test.sArrFld, (short)-4523);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8, float f) {

        int i9=-8, i10=192;
        double d=0.55626;

        Test.lArrFld[(-12066 >>> 1) % N] = i7;
        Test.lArrFld[(i7 >>> 1) % N] = Test.instanceCount;
        for (i9 = 3; i9 < 166; i9++) {
            i8 -= (int)d;
            Test.instanceCount >>= i8;
        }
        vMeth2_check_sum += i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + Double.doubleToLongBits(d);
    }

    public static void vMeth1(int i, int i1, long l) {

        int i2=22305, i3=-2303, i4=11, i5=-9, i6=-44683, i11=166, iArr[]=new int[N];
        float f1=2.312F;
        short s=6171;

        FuzzerUtils.init(iArr, -254);

        i2 = 1;
        do {
            i1 >>= Integer.reverseBytes((int)(i -= (int)(++Test.instanceCount)));
            for (i3 = 6; i3 > i2; --i3) {
                byte by=-69;
                for (i5 = 1; i5 > i2; i5 -= 2) {
                    vMeth2(i4, i11, f1);
                    try {
                        i = (i3 % i);
                        i1 = (i5 % i11);
                        i11 = (-42105 % i6);
                    } catch (ArithmeticException a_e) {}
                    s <<= (short)i1;
                    i1 += i5;
                    f1 += l;
                    i6 = (int)Test.instanceCount;
                    i += -13072;
                    f1 -= i;
                }
                iArr[i3 + 1] = by;
                i1 = -17721;
                l += (((i3 * by) + by) - f1);
            }
        } while (++i2 < 261);
        vMeth1_check_sum += i + i1 + l + i2 + i3 + i4 + i5 + i6 + i11 + Float.floatToIntBits(f1) + s +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i12=14311, i13=2, i14=87, i15=237, i16=14;
        short s1=6867;

        vMeth1(Test.iFld, 12, Test.instanceCount);
        try {
            for (i12 = 13; i12 < (252 + 400); i12++) {
                for (i14 = 1; i14 < 4; ++i14) {
                    i15 -= -28629;
                    if (Test.bFld) break;
                    i15 = i12;
                    i16 = 1;
                    do {
                        double d1=38.102375;
                        i15 = i16;
                        Test.fFld -= i13;
                        Test.lArrFld[i16 + 1] -= (long)d1;
                        Test.fFld = i12;
                        Test.iFld += (int)Test.fFld;
                        Test.fFld += (i16 - Test.sFld);
                        Test.instanceCount -= 38860;
                    } while (++i16 < 2);
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.iFld = s1;
        }
        finally {
            Test.iFld <<= i14;
        }
        vMeth_check_sum += i12 + i13 + i14 + i15 + i16 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i17=-188, i18=-170, i19=4, i20=-177, i21=-9, i22=56188, i23=-13, i24=-4387, iArr1[]=new int[N];
        byte by1=-115;

        FuzzerUtils.init(iArr1, 13978);

        vMeth();
        iFld1 -= iFld1;
        Test.dFld = Test.iFld;
        iFld1 = (int)Test.instanceCount;
        Test.fFld += 2690336251L;
        for (i17 = 6; i17 < 318; ++i17) {
            i18 += (i17 ^ (long)Test.fFld);
            i19 = 1;
            do {
                Test.dFld = i19;
                for (i20 = i19; i20 < 1; i20++) {
                    Test.instanceCount = i20;
                    Test.dFld += Test.instanceCount;
                    Test.bFld = Test.bFld;
                    Test.sFld = (short)iFld1;
                    iFld1 = i18;
                    Test.fFld = Test.instanceCount;
                    Test.fArrFld[i17] = Test.fArrFld[i20];
                    i21 <<= (int)Test.instanceCount;
                    Test.iFld = by1;
                }
                for (i22 = 1; i22 > i17; --i22) {
                    Test.sArrFld = Test.sArrFld;
                    Test.iFld += 28;
                    iArr1[i19 - 1] >>>= i17;
                    Test.dFld *= iFld1;
                    iArr1[i22 - 1] -= i19;
                    Test.iFld *= iFld1;
                    Test.iFld += (int)Test.instanceCount;
                }
                i24 = 1;
                while (++i24 < 1) {
                    i23 = (int)Test.instanceCount;
                    i23 *= i19;
                }
            } while (++i19 < 81);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
