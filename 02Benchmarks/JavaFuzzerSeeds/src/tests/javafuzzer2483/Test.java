package tests.javafuzzer2483;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:22:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static float fFld=-65.360F;
    public int iFld=-13;
    public int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)434);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, byte by1) {

        int i8=111, i9=-138, i10=-221, iArr1[]=new int[N];
        double d=-15.88808, dArr[]=new double[N];
        float f2=0.40F, f3=-1.161F, f4=-118.445F;

        FuzzerUtils.init(iArr1, -41670);
        FuzzerUtils.init(dArr, -78.26619);

        for (i8 = 7; i8 < 381; i8 += 3) {
            i7 -= -228;
            i10 = 1;
            do {
                d = i8;
                f2 = 1;
                while (++f2 < 1) {
                    switch (((i8 % 7) * 5) + 91) {
                    case 102:
                        Test.instanceCount += (-162 + (f2 * f2));
                        switch ((int)(((f2 % 2) * 5) + 96)) {
                        case 105:
                            Test.instanceCount = (long)f2;
                        case 99:
                            f3 -= i9;
                            i9 += (int)(((f2 * Test.instanceCount) + i7) - i6);
                            i6 += (int)f4;
                        default:
                            d = i6;
                            iArr1[(int)(f2 + 1)] >>= (int)Test.instanceCount;
                            i9 -= i7;
                        }
                    case 121:
                        i9 = (int)Test.instanceCount;
                        break;
                    case 120:
                        i7 = (int)Test.instanceCount;
                    case 115:
                        try {
                            iArr1[i8 - 1] = (i9 / i6);
                            iArr1[i10] = (iArr1[i10 - 1] / i10);
                            i9 = (-161 / i8);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 98:
                        f3 += (f2 - i9);
                        break;
                    case 110:
                        if (i10 != 0) {
                            vMeth1_check_sum += i6 + i7 + by1 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
                                Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) +
                                FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 112:
                        dArr[(int)(f2 + 1)] *= i8;
                    default:
                        iArr1[i10] += (int)-55.28786;
                    }
                }
            } while (++i10 < 13);
        }
        vMeth1_check_sum += i6 + i7 + by1 + i8 + i9 + i10 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) +
            Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(long l1, int i5) {

        byte by2=-109;
        int i11=10259, i12=-1, i13=42804, i14=-65118, i15=-51556, iArr2[]=new int[N];
        short s=-2293;
        float f5=1.365F;

        FuzzerUtils.init(iArr2, -17412);

        i5 *= Math.abs((i5++) + (i5 - i5));
        vMeth1(-13, i5, by2);
        for (i11 = 11; i11 < 177; i11++) {
            i5 -= i11;
            i13 = 1;
            do {
                i12 = i11;
                i12 <<= (int)Test.instanceCount;
                for (i14 = 1; i14 < 1; i14++) {
                    i15 >>= i13;
                    if (true) continue;
                    s += (short)i5;
                    f5 += ((long)i14 ^ (long)l1);
                    i15 = i5;
                    iArr2[i14 + 1] += i12;
                    iArr2[i11] >>= i15;
                }
            } while (++i13 < 10);
        }
        long meth_res = l1 + i5 + by2 + i11 + i12 + i13 + i14 + i15 + s + Float.floatToIntBits(f5) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i2) {

        int i3=-11, i4=41432, i16=24818, i17=-5620, iArr[]=new int[N];
        double d1=-6.121117, d2=-47.22068;
        short s1=-3664;
        byte by3=-80;

        FuzzerUtils.init(iArr, 63364);

        for (i3 = 171; i3 > 5; --i3) {
            i2 += (((i3 * i4) + Test.instanceCount) - i2);
            iArr[i3] += (int)(((-(i2 + -48357)) + (50 * lMeth(-8866616908648238250L, -26195))) + 6005781665392410345L);
            d1 = 1;
            while (++d1 < 10) {
                Test.instanceCount = 126;
                i2 -= (int)Test.fFld;
                i4 += (int)(((d1 * Test.fFld) + s1) - i4);
                d2 *= -99;
                for (i16 = (int)(d1); i16 < 1; i16++) {
                    i2 = -61509;
                    Test.instanceCount += (((i16 * i17) + by3) - i3);
                    switch ((((i17 >>> 1) % 1) * 5) + 39) {
                    case 40:
                        i4 *= 58028;
                        break;
                    default:
                        try {
                            iArr[(int)(d1)] = (1231624035 / iArr[(int)(d1)]);
                            iArr[i16 + 1] = (i16 / -156);
                            i4 = (iArrFld[i16] / i16);
                        } catch (ArithmeticException a_e) {}
                    }
                    i2 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d1) + s1 + Double.doubleToLongBits(d2) + i16 + i17 +
            by3 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=138, i1=-18099, i18=182, i19=3, i20=-1, i21=-37082, i22=111, i23=-6, i24=-191, i25=-64922, i26=-35888;
        float f=-2.571F, f1=-1.878F;
        byte by=58;
        short s2=21552;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5077909721930972132L);

        for (i = 14; i < 257; ++i) {
            if (false) {
                f *= (((++i1) + (Test.instanceCount - by)) - (++f1));
                vMeth(i1);
                for (i18 = 2; i18 < 103; i18++) {
                    Test.sArrFld[i - 1] += (short)60888;
                    i20 -= (int)8422437012931203816L;
                    i20 += (i18 * i18);
                }
            } else if (b) {
                for (i21 = 103; i21 > 3; i21 -= 2) {
                    iArrFld[i - 1] = 62;
                    Test.instanceCount += (((i21 * Test.instanceCount) + i19) - Test.instanceCount);
                }
                for (i23 = 3; i23 < 103; i23 += 3) {
                    s2 = (short)Test.instanceCount;
                    i20 += i23;
                    by = (byte)i;
                    lArr[i23 + 1] >>= s2;
                    for (i25 = 1; i25 < 4; ++i25) {
                        iArrFld[i25] -= (int)f;
                        iFld = (int)Test.instanceCount;
                        i26 += i19;
                        Test.instanceCount += (i25 * i25);
                        Test.instanceCount = -59029;
                        lArr[i25] %= (Test.instanceCount | 1);
                        f1 += ((long)i25 ^ (long)i26);
                        i22 -= i19;
                        Test.instanceCount += (i25 ^ i);
                        i1 = i21;
                    }
                    iFld = 23127;
                    iArrFld[i - 1] |= s2;
                    iArrFld[i23] = i26;
                }
            } else if (b) {
                f1 = Test.instanceCount;
            } else {
                i1 = (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
