package tests.javafuzzer1999;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:14:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3723867649L;
    public int iFld=1;
    public volatile double dFld=-21.10868;
    public double dArrFld[]=new double[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        byte by=-52;
        int i4=3, i5=-32, i6=-115, i7=10, i8=-79, i9=-2697, i10=252, i11=12, i12=7;
        float f3=0.234F;
        boolean b2=false;

        by = (byte)0;
        i4 >>= (int)Test.instanceCount;
        for (i5 = 8; i5 < 238; i5 += 3) {
            for (i7 = i5; i7 < 20; i7 += 2) {
                for (i9 = 1; i9 > 1; i9--) {
                    boolean b1=true;
                    f3 += i7;
                    i4 = i8;
                    b1 = b1;
                    Test.instanceCount += (long)f3;
                    i10 = i5;
                }
                f3 *= f3;
                for (i11 = 1; 1 < i11; i11--) {
                    i12 = i7;
                    if (b2) break;
                    i8 += (((i11 * f3) + i9) - i10);
                }
            }
        }
        long meth_res = by + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + i11 + i12 + (b2 ? 1 : 0);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l, boolean b, int i3) {

        double d1=0.113703;
        short s=-4271;
        float f2=-2.805F;

        b = (d1 != (l--));
        s += (short)(((++l) - (f2 + l)) + iMeth2());
        long meth_res = l + (b ? 1 : 0) + i3 + Double.doubleToLongBits(d1) + s + Float.floatToIntBits(f2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=44, i1=-5, i2=-30796, i13=11, i14=-13;
        float f1=-85.368F;
        boolean b3=false;
        double d2=0.83742;

        for (i = 5; i < 148; i++) {
            i2 = 1;
            while (++i2 < 11) {
                f1 += i2;
                iMeth1(30L, b3, i1);
                i1 += (((i2 * Test.instanceCount) + Test.instanceCount) - i);
                i1 = i1;
            }
            Test.instanceCount += (i | (long)f1);
            i1 <<= i2;
            i1 = (int)f1;
            for (i13 = 1; i13 < 11; i13++) {
                i1 -= i14;
                i14 = (int)Test.instanceCount;
                i1 += (int)d2;
            }
            i1 -= i13;
            i1 *= (int)f1;
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f1) + (b3 ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=126.800F, f4=-69.968F, fArr[]=new float[N];
        int i15=-179, i16=46759, i17=-12, i18=-19479, iArr[]=new int[N], iArr1[][]=new int[N][N];
        long l1=-53386L;
        boolean b4=false;

        FuzzerUtils.init(iArr, 6443);
        FuzzerUtils.init(iArr1, -38242);
        FuzzerUtils.init(fArr, 1.918F);

        for (double d : dArrFld) {
            f = 1;
            while (++f < 63) {
                iFld = iMeth();
                d *= iFld;
                for (i15 = (int)(f); i15 < 1; i15++) {
                    i16 += i15;
                    iFld = (int)-134L;
                    i16 = i15;
                    iFld += (int)Test.instanceCount;
                    iFld -= 5;
                    Test.instanceCount += (i15 + iFld);
                    try {
                        iFld = (iArr[i15 + 1] / 144);
                        i16 = (i15 % 229);
                        iArr[(int)(f + 1)] = (-148 % i15);
                    } catch (ArithmeticException a_e) {}
                    i16 >>= i15;
                    Test.instanceCount /= (i16 | 1);
                    i16 += (((i15 * f) + iFld) - i16);
                }
                iFld -= (int)d;
                i16 += (int)(0.44F + (f * f));
                iFld -= (int)d;
                iArr1 = iArr1;
                iFld += (int)f;
            }
            dFld += i15;
            for (f4 = 1; f4 < 63; f4++) {
                switch ((int)(((f4 % 7) * 5) + 60)) {
                case 66:
                    for (l1 = 1; l1 < 2; l1++) {
                        if (b4) continue;
                        Test.instanceCount += (((l1 * Test.instanceCount) + iFld) - iFld);
                        i16 = (int)Test.instanceCount;
                    }
                    i16 += (int)(f4 * f4);
                    i18 += (int)f;
                    break;
                case 84:
                    fArr[(int)(f4 + 1)] = i18;
                    break;
                case 85:
                case 65:
                    iArr1[(int)(f4 + 1)][(int)(f4)] <<= i17;
                    break;
                case 87:
                    Test.instanceCount += iFld;
                    break;
                case 64:
                    i16 = i17;
                    break;
                case 88:
                    i18 <<= i17;
                    break;
                default:
                    b4 = true;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
