package tests.javafuzzer1670;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:18:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2701756020L;
    public static volatile short sFld=32208;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=31944, i9=44472, i10=-2, i11=-173, i12=-9, i13=32979, iArr[]=new int[N];
        float f=-2.907F;
        byte by=-45;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -21023L);
        FuzzerUtils.init(iArr, -98);
        FuzzerUtils.init(sArr, (short)8371);

        for (i8 = 4; i8 < 160; i8++) {
            if (Test.bFld) {
                for (i10 = 1; i10 < 10; ++i10) {
                    for (i12 = 1; i12 < 2; i12++) {
                        switch ((i8 % 9) + 26) {
                        case 26:
                            Test.instanceCount += i12;
                            i11 += (i12 * i12);
                            lArr[i10] = (long)f;
                            Test.instanceCount += i12;
                        case 27:
                            by -= (byte)i9;
                            i11 += (i12 * i12);
                            break;
                        case 28:
                            i13 += i11;
                            i13 *= i11;
                            Test.sFld *= Test.sFld;
                            i9 -= i9;
                        case 29:
                            i11 = i8;
                            break;
                        case 30:
                            i11 += (i12 - i8);
                            break;
                        case 31:
                            iArr[i10 + 1] = (int)1755694375L;
                            break;
                        case 32:
                            f += i10;
                            break;
                        case 33:
                            by += (byte)(11 + (i12 * i12));
                            break;
                        case 34:
                            f = i12;
                            break;
                        }
                    }
                }
            } else if (Test.bFld) {
                i11 = i10;
            } else {
                sArr[i8] *= (short)Test.instanceCount;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + by + FuzzerUtils.checkSum(lArr)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i6=6858, i7=-44944, iArr1[]=new int[N];
        double d1=-2.67262;
        byte by1=-68;

        FuzzerUtils.init(iArr1, -191);

        for (i6 = 8; i6 < 319; i6 += 2) {
            vMeth();
            i3 += (i6 * i6);
            d1 -= i3;
            iArr1[i6] = 3;
            i4 >>= i7;
            i4 += (i6 ^ i3);
            i5 += 141;
            try {
                i3 = (21 % i5);
                i3 = (iArr1[i6 + 1] / 181);
                i4 = (i3 / -60959);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += (i6 * i6);
            i4 += (((i6 * i3) + i4) - Test.instanceCount);
        }
        Test.instanceCount += (long)d1;
        i4 += i3;
        by1 = (byte)i3;
        i5 *= -12;
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + by1 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(double d) {

        int i1=-237, i2=0, i14=12, i15=32, i16=-123, i17=-16618, i18=183;
        long l=9L, lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -9L);

        for (i1 = 5; i1 < 180; ++i1) {
            i2 = (int)lMeth(i2, i1, i2);
            i2 >>>= i1;
            i14 = 1;
            do {
                i2 *= (int)Test.instanceCount;
            } while ((i14 += 3) < 9);
        }
        i15 = 1;
        do {
            for (l = i15; 11 > l; l++) {
                i16 -= i16;
                i2 = i2;
                lArr1[i15][(int)(l)] += i15;
                i16 += (int)(l + Test.instanceCount);
                for (i17 = i15; i17 < 1; ++i17) {
                    i18 = (int)d;
                    try {
                        Test.iArrFld[i15] = (-169 % i18);
                        i2 = (i14 / Test.iArrFld[(int)(l - 1)]);
                        Test.iArrFld[i15] = (i1 % -1143518658);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i15;
                }
            }
        } while (++i15 < 139);
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + i14 + i15 + l + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-4957;
        double d2=-77.104019;

        i = iMeth(d2);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
