package tests.javafuzzer2473;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:15:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static float fFld=-16.37F;
    public static boolean bFld=false;
    public static double dFld=1.120941;
    public static byte byFld=-60;
    public static int iFld=11;
    public int iFld1=-144;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -43361);
        FuzzerUtils.init(Test.sArrFld, (short)-30398);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i4, int i5) {

        int i6=118, i7=-46789, i8=12, i9=-65;
        long l2=-1715514521L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.178F);

        if (Test.bFld) {
            i5 *= 0;
            Test.iArrFld[(120 >>> 1) % N] <<= i5;
            i6 = 1;
            do {
                Test.sArrFld[i6 - 1] ^= (short)i6;
                for (l2 = 1; l2 < 5; l2++) {
                    i4 >>= -42;
                    Test.iArrFld[i6] *= -122;
                    l1 <<= i7;
                }
                for (i8 = 1; i8 < 5; i8++) {
                    Test.bFld = Test.bFld;
                    switch ((((i8 >>> 1) % 6) * 5) + 22) {
                    case 27:
                        i9 += i6;
                        Test.dFld = i4;
                        break;
                    case 51:
                        try {
                            i5 = (Test.iArrFld[i6] / -41808);
                            i9 = (Test.iArrFld[i6] / i6);
                            i5 = (136 / i5);
                        } catch (ArithmeticException a_e) {}
                    case 34:
                        fArr[i8 + 1] *= Test.byFld;
                        break;
                    case 26:
                        i7 <<= i6;
                        break;
                    case 24:
                        Test.fFld -= i4;
                        break;
                    case 33:
                        Test.instanceCount >>= i9;
                    default:
                        l1 += (long)Test.fFld;
                    }
                }
            } while (++i6 < 368);
        } else if (Test.bFld) {
            i5 = i6;
        }
        vMeth1_check_sum += l1 + i4 + i5 + i6 + l2 + i7 + i8 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        float f1=18.666F;

        vMeth1(Test.instanceCount, Test.iFld, Test.iFld);
        Test.instanceCount += -2L;
        Test.dFld -= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        Test.iFld *= -20742;
        f1 = 1;
        while (++f1 < 205) {
            Test.iFld *= Test.iFld;
        }
        Test.fFld += Test.iFld;
        Test.iFld = Test.iFld;
        Test.bFld = Test.bFld;
        vMeth_check_sum += Float.floatToIntBits(f1);
    }

    public float fMeth(float f) {

        double d=0.57746;
        int i3=168, i10=13, i11=-141;
        short s=-19887;
        float f2=-1.224F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.333F);

        d = (i3 + (-(Test.fFld--)));
        vMeth();
        Test.iFld = (int)Test.fFld;
        Test.iArrFld[(58983 >>> 1) % N] *= (int)Test.instanceCount;
        Test.iFld -= s;
        i3 = -130;
        if (Test.bFld) {
            Test.iFld = -54510;
        } else if (Test.bFld) {
            f2 -= Test.iFld;
            i10 = 1;
            do {
                fArr1[i10] = i3;
                i11 = 1;
                while (++i11 < 5) {
                    i3 += i11;
                    if (Test.bFld) break;
                    i3 = (int)Test.instanceCount;
                }
            } while (++i10 < 375);
        } else {
            Test.bFld = Test.bFld;
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i3 + s + Float.floatToIntBits(f2) + i10
            + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=4548913680251244275L, lArr[]=new long[N];
        int i=-27957, i1=2, i2=-2, i13=11002, i14=4;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 73.63207);
        FuzzerUtils.init(lArr, -1343273612433347789L);

        for (l = 16; l < 379; ++l) {
            for (i1 = 69; i1 > 2; i1--) {
                i = (int)(((++i2) + (Test.instanceCount * i2)) - i);
                i2 <<= (int)(Test.iArrFld[(int)(l)] -= (int)(--Test.instanceCount));
                i *= (int)(Test.instanceCount + ((Test.fFld * 36) * fMeth(Test.fFld)));
                i2 <<= (int)Test.instanceCount;
                Test.instanceCount += l;
                i >>= i2;
                if (Test.bFld) {
                    i13 = 1;
                    while (++i13 < 2) {
                        i <<= i2;
                        Test.instanceCount -= Test.iFld;
                        Test.byFld += (byte)(i13 ^ i2);
                        if (false) {
                            switch ((int)((l % 2) * 5)) {
                            case 9:
                                i -= i13;
                                break;
                            case 1:
                                Test.fFld += ((long)i13 ^ (long)i2);
                                Test.fFld += (i13 - Test.instanceCount);
                                Test.iFld = Test.iFld;
                            }
                            dArr[i1 - 1] += Test.fFld;
                            if (Test.bFld) {
                                Test.fFld += i13;
                                lArr[(i >>> 1) % N] >>>= Test.instanceCount;
                                iFld1 += (i13 * i13);
                                iFld1 <<= i13;
                            } else {
                                i = i14;
                            }
                            Test.dFld *= Test.fFld;
                        } else if (Test.bFld) {
                            iFld1 += i;
                            iFld1 += (i13 | i2);
                            Test.bFld = Test.bFld;
                        } else if (Test.bFld) {
                            i14 = i13;
                        } else {
                            if (Test.bFld) break;
                        }
                    }
                } else {
                    Test.iArrFld[(int)(l)] = i14;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
