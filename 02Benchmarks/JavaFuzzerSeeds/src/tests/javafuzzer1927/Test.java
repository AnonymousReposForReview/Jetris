package tests.javafuzzer1927;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:01:50 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-216L;
    public double dFld=0.128781;
    public boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {


        i2 += (-i);
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public static int iMeth(double d) {

        int i9=-14, i10=56071, i11=-23293, i12=5, i13=-164, i14=-36933, i15=-189, iArr1[]=new int[N];
        short s1=23823;
        long l=34872L;
        float f=-17.506F;

        FuzzerUtils.init(iArr1, 106);

        vSmallMeth(i9, i9, i9);
        for (i10 = 1; 166 > i10; ++i10) {
            for (i12 = 10; i12 > i10; i12--) {
                for (i14 = 1; 1 > i14; i14++) {
                    i11 += i10;
                    i15 |= i14;
                    i11 >>= i15;
                    iArr1[i12 + 1] = i11;
                    i15 *= i15;
                    s1 += (short)i12;
                }
                iArr1[i12] += i10;
                l = 1;
                do {
                    d = 13;
                    i15 = 32661;
                    i9 -= (int)f;
                } while (++l < 1);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s1 + l +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public float fMeth(int i8) {

        float f1=15.940F;
        int i17=109, i18=44074, i19=-6, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 19789);

        Test.instanceCount = i8;
        vSmallMeth(i8, (int)(Test.instanceCount + i8), (int)((dFld--) + iMeth(dFld)));
        for (int i16 : iArr2) {
            if (bFld) break;
            i16 = (int)f1;
        }
        i17 = 1;
        while (++i17 < 388) {
            i8 *= -128;
            i8 -= i8;
            bFld = bFld;
        }
        for (i18 = 4; i18 < 170; i18 += 3) {
            i8 -= i19;
            f1 += -33;
            i19 += i19;
            i19 *= -13;
            dFld -= f1;
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i3=182, i4=7, i5=-7037, i6=14, i7=-3, i20=-21009, i21=-13265, i22=-4, i23=48, i24=5, i25=-217, i26=77,
            i27=-7, i28=0, iArr[]=new int[N];
        short s=15405;
        float f2=-87.177F;
        byte by=45, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 31911);
        FuzzerUtils.init(byArr, (byte)-77);
        FuzzerUtils.init(lArr, -38855L);

        for (int smallinvoc=0; smallinvoc<906; smallinvoc++) vSmallMeth(Math.max((int)((i3++) + (Test.instanceCount -
            i3)), (int)((s--) - (i3 - Test.instanceCount))), Math.abs(Integer.reverseBytes(59439)), i3++);
        i4 = ((--iArr[(i4 >>> 1) % N]) * ((i4 + i4) * (i3 >> i4)));
        for (i5 = 10; 283 > i5; i5++) {
            i3 = ((++i7) + byArr[i5]);
            iArr[(12 >>> 1) % N] >>= (int)(((i3--) * fMeth(i4)) * f2);
            lArr[i5 + 1] -= -220;
            for (i20 = 92; i20 > 5; i20--) {
                if (bFld) continue;
                i3 -= (int)f2;
                i22 = 1;
                while (++i22 < 2) {
                    i6 -= i5;
                    dFld -= i20;
                    i21 <<= i21;
                    if (bFld) continue;
                    iArr[i22] -= i21;
                    i4 = (int)f2;
                    i3 += (((i22 * Test.instanceCount) + i3) - f2);
                    i6 >>>= i7;
                    by += (byte)(((i22 * i22) + Test.instanceCount) - i7);
                }
            }
        }
        for (i23 = 327; i23 > 4; i23 -= 3) {
            for (i25 = 9; i25 < 234; i25++) {
                i7 += (((i25 * Test.instanceCount) + f2) - i6);
                iArr[i25 - 1] += i7;
                bFld = bFld;
                by = (byte)f2;
            }
            i6 += (((i23 * i25) + i7) - i25);
        }
        i24 *= i24;
        for (i27 = 15; i27 < 395; ++i27) {
            i24 += (i27 * i27);
            dFld += Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test fMeth iMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
