package tests.javafuzzer172;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:14:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3585147864L;
    public static int iFld=-9;
    public static float fFld=-1.851F;
    public static volatile short sFld=-23975;
    public static volatile double dFld=0.91459;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -104.488F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        double d=-6.17396;
        float f=122.877F;
        int i7=-5353, i8=158, i9=-66, i10=-10, iArr[]=new int[N];
        short s=-21058;
        byte by=-30;
        boolean b=false, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -1494);
        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(bArr, true);

        i6 += (int)d;
        i6 |= 11;
        f *= -35;
        for (i7 = 13; i7 < 362; ++i7) {
            s = (short)i7;
            for (i9 = 1; 5 > i9; ++i9) {
                i8 = 62598;
                Test.instanceCount -= i7;
            }
            d /= (Test.instanceCount | 1);
            iArr[i7] = i10;
            by += (byte)i7;
            lArr[i7] -= (long)f;
            iArr[i7] += i6;
            i6 -= i8;
        }
        bArr[(251 >>> 1) % N] = b;
        vMeth2_check_sum += i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i7 + i8 + s + i9 + i10 + by +
            (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {

        int i11=-45483, i12=25805, i13=10, i14=29251, i15=35497, iArr1[]=new int[N];
        byte by1=20;
        float f1=-107.509F;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -10L);
        FuzzerUtils.init(dArr, 1.61639);
        FuzzerUtils.init(iArr1, -207);

        vMeth2(Test.iFld);
        lArr1[(5491 >>> 1) % N] %= (Test.iFld | 1);
        for (i11 = 4; i11 < 204; i11++) {
            Test.instanceCount = 15441;
            dArr[i11 - 1] -= i11;
            Test.instanceCount = Test.iFld;
            i13 = 1;
            do {
                for (i14 = 1; i14 > 1; i14 -= 2) {
                    Test.instanceCount += i14;
                    Test.iFld >>= i12;
                    iArr1[i13 + 1] += by1;
                }
                f1 += (((i13 * Test.instanceCount) + f1) - i14);
                i15 = i12;
                i12 = -112;
                Test.iFld += i14;
            } while (++i13 < 8);
        }
        vMeth1_check_sum += i11 + i12 + i13 + i14 + i15 + by1 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i, int i1) {

        int i2=-14, i3=-10211, i4=-2, i5=-11, i16=10, i17=-1, i18=-41316, i19=113, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 14);

        for (i2 = 7; 131 > i2; i2++) {
            for (i4 = 1; 13 > i4; i4++) {
                vMeth1();
                Test.fFld = Test.iFld;
                for (i16 = 1; i16 < 2; i16++) {
                    iArr2 = iArr2;
                }
                i17 *= i3;
                i17 = (int)l;
                for (i18 = 1; i18 < 2; i18++) {
                    Test.instanceCount -= i19;
                    i1 += (((i18 * Test.sFld) + i19) - Test.fFld);
                    Test.fFld -= i2;
                    Test.iFld <<= Test.sFld;
                    if (b1) break;
                    i -= i4;
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + i4 + i5 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i20=-66, i21=-17263, i22=13, i23=-17094;
        double d1=0.49595;
        float f2=1.257F;

        vMeth(5L, Test.iFld, Test.iFld);
        Test.iFld -= Test.iFld;
        b2 = b2;
        for (i20 = 9; i20 < 163; ++i20) {
            if (b2) continue;
            i22 = 1;
            do {
                Test.dFld *= Test.iFld;
                Test.fArrFld[i20] -= i20;
                if (b2) {
                    Test.fArrFld[i22 - 1] += Test.instanceCount;
                    Test.iFld = (int)-32542L;
                } else {
                    d1 -= i20;
                    Test.instanceCount += Test.instanceCount;
                }
                Test.iFld -= (int)Test.fFld;
                Test.fFld *= 2462585128L;
            } while (++i22 < 163);
            Test.iFld += (int)Test.instanceCount;
            Test.iFld <<= (int)Test.instanceCount;
            i21 = (int)Test.instanceCount;
            Test.fFld = 4300142560643245703L;
            if (b2) {
                f2 = 1;
                do {
                    i23 = 1;
                    while (++i23 < 1) {
                        Test.iFld -= 2;
                        Test.fFld += Test.instanceCount;
                        Test.instanceCount += 170L;
                        Test.dFld += i22;
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld -= -197;
                        Test.fFld += Test.fFld;
                        Test.fArrFld[i23] *= Test.instanceCount;
                    }
                } while (++f2 < 163);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
