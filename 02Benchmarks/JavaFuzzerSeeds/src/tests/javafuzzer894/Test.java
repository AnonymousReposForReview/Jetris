package tests.javafuzzer894;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:19:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8960762449206399637L;
    public static volatile int iFld=28872;
    public static short sFld=24463;
    public static long lFld=-18827L;
    public boolean bArrFld[]=new boolean[N];
    public static volatile boolean bArrFld1[]=new boolean[N];
    public volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld1, true);
        FuzzerUtils.init(Test.sArrFld, (short)28065);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d=14.29803;
        int i3=3, i4=54282, i5=45270, iArr[]=new int[N];
        float f1=89.827F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -20);
        FuzzerUtils.init(lArr, -44L);

        d = Test.instanceCount;
        for (i3 = 1; i3 < 238; ++i3) {
            try {
                i4 = (7 / iArr[i3]);
                iArr[i3] = (Test.iFld % i3);
                Test.iFld = (i3 / i3);
            } catch (ArithmeticException a_e) {}
            Test.iFld = (int)Test.instanceCount;
            i5 = 1;
            do {
                f1 += (i5 * Test.iFld);
            } while (++i5 < 7);
            Test.iFld >>= i4;
            f1 = i5;
            i4 = i5;
        }
        Test.bArrFld1 = Test.bArrFld1;
        iArr[(i5 >>> 1) % N] = Test.iFld;
        d += i5;
        i4 += (int)-1.202F;
        lArr[(i3 >>> 1) % N][(i3 >>> 1) % N] = Test.instanceCount;
        vMeth2_check_sum += Double.doubleToLongBits(d) + i3 + i4 + i5 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i1, int i2) {

        int i6=-57886, i7=36040, i8=10, i9=-5, i10=7, iArr1[]=new int[N];
        boolean b1=false;
        float f2=28.570F;

        FuzzerUtils.init(iArr1, -4);

        vMeth2();
        i1 = i1;
        for (i6 = 8; i6 < 251; i6++) {
            if (b1) break;
            for (i8 = i6; i8 < 7; i8++) {
                i1 -= (int)f2;
                i7 -= Test.iFld;
                Test.bArrFld1[i6 + 1] = b1;
                f2 += (i8 * i8);
                i10 = 1;
                while (++i10 < 1) {
                    iArr1[i6] += 8;
                    if (b1) {
                        Test.sFld += (short)(i10 * i10);
                        Test.sFld >>= (short)i2;
                        i7 &= (int)Test.instanceCount;
                        vMeth1_check_sum += i1 + i2 + i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f2) + i10
                            + FuzzerUtils.checkSum(iArr1);
                        return;
                    } else if (b1) {
                        i7 <<= 2;
                        vMeth1_check_sum += i1 + i2 + i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f2) + i10
                            + FuzzerUtils.checkSum(iArr1);
                        return;
                    } else if (b1) {
                        i2 = i7;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f2) + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(float f, int i) {


        vMeth1(i, Test.iFld);
        vMeth_check_sum += Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        float f3=60.756F;
        int i11=215, i12=176, i13=12, i14=-7, i15=15, i16=-46, i17=-23934, i18=51068, i19=-37272, i20=8, i21=53267;
        byte by=57;

        b = (bArrFld[(Test.iFld >>> 1) % N] = b);
        vMeth(f3, Test.iFld);
        for (i11 = 1; 145 > i11; ++i11) {
            i12 += (int)(94.105F + (i11 * i11));
            Test.instanceCount += i11;
            i12 = Test.iFld;
        }
        Test.sFld = (short)-13;
        Test.iFld -= Test.sFld;
        b = b;
        for (i13 = 14; 338 > i13; ++i13) {
            i14 -= Test.sFld;
            i15 = 1;
            while (++i15 < 78) {
                Test.iFld -= (int)f3;
                i14 += (i15 * Test.iFld);
                for (i16 = i13; i16 < 1; ++i16) {
                    Test.lFld = (long)f3;
                    i17 += -77;
                    i14 = 76;
                }
                i17 = (int)15069L;
                iArrFld = iArrFld;
                Test.sArrFld[i13 - 1] = (short)i11;
                i12 *= (int)Test.lFld;
                lArrFld[i15] += i17;
            }
            for (i18 = i13; i18 < 78; ++i18) {
                switch (((i16 >>> 1) % 8) + 59) {
                case 59:
                    Test.iFld -= i17;
                    i17 -= (int)-89.66165;
                    break;
                case 60:
                    for (i20 = 1; i20 > 1; i20 -= 3) {
                        if (b) break;
                        i14 += i20;
                    }
                case 61:
                case 62:
                    i21 -= (int)Test.instanceCount;
                    break;
                case 63:
                    try {
                        i19 = (iArrFld[i18] / i13);
                        iArrFld[i13 - 1] = (i21 % i12);
                        iArrFld[i13 - 1] = (i14 % -42276);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 64:
                    i19 += (((i18 * f3) + by) - i18);
                    break;
                case 65:
                    Test.instanceCount = Test.iFld;
                    break;
                case 66:
                    Test.lFld = Test.lFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
