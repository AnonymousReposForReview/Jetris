package tests.javafuzzer3287;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:39:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-41L;
    public static float fFld=2.106F;
    public static boolean bFld=false;
    public static short sFld=-7426;
    public static double dFld=-114.99333;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 26875);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i8=-61244, i9=-2, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -29186);

        for (i8 = 11; i8 < 330; ++i8) {
            double d1=122.86339;
            switch ((i8 % 2) + 67) {
            case 67:
                Test.instanceCount ^= i9;
                i9 += (((i8 * i9) + i9) - i8);
                i9 += (int)Test.instanceCount;
                if (b) continue;
                break;
            case 68:
                Test.fFld += (i8 + i8);
                i9 = (int)482806639L;
            default:
                d1 += 63691L;
                iArr1[i8] = i8;
                Test.instanceCount >>>= i9;
            }
            Test.instanceCount = Test.instanceCount;
            i9 &= (int)Test.instanceCount;
            iArr1[i8 - 1] += -48;
            i9 += i8;
        }
        vMeth2_check_sum += i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i4, float f, int i5) {

        int i6=-11, i7=12, iArr[]=new int[N];
        byte byArr[][]=new byte[N][N];
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(byArr, (byte)-106);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 2.1007F);

        for (i6 = 10; i6 < 378; i6 += 2) {
            try {
                i7 = (-77 / i5);
                i4 = (i6 / i4);
                iArr[i6] = (-93 / i4);
            } catch (ArithmeticException a_e) {}
            byArr[i6 + 1][i6 + 1] = (byte)(i4 - (-(i7 + i5)));
            i4 += i6;
        }
        vMeth2();
        try {
            bArr[(i6 >>> 1) % N] = Test.bFld;
        }
        catch (ArithmeticException exc1) {
            fArr[(i6 >>> 1) % N] += i4;
            f = Test.sFld;
            iArr[(i5 >>> 1) % N] = i5;
            Test.dFld *= i6;
        }
        finally {
            i7 <<= i7;
            Test.instanceCount >>= i6;
            iArr[(-13 >>> 1) % N] >>>= (int)Test.instanceCount;
            i4 += i7;
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, int i1) {

        int i2=-103, i3=45090, i10=-62292, i11=129, i12=-14, i13=17932, i14=56521, iArr2[]=new int[N];
        byte by=-32;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 63215);
        FuzzerUtils.init(lArr1, -7349823536163501899L);

        for (i2 = 1; i2 < 225; ++i2) {
            i1 += (--i3);
            vMeth1(i2, -108.978F, i3);
            iArr2[i2 + 1] <<= i2;
            i3 >>= i2;
            l -= i3;
            i1 = (int)Test.fFld;
            for (i10 = 1; i10 < 7; ++i10) {
                for (i12 = 1; 2 > i12; i12++) {
                    by *= (byte)i13;
                    Test.fFld = i3;
                    if (i1 != 0) {
                        vMeth_check_sum += l + i1 + i2 + i3 + i10 + i11 + i12 + i13 + by + i14 +
                            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    l += i10;
                    lArr1[i10] &= i1;
                    i3 >>= i14;
                }
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i10 + i11 + i12 + i13 + by + i14 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i15=-19, i16=58, i17=65, i18=-3, i19=-13, i20=37243, i21=-6, i22=202, i23=-7;
        double d=2.77103;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7333038178294116751L);

        lArr[(i >>> 1) % N] = (((i << i) + 112L) - 206);
        d *= 0.373F;
        i = i;
        vMeth(Test.instanceCount, i);
        i = i;
        i15 = 1;
        while (++i15 < 180) {
            Test.instanceCount ^= 49;
            Test.fFld = (float)2.111746;
            for (i16 = 6; i16 < 139; i16 += 3) {
                Test.instanceCount += (long)(2.555F + (i16 * i16));
                for (i18 = 1; 4 > i18; ++i18) {
                    Test.instanceCount = i16;
                    if (Test.bFld) continue;
                    Test.instanceCount = Test.instanceCount;
                    i = 20106;
                    Test.instanceCount *= i16;
                    i17 -= i19;
                    i17 = i17;
                    Test.iArrFld = Test.iArrFld;
                }
                Test.instanceCount = i;
                Test.fFld += 7330;
                lArr[i15 - 1] = (long)-2.734F;
                if (Test.bFld) continue;
            }
            Test.sFld = (short)Test.instanceCount;
            for (i20 = 1; i20 < 139; i20++) {
                for (i22 = 1; i22 < 2; i22++) {
                    i17 += (((i22 * Test.instanceCount) + i21) - Test.instanceCount);
                    if (Test.bFld) {
                        Test.iArrFld[i20] = (int)Test.instanceCount;
                        Test.instanceCount = 14207;
                    } else {
                        Test.iArrFld[i20 - 1] >>= i20;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
