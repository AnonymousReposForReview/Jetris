package tests.javafuzzer631;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:57:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=39848586L;
    public int iFld=13;
    public static float fFld=2.650F;
    public static int iFld1=200;
    public static byte byFld=-32;
    public static int iFld2=228;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f, int i6) {

        int i7=-55921, i8=-61082, i9=12, i10=160, i11=-96, i12=39952, iArr1[]=new int[N];
        double d1=0.17175;
        long l=-6L;
        short s=20777;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr1, -48519);
        FuzzerUtils.init(fArr, 1.180F);

        i7 = 1;
        while (++i7 < 271) {
            Test.iFld1 = -10;
            d1 = Test.iFld1;
            d1 *= Test.iFld1;
        }
        Test.instanceCount -= i6;
        for (l = 8; l < 199; ++l) {
            i6 += (int)(l * l);
            for (i9 = 1; i9 < 8; ++i9) {
                d1 -= f;
                iArr1[(int)(l)] = (int)Test.instanceCount;
                for (i11 = 1; i11 < 2; i11++) {
                    s = (short)13;
                    fArr[i11][i9 + 1] = 1271103398L;
                    Test.fFld -= Test.instanceCount;
                    i10 += (241 + (i11 * i11));
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + Double.doubleToLongBits(d1) + l + i8 + i9 + i10 + i11 + i12
            + s + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i2=-19, i3=-2, i4=2, i5=248, iArr2[]=new int[N];
        short s1=3399;

        FuzzerUtils.init(iArr2, 25021);

        Test.instanceCount = ((--Test.iFld1) % (Math.min(Math.max(Test.iFld1, -21781), Test.iFld1 * Test.iFld1) | 1));
        for (i2 = 6; i2 < 133; i2++) {
            Test.iFld1 += (i2 * i2);
            for (i4 = 1; i4 < 12; ++i4) {
                Test.instanceCount *= lMeth(Test.fFld, i3);
                i3 *= -4048;
                Test.byFld %= (byte)(i3 | 1);
                Test.fFld = i2;
                i5 = 19175;
                iArr2[i2 - 1] = i4;
                i3 |= i4;
                Test.instanceCount += s1;
                iArr2[i4] >>= (int)-10L;
            }
            i5 += i2;
            s1 += (short)(i2 | Test.instanceCount);
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + s1 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i, int i1) {

        int i13=-33128, i14=137, i15=168, i16=-8, i17=-117, iArr3[]=new int[N];
        short s2=-8162;
        double d2=2.13258;

        FuzzerUtils.init(iArr3, -8);

        vMeth1();
        i13 = 1;
        while (++i13 < 317) {
            for (i14 = 1; i14 < 5; ++i14) {
                i15 &= i15;
                for (i16 = 2; i16 > i13; i16 -= 2) {
                    i17 -= s2;
                    Test.fFld = (float)d2;
                    i17 >>= (int)Test.instanceCount;
                    Test.instanceCount -= i14;
                    Test.iFld1 = (int)Test.instanceCount;
                    iArr3[i13] >>>= i15;
                    Test.fFld = (float)d2;
                    iArr3[i16] = (int)d2;
                    Test.byFld += (byte)(i16 * i16);
                    i1 = i15;
                }
            }
        }
        vMeth_check_sum += i + i1 + i13 + i14 + i15 + i16 + i17 + s2 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        double d=95.124571, d3=-6.108448;
        int i18=-79, i19=-58921, i20=-2, i21=1, i22=132, i23=-12, i24=-238, iArr[]=new int[N];
        boolean b=true;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-16432);
        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr, 8570163038905142699L);

        sArr[(iFld >>> 1) % N] |= (short)(((-iArr[(iFld >>> 1) % N]) - (-(--iFld))) * Test.instanceCount);
        d = iFld;
        iFld = (int)(Test.fFld--);
        vMeth(Test.iFld1, iFld);
        for (i18 = 2; i18 < 234; i18++) {
            Test.byFld += (byte)(i18 - iFld);
            for (i20 = 1; i20 < 108; i20++) {
                lArr[i18 + 1] = 27717;
                for (d3 = i20; d3 < 2; d3++) {
                    Test.iFld1 += -49;
                    Test.iFld1 = (int)Test.instanceCount;
                    if (b) break;
                    Test.instanceCount = -96;
                    iArr[i20 - 1] += Test.iFld1;
                    i22 = iFld;
                    if (false) continue;
                    Test.fFld -= i21;
                }
                for (i23 = 1; i23 < 2; i23++) {
                    iArr[i18 + 1] = i23;
                    switch ((i18 % 5) + 78) {
                    case 78:
                    case 79:
                        iFld = 48711;
                    case 80:
                        i21 <<= i19;
                        break;
                    case 81:
                        try {
                            i21 = (i19 / 135);
                            Test.iFld2 = (i20 / -26614);
                            i22 = (i23 % 41);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 82:
                        switch (((i23 % 9) * 5) + 32) {
                        case 35:
                            sArr[i20 - 1] >>= (short)27305;
                            if (b) {
                                Test.instanceCount = -219;
                                i19 >>>= (int)Test.instanceCount;
                                i24 = (int)Test.instanceCount;
                            }
                            i21 += i24;
                            break;
                        case 41:
                            i24 -= (int)91.90154;
                            break;
                        case 49:
                            Test.instanceCount += (i23 | Test.instanceCount);
                            break;
                        case 66:
                            i21 = (int)Test.instanceCount;
                        case 45:
                            i21 -= (int)Test.fFld;
                            break;
                        case 38:
                            Test.fFld += (i23 * i23);
                            break;
                        case 61:
                            iArr[i20 - 1] = (int)-61801L;
                            break;
                        case 43:
                            Test.iFld2 += i23;
                        case 64:
                            Test.iFld1 += 10;
                            break;
                        default:
                            i24 += (i23 + i22);
                        }
                        break;
                    default:
                        i22 = (int)d3;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
