package tests.javafuzzer445;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:02:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public int iFld=12;
    public static boolean bFld=false;
    public static volatile float fFld=7.374F;
    public static byte byFld=-88;
    public int iArrFld[][]=new int[N][N];
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i3=12, i4=-11, i5=-221, i6=-53811, i7=2, i8=6417;
        double d1=-26.51315;
        short s=17015;

        if (Test.bFld) {
            i3 <<= i3;
            i3 -= i3;
            i3 <<= i3;
            Test.bFld = true;
        } else if (Test.bFld) {
            for (i4 = 4; 136 > i4; i4++) {
                i5 >>= 12;
                i5 -= (int)d1;
                Test.instanceCount += (i4 | i3);
                i5 /= (int)((long)(Test.fFld) | 1);
                Test.instanceCount += (i4 ^ i5);
                i3 -= (int)d1;
                for (i6 = 1; i6 < 12; ++i6) {
                    Test.instanceCount += (((i6 * s) + i3) - i6);
                    i8 <<= i6;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + s + i8;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth1(boolean b) {

        double d=45.53879;
        byte by=120;
        int i9=-182, i10=71, i11=-9, i12=-45047, i13=49;

        d = ((iFld--) - ((iArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N]--) + fMeth()));
        by = (byte)Test.instanceCount;
        iFld = (int)d;
        Test.fFld -= (float)-1.7574;
        for (i9 = 16; i9 < 270; ++i9) {
            for (i11 = 6; i11 > 1; --i11) {
                i10 += (int)-134L;
            }
            iArrFld[i9 - 1][i9 - 1] *= (int)Test.instanceCount;
            iArrFld[i9 + 1][i9] *= (int)Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
            i13 = 1;
            while (++i13 < 6) {
                i10 -= by;
            }
            Test.instanceCount = 77;
            d -= Test.fFld;
        }
        Test.instanceCount = i12;
        vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + by + i9 + i10 + i11 + i12 + i13;
    }

    public void vMeth(float f, long l) {

        int i14=0, i15=2, i16=-9783, i17=56133;
        short s1=21701;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.636F);

        vMeth1(Test.bFld);
        for (i14 = 13; i14 < 367; ++i14) {
            i15 >>>= 12;
            iArrFld[i14][i14] = (int)l;
            Test.instanceCount = Test.instanceCount;
            i16 = 1;
            while (++i16 < 5) {
                fArr = fArr;
                iFld = i16;
                i15 -= (int)Test.instanceCount;
                i17 = 1;
                do {
                    iFld = i14;
                } while (++i17 < 1);
                f += (i16 * i16);
                Test.byFld = (byte)l;
                Test.bFld = Test.bFld;
                i15 = s1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i14 + i15 + i16 + i17 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-37158, i1=65377, i2=-146, i18=3, i19=-25217, i20=133, i21=44720, i22=144, i23=57, i24=-63914;
        double d2=1.34843;
        short s2=-11010;
        long l1=113L;

        i = (int)Math.min(Test.instanceCount, Test.instanceCount = (++iArrFld[(14 >>> 1) % N][(248 >>> 1) % N]));
        for (i1 = 8; i1 < 142; ++i1) {
            vMeth(Test.fFld, -7254123098605769382L);
            i18 = 1;
            do {
                i += i18;
                switch ((i1 % 2) + 85) {
                case 85:
                    try {
                        iFld = (i / i2);
                        iFld = (i1 / i1);
                        iFld = (i % -209);
                    } catch (ArithmeticException a_e) {}
                case 86:
                    i <<= -3;
                    break;
                default:
                    dArrFld[(iFld >>> 1) % N] -= i;
                    for (i19 = 1; i19 < 1; ++i19) {
                        i2 = (int)Test.instanceCount;
                        i20 ^= (int)5521778592542587098L;
                        iArrFld[i1][i1 - 1] += (int)Test.instanceCount;
                        try {
                            i = (32335 % i1);
                            i20 = (i / iFld);
                            i21 = (i18 / -1831108875);
                        } catch (ArithmeticException a_e) {}
                        d2 -= i21;
                        if (Test.bFld) continue;
                        Test.instanceCount = i1;
                        i21 -= i22;
                    }
                }
                iArrFld[i18 - 1][i1 + 1] = i18;
                i2 += (i18 - Test.instanceCount);
                s2 += (short)i;
            } while (++i18 < 187);
            for (i23 = 11; 187 > i23; ++i23) {
                iFld <<= i22;
                if (Test.bFld) {
                    switch (((i1 % 1) * 5) + 34) {
                    case 37:
                        dArrFld[i1 - 1] += 212;
                        break;
                    }
                    l1 = 1;
                    while (++l1 < 2) {
                        iArrFld[(int)(l1 - 1)][(int)(l1 + 1)] = i24;
                        Test.instanceCount >>= i20;
                    }
                    i2 <<= (int)l1;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
