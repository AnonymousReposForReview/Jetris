package tests.javafuzzer1710;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:18:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=19023L;
    public static short sFld=25464;
    public static int iFld=-13;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 53389L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth() {

        int i3=30935;
        float f=0.537F;

        i3 += (int)(-(f + (f + i3)));
        long meth_res = i3 + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(long l, int i10, long l1) {

        boolean b=true;
        int i11=-19461, i12=-8, i13=57886, i14=-199, iArr[][]=new int[N][N];
        float f3=2.541F;

        FuzzerUtils.init(iArr, -61351);

        l += Test.instanceCount;
        i10 -= i10;
        if (b) {
            i10 += -7440;
        }
        i10 = i10;
        for (i11 = 9; i11 < 353; i11++) {
            Test.sFld = (short)Test.iFld;
            if (i10 != 0) {
                vMeth2_check_sum += l + i10 + l1 + (b ? 1 : 0) + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            i12 = i10;
            for (i13 = 1; i13 < 5; i13++) {
                switch (((i14 >>> 1) % 5) + 26) {
                case 26:
                    Test.instanceCount += (((i13 * l) + f3) - i13);
                    break;
                case 27:
                    iArr[i11 - 1][i13] -= i13;
                case 28:
                case 29:
                    i14 += i13;
                case 30:
                    Test.sFld = (short)Test.instanceCount;
                    break;
                }
            }
        }
        vMeth2_check_sum += l + i10 + l1 + (b ? 1 : 0) + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f2, int i8, int i9) {

        int i15=-43181, i16=243, i17=62635, i18=-5, i19=-970, i20=-6719;
        byte by1=83;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.779F);

        vMeth2(3494004736648996421L, i9, 22968L);
        i8 *= Test.sFld;
        for (i15 = 12; i15 < 219; i15++) {
            fArr = fArr;
            by1 <<= (byte)i9;
            i9 += (int)-1171874499139120677L;
        }
        for (i17 = 3; i17 < 145; i17++) {
            f2 += (((i17 * i18) + Test.instanceCount) - by1);
            i9 += (i17 * i17);
            i19 = 11;
            while ((i19 -= 2) > 0) {
                switch (((i17 % 10) * 5) + 104) {
                case 125:
                    i16 += (4658 + (i19 * i19));
                    break;
                case 145:
                    Test.iFld -= i9;
                    i16 = (int)f2;
                    f2 = i8;
                    break;
                case 119:
                    if (i8 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i15 + i16 + by1 + i17 + i18 + i19 +
                            i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    break;
                case 128:
                    f2 -= -2980;
                case 132:
                    i8 += (((i19 * i17) + i19) - f2);
                    break;
                case 107:
                    i8 += (i19 * i19);
                    break;
                case 126:
                    Test.instanceCount = i18;
                case 138:
                    Test.instanceCount += i19;
                    break;
                case 127:
                    i20 = i15;
                    break;
                case 152:
                    f2 = i20;
                    break;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i15 + i16 + by1 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, int i2) {

        byte by=-61;
        int i4=-4, i5=126, i6=-140, i7=5, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -57);

        i1 -= ((by >> i1) % ((i2 += iMeth()) | 1));
        for (i4 = 265; i4 > 8; i4--) {
            for (i6 = i4; i6 < 6; ++i6) {
                float f1=0.538F;
                by -= (byte)91;
                i1 += (i6 ^ (long)f1);
                i2 -= i7;
                if (true) {
                    vMeth1(f1, -40009, i7);
                    i7 += i6;
                    f1 += (((i6 * i6) + Test.instanceCount) - Test.iFld);
                }
                iArr1 = iArr1;
                i1 = i1;
                Test.iFld = i2;
                i2 |= (int)Test.instanceCount;
                Test.instanceCount += i5;
            }
        }
        vMeth_check_sum += i1 + i2 + by + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-11402, i21=-13, i22=-40438, i23=-175, i24=12, i25=-33118, i26=64802, iArr2[]=new int[N];
        float f4=0.808F;
        boolean b1=false;
        long l2=-141L;
        double d1=21.106550, dArr[]=new double[N];
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 98.86229);
        FuzzerUtils.init(iArr2, -53341);
        FuzzerUtils.init(byArr, (byte)-57);
        FuzzerUtils.init(sArr, (short)24029);

        i += (int)(--Test.lArrFld[(i >>> 1) % N]);
        vMeth(Test.iFld, i);
        switch ((((i >>> 1) % 9) * 5) + 11) {
        case 56:
            i -= -130;
            for (double d : dArr) {
                f4 += i;
                i += i;
                iArr2[(Test.iFld >>> 1) % N] *= 3;
                Test.instanceCount += i;
                f4 = f4;
                if (b1) {
                    byArr[(Test.iFld >>> 1) % N] *= (byte)-112.477F;
                    i21 = 1;
                    do {
                        b1 = b1;
                        i += (i21 * i21);
                        Test.instanceCount += (i21 ^ i21);
                        for (i22 = 1; 1 > i22; i22++) {
                            Test.instanceCount = Test.iFld;
                            iArr2[i21] += i;
                            iArr2[i21] -= i21;
                        }
                        iArr2 = iArr2;
                        d = Test.instanceCount;
                        iArr2[i21 - 1] *= Test.iFld;
                    } while (++i21 < 63);
                }
            }
            for (l2 = 14; l2 < 378; l2++) {
                Test.sFld += (short)(((l2 * i22) + f4) - i21);
                b1 = b1;
                for (i25 = 4; i25 < 69; i25++) {
                    try {
                        i23 = (i24 / -37);
                        Test.iFld = (i23 / i21);
                        Test.iFld = (51 % i21);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount <<= i23;
                    d1 += -11;
                }
            }
        case 53:
            i23 -= (int)1.486F;
        case 20:
            Test.instanceCount = -42773;
            break;
        case 15:
            sArr[(14 >>> 1) % N] >>= (short)i23;
            break;
        case 44:
        case 39:
        case 25:
            i = 0;
            break;
        case 40:
            Test.instanceCount *= (long)d1;
        case 48:
            Test.lArrFld[(i23 >>> 1) % N] = i;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
