package tests.javafuzzer395;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:16:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9145238760685486281L;
    public volatile byte byFld=11;
    public static boolean bFld=true;
    public static float fFld=2.828F;
    public float fFld1=3.368F;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -34.338F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, double d1, long l1) {

        int i5=29703, i6=-6, i7=28903, iArr[]=new int[N];
        short s1=10410;
        double d2=0.91591;
        float f1=0.809F;

        FuzzerUtils.init(iArr, -9);

        for (i5 = 213; i5 > 10; i5 -= 3) {
            Test.bFld = Test.bFld;
            l1 -= i6;
            s1 -= (short)l1;
            iArr[i5 + 1] = (int)l;
            if (Test.bFld) {
                for (d2 = i5; d2 < 23; d2++) {
                    d1 += i5;
                    l1 += (long)(d2 * d2);
                    i6 = i6;
                    i7 += (int)(d2 * d2);
                    try {
                        i7 = (i7 / 91);
                        i6 = (-64 / i7);
                        i7 = (i5 / -122);
                    } catch (ArithmeticException a_e) {}
                    i6 += (int)((long)d2 | i7);
                    Test.instanceCount += (long)d2;
                    f1 += 9934;
                }
            } else {
                i6 += (((i5 * i7) + i7) - l);
            }
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d1) + l1 + i5 + i6 + s1 + Double.doubleToLongBits(d2) + i7 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i8=36, i9=-6748, i10=-253, i12=182, i13=-63773, iArr1[]=new int[N];
        long l2=208L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -83.108650);
        FuzzerUtils.init(iArr1, -38);

        vMeth1(-1899841067805174662L, -77.129296, 27000L);
        for (i8 = 3; i8 < 134; ++i8) {
            for (l2 = i8; l2 < 12; ++l2) {
                int i11=53556;
                i9 += (int)l2;
                switch ((int)(((l2 % 5) * 5) + 79)) {
                case 92:
                    i10 = (int)Test.instanceCount;
                    i9 -= i11;
                    Test.instanceCount += i8;
                    i11 = (int)Test.instanceCount;
                    break;
                case 90:
                case 87:
                    switch ((int)(((l2 % 10) * 5) + 77)) {
                    case 78:
                        i10 >>= 25119;
                        for (i12 = (int)(l2); i12 < 1; i12++) {
                            if (Test.bFld) break;
                            try {
                                i10 = (32383 / i10);
                                i13 = (i12 % 42941);
                                i13 = (i11 % 1042133482);
                            } catch (ArithmeticException a_e) {}
                            dArr[i12] = 54;
                        }
                        break;
                    case 80:
                        iArr1 = iArr1;
                    case 123:
                        iArr1[(int)(l2 - 1)] -= (int)l2;
                    case 102:
                        Test.instanceCount += i12;
                        break;
                    case 93:
                    case 79:
                        dArr[i8 + 1] = i11;
                        break;
                    case 87:
                        i11 -= i13;
                        break;
                    case 98:
                        i10 -= (int)Test.instanceCount;
                        break;
                    case 118:
                        Test.fArrFld[(int)(l2)] += i11;
                        break;
                    case 101:
                        Test.instanceCount -= l2;
                        break;
                    default:
                        Test.fFld += l2;
                    }
                case 101:
                    i9 = (int)Test.instanceCount;
                    break;
                case 85:
                    iArr1[i8] -= i10;
                default:
                    Test.bFld = Test.bFld;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + l2 + i10 + i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public long lMeth(int i2, int i3, int i4) {

        float f=1.257F;
        int i14=154, i15=11, i17=14246, i18=53383, iArr2[]=new int[N], iArr3[]=new int[N];
        short s2=-21865;
        double d3=-6.69545;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -64736);
        FuzzerUtils.init(lArr, 50053L);
        FuzzerUtils.init(iArr3, 7);

        f *= ((--f) * i2);
        f -= i3;
        vMeth();
        Test.instanceCount -= i4;
        for (i14 = 20; i14 < 330; i14++) {
            i15 += (i14 + i4);
            i15 = i4;
            for (i17 = 1; i17 < 5; ++i17) {
                switch (((i14 % 10) * 5) + 97) {
                case 116:
                    Test.instanceCount *= Test.instanceCount;
                    i15 = (int)Test.instanceCount;
                    i2 |= (int)Test.instanceCount;
                case 129:
                    i3 += i17;
                    lArr[i14 + 1] += i2;
                    s2 = (short)Test.fFld;
                    break;
                case 123:
                    iArr3[i14] += i4;
                    break;
                case 108:
                    i2 -= (int)d3;
                case 127:
                    i4 *= i2;
                    break;
                case 120:
                    d3 = Test.instanceCount;
                    break;
                case 133:
                    iArr3 = iArr2;
                    break;
                case 135:
                    fFld1 += (((i17 * Test.instanceCount) + Test.instanceCount) - i3);
                    break;
                case 146:
                    i3 *= i3;
                    break;
                case 109:
                    Test.fFld += Test.fFld;
                    break;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + i14 + i15 + i17 + i18 + s2 +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=121, i19=6, i20=12, i21=-9905, i22=8, i23=5, i24=143, iArr4[]=new int[N];
        short s=30182;
        long lArr1[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr1, -56315L);
        FuzzerUtils.init(iArr4, -146);
        FuzzerUtils.init(dArr1, -95.33389);

        byFld = (byte)(-((i * i) - (byFld - Test.instanceCount)));
        i = (++i);
        i1 = 1;
        while (++i1 < 319) {
            double d=2.106621;
            s += (short)(((Test.instanceCount += Test.instanceCount) - d) + lMeth(-2, i1, i));
            i += (i1 * i1);
            d = Test.instanceCount;
            for (i19 = i1; 79 > i19; i19++) {
                i20 += (((i19 * s) + s) - i19);
                switch (((i20 >>> 1) % 8) + 59) {
                case 59:
                    for (i21 = 1; i21 > 1; i21--) {
                        fFld1 += (i21 * Test.instanceCount);
                        lArr1 = lArr1;
                        i20 -= i20;
                    }
                    Test.bFld = Test.bFld;
                    break;
                case 60:
                    Test.instanceCount = i22;
                    Test.instanceCount /= (Test.instanceCount | 1);
                    Test.instanceCount = i22;
                    break;
                case 61:
                case 62:
                    Test.instanceCount -= i21;
                    for (i23 = 1; i23 > 1; --i23) {
                        iArr4[i19 - 1] = i22;
                        switch ((i23 % 2) + 76) {
                        case 76:
                            iArr4[i19] *= (int)Test.fFld;
                        case 77:
                            iArr4[i19 - 1] += 30243;
                            switch ((i23 % 6) + 38) {
                            case 38:
                                d -= -32490L;
                                lArr1[i19] = i24;
                                break;
                            case 39:
                                i22 = (int)fFld1;
                                i20 = -197;
                            case 40:
                                i *= i1;
                                i22 += i23;
                                break;
                            case 41:
                                dArr1 = dArr1;
                                break;
                            case 42:
                                iArr4[i23 + 1] >>= i22;
                            case 43:
                                iArr4[i23] += (int)Test.instanceCount;
                            }
                            break;
                        }
                    }
                    break;
                case 63:
                    Test.fFld = -11;
                    break;
                case 64:
                    Test.instanceCount -= i23;
                case 65:
                    if (false) break;
                    break;
                case 66:
                default:
                    i22 += (i19 * i20);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
