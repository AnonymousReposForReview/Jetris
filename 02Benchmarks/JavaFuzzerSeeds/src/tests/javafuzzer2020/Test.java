package tests.javafuzzer2020;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:38:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7046275776398092478L;
    public static short sFld=18200;
    public static int iFld=0;
    public static boolean bFld=false;
    public byte byFld=105;
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, 0.624F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static long lMeth(int i, int i1) {

        float f=3.265F;

        f = (++Test.instanceCount);
        f *= i;
        long meth_res = i + i1 + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d) {

        int i2=0, iArr[]=new int[N];
        float f1=59.760F;

        FuzzerUtils.init(iArr, 157);

        lMeth(++iArr[(i2 >>> 1) % N], Math.min((int)((i2 + Test.instanceCount) + f1), -10 - Math.abs(i2)));
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        int i8=-65451;

        i8 = (int)Test.instanceCount;
        long meth_res = i8;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i4=81, i5=35, i6=-39408, i7=3, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 7);
        FuzzerUtils.init(lArr, 0L);

        for (i4 = 5; i4 < 251; i4++) {
            short s=-24974;
            i5 += (((i4 * i4) + i5) - s);
            for (i6 = 1; i6 < 7; ++i6) {
                if (((-(iArr2[i6 + 1]--)) * i5) != (-865965047876628522L + ((-(46 + Test.instanceCount)) - -1042)))
                    continue;
                Test.bArrFld[i4] = (lArr[i4] < iMeth1());
            }
            i7 <<= i7;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(double d1) {

        int i3=0, i9=-2, i10=44109, i11=-11, i12=-6, i13=23076, i14=6, iArr1[]=new int[N];
        boolean b=false;
        long l=-2229830751899553015L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 46);
        FuzzerUtils.init(lArr1, 0L);

        iArr1[(-11923 >>> 1) % N] -= (int)((d1 * i3) - (Test.instanceCount--));
        vMeth1();
        b = b;
        i3 = i3;
        for (i9 = 3; i9 < 301; ++i9) {
            int i15=-1;
            for (l = 1; l < 6; ++l) {
                Test.fArrFld[(int)(l + 1)] -= Test.instanceCount;
            }
            for (i12 = 1; i12 < 6; i12++) {
                lArr1[i9] += Test.sFld;
            }
            i10 += (((i9 * i14) + i3) - i15);
        }
        long meth_res = Double.doubleToLongBits(d1) + i3 + (b ? 1 : 0) + i9 + i10 + l + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-1.163F;
        int i16=-13, i17=3, i18=9, i19=244, iArr3[]=new int[N];
        double d2=-1.1521;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, 659);
        FuzzerUtils.init(lArr2, -47284L);

        vMeth((iMeth(-71.71940) + Test.iFld) - Test.instanceCount);
        f2 = 1;
        while (++f2 < 217) {
            float f3=1.50F;
            f3 = Test.iFld;
            i16 = 1;
            do {
                Test.iFld += (i16 * i16);
                Test.iFld += 57093;
                iArr3[i16] = -28;
                for (d2 = i16; 1 > d2; d2++) {
                    Test.bFld = Test.bFld;
                    switch (((-2121 >>> 1) % 5) + 84) {
                    case 84:
                        i17 += (int)(((d2 * i17) + Test.instanceCount) - Test.iFld);
                        Test.iFld -= (int)Test.instanceCount;
                        break;
                    case 85:
                        Test.sFld += (short)(((d2 * Test.iFld) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 86:
                        Test.instanceCount += (long)(((d2 * f3) + Test.iFld) - i17);
                        break;
                    case 87:
                    case 88:
                        Test.iFld += (int)(((d2 * f2) + Test.iFld) - Test.iFld);
                        i17 -= -178;
                        i17 >>>= i17;
                        break;
                    default:
                        Test.instanceCount += (long)(-39.117F + (d2 * d2));
                        f3 *= -10;
                    }
                    Test.iFld >>= (int)Test.instanceCount;
                }
                i17 = Test.iFld;
                for (i18 = 1; i18 < 1; ++i18) {
                    if (true) break;
                    byFld -= (byte)-36.389F;
                    i17 = i17;
                    Test.iFld = i19;
                    i17 = (int)Test.instanceCount;
                    f3 = i17;
                    lArr2[(int)(f2 - 1)] -= Test.iFld;
                    i17 = Test.iFld;
                }
            } while (++i16 < 116);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
