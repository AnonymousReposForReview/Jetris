package tests.javafuzzer1200;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:22:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4124133478L;
    public int iFld=-32788;
    public static double dFld=77.4502;
    public static float fFld=-90.602F;
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 45);
        FuzzerUtils.init(Test.lArrFld, -21L);
        FuzzerUtils.init(Test.dArrFld, 120.31399);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        float f2=0.149F;
        int i7=251, i8=94, i9=112, i10=243;
        long l3=108L;
        short s1=-25768;

        f2 = 1;
        do {
            for (i7 = 1; i7 < 5; ++i7) {
                i8 = i7;
                Test.iArrFld[i7 - 1] = (int)l3;
                Test.iArrFld[i7 - 1] <<= (int)l3;
                switch (((i7 % 10) * 5) + 99) {
                case 130:
                    Test.lArrFld[i7] >>>= i6;
                    for (i9 = 1; i9 < 2; ++i9) {
                        if (i7 != 0) {
                            vMeth2_check_sum += i6 + Float.floatToIntBits(f2) + i7 + i8 + l3 + i9 + i10 + s1;
                            return;
                        }
                        i10 = i9;
                        Test.lArrFld[i7 + 1] = 3;
                        Test.iArrFld[i7 + 1] = s1;
                        i10 += (i9 + i6);
                        i6 *= (int)l3;
                        Test.dArrFld = Test.dArrFld;
                    }
                    break;
                case 109:
                    Test.instanceCount += 13313;
                    break;
                case 114:
                    Test.dArrFld = Test.dArrFld;
                case 127:
                    i10 = i6;
                    break;
                case 124:
                    i8 = i6;
                    break;
                case 131:
                    i8 *= -37199;
                case 132:
                    l3 = i10;
                    break;
                case 129:
                    i8 = (int)Test.dFld;
                    break;
                case 103:
                    i8 += (i7 * i7);
                    break;
                case 143:
                    i10 ^= i10;
                    break;
                default:
                    i10 |= i9;
                }
            }
        } while (++f2 < 356);
        vMeth2_check_sum += i6 + Float.floatToIntBits(f2) + i7 + i8 + l3 + i9 + i10 + s1;
    }

    public static void vMeth1(long l2, float f1, int i5) {

        short s=-20905;
        int i11=6, i12=48, iArr1[]=new int[N];
        byte by1=-109, byArr1[]=new byte[N];

        FuzzerUtils.init(iArr1, 64178);
        FuzzerUtils.init(byArr1, (byte)79);

        l2 = (--i5);
        iArr1[(-28784 >>> 1) % N] = (int)(((i5 ^= i5) - (byArr1[(i5 >>> 1) % N]++)) * ((-42965 + (i5 + s)) *
            (-(Test.dFld++))));
        vMeth2(i5);
        i5 ^= i5;
        iArr1 = iArr1;
        for (i11 = 1; i11 < 385; i11++) {
            by1 >>= (byte)l2;
        }
        vMeth1_check_sum += l2 + Float.floatToIntBits(f1) + i5 + s + i11 + i12 + by1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr1);
    }

    public static void vMeth(int i2, int i3, int i4) {

        byte by=112, byArr[]=new byte[N];
        int i13=1, i14=14, iArr[]=new int[N];

        FuzzerUtils.init(byArr, (byte)42);
        FuzzerUtils.init(iArr, -25548);

        Test.instanceCount += Test.instanceCount;
        byArr[(i2 >>> 1) % N] += (byte)i4;
        iArr[(43262 >>> 1) % N] = (-((i3 - i3) * i4));
        i4 = -102;
        iArr[(-12 >>> 1) % N] = (int)((i4 + iArr[(i3 >>> 1) % N]) % (((--i2) + (++Test.instanceCount)) | 1));
        i3 -= ((i4 - (i4 + by)) << (iArr[(i2 >>> 1) % N] = Integer.reverseBytes(i2)));
        Test.fFld = 21.540F;
        vMeth1(Test.instanceCount, Test.fFld, i2);
        Test.fFld = i4;
        for (i13 = 1; 134 > i13; ++i13) {
            i2 *= i3;
            i2 = 9;
            Test.lArrFld[i13 - 1] -= (long)Test.dFld;
            i14 >>= i14;
            if (i13 != 0) {
                vMeth_check_sum += i2 + i3 + i4 + by + i13 + i14 + FuzzerUtils.checkSum(byArr) +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + by + i13 + i14 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        long l=-6L, lArr[]=new long[N];
        float f=-14.975F, fArr[]=new float[N];
        int i=29876, i1=69, i15=-4, i16=-3, i17=12, i18=-100, i19=-2, i20=-3;
        boolean b=false;
        short s2=10595;
        byte by2=103;

        FuzzerUtils.init(lArr, -17069L);
        FuzzerUtils.init(fArr, 85.756F);

        Test.instanceCount += ((iFld--) + Integer.reverseBytes((int)(l * iFld)));
        iFld |= (int)(((iFld++) * iFld) + 76.469F);
        iFld *= iFld;
        for (long l1 : lArr) {
            iFld = (int)(((++iFld) * (fArr[(iFld >>> 1) % N]++)) - (f + (iFld + Test.dFld)));
            Test.instanceCount = (--l1);
        }
        for (i = 6; i < 395; i++) {
            vMeth(-2, i, iFld);
            for (i15 = 3; i15 < 65; ++i15) {
                if (b) continue;
                Test.dArrFld[i15 - 1] += i;
                iFld += i15;
                i16 = i16;
                for (i17 = 1; 2 > i17; ++i17) {
                    iFld += i17;
                    l -= l;
                    l -= i18;
                    iFld = i1;
                    fArr[i] += i16;
                    i18 += i17;
                    i16 *= i15;
                }
                Test.instanceCount = -2;
                Test.instanceCount += i16;
                Test.dFld = iFld;
            }
            switch (((i % 10) * 5) + 45) {
            case 67:
                for (i19 = 1; 65 > i19; i19++) {
                    lArr[i + 1] += i16;
                    i1 = (int)l;
                    Test.bArrFld[i - 1] = b;
                    l -= i20;
                }
                break;
            case 86:
                l += i;
            case 58:
                Test.instanceCount = l;
            case 72:
                i20 += i17;
            case 74:
                s2 += (short)(i ^ i16);
                break;
            case 66:
                Test.fFld = i15;
                break;
            case 61:
                i1 *= by2;
            case 65:
                b = b;
                break;
            case 62:
                Test.iArrFld[i] = i19;
                break;
            case 51:
                i1 = -7;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
