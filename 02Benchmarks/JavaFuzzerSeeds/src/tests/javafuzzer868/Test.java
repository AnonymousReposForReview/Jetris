package tests.javafuzzer868;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:56:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2516069690879536935L;
    public static boolean bFld=true;
    public static int iFld=-9;
    public float fFld=1.721F;
    public byte byFld=-71;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -212);
        FuzzerUtils.init(Test.fArrFld, 74.279F);
        FuzzerUtils.init(Test.byArrFld, (byte)81);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, short s, double d1) {

        int i6=22, i7=19900, i8=-190, i9=3, i10=-12420, i11=-1;
        double d2=0.24019;
        byte by=98;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.362F);

        i5 = i5;
        for (i6 = 372; i6 > 8; --i6) {
            for (d2 = 1; 5 > d2; ++d2) {
                i7 = i7;
                i9 = 1;
                while (++i9 < 2) {
                    try {
                        Test.iArrFld[i6] = (i7 / -7662);
                        i5 = (i9 % -42649);
                        i5 = (i8 / -66);
                    } catch (ArithmeticException a_e) {}
                    fArr[(int)(d2)] += i9;
                    i5 = (int)24L;
                }
                for (i10 = 1; i10 < 2; i10++) {
                    i11 -= i7;
                    Test.bFld = true;
                    by += (byte)(i10 * i10);
                    i8 >>= i7;
                    d1 *= -72.883F;
                    Test.iArrFld[i6 + 1] ^= -34381;
                }
            }
        }
        vMeth2_check_sum += i5 + s + Double.doubleToLongBits(d1) + i6 + i7 + Double.doubleToLongBits(d2) + i8 + i9 +
            i10 + i11 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {

        int i3=-37268, i4=-17016, i12=30138;
        short s1=-14250;
        float f=0.969F;

        for (i3 = 15; i3 < 312; ++i3) {
            i4 -= (Test.iArrFld[i3 + 1] = (Math.abs(0) + (++i4)));
            vMeth2(2902, s1, 28.47606);
            f += i4;
            i12 = 90;
        }
        vMeth1_check_sum += i3 + i4 + s1 + Float.floatToIntBits(f) + i12;
    }

    public static void vMeth(double d, int i) {

        int i1=226, i2=174, i13=-27860, i14=100;
        short s2=-3973;
        byte by1=103;

        for (i1 = 7; i1 < 269; ++i1) {
            vMeth1();
            i = i;
            Test.instanceCount = (long)d;
            Test.fArrFld = Test.fArrFld;
            for (i13 = 1; i13 < 6; i13++) {
                s2 = (short)i;
                Test.instanceCount = i;
                if (false) break;
                i14 /= (int)(Test.instanceCount | 1);
                i14 >>= -14;
                by1 -= (byte)d;
                Test.instanceCount *= i1;
                if (i14 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i13 + i14 + s2 + by1;
                    return;
                }
                i2 /= (int)(i1 | 1);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i13 + i14 + s2 + by1;
    }

    public void mainTest(String[] strArr1) {

        double d3=54.21126;
        int i15=-5, i16=-64, i17=117, i18=105, i19=58893, i20=137, i21=-88;
        float f1=56.665F;
        long l=-246L, lArr[]=new long[N];
        short s3=-15762;

        FuzzerUtils.init(lArr, -2733046202L);

        vMeth(d3, Test.iFld);
        Test.iFld *= Test.iFld;
        Test.iFld >>= Test.iFld;
        for (i15 = 10; i15 < 276; ++i15) {
            Test.iFld >>>= (int)Test.instanceCount;
            Test.iFld *= i15;
            for (f1 = 4; f1 < 94; ++f1) {
                l <<= i16;
                if (Test.bFld) continue;
            }
            for (i18 = 1; 94 > i18; ++i18) {
                fFld -= i17;
                for (i20 = 1; i20 < 2; ++i20) {
                    switch ((i20 % 7) + 18) {
                    case 18:
                        d3 -= i16;
                        if (false) {
                            i21 -= -46;
                            switch ((i15 % 5) + 107) {
                            case 107:
                            case 108:
                                Test.iArrFld[i15] = (int)Test.instanceCount;
                                i21 = i18;
                                i16 <<= Test.iFld;
                            case 109:
                                i16 += i16;
                                break;
                            case 110:
                                i21 = Test.iFld;
                                break;
                            case 111:
                                if (Test.bFld) {
                                    switch ((i18 % 3) + 110) {
                                    case 110:
                                        i21 = (int)Test.instanceCount;
                                        Test.iFld *= byFld;
                                        byFld += (byte)(i20 | i19);
                                        break;
                                    case 111:
                                        try {
                                            i17 = (249 % Test.iArrFld[i15]);
                                            i16 = (i18 % Test.iArrFld[i15 + 1]);
                                            i19 = (i18 % Test.iFld);
                                        } catch (ArithmeticException a_e) {}
                                    case 112:
                                        lArr[i20] <<= i18;
                                        fFld -= f1;
                                        break;
                                    default:
                                        Test.byArrFld = Test.byArrFld;
                                    }
                                }
                            }
                        } else {
                            i21 = s3;
                        }
                    case 19:
                        Test.instanceCount += (-239 + (i20 * i20));
                        break;
                    case 20:
                        Test.iFld += (int)70L;
                        break;
                    case 21:
                        Test.iArrFld[i15 + 1] *= i18;
                    case 22:
                        i16 += i19;
                        break;
                    case 23:
                        Test.iArrFld[i20 + 1] = -10;
                        break;
                    case 24:
                        i16 = (int)-40499L;
                        break;
                    default:
                        try {
                            i19 = (i17 % 44138);
                            i16 = (-249 / i21);
                            i16 = (i20 % 99);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
