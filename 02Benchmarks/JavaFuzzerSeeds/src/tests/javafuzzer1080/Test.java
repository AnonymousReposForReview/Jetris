package tests.javafuzzer1080;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:15:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-450358020L;
    public static volatile byte byFld=7;
    public static int iFld=-5837;
    public static int iFld1=41045;
    public short sFld=23777;
    public static double dFld=-1.69654;
    public static int iArrFld[][]=new int[N][N];
    public static boolean bArrFld[]=new boolean[N];
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 35303);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 2397550396L);
        FuzzerUtils.init(Test.dArrFld, 17.12250);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        float f2=0.702F;
        int i8=10, i9=-8, i10=-12, i11=2485;
        boolean b=true;
        double d=73.39154;

        f2 -= i7;
        for (i8 = 4; i8 < 128; i8++) {
            i7 -= Test.byFld;
            Test.iArrFld[i8 + 1][i8] <<= 219;
            if (i8 != 0) {
                vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
                    Double.doubleToLongBits(d);
                return;
            }
            for (i10 = 1; i10 < 13; i10++) {
                Test.instanceCount = Test.instanceCount;
                i9 = (int)115L;
                i11 -= i8;
                Test.iArrFld[i10][i10 + 1] *= Test.iFld;
                i11 = i9;
                Test.bArrFld[i8 - 1] = b;
            }
            i9 -= (int)d;
            i9 /= (int)(i7 | 1);
            Test.lArrFld[i8 - 1] <<= 210;
        }
        vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(d);
    }

    public static int iMeth() {

        int i2=-10, i3=-12, i4=-83, i5=0, i12=-11, i13=5, i14=6, i15=91;
        short s=10859;
        float f3=-2.627F;

        for (i2 = 18; i2 < 375; ++i2) {
            float f1=-1.201F;
            Test.instanceCount &= Math.max((int)((f1 + i3) / (Math.max(i2, i2) | 1)), (int)((i3--) /
                ((Test.instanceCount & i2) | 1)));
        }
        for (i4 = 12; i4 < 258; ++i4) {
            try {
                Test.iArrFld[i4 - 1][i4] = (i2 / i4);
                i3 = (i5 / 56367);
                i3 = (i4 / -443744315);
            } catch (ArithmeticException a_e) {}
            vMeth1(Test.iFld, i2);
            Test.instanceCount = i4;
            i5 += (i4 * s);
            for (i12 = 7; i12 > i4; i12 -= 3) {
                for (i14 = 1; 1 < i14; --i14) {
                    Test.dArrFld[i12 + 1] -= -87.65279;
                    f3 = i5;
                    Test.dArrFld[i14] -= i12;
                    i3 = i12;
                    f3 = 151;
                    i5 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + s + i12 + i13 + i14 + i15 + Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=-10, i1=-6392, i16=-28, i17=63870, i18=-62163, i19=-38870;
        float f=1.448F;
        boolean b1=true;
        double d1=0.10115;
        short s1=17952;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4L);

        for (i = 9; i < 362; i++) {
            Test.iArrFld[i][i - 1] *= (int)f;
            i1 >>= (int)(++lArr[i]);
            i1 <<= Math.min(Math.abs((int)(-7L | (i + i1))), iMeth());
            Test.iFld += i;
            Test.iFld %= (int)(i | 1);
            f += (((i * i) + i1) - Test.iFld1);
        }
        for (i16 = 7; i16 < 393; i16++) {
            Test.instanceCount >>>= Test.instanceCount;
        }
        for (i18 = 4; 128 > i18; ++i18) {
            if (b1) continue;
            Test.instanceCount >>= Test.instanceCount;
            d1 *= s1;
            Test.lArrFld[i18 - 1] = -6L;
            i19 += (int)Test.instanceCount;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1) + s1 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=16725, i21=190, i22=16546, i23=-11, i24=10, i25=3, i26=-207, i27=224, i28=26025, i29=-8;
        boolean b2=true;
        float f4=-7.80F;

        vMeth();
        Test.iFld ^= 13;
        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld1 >>> 1) % N] = -8;
        for (i20 = 6; 207 > i20; ++i20) {
            Test.iArrFld[i20][i20 + 1] -= i22;
            i21 += Test.iFld1;
            if (b2) break;
            Test.iFld = i22;
            for (i23 = i20; i23 < 125; ++i23) {
                i21 -= sFld;
            }
            Test.dFld += Test.instanceCount;
            i21 = (int)Test.instanceCount;
            if (b2) continue;
        }
        i25 = 1;
        while (++i25 < 240) {
            if (b2) {
                f4 -= f4;
                for (i26 = 4; i26 < 105; i26++) {
                    for (i28 = 2; i28 > i25; i28--) {
                        switch (((i28 % 9) * 5) + 12) {
                        case 24:
                            Test.instanceCount -= -190;
                            i21 *= -87;
                            i27 -= (int)Test.instanceCount;
                            i22 >>= (int)Test.instanceCount;
                            break;
                        case 56:
                            i22 += (((i28 * i27) + f4) - i24);
                            Test.dFld += 128;
                            Test.dFld -= Test.instanceCount;
                            break;
                        case 48:
                            Test.iArrFld[i25][i25] *= (int)Test.instanceCount;
                            Test.iArrFld[i28 + 1] = Test.iArrFld[i28 + 1];
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        case 42:
                        case 16:
                            Test.iArrFld[i28 - 1][i26] <<= i21;
                        case 47:
                            f4 = f4;
                            break;
                        case 13:
                        case 29:
                        case 51:
                            Test.instanceCount /= (i22 | 1);
                        default:
                            Test.byFld += (byte)(i28 * i28);
                        }
                    }
                }
            } else if (b2) {
                i27 = i29;
            } else if (b2) {
                Test.instanceCount += (i25 * Test.instanceCount);
            } else {
                i24 >>= i23;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
