package tests.javafuzzer1818;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:41:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-45058L;
    public static double dFld=-43.48611;
    public static double dFld1=-2.1546;
    public boolean bFld=true;
    public static float fFld=-1.893F;
    public short sFld=-32645;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.dArrFld, 27.46846);
        FuzzerUtils.init(Test.sArrFld, (short)-24541);
        FuzzerUtils.init(Test.lArrFld, 95L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=-9486, i5=-1, i7=39990;
        short s=7960;
        long l1=4446459756703277938L;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.867F);

        for (i4 = 4; i4 < 357; i4++) {
            int i6=-30670;
            Test.dArrFld[i4] = i6;
            fArr = fArr;
            Test.dFld -= s;
            Test.dArrFld[i4] = 34192;
            if (b) {
                Test.instanceCount += (i4 | Test.instanceCount);
                for (l1 = i4; l1 < 5; l1++) {
                    Test.iArrFld[i4 + 1] >>= (int)6235901461788330053L;
                    if (b) break;
                    fArr[(int)(l1)] /= 82L;
                    i5 /= (int)(i6 | 1);
                    i7 -= i5;
                    i5 = -141;
                    Test.dFld1 = i4;
                }
                vMeth2_check_sum += i4 + i5 + s + l1 + i7 + (b ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        vMeth2_check_sum += i4 + i5 + s + l1 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i3, long l) {


        vMeth2();
        Test.iArrFld[(i3 >>> 1) % N] *= (int)2.18F;
        i3 += (int)Test.instanceCount;
        Test.sArrFld[(-172 >>> 1) % N] -= (short)Test.instanceCount;
        vMeth1_check_sum += i3 + l;
    }

    public void vMeth(int i2) {

        int i8=-17, i9=21075, i10=-27003, i11=-33371, i12=0;
        byte by=74;

        vMeth1(i2, 26044L);
        i8 = 360;
        while ((i8 -= 3) > 0) {
            i2 += (int)(-69.662F + (i8 * i8));
            switch (((i2 >>> 1) % 9) + 81) {
            case 81:
                i2 -= (int)72.130318;
                break;
            case 82:
                Test.dArrFld[i8] += i8;
                Test.instanceCount -= i8;
                if (bFld) {
                    i2 >>>= 3;
                    Test.iArrFld[i8 - 1] &= (int)Test.instanceCount;
                    i2 += (i8 ^ Test.instanceCount);
                    for (i9 = 13; i9 > 1; i9--) {
                        for (i11 = 1; i11 < 2; ++i11) {
                            by = (byte)i12;
                            Test.iArrFld[i11 - 1] *= 194;
                        }
                    }
                } else {
                    Test.instanceCount += i8;
                }
                break;
            case 83:
                bFld = bFld;
                break;
            case 84:
                i2 += (int)Test.dFld1;
                break;
            case 85:
                Test.dFld += Test.fFld;
                break;
            case 86:
                sFld -= (short)Test.fFld;
                break;
            case 87:
                sFld += (short)(((i8 * i9) + Test.instanceCount) - i12);
                break;
            case 88:
                i12 >>= i2;
                break;
            case 89:
                if (i8 != 0) {
                    vMeth_check_sum += i2 + i8 + i9 + i10 + i11 + i12 + by;
                    return;
                }
            }
        }
        vMeth_check_sum += i2 + i8 + i9 + i10 + i11 + i12 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=7, i1=-28, i13=19848, i14=38068, i15=-13, i16=-59190, i17=3, i18=212, i19=9, i20=-25278;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 76.913F);

        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        for (i = 2; i < 186; ++i) {
            i1 >>>= (Test.iArrFld[i] + (--i1));
            vMeth(i);
            for (i13 = 8; i13 < 136; i13++) {
                i1 += (i13 + i14);
                i14 += (i13 * i13);
                for (i15 = 1; 2 > i15; ++i15) {
                    sFld *= (short)i13;
                    i14 += (int)Test.instanceCount;
                    Test.lArrFld[i15 + 1] = sFld;
                    i14 -= (int)Test.fFld;
                    i1 = i15;
                    i16 &= -9;
                    i16 >>= -14;
                    if (false) continue;
                }
            }
            Test.fFld -= sFld;
            for (i17 = 2; i17 < 136; ++i17) {
                i18 += i17;
                i1 -= -228;
                for (i19 = 1; i19 < 2; i19++) {
                    Test.fFld += (i19 * i19);
                    fArr1[i19 + 1] -= sFld;
                    fArr1 = fArr1;
                    switch ((i % 1) + 57) {
                    case 57:
                        i20 *= 12;
                        i16 += (i19 + sFld);
                        Test.instanceCount >>= i19;
                        i14 += i1;
                        break;
                    }
                    Test.lArrFld[i19] = i16;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
