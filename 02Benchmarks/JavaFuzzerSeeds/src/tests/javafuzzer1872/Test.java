package tests.javafuzzer1872;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:01:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static short sFld=-10247;
    public static float fFld=0.267F;
    public int iFld=-64271;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(int i2) {

        float f1=-33.752F;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -31);

        iArr[(i2 >>> 1) % N] *= i2;
        f1 *= i2;
        vSmallMeth_check_sum += i2 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        long l1=7758153742446124419L, lArr[]=new long[N];
        int i13=25621, i14=-24, i15=35723, i16=7, i17=213, i18=-30678, iArr2[]=new int[N];
        double d1=1.75058;
        boolean b=false, b1=true;

        FuzzerUtils.init(lArr, -309879829929744134L);
        FuzzerUtils.init(iArr2, 182);

        Test.instanceCount -= l1;
        i13 -= i13;
        lArr[(203 >>> 1) % N] *= Test.sFld;
        for (i14 = 9; i14 < 351; i14 += 3) {
            Test.instanceCount = i15;
            iArr2[i14] = i13;
            for (i16 = 1; i16 < 14; ++i16) {
                i15 &= i15;
                i13 = (int)Test.instanceCount;
                for (d1 = 1; d1 < 2; ++d1) {
                    iArr2[i16 - 1] ^= 8;
                    i13 += (int)d1;
                    i13 *= i16;
                    if (b) break;
                    b1 = b1;
                }
            }
        }
        long meth_res = l1 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + (b ? 1 : 0) + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(int i8, int i9, int i10) {

        int i11=-30492, i12=-28737, i19=7, i20=-211, i21=-5;
        double d2=-87.115793;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)127);

        i9 >>= (int)(-Test.fFld);
        for (i11 = 8; i11 < 196; ++i11) {
            i12 += (int)(-41436L + (i11 * i11));
            i9 *= (i10 - iMeth1());
            if (i11 != 0) {
            }
            i9 += (int)Test.instanceCount;
            for (i19 = 1; i19 < 8; ++i19) {
                i8 = (int)Test.instanceCount;
                i20 -= (int)Test.instanceCount;
            }
            switch ((((i12 >>> 1) % 5) * 5) + 48) {
            case 52:
                iArrFld[i11 + 1] -= i19;
                i9 -= 8544;
                i10 += (((i11 * i21) + Test.instanceCount) - i8);
                i8 += iFld;
            case 51:
                i9 *= (int)d2;
            case 63:
                i9 *= i11;
                break;
            case 64:
                d2 += -162;
                break;
            case 50:
                byArr[i11 + 1] = (byte)i10;
                break;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i19 + i20 + i21 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public int iMeth(short s, int i3) {

        int i4=6, i5=-44757, i6=61, i7=102, i22=8, iArr1[]=new int[N];
        double d3=25.127212;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -183);
        FuzzerUtils.init(lArr1, 1L);

        vSmallMeth((int)(Long.reverseBytes(Test.instanceCount) * i3));
        iArr1[(i3 >>> 1) % N] -= (int)(((Test.fFld - i3) + (i3 - 14)) - (Math.abs(i3) + (--iArr1[(-200 >>> 1) % N])));
        for (i4 = 15; i4 < 293; i4++) {
            switch (((i4 % 6) * 5) + 34) {
            case 37:
                for (i6 = 1; i6 < 6; i6++) {
                    i3 = (int)(Test.instanceCount -= (long)dMeth(i5, i22, iFld));
                    if (false) {
                        i5 += i6;
                        i22 = iFld;
                        iArr1 = iArrFld;
                    }
                    i7 += (i6 ^ i6);
                    lArr1[i4 - 1] = i22;
                    iArrFld[i4 - 1] -= (int)Test.instanceCount;
                }
                Test.instanceCount -= i4;
                Test.instanceCount += Test.instanceCount;
                break;
            case 46:
                if (i6 != 0) {
                }
                break;
            case 42:
                i7 = (int)Test.fFld;
                break;
            case 48:
                Test.instanceCount = Test.instanceCount;
                break;
            case 53:
                d3 += Test.instanceCount;
                break;
            case 61:
                Test.fFld += i4;
                break;
            default:
                iArrFld[i4] -= i6;
            }
        }
        long meth_res = s + i3 + i4 + i5 + i6 + i7 + i22 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=35516, i1=116, i23=-163, i24=-2886, i25=7, i26=-40;
        long l=-41853L, l2=-70L;
        float f=0.541F;
        double d=0.49106;
        boolean b2=false;
        byte by=32;

        for (i = 8; i < 243; ++i) {
            l = 1;
            while (++l < 107) {
                i1 *= (int)f;
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth((int)(((~Math.abs(i)) - (++Test.sFld)) -
                    ((i1 * f) - Math.abs(d))));
                vSmallMeth(iMeth(Test.sFld, iFld) - iFld);
            }
            for (i23 = 4; i23 < 107; i23++) {
                if (b2) continue;
                i25 = 1;
                do {
                    Test.instanceCount = 248;
                    iFld -= (int)Test.fFld;
                    Test.fFld -= (float)d;
                    Test.sFld = (short)l;
                } while (++i25 < 2);
                iFld = i1;
                i26 = 1;
                while (++i26 < 2) {
                    if (b2) {
                        Test.instanceCount = iFld;
                        Test.instanceCount *= -29052;
                    } else if (b2) {
                        Test.instanceCount *= i26;
                        iFld += i24;
                        iFld -= (int)1.666F;
                        Test.instanceCount += (long)27.24644;
                    } else {
                        f = i;
                        iArrFld[i] = i26;
                        Test.instanceCount += (long)d;
                        l2 = l;
                    }
                    Test.sFld = by;
                    if (false) {
                        i24 += (i26 * i26);
                        i1 += i23;
                    } else {
                        i24 += (i26 | i26);
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
