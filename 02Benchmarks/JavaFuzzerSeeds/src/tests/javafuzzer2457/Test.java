package tests.javafuzzer2457;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public float fFld=89.979F;
    public static int iFld=-37406;
    public static volatile byte byFld=-59;
    public static short sFld=-22821;
    public static volatile long lFld=1367642925L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -24.597F);
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i15, int i16) {

        float f1=-54.600F;
        boolean b=true;
        int i17=132, i18=111, i19=53213;
        short sArr[]=new short[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-31316);
        FuzzerUtils.init(lArr1, 43270L);

        if (true) {
            i16 = i15;
            i16 *= (int)f1;
            vMeth_check_sum += l1 + i15 + i16 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i17 + i18 + i19 +
                FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
            return;
        } else if (false) {
            Test.byFld >>= (byte)Test.iFld;
        } else {
            i15 = i16;
            try {
                Test.iArrFld[(i15 >>> 1) % N] = Test.byFld;
                i16 >>= i16;
                Test.iArrFld[(-193 >>> 1) % N] >>= Test.iFld;
                b = b;
            }
            catch (NegativeArraySizeException exc3) {
                for (i17 = 8; i17 < 353; i17++) {
                    if (b) {
                        i19 = 1;
                        do {
                            Test.sFld += (short)(i19 - Test.iFld);
                            i15 *= i17;
                        } while (++i19 < 5);
                    } else if (b) {
                        Test.iArrFld[i17 - 1] = Test.iFld;
                    } else if (b) {
                        l1 ^= i16;
                    } else {
                        sArr[i17 + 1] *= (short)Test.instanceCount;
                    }
                }
            }
            finally {
                lArr1[(-11 >>> 1) % N][(34349 >>> 1) % N] %= 25576;
            }
        }
        vMeth_check_sum += l1 + i15 + i16 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i17 + i18 + i19 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth1(int i11, int i12) {

        int i13=-13, i14=33613, i20=-8;
        double d1=10.32296;
        float f2=0.900F;
        boolean b1=true, bArr[]=new boolean[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr2, 141L);

        for (i13 = 177; i13 > 11; i13--) {
            vMeth(Test.instanceCount, i13, Test.iFld);
            switch ((i13 % 10) + 102) {
            case 102:
                i12 += (int)d1;
                break;
            case 103:
                f2 += (i13 * i13);
                i20 = 1;
                do {
                    bArr[i20 + 1] = b1;
                    Test.fArrFld[i13 + 1] = Test.instanceCount;
                    Test.iFld += i20;
                    lArr2[i20 - 1] = Test.byFld;
                    i14 <<= (int)Test.instanceCount;
                    i12 += Test.iFld;
                    Test.iFld <<= (int)Test.lFld;
                    Test.iArrFld[i20 - 1] = i14;
                } while (++i20 < 10);
                Test.iFld -= (int)Test.instanceCount;
                break;
            case 104:
                i11 -= (int)d1;
                break;
            case 105:
                Test.byFld += (byte)f2;
            case 106:
            case 107:
                i12 = i13;
                break;
            case 108:
                Test.iArrFld[i13] *= i12;
                break;
            case 109:
                d1 = f2;
                break;
            case 110:
                if (b1) break;
                break;
            case 111:
                if (b1) break;
                break;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i20 + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, float f) {

        int i6=75, i7=0, i8=-42, i9=-93, i10=-1, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 19);
        FuzzerUtils.init(lArr, -222839751L);

        try {
            iArr[(38179 >>> 1) % N] *= (int)(++lArr[(Test.iFld >>> 1) % N]);
            iArr[(Test.iFld >>> 1) % N] = iArr[Test.iFld];
            for (i6 = 6 - 400; i6 < 324; i6 += 3) {
                for (i8 = 1; i8 < (4 + 400); ++i8) {
                    Test.iFld = (int)(iArr[i6] + (iArr[i6] += (int)f));
                    iArr = iArr;
                    Test.iFld += (Test.iFld++);
                    i10 = 1;
                    do {
                        Test.iFld += i10;
                        Test.fArrFld[i6 + 1] = f;
                        l = (long)(((f - i9) - i9) / (Math.min(iMeth1(i9, i10), i7) | 1));
                        iArr[i8 + 1] &= (int)Test.lFld;
                        Test.iFld += (i10 ^ i6);
                        Test.iFld *= i9;
                    } while (++i10 < 1);
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc4) {
            Test.byFld = (byte)i6;
        }
        long meth_res = l + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-183, i1=220, i2=2, i3=-20345, i4=-44, i5=9, i21=3, i22=95, iArr1[]=new int[N];
        double d=61.3162;
        boolean b2=false;

        FuzzerUtils.init(iArr1, 6);

        i -= (int)((i >>= (int)(fFld + 54871)) - ((Test.instanceCount - -10) - (--i)));
        for (i1 = 3; i1 < 150; i1++) {
            Test.iFld = Test.byFld;
            for (i3 = 4; 171 > i3; ++i3) {
                fFld = Test.iFld;
                i5 = 1;
                do {
                    i %= (int)(i4 | 1);
                    fFld = (++Test.instanceCount);
                    i = (int)((d - iMeth(Test.lFld, fFld)) - Test.instanceCount);
                    Test.instanceCount <<= -169;
                } while (++i5 < 2);
                Test.iArrFld[i3 - 1] >>= i3;
                fFld += (((i3 * Test.lFld) + i5) - Test.sFld);
                switch (((i1 % 2) * 5) + 112) {
                case 114:
                    i4 = Test.iFld;
                    Test.instanceCount *= i5;
                    for (i21 = 2; i21 > 1; i21--) {
                        fFld += Test.instanceCount;
                        switch ((i3 % 9) + 41) {
                        case 41:
                            if (b2) continue;
                            break;
                        case 42:
                            dArrFld[i3 + 1] = i4;
                            i22 = i1;
                            i22 >>= (int)48L;
                            b2 = b2;
                            break;
                        case 43:
                            Test.sFld += (short)i;
                            break;
                        case 44:
                            Test.iFld *= i22;
                            i2 += (i21 + Test.iFld);
                            i <<= Test.sFld;
                            d *= Test.sFld;
                            break;
                        case 45:
                            Test.lFld += (long)fFld;
                            break;
                        case 46:
                            iArr1[i3 - 1] = (int)Test.lFld;
                            break;
                        case 47:
                            b2 = b2;
                        case 48:
                            Test.iFld -= i2;
                            break;
                        case 49:
                            i2 = 7;
                            break;
                        }
                    }
                case 113:
                    i22 = i4;
                    break;
                default:
                    Test.iFld -= (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
