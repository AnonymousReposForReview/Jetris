package tests.javafuzzer1771;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:13:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-223L;
    public static int iFld=-25;
    public byte byFld=57;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -60);
        FuzzerUtils.init(Test.lArrFld, 831000398L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, float f2) {

        int i6=-42054, i7=44, i8=116, i9=238, i10=7, i11=-207, i12=222;
        double d=0.41276;
        byte by=-59;

        for (i6 = 5; i6 < 135; i6 += 2) {
            for (i8 = 1; i8 < 24; i8++) {
                i9 += i5;
                Test.instanceCount = i9;
                i10 = 1;
                do {
                    Test.iFld /= (int)(i8 | 1);
                    Test.iFld += i9;
                    i5 += i10;
                } while (++i10 < 2);
                Test.iArrFld[i6 + 1] -= i6;
            }
            d -= Test.instanceCount;
            for (i11 = 24; i11 > i6; i11--) {
                Test.instanceCount = Test.instanceCount;
            }
            Test.instanceCount += -21890;
            Test.instanceCount = i11;
        }
        Test.instanceCount = by;
        vMeth1_check_sum += i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11
            + i12 + by;
    }

    public static int iMeth(long l1, int i2, int i3) {

        int i4=36153, i13=-6;
        float f3=19.105F, f4=-84.287F, fArr[]=new float[N];
        byte by1=90;
        long l2=-3203218131L, lArr[]=new long[N];
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.11556);
        FuzzerUtils.init(lArr, -3227659470L);
        FuzzerUtils.init(fArr, 0.203F);

        i4 = 1;
        do {
            dArr[i4] -= -1.521F;
            l1 = i3;
            vMeth1(239, f3);
            for (f4 = 1; f4 < 6; ++f4) {
                i13 += (int)(f4 * f3);
                l1 = Test.instanceCount;
                i2 += (-92 + (f4 * f4));
                by1 += (byte)(f4 * Test.instanceCount);
                Test.instanceCount <<= i3;
                if (b) {
                    switch ((((i13 >>> 1) % 9) * 5) + 125) {
                    case 127:
                        Test.iFld >>= by1;
                        i3 = i4;
                        i3 *= i4;
                        break;
                    case 126:
                        Test.iArrFld[i4 + 1] = i3;
                        break;
                    case 146:
                        i13 >>= Test.iFld;
                        break;
                    case 157:
                        Test.iArrFld[i4 - 1] = (int)Test.instanceCount;
                        break;
                    case 160:
                        lArr[i4] = i13;
                    case 164:
                        Test.iArrFld[i4 + 1] = i2;
                    case 170:
                        i3 = i13;
                        break;
                    case 141:
                        l2 *= 47133;
                    case 128:
                        fArr[i4 - 1] += l1;
                        break;
                    default:
                        Test.iArrFld[(int)(f4)] <<= (int)0L;
                    }
                } else {
                    f3 *= Test.iFld;
                }
            }
        } while (++i4 < 283);
        long meth_res = l1 + i2 + i3 + i4 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i13 + by1 + l2 + (b ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        long l=8L;
        int i=64506, i1=-103, i14=39660, i15=-48280;
        float f1=-112.161F;
        double d1=-2.89445, d2=105.81637;
        boolean b2=false;

        l = (-118 * ((Test.iFld / (Test.iFld | 1)) + (-6 - Math.abs(Test.iFld))));
        for (i = 11; i < 321; i++) {
            i1 += (i ^ Test.iFld);
            f1 -= (Test.iFld--);
            i1 <<= (int)(iMeth(-31537L, 31959, Test.iFld) + f1);
            if (b2) {
                i1 = (int)Test.instanceCount;
                d1 += i;
            } else if (b2) {
                i1 = (int)f1;
                for (d2 = 1; d2 < 5; d2++) {
                    boolean b1=false;
                    if (true) {
                        i1 *= (int)f1;
                        Test.instanceCount += (long)d2;
                        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
                            Double.doubleToLongBits(d2) + i14 + i15 + (b2 ? 1 : 0);
                        return;
                    } else if (b1) {
                        i14 *= i14;
                        Test.iFld *= i15;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i14 + i15 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        float f=94.402F;
        int i17=-37703, i18=-231, i19=-215, i20=-49, i21=87, i22=-2;
        double d3=0.59347, dArr1[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr1, -84.9349);
        FuzzerUtils.init(bArr, false);

        f *= ((++Test.iFld) - ((Test.iFld - Test.iFld) * (Test.iFld += Test.iFld)));
        vMeth();
        for (float f5 : fArrFld) {
            Test.iFld += Test.iFld;
        }
        Test.iFld >>= (int)Test.instanceCount;
        byFld >>>= (byte)Test.iFld;
        Test.iFld -= Test.iFld;
        byFld *= (byte)10L;
        Test.instanceCount += (long)f;
        Test.iArrFld = Test.iArrFld;
        Test.iFld *= (int)Test.instanceCount;
        for (int i16 : Test.iArrFld) {
            boolean b3=true;
            for (i17 = 2; i17 < 63; ++i17) {
                i16 = (int)d3;
                f += i17;
            }
            Test.iFld *= i17;
            dArr1[(Test.iFld >>> 1) % N] = 2.98F;
            switch ((((i17 >>> 1) % 6) * 5) + 11) {
            case 20:
                for (i19 = 2; i19 < 63; i19++) {
                    i18 += (i19 * i19);
                    Test.iArrFld[i19 - 1] += (int)f;
                }
                i16 >>= (int)Test.instanceCount;
                fArrFld[(i19 >>> 1) % N] += Test.iFld;
                break;
            case 37:
                bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                Test.instanceCount -= 11;
                if (b3) {
                    i18 >>= (int)Test.instanceCount;
                    for (i21 = 1; i21 < 63; i21 += 3) {
                        short s=22294;
                        Test.lArrFld[i21 + 1] -= i20;
                        s *= (short)Test.instanceCount;
                    }
                } else if (b3) {
                    f = Test.instanceCount;
                } else if (b3) {
                    f += i16;
                } else {
                    i22 = i18;
                }
                break;
            case 13:
                i22 = i18;
                break;
            case 39:
                Test.instanceCount <<= Test.instanceCount;
                break;
            case 34:
                i18 = i19;
            case 26:
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
