package tests.javafuzzer148;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:03:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63710L;
    public static int iFld=0;
    public static float fFld=1.552F;
    public long lArrFld[][]=new long[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, float f1) {

        int i3=40872, i4=-7, i5=-32014, i6=-13, i7=20, iArr[][]=new int[N][N];
        byte by=-17;

        FuzzerUtils.init(iArr, 10292);

        iArr[(Test.iFld >>> 1) % N][(62623 >>> 1) % N] -= Test.iFld;
        for (i3 = 1; i3 < 169; ++i3) {
            i5 = 9;
            do {
                i2 += (i5 * i2);
                i2 += i5;
                i4 += i5;
            } while (--i5 > 0);
            for (i6 = 1; i6 < 9; ++i6) {
                switch ((i3 % 2) + 89) {
                case 89:
                    switch ((i6 % 2) + 35) {
                    case 35:
                        f1 = by;
                        try {
                            i7 = (-147 % i7);
                            i4 = (i3 / iArr[i3 + 1][i3 - 1]);
                            Test.iFld = (i6 / i5);
                        } catch (ArithmeticException a_e) {}
                        i2 = i7;
                        Test.instanceCount += (((i6 * i5) + f1) - Test.instanceCount);
                    case 36:
                        i2 += i4;
                    default:
                        iArr[i6 + 1] = FuzzerUtils.int1array(N, (int)-240);
                    }
                    break;
                case 90:
                    iArr[(196 >>> 1) % N][i3 - 1] >>= -42064;
                    break;
                default:
                    Test.iFld = -3;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d1, float f, int i1) {

        int i8=-5, i9=-11, i10=1556, i11=-171, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 11);

        i1 *= (int)(iMeth(i1, f) * d1);
        i8 = 1;
        while (++i8 < 334) {
            Test.iFld -= Test.iFld;
            try {
                iArr1[i8] = (1744391061 % i1);
                Test.iFld = (Test.iFld / 56211);
                Test.iFld = (-34210 % i8);
            } catch (ArithmeticException a_e) {}
            d1 -= 0.553F;
            for (i9 = 5; i9 > i8; i9 -= 3) {
                byte by1=-55;
                Test.instanceCount += Test.iFld;
                Test.iFld += (i9 * i9);
                d1 -= Test.instanceCount;
                f -= by1;
                Test.instanceCount += -27;
                Test.iFld += (int)Test.instanceCount;
            }
            if (true) continue;
        }
        i1 = i11;
        Test.instanceCount = i10;
        vMeth1_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i1 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        double d=2.82683, dArr[]=new double[N];
        int i=-143, i12=-72, iArr2[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(dArr, 126.23214);
        FuzzerUtils.init(iArr2, 8098);

        Test.iFld -= (int)(d *= (dArr[(Test.iFld >>> 1) % N]--));
        if (b) {
            i = 1;
            do {
                Test.instanceCount += (i ^ Test.iFld);
                vMeth1(2.18025, Test.fFld, 6);
                if (true) {
                    Test.iFld = (int)Test.instanceCount;
                } else if (false) {
                    Test.instanceCount -= (long)d;
                    Test.iFld <<= Test.iFld;
                    Test.iFld = Test.iFld;
                }
                i12 = 1;
                do {
                    Test.iFld = 0;
                } while (++i12 < 12);
                iArr2[i - 1] = Test.iFld;
                Test.instanceCount += (long)d;
            } while (++i < 133);
            vMeth_check_sum += Double.doubleToLongBits(d) + i + i12 + (b ? 1 : 0) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
            return;
        }
        iArr2[(i >>> 1) % N] -= (int)d;
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i12 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        double d2=-96.124153;
        short s=-30723;
        byte by2=-42;
        boolean b1=true;
        int iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -2);

        vMeth();
        Test.instanceCount = (long)97.49938;
        d2 += -100.963F;
        lArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += Test.iFld;
        s = (short)Test.iFld;
        iArr3[(Test.iFld >>> 1) % N] >>>= by2;
        b1 = b1;
        by2 += (byte)-184;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
