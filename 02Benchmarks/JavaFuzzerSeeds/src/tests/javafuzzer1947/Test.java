package tests.javafuzzer1947;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:19:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-944186204066167770L;
    public double dFld=-77.72242;
    public static float fFld=1.4F;
    public static byte byFld=-42;
    public static int iFld=-9;
    public boolean bFld=true;
    public int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8, int i9) {

        int i10=25112, i11=14, i12=239, i13=8, i14=24602, i15=6;
        short s=22259;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 33185L);

        i9 = i8;
        Test.fFld *= i7;
        i8 ^= i7;
        i9 >>= (int)Test.instanceCount;
        for (i10 = 8; i10 < 134; ++i10) {
            i9 += i10;
            for (i12 = 1; i12 < 12; i12++) {
                Test.fFld += Test.fFld;
                i11 += -183;
                i11 -= i7;
                Test.instanceCount -= -3;
            }
            i7 = Test.byFld;
            for (i14 = 1; i14 < 12; i14++) {
                Test.instanceCount >>= i15;
                lArr1[i10] += s;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l) {

        int i6=12, i16=10, i17=14, i18=-52960, i19=-87, i20=8, iArr[][]=new int[N][N];
        long l1=235L;
        short s1=17569;
        double d1=0.11190;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(fArr, 1.12F);

        dFld += (-(1.671F + (++lArrFld[(i6 >>> 1) % N])));
        i6 /= (int)(l1 | 1);
        i6 -= iMeth(i6, i6, i6);
        for (i16 = 1; 141 > i16; ++i16) {
            for (i18 = 1; i18 < 11; i18++) {
                s1 += (short)73;
                for (d1 = 1; d1 < 2; d1++) {
                    Test.byFld = (byte)i17;
                    iArr[i16 + 1][i16 + 1] <<= i16;
                    lArrFld[i16] >>>= i16;
                    fArr[i18] -= l1;
                    l1 >>= i19;
                    i17 >>= i6;
                    i6 &= i20;
                    Test.fFld *= i19;
                }
            }
        }
        vMeth_check_sum += l + i6 + l1 + i16 + i17 + i18 + i19 + s1 + Double.doubleToLongBits(d1) + i20 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth(int i1, float f, double d) {

        int i2=-53614, i3=-15054, i4=-29676, i5=-32453, i21=10, i22=-197;
        short s2=9337;

        iArrFld[(-45 >>> 1) % N] = (int)Math.abs(Test.instanceCount);
        for (i2 = 202; i2 > 7; i2 -= 3) {
            i1 >>= i1;
            for (i4 = 1; i4 < 24; i4++) {
                vMeth(-8L);
                i3 = (int)-100.79902;
                i5 = i5;
                Test.instanceCount |= 137;
                f += (((i4 * Test.fFld) + i4) - s2);
                for (i21 = 1; i21 < 2; ++i21) {
                    i1 = -224;
                    i5 -= i3;
                    Test.instanceCount = i1;
                    i5 <<= Test.byFld;
                    Test.instanceCount += i22;
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + s2 + i21 + i22;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i23=-2, i24=24153, i25=-21380;
        short s3=17567;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -4118182466672646767L);

        i <<= (i--);
        i = (int)(lArr[(i >>> 1) % N][(i >>> 1) % N] *= lMeth(17, Test.fFld, dFld));
        Test.instanceCount >>>= s3;
        for (i23 = 3; i23 < 180; ++i23) {
            i25 = 1;
            while (++i25 < 142) {
                try {
                    i = (i % -26);
                    i = (4440 % i);
                    iArrFld[i23 + 1] = (Test.iFld % i25);
                } catch (ArithmeticException a_e) {}
                Test.iFld ^= i24;
                switch ((i25 % 9) + 28) {
                case 28:
                    fArrFld[i25 + 1] += i23;
                case 29:
                    Test.instanceCount = i;
                    i24 ^= Test.iFld;
                    break;
                case 30:
                    dFld += Test.instanceCount;
                    Test.iFld += i25;
                    i24 *= (int)Test.fFld;
                    break;
                case 31:
                    switch (((i >>> 1) % 3) + 122) {
                    case 122:
                        iArrFld[i25] -= (int)37.68927;
                        Test.iFld *= (int)Test.fFld;
                        break;
                    case 123:
                        i24 += (i25 + i25);
                        break;
                    case 124:
                        switch ((((-168 >>> 1) % 2) * 5) + 35) {
                        case 37:
                            Test.instanceCount += (((i25 * i24) + Test.instanceCount) - i23);
                            Test.instanceCount += (((i25 * Test.instanceCount) + Test.instanceCount) -
                                Test.instanceCount);
                            s3 += (short)(((i25 * Test.fFld) + i24) - i25);
                            s3 = (short)Test.fFld;
                            break;
                        case 40:
                            i *= i;
                            Test.iFld = i;
                            break;
                        default:
                            if (bFld) continue;
                        }
                        i += i24;
                    default:
                        try {
                            i = (i23 / -63618);
                            Test.iFld = (i23 / 201);
                            i24 = (iArrFld[i23] % iArrFld[i25]);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld -= i;
                        Test.byFld += (byte)i;
                    }
                    break;
                case 32:
                    i = i25;
                    break;
                case 33:
                case 34:
                    i24 |= i23;
                    break;
                case 35:
                    i24 += s3;
                    break;
                case 36:
                    Test.instanceCount = i;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
