package tests.javafuzzer2279;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:17:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public int iFld=-11269;
    public static double dFld=1.81990;
    public static volatile byte byFld=-59;
    public static boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -252);
        FuzzerUtils.init(Test.fArrFld, -87.932F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2, float f1, long l3) {

        int i6=-126, i7=-56824, i8=-47734, i9=31757;
        boolean b=false;
        double d=48.117718;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4581079943503762029L);

        Test.iArrFld[(57 >>> 1) % N] &= (int)l2;
        i6 += (int)Test.dFld;
        l2 += i6;
        for (i7 = 3; i7 < 264; ++i7) {
            if (b) continue;
            l2 <<= i7;
            d = 6;
            while ((d -= 2) > 0) {
                i6 *= (int)f1;
                l3 -= (long)f1;
                if (b) {
                    lArr[(int)(d - 1)] = i7;
                    i9 = 1;
                    while (++i9 < 2) {
                        f1 = Test.byFld;
                    }
                    l3 = l3;
                } else {
                    Test.instanceCount = -12;
                }
            }
        }
        vMeth_check_sum += l2 + Float.floatToIntBits(f1) + l3 + i6 + i7 + i8 + (b ? 1 : 0) + Double.doubleToLongBits(d)
            + i9 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l1, int i3) {

        int i4=-21962, i5=0, i10=-31424, i11=-80, i12=249, i13=42156, iArr2[][]=new int[N][N];
        float f2=0.471F, fArr[]=new float[N];
        boolean b1=true;
        long l4=6L;

        FuzzerUtils.init(fArr, -15.617F);
        FuzzerUtils.init(iArr2, 28415);

        for (i4 = 13; i4 < 233; ++i4) {
            vMeth(l1, f2, 34L);
            i5 -= i4;
            if (b1) continue;
            i10 = i5;
            Test.instanceCount += l1;
            fArr = Test.fArrFld;
            i3 += (i4 - i5);
            for (i11 = i4; i11 < 7; i11++) {
                Test.iArrFld[i4 - 1] *= 221;
                Test.instanceCount >>= i10;
                i10 *= (int)Test.dFld;
                for (l4 = 1; l4 > i11; l4 -= 3) {
                    i10 = i4;
                    try {
                        i10 = (45 % i4);
                        i5 = (2203 % iArr2[i4 - 1][(i10 >>> 1) % N]);
                        i13 = (71 / i3);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = l1 + i3 + i4 + i5 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i10 + i11 + i12 + l4 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, float f, long l) {

        int i14=154, i15=-12742, i16=-14793, i17=-14, i19=-48523, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 9);

        iArr1[(i2 >>> 1) % N] -= iMeth(l, i2);
        for (i14 = 8; 307 > i14; i14++) {
            l = l;
            i2 += i14;
            iArr1[i14] *= (int)Test.instanceCount;
            switch (((-5 >>> 1) % 6) + 126) {
            case 126:
                i15 -= i15;
                i15 += (int)(57982L + (i14 * i14));
                break;
            case 127:
                Test.instanceCount *= (long)f;
                break;
            case 128:
                i16 = 1;
                do {
                    Test.instanceCount <<= Test.instanceCount;
                    i17 = -15286;
                    Test.dFld = i16;
                } while (++i16 < 6);
                Test.byFld = (byte)i2;
                i15 *= (int)f;
                break;
            case 129:
                i19 <<= i14;
                break;
            case 130:
                i19 *= i19;
            case 131:
                if (i19 != 0) {
                }
                break;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + l + i14 + i15 + i16 + i17 + i19 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=39802, i1=11, i20=31787, i21=-4, i22=18031, i23=-4, i24=-96, i25=-14308, i26=-9326, iArr[]=new int[N];
        float f3=-2.600F;
        long l5=4229686139706904238L;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -197);
        FuzzerUtils.init(dArr, -2.102571);

        iArr[(iFld >>> 1) % N] = Math.max(iFld, 48185);
        for (i = 6; i < 184; ++i) {
            short s=12662;
            i1 = (int)((lMeth(i1, f3, Test.instanceCount) - Test.instanceCount) + f3);
            iFld += (i * i);
            Test.dFld *= s;
            dArr[i + 1] -= Test.dFld;
        }
        i20 = 1;
        do {
            Test.dFld += i;
            if (Test.bFld) {
                for (i21 = 1; i21 < 73; ++i21) {
                    i1 *= (int)l5;
                    l5 += (i21 * i22);
                    iFld *= i21;
                    iArr[i21] += i20;
                    i23 = 1;
                    while (++i23 < 2) {
                        boolean b2=false;
                        iFld += i23;
                        if (true) break;
                        i1 &= i22;
                        if (b2) continue;
                        if (b2) continue;
                    }
                    i1 += (int)-59.927F;
                }
                i22 = i21;
            } else {
                for (i24 = i20; i24 < 73; ++i24) {
                    i25 += i21;
                }
            }
        } while (++i20 < 344);
        Test.dFld += iFld;
        i26 = 1;
        do {
            switch ((i26 % 10) + 100) {
            case 100:
                if (Test.bFld) {
                    f3 -= Test.instanceCount;
                    i1 += (((i26 * i26) + f3) - i22);
                }
            case 101:
                Test.dFld *= i;
                break;
            case 102:
                iArr[i26] = i22;
                break;
            case 103:
            case 104:
            case 105:
                Test.instanceCount = i22;
                break;
            case 106:
                iFld -= (int)8670532545909293266L;
            case 107:
                Test.instanceCount = l5;
                break;
            case 108:
                Test.instanceCount = -53;
                break;
            case 109:
                f3 += i;
                break;
            }
        } while ((i26 += 3) < 138);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
