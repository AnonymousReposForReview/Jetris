package tests.javafuzzer346;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:28:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static volatile byte byFld=-29;
    public static int iFld=58399;
    public static int iFld1=83;
    public static double dFld=-64.18955;
    public float fFld=0.724F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 73);
        FuzzerUtils.init(Test.sArrFld, (short)-23224);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=6, i5=-253;
        long l3=-7227997824238353028L;
        float f=0.843F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 77.194F);

        Test.iFld -= (int)189L;
        for (int i3 : Test.iArrFld) {
            Test.iFld += i3;
            Test.iFld *= (int)Test.instanceCount;
            if (Test.iFld != 0) {
            }
            i4 = 4;
            do {
                l3 = 1;
                do {
                    i5 *= (int)f;
                    switch (((i4 % 10) * 5) + 97) {
                    case 142:
                        i3 = i4;
                        break;
                    case 131:
                        i5 = Test.iFld;
                        break;
                    case 111:
                        fArr[i4][(int)(l3)] = -128;
                        i5 <<= Test.iFld;
                        break;
                    case 101:
                        try {
                            i3 = (1798622258 % i3);
                            i5 = (Test.iFld % Test.iFld);
                            Test.iArrFld[(int)(l3)] = (872869816 / Test.iFld1);
                        } catch (ArithmeticException a_e) {}
                        i5 = i4;
                        break;
                    case 145:
                        Test.instanceCount <<= -8681490356824744588L;
                        break;
                    case 114:
                        Test.iFld1 = -27666;
                        break;
                    case 143:
                        Test.iFld1 += (int)(l3 * l3);
                        break;
                    case 109:
                        Test.iFld1 ^= Test.iFld1;
                        break;
                    case 127:
                        Test.iArrFld[(int)(l3 - 1)] += Test.iFld1;
                    case 104:
                        fArr[i4 - 1][i4] = Test.iFld;
                        break;
                    default:
                        Test.iArrFld[(int)(l3)] *= i5;
                    }
                } while (++l3 < 2);
            } while ((i4 -= 2) > 0);
        }
        long meth_res = i4 + l3 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(boolean b, long l2) {

        float f1=-109.730F, fArr1[]=new float[N];
        int i6=-9, i7=11, i8=-9, i9=-17, i10=128, i11=-54;
        double d=-103.128294;

        FuzzerUtils.init(fArr1, -119.788F);

        Test.iFld *= (int)((Test.iFld <<= (int)lMeth()) - l2);
        f1 = Test.iFld1;
        for (i6 = 3; i6 < 201; ++i6) {
            switch ((((i7 >>> 1) % 3) * 5) + 18) {
            case 30:
            case 31:
                Test.iFld += (int)(3401901368L + (i6 * i6));
                Test.iArrFld = Test.iArrFld;
                f1 *= Test.iFld1;
                for (i8 = 1; i8 < 8; i8++) {
                    Test.instanceCount += (i8 ^ (long)f1);
                }
                break;
            case 19:
                for (i10 = i6; i10 < 8; ++i10) {
                    Test.iFld ^= (int)Test.instanceCount;
                    Test.iFld1 -= (int)d;
                    fArr1[i10 - 1] = 114;
                }
                break;
            }
            i11 &= i8;
            i9 += (-98 + (i6 * i6));
        }
        vMeth1_check_sum += (b ? 1 : 0) + l2 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void vMeth(long l, long l1) {

        int i2=13567, i12=-61032, i13=7, i14=10;
        boolean b1=true;

        l1 /= (i2 | 1);
        vMeth1(b1, l);
        Test.dFld *= Test.iFld1;
        Test.iArrFld[(Test.iFld1 >>> 1) % N] = i2;
        i12 = 1;
        while (++i12 < 161) {
            Test.iFld1 += (i12 + l1);
            i2 = (int)Test.instanceCount;
            for (i13 = i12; i13 < 10; ++i13) {
                if (b1) {
                    switch ((i12 % 7) + 39) {
                    case 39:
                        if (b1) continue;
                        break;
                    case 40:
                        fFld *= l;
                        i2 += (i13 * i13);
                        i2 <<= Test.iFld1;
                        i14 += -8;
                        break;
                    case 41:
                        l1 = i2;
                    case 42:
                        Test.iArrFld[i12 - 1] = Test.iFld1;
                        break;
                    case 43:
                        Test.iFld += i13;
                        break;
                    case 44:
                        Test.iFld += (((i13 * Test.iFld1) + i14) - l);
                        break;
                    case 45:
                        if (true) break;
                        break;
                    }
                } else if (b1) {
                    Test.iFld1 += (i13 * i13);
                } else {
                    fFld = -53450;
                }
            }
        }
        vMeth_check_sum += l + l1 + i2 + (b1 ? 1 : 0) + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i=-47464, i1=-1980, i15=12, i16=217, i17=66, i18=-203, i19=-12, iArr[]=new int[N];
        short s=18861;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -71);
        FuzzerUtils.init(lArr, -1830452643L);

        iArr[(i >>> 1) % N] ^= (int)Test.instanceCount;
        Test.byFld += (byte)iArr[(i >>> 1) % N];
        lArr[(i >>> 1) % N] += i;
        i *= (int)(((i + Test.byFld) - (-(i + Test.instanceCount))) + Test.instanceCount);
        i1 = 1;
        do {
            vMeth(Test.instanceCount, Test.instanceCount);
            for (i15 = i1; 114 > i15; i15++) {
                for (i17 = i1; i17 < 1; ++i17) {
                    iArr = Test.iArrFld;
                    Test.iFld1 -= Test.iFld;
                    i18 = (int)Test.instanceCount;
                    switch ((i17 % 2) + 62) {
                    case 62:
                        if (Test.bFld) break;
                        i16 -= (int)Test.instanceCount;
                        i = i16;
                        break;
                    case 63:
                    default:
                        Test.byFld += (byte)47960;
                    }
                    Test.iArrFld[i17 - 1] = i15;
                    i = -6;
                    Test.iFld1 = i17;
                    s += (short)2;
                }
                i19 = 1;
                do {
                    if (Test.bFld) {
                        fFld += (((i19 * i17) + i17) - i15);
                    } else {
                        Test.iFld += i19;
                        Test.iFld += (i19 ^ Test.instanceCount);
                    }
                    switch (((i19 % 5) * 5) + 15) {
                    case 28:
                        Test.iFld += Test.iFld1;
                    case 16:
                        i18 += (i19 * i17);
                        i18 -= i;
                        Test.instanceCount -= -5L;
                        break;
                    case 24:
                        Test.dFld *= -39;
                        break;
                    case 37:
                        Test.sArrFld[i1 - 1] += (short)i19;
                        break;
                    case 30:
                        dArrFld[i15] = Test.instanceCount;
                    }
                } while (++i19 < 1);
            }
        } while (++i1 < 221);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
