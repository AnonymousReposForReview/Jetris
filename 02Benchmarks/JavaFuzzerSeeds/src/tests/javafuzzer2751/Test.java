package tests.javafuzzer2751;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=203L;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 117.96531);
        FuzzerUtils.init(Test.iArrFld, 177);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        long l1=0L;
        int i7=-5, i8=-229, i9=20706, i10=224, i11=7, i12=-29247;
        float f1=1.632F;
        short s=15978;
        boolean b=false;

        for (l1 = 13; l1 < 299; l1++) {
            double d=39.29172;
            i7 <<= (int)Test.instanceCount;
            i7 = (int)d;
            i8 = 1;
            do {
                Test.dArrFld[(-14 >>> 1) % N] -= i8;
            } while (++i8 < 6);
            for (i9 = 1; i9 < 6; i9++) {
                for (i11 = i9; i11 < 2; ++i11) {
                    if (i9 != 0) {
                    }
                    i12 += i8;
                    if (b) {
                        i12 = i10;
                        i12 += (((i11 * l1) + l1) - f1);
                        i10 -= s;
                        i12 += -2599;
                    } else if (b) {
                        i12 = i7;
                    } else {
                        d += i10;
                    }
                }
            }
        }
        long meth_res = l1 + i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + s + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i1, byte by, long l) {

        int i2=68, i3=32, i4=0, i5=-47200, i6=-45, iArr[]=new int[N];
        float f=0.245F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1164943061L);
        FuzzerUtils.init(iArr, 16);

        i2 = 1;
        while (++i2 < 154) {
            i1 += (32721 + (i2 * i2));
            for (i3 = 10; i3 > 1; i3--) {
                i1 += (((i3 * i2) + f) - i1);
                i1 = (int)(lArr[i2 + 1] = (i4--));
                for (i5 = i3; i5 < 2; i5++) {
                    i4 &= (int)(iMeth() * f);
                    iArr[i5] = i2;
                    i1 += (i5 * i5);
                    f = i4;
                    f = Test.instanceCount;
                }
                try {
                    i4 = (iArr[i2] % 142);
                    i4 = (i3 % -63156);
                    i4 = (i4 / i1);
                } catch (ArithmeticException a_e) {}
                by ^= (byte)i5;
            }
            l -= i6;
        }
        i4 += i2;
        long meth_res = i1 + by + l + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i) {

        byte by1=2;
        float f2=20.1010F;
        int i14=-172, i15=6459, i16=-24, iArr1[]=new int[N];
        short s1=-4012;

        FuzzerUtils.init(iArr1, 13);

        Test.instanceCount = (long)((fMeth(i, by1, Test.instanceCount) + i) % (i | 1));
        iArr1[(32076 >>> 1) % N] -= (int)f2;
        if (false) {
            i = i;
            for (int i13 : iArr1) {
                i13 += i;
                for (i14 = 1; 4 > i14; ++i14) {
                    i16 = 1;
                    do {
                        i += i16;
                        s1 -= (short)-8;
                    } while (++i16 < 2);
                    i *= (int)f2;
                    i = i;
                    i15 = i14;
                    i13 += (((i14 * f2) + i14) - Test.instanceCount);
                    i += (((i14 * i) + i16) - i16);
                }
            }
        } else {
            f2 = -26146L;
        }
        vMeth_check_sum += i + by1 + Float.floatToIntBits(f2) + i14 + i15 + i16 + s1 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i17=-13, i18=140, i19=7, i20=248, i21=127, i22=-70, i23=-20885, i24=-167, i25=14164;
        float f3=-1.693F;
        short s2=-13107;
        double d2=-18.115568;
        boolean b1=false;
        byte by2=-79;

        vMeth(i17);
        i17 ^= i17;
        for (i18 = 12; i18 < 224; i18++) {
            i19 += (int)f3;
            Test.instanceCount += i18;
            f3 -= s2;
            f3 += (float)1.86299;
            for (i20 = 2; i20 < 118; ++i20) {
                for (i22 = 1; 2 > i22; ++i22) {
                    d2 = Test.instanceCount;
                    Test.instanceCount = i22;
                    i19 >>= -286;
                }
            }
            Test.instanceCount = i18;
            for (i24 = 4; 118 > i24; i24++) {
                if (b1) {
                    i25 >>= (int)Test.instanceCount;
                }
                i23 = i18;
                switch (((i25 >>> 1) % 3) + 38) {
                case 38:
                    i19 &= by2;
                    i23 += (i24 * i24);
                    break;
                case 39:
                    i21 = (int)d2;
                case 40:
                    f3 *= i22;
                    Test.iArrFld = Test.iArrFld;
                    b1 = b1;
                    try {
                        i25 = (i18 % i21);
                        i25 = (-48778 % Test.iArrFld[i24 - 1][i24]);
                        i21 = (i20 / i20);
                    } catch (ArithmeticException a_e) {}
                }
                f3 *= Test.instanceCount;
                try {
                    i19 = (i20 / i21);
                    i17 = (20457 % i21);
                    i23 = (i22 % Test.iArrFld[i24 + 1][i18 - 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (i24 + i18);
                i19 += (i24 * i25);
                i19 *= i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
