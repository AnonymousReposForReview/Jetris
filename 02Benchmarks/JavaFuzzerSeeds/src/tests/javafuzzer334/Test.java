package tests.javafuzzer334;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:05:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static volatile int iFld=12;
    public static byte byFld=-59;
    public static volatile float fFld=-1.243F;
    public static double dFld=-119.74880;
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by) {

        int i3=-172, i4=-11, i5=5, i6=37817, i7=-43309;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -75.578F);

        for (i3 = 10; 248 > i3; ++i3) {
            i5 = i3;
            try {
                i5 = (i4 / Test.iFld);
                i4 = (6 / i3);
                Test.iFld = (76240781 % i3);
            } catch (ArithmeticException a_e) {}
            switch (((i3 % 2) * 5) + 20) {
            case 30:
                i5 = i5;
            case 26:
                for (i6 = i3; i6 < 7; i6++) {
                    Test.iFld *= Test.iFld;
                    i4 += (i6 + Test.instanceCount);
                    fArr[i3] += Test.instanceCount;
                    i5 += i6;
                    Test.iFld += (239 + (i6 * i6));
                    Test.iArrFld[i6] <<= Test.iFld;
                    i4 = Test.iFld;
                    Test.instanceCount |= 3787717926L;
                    Test.iFld += (11 + (i6 * i6));
                }
            default:
                i7 -= (int)1.368F;
            }
        }
        vMeth2_check_sum += by + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l, short s, int i2) {

        int i8=54783, i9=-4, i10=4, i11=-6, i12=23, i13=69;
        double d=97.92020;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, -35.476F);

        vMeth2(Test.byFld);
        i8 = 1;
        while (++i8 < 229) {
            i2 <<= i2;
            for (i9 = 1; i9 < 7; ++i9) {
                d *= Test.iFld;
                Test.instanceCount <<= Test.iFld;
                Test.iArrFld[i8 + 1] += i2;
                Test.iFld = i10;
                for (i11 = 1; i11 < 2; i11++) {
                    Test.iFld = (int)-1068977274L;
                    Test.fFld = i13;
                }
                fArr1[i9][i9] += i11;
            }
            i13 = 67;
            Test.fFld += (float)d;
            i10 = 27;
        }
        vMeth1_check_sum += l + s + i2 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth() {

        short s1=207;
        int i14=-8, i15=-9453, i16=-182, i17=-128, i18=-43135, i19=-13;
        boolean b=true;
        byte byArr[]=new byte[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(byArr, (byte)48);
        FuzzerUtils.init(fArr2, 1.806F);

        vMeth1(Test.instanceCount, s1, Test.iFld);
        Test.iArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        for (i14 = 11; 195 > i14; i14++) {
            i15 = i15;
            for (i16 = 1; 9 > i16; i16++) {
                i15 += (-1 + (i16 * i16));
                Test.iArrFld = Test.iArrFld;
                for (i18 = i16; i18 < 2; i18 += 2) {
                    Test.bArrFld[i14 - 1] = b;
                    Test.fFld %= (Test.instanceCount | 1);
                    if (i18 != 0) {
                        vMeth_check_sum += s1 + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
                        return;
                    }
                    switch (((-3 >>> 1) % 1) + 10) {
                    case 10:
                        byArr[(i16 >>> 1) % N] -= (byte)Test.dFld;
                    default:
                        Test.iArrFld[i16 + 1] = i14;
                        fArr2[i18 + 1] -= i14;
                    }
                }
            }
        }
        vMeth_check_sum += s1 + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {

        int i=7896, i1=-15, i20=54654, i21=0, i22=-5, i23=105, i24=-1, i25=14, i26=3, i27=30391;
        short s2=5425;
        boolean b1=true;

        i = 1;
        do {
            i1 += (((i * i1) + i) - i);
            vMeth();
            Test.instanceCount += (14L + (i * i));
            Test.iFld = (int)Test.instanceCount;
            Test.iFld %= (int)(s2 | 1);
            for (i20 = 3; i20 < 150; ++i20) {
                for (i22 = 1; i22 < 2; i22++) {
                    i21 |= i1;
                    Test.instanceCount += (-51 + (i22 * i22));
                    i1 += i22;
                }
                Test.iFld += (((i20 * Test.iFld) + i21) - i1);
                for (i24 = 1; i24 < 2; i24 += 3) {
                    Test.iFld += (i24 * i24);
                    i25 <<= 7;
                }
                Test.instanceCount += i20;
                i1 -= i;
                for (i26 = 2; i26 > 1; i26 -= 3) {
                    if (b1) {
                        s2 &= (short)i25;
                    }
                    i23 = (int)-3462409721L;
                    Test.instanceCount += (i26 * i26);
                    i23 += (int)20.850F;
                    i21 = (int)Test.instanceCount;
                    Test.instanceCount -= i23;
                    Test.byFld += (byte)(18445 + (i26 * i26));
                }
                i21 = i27;
                Test.iFld += (i20 * Test.byFld);
            }
            i1 = (int)Test.instanceCount;
            Test.instanceCount += Test.iFld;
        } while (++i < 167);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
