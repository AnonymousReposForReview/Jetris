package tests.javafuzzer724;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:36:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static float fFld=1.911F;
    public static int iFld=59649;
    public static short sFld=-15499;
    public volatile boolean bFld=true;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -36.5961);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12) {

        double d1=54.61617;
        float f2=-4.305F, f3=0.370F;
        int i13=5, i14=6;
        short s=-28333;

        Test.instanceCount = (long)d1;
        Test.iFld = i12;
        f2 = 1;
        do {
            for (i13 = (int)(f2); i13 < 5; i13++) {
                i14 = 9;
                f3 = 1;
                while (++f3 < 1) {
                    i14 += (int)f3;
                    i14 -= -34335;
                    Test.instanceCount = (long)d1;
                    switch (((i13 % 3) * 5) + 24) {
                    case 33:
                        Test.dArrFld[i13 - 1] = i14;
                        s += (short)(0.471F + (f3 * f3));
                    case 37:
                        Test.instanceCount = i14;
                        Test.iFld = Test.iFld;
                        i14 = i12;
                        break;
                    case 31:
                        i14 += (int)(99.361F + (f3 * f3));
                    }
                }
            }
        } while (++f2 < 328);
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i13 + i14 +
            Float.floatToIntBits(f3) + s;
    }

    public static int iMeth(int i11) {

        int i15=35927, i16=8, i17=-13, i18=-240, i19=-14, i20=8, i21=-27493;
        short s1=16531;
        long l=-39951L, lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 9L);

        vMeth1(i11);
        for (i15 = 10; i15 < 227; i15++) {
            i11 -= i11;
            for (i17 = i15; i17 < 7; i17++) {
                Test.instanceCount <<= Test.instanceCount;
                i18 *= Test.iFld;
                i18 = 61289;
            }
        }
        s1 = (short)Test.instanceCount;
        s1 += (short)Test.fFld;
        i19 = 1;
        while (++i19 < 201) {
            l = 1;
            while (++l < 8) {
                for (i20 = i19; i20 < 1; ++i20) {
                    i21 += i16;
                    lArr1[i19 + 1][i20] = Test.instanceCount;
                    i18 ^= i15;
                }
            }
        }
        long meth_res = i11 + i15 + i16 + i17 + i18 + s1 + i19 + l + i20 + i21 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=-122.434F;
        int i6=-6, i7=-16336, i8=80, i9=111, i10=27262, iArr1[][]=new int[N][N];
        boolean b=false;
        long l1=-3604978326L;

        FuzzerUtils.init(iArr1, -64);

        Test.iFld += (--Test.iFld);
        iArr1[(Test.iFld >>> 1) % N] = (iArr1[(Test.iFld >>> 1) % N] = (iArr1[(Test.iFld >>> 1) % N] = iArr1[(Test.iFld
            >>> 1) % N]));
        for (f1 = 1; 359 > f1; f1++) {
            for (i7 = (int)(f1); i7 < 5; i7 += 3) {
                for (i9 = 1; i9 < 1; i9++) {
                    Test.iFld += (i9 ^ (long)Test.fFld);
                    iMeth(6);
                    switch ((int)((f1 % 7) + 84)) {
                    case 84:
                        i6 += i6;
                        i8 -= i7;
                        i10 <<= Test.sFld;
                        Test.instanceCount = i6;
                    case 85:
                        if (b) break;
                        iArr1[i9][(int)(f1 + 1)] <<= i7;
                        i6 -= 18;
                        break;
                    case 86:
                        if (Test.iFld != 0) {
                            vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + l1 +
                                FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        break;
                    case 87:
                        iArr1[i9 + 1][i9 + 1] = (int)l1;
                    case 88:
                        Test.sFld += (short)(-33165 + (i9 * i9));
                        break;
                    case 89:
                        i10 += Test.iFld;
                        break;
                    case 90:
                        i10 = i7;
                        break;
                    default:
                        i6 <<= Test.iFld;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=104, i2=11, i3=11, i4=31186, i5=163, i22=-68, i23=31350, i24=-178, iArr[]=new int[N];
        float f=2.774F;
        double d=39.32609;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(iArr, 227);

        for (i = 2; i < 387; ++i) {
            for (i2 = i; i2 < 65; i2++) {
                i1 -= (int)lArr[i2];
                Test.fFld += (((i2 * i3) + i3) - f);
                i1 = Math.max(iArr[i + 1]--, -(-Integer.reverseBytes(9)));
                for (i4 = 1; i4 < 1; ++i4) {
                    i5 += (int)(((i - d) - iArr[i4 + 1]) - ((++i1) * (i3 - i3)));
                    f *= (3261492163283112784L + ((++i5) + (Test.fFld - i)));
                }
                vMeth();
                i1 = (int)117L;
                switch (((Test.iFld >>> 1) % 7) + 72) {
                case 72:
                    Test.fFld *= 4;
                    break;
                case 73:
                    iArr[i] <<= (int)Test.instanceCount;
                    Test.fFld = Test.instanceCount;
                    i22 = 1;
                    while (++i22 < 1) {
                        i1 >>= Test.sFld;
                        i3 <<= i3;
                        i5 += (int)d;
                        i1 += (i22 * i22);
                        iArr = iArr;
                        try {
                            i5 = (i22 / -156486373);
                            i1 = (i3 % Test.iFld);
                            iArr[i22] = (95 % iArr[i]);
                        } catch (ArithmeticException a_e) {}
                        i3 >>= i22;
                    }
                case 74:
                    iArr[i2 + 1] -= (int)Test.instanceCount;
                    Test.iFld += (((i2 * Test.sFld) + Test.fFld) - Test.instanceCount);
                    for (i23 = 1; i23 < 1; i23++) {
                        Test.instanceCount = 44;
                        Test.fFld += (i23 * i1);
                        i5 >>= Test.iFld;
                        i3 += i23;
                        i3 = Test.sFld;
                    }
                    break;
                case 75:
                    bFld = bFld;
                    break;
                case 76:
                    iArr = iArr;
                    break;
                case 77:
                    i5 = Test.iFld;
                    break;
                case 78:
                    i1 = (int)1204530378L;
                    break;
                default:
                    i1 += (((i2 * i3) + i) - Test.iFld);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
