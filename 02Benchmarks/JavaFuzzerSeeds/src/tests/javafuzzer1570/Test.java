package tests.javafuzzer1570;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:09:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3750712114L;
    public static int iFld=-98;
    public static volatile short sFld=13206;
    public static double dFld=-90.31800;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -56124);
        FuzzerUtils.init(Test.iArrFld1, -109);
    }

    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        int i3=28, i4=-8, i5=-14, i6=39143, i7=-31479, iArr1[][]=new int[N][N];
        long l1=2550235980L;

        FuzzerUtils.init(iArr1, 17520);

        l >>= -6;
        Test.iFld *= Test.sFld;
        for (i3 = 4; 121 > i3; ++i3) {
            for (i5 = 1; i5 < 13; ++i5) {
                Test.sFld = (short)Test.dFld;
                i4 = i4;
                if (Test.bFld) break;
                i7 = 1;
                while (++i7 < 2) {
                    i6 += (i7 + l1);
                    Test.dFld = l;
                    iArr1[i3 + 1] = iArr1[i7];
                    i6 *= i4;
                    Test.iFld += (int)l1;
                    i6 += (i7 * i7);
                    i6 -= Test.sFld;
                }
            }
        }
        vMeth_check_sum += l + i3 + i4 + i5 + i6 + i7 + l1 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i, float f) {

        int i1=194, i2=-167, i8=17929;
        short s=3518;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 57.682F);

        i1 = 1;
        do {
            s += (short)(((i - -172) * (i << i)) * ((-(5870 * (i1 - i2))) - (i++)));
            vMeth(Test.instanceCount);
            switch ((i1 % 2) + 88) {
            case 88:
                i2 += (i1 + i);
                i2 = -23685;
                break;
            case 89:
                i2 <<= i2;
                switch ((i1 % 5) + 85) {
                case 85:
                    i2 += (((i1 * Test.iFld) + Test.iFld) - i);
                    i8 = 1;
                    do {
                        Test.instanceCount += (i8 * i);
                        fArr[i8] -= Test.instanceCount;
                        Test.instanceCount = (long)f;
                        Test.instanceCount <<= 1L;
                        Test.bFld = true;
                    } while (++i8 < 4);
                case 86:
                    Test.dFld -= 80;
                case 87:
                    i2 += (int)Test.instanceCount;
                case 88:
                    Test.iArrFld[i1] = 29044;
                    break;
                case 89:
                    i2 = 13;
                }
                break;
            }
        } while (++i1 < 380);
        long meth_res = i + Float.floatToIntBits(f) + i1 + s + i2 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth() {

        boolean b=false;
        float f1=-2.763F, fArr1[]=new float[N];
        int i9=-42186, i10=-79, i11=44, i12=-105, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);
        FuzzerUtils.init(iArr, 58389);
        FuzzerUtils.init(fArr1, -104.163F);

        lArr[(Test.iFld >>> 1) % N] = ((Test.instanceCount--) + 10);
        if (b == (iArr[(Test.iFld >>> 1) % N] >= (Test.iFld + (iArr[(Test.iFld >>> 1) % N]--)))) {
            b = (lArr[(Test.iFld >>> 1) % N] != Test.iFld);
        } else {
            Test.iFld = (((Test.iFld - Test.iFld) + (Test.iFld - Test.iFld)) - Test.iFld);
            Test.iFld = (int)(Test.instanceCount *= iMeth(10815, f1));
        }
        try {
            Test.iFld += (int)Test.instanceCount;
            for (i9 = 8; 133 > i9; ++i9) {
                for (i11 = i9; i11 < 13; ++i11) {
                    i10 -= (int)Test.instanceCount;
                    if (i10 != 0) {
                    }
                    switch (((i9 % 7) * 5) + 14) {
                    case 48:
                        f1 *= i12;
                        lArr[i9 - 1] = Test.instanceCount;
                        break;
                    case 39:
                        Test.iFld += (int)(113L + (i11 * i11));
                    case 26:
                        if (Test.bFld) continue;
                        break;
                    case 25:
                        Test.iFld <<= Test.iFld;
                        break;
                    case 36:
                        Test.iArrFld[i11] *= Test.iFld;
                        break;
                    case 38:
                        fArr1[i11] = Test.iFld;
                        break;
                    case 27:
                        Test.instanceCount += -19865;
                        break;
                    }
                }
            }
        }
        catch (NullPointerException exc1) {
            i10 = i12;
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=-24, i14=-26630, i15=5, i16=32544, i17=158, i18=-37121, i19=25999, i20=0, i21=-45201;
        float f2=2.1018F;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -3216069438952540850L);
        FuzzerUtils.init(dArr, 2.127269);

        Test.instanceCount -= Test.instanceCount;
        Test.iFld <<= byMeth();
        Test.sFld = (short)Test.dFld;
        Test.instanceCount -= Test.iFld;
        for (i13 = 8; i13 < 210; i13++) {
            i14 -= 33;
            Test.instanceCount = i13;
            Test.dFld -= Test.instanceCount;
            i14 += i15;
            Test.iArrFld[(i15 >>> 1) % N] *= (int)f2;
            Test.instanceCount += i13;
        }
        lArr1[(i15 >>> 1) % N] <<= i14;
        Test.iFld = i13;
        for (i16 = 16; i16 < 260; i16++) {
            for (i18 = 3; i18 < 103; ++i18) {
                for (i20 = 1; i20 < 2; ++i20) {
                    fArrFld = fArrFld;
                    switch ((i18 % 7) + 91) {
                    case 91:
                        if (Test.bFld) continue;
                        i14 <<= i17;
                        dArr[i20 + 1] += -7147;
                        i17 = i16;
                        break;
                    case 92:
                        f2 += i17;
                        fArrFld[i16 + 1] *= f2;
                        Test.instanceCount *= -12;
                    case 93:
                        i17 *= -39062;
                        f2 += (((i20 * Test.instanceCount) + i14) - i15);
                        i17 = i17;
                        Test.iArrFld1 = Test.iArrFld1;
                    case 94:
                        f2 = -1;
                    case 95:
                        Test.instanceCount <<= i17;
                        break;
                    case 96:
                        i17 >>= 142;
                        break;
                    case 97:
                        if (Test.bFld) continue;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
