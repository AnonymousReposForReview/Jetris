package tests.javafuzzer804;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:17:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static short sFld=23638;
    public static float fFld=3.328F;
    public static int iFld1=-192;
    public static boolean bFld=false;
    public static byte byFld=18;
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -11);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vSmallMeth(int i, long l) {

        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)126);

        i -= (i++);
        i += byArr[(-231 >>> 1) % N][(i >>> 1) % N];
        vSmallMeth_check_sum += i + l + FuzzerUtils.checkSum(byArr);
    }

    public static byte byMeth() {

        int i6=64221, i8=-14, i9=101, i10=23739, iArr1[]=new int[N];
        boolean b=true;
        byte by2=99;

        FuzzerUtils.init(iArr1, 64046);

        iArr1[(i6 >>> 1) % N] -= i6;
        i6 <<= 36967;
        for (int i7 : iArr1) {
            Test.fFld /= (i6 | 1);
            Test.iFld1 = i7;
            if (b) break;
            for (i8 = 1; i8 < 4; ++i8) {
                iArr1[i8] *= (int)Test.instanceCount;
                iArr1[i8] = i7;
                Test.iFld1 >>= i10;
                Test.iFld1 = i9;
                if (b) {
                    i7 += i8;
                    i6 = (int)-80L;
                    i10 += (i8 * i8);
                } else {
                    iArr1[i8 - 1] = by2;
                }
            }
        }
        long meth_res = i6 + (b ? 1 : 0) + i8 + i9 + i10 + by2 + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i4, int i5, float f) {

        byte by1=101;
        int i11=-39, i12=-11, i13=2, i14=-55618, i15=-44691, i16=-19932, i17=-7;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)5377);

        by1 >>= (byte)(((i4 * 10252) - (40L + byMeth())) + Test.instanceCount);
        for (i11 = 7; i11 < 233; i11++) {
            Test.iArrFld1[i11] = 2534;
            for (i13 = 1; i13 < 7; ++i13) {
                f *= i14;
            }
        }
        i4 += i5;
        for (i15 = 13; i15 < 297; i15++) {
            by1 *= (byte)i14;
            if (Test.bFld) {
                Test.instanceCount += (((i15 * Test.fFld) + i14) - Test.instanceCount);
                if (false) continue;
                i12 = i16;
                sArr[i15] += (short)i12;
            }
            try {
                i17 = (Test.iArrFld1[i15 + 1] % i15);
                i12 = (Test.iArrFld1[i15 - 1] / i5);
                Test.iArrFld1[i15] = (i14 / i17);
            } catch (ArithmeticException a_e) {}
            i5 ^= i17;
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + by1 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i3) {

        double d=-1.28508, dArr[]=new double[N];
        int i18=20505, i19=210, i20=-1, i21=-229, i22=8, i23=10;

        FuzzerUtils.init(dArr, 120.34505);

        i3 /= (int)(((long)(--d)) | 1);
        vMeth1(Test.iFld1, i3, Test.fFld);
        for (i18 = 6; i18 < 125; ++i18) {
            d = Test.fFld;
            for (i20 = 13; i20 > 1; i20 -= 2) {
                i21 += (i20 | Test.byFld);
                Test.sFld += (short)i20;
                Test.iFld1 -= (int)Test.instanceCount;
                i19 = Test.iFld1;
                Test.sFld *= (short)Test.iFld1;
                Test.iFld1 = i20;
                for (i22 = 1; i22 < 3; ++i22) {
                    i21 = Test.iFld1;
                    Test.instanceCount *= Test.instanceCount;
                    dArr[i22 + 1] *= Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i3 + Double.doubleToLongBits(d) + i18 + i19 + i20 + i21 + i22 + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr3) {

        int i1=3347, i2=39399, iArr[]=new int[N];
        long l1=2223019470L;
        short s=-8485;
        byte by=-15;

        FuzzerUtils.init(iArr, 4164);

        for (int smallinvoc=0; smallinvoc<653; smallinvoc++) vSmallMeth(iArr[(i1 >>> 1) % N] = ((i1 + i1) + (i1 * i1)),
            -5826L);
        for (l1 = 278; l1 > 7; l1 -= 2) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i2, 14L);
            switch (((iArr[(i1 >>> 1) % N] >>> 1) % 1) + 122) {
            case 122:
                vSmallMeth((int)(i1 - ((s * by) * -4.219F)), Test.instanceCount * i2);
                Test.instanceCount += (l1 - i2);
            default:
                i2 += i2;
                i2 += i1;
            }
            Test.instanceCount = (Integer.reverseBytes(i2) + Short.reverseBytes(Test.sFld));
            vMeth(i2);
            Test.iFld1 >>>= i2;
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
