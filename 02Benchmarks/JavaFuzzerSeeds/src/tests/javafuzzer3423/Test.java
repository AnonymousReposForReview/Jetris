package tests.javafuzzer3423;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:00:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-67L;
    public static volatile int iFld=59593;
    public static float fFld=1.566F;
    public byte byFld=9;
    public boolean bFld=false;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];
    public int iArrFld1[]=new int[N];
    public static int iArrFld2[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)12);
        FuzzerUtils.init(Test.iArrFld, -150);
        FuzzerUtils.init(Test.iArrFld2, -8);
    }

    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(short s) {

        int i4=1, i5=18058, i6=10383, iArr[]=new int[N];
        byte by=-19;
        double d=-78.45254;

        FuzzerUtils.init(iArr, 202);

        Test.byArrFld[(Test.iFld >>> 1) % N] *= (byte)-94.869F;
        for (i4 = 8; i4 < 394; i4++) {
            float f=72.34F;
            Test.iFld = 24679;
            Test.byArrFld[i4 + 1] = (byte)s;
            Test.instanceCount += i5;
            by = (byte)i4;
            Test.iFld += i5;
            f += (((i4 * Test.iFld) + Test.instanceCount) - i5);
            Test.iFld += (i4 * i4);
            i6 = 1;
            do {
                d = 1;
                while (++d < 1) {
                    i5 -= -228;
                    Test.iFld *= Test.iFld;
                    iArr[i6 - 1] += (int)Test.instanceCount;
                }
                i5 *= i4;
            } while (++i6 < 4);
        }
        long meth_res = s + i4 + i5 + by + i6 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        short s1=31409;

        Test.iFld += (++i3);
        dMeth(s1);
        i2 = (int)Test.instanceCount;
        long meth_res = i2 + i3 + s1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(int i, int i1) {


        Test.iFld = (int)lMeth(i1, i1);
        long meth_res = i + i1;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i7=110, i8=-21150, i10=137, i11=10, i12=112, i13=161, i14=-4, i15=25777;
        double d1=-2.32309;
        short s2=-12844;

        Test.iFld &= ((Math.max(6, Test.iFld) + Test.iFld) - byMeth(Test.iFld, 76));
        Test.fFld += Test.iFld;
        for (i7 = 20; 395 > i7; ++i7) {
            switch ((i7 % 1) + 37) {
            case 37:
                i8 += i7;
                i8 ^= Test.iFld;
                Test.iArrFld[i7][i7 - 1] -= Test.iFld;
                break;
            }
            Test.fFld -= Test.instanceCount;
            lArrFld[i7] = Test.instanceCount;
        }
        Test.fFld = i7;
        d1 = Test.instanceCount;
        lArrFld[(Test.iFld >>> 1) % N] += byFld;
        i8 = (int)Test.instanceCount;
        for (int i9 : iArrFld1) {
            iArrFld1 = Test.iArrFld[(i9 >>> 1) % N];
            for (i10 = 2; i10 < 63; i10 += 3) {
                i12 = i7;
                iArrFld1[i10] *= i8;
                if (bFld) {
                    i11 -= (int)Test.fFld;
                    Test.instanceCount += (long)Test.fFld;
                    for (i13 = 1; i13 < 4; i13++) {
                        switch ((i10 % 6) + 35) {
                        case 35:
                            s2 = (short)54550;
                            i11 += i13;
                            break;
                        case 36:
                        case 37:
                            Test.fFld -= (float)d1;
                            break;
                        case 38:
                        case 39:
                            if (bFld) continue;
                            i9 += (((i13 * i15) + Test.instanceCount) - i12);
                            Test.fFld += (i13 - i10);
                            break;
                        case 40:
                            byFld = (byte)Test.instanceCount;
                            break;
                        default:
                            Test.iArrFld[i10][i10 + 1] >>= (int)7578982118060571082L;
                        }
                    }
                } else if (bFld) {
                    iArrFld1[i10] = i12;
                } else {
                    Test.iArrFld2[i10 - 1] -= i7;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
