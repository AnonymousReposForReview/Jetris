package tests.javafuzzer435;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static short sFld=-19826;
    public double dFld=-52.30876;
    public float fFld=1.466F;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(float f1, boolean b, int i4) {

        int i5=-32652, i6=202, i7=38035, i8=50, i9=189, i10=-54126, i11=-56371, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -1243);

        i4 &= (int)954123321L;
        for (i5 = 11; i5 < 368; i5++) {
            i6 += (int)f1;
            for (i7 = 5; i7 > i5; i7 -= 3) {
                for (i9 = 1; 1 > i9; i9++) {
                    switch ((i5 % 1) + 92) {
                    case 92:
                        switch ((((i6 >>> 1) % 8) * 5) + 44) {
                        case 67:
                            i6 <<= (int)Test.instanceCount;
                            Test.instanceCount += (i9 * i9);
                            if (b) continue;
                            i11 += i9;
                            break;
                        case 55:
                            Test.instanceCount *= (long)-2.757F;
                            i10 += (int)f1;
                            i10 >>>= i8;
                            if (b) break;
                            break;
                        case 57:
                            Test.instanceCount += (i9 + Test.sFld);
                            break;
                        case 71:
                            i10 -= (int)-9105605823074486881L;
                        case 50:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 59:
                            i6 <<= i6;
                        case 84:
                            Test.instanceCount *= i4;
                        case 64:
                            iArr1[i5 + 1][i7 - 1] = (int)-2292640271L;
                        default:
                            i11 ^= i8;
                        }
                        break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(long l) {

        int i3=-45616, i12=-34219, i13=-112, i14=13, i15=-13, i16=-5, i17=174, i18=199, iArr2[]=new int[N];
        float f2=70.312F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 5);
        FuzzerUtils.init(lArr, -4246544784L);

        i3 = sMeth(f2, false, i3);
        b1 = false;
        for (i12 = 13; i12 < 377; ++i12) {
            b1 = b1;
            iArr2[i12 + 1] = i13;
            i14 += (i12 * i14);
        }
        i13 = Test.sFld;
        for (i15 = 1; i15 < 132; i15++) {
            if (false) {
                i16 += (i15 * Test.sFld);
                for (i17 = i15; i17 < 12; ++i17) {
                    if (b1) break;
                    lArr = lArr;
                    lArr[i15 + 1] *= (long)f2;
                    i3 += (-160 + (i17 * i17));
                }
            } else if (b1) {
                i18 -= (int)l;
            } else {
                f2 -= i3;
            }
        }
        long meth_res = l + i3 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(float f) {

        int i1=-22120, i2=1262, i19=-204, i20=-71;
        byte by1=-79;

        for (i1 = 7; i1 < 126; i1++) {
            f *= ((iMeth1(Test.instanceCount) - 45) - -11);
            Test.sFld = (short)Test.instanceCount;
            by1 += (byte)(i1 * i1);
            dFld += -2;
            for (i19 = 1; 13 > i19; ++i19) {
                i20 -= i2;
                Test.instanceCount += (long)f;
            }
            i2 |= i2;
            i2 ^= i19;
        }
        Test.instanceCount *= i19;
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + by1 + i19 + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12130, i21=24288, i22=-36776, i23=-128, i24=-74, i25=11, i26=28959, i27=42185, iArr[]=new int[N];
        byte by=24;
        boolean b2=false;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(lArr1, 7L);
        FuzzerUtils.init(fArr, -2.926F);

        i = (by--);
        if (false) {
            iArr[(i >>> 1) % N] -= iMeth(1.990F);
            i21 = 144;
            do {
                for (i22 = i21; 174 > i22; i22++) {
                    dFld = i23;
                    for (i24 = 1; i24 < 1; ++i24) {
                        i = (int)Test.instanceCount;
                        if (b2) break;
                        i25 >>= i23;
                        iArr[i21] /= (int)((long)(fFld) | 1);
                        iArr = FuzzerUtils.int1array(N, (int)32540);
                        i23 += i25;
                        lArr1[i22] <<= i24;
                        if (b2) {
                            fArr[i21 + 1] -= Test.instanceCount;
                        } else {
                            if (b2) continue;
                            i25 = i24;
                            if (b2) {
                                fFld += i23;
                                iArr[i22] >>= i24;
                                Test.instanceCount -= (long)fFld;
                            } else if (b2) {
                                i25 += (i24 * i24);
                            }
                            i += (int)dFld;
                        }
                    }
                    i = i22;
                    for (i26 = 1; 1 > i26; i26++) {
                        i25 += i23;
                        i += (i26 * i26);
                        i25 >>= Test.sFld;
                        i = i;
                    }
                }
            } while (--i21 > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
