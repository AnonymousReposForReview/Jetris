package tests.javafuzzer2052;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:02:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=577107503L;
    public static boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-11, i6=-32360, i7=74, i8=-38838;
        float f2=-47.179F, fArr[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(fArr, 84.786F);

        fArr[(215 >>> 1) % N] = Test.instanceCount;
        i5 = (int)f2;
        i5 -= i5;
        i5 -= (int)f2;
        i5 /= (int)(i5 | 1);
        Test.instanceCount = i5;
        i6 = 1;
        do {
            Test.instanceCount += (((i6 * Test.instanceCount) + i5) - i5);
            if (b1) {
                i5 = -5;
                for (i7 = 1; 4 > i7; i7++) {
                    if (b1) break;
                }
            } else {
                i8 = i7;
                i8 -= 42941;
                i5 <<= (int)Test.instanceCount;
            }
        } while (++i6 < 378);
        long meth_res = i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(boolean b, short s) {

        int i1=-1, i2=-14, i3=-14, i4=60637, iArr[]=new int[N];
        float f=-20.132F, f1=-1.28F;
        byte by=113;
        double d=-47.12915;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -250L);
        FuzzerUtils.init(iArr, 184);

        for (i1 = 11; 188 > i1; ++i1) {
            for (i3 = 1; i3 < 9; ++i3) {
                f = 1;
                while (++f < 2) {
                    Test.instanceCount += (long)(((f * by) + Test.instanceCount) - i3);
                    i4 += (int)(((f * i2) + i3) - s);
                    i2 += (int)(f + i4);
                    f1 += iMeth();
                    i4 = i4;
                    b = b;
                    Test.instanceCount &= 24;
                    b = b;
                }
                if (b) {
                    lArr[i3 + 1] *= i1;
                    Test.instanceCount += (i3 + Test.instanceCount);
                    iArr[i1 - 1] += (int)Test.instanceCount;
                } else if (b) {
                    d += i1;
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + s + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + by +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        long l=-3L;
        short s1=793;
        int i9=-40865, i10=122, i11=-11060, iArr1[][]=new int[N][N];
        double d1=3.125071;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(fArr1, 77.770F);

        i = i;
        l = 1;
        while (++l < 379) {
            vMeth1(Test.bFld, s1);
            iArr1[(int)(l - 1)][(int)(l - 1)] = i;
        }
        for (i9 = 16; i9 < 366; i9++) {
            d1 = i10;
            i += i9;
        }
        d1 *= i;
        i10 += (int)7177576435305563782L;
        i11 = 1;
        do {
            i = i9;
            s1 += (short)-498942458L;
            iArr1[i11][i11] *= i9;
            i -= 10;
            iArr1[i11 - 1][i11 + 1] -= i9;
        } while (++i11 < 146);
        vMeth_check_sum += i + l + s1 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i12=34544, i13=-10355, i14=49966, i15=-9, i16=-26452, i17=83, i18=8, i19=-203, i20=-38816, i21=46505,
            i22=-24002, iArr2[][]=new int[N][N];
        double d2=-58.28076;
        float f4=-116.957F, fArr2[]=new float[N];
        short s2=-22978;
        byte by2=-10;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -14L);
        FuzzerUtils.init(iArr2, -12);
        FuzzerUtils.init(fArr2, 28.238F);

        vMeth(i12);
        Test.instanceCount *= Test.instanceCount;
        d2 -= d2;
        i13 = 1;
        while ((i13 += 3) < 342) {
            byte by1=57;
            i12 += by1;
            f4 += (((i13 * i12) + Test.instanceCount) - i12);
            for (i14 = 8; i14 < 220; ++i14) {
                Test.instanceCount *= (long)f4;
                i16 = i16;
                i12 *= i15;
                i16 += (((i14 * s2) + i15) - Test.instanceCount);
            }
            i17 = 1;
            while (++i17 < 220) {
                i16 = (int)Test.instanceCount;
            }
        }
        f4 = (float)d2;
        lArr1[(i15 >>> 1) % N] = (long)f4;
        i12 >>= (int)Test.instanceCount;
        for (i18 = 3; 144 > i18; ++i18) {
            i19 += (((i18 * i19) + i19) - f4);
            f4 += (((i18 * i15) + Test.instanceCount) - f4);
        }
        i20 = 1;
        do {
            s2 %= (short)(i16 | 1);
            Test.instanceCount = i12;
            f4 *= i18;
            iArr2 = iArr2;
            for (i21 = 82; i21 > 5; --i21) {
                iArr2[i21][i21] += by2;
                fArr2[i20 + 1] = i14;
                i12 += (int)1.215F;
                fArr2[(10 >>> 1) % N] += by2;
                i15 += (i21 | i19);
            }
        } while (++i20 < 307);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
