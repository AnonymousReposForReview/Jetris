package tests.javafuzzer1046;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:22:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static byte byFld=104;
    public static boolean bFld=true;
    public static int iFld=56367;
    public static double dFld=43.8192;
    public static short sFld=-25343;
    public static boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-36823, i6=0, i7=3, i8=45058, iArr[]=new int[N];
        float f2=24.624F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-1);
        FuzzerUtils.init(iArr, 47);

        i5 = 388;
        do {
            f2 += i5;
            Test.bFld = Test.bFld;
        } while ((i5 -= 3) > 0);
        for (byte by : byArr) {
            Test.iFld *= i5;
            Test.iFld = i5;
            i6 = 4;
            do {
                iArr[i6 - 1] -= (int)-78.780F;
                for (i7 = i6; 1 > i7; i7++) {
                    if (i7 != 0) {
                        vMeth1_check_sum += i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + FuzzerUtils.checkSum(byArr)
                            + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld -= Test.iFld;
                }
                Test.iFld = -143;
                Test.iFld ^= i7;
            } while (--i6 > 0);
            f2 = i5;
        }
        vMeth1_check_sum += i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l1, int i2) {

        int i3=-9, i4=-2, i9=13, i10=132, i11=-3, iArr1[]=new int[N];
        float f1=59.509F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 64076);
        FuzzerUtils.init(lArr, 3139892302L);

        for (i3 = 4; i3 < 385; ++i3) {
            switch ((i3 % 7) + 115) {
            case 115:
                l1 = (Test.byFld + i3);
                break;
            case 116:
                i2 >>= (int)(Integer.reverseBytes(i4 + 224) - ((i2 + i3) * (i4 - f1)));
                vMeth1();
                i9 = 1;
                while (++i9 < 4) {
                    Test.instanceCount += i9;
                    i4 += i4;
                    for (i10 = 1; i10 < 1; i10++) {
                        f1 += (i10 * i10);
                        Test.dFld %= (i10 | 1);
                        Test.byFld += (byte)(-4 + (i10 * i10));
                        iArr1[i10] = 65027;
                        iArr1[i10 + 1] = i2;
                        Test.instanceCount *= Test.iFld;
                    }
                }
            case 117:
                i2 = (int)l1;
                break;
            case 118:
                lArr = lArr;
                break;
            case 119:
                if (Test.bFld) continue;
                break;
            case 120:
                if (Test.bFld) break;
                break;
            case 121:
            default:
                iArr1[i3 - 1] <<= Test.iFld;
            }
        }
        vMeth_check_sum += l1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, int i1) {

        short s=29427;
        boolean b=false;

        i1 += s;
        b = ((false || Test.bArrFld[(i1 >>> 1) % N]) != false);
        vMeth(l, 11885);
        long meth_res = l + i1 + s + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-3, i12=28, i14=-12312, i15=-5, i16=-6, i17=9;
        float f=17.227F, f3=1.477F, f4=-1.965F;

        i = (int)(f + Math.abs(103));
        iMeth(Test.instanceCount, Test.iFld);
        Test.byFld >>= (byte)Test.instanceCount;
        i12 = 348;
        while ((i12 -= 3) > 0) {
            Test.bFld = Test.bFld;
            iArrFld[i12] = 200;
            i -= i12;
            i14 = 1;
            do {
                byArrFld[i14 + 1] -= (byte)11;
                f += i;
                iArrFld[i12] = Test.iFld;
                Test.instanceCount = i14;
                Test.instanceCount *= i12;
                i += Test.iFld;
                Test.iFld += (i14 ^ i12);
                i = Test.iFld;
                Test.iFld >>= (int)Test.instanceCount;
            } while (++i14 < 216);
            f -= i12;
            Test.instanceCount %= (i14 | 1);
        }
        f3 = 1;
        while (++f3 < 220) {
            if (Test.bFld) continue;
            i -= i14;
            Test.iFld -= Test.sFld;
            Test.sFld += (short)(82.206F + (f3 * f3));
            iArrFld[(int)(f3)] -= i;
            for (f4 = 6; f4 < 114; f4++) {
                for (i16 = 2; 1 < i16; --i16) {
                    Test.instanceCount <<= Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld -= 45023;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
