package tests.javafuzzer2846;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:27:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3682L;
    public static volatile byte byFld=-71;
    public static volatile short sFld=-22948;
    public static int iFld=-6;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5399910083564909054L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=50740, i4=-34727, i5=-9, i6=4, i7=-20854, i8=8, iArr[]=new int[N];
        short s=-31105;
        float f1=0.295F;

        FuzzerUtils.init(iArr, 13);

        i3 = 1;
        while (++i3 < 261) {
            i4 >>= i3;
            Test.lArrFld = Test.lArrFld;
            i4 -= (int)Test.instanceCount;
            for (i5 = 1; i5 < 6; ++i5) {
                iArr[i5 - 1] &= 3784;
            }
            Test.instanceCount -= -25357;
            i4 += i6;
            i4 += (int)Test.instanceCount;
            i4 <<= s;
            f1 -= -65465;
            for (i7 = i3; i7 < 6; ++i7) {
                s = (short)-148;
                i4 = i6;
                Test.byFld += (byte)Test.instanceCount;
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + s + Float.floatToIntBits(f1) + i7 + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2) {

        float f=0.73F, f2=106.292F, fArr[]=new float[N];
        int i9=-10966, i10=9, i11=163;

        FuzzerUtils.init(fArr, -110.468F);

        f = Test.instanceCount;
        Test.instanceCount += i2;
        vMeth2();
        Test.instanceCount = Test.sFld;
        i9 = 1;
        while (++i9 < 242) {
            i2 >>= i9;
        }
        f2 = 395;
        do {
            switch ((int)(((f2 % 3) * 5) + 117)) {
            case 122:
                Test.instanceCount *= i9;
                i2 -= i2;
                for (i10 = (int)(f2); i10 < 4; i10++) {
                    double d=-98.74602;
                    Test.instanceCount += (((i10 * i10) + i9) - i11);
                    i11 += (((i10 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    fArr[i10] *= (float)d;
                    i11 = (int)f2;
                }
                break;
            case 127:
                i2 += (int)215L;
            case 118:
                Test.instanceCount += (long)117.67514;
                break;
            default:
                Test.iFld = i9;
            }
        } while (--f2 > 0);
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i9 + Float.floatToIntBits(f2) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1, long l) {

        float f3=-18.103F, f4=2.227F;
        int i12=-180, i13=-12, i14=-139, i15=10, i16=4, iArr1[]=new int[N];
        boolean b=false;
        double d1=0.128134;

        FuzzerUtils.init(iArr1, -24495);

        vMeth1(i);
        for (f3 = 381; f3 > 23; f3--) {
            switch ((int)((f3 % 1) + 116)) {
            case 116:
                i13 = 1;
                while (++i13 < 5) {
                    i = i1;
                }
                b = true;
                l += i;
                break;
            }
        }
        i1 *= i;
        iArr1[(i12 >>> 1) % N] += i13;
        f4 -= Test.iFld;
        if (b) {
            for (i14 = 4; i14 < 159; i14++) {
                i16 = 1;
                while (++i16 < 10) {
                    if (true) break;
                    Test.sFld |= (short)Test.iFld;
                }
            }
        } else if (b) {
            d1 = -1202557616321811742L;
        }
        vMeth_check_sum += i + i1 + l + Float.floatToIntBits(f3) + i12 + i13 + (b ? 1 : 0) + Float.floatToIntBits(f4) +
            i14 + i15 + i16 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f5=-1.324F, fArr1[]=new float[N];
        int i17=9922, i18=-6, i19=-9, i20=-3, i21=-3, i22=-6, i23=-38, i24=-7;
        boolean b1=true;

        FuzzerUtils.init(fArr1, 27.572F);

        vMeth(Test.iFld, Test.iFld, Test.instanceCount);
        iArrFld[(230 >>> 1) % N] -= (int)f5;
        fArr1[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i17 = 4; 210 > i17; i17++) {
            i18 *= (int)f5;
            b1 = b1;
        }
        b1 = true;
        for (i19 = 15; i19 < 327; ++i19) {
            i21 = 1;
            do {
                f5 = i18;
                for (i22 = i21; i22 < 1; ++i22) {
                    if (b1) continue;
                }
                i24 = 1;
                do {
                    try {
                        i20 = (-61 / iArrFld[i19 - 1]);
                        i20 = (i23 / -14841);
                        i18 = (i23 % -1107317983);
                    } catch (ArithmeticException a_e) {}
                    fArr1 = fArr1;
                    Test.lArrFld[(i23 >>> 1) % N] >>>= i17;
                    Test.iFld *= Test.iFld;
                } while (++i24 < 1);
                f5 += i23;
                i18 /= (int)(i23 | 1);
                Test.instanceCount >>= i21;
            } while (++i21 < 81);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
