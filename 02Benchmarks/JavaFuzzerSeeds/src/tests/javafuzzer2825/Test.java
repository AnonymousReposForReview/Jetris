package tests.javafuzzer2825;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:01:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static double dFld=2.127426;
    public static volatile boolean bFld=false;
    public static byte byFld=93;
    public static byte byArrFld[]=new byte[N];
    public long lArrFld[]=new long[N];
    public volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-114);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        boolean b=false;

        b = false;
        long meth_res = (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(byte by) {

        int i1=-187, i2=-136, i3=2, i4=35083, i5=-43338, i6=43777, i7=-12;
        float f=59.186F;

        i1 = (int)(by * (Test.instanceCount - (i1 + Test.dFld)));
        i1 &= (int)(fMeth() * by);
        Test.byArrFld = Test.byArrFld;
        Test.instanceCount ^= i1;
        for (i2 = 20; i2 < 335; ++i2) {
            i3 += (int)Test.instanceCount;
        }
        Test.bFld = Test.bFld;
        for (i4 = 3; i4 < 311; ++i4) {
            i3 = (int)Test.instanceCount;
            i1 %= (int)(i1 | 1);
            i3 -= i3;
            for (i6 = 1; i6 < 5; i6++) {
                f /= 61033;
            }
            i1 = i1;
            f = i1;
        }
        long meth_res = by + i1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {


        Test.instanceCount = ((i--) % ((-iMeth(Test.byFld)) | 1));
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        double d=-109.44198, dArr[]=new double[N];
        int i8=4432, i9=-12, i10=36656, i11=46182, i12=130, iArr[][]=new int[N][N];
        long l=-94L, l1=23L;
        float f1=-2.394F;

        FuzzerUtils.init(iArr, -181);
        FuzzerUtils.init(dArr, 3.129851);

        for (int smallinvoc=0; smallinvoc<683; smallinvoc++) vSmallMeth(20047);
        for (d = 23; 373 > d; d++) {
            i8 += i8;
            i9 = 1;
            while (++i9 < 72) {
                i8 ^= 181;
                i8 = (int)2.448F;
                for (i10 = 1; i10 < 1; i10++) {
                    i11 -= 33;
                    lArrFld[i9] *= i10;
                    i8 = (int)2038266550L;
                    bArrFld[i9 - 1] = Test.bFld;
                    i11 *= i10;
                    i8 >>= i8;
                    if (Test.bFld) break;
                    Test.instanceCount |= i9;
                }
                i8 &= 13;
                iArr[(int)(d - 1)][i9 - 1] >>>= i9;
                i8 -= (int)Test.instanceCount;
                try {
                    iArr[i9 + 1][(i8 >>> 1) % N] = (21853 / iArr[(int)(d + 1)][(int)(d + 1)]);
                    i8 = (i11 / -3);
                    i8 = (i9 % -11401);
                } catch (ArithmeticException a_e) {}
                i8 = (int)Test.instanceCount;
                iArr[i9][(int)(d)] = -77;
            }
            if (Test.bFld) continue;
            for (l = 72; l > 2; --l) {
                f1 = i9;
                dArr[(int)(d)] += f1;
                i11 = i12;
                iArr[(int)(l - 1)] = FuzzerUtils.int1array(N, (int)-7);
                l1 = 2;
                do {
                    i12 = (int)4838194572630548594L;
                    iArr[(int)(l)][(int)(d)] = i12;
                } while ((l1 -= 2) > 0);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
