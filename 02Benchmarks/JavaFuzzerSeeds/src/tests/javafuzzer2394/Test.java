package tests.javafuzzer2394;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:05:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=36384L;
    public int iFld=12;
    public static volatile boolean bFld=false;
    public static byte byFld=-18;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static volatile short sArrFld[][]=new short[N][N];
    public static volatile double dArrFld[][]=new double[N][N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -56444);
        FuzzerUtils.init(Test.sArrFld, (short)3301);
        FuzzerUtils.init(Test.dArrFld, 1.62763);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, int i5, int i6) {

        byte by=75;
        int i7=-8, i8=11, i9=-79, i10=-10, i11=-11, i12=61, iArr[]=new int[N];
        boolean b=false;
        double d=-121.79568;

        FuzzerUtils.init(iArr, 26996);

        Test.instanceCount += by;
        iArr = iArr;
        if (b) {
            for (i7 = 398; i7 > 18; --i7) {
                for (i9 = 1; 4 > i9; i9++) {
                    i4 = (int)Test.instanceCount;
                    if (b) continue;
                    for (i11 = 1; i11 < 2; ++i11) {
                        switch ((i11 % 2) + 4) {
                        case 4:
                            i5 += (i11 * Test.instanceCount);
                            Test.instanceCount -= i5;
                        case 5:
                            i8 = 18218;
                            Test.instanceCount += (i11 * i11);
                            if (i12 != 0) {
                            }
                            break;
                        default:
                            i5 += i11;
                        }
                    }
                }
            }
        } else {
            d += -14L;
        }
        long meth_res = i4 + i5 + i6 + by + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, int i2, int i3) {


        i3 = Math.min(iMeth(-75, i3, -200), i3);
        i2 *= i2;
        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + i3;
    }

    public void vMeth() {

        int i13=-48883, i14=-35356, i15=234, i16=-5, i17=-48761;
        float f1=1.700F, f2=77.951F;
        byte by1=98;

        vMeth1(0.589F, iFld, iFld);
        Test.iArrFld[(iFld >>> 1) % N] = iFld;
        for (i13 = 1; i13 < 195; ++i13) {
            f1 = 1;
            do {
                Test.instanceCount = by1;
                for (i15 = (int)(f1); i15 < 1; i15 += 3) {
                    by1 *= (byte)i14;
                    Test.instanceCount -= by1;
                }
                i14 -= (int)-1946078323L;
                f2 = iFld;
                iFld += (int)Test.instanceCount;
                Test.iArrFld[(int)(f1)] += iFld;
            } while (++f1 < 8);
        }
        i17 = 1;
        while (++i17 < 243) {
            lArrFld[i17 + 1] = 131L;
        }
        iFld += (int)f1;
        vMeth_check_sum += i13 + i14 + Float.floatToIntBits(f1) + by1 + i15 + i16 + Float.floatToIntBits(f2) + i17;
    }

    public void mainTest(String[] strArr1) {

        long l=11L;
        int i=-4, i1=-1, i18=-10, i19=-14, i20=-9, i21=8, i22=219, iArr1[]=new int[N];
        boolean b1=true;
        short s=9326;
        double d1=-124.54683;
        byte by2=-16;
        float f3=26.747F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.743F);
        FuzzerUtils.init(iArr1, 12);

        l = 1;
        while (++l < 332) {
            for (i = 76; i > 1; i--) {
                vMeth();
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-27487);
                if (b1) break;
                Test.instanceCount >>>= iFld;
            }
            iFld >>= i;
            Test.sArrFld[(int)(l - 1)][(int)(l)] >>= (short)3792;
            fArr[(int)(l)] = 2;
            iFld = iFld;
            Test.instanceCount -= Test.instanceCount;
        }
        i18 = 1;
        while (++i18 < 295) {
            i1 += i18;
            for (i19 = 5; i19 < 85; i19++) {
                switch (i19 + 88) {
                case 88:
                    s >>>= (short)i20;
                    i1 = i19;
                    break;
                case 89:
                    for (i21 = 1; i21 < 2; i21++) {
                        i1 ^= (int)Test.instanceCount;
                        if (Test.bFld) {
                            d1 -= -3;
                            by2 = (byte)i1;
                            i22 = -9;
                        } else if (true) {
                            Test.iArrFld[i18] = i19;
                            try {
                                iFld = (Test.iArrFld[i21 + 1] % i);
                                i1 = (i1 % -1033438003);
                                i22 = (iFld % i);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount -= i20;
                            i20 -= i21;
                        } else if (false) {
                            f3 = i21;
                            by2 += (byte)i21;
                            f3 -= i20;
                        }
                    }
                    break;
                case 90:
                    Test.iArrFld[i19 + 1] = i1;
                    break;
                case 91:
                    f3 *= l;
                case 92:
                    Test.instanceCount -= i20;
                    break;
                case 93:
                    if (false) break;
                case 94:
                    i1 -= (int)f3;
                case 95:
                    Test.byFld -= (byte)i;
                    break;
                case 96:
                    i20 >>= i18;
                    break;
                case 97:
                    iFld >>= i22;
                    break;
                case 98:
                    d1 = Test.instanceCount;
                case 99:
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-190);
                    break;
                case 100:
                    iFld += i19;
                    break;
                case 101:
                    by2 = (byte)i21;
                    break;
                case 102:
                    i1 = i19;
                    break;
                case 103:
                    Test.instanceCount <<= i18;
                case 104:
                    try {
                        i1 = (Test.iArrFld[i18] % -1684097800);
                        i22 = (iFld % i1);
                        iFld = (i21 % i19);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 105:
                    Test.instanceCount -= i20;
                    break;
                case 106:
                    i20 += (i19 * i19);
                    break;
                case 107:
                    Test.instanceCount >>= i20;
                    break;
                case 108:
                    Test.iArrFld[i19] *= i;
                    break;
                case 109:
                    if (Test.bFld) continue;
                    break;
                case 110:
                case 111:
                    i1 += (i19 + i20);
                    break;
                case 112:
                    Test.iArrFld[i18 + 1] >>= (int)Test.instanceCount;
                    break;
                case 113:
                    i20 |= (int)-3949364595207551815L;
                case 114:
                    b1 = b1;
                    break;
                case 115:
                    i22 = i18;
                    break;
                case 116:
                    f3 = i1;
                    break;
                case 117:
                    i20 = i20;
                    break;
                case 118:
                    Test.iArrFld[i19] -= i;
                    break;
                case 119:
                    i1 = i;
                case 120:
                    iFld += (i19 + f3);
                    break;
                case 121:
                    i22 += -36;
                    break;
                case 122:
                    i20 <<= i21;
                case 123:
                    i20 += (i19 + iFld);
                    break;
                case 124:
                    iArr1[i19 - 1] >>= i22;
                case 125:
                    i22 -= (int)f3;
                    break;
                case 126:
                    i20 = s;
                    break;
                case 127:
                    i20 += (39819 + (i19 * i19));
                case 128:
                    i1 = iFld;
                    break;
                case 129:
                    f3 += l;
                    break;
                case 130:
                    iArr1[i18] = s;
                    break;
                case 131:
                    if (true) continue;
                    break;
                case 132:
                    iFld >>= s;
                    break;
                case 133:
                    if (Test.bFld) continue;
                    break;
                case 134:
                    Test.bFld = b1;
                    break;
                case 135:
                    iFld += (i19 * i19);
                    break;
                case 136:
                    Test.instanceCount -= (long)d1;
                    break;
                case 137:
                    Test.dArrFld[i19 + 1][i18] = l;
                case 138:
                    iArrFld1[i18 - 1] &= (int)Test.instanceCount;
                    break;
                case 139:
                    d1 -= i19;
                    break;
                case 140:
                    if (Test.bFld) continue;
                    break;
                case 141:
                    Test.bFld = Test.bFld;
                    break;
                case 142:
                case 143:
                    Test.iArrFld[i19] *= (int)f3;
                    break;
                case 144:
                    iFld = i21;
                case 145:
                    i22 += (int)(-2499497823L + (i19 * i19));
                    break;
                case 146:
                    by2 += (byte)i19;
                case 147:
                    i22 <<= i19;
                    break;
                case 148:
                    Test.dArrFld[i19] = Test.dArrFld[i18 + 1];
                    break;
                case 149:
                    Test.instanceCount >>>= i20;
                    break;
                case 150:
                    Test.instanceCount += 10;
                    break;
                case 151:
                case 152:
                    lArrFld[i18 + 1] = i1;
                case 153:
                    i20 += (((i19 * i21) + i20) - i22);
                    break;
                case 154:
                    i20 = i21;
                    break;
                case 155:
                    lArrFld[i19] += -110;
                    break;
                case 156:
                    f3 += -1.671F;
                case 157:
                    iFld += (int)Test.instanceCount;
                default:
                    iFld <<= i22;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
