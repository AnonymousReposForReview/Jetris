package tests.javafuzzer580;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:14:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4898146473247435746L;
    public static int iFld=-70;
    public static volatile short sFld=22929;
    public double dFld=19.14059;

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, boolean b, double d) {

        int i3=8, i4=-19462, i5=-5, i6=34094, i7=-63702, i8=-13, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 23);
        FuzzerUtils.init(lArr1, 160L);

        Test.iFld = (int)f2;
        Test.instanceCount -= (long)d;
        iArr1[(Test.iFld >>> 1) % N] = 63763;
        for (i3 = 7; 305 > i3; ++i3) {
            f2 += (i3 * i3);
            lArr1 = FuzzerUtils.long1array(N, (long)13L);
            for (i5 = 1; i5 < 6; i5++) {
                i4 |= i5;
                i6 = 1;
                for (i7 = 2; i7 > 1; i7--) {
                    try {
                        iArr1[i5] = (i5 / iArr1[i7]);
                        i8 = (i5 % 62065);
                        i8 = (i3 / i4);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i6;
                }
                iArr1[(Test.iFld >>> 1) % N] <<= (int)Test.instanceCount;
                iArr1[i5 + 1] = (int)-2277283340L;
                lArr1[i5] += i6;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + (b ? 1 : 0) + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7
            + i8 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth(long l2) {

        int i1=63065, i2=-2064, i9=20314, i10=12538, i11=-65285, i12=-37500, iArr[]=new int[N];
        float f3=1.954F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr, -3330447303L);

        for (i1 = 5; i1 < 396; i1++) {
            l2 >>>= (((iArr[i1] *= (int)-3927021233712759537L) * (i2 + i2)) * i2);
            try {
                i2 = (i2 / i1);
                i2 = (i2 / i2);
                Test.iFld = (i2 / i1);
            } catch (ArithmeticException a_e) {}
            Test.iFld = (int)(iArr[i1 - 1] - ((lArr[i1 - 1]--) * (i2 % (Test.iFld | 1))));
        }
        vMeth(f3, b1, -2.83982);
        for (i9 = 5; i9 < 163; i9++) {
            iArr[i9] = i2;
            for (i11 = 1; i11 < 10; ++i11) {
                i10 += (((i11 * f3) + i9) - i11);
                i2 += Test.iFld;
                if (b1) continue;
                try {
                    iArr[i11] = (i9 % 152355797);
                    i2 = (i11 % 36451);
                    i10 = (i10 / -191);
                } catch (ArithmeticException a_e) {}
                Test.iFld *= i9;
                i12 -= -7061;
                lArr[i11 + 1] -= Test.iFld;
            }
        }
        long meth_res = l2 + i1 + i2 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth(long l, float f, float f1) {

        int i=-51190, i13=14, i14=43299, i15=12, i16=4, i17=-99, i18=13, iArr2[]=new int[N];
        long l1=13L;
        boolean b2=true;
        double d1=87.71710;
        byte by=79;

        FuzzerUtils.init(iArr2, 78);

        i = 142;
        while (--i > 0) {
            l = (long)((117.79067 - (i - l1)) * Math.abs(fMeth(-1790876427L)));
            for (i13 = i; i13 < 11; i13++) {
                for (i15 = 1; i15 > 1; --i15) {
                    if (b2) continue;
                    i16 = (int)d1;
                    iArr2[i - 1] -= 27595;
                }
                for (i17 = 1; i17 < 1; i17++) {
                    by += (byte)i17;
                    Test.iFld /= (int)(i | 1);
                    i14 += (((i17 * i13) + Test.sFld) - Test.sFld);
                    d1 = i16;
                    i18 -= i17;
                    d1 += 14L;
                    iArr2[i] -= i;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i + l1 + i13 + i14 + i15 + i16 + (b2 ?
            1 : 0) + Double.doubleToLongBits(d1) + i17 + i18 + by + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f4=-113.771F;
        int i19=-39, i20=55129, i21=254, i22=13, i23=11, i24=-4, i25=211, i26=236, i27=3363, iArr3[]=new int[N];
        boolean b3=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-38);
        FuzzerUtils.init(iArr3, 10);

        Test.instanceCount >>= (long)(dMeth(Test.instanceCount, -68.618F, f4) - dFld);
        Test.iFld = (int)Test.instanceCount;
        for (byte by1 : byArr) {
            for (i19 = 3; i19 < 63; i19++) {
                f4 += (i19 + i20);
                Test.iFld = Test.iFld;
            }
            f4 += Test.iFld;
            Test.instanceCount = i19;
            if (false) {
                iArr3[(i19 >>> 1) % N] = 19572;
                Test.instanceCount <<= i19;
                iArr3[(Test.iFld >>> 1) % N] <<= i20;
            } else if (false) {
                for (i21 = 2; i21 < 63; i21++) {
                    try {
                        iArr3[i21] = (47012 % i19);
                        i20 = (iArr3[i21 - 1] / Test.iFld);
                        iArr3[i21 - 1] = (iArr3[i21 - 1] % 152);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= -48;
                }
            } else {
                by1 += (byte)i22;
            }
        }
        if (b3) {
            i20 = Test.iFld;
            iArr3[(i19 >>> 1) % N] = 1;
            i20 ^= Test.sFld;
        } else if (b3) {
            for (i23 = 314; 11 < i23; i23 -= 2) {
                Test.instanceCount = Test.instanceCount;
                b3 = false;
                for (i25 = i23; i25 < 166; ++i25) {
                    if (b3) {
                        if (b3) break;
                        dFld *= Test.instanceCount;
                    } else if (b3) {
                        i22 += (i25 * i25);
                        dFld -= i19;
                        i27 += (int)f4;
                    } else if (b3) {
                    } else {
                        i20 = Test.iFld;
                    }
                }
            }
        } else {
            Test.instanceCount = 5521;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
