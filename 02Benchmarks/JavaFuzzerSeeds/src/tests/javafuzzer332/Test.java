package tests.javafuzzer332;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:00:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=91L;
    public static float fFld=2.54F;
    public static boolean bFld=false;
    public static volatile short sFld=-16288;
    public static double dFld=-17.126467;
    public static float fFld1=2.743F;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i11=-4, i12=-221, i13=-59, i14=-4, i15=11, i16=5791;
        double d=-100.5481;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -127.573F);
        FuzzerUtils.init(lArr, 64202L);

        for (i11 = 8; i11 < 165; i11++) {
            Test.instanceCount = i11;
            Test.instanceCount = Test.instanceCount;
            Test.fFld *= (float)d;
        }
        i12 = (int)-1L;
        for (i13 = 14; 285 > i13; i13++) {
            i12 += (int)Test.fFld;
            fArr[i13] = 15369L;
            for (i15 = 6; 1 < i15; i15--) {
                if (true) break;
                if (Test.bFld) {
                    i16 >>= (int)Test.instanceCount;
                    i14 <<= i15;
                    lArr[i13] -= (long)d;
                    i12 += (i15 * i15);
                } else {
                    Test.sFld &= (short)i14;
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i6, boolean b) {

        float f=6.819F, f1=-34.622F, fArr1[]=new float[N];
        int i7=11, i8=-12219, i9=-742, i10=169, i17=0, i18=5, iArr[]=new int[N];

        FuzzerUtils.init(fArr1, 0.279F);
        FuzzerUtils.init(iArr, -5121);

        i6 <<= (int)(6173497193096814294L - f);
        if (b) {
            for (i7 = 17; i7 < 272; ++i7) {
                for (i9 = 1; i9 < 6; ++i9) {
                    vMeth1();
                    i6 = -10;
                    for (i17 = 1; i17 < 2; ++i17) {
                        if (b) continue;
                        fArr1[i17] = i17;
                    }
                    iArr[i9 + 1] = (int)Test.instanceCount;
                    f1 = 2;
                    do {
                        Test.instanceCount -= i10;
                        iArr[i7 + 1] -= (int)Test.instanceCount;
                        Test.fFld += Test.instanceCount;
                        i10 >>>= i10;
                    } while (--f1 > 0);
                }
            }
        } else {
            iArr = FuzzerUtils.int1array(N, (int)4);
        }
        vMeth_check_sum += i6 + (b ? 1 : 0) + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i17 + i18 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i19=-40846, i20=-16447, i21=-163, i22=120, i23=250, iArr1[]=new int[N];
        double d1=83.44681;

        FuzzerUtils.init(iArr1, -6286);

        vMeth(-99, Test.bFld);
        i19 = (int)Test.instanceCount;
        i19 = -25129;
        i20 = 1;
        while (++i20 < 229) {
            for (i21 = i20; 7 > i21; i21++) {
                i19 = i21;
                i23 = 1;
                do {
                    i22 = i21;
                    iArr1[i21 + 1] *= i23;
                    i22 += (i23 - Test.sFld);
                    switch ((i21 % 8) + 39) {
                    case 39:
                        d1 = i21;
                        break;
                    case 40:
                        Test.fFld -= i21;
                        iArr1 = iArr1;
                        break;
                    case 41:
                        i19 -= 197;
                        break;
                    case 42:
                        Test.instanceCount <<= i19;
                    case 43:
                        Test.fFld -= 2027L;
                        break;
                    case 44:
                        try {
                            i22 = (i23 / -1273563771);
                            i22 = (i19 / -170);
                            iArr1[i20 - 1] = (-59 % i23);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 45:
                        i22 += i19;
                        break;
                    case 46:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    default:
                        i22 += i22;
                    }
                } while (++i23 < 1);
            }
        }
        long meth_res = i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=46624, i1=-95, i2=1, i3=15633, i4=49123, i5=14, i24=15951, i25=-2, iArr2[]=new int[N];
        long l=29350L, lArr1[]=new long[N];
        float fArr2[][]=new float[N][N];

        FuzzerUtils.init(iArr2, -26);
        FuzzerUtils.init(lArr1, -2626345615861773410L);
        FuzzerUtils.init(fArr2, -111.631F);

        for (i = 239; i > 5; i--) {
            for (i2 = 3; 107 > i2; ++i2) {
                for (i4 = 1; i4 < 2; i4++) {
                    switch ((i4 % 2) + 45) {
                    case 45:
                        i1 += (((i4 * i1) + i) - Test.instanceCount);
                        i5 = (iMeth() * i1);
                        break;
                    case 46:
                        i1 = Test.sFld;
                        i5 *= (int)Test.fFld;
                        i3 = i3;
                        Test.instanceCount >>= i1;
                    default:
                        i3 -= (int)Test.dFld;
                    }
                    iArr2[i4 + 1] -= i4;
                    i1 |= i3;
                }
                for (i24 = 1; i24 < 2; ++i24) {
                    switch ((i24 % 7) + 49) {
                    case 49:
                        Test.instanceCount = i2;
                        break;
                    case 50:
                    case 51:
                        iArr2[i2] *= i24;
                        if (Test.bFld) continue;
                        if (true) {
                            Test.dFld -= i24;
                            i25 += i25;
                        }
                        i1 += (((i24 * Test.fFld1) + Test.fFld1) - i4);
                        break;
                    case 52:
                        Test.fFld += i24;
                        i25 = (int)Test.instanceCount;
                        Test.instanceCount *= l;
                        i3 = i5;
                        break;
                    case 53:
                        lArr1[i + 1] *= i2;
                    case 54:
                        fArr2 = fArr2;
                        Test.dFld = l;
                        iArr2[i - 1] >>= i25;
                    case 55:
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
