package tests.javafuzzer3204;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:53:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-351607191L;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35361);
        FuzzerUtils.init(Test.byArrFld, (byte)-103);
        FuzzerUtils.init(Test.dArrFld, 2.79488);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8, int i9) {

        int i10=-3, i11=102, i12=-230, i13=-93, i14=-63103;
        short s2=328;
        double d1=1.86036;
        float f1=-115.259F, fArr[]=new float[N];
        boolean b=true;
        byte by1=-114;

        FuzzerUtils.init(fArr, 1.875F);

        for (i10 = 5; i10 < 353; ++i10) {
            i8 ^= -6;
            Test.instanceCount += i9;
            Test.instanceCount >>= s2;
            switch (((i10 % 4) * 5) + 60) {
            case 66:
                for (i12 = i10; i12 < 5; i12 += 3) {
                    i14 = 1;
                    while (++i14 < 1) {
                        i9 = (int)d1;
                        f1 -= i14;
                        i8 *= i8;
                        i11 += i14;
                        Test.instanceCount >>= -13;
                        fArr[i14 + 1] = f1;
                        Test.iArrFld[i10] >>= i8;
                        if (b) break;
                    }
                }
            case 76:
                Test.instanceCount |= by1;
                break;
            case 75:
                Test.instanceCount += (long)f1;
                break;
            case 69:
                try {
                    i9 = (36809 % i11);
                    i13 = (i9 % -36499);
                    i11 = (i13 % -53729);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                fArr[i10 - 1] -= i9;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + s2 + i12 + i13 + i14 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1) + (b ? 1 : 0) + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(int i7) {

        byte by=-30;
        float f=-1.285F;
        short s1=28106;
        int i15=-61239, i16=-26, i17=-9, i18=-171, i19=177, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -100);

        i7 = (i7++);
        by *= (byte)(((i7--) - (iArr1[(i7 >>> 1) % N] += i7)) - f);
        i7 -= (int)(((++i7) + Test.instanceCount) - (-146 + Math.abs(f)));
        i7 = s1;
        vMeth(i7, 0);
        Test.iArrFld[(i7 >>> 1) % N] += (int)f;
        for (i15 = 22; i15 < 382; i15++) {
            Test.instanceCount *= i15;
            for (i17 = i15; i17 < 5; i17++) {
                if (i15 != 0) {
                }
            }
            i7 = i16;
            i19 = 1;
            do {
                i16 += (i19 | Test.instanceCount);
            } while (++i19 < 5);
            i7 = (int)Test.instanceCount;
            i16 = i15;
        }
        long meth_res = i7 + by + Float.floatToIntBits(f) + s1 + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6) {

        int i20=-31828, i21=7, i22=57397, i23=190, i24=-60, iArr[]=new int[N];
        short s3=-32589;
        float f2=2.696F;
        double d2=83.76980, dArr[]=new double[N];
        byte by2=64;

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(dArr, 2.61301);

        i6 += (iArr[(i6 >>> 1) % N]--);
        iMeth1(12);
        for (i20 = 12; i20 < 217; i20++) {
            i6 = s3;
            i22 = 1;
            while (++i22 < 8) {
                switch ((i20 % 10) + 105) {
                case 105:
                    i21 += (i22 * i22);
                    f2 = i21;
                    for (i23 = 1; i23 < 1; ++i23) {
                        Test.instanceCount += (i23 * i23);
                        Test.instanceCount += (((i23 * Test.instanceCount) + i22) - i24);
                        i21 += (-44 + (i23 * i23));
                        dArr[i23 + 1] = i6;
                    }
                    Test.iArrFld[i22] = (int)Test.instanceCount;
                case 106:
                case 107:
                    Test.byArrFld = Test.byArrFld;
                case 108:
                    i6 -= 11727;
                    break;
                case 109:
                    Test.iArrFld[i22 - 1] = i20;
                case 110:
                    d2 -= by2;
                case 111:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 112:
                    i24 = i6;
                case 113:
                    i24 = 41200;
                    break;
                case 114:
                    iArr = FuzzerUtils.int1array(N, (int)0);
                    break;
                }
            }
        }
        long meth_res = i6 + i20 + i21 + s3 + i22 + Float.floatToIntBits(f2) + i23 + i24 + Double.doubleToLongBits(d2)
            + by2 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-247, i1=-12918, i2=0, i3=0, i4=-60, i5=10, i25=-108, i26=1, i27=-158;
        short s=31920;
        double d=0.122439, d3=-26.97561;
        float f3=-34.340F;
        byte by3=43;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 135L);

        for (i = 15; i < 394; i++) {
            Test.instanceCount += i;
            Test.instanceCount = ((i1 - Math.abs(Test.instanceCount)) - i);
        }
        i2 = 1;
        do {
            lArr = (lArr = (lArr = (lArr = FuzzerUtils.long2array(N, (long)-5667235662993859953L))));
            for (i3 = 3; i3 < 71; i3++) {
                if ((i1++) == ((i4 ^= -45865) - i)) continue;
                i5 = 1;
                do {
                    Test.instanceCount += (((s - s) / ((i4 - i3) | 1)) - i);
                } while (++i5 < 2);
                i4 = (i1--);
                d = iMeth(i);
                i1 >>= 5;
                for (d3 = 2; 1 < d3; d3--) {
                    bFld = true;
                    i4 = (int)d;
                    i4 = (int)-49495L;
                    Test.instanceCount += (long)d3;
                    i25 += (int)d;
                    if (false) break;
                    i1 += (int)d3;
                }
            }
            Test.iArrFld[i2 + 1] *= (int)f3;
            i4 += i2;
            i25 -= by3;
            i1 = i25;
            Test.instanceCount *= Test.instanceCount;
            i25 -= (int)f3;
            for (i26 = 71; i26 > 2; --i26) {
                Test.dArrFld[i26] = 0.543F;
                i27 += (i26 + i);
                i27 *= by3;
            }
        } while (++i2 < 357);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
