package tests.javafuzzer3083;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:32:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static volatile int iFld=-13;
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-5217);
        FuzzerUtils.init(Test.fArrFld, 1.194F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, double d) {

        int i5=-110, i6=84, i7=-119, iArr[]=new int[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -4961361556104725263L);
        FuzzerUtils.init(dArr, 0.92425);
        FuzzerUtils.init(iArr, 7);

        for (long l2 : lArr) {
            boolean b1=true;
            i5 += i5;
            dArr[(i5 >>> 1) % N] %= (i5 | 1);
            i5 -= (int)55.26684;
            b1 = b1;
            for (i6 = 1; i6 < 4; i6++) {
                int i8=97;
                Test.sArrFld[i6 - 1] <<= (short)i7;
                iArr[i6] >>>= (int)l1;
                iArr[(i8 >>> 1) % N] *= i7;
                Test.instanceCount <<= Test.instanceCount;
                i5 += i8;
                i7 >>= -40;
                Test.instanceCount = 11;
                l2 += (i6 + i6);
                lArr[i6 + 1] %= 74;
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d) + i5 + i6 + i7 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i1) {

        int i2=14, i3=14, i4=9, i9=46, i10=-9, iArr1[]=new int[N];
        boolean b=true;
        double d1=50.79409;

        FuzzerUtils.init(iArr1, -10);

        i2 = 1;
        while (++i2 < 375) {
            i1 += i2;
            b = b;
        }
        for (i3 = 1; i3 < 341; i3++) {
            i1 = iMeth(Test.instanceCount, d1);
            i1 = (int)l;
            i9 = 1;
            while (++i9 < 5) {
                i4 >>= 49910;
                i10 = i9;
                Test.instanceCount += (long)d1;
            }
            i1 -= i10;
            iArr1[i3] = i3;
            i1 += i3;
            iArr1[i3] += i10;
            i10 = i3;
        }
        vMeth_check_sum += l + i1 + i2 + (b ? 1 : 0) + i3 + i4 + Double.doubleToLongBits(d1) + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i) {


        vMeth(Test.instanceCount, i);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i11=141, i12=0, i13=9, i14=51079, i15=-8, i16=22719, i17=211, i18=237, i19=63489, i20=-37, i21=-5,
            iArr2[]=new int[N];
        long l3=-1839639588L;
        byte by=127;
        float f=35.566F;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 0);

        for (int smallinvoc=0; smallinvoc<133; smallinvoc++) vSmallMeth(i11);
        switch (((Test.iFld >>> 1) % 4) + 88) {
        case 88:
            Test.iFld >>= (int)l3;
            l3 *= Test.iFld;
            for (i12 = 21; i12 < 398; ++i12) {
                by -= (byte)1.800F;
                lArrFld[i12] = -5;
                i14 = 1;
                while (++i14 < 67) {
                    Test.iFld = (int)7L;
                    i11 += (i14 * i14);
                    for (f = 1; 1 > f; ++f) {
                        i15 >>= 9;
                        i13 *= i15;
                    }
                }
                i13 *= i12;
                l3 = Test.instanceCount;
                switch (((i12 % 8) * 5) + 18) {
                case 58:
                    Test.instanceCount += (i12 | Test.instanceCount);
                    break;
                case 42:
                    for (i16 = i12; 67 > i16; i16++) {
                        i17 += i16;
                        for (i18 = 1; i18 < 1; ++i18) {
                            bArr[i12 + 1][i12 - 1] = false;
                            iArr2[i12] -= -39188;
                            i13 <<= i13;
                            Test.instanceCount += (long)f;
                            l3 -= i13;
                        }
                        i11 = i17;
                        for (i20 = 1; i20 > 1; --i20) {
                            Test.instanceCount &= i15;
                            iArr2[i12] = (int)Test.instanceCount;
                            i17 >>>= i21;
                        }
                    }
                case 39:
                    i15 <<= i18;
                    break;
                case 57:
                    i21 += i13;
                    break;
                case 53:
                case 22:
                    Test.iFld = i13;
                case 51:
                    i15 *= i21;
                    break;
                case 24:
                    if (false) continue;
                default:
                    Test.fArrFld[i12] += i20;
                }
            }
            break;
        case 89:
            Test.iFld = i16;
            break;
        case 90:
            Test.iFld <<= i11;
        case 91:
            by = (byte)i16;
            break;
        default:
            i15 *= i19;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
