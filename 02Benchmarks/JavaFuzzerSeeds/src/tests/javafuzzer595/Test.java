package tests.javafuzzer595;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:17:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static float fFld=42.776F;
    public boolean bFld=true;
    public double dFld=-57.20640;
    public byte byFld=-59;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.sArrFld, (short)-23189);
        FuzzerUtils.init(Test.iArrFld1, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i6=-7, i7=34967, i8=0, i9=-65182, i10=250, i11=3;
        double d=1.39618;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 87.4F);

        for (i6 = 7; 385 > i6; i6++) {
            for (d = i6; d < 4; d++) {
                for (i9 = 1; i9 < 1; i9++) {
                    i8 = i10;
                    switch ((i6 % 2) + 105) {
                    case 105:
                        i10 = (int)Test.fFld;
                        i10 -= i9;
                        Test.sArrFld[i9] = (short)i11;
                        break;
                    case 106:
                        i7 += i6;
                        i8 *= i8;
                        break;
                    }
                    Test.instanceCount &= Test.instanceCount;
                    b = b;
                    if (false) continue;
                }
                fArr[(int)(d)] = Test.fFld;
                i11 += (int)(((d * i8) + i8) - i9);
            }
        }
        long meth_res = i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i4, int i5, float f) {

        int i12=4718, i13=-26862, i14=49399, i15=-203, i16=65045, i17=-27175;
        short s1=12641;

        Test.iArrFld[(i4 >>> 1) % N] &= (int)(iMeth1() + dFld);
        for (i12 = 11; 196 > i12; ++i12) {
            short s=6538;
            Test.instanceCount -= s;
            i13 *= i12;
            lArrFld = lArrFld;
        }
        i4 = byFld;
        i14 = 1;
        do {
            for (i15 = 1; i15 < 5; ++i15) {
                i5 *= i4;
                i17 = 1;
                while (++i17 < 2) {
                    switch ((((i15 >>> 1) % 7) * 5) + 8) {
                    case 27:
                        i16 -= i4;
                        i5 += (((i17 * i16) + i12) - i15);
                        break;
                    case 30:
                    case 37:
                        Test.instanceCount += (i17 - s1);
                        break;
                    case 20:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 25:
                    case 36:
                        f = i15;
                        break;
                    case 22:
                        lArrFld[i17 - 1] -= (long)f;
                        break;
                    default:
                        i13 *= 13309;
                    }
                }
            }
        } while (++i14 < 364);
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + i17 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i3) {

        short s2=-19705;
        int i18=6, i19=40598, i20=-51928, i21=9663, i22=1;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)114);

        Test.iArrFld[(i3 >>> 1) % N] <<= (int)(-47454 - ((i3 * i3) + (i3 / -5276L)));
        dFld *= Math.min(--i3, iMeth(i3, i3, Test.fFld));
        s2 >>>= s2;
        for (i18 = 314; i18 > 13; i18 -= 3) {
            Test.iArrFld[i18 + 1] -= i3;
            Test.instanceCount <<= i18;
            i20 = 1;
            do {
                i3 += (((i20 * i20) + Test.fFld) - i19);
                for (i21 = 1; i21 > 1; i21--) {
                    switch ((i18 % 7) + 7) {
                    case 7:
                        lArrFld[i20] -= (long)dFld;
                        i19 = 152;
                        dFld += i19;
                        lArrFld[i18 + 1] -= -12;
                        break;
                    case 8:
                        Test.iArrFld1 = Test.iArrFld1;
                        break;
                    case 9:
                    case 10:
                        i3 += (((i21 * byFld) + Test.fFld) - i21);
                    case 11:
                        if (bFld) continue;
                        break;
                    case 12:
                        i22 = -201;
                        break;
                    case 13:
                        byArr[i18] -= (byte)s2;
                        break;
                    }
                }
            } while (++i20 < 16);
        }
        vMeth_check_sum += i3 + s2 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=9, i1=29999, i2=4, i23=-15613, i24=46, i25=141, i26=107, i27=17795;
        long l1=-9477L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i = 346; i > 14; --i) {
            i2 = 1;
            do {
                i1 += (int)(33797L - ((Test.fFld - i2) / (lArrFld[i - 1] | 1)));
                i1 >>= i2;
                i1 >>>= i;
                bFld = bArr[i2];
                vMeth(i2);
                Test.instanceCount >>>= i2;
                i1 <<= (int)Test.instanceCount;
                for (i23 = 1; i23 < 2; i23++) {
                    i1 = (int)Test.fFld;
                    Test.instanceCount += i23;
                }
                i1 = (int)dFld;
                Test.iArrFld1[i2 + 1][i - 1] += i23;
            } while ((i2 += 2) < 76);
            i1 += (int)Test.fFld;
            Test.iArrFld[i] = (int)-174L;
            i25 = 1;
            while (++i25 < 76) {
                Test.instanceCount += (32251 + (i25 * i25));
                Test.iArrFld1[i25 + 1][i] -= (int)Test.instanceCount;
                i24 %= (int)(Test.instanceCount | 1);
                lArrFld[i25 + 1] -= Test.instanceCount;
                i1 += (int)120L;
                Test.instanceCount *= (long)dFld;
                i24 += (i25 | i2);
            }
            Test.iArrFld[i] -= 0;
        }
        i1 *= (int)l1;
        for (i26 = 12; i26 < 218; ++i26) {
            Test.instanceCount = Test.instanceCount;
            i24 >>= (int)l1;
            i27 <<= i2;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
