package tests.javafuzzer1331;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=231L;
    public static double dFld=35.72981;
    public static int iFld=1;
    public static short sFld=9474;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -92.672F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(int i1) {

        byte by=24;

        by = (byte)(2.972F - (i1 + (-12631 >> (i1 += i1))));
        vSmallMeth_check_sum += i1 + by;
    }

    public static int iMeth() {

        int i12=24030, i13=-4, i14=-235, i15=4, i16=-13, iArr1[]=new int[N];
        float f1=-7.470F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, 207);
        FuzzerUtils.init(fArr1, 65.695F);

        Test.instanceCount += (long)Test.dFld;
        i12 = 1;
        while (++i12 < 149) {
            Test.iFld = 181;
        }
        for (i13 = 12; i13 < 266; ++i13) {
            Test.iFld >>= i12;
            Test.iFld += (((i13 * Test.iFld) + Test.sFld) - Test.instanceCount);
        }
        iArr1[(i13 >>> 1) % N] &= (int)Test.instanceCount;
        iArr1[(i13 >>> 1) % N] = 112;
        i14 -= (int)f1;
        for (i15 = 7; 316 > i15; i15++) {
            fArr1[(Test.iFld >>> 1) % N] += Test.instanceCount;
            iArr1[i15] *= i16;
            f1 += (i15 + f1);
            i16 = (int)Test.instanceCount;
            i16 += (i15 ^ Test.instanceCount);
        }
        long meth_res = i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1) {

        long l2=-137L;
        int i11=41647, i17=1, i18=-56, i19=245, i20=-124;
        byte by1=-127;
        boolean b1=true;
        float f2=0.295F;

        for (l2 = 8; 355 > l2; ++l2) {
            i11 += (++i11);
            by1 += (byte)iMeth();
            Test.iFld += (int)l2;
            b1 = b1;
            Test.iFld -= (int)f2;
            Test.iFld += (int)(l2 * l2);
        }
        for (i17 = 129; i17 > 1; i17 -= 3) {
            Test.fArrFld[i17 + 1] -= (float)Test.dFld;
            Test.sFld += (short)(i17 + i11);
            Test.dFld += Test.iFld;
            Test.iFld += i17;
            for (i19 = 2; i19 < 36; i19++) {
                i20 >>= (int)Test.instanceCount;
                l1 = i11;
            }
        }
        vMeth1_check_sum += l1 + l2 + i11 + by1 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20;
    }

    public static void vMeth(boolean b, int i6, int i7) {

        int i8=9, i9=8, i10=48374, i21=-10, iArr[]=new int[N];
        double d=2.111059;
        float f=58.264F, fArr[]=new float[N];
        long l=-8L;

        FuzzerUtils.init(fArr, 0.491F);
        FuzzerUtils.init(iArr, -70);

        for (i8 = 6; i8 < 341; i8++) {
            i9 += (--i6);
            d = ((i7 -= (int)(-130 + (f + -8L))) + (fArr[i8] *= (0.110F + (--iArr[i8]))));
            for (l = 1; l < 5; ++l) {
                vMeth1(Test.instanceCount);
                Test.iFld += (int)(l | i7);
                Test.instanceCount &= 3;
                i9 |= i8;
            }
            Test.iFld += (int)(97L + (i8 * i8));
            i21 = 1;
            while (++i21 < 5) {
                iArr = FuzzerUtils.int1array(N, (int)155);
            }
        }
        d -= Test.instanceCount;
        Test.instanceCount = l;
        vMeth_check_sum += (b ? 1 : 0) + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + l +
            i10 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i2=-42243, i3=-6, i4=59513, i5=-9, i22=137, i23=-6, i25=-136, i26=-6, i27=38592;
        boolean b2=false;
        float f3=1.999F;
        byte by2=35, byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-21);

        switch ((((i + i) >>> 1) % 9) + 49) {
        case 49:
            for (int smallinvoc=0; smallinvoc<832; smallinvoc++) vSmallMeth((int)((i++) & ((iArrFld[(-45 >>> 1) % N]++)
                - Long.reverseBytes(Test.instanceCount))));
            for (i2 = 15; i2 < 256; i2++) {
                for (i4 = 1; 104 > i4; i4++) {
                    vMeth(b2, i5, Test.iFld);
                    for (i22 = 2; 1 < i22; --i22) {
                        int i24=-96;
                        i = (int)Test.instanceCount;
                        i3 /= (int)(i | 1);
                        b2 = b2;
                        if (b2) continue;
                        i3 = i23;
                        iArrFld[i4 + 1] = i4;
                        i3 -= (int)f3;
                        Test.dFld = Test.dFld;
                        i3 -= i24;
                        by2 = (byte)i22;
                    }
                    iArrFld = iArrFld;
                    switch ((i2 % 5) + 102) {
                    case 102:
                        i <<= i4;
                        for (i25 = i2; 2 > i25; ++i25) {
                            b2 = b2;
                            f3 += (3 + (i25 * i25));
                            Test.sFld *= (short)Test.dFld;
                            switch (((i2 % 10) * 5) + 100) {
                            case 147:
                                i = (int)Test.instanceCount;
                                iArrFld[i2] = i26;
                                Test.instanceCount >>= 9432;
                                break;
                            case 117:
                                Test.iFld = (int)-30.116F;
                                i27 *= (int)Test.dFld;
                                iArrFld[i2 + 1] -= 61150;
                            case 138:
                                if (true) continue;
                                break;
                            case 113:
                                if (b2) break;
                                break;
                            case 122:
                                Test.iFld >>= i25;
                                break;
                            case 110:
                                Test.sFld += (short)(-6 + (i25 * i25));
                                break;
                            case 142:
                                if (b2) continue;
                                break;
                            case 129:
                                Test.iFld = (int)Test.instanceCount;
                            case 119:
                                Test.dFld = Test.instanceCount;
                                break;
                            case 116:
                                Test.instanceCount += i2;
                                break;
                            default:
                                i23 -= i2;
                            }
                        }
                    case 103:
                        i3 -= (int)-84.484F;
                    case 104:
                        Test.dFld *= i25;
                    case 105:
                        byArr[i2 + 1] = byArr[i4 + 1];
                        break;
                    case 106:
                    }
                }
            }
            break;
        case 50:
            i3 = i22;
            break;
        case 51:
            i5 += 70;
            break;
        case 52:
            i23 = (int)f3;
        case 53:
        case 54:
            i3 += i27;
        case 55:
        case 56:
        case 57:
            i = i3;
        default:
            Test.instanceCount += i27;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
