package tests.javafuzzer1328;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:26:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=24528L;
    public static int iFld=-82;
    public static double dFld=66.65793;
    public static boolean bFld=false;
    public static int iFld1=23981;
    public static byte byFld=-80;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 109);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8) {

        int i9=-10, i10=9, i11=-37430, i12=30816, i13=-63461, i14=3;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.790F);

        i8 *= i8;
        i9 = 247;
        do {
            for (i10 = 7; i10 > 1; --i10) {
                Test.instanceCount <<= i10;
                for (i12 = i10; 2 > i12; ++i12) {
                    i13 += (162 + (i12 * i12));
                    if (true) {
                        Test.iFld <<= i10;
                        Test.bFld = Test.bFld;
                        Test.iArrFld[i12 - 1] *= (int)80.126732;
                        if (Test.bFld) {
                            try {
                                i11 = (Test.iArrFld[i12] / -41950);
                                Test.iFld = (-113 / i13);
                                i8 = (Test.iFld % 182);
                            } catch (ArithmeticException a_e) {}
                            if (i11 != 0) {
                                vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                return;
                            }
                        } else {
                            Test.iFld1 = 156;
                            i13 = -233;
                        }
                    } else if (true) {
                        fArr1[i10 - 1] *= i14;
                    }
                }
            }
        } while (--i9 > 0);
        vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(boolean b) {

        int i5=238, i6=-1, i7=88, i15=40;
        byte by=-28;
        float f=0.309F, f1=-1.850F, fArr[][]=new float[N][N];
        long l=-2L;

        FuzzerUtils.init(fArr, -1.409F);

        Test.iFld = (int)fArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N];
        for (i5 = 6; i5 < 183; ++i5) {
            i7 = 1;
            do {
                Test.instanceCount *= (long)(Math.max((long)(Test.iFld + Test.dFld), Test.instanceCount) +
                    (++Test.dFld));
                vMeth2(Test.iFld);
                by += (byte)(((i7 * Test.iFld1) + i7) - Test.iFld);
                Test.iFld1 += (int)Test.instanceCount;
            } while (++i7 < 9);
            Test.iFld += i5;
            Test.iFld1 <<= -219;
            f -= Test.iFld1;
            for (l = 1; l < 9; ++l) {
                i6 += i6;
                f1 = 1;
                do {
                    Test.instanceCount += (long)((long)f1 | i5);
                    by >>= (byte)l;
                } while (++f1 < 2);
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i5 + i6 + i7 + by + Float.floatToIntBits(f) + l + i15 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i3, int i4) {

        double d=-12.60647;
        int i16=31, i17=3, i18=106, i19=19, i20=0;
        float f2=-125.627F;
        short s=-25820;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2L);

        vMeth1(Test.bFld);
        for (d = 175; d > 10; d -= 2) {
            lArr[(int)(d - 1)] = (long)f2;
            Test.iArrFld[(int)(d - 1)] >>>= i3;
            Test.iFld -= (int)f2;
            for (i17 = 1; i17 < 19; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.instanceCount = s;
                    Test.iFld1 = (int)-6L;
                    i18 &= 34346;
                    Test.dFld -= Test.instanceCount;
                    i20 += i16;
                    i3 -= i16;
                    i3 = (int)8145L;
                    Test.byFld *= (byte)i20;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i16 + Float.floatToIntBits(f2) + i17 + i18 + i19 +
            i20 + s + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=4, i2=10, i21=-12511, i22=12, i23=-19;
        long l1=8738244200510553282L;
        short s1=616;
        float f4=30.782F, f5=-2.238F;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 43.10117);

        dArr[(189 >>> 1) % N][(i >>> 1) % N] += i;
        for (i1 = 262; i1 > 1; i1--) {
            vMeth(i2, Test.iFld1);
            i21 = (int)Test.instanceCount;
            Test.iFld1 += i1;
            Test.bFld = Test.bFld;
            if (Test.bFld) {
                Test.instanceCount = Test.instanceCount;
                if (Test.bFld) {
                    for (l1 = 6; l1 < 96; ++l1) {
                        float f3=-1.724F;
                        Test.iArrFld[(int)(l1 + 1)] >>= 18661;
                        s1 >>= (short)i;
                        Test.iArrFld[(int)(l1)] = Test.iFld1;
                        Test.iArrFld[(int)(l1)] = (int)f3;
                        Test.iFld1 += (int)(((l1 * i2) + i1) - f3);
                    }
                } else {
                    f4 = 1;
                    do {
                        i = Test.iFld;
                        i21 = i21;
                        i21 = (int)l1;
                        Test.iArrFld[i1] += i;
                        Test.iFld += (int)(((f4 * i21) + Test.iFld) - i21);
                        Test.instanceCount -= i;
                    } while (++f4 < 96);
                }
                i22 = i;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)8);
            } else {
                i21 += i1;
                for (f5 = 4; f5 < 96; f5++) {
                    Test.instanceCount = i1;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-70);
                    i22 = -11;
                    Test.instanceCount += (-127 + (f5 * f5));
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
