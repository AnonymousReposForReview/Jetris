package tests.javafuzzer1233;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:53:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2695860492234556299L;
    public double dFld=-62.79558;
    public static volatile int iFld=187;
    public static volatile short sFld=-25923;
    public static float fFld=39.910F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10410);
        FuzzerUtils.init(Test.lArrFld, -46802L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i10=0, i11=-14, i12=-228, i13=6438, i14=8;
        boolean b=true;
        double d=-1.1110, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 122.108806);

        i10 = 1;
        do {
            Test.iArrFld[i10] = (int)-1115651362L;
            Test.iFld += i10;
        } while (++i10 < 384);
        i11 = 1;
        do {
            if (b) continue;
            if (b) {
                Test.instanceCount = Test.iFld;
            } else {
                i12 = 14;
                while (--i12 > 0) {
                    for (i13 = 1; i13 < 1; i13 += 3) {
                        Test.iFld += (i13 * i12);
                        d += -47079L;
                        Test.iFld /= (int)(Test.iFld | 1);
                        i14 = (int)Test.instanceCount;
                        Test.instanceCount = i12;
                        dArr[i12 + 1] -= Test.instanceCount;
                    }
                }
            }
        } while ((i11 += 3) < 336);
        vMeth_check_sum += i10 + i11 + (b ? 1 : 0) + i12 + i13 + i14 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i6, short s, float f1) {

        int i7=30179, i8=-38, i9=-31;
        double d1=-1.88877;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.948F);

        Test.iFld = i6;
        Test.iFld *= (int)(Test.instanceCount - ((Test.instanceCount + f1) + fArr[(i6 >>> 1) % N]));
        f1 += Test.lArrFld[(-107 >>> 1) % N];
        for (i7 = 18; i7 < 311; ++i7) {
            i8 *= (int)((--Test.instanceCount) - Test.iFld);
            i6 += (i7 | i6);
            i9 = 1;
            while (++i9 < 6) {
                i6 >>= (int)(Test.instanceCount--);
                i8 += Math.max(Integer.reverseBytes(Test.iFld = s), i7);
                vMeth();
                f1 = -8;
            }
            i6 ^= i9;
            if (true) {
                Test.instanceCount = (long)d1;
                Test.iArrFld[i7 + 1] = Test.iFld;
            } else {
                Test.instanceCount += Test.instanceCount;
            }
        }
        long meth_res = i6 + s + Float.floatToIntBits(f1) + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(long l, float f) {

        int i2=-142, i3=58071, i4=-63752, i5=-124, i15=-5, i16=-1;
        byte by=-64;

        Test.iFld &= Test.iFld;
        for (i2 = 7; i2 < 132; ++i2) {
            for (i4 = 1; i4 < 13; ++i4) {
                Test.iArrFld[i2 - 1] <<= ((i3 <<= (-iMeth(i4, Test.sFld, f))) * by);
                Test.iFld += (i4 * i4);
                Test.iArrFld[i4 + 1] *= Test.iFld;
                i5 += (i4 * i5);
            }
            i3 -= 7;
            for (i15 = 13; i15 > 1; i15 -= 2) {
                switch (((i2 % 2) * 5) + 89) {
                case 91:
                    switch (((1 >>> 1) % 2) + 91) {
                    case 91:
                        Test.iFld = i16;
                        i3 += i2;
                        break;
                    case 92:
                        Test.iArrFld[i15 + 1] *= Test.iFld;
                        break;
                    default:
                        Test.iFld += (i15 * i15);
                    }
                case 96:
                    Test.instanceCount >>= i3;
                    break;
                default:
                    i5 = -9615;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + by + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=127, i1=-13113, i17=22891, i18=14937, iArr[]=new int[N];
        double d2=2.129191;

        FuzzerUtils.init(iArr, 241);

        for (i = 125; i > 2; i -= 2) {
            switch ((i % 10) + 44) {
            case 44:
                dFld *= (Test.iArrFld[i - 1] -= (++i1));
                Test.iArrFld[i - 1] = (int)(lMeth(Test.instanceCount, Test.fFld) + 7723135579248740627L);
            case 45:
            case 46:
                i1 += i;
                Test.iFld |= i;
                Test.lArrFld[i - 1] -= i;
                break;
            case 47:
                i17 = 1;
                do {
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount = (long)dFld;
                    i1 *= (int)dFld;
                    for (d2 = 1; d2 < 4; ++d2) {
                        Test.iArrFld[i + 1] = Test.iFld;
                        i18 += (int)d2;
                        i1 += (int)d2;
                        i18 ^= i18;
                        Test.lArrFld[i17 + 1] += Test.sFld;
                        Test.instanceCount += Test.instanceCount;
                        Test.instanceCount = Test.sFld;
                        Test.iFld += (int)-123.29543;
                    }
                    i18 = (int)Test.fFld;
                    Test.lArrFld[i17 + 1] = Test.iFld;
                    i18 += i17;
                    Test.lArrFld[i17 - 1] <<= i;
                    Test.iFld *= Test.iFld;
                    if (true) break;
                } while (++i17 < 121);
                Test.instanceCount += (i * i);
                i1 += (i | Test.instanceCount);
                Test.iFld = 12;
                break;
            case 48:
                Test.fFld += (i + Test.fFld);
                break;
            case 49:
                i18 += (i + i1);
                break;
            case 50:
                i18 = Test.iFld;
                break;
            case 51:
                iArr[i] -= 6448;
                break;
            case 52:
                i1 = i1;
                break;
            case 53:
                i1 >>>= Test.sFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
