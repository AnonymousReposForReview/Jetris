package tests.javafuzzer782;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:43:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2525907245L;
    public static double dFld=0.100866;
    public static float fFld=1.950F;
    public static short sFld=21288;
    public static byte byFld=101;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.lArrFld, 221L);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, double d, int i12) {

        int i13=-29414, i14=11645, i15=-38954, i16=-14, i17=7;
        byte by1=47;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 14L);

        for (i13 = 10; i13 < 238; i13++) {
            Test.instanceCount = i12;
            Test.fFld = i14;
            switch (((i14 >>> 1) % 10) + 46) {
            case 46:
                i12 = (int)Test.fFld;
                i15 = 1;
                while (++i15 < 7) {
                    for (i16 = 1; i16 < 1; i16++) {
                        Test.fFld *= (float)d;
                        l += (192 + (i16 * i16));
                        Test.fFld *= 93;
                        Test.instanceCount = i12;
                        i17 = by1;
                        Test.fFld = by1;
                        Test.iArrFld[i13 - 1] = 17576;
                    }
                    i12 <<= i16;
                }
            case 47:
                lArr1[i13] -= Test.sFld;
                break;
            case 48:
                i12 -= (int)Test.instanceCount;
            case 49:
                by1 = (byte)i16;
                break;
            case 50:
                Test.dFld = i16;
                break;
            case 51:
                i12 -= (int)l;
                break;
            case 52:
                if (true) continue;
            case 53:
            case 54:
                Test.iArrFld[i13] = (int)1.220F;
                break;
            case 55:
                by1 = (byte)Test.fFld;
                break;
            default:
                d += l;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 + i17 + by1 +
            FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i5=36, i6=47721, i7=-123, i8=60283, i9=40825, i10=11, i11=5, iArr1[]=new int[N];
        byte by=41;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 13);
        FuzzerUtils.init(fArr, -2.363F);

        for (i5 = 5; 265 > i5; ++i5) {
            try {
                i6 = (i6 % 17035);
                i6 = (21302 / i6);
                i6 = (i6 % i6);
            } catch (ArithmeticException a_e) {}
            i7 = 6;
            while (--i7 > 0) {
                i6 = (int)Test.fFld;
            }
            for (i8 = i5; i8 < 6; ++i8) {
                switch ((i8 % 2) + 65) {
                case 65:
                    by += (byte)(Math.max(i6 * i5, ++iArr1[i8 + 1]) % (((long)(Test.dFld += (Test.instanceCount--))) |
                        1));
                    i6 = (--i9);
                    i9 *= (int)(((i9 + i5) + Short.reverseBytes(Test.sFld)) * (fArr[i5] + (i9 + i5)));
                case 66:
                    for (i10 = 1; i10 > 1; i10--) {
                        if (b) continue;
                        i11 *= (((i6 & i6) + Math.max(i8, i11)) * by);
                        i6 <<= iMeth1(Test.instanceCount, Test.dFld, i7);
                        Test.instanceCount <<= Test.instanceCount;
                        Test.fFld += (((i10 * Test.fFld) + i6) - i7);
                    }
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + by + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        float f=1.477F;
        int i1=28, i2=183, i3=-29956, i4=7, i18=11, i19=3, iArr[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 100);
        FuzzerUtils.init(lArr, -14L);

        for (f = 13; f < 297; ++f) {
            iArr = iArr;
            for (i2 = 1; 6 > i2; ++i2) {
                i1 = (int)(Integer.reverseBytes((int)(Test.fFld + i4)) - lArr[(int)(f)][i2]);
                if (iMeth() != Test.fFld) continue;
                Test.fFld += 48.103F;
                i3 += i2;
                i1 >>= -31742;
                Test.instanceCount = i3;
                iArr[i2 + 1] = i4;
            }
            for (i18 = (int)(f); i18 < 6; i18++) {
                Test.iArrFld[i18 + 1] = i2;
                i1 += (-7306 + (i18 * i18));
                Test.fFld = Test.fFld;
                i1 += (i18 * i18);
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i18 + i19 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=137, i20=33, i21=35799, i22=-193, i23=38529, i24=13513, i25=2, i26=-133, i27=71, i28=2402, i29=56950,
            i30=37947;
        double d1=0.113882;
        boolean b1=true;

        Test.instanceCount = (long)(((-7095717020936311448L - (Test.dFld++)) + (Test.instanceCount * i)) + sMeth());
        i = i;
        i <<= i;
        i += i;
        i *= i;
        Test.fFld += Test.instanceCount;
        i += i;
        for (i20 = 19; i20 < 395; ++i20) {
            Test.dFld *= Test.instanceCount;
            for (i22 = 4; 67 > i22; ++i22) {
                Test.byFld <<= (byte)33;
                i23 = i;
                i23 += i21;
                for (i24 = i22; i24 < 2; ++i24) {
                    Test.lArrFld[i22 + 1] -= i21;
                    Test.iArrFld[i20 + 1] = 95;
                    i23 += (((i24 * Test.byFld) + Test.instanceCount) - Test.instanceCount);
                    i25 = Test.byFld;
                }
            }
            for (i26 = 67; i26 > 2; i26--) {
                i23 = i26;
                i -= (int)Test.instanceCount;
                i21 += (((i26 * i25) + i27) - i25);
                for (d1 = 1; d1 < 2; ++d1) {
                    i25 = i23;
                    Test.dFld = -30893;
                    b1 = b1;
                }
                Test.iArrFld[i26 - 1] = (int)Test.fFld;
                for (i29 = 1; i29 < 2; i29++) {
                    Test.iArrFld[i20 - 1] = i26;
                    i28 = i23;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
