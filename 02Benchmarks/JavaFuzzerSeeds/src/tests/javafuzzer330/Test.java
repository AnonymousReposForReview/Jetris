package tests.javafuzzer330;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:00:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4992292091331479354L;
    public static float fFld=27.614F;
    public int iFld=27249;
    public boolean bFld=false;
    public int iFld1=4;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6833186803323855076L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, long l) {

        int i5=-10, i6=0, i7=-145, i8=49825, i9=6, i10=52594, i11=0, iArr[]=new int[N];
        short s=22132;
        double d=-37.5850;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(bArr, false);

        Test.instanceCount <<= i5;
        s = (short)i5;
        i5 = i5;
        for (i6 = 12; 238 > i6; i6++) {
            byte by=95;
            by %= (byte)(i7 | 1);
            for (i8 = 1; 7 > i8; i8++) {
                l += by;
                for (i10 = 1; 2 > i10; i10++) {
                    s -= (short)6L;
                    iArr = iArr;
                    i5 += -110;
                }
            }
            switch ((((4 >>> 1) % 8) * 5) + 52) {
            case 62:
                d = i6;
                i7 -= i5;
                break;
            case 64:
                i7 += i11;
                break;
            case 91:
                d = f1;
                break;
            case 90:
                i9 -= (int)d;
            case 84:
                bArr[i6] = false;
            case 55:
                f1 += (44467 + (i6 * i6));
                break;
            case 71:
                i7 = (int)l;
                break;
            case 65:
                iArr[i6 - 1] = i5;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + i5 + s + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, int i3, int i4) {

        int i12=62010, i13=23, i14=-11, i15=26801;
        short s1=15770;
        boolean b=false;

        i2 <<= (--i3);
        i4 += iMeth(Test.fFld, Test.instanceCount);
        for (i12 = 3; 251 > i12; ++i12) {
            Test.fFld -= i13;
            Test.instanceCount += 55341;
            for (i14 = 7; i14 > 1; i14--) {
                i15 *= i3;
                i15 = (int)Test.instanceCount;
            }
            Test.fFld = 34745;
            i2 &= (int)1851614702L;
            s1 += (short)(i12 * i2);
        }
        b = b;
        vMeth1_check_sum += i2 + i3 + i4 + i12 + i13 + i14 + i15 + s1 + (b ? 1 : 0);
    }

    public static void vMeth(int i, int i1, float f) {

        double d1=0.130883, d2=0.18311;
        int i16=-3, i17=31620, i18=-7, i19=240, iArr1[]=new int[N];
        float f2=90.190F, fArr[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, -132);
        FuzzerUtils.init(fArr, 74.830F);

        vMeth1(i, i, i);
        for (d1 = 1; d1 < 327; ++d1) {
            for (f2 = 1; f2 < 5; f2++) {
                for (i18 = 1; i18 < 2; i18++) {
                    d2 += 1;
                    iArr1[(int)(f2)] -= i19;
                    i16 *= i16;
                    fArr[(int)(d1 + 1)] += -8;
                    i17 += i18;
                    if (b1) break;
                }
                Test.instanceCount = i19;
                Test.fFld += Test.instanceCount;
                iArr1[(int)(f2)] &= -233;
                try {
                    i17 = (i19 / 52622);
                    iArr1[(int)(f2 + 1)] = (i17 / i18);
                    i16 = (i19 % 18239);
                } catch (ArithmeticException a_e) {}
                Test.lArrFld[(int)(d1 + 1)] += i16;
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i16 +
            Float.floatToIntBits(f2) + i17 + i18 + i19 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i20=-1781, i21=19438, i22=-10, i23=-50, i24=25704, i25=27885, i26=-36108, i27=-13852, i28=52110, i29=54717,
            i30=-33736, i31=-40, iArr2[]=new int[N];
        double d3=99.33980;

        FuzzerUtils.init(iArr2, -8);

        vMeth(iFld, iFld, Test.fFld);
        for (i20 = 7; i20 < 127; i20++) {
            i21 = (int)d3;
            iArr2[i20 + 1] += iFld;
            for (i22 = 209; i22 > 1; i22--) {
                Test.fFld *= 62;
                i21 -= (int)Test.instanceCount;
            }
            for (i24 = 13; i24 < 209; i24++) {
                i21 += (int)Test.instanceCount;
                Test.instanceCount += i24;
            }
        }
        for (i26 = 11; i26 < 299; ++i26) {
            iArr2[i26 - 1] = i24;
            i27 = i21;
            Test.instanceCount -= -58015;
            Test.fFld -= i26;
            bFld = bFld;
            for (i28 = 87; 5 < i28; --i28) {
                Test.instanceCount += iFld;
                i27 &= 186;
                for (i30 = 1; i30 < 2; i30++) {
                    bFld = bFld;
                    i21 -= 95;
                    i21 += iFld1;
                    iArr2[i28 + 1] -= i25;
                    Test.instanceCount += 12;
                }
                Test.instanceCount -= (long)1.10185;
                Test.instanceCount >>= i29;
                Test.lArrFld[i26] += iFld1;
                Test.fFld = Test.instanceCount;
                iFld -= i26;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
