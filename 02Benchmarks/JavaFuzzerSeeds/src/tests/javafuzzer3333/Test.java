package tests.javafuzzer3333;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:16:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3148592907199275150L;
    public static float fFld=-86.780F;
    public static boolean bFld=true;
    public static short sFld=31283;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -7);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=56208, i3=-141, i4=4, i5=-12, i6=45289, i7=-7, iArr[]=new int[N];
        boolean b=true;
        byte by=-64;
        double d1=0.101566;

        FuzzerUtils.init(iArr, 2);

        Test.instanceCount += i2;
        Test.instanceCount -= i2;
        for (i3 = 22; i3 < 382; i3++) {
            for (i5 = 1; i5 < 5; ++i5) {
                b = b;
                i4 |= by;
                Test.fFld += (((i5 * by) + Test.fFld) - i6);
                i7 = 1;
                while (++i7 < 2) {
                    i2 -= 13;
                    iArr[i7 + 1] -= i6;
                    Test.instanceCount -= Test.instanceCount;
                    d1 = 0.374F;
                    try {
                        i4 = (45960 / i6);
                        iArr[i3 + 1] = (-165 % iArr[i3]);
                        i2 = (i5 % -1);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.instanceCount;
                }
                d1 -= Test.instanceCount;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + by + i7 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i8=18234, i9=53019, i10=0, i11=-9359, i12=-5;
        long l=53303L;

        vMeth1();
        i8 = 1;
        while (++i8 < 168) {
            Test.iArrFld1[i8] -= i8;
            for (i9 = 1; i9 < 9; i9++) {
                if (Test.bFld) break;
            }
            Test.instanceCount -= Test.instanceCount;
            for (l = 1; l < 9; ++l) {
                Test.fFld = l;
                i10 += (-7 + (l * l));
                i12 = 1;
                do {
                    i10 += (i12 | i12);
                    i10 = i12;
                    i10 -= (int)62118L;
                    i11 = -13;
                    i10 -= (int)Test.fFld;
                } while (++i12 < 2);
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + l + i11 + i12;
    }

    public static int iMeth(short s) {

        int i1=-25148, i13=-17525, i14=-252, i15=-61454, i16=9, i17=-45597;
        double d=123.13105;
        byte by1=-17;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-30006);
        FuzzerUtils.init(fArr, -1.757F);

        i1 -= (int)(d * ((-(i1 - i1)) + i1));
        vMeth();
        i1 = i1;
        sArr[(-97 >>> 1) % N] = (short)i1;
        i13 = 143;
        while ((i13 -= 3) > 0) {
            i1 = 9466;
            i1 = (int)Test.instanceCount;
        }
        for (i14 = 1; i14 < 123; i14++) {
            s = by1;
            i16 = 1;
            while (++i16 < 13) {
                i17 = 1;
                while (++i17 < 1) {
                    fArr[i14 - 1] = i14;
                    d = Test.fFld;
                    try {
                        i15 = (-40822 / i13);
                        i15 = (-15288 % i1);
                        i1 = (Test.iArrFld1[i17 + 1] / Test.iArrFld1[i14 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i15 >>= (int)11483L;
                }
            }
        }
        long meth_res = s + i1 + Double.doubleToLongBits(d) + i13 + i14 + i15 + by1 + i16 + i17 +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i18=-11;

        iArrFld[(i >>> 1) % N] -= iMeth(Test.sFld);
        iArrFld[(i >>> 1) % N] = (int)-3L;
        i18 = 1;
        while (++i18 < 316) {
            Test.instanceCount ^= 17;
            i = i18;
        }
        i -= 4;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
