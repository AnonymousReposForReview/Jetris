package tests.javafuzzer2107;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:08:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public byte byFld=-42;
    public static int iFld=1083;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8696268447514078348L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i6, long l3) {

        int i7=58, i8=-3, i9=251, i10=-50151, i11=-17432, i12=3, iArr1[][]=new int[N][N];
        short s1=-21856;
        boolean b1=true;
        double d=2.83181;

        FuzzerUtils.init(iArr1, 83);

        for (i7 = 8; 137 > i7; ++i7) {
            iArr1[i7 - 1] = iArr1[i7 - 1];
            switch (((i7 % 5) * 5) + 84) {
            case 104:
                s1 *= (short)i6;
                i8 = i8;
                break;
            case 86:
                b1 = b1;
                if (b1) {
                    for (i9 = 1; i9 < 12; i9++) {
                        for (i11 = 1; 2 > i11; ++i11) {
                            try {
                                i6 = (i10 % -169);
                                iArr1[i11][i11 + 1] = (i10 / -21628);
                                i12 = (i11 / iArr1[i7][i11 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i6 += (i11 * i11);
                            iArr1[i9] = iArr1[i7];
                            d = Test.instanceCount;
                            Test.lArrFld[i11 + 1] *= 52964;
                        }
                        b1 = b1;
                    }
                } else if (b1) {
                    i6 += i6;
                } else {
                    i10 += i7;
                }
                break;
            case 97:
                iArr1[i7 - 1] = iArr1[i7];
                break;
            case 91:
                i10 = (int)l3;
            case 108:
                i10 = (int)Test.instanceCount;
                break;
            default:
                i12 = (int)l3;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i6 + l3 + i7 + i8 + s1 + (b1 ? 1 : 0) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l1, long l2) {

        float f2=-84.206F;

        vMeth1(f2, Test.iFld, l1);
        vMeth_check_sum += l1 + l2 + Float.floatToIntBits(f2);
    }

    public static int iMeth(float f, int i5, long l) {

        boolean b2=false;
        double d1=-2.65556;
        int i13=54861, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -14);

        vMeth(l, l);
        b2 = true;
        i5 = Test.iFld;
        Test.iFld -= -10;
        for (d1 = 21; d1 < 347; d1++) {
            i5 -= 7;
        }
        Test.iFld -= (int)-7951897426576209458L;
        iArr2[(i5 >>> 1) % N] /= (int)-1.269F;
        long meth_res = Float.floatToIntBits(f) + i5 + l + (b2 ? 1 : 0) + Double.doubleToLongBits(d1) + i13 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=45069, i1=-9, i2=-8, i3=-18957, i4=34, i14=-28003, i15=15, i16=226, i17=134, i18=3801, i19=11, i20=8,
            i21=-21597, iArr[]=new int[N];
        short s=-20261;
        boolean b=true, bArr[]=new boolean[N];
        float f3=-2.428F;

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(bArr, false);

        i = 1;
        while (++i < 382) {
            s = (short)(--s);
        }
        for (i1 = 215; i1 > 6; i1--) {
            for (i3 = 4; i3 < 120; i3 += 2) {
                Test.instanceCount += (i3 | i2);
                i4 %= (int)(iArr[i1 - 1] | 1);
            }
            if ((b = ((-54703 != (40936 + (-(-(Test.instanceCount + Test.instanceCount))))) || (b = b))) && ((b = b) &&
                (i2 != Math.max(i4, i)))) break;
            byFld = (byte)(i3 - iMeth(f3, i1, Test.instanceCount));
        }
        Test.iFld -= i1;
        for (i14 = 3; i14 < 134; ++i14) {
            i4 += (int)Test.instanceCount;
            for (i16 = 5; i16 < 191; i16++) {
                Test.instanceCount &= 87;
                i17 += (i16 - Test.instanceCount);
                switch ((i14 % 1) + 109) {
                case 109:
                    for (i18 = 1; i18 < 2; ++i18) {
                        iArr[i14] >>= (int)-1858566600L;
                        i2 += i18;
                        iArr[i16] = i4;
                        i15 = (int)f3;
                        Test.lArrFld[i14 - 1] -= Test.instanceCount;
                        i19 += (i18 ^ Test.iFld);
                        f3 += (((i18 * i18) + f3) - i14);
                        i2 = s;
                    }
                    Test.iFld += 11;
                    for (i20 = 1; i20 < 2; ++i20) {
                        bArr[i20] = true;
                        f3 += f3;
                        Test.instanceCount += i20;
                        try {
                            iArr[i14] = (i4 % iArr[i16]);
                            i21 = (-97 % iArr[i16]);
                            i19 = (iArr[i14 - 1] % i16);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
