package tests.javafuzzer1068;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:58:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6743430676923065269L;
    public short sFld=7557;
    public static double dFld=2.51610;
    public static boolean bFld=false;
    public static int iFld=-61115;
    public float fFld=0.709F;
    public volatile float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 62);
        FuzzerUtils.init(Test.lArrFld, 29L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, int i10, double d1) {

        int i11=-1, i12=59159, i13=35792, i14=14493;
        short s=5674;

        for (i11 = 14; i11 < 319; i11++) {
            byte by=-78;
            i12 += (((i11 * i12) + i9) - i9);
            by += (byte)(i11 + i12);
            i9 += (37993 + (i11 * i11));
            for (i13 = 1; i13 < 5; ++i13) {
                i9 += (i13 ^ Test.instanceCount);
            }
            s -= by;
        }
        Test.instanceCount = i12;
        long meth_res = i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i4) {

        int i5=-101, i6=-18001, i7=-6, i8=-14, i15=9766, i16=-10;
        short s1=-29581;
        boolean b=false;

        for (i5 = 1; i5 < 199; i5++) {
            i6 += (int)((26 - (i5 - Test.dFld)) - Test.instanceCount);
            for (i7 = 1; i7 < 8; ++i7) {
                Test.iArrFld[i7] -= ((Test.iArrFld[i7 + 1] * -18) * iMeth(168, i8, Test.dFld));
                i6 += (((i7 * i7) + s1) - Test.instanceCount);
                i6 = -7;
                i6 = i5;
                for (i15 = 2; i15 > 1; i15 -= 3) {
                    i16 = i4;
                    i16 += (i15 * Test.instanceCount);
                    i4 += (i15 - Test.instanceCount);
                    i6 *= i5;
                    b = false;
                    i8 = 55584;
                    Test.iArrFld[i7 - 1] |= i7;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + s1 + i15 + i16 + (b ? 1 : 0);
    }

    public static void vMeth(int i1, double d) {

        int i2=-227, i3=1406, i17=-10, i18=43635, i19=-14, i20=-29428, iArr[]=new int[N];
        byte by1=-41;
        float f=35.625F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -138);
        FuzzerUtils.init(dArr, -1.79229);

        d /= (iArr[(i1 >>> 1) % N] | 1);
        for (i2 = 4; i2 < 382; i2++) {
            if (Test.bFld) {
                dArr[i2] = Math.abs(i3++);
                vMeth1(i1);
                by1 >>= (byte)-45;
            } else {
                for (i17 = 4; i17 > 1; --i17) {
                    if (true) break;
                    Test.instanceCount += 12;
                    f -= Test.iFld;
                    for (i19 = 1; i19 < 2; i19++) {
                        Test.instanceCount -= -29496L;
                    }
                }
                d = i20;
                vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + by1 + i17 + i18 +
                    Float.floatToIntBits(f) + i19 + i20 + FuzzerUtils.checkSum(iArr) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            Test.instanceCount += (-35 + (i2 * i2));
            f -= i17;
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + by1 + i17 + i18 + Float.floatToIntBits(f) + i19
            + i20 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i21=62878, i22=46787, i23=4, i24=-160, i25=115;
        byte by2=9;
        boolean b1=false;

        i += Math.max((sFld = (short)i) + i, (int)(fArrFld[(-5 >>> 1) % N][(i >>> 1) % N] + (++i)));
        vMeth(i, Test.dFld);
        Test.dFld += i;
        Test.dFld = Test.iFld;
        for (i21 = 1; i21 < 293; ++i21) {
            i22 >>= (int)Test.instanceCount;
            Test.instanceCount = i;
            i22 += i21;
            switch (((13271 >>> 1) % 2) + 63) {
            case 63:
                Test.lArrFld[i21 + 1] += i;
                sFld <<= (short)Test.instanceCount;
                Test.iFld += (i21 | i21);
                i23 = 1;
                do {
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.instanceCount += (i24 ^ i23);
                        Test.iFld = i23;
                        Test.instanceCount += (i24 * i24);
                        switch ((i23 % 10) + 120) {
                        case 120:
                            fFld = i23;
                            Test.iFld -= Test.iFld;
                            break;
                        case 121:
                            if (Test.bFld) {
                                by2 += (byte)(4L + (i24 * i24));
                                i += i23;
                                Test.dFld *= i;
                                Test.iFld += (int)Test.instanceCount;
                            }
                            i22 = (int)1157295840L;
                            break;
                        case 122:
                            sFld += (short)i25;
                            i += (int)95L;
                            Test.iFld = Test.iFld;
                            fFld = i24;
                            break;
                        case 123:
                            fFld = fFld;
                            break;
                        case 124:
                            Test.instanceCount >>>= i24;
                        case 125:
                            if (b1) break;
                            break;
                        case 126:
                            i22 += i24;
                        case 127:
                            i22 += (i24 * i24);
                            break;
                        case 128:
                            i >>= i23;
                            break;
                        case 129:
                            i = i23;
                            break;
                        default:
                            Test.dFld -= -61;
                        }
                    }
                } while (++i23 < 86);
                break;
            case 64:
                i22 -= i24;
                break;
            default:
                i25 = (int)Test.dFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
