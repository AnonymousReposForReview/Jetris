package tests.javafuzzer3171;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:08:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-153L;
    public float fFld=0.522F;
    public static volatile boolean bFld=true;
    public static float fFld1=0.286F;
    public static volatile short sFld=24590;
    public static long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 10L);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6) {

        int i7=-1, i8=-9, i9=23361, i10=-45574, iArr1[]=new int[N];
        float f=-49.555F;

        FuzzerUtils.init(iArr1, -173);

        for (i7 = 6; 176 > i7; i7++) {
            iArr1[i7] <<= i8;
            i6 += (((i7 * i7) + i8) - i7);
            for (i9 = 1; i9 < 9; i9++) {
                i6 = 5793;
                i8 = 96;
                i8 += (i9 * i9);
                f = 1;
                do {
                    float f1=-119.488F;
                    if (false) {
                        i6 *= i7;
                        f1 /= (Test.instanceCount | 1);
                        Test.instanceCount += (long)((long)f ^ i7);
                    } else {
                        i6 += (int)f;
                    }
                    if (Test.bFld) break;
                    i6 = 11;
                } while (++f < 2);
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(double d, long l, long l1) {

        int i11=-88, i12=-4, i13=-235, i14=-171, i15=-44;
        double d1=2.6419;
        long l2=-3014405865L;
        byte by=39;

        vMeth(i11);
        for (d1 = 20; d1 < 344; ++d1) {
            if (false) {
                for (i13 = (int)(d1); i13 < 5; ++i13) {
                    for (l2 = i13; l2 < 1; l2++) {
                        i12 = i14;
                        i14 += (int)(l2 * l2);
                        Test.instanceCount = (long)1.88415;
                        d -= i11;
                        by >>= (byte)i12;
                        l += (((l2 * Test.fFld1) + Test.fFld1) - i13);
                        if (Test.bFld) break;
                        i12 ^= i15;
                        i12 <<= i14;
                    }
                    i12 += i13;
                }
            } else {
                l1 -= 108;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + l1 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + l2
            + i15 + by;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {

        int i4=-14, i5=-146, i16=-201, i17=4, i18=-1, iArr[]=new int[N];
        double d2=-2.76074, d3=59.68384, dArr[]=new double[N];
        byte by1=34;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(dArr, -116.110264);
        FuzzerUtils.init(fArr, 67.227F);

        i4 |= i5;
        switch (((((++i4) >>> 1) % 8) * 5) + 7) {
        case 17:
            Test.instanceCount <<= (long)(iArr[(i5 >>> 1) % N] + dMeth(d2, -7086L, Test.instanceCount));
            i16 = 305;
            while (--i16 > 0) {
                short s=-14618;
                i4 >>= (int)Test.instanceCount;
                for (i17 = 1; i17 < 5; i17 += 3) {
                    Test.instanceCount *= -5651837651562675416L;
                }
                Test.instanceCount >>= Test.instanceCount;
                s = (short)16001;
                i4 <<= s;
                i18 <<= i5;
                Test.instanceCount >>= i17;
            }
            break;
        case 32:
            d3 = 1;
            do {
                i5 -= (int)Test.instanceCount;
                i18 = i4;
            } while (++d3 < 258);
            break;
        case 36:
            dArr[(i4 >>> 1) % N] = Test.instanceCount;
            break;
        case 16:
            i4 += i5;
            break;
        case 14:
            Test.instanceCount -= by1;
            break;
        case 25:
            i5 = i5;
            break;
        case 15:
            i5 -= i16;
        case 23:
            fArr[(i4 >>> 1) % N] -= i16;
            break;
        }
        long meth_res = i4 + i5 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Double.doubleToLongBits(d3) + by1 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-84, i2=133, i3=7, i19=6, i20=-12, i21=29701, i22=10, i23=9, i24=-141;
        double d4=0.109672, dArr1[]=new double[N];
        byte by2=61;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, 1.257F);
        FuzzerUtils.init(dArr1, 0.109568);

        for (i = 12; 284 > i; ++i) {
            if (Test.bFld) {
                Test.instanceCount += i;
            } else if (Test.bFld) {
                for (i2 = 1; i2 < 92; i2++) {
                    fFld += Test.instanceCount;
                    i1 = (iMeth() - i);
                    iArrFld[i][(i1 >>> 1) % N] += i2;
                    i1 += (((i2 * i2) + i1) - i3);
                    for (i19 = 1; i19 < 2; ++i19) {
                        i20 += i19;
                    }
                    i3 += (((i2 * Test.instanceCount) + i2) - i1);
                }
                switch ((i % 2) + 54) {
                case 54:
                    switch (((i % 1) * 5) + 93) {
                    case 94:
                        try {
                            i3 = (i / i);
                            i3 = (i2 % -33512);
                            i20 = (i1 % i2);
                        } catch (ArithmeticException a_e) {}
                        Test.lArrFld = Test.lArrFld;
                        iArrFld[i - 1][i + 1] &= i19;
                    }
                    for (i21 = 92; 2 < i21; i21--) {
                        i3 = (int)13L;
                        for (i23 = i21; i23 < 2; ++i23) {
                            i20 *= (int)Test.instanceCount;
                            if (Test.bFld) continue;
                        }
                        switch ((((i23 >>> 1) % 8) * 5) + 46) {
                        case 68:
                            iArrFld[i - 1][i + 1] = (int)-111.200F;
                        case 66:
                            i24 += i;
                            fArr1[(i24 >>> 1) % N] = fArr1[i];
                            dArr1[i21 - 1] += Test.instanceCount;
                            break;
                        case 76:
                        case 78:
                            i22 += -5827;
                            i24 += (int)d4;
                        case 80:
                            Test.instanceCount = i23;
                            break;
                        case 67:
                            Test.instanceCount = (long)114.109980;
                        case 64:
                            i1 -= (int)fFld;
                        case 79:
                            Test.sFld -= by2;
                            break;
                        }
                    }
                    break;
                case 55:
                    i24 += i;
                    break;
                default:
                    i24 += i;
                }
            } else {
                iArrFld[i] = iArrFld[i];
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
