package tests.javafuzzer689;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:01:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-44018L;
    public byte byFld=-57;
    public static int iFld=-30934;
    public static float fFld=1.298F;
    public static double dFld=0.32336;
    public static short sFld=-5309;
    public static int iFld1=81;
    public static int iArrFld[][]=new int[N][N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.lArrFld, 116L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        int i4=3, i5=-12, i6=-3, i7=-27971, i8=52, i9=51781, i10=8086, iArr[]=new int[N];
        boolean b=false;
        float f=-2.602F;

        FuzzerUtils.init(iArr, -2);

        Test.fFld += (float)Test.dFld;
        for (i4 = 2; i4 < 269; i4++) {
            for (i6 = 1; i6 < 6; i6++) {
                for (i8 = 1; i8 < 2; ++i8) {
                    i9 *= i9;
                    if (b) continue;
                }
                Test.instanceCount *= -15559L;
                iArr[i6 - 1] *= (int)Test.fFld;
                Test.instanceCount -= -8170393987273666577L;
                i7 = (int)Test.fFld;
                Test.instanceCount = Test.sFld;
                for (f = 1; f < 2; ++f) {
                    if (b) continue;
                    iArr[(int)(f)] <<= (int)Test.instanceCount;
                    Test.iFld = i6;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + Float.floatToIntBits(f) + i10 +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth(byte by, long l1) {

        int i2=-42040, i3=0, i11=-10, i12=-3;
        float f1=101.934F;
        boolean b1=true, bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 7875240698605686142L);

        Test.iFld <<= (--by);
        for (i2 = 22; 393 > i2; ++i2) {
            bArr[i2 + 1] = bMeth();
            Test.iFld = (int)l1;
        }
        f1 = 1;
        do {
            by += (byte)(-51.831F + (f1 * f1));
            for (i11 = 1; i11 < 4; i11++) {
                Test.iArrFld[i11][(int)(f1 + 1)] -= i12;
                switch ((i11 % 4) + 5) {
                case 5:
                    Test.iFld += 45497;
                case 6:
                    lArr1[(int)(f1 + 1)] = i11;
                    i3 += i3;
                    break;
                case 7:
                    Test.fFld -= (float)Test.dFld;
                    if (b1) break;
                    break;
                case 8:
                    Test.iArrFld[(int)(f1 - 1)][(int)(f1)] += -42493;
                }
            }
        } while (++f1 < 398);
        long meth_res = by + l1 + i2 + i3 + Float.floatToIntBits(f1) + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1) {

        byte by1=113;
        boolean b2=false;
        long l2=14L, lArr[]=new long[N];
        int i13=-37443;
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -48198L);
        FuzzerUtils.init(fArr, -13.745F);

        for (long l : lArr) {
            lArr[(i1 >>> 1) % N] &= ((lMeth(by1, Test.instanceCount) + Test.instanceCount) + l);
            switch ((((-14 >>> 1) % 2) * 5) + 17) {
            case 23:
                Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iArrFld[(i1 >>> 1) % N];
                break;
            case 26:
                i1 >>= Test.iFld;
                i1 = -27436;
                break;
            }
        }
        Test.iFld += 47068;
        b2 = b2;
        for (l2 = 13; 267 > l2; l2++) {
            fArr[(int)(l2)] *= (float)Test.dFld;
            try {
                Test.iArrFld[(int)(l2)][(int)(l2)] = (i13 / Test.iArrFld[(int)(l2)][(int)(l2)]);
                Test.iArrFld[(int)(l2 + 1)][(int)(l2)] = (-42259 / i13);
                i13 = (i1 / -92);
            } catch (ArithmeticException a_e) {}
            i1 += (int)l2;
            Test.iArrFld[(int)(l2)] = Test.iArrFld[(int)(l2 - 1)];
        }
        long meth_res = i1 + by1 + (b2 ? 1 : 0) + l2 + i13 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=57094, i14=-12, i15=-51568, i16=-46, i17=47, i18=60, i19=-46082, i20=-108, i22=-34550, i23=-62543,
            iArr1[]=new int[N];
        boolean b3=true;
        float fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr1, 0.713F);
        FuzzerUtils.init(iArr1, -56593);
        FuzzerUtils.init(dArr, 124.110323);

        i *= (byFld += (byte)Math.max(7, --i));
        iMeth(0);
        for (i14 = 3; i14 < 251; i14++) {
            i = 2261;
            Test.iArrFld[i14 + 1][i14 + 1] -= (int)Test.instanceCount;
            fArr1[i14 + 1] += byFld;
            i16 = 1;
            while (++i16 < 101) {
                for (i17 = i14; i17 < 1; ++i17) {
                    Test.sFld += (short)i18;
                    i += -122;
                    Test.lArrFld[i16 + 1] += i18;
                    i15 = -45971;
                }
            }
            i += (i14 ^ i17);
            fArr1[i14] *= Test.iFld;
            Test.iArrFld[i14][i14 - 1] += Test.sFld;
            i15 += Test.iFld1;
        }
        i18 *= (int)Test.instanceCount;
        for (i19 = 301; i19 > 1; --i19) {
            i22 = 1;
            do {
                iArr1[i22] >>= i18;
                Test.instanceCount = 10;
                Test.sFld = (short)i18;
                dArr[i19] += i17;
                i18 *= Test.iFld;
                if (b3) {
                    Test.instanceCount = i16;
                    Test.iFld >>= (int)219L;
                } else {
                    i23 = 1;
                    do {
                        byFld -= (byte)Test.instanceCount;
                        i18 = 8;
                    } while (++i23 < 1);
                }
            } while (++i22 < 84);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
