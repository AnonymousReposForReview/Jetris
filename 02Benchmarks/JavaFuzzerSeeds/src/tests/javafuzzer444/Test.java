package tests.javafuzzer444;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:02:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static double dFld=0.18695;
    public static double dFld1=-75.126885;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -18334);
        FuzzerUtils.init(Test.fArrFld, 102.1016F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=71, i4=35514, i5=-203, i6=-120, i7=194, i8=8, i9=-22452, iArr[]=new int[N];
        float f=1.865F;
        byte by=-78;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(iArr, 11);

        i3 = i3;
        Test.instanceCount = (long)f;
        for (i4 = 6; i4 < 199; ++i4) {
            lArr[i4] = -84;
        }
        iArr[(i5 >>> 1) % N] /= -24531;
        for (i6 = 12; 355 > i6; i6++) {
            lArr[i6] <<= i7;
            i7 += by;
            Test.dFld1 += i3;
            i7 += (((i6 * i5) + i5) - f);
            for (i8 = 1; i8 < 5; ++i8) {
                Test.dFld1 += 17L;
                i7 += i8;
                i3 = i7;
                i5 += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + by + i8 + i9 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i10=2, i11=-24195, i12=52204, i13=-15633, i14=4;
        double d=0.58640;

        vMeth1();
        i10 -= -164;
        Test.instanceCount = i10;
        Test.iArrFld[(i10 >>> 1) % N] *= i10;
        for (d = 5; 199 > d; ++d) {
            i11 = (int)Test.instanceCount;
            for (i12 = 8; i12 > 1; i12--) {
                i14 = 1;
                do {
                    switch ((i14 % 4) + 85) {
                    case 85:
                        i11 += (16336 + (i14 * i14));
                        Test.fArrFld[(int)(d + 1)] *= (float)Test.dFld;
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 86:
                        i10 += i11;
                        break;
                    case 87:
                        i10 <<= i14;
                        break;
                    case 88:
                        Test.instanceCount <<= i10;
                        break;
                    }
                } while (++i14 < 2);
            }
        }
        long meth_res = i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i15=12, i16=204, i17=-22760, i18=30500, i19=-35035, i20=-189, i21=-8;
        short s=9791;
        float f1=0.395F;
        boolean b=true;

        Test.dFld -= ((Long.reverseBytes(Test.instanceCount) + (i1--)) + iMeth());
        for (i15 = 7; i15 < 256; ++i15) {
            Test.instanceCount = s;
            for (i17 = 1; i17 < 7; ++i17) {
                Test.iArrFld[i17 + 1] *= 4;
                Test.iArrFld[i15 + 1] += i16;
                if (b) {
                    for (i19 = 1; i19 < 2; ++i19) {
                        f1 -= Test.instanceCount;
                        if (b) break;
                        Test.instanceCount *= -9;
                        Test.iArrFld[(i15 >>> 1) % N] = i16;
                        i += (int)2468694921247743689L;
                        i20 += i19;
                        i18 = i1;
                    }
                } else if (b) {
                    i20 += (i17 * i1);
                } else if (b) {
                    i1 += i15;
                } else {
                    Test.iArrFld[i17 + 1] -= i21;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i15 + i16 + s + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + (b ? 1 : 0)
            + i21;
    }

    public void mainTest(String[] strArr1) {

        int i22=117, i23=-7, i24=-78, i25=-166, i26=10, i27=-22808, i28=53216, i29=-49541, i30=4, i31=92, i32=35612;
        float f2=-41.814F;
        byte by1=-111;
        short s1=24100;
        boolean b1=true;

        vMeth(i22, i22, i22);
        for (i23 = 5; i23 < 232; i23++) {
            i24 = (int)Test.dFld;
            f2 += i23;
            Test.instanceCount = by1;
        }
        for (i25 = 1; i25 < 124; i25++) {
            for (i27 = i25; i27 < 204; ++i27) {
                i22 -= (int)f2;
                Test.instanceCount += (i27 * i27);
            }
            i26 = s1;
            f2 -= i24;
            for (i29 = 2; i29 < 204; i29++) {
                i24 -= by1;
                i22 &= i27;
                i28 = by1;
                Test.instanceCount += i29;
                f2 += (186 + (i29 * i29));
                Test.dFld1 %= ((long)(Test.dFld) | 1);
                if (b1) break;
                s1 += (short)(i29 - i26);
                i24 += i29;
                i30 = (int)25L;
            }
            by1 -= by1;
            switch (((i25 % 2) * 5) + 7) {
            case 12:
                f2 = Test.instanceCount;
                break;
            case 13:
                for (i31 = 204; i31 > i25; i31--) {
                    switch ((i25 % 4) + 44) {
                    case 44:
                        i22 += (i31 | i31);
                        Test.iArrFld[i25] += -28467;
                        Test.instanceCount = i28;
                    case 45:
                        Test.dFld = i25;
                        break;
                    case 46:
                        i30 >>= (int)Test.instanceCount;
                        break;
                    case 47:
                        i32 >>= i26;
                        break;
                    }
                }
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
