package tests.javafuzzer1709;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:17:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1455645424251079557L;
    public volatile double dFld=122.16091;
    public static float fFld=-1.965F;
    public static byte byFld=-10;
    public static volatile long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3699973L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7) {

        int i8=-11123, i9=-12, i10=-125, iArr2[]=new int[N], iArr3[]=new int[N];
        long l=12347L;
        double d2=-90.79024;
        boolean b=true;
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 19915);
        FuzzerUtils.init(byArr, (byte)77);
        FuzzerUtils.init(fArr, 50.246F);
        FuzzerUtils.init(iArr3, 36551);

        for (i8 = 5; 162 > i8; ++i8) {
            iArr2[i8 + 1] = i9;
            Test.lArrFld[i8 + 1] >>= -251;
            switch ((((i8 >>> 1) % 10) * 5) + 52) {
            case 100:
                i7 += (i8 * i8);
                byArr[i8] += (byte)5;
                break;
            case 75:
                i7 *= i7;
            case 99:
                l += (i8 + Test.fFld);
                l = l;
                i7 %= (int)((long)(Test.fFld) | 1);
                d2 *= i7;
                break;
            case 55:
                i10 = 1;
                do {
                    fArr[i8 - 1] += 42861;
                    b = b;
                    i7 -= i8;
                } while (++i10 < 10);
            case 77:
                if (b) break;
                break;
            case 88:
                i7 += (i8 | i9);
            case 78:
                fArr[i8] = Test.instanceCount;
                break;
            case 96:
                iArr3[i8] -= (int)Test.fFld;
                break;
            case 59:
                l = Test.instanceCount;
                break;
            case 76:
                i9 += i10;
                break;
            default:
                i7 <<= (int)l;
            }
        }
        long meth_res = i7 + i8 + i9 + l + Double.doubleToLongBits(d2) + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i4, double d1) {

        int i5=-79, i6=71, i11=-64810, i12=38761, i13=23368, i14=13, iArr4[][]=new int[N][N];
        float f1=40.284F;
        short s=4603, sArr[]=new short[N];
        long l1=6882170164942539833L;

        FuzzerUtils.init(sArr, (short)-11903);
        FuzzerUtils.init(iArr4, -12);

        for (i5 = 11; i5 < 187; i5++) {
            i6 *= i4;
            Test.instanceCount -= -5637038515815608929L;
            i6 += (((i5 * Test.instanceCount) + f1) - i6);
            s = (short)iMeth(i6);
            sArr[i5] *= (short)i4;
            for (i11 = 1; i11 < 9; i11 += 2) {
                Test.fFld *= -5516;
                switch ((i5 % 4) + 44) {
                case 44:
                    for (l1 = 1; l1 < 3; ++l1) {
                        Test.instanceCount -= 2;
                    }
                    i4 -= i11;
                    i6 = Test.byFld;
                    break;
                case 45:
                    iArr4[i11 + 1][i5] = (int)d1;
                    Test.instanceCount *= i11;
                    break;
                case 46:
                    d1 = Test.instanceCount;
                case 47:
                    f1 -= l1;
                    break;
                default:
                    i12 += (i11 ^ i14);
                }
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d1) + i5 + i6 + Float.floatToIntBits(f1) + s + i11 + i12 + l1
            + i13 + i14 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr4);
    }

    public void vMeth(int i, int i1) {

        float f=-2.496F;
        int i2=-61478, i3=-57, i15=65287, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -178);

        f -= i1;
        dFld = (--Test.instanceCount);
        for (i2 = 258; i2 > 16; --i2) {
            iArr1[i2] |= (i3++);
            vMeth1(i1, dFld);
            i15 = 1;
            do {
                Test.fFld -= i2;
                Test.instanceCount <<= 7;
            } while (++i15 < 7);
            if (i3 != 0) {
                vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + i15 + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i1 += (int)f;
            i -= i1;
            Test.fFld = -11;
            Test.instanceCount >>= Test.instanceCount;
            Test.fFld += i2;
            i3 = i15;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-4.126501;
        byte by=-65;
        int i16=207, i17=-28855, i18=-12, i19=-121, i20=-7, iArr[]=new int[N];
        float f2=-2.820F;
        short s1=-12216;
        boolean b1=false;

        FuzzerUtils.init(iArr, -12);

        d = 1;
        do {
            by += (byte)(d * iArr[(int)(d + 1)]);
            Test.instanceCount -= (~((11L + (++Test.instanceCount)) - (--Test.instanceCount)));
            vMeth(-24281, 3);
            for (i16 = 127; i16 > 3; --i16) {
                i17 = i17;
                Test.instanceCount = i16;
                for (f2 = 1; f2 < 2; ++f2) {
                    i18 = i16;
                    Test.instanceCount += (long)((long)f2 ^ (long)f2);
                    iArr[i16] = s1;
                    iArr[(int)(d + 1)] += i17;
                    i17 += i16;
                    Test.fFld = i17;
                    dArrFld[(int)(d)] += 9810L;
                    Test.instanceCount -= i16;
                }
                Test.instanceCount = -57984;
                Test.fFld += (((i16 * Test.instanceCount) + i17) - Test.fFld);
                for (i19 = 1; i19 < 2; ++i19) {
                    dFld = Test.instanceCount;
                    if (b1) break;
                    i17 |= i16;
                    iArr[i19 + 1] += (int)Test.instanceCount;
                    i20 = (int)f2;
                    switch (((-4 >>> 1) % 2) + 42) {
                    case 42:
                        if (true) {
                            Test.instanceCount += (((i19 * i20) + Test.instanceCount) - Test.instanceCount);
                            Test.instanceCount = i18;
                            Test.fFld = i20;
                        } else {
                        }
                    case 43:
                        i20 += i16;
                        break;
                    default:
                        fArrFld[(int)(d + 1)] += (float)dFld;
                    }
                }
            }
        } while (++d < 197);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
