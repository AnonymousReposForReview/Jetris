package tests.javafuzzer2198;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:07:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static int iFld=-10;
    public static boolean bFld=true;
    public static volatile byte byFld=-49;
    public static double dFld=77.61107;
    public static short sFld=19500;
    public volatile float fFld=0.686F;
    public volatile int iArrFld[]=new int[N];
    public static volatile int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 249);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1, int i1) {

        boolean b=true;
        double d=-100.76357;
        float f=6.778F;
        int i2=-8, i3=-4;
        long l2=-65464L;

        b = b;
        d -= i1;
        f = Test.iFld;
        for (i2 = 13; i2 < 329; ++i2) {
            i3 = (int)l2;
            b = b;
            i3 += i2;
        }
        long meth_res = l1 + i1 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i2 + i3 + l2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(long l, int i) {

        int i4=12, i5=13, i6=4, i7=-97, i8=-154, iArr[]=new int[N];
        float f1=1.52F;
        byte by=75;

        FuzzerUtils.init(iArr, -182);

        iArr = (iArr = (iArr = (iArr = iArr)));
        i = (int)(lMeth(Test.instanceCount, i) * -8);
        if (Test.bFld) {
            for (i4 = 9; i4 < 237; ++i4) {
                i6 = 1;
                do {
                    try {
                        i = (iArr[i6 - 1] / iArr[i6]);
                        iArr[i6 - 1] = (-31389 / iArr[i4 + 1]);
                        i = (i6 / i6);
                    } catch (ArithmeticException a_e) {}
                    i = (int)Test.instanceCount;
                    for (i7 = 1; i7 < 1; i7++) {
                        l += (((i7 * f1) + Test.instanceCount) - l);
                        iArr[i6] += (int)Test.instanceCount;
                        i8 -= Test.iFld;
                        l >>= i7;
                        i += (int)1145394334765241662L;
                        by += (byte)(i7 * i7);
                        i *= i7;
                    }
                } while (++i6 < 7);
            }
        } else {
            f1 -= Test.iFld;
        }
        long meth_res = l + i + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + by + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i9=-49708, i10=-34385, i11=9, i12=-254, i13=-102, i14=-12;
        float f2=0.889F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 5786597509451978450L);
        FuzzerUtils.init(byArr, (byte)-10);

        switch (((iMeth1(Test.instanceCount, 0) >>> 1) % 1) + 100) {
        case 100:
            Test.iFld = (int)Test.instanceCount;
            try {
                for (i9 = 1; i9 < 235; i9++) {
                    Test.iFld += (int)f2;
                }
                for (i11 = 7; i11 < 150; ++i11) {
                    i10 += i11;
                    lArr[(i12 >>> 1) % N] *= Test.instanceCount;
                }
            }
            catch (UserDefinedExceptionTest exc2) {
                switch ((((i10 >>> 1) % 4) * 5) + 75) {
                case 93:
                    for (i13 = 1; 241 > i13; i13++) {
                        Test.iFld = Test.iFld;
                        Test.iArrFld1[i13] = i13;
                        f2 += (i13 + Test.byFld);
                        Test.instanceCount += (-42552 + (i13 * i13));
                    }
                    Test.iFld += (int)f2;
                case 83:
                    Test.iArrFld1[(i13 >>> 1) % N] *= i11;
                case 90:
                    Test.dFld = i9;
                    break;
                case 78:
                    byArr[(-16590 >>> 1) % N] = (byte)-13;
                default:
                    i14 *= (int)Test.instanceCount;
                }
            }
            finally {
                i10 += i12;
            }
            break;
        }
        long meth_res = i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=6, i16=-1, i17=-2, i18=113, i19=4;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.734F);

        iArrFld[(Test.iFld >>> 1) % N] &= (int)((Math.abs(Test.instanceCount) + (Test.instanceCount - Test.iFld)) *
            Math.abs(57755 + iMeth()));
        Test.iFld += Test.iFld;
        for (i15 = 247; i15 > 11; i15--) {
            i17 = 1;
            do {
                Test.bFld = Test.bFld;
                Test.instanceCount -= Test.instanceCount;
                for (i18 = 1; 1 > i18; ++i18) {
                    short s=7335;
                    Test.sFld |= (short)-16125L;
                    fFld = s;
                    switch ((i15 % 6) + 94) {
                    case 94:
                        Test.instanceCount = i18;
                        fFld += (((i18 * Test.iFld) + i18) - Test.instanceCount);
                        Test.iFld <<= s;
                    case 95:
                        Test.iFld = (int)-22L;
                        i16 -= (int)fFld;
                        fArr[i17] *= -7;
                        Test.instanceCount >>>= Test.instanceCount;
                        break;
                    case 96:
                        Test.bFld = Test.bFld;
                        Test.iFld *= i18;
                    case 97:
                        Test.byFld *= (byte)Test.dFld;
                        Test.iArrFld1[i17] -= (int)fFld;
                        Test.instanceCount *= (long)Test.dFld;
                    case 98:
                        fFld += i18;
                        break;
                    case 99:
                        iArrFld[i17] += i18;
                        break;
                    default:
                        if (Test.bFld) break;
                        i19 = i17;
                        Test.instanceCount <<= -23361L;
                        i16 *= Test.iFld;
                    }
                    Test.instanceCount += i18;
                    iArrFld[i17 + 1] = i17;
                }
            } while (++i17 < 106);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
