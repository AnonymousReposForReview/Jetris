package tests.javafuzzer528;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:17:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=105L;
    public static float fFld=112.838F;
    public static int iFld=-75;
    public volatile byte byFld=64;
    public int iFld1=-11;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -167);

        iArr[(-29991 >>> 1) % N] = i3;
        long meth_res = i3 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i=63033, i1=-86, i2=3, i4=147, i5=25895, iArr1[]=new int[N];
        long l2=-7L, lArr[]=new long[N];
        boolean b=false;

        FuzzerUtils.init(lArr, 49426L);
        FuzzerUtils.init(iArr1, -30);

        try {
            i = 1;
            while (++i < 224) {
                for (i1 = 1; i1 < 7; i1++) {
                    lMeth(-56976);
                    Test.instanceCount >>= i;
                }
                Test.instanceCount += (-139 + (i * i));
                Test.instanceCount += (((i * Test.fFld) + Test.instanceCount) - i1);
                i2 = i1;
                for (l2 = 1; l2 < 7; l2++) {
                    i2 += i;
                    i5 = 1;
                    do {
                        Test.fFld += i1;
                        Test.fFld = i1;
                        iArr1 = FuzzerUtils.int1array(N, (int)-3);
                        Test.fFld += i;
                    } while ((i5 += 3) < 2);
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            b = false;
        }
        finally {
            i2 *= i1;
        }
        vMeth1_check_sum += i + i1 + i2 + l2 + i4 + i5 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        double d=-4.10874;
        int i6=-132, i7=-53346, i8=7, i9=-217, i10=-222, iArr2[]=new int[N];
        short s=-12085;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 9);
        FuzzerUtils.init(fArr, 64.852F);

        vMeth1();
        Test.iFld -= (int)d;
        l = Test.iFld;
        i6 = 1;
        do {
            for (i7 = 8; i7 > 1; i7 -= 2) {
                iArr2[i6] += (int)Test.instanceCount;
                Test.iFld <<= Test.iFld;
                i8 *= Test.iFld;
            }
            if (b1) {
                switch ((i6 % 2) + 108) {
                case 108:
                    for (i9 = 1; i9 < 8; i9++) {
                        s = (short)i9;
                        Test.iFld = -38;
                        fArr[i6 + 1] *= i9;
                        iArr2[i6 + 1] = i9;
                    }
                    break;
                case 109:
                    i10 <<= i7;
                    break;
                }
            } else {
                i10 -= i6;
            }
        } while (++i6 < 213);
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + s + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        double d1=-65.25267;
        int i11=-62253, i12=7103, i13=13, i14=28, i15=42, i16=-123, i17=144, i18=-220, i19=21707, i20=9, iArr3[]=new
            int[N];
        long l3=45L;
        short s1=17118;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, -11);
        FuzzerUtils.init(fArr1, 2.411F);

        vMeth(Test.instanceCount);
        Test.iFld = Test.iFld;
        d1 *= Test.instanceCount;
        for (i11 = 2; 192 > i11; ++i11) {
            iArr3[i11 - 1] >>= Test.iFld;
            fArr1[i11] = i11;
            for (i13 = 132; i13 > 4; i13--) {
                Test.instanceCount += (long)-2.813F;
            }
            l3 -= i13;
        }
        Test.instanceCount = (long)1.708F;
        iArr3[(i11 >>> 1) % N] = s1;
        i12 += (int)l3;
        i12 += 62793;
        for (i15 = 2; 348 > i15; ++i15) {
            i14 >>= i11;
            i14 = i11;
            byFld -= (byte)-23635;
            switch (((i15 % 4) * 5) + 70) {
            case 85:
                i16 |= Test.iFld;
                for (i17 = 3; i17 < 73; i17++) {
                    Test.instanceCount -= -12;
                    Test.instanceCount -= Test.instanceCount;
                    for (i19 = 2; i19 > 1; i19 -= 3) {
                        switch ((((-52625 >>> 1) % 2) * 5) + 83) {
                        case 91:
                            Test.iFld -= (int)d1;
                            i18 = i19;
                            Test.fFld += i19;
                            break;
                        case 89:
                            i20 += (((i19 * Test.fFld) + iFld1) - Test.instanceCount);
                            iArr3[i15 - 1] *= i13;
                            break;
                        }
                    }
                    Test.fFld -= i19;
                }
                break;
            case 84:
                if (true) continue;
                break;
            case 76:
                Test.fFld += (i15 * i15);
                break;
            case 78:
                Test.iFld = i19;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
