package tests.javafuzzer676;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:42:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2334899259638434380L;
    public int iFld=12277;
    public float fFld=8.619F;
    public static byte byFld=77;
    public static float fFld1=0.901F;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21657);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(short s) {

        int i3=-4;

        Test.instanceCount <<= i3;
        vMeth_check_sum += s + i3;
    }

    public static void vMeth1(int i8, double d) {

        int i9=-14, i10=-13480, i11=-183, i12=14804, i13=48147, i14=159, i15=-23247;
        double d1=0.21433;

        for (i9 = 3; i9 < 128; ++i9) {
            i11 += i9;
            i10 <<= i11;
        }
        for (i12 = 1; i12 < 237; ++i12) {
            i10 += (int)d;
            i14 = 1;
            while (++i14 < 7) {
                Test.instanceCount += (((i14 * Test.byFld) + i8) - Test.byFld);
                Test.iArrFld[i12] += i14;
                for (d1 = 1; d1 > 1; --d1) {
                    i8 = (int)Test.instanceCount;
                    i10 -= i13;
                    i8 += (int)d1;
                    Test.byFld >>= (byte)i15;
                    i11 += (int)Test.instanceCount;
                    i11 = i14;
                }
            }
        }
        vMeth1_check_sum += i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(d1) + i15;
    }

    public static int iMeth1() {

        int i4=-2, i5=128, i6=3, i7=-160, i16=-12, i17=-182, i18=13303, i19=63102, i20=-63;
        byte by=3;
        long l=-4275435260499527357L;

        Test.iArrFld[(i4 >>> 1) % N] += Math.abs(i4);
        Test.iArrFld[(i4 >>> 1) % N] -= by;
        i5 = 1;
        do {
            i4 += i5;
            for (i6 = i5; i6 < 8; i6++) {
                double d2=-77.100823;
                vMeth1(i6, d2);
            }
            for (i16 = 1; i16 < 8; ++i16) {
                if (i17 != 0) {
                }
            }
            Test.fFld1 -= i7;
            for (i18 = 1; i18 < 8; ++i18) {
                i19 += i5;
                Test.instanceCount += i5;
            }
            for (l = i5; 8 > l; l++) {
                Test.fFld1 = i16;
                i4 = i16;
            }
        } while (++i5 < 195);
        long meth_res = i4 + by + i5 + i6 + i7 + i16 + i17 + i18 + i19 + l + i20;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i1=58183, i2=-58879;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.269F);

        Test.instanceCount = ((--iFld) - iFld);
        for (i1 = 129; 1 < i1; --i1) {
            if (b) {
                i2 = (int)(Test.iArrFld[i1 + 1] <<= (int)(i2 ^= (int)(fFld - -127)));
                if (b) {
                    vMeth((short)(((i1 / ((long)(fFld) | 1)) * (fArr[i1 - 1]--)) * (i2++)));
                    iFld += (((i1 * Test.instanceCount) + i2) - fFld);
                } else if (b) {
                    vMeth((short)(i1 * ((--Test.iArrFld[i1 + 1]) % (iMeth1() | 1))));
                    iFld -= 36585;
                } else if (b) {
                    Test.instanceCount = -86;
                    iFld &= (int)Test.instanceCount;
                    Test.iArrFld[i1] = iFld;
                } else {
                    i2 = (int)5241028957534069802L;
                    Test.instanceCount *= -15163L;
                    if (iFld != 0) {
                    }
                }
            }
        }
        long meth_res = i1 + i2 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-10.538F;
        int i=23, i21=-29563, i22=11215;
        boolean b1=false;
        double d3=25.42;
        short s1=-24779;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 51554L);

        for (f = 16; f < 314; f++) {
            Test.iArrFld[(int)(f)] = (int)((Test.iArrFld[(int)(f)] + iMeth()) * 13L);
            Test.instanceCount = i;
            Test.instanceCount = i;
            if (b1) break;
            i21 = 1;
            do {
                for (d3 = 1; d3 > 1; d3 -= 3) {
                    iFld = (int)Test.instanceCount;
                    Test.fFld1 = -22711;
                    switch ((int)(((d3 % 7) * 5) + 84)) {
                    case 105:
                        Test.instanceCount = i22;
                        Test.byFld += (byte)i;
                        try {
                            i = (-2312 % i21);
                            i = (Test.iArrFld[(int)(f)] % i21);
                            i = (Test.iArrFld[i21] % -1382136795);
                        } catch (ArithmeticException a_e) {}
                    case 116:
                        i22 = (int)Test.instanceCount;
                        break;
                    case 94:
                    case 90:
                        try {
                            i = (iFld / -51);
                            i = (i22 / -49295);
                            i22 = (iFld / -27977);
                        } catch (ArithmeticException a_e) {}
                        switch ((i21 % 8) + 111) {
                        case 111:
                            iFld = iFld;
                            i = s1;
                            lArr[(int)(f)] *= s1;
                            break;
                        case 112:
                            i22 += (int)d3;
                            break;
                        case 113:
                            Test.instanceCount += -14;
                            iFld *= (int)Test.instanceCount;
                            fArrFld[(int)(d3)] *= i22;
                            break;
                        case 114:
                            Test.instanceCount = i22;
                            break;
                        case 115:
                            Test.instanceCount |= Test.instanceCount;
                            break;
                        case 116:
                            fFld -= iFld;
                        case 117:
                            s1 *= (short)i21;
                            break;
                        case 118:
                            lArr[i21] += -120;
                            i22 = -12;
                            break;
                        default:
                            iFld += iFld;
                        }
                        break;
                    case 112:
                        iFld += (int)(d3 * d3);
                        break;
                    case 98:
                        fFld -= 5019;
                        break;
                    case 88:
                        lArr[i21] += -9;
                    default:
                        Test.iArrFld[i21 - 1] = i21;
                    }
                }
            } while (++i21 < 84);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
