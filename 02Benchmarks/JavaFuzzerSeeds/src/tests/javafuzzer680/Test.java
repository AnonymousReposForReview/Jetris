package tests.javafuzzer680;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:52:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-129L;
    public static volatile byte byFld=16;
    public static boolean bFld=true;
    public float fFld=0.553F;
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 86.99609);
        FuzzerUtils.init(Test.byArrFld, (byte)-97);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, long l1) {

        int i11=12, i12=2, i13=0, i14=-230, iArr1[]=new int[N];
        float f1=0.435F;
        short s=-7304;
        boolean b1=true;

        FuzzerUtils.init(iArr1, -57121);

        for (int i10 : iArr1) {
            for (i11 = 1; i11 < 4; i11++) {
                l1 += -47187;
                l1 -= i11;
                if (b1) {
                    i9 = i9;
                    i10 += (((i11 * i9) + i12) - f1);
                    for (i13 = 1; i13 < 2; i13++) {
                        boolean b=true;
                        i12 <<= s;
                        switch ((i13 % 6) + 39) {
                        case 39:
                            i14 <<= (int)Test.instanceCount;
                            if (b) break;
                            if (true) break;
                            f1 += (i13 - i9);
                        case 40:
                            i10 *= i14;
                            break;
                        case 41:
                            Test.dArrFld[i13] = -12;
                            break;
                        case 42:
                            i12 -= Test.byFld;
                            break;
                        case 43:
                            i12 += (((i13 * i11) + Test.instanceCount) - i10);
                            break;
                        case 44:
                            f1 *= i12;
                            break;
                        }
                    }
                }
            }
        }
        long meth_res = i9 + l1 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + s + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        byte by=121;
        long l=-145L;
        int i5=-5, i6=-177, i7=-7, i8=58224, i15=12, i16=-57882, i17=2, iArr[]=new int[N];
        double d2=0.37557;
        float f=-44.601F;
        short s1=-2135;

        FuzzerUtils.init(iArr, -21517);

        Test.instanceCount += (long)(-(Double.longBitsToDouble(Test.instanceCount) - (-2335 * (by * i3))));
        for (l = 300; 1 < l; --l) {
            i6 = 1;
            while (++i6 < 6) {
                i3 += (i6 + i4);
                d2 -= iArr[(int)(l)];
                for (i7 = 1; i7 < 1; ++i7) {
                    i4 += (i7 * f);
                    i4 <<= ((Math.max(i6, i5) - Math.abs(i5)) - (iMeth1(i7, Test.instanceCount) - i4));
                }
                for (i15 = 1; i15 < 1; ++i15) {
                    i3 += i8;
                    s1 |= (short)i3;
                    if (Test.bFld) break;
                    i16 = i17;
                    f += Test.instanceCount;
                    i5 = i8;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + by + l + i5 + i6 + Double.doubleToLongBits(d2) + i7 + i8 + Float.floatToIntBits(f)
            + i15 + i16 + s1 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(double d1, int i1, int i2) {

        int i18=-130, i19=1, i20=-115, i21=-21183, i22=4;
        double d3=-50.93622;
        float f2=-120.879F;

        vMeth(i2, i2);
        i2 <<= i2;
        for (i18 = 182; 3 < i18; i18--) {
            i1 += Test.byFld;
        }
        for (d3 = 4; 127 > d3; d3++) {
            Test.byFld -= (byte)d1;
            i2 += (int)(-53149L + (d3 * d3));
        }
        i21 = 1;
        while (++i21 < 247) {
            i20 >>= i19;
            i22 -= (int)Test.instanceCount;
            i22 += i21;
            i19 *= i20;
            i19 += i21;
        }
        f2 += i20;
        d1 += -1.960F;
        long meth_res = Double.doubleToLongBits(d1) + i1 + i2 + i18 + i19 + Double.doubleToLongBits(d3) + i20 + i21 +
            i22 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=119.36283;
        int i=60062, i23=-10, i24=9, i25=-28624, i26=-4, i27=-7754, i28=71, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        short s2=-24163;
        long l2=-60476L, lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -32);
        FuzzerUtils.init(iArr3, -8);
        FuzzerUtils.init(lArr, -59013L);

        for (d = 4; d < 145; ++d) {
            iMeth(d, 11, i);
            Test.instanceCount += (long)d;
            for (i23 = 4; i23 < 178; i23++) {
                i24 = i23;
                i24 += (-63365 + (i23 * i23));
                iArr2[i23] += (int)fFld;
                i = (int)Test.instanceCount;
                i24 %= (int)(i | 1);
                Test.instanceCount += 1344189988453625024L;
                s2 += (short)(22552 + (i23 * i23));
                Test.instanceCount += (long)d;
                i += (int)(814556096L + (i23 * i23));
            }
            iArr3 = iArr3;
            i24 += (int)d;
        }
        i24 = Test.byFld;
        i25 = 1;
        do {
            for (i26 = 114; i26 > 3; i26--) {
                for (l2 = 1; l2 < 2; ++l2) {
                    iArr2[(int)(l2)] = i26;
                    lArr = lArr;
                    iArr3[i26 - 1][(int)(l2 - 1)] = i27;
                    fFld *= i24;
                    i *= i24;
                    i27 += (int)Test.instanceCount;
                    s2 <<= (short)i27;
                    Test.instanceCount += -12;
                    Test.instanceCount += i24;
                }
                Test.instanceCount -= i;
                Test.instanceCount = Test.instanceCount;
            }
        } while (++i25 < 221);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
