package tests.javafuzzer824;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:27:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=125L;
    public static float fFld=2.319F;
    public static int iFld=3;
    public static int iFld1=-14980;
    public volatile boolean bFld=true;
    public byte byArrFld[][]=new byte[N][N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.lArrFld, 48131L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 46.90692);

        if (false) {
            Test.fFld = -4384485105481559594L;
            dArr = dArr;
            Test.iArrFld[(Test.iFld >>> 1) % N] >>= Test.iFld;
            Test.instanceCount = 1;
        }
        Test.iFld = (int)Test.fFld;
        long meth_res = Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i8, boolean b) {

        float f2=64.90F, f3=-1.171F;
        int i9=-13, i10=3, i11=-3, i12=54754, iArr[]=new int[N];
        byte by=89;
        short s=-23283;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr, -14L);

        iArr[(i8 >>> 1) % N] = (int)(((Test.instanceCount--) << i8) * ((11 + (i8 * -45419)) - Math.abs(f2)));
        i8 >>= Math.abs(iMeth());
        for (i9 = 17; i9 < 372; ++i9) {
            if (b) continue;
        }
        i8 -= -101;
        lArr[(i9 >>> 1) % N] -= (long)f3;
        l -= i9;
        i10 += i8;
        i10 = -180;
        for (i11 = 8; i11 < 195; ++i11) {
            by -= (byte)l;
            l ^= i9;
            i8 += (i11 * i11);
            iArr[i11 - 1] = 7608;
            f2 = s;
        }
        vMeth_check_sum += l + i8 + (b ? 1 : 0) + Float.floatToIntBits(f2) + i9 + i10 + Float.floatToIntBits(f3) + i11
            + i12 + by + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(int i5, int i6, int i7) {

        float f1=0.464F, fArr[]=new float[N];
        boolean b1=false;
        int i13=-36247, i14=13, i15=163, i16=1, i17=-27610;
        byte by1=52;

        FuzzerUtils.init(fArr, -1.754F);

        i5 *= (int)((-1.75430 * (i6 - f1)) * (++i5));
        vMeth(Test.instanceCount, i5, b1);
        Test.iArrFld[(Test.iFld1 >>> 1) % N] *= i5;
        i13 = 1;
        do {
            fArr[i13] = Test.iFld1;
            if (i7 != 0) {
            }
            Test.iFld1 += i5;
            for (i14 = 1; i14 < 5; i14++) {
                by1 -= (byte)i14;
                Test.instanceCount = (long)-9.625F;
                f1 += Test.instanceCount;
            }
            Test.iArrFld[i13 + 1] = i14;
            for (i16 = 1; i16 < 5; ++i16) {
                double d=76.64422;
                i7 = (int)d;
                d -= 89;
            }
        } while (++i13 < 365);
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i13 + i14 + i15 + by1 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=179, i1=53361, i2=-3, i3=-182, i4=2, i18=-12769, i19=-53230;
        float f=92.37F;
        long l1=-8L;
        short sArr[]=new short[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(sArr, (short)-7390);
        FuzzerUtils.init(dArr1, 100.56335);

        for (i = 10; i < 386; ++i) {
            double d1=104.14364;
            switch (((((int)(~(long)(Test.instanceCount - f))) >>> 1) % 7) + 64) {
            case 64:
            case 65:
                i2 = 1;
                while (++i2 < 67) {
                    for (i3 = 1; i3 < 1; i3++) {
                        byArrFld[i2 - 1][i] = (byte)(fMeth(Test.iFld1, Test.iFld, Test.iFld1) - Test.iFld1);
                        i1 -= i2;
                        sArr[i3] += (short)Test.instanceCount;
                        Test.lArrFld[i3 + 1] <<= i3;
                        i1 = i;
                        Test.iFld >>= -165;
                        f = Test.iFld;
                    }
                    dArr1[i2] = Test.iFld1;
                    Test.lArrFld[i2 - 1] <<= i3;
                    for (i18 = 1; i18 < 1; i18++) {
                        Test.iFld1 += (i18 + f);
                        i19 *= i2;
                        Test.iFld1 += i18;
                        Test.iFld = (int)-5047555404408518289L;
                        Test.instanceCount += (i18 ^ Test.iFld1);
                        Test.instanceCount -= i;
                        Test.instanceCount += i3;
                    }
                    i4 += (((i2 * Test.instanceCount) + i3) - i4);
                    l1 = 1;
                    while (++l1 < 1) {
                        Test.iArrFld[i] = Test.iFld1;
                        if (bFld) break;
                        i4 |= Test.iFld1;
                        Test.lArrFld[i2] -= Test.iFld;
                        f *= Test.instanceCount;
                        i4 /= (int)((long)(f) | 1);
                        f *= i19;
                    }
                }
                break;
            case 66:
                if (bFld) break;
                break;
            case 67:
                Test.iArrFld[i] -= (int)l1;
                break;
            case 68:
                Test.iArrFld = Test.iArrFld;
                break;
            case 69:
                dArr1[i] -= i19;
            case 70:
                Test.iFld1 = (int)Test.instanceCount;
                break;
            default:
                Test.iFld1 = (int)d1;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
