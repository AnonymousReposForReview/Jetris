package tests.javafuzzer849;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:54:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-47282L;
    public int iFld=-13;
    public double dFld=2.42966;
    public static double dFld1=1.128177;
    public static byte byFld=-100;
    public static volatile short sFld=-605;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.81F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        int i8=49146, i9=-183, i10=-249, i11=-1640, i12=-124, i13=8, iArr1[]=new int[N];
        float f=1.82F;

        FuzzerUtils.init(iArr1, -6);

        i7 = i7;
        i7 = (int)Test.dFld1;
        i7 -= (int)Test.instanceCount;
        for (i8 = 17; i8 < 391; i8++) {
            i7 -= Test.byFld;
            for (i10 = 1; i10 < 5; i10++) {
                Test.instanceCount >>= -177L;
                i11 = i8;
                iArr1 = iArr1;
                for (i12 = i8; i12 < 2; ++i12) {
                    Test.fArrFld[i10] += f;
                    Test.dFld1 = i10;
                    i9 = i11;
                    Test.instanceCount *= i8;
                    i7 = Test.byFld;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, short s) {

        int i5=5, i6=25155, i14=13, i15=-43605, i16=-36062, i17=0, iArr2[]=new int[N];
        float f1=2.246F;

        FuzzerUtils.init(iArr2, 32485);

        i5 <<= (int)(i6 -= (int)(-1.127993 - (i5 % -215)));
        vMeth1(i6);
        i5 <<= Test.byFld;
        Test.instanceCount = 8;
        for (i14 = 19; i14 < 352; ++i14) {
            i15 += 11;
            switch ((((i15 >>> 1) % 1) * 5) + 47) {
            case 51:
                f1 = -61001;
                i6 = i5;
                break;
            }
            switch ((i14 % 2) + 112) {
            case 112:
                for (i16 = 1; 5 > i16; ++i16) {
                    i15 += i16;
                    try {
                        i6 = (-1431109203 / i6);
                        iArr2[i14] = (i15 % i14);
                        i5 = (i5 / i16);
                    } catch (ArithmeticException a_e) {}
                    i17 += (i16 | i17);
                    iArr2[i16 - 1] -= i16;
                }
                break;
            case 113:
                Test.dFld1 *= i16;
                break;
            }
        }
        vMeth_check_sum += l + s + i5 + i6 + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i4) {

        boolean b=true;
        int i18=-63020, i19=10, i20=33209, i21=28433, iArr3[][]=new int[N][N];
        float f2=-82.453F;

        FuzzerUtils.init(iArr3, -233);

        vMeth(-131L, Test.sFld);
        b = b;
        Test.byFld <<= (byte)6553;
        iArr3[(i4 >>> 1) % N][(i4 >>> 1) % N] = (int)Test.instanceCount;
        for (i18 = 1; i18 < 212; i18++) {
            i4 = (int)-132L;
            i4 = i18;
            f2 -= i18;
            Test.instanceCount = i19;
            f2 = 141L;
        }
        for (i20 = 10; i20 < 306; ++i20) {
            Test.instanceCount >>>= i4;
            Test.dFld1 = i4;
        }
        Test.dFld1 -= 3025949565853836507L;
        i4 &= i20;
        long meth_res = i4 + (b ? 1 : 0) + i18 + i19 + Float.floatToIntBits(f2) + i20 + i21 +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=-35, i2=-37111, i3=124, i22=-51132, i23=-7486, i24=34230, i25=-22928, i26=11, i27=206, i28=8336,
            i29=202, i30=-16252, iArr[]=new int[N];
        float f3=-56.88F, fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 0.336F);
        FuzzerUtils.init(iArr, 2440);
        FuzzerUtils.init(dArr, 1.115462);

        iFld <<= (int)(dFld * (++iFld));
        for (i = 4; i < 217; i++) {
            fArr[i] = Math.abs((--i1) + (iArr[i]++));
            for (i2 = 1; i2 < 118; i2++) {
                i1 += (i2 * i2);
            }
        }
        iMeth(iFld);
        for (i22 = 1; 203 > i22; ++i22) {
            iFld = Test.byFld;
            for (i24 = 1; i24 < 124; ++i24) {
                switch (((i >>> 1) % 8) + 119) {
                case 119:
                    i26 = 1;
                    do {
                        iFld += 199;
                        Test.dFld1 -= Test.dFld1;
                        iFld /= (int)(Test.instanceCount | 1);
                        i23 = i3;
                        Test.sFld -= (short)-9;
                        iFld = (int)82.826F;
                        dArr[i24 + 1] += Test.instanceCount;
                    } while (++i26 < 2);
                    break;
                case 120:
                    for (i27 = 1; i27 < 2; ++i27) {
                        Test.instanceCount %= (Test.instanceCount | 1);
                    }
                    i25 = i26;
                    switch (((i22 % 2) * 5) + 112) {
                    case 118:
                        iFld = (int)f3;
                        break;
                    case 116:
                        for (i29 = 1; 2 > i29; ++i29) {
                            i1 = (int)f3;
                            i23 >>= -237;
                            Test.instanceCount = (long)f3;
                            iArr[i24 + 1] = i3;
                            Test.instanceCount *= i26;
                            try {
                                iArr[i22 + 1] = (iArr[i24 + 1] % i28);
                                i30 = (-50577 % i30);
                                i25 = (100 % i24);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                    break;
                case 121:
                    iFld += (i24 | i30);
                    break;
                case 122:
                    Test.fArrFld[i22 + 1] = i3;
                    break;
                case 123:
                    i3 -= i22;
                    break;
                case 124:
                case 125:
                    Test.instanceCount *= Test.instanceCount;
                case 126:
                    iFld = i29;
                    break;
                default:
                    i1 += 42;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
