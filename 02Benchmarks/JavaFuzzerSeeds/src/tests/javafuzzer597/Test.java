package tests.javafuzzer597;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:17:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=59259;
    public boolean bFld=true;
    public static int iFld1=0;
    public int iFld2=13;
    public static boolean bFld1=false;
    public static short sFld=23863;
    public static double dFld=2.10594;
    public static float fFld=2.145F;
    public byte byFld=-67;

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, int i11, double d1) {

        int i12=41625, i13=26843, i14=83, i15=6, i16=52447, i17=4, i18=61;
        float f=66.869F;

        Test.iFld -= (int)d1;
        d1 %= (Test.iFld | 1);
        i12 = 275;
        while (--i12 > 0) {
            i11 += i12;
            Test.instanceCount <<= i12;
            Test.instanceCount += (((i12 * Test.iFld1) + Test.iFld) - Test.instanceCount);
        }
        for (i13 = 337; i13 > 9; i13--) {
            Test.iFld1 -= (int)f;
            for (i15 = 1; 5 > i15; i15 += 2) {
                d1 = Test.instanceCount;
                i14 -= i14;
            }
            for (i17 = 1; i17 < 5; i17++) {
                f += (float)33.34007;
                i18 <<= (int)Test.instanceCount;
                if (Test.bFld1) break;
            }
        }
        vMeth1_check_sum += i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + Float.floatToIntBits(f) + i15 +
            i16 + i17 + i18;
    }

    public static void vMeth(long l) {

        int i8=-30451, i9=-9, i19=-99, i20=-5, i21=212, iArr1[]=new int[N];
        double d2=78.55400;
        float f1=34.612F;

        FuzzerUtils.init(iArr1, 0);

        for (i8 = 2; i8 < 256; ++i8) {
            vMeth1(i19, i19, d2);
            Test.iFld1 &= Test.iFld1;
            f1 += i8;
            Test.instanceCount = l;
        }
        iArr1[(Test.iFld >>> 1) % N] = i19;
        i20 = 1;
        do {
            i9 = (int)l;
        } while (++i20 < 142);
        i21 = 1;
        do {
            l <<= Test.sFld;
            Test.instanceCount += (long)(77.162F + (i21 * i21));
            l += (i21 + i20);
            Test.iFld1 += (i21 | Test.iFld);
            Test.iFld = (int)f1;
        } while (++i21 < 248);
        l *= l;
        vMeth_check_sum += l + i8 + i9 + i19 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + i20 + i21 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(int i5, int i6, int i7) {

        int i22=-12, i23=10578, i24=-12;
        long l1=2458L;
        float f2=1.151F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth(Test.instanceCount);
        for (i22 = 6; 190 > i22; ++i22) {
            i6 = Test.iFld;
            i5 |= (int)Test.instanceCount;
            switch ((((i23 >>> 1) % 5) * 5) + 47) {
            case 56:
                i6 = (int)-1305133077L;
                bArr[i22 - 1] = Test.bFld1;
                if (i6 != 0) {
                }
                break;
            case 66:
                for (l1 = 1; l1 < 9; ++l1) {
                    switch ((i22 % 5) + 45) {
                    case 45:
                        i5 = (int)l1;
                        break;
                    case 46:
                        if (false) break;
                        if (true) {
                            i23 = 80;
                            Test.iFld *= 7;
                        } else {
                            Test.instanceCount >>= i22;
                        }
                        break;
                    case 47:
                        Test.instanceCount = i23;
                        break;
                    case 48:
                        f2 += (((l1 * i22) + Test.sFld) - i23);
                        break;
                    case 49:
                        Test.bFld1 = Test.bFld1;
                        break;
                    default:
                        Test.iFld1 += (int)(l1 ^ i23);
                    }
                }
                break;
            case 50:
                Test.dFld = i5;
            case 55:
                i7 = -10;
            case 53:
                Test.instanceCount -= (long)f2;
            }
        }
        long meth_res = i5 + i6 + i7 + i22 + i23 + l1 + i24 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=-50832, i2=172, i3=26, i4=132, i25=-28, i26=2, iArr[][]=new int[N][N], iArr2[]=new int[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -2204983502817444893L);
        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(fArr, 32.704F);
        FuzzerUtils.init(iArr2, 111);

        Test.iFld = ((Test.iFld--) + (Test.iFld--));
        i = 1;
        do {
            lArr[i - 1] *= Test.instanceCount;
            if (bFld) continue;
            Test.iFld = Math.max(Test.iFld--, 154);
            try {
                Test.iFld1 = (31514 % iArr[i + 1][i]);
                Test.iFld1 = (Test.iFld / -31331);
                Test.iFld1 = (14593 % Test.iFld1);
            } catch (ArithmeticException a_e) {}
        } while (++i < 182);
        for (i1 = 11; 248 > i1; i1++) {
            for (i3 = 4; i3 < 106; ++i3) {
                double d=61.6123;
                Test.iFld -= (int)((Test.instanceCount - (d - Test.instanceCount)) - (Math.min(i, i2) * (Test.iFld *
                    i2)));
                iFld2 *= (-(i2--));
                Test.iFld <<= (int)(5 * ((Test.instanceCount++) * dMeth(i1, i2, i2)));
            }
            Test.bFld1 = Test.bFld1;
            iFld2 *= i4;
            Test.iFld1 += (((i1 * Test.fFld) + Test.fFld) - Test.instanceCount);
        }
        i2 += Test.iFld1;
        i25 = 145;
        do {
            int i27=10746;
            Test.iFld += i1;
            i2 <<= (int)Test.instanceCount;
            Test.instanceCount += i4;
            i26 = 1;
            while (++i26 < 173) {
                Test.fFld += Test.instanceCount;
            }
            switch ((i25 % 8) + 19) {
            case 19:
                Test.iFld += (((i25 * i25) + Test.iFld) - byFld);
                bFld = bFld;
            case 20:
                try {
                    iArr[i25][i25 + 1] = (Test.iFld / i2);
                    i2 = (i / -461311234);
                    i2 = (Test.iFld % iFld2);
                } catch (ArithmeticException a_e) {}
                Test.iFld = (int)Test.fFld;
                fArr[i25] -= Test.iFld;
                break;
            case 21:
                i4 += i26;
                i4 *= i;
                Test.iFld1 >>= i27;
                break;
            case 22:
                Test.instanceCount -= (long)Test.dFld;
                break;
            case 23:
                i4 -= i26;
            case 24:
                Test.bFld1 = true;
                break;
            case 25:
                Test.instanceCount = Test.iFld;
            case 26:
                i27 += (i25 * i25);
                break;
            }
        } while (--i25 > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
