package tests.javafuzzer2451;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:50:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-59715L;
    public static float fFld=2.338F;
    public int iFld=231;
    public byte byFld=-42;
    public boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.71911);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.lArrFld, 5769441224378110517L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i) {

        int i1=2, i2=-13037, i3=106, i4=-206, i5=-236, i6=31252, i7=9, i8=49515;
        byte by=-19;
        float f=0.410F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 233681538165441313L);

        for (i1 = 15; i1 < 334; i1 += 2) {
            by -= (byte)-9385;
            for (i3 = 1; i3 < 10; ++i3) {
                for (i5 = 1; i5 < 2; ++i5) {
                    boolean b=false;
                    i2 -= (int)Test.instanceCount;
                    Test.dArrFld[i1 - 1] = Test.instanceCount;
                    if (b) break;
                    i6 = i;
                    Test.iArrFld[i5] = i6;
                    lArr[i5 - 1] *= i4;
                }
                for (i7 = i3; 2 > i7; i7++) {
                    Test.instanceCount >>= 360389194L;
                    f = i5;
                }
                i2 -= i2;
                i4 *= 111;
            }
        }
        long meth_res = i + i1 + i2 + by + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l) {

        int i9=-1, i10=3, i11=6, i12=-46436, i13=-122, i14=168, i15=2361;
        float f1=93.681F, fArr[]=new float[N];
        long l1=8283832104084585322L;
        boolean b1=true;
        double d=-124.24523;

        FuzzerUtils.init(fArr, 126.865F);

        fMeth(i9);
        i9 <<= i9;
        for (f1 = 17; f1 < 284; ++f1) {
            for (i11 = 1; i11 < 6; i11++) {
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-21);
            }
            i12 = (int)-60.107F;
            i12 *= i9;
            i10 = i12;
            for (i13 = 1; i13 < 6; i13++) {
                Test.iArrFld[(int)(f1 + 1)] ^= -9;
                for (l1 = 2; l1 > 1; l1--) {
                    Test.dArrFld[(int)(f1)] += f1;
                    if (b1) break;
                    l = (long)d;
                    i12 = (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += l + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + l1 + i15 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i16=-11, i17=-114, i18=1, i19=5, i20=-39720;
        double d1=0.41208;
        short s=-1341;
        boolean b2=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        vMeth1(-33854L);
        i16 = (int)Test.instanceCount;
        Test.instanceCount <<= i16;
        for (i17 = 4; i17 < 185; i17++) {
            Test.fFld -= -1313214902429408431L;
            Test.instanceCount |= Test.instanceCount;
            for (i19 = 1; i19 < 9; ++i19) {
                Test.instanceCount += (long)d1;
                Test.instanceCount &= -85;
                Test.instanceCount >>>= -16682L;
                s *= (short)i17;
                i20 += i18;
                bArr[i17][i17 + 1] = b2;
                Test.instanceCount *= Test.instanceCount;
                i20 += (int)(3.644F + (i19 * i19));
            }
        }
        vMeth_check_sum += i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(d1) + s + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=-5, i22=23203, i23=14, i24=-96, i25=-2485, i26=-18, i27=101, i28=45556, i29=-57746, i30=14,
            iArr[][]=new int[N][N];
        double d2=0.47176;
        short s1=9086;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 85);
        FuzzerUtils.init(fArr1, -1.379F);

        vMeth();
        iFld += iFld;
        byFld = byFld;
        iFld = iFld;
        iFld -= 2;
        for (i21 = 17; 306 > i21; i21++) {
            i22 = (int)d2;
            for (i23 = 87; i23 > 4; i23--) {
                for (i25 = 1; i25 < 2; i25++) {
                    try {
                        i26 = (29436 / i24);
                        Test.iArrFld[i23] = (-58 % i23);
                        i26 = (82104528 % Test.iArrFld[i23 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i26 /= (int)(i23 | 1);
                    i22 >>= (int)Test.instanceCount;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)0);
                    Test.iArrFld[i25 + 1] *= i21;
                }
                i26 = i25;
            }
            for (i27 = 1; i27 < 87; i27++) {
                for (i29 = 1; i29 < 2; ++i29) {
                    Test.iArrFld[i21] += (int)Test.instanceCount;
                    if (false) break;
                    iFld += (((i29 * i30) + i22) - i25);
                    bFld = bFld;
                    switch (((i29 >>> 1) % 6) + 59) {
                    case 59:
                        switch ((i29 % 7) + 99) {
                        case 99:
                            try {
                                i24 = (2 % i24);
                                i26 = (11 % i30);
                                i24 = (50032 / Test.iArrFld[i29 + 1]);
                            } catch (ArithmeticException a_e) {}
                            bFld = false;
                            i30 += -35583;
                            break;
                        case 100:
                            i22 = (int)Test.instanceCount;
                            iArr = iArr;
                            break;
                        case 101:
                            i28 = (int)Test.instanceCount;
                            d2 -= i26;
                        case 102:
                            if (bFld) continue;
                        case 103:
                            Test.lArrFld[i21] = i29;
                        case 104:
                            d2 -= -242;
                            break;
                        case 105:
                            try {
                                i28 = (Test.iArrFld[i21 + 1] % Test.iArrFld[i21 + 1]);
                                i22 = (i25 % -3);
                                i22 = (-539879307 / Test.iArrFld[i21 - 1]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            i22 = (int)Test.instanceCount;
                        }
                    case 60:
                        fArr1[i27 - 1] = i23;
                        break;
                    case 61:
                        i26 = i30;
                        break;
                    case 62:
                        s1 *= (short)Test.instanceCount;
                        break;
                    case 63:
                        Test.lArrFld[i21] <<= i27;
                        break;
                    case 64:
                        d2 = Test.fFld;
                    default:
                        i22 *= i24;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
