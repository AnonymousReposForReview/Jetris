package tests.javafuzzer7;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 20:59:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2198780827L;
    public static volatile double dFld=46.52267;
    public static int iFld=-224;
    public static byte byFld=12;
    public static volatile short sFld=4715;
    public static boolean bFld=false;
    public float fFld=-57.855F;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, long l) {

        int i10=-7565, i11=-136, i12=19, i13=-11, iArr1[][]=new int[N][N];
        long l1=8796821877593886414L;

        FuzzerUtils.init(iArr1, -5);

        for (i10 = 1; i10 < 395; ++i10) {
            iArr1[i10 + 1][i10 - 1] = i11;
            Test.instanceCount = i9;
            i11 += (i10 - Test.iFld);
            i9 = -43575;
            i11 <<= Test.iFld;
            Test.byFld *= (byte)l;
            i12 = 1;
            while ((i12 += 3) < 4) {
                try {
                    i11 = (92 / i9);
                    Test.iFld = (i10 / iArr1[i10 - 1][i12]);
                    i9 = (Test.iFld / i9);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (i12 + l);
                for (l1 = 1; l1 < 4; ++l1) {
                    switch ((((13093 >>> 1) % 1) * 5) + 106) {
                    case 107:
                        i11 *= (int)l1;
                        i13 <<= -13;
                        iArr1[(int)(l1)][i10 - 1] <<= i11;
                    }
                }
            }
        }
        long meth_res = i9 + l + i10 + i11 + i12 + l1 + i13 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i5=43, i6=41997, i7=-230, i8=-2, i14=63277, iArr[]=new int[N];
        float f=1.679F, fArr[]=new float[N];
        double d=2.103773;

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(fArr, 2.655F);

        iArr[(Test.iFld >>> 1) % N] *= (int)((Test.iFld++) + (2 - (Test.instanceCount - Test.iFld)));
        for (i5 = 8; i5 < 192; i5++) {
            for (i7 = i5; i7 < 9; ++i7) {
                f += (((i7 * i7) + Test.byFld) - Test.instanceCount);
                i8 = Math.min(-(i6 - i7), (int)((-114.7592 + (Test.byFld - 0.352F)) * (-iArr[i5])));
                switch (((iMeth(i8, -194L) >>> 1) % 4) + 112) {
                case 112:
                    switch ((((i7 >>> 1) % 2) * 5) + 118) {
                    case 121:
                        Test.sFld &= (short)177;
                        i6 -= -12;
                        for (d = 1; d < 1; d++) {
                            i14 -= (int)Test.instanceCount;
                            iArr = FuzzerUtils.int1array(N, (int)-151);
                            Test.sFld = (short)i7;
                            iArr[i5 + 1] &= (int)Test.instanceCount;
                            i6 = (int)Test.instanceCount;
                        }
                        break;
                    case 122:
                    default:
                        Test.instanceCount *= -72;
                    }
                    break;
                case 113:
                    i14 = 36203;
                    break;
                case 114:
                    fArr[i7 + 1] = f;
                    break;
                case 115:
                    Test.iFld += (i7 * i7);
                default:
                    iArr[i7] += i8;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i14 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i4=19989, i15=15314, i16=-96, i17=-64361, i18=-11, i19=14, iArr2[]=new int[N];
        long l2=-2537386988800997356L, lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 15758L);
        FuzzerUtils.init(iArr2, 46240);
        FuzzerUtils.init(fArr1, -125.233F);

        i4 -= (int)(Test.dFld % ((lArr[(i4 >>> 1) % N]++) | 1));
        vMeth1();
        Test.bFld = true;
        for (i15 = 1; i15 < 245; i15++) {
            lArr = lArr;
            lArr[i15 + 1] >>>= Test.instanceCount;
            switch (((i15 % 6) * 5) + 17) {
            case 39:
                Test.instanceCount += (long)-1.98126;
                for (i17 = 7; i17 > 1; i17--) {
                    Test.instanceCount = i17;
                    iArr2[i15] >>= 9;
                    i19 = 1;
                    do {
                        if (Test.bFld) break;
                        Test.instanceCount <<= -153;
                        Test.instanceCount = Test.sFld;
                    } while (++i19 < 2);
                }
                break;
            case 23:
                fArr1[i15 + 1] -= -201;
                break;
            case 47:
                Test.dFld = 1;
            case 21:
                l2 = i16;
                break;
            case 22:
                Test.instanceCount += i15;
                break;
            case 20:
                Test.sFld -= (short)i4;
                break;
            }
        }
        vMeth_check_sum += i4 + i15 + i16 + i17 + i18 + i19 + l2 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=233, i1=-10, i2=19692, i3=59763, i20=0, i21=10;
        float f1=-45.972F;
        double dArr[][]=new double[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 0.83233);
        FuzzerUtils.init(lArr1, -2174493501L);

        for (i = 13; i < 367; ++i) {
            for (i2 = 3; i2 < 71; i2++) {
                switch (((4698 >>> 1) % 2) + 89) {
                case 89:
                    vMeth();
                    dArr[i2][i2] = 1412L;
                    switch (((Test.iFld >>> 1) % 8) + 83) {
                    case 83:
                        i3 *= 14674;
                        if (Test.bFld) break;
                        i1 = (int)Test.instanceCount;
                        f1 = 1;
                        while (++f1 < 2) {
                            fFld *= i1;
                            Test.iFld += (int)f1;
                            Test.iFld += (int)(f1 - i2);
                        }
                        break;
                    case 84:
                        i3 = i2;
                        i1 += i2;
                        break;
                    case 85:
                        if (Test.bFld) continue;
                        i1 = i3;
                        break;
                    case 86:
                        i20 = 1;
                        do {
                            Test.iFld += i20;
                            i3 += (i20 * i);
                            if (Test.bFld) continue;
                            Test.instanceCount += (i20 + Test.instanceCount);
                            i1 -= i3;
                            Test.iFld += 215;
                        } while (++i20 < 2);
                        i21 = 1;
                        while (++i21 < 2) {
                            switch ((i21 % 2) + 12) {
                            case 12:
                                i1 = i;
                                break;
                            case 13:
                                i1 = (int)Test.instanceCount;
                                i3 = i21;
                                iArrFld[i2 + 1] = i20;
                            }
                        }
                        break;
                    case 87:
                        lArr1[i2] -= Test.byFld;
                        break;
                    case 88:
                        lArr1[i2] -= Test.instanceCount;
                        break;
                    case 89:
                        i1 ^= Test.sFld;
                        break;
                    case 90:
                        i3 = (int)Test.dFld;
                    }
                    break;
                case 90:
                    Test.iFld += i1;
                    break;
                default:
                    i3 = i3;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
