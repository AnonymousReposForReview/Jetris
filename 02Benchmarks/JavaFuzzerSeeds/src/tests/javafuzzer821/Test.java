package tests.javafuzzer821;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:22:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=194L;
    public static volatile int iFld=-35962;
    public volatile float fFld=-13.468F;
    public static boolean bFld=true;
    public static byte byFld=51;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3224219709469420488L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        int i5=10, i6=39303, i7=55, i8=9423, i9=-13, i10=99;
        float f1=0.53F;
        short s1=9847;

        i3 &= i3;
        for (i5 = 6; i5 < 232; i5++) {
            for (i7 = 7; i7 > 1; i7 -= 2) {
                i4 += (i7 * i7);
                i6 = (int)1L;
                i4 <<= i7;
                f1 += (float)2.16796;
                for (i9 = 3; i9 > 1; --i9) {
                    i6 = i9;
                    Test.bFld = Test.bFld;
                    i4 += (i9 * i9);
                    i4 += (22021 + (i9 * i9));
                }
                i8 += (i7 * i7);
            }
            i3 += (((i5 * i8) + i4) - s1);
        }
        Test.lArrFld[(14 >>> 1) % N] = -20365;
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + s1;
    }

    public static void vMeth(long l, int i2) {


        vMeth1(Test.iFld, Test.iFld);
        vMeth_check_sum += l + i2;
    }

    public static long lMeth(float f, short s) {

        int i=1038, i1=3, i11=21203, i12=6133, i13=-11, iArr[]=new int[N];
        double d=0.20633;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -45.44F);
        FuzzerUtils.init(iArr, -14);

        for (i = 2; 279 > i; ++i) {
            vMeth(9048226609754784980L, Test.iFld);
            fArr[i + 1] *= i1;
            try {
                i1 = (iArr[i + 1] / 1000433000);
                Test.iFld = (i / i);
                Test.iFld = (Test.iFld % -1103302396);
            } catch (ArithmeticException a_e) {}
            i1 += i;
            i1 *= (int)f;
            i11 = 1;
            do {
                iArr[i + 1] = i1;
                i1 *= (int)f;
                Test.iFld -= i1;
            } while (++i11 < 6);
            for (i12 = 1; 6 > i12; ++i12) {
                Test.instanceCount = Test.instanceCount;
                d = i11;
                Test.instanceCount = i;
            }
            Test.iFld = Test.iFld;
        }
        long meth_res = Float.floatToIntBits(f) + s + i + i1 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s2=6851;
        float f2=-1.594F, f3=1.780F;
        int i14=-12845, i15=12, i16=-7, i17=7, i18=-57303, i19=63645, i20=-3, iArr1[]=new int[N];
        boolean b=false;
        double d2=1.57030, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.100677);
        FuzzerUtils.init(iArr1, 52337);

        Test.iFld = (int)((++fFld) - lMeth(fFld, s2));
        for (f2 = 264; f2 > 6; f2--) {
            Test.instanceCount = Test.instanceCount;
            if (b) {
                Test.instanceCount = -60637;
                i14 -= (int)Test.instanceCount;
            } else {
                s2 += (short)(f2 + Test.instanceCount);
            }
            Test.iFld >>= i14;
            Test.byFld += (byte)(58408 + (f2 * f2));
        }
        for (f3 = 5; 135 > f3; ++f3) {
            i16 = 193;
            do {
                Test.iFld <<= i14;
            } while (--i16 > 0);
            switch ((int)(((f3 % 4) * 5) + 36)) {
            case 55:
                i15 *= i14;
                switch ((int)((f3 % 2) + 106)) {
                case 106:
                    i15 = Test.iFld;
                    Test.lArrFld[(int)(f3)] = Test.instanceCount;
                    i17 = 1;
                    do {
                        for (i18 = 1; 1 > i18; ++i18) {
                            if (Test.bFld) break;
                            i14 = (int)Test.instanceCount;
                            iArr1[(int)(f3 + 1)] = (int)-3274191530L;
                            if (Test.bFld) break;
                            i15 &= 23231;
                            iArr1[i18] |= Test.iFld;
                            iArr1 = iArr1;
                            Test.instanceCount = -73;
                            try {
                                i20 = (-609522757 % i17);
                                i14 = (i17 % 1214365212);
                                i20 = (-231 / i15);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.iFld += (i17 ^ s2);
                        i20 += 1360;
                    } while (++i17 < 193);
                    break;
                case 107:
                    i15 = i15;
                    break;
                }
            case 41:
                Test.instanceCount *= (long)d2;
                break;
            case 50:
                fFld += ((long)f3 | (long)i17);
                break;
            case 56:
                dArr[(int)(f3)] += i17;
                break;
            default:
                i20 += 8;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
