package tests.javafuzzer1695;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:45:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3046697352129315316L;
    public static volatile float fFld=-1.401F;
    public byte byArrFld[]=new byte[N];
    public volatile int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=-14, i6=4, i7=11, i8=184, i9=-126, iArr[]=new int[N];
        short s1=-23951;
        float f=88.411F;
        byte by=9;
        long l=6L;

        FuzzerUtils.init(iArr, -169);

        iArr[(i4 >>> 1) % N] += i4;
        iArr[(i4 >>> 1) % N] |= (int)Test.instanceCount;
        for (i5 = 11; 349 > i5; i5++) {
            s1 <<= (short)Test.instanceCount;
            f = 1;
            while (++f < 5) {
                by = (byte)i5;
            }
            Test.fFld = i4;
            for (l = 1; l < 5; l += 3) {
                i4 -= i6;
                for (i8 = 5; i8 > 1; i8--) {
                    i4 >>= (int)l;
                    i9 *= i7;
                    i6 -= i6;
                    i9 *= (int)Test.instanceCount;
                    iArr[i5 + 1] = 22736;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + s1 + Float.floatToIntBits(f) + by + l + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(short s) {

        int i3=145;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)28);

        i3 >>= (int)((byArr[(i3 >>> 1) % N] * (Test.instanceCount * 200L)) + i3);
        vMeth1(i3);
        i3 += i3;
        vMeth_check_sum += s + i3 + FuzzerUtils.checkSum(byArr);
    }

    public int iMeth(int i2) {

        int i10=-208, i11=37706, i12=3, i13=3, i14=-40495, i15=-56796, i16=-207, i17=34571, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 220);

        vMeth((short)(25766));
        for (i10 = 166; i10 > 8; --i10) {
            bArr = bArr;
        }
        Test.fFld = i10;
        for (i12 = 140; i12 > 6; i12--) {
            for (i14 = 1; i14 < 12; i14++) {
                bArr[i14 - 1] = false;
                try {
                    i11 = (iArr1[i14 - 1] / 600407068);
                    i13 = (i2 / -1115754191);
                    i2 = (-240 / i12);
                } catch (ArithmeticException a_e) {}
                for (i16 = 2; i16 > 1; --i16) {
                    iArr1[i16] -= i17;
                    switch (((i12 >>> 1) % 5) + 120) {
                    case 120:
                        i15 += (i16 ^ i17);
                        i11 = i11;
                        if (b) continue;
                        i13 = i16;
                        break;
                    case 121:
                        iArr1 = iArr1;
                        break;
                    case 122:
                        i11 >>= i17;
                    case 123:
                        i2 = (int)Test.instanceCount;
                        break;
                    case 124:
                        iArr1[i16 + 1] = i10;
                        break;
                    default:
                        iArr1 = FuzzerUtils.int1array(N, (int)-2);
                    }
                }
            }
        }
        long meth_res = i2 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=25668, i1=-238, i18=73, i19=199, i20=4, i21=-96, i22=-17;
        boolean b1=false, b2=true;
        double d=1.18629;

        for (i = 4; i < 208; ++i) {
            i1 = (iMeth(i) * 0);
            for (i18 = 6; i18 < 123; i18++) {
                i20 = 1;
                do {
                    i19 = i18;
                    i19 >>= i1;
                    Test.fFld += i20;
                    i19 ^= (int)Test.instanceCount;
                } while (++i20 < 2);
                Test.instanceCount *= i20;
                i1 ^= (int)Test.instanceCount;
                i1 += i1;
                byArrFld[i18 - 1] *= (byte)i;
                if (b1) {
                    i19 -= i19;
                } else if (false) {
                    i1 -= i18;
                } else {
                    Test.instanceCount += i18;
                }
                iArrFld[i18 + 1] /= (int)(Test.instanceCount | 1);
                i19 = (int)Test.fFld;
                b1 = b1;
            }
            iArrFld[i] = i19;
            i1 <<= i20;
        }
        iArrFld[(i18 >>> 1) % N] |= i20;
        d = d;
        i21 = 304;
        do {
            if (b2) {
                bArrFld[i21 + 1] = true;
                i22 = 1;
                while ((i22 += 3) < 246) {
                    Test.fFld -= i;
                    i19 ^= i1;
                    i19 *= i22;
                }
            } else {
                i1 >>>= (int)Test.instanceCount;
            }
        } while ((i21 -= 3) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
