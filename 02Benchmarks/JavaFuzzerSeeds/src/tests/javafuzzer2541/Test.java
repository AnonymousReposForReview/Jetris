package tests.javafuzzer2541;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:33 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1L;
    public static volatile boolean bFld=false;
    public static float fFld=75.991F;
    public int iFld=-12;
    public static double dFld=2.127385;
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 12L);
        FuzzerUtils.init(Test.iArrFld, 14705);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth1(int i5, int i6) {

        boolean b=true;

        b = Test.bArrFld[(i6 >>> 1) % N];
        Test.instanceCount -= (Test.instanceCount++);
        vMeth1_check_sum += i5 + i6 + (b ? 1 : 0);
    }

    public static void vMeth2(int i7) {

        int i8=20912, i9=206, i10=62;
        double d=0.17073;

        i7 <<= (int)Test.lArrFld[(i7 >>> 1) % N];
        vMeth1(i7, i7);
        for (i8 = 123; i8 > 1; i8--) {
            Test.instanceCount += (i8 * i8);
            i9 *= (int)Test.instanceCount;
            i7 *= i7;
            try {
                Test.iArrFld[i8] = (i7 % -739033826);
                i9 = (i8 / i9);
                i9 = (-16582 % i7);
            } catch (ArithmeticException a_e) {}
        }
        d *= Test.instanceCount;
        Test.instanceCount >>= Test.instanceCount;
        Test.iArrFld[(16849 >>> 1) % N] >>= i10;
        Test.iArrFld = Test.iArrFld;
        i9 -= (int)-147L;
        vMeth2_check_sum += i7 + i8 + i9 + Double.doubleToLongBits(d) + i10;
    }

    public static void vMeth() {

        int i=2, i1=14, i2=-1, i3=1, i4=-6039, i11=-6, i12=27504, iArr[]=new int[N];
        short s=-17422;
        byte by=-97;
        double d1=-21.44012;
        float f=65.923F;

        FuzzerUtils.init(iArr, 46477);

        i *= (int)((Integer.reverseBytes(162) | (Test.instanceCount += Test.instanceCount)) * ((7 * (i ^ 6L)) - (i *
            i)));
        i1 = 1;
        while (++i1 < 237) {
            i >>= i;
        }
        i2 = 1;
        while (++i2 < 151) {
            for (i3 = i2; 10 > i3; ++i3) {
                vMeth1(iArr[i3 - 1], ((s - by) + (i2 * 172)) - Math.abs(i));
                vMeth2(-2);
                d1 = 26528;
                i4 >>= i1;
                i = 118;
                i4 <<= 0;
                i4 *= (int)d1;
                for (i11 = 1; i11 < 1; i11++) {
                    s -= (short)f;
                    i4 >>= i4;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s + by + Double.doubleToLongBits(d1) + i11 + i12 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=-31548, i14=59337, i15=20, i16=-50224, i17=-9;
        short s1=26354;
        long l=-3865802272L, lArr[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -31.304F);
        FuzzerUtils.init(lArr, 1854832875L);

        vMeth();
        i13 >>= i13;
        s1 = (short)i13;
        for (float f1 : fArr) {
            Test.instanceCount = (long)f1;
            Test.bFld = false;
            i13 = (int)f1;
            Test.bFld = Test.bFld;
            Test.instanceCount = i13;
            i13 >>= i13;
            try {
                i13 = (-944000524 / Test.iArrFld[(i13 >>> 1) % N]);
                i13 = (i13 / i13);
                i13 = (Test.iArrFld[(i13 >>> 1) % N] / i13);
            } catch (ArithmeticException a_e) {}
            i13 -= (int)f1;
            Test.iArrFld[(-13 >>> 1) % N] = i13;
            lArr = lArr;
        }
        i13 >>= i13;
        i13 += i13;
        l = 1;
        do {
            for (i14 = 194; 5 < i14; i14--) {
                i15 += (i14 | i14);
                Test.iArrFld = Test.iArrFld;
                try {
                    i15 = (i15 / i15);
                    i13 = (Test.iArrFld[(int)(l - 1)] % i14);
                    i15 = (-75 / Test.iArrFld[i14]);
                } catch (ArithmeticException a_e) {}
                fArr[i14 - 1] /= -61679;
                Test.fFld *= Test.fFld;
                switch ((i14 % 2) + 36) {
                case 36:
                    Test.instanceCount += (i14 - i14);
                    break;
                case 37:
                    iFld *= iFld;
                    iFld += i14;
                    for (i16 = 1; 2 > i16; i16++) {
                        Test.fFld += (i16 - i15);
                        Test.dFld = s1;
                    }
                default:
                    Test.iArrFld[(int)(l)] = i16;
                }
            }
        } while (++l < 129);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest vMeth2
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
