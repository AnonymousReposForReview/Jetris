package tests.javafuzzer1791;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:20:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=247L;
    public static volatile float fFld=-30.442F;
    public static volatile boolean bFld=false;
    public static volatile int iFld=4;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -82);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, long l, int i7) {

        int i8=-183, i9=239, i10=-8, i11=-191, i12=-59358, i13=4;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -105.63F);
        FuzzerUtils.init(dArr, 0.92297);

        for (i8 = 2; i8 < 181; ++i8) {
            i9 -= (int)Test.instanceCount;
            Test.instanceCount += i8;
            for (i10 = 1; i10 < 9; i10 += 2) {
                i6 &= (int)l;
                i11 = (int)l;
            }
            i7 >>= i11;
        }
        i6 = i10;
        fArr[(-4 >>> 1) % N] *= Test.instanceCount;
        dArr[(21587 >>> 1) % N] += Test.fFld;
        Test.fFld += Test.fFld;
        fArr[(i6 >>> 1) % N] *= Test.fFld;
        i12 = 1;
        do {
            Test.instanceCount += (((i12 * i13) + Test.fFld) - i11);
            Test.instanceCount = (long)Test.fFld;
        } while (++i12 < 121);
        long meth_res = i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i1=0, i2=244, i3=-5900, i4=14, i5=-128, i14=14, i15=-9, i16=-5, iArr[]=new int[N];
        short s=16874;
        float f1=71.47F;
        double d=50.123133;

        FuzzerUtils.init(iArr, -11325);

        i1 *= i1;
        for (i2 = 167; i2 > 3; i2--) {
            iArr[i2 - 1] *= s;
            for (i4 = 1; i4 < 10; i4++) {
                i1 <<= Math.max(~(-i3), iMeth(i2, Test.instanceCount, i3));
            }
        }
        iArr[(i5 >>> 1) % N] = i5;
        for (f1 = 3; f1 < 275; ++f1) {
            for (i15 = 1; i15 < 6; ++i15) {
                Test.instanceCount = Test.instanceCount;
                i16 &= (int)Test.instanceCount;
                d = d;
                Test.instanceCount = 0;
                iArr = FuzzerUtils.int1array(N, (int)2);
            }
        }
        iArr = FuzzerUtils.int1array(N, (int)9);
        i1 = s;
        vMeth1_check_sum += i1 + i2 + i3 + s + i4 + i5 + Float.floatToIntBits(f1) + i14 + i15 + i16 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f) {

        int i=55289, i17=-118, i18=3599, i19=-128, i20=26649, i21=8;
        byte by=11;
        short s1=11893;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.58967);

        i = 1;
        do {
            vMeth1();
            if (Test.bFld) {
                try {
                    i17 = (i % 674123308);
                    i17 = (141 % i);
                    i17 = (i / 50838);
                } catch (ArithmeticException a_e) {}
                by = (byte)i17;
                try {
                    i17 = (-1632826610 % i17);
                    i17 = (39520 % Test.iArrFld[i]);
                    i17 = (i17 / 167);
                } catch (ArithmeticException a_e) {}
            } else if (Test.bFld) {
            }
            for (i18 = 1; i18 < 4; i18++) {
                i17 = i19;
                i17 += (-1 + (i18 * i18));
                Test.instanceCount >>= 1;
                Test.fFld -= Test.instanceCount;
                Test.instanceCount -= i19;
                for (i20 = i18; i20 < 2; i20++) {
                    Test.instanceCount %= (s1 | 1);
                    dArr1[i] = i;
                }
            }
        } while (++i < 388);
        vMeth_check_sum += Float.floatToIntBits(f) + i + i17 + by + i18 + i19 + i20 + i21 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i22=-33110, i23=10, i24=517, i25=17112, i26=-12980, i27=21089, i28=23658, i29=268, i30=-30154, i31=8,
            i32=-6;
        long l1=-249L;
        short s2=-9505;
        float f2=-8.474F;
        double d1=-1.68077;

        vMeth(Test.fFld);
        if (Test.bFld) {
            for (i22 = 14; i22 < 276; i22++) {
                i23 -= i23;
            }
            i23 >>= -2;
            Test.fFld *= Test.instanceCount;
        } else {
            Test.fFld -= Test.instanceCount;
        }
        for (i24 = 11; i24 < 289; ++i24) {
            Test.fFld = l1;
        }
        s2 |= (short)Test.instanceCount;
        for (i26 = 9; i26 < 289; ++i26) {
            i27 /= (int)(Test.instanceCount | 1);
            for (f2 = 4; f2 < 90; ++f2) {
                i23 >>>= i29;
                i28 >>= i26;
                for (i30 = 1; 2 > i30; i30++) {
                    i31 = i23;
                    Test.iArrFld = Test.iArrFld;
                    i28 += (((i30 * Test.instanceCount) + l1) - i23);
                    i29 -= s2;
                    i27 += (i30 * l1);
                    i31 = i29;
                    i23 += (i30 * i30);
                    i23 += Test.iFld;
                }
                i32 = 1;
                do {
                    i31 -= (int)d1;
                    i25 = (int)l1;
                    i31 += i27;
                    Test.instanceCount *= i23;
                    i29 = (int)-7978134339163811144L;
                } while (++i32 < 2);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
