package tests.javafuzzer2006;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:25:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static volatile boolean bFld=true;
    public short sFld=16813;
    public static long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 303320744L);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, int i4) {

        int i5=-9, i6=4968, i7=227, i8=7, i9=-1, iArr1[]=new int[N];
        double d1=95.109915;
        float f=73.370F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -59256L);
        FuzzerUtils.init(iArr1, -174);

        for (long l1 : lArr) {
            i3 -= (int)-2.910F;
        }
        iArr1[(i2 >>> 1) % N] >>= i3;
        for (i5 = 292; i5 > 1; --i5) {
            for (i7 = 1; i7 < 6; ++i7) {
                i8 = (int)444853277L;
                iArr1[i7 + 1] -= (int)Test.instanceCount;
                i9 = 1;
                do {
                    Test.instanceCount *= i3;
                    i6 = i3;
                    switch (((i2 >>> 1) % 7) + 94) {
                    case 94:
                        iArr1[i5] = i2;
                        i2 = (int)Test.instanceCount;
                        iArr1[i5] += (int)Test.instanceCount;
                        break;
                    case 95:
                        d1 = i2;
                    case 96:
                        i3 += (((i9 * i5) + i4) - i8);
                        break;
                    case 97:
                        i8 += (int)Test.instanceCount;
                        break;
                    case 98:
                        iArr1[i5 + 1] >>= i7;
                        break;
                    case 99:
                        i6 += (int)Test.instanceCount;
                        break;
                    case 100:
                        i2 = i8;
                        break;
                    default:
                        i8 += (((i9 * i8) + f) - f);
                    }
                } while (++i9 < 2);
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, long l, int i1) {

        int i10=65258, i11=-10641, i12=8, i13=9, i14=52451;
        float f1=109.691F;
        long lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(lArr1, 82L);
        FuzzerUtils.init(lArr2, 14L);

        vMeth1(i, i, i);
        lArr1[(i >>> 1) % N] -= i;
        i10 = 1;
        while (++i10 < 317) {
            i1 += (13 + (i10 * i10));
            for (i11 = i10; i11 < 5; ++i11) {
                switch ((i10 % 2) + 37) {
                case 37:
                    i12 = i11;
                    break;
                case 38:
                    f1 += l;
                    i12 = i10;
                default:
                    for (i13 = 1; 1 > i13; ++i13) {
                        i += i13;
                        lArr2[i11 - 1] >>= i1;
                        f1 %= 3;
                        Test.instanceCount <<= i10;
                        if (Test.bFld) break;
                    }
                }
            }
        }
        vMeth_check_sum += i + l + i1 + i10 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2);
    }

    public short sMeth(double d) {

        int i15=132, i16=40, i17=-46, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -118);

        vMeth(i15, Test.instanceCount, i15);
        for (i16 = 13; i16 < 340; ++i16) {
            switch (((i16 % 2) * 5) + 22) {
            case 28:
                i15 &= 2;
                i15 -= -10537;
                i15 += (i16 ^ i15);
                break;
            case 27:
                i15 = i15;
                break;
            default:
                i17 += 33707;
                iArr2[i16] += i16;
                iArr2[i16] <<= i17;
            }
            i17 += (i16 * Test.instanceCount);
            iArr2 = iArr2;
            i15 -= (int)Test.instanceCount;
            i15 = i17;
            Test.instanceCount = 8363;
        }
        long meth_res = Double.doubleToLongBits(d) + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=-2.124860;
        int i18=-62, i19=-3, i20=-234, i21=8724, i22=-65, i23=55660, i24=-15429, i25=-51663, i26=0, i27=166, iArr[]=new
            int[N];
        float f2=49.786F, f3=1.866F;
        byte by=97;

        FuzzerUtils.init(iArr, 133);

        if (Test.bFld) {
            iArr[(12 >>> 1) % N] = sMeth(d2);
            iArr[(i18 >>> 1) % N] = i18;
        } else {
            iArr[(i19 >>> 1) % N] -= sFld;
        }
        for (i20 = 9; i20 < 376; i20 += 2) {
            sFld += (short)(((i20 * i18) + i19) - Test.instanceCount);
            i21 = i19;
            i19 = (int)Test.instanceCount;
            try {
                iArr[i20 + 1] = (213 / i21);
                i21 = (i18 % i19);
                i19 = (iArr[i20 + 1] % -2121393793);
            } catch (ArithmeticException a_e) {}
        }
        i22 -= i19;
        i22 = (int)-11L;
        for (i23 = 8; i23 < 195; ++i23) {
            Test.instanceCount = i20;
            i18 *= i21;
            for (f2 = 1; f2 < 134; f2++) {
                Test.lArrFld[(int)(f2)][i23 + 1] = Test.instanceCount;
                f3 -= -4007580375L;
                iArr[(int)(f2 + 1)] = by;
                i25 += i20;
            }
            switch ((i23 % 4) + 43) {
            case 43:
                i19 += (int)f2;
                break;
            case 44:
                i25 = i19;
                break;
            case 45:
                i25 = i18;
                i21 >>= i24;
                i25 += (i23 - i24);
                break;
            case 46:
                for (i26 = 1; i26 < 134; ++i26) {
                    i18 += (i26 * i27);
                    sFld = (short)18;
                    iArrFld[i26 + 1] >>= (int)Test.instanceCount;
                    Test.instanceCount = i22;
                }
                break;
            default:
                i19 /= (int)(i25 | 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
