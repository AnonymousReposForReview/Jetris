package tests.javafuzzer1201;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:22:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8301083774136529935L;
    public static byte byFld=78;
    public double dFld=0.18596;
    public boolean bFld=true;
    public static float fFld=3.108F;
    public volatile short sFld=-18058;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static volatile long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.sArrFld, (short)27650);
        FuzzerUtils.init(Test.lArrFld, -1504488851L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, float f, int i5) {

        int i6=-98, i7=-19652, i8=-139, i9=30913;
        double d2=-102.84382;
        boolean b=false;
        short s=11256;

        i4 = -24042;
        f *= (float)-2.122525;
        for (i6 = 6; i6 < 128; i6++) {
            try {
                Test.iArrFld[i6] = (i5 % i6);
                Test.iArrFld[i6 + 1] = (-41412 / Test.iArrFld[i6 - 1]);
                i5 = (Test.iArrFld[i6 + 1] % Test.iArrFld[i6 + 1]);
            } catch (ArithmeticException a_e) {}
            i8 = 1;
            while (++i8 < 13) {
                for (d2 = 1; d2 < 1; d2++) {
                    Test.instanceCount &= i6;
                    Test.sArrFld[i6 + 1] >>= (short)30829;
                    i9 = 64567;
                    i4 = Test.byFld;
                    Test.instanceCount += i6;
                    Test.instanceCount |= i8;
                    if (b) break;
                    Test.instanceCount = s;
                    i7 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d2) + i9 + (b ?
            1 : 0) + s;
    }

    public static int iMeth(long l1) {

        int i3=12, i10=179, i11=55469, i12=234, i13=60, iArr1[][]=new int[N][N];
        double d1=46.105562;
        float f1=-70.632F;
        short s1=16932;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 46482);

        i3 = (int)((d1--) - iArr1[(i3 >>> 1) % N][(i3 >>> 1) % N]);
        if (false) {
            vMeth1(i3, f1, i3);
            f1 -= (float)-64.81544;
        } else if (b1) {
            i3 <<= i3;
            Test.instanceCount += s1;
            for (i10 = 10; i10 < 359; ++i10) {
                for (i12 = 1; i12 < 5; i12 += 2) {
                    f1 += i13;
                    Test.iArrFld[i10] -= -25450;
                }
                i3 += (-38170 + (i10 * i10));
                i11 |= (int)0L;
                i3 += (i10 * i10);
                i11 = -39263;
                Test.iArrFld[i10 - 1] += (int)f1;
            }
        }
        long meth_res = l1 + i3 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + s1 + i10 + i11 + i12 + i13 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, double d) {

        int i2=4, i14=-17666, i15=105, i16=-227, i17=22482, i18=-42466, iArr[]=new int[N];
        long l2=3035532065L;
        float f2=-46.388F;
        boolean b2=true;

        FuzzerUtils.init(iArr, 13);

        iArr[(i2 >>> 1) % N] = (int)(d++);
        iMeth(-13L);
        i14 = 1;
        while (++i14 < 310) {
            for (i15 = 1; i15 < 5; i15++) {
                for (i17 = i15; i17 < 2; ++i17) {
                    i2 = i18;
                    Test.byFld += (byte)(i17 ^ i17);
                    iArr = Test.iArrFld;
                    i18 += (i17 * i17);
                    l2 = i15;
                    f2 += (i17 + i18);
                }
                Test.lArrFld[i15 - 1] *= (long)f2;
                Test.byFld = (byte)i17;
                Test.bArrFld[i15] = b2;
                i18 = i17;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i2 + i14 + i15 + i16 + i17 + i18 + l2 +
            Float.floatToIntBits(f2) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-150, i1=151, i19=-110, i20=63838, i21=-89, i22=-1607, i23=-42968, i24=-12681, i25=-3, i26=-39, i27=6,
            i28=-5, i29=-29240;
        float f3=0.984F;

        for (i = 10; i < 170; ++i) {
            vMeth(Test.instanceCount, dFld);
            for (f3 = 8; f3 < 157; ++f3) {
                for (i20 = 1; i20 < 2; i20++) {
                    i21 >>= i20;
                }
                bFld = bFld;
                i21 |= 3953;
                i1 >>= -13;
                Test.fFld -= i20;
                i19 = i21;
                i1 += i19;
                for (i22 = i; i22 < 2; ++i22) {
                    i1 += (i22 * i22);
                    try {
                        i19 = (i / i22);
                        i21 = (i % 48044);
                        i19 = (i19 / i1);
                    } catch (ArithmeticException a_e) {}
                    i1 ^= -14;
                    i19 = sFld;
                }
            }
        }
        Test.fFld -= i;
        for (i24 = 188; 9 < i24; --i24) {
            dFld *= i22;
            i19 += i20;
            Test.instanceCount *= 40982;
            Test.fFld += (((i24 * i21) + i23) - sFld);
            for (i26 = 140; i26 > i24; i26--) {
                Test.sArrFld = Test.sArrFld;
                try {
                    i23 = (-218 / i23);
                    i19 = (Test.iArrFld[i26] / i22);
                    i1 = (Test.iArrFld[i24 + 1] / -16873);
                } catch (ArithmeticException a_e) {}
                for (i28 = 1; i28 < 1; i28++) {
                    i23 += (int)Test.instanceCount;
                    Test.iArrFld[i26 - 1] *= i20;
                    bFld = bFld;
                    dFld = i24;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
