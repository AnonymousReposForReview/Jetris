package tests.javafuzzer1043;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:12:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-248297946642861587L;
    public int iFld=61267;
    public static boolean bFld=true;
    public static short sFld=24774;
    public static double dFld=30.9129;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -186);
        FuzzerUtils.init(Test.fArrFld, -17.207F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static void vMeth(int i, boolean b, int i1) {

        byte by=-22;

        by += (byte)i1;
        vMeth_check_sum += i + (b ? 1 : 0) + i1 + by;
    }

    public static float fMeth1(int i6, int i7, int i8) {

        int i9=-1, i10=-10292, i11=1, i12=6627, i13=244;
        short s=30283;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 65278L);

        for (i9 = 8; i9 < 223; i9++) {
            for (i11 = 7; i11 > 1; i11 -= 3) {
                i6 += (int)-127.14006;
                lArr1[i9 + 1] = i12;
                Test.instanceCount += -98;
            }
            Test.iArrFld = FuzzerUtils.int1array(N, (int)14);
            i8 -= i10;
            i13 ^= 3;
            Test.instanceCount += s;
            Test.instanceCount += i9;
            lArr1[i9 - 1] = i6;
            if (Test.bFld) continue;
            i7 = i9;
            i7 += i9;
        }
        Test.iArrFld[(i9 >>> 1) % N] /= (int)(i7 | 1);
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + s + FuzzerUtils.checkSum(lArr1);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth() {

        int i4=-46, i5=13, i14=-6988, i15=-158, i16=7, i17=2, i18=122, iArr1[]=new int[N];
        float f1=0.965F;
        short s1=288;
        double d=0.22732;
        byte by1=7;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(lArr2, 10L);

        for (i4 = 10; i4 < 207; ++i4) {
            i5 -= (int)(f1 - (iArr1[i4 + 1]--));
            i5 = (int)(((-(-20.91111 + (i4 - i5))) - fMeth1(i14, i5, i5)) + s1);
            for (i15 = 1; i15 < 8; ++i15) {
                i14 += i15;
                d = by1;
                i16 += 25092;
                for (i17 = 1; i17 < 2; ++i17) {
                    long l=-2932977819L;
                    Test.bFld = Test.bFld;
                    lArr2[i15 - 1] = i18;
                    Test.instanceCount += (long)(-2.830F + (i17 * i17));
                    i14 += (int)Test.instanceCount;
                    l = i16;
                }
                i16 -= (int)f1;
                i5 = i14;
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f1) + i14 + s1 + i15 + i16 + Double.doubleToLongBits(d) + by1 +
            i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(float f) {

        int i2=-54, i3=-13, i19=57220, i20=7, i21=67, i22=53043, i23=0;
        byte by2=12;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -492135364669372856L);

        for (i2 = 5; i2 < 194; i2 += 2) {
            i3 = Integer.reverseBytes(-(++i3));
            Test.instanceCount += (long)(((Test.instanceCount - i2) + (-(++lArr[i2 + 1]))) - (fMeth() + i3));
            for (i19 = 1; i19 < 16; i19++) {
                Test.sFld -= (short)i2;
                switch (((-218 >>> 1) % 2) + 16) {
                case 16:
                    Test.instanceCount >>= Test.instanceCount;
                    i21 = 1;
                    do {
                        Test.sFld = (short)-173;
                        switch (((i2 >>> 1) % 7) + 2) {
                        case 2:
                            if (Test.bFld) continue;
                            Test.iArrFld[i2 + 1] = (int)Test.instanceCount;
                            break;
                        case 3:
                            i22 = i22;
                            i23 ^= i22;
                            break;
                        case 4:
                            i20 |= Test.sFld;
                            break;
                        case 5:
                            i22 += (((i21 * i19) + i2) - i3);
                        case 6:
                            lArr[i21 - 1] = i21;
                            break;
                        case 7:
                            Test.instanceCount <<= i3;
                            break;
                        case 8:
                            i22 += (i21 * Test.instanceCount);
                            break;
                        }
                    } while (++i21 < 2);
                    break;
                case 17:
                    by2 = (byte)Test.sFld;
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i19 + i20 + i21 + i22 + i23 + by2 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b1=true;
        float f2=1.932F;
        int i24=44101, i25=-60259, i26=56901, i27=-246, i28=-51965, i29=3, iArr[]=new int[N];
        long l1=-31675488L, lArr3[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr3, 4802367588770632221L);
        FuzzerUtils.init(dArr, -22.38558);

        vMeth(Math.abs(iArr[(iFld >>> 1) % N] / ((-1 * (iFld >>> iFld)) | 1)), b1, iMeth(f2));
        for (i24 = 11; 257 > i24; i24++) {
            i26 = 102;
            do {
                Test.instanceCount += (((i26 * i26) + i25) - iFld);
                Test.instanceCount -= (long)f2;
                for (l1 = 1; l1 < 2; ++l1) {
                    i25 += (-170 + (l1 * l1));
                    f2 += i24;
                    Test.instanceCount = 11806;
                    iFld *= i24;
                    switch ((int)((l1 % 2) + 73)) {
                    case 73:
                        i25 <<= (int)l1;
                        f2 += (l1 * l1);
                        i27 >>>= i24;
                        break;
                    case 74:
                        Test.fArrFld[i24 - 1][i24 + 1] = Test.instanceCount;
                        iFld += (int)(l1 | l1);
                        i25 += (int)l1;
                    default:
                        iFld = -23;
                        if (b1) continue;
                        f2 = -10;
                    }
                    iFld += (int)29.877F;
                    lArr3[i24 + 1] += (long)Test.dFld;
                    switch ((((i26 >>> 1) % 1) * 5) + 93) {
                    case 95:
                        f2 += (((l1 * f2) + f2) - i24);
                        break;
                    }
                    iFld += (int)(1771640177L + (l1 * l1));
                }
                Test.sFld = (short)i25;
                for (i28 = 1; i28 < 2; ++i28) {
                    i25 += i28;
                    iFld = (int)l1;
                    dArr[i26 - 1] = i26;
                }
            } while ((i26 -= 2) > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
