package tests.javafuzzer1357;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:38:52 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4054L;
    public static float fFld=1.485F;
    public static double dFld=2.61424;
    public static short sFld=-21217;
    public static byte byFld=-19;
    public static volatile int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -195);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, int i8) {

        boolean b=true;
        byte by=-97;
        int i9=12, i10=6, i11=-52507;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.518F);

        Test.instanceCount = i7;
        for (float f : fArr) {
            if (b) {
                fArr = fArr;
                Test.iArrFld = Test.iArrFld;
                i7 += (int)-58L;
            }
            if (b) break;
        }
        Test.instanceCount = i8;
        i7 &= -60315;
        by = (byte)i7;
        i9 = 1;
        while (++i9 < 341) {
            Test.iArrFld = Test.iArrFld;
            for (i10 = 5; i10 > i9; --i10) {
                i11 -= (int)Test.dFld;
                if (i7 != 0) {
                    vMeth_check_sum += i7 + i8 + (b ? 1 : 0) + by + i9 + i10 + i11 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + (b ? 1 : 0) + by + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i3, int i4) {

        int i5=6, i6=5, i12=-33560, i13=-11522, i14=41442, i15=-80;
        long l=1795580530448116664L;

        for (i5 = 8; i5 < 233; ++i5) {
            vMeth(i3, i6);
            for (l = i5; l < 7; ++l) {
                Test.fFld -= i5;
            }
            try {
                i3 = (Test.iArrFld[i5 + 1] % Test.iArrFld[i5 + 1]);
                i12 = (-13406 / i4);
                i6 = (43715 / i6);
            } catch (ArithmeticException a_e) {}
            if (i5 != 0) {
            }
            i3 += i5;
            try {
                i3 = (i4 % Test.iArrFld[i5 - 1]);
                i4 = (i5 / -47283);
                i4 = (i6 / -116);
            } catch (ArithmeticException a_e) {}
            i12 -= (int)Test.fFld;
            for (i13 = 1; i13 < 7; ++i13) {
                byte by1=-106;
                i3 = -30434;
                i3 = i3;
                Test.iArrFld[i5] = by1;
                i15 = i14;
                Test.instanceCount <<= 28670;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + l + i12 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i1, int i2) {

        int i16=7, i17=-39788, i18=189, i19=-237, iArr[]=new int[N];
        byte by2=65;

        FuzzerUtils.init(iArr, 15);

        Test.fFld += ((Test.instanceCount + (i1 - 5L)) + -8);
        Test.dFld = (((Test.iArrFld[(-4 >>> 1) % N] = (int)Test.instanceCount) - iMeth(i2, -1)) + i2);
        for (i16 = 1; i16 < 330; i16++) {
            i17 += i16;
            i17 >>= i2;
            i17 = i2;
            for (i18 = 1; i18 < 5; i18++) {
                i19 -= i2;
                i1 += (-80 + (i18 * i18));
                Test.iArrFld[i18 - 1] = (int)70.470F;
                by2 = (byte)i1;
            }
            iArr[i16 - 1] = -3;
        }
        i19 = (int)Test.instanceCount;
        iArr[(i16 >>> 1) % N] = 102;
        long meth_res = i1 + i2 + i16 + i17 + i18 + i19 + by2 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=139, i21=4, i22=-1, i23=52490, i24=-106, i25=6, i26=-14, i27=8;
        long l2=314933171814159211L;
        double dArr[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, 0.44880);
        FuzzerUtils.init(fArr1, 0.66F);

        i = 1;
        while (++i < 256) {
            lMeth(i, 4);
            i21 += (13 + (i * i));
            Test.sFld ^= (short)i;
        }
        i22 = 1;
        while (++i22 < 238) {
            i21 >>>= i21;
            dArr[i22] -= Test.instanceCount;
            i21 <<= (int)Test.instanceCount;
            i23 = 1;
            while (++i23 < 106) {
                i21 <<= -17612;
                switch ((i23 % 3) + 118) {
                case 118:
                    i21 -= i23;
                    lArrFld[i23] += Test.instanceCount;
                case 119:
                    for (i24 = i22; i24 < 1; i24++) {
                        Test.iArrFld[i23] = (int)Test.instanceCount;
                        i21 >>= i25;
                        lArrFld[i24 - 1] += (long)Test.dFld;
                        i21 -= i25;
                        i25 = i23;
                    }
                    i25 += Test.byFld;
                    break;
                case 120:
                    switch ((i22 % 8) + 115) {
                    case 115:
                        i25 -= (int)-123.828F;
                        for (i26 = i22; 1 > i26; i26++) {
                            i21 = 6;
                            lArrFld[i23 + 1] = i21;
                            Test.dFld *= i21;
                            Test.instanceCount <<= Test.instanceCount;
                            i25 >>= Test.sFld;
                            fArr1[i22 + 1] += -42981;
                            Test.fFld += i26;
                        }
                        break;
                    case 116:
                        lArrFld[i23] = i22;
                        break;
                    case 117:
                        Test.fFld -= i25;
                        break;
                    case 118:
                        i27 += i23;
                        break;
                    case 119:
                    case 120:
                        i21 = i24;
                    case 121:
                        i25 += i23;
                        break;
                    case 122:
                        if (true) continue;
                        break;
                    default:
                        i27 -= (int)l2;
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
