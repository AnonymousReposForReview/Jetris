package tests.javafuzzer971;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:16:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public double dFld=-2.80649;
    public byte byFld=-54;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 221);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vMeth(int i3) {


        i3 = (++Test.iArrFld[(i3 >>> 1) % N]);
        vMeth_check_sum += i3;
    }

    public static float fMeth(long l1, int i13, int i14) {

        long l2=-95L;
        int i15=29360, i16=-176, i17=11, i18=6, i19=-104;
        short s3=-15154;
        float f3=-1.615F;

        for (l2 = 8; 163 > l2; l2++) {
            i15 = (int)l1;
            if (false) {
                Test.instanceCount = l1;
                i14 += i14;
                i14 <<= i15;
                for (i16 = (int)(l2); i16 < 10; ++i16) {
                    i13 = s3;
                    for (i18 = 1; i18 < 1; ++i18) {
                        byte by=-124;
                        by -= (byte)i17;
                        switch ((int)((l2 % 2) + 30)) {
                        case 30:
                        case 31:
                            switch ((int)((l2 % 2) + 47)) {
                            case 47:
                            case 48:
                                i17 += (i18 + i16);
                            }
                            break;
                        }
                        by = (byte)9L;
                    }
                    f3 = l1;
                }
            }
        }
        long meth_res = l1 + i13 + i14 + l2 + i15 + i16 + i17 + s3 + i18 + i19 + Float.floatToIntBits(f3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(float f2) {

        int i9=-83, i10=-79, i11=4006, i12=14, i20=-13, i21=122;
        short s2=9975;
        boolean b=false;
        long lArr1[]=new long[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(lArr1, 119L);
        FuzzerUtils.init(byArr1, (byte)-108);

        for (i9 = 16; i9 < 392; ++i9) {
            s2 -= (short)-52510;
            Test.iArrFld[i9] = (int)(f2--);
            for (i11 = 1; 4 > i11; i11++) {
                Test.iArrFld[i9] <<= (int)(((i12 *= i12) + (i12--)) + ((--lArr1[(i11 >>> 1) % N]) -
                    fMeth(Test.instanceCount, i12, -6)));
                i12 += i9;
                try {
                    Test.iArrFld[i11] = (Test.iArrFld[i11] % i9);
                    i12 = (i12 / 1038382997);
                    Test.iArrFld[i11 + 1] = (-539909798 % i10);
                } catch (ArithmeticException a_e) {}
                i10 += i11;
                b = true;
                f2 = f2;
                for (i20 = 1; i20 < 2; i20++) {
                    s2 = (short)i9;
                    byArr1[i11] += (byte)i9;
                    Test.instanceCount = i12;
                    i21 *= -1;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i9 + i10 + s2 + i11 + i12 + (b ? 1 : 0) + i20 + i21 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr1);
    }

    public static int iMeth(int i4, int i5) {

        short s1=-14544;
        int i6=0, i7=-6, i8=-252, i22=4;
        float f1=-43.420F;
        long l=5176259769565009675L;
        byte by1=-27;
        double d=1.68790;

        s1 = (short)i4;
        i5 = Test.iArrFld[(-58326 >>> 1) % N];
        Test.iArrFld[(i4 >>> 1) % N] >>>= Math.abs(Integer.reverseBytes(i4 = i4));
        for (i6 = 1; i6 < 222; i6++) {
            i7 = (int)(++f1);
            i7 %= (int)(s1 | 1);
            for (l = 7; l > 1; --l) {
                i5 -= (int)Test.instanceCount;
                if (i5 != Math.min(3L, (i4 * i8) % ((Test.instanceCount + i6) | 1))) continue;
                vMeth1(f1);
                i22 = 2;
                while ((i22 -= 2) > 0) {
                    switch (((i22 % 8) * 5) + 44) {
                    case 81:
                        i7 >>>= by1;
                        d = by1;
                        i4 <<= i7;
                        break;
                    case 46:
                        f1 += l;
                    case 60:
                        Test.instanceCount = l;
                        break;
                    case 64:
                        i5 &= i6;
                        break;
                    case 79:
                        Test.iArrFld[i22] >>>= i8;
                    case 62:
                        i4 <<= 99;
                        break;
                    case 58:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 50:
                    }
                }
            }
        }
        long meth_res = i4 + i5 + s1 + i6 + i7 + Float.floatToIntBits(f1) + l + i8 + i22 + by1 +
            Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-114, i1=5, i2=31134, i23=13, i24=109, i25=33, i26=8, i27=1;
        short s=14517;
        float f=0.886F, f4=-6.773F, f5=1.395F;
        boolean b1=false;
        long lArr[][]=new long[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -1306217972342434825L);
        FuzzerUtils.init(byArr, (byte)62);

        i >>>= (int)(((Test.instanceCount - i) * (s * i)) - ((Test.instanceCount + -80.570F) + Math.max(i, i)));
        i1 = 1;
        while ((i1 += 3) < 310) {
            f -= (f - i);
            i += (48734 + (i1 * i1));
            Test.iArrFld[i1 - 1] += (int)(--dFld);
            lArr[i1 - 1][i1 - 1] <<= ((i--) >> Math.min(i, (int)(104 - (f * f))));
        }
        i2 = 1;
        while (++i2 < 147) {
            Test.instanceCount = (long)Float.intBitsToFloat((--byArr[i2]) * (i1 - i));
            f -= 2;
            Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
            dFld = byFld;
        }
        Test.instanceCount += byFld;
        vMeth(++i);
        i = (i--);
        dFld *= iMeth(217, i2);
        Test.iArrFld = Test.iArrFld;
        Test.instanceCount = i1;
        for (f4 = 2; f4 < 174; f4++) {
            b1 = b1;
            for (i24 = 1; i24 < 146; i24 += 2) {
                Test.instanceCount -= Test.instanceCount;
                for (i26 = i24; i26 < 3; i26++) {
                    f5 = -52690;
                    Test.iArrFld[(int)(f4 + 1)] += i2;
                    byArr = byArr;
                    switch ((i24 % 8) + 65) {
                    case 65:
                    case 66:
                        i += (int)(0.725F + (i26 * i26));
                        Test.instanceCount -= i26;
                        i25 |= i2;
                        i27 += -11562;
                        break;
                    case 67:
                        i27 = i24;
                        break;
                    case 68:
                        s += (short)i1;
                        break;
                    case 69:
                        if (b1) continue;
                        break;
                    case 70:
                        Test.iArrFld[i24] += -12;
                        break;
                    case 71:
                        Test.iArrFld[i24 - 1] *= (int)f5;
                        break;
                    case 72:
                        Test.instanceCount *= i1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
