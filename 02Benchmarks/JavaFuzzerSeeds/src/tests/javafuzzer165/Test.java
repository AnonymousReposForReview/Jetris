package tests.javafuzzer165;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:12:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1609081791L;
    public static int iFld=-3;
    public float fFld=2.434F;
    public double dFld=-2.73491;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(byte by) {

        float f=-56.625F;
        double d=-22.52803;
        int i3=-1118, i4=166, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 67);

        f -= 4058937238088314043L;
        for (d = 3; d < 225; d++) {
            try {
                i3 = (i3 / iArr[(int)(d + 1)]);
                i3 = (i3 % iArr[(int)(d + 1)]);
                i3 = (i3 % i3);
            } catch (ArithmeticException a_e) {}
            switch ((int)((d % 2) + 16)) {
            case 16:
                i3 <<= i3;
            case 17:
                i4 -= (int)Test.instanceCount;
                break;
            default:
                Test.instanceCount += (long)d;
                iArr[(int)(d)] -= (int)Test.instanceCount;
                i4 += (int)d;
            }
            i4 = -28940;
            if (b) {
                i3 += i3;
                i4 += (int)(d + i3);
            } else {
                i4 += -26;
            }
            try {
                iArr[(int)(d)] = (i4 % i4);
                i4 = (-42421 % i4);
                i4 = (i4 / 25677);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i3 + i4 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i2) {

        int i5=-32644, i6=-54922, i7=-65408, i8=38338, i9=-107, i10=9;
        byte by1=50;
        float f1=-1.450F;
        short s=-18900;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -61071L);

        byMeth((byte)(0));
        for (i5 = 15; i5 < 340; i5++) {
            for (i7 = 1; i7 < 5; i7++) {
                lArr[i7 - 1] = by1;
                i2 -= i7;
                i6 += (int)Test.instanceCount;
                Test.instanceCount = i8;
                i2 -= (int)f1;
            }
            Test.instanceCount -= i7;
            lArr[i5 + 1] = i6;
            i8 -= i8;
            Test.instanceCount >>>= 168;
            for (i9 = 5; i9 > 1; --i9) {
                i6 += (i9 * i9);
                Test.instanceCount = s;
            }
        }
        vMeth1_check_sum += i2 + i5 + i6 + i7 + i8 + by1 + Float.floatToIntBits(f1) + i9 + i10 + s +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1) {

        float f2=29.187F;
        int i12=-197, i13=-119, i14=-30, iArr1[]=new int[N];
        double d1=-118.130278;
        short s1=-15820;

        FuzzerUtils.init(iArr1, 4627);

        vMeth1(i1);
        f2 -= Test.instanceCount;
        for (int i11 : iArr1) {
            i11 += (int)Test.instanceCount;
            i12 = 1;
            while (++i12 < 4) {
                f2 *= i12;
            }
            d1 = i1;
            for (i13 = 1; 4 > i13; ++i13) {
                iArr1 = iArr1;
                Test.instanceCount = Test.iFld;
                if (i11 != 0) {
                    vMeth_check_sum += i1 + Float.floatToIntBits(f2) + i12 + Double.doubleToLongBits(d1) + i13 + i14 +
                        s1 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.instanceCount = 4180172256L;
                i1 -= (int)Test.instanceCount;
                i1 = (int)Test.instanceCount;
                Test.iFld += (((i13 * s1) + i11) - i11);
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f2) + i12 + Double.doubleToLongBits(d1) + i13 + i14 + s1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-195, i15=-128, i16=-13, i17=250, i18=208, i19=32, i20=-9, iArr2[]=new int[N];
        short s2=-21560;
        boolean b1=true;

        FuzzerUtils.init(iArr2, 40548);

        i = 1;
        while (++i < 256) {
            vMeth(Test.iFld);
            s2 *= (short)Test.instanceCount;
            Test.iFld += (i - fFld);
            Test.iFld += i;
            Test.instanceCount += (((i * i) + i) - i);
            for (i15 = 5; 98 > i15; ++i15) {
                for (i17 = 2; i17 > 1; i17--) {
                    Test.instanceCount += i17;
                    iArr2[i15] = -1;
                    Test.instanceCount += Test.instanceCount;
                    iArr2[i - 1] += i17;
                    Test.instanceCount -= i;
                    Test.iFld = i15;
                    i16 = (int)fFld;
                    Test.iFld -= (int)fFld;
                    if (b1) break;
                }
                Test.instanceCount <<= 89L;
                i18 |= i17;
                Test.iFld += (((i15 * Test.iFld) + s2) - i16);
                for (i19 = 1; i19 < 2; i19++) {
                    i18 += (i19 | i18);
                    Test.instanceCount <<= 9023930770927216593L;
                    iArr2[i19] = (int)25.192F;
                    Test.iFld = (int)Test.instanceCount;
                    i20 += (((i19 * s2) + i16) - Test.instanceCount);
                    Test.iFld += (int)dFld;
                    i18 <<= (int)Test.instanceCount;
                }
            }
            i18 = (int)Test.instanceCount;
            Test.iFld += (((i * i19) + i) - i);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
