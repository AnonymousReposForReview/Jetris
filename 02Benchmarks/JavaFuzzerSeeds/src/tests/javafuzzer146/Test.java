package tests.javafuzzer146;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:03:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=83L;
    public static int iFld=187;
    public static double dFld=-62.57759;
    public static short sFld=-20218;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 97);
        FuzzerUtils.init(Test.fArrFld, 62.935F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7) {

        int i8=-32199, i9=31737, i10=20882, i11=-22122, i12=-6, i13=1968, i14=-20749, iArr1[]=new int[N];
        float f2=-116.364F, f3=60.782F;

        FuzzerUtils.init(iArr1, -70);

        i8 += i8;
        for (f2 = 16; f2 < 268; f2++) {
            Test.instanceCount /= (i9 | 1);
            Test.instanceCount += (long)f2;
            for (i10 = 6; i10 > 1; i10 -= 3) {
                Test.instanceCount ^= i9;
            }
        }
        i9 = i11;
        Test.instanceCount = (long)-2.127700;
        f3 = Test.instanceCount;
        for (i12 = 17; i12 < 336; i12++) {
            iArr1[i12] = (int)Test.dFld;
            Test.instanceCount = i12;
            i14 = 1;
            while (++i14 < 5) {
                Test.instanceCount /= ((long)(f3) | 1);
                Test.dFld -= i11;
            }
        }
        vMeth2_check_sum += i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13
            + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i2) {

        int i3=-157, i4=-6, i5=-101, i6=127, i15=14, i16=60444;
        float f1=-1.838F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.29305);

        for (i3 = 10; i3 < 293; ++i3) {
            f1 += (i3 * i3);
            for (i5 = i3; i5 < 6; i5++) {
                vMeth2(i6);
                for (i15 = 1; i15 < 1; i15++) {
                    Test.iArrFld[i3 - 1] += i6;
                    Test.instanceCount += (i15 ^ i5);
                    if (i4 != 0) {
                        vMeth1_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i15 + i16 + (b ? 1 : 0)
                            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    dArr[i3] = Test.iFld;
                    i4 += (i15 + i4);
                    i16 += (((i15 * i15) + i2) - Test.instanceCount);
                    i2 *= i16;
                }
            }
            b = b;
            Test.instanceCount <<= i2;
            i16 += i3;
        }
        vMeth1_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i15 + i16 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, long l, int i1) {

        byte by=-79;
        double d=42.48513;
        float f4=54.421F;
        int i17=17633, i18=-9, i19=47926, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -13);

        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth1(i);
        Test.dFld *= l;
        Test.dFld += i;
        Test.instanceCount = by;
        Test.dFld += Test.instanceCount;
        d = 1;
        while (++d < 287) {
            f4 = -27.45F;
            i17 = 1;
            do {
                if (b1) continue;
                for (i18 = 1; i18 < 1; i18++) {
                    if (b1) {
                        i1 = -198;
                        i += i18;
                    } else {
                        i >>>= i17;
                    }
                }
            } while (++i17 < 6);
        }
        vMeth_check_sum += i + l + i1 + by + Double.doubleToLongBits(d) + Float.floatToIntBits(f4) + i17 + (b1 ? 1 : 0)
            + i18 + i19 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f=57.1022F;
        int i20=-13, i21=0, i22=-241, i23=61638;
        double d1=1.122043;
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -43L);

        Test.iFld -= (int)(((Test.iFld + Test.iFld) * (f * 7)) + Test.iFld);
        vMeth(Test.iFld, -100L, Test.iFld);
        Test.iFld = Test.iFld;
        i20 = 1;
        while (++i20 < 297) {
            f *= Test.iFld;
        }
        for (d1 = 11; d1 < 299; d1++) {
            Test.iFld <<= Test.iFld;
            Test.fArrFld[(int)(d1 + 1)] -= i20;
            i21 = (int)Test.instanceCount;
            Test.dFld *= i21;
            Test.iFld -= i20;
            i22 = 1;
            do {
                Test.instanceCount += i22;
                Test.iArrFld[i22 - 1] += Test.iFld;
                i21 -= (int)2.381F;
                i21 <<= i22;
                i23 = 1;
                do {
                    Test.iFld -= i22;
                    i21 = (int)-156L;
                    Test.iArrFld[i22 - 1] = i20;
                    b2 = b2;
                    switch ((i23 % 10) + 34) {
                    case 34:
                        switch (((i23 >>> 1) % 8) + 69) {
                        case 69:
                            Test.dFld -= i23;
                            i21 += i23;
                            Test.iFld >>= (int)Test.instanceCount;
                            Test.iFld += i20;
                        case 70:
                            i21 = (int)Test.instanceCount;
                            break;
                        case 71:
                            Test.iArrFld[i23 - 1] += i20;
                            lArr[i23 + 1] = i21;
                            break;
                        case 72:
                            Test.sFld += Test.sFld;
                            break;
                        case 73:
                            Test.instanceCount += (((i23 * i21) + i21) - i20);
                            break;
                        case 74:
                            Test.instanceCount += (i23 - i21);
                            break;
                        case 75:
                            i21 *= (int)Test.instanceCount;
                            break;
                        case 76:
                            Test.iFld >>= i20;
                        default:
                            Test.iFld += (i23 + i20);
                        }
                        break;
                    case 35:
                        Test.iFld = i22;
                        break;
                    case 36:
                        Test.instanceCount = i23;
                    case 37:
                        Test.iFld += (i23 - f);
                    case 38:
                        i21 += i23;
                        break;
                    case 39:
                        f -= f;
                        break;
                    case 40:
                        Test.iFld = i20;
                    case 41:
                        Test.instanceCount += (-2 + (i23 * i23));
                        break;
                    case 42:
                        i21 *= (int)f;
                        break;
                    case 43:
                        Test.dFld += i22;
                        break;
                    default:
                        i21 += i23;
                    }
                } while (++i23 < 1);
            } while (++i22 < 87);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
