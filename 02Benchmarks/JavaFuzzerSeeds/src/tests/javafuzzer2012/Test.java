package tests.javafuzzer2012;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:26:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7625431042929245107L;
    public int iFld=11;
    public static double dFld=15.21669;
    public static float fFld=2.518F;
    public static short sFld=-494;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1154066809L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=0, i4=-89, i5=131, i6=0, i7=42558, i8=-17, iArr1[]=new int[N];
        float f=45.151F;
        boolean b=true;

        FuzzerUtils.init(iArr1, -86);

        for (i3 = 5; i3 < 315; i3++) {
            for (i5 = 1; 5 > i5; i5++) {
                Test.instanceCount = i6;
                if (true) {
                    f = i3;
                    if (b) {
                        i4 *= (int)Test.instanceCount;
                        i6 += i3;
                        for (i7 = 1; i7 < 2; ++i7) {
                            if (i6 != 0) {
                                vMeth1_check_sum += i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b ? 1 : 0)
                                    + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            iArr1[i5 + 1] += (int)-21392L;
                            b = b;
                        }
                        f += (i5 * i6);
                    } else {
                        Test.instanceCount >>= i6;
                        iArr1[i5] -= -5;
                    }
                } else if (b) {
                    i4 <<= (int)Test.instanceCount;
                } else {
                    i4 = (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i9=-63953;
        double d=0.100639;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        vMeth1();
        i9 = i9;
        lArr[(i9 >>> 1) % N] *= i9;
        i9 *= (int)Test.instanceCount;
        i9 -= (int)d;
        long meth_res = i9 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i2=-43052, i10=-13, i11=11, i13=-89, i14=6, i15=7, iArr2[]=new int[N];
        float f1=123.570F;
        boolean b1=false;
        short sArr[][]=new short[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 55944);
        FuzzerUtils.init(sArr, (short)-32171);
        FuzzerUtils.init(lArr1, 88181676L);

        i2 *= (iMeth() * i2);
        for (i10 = 10; i10 < 185; ++i10) {
            for (i13 = i10; i13 < 9; ++i13) {
                for (f1 = 1; f1 < 1; ++f1) {
                    i14 /= (int)(Test.instanceCount | 1);
                    if (b1) continue;
                    i14 = (int)1.561F;
                    i2 = (int)Test.dFld;
                    sArr[i13 + 1][i13 - 1] = (short)i14;
                    lArr1[(int)(f1)] += i2;
                    Test.fFld += (-61856 + (f1 * f1));
                    i2 -= (int)Test.instanceCount;
                }
                Test.lArrFld = Test.lArrFld;
                i15 = i13;
            }
            i15 *= i13;
        }
        vMeth_check_sum += l + i2 + i10 + i11 + i13 + i14 + Float.floatToIntBits(f1) + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-233, i1=-9, i16=-14861, i17=-180, i19=-11, i20=-238, i21=4, i22=153, i23=0, iArr[]=new int[N];
        boolean b2=true, bArr[]=new boolean[N];
        long l1=58835L;

        FuzzerUtils.init(iArr, -17152);
        FuzzerUtils.init(bArr, true);

        iArr[(iFld >>> 1) % N] += (int)(iFld + (-Test.instanceCount));
        for (i = 16; i < 374; i++) {
            int i18=-11;
            vMeth(Test.instanceCount);
            iArr = iArr;
            for (i16 = 3; 70 > i16; ++i16) {
                i17 = i17;
                iFld += (i16 * i16);
                Test.fFld *= 3786302831802997475L;
            }
            Test.instanceCount -= i1;
            Test.instanceCount -= Test.instanceCount;
            iArr = FuzzerUtils.int1array(N, (int)-21653);
            if (b2) {
                switch (((i % 5) * 5) + 114) {
                case 121:
                    try {
                        iArr[i - 1] = (5840 / i18);
                        i1 = (iArr[i] / 186);
                        i17 = (i17 % 57392);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 126:
                    for (i19 = 3; i19 < 70; ++i19) {
                        Test.instanceCount >>= i19;
                        try {
                            i17 = (-30716 % i20);
                            i17 = (iArr[i] / -1613);
                            iFld = (i18 % -77);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (((i19 * Test.fFld) + i1) - Test.fFld);
                        i17 += -125;
                        i20 &= i19;
                        Test.sFld <<= (short)Test.instanceCount;
                    }
                    break;
                case 118:
                    bArr = bArr;
                case 133:
                    Test.instanceCount = iFld;
                    bArr[i + 1] = b2;
                case 120:
                    for (i21 = 3; i21 < 70; i21++) {
                        if (b2) continue;
                        Test.lArrFld[i - 1][i - 1] += i22;
                        iFld += (i21 * i21);
                        l1 >>>= i23;
                        Test.fFld -= i22;
                    }
                }
            } else {
                i1 += i22;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
