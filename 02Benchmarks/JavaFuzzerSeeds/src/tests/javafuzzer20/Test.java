package tests.javafuzzer20;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:00:19 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-790911340153524616L;
    public static byte byFld=-18;
    public double dFld=2.2348;
    public float fFld=-2.935F;
    public static short sFld=22161;
    public static float fFld1=-1.248F;
    public static double dFld1=28.2116;
    public static int iFld=225;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -3);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth(byte by, byte by1, int i2) {

        int i3=62958, i4=-61066, i5=9, i6=39091, i7=-217, i8=0, iArr[]=new int[N];
        double d=127.68163;
        long l=-50778L;
        float f1=0.498F;

        FuzzerUtils.init(iArr, 75);

        for (i3 = 10; i3 < 203; i3++) {
            iArr = (iArr = iArrFld);
            i4 = (int)(d * (i3 << i4));
            iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
            i2 += (int)((++Test.instanceCount) + ((Test.instanceCount + Test.instanceCount) - (i3 * i2)));
            i4 >>>= -13;
        }
        for (i5 = 7; i5 < 183; ++i5) {
            d += (Test.instanceCount--);
            i7 = 1;
            while (++i7 < 9) {
                for (l = i5; l < 1; ++l) {
                    if (i3 != 0) {
                        vMeth_check_sum += by + by1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + l + i8
                            + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount += (l | l);
                    Test.instanceCount -= i5;
                    i2 = Math.min((int)((f1 - l) + (i8 - 35747)), (int)(i8 - (d - -4666540353507767789L)));
                    i4 = (int)Math.min(l, Test.instanceCount);
                }
            }
        }
        vMeth_check_sum += by + by1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + l + i8 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l2, long l3) {

        int i14=-100, i15=146, i17=-39632, i18=59272, i19=-22941, i20=114, i21=10473;
        byte by2=77;

        for (i14 = 9; i14 < 236; ++i14) {
            Test.sFld += (short)154;
            i15 = (int)l2;
            i15 += (i14 * i14);
        }
        l2 >>= Test.instanceCount;
        for (i17 = 10; 175 > i17; ++i17) {
            i18 = i18;
            i18 += (int)l2;
            i15 += (((i17 * by2) + l2) - Test.byFld);
            i18 -= i18;
            Test.fFld1 *= i15;
            l3 = Test.instanceCount;
            for (i19 = i17; i19 < 10; i19++) {
                i15 += (i19 * i21);
                i20 += i20;
            }
        }
        long meth_res = l2 + l3 + i14 + i15 + i17 + i18 + by2 + i19 + i20 + i21;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i12) {

        int i13=-57946, i22=0, i23=208, i24=0, i25=-253, i26=-182, iArr1[][]=new int[N][N];
        double d1=8.107657;
        short sArr[]=new short[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr1, 6);
        FuzzerUtils.init(sArr, (short)5125);
        FuzzerUtils.init(fArr, 0.30F);

        i12 = (-(--iArr1[(136 >>> 1) % N][(i12 >>> 1) % N]));
        iArr1[(i12 >>> 1) % N][(i12 >>> 1) % N] -= i12;
        sArr[(i12 >>> 1) % N] *= (short)((i12 += (-(++i13))) - (fArr[(i13 >>> 1) % N][(i12 >>> 1) % N] /
            (iMeth(Test.instanceCount, Test.instanceCount) | 1)));
        i22 = 1;
        while (++i22 < 376) {
            i13 = (int)Test.instanceCount;
            for (i23 = 1; i23 < 4; i23++) {
                switch (((i22 % 2) * 5) + 85) {
                case 87:
                    iArr1 = iArr1;
                case 95:
                    i12 = i12;
                    for (i25 = i23; i25 < 2; ++i25) {
                        d1 -= d1;
                        Test.byFld = (byte)Test.instanceCount;
                        i13 >>= (int)Test.instanceCount;
                        try {
                            i13 = (i24 % i24);
                            i12 = (-175 / i13);
                            i24 = (i12 / 16422);
                        } catch (ArithmeticException a_e) {}
                        i13 -= (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth1_check_sum += i12 + i13 + i22 + i23 + i24 + i25 + i26 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static double dMeth() {

        int i27=-9445, i28=7, i29=7, i30=13, i31=-23373;
        boolean b=false;
        long l4=43405L;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.829F);

        vMeth1(i27);
        Test.byFld *= (byte)Test.instanceCount;
        for (i28 = 7; i28 < 166; i28++) {
            if (b) {
                for (i30 = i28; 10 > i30; i30++) {
                    b = b;
                    switch (((i30 % 6) * 5) + 91) {
                    case 107:
                        Test.instanceCount = i27;
                        if (true) continue;
                    case 92:
                        i29 += (i30 + l4);
                        i27 &= i29;
                        break;
                    case 93:
                        i29 = (int)l4;
                        Test.dFld1 *= Test.instanceCount;
                        i27 <<= i31;
                        i27 -= i28;
                        break;
                    case 104:
                        i27 = i28;
                        break;
                    case 97:
                        i29 = i31;
                        break;
                    case 95:
                        i27 -= i31;
                        break;
                    }
                }
            } else if (b) {
                if (b) continue;
            } else {
                i27 += i28;
            }
        }
        long meth_res = i27 + i28 + i29 + i30 + i31 + (b ? 1 : 0) + l4 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.915F;
        int i=-46, i1=157, i9=-53470, i10=0, i11=215, i32=487, i33=-115, iArr2[]=new int[N];
        long l1=1307685460L;

        FuzzerUtils.init(iArr2, -49135);

        for (f = 1; 205 > f; f++) {
            i -= (int)(Test.instanceCount--);
            i1 = 123;
            do {
                i *= Math.abs(-Math.max(-2, i));
            } while (--i1 > 0);
            vMeth((byte)(--Test.byFld), (byte)(((Test.instanceCount + i) >> (long)(f + dFld)) - (i >>=
                (int)(Test.instanceCount + l1))), (int)(((i1 + -9) + (--l1)) - (Test.instanceCount <<= 1887680017L)));
            i9 = 1;
            do {
                fFld += (i9 * i);
                l1 *= ((iArrFld[i9] - (i * 9L)) + Test.byFld);
                for (i10 = 1; i10 < 1; i10 += 3) {
                    l1 = (long)(((i11++) - fFld) + dMeth());
                    byArrFld[(int)(f + 1)] = (byte)i1;
                    fFld = i9;
                    Test.iArrFld1[(int)(f - 1)] = i9;
                    i11 = i11;
                    iArrFld[i10] += i10;
                }
                i += i9;
                iArr2[i9] *= i11;
                for (i32 = 1; i32 > 1; i32--) {
                    Test.byFld += (byte)i32;
                    dFld -= i;
                    i33 += (int)f;
                    i = 2;
                    i = i;
                    switch ((((i32 >>> 1) % 1) * 5) + 9) {
                    case 10:
                        i11 += (((i32 * i10) + l1) - i10);
                        i33 = Test.iFld;
                        iArrFld[i32 - 1] = i32;
                        i33 -= -103;
                        break;
                    default:
                        fFld = i9;
                        iArrFld = iArr2;
                    }
                }
            } while (++i9 < 123);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
