package tests.javafuzzer3332;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:16:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3443915264L;
    public static double dFld=85.35576;
    public static float fFld=0.808F;
    public short sFld=23336;
    public int iFld=12;
    public volatile boolean bFld=false;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.548F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        int i7=-13;

        i7 += (int)Test.dFld;
        long meth_res = l + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, double d1) {

        int i3=0, i4=46548, i5=25865, i6=-40095, iArr[]=new int[N];
        float f=38.825F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 2512);
        FuzzerUtils.init(dArr, 0.112539);

        iArr = iArr;
        for (i3 = 7; i3 < 168; i3++) {
            i2 <<= (int)(-Test.instanceCount);
            if (b) {
                for (f = 1; f < 10; ++f) {
                    dArr[(int)(f - 1)] = (i5++);
                    i6 = 2;
                    while (--i6 > 0) {
                        i5 += (int)((iMeth(Test.instanceCount) % (Test.instanceCount | 1)) + i4);
                        i2 >>= i3;
                        i4 &= (int)Test.instanceCount;
                        if (b) {
                            i5 >>>= i5;
                        }
                        i2 = (int)-22286L;
                    }
                    Test.instanceCount <<= Test.instanceCount;
                    i2 = -10;
                }
            } else {
                if (i6 != 0) {
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i=-8, i1=-220, i8=0, i9=-34, iArr1[]=new int[N];
        double d=0.58226;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2008596000L);
        FuzzerUtils.init(iArr1, 57302);

        for (i = 8; i < 286; i++) {
            lArr[i] -= (++i1);
            d = 1;
            while (++d < 6) {
                lArr[(int)(d + 1)] = lMeth(i, 0.40391);
                i1 += i;
                i1 = (int)Test.fFld;
                iArr1 = iArr1;
                for (i8 = 1; i8 < 1; ++i8) {
                    Test.fFld = i9;
                    i1 += (i8 ^ i);
                    Test.instanceCount ^= i1;
                    Test.instanceCount -= Test.instanceCount;
                    i9 *= (int)Test.fFld;
                    Test.instanceCount += (i8 + sFld);
                    i1 |= (int)-1133861485L;
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i8 + i9 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d2=64.89520;
        int i10=-242, i11=-56713, i12=197, i13=-39131, i14=0, i15=-1, iArr2[]=new int[N], iArr3[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-23);
        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(iArr3, 12311);

        vMeth();
        byArr[(iFld >>> 1) % N] -= (byte)iFld;
        Test.instanceCount += iFld;
        Test.fFld = Test.instanceCount;
        iArr2[(iFld >>> 1) % N] -= (int)Test.dFld;
        Test.instanceCount <<= -204L;
        Test.fFld += sFld;
        Test.fFld -= -38079;
        for (d2 = 6; d2 < 251; d2++) {
            iArr3[(int)(d2)] += (int)Test.instanceCount;
            i10 += sFld;
            for (i11 = (int)(d2); i11 < 103; i11++) {
                i13 = 1;
                do {
                    if (bFld) continue;
                    Test.fFld -= -7;
                    Test.fFld += i13;
                    Test.fArrFld[i13 - 1] += Test.instanceCount;
                    iFld -= (int)Test.fFld;
                } while (++i13 < 1);
                sFld += (short)i11;
                i12 -= iFld;
                iArr2[i11] *= i12;
                for (i14 = 1; i14 < 1; i14++) {
                    bFld = bFld;
                    switch ((int)(((d2 % 1) * 5) + 58)) {
                    case 59:
                        i12 += i10;
                        i10 >>= (int)50040L;
                        break;
                    default:
                        try {
                            iFld = (171 % i13);
                            i15 = (15374 / i15);
                            i12 = (i13 / -5093);
                        } catch (ArithmeticException a_e) {}
                        if (bFld) break;
                    }
                    iArr2[i11 + 1] -= (int)1.4484;
                    i10 |= i13;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
