package tests.javafuzzer2833;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:04:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public static float fFld=2.792F;
    public static volatile int iFld=123;
    public static int iArrFld[][]=new int[N][N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19331);
        FuzzerUtils.init(Test.byArrFld, (byte)68);
        FuzzerUtils.init(Test.lArrFld, 11L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i8=7, i9=46084, i10=206, i11=65009, i12=12;
        double d2=0.77474;
        float f=87.224F;
        boolean b=true;

        for (i8 = 23; i8 < 382; ++i8) {
            Test.iArrFld[i8 + 1] = Test.iArrFld[i8 - 1];
            Test.fFld = 34025;
            i9 += i8;
            Test.instanceCount += i8;
            d2 = 5;
            do {
                for (f = i8; 1 > f; f++) {
                    Test.iArrFld[i8][i8 - 1] = i8;
                    i10 -= i8;
                }
                Test.byArrFld[(int)(d2 - 1)] += (byte)f;
                for (i11 = 1; i11 < 1; i11 += 3) {
                    if (b) continue;
                    i9 += i10;
                    i12 = (int)d2;
                    i9 += (((i11 * i10) + Test.instanceCount) - i9);
                }
            } while (--d2 > 0);
        }
        long meth_res = i8 + i9 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i10 + i11 + i12 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i5) {

        int i6=14145, i7=-50, i13=14530, i14=226, i15=199;
        double d1=-1.20237;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 26549L);

        for (i6 = 16; i6 < 390; ++i6) {
            i5 -= (i5 * i5);
            d1 *= (Test.fFld * (lMeth() - 4));
            i7 -= (int)-88L;
            i7 += i7;
            for (i13 = 5; 1 < i13; i13--) {
                boolean b1=false;
                lArr[i13 + 1] *= (long)1.325F;
                if (b1) {
                    i14 *= (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                } else if (b1) {
                    i15 = 1;
                    while (++i15 < 2) {
                        Test.iArrFld[i15][i15 - 1] *= i15;
                        if (true) break;
                        Test.instanceCount |= i7;
                        Test.iArrFld[i13][i15] = -78;
                    }
                } else {
                    i5 += (i13 ^ (long)Test.fFld);
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i3, int i4) {


        vMeth(Test.iFld);
        vSmallMeth_check_sum += i3 + i4;
    }

    public void mainTest(String[] strArr1) {

        int i=137, i1=-53565, i2=-7, i16=-11306, i17=2623, i18=12, i19=-47771, i20=-5, iArr[][]=new int[N][N];
        double d=1.73536;
        boolean b2=false;
        long l=-6865488283546782614L;
        byte by=36;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -24.603F);
        FuzzerUtils.init(iArr, -44273);

        switch ((((i >>> 1) % 6) * 5) + 107) {
        case 126:
            for (i1 = 3; i1 < 220; i1++) {
                if (b2) {
                    d = 191;
                    for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.iFld, i);
                    i += (18883 + (i1 * i1));
                    Test.fFld *= i;
                } else {
                    for (i16 = 3; i16 < 116; i16++) {
                        switch (((i16 % 6) * 5) + 1) {
                        case 15:
                            Test.lArrFld[i16] ^= Test.iFld;
                            Test.fFld += (i16 * i17);
                        case 24:
                            Test.instanceCount = i;
                            Test.iFld += i;
                            break;
                        case 11:
                            Test.instanceCount = i16;
                            if (b2) continue;
                            i17 += (155 + (i16 * i16));
                            i <<= i;
                        case 19:
                            i2 -= Test.iFld;
                            i17 -= (int)Test.instanceCount;
                            Test.fFld += (i16 * i);
                        case 31:
                            i17 += i16;
                            break;
                        case 14:
                            l += l;
                            l >>= Test.iFld;
                            i17 += (((i16 * i1) + by) - i2);
                            break;
                        }
                        fArr[i1] += i2;
                        i18 += i16;
                        for (i19 = 1; 2 > i19; ++i19) {
                            Test.iFld += (int)d;
                        }
                        Test.iArrFld[i1][i16 + 1] *= (int)1.411F;
                        Test.iArrFld[i1][i1] = i19;
                    }
                }
            }
        case 128:
            Test.iFld <<= i19;
        case 111:
            Test.iArrFld[(-96 >>> 1) % N][(-54049 >>> 1) % N] -= i18;
            break;
        case 133:
            iArr = iArr;
            break;
        case 132:
            i17 += (int)239L;
            break;
        case 123:
            i18 -= Test.iFld;
            break;
        default:
            Test.iFld = i16;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
