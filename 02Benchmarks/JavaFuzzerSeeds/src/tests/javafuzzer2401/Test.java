package tests.javafuzzer2401;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:12:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=56L;
    public static boolean bFld=true;
    public static int iFld=10527;
    public int iFld1=-7;
    public static long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -32L);
        FuzzerUtils.init(Test.fArrFld, 12.499F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i9=0;
        double d1=104.76282;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, true);

        i9 += (int)d1;
        i9 = i9;
        i9 = (int)d1;
        bArr1[(-9 >>> 1) % N] = false;
        vMeth2_check_sum += i9 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr1);
    }

    public static void vMeth1(int i6, int i7) {

        int i8=218, i10=43558, i11=60957, iArr[][]=new int[N][N];
        long l=13L;
        byte by=49;

        FuzzerUtils.init(iArr, 362);

        if (false) {
            i8 = 1;
            do {
                Test.bFld = Test.bFld;
                Test.lArrFld = (Test.lArrFld = (Test.lArrFld = (Test.lArrFld = Test.lArrFld)));
                switch (((i8 % 1) * 5) + 97) {
                case 101:
                    vMeth2();
                    for (i10 = 1; 7 > i10; i10++) {
                        Test.instanceCount ^= Test.instanceCount;
                        iArr[(-134 >>> 1) % N][i8 + 1] <<= i6;
                        i7 -= (int)Test.instanceCount;
                        iArr[i8 + 1][i10] += (int)l;
                        l = i7;
                        i6 += (int)1093012158L;
                        Test.iFld = i6;
                        iArr[i8] = iArr[i10 - 1];
                    }
                    break;
                default:
                    l >>= by;
                }
            } while (++i8 < 240);
        } else if (Test.bFld) {
            iArr[(i7 >>> 1) % N][(i10 >>> 1) % N] = i7;
        } else {
            Test.fArrFld[(-164 >>> 1) % N] = i8;
        }
        vMeth1_check_sum += i6 + i7 + i8 + i10 + i11 + l + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i3=-59925, i4=45359, i5=-16, i12=3593, i13=49604, i14=62016, i15=6;
        double d=85.92424, dArr[]=new double[N];
        short s=5153;
        float f=0.384F;

        FuzzerUtils.init(dArr, -36.108531);

        for (i3 = 9; i3 < 350; i3++) {
            i5 += (int)(((Test.instanceCount * d) + Short.reverseBytes(s)) + (i5 -= (i4 * 55067)));
            vMeth1(Test.iFld, i5);
            Test.iFld += i3;
            i4 = 11;
            if (i3 != 0) {
                vMeth_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d) + s + Float.floatToIntBits(f) + i12 + i13
                    + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            Test.iFld += (i3 + f);
        }
        for (i12 = 4; i12 < 139; i12++) {
            i5 = 36;
            switch (((i12 % 1) * 5) + 120) {
            case 121:
                i5 *= i12;
            }
            for (i14 = 1; i14 < 12; ++i14) {
                f += Test.instanceCount;
                i13 -= 5;
                i13 += (int)f;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d) + s + Float.floatToIntBits(f) + i12 + i13 + i14 +
            i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=236, i2=-150, i16=48034, i17=-26, i18=45974, i19=-9, i20=-3, iArr1[]=new int[N];
        float f1=0.843F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -57389);

        Test.bFld = bArr[(i >>> 1) % N];
        for (i1 = 5; i1 < 304; ++i1) {
            vMeth();
            for (i16 = i1; i16 < 84; i16++) {
                i += (i16 * i16);
                for (i18 = 1; 1 > i18; i18++) {
                    short s1=-30028;
                    i2 = i17;
                    Test.iFld += (((i18 * Test.instanceCount) + i18) - s1);
                    i17 += i;
                    Test.iFld *= 9749;
                    Test.lArrFld = Test.lArrFld;
                    iArr1[i18] >>= s1;
                    if (Test.bFld) continue;
                    Test.iFld += (((i18 * f1) + i) - Test.instanceCount);
                    i -= (int)1.248F;
                }
                iArr1[i1 + 1] |= i2;
                switch ((((i1 >>> 1) % 2) * 5) + 5) {
                case 13:
                    if (Test.bFld) {
                        i20 = 1;
                        do {
                            byte by1=-80;
                            if (Test.bFld) {
                                Test.instanceCount <<= Test.instanceCount;
                                Test.iFld += Test.iFld;
                                iArr1 = iArr1;
                            }
                            i += -11935;
                            dArrFld[i1] -= i2;
                            bArr[i20 + 1] = Test.bFld;
                            by1 -= (byte)i16;
                            Test.iFld = (int)Test.instanceCount;
                            Test.iFld <<= i20;
                        } while (++i20 < 1);
                        Test.instanceCount -= (long)f1;
                    } else if (Test.bFld) {
                        i2 &= iFld1;
                    } else if (Test.bFld) {
                        Test.iFld -= i20;
                    } else {
                        Test.iFld >>= (int)Test.instanceCount;
                    }
                    break;
                case 12:
                    i17 *= iFld1;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
