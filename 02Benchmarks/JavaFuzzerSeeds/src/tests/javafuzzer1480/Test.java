package tests.javafuzzer1480;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-600697658L;
    public static short sFld=-14833;
    public double dFld=-66.66068;
    public byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -69.752F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, long l1) {

        int i6=54750, i7=62703, i8=133, i9=-36416;
        double d=124.39639, d1=-80.101261;

        i5 = (int)Test.instanceCount;
        for (i6 = 18; i6 < 349; i6++) {
            float f1=1.968F;
            if (false) break;
            f1 += (((i6 * i5) + i6) - l1);
            i5 = i7;
            if (i7 != 0) {
                vMeth2_check_sum += i5 + l1 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) +
                    Double.doubleToLongBits(d1);
                return;
            }
            for (i8 = 1; i8 < 5; i8++) {
                d = 1;
                do {
                    i5 = (int)Test.instanceCount;
                    i7 = i6;
                    Test.instanceCount += (long)d;
                    i5 &= i7;
                } while (++d < 2);
                d1 -= 12;
                i7 >>>= (int)l1;
                i7 *= i8;
            }
        }
        vMeth2_check_sum += i5 + l1 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1);
    }

    public static void vMeth1(int i4, long l, byte by) {

        double d2=73.10075;
        int i10=-193, i11=-40991, i13=6, iArr[]=new int[N];
        boolean b1=false;
        short s=24715;

        FuzzerUtils.init(iArr, 3);

        vMeth2(i4, 6L);
        for (d2 = 4; d2 < 154; d2++) {
            boolean b=true;
            try {
                i4 = (-52217 % i10);
                i4 = (i10 % -659215417);
                iArr[(int)(d2 - 1)] = (1832611718 / i4);
            } catch (ArithmeticException a_e) {}
            iArr[(int)(d2)] += i11;
            b = b;
        }
        i10 = -133;
        switch (((i4 >>> 1) % 3) + 63) {
        case 63:
            for (int i12 : iArr) {
                if (b1) break;
                i13 = 4;
                while (--i13 > 0) {
                    i4 += (int)-41612L;
                    l = by;
                    l = 177L;
                    i10 += (i13 | s);
                    i12 <<= 189;
                }
            }
            break;
        case 64:
            i10 += i13;
        case 65:
        }
        vMeth1_check_sum += i4 + l + by + Double.doubleToLongBits(d2) + i10 + i11 + (b1 ? 1 : 0) + i13 + s +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i2=224, i3=35171, iArr1[]=new int[N];
        float f=-54.208F;
        byte by1=44;
        short s1=21382, sArr[]=new short[N];
        double d3=2.46938;
        boolean b2=false;

        FuzzerUtils.init(sArr, (short)4085);
        FuzzerUtils.init(iArr1, 7);

        for (i2 = 1; i2 < 139; ++i2) {
            i3 += (i2 | i3);
            f = (((-Math.max(Test.instanceCount, Test.instanceCount)) + (i3 = i2)) + (i2 %
                (Math.min(Test.instanceCount, 4840507078299307952L) | 1)));
            byArrFld = (byArrFld = (byArrFld = (byArrFld = byArrFld)));
            vMeth1(i2, Test.instanceCount, by1);
            Test.instanceCount += (i2 + i3);
            sArr[i2 + 1] *= (short)i3;
            Test.instanceCount = 3354104106665886828L;
            s1 -= (short)Test.instanceCount;
            iArr1[i2] = i3;
        }
        i3 = (int)Test.instanceCount;
        d3 = 1;
        while (++d3 < 305) {
            if (b2) continue;
            s1 -= (short)i3;
            f = i2;
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + by1 + s1 + Double.doubleToLongBits(d3) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=197, i1=-216, i14=-206, i15=-218, i16=-7345, i17=-9, i18=143, i19=39039, i20=-121, i21=-38587,
            iArr2[]=new int[N];
        float f2=71.478F, f3=51.104F;

        FuzzerUtils.init(iArr2, 12);

        for (i = 12; 370 > i; i++) {
            vMeth();
        }
        Test.instanceCount *= i1;
        iArr2 = iArr2;
        for (i14 = 20; i14 < 325; i14++) {
            switch (((i14 % 1) * 5) + 103) {
            case 105:
                i1 >>= Test.sFld;
                break;
            default:
                i1 += 2;
            }
            dFld *= Test.instanceCount;
            for (i16 = 82; i16 > 1; i16--) {
                Test.instanceCount += (((i16 * i14) + i) - i14);
                iArr2[i14] *= i16;
                byArrFld[i16] -= (byte)i16;
                Test.fArrFld[i16 + 1] -= i15;
            }
            Test.instanceCount ^= -4065L;
            i17 /= (int)(Test.instanceCount | 1);
            for (f2 = 1; f2 < 82; f2++) {
                Test.instanceCount >>= Test.sFld;
                iArr2[i14 + 1] *= i1;
                for (i19 = 1; i19 < 2; ++i19) {
                    f3 -= Test.instanceCount;
                    i15 += i19;
                    iArr2[i19 + 1] = i1;
                    i15 += (((i19 * i15) + i19) - i16);
                }
            }
            dFld -= i19;
        }
        i1 = (int)Test.instanceCount;
        iArr2[(i15 >>> 1) % N] = -10;
        Test.instanceCount *= i19;
        Test.instanceCount -= (long)76.500F;
        i21 = (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
