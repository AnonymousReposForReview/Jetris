package tests.javafuzzer2183;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:47:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-852369375L;
    public static volatile int iFld=1;
    public static long lFld=-12L;
    public static volatile double dFld=-99.48822;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.sArrFld, (short)13371);
        FuzzerUtils.init(Test.lArrFld, 4448470838578922291L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i9=12, i10=12, i11=11, i12=11587, i13=0, i14=9, i15=-5, i16=-7, i17=-9289;
        float f1=0.173F;
        short s=31665;
        byte by=-33;
        long l1=-3657659999189243643L;
        double d=1.36;

        Test.iArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i9 = 12; i9 < 300; ++i9) {
            Test.iArrFld[i9 - 1] -= i9;
            for (i11 = 1; i11 < 6; ++i11) {
                for (i13 = 1; 2 > i13; ++i13) {
                    try {
                        Test.iArrFld[i13] = (i10 / Test.iArrFld[i9 - 1]);
                        i14 = (i11 % -47);
                        Test.iFld = (-239 / i13);
                    } catch (ArithmeticException a_e) {}
                    i10 *= 75;
                    i14 += (((i13 * Test.iFld) + f1) - s);
                }
                f1 += (((i11 * f1) + i9) - s);
                by -= (byte)Test.lFld;
            }
            for (i15 = 1; i15 < 6; ++i15) {
                i14 = (int)Test.instanceCount;
                for (l1 = 1; l1 < 2; ++l1) {
                    i16 >>= i14;
                    f1 -= (float)d;
                }
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + s + by + i15 + i16 + l1 + i17
            + Double.doubleToLongBits(d);
    }

    public static int iMeth1(int i5, int i6) {

        int i7=155, i8=-34, i18=57, i19=66, i20=15341;
        float f=-2.84F, fArr[]=new float[N];
        short s1=26989;
        byte by1=111;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.631F);
        FuzzerUtils.init(lArr, -29819208L);

        for (i7 = 159; 2 < i7; --i7) {
            Test.instanceCount += (((i7 * i6) + i8) - f);
            vMeth();
            switch ((((i6 >>> 1) % 5) * 5) + 102) {
            case 113:
            case 122:
                Test.iFld += Test.iFld;
                break;
            case 120:
                s1 -= (short)Test.dFld;
                break;
            case 111:
                i6 += (((i7 * Test.iFld) + i6) - f);
                for (i18 = 1; i18 < 10; i18++) {
                    i20 = 1;
                    do {
                        i6 = (int)Test.lFld;
                    } while (++i20 < 2);
                    Test.sArrFld[i18] = (short)Test.instanceCount;
                    lArr[(i19 >>> 1) % N] = s1;
                    i19 = by1;
                    Test.iFld = (int)Test.instanceCount;
                }
                break;
            case 108:
                Test.iFld += i7;
                break;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + s1 + i18 + i19 + i20 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i1=31583, i2=-170, i3=25807, i4=59845, i21=-83, i22=7;
        long l=121L;
        short s2=28154;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -39.639F);

        for (i1 = 9; i1 < 390; i1++) {
            for (i3 = 1; i3 < 4; ++i3) {
                boolean b=false;
                float f3=-8.686F;
                try {
                    Test.iArrFld[i3 + 1] = (i2 / i);
                    i = (-17795 / i);
                    i2 = (i2 / 253);
                } catch (ArithmeticException a_e) {}
                l = (iMeth1(i4, i) + -13);
                b = b;
                f3 = s2;
                f3 = -139;
                i += (i3 * Test.iFld);
                Test.iArrFld[i1] = i4;
                fArr1[i3 + 1] = 106;
            }
            i2 *= i3;
            switch ((i1 % 6) + 3) {
            case 3:
                for (i21 = 1; i21 < 4; ++i21) {
                    Test.instanceCount += i21;
                    Test.iFld = Test.iFld;
                }
                break;
            case 4:
                Test.lArrFld[(7 >>> 1) % N] *= i22;
                break;
            case 5:
                Test.iFld = i2;
                break;
            case 6:
                Test.iFld = i1;
                break;
            case 7:
                Test.lArrFld[i1] = (long)-42.544F;
                break;
            case 8:
                l = -240;
                break;
            default:
                i2 += i2;
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + l + s2 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i23=12, i24=1, i26=60615, i27=172, i28=-56405, i29=41995, i30=-39;
        float f4=2.569F;
        byte by2=32;
        short s3=-26147;

        iMeth(Test.iFld);
        Test.iFld = Test.iFld;
        for (i23 = 5; i23 < 158; i23++) {
            Test.dFld = f4;
            Test.iFld = i24;
            Test.iFld ^= i24;
            i26 = 164;
            while (--i26 > 0) {
                Test.iFld -= i26;
                for (i27 = 1; i27 < 1; ++i27) {
                    Test.bFld = Test.bFld;
                    switch (((i27 % 1) * 5) + 31) {
                    case 32:
                        by2 = (byte)3;
                        i24 = (int)Test.lFld;
                        Test.lArrFld[i23] <<= s3;
                        break;
                    }
                    Test.lFld >>= Test.iFld;
                    Test.iFld += (i27 * i27);
                    i28 += i27;
                    Test.iArrFld[i27] = (int)15641L;
                    s3 = (short)i26;
                    Test.iFld = (int)Test.dFld;
                    Test.lFld = i26;
                }
                Test.lFld += -52118;
                Test.iFld -= Test.iFld;
                i24 += i23;
                Test.iFld += i23;
                for (i29 = 1; i29 > 1; i29--) {
                    Test.iArrFld[i29 + 1] -= -190;
                    f4 *= -31179;
                    Test.lFld += i29;
                    i28 += i29;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
