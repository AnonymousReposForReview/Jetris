package tests.javafuzzer1193;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:17:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=59800L;
    public static boolean bFld=false;
    public static volatile double dFld=1.39188;
    public static byte byFld=-92;
    public static boolean bArrFld[]=new boolean[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, double d, int i10) {

        int i11=0, i12=-2746, i13=-52937, i14=90, i15=-59465, i16=19463, iArr[]=new int[N];
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -6.183F);
        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount -= i9;
        for (i11 = 15; i11 < 335; ++i11) {
            fArr[i11] = -1;
            if (Test.bFld) break;
            Test.instanceCount += (((i11 * i9) + Test.instanceCount) - Test.instanceCount);
            i10 = i12;
            Test.instanceCount = i10;
        }
        i13 = 1;
        while (++i13 < 246) {
            i14 = 7;
            while (--i14 > 0) {
                i10 /= 47968;
                for (i15 = 1; i15 < 1; i15++) {
                    iArr[i14] >>= (int)Test.instanceCount;
                    bArr[i15 - 1] = Test.bFld;
                    d += i9;
                    try {
                        i16 = (i15 % -87);
                        i12 = (-176 / i16);
                        i10 = (iArr[i13] % i11);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l1) {

        int i8=23321, i18=-196, i19=1, i20=13, iArr1[]=new int[N];
        double d1=-44.90059;
        byte byArr[]=new byte[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(byArr, (byte)59);
        FuzzerUtils.init(fArr1, 1.336F);

        i8 ^= iMeth1(i8, d1, i8);
        iArr1[(i8 >>> 1) % N] = i8;
        for (int i17 : iArr1) {
            if (i8 != 0) {
            }
            i17 = i8;
            i18 = 1;
            do {
                if (Test.bFld) break;
                byArr[i18 + 1] += (byte)-33L;
                for (i19 = 1; i19 < 1; ++i19) {
                    iArr1[i18] = (int)4514537631912917193L;
                    i8 = i20;
                    iArr1 = iArr1;
                    iArr1[i18] *= i19;
                    fArr1 = fArr1;
                    iArr1[i19] *= i18;
                }
            } while (++i18 < 4);
        }
        long meth_res = l1 + i8 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i1, long l, int i2) {

        int i3=11, i4=154, i5=-9, i6=-231, i7=-229, iArr2[]=new int[N];
        boolean b=false;
        float f=-124.423F;

        FuzzerUtils.init(iArr2, -31);

        for (i3 = 11; i3 < 194; i3++) {
            i2 += (i3 * i3);
            if (b) break;
            for (i5 = 1; 9 > i5; i5++) {
                i7 = 1;
                do {
                    Test.instanceCount >>>= iMeth(Test.instanceCount);
                    i4 += (i7 ^ (long)f);
                    if (Test.bFld) continue;
                    f -= (float)-59.21725;
                    iArr2 = iArr2;
                    Test.instanceCount += (i7 * i7);
                    i6 <<= (int)l;
                    iArr2[i3 + 1] = 5;
                } while (++i7 < 2);
                iArr2[i3] -= (int)Test.dFld;
                iArr2[i3] |= 60;
            }
        }
        long meth_res = i1 + l + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i21=16, i22=-1, i23=-81, i24=-42, i25=48110, i26=11, i27=-55969, i28=-16255, i29=-9, i30=-29263;
        long l2=-3147963726L, lArr[]=new long[N];
        float f1=1.876F, f2=112.260F;
        short s=-1222;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(lArr, 963277195L);
        FuzzerUtils.init(byArr1, (byte)96);

        i >>= (int)lMeth(i, Test.instanceCount, i);
        for (i21 = 3; 321 > i21; ++i21) {
            i22 = i21;
            for (l2 = 3; 79 > l2; ++l2) {
                i23 = i24;
                i22 += (int)(((l2 * i22) + l2) - i21);
                i24 >>= 12;
                i22 = i;
                for (i25 = 1; i25 < 2; ++i25) {
                    i22 += (((i25 * i21) + i24) - i25);
                    f1 = 98;
                    Test.instanceCount = -8;
                    Test.instanceCount = 12;
                    lArr[i21 + 1] = i25;
                    Test.instanceCount -= (long)Test.dFld;
                }
                i += (int)l2;
            }
            lArr[i21 - 1] += (long)Test.dFld;
        }
        switch (((i24 >>> 1) % 4) + 57) {
        case 57:
            Test.byFld = Test.byFld;
            Test.instanceCount = i25;
            for (i27 = 11; i27 < 243; i27++) {
                byArr1[i27 + 1] = (byte)175;
                Test.bArrFld[i27] = Test.bFld;
                i26 = i25;
                i22 = (int)l2;
                i28 = i25;
                for (i29 = i27; i29 < 108; ++i29) {
                    i23 *= (int)Test.instanceCount;
                }
                s += (short)(i27 - i28);
                iArrFld[i27 + 1] += i;
            }
            break;
        case 58:
            f2 *= i29;
            break;
        case 59:
            Test.dFld -= i30;
            break;
        case 60:
            Test.dFld = i30;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
