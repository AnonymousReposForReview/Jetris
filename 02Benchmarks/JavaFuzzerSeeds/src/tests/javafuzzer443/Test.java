package tests.javafuzzer443;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:02:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1425702939L;
    public static double dFld=-114.105257;
    public float fFld=1.610F;
    public static volatile byte byFld=-71;
    public static short sFld=-5782;
    public int iArrFld[][]=new int[N][N];

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, long l2) {

        int i7=49;

        l1 >>= i7;
        vMeth_check_sum += l1 + l2 + i7;
    }

    public static int iMeth(int i3, int i4) {

        int i5=4, i6=14585, i8=153, i9=1, iArr[]=new int[N];
        float f1=0.811F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(fArr, 1.334F);

        for (i5 = 14; 256 > i5; i5 += 2) {
            vMeth(-4126970491L, -1598731407L);
            i4 = (int)-5263069907507209290L;
            i6 += i5;
            if (b) {
                i8 = 1;
                do {
                    i6 += (i8 | i6);
                    for (f1 = 1; f1 < 1; f1++) {
                        iArr[i8] |= (int)Test.instanceCount;
                        fArr[i5 + 1] *= Test.instanceCount;
                        Test.byFld = (byte)171;
                        Test.byFld += (byte)(((f1 * f1) + i5) - i9);
                        Test.instanceCount += (long)f1;
                        Test.instanceCount += i8;
                        Test.dFld += Test.instanceCount;
                    }
                } while (++i8 < 13);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i8 + Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i1, int i2, long l) {

        float f=14.117F, fArr1[]=new float[N];
        int i10=-3, i11=12, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 30.560F);
        FuzzerUtils.init(lArr, 2241411965089624005L);
        FuzzerUtils.init(iArr1, 0);

        f -= i1;
        i1 ^= (int)((i2 - (i1 * Test.dFld)) + (i2 + (-79L - iMeth(i2, i1))));
        Test.sFld += (short)i2;
        f = i2;
        f *= Test.instanceCount;
        fArr1[(i1 >>> 1) % N] -= i1;
        Test.instanceCount &= -51284;
        lArr[(i2 >>> 1) % N] = i1;
        for (i10 = 7; i10 < 388; i10++) {
            i1 += (-27246 + (i10 * i10));
            i11 = (int)l;
            Test.byFld = (byte)Test.instanceCount;
            i11 += Test.byFld;
            Test.instanceCount -= 120L;
        }
        f = Test.instanceCount;
        long meth_res = i1 + i2 + l + Float.floatToIntBits(f) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=26464, i13=-43012, i14=7, i15=-246, i16=-97, i17=52, i18=227, i19=56494, i20=237;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -6L);

        Test.dFld = (Test.instanceCount++);
        fFld -= 0.846F;
        i = 1;
        while (++i < 384) {
            if (bMeth(i, i, 2L)) break;
            Test.dFld *= i;
            for (i13 = 2; i13 < 66; ++i13) {
                i14 = i;
                Test.instanceCount -= i;
                iArrFld = iArrFld;
                for (i15 = i; i15 < 2; ++i15) {
                    boolean b1=false;
                    i14 /= (int)(i14 | 1);
                    iArrFld[i][i15 - 1] = (int)Test.dFld;
                    Test.instanceCount += (i15 | i15);
                    i14 += i15;
                    fFld += (((i15 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    b1 = true;
                }
                i14 = (int)Test.instanceCount;
                i16 += (-38505 + (i13 * i13));
                i16 = -9700;
            }
            for (i17 = 4; i17 < 66; i17++) {
                i14 += (54214 + (i17 * i17));
                i18 &= (int)Test.instanceCount;
                Test.sFld -= (short)i16;
                for (i19 = 1; 2 > i19; ++i19) {
                    fFld *= i17;
                    i18 += (53 + (i19 * i19));
                    if (false) break;
                    i14 >>= (int)-35102L;
                    i20 *= i13;
                    Test.sFld = (short)i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
