package tests.javafuzzer2492;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:25:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58486L;
    public static boolean bFld=false;
    public static float fFld=-1.750F;
    public static double dFld=-1.1263;
    public static short sFld=8302;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, -1520409935L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d2) {

        int i2=34898, i3=-9, i4=-13, i5=0, i6=57631, i7=-30395, i8=12, i9=-31759;
        float f=-2.955F;
        short s=4216;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2678947689955085733L);

        for (i2 = 9; i2 < 285; i2++) {
            for (i4 = i2; i4 < 6; i4++) {
                if (Test.bFld) continue;
                Test.instanceCount += i4;
                f += (((i4 * i3) + f) - f);
            }
            f += (i2 + i5);
            i5 += i2;
            for (i6 = 1; 6 > i6; ++i6) {
                for (i8 = i2; i8 < 2; i8 += 3) {
                    i7 += 63146;
                    i7 += (((i8 * i6) + i8) - i3);
                }
                lArr[i6 + 1] = s;
                d2 += -5;
                Test.instanceCount = i7;
                i3 += i8;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d2) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 +
            i9 + s + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1, double d1) {

        float f1=-13.630F;
        int i10=26, i11=-205, i12=-13, i13=35066, iArr[]=new int[N];
        byte by=30;

        FuzzerUtils.init(iArr, 169);

        vMeth(d1);
        if (Test.bFld) {
            i1 += (int)d1;
            Test.instanceCount >>= -72;
        } else {
            if (Test.bFld) {
                iArr[(247 >>> 1) % N] ^= 158;
                i1 *= (int)Test.fFld;
            } else if (true) {
                f1 = 1;
                do {
                    for (i10 = 1; 8 > i10; ++i10) {
                        iArr[i10] -= by;
                        Test.instanceCount >>= i11;
                        for (i12 = 2; 1 < i12; i12--) {
                            Test.bArrFld[(int)(f1 + 1)] = Test.bFld;
                            Test.fFld += ((long)i12 ^ (long)Test.instanceCount);
                            Test.instanceCount += (i12 - i13);
                        }
                    }
                } while (++f1 < 200);
            } else {
                i13 <<= by;
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10 + i11 + by + i12 + i13 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(boolean b) {

        double d=-1.67157;
        int i=14321;

        d *= i;
        i += (Math.abs(i) - (i * iMeth(-241, d)));
        vSmallMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i;
    }

    public void mainTest(String[] strArr1) {

        int i14=-10, i16=13, i17=-12, i18=-64038, i19=-99, iArr1[]=new int[N];
        long l=33869L, l1=7L;

        FuzzerUtils.init(iArr1, -60);

        for (int smallinvoc=0; smallinvoc<616; smallinvoc++) vSmallMeth(Test.bFld);
        i14 |= 10160;
        Test.lArrFld[(i14 >>> 1) % N] -= 21932L;
        Test.lArrFld[(-8004 >>> 1) % N] = i14;
        i14 = i14;
        for (int i15 : iArr1) {
            iArr1[(229 >>> 1) % N] = 9;
            for (l = 2; l < 63; l++) {
                Test.dFld = Test.instanceCount;
                i15 += (int)l;
                Test.lArrFld[(int)(l - 1)] <<= i14;
                i15 -= Test.sFld;
                i15 = 175;
                Test.instanceCount = i15;
            }
            i14 = i16;
            for (i17 = 3; i17 < 63; i17++) {
                i18 += i17;
                i14 = i15;
                i16 += (((i17 * Test.fFld) + Test.instanceCount) - i16);
                i15 += (int)Test.fFld;
                Test.instanceCount = 1;
                i18 *= i16;
                i14 *= i16;
            }
            i19 = 1;
            while (++i19 < 63) {
                sArrFld[i19] = (short)l1;
                i15 -= i14;
                switch ((i19 % 1) + 126) {
                case 126:
                    l1 += (i19 * i19);
                    Test.dFld -= i18;
                    break;
                default:
                    i15 = i19;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
