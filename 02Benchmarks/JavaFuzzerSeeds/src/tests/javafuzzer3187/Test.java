package tests.javafuzzer3187;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:29:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-49027L;
    public static double dFld=-22.88541;
    public static short sFld=-29770;
    public static boolean bFld=true;
    public byte byFld=-113;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, int i5, int i6) {

        short s=-30827;
        float f1=-125.923F, fArr1[][]=new float[N][N];
        int i8=-9, i9=25212, iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(fArr1, 47.279F);
        FuzzerUtils.init(lArr1, -40052L);

        i6 -= i4;
        for (int i7 : iArr) {
            i6 -= (int)Test.dFld;
            fArr1[(i6 >>> 1) % N][(i7 >>> 1) % N] = i7;
            i4 += i7;
            i5 = i6;
            Test.instanceCount *= s;
            Test.instanceCount -= (long)f1;
            f1 *= Test.instanceCount;
            i8 = 1;
            while (++i8 < 4) {
                Test.instanceCount += (i8 * Test.instanceCount);
            }
            f1 = (float)0.124905;
            i9 = 1;
            do {
                i6 *= (int)Test.instanceCount;
                iArr[i9 - 1] -= i8;
            } while (++i9 < 4);
        }
        long meth_res = i4 + i5 + i6 + s + Float.floatToIntBits(f1) + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3) {

        int i10=-77, i11=5, i12=-241, i13=-6, i14=-41262, i15=-34199;
        float f2=10.982F, f3=-12.498F, fArr2[]=new float[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -27609L);
        FuzzerUtils.init(fArr2, -2.264F);

        iMeth(i3, -21653, i3);
        for (i10 = 6; i10 < 240; i10++) {
            for (i12 = 1; i12 < 7; i12 += 3) {
                for (f2 = 4; f2 > 1; f2--) {
                    i11 *= -173;
                    i13 += (int)(f2 * f2);
                    Test.sFld += (short)(20677 + (f2 * f2));
                    lArr2 = lArr2;
                    Test.instanceCount += i14;
                    if (i12 != 0) {
                        vMeth1_check_sum += i3 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i14 +
                            Float.floatToIntBits(f3) + i15 + FuzzerUtils.checkSum(lArr2) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
                        return;
                    }
                }
                fArr2[i12 + 1] += i13;
            }
            for (f3 = 1; f3 < 7; f3++) {
                i13 -= (int)Test.instanceCount;
            }
            i15 *= i3;
            i14 = i14;
        }
        vMeth1_check_sum += i3 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i14 + Float.floatToIntBits(f3) +
            i15 + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public static void vMeth(byte by, int i2) {

        float f=0.17F, fArr[]=new float[N];
        int i16=-136, i17=63186, i18=-46, i19=-12, i20=-32023, i21=-81, i22=-43689, i23=123, i24=43070, i25=46938;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 1.1001F);
        FuzzerUtils.init(dArr, 112.87981);

        f = Math.abs(fArr[(i2 >>> 1) % N]);
        vMeth1(i2);
        for (i16 = 8; i16 < 230; i16++) {
            for (i18 = 1; i18 < 7; ++i18) {
                dArr = dArr;
            }
        }
        i2 = i2;
        by = (byte)i18;
        for (i20 = 148; i20 > 7; --i20) {
            if (Test.bFld) break;
            for (i22 = 1; i22 < 11; i22++) {
                Test.dFld += 28;
                fArr[i22] *= Test.instanceCount;
                for (i24 = 1; i24 < 2; ++i24) {
                    i19 = i2;
                }
                i2 += i22;
            }
        }
        vMeth_check_sum += by + i2 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 +
            i25 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=155, i1=-207, i27=-4250, i28=-207, i29=-5, i30=-3, i31=0, i32=-107, i33=42678, iArr1[]=new int[N];
        float f4=-2.63F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 251L);
        FuzzerUtils.init(iArr1, -203);

        for (long l : lArr) {
            i = 1;
            do {
                i1 = 1;
                while (++i1 < 1) {
                    int i26=-24786;
                    long l2=19704L;
                    vMeth(byFld, i1);
                    iArr1[i1] = (int)f4;
                    i26 <<= i26;
                    Test.bFld = Test.bFld;
                    Test.bFld = Test.bFld;
                    i26 >>>= i;
                    Test.instanceCount >>= Test.instanceCount;
                    iArr1[i1] >>= (int)l2;
                    i26 = i;
                }
                byFld = (byte)Test.instanceCount;
                i27 -= (int)Test.dFld;
                lArr[i + 1] += l;
                i27 <<= Test.sFld;
                i28 *= Test.sFld;
            } while (++i < 63);
            i29 = 1;
            do {
                switch (i29 % 6) {
                case 0:
                    lArr[i29 - 1] -= (long)Test.dFld;
                    break;
                case 1:
                    i27 += (int)Test.instanceCount;
                    l = Test.sFld;
                    Test.dFld *= i28;
                case 2:
                    i28 = (int)732780977723673208L;
                    for (i30 = 1; i30 < 1; ++i30) {
                        i27 -= (int)2.830F;
                    }
                    Test.bArrFld[i29] = Test.bFld;
                    for (i32 = 1; 1 < i32; i32 -= 3) {
                        i28 -= i27;
                    }
                case 3:
                    i27 = (int)f4;
                    break;
                case 4:
                    l += (i29 + f4);
                    break;
                case 5:
                    Test.dFld -= l;
                    break;
                default:
                    Test.dFld = i33;
                }
            } while (++i29 < 63);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
