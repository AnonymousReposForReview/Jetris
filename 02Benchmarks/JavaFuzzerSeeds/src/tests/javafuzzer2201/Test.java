package tests.javafuzzer2201;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:12:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4960335974371689895L;
    public static boolean bFld=false;
    public static int iFld=-12;
    public static volatile double dFld=-105.57039;
    public byte byFld=-101;
    public static int iFld1=200;
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f2, int i9, int i10) {

        int i12=14498, i13=44819, iArr1[]=new int[N];
        double d=-110.12680;

        FuzzerUtils.init(iArr1, -63);

        for (int i11 : iArr1) {
            Test.instanceCount += i9;
            for (i12 = 4; i12 > 1; i12--) {
                i13 = i13;
                f2 = i13;
                if (Test.bFld) {
                    Test.iFld -= i10;
                }
                i10 -= (int)Test.instanceCount;
                Test.instanceCount += i12;
                d += 115L;
                i13 >>= i10;
                Test.instanceCount += (((i12 * f2) + i13) - i11);
                Test.instanceCount = i11;
                iArr1 = iArr1;
            }
            i11 = (int)Test.instanceCount;
        }
        long meth_res = Float.floatToIntBits(f2) + i9 + i10 + i12 + i13 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i8, long l, short s1) {

        int i14=-4, i15=40433, i16=-237, i17=147, i18=-33843, i19=-13, iArr2[]=new int[N];
        float f3=-1.458F;
        byte by=-13;

        FuzzerUtils.init(iArr2, 54093);

        Test.iFld = iMeth1(79.395F, i8, i8);
        for (i14 = 377; i14 > 12; i14--) {
            i15 += i8;
            i8 -= i14;
            if (i15 != 0) {
                vMeth_check_sum += i8 + l + s1 + i14 + i15 + Float.floatToIntBits(f3) + i16 + i17 + by + i18 + i19 +
                    FuzzerUtils.checkSum(iArr2);
                return;
            }
            Test.instanceCount -= i15;
            f3 += (i14 - Test.iFld);
            i15 += -252;
            for (i16 = 1; i16 < 5; ++i16) {
                l = i8;
            }
            by = by;
        }
        for (i18 = 13; i18 < 217; ++i18) {
            i8 += (((i18 * i18) + f3) - l);
        }
        i19 += i19;
        f3 += (float)Test.dFld;
        vMeth_check_sum += i8 + l + s1 + i14 + i15 + Float.floatToIntBits(f3) + i16 + i17 + by + i18 + i19 +
            FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(int i, short s, int i1) {

        int i2=-38323, i3=-48637, i4=6063, i5=180, i6=-63685, i7=10, i21=-54355, i22=186, iArr[]=new int[N];
        float f1=99.290F;

        FuzzerUtils.init(iArr, 0);

        for (i2 = 16; i2 < 334; i2++) {
            lArrFld[i2] += (++i);
            for (i4 = i2; i4 < 5; ++i4) {
                iArr[i2] = (int)(((i4 - i5) * (f1 - i2)) + Test.iFld);
                i3 = (int)Test.instanceCount;
                iArr[i2 + 1] = (int)(120.480F - (++i6));
                i5 += i4;
                Test.instanceCount &= (long)((-80.334F - (i7++)) + (Test.instanceCount | (i3 + i7)));
            }
            Test.iFld += (int)lArrFld[i2];
        }
        i5 = i2;
        vMeth(i6, Test.instanceCount, (short)(12504));
        Test.dFld += Test.instanceCount;
        for (i21 = 4; i21 < 200; ++i21) {
            Test.instanceCount >>= i7;
            iArr[i21 - 1] >>= Test.iFld;
        }
        long meth_res = i + s + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + i21 + i22 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=59.47F, f4=-2.864F;
        int i23=-53498, i24=17, i25=1, i26=0;
        short s2=-27425;

        f = 299;
        do {
            Test.bFld = ((iMeth(Test.iFld, (short)(-3830), Test.iFld) * -54) > -20345);
            i23 = 1;
            do {
                switch ((((10322 >>> 1) % 8) * 5) + 12) {
                case 34:
                    for (i24 = 1; i24 < 1; ++i24) {
                        switch (((-10196 >>> 1) % 1) + 94) {
                        case 94:
                            byFld += (byte)i24;
                            i25 = (int)0L;
                            lArrFld[(int)(f + 1)] -= Test.instanceCount;
                        default:
                            iArrFld[i23 + 1] = i24;
                            Test.instanceCount = Test.iFld;
                            i25 *= (int)f;
                            Test.iFld = i24;
                        }
                        if (Test.bFld) {
                            if (Test.bFld) continue;
                            i25 >>>= (int)Test.instanceCount;
                            Test.iFld += (i24 * s2);
                            i25 *= (int)2.694F;
                        } else {
                            Test.instanceCount -= i23;
                            byFld -= (byte)i24;
                            Test.iFld &= i25;
                        }
                        Test.bFld = Test.bFld;
                        iArrFld[i23 + 1] = Test.iFld;
                        Test.dFld += Test.iFld;
                        Test.instanceCount = byFld;
                    }
                    break;
                case 36:
                    switch ((i23 % 9) + 105) {
                    case 105:
                        for (f4 = 1; f4 < 1; f4++) {
                            Test.instanceCount += 8994267885398377098L;
                            i25 *= i26;
                            Test.iFld += 8;
                        }
                        break;
                    case 106:
                        i26 = Test.iFld;
                        break;
                    case 107:
                        iArrFld[(int)(f + 1)] = i26;
                        break;
                    case 108:
                        Test.iFld += (i23 * i23);
                    case 109:
                        Test.instanceCount >>= Test.iFld1;
                        break;
                    case 110:
                        Test.iFld1 = i23;
                        break;
                    case 111:
                        s2 *= (short)Test.instanceCount;
                        break;
                    case 112:
                        if (Test.bFld) break;
                        break;
                    case 113:
                        Test.dFld -= Test.iFld1;
                        break;
                    }
                    break;
                case 17:
                    Test.iFld *= (int)f;
                    break;
                case 37:
                    byFld += (byte)i23;
                    break;
                case 16:
                    i26 = (int)Test.dFld;
                    break;
                case 41:
                    lArrFld[(int)(f + 1)] -= i23;
                    break;
                case 40:
                    i26 = (int)Test.instanceCount;
                    break;
                case 45:
                    i25 = -8;
                    break;
                }
            } while (++i23 < 167);
        } while ((f -= 2) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
