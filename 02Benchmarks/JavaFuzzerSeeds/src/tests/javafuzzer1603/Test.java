package tests.javafuzzer1603;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:44:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48524L;
    public static byte byFld=-81;
    public static volatile short sFld=11358;
    public static double dFld=115.19494;
    public static int iArrFld[][]=new int[N][N];
    public static volatile long lArrFld[]=new long[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 193);
        FuzzerUtils.init(Test.lArrFld, 42150L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=220, i5=-6, i6=-181, i7=9, i8=-7202, i9=-14;
        double d=-6.64054, d1=-15.44297;

        i4 = 1;
        while (++i4 < 258) {
            float f=8.476F;
            for (d = 1; d < 6; d += 3) {
                i5 *= i5;
                Test.instanceCount += (long)d;
                for (i6 = 1; i6 < 6; i6++) {
                    i7 += (i6 ^ i7);
                }
                Test.instanceCount = i6;
                d1 *= i5;
            }
            Test.instanceCount = i7;
            Test.iArrFld[i4][i4] = -235;
            i7 += i4;
            f *= (float)d1;
            for (i8 = 1; i8 < 6; ++i8) {
                Test.iArrFld[i4 - 1][i4] += i7;
                Test.iArrFld[i4 + 1][i4 - 1] <<= -4;
            }
        }
        vMeth2_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9;
    }

    public static void vMeth1(long l) {

        int i3=-24099, i10=83, i11=-33235, i12=-10, i13=148, i14=3165, i15=61791, i16=-11, i17=-167, i18=13;
        double d2=43.87566, dArr[]=new double[N];
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 47.10378);
        FuzzerUtils.init(lArr, 5109242574368023612L);

        Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N] += i3;
        vMeth2();
        for (i10 = 8; i10 < 299; ++i10) {
            for (i12 = i10; 6 > i12; i12++) {
                for (i14 = 1; i14 < 1; i14++) {
                    Test.iArrFld[i12 + 1][i14] = i13;
                }
            }
            dArr[i10 - 1] *= Test.instanceCount;
        }
        Test.byFld = (byte)-13;
        for (i16 = 11; 206 > i16; ++i16) {
            i18 = 1;
            do {
                float f1=2.210F;
                try {
                    i13 = (320224929 / i3);
                    i15 = (-58 % i16);
                    Test.iArrFld[i16 + 1][i18] = (38 / i10);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i18 + 1][i18 + 1] >>= i3;
                d2 -= f1;
                if (b) break;
                lArr[i16] = i16;
            } while (++i18 < 8);
        }
        vMeth1_check_sum += l + i3 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d2)
            + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i) {

        int i1=34, i2=-61300, i20=-47, i21=53635, i22=-12, iArr[]=new int[N];
        float f2=-4.201F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2112391436L);
        FuzzerUtils.init(iArr, 55779);

        for (i1 = 15; i1 < 283; i1++) {
            vMeth1(-53940L);
            lArr1[i1 + 1] = Test.instanceCount;
            Test.instanceCount -= Test.byFld;
            i20 = 1;
            do {
                for (i21 = 1; i21 > 1; i21 -= 2) {
                    Test.sFld -= (short)i20;
                    Test.instanceCount -= Test.instanceCount;
                    i22 = i22;
                    Test.iArrFld[i1 + 1] = Test.iArrFld[i21 - 1];
                    f2 = i22;
                    switch ((i1 % 4) + 100) {
                    case 100:
                        i2 += i21;
                        break;
                    case 101:
                        Test.iArrFld[i21][i21] &= (int)Test.instanceCount;
                        i22 = (int)Test.instanceCount;
                        break;
                    case 102:
                        lArr1[i1 + 1] = -3;
                        break;
                    case 103:
                        i2 %= (int)(i1 | 1);
                        break;
                    default:
                        i2 += (i21 + i20);
                    }
                }
            } while (++i20 < 6);
        }
        vMeth_check_sum += i + i1 + i2 + i20 + i21 + i22 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=-58546, i24=-50978, i25=-2, i27=58614, i28=-96, i29=-5, i30=-251, i31=44554, i32=-53597, i33=12,
            iArr1[]=new int[N];
        float f3=-1.551F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-14311);
        FuzzerUtils.init(iArr1, -7);

        vMeth(-3);
        sArr[(-32 >>> 1) % N] = (short)i23;
        for (i24 = 6; 237 > i24; ++i24) {
            f3 -= f3;
            if (false) continue;
            Test.iArrFld[i24 - 1][i24] *= i24;
            i25 <<= (int)Test.instanceCount;
            i25 = (int)Test.instanceCount;
            try {
                i25 = (47 % i24);
                i23 = (i24 % i27);
                iArr1[i24 - 1] = (Test.iArrFld[i24][i24 + 1] / Test.iArrFld[i24 - 1][i24 + 1]);
            } catch (ArithmeticException a_e) {}
            Test.lArrFld[i24] = Test.byFld;
        }
        for (i28 = 4; i28 < 264; ++i28) {
            i23 = i27;
            for (i30 = 5; 97 > i30; i30++) {
                i32 = 1;
                do {
                    boolean b1=false;
                    i29 = -4;
                    i23 *= (int)Test.dFld;
                    i27 += (i32 * i32);
                    if (b1) continue;
                    switch ((i30 % 10) + 46) {
                    case 46:
                        i27 *= i32;
                        Test.iArrFld[i32] = Test.iArrFld[i32];
                        i31 >>= -3;
                        break;
                    case 47:
                        i27 *= i25;
                        Test.instanceCount += i33;
                    case 48:
                        Test.bArrFld[i28 - 1] = FuzzerUtils.boolean1array(N, (boolean)true);
                        break;
                    case 49:
                        i31 = i28;
                        i23 <<= (int)Test.instanceCount;
                        sArr[i32 + 1] <<= (short)Test.instanceCount;
                        i27 >>= i33;
                    case 50:
                        f3 += Test.instanceCount;
                        break;
                    case 51:
                        i27 *= (int)f3;
                        break;
                    case 52:
                        Test.byFld *= (byte)1;
                        break;
                    case 53:
                        Test.instanceCount += (((i32 * Test.byFld) + f3) - i30);
                        break;
                    case 54:
                        i27 -= i31;
                    case 55:
                        Test.byFld += (byte)i24;
                    }
                } while (++i32 < 2);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
