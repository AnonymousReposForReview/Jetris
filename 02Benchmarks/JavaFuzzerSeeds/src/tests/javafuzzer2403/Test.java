package tests.javafuzzer2403;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:12:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6415448778585592589L;
    public static short sFld=-2942;
    public double dFld=0.13421;
    public int iArrFld[][]=new int[N][N];

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5, long l, int i6) {

        float f3=-85.467F, f4=-89.957F;
        int i7=-15610, i8=21546, i9=0, i10=-78, i11=197, i12=95, i13=-22089, iArr[]=new int[N];
        byte by=61;

        FuzzerUtils.init(iArr, 510);

        for (f3 = 288; f3 > 3; f3 -= 2) {
            if (i5 != 0) {
            }
            i7 += (int)f3;
            i5 = i7;
            by += (byte)(((f3 * l) + i6) - i7);
            l = Test.instanceCount;
            for (i8 = 1; i8 < 11; i8++) {
                if (i8 != 0) {
                }
                for (i10 = 2; i10 > 1; i10--) {
                    iArr = iArr;
                    f4 += i10;
                }
                for (i12 = 1; 2 > i12; i12 += 2) {
                    f4 = -29402;
                    i7 = i5;
                }
                i11 = i9;
            }
        }
        long meth_res = i5 + l + i6 + Float.floatToIntBits(f3) + i7 + by + i8 + i9 + i10 + i11 +
            Float.floatToIntBits(f4) + i12 + i13 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        float f1=13.586F, f2=0.363F, fArr[]=new float[N];
        int i3=-13, i4=58473, i14=8, i15=-7, i16=234;
        byte by1=-43;
        boolean b1=false;

        FuzzerUtils.init(fArr, -1.585F);

        for (f1 = 11; f1 < 337; f1++) {
            i4 = 1;
            while (++i4 < 5) {
                f2 = Short.reverseBytes((short)(fArr[(int)(f1)] - (i4 + Test.instanceCount)));
            }
            Test.instanceCount += (long)((long)f1 ^ (long)f2);
            Test.instanceCount -= ((Math.max(Test.instanceCount, Test.instanceCount) - i3) * (-iMeth1(i4,
                Test.instanceCount, i3)));
        }
        for (i14 = 10; i14 < 318; i14++) {
            if (false) break;
            i16 = 1;
            while (++i16 < 5) {
                Test.instanceCount -= (long)f1;
                Test.sFld = (short)-6;
                i3 += i16;
                i3 <<= i15;
                if (b1) {
                    by1 = (byte)i16;
                    i15 = i3;
                } else if (b1) {
                    Test.instanceCount >>>= i3;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i3 + i4 + Float.floatToIntBits(f2) + i14 + i15 + i16 + by1 + (b1 ? 1
            : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(double d) {

        int i1=0, i2=62638, i17=235, i18=12, i19=-7774, i20=2;
        short s=24177;
        boolean b2=false;
        double d1=2.83062;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 47L);

        i1 = 237;
        while (--i1 > 0) {
            i2 *= (int)((--lArr[i1 + 1]) * (++i2));
            i2 -= s;
            i2 >>= (int)(fMeth() + Test.instanceCount);
            for (i17 = 1; i17 < 7; i17++) {
                Test.instanceCount += i17;
                i18 *= i17;
                i18 -= 54;
                d += i17;
                i18 -= i1;
            }
            if (b2) continue;
        }
        for (i19 = 14; i19 < 383; ++i19) {
            d1 = 1;
            while (++d1 < 5) {
                i2 = i19;
            }
            i2 += (i19 | Test.instanceCount);
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + s + i17 + i18 + (b2 ? 1 : 0) + i19 + i20 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.399F;
        int i=52578, i21=37213, i22=2, i23=-116, i24=-233, i25=-9563, i26=10, i27=-9, i28=14, i29=18750, i30=-8, i31=1;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 8L);

        f -= Math.min(i, (--i) * (i * i));
        b = (!((i * i) > iMeth(-112.48019)));
        iArrFld[(i >>> 1) % N][(i >>> 1) % N] *= i;
        switch ((((i >>> 1) % 4) * 5) + 52) {
        case 62:
            lArr1[(i >>> 1) % N] += i;
            for (i21 = 5; i21 < 177; i21++) {
                i22 |= i22;
                i23 = (int)27.40460;
                Test.instanceCount /= (i23 | 1);
                if (false) {
                    for (i24 = i21; i24 < 146; ++i24) {
                        for (i26 = 1; i26 > 1; i26--) {
                            i23 = i27;
                            Test.instanceCount += (i26 | i23);
                            Test.instanceCount = i24;
                        }
                    }
                    Test.instanceCount = (long)dFld;
                    Test.instanceCount >>= Test.instanceCount;
                    if (false) {
                        i27 = i25;
                        Test.instanceCount = i;
                        i28 = 146;
                        do {
                            i27 += (int)Test.instanceCount;
                            for (i29 = i28; 1 > i29; ++i29) {
                                Test.instanceCount -= Test.instanceCount;
                                i22 -= i30;
                                i23 += i29;
                                f /= (i25 | 1);
                                Test.instanceCount += (((i29 * f) + i28) - i30);
                                iArrFld[i21 + 1] = iArrFld[i29];
                                i25 = (int)Test.instanceCount;
                            }
                        } while (--i28 > 0);
                    } else {
                        try {
                            iArrFld[i21][i21] = (i27 / -59);
                            i23 = (i28 / 90);
                            iArrFld[i21 + 1][i21] = (i26 % i24);
                        } catch (ArithmeticException a_e) {}
                    }
                } else if (b) {
                    i31 ^= i31;
                }
            }
        case 59:
            f += i29;
            break;
        case 55:
            i31 <<= i;
        case 58:
            i *= (int)Test.instanceCount;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
