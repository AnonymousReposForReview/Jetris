package tests.javafuzzer3417;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:50:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9034727229906866803L;
    public static float fFld=98.443F;
    public static byte byFld=-3;
    public static volatile double dFld=0.35526;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -16766);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i9) {

        int i10=-22958, i11=-41362, i12=0, i13=58699, i14=-2715, i15=-130, i16=6338, i17=55718;

        Test.fFld += 230;
        for (i10 = 8; i10 < 274; ++i10) {
            Test.instanceCount -= 165;
            if (true) break;
            i11 = Test.byFld;
        }
        Test.instanceCount -= Test.instanceCount;
        for (i12 = 2; i12 < 348; ++i12) {
            i9 -= (int)Test.fFld;
            for (i14 = 1; i14 < 5; ++i14) {
                Test.fFld += -217;
                Test.instanceCount <<= -3;
            }
            for (i16 = i12; i16 < 5; i16++) {
                boolean b=false;
                if (b) continue;
                Test.fFld *= (float)Test.dFld;
                Test.fFld += (((i16 * i17) + Test.instanceCount) - i10);
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {

        int i1=-11, i2=22742, i3=6, i4=-31313, i5=10, i6=32926, i7=47747, i8=-7;
        double d=0.39961;
        float fArr[]=new float[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(fArr, 2.276F);
        FuzzerUtils.init(bArr, false);

        fArr[(i1 >>> 1) % N] = -35361;
        for (i2 = 2; i2 < 321; i2++) {
            for (i4 = i2; i4 < 5; ++i4) {
                Test.instanceCount += (i4 * i4);
                i1 += (((i4 * i3) + i2) - Test.fFld);
                for (i6 = 1; i6 < 1; ++i6) {
                    d *= (111 - (Test.fFld++));
                }
                i3 *= -250;
                i5 -= (--i5);
                try {
                    i3 = (-124 % i3);
                    i7 = (i5 % 117);
                    i3 = (58471 % i2);
                } catch (ArithmeticException a_e) {}
            }
        }
        i8 = 1;
        while ((i8 += 2) < 324) {
            i5 -= (int)(Math.abs(Test.iArrFld[i8 - 1]) * dMeth(20821));
            i1 += i6;
            Test.iArrFld[i8 - 1] -= (int)Test.fFld;
            bArr = bArr;
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        int i18=52686, i19=52445, i20=-42, i21=56403, i22=163, iArr[]=new int[N];
        double d1=-53.95611;
        boolean b1=false;

        FuzzerUtils.init(iArr, -33);

        iArr[(7 >>> 1) % N] -= (i++);
        i += iMeth();
        for (i18 = 13; i18 < 382; i18++) {
            Test.instanceCount *= i18;
            byArrFld[i18 - 1] = (byte)i19;
            Test.instanceCount -= 81;
            i19 >>= i18;
            for (d1 = 1; d1 < 5; d1++) {
                for (i21 = 1; i21 < 2; ++i21) {
                    i22 += (i21 * i21);
                    Test.iArrFld = iArr;
                    i = i18;
                    i19 = i;
                    i += i21;
                    if (b1) break;
                }
            }
        }
        vMeth_check_sum += i + i18 + i19 + Double.doubleToLongBits(d1) + i20 + i21 + i22 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=142, i24=0, i25=14, i26=-149, i27=9, i28=-14, i29=-41, i30=26254, i31=-130, i32=64170, i33=10;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1L);

        vMeth(i23);
        for (i24 = 6; i24 < 246; i24++) {
            if (Test.bFld) break;
            try {
                i25 = (i25 % Test.iArrFld[i24]);
                Test.iArrFld[i24 - 1] = (134 / Test.iArrFld[i24 - 1]);
                i23 = (i23 % -20629);
            } catch (ArithmeticException a_e) {}
        }
        for (i26 = 10; i26 < 247; i26++) {
            Test.fFld = Test.fFld;
            Test.fFld = Test.fFld;
            i25 += i26;
            switch (((25805 >>> 1) % 2) + 48) {
            case 48:
                switch ((i26 % 2) + 93) {
                case 93:
                    i25 += (((i26 * Test.instanceCount) + i25) - i26);
                    for (i28 = 6; i28 < 106; i28++) {
                        i27 = (int)Test.dFld;
                        if (Test.bFld) break;
                        i25 >>= (int)-5L;
                        i27 >>= i29;
                        i23 *= i28;
                    }
                    Test.instanceCount += i26;
                    break;
                case 94:
                    for (i30 = 5; i30 < 106; ++i30) {
                        Test.instanceCount += 142;
                    }
                    for (i32 = 5; i32 < 106; i32++) {
                        lArr[i32] += Test.instanceCount;
                        Test.fFld += ((long)i32 ^ (long)i30);
                        Test.byFld += (byte)-14.44749;
                        i33 += (i32 * i32);
                        i33 -= (int)2.69F;
                        i31 = i30;
                        i29 >>= i25;
                    }
                    if (false) break;
                    break;
                }
                i27 += (int)-1.344F;
                break;
            case 49:
                Test.instanceCount += (i26 ^ i30);
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
