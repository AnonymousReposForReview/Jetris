package tests.javafuzzer3073;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:31:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3797784431L;
    public static byte byFld=-80;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -58L);
        FuzzerUtils.init(Test.byArrFld, (byte)-116);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4) {

        int i5=-6, i6=-246, i7=-58247, i8=-7;
        long l=1978198539L;
        boolean b=true;
        double d1=-2.20763;
        float f1=-2.275F;

        i4 = i4;
        for (i5 = 13; i5 < 379; i5++) {
            Test.instanceCount ^= Test.instanceCount;
            i7 = 1;
            do {
                i4 *= i6;
                i6 >>= (int)Test.instanceCount;
                Test.instanceCount = i4;
                for (l = 1; 1 > l; ++l) {
                    if (b) {
                        i8 -= i4;
                    } else {
                        i8 += (int)(((l * Test.byFld) + i8) - l);
                        d1 *= i5;
                        Test.instanceCount <<= i4;
                    }
                    Test.instanceCount |= 28001;
                }
                i8 = (int)f1;
            } while (++i7 < 5);
        }
        long meth_res = i4 + i5 + i6 + i7 + l + i8 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static byte byMeth(int i2, int i3) {

        double d=0.48156, dArr[]=new double[N];
        int i9=-6, i10=-32118, i11=35518, i12=3, i13=-3, i14=-41659, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -2.102881);
        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(fArr, -15.296F);

        switch ((((i2 + i2) >>> 1) % 3) + 120) {
        case 120:
            d *= fMeth(i3);
            break;
        case 121:
            Test.instanceCount -= Test.instanceCount;
            i2 <<= i3;
            for (i9 = 18; i9 < 354; i9++) {
                dArr[i9 - 1] %= (i2 | 1);
                iArr[i9] = i3;
                for (i11 = i9; 5 > i11; i11++) {
                    Test.instanceCount -= i3;
                    fArr[i11 - 1] += i3;
                    for (i13 = 1; i13 > 1; --i13) {
                        i3 += (((i13 * i3) + i13) - i10);
                        i10 += (i13 + i13);
                        i12 += i13;
                        iArr[i9] += i13;
                    }
                }
            }
            break;
        case 122:
        default:
            i14 += i14;
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vSmallMeth(int i1) {


        i1 = (int)(((Test.byFld + Test.instanceCount) + Math.max(54988, i1)) * ((Test.lArrFld[(-225 >>> 1) % N]--) *
            byMeth(i1, 138)));
        i1 <<= i1;
        vSmallMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        float f=2.2F;
        int i=-7, i15=-13, i16=-53, i17=187, i18=51, i19=-3, i20=-7, i21=11116, i22=144;
        long l1=9L;
        boolean b1=false;
        short s=10388;

        f = i;
        for (int smallinvoc=0; smallinvoc<842; smallinvoc++) vSmallMeth(i);
        iArrFld[(i15 >>> 1) % N] = (int)Test.instanceCount;
        iArrFld[(i15 >>> 1) % N] *= i15;
        for (l1 = 272; l1 > 17; --l1) {
            Test.instanceCount = i;
            iArrFld[(int)(l1 - 1)] = i15;
            Test.instanceCount = -221;
            for (i17 = 2; i17 < 99; ++i17) {
                dArrFld[i17 + 1] *= f;
            }
            Test.lArrFld[(int)(l1 - 1)] *= i15;
            i16 *= 6;
            i15 = (int)l1;
        }
        i19 = 1;
        do {
            Test.byArrFld[i19 + 1] = Test.byFld;
            Test.byFld <<= (byte)Test.instanceCount;
            Test.lArrFld[i19 - 1] <<= i;
            i15 = (int)-32.129905;
            Test.instanceCount += (i19 - Test.byFld);
            i20 = 1;
            while (++i20 < 99) {
                i16 *= i18;
                try {
                    i15 = (i16 % i);
                    i15 = (iArrFld[i20 - 1] % iArrFld[(i17 >>> 1) % N]);
                    i = (i16 / i17);
                } catch (ArithmeticException a_e) {}
                for (i21 = 1; i21 < 1; i21++) {
                    switch (((i21 % 5) * 5) + 77) {
                    case 93:
                        i18 += (i21 - i20);
                        break;
                    case 89:
                        f += l1;
                        i = i16;
                        i15 *= i19;
                        if (b1) break;
                        break;
                    case 98:
                        f = Test.instanceCount;
                        break;
                    case 95:
                        s += (short)(385 + (i21 * i21));
                    case 78:
                        i18 += (-47 + (i21 * i21));
                        break;
                    default:
                        i *= i19;
                    }
                }
            }
        } while (++i19 < 255);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth byMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
