package tests.javafuzzer216;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:17:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-56310L;
    public static volatile double dFld=127.24993;
    public static volatile long lFld=-218L;
    public static byte byFld=-66;
    public static long lFld1=-21686L;
    public static boolean bFld=false;
    public float fFld=-66.764F;
    public static short sFld=-31027;
    public long lFld2=43120L;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 28.110470);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, int i4) {

        float f1=-2.208F;
        double d=-52.12004, d1=90.103354;
        int i5=-16711, i6=-64708, i7=-5302, i8=-62;

        i3 -= -43923;
        f1 = i4;
        Test.lFld = i3;
        d = 1;
        while (++d < 388) {
            i3 += i4;
        }
        if (Test.bFld) {
            d1 = 1;
            while (++d1 < 270) {
                for (i5 = 1; i5 < 6; ++i5) {
                    Test.instanceCount = Test.byFld;
                    f1 %= ((long)(d1) | 1);
                    Test.dFld += Test.instanceCount;
                    Test.lFld *= Test.lFld1;
                }
                for (i7 = 1; i7 < 6; ++i7) {
                    Test.bFld = Test.bFld;
                    i8 = i8;
                }
            }
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) +
            i5 + i6 + i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i) {

        int i1=8, i2=-10, i9=26855, i10=-14, iArr[]=new int[N];
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(lArr, 493209940L);
        FuzzerUtils.init(sArr, (short)-23504);

        for (i1 = 5; i1 < 319; i1++) {
            short s=13042;
            s += (short)(i1 - i2);
            i /= (int)((--i2) | 1);
            i2 = iMeth(i1, i1);
            for (i9 = 1; i9 < 5; ++i9) {
                switch (((i9 % 9) * 5) + 40) {
                case 64:
                    iArr[i1 - 1] &= Test.byFld;
                    break;
                case 84:
                    switch ((i9 % 6) + 36) {
                    case 36:
                        iArr[i9] += -1;
                        break;
                    case 37:
                    case 38:
                        iArr[i9] >>= i10;
                        Test.lFld <<= i9;
                        i += i9;
                        Test.bFld = Test.bFld;
                        break;
                    case 39:
                        Test.lFld = i2;
                        iArr[i1 + 1] = i9;
                        break;
                    case 40:
                        i = (int)Test.instanceCount;
                    case 41:
                        lArr[i9 + 1] += i;
                        break;
                    }
                    break;
                case 52:
                    Test.dFld -= s;
                case 60:
                    if (Test.bFld) break;
                    break;
                case 74:
                    i10 ^= i;
                    break;
                case 82:
                    i10 += (i9 * i9);
                    break;
                case 67:
                    try {
                        iArr[i1] = (-213 % i);
                        iArr[i1 + 1] = (26736 % i1);
                        iArr[i9 - 1] = (-129 / iArr[i1 - 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 56:
                    sArr[i9 + 1] *= (short)i;
                    break;
                case 55:
                    i2 += (i9 * i9);
                    break;
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i9 + i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(float f) {

        int i11=-8, i12=-3, i13=49545, i14=-151, i15=245, i16=-40925, iArr1[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(byArr, (byte)-26);

        Test.dFld += f;
        vMeth1(i11);
        i11 -= i11;
        for (i12 = 184; 2 < i12; i12 -= 2) {
            i14 = 1;
            do {
                for (i15 = 1; 1 > i15; i15++) {
                    switch ((i12 % 5) + 15) {
                    case 15:
                        i13 -= i11;
                        if (i15 != 0) {
                            vMeth_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16 +
                                FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
                            return;
                        }
                    case 16:
                        iArr1[i14 - 1] += i13;
                    case 17:
                        i13 = 7;
                        iArr1[i14 - 1] += (int)Test.dFld;
                        byArr[i14 - 1] -= (byte)-63;
                        i16 = 171;
                        break;
                    case 18:
                        i11 = i16;
                    case 19:
                        i16 += i16;
                        break;
                    }
                }
            } while (++i14 < 17);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=5012, i18=6, i19=-13, i20=2, i21=-13, i22=-56466, i23=14, i24=20152, iArr2[]=new int[N];
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 50.235F);
        FuzzerUtils.init(iArr2, -47386);
        FuzzerUtils.init(lArr1, -3898607724L);

        fArr = (fArr = fArr);
        vMeth(fFld);
        for (i17 = 21; i17 < 383; ++i17) {
            iArr2[i17 + 1] = (int)Test.instanceCount;
            i18 = i17;
            iArr2[i17 - 1] = 160;
            Test.lFld = Test.sFld;
            lArr1[i17] = (long)Test.dFld;
        }
        i18 *= -84;
        i18 = (int)Test.dFld;
        for (i19 = 3; i19 < 277; i19++) {
            Test.byFld += (byte)(((i19 * Test.sFld) + Test.sFld) - i18);
            iArr2[i19 - 1] <<= (int)Test.instanceCount;
            Test.lFld <<= Test.byFld;
        }
        i18 = i18;
        i20 >>= i17;
        for (long l : lArr1) {
            for (i21 = 1; i21 < 63; i21++) {
                i20 += (-11194 + (i21 * i21));
                Test.lFld >>= 182;
                for (i23 = 1; i23 < 2; ++i23) {
                    Test.dFld = i23;
                    if (Test.bFld) continue;
                    Test.lFld1 ^= i19;
                    i20 = i18;
                    i24 += i23;
                    lFld2 = i17;
                    Test.dArrFld[i21 - 1] = i18;
                    Test.sFld >>>= (short)-53926;
                }
                fFld = Test.sFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
