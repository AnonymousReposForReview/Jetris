package tests.javafuzzer27;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:20:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=155L;
    public static int iFld=-11;
    public static boolean bFld=true;
    public static double dFld=-1.40886;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i1=-3, i2=-16072, i3=-4, i4=-60596, i5=51370, i6=226, i7=-11;
        long l=24988L;

        for (i1 = 4; i1 < 256; ++i1) {
            i2 += (((i1 * Test.instanceCount) + i1) - i2);
            for (l = 1; l < 6; ++l) {
                i2 += (int)(((l * i1) + i2) - f);
                Test.instanceCount += (((l * i1) + i1) - i3);
                if (Test.bFld) continue;
                i2 *= (int)l;
                if (Test.bFld) break;
            }
            Test.iFld -= (int)57248L;
        }
        i4 = 189;
        do {
            i3 += (int)Test.dFld;
        } while (--i4 > 0);
        for (i5 = 2; 138 > i5; i5++) {
            i7 = 1;
            while (++i7 < 12) {
                i2 /= (int)(Test.iFld | 1);
                Test.instanceCount += (long)f;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + l + i3 + i4 + i5 + i6 + i7;
    }

    public static double dMeth(int i, double d) {

        float f1=0.1F;
        int i8=-8, i9=-10313, i10=1, i11=16196, i12=213, i13=-252;
        byte by=119;

        vMeth1(f1);
        for (i8 = 4; i8 < 290; i8++) {
            try {
                i9 = (-81 % i8);
                i9 = (Test.iArrFld[i8][i8 - 1] / Test.iFld);
                i = (-30831 % Test.iFld);
            } catch (ArithmeticException a_e) {}
            by *= (byte)3;
            Test.bFld = Test.bFld;
            for (i10 = 6; i10 > 1; --i10) {
                Test.iFld *= (int)-3597036269318910206L;
                switch ((((Test.iFld >>> 1) % 2) * 5) + 53) {
                case 59:
                    for (i12 = 1; i12 < 2; i12++) {
                        Test.instanceCount = Test.instanceCount;
                        Test.iArrFld[i12 + 1][i8] *= i;
                        Test.instanceCount ^= Test.instanceCount;
                        if (i8 != 0) {
                        }
                        Test.iFld += (i12 * i12);
                        i11 += (i12 * i12);
                    }
                    break;
                case 62:
                    Test.iArrFld[i10][i10 - 1] = (int)Test.instanceCount;
                    break;
                default:
                    f1 = Test.iFld;
                }
            }
        }
        long meth_res = i + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i8 + i9 + by + i10 + i11 + i12 +
            i13;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        short s=-416;
        int i14=58350, i15=10, i16=233, i17=0, i18=-3, i19=-4, i20=-141;
        float f2=1.839F, f3=80.530F;

        s >>= (short)((Test.iFld--) - dMeth(Test.iFld, Test.dFld));
        for (i14 = 4; i14 < 183; ++i14) {
            for (i16 = 1; i16 < 9; ++i16) {
                i17 += s;
                Test.iArrFld[i14 - 1][i14 - 1] %= (int)(s | 1);
                Test.instanceCount -= i17;
                Test.bFld = Test.bFld;
                i17 = 111;
                f2 += (((i16 * i15) + i15) - i16);
                for (i18 = 2; i18 > 1; i18--) {
                    if (i17 != 0) {
                        vMeth_check_sum += s + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 +
                            Float.floatToIntBits(f3) + i20;
                        return;
                    }
                    i19 += (int)(61316L + (i18 * i18));
                }
            }
            for (f3 = 1; 9 > f3; ++f3) {
                Test.iFld /= (int)(i18 | 1);
                Test.iFld = 18969;
            }
        }
        vMeth_check_sum += s + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + Float.floatToIntBits(f3)
            + i20;
    }

    public void mainTest(String[] strArr1) {

        double d1=0.32859;
        int i21=21936, i22=0, i23=-221, i24=3, i25=-61, i26=-5, i27=48, i28=13, i29=167;
        short s1=-12215;
        float f4=56.417F;
        byte by1=70;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 46739L);

        vMeth();
        Test.iFld = Test.iFld;
        for (d1 = 9; d1 < 162; ++d1) {
            s1 -= (short)Test.iFld;
            Test.iFld -= (int)Test.instanceCount;
            for (i22 = 7; 164 > i22; i22++) {
                i21 = 12;
                f4 += (((i22 * Test.instanceCount) + i21) - Test.iFld);
                i24 = 1;
                while (++i24 < 2) {
                    i23 = i24;
                    Test.iArrFld[(int)(d1)][i22 - 1] -= Test.iFld;
                    Test.dFld += i21;
                    by1 = (byte)i24;
                    i23 = (int)d1;
                    Test.instanceCount += i24;
                }
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.iArrFld[(int)(d1 + 1)][i25] -= (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    Test.iArrFld[(int)(d1 - 1)][i25 + 1] = i23;
                    Test.iFld += i23;
                    Test.instanceCount += (-10L + (i25 * i25));
                    i23 <<= -14;
                }
            }
            for (i27 = 7; i27 < 164; i27++) {
                Test.instanceCount += i26;
                switch (((i22 >>> 1) % 5) + 54) {
                case 54:
                    i29 = 1;
                    do {
                        f4 += i23;
                        Test.iArrFld[i29 - 1][i27] = i27;
                        lArr[i27 - 1] = i29;
                        lArr[(int)(d1)] = Test.instanceCount;
                    } while (++i29 < 2);
                case 55:
                case 56:
                    i21 += (i27 + i25);
                    break;
                case 57:
                    s1 = (short)i24;
                    break;
                case 58:
                    i23 -= Test.iFld;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
