package tests.javafuzzer3364;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:45:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8148878134233658139L;
    public byte byFld=109;
    public static volatile byte byFld1=-90;
    public static short sFld=20376;
    public static volatile byte byFld2=96;
    public static float fFld=-58.459F;
    public static long lArrFld[][]=new long[N][N];
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -50321L);
        FuzzerUtils.init(Test.dArrFld, -2.82616);
        FuzzerUtils.init(Test.byArrFld, (byte)28);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, long l, int i8) {

        int i9=-120, i10=124, i11=78, i12=-9715, i13=9, i14=43678, i15=62316;
        boolean b=false;
        short s=2009;

        for (i9 = 3; 381 > i9; i9++) {
            for (i11 = i9; i11 < 4; i11++) {
                i12 += (int)l;
                i8 *= (int)7437894470085539144L;
                l = l;
                l += i8;
                for (i13 = i11; 1 > i13; i13++) {
                    Test.instanceCount = i12;
                }
                i7 = -14;
                i15 = 1;
                while (++i15 < 1) {
                    double d=0.24483;
                    i14 = i10;
                    if (b) continue;
                    l <<= i14;
                    s *= (short)d;
                    i7 = i9;
                }
            }
        }
        vMeth1_check_sum += i7 + l + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + s;
    }

    public static void vMeth(int i3, int i4, float f1) {

        int i5=11, i6=69, i16=-17638, i17=14, i18=-107, i19=3, iArr1[][]=new int[N][N];
        long l1=-194L;
        double d1=0.33137;

        FuzzerUtils.init(iArr1, -13);

        i3 *= (int)Test.dArrFld[(-56459 >>> 1) % N];
        f1 *= (--i4);
        for (i5 = 2; i5 < 180; ++i5) {
            vMeth1(i6, Test.instanceCount, i3);
            for (i16 = i5; i16 < 9; i16++) {
                switch ((((i16 >>> 1) % 5) * 5) + 103) {
                case 121:
                    for (l1 = 1; l1 < 1; l1++) {
                        Test.byFld1 -= (byte)i3;
                        i18 *= i17;
                        try {
                            i17 = (i6 % 84);
                            iArr1[(i18 >>> 1) % N][(int)(l1 - 1)] = (408891909 / i6);
                            iArr1[i16 - 1][i16 + 1] = (178 % i3);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += l1;
                        Test.instanceCount = Test.byFld1;
                        Test.lArrFld[i16 + 1][i16 - 1] = i19;
                        iArr1[(int)(l1 + 1)][(int)(l1 - 1)] = (int)Test.instanceCount;
                        if (i6 != 0) {
                            vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i16 + i17 + l1 + i18 +
                                i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                    }
                    break;
                case 104:
                    iArr1[i16 + 1][i5 + 1] -= i18;
                    break;
                case 106:
                    f1 += (((i16 * i19) + i18) - f1);
                    break;
                case 108:
                    d1 -= i3;
                    break;
                case 123:
                    Test.lArrFld[i5][i5 + 1] = i4;
                    break;
                default:
                    f1 *= l1;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i16 + i17 + l1 + i18 + i19 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i2) {

        int i20=-2, i21=-171, i22=-7, i23=-64, i24=12, i25=45531, iArr2[]=new int[N];
        boolean b1=false;
        double d2=81.84890;

        FuzzerUtils.init(iArr2, 10);

        vMeth(i2, i2, 45.410F);
        for (i20 = 8; i20 < 182; ++i20) {
            for (i22 = 9; 1 < i22; i22--) {
                i21 += (int)Test.instanceCount;
                for (i24 = 1; i24 < 2; ++i24) {
                    b1 = b1;
                    if (b1) continue;
                    Test.lArrFld[i24 - 1][i22 + 1] <<= i21;
                    i25 -= 11;
                    iArr2[i22] |= i21;
                    iArr2[i20 + 1] >>>= 11;
                    iArr2[i24 - 1] *= i25;
                    i21 += (i24 | Test.sFld);
                    iArr2[i22] ^= -15;
                }
                d2 *= Test.byFld2;
            }
        }
        long meth_res = i2 + i20 + i21 + i22 + i23 + i24 + i25 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-21646, i1=-4, i26=190, i27=17271, i28=4, i29=5, i30=207, iArr[]=new int[N];
        float f2=-2.837F, fArr[]=new float[N];
        double d3=2.65075;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-11032);
        FuzzerUtils.init(fArr, -2.735F);
        FuzzerUtils.init(iArr, 20);

        sArr[(i >>> 1) % N] |= (short)i;
        for (float f : fArr) {
            sArr[(i >>> 1) % N] = (short)(--Test.lArrFld[(i >>> 1) % N][(-5 >>> 1) % N]);
            iArr[(i >>> 1) % N] += (int)(f * Math.abs((int)(70.91226 + Math.min(i1, i))));
            byFld = (byte)((i1 = (int)(f += i1)) - ((-40 - Integer.reverseBytes(i)) - fMeth(i)));
            i1 = 53113;
            for (f2 = 3; f2 < 63; f2++) {
                i = i;
                for (i27 = 1; i27 < 2; ++i27) {
                    Test.instanceCount <<= i26;
                }
                i28 += i;
                Test.byFld2 += Test.byFld2;
                i26 += (0 + (f2 * f2));
                i1 >>= Test.sFld;
                f = i28;
                for (d3 = f2; d3 < 2; d3++) {
                    f /= (Test.instanceCount | 1);
                    i1 -= (int)Test.instanceCount;
                }
                fArr[(int)(f2)] += i29;
            }
            i29 -= i26;
            i26 = i28;
        }
        if (false) {
            Test.instanceCount -= Test.instanceCount;
            Test.byArrFld[(i >>> 1) % N] += (byte)i26;
            i30 = 1;
            do {
                Test.fFld += i30;
                i26 <<= i;
                Test.byArrFld[i30] -= (byte)i1;
                i += (((i30 * Test.instanceCount) + i29) - i29);
                if (true) continue;
            } while (++i30 < 295);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
