package tests.javafuzzer3242;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:29:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=63L;
    public static volatile int iFld=-13;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)117);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, int i5) {

        double d1=1.11057, dArr[]=new double[N];
        int i6=-160, i7=26, i8=4, i9=-8, i10=10;
        short s1=27845;
        long lArr[]=new long[N], lArr1[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 4L);
        FuzzerUtils.init(fArr, 100.22F);
        FuzzerUtils.init(lArr1, -96L);
        FuzzerUtils.init(dArr, -126.123294);

        d1 -= Test.instanceCount;
        switch (((i5 >>> 1) % 2) + 5) {
        case 5:
            i6 = 1;
            do {
                i5 += i5;
                for (i7 = 1; 7 > i7; i7++) {
                    lArr[i7] >>= i8;
                    i5 += (int)Test.instanceCount;
                    fArr[(-60 >>> 1) % N] *= Test.instanceCount;
                    for (i9 = 1; i9 < 2; i9 += 3) {
                        i5 += (((i9 * i9) + i6) - i8);
                        Test.instanceCount -= s1;
                        Test.instanceCount += -173;
                        i10 -= i6;
                        lArr1 = lArr1;
                        i8 -= (int)Test.instanceCount;
                    }
                }
            } while (++i6 < 223);
        case 6:
            i8 >>>= s1;
            break;
        }
        vMeth2_check_sum += (b ? 1 : 0) + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + s1 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i4) {

        boolean b1=false;
        int i11=-14, i12=-10, i13=-213, i14=-126, i15=-49263, iArr1[]=new int[N];
        long l=-861736430L;
        float f1=-114.616F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.278F);
        FuzzerUtils.init(iArr1, -10786);

        vMeth2(b1, i4);
        i11 = 1;
        do {
            i4 = i4;
            i4 *= i4;
            if (true) {
                for (i12 = 1; 5 > i12; ++i12) {
                    fArr1[i12 - 1] *= l;
                    i4 = (int)-2.704F;
                    for (i14 = i12; i14 < 2; i14++) {
                        i4 = i15;
                        try {
                            i13 = (i11 % -809532745);
                            i13 = (-994086582 / i14);
                            iArr1[i14 - 1] = (155 % iArr1[i14 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i15 -= (int)f1;
                        if (true) {
                            iArr1[i12] = (int)l;
                            i4 -= -229;
                        }
                    }
                }
            } else {
                Test.byArrFld[i11] += (byte)i14;
            }
        } while (++i11 < 369);
        vMeth1_check_sum += i4 + (b1 ? 1 : 0) + i11 + i12 + i13 + l + i14 + i15 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1) {

        float f=49.832F;
        int i2=-40725, i3=-1, i16=-7, i17=4, i18=48514, i19=-192, i20=1, i21=6, iArr[]=new int[N], iArr2[][]=new
            int[N][N];
        double d=0.74446;
        short s=2816;
        byte by=-96;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr2, -2500444170L);
        FuzzerUtils.init(iArr2, -51646);

        i1 *= (int)((Math.min(i, -35672) - (i + f)) * (Math.abs(i) + (i1 * -198)));
        for (i2 = 11; i2 < 201; i2++) {
            i1 <<= iArr[i2];
            d %= ((((i2 - 3166888424178662214L) + (-(++i1))) - (i1--)) | 1);
        }
        Test.instanceCount += Math.abs(++i3);
        Test.instanceCount = (--s);
        vMeth1(i3);
        switch (((i1 >>> 1) % 9) + 85) {
        case 85:
            for (i16 = 1; i16 < 176; ++i16) {
                Test.instanceCount += (-127 + (i16 * i16));
                for (i18 = 1; 9 > i18; ++i18) {
                    for (i20 = 2; i20 > 1; i20--) {
                        by >>= (byte)i1;
                        lArr2[i16][i20] *= i;
                    }
                    i1 = i16;
                }
            }
            break;
        case 86:
            i3 += i17;
            break;
        case 87:
            Test.instanceCount = -5;
            break;
        case 88:
        case 89:
            Test.instanceCount ^= 3;
            break;
        case 90:
            f = Test.instanceCount;
            break;
        case 91:
            iArr2 = iArr2;
        case 92:
            d += Test.instanceCount;
            break;
        case 93:
            Test.instanceCount -= i19;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d) + s + i16 + i17 +
            i18 + i19 + i20 + i21 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=232, i23=-191, i24=100, i25=130, i26=11, i27=4, i28=8, i29=-9, i30=17387, i31=6, i32=109, i33=43537,
            i34=-32002, iArr3[]=new int[N];
        float f2=102.608F;
        double d3=1.39589, d4=64.82827;
        boolean b2=true;
        short s2=5194, sArr[]=new short[N];

        FuzzerUtils.init(iArr3, -44843);
        FuzzerUtils.init(sArr, (short)-31891);

        vMeth(Test.iFld, Test.iFld);
        for (i22 = 1; i22 < 138; ++i22) {
            for (i24 = 4; 183 > i24; ++i24) {
                Test.instanceCount = Test.instanceCount;
                for (i26 = i24; i26 < 2; ++i26) {
                    Test.instanceCount >>= i27;
                    i23 += (((i26 * i24) + i24) - i23);
                    f2 += (-9 + (i26 * i26));
                    d3 = Test.instanceCount;
                    iArr3[i24 - 1] = (int)Test.instanceCount;
                }
                if (b2) continue;
                Test.iFld -= i29;
            }
            for (i30 = 7; i30 < 183; ++i30) {
                i29 <<= (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i25 = i25;
                Test.iFld *= i27;
                sArr[i30 + 1] = (short)-69;
                switch (((i22 >>> 1) % 1) + 104) {
                case 104:
                    i28 += i30;
                    break;
                }
            }
            for (d4 = 7; d4 < 183; ++d4) {
                i33 += (int)((long)d4 ^ i29);
                i25 += 252;
            }
            switch ((i22 % 10) + 82) {
            case 82:
                f2 += (((i22 * Test.instanceCount) + i22) - i29);
            case 83:
                i32 *= (int)-9144L;
                break;
            case 84:
                try {
                    iArr3[i22] = (i22 / 1953673911);
                    i25 = (i22 / i27);
                    i33 = (i28 / i27);
                } catch (ArithmeticException a_e) {}
                i29 += i23;
                Test.iFld = (int)Test.instanceCount;
                Test.instanceCount = -3354;
                break;
            case 85:
                if (false) continue;
            case 86:
                i32 = Test.iFld;
                break;
            case 87:
                s2 |= (short)i30;
                break;
            case 88:
                Test.instanceCount -= i30;
                break;
            case 89:
                i34 ^= i26;
                break;
            case 90:
                iArr3 = iArr3;
            case 91:
                Test.instanceCount *= Test.instanceCount;
                break;
            default:
                i25 <<= (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
