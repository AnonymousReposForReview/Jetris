package tests.javafuzzer293;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:24:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-19976L;
    public int iFld=14;
    public byte byFld=102;
    public short sFld=25616;
    public volatile double dFld=-1.125803;
    public static int iArrFld[]=new int[N];
    public volatile int iArrFld1[]=new int[N];
    public int iArrFld2[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 220);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b, int i3, int i4) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -236L);

        i4 = (int)Test.instanceCount;
        lArr[(i3 >>> 1) % N] = Test.instanceCount;
        vMeth1_check_sum += (b ? 1 : 0) + i3 + i4 + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(float f, double d) {

        boolean b1=true;
        int i5=-10635, i6=-13, i8=38540, i9=-17509, i10=18220, i11=-45613, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 48794);

        vMeth1(b1, iFld, iFld);
        for (i5 = 1; i5 < 128; i5++) {
            iArr1[i5 + 1] -= i6;
            i6 *= i5;
            for (i8 = 12; i8 > 1; --i8) {
                i6 |= 118;
                i9 = -56007;
                i9 *= (int)Test.instanceCount;
                iArr1[i5 - 1] -= -29146;
                for (i10 = 1; i10 < 2; i10 += 2) {
                    Test.instanceCount *= Test.instanceCount;
                }
                i9 *= (int)-14L;
                i11 += i11;
                iFld -= (int)Test.instanceCount;
                if (b1) break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i5 + i6 + i8 + i9 +
            i10 + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public double dMeth(int i) {

        int i1=-9, i2=-44, i12=36, i13=0;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3571399816472501689L);

        for (i1 = 6; i1 < 388; i1++) {
            i = i1;
            vMeth(-2.777F, 103.30912);
            i -= iFld;
            for (i12 = 1; i12 < 4; ++i12) {
                Test.instanceCount = i13;
                i = (int)Test.instanceCount;
                Test.iArrFld[i12] = i13;
                try {
                    i13 = (i1 / i13);
                    i13 = (i % 63404);
                    iFld = (i / -34811);
                } catch (ArithmeticException a_e) {}
                byFld <<= (byte)i;
            }
            i13 = (int)Test.instanceCount;
            if (i1 != 0) {
            }
            Test.instanceCount *= 3810537884L;
        }
        iArrFld1[(-11 >>> 1) % N] *= i2;
        lArr1[(i1 >>> 1) % N] = i12;
        long meth_res = i + i1 + i2 + i12 + i13 + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=75.37688;
        int i14=0, i15=180, i16=-10, i17=213, i18=4, i19=11, iArr[]=new int[N];
        long l=29L;
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -156);
        FuzzerUtils.init(fArr, -79.59F);

        iArr[(iFld >>> 1) % N] = (int)(dMeth(iFld) + -31030);
        for (float f1 : fArr) {
            byFld += (byte)f1;
            sFld = (short)6;
            for (d1 = 2; d1 < 63; ++d1) {
                iArr[(int)(d1 - 1)] = i14;
                i14 += (int)(d1 * d1);
                i14 += (int)(((d1 * Test.instanceCount) + Test.instanceCount) - f1);
                if (b2) {
                    for (i15 = (int)(d1); i15 < 2; ++i15) {
                        f1 -= i15;
                        iArrFld1[i15 - 1] |= i14;
                        f1 = i16;
                        Test.instanceCount = sFld;
                    }
                    for (i17 = 1; i17 < 2; ++i17) {
                        Test.instanceCount *= Test.instanceCount;
                        iArr[i17] %= -40;
                        f1 = Test.instanceCount;
                        i14 += (((i17 * i14) + i17) - Test.instanceCount);
                        try {
                            iArrFld1[i17] = (i18 / -37568);
                            i18 = (50191 / i15);
                            i14 = (i17 % 23282);
                        } catch (ArithmeticException a_e) {}
                        i18 *= 53;
                    }
                    f1 *= i16;
                    for (l = 1; 2 > l; ++l) {
                        byFld += (byte)i16;
                        fArr[(int)(l)] = i15;
                        iArrFld2[(int)(l)] >>>= -200;
                        switch ((int)(l % 6)) {
                        case 0:
                            dFld -= -35717;
                            i14 = i17;
                            i18 -= i15;
                            break;
                        case 1:
                            i18 = iFld;
                        case 2:
                            f1 = i18;
                            break;
                        case 3:
                            iArrFld1[(int)(l)] += (int)f1;
                        case 4:
                            i18 += i16;
                        case 5:
                            Test.instanceCount += i19;
                        }
                    }
                } else if (b2) {
                    b2 = b2;
                } else {
                    f1 = iFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
