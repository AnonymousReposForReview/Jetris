package tests.javafuzzer959;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:08:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-176L;
    public static float fFld=0.4F;
    public boolean bFld=true;
    public static double dFld=16.54915;
    public byte byFld=87;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, int i15, long l2) {

        int i16=-8, i17=-6, i18=28859, i19=-12, i20=45064, i21=21494, iArr1[]=new int[N];
        boolean b=true;
        short s1=-23480;
        byte by1=-6;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 13);
        FuzzerUtils.init(lArr1, -149L);

        for (i16 = 13; i16 < 267; i16++) {
            i15 -= -10;
            if (b) continue;
            l1 += (i16 * i16);
            switch (((i16 % 10) * 5) + 70) {
            case 71:
                i17 >>= i15;
                i15 += (((i16 * l1) + i17) - i15);
                for (i18 = i16; i18 < 6; i18 += 2) {
                    l2 *= s1;
                    i19 += (int)l2;
                    if (b) break;
                }
                for (i20 = i16; 6 > i20; ++i20) {
                    Test.instanceCount ^= i15;
                    i21 += (int)Test.instanceCount;
                }
                break;
            case 92:
                try {
                    iArr1[i16 + 1] = (i19 % -1439484187);
                    i21 = (-65127 % i17);
                    i17 = (iArr1[i16] % i19);
                } catch (ArithmeticException a_e) {}
                break;
            case 116:
                i15 &= by1;
                break;
            case 83:
                i19 = i19;
                break;
            case 108:
                i17 = (int)Test.instanceCount;
            case 104:
                i15 = (int)l1;
                break;
            case 109:
                if (b) continue;
                break;
            case 107:
                iArr1 = iArr1;
                break;
            case 98:
                lArr1[(18 >>> 1) % N] = -84;
                break;
            case 80:
                l2 = i15;
                break;
            default:
                l2 >>= l1;
            }
        }
        long meth_res = l1 + i15 + l2 + i16 + i17 + (b ? 1 : 0) + i18 + i19 + s1 + i20 + i21 + by1 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(byte by, int i10) {

        int i11=53390, i12=56331, i13=-32518, i14=-218, iArr[][]=new int[N][N];
        double d=127.37903, d1=-116.3299;
        long l3=9L;
        short s2=14666, sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.33F);
        FuzzerUtils.init(sArr, (short)26050);
        FuzzerUtils.init(iArr, 60813);

        i11 = 1;
        do {
            for (d = 1; d < 10; d++) {
                for (i13 = 1; i13 < 2; ++i13) {
                    i14 = (14 + (i12++));
                    Test.instanceCount += (i13 * i13);
                    fArr[i13] += -10L;
                    i10 |= -46;
                    i12 = (int)((sArr[(int)(d)] += (short)i10) + ((d + Test.instanceCount) * (--i10)));
                    iArr = (iArr = (iArr = (iArr = FuzzerUtils.int2array(N, (int)-54255))));
                    iArr[i11][i13 - 1] -= (i10 + ((i12 >> by) * iMeth(l3, 12, Test.instanceCount)));
                    Test.instanceCount -= Test.instanceCount;
                }
                d1 *= i14;
                l3 += (long)(d * d);
                s2 -= (short)i14;
                Test.fFld = Test.fFld;
            }
        } while (++i11 < 152);
        long meth_res = by + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + l3 +
            Double.doubleToLongBits(d1) + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i1, long l, int i2) {

        int i3=-26000, i4=-37434, i5=-13, i6=35442, i7=119, i8=-49794, i9=-16200;
        short s=4528;
        byte by2=-10;
        double d2=0.12826, dArr[]=new double[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3649659375960668311L);
        FuzzerUtils.init(dArr, -42.33092);

        Test.instanceCount = lArr[(1 >>> 1) % N];
        for (i3 = 11; i3 < 309; ++i3) {
            if ((i2++) != ((i1 &= (int)(i3 + Test.instanceCount)) - -60.127277)) continue;
            i5 = 1;
            while (++i5 < 6) {
                for (i6 = i3; 1 > i6; ++i6) {
                    dArr[i5] = (((--Test.fFld) - (-(i6 - i1))) * 818763518975261229L);
                    s <<= (short)Math.max(i3, -28);
                }
                i2 -= (i1--);
                for (i8 = 1; i8 < 1; ++i8) {
                    if (b1) {
                        i1 &= (i1 = byMeth(by2, -103));
                    } else if (true) {
                        try {
                            i4 = (-833384149 / i2);
                            i2 = (i3 % i5);
                            i1 = (i7 / i5);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += i5;
                        d2 = i2;
                    } else if (b1) {
                        l += i8;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + i4 + i5 + i6 + i7 + s + i8 + i9 + by2 + Double.doubleToLongBits(d2) + (b1
            ? 1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=8, i23=60706, i24=-66, i25=136, i26=1, i27=184, i28=34, i29=185;
        short s3=9833, sArr1[][]=new short[N][N];
        long l4=-234L, lArr2[]=new long[N];
        float fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];
        double dArr1[][]=new double[N][N], dArr2[]=new double[N];

        FuzzerUtils.init(sArr1, (short)12064);
        FuzzerUtils.init(fArr1, -61.535F);
        FuzzerUtils.init(lArr2, -75L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr1, -1.112574);
        FuzzerUtils.init(dArr2, -2.37814);

        Test.instanceCount = (long)(-2.586F + i);
        vMeth(i, Test.instanceCount, i);
        iArrFld = iArrFld;
        for (i23 = 22; i23 < 359; ++i23) {
            switch (i23 + 107) {
            case 107:
                for (i25 = 4; i25 < 75; ++i25) {
                    i += (i25 * Test.instanceCount);
                    for (i27 = 1; 2 > i27; ++i27) {
                        i = i23;
                        i += (i27 ^ i27);
                        switch ((i25 % 10) + 21) {
                        case 21:
                        case 22:
                            sArr1[i25][i23] *= (short)i23;
                            i26 >>= (int)-1414312380944157638L;
                            break;
                        case 23:
                            i >>= i29;
                            Test.instanceCount = i23;
                            break;
                        case 24:
                            i24 -= i;
                            Test.fFld += (i27 + i28);
                            if (bFld) break;
                            switch (((i27 % 6) * 5) + 108) {
                            case 115:
                                Test.instanceCount = 61;
                                i29 = i25;
                                break;
                            case 113:
                                fArr1[i27 - 1] *= Test.instanceCount;
                                i = i29;
                                i24 -= i28;
                                Test.fFld *= i;
                                break;
                            case 123:
                                iArrFld = iArrFld;
                                i24 += -139;
                                break;
                            case 125:
                                i26 = 64528;
                                iArrFld[i27] -= i24;
                                lArr2 = FuzzerUtils.long1array(N, (long)-2339786639L);
                                break;
                            case 118:
                                i29 *= (int)Test.instanceCount;
                            case 126:
                                i28 += i29;
                                break;
                            }
                        case 25:
                        case 26:
                            if (bFld) continue;
                            break;
                        case 27:
                            i28 = (int)Test.instanceCount;
                            break;
                        case 28:
                            i24 = 232;
                            break;
                        case 29:
                            iArrFld[i23] >>= i29;
                            break;
                        case 30:
                            Test.fFld -= 2.585F;
                            break;
                        default:
                            try {
                                i = (i23 / 11534);
                                i26 = (16342 % i26);
                                i = (i25 % i26);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                }
                break;
            case 108:
                Test.instanceCount -= 2988;
            case 109:
                i24 += (i23 * i25);
                break;
            case 110:
                Test.fFld += (((i23 * i26) + Test.fFld) - i25);
            case 111:
                Test.dFld = i25;
                break;
            case 112:
                s3 = (short)i;
                break;
            case 113:
                i28 += (i23 + i23);
            case 114:
                Test.instanceCount = i29;
                break;
            case 115:
                i28 += (int)Test.instanceCount;
                break;
            case 116:
                iArrFld[i23 - 1] -= -30;
                break;
            case 117:
                bFld = bFld;
                break;
            case 118:
                i += i23;
                break;
            case 119:
                Test.instanceCount -= -20966;
                break;
            case 120:
                bFld = false;
                break;
            case 121:
                i24 += i23;
                break;
            case 122:
                i26 += i23;
                break;
            case 123:
            case 124:
                i26 = i23;
                break;
            case 125:
                bArr[i23] = bFld;
            case 126:
                iArrFld[i23 + 1] >>>= i28;
                break;
            case 127:
                iArrFld[i23 + 1] += i29;
                break;
            case 128:
                i = i25;
                break;
            case 129:
                iArrFld[i23] += (int)1.130745;
                break;
            case 130:
                iArrFld = FuzzerUtils.int1array(N, (int)-13);
                break;
            case 131:
                i26 -= (int)Test.dFld;
            case 132:
                lArr2 = lArr2;
            case 133:
            case 134:
                dArr1[i23][i23 - 1] += i23;
                break;
            case 135:
                Test.instanceCount = i29;
                break;
            case 136:
                i26 += i23;
                break;
            case 137:
                Test.instanceCount %= (i23 | 1);
            case 138:
                Test.fFld *= Test.instanceCount;
            case 139:
                Test.fFld += (i23 - i26);
                break;
            case 140:
                Test.dFld += i27;
                break;
            case 141:
                i29 *= byFld;
            case 142:
                lArr2[i23 + 1] = i28;
            case 143:
                Test.instanceCount = Test.instanceCount;
                break;
            case 144:
                Test.instanceCount += (i23 * i23);
                break;
            case 145:
                i26 = (int)Test.instanceCount;
                break;
            case 146:
                iArrFld[i23] = i29;
                break;
            case 147:
                Test.dFld += -115;
                break;
            case 148:
                Test.fFld += -77;
                break;
            case 149:
                i29 += (-43550 + (i23 * i23));
                break;
            case 150:
                Test.instanceCount = -7;
            case 151:
                if (bFld) break;
            case 152:
                i -= -11;
                break;
            case 153:
                Test.fFld -= (float)Test.dFld;
                break;
            case 154:
                i26 &= i29;
                break;
            case 155:
                i29 += 246;
                break;
            case 156:
                Test.instanceCount /= (Test.instanceCount | 1);
                break;
            case 157:
                Test.fFld += 0.18F;
                break;
            case 158:
                i *= (int)l4;
                break;
            case 159:
                i26 = i25;
                break;
            case 160:
                i24 = i24;
                break;
            case 161:
                l4 += i28;
                break;
            case 162:
                if (true) break;
            case 163:
                Test.instanceCount -= s3;
                break;
            case 164:
                Test.instanceCount += i23;
                break;
            case 165:
                i28 *= (int)l4;
                break;
            case 166:
                dArr1[i23 + 1][i23 - 1] = Test.dFld;
                break;
            case 167:
                iArrFld = iArrFld;
                break;
            case 168:
                i29 += byFld;
                break;
            case 169:
                try {
                    i28 = (i25 % 5);
                    i24 = (-2570 % iArrFld[i23 + 1]);
                    i29 = (-2391 / iArrFld[i23]);
                } catch (ArithmeticException a_e) {}
            case 170:
                iArrFld[i23 - 1] = i24;
                break;
            case 171:
            case 172:
                Test.dFld = Test.fFld;
                break;
            case 173:
                byFld -= (byte)Test.fFld;
                break;
            case 174:
                try {
                    i = (i / i24);
                    i28 = (i / i);
                    i26 = (i29 % 9090);
                } catch (ArithmeticException a_e) {}
                break;
            case 175:
                iArrFld[i23] -= i29;
            case 176:
                i += (i23 | s3);
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
