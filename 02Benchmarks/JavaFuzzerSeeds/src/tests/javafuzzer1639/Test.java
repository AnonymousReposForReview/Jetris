package tests.javafuzzer1639;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:38:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public float fFld=-4.202F;
    public int iFld=59986;
    public static short sFld=26318;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.sArrFld, (short)-18540);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f2, double d1, int i4) {

        int i5=-8990, i6=-1, i7=1, i8=3;
        long l=42960L;
        byte by=61;
        boolean b=false;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -59.63950);

        if (b) {
            for (i5 = 1; i5 < 139; i5++) {
                f2 *= 2.897F;
                i6 = i5;
                i6 = i4;
                i6 = (int)Test.instanceCount;
                dArr[i5] = dArr[i5 - 1];
            }
            for (i7 = 9; i7 < 243; ++i7) {
                l = 1;
                do {
                    i8 = i5;
                    if (b) {
                        by += (byte)(((l * i4) + i8) - i4);
                        i4 >>= i8;
                    } else {
                        i6 -= i6;
                        i4 &= i6;
                    }
                } while (++l < 7);
            }
            vMeth2_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + l +
                by + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
            return;
        } else if (b) {
            Test.instanceCount += i8;
        } else {
            i6 += by;
            vMeth2_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + l +
                by + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
            return;
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + l + by +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i2, int i3, short s) {

        float f3=2.1014F;
        double d2=0.74020;
        int i9=-16704, i10=-3, i11=-7, i12=5, i13=-6, i14=195;
        boolean b1=false;

        vMeth2(f3, d2, i2);
        i2 *= (int)f3;
        i9 = 313;
        while (--i9 > 0) {
            for (i10 = i9; i10 < 5; ++i10) {
                f3 -= i2;
                i2 -= i3;
                if (b1) break;
            }
            i11 += i9;
            i12 = 1;
            do {
                Test.iArrFld[i12] *= (int)d2;
                if (b1) {
                    for (i13 = 1; i13 > 1; --i13) {
                        if (false) break;
                        f3 *= i2;
                        Test.instanceCount = i10;
                    }
                } else if (b1) {
                    Test.iArrFld[i12] %= (int)(i10 | 1);
                }
            } while (++i12 < 5);
        }
        vMeth1_check_sum += i2 + i3 + s + Float.floatToIntBits(f3) + Double.doubleToLongBits(d2) + i9 + i10 + i11 + (b1
            ? 1 : 0) + i12 + i13 + i14;
    }

    public static void vMeth(float f1) {

        int i1=-216, i15=10, i16=-64855, i17=34, i18=8086, i19=0, i20=-33, i21=34233, i22=41428;
        long l1=-16L, lArr[][]=new long[N][N];
        double d3=35.20417;
        boolean b2=true;

        FuzzerUtils.init(lArr, -49L);

        switch ((((i1 - i1) >>> 1) % 5) + 124) {
        case 124:
            vMeth1(i1, -27, Test.sFld);
            for (i15 = 3; i15 < 249; i15++) {
                for (l1 = 1; l1 < 7; l1++) {
                    Test.iArrFld[(int)(l1)] = (int)l1;
                    i17 += (int)(l1 * l1);
                    i1 -= i1;
                    if (false) continue;
                }
            }
            Test.iArrFld[(i17 >>> 1) % N] -= (int)d3;
            break;
        case 125:
            for (i18 = 7; i18 < 340; ++i18) {
                for (i20 = 1; i20 < 5; i20++) {
                    if (false) {
                        f1 -= i17;
                        Test.instanceCount += (((i20 * i17) + f1) - i15);
                        f1 = -1;
                    } else if (b2) {
                        lArr[i18 - 1][i20 + 1] = i16;
                    } else {
                        i19 *= (int)d3;
                    }
                }
            }
            break;
        case 126:
            Test.instanceCount %= 4L;
        case 127:
            i19 += (int)d3;
            break;
        case 128:
        default:
            Test.sFld = (short)i22;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i15 + i16 + l1 + i17 + Double.doubleToLongBits(d3) + i18 +
            i19 + i20 + i21 + (b2 ? 1 : 0) + i22 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-2.49391;
        float f=-43.933F;
        int i=13, i23=-13705, i24=26653, i25=-197, i26=-13, i27=65109, i28=2, i29=21, i30=-11;
        byte by1=58;
        boolean b3=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2L);

        d += ((fFld -= (iFld++)) - (iFld--));
        for (f = 11; f < 298; ++f) {
            vMeth(f);
            fFld *= i;
            if (false) break;
            fFld = i;
            fFld += f;
            iFld -= (int)24.17128;
            iFld += iFld;
            for (i23 = (int)(f); i23 < 88; i23++) {
                lArr1[(int)(f - 1)] += i24;
            }
            i += (int)f;
        }
        for (short s1 : Test.sArrFld) {
            Test.instanceCount += 14569;
            iFld = (int)Test.instanceCount;
            for (i25 = 3; i25 < 63; i25++) {
                for (i27 = 1; 2 > i27; ++i27) {
                    i26 >>>= by1;
                }
                b3 = b3;
                i28 = i27;
                Test.instanceCount += (((i25 * i28) + Test.instanceCount) - i23);
                Test.instanceCount += (i25 * i25);
                by1 >>>= (byte)i;
                i += (int)61L;
                d += Test.instanceCount;
                for (i29 = i25; i29 < 2; i29++) {
                    by1 -= (byte)-37710;
                    if (b3) continue;
                    Test.iArrFld[i29] = (int)Test.instanceCount;
                    Test.iArrFld[(i29 >>> 1) % N] -= -5;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
