package tests.javafuzzer2477;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:16:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63179L;
    public static int iFld=27571;
    public static boolean bFld=false;
    public int iFld1=-62345;
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)78);
        FuzzerUtils.init(Test.dArrFld, 2.67668);
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, int i10, int i11) {

        int i12=9, i13=35837, i14=-212, i15=52743, i16=4, i17=0, iArr[][]=new int[N][N];
        float f3=1.345F;

        FuzzerUtils.init(iArr, -226);

        for (i12 = 270; i12 > 4; i12--) {
            Test.instanceCount = i9;
            for (i14 = i12; i14 < 6; i14++) {
                Test.instanceCount %= (Test.instanceCount | 1);
                Test.instanceCount += Test.instanceCount;
                for (i16 = i12; i16 < 1; i16++) {
                    if (Test.bFld) continue;
                    switch ((i16 % 1) + 18) {
                    case 18:
                        Test.instanceCount += (i16 | i14);
                        iArr[i14 - 1][i14] >>>= (int)Test.instanceCount;
                        Test.instanceCount *= i11;
                        f3 -= i9;
                        break;
                    default:
                        if (Test.bFld) {
                        } else {
                            i9 = (int)f3;
                        }
                        f3 += (i16 - i12);
                    }
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f2, int i6, boolean b) {

        int i7=-14, i8=-188, i18=-57932, i19=210, i20=-1, i21=-2, iArr1[]=new int[N];
        float f4=2.586F, fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.52450);
        FuzzerUtils.init(iArr1, 8);
        FuzzerUtils.init(fArr, 113.472F);

        for (i7 = 3; 254 > i7; i7++) {
            vMeth1(13, i8, -11);
            for (i18 = i7; i18 < 6; ++i18) {
                i6 = -38424;
            }
            f4 = 1;
            while (++f4 < 6) {
                f2 += (((f4 * i7) + Test.iFld) - i7);
                for (i20 = 1; i20 < 1; i20++) {
                    i19 >>>= (int)Test.instanceCount;
                    i21 *= (int)Test.instanceCount;
                    iArr1[i20 + 1] += (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    i19 *= -30846;
                    fArr[i20 - 1] -= i21;
                    if (b) break;
                    Test.iFld += (int)(-2.193F + (i20 * i20));
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i6 + (b ? 1 : 0) + i7 + i8 + i18 + i19 + Float.floatToIntBits(f4)
            + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l, float f1) {


        Test.iFld = (++Test.iFld);
        vMeth(f1, Test.iFld, true);
        long meth_res = l + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=188, i2=-219, i3=205, i4=-13, i5=0, i22=284, i23=-119, i24=4080, i25=0, i26=214;
        float f=-2.549F, fArr1[]=new float[N];
        double d=-1.90962, d2=-56.63157;
        short s=11877;
        byte by=-11;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -56391L);
        FuzzerUtils.init(fArr1, 1.576F);

        lArr[(93 >>> 1) % N] += (((i / (i | 1)) - Math.max(i, i)) + i);
        for (i1 = 6; i1 < 153; i1++) {
            i3 = 171;
            do {
                i += (i3 * f);
                d += (i2--);
                i <<= (int)(((s *= by) >> i1) + f);
                for (i4 = 1; i4 > 1; i4--) {
                    Test.instanceCount = iMeth(Test.instanceCount, f);
                    if (Test.bFld) break;
                    switch ((i1 % 3) + 125) {
                    case 125:
                        Test.byArrFld[i3 + 1] <<= (byte)Test.iFld;
                        Test.iFld = Test.iFld;
                        break;
                    case 126:
                        Test.iFld -= i3;
                        break;
                    case 127:
                    default:
                        i5 = 9;
                    }
                    i5 = 207;
                    Test.dArrFld = Test.dArrFld;
                }
                for (i22 = 1; i22 < 1; ++i22) {
                    Test.dArrFld[i3] *= 19;
                    Test.iArrFld[i22 - 1] >>= i1;
                }
                Test.instanceCount += (((i3 * i5) + s) - f);
                i5 = (int)Test.instanceCount;
                Test.bFld = false;
            } while (--i3 > 0);
            for (i24 = 9; i24 < 171; ++i24) {
                f = i24;
                if (true) {
                    f += (63011 + (i24 * i24));
                } else if (Test.bFld) {
                    if (false) {
                        for (d2 = i24; d2 < 2; ++d2) {
                            Test.instanceCount += (long)(((d2 * f) + f) - iFld1);
                            if (false) break;
                        }
                    } else if (Test.bFld) {
                        fArr1[i1 - 1] -= s;
                    } else {
                        by = (byte)Test.iFld;
                    }
                } else {
                    Test.instanceCount += (i24 - i1);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
