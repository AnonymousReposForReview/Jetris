package tests.javafuzzer1400;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:46:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50581L;
    public static int iFld=146;
    public static int iFld1=222;
    public static boolean bFld=false;
    public static double dFld=-119.79059;
    public static volatile short sFld=-10916;
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -108.70845);
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=38069, i4=-89, i5=-60232, i6=-220, iArr1[]=new int[N];
        float f2=125.85F;
        double d1=0.53459;
        long l1=-3721629776L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 24);
        FuzzerUtils.init(lArr1, -2807284660219958146L);

        iArr1[(i3 >>> 1) % N] += (int)f2;
        i4 = 1;
        do {
            Test.instanceCount |= Test.iFld1;
            switch (((i4 % 5) * 5) + 49) {
            case 66:
                i3 += (i4 * Test.instanceCount);
                d1 = 1;
                do {
                    Test.dArrFld[(int)(d1)][(int)(d1)] *= -21;
                    for (i5 = 1; i5 < 1; ++i5) {
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount = 29011;
                        Test.iFld = i5;
                        lArr1[i5 - 1] -= (long)f2;
                        Test.instanceCount = Test.iFld;
                        l1 += (i5 * i5);
                        l1 -= Test.iFld;
                    }
                } while (++d1 < 7);
                break;
            case 51:
                Test.instanceCount = Test.instanceCount;
                break;
            case 56:
                if (Test.bFld) continue;
                break;
            case 64:
                if (Test.bFld) break;
                break;
            case 60:
                if (Test.bFld) break;
                break;
            }
        } while (++i4 < 234);
        vMeth2_check_sum += i3 + Float.floatToIntBits(f2) + i4 + Double.doubleToLongBits(d1) + i5 + i6 + l1 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1() {

        int i=-10529, i1=0, i2=5242, iArr[]=new int[N];
        float f1=0.34F;
        short s=8619;
        double d=-2.116948;

        FuzzerUtils.init(iArr, -43508);

        iArr = (iArr = (iArr = (iArr = iArr)));
        Test.iFld = Test.iFld1;
        i = 325;
        do {
            Test.iFld1 += i;
            for (i1 = 10; i1 > 1; --i1) {
                Test.iFld1 += (int)Test.instanceCount;
                i2 = i;
                f1 += i1;
                Test.iFld += (i1 ^ Test.iFld);
                Test.instanceCount = (((++Test.instanceCount) + (-Test.instanceCount)) + (s--));
                Test.iFld1 = (int)Test.instanceCount;
            }
            f1 = ((s * (Test.iFld1 * -7)) + (-(Test.iFld++)));
            if (Test.iFld1 != 0) {
                vMeth1_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + s + Double.doubleToLongBits(d) +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            d = i;
            vMeth2();
        } while ((i -= 2) > 0);
        vMeth1_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + s + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f, long l) {

        int i7=13749, i8=12831, i9=-3910, i10=230, i11=19139, iArr2[]=new int[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -2712781279L);
        FuzzerUtils.init(iArr2, 95);
        FuzzerUtils.init(fArr, 0.420F);

        Test.iFld1 -= (int)Math.min(lArr[(Test.iFld >>> 1) % N], Math.max(-52624L, Test.iFld1 - 13));
        vMeth1();
        Test.iFld1 = Test.iFld1;
        if (Test.bFld) {
            i7 *= (int)l;
            for (i8 = 1; 183 > i8; i8++) {
                iArr2[i8 - 1] += (int)f;
                i9 -= (int)f;
                i7 = (int)f;
                Test.dFld -= f;
                iArr2[i8 + 1] *= i8;
                i9 += (int)f;
                for (i10 = 1; i10 < 9; ++i10) {
                    fArr[i10 - 1] = i9;
                }
                if (i7 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + l + i7 + i8 + i9 + i10 + i11 +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            }
        } else if (Test.bFld) {
            Test.bFld = true;
        } else {
            l += (long)f;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i13=56377, i14=61889, i15=94, iArr3[]=new int[N];
        double d2=116.122033;
        float fArr1[]=new float[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, 30876);
        FuzzerUtils.init(fArr1, 60.311F);
        FuzzerUtils.init(lArr2, -12087L);

        Test.instanceCount *= (++Test.iFld);
        Test.iFld >>= (-Test.iFld);
        vMeth(0.862F, Test.instanceCount);
        for (int i12 : iArr3) {
            i13 = 1;
            while (++i13 < 63) {
                byte by=31;
                float f3=1.761F;
                i12 += (int)(-1.910F + (i13 * i13));
                Test.instanceCount |= Test.iFld1;
                by = (byte)Test.instanceCount;
                i12 += (((i13 * Test.instanceCount) + f3) - i12);
                if (Test.bFld) continue;
                if (Test.bFld) {
                    for (i14 = 1; i14 < 1; ++i14) {
                        fArr1[i14] = Test.instanceCount;
                        Test.iFld = (int)Test.dFld;
                        Test.iFld += (int)d2;
                        i15 |= i12;
                        if (Test.bFld) break;
                        switch ((i14 % 10) + 57) {
                        case 57:
                            Test.instanceCount = Test.iFld;
                            lArr2 = lArr2;
                            Test.instanceCount += i12;
                            lArr2[i14 + 1] <<= i13;
                            break;
                        case 58:
                            i12 -= (int)f3;
                            if (Test.bFld) continue;
                            Test.instanceCount -= Test.iFld1;
                            break;
                        case 59:
                            f3 %= (Test.iFld1 | 1);
                            i15 = (int)2.59240;
                        case 60:
                            Test.iArrFld[i13 + 1] += 60019;
                            Test.bFld = Test.bFld;
                            i12 = i12;
                            break;
                        case 61:
                            Test.iFld += (((i14 * Test.iFld1) + f3) - Test.iFld1);
                            break;
                        case 62:
                            Test.iFld1 = i12;
                        case 63:
                            Test.instanceCount = -6669;
                        case 64:
                        case 65:
                            Test.instanceCount += (-37 + (i14 * i14));
                            break;
                        case 66:
                            i12 = i12;
                        default:
                            Test.sFld += (short)Test.iFld;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
