package tests.javafuzzer2404;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:12:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=48498L;
    public float fFld=-2.994F;
    public static short sArrFld[][]=new short[N][N];
    public static volatile byte byArrFld[][]=new byte[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-21793);
        FuzzerUtils.init(Test.byArrFld, (byte)-45);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=55531, i5=-208, i6=84, i7=-53, i8=-19855, i9=-90, i10=-57;
        byte by=-31;
        boolean b1=false;
        float f2=2.340F;

        for (i4 = 14; i4 < 326; i4++) {
            i6 = 5;
            do {
                i5 = i5;
                i5 += by;
                i5 >>= i5;
                i5 += (9 + (i6 * i6));
                if (b1) break;
                for (i7 = 1; i7 < 1; i7++) {
                    i8 = (int)Test.instanceCount;
                    i8 += (i7 * i7);
                    Test.instanceCount = -16853;
                    by *= (byte)f2;
                }
                for (i9 = 1; i9 > i6; --i9) {
                    i8 += i9;
                    i10 -= i6;
                }
            } while (--i6 > 0);
        }
        long meth_res = i4 + i5 + i6 + by + (b1 ? 1 : 0) + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i1=223, i2=-55418, i3=-7, i11=-24, i12=-9374;
        float f=-76.103F, f1=-81.621F;
        byte by1=32;

        Test.instanceCount >>= i1;
        f = 1;
        while (++f < 135) {
            for (i2 = 12; i2 > 1; i2 -= 3) {
                boolean b=true;
                switch ((i2 % 1) + 5) {
                case 5:
                    b = b;
                default:
                    f1 += ((++Test.byArrFld[(int)(f + 1)][i2 + 1]) + lMeth());
                    if (false) {
                        for (i11 = 1; i11 < 4; i11++) {
                            Test.instanceCount = 52056;
                            Test.instanceCount += (64 + (i11 * i11));
                            i1 ^= i1;
                            Test.instanceCount += by1;
                            i1 -= i1;
                            i3 <<= i2;
                            i3 = 7;
                        }
                    } else {
                        i3 = i3;
                    }
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + i2 + i3 + Float.floatToIntBits(f1) + i11 + i12 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        byte by2=-30;
        double d=1.55922, d1=1.70500;
        int i13=-9, i14=-276, i15=43786, i16=-186, i17=58605, i18=-10, iArr[]=new int[N];
        float f3=0.593F, f4=-94.143F;
        short s=-10252;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(lArr, -59036L);

        i -= (Test.sArrFld[(222 >>> 1) % N][(i >>> 1) % N] - ((++i) + i));
        iArr[(i >>> 1) % N] = (int)(((-iMeth()) - by2) - 2.154F);
        switch (((i >>> 1) % 8) + 123) {
        case 123:
            for (d = 22; 380 > d; d++) {
                Test.instanceCount = (long)f3;
                for (i14 = 1; i14 < 5; ++i14) {
                    i15 = -63982;
                    lArr[(int)(d - 1)] = i14;
                    for (i16 = 1; i16 < 2; i16 += 3) {
                        i15 <<= (int)Test.instanceCount;
                        Test.sArrFld[(int)(d - 1)] = Test.sArrFld[i16];
                        i17 += (i16 * i17);
                    }
                    for (f4 = i14; f4 < 2; f4 += 3) {
                        lArr = lArr;
                        s -= (short)Test.instanceCount;
                    }
                }
            }
            break;
        case 124:
            f3 *= f4;
            break;
        case 125:
            d1 *= i17;
            break;
        case 126:
            f3 *= i17;
            break;
        case 127:
            i17 -= (int)f4;
            break;
        case 128:
            Test.instanceCount -= 172;
            break;
        case 129:
        case 130:
            i17 = (int)Test.instanceCount;
            break;
        }
        vMeth_check_sum += i + by2 + Double.doubleToLongBits(d) + i13 + Float.floatToIntBits(f3) + i14 + i15 + i16 +
            i17 + Float.floatToIntBits(f4) + i18 + s + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-9, i21=-5, i22=-116, i23=-105, i24=-1, i25=-7, i26=1463, i27=-31445, i28=2, i29=12, i30=-3, i31=219,
            iArr1[]=new int[N];
        byte by3=-110;
        boolean b2=false, b3=true;

        FuzzerUtils.init(iArr1, 14);

        vMeth(i20);
        i21 = 1;
        while (++i21 < 371) {
            for (i22 = 3; i22 < 68; ++i22) {
                i23 *= i21;
                i20 += (((i22 * i21) + Test.instanceCount) - i23);
                i23 = i22;
                i20 += i23;
                Test.instanceCount <<= Test.instanceCount;
            }
            i20 = (int)Test.instanceCount;
            i24 = 1;
            do {
                for (i25 = i24; 1 > i25; ++i25) {
                    iArr1[i25 + 1] = i27;
                    fFld -= i23;
                    i27 = -14122;
                    Test.instanceCount += (i25 - i25);
                    Test.instanceCount -= 5;
                }
            } while (++i24 < 68);
            fFld += (-33781 + (i21 * i21));
            for (i28 = 1; i28 < 68; ++i28) {
                switch (((i28 % 4) * 5) + 85) {
                case 97:
                    Test.instanceCount += i28;
                    Test.instanceCount += (((i28 * i29) + i24) - Test.instanceCount);
                case 100:
                    if (false) {
                        for (i30 = i21; i30 < 2; i30++) {
                            i29 >>= (int)Test.instanceCount;
                            i31 -= by3;
                            b2 = b2;
                            i26 = 99;
                            i27 += i26;
                            lArrFld = lArrFld;
                        }
                        i26 -= (int)Test.instanceCount;
                    }
                    break;
                case 88:
                    i23 += i28;
                case 101:
                    if (b3) continue;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
