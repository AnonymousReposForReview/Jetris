package tests.javafuzzer1196;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:22:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5887088333619088956L;
    public int iFld=7744;
    public static volatile short sFld=3309;
    public int iFld1=66;
    public static float fFld=34.315F;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -34353L);
        FuzzerUtils.init(Test.iArrFld, -179);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i11, int i12) {

        int i13=5, i14=1, i15=6, i16=-178, i17=-11, i18=41, i19=-29692, i20=0, i21=-6, i22=-11, i23=3, i24=49115;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i11 = 13;
        for (i13 = 12; i13 < 269; ++i13) {
            for (i15 = 1; i15 < 6; i15++) {
                Test.iArrFld[i15 + 1] *= i16;
                for (i17 = 1; i17 < 2; i17++) {
                    bArr[i17] = b1;
                }
            }
        }
        Test.instanceCount = i13;
        for (i19 = 17; i19 < 304; i19++) {
            i11 &= 7;
            Test.iArrFld[i19 + 1] = -199;
            for (i21 = 1; i21 < 6; i21++) {
                i16 = i13;
                for (i23 = 1; i23 < 2; i23++) {
                    Test.instanceCount = i24;
                    Test.instanceCount = 429252320595548296L;
                }
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 +
            i24 + FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(long l2, double d1) {

        int i10=87, i25=0, i26=4, i27=12, i28=0, i29=28825, i30=-37;
        boolean b2=false;
        byte by1=74;

        i10 += (int)(i10 * fMeth(-23533, i10));
        for (long l3 : Test.lArrFld1) {
            for (i25 = 1; 4 > i25; i25++) {
                if (b2) continue;
            }
        }
        for (i27 = 10; 234 > i27; ++i27) {
            i10 = (int)Test.fFld;
            Test.iArrFld[i27] = by1;
            Test.fFld = Test.fFld;
            i28 += (((i27 * Test.fFld) + i10) - i10);
            i28 += (int)Test.fFld;
            for (i29 = 1; i29 < 7; i29++) {
                if (i10 != 0) {
                }
            }
            try {
                i30 = (1902 / i26);
                i30 = (-936690753 % i10);
                Test.iArrFld[i27] = (Test.iArrFld[i27 - 1] / 1681779450);
            } catch (ArithmeticException a_e) {}
            i30 += (int)(1.488F + (i27 * i27));
        }
        Test.instanceCount = (long)Test.fFld;
        long meth_res = l2 + Double.doubleToLongBits(d1) + i10 + i25 + i26 + (b2 ? 1 : 0) + i27 + i28 + by1 + i29 + i30;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l, boolean b) {

        int i3=-16041, i4=212, i5=55632, i6=21427, i7=0, i8=-10, i9=58164, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 12);

        for (i3 = 3; 262 > i3; i3++) {
            long l1=-36810L;
            l1 -= (--Test.instanceCount);
            Test.fFld += (((i3 * l1) + i4) - i4);
            Test.lArrFld1[i3] >>= 38L;
            Test.fFld += i3;
            try {
                iArr1[i3 - 1] = (-55748 % i4);
                i4 = (i3 / iArr1[i3]);
                i4 = (94 % i4);
            } catch (ArithmeticException a_e) {}
            Test.fFld += (((i3 * l1) + i2) - i2);
            for (i5 = 1; i5 < 6; ++i5) {
                double d=-1.64844;
                iArr1[i3 - 1] = (int)(Math.max(Test.sFld - i6, Math.max(11478, i3)) * (d++));
                for (i7 = i5; i7 < 2; i7++) {
                    l1 = (-i7);
                    iArr1[i3 + 1] += Math.min(i7, i7);
                    Test.sFld += (short)(((i7 * i9) + i8) - i3);
                }
                i8 = Math.min((int)(iMeth(l1, d) - 9L), i2);
                l1 = l1;
            }
        }
        vMeth_check_sum += i2 + l + (b ? 1 : 0) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        byte by=106;
        int i=19572, i1=13, i31=-2729, i32=-179, i33=5, i34=-3, iArr[]=new int[N];
        float f=-20.524F;

        FuzzerUtils.init(iArr, -28066);

        lArrFld[(0 >>> 1) % N] &= ((iFld - (Test.sFld * 4)) + iArr[(iFld >>> 1) % N]);
        lArrFld[(iFld1 >>> 1) % N] <<= (Math.abs(Math.max(iFld1, 157)) + ((--by) | (iFld + -29313)));
        for (i = 7; i < 187; i++) {
            lArrFld[i] &= Test.instanceCount;
        }
        vMeth(134, 56L, Test.bFld);
        iFld += iFld;
        for (f = 2; f < 131; f++) {
            Test.iArrFld[(int)(f + 1)] -= (int)-104.21496;
            Test.bFld = Test.bFld;
        }
        for (i32 = 7; i32 < 207; i32++) {
            i34 = 1;
            while (++i34 < 126) {
                iArr = Test.iArrFld;
                iFld1 = -14158;
                Test.instanceCount += i32;
                iArr[i34 - 1] += (int)Test.instanceCount;
            }
        }
        i31 |= i1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
