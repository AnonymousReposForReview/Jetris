package tests.javafuzzer3133;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:27:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-804833206675979519L;
    public static volatile int iFld=-2;
    public static float fFld=-50.610F;
    public volatile short sFld=-7532;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 13L);
        FuzzerUtils.init(Test.lArrFld1, 4789889924758020176L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8, float f1) {


        i8 >>= Test.iFld;
        i8 -= Test.iFld;
        vMeth_check_sum += i8 + Float.floatToIntBits(f1);
    }

    public static int iMeth1(int i5) {

        int i6=-34, i7=4, i9=-8, i10=-35520, i11=93, iArr1[]=new int[N];
        float f=-1.810F;
        short s=26955, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-12419);
        FuzzerUtils.init(iArr1, 0);

        for (i6 = 15; i6 < 369; i6++) {
            sArr[i6] -= (short)((-(--f)) - (Test.lArrFld[i6]++));
            i7 -= (int)Test.instanceCount;
            Test.lArrFld1[i6 - 1][i6] >>>= (--Test.instanceCount);
            vMeth(i6, f);
            iArr1[i6] = (int)Test.instanceCount;
            i7 += i6;
            i9 = 1;
            while (++i9 < 5) {
                i5 += (((i9 * Test.instanceCount) + f) - Test.iFld);
                s += (short)i7;
                i5 = (int)Test.instanceCount;
                for (i10 = i9; i10 < 1; i10++) {
                    double d=14.23524;
                    i11 += (-1 + (i10 * i10));
                    iArr1[i10] *= (int)d;
                    i11 -= i6;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f) + i9 + s + i10 + i11 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i, boolean b) {

        int i1=43289, i2=-95, i3=30133, i4=-228, iArr2[]=new int[N];
        float f2=0.746F;

        FuzzerUtils.init(iArr2, 8);

        for (i1 = 1; i1 < 188; i1++) {
            for (i3 = 1; i3 < 9; ++i3) {
                i4 ^= (iMeth1(i2) + -216);
                iArr2[i3 + 1] *= i1;
                if (b) continue;
                b = b;
                Test.iFld += i3;
                if (b) {
                    i2 += i3;
                    i2 ^= i2;
                } else if (b) {
                    Test.instanceCount += i3;
                    i2 += i3;
                    f2 += Test.instanceCount;
                } else {
                    if (i != 0) {
                    }
                    i2 += (i3 * i3);
                }
            }
        }
        long meth_res = i + (b ? 1 : 0) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        int i12=40165, i13=-2, i14=-1, i15=0, i16=-7073, i17=-42, i18=-54010, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(fArr, 0.844F);

        iArr[(Test.iFld >>> 1) % N] = (int)(((Test.iFld - 18230) + (-55L + iMeth(Test.iFld, b1))) + Test.iFld);
        Test.iFld = Test.iFld;
        fArr[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld -= -231;
        for (i12 = 4; i12 < 241; i12++) {
            try {
                Test.iFld = (Test.iFld % Test.iFld);
                i13 = (-49 / i12);
                i13 = (Test.iFld / iArr[i12 - 1]);
            } catch (ArithmeticException a_e) {}
            Test.iFld = 2;
            Test.fFld *= 233;
            iArr[i12 - 1] = 6;
            for (i14 = 1; i14 < 106; i14++) {
                switch ((i14 % 5) + 71) {
                case 71:
                    for (i16 = i14; i16 < 2; i16++) {
                        i17 = i13;
                    }
                    break;
                case 72:
                    i13 += i14;
                    Test.lArrFld[i12 + 1] = (long)Test.fFld;
                    i13 -= (int)2.91550;
                    i13 >>= (int)-57216L;
                case 73:
                    Test.iFld |= (int)-53010223L;
                    iArr = FuzzerUtils.int1array(N, (int)-47);
                    i13 += 27591;
                    i13 = i16;
                    break;
                case 74:
                    try {
                        i17 = (59250 % i15);
                        Test.iFld = (i14 % 212);
                        i17 = (iArr[i14] / i15);
                    } catch (ArithmeticException a_e) {}
                    i15 -= (int)Test.instanceCount;
                    break;
                case 75:
                    Test.iFld += (((i14 * i15) + i13) - i13);
                    sFld += (short)(i14 * i14);
                    break;
                default:
                    iArr[i14 + 1] = i14;
                    i13 = i15;
                }
                try {
                    iArr[i14 + 1] = (i12 % Test.iFld);
                    i18 = (iArr[i14 + 1] / i16);
                    iArr[i12] = (47910 % iArr[i14]);
                } catch (ArithmeticException a_e) {}
                i18 = i16;
                Test.fFld = -10280;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
