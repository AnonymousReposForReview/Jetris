package tests.javafuzzer1857;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:41:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2647502014L;
    public boolean bFld=true;
    public static float fFld=36.988F;
    public volatile double dFld=66.68628;
    public int iArrFld[]=new int[N];

    public static long fMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i9=5, i10=74, i11=-1, i12=0, i13=-75, iArr2[]=new int[N];
        double d=0.9261;
        boolean b1=true;
        short s=24987;

        FuzzerUtils.init(iArr2, 19336);

        i9 = 1;
        while (++i9 < 136) {
            if (true) break;
            for (i10 = 1; 12 > i10; i10++) {
                i11 = (int)Test.instanceCount;
                i11 = i9;
                i11 -= i10;
                if (i9 != 0) {
                    vMeth_check_sum += i9 + i10 + i11 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i12 + i13 + s +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                d = i9;
                i11 = (int)-86.984F;
                Test.instanceCount += i10;
                if (b1) continue;
            }
            Test.instanceCount -= i10;
            for (i12 = i9; 12 > i12; ++i12) {
                Test.instanceCount = s;
                iArr2[i9 + 1] += i10;
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i12 + i13 + s +
            FuzzerUtils.checkSum(iArr2);
    }

    public static short sMeth(long l1, boolean b, int i5) {

        long l2=-25791L;
        int i6=27617, i7=-36895, i8=-13, i14=-33, i15=-4119, iArr1[]=new int[N];
        double d1=107.93612;
        float f=-102.118F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 1.656F);
        FuzzerUtils.init(iArr1, -8);

        for (l2 = 10; 289 > l2; ++l2) {
            fArr[(int)(l2 - 1)][(int)(l2)] = (i5++);
            for (i7 = 1; i7 < 6; ++i7) {
                l1 += (i7 ^ i6);
                iArr1 = (iArr1 = (iArr1 = iArr1));
                iArr1 = (iArr1 = (iArr1 = FuzzerUtils.int1array(N, (int)-55)));
                vMeth();
                d1 += l1;
                l1 *= i7;
            }
            for (i14 = 1; 6 > i14; i14 += 3) {
                i15 = i8;
                f = i6;
                i15 = (int)l2;
                i6 += (i14 + i5);
                i6 = i8;
            }
        }
        long meth_res = l1 + (b ? 1 : 0) + i5 + l2 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i14 + i15 +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public float fMeth(int i1, long l, int i2) {

        int i3=38911, i4=4, i16=-209, i17=152, i18=91, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 18865);

        try {
            Test.instanceCount >>= -11;
            i1 &= ((iArr[(i1 >>> 1) % N] + Integer.reverseBytes(i2)) % ((i1++) | 1));
        }
        catch (NegativeArraySizeException exc1) {
            for (i3 = 12; i3 < 244; ++i3) {
                i4 = sMeth(Test.instanceCount, bFld, -59660);
                i16 = 1;
                while (++i16 < 7) {
                    Test.fFld = i1;
                    iArr[(-6 >>> 1) % N] += i4;
                    for (i17 = 1; i17 < 1; i17 += 3) {
                        l |= i2;
                        i18 >>>= (int)Test.instanceCount;
                        iArr[i3] = (int)dFld;
                        i4 *= -127;
                        iArr[i17 - 1] |= i16;
                        Test.instanceCount += (i17 + i4);
                    }
                }
            }
        }
        long meth_res = i1 + l + i2 + i3 + i4 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=52338, i19=6, i20=-8, i22=-11, i23=54160, i24=177, i25=-218, i26=29513;
        byte by=-121;
        float f1=1.316F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 153L);

        i *= (int)fMeth(-1973, Test.instanceCount, i);
        lArr[(i >>> 1) % N] >>= i;
        Test.instanceCount += (long)dFld;
        for (i19 = 12; i19 < 364; i19++) {
            i &= (int)Test.instanceCount;
            Test.fFld *= Test.instanceCount;
            i20 = (int)Test.instanceCount;
            i += (((i19 * i20) + i20) - i);
            Test.instanceCount = by;
        }
        f1 = 1;
        while (++f1 < 380) {
            int i21=3;
            if (bFld) {
                i21 += (int)(((f1 * Test.fFld) + i21) - Test.instanceCount);
                i20 += (int)f1;
                for (i22 = (int)(f1); i22 < 66; i22++) {
                    by = (byte)i;
                    for (i24 = 1; i24 < 1; i24++) {
                        Test.instanceCount += i24;
                        Test.fFld = 16;
                        iArrFld[i24 + 1] = (int)1.260F;
                    }
                    i26 = 1;
                    do {
                        long l3=2155830806L;
                        i25 -= (int)Test.fFld;
                        by += (byte)i;
                        Test.instanceCount += (((i26 * f1) + Test.instanceCount) - i22);
                        dFld = Test.instanceCount;
                        i21 = i21;
                        l3 += (i26 | l3);
                        Test.instanceCount >>= by;
                    } while (++i26 < 1);
                    i20 = (int)Test.instanceCount;
                }
                i25 = i21;
            } else {
                lArr[(int)(f1)] = Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  sMeth ->  sMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
