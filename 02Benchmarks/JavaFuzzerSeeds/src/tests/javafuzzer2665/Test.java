package tests.javafuzzer2665;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:19:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1124927429L;
    public static short sFld=16728;
    public float fFld=-115.618F;
    public byte byFld=95;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -108L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth1(int i4) {


        Test.instanceCount = (-Math.min(i4, i4 / (i4 | 1)));
        i4 = (int)Test.instanceCount;
        long meth_res = i4;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6, int i7) {

        float f2=-87.714F;
        boolean b1=true;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -99);

        if (b1) {
            i6 %= (int)(i6 | 1);
            i6 >>= 1;
            Test.instanceCount = (long)f2;
            i7 = i6;
        }
        iArr1[(i7 >>> 1) % N] -= (int)-8166436909758101109L;
        Test.instanceCount += Test.sFld;
        i7 += i6;
        i7 >>= (int)Test.instanceCount;
        vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(float f1, long l1, boolean b) {

        int i8=-12, i9=-145, i10=20498, i11=-18413, i12=-9, i13=99, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 43);

        vMeth1(i8, i8);
        for (i9 = 18; 339 > i9; ++i9) {
            i11 = 1;
            do {
                iArr2[i11 - 1] = i8;
                for (i12 = 1; 1 > i12; i12 += 2) {
                    i13 = i9;
                    i13 += i12;
                    f1 += i12;
                    l1 <<= i12;
                    Test.instanceCount = Test.sFld;
                    if (b) {
                        l1 = (long)f1;
                        i8 += i12;
                        b = b;
                    } else {
                        if (b) continue;
                    }
                }
            } while (++i11 < 5);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + l1 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        double d=0.106921;
        int i2=-1, i3=0, i5=24554, i14=8, i15=207, iArr[]=new int[N];
        float f=0.517F, fArr[]=new float[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 27753L);
        FuzzerUtils.init(iArr, 15980);
        FuzzerUtils.init(fArr, 120.232F);

        d += d;
        for (i2 = 166; 7 < i2; --i2) {
            lArr[i2 - 1] = i3;
            f *= (float)-2.103333;
            iMeth1(i3);
            i5 = 1;
            do {
                i3 = (iMeth1((int)(i2 + f)) + (iArr[i2]--));
                i3 -= (int)(fArr[i2 - 1]++);
                vMeth(f, Test.instanceCount, b2);
                Test.instanceCount += i3;
                i3 = (int)Test.instanceCount;
                if (false) {
                    for (i14 = 1; i14 < 1; ++i14) {
                        try {
                            iArr[i2 - 1] = (240 / i15);
                            i15 = (i3 % -381553886);
                            i3 = (i14 / i3);
                        } catch (ArithmeticException a_e) {}
                        iArr[i14 - 1] = i2;
                    }
                } else if (b2) {
                    iArr[i5 + 1] *= i3;
                }
            } while (++i5 < 10);
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f) + i5 + (b2 ? 1 : 0) + i14 + i15
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=45823, i16=-180, i17=-65242, i18=161, i19=0, i20=4, i21=8, i22=-137;
        long l=8634506277014589766L, l2=7L;
        double d1=-111.111777;
        boolean b3=true;

        iArrFld[(i >>> 1) % N] *= (i++);
        for (l = 23; l < 368; l++) {
            iArrFld[(int)(l)] = iMeth();
            d1 += Test.instanceCount;
        }
        for (i16 = 3; i16 < 297; i16++) {
            i18 = 86;
            do {
                i += (i18 | Test.instanceCount);
                for (i19 = 1; 1 > i19; ++i19) {
                    Test.instanceCount %= (i17 | 1);
                    iArrFld[i19 + 1] += (int)2.429F;
                    l2 *= l2;
                    Test.instanceCount = i1;
                    if (b3) {
                        fFld += i19;
                        d1 -= i1;
                        byFld += (byte)(((i19 * i1) + Test.sFld) - i18);
                        i += (33548 + (i19 * i19));
                    }
                }
                i20 += (int)Test.instanceCount;
                fArrFld[i16] *= i17;
                byFld += (byte)d1;
                i = (int)-107.814F;
                i += 40475;
                i &= i19;
                for (i21 = 1; i21 < 1; i21++) {
                    Test.lArrFld[i18 + 1] = Test.instanceCount;
                    i = (int)l;
                }
            } while (--i18 > 0);
            Test.sFld += (short)Test.instanceCount;
            i17 += i16;
            i1 -= i21;
            i1 = 8;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
