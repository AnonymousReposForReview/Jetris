package tests.javafuzzer998;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:48:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-91L;
    public static int iFld=-34195;
    public double dFld=-39.81598;
    public static short sFld=5800;
    public static volatile double dFld1=1.29160;
    public static float fFld=1.574F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -9186646335438131915L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i) {

        boolean b=true;
        int i2=3, i3=52, i4=78;
        float f1=0.427F, f2=-1.692F;

        Test.instanceCount = Test.iFld;
        for (long l : Test.lArrFld) {
            double d=0.11244;
            int i1=26;
            l -= Test.instanceCount;
            d = -32.771F;
            Test.iFld -= i1;
            switch ((((i1 >>> 1) % 6) * 5) + 49) {
            case 78:
                b = b;
                break;
            case 72:
                d -= i1;
                for (i2 = 1; i2 < 4; ++i2) {
                    i3 = Test.sFld;
                    Test.sFld <<= (short)i1;
                    for (f1 = 2; f1 > 1; f1--) {
                        Test.iFld += (int)f1;
                        i -= i3;
                        Test.sFld += (short)((long)f1 ^ Test.instanceCount);
                    }
                }
            case 58:
                f2 = Test.iFld;
            case 61:
                Test.instanceCount += i2;
                break;
            case 57:
                l |= i4;
                break;
            case 56:
                i4 *= (int)385878132747345376L;
                break;
            }
        }
        long meth_res = i + (b ? 1 : 0) + i2 + i3 + Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1() {

        short s=-6903;
        int i5=55733, i6=-97, i7=13, iArr1[]=new int[N];
        double d1=1.22757, d2=8.120443, d3=2.40707;

        FuzzerUtils.init(iArr1, 42515);

        s = (short)((-59121 * byMeth(Test.iFld)) - Test.dFld1);
        i5 -= (int)Test.instanceCount;
        Test.iFld += 10;
        d1 = 1;
        do {
            for (d2 = 1; d2 < 6; ++d2) {
                Test.instanceCount = (long)Test.dFld1;
                Test.dFld1 += Test.instanceCount;
                iArr1[(int)(d1 + 1)] = (int)Test.instanceCount;
                for (d3 = 1; 2 > d3; d3 += 2) {
                    i5 >>= Test.iFld;
                    iArr1[(int)(d1 + 1)] &= Test.iFld;
                }
                Test.iFld = (int)d1;
                i5 *= i6;
            }
            Test.lArrFld = Test.lArrFld;
            Test.instanceCount <<= Test.iFld;
        } while (++d1 < 282);
        vMeth1_check_sum += s + i5 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i6 +
            Double.doubleToLongBits(d3) + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(float f) {

        double d4=-112.76550;
        int i8=-9, i9=228, i10=-58963, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 79);

        Test.instanceCount >>= Test.iFld;
        iArr[(Test.iFld >>> 1) % N] >>= (int)((dFld + Test.iFld) + Test.instanceCount);
        vMeth1();
        for (d4 = 2; 152 > d4; d4++) {
            i9 = 1;
            while (++i9 < 11) {
                Test.dFld1 = f;
                i8 = (int)f;
                Test.lArrFld = Test.lArrFld;
                switch ((int)(((d4 % 5) * 5) + 112)) {
                case 126:
                    Test.instanceCount += (i9 * i9);
                    Test.iFld += (int)-1.73869;
                    break;
                case 121:
                    Test.instanceCount -= (long)d4;
                    i10 = 1;
                    do {
                        Test.iFld += (int)-117.956F;
                        Test.iFld *= (int)Test.instanceCount;
                    } while ((i10 -= 3) > 0);
                    break;
                case 128:
                    if (i10 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d4) + i8 + i9 + i10 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                case 122:
                    i8 += (((i9 * Test.instanceCount) + i10) - Test.sFld);
                case 135:
                    if (true) continue;
                    break;
                default:
                    Test.iFld *= (int)d4;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d4) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i11=-1, i12=-21430, i13=4, i14=-25748, i15=31829, i16=14, i17=-3212, i18=-8, i19=15, iArr2[]=new int[N],
            iArr3[]=new int[N];
        byte by=-60, byArr[][]=new byte[N][N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, 249);
        FuzzerUtils.init(iArr3, -42);
        FuzzerUtils.init(byArr, (byte)-127);

        vMeth(0.123F);
        for (i11 = 17; i11 < 368; i11++) {
            iArr2 = iArr2;
            i13 = 1;
            do {
                Test.instanceCount += i12;
                i12 -= i12;
            } while (++i13 < 72);
            Test.instanceCount += (i11 * i11);
            Test.iFld += (i11 | Test.instanceCount);
            Test.instanceCount = i12;
            for (i14 = i11; 72 > i14; i14++) {
                Test.iFld *= by;
                Test.iFld -= (int)1L;
                for (i16 = 1; i16 > 1; i16 -= 3) {
                    if (b1) break;
                    iArr2 = iArr2;
                    b1 = true;
                    Test.iFld = 4;
                    iArr3 = iArr3;
                    Test.dFld1 = Test.fFld;
                    if (b1) continue;
                    iArr2[i16 - 1] += 6;
                    i12 -= (int)Test.instanceCount;
                    if (b1) continue;
                }
                byArr[i14 - 1] = byArr[i11 - 1];
                i17 = (int)21748L;
                byArr[i11 - 1][i14] = (byte)i16;
            }
            for (i18 = 4; i18 < 72; ++i18) {
                iArr3[i18 - 1] = Test.iFld;
                Test.instanceCount += (77 + (i18 * i18));
                Test.lArrFld[i18] = (long)-17.580F;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
