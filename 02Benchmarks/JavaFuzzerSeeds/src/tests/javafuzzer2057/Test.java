package tests.javafuzzer2057;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:12:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public volatile int iFld=-9;
    public static double dFld=-2.119801;
    public static volatile short sFld=24629;
    public static byte byFld=82;
    public static float fFld=2.817F;
    public static short sFld1=6982;
    public static long lFld=-53668L;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, 35118559318258267L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s) {

        int i5=-8;
        boolean b1=true;

        i5 = i5;
        Test.dFld -= i5;
        i5 -= i5;
        i5 += i5;
        Test.instanceCount <<= i5;
        i5 >>>= i5;
        b1 = b1;
        s = (short)Test.instanceCount;
        vMeth2_check_sum += s + i5 + (b1 ? 1 : 0);
    }

    public static void vMeth1(int i2) {

        int i3=-10311, i4=6147, i6=-64, i7=27, i8=180, i9=-162;

        for (i3 = 1; i3 < 269; ++i3) {
            vMeth2(Test.sFld);
            for (i6 = 1; i6 < 6; ++i6) {
                i2 += i2;
                for (i8 = 1; i8 < 2; i8++) {
                    float f=-1.902F;
                    i4 <<= i2;
                    i7 >>= 6;
                    i9 ^= i8;
                    i9 = i4;
                    Test.iArrFld[i8 - 1] <<= i4;
                    i9 -= i3;
                    Test.instanceCount += -205;
                    Test.instanceCount -= (long)f;
                    Test.lArrFld[i8] >>>= i2;
                }
                Test.iArrFld[i6] = i9;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i6 + i7 + i8 + i9;
    }

    public static void vMeth(int i, long l, int i1) {

        int i10=7, i11=-199, i12=-10, i13=-7;
        float f1=-1.426F, fArr[]=new float[N];
        boolean b2=true;

        FuzzerUtils.init(fArr, 0.161F);

        i1 = i1;
        vMeth1(i1);
        l = i;
        Test.dFld -= i;
        for (i10 = 9; i10 < 161; ++i10) {
            switch ((((i >>> 1) % 10) * 5) + 22) {
            case 28:
                i1 &= -10096;
                break;
            case 44:
                i11 <<= (int)44302L;
                for (i12 = i10; 10 > i12; i12++) {
                    i11 -= i10;
                }
                switch (((i12 >>> 1) % 4) + 68) {
                case 68:
                    if (false) break;
                    fArr = fArr;
                    break;
                case 69:
                    Test.instanceCount = -2767438978034058163L;
                    i13 += (int)l;
                    break;
                case 70:
                    i13 ^= 72;
                    break;
                case 71:
                    f1 = i13;
                    break;
                default:
                    Test.instanceCount += (((i10 * l) + i11) - i11);
                }
                break;
            case 30:
                if (b2) continue;
                break;
            case 57:
                i1 += i;
                break;
            case 39:
                i += (63803 + (i10 * i10));
                break;
            case 68:
                i13 += (((i10 * l) + Test.sFld) - i13);
            case 70:
                i += (int)Test.instanceCount;
                break;
            case 56:
                Test.byFld += (byte)53619L;
            case 61:
                Test.iArrFld[i10 + 1] ^= i10;
            case 43:
                l += (-4 + (i10 * i10));
                break;
            }
        }
        vMeth_check_sum += i + l + i1 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i14=6, i15=7, i16=154, i17=139, i18=-34804, i19=-69, i20=-5094, i21=-14883, i22=-24867;
        float f2=-1.399F;

        Test.bArrFld[(iFld >>> 1) % N] = (b = ((b && b) != b));
        vMeth(iFld, Test.instanceCount, iFld);
        b = b;
        Test.sFld += (short)Test.instanceCount;
        if (false) {
            Test.instanceCount |= i14;
        } else {
            try {
                Test.instanceCount *= iFld;
                Test.instanceCount = Test.instanceCount;
                for (i15 = 1; i15 < 350; ++i15) {
                    iFld += i15;
                    i17 = 1;
                    while (++i17 < 72) {
                        if (b) {
                            for (i18 = 1; 1 < i18; i18--) {
                                Test.sFld = (short)i18;
                                Test.instanceCount |= -13L;
                                Test.fFld += Test.instanceCount;
                                Test.instanceCount = i16;
                                Test.iArrFld[i17 - 1] = Test.sFld;
                                Test.instanceCount &= 2580701052L;
                                Test.fFld += (i18 * i14);
                            }
                        } else {
                            for (f2 = 1; f2 < 1; ++f2) {
                                Test.iArrFld = Test.iArrFld;
                                Test.sFld1 += (short)f2;
                                iFld = (int)-208L;
                            }
                            for (i21 = 1; i21 > 1; i21--) {
                                iFld = i22;
                                b = true;
                                Test.instanceCount -= i18;
                                Test.sFld <<= (short)i17;
                            }
                        }
                    }
                }
            }
            catch (NegativeArraySizeException exc2) {
                Test.lFld *= (long)Test.fFld;
            }
            finally {
                Test.byFld = (byte)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
