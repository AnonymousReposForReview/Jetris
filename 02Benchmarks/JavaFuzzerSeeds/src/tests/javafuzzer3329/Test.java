package tests.javafuzzer3329;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:16:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public static int iFld=173;
    public short sFld=-18521;
    public double dFld=-8.72712;
    public static int iFld1=-10;
    public float fFld=91.304F;
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f, int i7, int i8) {

        int i9=51957, i10=200, i11=291, i12=-245, i13=-19799, i14=-83, i15=-7;
        byte by=-75;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -9.126874);

        i9 = 1;
        while (++i9 < 165) {
            for (i10 = 1; i10 < 10; i10 += 3) {
                for (i12 = i10; i12 < 4; i12++) {
                    i11 += (((i12 * Test.instanceCount) + i12) - Test.instanceCount);
                    i7 <<= by;
                    if (i12 != 0) {
                    }
                    i8 ^= i10;
                    dArr1[i12 + 1] *= i13;
                    by -= (byte)i12;
                    if (i8 != 0) {
                    }
                }
                for (i14 = 1; i14 < 4; i14++) {
                    f = i9;
                    i13 += (i14 | Test.instanceCount);
                    i13 = Test.iFld;
                    i8 = i13;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        float f1=30.39F, fArr[]=new float[N];
        int i16=-214, i17=-14, i18=59590, iArr1[]=new int[N];
        double d=35.76633, d1=-88.12103, dArr2[]=new double[N];
        short s=6010;
        boolean b=false;
        byte by1=57;

        FuzzerUtils.init(iArr1, 12294);
        FuzzerUtils.init(dArr2, -2.61449);
        FuzzerUtils.init(fArr, 0.451F);

        Test.instanceCount += (-lMeth(f1, Test.iFld, Test.iFld));
        i6 >>= i4;
        i6 >>>= (int)-4260918880L;
        switch ((((i5 >>> 1) % 10) * 5) + 36) {
        case 85:
            i16 = 1;
            do {
                d = 1;
                while (++d < 7) {
                    for (i17 = 1; i17 < 1; i17++) {
                        s >>>= (short)i17;
                        switch (((i6 >>> 1) % 9) + 125) {
                        case 125:
                            Test.instanceCount = -9940L;
                            iArr1[i16] += (int)f1;
                            if (b) {
                                iArr1[(int)(d)] += 5;
                                Test.iFld += (int)1.779F;
                                i18 <<= i5;
                            }
                        case 126:
                            dArr2[(int)(d - 1)] = by1;
                        case 127:
                            s -= (short)i4;
                            break;
                        case 128:
                            i18 += i17;
                            break;
                        case 129:
                            i5 += (i17 ^ (long)f1);
                            break;
                        case 130:
                            d1 = d;
                            break;
                        case 131:
                            Test.instanceCount >>>= i16;
                        case 132:
                            d1 -= s;
                            break;
                        case 133:
                        default:
                            iArr1[i16 - 1] *= (int)d;
                        }
                    }
                }
            } while (++i16 < 230);
        case 49:
            f1 = -16375L;
            break;
        case 45:
            i18 -= i6;
            break;
        case 86:
            fArr[(i6 >>> 1) % N] = Test.instanceCount;
            break;
        case 43:
            i18 *= i4;
            break;
        case 83:
        case 74:
            i5 = i17;
        case 54:
            i6 <<= 54849;
            break;
        case 50:
            Test.instanceCount = -2;
            break;
        case 60:
            dArr2[(Test.iFld >>> 1) % N] *= Test.instanceCount;
            break;
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f1) + i16 + Double.doubleToLongBits(d) + i17 + i18 + s + (b
            ? 1 : 0) + by1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=-210, i19=-55956, i20=-101, i21=-52559, iArr[]=new int[N];
        float f2=94.493F;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 29691);
        FuzzerUtils.init(dArr, -52.61290);

        iArr = (iArr = iArr);
        i3 = 1;
        do {
            dArr[i3 - 1] -= (iArr[i3 + 1] >>> iMeth(3, Test.iFld, i1));
            for (i19 = 1; i19 < 8; ++i19) {
                i2 = 34331;
                Test.instanceCount += (i19 ^ i3);
                i ^= i3;
                i1 = i19;
            }
            i21 = 1;
            do {
                Test.instanceCount += i21;
                f2 -= -1;
            } while (++i21 < 8);
            i20 = Test.iFld;
        } while (++i3 < 204);
        Test.instanceCount = i2;
        iArr[(i >>> 1) % N] |= i2;
        b1 = b1;
        vMeth_check_sum += i + i1 + i2 + i3 + i19 + i20 + i21 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=0, i23=33, i24=4, i26=58513, i27=-48153, i28=-7, i29=-13, i30=11;
        boolean b2=true, bArr[]=new boolean[N];
        double d2=-64.63476;
        byte by2=-69;
        float fArr1[]=new float[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, -78.646F);

        vMeth(-46, 24057, Test.iFld);
        i22 = 1;
        while (++i22 < 217) {
            if (b2) break;
            for (i23 = i22; i23 < 116; ++i23) {
                int i25=-11;
                Test.instanceCount += (i23 ^ Test.instanceCount);
                i25 = i23;
                i24 |= i25;
                switch (((i23 % 10) * 5) + 112) {
                case 148:
                    lArrFld[i23 + 1] /= (i25 | 1);
                    i26 = 1;
                    do {
                        sFld -= (short)d2;
                        Test.iFld += (int)dFld;
                        Test.instanceCount &= by2;
                        i24 -= -2;
                        dFld += Test.instanceCount;
                        i24 += (int)Test.instanceCount;
                        iArrFld[i22] = i22;
                        if (b2) break;
                        Test.instanceCount = Test.iFld;
                    } while (++i26 < 1);
                    for (i27 = 1; i27 > 1; --i27) {
                        bArr[i22] = b2;
                        try {
                            Test.iFld1 = (44450 / i24);
                            iArrFld[i27] = (iArrFld[i27 - 1] / 1397159471);
                            iArrFld[i23 - 1] = (-17393 % i23);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.instanceCount = Test.iFld;
                case 159:
                    lArrFld[i22 + 1] = Test.iFld1;
                    Test.instanceCount *= i28;
                    i25 = i26;
                    for (i29 = 1; i29 > 1; i29--) {
                        lArrFld[i23] -= i24;
                        i28 += (233 + (i29 * i29));
                        Test.instanceCount -= i29;
                    }
                    break;
                case 151:
                    lArrFld[i23 - 1] = i23;
                    break;
                case 153:
                    i25 = 127;
                    break;
                case 124:
                    fArr1[i22] *= i30;
                    break;
                case 161:
                    fFld *= fFld;
                    break;
                case 117:
                    i28 >>= i26;
                    break;
                case 156:
                    iArrFld[i23 - 1] = i22;
                case 162:
                    i30 += -3;
                    break;
                case 131:
                    i25 >>= (int)-8383409274312916737L;
                default:
                    Test.instanceCount += 5487909314709758414L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
