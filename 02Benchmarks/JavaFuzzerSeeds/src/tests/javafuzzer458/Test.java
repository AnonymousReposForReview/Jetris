package tests.javafuzzer458;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:06:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4682318029683802891L;
    public byte byFld=79;
    public static volatile short sFld=-22341;
    public static volatile boolean bFld=true;
    public static byte byFld1=-83;
    public static volatile int iFld=-208;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.694F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=-38624, i5=-3, i6=-16634, i7=-100, i8=165, i9=60445, i10=13, i11=51, iArr1[]=new int[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 35.442F);
        FuzzerUtils.init(iArr1, -8);

        Test.bFld = Test.bFld;
        i4 %= (int)(i4 | 1);
        for (i5 = 9; 173 > i5; i5++) {
            i6 = i5;
            if (Test.bFld) continue;
            i6 += (((i5 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
        }
        Test.instanceCount ^= -13;
        i7 = 215;
        do {
            fArr[i7 + 1][i7 - 1] += -43106L;
            if (Test.bFld) {
                iArr1[i7] = i5;
                for (i8 = 7; i8 > 1; --i8) {
                    for (i10 = 1; i10 < 2; ++i10) {
                        Test.sFld = (short)5;
                        i9 <<= Test.sFld;
                    }
                }
            } else if (true) {
                Test.instanceCount += (206L + (i7 * i7));
            } else if (Test.bFld) {
                i9 += (i7 | i8);
            }
        } while (--i7 > 0);
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s) {

        int i12=1717, i13=-9, i14=-9, i15=-235, i16=2, i17=-53, iArr2[]=new int[N];
        float f=124.890F;
        double d1=2.128809, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.29504);
        FuzzerUtils.init(iArr2, 33228);

        lMeth();
        Test.instanceCount = i12;
        i12 -= Test.byFld1;
        for (i13 = 3; 345 > i13; i13++) {
            Test.instanceCount = Test.instanceCount;
            f += i13;
            Test.instanceCount = (long)d1;
            for (i15 = 1; i15 < 5; ++i15) {
                i17 = 1;
                while (++i17 < 2) {
                    i12 *= (int)-2978365349L;
                    Test.instanceCount = Test.instanceCount;
                    switch (((i17 >>> 1) % 4) + 102) {
                    case 102:
                        dArr[i17 + 1] += i16;
                        Test.iFld >>= i14;
                        break;
                    case 103:
                        iArr2[i13] = (int)d1;
                    case 104:
                    case 105:
                        d1 -= Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += s + i12 + i13 + i14 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i15 + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i18=-101, i19=-10;

        vMeth(Test.sFld);
        for (i18 = 9; i18 < 167; i18++) {
            i1 = -11;
        }
        long meth_res = i1 + i2 + i3 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-39101, i20=-6, i21=63, i22=165, i23=-6, iArr[]=new int[N];
        double d=0.49491;
        float f1=20.428F;
        long l=-127L, lArr[][]=new long[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(sArr, (short)18173);
        FuzzerUtils.init(lArr, -41L);

        iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)93))));
        i += (((i << 7) + i) - i);
        i >>= (int)(((byFld + d) - i) * ((5 - (Test.instanceCount + Test.sFld)) - (i + i)));
        i >>= (int)(d + (d--));
        i *= (((i - i) + sArr[(i >>> 1) % N]) + iMeth(i, Test.iFld, i));
        d = Test.byFld1;
        Test.sFld %= (short)(Test.byFld1 | 1);
        i = (int)-136L;
        iArr[(-4540 >>> 1) % N] *= Test.iFld;
        switch (((-14 >>> 1) % 3) + 60) {
        case 60:
            lArr[(Test.iFld >>> 1) % N] = lArr[(Test.iFld >>> 1) % N];
            Test.iFld = (int)d;
            break;
        case 61:
            f1 -= -5;
            Test.iFld += 133;
            iArr[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
            if (Test.bFld) {
                i = (int)Test.instanceCount;
                for (i20 = 7; i20 < 172; ++i20) {
                    i21 += Test.sFld;
                    i22 = 1;
                    do {
                        iArr[i20 - 1] *= i;
                        Test.fArrFld = Test.fArrFld;
                        d *= i22;
                        for (l = 1; 1 > l; ++l) {
                            i23 += (int)(l * Test.instanceCount);
                            lArr[i22 - 1][i20] <<= Test.sFld;
                            i |= -13047;
                            Test.instanceCount += (long)f1;
                        }
                        iArr[i20] >>= Test.sFld;
                        Test.instanceCount += (i22 - i22);
                    } while (++i22 < 152);
                }
            } else if (Test.bFld) {
                Test.iFld += (int)l;
            } else {
                iArr[(i23 >>> 1) % N] = i22;
            }
        case 62:
            f1 -= (float)d;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
