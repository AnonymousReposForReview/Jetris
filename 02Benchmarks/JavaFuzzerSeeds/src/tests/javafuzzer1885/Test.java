package tests.javafuzzer1885;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:22:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2444901723L;
    public static double dFld=0.85830;
    public static short sFld=-12399;
    public byte byFld=84;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -58342);
        FuzzerUtils.init(Test.fArrFld, -120.50F);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        int i8=2, i9=-11395, i10=0, i11=-11053, i12=8, i13=-12, i14=90;
        short s=1588;
        float f=-1.129F, f1=51.716F;
        byte by1=-90;

        for (i8 = 8; 390 > i8; ++i8) {
            i7 = (int)Test.instanceCount;
            i7 = -56;
            for (i10 = i8; i10 < 4; i10++) {
                Test.instanceCount -= i8;
                i11 += (((i10 * i8) + s) - Test.instanceCount);
                f = i8;
                i11 ^= i7;
                Test.iArrFld[i8 - 1] += (int)33746L;
            }
        }
        i12 = 1;
        while (++i12 < 170) {
            f += i8;
            i13 = 1;
            do {
                i14 = 1;
                do {
                    Test.iArrFld[i14 + 1] -= by1;
                    i9 = (int)f1;
                } while (++i14 < 1);
            } while (++i13 < 9);
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + s + Float.floatToIntBits(f) + i12 + i13 + i14 + by1 +
            Float.floatToIntBits(f1);
    }

    public static void vMeth(int i4, byte by) {

        int i5=41571, i6=-97, i15=-4, i16=21674, i17=-6, i18=-229;
        float f2=0.445F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -147L);

        for (i5 = 7; 345 > i5; i5++) {
            Test.iArrFld[i5 + 1] -= i6;
            vMeth1(i6);
            Test.instanceCount += i6;
            for (i15 = 1; i15 < 5; i15++) {
                i16 = i5;
                try {
                    i6 = (i16 / Test.iArrFld[i5]);
                    i4 = (i4 % i6);
                    i6 = (-94 % i5);
                } catch (ArithmeticException a_e) {}
                f2 += i5;
                Test.sFld = (short)i6;
                for (i17 = 1; i17 < 2; i17++) {
                    i16 = i16;
                    Test.instanceCount *= i5;
                    f2 *= i16;
                    lArr[i5][i15 - 1] *= Test.instanceCount;
                    i18 &= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i4 + by + i5 + i6 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 +
            FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth(int i1, int i2, int i3) {

        byte by2=30, byArr[]=new byte[N];
        int i19=-8, i20=211, i21=-42, i22=109, i23=-224, i24=-184, iArr[][]=new int[N][N];
        float f3=1.488F;
        boolean b=true;

        FuzzerUtils.init(iArr, -16495);
        FuzzerUtils.init(byArr, (byte)51);

        i2 += (++iArr[(i3 >>> 1) % N][(i3 >>> 1) % N]);
        vMeth(i2, by2);
        Test.iArrFld = iArr[(i3 >>> 1) % N];
        for (i19 = 9; i19 < 184; ++i19) {
            Test.instanceCount <<= i19;
            for (i21 = 9; 1 < i21; i21--) {
                f3 = (float)Test.dFld;
                b = b;
            }
            i2 = i20;
            i20 = (int)Test.dFld;
        }
        for (i23 = 17; i23 < 352; ++i23) {
            i24 *= i20;
            byArr[i23] += (byte)-37580;
            Test.iArrFld[i23] = i2;
            iArr[i23][i23] += (int)Test.instanceCount;
        }
        long meth_res = i1 + i2 + i3 + by2 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f3) + (b ? 1 : 0) + i23 + i24
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i25=-89, i26=198, i27=-33889, i28=-9, i29=1, i30=-60621, i31=253, i32=-110;
        float f4=101.397F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -228L);

        Test.instanceCount = (long)((i++) - ((Test.dFld - i) + (-38352 - dMeth(i, i, 50954))));
        for (i25 = 7; i25 < 151; ++i25) {
            Test.instanceCount += (i25 * i25);
            for (i27 = 9; 174 > i27; ++i27) {
                boolean b1=false;
                i = (int)f4;
                b1 = b1;
                i <<= (int)Test.instanceCount;
                i26 >>>= i;
                Test.instanceCount -= i28;
                Test.fArrFld[(i >>> 1) % N] -= 93;
                i29 = i25;
                switch ((i25 % 1) + 123) {
                case 123:
                    byFld += (byte)(((i27 * i) + f4) - i29);
                    if (b1) {
                        Test.fArrFld[i27 + 1] += Test.instanceCount;
                        i30 = 1;
                        do {
                            i += (i30 * i30);
                            i26 = 0;
                            i >>= i29;
                        } while (++i30 < 2);
                        Test.instanceCount = 62991;
                        i26 += (i27 | Test.sFld);
                    }
                    break;
                default:
                    i26 = i25;
                    for (i31 = 2; i25 < i31; i31 -= 2) {
                        lArr1 = lArr1;
                    }
                    Test.iArrFld[i27 + 1] -= byFld;
                }
                switch (((i25 % 5) * 5) + 61) {
                case 63:
                    i += (int)Test.dFld;
                    Test.instanceCount -= i32;
                    break;
                case 81:
                    Test.instanceCount += (((i27 * f4) + Test.instanceCount) - f4);
                    Test.instanceCount -= i28;
                    break;
                case 79:
                    i26 <<= i27;
                    break;
                case 85:
                case 78:
                    i26 += (((i27 * i26) + Test.instanceCount) - f4);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
