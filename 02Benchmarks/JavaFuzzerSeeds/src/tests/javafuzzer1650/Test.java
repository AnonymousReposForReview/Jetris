package tests.javafuzzer1650;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:47:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static int iFld=-154;
    public static double dFld=-114.68006;
    public static boolean bFld=false;
    public static int iFld1=-62;
    public byte byArrFld[][]=new byte[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.171F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -7);

        iArr[(Test.iFld >>> 1) % N] += (int)Test.dFld;
        long meth_res = FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        int i1=10234, i2=-3008, i3=-7301, i4=-180, i5=-26832, i6=-12;
        float f=0.434F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -105.1000F);

        for (i1 = 5; i1 < 133; ++i1) {
            for (i3 = 12; i3 > 1; --i3) {
                for (i5 = i3; i5 < 2; i5++) {
                    i2 = (--i2);
                    Test.instanceCount += (((i5 * i4) + i4) - i1);
                    i6 = (int)lMeth();
                    i *= Test.iFld;
                    i2 = i5;
                    i4 = i;
                    i2 = (int)-8213800315939288645L;
                    f += ((long)i5 ^ (long)Test.instanceCount);
                    i = i;
                }
                Test.instanceCount *= (long)1.62250;
            }
            fArr[i1 + 1] = f;
            i2 = (int)Test.instanceCount;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {


        vMeth(-4);
        Test.iFld = Test.iFld;
        Test.iFld -= Test.iFld;
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i7=2242, i8=13, i9=12, i10=-9495, i11=34, iArr1[]=new int[N];
        float f1=-2.968F;
        long l=-59806L, lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -13726);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -19L);

        Test.iFld *= (-iMeth());
        for (i7 = 17; i7 < 349; ++i7) {
            byArrFld = byArrFld;
            for (i9 = 3; i9 < 76; ++i9) {
                Test.iFld += i9;
                iArr1 = iArr1;
                i10 += i8;
                f1 += (float)0.114741;
                f1 -= Test.iFld;
                i11 = 1;
                do {
                    switch (((i9 >>> 1) % 8) + 74) {
                    case 74:
                        if (true) break;
                        try {
                            Test.iFld = (i10 / i10);
                            iArr1[i11] = (42449 % i9);
                            i10 = (7852 / i9);
                        } catch (ArithmeticException a_e) {}
                        try {
                            iArr1[i7] = (i8 / iArr1[i9 - 1]);
                            i10 = (i8 % i11);
                            i10 = (i11 % -38778);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld <<= (int)l;
                        break;
                    case 75:
                        Test.bFld = Test.bFld;
                        Test.fArrFld[i9 + 1] += -79;
                    case 76:
                        iArr1[i11] -= i11;
                        break;
                    case 77:
                        i10 = (int)f1;
                        break;
                    case 78:
                        bArr = bArr;
                        iArr1[i7 + 1] = i10;
                        f1 -= Test.iFld1;
                        break;
                    case 79:
                        Test.iFld = (int)f1;
                        f1 += (((i11 * i8) + Test.instanceCount) - i9);
                        break;
                    case 80:
                        lArr[i11 - 1] = i11;
                        Test.fArrFld[i7 + 1] = i11;
                        Test.iFld1 -= i8;
                        break;
                    case 81:
                        i8 -= 218;
                        break;
                    }
                    if (Test.bFld) continue;
                    i10 += i9;
                } while (++i11 < 2);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
