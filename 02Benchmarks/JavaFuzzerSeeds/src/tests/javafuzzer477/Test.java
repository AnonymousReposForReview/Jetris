package tests.javafuzzer477;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:32:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=193;
    public static volatile double dFld=-55.12913;
    public static boolean bFld=true;
    public byte byFld=104;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 777855713L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2) {

        int i5=50773;

        i5 = 1;
        do {
            Test.iFld += -207;
        } while (++i5 < 131);
        Test.iFld = (int)l2;
        vMeth_check_sum += l2 + i5;
    }

    public static boolean bMeth(long l1, int i1, int i2) {

        int i3=7, i4=49527, i6=11, i7=-88, i8=-6676, i9=-137, iArr[]=new int[N];
        float f=-60.564F, fArr[][]=new float[N][N];
        short s=24475;

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(fArr, 127.136F);

        for (i3 = 12; i3 < 287; ++i3) {
            l1 -= Math.max(iArr[i3], (int)(f + (--i2)));
            vMeth(Test.instanceCount);
            s = (short)-12068;
            if (Test.bFld) {
                try {
                    i4 = (iArr[i3 - 1] % -169);
                    Test.iFld = (Test.iFld / -59815);
                    i2 = (i1 % -24509);
                } catch (ArithmeticException a_e) {}
                i4 *= i2;
            } else if (Test.bFld) {
                iArr = iArr;
                l1 += i3;
                for (i6 = 1; i6 < 6; i6++) {
                    for (i8 = 2; i8 > i3; i8 -= 2) {
                        Test.iFld += i9;
                        i9 <<= -244;
                        s -= (short)i2;
                        i7 = (int)Test.dFld;
                    }
                }
            } else if (Test.bFld) {
                fArr[i3 + 1][(i1 >>> 1) % N] += i7;
            } else {
                i4 *= i6;
            }
        }
        long meth_res = l1 + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + s + i6 + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vSmallMeth(int i, long l) {


        bMeth(Test.instanceCount, i, i);
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        int i10=-2, i11=0, i12=11, i13=12, i14=69, i15=38353;
        float f1=-90.245F;
        double d=-105.69707;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.instanceCount -= ((Test.instanceCount = (-Test.instanceCount)) * (--iArrFld[(Test.iFld >>> 1) % N]));
        for (int smallinvoc=0; smallinvoc<262; smallinvoc++) vSmallMeth(22518, -3781825097L);
        for (i10 = 16; i10 < 350; ++i10) {
            if (Test.bFld) continue;
            switch ((((Test.iFld >>> 1) % 2) * 5) + 50) {
            case 55:
                switch ((i10 % 8) + 9) {
                case 9:
                    f1 = i11;
                    Test.iFld = (int)Test.instanceCount;
                    switch (((26290 >>> 1) % 1) + 82) {
                    case 82:
                        for (d = 1; d < 75; ++d) {
                            i11 = Test.iFld;
                        }
                        bArr[i10 + 1] = true;
                        i13 = 1;
                        do {
                            short s1=5288;
                            Test.iFld = i11;
                            Test.iFld += (-47054 + (i13 * i13));
                            i12 *= (int)d;
                            Test.iFld %= (int)(i13 | 1);
                            Test.instanceCount ^= i14;
                            i11 -= s1;
                            if (true) continue;
                            Test.iFld += i10;
                            s1 += (short)(7 + (i13 * i13));
                        } while (++i13 < 75);
                        break;
                    default:
                        i12 = i10;
                        i15 = 1;
                        do {
                            switch ((i15 % 5) + 68) {
                            case 68:
                                Test.iFld += (((i15 * i11) + i14) - i12);
                                break;
                            case 69:
                                Test.instanceCount = byFld;
                                iArrFld[i15 + 1] = (int)-2590820515034406417L;
                                i11 = i15;
                                i14 -= i12;
                                break;
                            case 70:
                                i12 += (i15 * i15);
                                break;
                            case 71:
                                Test.dFld += i13;
                            case 72:
                                f1 += (((i15 * i14) + Test.iFld) - i15);
                            default:
                                Test.lArrFld[i15 + 1] -= Test.iFld;
                            }
                        } while (++i15 < 75);
                    }
                    break;
                case 10:
                    i11 *= (int)Test.instanceCount;
                    break;
                case 11:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 12:
                    f1 += i10;
                    break;
                case 13:
                    Test.dFld = i13;
                    break;
                case 14:
                    i14 += (i10 * i10);
                    break;
                case 15:
                    i11 -= byFld;
                case 16:
                    Test.iFld >>= (int)Test.instanceCount;
                default:
                    Test.instanceCount &= i15;
                }
            case 51:
                i14 *= i10;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth bMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
