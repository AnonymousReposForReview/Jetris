package tests.javafuzzer2554;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:28:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-928733133L;
    public float fFld=1.685F;
    public static boolean bFld=true;
    public static byte byFld=-48;
    public static volatile int iFld=-215;
    public static short sFld=10577;
    public static boolean bFld1=true;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 126.26081);
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.sArrFld, (short)24958);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5) {

        int i6=185, i7=-7420, i8=-13, i9=12;
        byte by=-103;
        float f1=57.145F, fArr[]=new float[N];
        double d1=2.13191;
        long l2=5L;

        FuzzerUtils.init(fArr, -46.629F);

        Test.bFld = Test.bFld;
        i6 = 1;
        do {
            i5 = i6;
            i5 = i5;
            by -= (byte)i5;
            f1 = i5;
            for (d1 = 1; d1 < 5; ++d1) {
                for (i8 = 1; i8 < 2; i8++) {
                    Test.iArrFld[i8] += i7;
                    switch (((i8 % 10) * 5) + 117) {
                    case 133:
                        i7 *= i6;
                        fArr[i6 + 1] += 20914;
                        f1 = i7;
                        break;
                    case 150:
                        i5 += i8;
                        Test.instanceCount <<= Test.instanceCount;
                        break;
                    case 127:
                        Test.instanceCount = i9;
                        break;
                    case 131:
                        Test.instanceCount -= 180;
                        break;
                    case 148:
                        l2 = by;
                        break;
                    case 163:
                        i9 = i5;
                        break;
                    case 152:
                        Test.iArrFld[i6] = (int)l2;
                    case 149:
                        if (Test.bFld) continue;
                    case 145:
                        i5 += by;
                    case 128:
                        i5 = i9;
                    default:
                        Test.iArrFld[i8] -= (int)f1;
                    }
                }
            }
        } while (++i6 < 353);
        vMeth_check_sum += i5 + i6 + by + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i7 + i8 + i9 + l2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static short sMeth(int i4, long l1) {

        int i10=-20295, i11=-16087, i12=246, i13=17, i14=-7, i15=38, i16=-1;
        float f2=0.630F;
        double d2=13.16116;

        vMeth(i4);
        Test.instanceCount <<= i4;
        for (i10 = 10; i10 < 219; i10++) {
            for (i12 = i10; i12 < 8; ++i12) {
                switch ((i12 % 10) + 109) {
                case 109:
                    Test.instanceCount += (i12 * i12);
                    break;
                case 110:
                    if (Test.bFld) continue;
                    i11 = (int)Test.instanceCount;
                    l1 += (((i12 * i12) + f2) - i4);
                    Test.dArrFld[i10] = i10;
                    break;
                case 111:
                    for (i14 = 1; i14 < 1; i14 += 3) {
                        d2 = f2;
                        try {
                            i16 = (-62521 / i12);
                            i11 = (-102 / Test.iArrFld[i14]);
                            i4 = (30 % i13);
                        } catch (ArithmeticException a_e) {}
                        i11 -= i14;
                        Test.iArrFld[i10] += -12276;
                    }
                    break;
                case 112:
                    if (i13 != 0) {
                    }
                    break;
                case 113:
                    i4 = (int)Test.instanceCount;
                    break;
                case 114:
                    i11 += (i12 - i14);
                    break;
                case 115:
                    d2 -= Test.byFld;
                case 116:
                    i16 = Test.iFld;
                    break;
                case 117:
                    i16 += (((i12 * i15) + i10) - i10);
                case 118:
                    Test.sFld += (short)6;
                    break;
                default:
                    if (i16 != 0) {
                    }
                }
            }
        }
        long meth_res = i4 + l1 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 +
            Double.doubleToLongBits(d2) + i16;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(long l) {

        int i1=-50967, i2=-13, i3=-94;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4L);

        Test.iArrFld[(i1 >>> 1) % N] -= ((-Math.min(i1, i1)) - (i1 = Math.abs(i1)));
        for (i2 = 5; i2 < 190; i2++) {
            float f=-112.270F;
            lArr[i2] = (long)(53288 * ((f -= 48648) - Math.abs(-31L)));
            i1 -= (int)((--i3) + ((59959 / ((i3 - i1) | 1)) + 2L));
            i1 = (int)((-(i2 + f)) - ((-sMeth(i2, l)) * Test.instanceCount));
        }
        long meth_res = l + i1 + i2 + i3 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=10, i18=239, i19=56704, i20=-6153, i21=-13, i22=12, i23=-17307;
        byte by1=-109;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7L);

        for (double d : Test.dArrFld) {
            int i=10;
            i = (i + (-(i += 152)));
            fFld *= (i + iMeth(-1374941155L));
            for (i17 = 2; i17 < 63; ++i17) {
                Test.dArrFld[i17] *= fFld;
                i18 += i17;
                i19 = 1;
                while (++i19 < 2) {
                    d -= -47.1009F;
                    d += Test.instanceCount;
                    Test.iArrFld[i19 + 1] = Test.iFld;
                }
                lArr1[i17 - 1] -= Test.iFld;
            }
            i = (int)Test.instanceCount;
            for (i20 = 1; i20 < 63; ++i20) {
                Test.instanceCount += (((i20 * i) + Test.instanceCount) - Test.iFld);
                switch (((i21 >>> 1) % 8) + 66) {
                case 66:
                    switch (((-231 >>> 1) % 8) + 94) {
                    case 94:
                        if (Test.bFld1) break;
                        Test.iFld *= -93;
                        Test.sFld -= (short)i21;
                    case 95:
                        i18 += 135;
                        break;
                    case 96:
                        switch ((i20 % 2) + 69) {
                        case 69:
                            i >>= i19;
                            Test.iFld = Test.iFld;
                            break;
                        case 70:
                            for (i22 = 1; i22 < 2; i22++) {
                                Test.instanceCount = i20;
                                i18 += (int)Test.instanceCount;
                                Test.instanceCount += (i22 * i22);
                            }
                            break;
                        default:
                            i18 >>>= i17;
                            Test.sArrFld[i20 - 1] += (short)Test.instanceCount;
                            Test.instanceCount -= (long)d;
                        }
                    case 97:
                        i18 += i20;
                        break;
                    case 98:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 99:
                        i21 = i19;
                    case 100:
                        Test.iArrFld[i20 - 1] = (int)fFld;
                        break;
                    case 101:
                        i18 = (int)-775398201L;
                        break;
                    default:
                        i *= i22;
                    }
                    break;
                case 67:
                    by1 *= (byte)i17;
                    break;
                case 68:
                case 69:
                    i23 ^= (int)Test.instanceCount;
                    break;
                case 70:
                    i18 = (int)Test.instanceCount;
                case 71:
                    i21 += i20;
                case 72:
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 73:
                    Test.bFld1 = Test.bFld1;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
