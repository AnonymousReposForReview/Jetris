package tests.javafuzzer596;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:17:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static boolean bFld=false;
    public float fFld=124.886F;
    public short sFld=13885;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.149F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-26527, i6=-114, i7=168, i8=-168, i9=-26356, iArr[]=new int[N];
        double d=45.88498, d1=101.22873;
        float f=0.99F;
        byte byArr[]=new byte[N];
        boolean bArr[][]=new boolean[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)0);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr, 1269421783571919476L);

        try {
            byArr[(i5 >>> 1) % N] >>= (byte)i5;
            d *= 85;
            i5 = i5;
        }
        catch (NegativeArraySizeException exc2) {
            f += Test.instanceCount;
        }
        catch (NullPointerException exc3) {
            for (i6 = 21; 377 > i6; i6++) {
                f /= (Test.instanceCount | 1);
                for (i8 = 1; i8 < 5; ++i8) {
                    i5 = i7;
                }
                i5 += (i6 - i5);
                bArr[i6 + 1][i6 - 1] = Test.bFld;
                f *= i6;
                iArr[i6 + 1] |= i7;
                iArr[i6] = (int)d1;
                iArr[i6 + 1] = i9;
                lArr[i6] <<= Test.instanceCount;
            }
        }
        vMeth_check_sum += i5 + Double.doubleToLongBits(d) + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(boolean b, boolean b1, int i2) {

        int i3=-163, i4=55, i10=13, i11=0, i12=-105, i13=5, iArr1[]=new int[N];
        float f1=46.478F;
        short s=-9994;
        byte by=26;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(dArr, 0.8738);

        for (i3 = 14; 246 > i3; ++i3) {
            vMeth();
            for (i10 = 1; i10 < 7; ++i10) {
                i2 += (((i10 * i10) + i11) - f1);
                switch (((i3 >>> 1) % 7) + 76) {
                case 76:
                    i4 += (int)-1937574096L;
                    s += (short)i11;
                    break;
                case 77:
                    i4 *= i11;
                    f1 *= 24209;
                    iArr1[i10] += i10;
                    break;
                case 78:
                case 79:
                    if (i11 != 0) {
                    }
                    for (i12 = 1; i12 < 2; i12++) {
                        f1 += Test.instanceCount;
                        i13 |= (int)Test.instanceCount;
                        dArr[i10 - 1] += 7484L;
                    }
                    break;
                case 80:
                case 81:
                    i13 += i10;
                    break;
                case 82:
                    by += (byte)(i10 - f1);
                }
            }
        }
        long meth_res = (b ? 1 : 0) + (b1 ? 1 : 0) + i2 + i3 + i4 + i10 + i11 + Float.floatToIntBits(f1) + s + i12 +
            i13 + by + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i1=-12283, i14=-176, i15=-150, i16=-31, i17=-62, i18=12;
        float f2=-94.976F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 2.71758);

        i1 += i1;
        i1 |= (iMeth(false, Test.bFld, i1) - i1);
        for (i14 = 6; i14 < 143; i14++) {
            for (i16 = 1; i16 < 11; i16++) {
                i17 += (int)Test.instanceCount;
                i18 = 1;
                while (++i18 < 2) {
                    Test.instanceCount = i17;
                    Test.instanceCount = -33;
                    dArr1[i18] = i15;
                    if (i15 != 0) {
                    }
                    i1 -= i16;
                    f2 += i17;
                    if (i1 != 0) {
                    }
                    i15 = i18;
                    if (i18 != 0) {
                    }
                }
            }
        }
        long meth_res = i1 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-20203, i19=31586, i20=3, i21=-175, i22=-13, i23=-54938, i24=200;
        byte by1=-29;
        long l=-10L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1000885472L);

        i >>= (int)(((Test.instanceCount * i) + (i - Test.instanceCount)) - Long.reverseBytes(lMeth()));
        i = by1;
        for (l = 1; l < 389; ++l) {
            iArrFld[(int)(l + 1)] -= (int)fFld;
            i19 += (int)l;
            i += i;
            for (i20 = 65; i20 > 4; --i20) {
                i += (i20 * i20);
                i *= i19;
                i19 = sFld;
                by1 = (byte)i21;
                i22 = 1;
                do {
                    i21 *= (int)-114.940F;
                    iArrFld[i20] >>= (int)l;
                    Test.fArrFld[i22 + 1] = -159;
                    i21 *= i21;
                    fFld -= -150;
                    Test.instanceCount = i21;
                    Test.instanceCount += (i22 - i);
                } while (++i22 < 2);
                i19 = (int)l;
                for (i23 = 1; 2 > i23; ++i23) {
                    switch ((i23 % 1) + 118) {
                    case 118:
                        switch ((i20 % 7) + 57) {
                        case 57:
                            fFld = l;
                            lArr1[(int)(l - 1)] = 121;
                            break;
                        case 58:
                            Test.instanceCount *= Test.instanceCount;
                            if (true) continue;
                            break;
                        case 59:
                            i -= (int)l;
                            break;
                        case 60:
                        case 61:
                            i += i23;
                            iArrFld = FuzzerUtils.int1array(N, (int)-245);
                            break;
                        case 62:
                            i19 += i23;
                            break;
                        case 63:
                            fFld += by1;
                            break;
                        default:
                            Test.fArrFld[i23 + 1] = -5890299573683692232L;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
