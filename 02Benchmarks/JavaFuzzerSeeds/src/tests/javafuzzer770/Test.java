package tests.javafuzzer770;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:16:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-201L;
    public static boolean bFld=true;
    public static int iFld=-346;
    public int iFld1=-4;
    public double dFld=1.29450;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.117629);
        FuzzerUtils.init(Test.iArrFld, 173);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        byte by=-17;
        int i2=57728, i3=-3, i4=-2, i5=-1, i6=2, i7=31, i8=-6, i9=-55101, i10=57;
        double d=0.15218;
        float f1=-44.724F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 69.606F);
        FuzzerUtils.init(lArr, -27921L);

        Test.instanceCount -= by;
        i2 |= (int)Test.instanceCount;
        for (i3 = 5; 326 > i3; i3++) {
            for (i5 = 1; i5 < 5; ++i5) {
                Test.instanceCount = i4;
            }
            for (i7 = 1; i7 < 5; i7++) {
                d *= i4;
                i6 %= -52706;
                fArr[i7] *= by;
                for (i9 = 1; i9 < 2; i9++) {
                    if (Test.bFld) {
                        Test.dArrFld[i3 - 1] -= Test.instanceCount;
                        i4 = by;
                        Test.instanceCount += (i9 ^ i9);
                        lArr[i3 - 1] += i8;
                    } else {
                        i2 = (int)f1;
                        vMeth_check_sum += by + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 +
                            i10 + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += by + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1) {

        double d1=2.34920;
        short s=-31852;
        int i11=91, i12=-3, i13=155, i14=37571, i15=237, i16=-12542;
        float f2=-39.685F;

        vMeth();
        d1 *= i1;
        i1 = i1;
        i1 = s;
        for (i11 = 9; 215 > i11; i11++) {
            Test.iArrFld[i11 + 1] -= i11;
        }
        d1 = i12;
        s *= (short)i1;
        f2 = Test.instanceCount;
        i12 |= i12;
        i13 = 382;
        while (--i13 > 0) {
            i14 = 1;
            do {
                for (i15 = 1; i15 < 1; i15 += 3) {
                    d1 += Test.instanceCount;
                    i16 <<= i13;
                }
            } while (++i14 < 4);
        }
        long meth_res = i1 + Double.doubleToLongBits(d1) + s + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 +
            i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        float f=-55.936F;

        f += iMeth(i);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i17=4, i18=-154, i19=2, i20=7510, i21=-10, i22=-60877, i23=-60815;
        short s1=-10778;
        float f3=-119.480F, f4=-1.578F;

        for (int smallinvoc=0; smallinvoc<141; smallinvoc++) vSmallMeth(Test.iFld);
        for (i17 = 15; i17 < 308; ++i17) {
            i18 = (int)Test.instanceCount;
            for (i19 = 4; i19 < 86; ++i19) {
                try {
                    Test.iArrFld[i19] = (i19 % i17);
                    i20 = (Test.iFld / -44727);
                    i20 = (i20 / Test.iArrFld[i17 - 1]);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i17] >>= (int)Test.instanceCount;
                i18 >>= i17;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-11);
                s1 *= (short)i19;
                Test.instanceCount *= i18;
                switch (((i19 >>> 1) % 1) + 24) {
                case 24:
                    i18 <<= i17;
                    Test.iFld >>>= i17;
                    for (i21 = 1; i21 < 2; i21++) {
                        i20 += i20;
                        s1 += (short)Test.instanceCount;
                        if (Test.bFld) break;
                        switch (((i19 % 2) * 5) + 86) {
                        case 94:
                            i22 = i17;
                        case 93:
                            f3 += (((i21 * i20) + f3) - Test.instanceCount);
                            Test.iFld += i19;
                            i18 += (i21 | s1);
                            i22 -= (int)Test.instanceCount;
                        default:
                        }
                        iFld1 ^= iFld1;
                        i23 = s1;
                        f4 += (((i21 * i22) + Test.iFld) - Test.iFld);
                        Test.instanceCount += (i21 * i21);
                        dFld += f4;
                        f3 -= i18;
                    }
                    break;
                }
            }
            Test.iFld -= i21;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
