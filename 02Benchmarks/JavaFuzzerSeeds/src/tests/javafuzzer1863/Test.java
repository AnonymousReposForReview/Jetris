package tests.javafuzzer1863;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:51:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static boolean bFld=true;
    public static short sFld=-10905;
    public static byte byFld=43;
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 35);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i10=70, i11=130, i12=-3, iArr1[]=new int[N];
        short s=3921;
        boolean b1=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -1);

        i10 = s;
        bArr[(i10 >>> 1) % N][(i10 >>> 1) % N] = b1;
        i10 = (int)Test.instanceCount;
        i10 = i10;
        i11 = 1;
        while (++i11 < 214) {
            iArr1[i11 + 1] = i10;
            i10 >>>= (int)Test.instanceCount;
            iArr1[i11 - 1] *= -235;
        }
        i12 = 1;
        do {
            float f1=1.475F;
            f1 += (i12 + i11);
            switch (((i12 % 4) * 5) + 1) {
            case 16:
                switch ((i12 % 10) + 73) {
                case 73:
                    iArr1[i12 + 1] = (int)Test.instanceCount;
                    iArr1[i12 - 1] = -5695;
                    i10 = i10;
                    break;
                case 74:
                    i10 += i12;
                case 75:
                    i10 *= i10;
                    break;
                case 76:
                    i10 += (((i12 * i11) + i10) - i12);
                    break;
                case 77:
                    try {
                        iArr1[i12] = (119 % i10);
                        i10 = (-3887 / i12);
                        i10 = (i10 % -11136);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 78:
                    i10 *= (int)-2647770889234028609L;
                    break;
                case 79:
                    i10 /= (int)(i10 | 1);
                    break;
                case 80:
                    i10 *= i11;
                    break;
                case 81:
                    i10 >>= i11;
                    break;
                case 82:
                    i10 -= (int)f1;
                    break;
                }
                break;
            case 17:
                Test.instanceCount += (long)16.262F;
                break;
            case 19:
                i10 += (int)5008747053130797866L;
                break;
            case 11:
            }
        } while (++i12 < 122);
        long meth_res = i10 + s + (b1 ? 1 : 0) + i11 + i12 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, int i5) {

        int i6=-46167, i7=173, i9=18289, i13=-9, i14=-20797, i15=11, i16=13, iArr[]=new int[N];
        boolean b=true;
        double d=-1.4151;
        float f2=-2.527F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -239);
        FuzzerUtils.init(fArr, 1.434F);

        for (i6 = 5; i6 < 141; i6++) {
            switch ((i6 % 2) + 100) {
            case 100:
                i9 = 1;
                while (++i9 < 12) {
                    b = (iArr[i6 + 1] < iArr[i9 - 1]);
                }
                if (i6 != 0) {
                    vMeth_check_sum += i4 + i5 + i6 + i7 + i9 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i13 + i14 +
                        Float.floatToIntBits(f2) + i15 + i16 + FuzzerUtils.checkSum(iArr) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                i5 = iMeth1();
            case 101:
            default:
                i7 += (int)d;
            }
        }
        for (i13 = 4; 138 > i13; i13++) {
            fArr = FuzzerUtils.float1array(N, (float)120.139F);
            fArr[i13 + 1] = -9119395398682137174L;
            f2 -= i5;
            try {
                i7 = (240 / i9);
                i7 = (i13 % i5);
                iArr[i13 - 1] = (i6 % i9);
            } catch (ArithmeticException a_e) {}
            for (i15 = i13; i15 < 12; i15++) {
                i14 += (((i15 * i9) + f2) - i9);
                i16 += (i15 * i15);
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i9 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i13 + i14 +
            Float.floatToIntBits(f2) + i15 + i16 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i2, int i3, long l) {

        int i17=58039, i18=34298, i19=247, i20=58255, i21=2, i22=6;
        float f3=0.316F;

        vMeth(i2, i3);
        for (i17 = 11; 334 > i17; ++i17) {
            Test.bFld = true;
            l += (long)(-2.713F + (i17 * i17));
        }
        for (i19 = 11; i19 < 207; ++i19) {
            i18 <<= i17;
            try {
                i3 = (i17 % 25);
                Test.iArrFld[i19] = (i3 % Test.iArrFld[i19 - 1]);
                i2 = (i20 % i20);
            } catch (ArithmeticException a_e) {}
            i2 = (int)Test.instanceCount;
            switch ((i19 % 9) + 54) {
            case 54:
                for (i21 = 1; i21 < 8; i21++) {
                    f3 = i3;
                    f3 += -28797;
                    Test.iArrFld[i21 - 1] = (int)l;
                    Test.instanceCount += i21;
                    Test.iArrFld[i21 - 1] -= i17;
                }
                break;
            case 55:
                i2 += Test.sFld;
            case 56:
                i3 = 64679;
            case 57:
                i20 += (int)Test.instanceCount;
                break;
            case 58:
                i20 >>= -58125;
            case 59:
                if (i22 != 0) {
                }
            case 60:
                i3 = (int)Test.instanceCount;
                break;
            case 61:
                Test.instanceCount += i19;
            case 62:
                Test.iArrFld[i19] += i3;
            }
        }
        long meth_res = i2 + i3 + l + i17 + i18 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=1.734F, fArr1[]=new float[N];
        int i=198, i1=9, i23=56437, i24=13, i25=-63442, i26=-120, i27=-3, i28=68, i29=153;

        FuzzerUtils.init(fArr1, 104.609F);

        f -= i;
        i1 = 1;
        while (++i1 < 254) {
            i = (int)((iMeth(i1, i1, Test.instanceCount) - 0.57557) - i1);
            fArr1[(i1 >>> 1) % N] = i;
            i >>= Test.sFld;
            i = i1;
            for (i23 = 4; 99 > i23; ++i23) {
                Test.instanceCount = i;
                i25 = 1;
                do {
                    f += i25;
                    lArrFld = lArrFld;
                    i24 *= i24;
                    Test.instanceCount = 14485;
                    switch ((((i25 >>> 1) % 3) * 5) + 42) {
                    case 55:
                        Test.byFld -= (byte)f;
                        i24 += (int)Test.instanceCount;
                        break;
                    case 45:
                        i24 |= (int)Test.instanceCount;
                        break;
                    case 46:
                        i += i25;
                        break;
                    default:
                        i24 >>>= i24;
                    }
                    i = i25;
                    f *= Test.instanceCount;
                } while (++i25 < 2);
            }
            i = i25;
            for (i26 = 4; i26 < 99; ++i26) {
                Test.iArrFld[i1 + 1] = (int)Test.instanceCount;
                Test.instanceCount <<= i24;
                for (i28 = 1; i28 < 2; i28++) {
                    i *= i26;
                    i += (-96 + (i28 * i28));
                    i27 -= i27;
                    i >>>= -13;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
