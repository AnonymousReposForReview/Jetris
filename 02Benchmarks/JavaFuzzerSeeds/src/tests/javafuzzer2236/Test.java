package tests.javafuzzer2236;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:46:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-147L;
    public static boolean bFld=false;
    public static volatile double dFld=8.117277;
    public byte byFld=-34;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public double dArrFld[][]=new double[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.556F);
        FuzzerUtils.init(Test.iArrFld, 47);
        FuzzerUtils.init(Test.byArrFld, (byte)-11);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2) {

        int i3=-91, i4=63993, i5=0, i6=-175;
        float f1=109.174F;
        double d=0.28900, d1=0.129706;
        long l1=-9L;
        short s=-22290;

        i2 >>= (int)Test.instanceCount;
        for (i3 = 175; i3 > 6; --i3) {
            f1 = 1;
            do {
                d += Test.instanceCount;
                Test.bFld = Test.bFld;
                if (i4 != 0) {
                }
                for (d1 = 1; d1 < 1; ++d1) {
                    i4 *= i4;
                }
                i5 *= 52767;
            } while (++f1 < 9);
            i4 *= i2;
            for (l1 = 1; l1 < 9; l1++) {
                i4 >>= i5;
                i6 += (int)(l1 * l1);
                i6 *= (int)f1;
                s -= (short)i5;
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + i5 + l1 + i6 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1) {

        float f2=-122.306F, f3=-1.91F;
        int i7=9, i8=104, i9=7, i10=7, i11=-59634, iArr1[]=new int[N];
        double d2=11.19654;
        byte by=-82;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -185);
        FuzzerUtils.init(sArr, (short)6769);

        switch (((iMeth(i1) >>> 1) % 8) + 118) {
        case 118:
            i1 -= i1;
            iArr1 = iArr1;
            break;
        case 119:
            for (f2 = 156; f2 > 8; f2--) {
                Test.bFld = Test.bFld;
                i7 |= (int)-1672503731L;
                for (i8 = (int)(f2); i8 < 11; ++i8) {
                    for (i10 = 1; i10 < 1; ++i10) {
                        sArr[i8] = (short)i7;
                        if (true) break;
                        i7 *= (int)Test.instanceCount;
                        switch ((((i8 >>> 1) % 1) * 5) + 31) {
                        case 35:
                            i1 -= (int)d2;
                            i1 = (int)28.105F;
                            try {
                                i1 = (-224 / i7);
                                i9 = (i1 % i9);
                                i11 = (i11 / 1908126117);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            iArr1[(int)(f2 + 1)] = by;
                        }
                    }
                }
            }
        case 120:
            Test.instanceCount *= i9;
        case 121:
            f3 -= i1;
            break;
        case 122:
            f3 = Test.instanceCount;
        case 123:
            Test.fArrFld[(-6 >>> 1) % N] %= ((long)(f3) | 1);
            break;
        case 124:
            Test.instanceCount += i10;
            break;
        case 125:
            f3 = i8;
            break;
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2) + by
            + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(long l) {

        int i=-57774, i12=38563, i13=0, iArr[]=new int[N];
        float f=1.104F;
        byte by1=68;

        FuzzerUtils.init(iArr, 15335);

        i *= (Integer.reverseBytes(++i) - Math.max((int)(f - i), i));
        i = (int)(l - ((--f) - iArr[(i >>> 1) % N]));
        vMeth1(i);
        switch (((-21 >>> 1) % 1) + 126) {
        case 126:
            Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] *= i;
            break;
        }
        i = i;
        i = i;
        i = i;
        i += (int)Test.dFld;
        Test.iArrFld[(i >>> 1) % N][(171 >>> 1) % N] -= (int)f;
        for (i12 = 13; i12 < 390; ++i12) {
            iArr[i12 + 1] -= i;
            i = (int)l;
            i = by1;
            i += i12;
        }
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + i12 + i13 + by1 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-8, i15=57010, i16=-51, i18=116, i19=9, i20=20896, i21=216, i22=-81, i23=7, i24=-3, i25=9, iArr2[]=new
            int[N];
        float f4=0.385F, f5=121.315F;
        short s1=31340;

        FuzzerUtils.init(iArr2, 6);

        vMeth(Test.instanceCount);
        i14 += (int)Test.dFld;
        Test.instanceCount = Test.instanceCount;
        for (i15 = 12; i15 < 270; ++i15) {
            i16 = (int)Test.instanceCount;
            i14 -= i15;
            i16 /= (int)(Test.instanceCount | 1);
            Test.instanceCount = i16;
            Test.instanceCount *= byFld;
            for (i18 = 4; i18 < 97; ++i18) {
                i16 += (1 + (i18 * i18));
                try {
                    i20 = (i14 % i16);
                    i14 = (35 % i14);
                    i20 = (111 / i19);
                } catch (ArithmeticException a_e) {}
                Test.fArrFld[i15 + 1] = byFld;
                i19 += i20;
                Test.bFld = Test.bFld;
                dArrFld[i18 + 1][i15] *= -127;
                try {
                    i14 = (18023 / i14);
                    iArr2[i18] = (i16 % 163);
                    Test.iArrFld[i18 + 1][i15] = (2066023536 % i16);
                } catch (ArithmeticException a_e) {}
                for (f4 = 1; 2 > f4; f4++) {
                    i21 -= i15;
                    Test.iArrFld[i15][i18 - 1] -= i14;
                    Test.instanceCount = Test.instanceCount;
                }
                Test.instanceCount = i15;
                i14 += (((i18 * i20) + i20) - i21);
            }
            s1 += (short)(((i15 * i16) + i15) - i18);
            for (i22 = 6; i22 < 97; i22++) {
                if (Test.bFld) {
                } else {
                    for (i24 = i22; i24 < 2; i24++) {
                        Test.byArrFld[i24] = (byte)i20;
                        f5 -= Test.instanceCount;
                        Test.instanceCount *= byFld;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
