package tests.javafuzzer2008;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:25:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-55L;
    public static int iFld=3;
    public boolean bFld=true;
    public float fFld=60.501F;
    public static byte byFld=-123;
    public static volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.909F);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10) {

        int i11=204, i12=-50216, i13=15567, i14=61430, i15=-113, i16=-170;
        float f1=0.1007F;
        double d=-2.60249;
        boolean b=true;

        Test.instanceCount += Test.instanceCount;
        i10 >>= (int)Test.instanceCount;
        for (i11 = 8; i11 < 161; ++i11) {
            for (i13 = i11; i13 < 10; i13 += 3) {
                f1 -= i12;
                i12 += (i13 + i12);
                d = Test.instanceCount;
                i12 -= i12;
            }
            i10 += i11;
            Test.instanceCount -= i13;
            i10 *= i14;
            b = b;
            for (i15 = 1; i15 < 10; ++i15) {
                i14 = i13;
            }
        }
        i14 = (int)-49L;
        long meth_res = i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + (b ? 1 :
            0) + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth1() {

        int i3=-30, i4=138, i5=-132, i6=-38763, i7=139, i8=-9403, i9=-247, i17=-12620, i18=-95;
        short s=-25398, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)30643);

        i3 = ((i3--) - (-sArr[(i3 >>> 1) % N]));
        for (i4 = 6; i4 < 360; ++i4) {
            for (i6 = i4; 5 > i6; i6++) {
                for (i8 = i6; i8 < 1; ++i8) {
                    i3 = (i7++);
                    i9 -= i8;
                    i5 -= (int)Test.fArrFld[i4 - 1];
                    i5 *= iMeth(-77);
                }
                s -= (short)i4;
                for (i17 = 1; 1 > i17; ++i17) {
                    i9 *= -3;
                    s *= (short)i5;
                    i5 += (i17 + i6);
                }
                i18 += (int)Test.instanceCount;
            }
            Test.iFld += (i4 + i17);
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + s + i17 + i18 + FuzzerUtils.checkSum(sArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(int i1, long l) {

        float f=43.411F, f2=-102.631F;
        int i2=2, i19=-34202, i20=-32067, i21=6, i22=6;
        long l1=1L;
        short s1=-19822;

        for (f = 20; f < 326; ++f) {
            i1 += (int)(f * f);
            Test.instanceCount <<= ((++i1) + (i2 + lMeth1()));
            iArrFld[(int)(f + 1)] = Test.iFld;
            f2 -= -10;
            for (i19 = 1; i19 < 5; ++i19) {
                i1 += i19;
                i21 = 1;
                do {
                    if (bFld) break;
                } while (++i21 < 2);
                i1 = i19;
                for (l1 = 1; l1 < 2; l1++) {
                    i1 ^= i22;
                    Test.instanceCount -= i2;
                }
                Test.iFld <<= i2;
                i1 += (((i19 * i1) + s1) - Test.iFld);
            }
        }
        long meth_res = i1 + l + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f2) + i19 + i20 + i21 + l1 + i22 +
            s1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i23=51798, i24=201, i25=208, i26=59376, i27=22, i28=-10, i29=70, i30=10, i31=64842;
        boolean b1=false;
        double d1=41.52485, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 21.127123);

        i <<= (int)lMeth(55007, Test.instanceCount);
        for (i23 = 121; 4 < i23; --i23) {
            iArrFld1[i23 - 1] = i;
            switch ((((i >>> 1) % 4) * 5) + 65) {
            case 74:
                bFld = b1;
            case 75:
                for (i25 = 4; i25 < 214; i25++) {
                    iArrFld1[i25] = i26;
                }
                break;
            case 70:
                d1 = i26;
                for (i27 = i23; i27 < 214; ++i27) {
                    byte by=81;
                    bFld = false;
                    iArrFld[i27] -= i23;
                    i24 += (-3 + (i27 * i27));
                    b1 = bFld;
                    i24 = by;
                }
                Test.instanceCount -= -81;
                for (i29 = 2; i29 < 214; i29++) {
                    if (bFld) {
                        dArr[i23] += 14;
                        iArrFld[i29 - 1] += 0;
                        i28 += (i29 * i29);
                        d1 = i27;
                    } else {
                        Test.instanceCount = (long)fFld;
                        Test.iFld += Test.iFld;
                        i31 = 1;
                        do {
                            Test.iFld += (int)(60.839F + (i31 * i31));
                            Test.instanceCount += (i31 * i31);
                        } while (++i31 < 2);
                        i28 += (int)(237L + (i29 * i29));
                    }
                    Test.byFld *= (byte)d1;
                }
                break;
            case 68:
                i += (-8 + (i23 * i23));
                i28 = i27;
                break;
            default:
                Test.instanceCount <<= i;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
