package tests.javafuzzer989;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:38:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-221055070L;
    public static double dFld=1.106991;
    public long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld1[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld1, -21831L);
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i11) {


        Test.dFld += Test.instanceCount;
        vMeth_check_sum += i11;
    }

    public static boolean bMeth(int i7, int i8, boolean b) {

        int i9=-61218, i10=73, i12=-12, i13=-2, i14=-51611, iArr1[]=new int[N];
        byte by1=-123;
        float f2=-8.475F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -4);
        FuzzerUtils.init(lArr, 18671L);

        for (i9 = 15; i9 < 327; ++i9) {
            i8 = (i7 - i7);
            Test.instanceCount += (((i9 * i9) + Test.instanceCount) - i7);
            vMeth(i8);
            for (i12 = 1; i12 < 5; i12++) {
                if (i9 != 0) {
                    return ((int)(i7 + i8 + (b ? 1 : 0) + i9 + i10 + i12 + i13 + by1 + Float.floatToIntBits(f2) + i14 +
                        FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr))) % 2 > 0;
                }
                try {
                    i13 = (i9 / 39779);
                    i8 = (i8 / iArr1[i9 + 1]);
                    i7 = (i9 % i12);
                } catch (ArithmeticException a_e) {}
                by1 += (byte)(-21423 + (i12 * i12));
                for (f2 = 1; 2 > f2; ++f2) {
                    iArr1[i12 - 1] = i7;
                    switch (((i9 % 1) * 5) + 42) {
                    case 47:
                        lArr[i12][i9] = i8;
                        if (b) {
                            iArr1[i12 - 1] = i12;
                            i7 >>= i13;
                            return ((int)(i7 + i8 + (b ? 1 : 0) + i9 + i10 + i12 + i13 + by1 + Float.floatToIntBits(f2)
                                + i14 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr))) % 2 > 0;
                        } else {
                            i7 <<= (int)Test.instanceCount;
                        }
                    }
                }
            }
        }
        long meth_res = i7 + i8 + (b ? 1 : 0) + i9 + i10 + i12 + i13 + by1 + Float.floatToIntBits(f2) + i14 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(long l, float f1) {

        int i6=3, i15=12, iArr[]=new int[N];
        boolean b1=true;
        float f3=0.338F;

        FuzzerUtils.init(iArr, 44);

        for (int i5 : iArr) {
            Test.instanceCount ^= i5;
            i6 = 4;
            do {
                if ((((f1 - 207) - (i5 - Test.instanceCount)) != (Test.dFld *= (i5 - i5))) & (Test.bArrFld[i6] =
                    bMeth(i6, i5, b1))) break;
                switch ((i6 % 2) + 45) {
                case 45:
                    Test.lArrFld1[i6 + 1] *= (long)f1;
                    Test.instanceCount -= i5;
                    try {
                        i5 = (i5 / -134);
                        i5 = (-5948 % i15);
                        i15 = (116 % i5);
                    } catch (ArithmeticException a_e) {}
                    i15 = (int)f1;
                    break;
                case 46:
                    l *= i6;
                    l += (long)Test.dFld;
                    Test.dFld -= f1;
                    i5 += i6;
                    break;
                }
                if (i6 != 0) {
                }
                f3 += i15;
            } while (--i6 > 0);
        }
        long meth_res = l + Float.floatToIntBits(f1) + i6 + (b1 ? 1 : 0) + i15 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=-25, i3=3280, i4=10, i16=14;
        float f=59.466F, fArr[]=new float[N];
        boolean b2=true;
        long l1=-3287408811L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -93.74356);
        FuzzerUtils.init(fArr, 1.606F);

        for (i = 7; i < 287; ++i) {
            int i2=-79;
            i1 += ((-(--i1)) * 146);
            i1 = (((i + i) + Math.max(i1, i)) * i2);
            i2 *= (i1++);
            Test.instanceCount = (-(i1++));
            i2 -= (int)f;
            if (b2) {
                Test.instanceCount >>>= (Test.instanceCount - Test.instanceCount);
                i3 = 1;
                while (++i3 < 90) {
                    byte by=-121;
                    i2 += (i1 >>= 18264);
                    i4 = 1;
                    while (++i4 < 1) {
                        Test.instanceCount = (--i2);
                    }
                    switch ((((i1 >>> 1) % 7) * 5) + 27) {
                    case 50:
                        by *= (byte)Math.abs(lArrFld[i]);
                        f += iMeth(41324L, f);
                        if (b2) {
                            i2 += i1;
                            if (b2) continue;
                            Test.instanceCount /= (i4 | 1);
                            Test.instanceCount >>>= -46043L;
                        }
                        for (l1 = 1; l1 < 1; ++l1) {
                            Test.instanceCount += i3;
                            Test.iArrFld[(int)(l1 - 1)] += (int)l1;
                            i1 -= (int)63.915F;
                            Test.dFld /= (by | 1);
                            Test.instanceCount = i3;
                            dArr[i3 - 1] = i;
                            f = i16;
                            Test.iArrFld[(i4 >>> 1) % N] = i4;
                        }
                        break;
                    case 55:
                        fArr[i] = i16;
                        break;
                    case 30:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 61:
                        i1 >>>= (int)Test.instanceCount;
                        break;
                    case 44:
                        i2 *= i1;
                        break;
                    case 35:
                        i1 = (int)f;
                        break;
                    case 62:
                        if (b2) break;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
