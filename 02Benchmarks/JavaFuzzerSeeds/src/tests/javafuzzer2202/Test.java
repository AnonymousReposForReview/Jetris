package tests.javafuzzer2202;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:12:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static boolean bFld=false;
    public int iFld=163;
    public static float fFld=-2.746F;
    public short sFld=-20041;
    public double dFld=-18.17457;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -190);
        FuzzerUtils.init(Test.dArrFld, -89.17566);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i3=-128, i4=-14, i5=-6, i6=-25, i7=138, i8=-11, i9=77, i10=-153, i11=-178;
        double d=1.109357, d1=-1.27452;

        for (i3 = 7; i3 < 394; ++i3) {
            for (d = i3; d < 4; d++) {
                i5 += (int)d;
            }
        }
        d1 -= Test.instanceCount;
        for (i6 = 10; 207 > i6; i6++) {
            short s=4956;
            i7 += (i6 * i6);
            i5 = (int)-7285933855348392158L;
            Test.iArrFld[i6 - 1] = s;
            for (i8 = 1; i8 < 8; ++i8) {
                for (i10 = 1; i10 < 2; ++i10) {
                    i5 += (((i10 * Test.instanceCount) + i6) - Test.instanceCount);
                    i5 += i10;
                    i4 += (((i10 * i10) + Test.instanceCount) - i3);
                    i5 <<= i9;
                }
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-34061);
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 +
            i10 + i11;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i2) {

        float f=1.9F;
        int i12=218, i13=9983, i14=29059, i15=-164;
        long l=19486L;

        f = (float)(dMeth() - Test.instanceCount);
        f *= i2;
        i2 >>= -65510;
        i2 += i2;
        i2 = (int)f;
        Test.iArrFld[(i2 >>> 1) % N] = (int)Test.instanceCount;
        for (i12 = 13; i12 < 275; ++i12) {
            Test.instanceCount = Test.instanceCount;
            i13 = i13;
        }
        i2 -= i13;
        for (i14 = 18; i14 < 361; i14++) {
            Test.instanceCount = l;
            if (Test.bFld) continue;
            i2 += i12;
            if (true) break;
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + l;
    }

    public static void vSmallMeth(boolean b) {

        int i16=-10642;

        vMeth(-13);
        i16 >>= i16;
        vSmallMeth_check_sum += (b ? 1 : 0) + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=-75, i1=-205, i17=-40155, i18=-165, i19=-14, i20=4, i21=246, i22=-9, i23=73, i24=-157, i25=14;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 956371255L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr, (short)16698);

        for (i = 6; i < 219; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.bFld);
            i1 *= (int)34.877F;
            Test.iArrFld = Test.iArrFld;
        }
        Test.dArrFld = Test.dArrFld;
        for (i17 = 10; i17 < 326; i17 += 3) {
            iFld += (((i17 * i17) + Test.instanceCount) - Test.fFld);
            i19 = 1;
            while (++i19 < 239) {
                switch ((i19 % 9) + 67) {
                case 67:
                    for (i20 = 1; i20 < 1; ++i20) {
                        Test.instanceCount += (i20 * i20);
                    }
                    break;
                case 68:
                    for (i22 = 1; i22 < 1; i22++) {
                        iFld -= i19;
                        try {
                            i23 = (-180 % i20);
                            i18 = (i % i19);
                            i23 = (586958797 / i17);
                        } catch (ArithmeticException a_e) {}
                        lArr[i22 - 1] = sFld;
                    }
                case 69:
                    i23 -= i1;
                case 70:
                    i23 = i20;
                    break;
                case 71:
                    for (i24 = i19; i24 < 1; ++i24) {
                        Test.bFld = Test.bFld;
                        bArr[i17 + 1] = Test.bFld;
                        switch ((i19 % 2) + 100) {
                        case 100:
                            i1 -= i17;
                            Test.instanceCount = i21;
                            i18 -= (int)Test.instanceCount;
                            i25 -= (int)Test.instanceCount;
                            break;
                        case 101:
                            sArr = FuzzerUtils.short1array(N, (short)22816);
                            break;
                        default:
                            i1 += (((i24 * i25) + i) - i25);
                            i25 *= i25;
                        }
                    }
                    Test.dArrFld = Test.dArrFld;
                case 72:
                    Test.instanceCount ^= i21;
                case 73:
                    Test.iArrFld[i17 - 1] = i17;
                case 74:
                    Test.instanceCount += (i19 - Test.fFld);
                    break;
                case 75:
                    i21 = -53158;
                default:
                    dFld -= i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
