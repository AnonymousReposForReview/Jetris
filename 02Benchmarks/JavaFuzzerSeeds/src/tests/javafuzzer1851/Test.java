package tests.javafuzzer1851;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:27:27 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1546385108656566622L;
    public volatile float fFld=2.860F;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -481407512398576073L);
        FuzzerUtils.init(Test.fArrFld, 29.888F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i2, int i3) {


        i2 *= (int)(i2 = (int)(Test.instanceCount++));
        vSmallMeth_check_sum += i2 + i3;
    }

    public static void vMeth(int i9, int i10, long l) {

        int i11=-104, i12=-149, i13=119, i14=219, i15=-25760, iArr[]=new int[N];
        float f=0.642F, fArr[]=new float[N];
        byte by=-33;

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(fArr, 0.978F);

        vSmallMeth(i10, i10);
        i11 = 1;
        do {
            iArr[i11 - 1] |= i11;
            switch ((((i11 >>> 1) % 2) * 5) + 120) {
            case 128:
                i10 &= i11;
                break;
            case 125:
                i10 += i11;
                break;
            }
            i9 = i9;
            for (i12 = i11; i12 < 5; i12++) {
                Test.instanceCount = -4;
                f *= Test.instanceCount;
                for (i14 = 1; i14 < 1; i14++) {
                    Test.instanceCount = by;
                    iArr[i11] /= (int)(Test.instanceCount | 1);
                    Test.instanceCount *= i9;
                    fArr[i14] *= i9;
                }
            }
        } while (++i11 < 302);
        vMeth_check_sum += i9 + i10 + l + i11 + i12 + i13 + Float.floatToIntBits(f) + i14 + i15 + by +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth() {

        int i4=94, i5=-28347, i6=-31681, i7=-33684, i8=-31176;
        boolean b=false;

        for (i4 = 7; i4 < 159; ++i4) {
            for (i6 = 1; 10 > i6; i6++) {
                i8 = 1;
                do {
                    vSmallMeth(44294, -2 - (-30980 >> iArrFld[i6]));
                    switch ((i6 % 8) + 75) {
                    case 75:
                        switch ((i8 % 9) + 91) {
                        case 91:
                            vMeth(-17, i6, Test.instanceCount);
                            try {
                                iArrFld[i6] = (i6 / i6);
                                i5 = (i8 % i4);
                                i5 = (i5 / 189);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount += (((i8 * Test.instanceCount) + i5) - i7);
                            break;
                        case 92:
                            fFld -= Test.instanceCount;
                        case 93:
                            i5 = i6;
                            break;
                        case 94:
                            i7 -= (int)fFld;
                            if (b) continue;
                        case 95:
                        case 96:
                            Test.lArrFld[i6] = Test.instanceCount;
                            iArrFld = iArrFld;
                            break;
                        case 97:
                            i7 += (int)4L;
                            break;
                        case 98:
                            Test.lArrFld[i8 - 1] = i7;
                            break;
                        case 99:
                            iArrFld[i8] += -1;
                            break;
                        default:
                            i7 += i6;
                        }
                        break;
                    case 76:
                        Test.lArrFld[i8 - 1] = Test.instanceCount;
                        break;
                    case 77:
                        Test.instanceCount *= i8;
                    case 78:
                        i7 = i7;
                        break;
                    case 79:
                        i5 += (((i8 * fFld) + Test.instanceCount) - i4);
                        break;
                    case 80:
                        i7 -= i8;
                        break;
                    case 81:
                        i7 &= i6;
                        break;
                    case 82:
                        i7 = i8;
                    }
                } while (++i8 < 2);
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=84, i1=-11, i16=13, i17=141, i18=12, i19=-15060, i20=116, i21=-1, i22=-6, i23=40458, i24=-51, i25=-51831;
        short s=2839;
        double d=-59.128533;
        boolean b1=true;

        i = 1;
        do {
            i1 += (int)((Test.instanceCount += (long)(Test.instanceCount += (long)fFld)) + ((i1 = i1) + (i * -5)));
        } while (++i < 197);
        i1 *= (int)((s = (short)(i1--)) - (Test.instanceCount >>= (--Test.instanceCount)));
        for (int smallinvoc=0; smallinvoc<603; smallinvoc++) vSmallMeth((int)(-((Test.instanceCount +
            Test.instanceCount) - iMeth())), i1);
        for (i16 = 5; i16 < 242; i16++) {
            for (i18 = 2; i18 < 106; ++i18) {
                for (i20 = 1; i20 < 2; i20 += 3) {
                    Test.instanceCount += i21;
                    i17 -= 9;
                    iArrFld[i20] += i1;
                    Test.instanceCount ^= i;
                    Test.fArrFld[i16] = i;
                    Test.instanceCount += (((i20 * i21) + Test.instanceCount) - Test.instanceCount);
                    if (b1) {
                        i21 += i20;
                        d += -21230L;
                    } else {
                        Test.instanceCount += (i20 * i20);
                        if (b1) continue;
                    }
                    i1 += i20;
                    i1 = 48;
                }
                Test.instanceCount &= -16238;
                sArrFld[i18][i16 + 1] += (short)Test.instanceCount;
            }
            try {
                i17 = (-199 % i17);
                i17 = (i20 / i19);
                i17 = (iArrFld[i16] % iArrFld[i16 - 1]);
            } catch (ArithmeticException a_e) {}
            i21 >>= i19;
            i21 = i17;
            for (i22 = i16; i22 < 106; i22++) {
                for (i24 = 1; i24 > 1; --i24) {
                    Test.instanceCount += (i24 + i);
                    i1 = i20;
                    i21 = 190;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth vMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
