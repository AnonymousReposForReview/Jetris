package tests.javafuzzer2657;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:05:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static float fFld=-118.507F;
    public static double dFld=-76.54850;
    public static byte byFld=-30;
    public volatile boolean bFld=true;
    public static volatile double dFld1=109.75146;
    public volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -773022181946678537L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6) {

        int i7=-112, i8=9, i9=24680, i10=-11, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        double d=73.86819;
        short s1=-825;
        boolean b=false;

        FuzzerUtils.init(iArr1, 238);
        FuzzerUtils.init(iArr2, 64290);

        Test.instanceCount = Test.instanceCount;
        for (i7 = 12; i7 < 312; ++i7) {
            if (b) {
                Test.instanceCount += i7;
                d = 1;
                while (++d < 6) {
                    i6 += -6;
                    Test.fFld = i8;
                    Test.instanceCount = i6;
                    i6 = i8;
                    iArr1[(int)(d)] -= (int)Test.instanceCount;
                    for (i9 = 1; i9 < 1; ++i9) {
                        iArr2[i7][i9] = (int)Test.instanceCount;
                        s1 += (short)-49451;
                        i6 += (i9 - i6);
                        Test.instanceCount += (18901L + (i9 * i9));
                    }
                }
            } else if (true) {
                Test.instanceCount += i7;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + s1 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i4, int i5, long l) {

        short s=5223;
        int i11=55333, i12=-8, i13=-10286, iArr[]=new int[N];
        double d1=71.105066;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -194);
        FuzzerUtils.init(lArr, 6002219598486958097L);

        iArr = (iArr = (iArr = (iArr = iArr)));
        s >>= (short)-131;
        vMeth(i4);
        Test.dFld = l;
        iArr[(i5 >>> 1) % N] -= (int)Test.fFld;
        l += i4;
        for (i11 = 2; i11 < 209; ++i11) {
            lArr[i11] &= 41266;
            Test.dFld += Test.instanceCount;
            l = Test.instanceCount;
        }
        for (d1 = 3; d1 < 246; ++d1) {
            lArr[(int)(d1 - 1)] = Test.byFld;
            i4 /= (int)(i13 | 1);
            try {
                iArr[(int)(d1 + 1)] = (-33712 % i13);
                i13 = (i12 % -66);
                i13 = (i5 / i13);
            } catch (ArithmeticException a_e) {}
        }
        iArr[(i4 >>> 1) % N] -= (int)113.111952;
        long meth_res = i4 + i5 + l + s + i11 + i12 + Double.doubleToLongBits(d1) + i13 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i2, int i3) {

        int i14=-11, i15=-116, i16=49900, i17=13206, i18=18071;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 23269L);

        Test.instanceCount -= iMeth(-12, 16142, Test.instanceCount);
        i3 = 16883;
        i14 = 269;
        do {
            i2 -= i14;
            i3 += (-141 + (i14 * i14));
            i2 += i2;
            Test.fFld += (i14 + i3);
            for (i15 = 1; i15 < 6; i15++) {
                i2 &= i2;
            }
            for (i17 = 1; i17 < 6; i17++) {
                i18 += i15;
                iArrFld[i14] = (int)-133L;
                lArr1[i17 - 1] -= Test.instanceCount;
                i18 >>= i18;
                if (i14 != 0) {
                }
            }
        } while (--i14 > 0);
        long meth_res = i2 + i3 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=10, i19=4, i20=-132, i21=94, i22=9574;
        float f=2.192F;
        long l1=89063500L;
        double dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 2.13419);
        FuzzerUtils.init(byArr, (byte)23);

        for (i = 3; 164 > i; i += 2) {
            lMeth(i1, 44567);
            if (bFld) {
                iArrFld[i] *= i;
                i19 = 1;
                do {
                    i1 <<= 32595;
                    i1 -= (int)Test.fFld;
                    for (i20 = 1; i20 > i; --i20) {
                        Test.fFld = Test.instanceCount;
                    }
                    if (bFld) continue;
                    Test.instanceCount -= i21;
                    Test.dFld1 = i20;
                    iArrFld[i19 + 1] -= i21;
                    i21 -= i20;
                    Test.lArrFld[i19] += Test.instanceCount;
                } while (++i19 < 313);
                for (f = 313; f > 16; --f) {
                    dArr[(int)(f - 1)] *= Test.dFld;
                    i1 -= i22;
                    l1 = 1;
                    while (++l1 < 2) {
                        if (bFld) break;
                        try {
                            iArrFld[(int)(f - 1)] = (iArrFld[(int)(f)] / i22);
                            i22 = (i21 / 206);
                            i1 = (12329 % i20);
                        } catch (ArithmeticException a_e) {}
                        byArr[(int)(f)] >>= (byte)i20;
                        i22 = i;
                        try {
                            iArrFld[(int)(f)] = (i % 191);
                            i22 = (i20 % i21);
                            iArrFld[(int)(f + 1)] = (iArrFld1[(int)(l1 + 1)] % iArrFld1[(int)(l1)]);
                        } catch (ArithmeticException a_e) {}
                        i22 = Test.byFld;
                        Test.fFld *= f;
                        i1 >>= i1;
                        Test.byFld += (byte)(((l1 * i21) + f) - i21);
                    }
                    Test.dFld -= f;
                    i21 += (int)f;
                }
            } else if (bFld) {
                i22 += i;
            } else if (bFld) {
                i1 *= i22;
            } else {
                i21 -= (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
