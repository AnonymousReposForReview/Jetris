package tests.javafuzzer2669;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:20:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62321L;
    public static double dFld=-2.87225;
    public boolean bFld=true;
    public static int iFld=-16;
    public long lArrFld[]=new long[N];

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i11=6, i12=11202, i13=-35471, i14=21, i15=12, i16=9, iArr[]=new int[N];
        double d1=1.85642;
        boolean b1=true;
        byte by=40;

        FuzzerUtils.init(iArr, 0);

        iArr[(i11 >>> 1) % N] = i11;
        for (d1 = 21; d1 < 350; ++d1) {
            iArr[(int)(d1 - 1)] >>= i11;
            b1 = true;
            for (i13 = (int)(d1); i13 < 5; i13++) {
                iArr[(int)(d1 - 1)] = 13;
                i14 += (int)-13L;
                i11 += i13;
                Test.instanceCount += (i13 ^ i12);
                i14 += (int)Test.instanceCount;
                i12 -= i12;
            }
            for (i15 = 1; i15 < 5; i15++) {
                float f1=-97.459F;
                i11 += i11;
                by ^= (byte)i14;
                f1 += i16;
            }
        }
        vMeth_check_sum += i11 + Double.doubleToLongBits(d1) + i12 + (b1 ? 1 : 0) + i13 + i14 + i15 + i16 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i7, long l, int i8) {

        int i9=14, i10=95, i17=-3, i18=221, i19=-48772, i20=-178, i21=42079, i22=-10, iArr1[]=new int[N];
        float f=1.979F;
        boolean b2=false;

        FuzzerUtils.init(iArr1, -24030);

        for (i9 = 7; i9 < 199; i9++) {
            f = i10;
            vMeth();
            i10 -= i9;
            for (i17 = 1; i17 < 8; i17++) {
                if (b2) break;
                for (i19 = 1; i19 < 2; i19++) {
                    if (i8 != 0) {
                    }
                    i18 = 21133;
                    Test.dFld -= i20;
                }
                l *= i20;
                for (i21 = 1; 2 > i21; i21++) {
                    iArr1[i17 + 1] += (int)l;
                    i20 += (i21 ^ i17);
                    i8 >>= 40;
                }
            }
        }
        long meth_res = i7 + l + i8 + i9 + i10 + Float.floatToIntBits(f) + i17 + i18 + (b2 ? 1 : 0) + i19 + i20 + i21 +
            i22 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i4, int i5) {

        int i6=99, i23=-52449, i24=7, iArr2[]=new int[N];
        short s=6148;
        float f2=-36.390F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -2202863093L);
        FuzzerUtils.init(byArr, (byte)-10);
        FuzzerUtils.init(iArr2, -246);

        i6 = 1;
        do {
            iMeth(i5, Test.instanceCount, 129);
            switch (((-14 >>> 1) % 9) + 79) {
            case 79:
                i5 = i4;
                break;
            case 80:
            case 81:
                if (bFld) break;
                for (i23 = i6; i23 < 5; ++i23) {
                    if (true) continue;
                    Test.instanceCount += (i23 ^ i5);
                    lArr[i6 - 1] = -2483817949L;
                    if (i24 != 0) {
                    }
                    i5 = (int)Test.instanceCount;
                    s += (short)i23;
                    i4 -= i5;
                }
                if (bFld) continue;
                byArr = byArr;
                break;
            case 82:
                iArr2[i6 + 1] -= (int)Test.dFld;
                break;
            case 83:
                i5 <<= 38772;
                break;
            case 84:
                f2 = 14183L;
                break;
            case 85:
                f2 -= i24;
                break;
            case 86:
                Test.instanceCount = Test.instanceCount;
            case 87:
                try {
                    i24 = (iArr2[i6] % 131);
                    i24 = (i4 % i4);
                    i24 = (i24 % i23);
                } catch (ArithmeticException a_e) {}
                break;
            }
        } while (++i6 < 309);
        long meth_res = i4 + i5 + i6 + i23 + i24 + s + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=7, i1=13, i2=-8, i3=6, i25=-48069, i26=-12, i27=190, i28=-75, i29=-181, i30=-10998, iArr3[]=new int[N];
        boolean b=false;
        double d=1.121474;
        short s1=20830;
        float f3=-1.962F;

        FuzzerUtils.init(iArr3, -10);

        i = 313;
        while (--i > 0) {
            if (Test.instanceCount < (Test.instanceCount - ((--Test.instanceCount) * (--i1)))) break;
            i1 *= i1;
            for (i2 = 80; i2 > 1; i2--) {
                if (b = true) continue;
            }
            i1 >>>= (int)(((d + i3) * i3) + ((i3 + i3) - lMeth(i2, i3)));
        }
        Test.iFld = i25;
        Test.instanceCount += s1;
        i26 = 351;
        while (--i26 > 0) {
            for (i27 = 4; 72 > i27; i27++) {
                lArrFld[i26] *= i27;
                i29 = 1;
                do {
                    i25 += (i29 + Test.instanceCount);
                    Test.instanceCount *= i3;
                    i3 |= (int)Test.instanceCount;
                    i3 = (int)f3;
                    f3 = i28;
                    Test.instanceCount = -61011;
                    d = i26;
                } while (++i29 < 2);
                try {
                    iArr3[(58120 >>> 1) % N] = (i27 % -79);
                    Test.iFld = (i3 % iArr3[i27]);
                    i1 = (156 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount <<= 40152L;
                i30 = 1;
                do {
                    if (bFld) break;
                    Test.iFld = (int)f3;
                    s1 >>= (short)i25;
                    i28 -= i2;
                } while (++i30 < 2);
                s1 = (short)Test.dFld;
                i3 = i27;
                i1 += i27;
                iArr3[i27] = -44733;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
