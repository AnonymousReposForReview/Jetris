package tests.javafuzzer2549;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:28:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1851632790L;
    public static double dFld=-1.18610;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -53.14747);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, boolean b, long l1) {

        int i3=146, i4=9, i5=-3, i6=12, iArr1[][]=new int[N][N];
        float f1=1.306F;

        FuzzerUtils.init(iArr1, 182);

        iArr1[(i3 >>> 1) % N] = iArr1[(i3 >>> 1) % N];
        i4 = 1;
        do {
            i3 *= -14;
            i3 += (i4 - i3);
            i3 = i3;
            for (i5 = 1; i5 < 7; i5++) {
                l1 |= i6;
                i6 >>= 14;
                iArr1[i4 - 1] = iArr1[i5];
                switch ((i5 % 3) + 117) {
                case 117:
                case 118:
                    f1 -= 226;
                case 119:
                }
                i6 = i4;
                i6 = i5;
                i3 += i5;
                try {
                    i3 = (i3 % -178);
                    i6 = (-49725 / i3);
                    i6 = (i4 % i4);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i4 < 222);
        vMeth1_check_sum += l + (b ? 1 : 0) + l1 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i2) {

        float f=2.1016F;
        boolean b1=true;
        int i7=231, i8=-6, i9=-13, i10=10, i11=-38488, i12=-2, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 93);

        Test.instanceCount += (long)(((i2 + i2) + (-35462L + (f++))) + i2);
        vMeth1(Test.instanceCount, b1, Test.instanceCount);
        i2 = i2;
        for (i7 = 12; i7 < 296; i7 += 2) {
            iArr2[i7] >>= i8;
            f += Test.instanceCount;
            i2 <<= i2;
        }
        for (i9 = 2; i9 < 184; i9 += 2) {
            for (i11 = 1; 17 > i11; ++i11) {
                i2 += (4 + (i11 * i11));
                i8 <<= i2;
                iArr2[i11] >>= i7;
                i10 ^= i7;
                i12 *= 123;
                i2 += (int)(-164L + (i11 * i11));
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i1, byte by) {

        int i13=-11, i14=-8;
        long l2=-9038003822571535518L;

        fMeth(i1);
        for (i13 = 7; i13 < 159; i13++) {
            i1 = (int)l2;
        }
        vMeth_check_sum += i1 + by + i13 + i14 + l2;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i15=-55089, i16=-89, i17=6, i18=14, i19=-43429, i20=-180, i21=-4, iArr[][]=new int[N][N];
        byte by1=-45;
        float f2=27.337F, f3=0.383F, fArr[][]=new float[N][N];
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr, -10565L);
        FuzzerUtils.init(fArr, -70.220F);

        iArr[(i >>> 1) % N][(i >>> 1) % N] = (int)((--iArr[(i >>> 1) % N][(58780 >>> 1) % N]) + (i +=
            (int)Test.instanceCount));
        vMeth(i, by1);
        i15 = 1;
        while (++i15 < 237) {
            i *= -41460;
            i += (i15 | Test.instanceCount);
            Test.instanceCount <<= Test.instanceCount;
            Test.dArrFld[i15] = i15;
            for (i16 = 2; i16 < 106; ++i16) {
                lArr[i16 - 1] >>= -21913;
                iArr[(i >>> 1) % N][i16] >>>= 61794;
                lArr[i16 - 1] = i;
            }
        }
        i18 = 1;
        while (++i18 < 225) {
            i19 = 1;
            while (++i19 < 112) {
                for (i20 = 1; i20 < 1; i20++) {
                    fArr[i18 + 1][i19 + 1] += i19;
                    Test.dFld -= Test.dFld;
                }
                f2 = 1;
                do {
                    iArr[i18][(int)(f2)] &= by1;
                    i += (int)(11.594F + (f2 * f2));
                    f3 = -3187046462944205607L;
                    if (b2) {
                        f3 -= i19;
                        i *= -630;
                        Test.instanceCount += (long)((long)f2 ^ i19);
                        Test.iArrFld[i19 + 1] += i15;
                    } else {
                    }
                    i = i17;
                    i21 += (int)Test.instanceCount;
                    f3 -= 2147404361L;
                } while (++f2 < 1);
                iArr[i19 + 1][i19 - 1] += -9;
                i17 += (i19 - i21);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
