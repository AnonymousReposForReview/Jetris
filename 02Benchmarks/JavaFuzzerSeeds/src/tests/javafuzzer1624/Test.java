package tests.javafuzzer1624;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:17:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6781157007830994023L;
    public static float fFld=-2.815F;
    public static boolean bFld=false;
    public static int iFld=-172;
    public static byte byFld=25;
    public double dFld=29.7489;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -179);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i2, int i3) {

        int i4=-28483, i5=-41604, i6=128, i7=44457;
        byte by=89;
        short s=17913;
        double d=49.28430;

        for (i4 = 351; i4 > 20; --i4) {
            i2 /= (int)(by | 1);
            Test.fFld += by;
            i3 = (int)l1;
        }
        i2 <<= i3;
        for (i6 = 8; 257 > i6; ++i6) {
            s += (short)(i6 * i6);
            if (Test.bFld) {
                i2 = (int)Test.instanceCount;
            } else {
                Test.iFld += (i6 + i6);
                d += d;
            }
            Test.iArrFld[i6 + 1] = (int)l1;
            i2 += Test.iFld;
            Test.instanceCount = i5;
            i2 += (((i6 * Test.iFld) + i7) - i5);
        }
        long meth_res = l1 + i2 + i3 + i4 + i5 + by + i6 + i7 + s + Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-41940, i8=9, i9=-3;
        float f1=2.252F, fArr[]=new float[N];
        double d1=-55.36717, d2=-74.77781;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(fArr, 41.383F);

        i1 = 1;
        do {
            f1 += (iMeth1(Test.instanceCount, i1, 5) & 139L);
            Test.instanceCount = Test.instanceCount;
            if (Test.bFld) {
                Test.iFld += i1;
                Test.instanceCount <<= -251;
                Test.iFld += (i1 * i1);
            }
            switch ((i1 % 9) + 2) {
            case 2:
                for (d1 = 1; d1 < 5; d1++) {
                    switch ((int)((d1 % 9) + 52)) {
                    case 52:
                        i8 += (-28253 + (d1 * d1));
                        lArr[(int)(d1)][(int)(d1)] += Test.instanceCount;
                        Test.instanceCount = i8;
                    case 53:
                        i8 >>= i1;
                        Test.iFld = Test.iFld;
                    case 54:
                        i8 -= Test.byFld;
                    case 55:
                        f1 -= (float)d2;
                        break;
                    case 56:
                    case 57:
                        Test.instanceCount += (long)d1;
                        break;
                    case 58:
                        Test.iArrFld[(int)(d1)] = i9;
                        break;
                    case 59:
                        Test.fFld = -5;
                        break;
                    case 60:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    }
                }
                break;
            case 3:
                i8 += i1;
                break;
            case 4:
                i9 = i1;
            case 5:
                try {
                    i9 = (Test.iFld % Test.iFld);
                    i8 = (Test.iFld % -1324512344);
                    Test.iArrFld[i1] = (i1 / -37902);
                } catch (ArithmeticException a_e) {}
                break;
            case 6:
                fArr[i1] = 2;
                break;
            case 7:
                i9 += i1;
                break;
            case 8:
                Test.iFld = -153;
                break;
            case 9:
                i8 <<= i9;
                break;
            case 10:
                lArr[i1][i1] += Test.iFld;
                break;
            }
        } while (++i1 < 318);
        long meth_res = i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i8 + Double.doubleToLongBits(d2)
            + i9 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l) {

        int i10=-62291, i11=114, i12=-37, i13=-6257, i14=31712, i15=-27;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 4789090940695072087L);

        l = iMeth();
        for (i10 = 8; i10 < 375; i10++) {
            for (i12 = 1; i12 < 5; i12++) {
                i13 = (int)dFld;
                lArr1[i10 + 1] = i13;
                for (i14 = 1; i14 < 2; i14++) {
                    i15 = i13;
                    Test.iFld = -8;
                    dFld = i10;
                }
                Test.iFld = -234;
                Test.iFld = 189;
                Test.iFld += (int)l;
                Test.fFld += 38182;
                Test.iFld += (((i12 * i12) + Test.iFld) - Test.iFld);
                i11 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += l + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-27.4F, f2=106.204F, f3=100.123F, fArr1[]=new float[N];
        int i=-173, i16=-5, i17=9, i18=27, i19=-4, i20=3, i21=91, i22=-10, i23=47, iArr[]=new int[N];
        long l2=50299L, lArr2[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr2, 2362665337292758487L);
        FuzzerUtils.init(fArr1, 0.89F);
        FuzzerUtils.init(iArr, 30330);
        FuzzerUtils.init(dArr, 123.15706);

        f = (++i);
        vMeth(Test.instanceCount);
        Test.iArrFld[(i >>> 1) % N] = Test.iFld;
        Test.instanceCount = i;
        i16 = 174;
        while ((i16 -= 2) > 0) {
            Test.iFld += i16;
            f2 = 1;
            while (++f2 < 288) {
                Test.fFld = -57950;
                f = i;
                i17 = 1;
                do {
                    lArr2[i17] -= i17;
                    Test.instanceCount = -178;
                } while (++i17 < 1);
                Test.iFld <<= (int)Test.instanceCount;
            }
            dFld += 56605;
        }
        for (l2 = 165; l2 > 5; l2 -= 3) {
            for (i19 = 7; 125 > i19; ++i19) {
                Test.iArrFld[i19] = (int)l2;
                Test.iFld += (-13911 + (i19 * i19));
                fArr1[i19] *= i17;
                iArr[(int)(l2 + 1)] |= i;
                i18 = i18;
                for (f3 = 1; f3 < 4; f3++) {
                    Test.bFld = Test.bFld;
                    i22 = 3;
                    Test.iArrFld = Test.iArrFld;
                    Test.iFld %= -13;
                    Test.instanceCount -= 172;
                    dArr[(int)(l2 + 1)] -= i17;
                    Test.instanceCount += 31437;
                }
                Test.instanceCount += (((i19 * i22) + i23) - i17);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
