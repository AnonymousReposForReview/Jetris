package tests.javafuzzer2813;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:50:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-802711981L;
    public static double dFld=-60.26392;
    public static byte byFld=125;
    public static float fFld=4.905F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 206);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i4, int i5) {

        int i6=-47007, i7=-10, i8=-85, i9=-91, i10=9, iArr[]=new int[N];
        float f2=72.683F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -208L);
        FuzzerUtils.init(iArr, 220);

        for (i6 = 16; i6 < 281; ++i6) {
            for (i8 = i6; i8 < 6; ++i8) {
                switch (((i7 >>> 1) % 2) + 5) {
                case 5:
                    lArr1[i6 - 1] >>>= i6;
                    i9 >>>= i5;
                    for (f2 = 1; f2 < 1; f2++) {
                        float f3=-44.100F;
                        f3 += Test.instanceCount;
                    }
                    i9 += i5;
                    break;
                case 6:
                    i4 >>= i7;
                    Test.byFld += (byte)(i8 * i8);
                    Test.fFld -= i9;
                    break;
                default:
                    switch (((i9 >>> 1) % 6) + 56) {
                    case 56:
                        i5 += (int)Test.instanceCount;
                        if (i7 != 0) {
                        }
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 57:
                        Test.instanceCount -= i9;
                    case 58:
                        i9 *= i8;
                    case 59:
                        Test.dFld += i5;
                        break;
                    case 60:
                        Test.instanceCount *= Test.byFld;
                    case 61:
                        iArr[i6] += i10;
                        break;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + i10 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(float f1, long l) {

        int i3=15, i11=3626, i12=-5, i13=-6, i14=170;
        byte by=19, byArr[]=new byte[N];
        short s=-28699;

        FuzzerUtils.init(byArr, (byte)-54);

        i3 *= (int)(Test.dFld + i3);
        by <<= (byte)(((-Math.max(i3, i3)) * (i3 - i3)) % 10);
        i3 = (int)(((i3 + i3) + dMeth(i3, i3)) + Test.fFld);
        if (false) {
            for (i11 = 5; 149 > i11; i11 += 3) {
                Test.instanceCount += Test.byFld;
                i12 += i11;
                Test.instanceCount >>= i12;
                s += (short)(i11 * i11);
                i12 = i3;
            }
            for (i13 = 5; i13 < 219; i13++) {
                l -= i14;
                Test.iArrFld[i13 - 1] = Test.byFld;
                byArr[i13 + 1] -= (byte)i3;
                Test.fFld = (float)-2.117056;
            }
        } else if (Test.bFld) {
            Test.fFld = 34929L;
        } else {
            i3 ^= 9997;
        }
        long meth_res = Float.floatToIntBits(f1) + l + i3 + by + i11 + i12 + s + i13 + i14 +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(float f, int i2) {

        int i15=-7, i16=-181, i17=6, i18=-14, i19=-4, i20=107, i21=-247, i22=-164;
        short s2=-4188;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -16871L);

        iMeth(Test.fFld, Test.instanceCount);
        Test.fFld -= Test.instanceCount;
        for (i15 = 4; i15 < 256; ++i15) {
            short s1=-7740;
            Test.instanceCount = i16;
            for (i17 = i15; i17 < 6; i17++) {
                if (Test.bFld) break;
            }
            Test.iArrFld[i15 + 1] = -51963;
            if (false) {
                s1 = (short)5L;
                i18 = i16;
            }
        }
        for (i19 = 5; i19 < 139; ++i19) {
            for (i21 = 1; i21 < 12; i21++) {
                lArr2[i19 - 1] >>= Test.instanceCount;
                s2 *= (short)i20;
                Test.instanceCount += (-11L + (i21 * i21));
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + s2 +
            FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i1=-105, i23=-203, i24=243, i25=-61663, i26=-12, i27=87, i28=211, i29=-18827;
        float f4=74.266F;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 1810619043L);
        FuzzerUtils.init(sArr, (short)-24144);

        Test.dFld *= (-((-lArr[(i1 >>> 1) % N]) - lMeth(Test.fFld, i1)));
        i1 = (int)Test.dFld;
        for (f4 = 9; f4 < 184; ++f4) {
            i24 = 1;
            do {
                Test.dFld -= Test.instanceCount;
                i1 |= (int)Test.instanceCount;
                sArr[i24] = (short)i24;
                for (i25 = (int)(f4); i25 < 1; ++i25) {
                    Test.instanceCount -= i26;
                    Test.fFld = i25;
                    Test.iArrFld[(int)(f4)] -= i26;
                    i1 = i25;
                    Test.dFld *= -51938;
                    Test.instanceCount += (((i25 * Test.instanceCount) + i1) - i25);
                    i23 += (((i25 * i26) + Test.instanceCount) - i24);
                    Test.instanceCount /= (Test.instanceCount | 1);
                }
                Test.bFld = Test.bFld;
                i23 = i23;
                Test.instanceCount += i24;
                Test.instanceCount += (-7 + (i24 * i24));
                Test.dFld *= i24;
            } while (++i24 < 143);
            i26 ^= i25;
            i27 = 143;
            while (--i27 > 0) {
                for (i28 = 1; i28 < 1; i28++) {
                    i1 += (i28 - i29);
                    Test.instanceCount += i28;
                    Test.bFld = Test.bFld;
                    Test.iArrFld[i28 + 1] = -9;
                    i29 += (-68 + (i28 * i28));
                    Test.instanceCount += i28;
                }
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
