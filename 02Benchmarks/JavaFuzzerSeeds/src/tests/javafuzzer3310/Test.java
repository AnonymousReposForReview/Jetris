package tests.javafuzzer3310;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public int iFld=14;
    public static float fFld=2.97F;
    public static int iFld1=3;
    public short sFld=-16258;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -16727L);
        FuzzerUtils.init(Test.lArrFld1, 2565751334L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -149);

        iArr1 = iArr1;
        vMeth1_check_sum += FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        int i7=-14, i8=1992, i9=-43, i10=-100, i11=6, i12=-212, iArr[]=new int[N];
        double d=-89.88693;

        FuzzerUtils.init(iArr, 24313);

        for (i7 = 4; i7 < 292; ++i7) {
            iArr[i7 + 1] += (int)(((i8 + Test.instanceCount) * (-(-i7))) - ((i7 * Test.instanceCount) -
                Float.intBitsToFloat(i7)));
            for (i9 = 1; i9 < 6; ++i9) {
                for (i11 = 1; 2 > i11; i11++) {
                    vMeth1();
                    Test.instanceCount += (i11 + i9);
                    switch (((i12 >>> 1) % 6) + 12) {
                    case 12:
                    case 13:
                    case 14:
                        Test.fFld += (i11 * Test.fFld);
                        Test.instanceCount = (long)d;
                        break;
                    case 15:
                        Test.instanceCount += i8;
                        break;
                    case 16:
                        Test.instanceCount = Test.instanceCount;
                        switch ((i11 % 3) + 21) {
                        case 21:
                        case 22:
                        case 23:
                            Test.iFld1 += (((i11 * i10) + Test.fFld) - Test.iFld1);
                            Test.iFld1 = (int)Test.instanceCount;
                            iArr = iArr;
                        default:
                            Test.instanceCount -= i7;
                        }
                        break;
                    case 17:
                        i10 = (int)2970559304026917177L;
                        break;
                    default:
                        d += i7;
                    }
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i1=21319, i2=43559, i3=122, i4=-7, i5=13, i6=246;
        double d1=-39.36405;
        boolean b=true, bArr[]=new boolean[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-21527);
        FuzzerUtils.init(bArr, true);

        i1 = 372;
        do {
            switch ((i1 % 5) + 80) {
            case 80:
                try {
                    iFld = (i1 / -18);
                    iFld = (iFld % -20509);
                    i2 = (iFld / -1005420724);
                } catch (ArithmeticException a_e) {}
                for (i3 = 5; i3 > 1; i3 -= 3) {
                    i2 = (iFld--);
                    switch ((i1 % 9) + 60) {
                    case 60:
                        try {
                            iFld = (i2 / 31);
                            iFld = (35954 % iFld);
                            i2 = (i4 / i2);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 61:
                        Test.instanceCount += i3;
                        break;
                    case 62:
                        Test.fFld = (-(Test.fFld--));
                        for (i5 = 1; i5 < 5; i5++) {
                            Test.lArrFld = (Test.lArrFld = (Test.lArrFld = (Test.lArrFld = Test.lArrFld)));
                            i2 += i5;
                            sArr[i1][i5 + 1] <<= (short)lMeth();
                            Test.instanceCount -= i6;
                            i4 = 16850;
                        }
                    case 63:
                        i6 *= i6;
                        break;
                    case 64:
                        Test.instanceCount += i4;
                    case 65:
                        i4 += (i3 + i2);
                        break;
                    case 66:
                        d1 -= i5;
                        break;
                    case 67:
                        bArr[i1 - 1] = b;
                        break;
                    case 68:
                        Test.instanceCount *= sFld;
                        break;
                    }
                }
            case 81:
                Test.lArrFld1 = Test.lArrFld1;
                break;
            case 82:
                i6 = i4;
            case 83:
                Test.iFld1 += (int)Test.instanceCount;
                break;
            case 84:
            }
        } while (--i1 > 0);
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-33749, i13=-62606, i14=-3, i15=250, i16=40108, i17=-47319, i18=31278, i19=-42027, i20=3, i21=6;
        byte by=-90;
        float f=-18.25F;
        double d2=-2.114981;
        boolean b1=false;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)20100);

        i = (int)(-((Test.instanceCount << 12) - (by--)));
        vMeth();
        for (i13 = 20; i13 < 386; i13 += 2) {
            iFld += (((i13 * i13) + Test.instanceCount) - Test.iFld1);
            try {
                i = (i14 / i13);
                i14 = (iFld / 1738335606);
                i14 = (iArrFld[i13] / 181);
            } catch (ArithmeticException a_e) {}
            for (f = i13; f < 137; f++) {
                int i22=47820;
                i15 = i14;
                switch ((((i >>> 1) % 9) * 5) + 105) {
                case 114:
                    i15 -= 32972;
                    Test.instanceCount += (long)(((f * Test.iFld1) + by) - f);
                    for (i16 = 1; i16 < 1; i16++) {
                        Test.instanceCount += (long)Test.fFld;
                        Test.instanceCount += (-182L + (i16 * i16));
                        iArrFld[(int)(f - 1)] = (int)d2;
                    }
                case 148:
                    for (i18 = (int)(f); i18 < 1; ++i18) {
                        sArr1[i13] = (short)i19;
                    }
                    break;
                case 119:
                    for (i20 = 1; i20 < 1; i20 += 3) {
                        iArrFld[i20 + 1] = (int)Test.fFld;
                        Test.instanceCount += (8 + (i20 * i20));
                        iArrFld[(int)(f - 1)] = sFld;
                        sFld = (short)Test.instanceCount;
                        Test.instanceCount = sFld;
                        try {
                            i19 = (i19 / -63531);
                            i19 = (i14 / i20);
                            iArrFld[i13] = (-195 / i15);
                        } catch (ArithmeticException a_e) {}
                        i19 = Test.iFld1;
                        i19 = iFld;
                        switch (((i20 % 2) * 5) + 110) {
                        case 111:
                            if (b1) break;
                            iFld -= i16;
                            i17 -= i21;
                        case 119:
                            Test.instanceCount = i19;
                        default:
                            iFld += -30904;
                        }
                    }
                    break;
                case 122:
                    iArrFld[(i20 >>> 1) % N] = i13;
                case 106:
                    sFld -= (short)i22;
                    break;
                case 109:
                    i19 += (int)(((f * i19) + i17) - by);
                    break;
                case 133:
                    i14 += 25;
                case 137:
                    Test.fFld += (f * Test.fFld);
                    break;
                case 113:
                    sFld += (short)(f * f);
                    break;
                default:
                    if (true) break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
