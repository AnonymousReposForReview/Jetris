package tests.javafuzzer1938;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=161308748L;
    public long lFld=-39480L;
    public static float fFld=-19.455F;
    public static volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.100600);
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.fArrFld, 0.786F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        int i6=-57, i7=-54173, i8=40097, i9=215, i10=56595, i11=188;
        float f1=-1.22F;
        double d1=0.44150;

        Test.instanceCount = i5;
        for (i6 = 264; i6 > 15; i6--) {
            Test.instanceCount += i5;
            i5 -= 29;
            i7 += i6;
            f1 *= 129;
            i5 *= 1;
            for (i8 = 1; i8 < 7; ++i8) {
                f1 += (-8L + (i8 * i8));
                i5 = i7;
                for (i10 = 1; i10 < 2; ++i10) {
                    i5 = i7;
                    i11 %= (int)((long)(d1) | 1);
                    f1 = i7;
                    i7 = i7;
                }
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1);
    }

    public static void vMeth1(boolean b) {

        int i2=0, i3=25459, i4=-94, i12=-42750, i13=9, i14=14, i15=-74;
        double d=-1.55512;
        float f=-1.83F, fArr[]=new float[N];
        short s=-9717;

        FuzzerUtils.init(fArr, 1.323F);

        if (b) {
            i2 = (int)(((i2 - d) + (f - i2)) - (i2++));
            for (i3 = 201; i3 > 8; i3--) {
                i4 += i3;
            }
            vMeth2(i4);
            for (i12 = 13; i12 < 270; ++i12) {
                switch ((i12 % 10) + 82) {
                case 82:
                    for (i14 = i12; i14 < 6; i14++) {
                        i4 = i2;
                        i15 |= i2;
                        i4 = -107;
                        i15 += (int)Test.instanceCount;
                        i4 = s;
                        i4 = i13;
                        i13 *= 9;
                    }
                    break;
                case 83:
                    try {
                        i4 = (i14 / i3);
                        Test.iArrFld[i12 - 1] = (i14 / Test.iArrFld[i12 - 1]);
                        Test.iArrFld[i12] = (Test.iArrFld[i12] % i12);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 84:
                    fArr[i12] += 29592;
                case 85:
                    Test.instanceCount ^= Test.instanceCount;
                    break;
                case 86:
                    if (b) break;
                    break;
                case 87:
                    Test.iArrFld[i12] *= i3;
                case 88:
                    Test.instanceCount -= 27643;
                case 89:
                    f += (-7 + (i12 * i12));
                    break;
                case 90:
                    i4 <<= i3;
                case 91:
                    d -= Test.instanceCount;
                    break;
                }
            }
        } else if (b) {
            i13 = i3;
        }
        vMeth1_check_sum += (b ? 1 : 0) + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i3 + i4 + i12 +
            i13 + i14 + i15 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {

        float f2=45.711F;
        int i17=-11, i18=-200, i19=-168, i20=2457, i21=231, i22=208;
        boolean b1=false;
        byte by=-112;
        short s1=-18921;

        vMeth1(true);
        f2 = -91.428F;
        for (i17 = 3; i17 < 325; i17++) {
            switch ((((i17 >>> 1) % 1) * 5) + 10) {
            case 13:
                for (i19 = i17; i19 < 5; ++i19) {
                    if (b1) continue;
                    for (i21 = i19; i21 < 1; ++i21) {
                        by -= (byte)i21;
                        f2 = by;
                        i22 += (i21 * i21);
                        switch (((i19 % 10) * 5) + 54) {
                        case 61:
                            if (i22 != 0) {
                                vMeth_check_sum += l + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + (b1 ? 1 : 0)
                                    + i21 + i22 + by + s1;
                                return;
                            }
                            i18 += i19;
                            i20 += (i21 | i20);
                            by -= (byte)i20;
                            break;
                        case 96:
                            i18 -= i22;
                            break;
                        case 104:
                            s1 = (short)20887L;
                            break;
                        case 69:
                            i18 = i22;
                            break;
                        case 74:
                            f2 += (((i21 * i17) + l) - i18);
                            break;
                        case 78:
                            i18 += (i21 ^ l);
                            break;
                        case 82:
                            i22 += (-1 + (i21 * i21));
                            break;
                        case 76:
                            s1 += (short)i21;
                            break;
                        case 70:
                            Test.instanceCount >>>= i19;
                            break;
                        case 63:
                            Test.fArrFld = Test.fArrFld;
                            break;
                        }
                    }
                }
            default:
                i22 += i17;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + (b1 ? 1 : 0) + i21 + i22 + by + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=-18, i1=-9411, i23=78, i24=-23, i25=-46240, i26=-193, i27=-14, i28=-14, i29=11273, i30=187, i31=-14,
            i32=-7, i33=2;
        double d2=0.127548;
        long l1=-46491L;
        short s2=-22123;

        for (i = 1; i < 145; i += 3) {
            Test.dArrFld[i - 1] = i1;
            vMeth(Test.instanceCount);
            i1 += (int)Test.instanceCount;
        }
        i1 >>= (int)-1L;
        for (i23 = 253; i23 > 3; --i23) {
            d2 = d2;
            i1 += 13650;
            i1 += i23;
            d2 = Test.instanceCount;
            i1 <<= i;
        }
        i24 = i24;
        for (i25 = 15; 318 > i25; ++i25) {
            i24 = (int)Test.instanceCount;
            i1 += (i25 ^ i23);
            i1 += (int)(0.35F + (i25 * i25));
        }
        lFld -= Test.instanceCount;
        for (i27 = 7; i27 < 144; i27 += 3) {
            for (i29 = 233; i29 > i27; i29 -= 2) {
                i30 = (int)-1.37374;
            }
            for (l1 = 4; 122 > l1; ++l1) {
                for (i32 = 1; i32 < 5; ++i32) {
                    i30 >>= i27;
                    lFld = lFld;
                    Test.iArrFld[i27 + 1] += i31;
                }
                i1 += (int)(((l1 * Test.fFld) + i23) - i28);
                try {
                    Test.iArrFld[i27 - 1] = (i31 / i33);
                    i28 = (i28 / 133);
                    i24 = (Test.iArrFld[(int)(l1)] % Test.iArrFld[(int)(l1)]);
                } catch (ArithmeticException a_e) {}
                i28 -= i26;
                s2 *= (short)i;
            }
            lFld -= 140;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
