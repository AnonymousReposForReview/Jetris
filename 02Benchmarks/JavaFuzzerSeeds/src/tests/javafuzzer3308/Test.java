package tests.javafuzzer3308;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2488147049L;
    public static boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 68.626F);
        FuzzerUtils.init(Test.lArrFld, -2430137396L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {


        i6 += (int)-39L;
        vMeth1_check_sum += i6 + i7;
    }

    public static int iMeth(double d2, float f, int i4) {

        float f1=65.485F;
        int i5=9, i8=-8, i10=15, iArr[]=new int[N];
        short s=-18325;
        double d3=-1.7317;

        FuzzerUtils.init(iArr, 140);

        for (f1 = 13; 224 > f1; ++f1) {
            vMeth1(i5, i4);
            i5 += (8 + (f1 * f1));
        }
        i8 = 1;
        while (++i8 < 149) {
            f += i4;
            iArr[i8 - 1] = (int)Test.instanceCount;
            i4 = i8;
        }
        for (int i9 : iArr) {
            byte by=-52;
            i5 = -14;
            Test.instanceCount &= i8;
            if (Test.bFld) {
                s -= (short)i9;
                for (d3 = 1; d3 < 4; d3++) {
                    i9 += (int)(d3 * d3);
                    if (Test.bFld) break;
                }
            } else {
                by = (byte)i9;
            }
        }
        long meth_res = Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i4 + Float.floatToIntBits(f1) + i5 + i8
            + s + Double.doubleToLongBits(d3) + i10 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1) {

        int i2=134, i3=-23394, i11=-13, i12=2645, i13=76, i14=-1698, i15=42828, i16=5;
        float f2=-7.820F;
        byte by1=-116;
        short s1=-5221;

        i2 = 390;
        do {
            i3 <<= iMeth(d1, f2, i3);
            for (i11 = 1; i11 < 12; i11++) {
                if (Test.bFld) continue;
            }
            Test.instanceCount *= Test.instanceCount;
            i13 = 1;
            while (++i13 < 12) {
                by1 = (byte)i3;
            }
        } while ((i2 -= 3) > 0);
        i14 = 1;
        do {
            i12 &= i2;
            i12 += i14;
            i3 = s1;
            f2 += Test.instanceCount;
            for (i15 = 1; i15 < 11; ++i15) {
                i3 += 7;
                i16 -= i14;
            }
        } while (++i14 < 144);
        vMeth_check_sum += Double.doubleToLongBits(d1) + i2 + i3 + Float.floatToIntBits(f2) + i11 + i12 + i13 + by1 +
            i14 + s1 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=-173, i17=22074, i18=-8, i19=55327, i20=62353, i21=9, i22=-238, i23=-31653, i24=57292,
            iArr1[][]=new int[N][N];
        double d=-126.119030;
        short s2=5116;
        byte by2=-111;
        float f4=-41.54F;

        FuzzerUtils.init(iArr1, 13);

        if (Test.bFld) {
            for (i = 8; i < 372; ++i) {
                i1 <<= (int)Math.min((long)((i - i) * (d + i1)), Test.instanceCount++);
                vMeth(0.19019);
                i1 += i;
                for (i17 = 1; i17 < 69; i17++) {
                    i18 -= i18;
                    i18 ^= (int)Test.instanceCount;
                    i18 += (int)Test.instanceCount;
                    i18 += i;
                    Test.instanceCount ^= -2;
                    i18 *= i;
                    Test.instanceCount += (((i17 * s2) + Test.instanceCount) - i18);
                }
            }
            try {
                for (i19 = 6; i19 < 209; i19++) {
                    d -= i;
                    try {
                        i20 = (-544010336 / i);
                        i18 = (i18 / i17);
                        i18 = (i1 / -1660129631);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i19 + 1][i19] -= i;
                    i18 >>>= (int)Test.instanceCount;
                }
                Test.instanceCount = i19;
            }
            catch (NegativeArraySizeException exc2) {
                i18 >>>= i20;
                Test.instanceCount = 102;
                for (i21 = 8; i21 < 291; i21++) {
                    for (i23 = 89; i23 > 2; --i23) {
                        iArr1[i23][(i22 >>> 1) % N] = i21;
                        Test.instanceCount += (((i23 * by2) + i) - by2);
                        Test.lArrFld[i21 - 1] = -29412;
                        Test.instanceCount += (long)f4;
                        d += d;
                        i1 = i17;
                    }
                }
            }
            finally {
                f4 = i19;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
