package tests.javafuzzer3290;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:39:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5275751858829082713L;
    public static short sFld=28446;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-1991);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, boolean b, double d1) {

        float f1=0.937F;

        Test.sFld = (short)f1;
        i5 = i5;
        vMeth2_check_sum += i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1);
    }

    public static void vMeth1(long l) {

        int i3=-6, i4=3, i6=153, i7=53, i8=3, i9=66, i10=140, iArr1[]=new int[N];
        boolean b1=false;
        double d2=-27.66914;
        float f2=-73.22F;
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N], lArr1[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)13805);
        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(lArr1, 4L);
        FuzzerUtils.init(iArr1, -9);

        for (i3 = 10; i3 < 336; i3 += 3) {
            vMeth2(i3, b1, d2);
            i4 += i3;
            for (i6 = 1; i6 < 14; ++i6) {
                sArr[i6][i6 - 1] <<= (short)38;
                for (i8 = 1; i8 < 2; ++i8) {
                    i7 = i3;
                    f2 += l;
                    i7 = i3;
                    Test.instanceCount = 8L;
                    lArr = lArr1[i3 + 1];
                    try {
                        i9 = (-17172 % iArr1[i6]);
                        i7 = (iArr1[i6 + 1] % iArr1[i8 - 1]);
                        i4 = (31994 / i10);
                    } catch (ArithmeticException a_e) {}
                    i10 = -30324;
                }
                if (b1) break;
                l = Test.instanceCount;
            }
        }
        vMeth1_check_sum += l + i3 + i4 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9 +
            Float.floatToIntBits(f2) + i10 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        int i1=-7, i2=28514, i11=-246, i12=-12, i13=6, i14=-1, iArr[]=new int[N];
        double d=11.86995;
        float f=-123.204F;

        FuzzerUtils.init(iArr, -8);

        for (i1 = 11; i1 < 187; ++i1) {
            iArr[i1 + 1] %= (int)(Test.instanceCount | 1);
            i2 >>= (int)Long.reverseBytes((long)((Test.instanceCount + i2) * (-38 - d)));
            Test.instanceCount += (i1 * f);
            vMeth1(-938L);
            i2 -= i;
            for (i11 = i1; 9 > i11; ++i11) {
                i2 >>= i11;
                i *= (int)Test.instanceCount;
                for (i13 = 1; i13 < 1; i13++) {
                    i14 += (((i13 * f) + i12) - i1);
                    i = i12;
                    i14 += (i13 * i13);
                    f += (float)d;
                }
            }
            Test.instanceCount += (((i1 * i) + i14) - i14);
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=13, i16=45445, i17=6, i18=1, i19=-1, i20=-2, i21=-22512, i22=-204, iArr2[]=new int[N];
        boolean b2=true;
        long l1=58L, lArr2[]=new long[N];
        float f3=0.380F, fArr[]=new float[N];

        FuzzerUtils.init(lArr2, -23450L);
        FuzzerUtils.init(fArr, -19.235F);
        FuzzerUtils.init(iArr2, -234);

        vMeth(i15);
        lArr2[(-11 >>> 1) % N] *= i15;
        i16 = 1;
        while (++i16 < 294) {
            Test.instanceCount = Test.instanceCount;
        }
        Test.instanceCount *= (long)1.31582;
        for (i17 = 161; i17 > 6; i17 -= 3) {
            i15 = (int)Test.instanceCount;
        }
        for (short s : Test.sArrFld) {
            b2 = b2;
            for (l1 = 63; l1 > 2; --l1) {
                i15 -= (int)Test.instanceCount;
                fArr[(int)(l1)] += f3;
                f3 = i19;
                Test.instanceCount &= i19;
            }
            i18 <<= i18;
            switch (((208 >>> 1) % 7) + 61) {
            case 61:
                i20 = 1;
                do {
                    Test.instanceCount += i20;
                } while (++i20 < 63);
                iArr2[(i18 >>> 1) % N] = (int)Test.instanceCount;
                Test.instanceCount <<= -64985;
                Test.instanceCount -= l1;
                break;
            case 62:
                if (b2) break;
                break;
            case 63:
                i18 *= 185;
                i15 = i17;
                break;
            case 64:
                iArr2[(-43700 >>> 1) % N] = 14;
                Test.instanceCount = i16;
                break;
            case 65:
                for (i21 = 3; 63 > i21; ++i21) {
                    i19 *= i21;
                }
                Test.instanceCount -= 45989;
                fArr[(i15 >>> 1) % N] = i17;
                break;
            case 66:
                Test.instanceCount -= 215;
                break;
            case 67:
                lArr2[(i16 >>> 1) % N] <<= i16;
                break;
            default:
                f3 = i16;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
