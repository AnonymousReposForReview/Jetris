package tests.javafuzzer104;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=60137L;
    public static double dFld=-33.27531;
    public static int iFld=103;
    public static float fFld=-2.174F;
    public static byte byFld=122;
    public static volatile boolean bFld=false;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 91.1010F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-13, i6=147, i7=-101, i8=2, i9=-14, i10=5, iArr1[][]=new int[N][N];
        byte by=118, byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 40);
        FuzzerUtils.init(lArr, 28525L);
        FuzzerUtils.init(byArr, (byte)119);

        for (i5 = 10; 182 > i5; i5++) {
            for (i7 = 1; i7 < 9; i7++) {
                Test.dFld += i6;
                for (i9 = i7; i9 < 2; i9++) {
                    i10 += (int)Test.instanceCount;
                    Test.dFld = i10;
                    switch ((i5 % 8) + 108) {
                    case 108:
                        iArr1[i7 - 1][i7] -= i10;
                        Test.instanceCount += i9;
                        Test.instanceCount += i9;
                        Test.dFld += -86;
                        break;
                    case 109:
                        Test.instanceCount += i9;
                        Test.fArrFld[i9] += (float)-1.46657;
                        lArr[i7 + 1][i5 - 1] = i7;
                        break;
                    case 110:
                        by += (byte)(((i9 * Test.instanceCount) + i7) - i5);
                        break;
                    case 111:
                        i10 *= i6;
                        break;
                    case 112:
                        i6 = i5;
                    case 113:
                        iArr1[i7][i9] <<= i7;
                        break;
                    case 114:
                        byArr[i7 - 1] += (byte)Test.dFld;
                        break;
                    case 115:
                        Test.instanceCount >>= -9;
                        break;
                    default:
                        i8 = i5;
                    }
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + by + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        short s=-22972;
        int i11=15523, i12=57492, i13=-11096, i14=117, i15=-5, iArr2[]=new int[N];
        float f=1.1014F;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)-117);
        FuzzerUtils.init(iArr2, -40998);

        vMeth1();
        Test.iFld += Test.iFld;
        s <<= (short)Test.iFld;
        for (i11 = 2; i11 < 318; i11++) {
            Test.instanceCount -= Test.iFld;
            byArr1[i11 + 1] -= (byte)i11;
            i12 += i12;
            for (i13 = 1; i13 < 5; ++i13) {
                switch ((i11 % 8) + 113) {
                case 113:
                    i15 -= (int)f;
                    i15 <<= -239;
                    s += (short)(i13 * i13);
                    Test.dFld -= Test.dFld;
                    break;
                case 114:
                case 115:
                    Test.instanceCount -= -14L;
                    i15 += i12;
                case 116:
                    s *= (short)158;
                case 117:
                    i15 -= i11;
                    break;
                case 118:
                    i12 ^= i12;
                    break;
                case 119:
                    iArr2[i13] += i11;
                    break;
                case 120:
                    f = f;
                    break;
                default:
                    Test.iFld <<= Test.iFld;
                }
            }
        }
        vMeth_check_sum += s + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr1) +
            FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(int i2, int i3, int i4) {

        int i16=21, i17=12, i18=8, i19=87, i20=-641, i21=-46069, i22=253, iArr3[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        float f1=-2.588F;

        FuzzerUtils.init(iArr3, -3);
        FuzzerUtils.init(bArr, false);

        vMeth();
        Test.instanceCount /= 13;
        iArr3[(i4 >>> 1) % N] -= (int)Test.instanceCount;
        i4 = (int)Test.instanceCount;
        i16 = 1;
        while (++i16 < 363) {
            bArr[i16 - 1] = b;
            i2 += (int)f1;
        }
        for (i17 = 17; i17 < 392; i17++) {
            i3 += -121;
            for (i19 = 1; i19 < 5; ++i19) {
                i20 = (int)-1040033946L;
            }
            for (i21 = i17; i21 < 5; ++i21) {
                i3 = Test.iFld;
                if (b) continue;
                i22 += i21;
            }
        }
        long meth_res = i2 + i3 + i4 + i16 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i17 + i18 + i19 + i20 + i21 + i22
            + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-239, i1=184, i23=45891, i24=36687, i25=171, i26=0, i27=123, iArr[]=new int[N];
        long l=3L, lArr1[]=new long[N];
        short s1=-27931;
        double d=-1.39980;

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr1, 1595587531L);

        Test.fArrFld = (Test.fArrFld = (Test.fArrFld = (Test.fArrFld = Test.fArrFld)));
        i = 1;
        while (++i < 365) {
            switch ((i % 3) + 111) {
            case 111:
            case 112:
                i1 = iArr[i];
                iArr = (iArr = (iArr = (iArr = iArr)));
                i1 *= (int)(i % (((Test.instanceCount++) - iMeth(i1, 3680, Test.iFld)) | 1));
                break;
            case 113:
                iArr[(14 >>> 1) % N] *= i;
                break;
            default:
                if (Test.bFld) {
                    Test.iFld = (int)Test.dFld;
                    i23 = 1;
                    do {
                        Test.iFld = i;
                        Test.instanceCount += (i23 + i23);
                        Test.iFld -= 12712;
                    } while (++i23 < 69);
                    i1 -= (int)Test.fFld;
                    i24 = 1;
                    do {
                        Test.instanceCount = i1;
                        Test.instanceCount %= (i24 | 1);
                        for (l = 1; l < 1; l++) {
                            i25 = 124;
                            i25 = i;
                            iArr[i24 + 1] -= -7162;
                            iArr[i24 - 1] = (int)Test.instanceCount;
                            Test.fFld += s1;
                            d += i24;
                        }
                        Test.iFld += (((i24 * Test.instanceCount) + Test.fFld) - l);
                        for (i26 = 1; i26 < 1; ++i26) {
                            d = i;
                            Test.byFld += (byte)i26;
                            lArr1[i + 1] = -3798022699L;
                            Test.iFld = -11;
                        }
                    } while (++i24 < 69);
                } else if (Test.bFld) {
                    iArr[i] -= (int)d;
                } else {
                    i25 *= (int)Test.fFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
