package tests.javafuzzer2982;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:26:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static int iFld=-7;
    public static boolean bFld=false;
    public int iFld1=162;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -223);
        FuzzerUtils.init(Test.lArrFld, 3340784793L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, int i1) {

        int i2=-45, i3=-42138, i4=6, i5=-57654, i6=12, i7=102;
        short s=-12266;
        float f=106.212F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i2 = 3; i2 < 125; ++i2) {
            try {
                i1 = (35 / Test.iFld);
                i1 = (43254 / i3);
                Test.iFld = (Test.iFld % -524210481);
            } catch (ArithmeticException a_e) {}
            for (i4 = 1; 13 > i4; i4 += 2) {
                i5 = i1;
                for (i6 = 3; i6 > 1; i6 -= 3) {
                    i5 |= (int)l;
                    Test.iFld >>= (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    i5 += i1;
                    if (true) {
                        s -= (short)-60.63044;
                        f -= i1;
                        bArr[i6 - 1] = Test.bFld;
                    } else {
                        i5 = i3;
                        i7 += Test.iFld;
                    }
                }
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + i5 + i6 + i7 + s + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth(int i) {


        Test.instanceCount += Test.iFld;
        vMeth(Test.instanceCount, i);
        Test.instanceCount <<= i;
        long meth_res = i;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i8=5588, i9=-32321, i10=8, i11=-35510, i12=-107, i13=0, i14=-32380;
        double d=-18.99032;
        float f1=121.304F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.756F);

        if (true) {
            lMeth(Test.iFld);
            Test.instanceCount ^= Test.instanceCount;
            Test.iFld = Test.iFld;
        } else if (true) {
            for (i8 = 5; i8 < 291; i8++) {
                Test.iArrFld[i8 + 1] = -1750;
                for (i10 = 1; i10 < 6; i10++) {
                    d -= -36540;
                    d *= i10;
                }
                Test.instanceCount += -10L;
                for (i12 = 6; i12 > 1; --i12) {
                    for (f1 = 1; f1 < 2; f1++) {
                        Test.instanceCount += (long)(f1 + i8);
                        fArr[(int)(f1 + 1)] = i11;
                        i9 = (int)Test.instanceCount;
                    }
                }
            }
        } else {
            Test.iFld = i10;
        }
        long meth_res = i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + Float.floatToIntBits(f1) + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-1.46996, dArr[]=new double[N];
        int i15=-52568, i16=-20617, i17=-14915, i18=-9, i19=1, i20=-53, i21=0, i22=54385;
        float f2=-1.1016F;
        short s1=9921;
        byte by=81;

        FuzzerUtils.init(dArr, 2.113240);

        Test.iFld = (int)((-(Test.instanceCount++)) - ((Test.iFld + Test.iFld) - iMeth()));
        for (d1 = 19; d1 < 306; ++d1) {
            for (i16 = 5; i16 < 88; ++i16) {
                Test.iFld = (int)f2;
                i17 += i16;
                Test.bFld = Test.bFld;
                f2 += i16;
            }
            i15 = i15;
            Test.iArrFld[(int)(d1)] = (int)Test.instanceCount;
            dArr[(int)(d1)] = d1;
            Test.iArrFld[(int)(d1 + 1)] = i17;
            i18 = 1;
            while (++i18 < 88) {
                Test.instanceCount = (long)f2;
                for (i19 = 1; i19 < 1; ++i19) {
                    Test.iArrFld[i18 + 1] = s1;
                    Test.iArrFld[i19] += -17067;
                }
                i15 = 10;
                Test.instanceCount = Test.instanceCount;
                switch ((((-3 >>> 1) % 2) * 5) + 32) {
                case 37:
                    Test.lArrFld[(int)(d1 + 1)] /= 42700;
                    Test.lArrFld[i18] = Test.instanceCount;
                    i15 >>= i19;
                    i20 += (i18 * Test.instanceCount);
                    break;
                case 34:
                    Test.instanceCount += (235 + (i18 * i18));
                    Test.iFld += i18;
                    break;
                }
                for (i21 = i18; i21 < 1; ++i21) {
                    by &= (byte)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    i20 >>= i18;
                    i22 += (((i21 * iFld1) + i17) - i22);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
