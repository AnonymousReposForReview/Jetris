package tests.javafuzzer2701;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=188L;
    public static volatile byte byFld=-12;
    public static volatile int iFld=-8;
    public static double dFld=-2.54869;
    public static boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld1[]=new int[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.761F);
        FuzzerUtils.init(Test.iArrFld1, -10);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=0, i7=-38048, i8=195, i9=-179, iArr1[]=new int[N];
        boolean b1=true;
        double d=2.120173;
        short s=-15300;
        float f1=0.302F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -31798);
        FuzzerUtils.init(lArr, 11L);

        i6 = 1;
        while (++i6 < 142) {
            try {
                Test.iFld = (-248 / iArr1[i6 + 1]);
                Test.iFld = (-1677964065 % i6);
                Test.iFld = (-18948 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            if (b1) break;
            switch (((i6 % 4) * 5) + 40) {
            case 58:
                for (d = 1; d < 11; d++) {
                    Test.instanceCount = i7;
                    lArr = FuzzerUtils.long1array(N, (long)7L);
                    i7 -= i7;
                    switch ((i6 % 2) + 115) {
                    case 115:
                        Test.instanceCount = Test.iFld;
                        i7 *= i7;
                        for (i8 = (int)(d); i8 < 2; i8++) {
                            Test.dFld = Test.iFld;
                            iArr1 = iArr1;
                            i9 += (((i8 * i8) + Test.iFld) - i8);
                        }
                    case 116:
                        Test.iFld += (int)(d * s);
                    }
                }
            case 42:
                f1 *= -63156;
                break;
            case 52:
            case 47:
                iArr1[i6 - 1] = (int)f1;
            default:
                i7 += (int)d;
            }
        }
        vMeth_check_sum += i6 + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i7 + i8 + i9 + s + Float.floatToIntBits(f1)
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i4=0, i5=22, i10=-86, i11=157, i12=-7, i13=-90;
        float f2=-2.990F;

        for (i4 = 3; i4 < 241; ++i4) {
            vMeth();
            if (Test.bFld) {
                if (Test.bFld) continue;
            } else {
                for (i10 = 1; i10 < 7; i10++) {
                    switch ((((i4 >>> 1) % 10) * 5) + 81) {
                    case 120:
                        i11 = i10;
                        Test.iFld <<= (int)Test.instanceCount;
                        if (false) break;
                        for (i12 = 1; i12 < 2; ++i12) {
                            i13 <<= (int)2102273221119563812L;
                            i5 += (((i12 * i11) + Test.iFld) - Test.instanceCount);
                            i11 -= 53380;
                            Test.fArrFld[i12 - 1] -= i12;
                            try {
                                i5 = (-64672 / i11);
                                i5 = (362070841 % i11);
                                Test.iArrFld1[i10] = (92 % i12);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    case 111:
                        Test.instanceCount >>>= i13;
                        break;
                    case 129:
                        f2 = i4;
                        break;
                    case 92:
                        i5 <<= i13;
                        break;
                    case 116:
                        i11 *= Test.iFld;
                        break;
                    case 95:
                        i11 |= i4;
                        break;
                    case 89:
                        i11 += i10;
                        break;
                    case 85:
                        Test.instanceCount = i10;
                        break;
                    case 115:
                        i11 += (-2 + (i10 * i10));
                        break;
                    case 83:
                        Test.iFld += i10;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(float f, int i3, boolean b) {

        int i14=-5, i15=65520, i16=-4, i17=-3, i18=-254, i19=252, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 33499);

        iArr[(i3 >>> 1) % N] -= (int)1717790625L;
        i3 *= (Math.max(iMeth(), Test.iFld) - i3);
        i14 = 304;
        while ((i14 -= 2) > 0) {
            if (Test.bFld) continue;
            for (i15 = 1; i15 < 10; ++i15) {
                switch ((i14 % 10) + 122) {
                case 122:
                    if (b) continue;
                case 123:
                    for (i17 = 1; i17 < 2; ++i17) {
                        i3 += (int)f;
                        Test.instanceCount += (((i17 * i14) + Test.instanceCount) - i15);
                        Test.instanceCount += Test.instanceCount;
                        switch ((i17 % 1) + 11) {
                        case 11:
                            f += (i17 * i17);
                            Test.iArrFld1[i14 - 1] = i15;
                            break;
                        default:
                            i3 = i14;
                        }
                    }
                    break;
                case 124:
                    i18 += (i15 - i15);
                    break;
                case 125:
                    Test.iArrFld1[i14] -= (int)Test.instanceCount;
                    break;
                case 126:
                    Test.instanceCount += (19327 + (i15 * i15));
                case 127:
                    iArr[i15] *= (int)Test.dFld;
                    break;
                case 128:
                    Test.iArrFld1[i14 + 1] = i3;
                    break;
                case 129:
                    i18 += (i15 * i15);
                    break;
                case 130:
                    iArr[i14 - 1] -= (int)-46771L;
                    break;
                case 131:
                    iArr[i14] *= i19;
                    break;
                default:
                    Test.dFld += 11123;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + (b ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=57977, i1=-10, i2=6, i20=48, i21=51620;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 548683322257322222L);

        for (i = 6; i < 395; i++) {
            switch ((i % 2) + 77) {
            case 77:
                i2 = 1;
                do {
                    float f3=43.727F;
                    iArrFld[i2 + 1][i] = (Test.byFld - ((i1 + -61478) - i2));
                    if (bMeth(f3, i2, false)) break;
                    for (i20 = 1; i20 < 1; ++i20) {
                        short s1=-11057;
                        switch ((i2 % 2) + 125) {
                        case 125:
                            i21 += (((i20 * Test.instanceCount) + i21) - i);
                            switch (((i % 2) * 5) + 71) {
                            case 75:
                                switch ((i2 % 10) + 9) {
                                case 9:
                                    Test.iFld += (int)Test.instanceCount;
                                    Test.instanceCount = -6;
                                    i21 = i1;
                                    break;
                                case 10:
                                case 11:
                                    i1 = (int)Test.instanceCount;
                                    i21 = (int)98.553F;
                                    i1 = 3;
                                    Test.bFld = true;
                                case 12:
                                    try {
                                        i1 = (3925 % iArrFld[i20 + 1][i20]);
                                        i21 = (i1 / 26432);
                                        Test.iFld = (i20 / i20);
                                    } catch (ArithmeticException a_e) {}
                                    sArrFld[i2 - 1] += (short)i21;
                                    Test.instanceCount += (((i20 * Test.byFld) + Test.instanceCount) - i20);
                                    break;
                                case 13:
                                    iArrFld[i][(i1 >>> 1) % N] -= s1;
                                    break;
                                case 14:
                                    i1 >>= i20;
                                    break;
                                case 15:
                                    Test.iFld += -1;
                                case 16:
                                    if (Test.bFld) {
                                        Test.instanceCount += (long)(-1.726F + (i20 * i20));
                                    } else if (true) {
                                        s1 *= s1;
                                        switch ((i20 % 2) + 3) {
                                        case 3:
                                            Test.iFld *= i1;
                                            break;
                                        case 4:
                                            Test.dFld = s1;
                                            i21 = i1;
                                            break;
                                        default:
                                            if (false) continue;
                                        }
                                    } else if (Test.bFld) {
                                        i21 = (int)-216L;
                                    }
                                case 17:
                                    Test.iFld -= (int)Test.dFld;
                                    break;
                                case 18:
                                    Test.iFld = i;
                                    break;
                                }
                                break;
                            case 73:
                                i21 = (int)Test.instanceCount;
                                break;
                            default:
                                lArr1[i - 1] = Test.instanceCount;
                            }
                        case 126:
                            Test.iArrFld1[i + 1] *= s1;
                            break;
                        default:
                            i1 += (5 + (i20 * i20));
                        }
                    }
                } while (++i2 < 65);
                break;
            case 78:
                lArr1[i] = i21;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
