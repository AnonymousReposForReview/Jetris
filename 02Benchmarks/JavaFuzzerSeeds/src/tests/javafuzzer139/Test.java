package tests.javafuzzer139;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:01:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2864001828936871988L;
    public float fFld=1.303F;
    public static float fFld1=65.10F;
    public static volatile int iFld1=14;
    public static double dFld=-1.63370;
    public boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6) {

        int i7=33914, i8=-12, i9=59016, i10=1, iArr[]=new int[N];
        byte by2=-89;
        boolean b1=false;

        FuzzerUtils.init(iArr, -16378);

        for (i7 = 218; i7 > 4; i7 -= 3) {
            double d1=-1.52383;
            switch (((i7 % 2) * 5) + 41) {
            case 47:
                Test.fFld1 += (float)d1;
                i9 = 22;
                while (--i9 > 0) {
                    i6 = i8;
                    i10 = 1;
                    do {
                        i6 -= (int)Test.fFld1;
                        by2 = (byte)Test.instanceCount;
                        iArr[i9 + 1] <<= i7;
                        Test.instanceCount &= 64954L;
                        i8 *= (int)d1;
                        i8 = i7;
                        i6 += (int)93L;
                    } while (++i10 < 1);
                    b1 = b1;
                    i6 = 1;
                }
                break;
            case 44:
                iArr[i7 - 1] = (int)Test.instanceCount;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + by2 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i4, boolean b, int i5) {

        double d=0.17756;
        short s=-30553;
        long l=11L;
        int i11=-4, i12=13759, i13=-46, i14=24312, i15=38579, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -2);

        try {
            Test.fFld1 = (float)(d--);
            s = (short)lMeth(i5);
        }
        catch (ArithmeticException exc1) {
            if (b) {
                Test.instanceCount *= (long)Test.fFld1;
            } else if (b) {
                iArr1[(i4 >>> 1) % N] *= i5;
                i4 = s;
                for (l = 7; 155 > l; l++) {
                    i11 = (int)35359L;
                    for (i12 = (int)(l); i12 < 11; i12++) {
                        i13 = i11;
                    }
                }
                Test.instanceCount += (long)24.33018;
            } else if (false) {
                for (i14 = 8; i14 < 146; i14++) {
                    i13 ^= i5;
                    s *= (short)i5;
                }
            }
        }
        vMeth1_check_sum += i4 + (b ? 1 : 0) + i5 + Double.doubleToLongBits(d) + s + l + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(byte by1, int i2, int i3) {

        float f1=1.720F;
        boolean b2=false;
        double d2=0.51545, dArr[]=new double[N];
        short s1=31435;
        int i16=133, i17=-102, i18=12, i19=-6, i20=-144, iArr2[]=new int[N];

        FuzzerUtils.init(dArr, 0.76451);
        FuzzerUtils.init(iArr2, 64949);

        dArr[(i3 >>> 1) % N] -= ((++f1) + ((Test.instanceCount - Test.instanceCount) + (Test.instanceCount * i2)));
        vMeth1(i3, b2, i3);
        f1 = (float)d2;
        Test.instanceCount += s1;
        Test.instanceCount <<= by1;
        i16 = 1;
        do {
            for (i17 = 1; i17 < 8; ++i17) {
                i3 += i18;
                i18 = i2;
                for (i19 = i16; i19 < 2; i19++) {
                    Test.instanceCount += i19;
                    Test.instanceCount = s1;
                }
                iArr2[i16] += s1;
                d2 *= -6038;
                Test.instanceCount += Test.instanceCount;
            }
        } while (++i16 < 213);
        vMeth_check_sum += by1 + i2 + i3 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) + Double.doubleToLongBits(d2) + s1 +
            i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr3) {

        int i=5, i1=-25791, i21=17562, i22=224, i23=7, i24=-62908, iArr3[]=new int[N];
        byte by3=-49;
        short s2=-9958;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, -2.2F);
        FuzzerUtils.init(iArr3, 59722);
        FuzzerUtils.init(lArr, -3890231414880726400L);

        for (i = 1; i < 282; ++i) {
            fFld += Test.instanceCount;
            vMeth(by3, -8, i1);
            i1 = (int)Test.instanceCount;
            if (true) {
                Test.iFld1 &= Test.iFld1;
                Test.instanceCount -= (long)fFld;
                i1 ^= Test.iFld1;
            } else {
                fArr[i - 1] = (float)Test.dFld;
            }
            iArr3[i] = (int)Test.fFld1;
            Test.iFld1 = Test.iFld1;
            for (i21 = i; i21 < 89; i21++) {
                i1 += (i21 - Test.iFld1);
                Test.instanceCount += -3376448814220946215L;
                s2 = (short)i;
                i22 = (int)-20.354F;
                lArr[i - 1][i21] += Test.iFld1;
            }
            Test.iFld1 += (int)Test.instanceCount;
        }
        Test.instanceCount >>= i1;
        i23 = 1;
        do {
            switch (((i23 % 9) * 5) + 92) {
            case 104:
                Test.fFld1 = i;
                i24 = 118;
                while ((i24 -= 2) > 0) {
                    Test.iFld1 -= i22;
                    Test.instanceCount += i21;
                    if (bFld) break;
                }
                fFld += i23;
                i1 /= (int)(Test.instanceCount | 1);
                break;
            case 134:
                Test.iFld1 -= i21;
                by3 = (byte)Test.iFld1;
                break;
            case 94:
                iArr3[i23 - 1] = i23;
                break;
            case 100:
                i1 -= 42965;
                break;
            case 126:
                Test.dFld = 1;
            case 99:
                Test.instanceCount += (i23 | s2);
                break;
            case 127:
                Test.instanceCount += i23;
            case 130:
                Test.instanceCount = i;
                break;
            case 119:
                if (bFld) continue;
                break;
            default:
                Test.instanceCount = i1;
            }
        } while (++i23 < 213);


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
