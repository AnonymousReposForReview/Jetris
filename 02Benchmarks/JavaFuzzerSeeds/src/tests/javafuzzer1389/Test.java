package tests.javafuzzer1389;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:34:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=22L;
    public static double dFld=79.39318;
    public float fFld=34.831F;
    public boolean bFld=false;
    public volatile int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static int iArrFld1[][]=new int[N][N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 45956);
        FuzzerUtils.init(Test.fArrFld, -2.647F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(double d1) {

        int i5=-11, i6=14, i7=-28104, i8=3, i9=2;
        byte by=122;

        i5 = 1;
        while (++i5 < 152) {
            for (i6 = 1; i6 < 10; i6++) {
                Test.instanceCount += (long)27.7F;
                Test.iArrFld1[i6 - 1][i6 + 1] = (int)Test.instanceCount;
                if (i7 != 0) {
                }
                by -= (byte)i5;
                for (i8 = i6; i8 < 2; i8++) {
                    Test.iArrFld1[i8][i8] = i7;
                    Test.fArrFld[i6 + 1] = i5;
                    switch ((i8 % 2) + 11) {
                    case 11:
                        i9 += i8;
                        i7 <<= 151;
                        i9 += by;
                        i9 <<= i5;
                    case 12:
                        Test.instanceCount += (i8 | Test.instanceCount);
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i5 + i6 + i7 + by + i8 + i9;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth(long l1, int i4) {


        i4 = ((i4 * (i4 *= i4)) + (byMeth(Test.dFld) + -15438));
        vMeth_check_sum += l1 + i4;
    }

    public int iMeth(long l, double d, int i1) {

        int i2=9, i3=-55, i10=-15768, i11=-10, i12=-206, i13=-10;
        boolean b=true;
        float f=-109.595F;

        iArrFld[(i1 >>> 1) % N] >>= (i1--);
        for (i2 = 13; i2 < 245; i2++) {
            i3 = i1;
            switch ((((iArrFld[i2 - 1]++) >>> 1) % 2) + 117) {
            case 117:
                d *= (++lArrFld[i2 + 1]);
                break;
            case 118:
                try {
                    i3 = (i2 % iArrFld[i2 + 1]);
                    i1 = (i3 / i2);
                    i1 = (iArrFld[i2 + 1] % 249);
                } catch (ArithmeticException a_e) {}
                vMeth(Test.instanceCount, i1);
                for (i10 = 7; i10 > 1; --i10) {
                    if (b) break;
                    for (i12 = i10; 2 > i12; i12++) {
                        Test.instanceCount += (((i12 * i13) + f) - i11);
                        Test.iArrFld1[i2] = iArrFld;
                        Test.instanceCount *= (long)Test.dFld;
                    }
                    i1 -= i10;
                    Test.instanceCount ^= i2;
                }
            default:
                i3 -= (int)f;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i1 + i2 + i3 + i10 + i11 + (b ? 1 : 0) + i12 + i13 +
            Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=140, i14=-8, i15=-14862, i16=-26918, i17=103, i18=68, i19=-1, i20=3, i21=-43551, i22=52569, i23=162;
        short s=-23162;

        i += iMeth(Test.instanceCount, 2.96765, i);
        for (i14 = 2; 189 > i14; i14++) {
            i = i14;
            Test.instanceCount = i15;
        }
        Test.iArrFld1[(i14 >>> 1) % N][(i14 >>> 1) % N] <<= i;
        if (bFld) {
            Test.instanceCount *= (long)Test.dFld;
            fFld += Test.instanceCount;
            Test.iArrFld1[(i14 >>> 1) % N][(i14 >>> 1) % N] += (int)Test.instanceCount;
        } else {
            iArrFld[(i14 >>> 1) % N] = i15;
            i16 = 1;
            do {
                i17 = 1;
                do {
                    i15 += (i17 * i17);
                    for (i18 = i17; i18 < 1; ++i18) {
                        Test.instanceCount = -64522;
                        Test.dFld += s;
                        Test.iArrFld1[i16 + 1][i18 + 1] += i14;
                        s ^= (short)i14;
                        i15 += i18;
                        i >>>= (int)Test.instanceCount;
                    }
                    switch (((i16 % 1) * 5) + 58) {
                    case 62:
                        Test.instanceCount = 4838107864448250316L;
                        Test.iArrFld1 = Test.iArrFld1;
                        i19 = i19;
                        break;
                    default:
                        for (i20 = 1; i20 < 1; ++i20) {
                            i15 <<= i20;
                        }
                        for (i22 = 1; i22 < 1; i22++) {
                            i19 -= i;
                            i += (((i22 * Test.instanceCount) + i22) - i22);
                        }
                    }
                    Test.instanceCount = i16;
                } while (++i17 < 78);
            } while (++i16 < 321);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
