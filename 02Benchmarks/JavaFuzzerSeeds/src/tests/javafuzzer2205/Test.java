package tests.javafuzzer2205;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:16:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5661443098390088593L;
    public static byte byFld=-54;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 113.948F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, double d, int i10) {

        long l3=-2767462479704848102L, lArr[]=new long[N];
        int i11=29572, i12=-176, iArr1[]=new int[N];
        boolean b=true;
        float f1=1.255F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 3067421642L);
        FuzzerUtils.init(iArr1, 32603);
        FuzzerUtils.init(byArr, (byte)-63);
        FuzzerUtils.init(fArr, 0.356F);

        l3 = 1;
        do {
            i11 = 1;
            do {
                lArr = lArr;
                iArr1 = iArr1;
                if (b) {
                    if (b) break;
                    byArr[i11] = (byte)l3;
                    i12 = 1;
                    while (++i12 < 1) {
                        i10 /= (int)(i9 | 1);
                        i10 = i11;
                        iArr1[i11 + 1] ^= i12;
                        i9 -= -52;
                        fArr[i12] -= i12;
                        i10 -= (int)97L;
                        iArr1[i12 - 1] = i12;
                    }
                } else if (b) {
                    f1 *= 5;
                }
            } while (++i11 < 5);
        } while (++l3 < 363);
        long meth_res = i9 + Double.doubleToLongBits(d) + i10 + l3 + i11 + (b ? 1 : 0) + i12 + Float.floatToIntBits(f1)
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, long l2) {

        int i8=-43833, i13=-143, i14=137, i15=-13, i16=-13, i17=-63180, i18=-21013, iArr2[]=new int[N];
        double d1=-2.57457;
        float f2=-36.919F;

        FuzzerUtils.init(iArr2, -29892);

        i8 = (i8--);
        i8 = i8;
        i8 = ((i8--) - (i8 * iMeth(i8, d1, i8)));
        i8 <<= -7;
        i13 = 1;
        while (++i13 < 381) {
            iArr2[i13 + 1] = -13;
            f2 = l1;
            iArr2[i13 + 1] /= (int)(i8 | 1);
            iArr2[i13 + 1] = i8;
        }
        for (i14 = 7; i14 < 180; ++i14) {
            for (i16 = 1; i16 < 9; ++i16) {
                i18 = 2;
                while (--i18 > 0) {
                    i17 |= (int)l2;
                    i8 -= (int)f2;
                }
                i8 <<= 102;
            }
        }
        vMeth1_check_sum += l1 + l2 + i8 + Double.doubleToLongBits(d1) + i13 + Float.floatToIntBits(f2) + i14 + i15 +
            i16 + i17 + i18 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=-61563, i4=-51193, i5=-62392, i6=5, i7=4091, iArr[]=new int[N];
        long l=473850664077136211L, lArr1[]=new long[N];
        float f=2.647F;

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr1, -54024L);

        Test.instanceCount >>= (iArr[(i1 >>> 1) % N] + (i--));
        for (i3 = 2; 383 > i3; i3++) {
            for (l = 1; l < 4; ++l) {
                for (i6 = 1; i6 < 2; i6++) {
                    byte by=73;
                    f += (((i6 * i5) + i7) - i7);
                    i7 = (--i7);
                    vMeth1(Test.instanceCount, Test.instanceCount);
                    lArr1[i3 + 1] = i3;
                    i -= by;
                    i4 += (i6 + l);
                    Test.fArrFld[(int)(l)] = l;
                }
                i1 *= (int)l;
                iArr[(int)(l)] = i;
                i5 *= -14078;
                Test.byFld += (byte)(((l * i) + i) - i1);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + l + i5 + i6 + i7 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=6, i20=-13725, i21=-66, i22=127, i23=5, i24=88, i25=-52721, i26=-42, i27=55796, iArr3[]=new int[N],
            iArr4[]=new int[N];
        short s=-1750;
        double d2=0.33247;
        long l4=-3L, lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, 5);
        FuzzerUtils.init(lArr2, 60L);
        FuzzerUtils.init(iArr4, 170);

        vMeth(i19, -25840, 188);
        i19 += i19;
        i19 %= (int)(i19 | 1);
        for (i20 = 8; i20 < 138; i20++) {
            float f3=0.720F;
            Test.instanceCount += (long)f3;
            for (i22 = 8; i22 < 193; ++i22) {
                iArr3[i20] -= s;
                Test.instanceCount += i19;
                for (i24 = 1; i24 < 2; ++i24) {
                    Test.instanceCount *= (long)d2;
                    i25 = 13;
                    i25 = 31049;
                }
                Test.instanceCount = Test.instanceCount;
                iArr3[i20] >>= i23;
            }
            Test.byFld += (byte)(-27579 + (i20 * i20));
            f3 *= i19;
            lArr2[i20] <<= i24;
            for (i26 = 1; i26 < 193; i26++) {
                d2 -= i21;
                f3 -= i20;
                s += (short)i20;
                i23 += i26;
                l4 = 1;
                while (++l4 < 2) {
                    iArr4[(int)(l4)] = i26;
                    d2 = 12;
                    f3 = i27;
                    i23 += i25;
                    i25 *= i26;
                }
                try {
                    i19 = (iArr4[i20 + 1] % 12407);
                    i21 = (135710636 % i22);
                    i27 = (-290655507 / iArr4[i26 + 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (-43 + (i26 * i26));
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
