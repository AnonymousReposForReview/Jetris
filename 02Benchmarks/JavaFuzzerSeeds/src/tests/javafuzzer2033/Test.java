package tests.javafuzzer2033;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=470455334L;
    public static short sFld=-29541;
    public static boolean bFld=false;
    public static boolean bFld1=true;
    public static double dFld=0.22893;
    public static byte byFld=-70;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f3) {

        int i8=-7, i9=8389, i10=7498, i11=10182, iArr[]=new int[N];
        double d=57.9093;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -237);
        FuzzerUtils.init(lArr1, 3597415386L);

        for (i8 = 209; i8 > 1; --i8) {
            i9 = i9;
            if (Test.bFld1) {
                switch (((i9 >>> 1) % 6) + 32) {
                case 32:
                    if (Test.bFld) {
                        i9 /= (int)-51L;
                        iArr[i8 - 1] >>= (int)-7L;
                        Test.sFld += (short)(i8 - i8);
                        if (Test.bFld) {
                            i9 += 11;
                            i9 = i8;
                            i9 += (((i8 * Test.instanceCount) + Test.instanceCount) - i8);
                        } else {
                            for (i10 = 1; i10 < 8; i10++) {
                                d -= Test.instanceCount;
                                i9 *= (int)d;
                            }
                        }
                    } else if (Test.bFld1) {
                        lArr1 = lArr1;
                    } else if (false) {
                        iArr[i8 - 1] = i10;
                        vMeth_check_sum += Float.floatToIntBits(f3) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d)
                            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    } else {
                        Test.instanceCount >>= i9;
                    }
                case 33:
                    i9 += (i8 - i11);
                    break;
                case 34:
                    i11 -= (int)d;
                    break;
                case 35:
                    Test.instanceCount <<= Test.sFld;
                case 36:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 37:
                    i9 += 6;
                    break;
                }
            } else {
                i11 = i10;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f3) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(int i7, float f1, float f2) {

        long l=-1231154259759308137L;

        i7 = i7;
        vMeth(121.661F);
        i7 -= i7;
        l = Test.sFld;
        long meth_res = i7 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + l;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i, int i1, int i2) {

        float f=-120.446F;
        int i3=-137, i4=-3843, i5=-11, i6=-30080, i12=-2, i13=13, i14=-8, iArr1[]=new int[N];
        long l1=11L, lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -232L);
        FuzzerUtils.init(iArr1, 42349);

        f = (i % (lArr[(i1 >>> 1) % N][(i1 >>> 1) % N] | 1));
        for (i3 = 4; i3 < 189; i3++) {
            for (i5 = 1; i5 < 9; i5++) {
                i4 = (int)(Math.abs(-33 - lMeth(-55, -1.742F, f)) - Test.instanceCount);
            }
            for (i12 = 1; i12 < 9; ++i12) {
                Test.instanceCount = (long)f;
                i6 += (int)f;
                Test.dFld *= i;
                i += (i12 ^ Test.instanceCount);
                Test.instanceCount -= (long)Test.dFld;
                lArr[i12 - 1][i12 + 1] >>= i3;
            }
            for (l1 = 1; l1 < 9; ++l1) {
                i6 *= 7054;
                iArr1[i3] = i14;
                Test.instanceCount -= i4;
            }
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i12 + i13 + l1 + i14 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=38071, i16=-3972, i17=-4926, i18=2, i19=18988, i20=-2;
        float f4=2.42F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3L);

        dMeth(i15, i15, -72);
        i16 = 1;
        while ((i16 += 3) < 143) {
            if (false) {
                i15 += i16;
                switch ((i16 % 10) + 23) {
                case 23:
                case 24:
                    Test.iArrFld[i16 - 1][i16 + 1] /= (int)(i16 | 1);
                    break;
                case 25:
                    lArr2[i16] -= i15;
                    for (i17 = 3; 216 > i17; ++i17) {
                        Test.iArrFld[i17 - 1][i16 + 1] = (int)2.129405;
                        i19 = 1;
                        while (++i19 < 3) {
                            i15 -= i19;
                            lArr2[i17 + 1] <<= i18;
                            i18 >>>= i16;
                            i15 += (int)f4;
                        }
                        Test.instanceCount = i19;
                        i20 = 1;
                        do {
                            f4 += i19;
                            i18 -= i20;
                            i18 -= (int)Test.instanceCount;
                            i18 >>= i19;
                            f4 = 5;
                            f4 -= 13;
                            i18 ^= Test.byFld;
                        } while (++i20 < 3);
                        Test.instanceCount = 3407269628582908046L;
                        if (Test.bFld) continue;
                        i15 += i17;
                        i18 = i18;
                        f4 = i15;
                        i15 += i17;
                    }
                case 26:
                    Test.dFld *= Test.instanceCount;
                    break;
                case 27:
                    if (false) break;
                    break;
                case 28:
                    i18 *= (int)Test.instanceCount;
                case 29:
                    Test.instanceCount >>= i16;
                    break;
                case 30:
                    i15 >>= i17;
                case 31:
                    i15 += (i16 + i17);
                    break;
                case 32:
                    lArr2[i16 - 1] *= Test.instanceCount;
                    break;
                }
            } else {
                Test.byFld <<= (byte)i15;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
