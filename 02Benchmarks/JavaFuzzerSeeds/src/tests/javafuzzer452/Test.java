package tests.javafuzzer452;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:05:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static float fFld=-2.888F;
    public static int iFld=216;
    public static boolean bFld=false;
    public static float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -81.637F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l) {

        double d1=0.54216;
        int i9=0, iArr1[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(lArr, 9L);

        d1 -= Test.iFld;
        i9 = 1;
        do {
            Test.iFld >>= 12094;
            iArr1[i9][i9] /= (int)(i9 | 1);
            Test.iFld += (12 + (i9 * i9));
            lArr[i9 - 1] |= l;
            Test.iFld += (int)Test.instanceCount;
            if (Test.bFld) break;
            Test.iFld &= i9;
            Test.iFld |= 9;
        } while (++i9 < 324);
        l += i9;
        long meth_res = l + Double.doubleToLongBits(d1) + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=235, i6=116, i7=5, i8=-36328, iArr[]=new int[N];
        double d=18.55711;
        short s1=-5814;
        byte by=15;

        FuzzerUtils.init(iArr, 5);

        i5 = 1;
        do {
            for (i6 = 1; 7 > i6; i6++) {
                d += iArr[i6 + 1];
                if (Test.bFld) {
                    Test.fFld *= ((iArr[i5 + 1] += (int)Test.instanceCount) + (i7++));
                    i8 = 2;
                    while (--i8 > 0) {
                        iArr[i8] ^= i5;
                        iArr[i6 - 1] = (--i2);
                        Test.fFld *= Math.max(i2++, iMeth1(Test.instanceCount));
                        i2 *= i2;
                        i4 += (i8 * i5);
                        Test.instanceCount = s1;
                        Test.instanceCount = Test.instanceCount;
                        by = (byte)i7;
                        iArr[i6 - 1] <<= i8;
                    }
                }
            }
        } while (++i5 < 234);
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + s1 + by +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(short s) {


        iMeth(Test.iFld, Test.iFld, Test.iFld);
        vSmallMeth_check_sum += s;
    }

    public void mainTest(String[] strArr1) {

        int i=-177, i1=-11, i10=-7, i11=160, i12=-43574, i13=-6, i14=12, i15=-13, i16=-8;
        short s2=8812;

        for (i = 4; i < 195; ++i) {
            i1 *= (int)(i1 >>= (int)(i - -2.12305));
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(s2);
            i1 -= Test.iFld;
            Test.instanceCount += 33201;
            i1 += (50009 + (i * i));
            i1 -= (int)Test.instanceCount;
            Test.fArrFld[i - 1][i - 1] *= 1188102834L;
        }
        iArrFld[(i >>> 1) % N] = (int)Test.instanceCount;
        for (i10 = 327; i10 > 20; i10 -= 3) {
            Test.instanceCount += (((i10 * i10) + Test.iFld) - Test.fFld);
            i1 <<= (int)Test.instanceCount;
            Test.fFld += (i10 * i10);
            Test.iFld -= (int)Test.fFld;
            i12 = 1;
            while (++i12 < 246) {
                for (i13 = 1; 1 > i13; i13++) {
                    Test.fFld = Test.instanceCount;
                    i14 += (9 + (i13 * i13));
                    iArrFld = iArrFld;
                    iArrFld[i13] %= (int)(Test.iFld | 1);
                    i14 = i10;
                    i1 += i13;
                    i11 >>= (int)Test.instanceCount;
                }
                i14 += i;
            }
            for (i15 = 8; i15 < 246; i15 += 2) {
                if (Test.bFld) continue;
                switch (((i16 >>> 1) % 7) + 71) {
                case 71:
                    Test.instanceCount >>= i;
                    Test.fArrFld[i15 + 1] = Test.fArrFld[i10 - 1];
                    iArrFld[i10 - 1] = i10;
                case 72:
                    iArrFld[i15] >>= (int)Test.instanceCount;
                case 73:
                    Test.fFld -= Test.instanceCount;
                    break;
                case 74:
                    iArrFld[i15 - 1] += (int)-179L;
                    break;
                case 75:
                    i16 = i;
                    break;
                case 76:
                    Test.iFld -= i15;
                    break;
                case 77:
                    i16 += (((i15 * Test.instanceCount) + Test.instanceCount) - Test.iFld);
                    break;
                default:
                    i1 &= i14;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
