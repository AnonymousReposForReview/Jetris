package tests.javafuzzer2640;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:52:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1690226031L;
    public static volatile byte byFld=73;
    public int iFld=-70;
    public static long lFld=-59421L;
    public static double dFld=-124.6413;
    public static volatile short sFld=26955;
    public long lFld1=2552117057L;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 127);
        FuzzerUtils.init(Test.byArrFld, (byte)97);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s1) {

        int i5=42536, i6=5, i7=53440, i8=64352;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 32288L);

        i5 >>>= 11673;
        bArr[(i5 >>> 1) % N] = true;
        i6 = 359;
        do {
            for (i7 = 5; i7 > 1; i7 -= 2) {
                if (i7 != 0) {
                }
                Test.instanceCount += (i7 - Test.instanceCount);
                i8 = i7;
                i8 += (int)Test.lFld;
                i5 = i5;
                switch ((i6 % 6) + 7) {
                case 7:
                    lArr[i6 - 1] -= i5;
                    i5 >>>= (int)Test.instanceCount;
                case 8:
                    i8 += 5;
                    break;
                case 9:
                    Test.dFld = Test.lFld;
                    i8 += -2;
                    break;
                case 10:
                    i5 = i6;
                    break;
                case 11:
                    s1 *= Test.byFld;
                case 12:
                    i5 += (int)Test.dFld;
                    break;
                }
            }
        } while (--i6 > 0);
        long meth_res = s1 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f1, double d, int i2) {

        int i3=-40537, i4=-209, i9=-225, i10=2, i11=225, i12=221, iArr1[]=new int[N];
        short s2=-29636;
        double d1=0.75576;
        boolean b=true;

        FuzzerUtils.init(iArr1, -64417);

        i2 = (Math.abs(i2) + i2);
        for (i3 = 12; i3 < 372; ++i3) {
            iArr1[i3 + 1] >>= Math.max((int)((60508 + (d + 246)) - (i4 | Test.byFld)), (int)(Test.byFld + (i2 -
                Test.instanceCount)));
            i2 = iMeth(s2);
            i9 = 1;
            while (++i9 < 5) {
                for (d1 = 1; d1 < 1; d1++) {
                    i2 = (int)Test.lFld;
                }
            }
            if (b) {
                i11 = 1;
                do {
                    i12 = 1;
                    while (++i12 < 1) {
                        if (b) {
                            i10 -= i9;
                            i4 += (int)f1;
                            Test.lFld = i4;
                            d -= 93;
                        } else {
                            Test.byFld *= (byte)i11;
                        }
                    }
                } while (++i11 < 5);
            } else {
                Test.lFld >>= i2;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i2 + i3 + i4 + s2 + i9 +
            Double.doubleToLongBits(d1) + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(float f, short s) {

        int i13=6, i14=-5, i15=-208, iArr[]=new int[N];
        long l1=-13L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, -120.418F);
        FuzzerUtils.init(lArr1, -9437L);

        iArr[(iFld >>> 1) % N] >>= iFld;
        vMeth1(f, Test.dFld, iFld);
        i13 = 1;
        while (++i13 < 352) {
            for (l1 = 5; l1 > 1; l1 -= 3) {
                fArr[(int)(l1 + 1)] -= l1;
                i15 = 1;
                while (++i15 < 5) {
                    Test.lFld >>= Test.instanceCount;
                    iFld <<= i15;
                    iFld = i14;
                }
            }
            switch ((((iFld >>> 1) % 7) * 5) + 112) {
            case 147:
                Test.lFld -= (long)2.790F;
                i14 *= (int)Test.instanceCount;
                break;
            case 137:
                iFld >>= i15;
                f += (-552715694945688392L + (i13 * i13));
                iFld += (int)l1;
            case 117:
                Test.dFld = iFld;
                break;
            case 118:
                iFld -= (int)Test.lFld;
                break;
            case 126:
                lArr1[i13] >>= 197;
                break;
            case 115:
                f += (-25027L + (i13 * i13));
                break;
            case 116:
                Test.byFld = (byte)i14;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + s + i13 + l1 + i14 + i15 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        long l=-440989033L;
        int i=27901, i1=121, i16=50819, i17=4;
        float f2=-58.518F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 57.938F);

        l = 1;
        while (++l < 335) {
            switch ((int)(((l % 4) * 5) + 99)) {
            case 112:
                for (i = (int)(l); 75 > i; i++) {
                    Test.byFld += (byte)i;
                    vMeth(f2, Test.sFld);
                    for (i16 = 1; i16 < 1; i16++) {
                        Test.lFld += iFld;
                        switch ((((i17 >>> 1) % 4) * 5) + 61) {
                        case 75:
                            fArr1[(int)(l - 1)] *= 2.637F;
                            i1 = Test.byFld;
                            Test.iArrFld[i16] = i;
                            Test.iArrFld[(int)(l - 1)] &= i16;
                        case 76:
                            i17 += iFld;
                            switch ((int)((l % 8) + 45)) {
                            case 45:
                                Test.byArrFld[i16 + 1] -= (byte)-191;
                                break;
                            case 46:
                                i1 += (((i16 * i) + iFld) - i17);
                                break;
                            case 47:
                                Test.instanceCount += i16;
                                i17 += i16;
                            case 48:
                                Test.lFld = l;
                                Test.instanceCount -= i;
                                i17 += (int)f2;
                                iFld -= i1;
                            case 49:
                                Test.iArrFld[i - 1] *= (int)lFld1;
                                Test.instanceCount *= i;
                                break;
                            case 50:
                                i17 += (i16 * i17);
                                i17 = (int)-1.16934;
                                i1 >>= (int)Test.instanceCount;
                                break;
                            case 51:
                                bFld = bFld;
                                i1 *= iFld;
                                break;
                            case 52:
                                iFld = i;
                                break;
                            }
                        case 67:
                            i1 *= i17;
                            break;
                        case 81:
                            lFld1 = 8;
                        default:
                            Test.dFld *= i17;
                        }
                    }
                }
                break;
            case 102:
                Test.sFld <<= (short)i17;
            case 107:
                Test.iArrFld[(int)(l)] <<= i17;
            case 109:
                lFld1 += (long)f2;
            default:
                try {
                    Test.iArrFld[(int)(l + 1)] = (-9547 / i16);
                    iFld = (i17 % i);
                    iFld = (i16 % iFld);
                } catch (ArithmeticException a_e) {}
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
