package tests.javafuzzer164;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:12:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26040L;
    public volatile double dFld=-94.30751;
    public static boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-8940, i4=-48444, i5=-29306, i6=-36880, i8=1, iArr[]=new int[N];
        short s2=-32281, sArr[][]=new short[N][N];
        float f1=0.807F;

        FuzzerUtils.init(sArr, (short)-5610);
        FuzzerUtils.init(iArr, -23869);

        sArr[(18 >>> 1) % N][(i3 >>> 1) % N] -= (short)i3;
        i4 = 176;
        while ((i4 -= 2) > 0) {
            for (i5 = 1; 18 > i5; i5++) {
                int i7=9;
                try {
                    i3 = (678902577 / iArr[i4 - 1]);
                    i6 = (346639386 % i3);
                    i6 = (i6 / i5);
                } catch (ArithmeticException a_e) {}
                i6 += i5;
                i6 += 9;
                i7 += (((i5 * Test.instanceCount) + i4) - Test.instanceCount);
                i3 *= i3;
                iArr[(i6 >>> 1) % N] = i4;
                Test.instanceCount += (i5 | Test.instanceCount);
                i7 *= i4;
                i8 += s2;
                i6 += (i5 - i6);
            }
            f1 = -585401667L;
        }
        Test.instanceCount += (long)f1;
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i8 + s2 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2, double d1, short s1) {

        byte by1=125;
        float f=-73.673F;
        int i9=-14185, i10=3, i11=-13, i12=-18644, i13=69, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, -159);

        Test.instanceCount = Math.max((i2 * i2) * (s1 + by1), (int)((--i2) * (f + f)));
        vMeth1();
        Test.instanceCount >>>= Test.instanceCount;
        for (i9 = 5; i9 < 123; i9++) {
            by1 <<= (byte)i9;
            d1 *= i9;
            for (i11 = i9; i11 < 13; i11++) {
                i2 = i10;
                i12 &= i11;
                i2 = i9;
                iArr1[i11 - 1] *= (int)f;
            }
            i13 = 1;
            do {
                b = b;
                Test.instanceCount += (((i13 * i12) + i9) - i11);
            } while (++i13 < 13);
            i2 = i12;
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + s1 + by1 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12
            + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i1, long l, double d) {

        double d2=-2.119278;
        short s3=25829;

        vMeth(i1, d2, s3);
        vSmallMeth_check_sum += i1 + l + Double.doubleToLongBits(d) + Double.doubleToLongBits(d2) + s3;
    }

    public void mainTest(String[] strArr1) {

        int i=-215, i14=1, i15=169, i16=-254, i17=-45, i18=-100, i19=-10, i20=-1, i21=27599, i22=12, i23=6, i24=2,
            i25=1, iArr2[]=new int[N];
        short s=-22137;
        byte by=-66;
        float f2=-108.169F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -44L);
        FuzzerUtils.init(iArr2, 153);

        lArr[(i >>> 1) % N] = (long)((s <<= (short)(dFld - by)) * (-6 - (dFld * 0.128721)));
        for (int smallinvoc=0; smallinvoc<363; smallinvoc++) vSmallMeth(-45658, Test.instanceCount, 0.58118);
        i = (int)Test.instanceCount;
        s &= (short)Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        for (i14 = 7; i14 < 369; i14++) {
            i15 /= (int)((long)(f2) | 1);
            dFld = i;
            for (i16 = 2; 70 > i16; ++i16) {
                for (i18 = 1; i18 < 2; i18++) {
                    f2 += i16;
                }
                f2 = i17;
                dFld += Test.instanceCount;
                Test.instanceCount += i;
                i15 = i16;
            }
            for (i20 = 70; i20 > i14; i20--) {
                try {
                    i17 = (iArr2[i20] % -53);
                    i19 = (i17 % -1738467775);
                    i19 = (iArr2[i14] % 22335);
                } catch (ArithmeticException a_e) {}
                i = i20;
                i >>= 63;
                i17 += (i20 * i20);
            }
            i21 /= -24;
            i21 = i18;
            Test.instanceCount = (long)108.35684;
            for (i22 = 1; i22 < 70; i22++) {
                Test.bFld = Test.bFld;
                iArr2[i14] ^= i15;
                dFld *= -2272;
                for (i24 = 1; i24 < 2; i24++) {
                    i17 >>>= i19;
                    i23 += (i24 - i);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
