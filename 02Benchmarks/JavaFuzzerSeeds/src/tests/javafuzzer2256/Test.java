package tests.javafuzzer2256;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2200058577L;
    public static boolean bFld=false;
    public static short sFld=13264;
    public static byte byFld=-115;
    public int iFld=58328;
    public static float fFld=80.610F;
    public static int iArrFld[]=new int[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19417);
        FuzzerUtils.init(Test.byArrFld, (byte)-112);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, long l2) {

        int i5=7680, i6=-3, i7=24366, i8=-6, i9=30583, i10=-49720;
        double d=69.27444;
        short s=4485;
        float f=12.463F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -90.966F);

        i4 += (int)l2;
        for (i5 = 2; i5 < 201; ++i5) {
            i6 *= i5;
        }
        Test.iArrFld[(33368 >>> 1) % N] = (int)l2;
        for (i7 = 377; i7 > 14; i7 -= 2) {
            for (i9 = 1; i9 < 9; i9++) {
                Test.byArrFld[i7 - 1] *= (byte)i7;
                d += i6;
                i10 <<= i8;
                s *= (short)l2;
                i8 -= i4;
            }
            f /= (i4 | 1);
            d -= i7;
            i10 += i8;
            Test.iArrFld[(i5 >>> 1) % N] = (int)l2;
        }
        vMeth1_check_sum += i4 + l2 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + s +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(long l, long l1, int i3) {

        float f2=-40.679F;
        int i11=6290, i12=58917, i13=-53, i14=116, i15=228, i16=-60452, iArr[][]=new int[N][N];
        double d1=-1.13554;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-24128);
        FuzzerUtils.init(iArr, 26470);

        vMeth1(i3, Test.instanceCount);
        for (f2 = 235; 12 < f2; f2 -= 3) {
            Test.iArrFld[(int)(f2 + 1)] = i3;
            for (i12 = (int)(f2); i12 < 21; ++i12) {
                i13 += -143;
                i13 += (3 + (i12 * i12));
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.bFld = Test.bFld;
                    sArr[i14][(int)(f2 - 1)] -= (short)i3;
                    l1 -= i15;
                }
                i13 = Test.sFld;
            }
            for (d1 = f2; 21 > d1; ++d1) {
                i3 = Test.byFld;
                iArr = iArr;
                l1 += (-7 + (d1 * d1));
            }
        }
        long meth_res = l + l1 + i3 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d1) + i16 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i17=7, i18=8750, i19=130, i20=215, i21=-16;
        float f3=-13.0F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.iArrFld[(i2 >>> 1) % N] += (int)lMeth(Test.instanceCount, -419120735L, i2);
        for (i17 = 130; i17 > 2; i17 -= 2) {
            i1 = 159;
            i18 >>= 3;
            i = -112;
            i2 <<= i18;
            Test.sFld -= (short)i17;
            i1 = i17;
            if (Test.bFld) {
                for (f3 = 1; 24 > f3; f3++) {
                    for (i20 = 1; i20 < 2; i20++) {
                        bArr[(int)(f3 - 1)] = Test.bFld;
                        i1 = (int)Test.instanceCount;
                        if (Test.bFld) break;
                        i2 += i21;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i17 + i18 + Float.floatToIntBits(f3) + i19 + i20 + i21 +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=-1.53316, d3=122.117190;
        int i22=-174, i23=23562, i25=9, i26=105, i27=1, i28=-4, i29=-65438, i30=-8;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.126F);

        vMeth(iFld, iFld, -6261);
        d2 = 177;
        while (--d2 > 0) {
            for (i22 = 4; 142 > i22; ++i22) {
                Test.instanceCount = 114112742L;
                Test.instanceCount = Test.instanceCount;
                iFld -= (int)Test.instanceCount;
                iFld += (i22 * i22);
            }
        }
        i23 = i23;
        for (int i24 : Test.iArrFld) {
            for (i25 = 2; i25 < 63; ++i25) {
                for (i27 = 1; i27 < 2; i27++) {
                    switch ((i27 % 2) + 12) {
                    case 12:
                        Test.instanceCount += iFld;
                        Test.fFld -= i22;
                        Test.iArrFld[i25 + 1] += (int)-2L;
                        d3 = Test.instanceCount;
                    case 13:
                        i23 -= i27;
                        break;
                    }
                    i28 *= (int)Test.fFld;
                    fArr1[i27 - 1] -= i24;
                    i24 += i27;
                    Test.instanceCount = i22;
                    Test.iArrFld[i27 - 1] >>= Test.sFld;
                    iFld += (int)(-186L + (i27 * i27));
                    fArr1[i25 - 1] += i29;
                    i29 += (((i27 * iFld) + Test.instanceCount) - i26);
                }
                Test.byFld = (byte)-48.121499;
                i29 ^= iFld;
                i30 = 2;
                do {
                    Test.instanceCount = i25;
                    iFld += Test.sFld;
                } while ((i30 -= 3) > 0);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
