package tests.javafuzzer1547;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:33:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14232L;
    public double dFld=-11.5882;
    public static byte byFld=82;
    public static short sFld=-5248;
    public int iFld=-47541;
    public long lFld=-4286587607L;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i=39, iArr[]=new int[N];
        float f=-11.621F;

        FuzzerUtils.init(iArr, 43939);

        i = (int)((i - f) - iArr[(i >>> 1) % N]);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i8=-12, i9=-153, i10=-64128, i11=-49352, iArr1[]=new int[N];
        float f2=7.546F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(dArr, -114.42448);

        vSmallMeth();
        for (int i7 : iArr1) {
            for (i8 = 1; i8 < 4; ++i8) {
                i7 ^= (int)Test.instanceCount;
                i10 = 1;
                while (++i10 < 2) {
                    i9 <<= (int)128L;
                    switch ((((i11 >>> 1) % 1) * 5) + 3) {
                    case 4:
                        f2 += (i10 * i10);
                        dArr[(i11 >>> 1) % N] = -4179;
                        break;
                    default:
                        dArr[i8 + 1] = i8;
                        i11 += i8;
                        i9 = i10;
                    }
                    iArr1[i10 - 1] += (int)-95.24313;
                    i9 -= i9;
                    i11 = i11;
                }
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i6, float f1, boolean b) {

        long l1=-5L;
        int i12=12, i13=143, i14=-39247, i15=-9, i16=-2, i17=109;
        short s=-505;

        vMeth1();
        l1 = 1;
        do {
            for (i12 = 1; 5 > i12; ++i12) {
                Test.instanceCount >>= Test.instanceCount;
                for (i14 = 1; i14 < 2; i14++) {
                    f1 = i6;
                    i15 &= i6;
                    Test.instanceCount += (11 + (i14 * i14));
                    i13 += 1189;
                    Test.instanceCount = i13;
                    i13 += s;
                    i13 -= i14;
                }
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.byFld += (byte)(-41 + (i16 * i16));
                    i13 -= i15;
                }
            }
        } while (++l1 < 338);
        vMeth_check_sum += i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i12 + i13 + i14 + i15 + s + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        long l=-92L;
        int i2=188, i3=29092, i4=-122, i5=-55966, i18=7, i19=11, i20=196, i21=11, i22=9, iArr2[]=new int[N];
        float f3=2.107F, fArr[]=new float[N];
        boolean b1=false;
        short sArr[]=new short[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(sArr, (short)468);
        FuzzerUtils.init(fArr, -2.823F);
        FuzzerUtils.init(dArr1, -13.58296);
        FuzzerUtils.init(iArr2, 4243);

        for (int smallinvoc=0; smallinvoc<677; smallinvoc++) vSmallMeth();
        l = 1;
        do {
            int i1=10;
            i1 /= (int)(((long)(((i1 * i1) + dFld) + Test.byFld)) | 1);
            for (i2 = 67; i2 > l; i2--) {
                i1 += (i2 - i1);
                i3 += (int)((++sArr[i2]) - Test.instanceCount);
                i3 += (i2 - i2);
                for (i4 = 1; 1 > i4; ++i4) {
                    dFld += (Math.abs(Math.sqrt(2.120971)) * i5);
                }
                vMeth(i2, f3, b1);
            }
            if (b1) {
                i5 -= (int)f3;
                fArr[(int)(l)] += i2;
                for (i18 = 3; i18 < 67; ++i18) {
                    i1 *= i18;
                    i20 = 1;
                    while (++i20 < 2) {
                        i5 &= i19;
                        dFld = dFld;
                        Test.sFld *= (short)f3;
                        b1 = b1;
                        dArr1 = FuzzerUtils.double1array(N, (double)90.128765);
                        Test.instanceCount += (long)dFld;
                        if (b1) break;
                        try {
                            iFld = (i5 % 200);
                            i5 = (i3 / i1);
                            i1 = (i3 % iArr2[i18 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i3 = i20;
                        i1 += (int)(2031217668L + (i20 * i20));
                    }
                    iFld += i3;
                    for (i21 = 1; i21 < 2; i21++) {
                        i19 -= (int)lFld;
                    }
                    i1 = i1;
                }
            } else {
                iArr2[(int)(l)] += (int)f3;
            }
        } while (++l < 374);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth1 vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
