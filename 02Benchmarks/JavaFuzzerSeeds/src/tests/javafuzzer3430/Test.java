package tests.javafuzzer3430;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:10:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-176L;
    public static volatile int iFld=8105;
    public int iFld1=-9;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.lArrFld, 6665285443850073303L);
        FuzzerUtils.init(Test.fArrFld, -2.185F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b1) {

        int i11=41397, i12=60075, i13=-31006, i14=-47573, i15=-15846, i16=-44260, i17=-118;
        double d=33.126005;
        float f2=0.311F;

        for (i11 = 9; i11 < 350; i11++) {
            Test.instanceCount *= i12;
            i12 = -29;
            Test.instanceCount = (long)1.529F;
            for (i13 = 1; i13 < 5; ++i13) {
                Test.instanceCount >>>= Test.instanceCount;
                for (i15 = 2; 1 < i15; i15 -= 3) {
                    Test.instanceCount -= i13;
                    Test.iFld = (int)-21327L;
                    if (b1) break;
                }
                Test.iArrFld[i13] <<= i15;
                for (d = 1; 2 > d; ++d) {
                    if (b1) continue;
                    f2 = i11;
                    i17 <<= Test.iFld;
                }
            }
        }
        long meth_res = (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 +
            Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(float f1, boolean b) {

        int i9=-22826, i10=-23829, i18=197, i19=-3, i20=25183, i21=11, i22=243, i23=-13;

        Test.instanceCount = ((Test.iFld * Test.instanceCount) - ((119 - (~(Test.iFld - Test.iFld))) - (Test.iFld >>
            -54026)));
        for (i9 = 344; i9 > 10; i9--) {
            f1 -= lMeth(b);
            for (i18 = 1; 5 > i18; ++i18) {
                Test.iFld *= (int)2.9843;
                i19 = -41757;
                Test.lArrFld[i9] = (long)f1;
            }
            b = b;
            for (i20 = 1; i20 < 5; ++i20) {
                Test.iArrFld[(i21 >>> 1) % N] = (int)Test.instanceCount;
                for (i22 = 1; i22 < 2; ++i22) {
                    i23 += (int)f1;
                    f1 *= i19;
                    Test.instanceCount = i23;
                    Test.instanceCount = i22;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + (b ? 1 : 0) + i9 + i10 + i18 + i19 + i20 + i21 + i22 + i23;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i2=22, i3=37788, i4=13, i5=127, i6=12, i7=4, i8=1;
        float f=-1.186F;
        boolean b2=false;
        short s=3940;
        byte by=-14, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-52);

        i2 -= byArr[(i2 >>> 1) % N];
        for (i3 = 7; i3 < 213; ++i3) {
            Test.lArrFld[i3] -= (i2--);
            Test.instanceCount *= (Test.instanceCount++);
            if (b2) {
                for (i5 = i3; 8 > i5; i5++) {
                    Test.iArrFld[i3] += (int)((49785 - (i5 - Test.instanceCount)) + Test.instanceCount);
                    for (i7 = 1; i7 < 1; ++i7) {
                        Test.instanceCount *= ((--i8) - ((long)(i7 + f) >> (long)(-42.693F + (i4 * f))));
                        i6 *= (int)((fMeth(f, b2) + i4) * i3);
                        Test.iFld >>= (int)Test.instanceCount;
                    }
                }
                s -= (short)i5;
                by += (byte)i7;
            } else if (b2) {
                i4 |= by;
                Test.instanceCount -= i4;
            } else {
                if (b2) break;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + (b2 ? 1 : 0) + s + by +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=6, i24=-4, i25=-13, i26=-26654, i27=23, i28=28447, i29=-39961, i31=-6, i32=-39851, i33=-12,
            i34=-103, i35=12, i36=24308;
        float f3=13.50F;
        long l=1L;

        for (i = 3; i < 125; ++i) {
            i1 += (i - i);
        }
        Test.iArrFld[(3 >>> 1) % N] = ((Test.iArrFld[(11 >>> 1) % N]++) + (iMeth() + i));
        for (i24 = 7; i24 < 208; ++i24) {
            for (i26 = 4; i26 < 125; i26++) {
                i28 = i26;
                Test.instanceCount = (long)f3;
            }
        }
        i25 -= i1;
        Test.iFld <<= (int)l;
        Test.iArrFld[(i29 >>> 1) % N] *= i25;
        for (int i30 : Test.iArrFld) {
            for (i31 = 3; i31 < 63; ++i31) {
                try {
                    i27 = (Test.iArrFld[i31] % 26205);
                    i25 = (-60033 / i24);
                    i25 = (2017450185 % i30);
                } catch (ArithmeticException a_e) {}
                i29 -= (int)f3;
                for (i33 = 1; i33 < 2; ++i33) {
                    Test.iArrFld[i33] |= i31;
                    i29 += (int)l;
                    i30 += (((i33 * i25) + f3) - iFld1);
                    f3 += (39 + (i33 * i33));
                    i27 = i29;
                }
                l = Test.instanceCount;
            }
            for (i35 = 1; i35 < 63; i35++) {
                boolean b3=true;
                i32 = 42131;
                if (b3) break;
                i30 &= i26;
                i36 += (((i35 * i30) + i33) - i24);
                i29 -= i34;
            }
            Test.lArrFld[(i29 >>> 1) % N] = i33;
            Test.fArrFld[(i27 >>> 1) % N] = f3;
            f3 *= i30;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
