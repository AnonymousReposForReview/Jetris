package tests.javafuzzer1631;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:27:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=52875L;
    public boolean bFld=false;
    public static float fFld=-2.176F;
    public static double dFld=-2.129318;
    public static short sFld=8027;
    public static byte byFld=-31;
    public static int iFld=6;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3341227880688772944L);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=34352, i6=15, i7=-58307, i8=-87, i9=-120, iArr[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -6.76038);
        FuzzerUtils.init(iArr, -250);

        Test.lArrFld[(i5 >>> 1) % N] = i5;
        Test.lArrFld[(-41109 >>> 1) % N] = i5;
        for (i6 = 1; i6 < 197; ++i6) {
            Test.instanceCount += Test.instanceCount;
            for (i8 = 1; i8 < 8; i8++) {
                dArr[i6 + 1] -= Test.instanceCount;
                Test.fFld -= i5;
            }
            iArr[i6 + 1] *= i9;
            iArr[i6 - 1] = (int)Test.fFld;
            Test.instanceCount -= i6;
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i4) {

        short s=-30606;
        double dArr1[][]=new double[N][N];
        int iArr1[]=new int[N];

        FuzzerUtils.init(dArr1, -1.7931);
        FuzzerUtils.init(iArr1, -46);

        switch ((((++i4) >>> 1) % 1) + 84) {
        case 84:
            vMeth1();
            Test.instanceCount ^= i4;
            Test.instanceCount >>= i4;
            dArr1[(-13278 >>> 1) % N][(i4 >>> 1) % N] -= i4;
            break;
        }
        switch ((((i4 >>> 1) % 8) * 5) + 108) {
        case 109:
        case 132:
            i4 -= i4;
            for (int i10 : iArr1) {
                s = (short)5;
            }
            i4 += (int)Test.instanceCount;
            break;
        case 138:
            i4 <<= i4;
        case 118:
            i4 = i4;
            i4 <<= 59408;
            Test.fFld = i4;
        case 146:
            Test.fFld += i4;
        case 131:
            i4 += i4;
            break;
        case 142:
            Test.dFld = -5;
            break;
        case 114:
            i4 = i4;
            break;
        default:
            Test.instanceCount -= i4;
        }
        vMeth_check_sum += i4 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth() {

        int i11=117, i12=-58728, i13=3, i14=-5, i15=1, iArr2[][]=new int[N][N];
        boolean b=false;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr2, 4);
        FuzzerUtils.init(fArr, -2.591F);

        vMeth(i11);
        iArr2[(i11 >>> 1) % N][(i11 >>> 1) % N] >>= Test.sFld;
        iArr2[(i11 >>> 1) % N][(i11 >>> 1) % N] += (int)Test.dFld;
        i11 >>= (int)Test.instanceCount;
        for (i12 = 2; i12 < 153; i12++) {
            i11 = i11;
            switch ((((i13 >>> 1) % 6) * 5) + 98) {
            case 99:
                Test.instanceCount = (long)Test.dFld;
                try {
                    i11 = (i13 / iArr2[i12 - 1][i12 + 1]);
                    iArr2[i12][i12] = (i12 % -105);
                    iArr2[i12][i12] = (i12 % 127);
                } catch (ArithmeticException a_e) {}
                for (i14 = 1; 10 > i14; i14++) {
                    if (i11 != 0) {
                        return ((int)(i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)))) % 2 > 0;
                    }
                    iArr2[i12 + 1][i14 + 1] = (int)-49.801F;
                    i11 = Test.sFld;
                }
                fArr[i12 - 1] = fArr[i12];
                break;
            case 128:
                b = b;
            case 120:
                i11 += (int)Test.dFld;
                break;
            case 103:
                Test.lArrFld[i12] *= 2;
                break;
            case 105:
                i15 += (i12 * i12);
                break;
            case 111:
                iArr2[i12 - 1][i12] = (int)Test.instanceCount;
                break;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-221, i1=-3, i2=11857, i3=-88, i16=59, i17=-230, i18=-52, i19=6;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, -1.62F);

        for (i = 14; i < 249; ++i) {
            for (i2 = 1; i2 < 107; ++i2) {
                if (bFld) {
                    iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
                    if (bFld = (bFld = (!bMeth()))) break;
                    for (i16 = 1; i16 < 2; i16++) {
                        Test.instanceCount ^= i3;
                        Test.instanceCount -= (long)Test.dFld;
                        i18 += (((i16 * i1) + Test.instanceCount) - i3);
                        iArrFld[(i2 >>> 1) % N] += i16;
                        i18 += (((i16 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                        i3 += (i16 * i16);
                        Test.fFld += (((i16 * i1) + i16) - i1);
                    }
                    try {
                        i3 = (i3 % i);
                        i3 = (i16 / i17);
                        i18 = (i18 % 781587724);
                    } catch (ArithmeticException a_e) {}
                } else {
                    Test.fFld -= i;
                    switch ((i2 % 9) + 35) {
                    case 35:
                        iArrFld[i2 + 1] >>>= i2;
                        break;
                    case 36:
                        i3 >>= i3;
                        i1 -= (int)Test.instanceCount;
                        switch ((i2 % 2) + 29) {
                        case 29:
                            i18 -= i3;
                            i18 >>>= -113;
                            if (bFld) break;
                            if (false) continue;
                            break;
                        case 30:
                            i17 += i2;
                            i18 = (int)Test.instanceCount;
                            i19 = 1;
                            do {
                                fArr1[i][i2 - 1] = 28400;
                                Test.instanceCount = 168;
                                fArr1[i2 + 1][i + 1] -= i16;
                            } while (++i19 < 2);
                            break;
                        default:
                            i18 = Test.byFld;
                        }
                        break;
                    case 37:
                        Test.iFld += i2;
                    case 38:
                        Test.dFld -= -2140;
                        break;
                    case 39:
                        i3 += i3;
                        break;
                    case 40:
                        Test.instanceCount += (i2 + Test.instanceCount);
                        break;
                    case 41:
                        Test.byFld = (byte)i3;
                        break;
                    case 42:
                        Test.fFld = i18;
                    case 43:
                        Test.fFld -= -62.783F;
                    default:
                        Test.fFld += i16;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
