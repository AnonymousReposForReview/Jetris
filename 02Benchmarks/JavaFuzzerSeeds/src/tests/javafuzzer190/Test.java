package tests.javafuzzer190;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:48:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=136L;
    public static byte byFld=-64;
    public float fFld=0.942F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -19690);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth1() {

        int i5=11, i6=0;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -92.53594);

        dArr[(i5 >>> 1) % N] *= (-(i5++));
        i6 = 1;
        do {
            i5 = (int)2699367966L;
        } while (++i6 < 258);
        vMeth1_check_sum += i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth2(int i9, int i10) {

        int i11=-37906, i12=-41951, i13=-2;
        float f1=1.99F, f2=66.587F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(fArr, 17.193F);

        i10 = (int)fArr[(i10 >>> 1) % N];
        vMeth1();
        i11 = 1;
        do {
            Test.instanceCount += i10;
            i10 += (int)Test.instanceCount;
            Test.instanceCount = (long)1.527F;
            for (f1 = 5; f1 > 1; f1 -= 3) {
                i12 -= i12;
                i13 = 5;
                while (--i13 > 0) {
                    i12 += (((i13 * i9) + i9) - i13);
                    Test.instanceCount += i12;
                    f2 += Test.instanceCount;
                    if (b) continue;
                    i12 += 90;
                }
                Test.instanceCount += (-10470 + (f1 * f1));
            }
        } while (++i11 < 308);
        vMeth2_check_sum += i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + Float.floatToIntBits(f2) + (b ? 1 :
            0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i2, float f) {

        int i3=-201, i4=-2, i7=-119, i8=-21085;
        byte by=-39;

        for (i3 = 16; 326 > i3; ++i3) {
            vMeth1();
            for (i7 = 1; i7 < 5; i7++) {
                i4 += i7;
            }
            vMeth2(i3, i3);
            if (true) break;
            i4 -= -89;
            f = i3;
            i2 += (int)f;
            i8 += (i3 * i3);
            i2 = i8;
        }
        by = (byte)51227;
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + i7 + i8 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=-5783, i1=-7, i14=5, i15=17, i16=1322, i17=-22133, i18=37891, i19=-50775;
        double d=1.107998;
        long l=-67L;
        boolean b2=true;

        for (i = 2; i < 349; ++i) {
            Test.instanceCount = ((-(i + i1)) * Test.instanceCount);
            vMeth(i1, -2.437F);
            i1 <<= 199;
        }
        d -= i1;
        i1 <<= -40664;
        for (i14 = 1; i14 < 150; i14++) {
            short s=-10405;
            Test.iArrFld = Test.iArrFld;
            i15 -= Test.byFld;
            Test.iArrFld[i14] >>= -29156;
            try {
                Test.iArrFld[i14 - 1] = (i1 % -45205);
                i15 = (i15 / Test.iArrFld[i14 + 1]);
                i15 = (i1 / i14);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount >>= i15;
            i15 += (i14 | i);
            s >>= (short)Test.instanceCount;
        }
        for (i16 = 2; i16 < 251; ++i16) {
            Test.byFld += (byte)i16;
            i15 += (i16 * i16);
            i17 += (i16 ^ Test.instanceCount);
            i17 -= i16;
            Test.instanceCount >>= i1;
            i1 *= -138;
            if (true) {
                l = 101;
                while (--l > 0) {
                    for (i18 = 1; 1 > i18; i18++) {
                        boolean b1=true;
                        Test.instanceCount += l;
                        i17 += (int)l;
                        b1 = b1;
                        fFld += 6L;
                        lArrFld[i16] = l;
                        Test.instanceCount -= i;
                    }
                }
            } else if (b2) {
                i19 += (i16 - i);
            } else {
                Test.instanceCount += i18;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest vMeth2
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
