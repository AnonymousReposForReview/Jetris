package tests.javafuzzer360;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:50:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static float fFld=9.80F;
    public static double dFld=-119.42046;
    public static int iFld=-9;
    public double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, long l, double d) {

        int i7=-13937, i8=-6, i9=9;
        boolean b=true;

        i6 = (int)166L;
        Test.instanceCount = i6;
        i7 = 1;
        do {
            for (i8 = i7; i8 < 4; i8++) {
                Test.instanceCount += (long)1.314F;
                Test.fFld += (i8 + i9);
                i9 = i9;
                if (b) break;
                if (b) break;
                l += (i8 | i8);
            }
            i6 >>= (int)l;
            i6 += i6;
            b = b;
            Test.instanceCount <<= i6;
            i6 += (int)-1.934F;
        } while (++i7 < 386);
        vMeth2_check_sum += i6 + l + Double.doubleToLongBits(d) + i7 + i8 + i9 + (b ? 1 : 0);
    }

    public static void vMeth1(int i4, int i5) {

        int i10=14, i11=51959, i12=-23060, i13=219, i14=-21797, iArr[]=new int[N];
        byte by=-65;
        float f1=-49.422F;

        FuzzerUtils.init(iArr, -12);

        vMeth2(i5, Test.instanceCount, Test.dFld);
        for (i10 = 7; i10 < 219; ++i10) {
            for (i12 = 1; i12 < 8; ++i12) {
                i11 *= i11;
                i5 = i5;
                Test.instanceCount += (-13 + (i12 * i12));
                try {
                    iArr[i10] = (-544953739 / i5);
                    i11 = (iArr[i10] % 651509384);
                    i11 = (iArr[i10 - 1] % i4);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount -= by;
                i5 = i5;
            }
            Test.fFld = i13;
            for (f1 = 1; f1 < 8; f1++) {
                switch (((177 >>> 1) % 2) + 14) {
                case 14:
                    iArr[i10] >>= i11;
                    Test.instanceCount -= i10;
                    iArr[(int)(f1 - 1)] >>= (int)Test.instanceCount;
                    break;
                case 15:
                    iArr[i10 - 1] = (int)f1;
                    break;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i10 + i11 + i12 + i13 + by + Float.floatToIntBits(f1) + i14 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1, float f) {

        int i2=98, i3=-6, i15=-14, i16=0, i17=-30, i18=4, i19=-145, i20=-131, i21=86, iArr1[]=new int[N];
        boolean b1=false;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -1.15950);
        FuzzerUtils.init(lArr, -202L);
        FuzzerUtils.init(iArr1, -25467);

        i1 = (int)(++f);
        for (i2 = 202; 10 < i2; i2 -= 3) {
            vMeth1(i2, i3);
            for (i15 = 24; i15 > 1; i15--) {
                f += (i15 + i17);
                dArr[i15 + 1] -= i;
                i17 += (((i15 * Test.instanceCount) + i16) - Test.instanceCount);
            }
        }
        i18 = 1;
        do {
            for (i19 = 4; i19 > 1; i19 -= 3) {
                lArr[i18] *= i;
                if (b1) {
                    try {
                        iArr1[i19 + 1] = (821538613 % i);
                        i17 = (iArr1[i18] % i3);
                        i20 = (i18 % 6440);
                    } catch (ArithmeticException a_e) {}
                    i21 = 1;
                    while (++i21 < 4) {
                        i1 >>= i17;
                        if (b1) continue;
                    }
                }
            }
        } while (++i18 < 390);
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + (b1 ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i22=52011, i23=220, i24=-8, i25=-192, i26=-47736;
        boolean b2=false;
        long l1=116817047L;

        vMeth(i22, -33, 0.627F);
        dArrFld[(i22 >>> 1) % N] -= Test.fFld;
        i23 = 1;
        do {
            i24 = 1;
            while (++i24 < 334) {
                i22 += i24;
                i22 += (((i24 * i22) + i22) - Test.fFld);
                for (i25 = 1; 1 > i25; ++i25) {
                    i22 *= i26;
                    switch ((i24 % 7) + 19) {
                    case 19:
                        Test.fFld *= 4L;
                        break;
                    case 20:
                        i26 += i25;
                        break;
                    case 21:
                        Test.instanceCount *= i24;
                        i26 = i25;
                        break;
                    case 22:
                        if (b2) {
                            i22 += (((i25 * Test.instanceCount) + Test.fFld) - i24);
                        } else {
                            i22 <<= i26;
                            try {
                                iArrFld[i25 + 1] = (25137 / i26);
                                i22 = (i23 % -375827930);
                                i22 = (-184 % i26);
                            } catch (ArithmeticException a_e) {}
                            Test.fFld += i24;
                            i22 = i24;
                        }
                        i26 -= (int)Test.dFld;
                        i22 += (i25 * i25);
                        try {
                            i22 = (i24 % i22);
                            i26 = (-428174677 / i25);
                            i26 = (iArrFld[i25] / -777573297);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 23:
                        Test.iFld -= i23;
                        i22 += (i25 * Test.instanceCount);
                        Test.fFld *= l1;
                    case 24:
                        i22 = i24;
                        break;
                    case 25:
                        Test.instanceCount -= i25;
                        i26 = i22;
                        iArrFld[i25 + 1] |= i26;
                        iArrFld[i25] += Test.iFld;
                        break;
                    }
                }
            }
        } while ((i23 += 3) < 225);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
