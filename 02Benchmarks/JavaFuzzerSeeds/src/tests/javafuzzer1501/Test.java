package tests.javafuzzer1501;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:28:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=68L;
    public static int iFld=-30;
    public static boolean bFld=false;
    public static float fFld=69.188F;
    public static double dFld=0.75982;
    public volatile int iFld1=-14;
    public long lFld=12L;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i3) {

        float f1=2.806F;
        int i4=-70, i5=-1, i6=12054, i7=9, iArr[]=new int[N];
        double d=2.31132;

        FuzzerUtils.init(iArr, 163);

        iArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
        if (Test.bFld) {
            Test.iFld *= i3;
            f1 -= l;
        } else if (Test.bFld) {
            i3 *= -20309;
            for (i4 = 337; i4 > 13; --i4) {
                for (i6 = i4; i6 < 5; ++i6) {
                    Test.iFld = (int)d;
                    if (Test.bFld) break;
                    if (Test.bFld) break;
                    i5 = i5;
                    iArr = iArr;
                    d -= Test.instanceCount;
                    i5 += -7484;
                    l = (long)f1;
                }
            }
        } else {
            iArr = iArr;
        }
        long meth_res = l + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i, int i1, int i2) {

        int i8=-13213, i9=-7, i10=65263, i11=55050, i12=-58, iArr1[][]=new int[N][N];
        long l1=-1350721871L;
        byte by=64;

        FuzzerUtils.init(iArr1, 2);

        iMeth(1846026284L, i);
        for (i8 = 12; i8 < 331; ++i8) {
            for (i10 = 1; i10 < 5; ++i10) {
                i9 *= -232;
                i2 = -13;
                Test.fFld += (5 + (i10 * i10));
                iArr1[i8 - 1][i8 + 1] >>>= i10;
                for (l1 = i10; l1 < 2; ++l1) {
                    by -= (byte)i2;
                    iArr1[i10][(int)(l1 - 1)] >>= i9;
                    iArr1[i10][i10 - 1] -= i1;
                }
                Test.iFld = i9;
                Test.dFld = i11;
                i9 ^= i9;
                i2 += (((i10 * i1) + i8) - i);
            }
        }
        long meth_res = i + i1 + i2 + i8 + i9 + i10 + i11 + l1 + i12 + by + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f) {

        int i13=170, i14=-12, i15=3, i16=16646, i17=-13, i18=61910;

        Test.iFld *= (int)(Test.iFld - (fMeth(-2, Test.iFld, -29885) + Test.iFld));
        for (i13 = 3; i13 < 146; ++i13) {
            Test.dFld = Test.instanceCount;
            for (i15 = 1; i15 < 11; ++i15) {
                i16 += i16;
                f -= Test.fFld;
                i17 = 2;
                while ((i17 -= 3) > 0) {
                    if (Test.bFld) {
                        i16 <<= (int)-182423482147563674L;
                        if (Test.bFld) {
                            Test.instanceCount += i17;
                        } else {
                            i14 += (i17 * Test.fFld);
                            Test.dFld = Test.iFld;
                            Test.iFld /= (int)(Test.instanceCount | 1);
                        }
                        Test.iFld -= i18;
                    } else if (Test.bFld) {
                        Test.instanceCount += (((i17 * Test.instanceCount) + i13) - Test.instanceCount);
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i19=-5, i20=-248, i21=2, i22=36270, i23=-51304, i24=8079, i25=-136, i26=2936, i27=-9, i28=-12,
            iArr2[][]=new int[N][N];
        long l2=-60977L, l3=43L;
        short s=-22777;
        byte by1=-49;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(dArr, 0.103432);

        vMeth(Test.fFld);
        for (i19 = 6; 227 > i19; ++i19) {
            Test.iFld = (int)Test.fFld;
            Test.iFld *= (int)l2;
            if (Test.bFld) continue;
            for (i21 = i19; i21 < 114; i21++) {
                iFld1 += (int)-3592L;
                iArr2[i19 - 1][i21] *= i19;
            }
            i22 += (i19 + i20);
            dArr[i19 + 1] = Test.dFld;
            Test.dFld -= -14;
        }
        i22 += i23;
        l3 = 354;
        do {
            iArr2[(int)(l3)][(int)(l3 - 1)] -= i22;
            iFld1 = 28949;
        } while (--l3 > 0);
        i23 ^= (int)lFld;
        i24 = 1;
        do {
            iArr2[i24 + 1][i24 - 1] >>= (int)lFld;
            for (i25 = 2; i25 < 115; ++i25) {
                Test.iFld <<= s;
                switch ((i25 % 1) + 78) {
                case 78:
                    for (i27 = 2; i27 > 1; i27--) {
                        if (Test.bFld) continue;
                        i26 -= i20;
                        Test.iFld *= (int)Test.dFld;
                        if (Test.bFld) {
                            i20 += i21;
                            i28 = (int)l3;
                        }
                    }
                    iArr2[i25][(i22 >>> 1) % N] = i24;
                    by1 = (byte)iFld1;
                    break;
                default:
                    s += (short)i24;
                }
            }
        } while (++i24 < 219);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
