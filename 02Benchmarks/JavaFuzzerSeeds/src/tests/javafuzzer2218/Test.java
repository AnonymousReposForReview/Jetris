package tests.javafuzzer2218;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:23:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public float fFld=-2.487F;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -36226L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f1=-106.299F;
        int i7=-42700, i8=-3, i9=224;
        short s=8913;
        boolean b=true;
        double d=-2.38008, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -115.65071);

        for (f1 = 8; f1 < 282; f1++) {
            for (i8 = (int)(f1); i8 < 6; i8++) {
                Test.lArrFld[(int)(f1)] /= (Test.instanceCount | 1);
                Test.lArrFld[(int)(f1 - 1)] -= s;
                i9 /= -54154;
                if (b) break;
                if (b) break;
                i9 = i8;
                Test.instanceCount += (i8 - Test.instanceCount);
                i7 &= (int)2792374207L;
                dArr[(int)(f1 + 1)] -= i8;
                i7 += (int)(153L + (i8 * i8));
            }
            i7 -= i8;
            i7 += (int)(((f1 * i8) + Test.instanceCount) - s);
            d += i7;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + s + (b ? 1 : 0) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i4) {

        long l=3283436372010251901L;
        float f=1.9F;
        int i5=108, i6=135, iArr1[]=new int[N];
        byte by=83;

        FuzzerUtils.init(iArr1, -3);

        i4 = (i4--);
        l = 1;
        while (++l < 279) {
            i4 += (int)(((l * i4) + l) - i4);
            i4 += (-11905 + (l * l));
            Test.instanceCount = (long)(f + (i4--));
            iArr1[(int)(l - 1)] >>= (int)(f % ((i4--) | 1));
        }
        for (i5 = 3; 167 > i5; i5 += 2) {
            double d1=1.24959;
            vMeth1();
            i4 = i4;
            iArr1 = FuzzerUtils.int1array(N, (int)-160);
            i4 += (int)Test.instanceCount;
            iArr1[i5 - 1] = (int)d1;
            d1 -= i5;
            Test.lArrFld[i5] += i6;
            f = by;
        }
        vMeth_check_sum += i4 + l + Float.floatToIntBits(f) + i5 + i6 + by + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i3) {


        vMeth(i3);
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-75, i1=-36067, i2=-22938, i10=9, i11=-9, i12=-5, i13=20816, i14=-64089, iArr[]=new int[N];
        short s1=16714;

        FuzzerUtils.init(iArr, -37205);

        Test.instanceCount = ((i * (i + i)) - Math.max(-1551254960L, Math.max(-5155732455361739553L,
            Test.instanceCount)));
        fFld = i;
        Test.instanceCount = (++i);
        i -= (int)(1171 * (i = (int)(0.51427 + (i - i))));
        i *= iArr[(-60375 >>> 1) % N];
        for (i1 = 5; i1 < 166; ++i1) {
            i = (int)((i++) - (Math.sqrt(0.24093) - (i >> i)));
            iMeth(-4530);
            switch (((i1 % 4) * 5) + 99) {
            case 114:
                for (i10 = 1; i10 < 156; i10++) {
                    double d2=-2.57285;
                    d2 += i1;
                    i12 = 1;
                    do {
                        Test.lArrFld[i10 - 1] >>= -505;
                        i11 -= i;
                    } while (++i12 < 2);
                    for (i13 = i1; i13 < 2; ++i13) {
                        i11 = -5;
                        Test.instanceCount -= (long)fFld;
                        switch (((i10 % 2) * 5) + 2) {
                        case 4:
                            s1 += (short)i13;
                            break;
                        case 3:
                            if (bFld) break;
                            bFld = bFld;
                        default:
                            switch (((i12 >>> 1) % 4) + 75) {
                            case 75:
                                Test.instanceCount = i2;
                                i11 <<= i14;
                                i2 = 51517;
                                i14 += (i13 * i13);
                            case 76:
                                Test.instanceCount -= i;
                                d2 = i;
                                i11 += i13;
                                Test.lArrFld[i13 - 1] += Test.instanceCount;
                                break;
                            case 77:
                                i2 = (int)fFld;
                                break;
                            case 78:
                                i2 -= i12;
                            default:
                                Test.instanceCount >>= i2;
                            }
                        }
                    }
                }
            case 107:
                i11 <<= i;
                break;
            case 118:
                Test.instanceCount -= i1;
                break;
            case 100:
                i11 += i1;
                break;
            default:
                i11 -= i1;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
