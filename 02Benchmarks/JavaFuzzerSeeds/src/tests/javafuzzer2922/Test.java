package tests.javafuzzer2922;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:04:42 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8926L;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -37258L);
        FuzzerUtils.init(Test.iArrFld, 50770);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(long l, int i5) {

        int i6=-65488, i7=76, iArr[]=new int[N];
        float f=-2.433F;

        FuzzerUtils.init(iArr, 11802);

        for (i6 = 2; 188 > i6; i6++) {
            i5 = (i5--);
            i5 += (i6 - f);
            iArr = (iArr = iArr);
        }
        long meth_res = l + i5 + i6 + i7 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i10, int i11) {

        int i12=11, i13=135;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 48.513F);

        for (i12 = 3; i12 < 324; i12++) {
            fArr[i12 - 1] *= i13;
        }
        i13 -= i13;
        vMeth_check_sum += i10 + i11 + i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1() {

        int i8=-4, i9=-6, i14=155, i15=9, i16=14421, i17=0, i18=-14;
        float f1=-26.780F, f2=1.209F;
        double d=55.113385, dArr[]=new double[N];
        boolean b1=true;
        byte by=-24;

        FuzzerUtils.init(dArr, -2.6025);

        for (i8 = 8; i8 < 377; i8++) {
            vMeth(i8, i8);
            f1 -= i8;
        }
        for (i14 = 14; i14 < 248; ++i14) {
            if (i15 != 0) {
            }
            d -= f1;
            for (f2 = 1; f2 < 7; f2 += 3) {
                b1 = true;
                for (i17 = 1; i17 < 4; i17++) {
                    dArr[(int)(f2 - 1)] = Test.instanceCount;
                    i18 >>= i9;
                    i16 = by;
                    i16 <<= -38279;
                    i9 >>= i8;
                    Test.lArrFld[i17] = i8;
                }
            }
        }
        long meth_res = i8 + i9 + Float.floatToIntBits(f1) + i14 + i15 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + i16 + (b1 ? 1 : 0) + i17 + i18 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        int i=91, i1=-31314, i2=93, i3=14, i4=27013, i19=8814, i20=16724;
        boolean b=false;

        i = (int)Test.instanceCount;
        switch ((((i * -237) >>> 1) % 4) * 5) {
        case 9:
            i += (int)Test.instanceCount;
            break;
        case 5:
        case 15:
            switch ((((i + i) >>> 1) % 1) + 119) {
            case 119:
                for (i1 = 14; 234 > i1; ++i1) {
                    for (i3 = 1; i3 < 7; i3++) {
                        if (b | ((--i4) != (iMeth(Test.instanceCount, i) + iMeth1()))) continue;
                        i4 *= (int)-202L;
                        i4 /= (int)(Test.instanceCount | 1);
                    }
                    Test.lArrFld[i1 + 1] = i3;
                    for (i19 = 1; i19 < 7; i19++) {
                        Test.instanceCount += (i19 * i19);
                        i = i2;
                        i4 += (i19 | i2);
                        i4 ^= i;
                    }
                }
                break;
            default:
                Test.iArrFld[(-18322 >>> 1) % N] += i2;
            }
        case 6:
            Test.instanceCount <<= i1;
            break;
        }
        long meth_res = i + i1 + i2 + i3 + i4 + (b ? 1 : 0) + i19 + i20;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=48320;

        sMeth();
        Test.iArrFld[(i21 >>> 1) % N] <<= (int)Test.instanceCount;
        i21 = i21;
        switch ((((i21 >>> 1) % 2) * 5) + 28) {
        case 38:
            i21 = 1;
            break;
        case 35:
            i21 = i21;
            byArrFld[(i21 >>> 1) % N] = (byte)Test.instanceCount;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
