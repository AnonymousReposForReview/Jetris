package tests.javafuzzer3116;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:04:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1501719728L;
    public static byte byFld=-64;
    public static boolean bFld=false;
    public static float fFld=107.540F;
    public double dFld=0.73067;
    public static int iFld=-252;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.fArrFld, 0.555F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i=33693;

        i -= -1;
        vSmallMeth_check_sum += i;
    }

    public static int iMeth1(float f1, int i13, int i14) {

        int i15=83, i16=-252, i17=58450, i18=-53914, i19=-4, i20=36552, i21=228, i22=57541;
        short s1=32754;

        for (i15 = 10; i15 < 369; i15++) {
            for (i17 = i15; i17 < 5; i17++) {
                Test.iArrFld[i15] = -9;
            }
            switch (((i15 % 1) * 5) + 75) {
            case 78:
                s1 *= (short)i16;
                break;
            default:
                i18 = i17;
                for (i19 = 5; i19 > 1; i19 -= 2) {
                    i13 += (i19 ^ i14);
                    i13 += i19;
                }
                i18 <<= i14;
            }
            for (i21 = 5; i15 < i21; i21 -= 3) {
                if (i18 != 0) {
                }
                i22 = Test.byFld;
                f1 += i22;
                Test.bFld = Test.bFld;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 + s1 + i19 + i20 + i21 + i22;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i10, int i11, int i12) {

        int i23=-110, i24=-125, i25=0, i26=63817, iArr[][]=new int[N][N];
        long l=4093328937L, lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -59298);
        FuzzerUtils.init(lArr, -14L);

        i12 -= (Integer.reverseBytes(iMeth1(Test.fFld, i11, i11)) - 225);
        for (i23 = 2; i23 < 360; i23++) {
            i11 += (((i23 * Test.instanceCount) + i10) - i10);
            Test.fArrFld[i23 - 1] += i10;
            i25 = 1;
            while (++i25 < 5) {
                Test.bFld = true;
                Test.fFld = i23;
                i12 += i25;
                iArr[i23 - 1][i25] <<= (int)Test.instanceCount;
                Test.byFld <<= (byte)i23;
                for (l = 1; l < 1; l++) {
                    Test.instanceCount += l;
                    i12 += (int)l;
                    lArr[i23][i23 + 1] = i10;
                    iArr[i23 - 1][(int)(l - 1)] <<= -2;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i23 + i24 + i25 + l + i26 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(double d) {

        int i5=-10, i6=0, i7=-213, i8=11, i9=-8, i27=-18033, i28=-149;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-10078);

        for (i5 = 1; i5 < 297; i5++) {
            i7 = 1;
            do {
                i6 = (Test.iArrFld[i5 + 1] + i5);
                for (i8 = 1; 1 > i8; ++i8) {
                    vMeth(i7, i8, i9);
                }
                for (i27 = i7; 1 > i27; i27++) {
                    if (Test.bFld) {
                        if (Test.bFld) break;
                        i28 -= i28;
                    } else if (Test.bFld) {
                        i28 = (int)Test.instanceCount;
                    }
                    Test.instanceCount -= i9;
                }
                Test.iArrFld[i5 - 1] += (int)Test.fFld;
                sArr[i7 + 1] = (short)-96;
            } while (++i7 < 6);
            i28 >>= i28;
            Test.fFld = i8;
        }
        long meth_res = Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + i9 + i27 + i28 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-202, i2=234, i3=-12, i4=-16565, i29=0, i30=174, i31=241, i32=-11017, i33=-8689, i34=47106;
        float f=0.943F;
        short s=-23599;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-13);

        for (int smallinvoc=0; smallinvoc<640; smallinvoc++) vSmallMeth();
        vSmallMeth();
        for (i1 = 249; i1 > 11; --i1) {
            if (Short.reverseBytes((short)((i1 - s) + (++i2))) != (-(i2++))) {
                vSmallMeth();
                f *= (((Test.instanceCount - f) + Test.instanceCount) - (-i2));
                i2 *= (Test.iArrFld[i1]--);
            }
        }
        for (i3 = 3; i3 < 168; ++i3) {
            i4 -= (int)(iMeth(dFld) - Test.instanceCount);
            Test.instanceCount += (((i3 * i2) + i4) - i3);
            Test.instanceCount = i2;
            dFld = i3;
            for (i29 = 9; 152 > i29; ++i29) {
                for (i31 = 1; i31 < 2; i31 += 2) {
                    i4 = i4;
                    byArr[i31] += (byte)i32;
                    Test.fFld += Test.fFld;
                    i4 ^= Test.iFld;
                    f += (((i31 * s) + i1) - Test.iFld);
                    f -= Test.iFld;
                    if (Test.bFld) continue;
                }
                Test.instanceCount = -23719;
                dFld = Test.instanceCount;
                switch (((i3 % 6) * 5) + 102) {
                case 113:
                    for (i33 = 1; i33 < 2; i33 += 2) {
                        Test.instanceCount ^= Test.iFld;
                        i2 = i31;
                        i34 *= i4;
                        try {
                            i34 = (i29 / i33);
                            Test.iArrFld[i3] = (45123 % Test.iArrFld[i33 - 1]);
                            i32 = (104 % i29);
                        } catch (ArithmeticException a_e) {}
                        dFld += i34;
                    }
                    break;
                case 129:
                    i4 += (int)f;
                    break;
                case 107:
                    i32 = i31;
                    break;
                case 120:
                    Test.iArrFld[i3 - 1] -= 6361;
                    break;
                case 108:
                    Test.iFld += i29;
                case 122:
                    s = (short)i30;
                default:
                    Test.fFld -= i34;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
