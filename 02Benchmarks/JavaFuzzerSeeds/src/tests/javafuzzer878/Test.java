package tests.javafuzzer878;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:07:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-42653L;
    public static boolean bFld=false;
    public long lFld=-183L;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-27653);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, int i2) {

        float f2=-86.828F;
        int i3=235, i4=222, i5=38969, i6=-5, iArr[]=new int[N];
        double d=-125.105950;
        byte by=12, byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 27773);
        FuzzerUtils.init(byArr, (byte)-105);

        f2 -= i1;
        Test.instanceCount = i2;
        for (i3 = 13; i3 < 208; i3++) {
            for (d = 1; d < 8; d++) {
                iArr[i3 - 1] = i5;
                by += (byte)(-2.831F + (d * d));
            }
            Test.instanceCount += (i3 * i2);
            i2 >>= i2;
            i6 = 1;
            while (++i6 < 8) {
                switch ((((i6 >>> 1) % 1) * 5) + 61) {
                case 62:
                    byArr[i6 + 1] = (byte)i5;
                    i1 *= 14096;
                    break;
                }
                f2 -= i5;
                f2 = Test.instanceCount;
            }
            f2 += i2;
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i3 + i4 + Double.doubleToLongBits(d) + i5 + by + i6 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth() {

        int i7=-54;

        vMeth(i7, i7);
        i7 >>= i7;
        long meth_res = i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(float f, int i, float f1) {


        f1 *= (iMeth() - 3331978141168852976L);
        i += i;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i8=-10578, i9=41270, i10=153, i11=186, i12=5, i13=11, i14=36932, i15=-14, iArr1[]=new int[N], iArr2[]=new
            int[N];
        double d1=-55.93251, d2=-23.21625, dArr[][]=new double[N][N];
        short s=8950;
        byte by1=-22, byArr1[]=new byte[N];

        FuzzerUtils.init(iArr1, 34801);
        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(byArr1, (byte)-13);
        FuzzerUtils.init(dArr, -121.109818);

        for (int smallinvoc=0; smallinvoc<942; smallinvoc++) vSmallMeth(-23.813F, i8, 77.922F);
        for (i9 = 13; i9 < 339; i9++) {
            if (Test.bFld) break;
            iArr1[i9 + 1] &= i8;
            iArr2[i9 - 1] %= (int)((long)(d1) | 1);
            i8 += (((i9 * i8) + i10) - s);
            i11 = 1;
            while ((i11 += 2) < 77) {
                if (Test.bFld) break;
                i12 = 1;
                while (++i12 < 3) {
                    i10 += (i12 * i12);
                    i8 *= (int)Test.instanceCount;
                    Test.sArrFld[i11 + 1] = (short)i12;
                    by1 ^= by1;
                    d1 = by1;
                    lFld += (i12 + i9);
                    i10 = i10;
                    byArr1[i12 + 1] += (byte)s;
                }
                d1 *= lFld;
                for (i13 = i9; 3 > i13; ++i13) {
                    Test.instanceCount <<= i12;
                    i14 += (((i13 * i10) + lFld) - i10);
                    s -= (short)Test.instanceCount;
                    iArr1 = iArr1;
                    if (Test.bFld) break;
                }
                for (d2 = 1; 3 > d2; d2 += 2) {
                    dArr[i9][i9] *= i14;
                    d1 = -954306769L;
                    i15 = i10;
                    Test.instanceCount -= i11;
                    iArr1[i11 - 1] += i13;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
