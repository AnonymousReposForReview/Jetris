package tests.javafuzzer1040;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:06:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2876946996L;
    public static short sFld=10294;
    public static double dFld=31.83689;
    public byte byFld=-120;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.iArrFld1, -137);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i12=50, i14=-1, i15=59430;
        double d=-61.35880;
        boolean b=false;

        i12 = 1;
        do {
            int i13=63018;
            i13 *= 36;
            d *= i12;
            f += Test.sFld;
            f -= i13;
            b = b;
            for (i14 = 1; i14 < 5; ++i14) {
                i13 = -946;
                i13 += (((i14 * Test.sFld) + i14) - i13);
                i13 >>= i15;
                i13 += i14;
                i15 -= i14;
                if (b) {
                    Test.instanceCount += Test.instanceCount;
                    f = i13;
                } else if (b) {
                    i15 += i15;
                } else if (b) {
                    try {
                        i15 = (i12 % i14);
                        i13 = (-611554649 % i14);
                        i13 = (i13 % -48529);
                    } catch (ArithmeticException a_e) {}
                } else {
                    Test.iArrFld[i12 + 1] = 158;
                }
            }
        } while (++i12 < 361);
        vMeth2_check_sum += Float.floatToIntBits(f) + i12 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i14 + i15;
    }

    public static void vMeth1(int i9, int i10, int i11) {

        int i16=55, i17=50, i18=0, i19=-224;
        boolean b1=false;
        double d1=0.35212, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)25);
        FuzzerUtils.init(dArr, 123.88735);

        vMeth2(38.1022F);
        for (i16 = 5; 181 > i16; ++i16) {
            for (i18 = 1; i18 < 9; ++i18) {
                i11 += (int)Test.instanceCount;
                i10 += (i18 ^ i9);
                if (b1) {
                    Test.instanceCount ^= i18;
                    byArr[i16 + 1] += (byte)Test.instanceCount;
                    i19 += (int)(0.923F + (i18 * i18));
                    dArr[i16] = i17;
                }
                Test.instanceCount >>= i10;
                d1 += -2L;
                d1 += i18;
                if (false) continue;
                i17 += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2) {

        int i3=-15254, i4=-45577, i5=-9, i6=-46306, i7=163, i8=20224, i20=-3, i21=-4;
        float f1=0.165F;

        for (i3 = 143; 6 < i3; i3--) {
            for (i5 = 1; i5 < 11; i5++) {
                for (i7 = 1; i7 < 2; i7++) {
                    Test.instanceCount += (i7 ^ Test.instanceCount);
                    vMeth1(i3, i4, i6);
                    i4 += 8;
                }
                Test.sFld = (short)-53466;
                for (i20 = 2; i20 > 1; i20--) {
                    Test.dFld += 8;
                    i8 += (((i20 * f1) + i5) - i4);
                    switch ((i20 % 7) + 97) {
                    case 97:
                        i2 = 200;
                        i2 >>>= (int)Test.instanceCount;
                        i8 *= (int)Test.dFld;
                        break;
                    case 98:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 99:
                        i8 += i3;
                    case 100:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    case 101:
                        Test.instanceCount >>= -7364114403347337291L;
                    case 102:
                        i6 += (i20 * i20);
                    case 103:
                        i21 = (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i20 + i21 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i1=2, i22=-4, i23=177, i24=156;
        float f2=98.342F;
        double d2=-31.40378, d3=-1.104792;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5544900537731905955L);

        i <<= (int)(i - lArr[(i >>> 1) % N]);
        i1 = 1;
        do {
            vMeth(i1);
            Test.instanceCount *= i1;
            i &= byFld;
            f2 -= Test.instanceCount;
            Test.iArrFld1[i1] = i1;
            i += (int)Test.instanceCount;
            Test.sFld += (short)f2;
            for (d2 = 3; d2 < 80; d2++) {
                i >>= (int)Test.instanceCount;
                Test.instanceCount = i22;
                lArr[i1] = i;
                try {
                    i = (5862 / i);
                    i = (i % i22);
                    i = (16621 / i);
                } catch (ArithmeticException a_e) {}
                f2 += -45503;
                Test.iArrFld[i1 + 1] >>>= i;
            }
            for (d3 = 5; d3 < 80; d3++) {
                i = (int)-1.22670;
                i += (-49087 + (d3 * d3));
                Test.instanceCount -= Test.instanceCount;
                i24 = 2;
                do {
                    Test.instanceCount >>= i;
                    Test.instanceCount = (long)1.668F;
                    Test.instanceCount += i24;
                    Test.iArrFld1[i1] *= (int)Test.instanceCount;
                } while ((i24 -= 3) > 0);
                Test.instanceCount = Test.sFld;
                i23 %= (int)(i23 | 1);
                i22 += (int)d3;
                i += (int)f2;
                i23 &= (int)-14L;
            }
        } while (++i1 < 315);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
