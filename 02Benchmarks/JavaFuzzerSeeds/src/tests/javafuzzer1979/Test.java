package tests.javafuzzer1979;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=200924461L;
    public static int iFld=-122;
    public static volatile boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 188);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(int i4, float f2, long l) {

        int i5=-32625, i6=-15590, i7=-84, i8=-6, i9=-12023, i10=-44043, i11=-146, i12=50971, iArr1[]=new int[N];
        byte by=37;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -137);
        FuzzerUtils.init(lArr, -7745L);
        FuzzerUtils.init(fArr, -76.628F);

        for (i5 = 8; i5 < 147; ++i5) {
            for (i7 = 1; i7 < 11; i7++) {
                Test.iFld |= i7;
                for (i9 = 1; 2 > i9; i9++) {
                    double d=0.48126;
                    i11 ^= (int)Test.instanceCount;
                    i6 += i4;
                    i12 = (int)d;
                    switch (((-28515 >>> 1) % 8) + 29) {
                    case 29:
                        i11 <<= (int)Test.instanceCount;
                        iArr1[i5 + 1] *= (int)-76.75163;
                        f2 *= i7;
                        break;
                    case 30:
                        iArr1[i9 - 1] >>= (int)Test.instanceCount;
                        lArr[i7] = Test.instanceCount;
                        fArr = fArr;
                        break;
                    case 31:
                        iArr1 = iArr1;
                        break;
                    case 32:
                    case 33:
                        i12 += (i9 * i9);
                        break;
                    case 34:
                        by *= (byte)Test.instanceCount;
                        break;
                    case 35:
                    case 36:
                        i12 = 7;
                        break;
                    }
                }
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f2) + l + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + by +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth(int i, float f1, int i1) {

        int i2=8, i3=-52175, i13=5, i14=-1, i15=64600, iArr2[]=new int[N];
        byte by1=-45;
        double d1=3.123984;
        short s=30375;

        FuzzerUtils.init(iArr2, -38097);

        for (i2 = 9; 373 > i2; i2++) {
            i3 += (int)((-fMeth1(Test.iFld, f1, Test.instanceCount)) + i3);
            i13 = 5;
            while ((i13 -= 2) > 0) {
                Test.instanceCount = -32321;
                Test.iFld *= (int)Test.instanceCount;
                if (true) {
                    for (i14 = 2; i14 > i2; i14--) {
                        iArr2[i14 + 1] -= 18797;
                        switch ((((i2 >>> 1) % 2) * 5) + 17) {
                        case 24:
                            i1 -= i2;
                            Test.instanceCount += (((i14 * by1) + i1) - i15);
                            iArr2[i13] = i3;
                            d1 -= Test.instanceCount;
                            break;
                        case 21:
                            iArr2[i2] = i2;
                            Test.instanceCount += 41151;
                        default:
                            s = (short)1L;
                        }
                    }
                }
            }
        }
        long meth_res = i + Float.floatToIntBits(f1) + i1 + i2 + i3 + i13 + i14 + i15 + by1 +
            Double.doubleToLongBits(d1) + s + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f) {

        int i16=-4442, i17=-1, i18=5543, i19=54, i20=15, i21=12;
        byte by2=12;
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -47465L);

        fMeth(13, f, Test.iFld);
        Test.iFld = Test.iFld;
        Test.instanceCount -= Test.iFld;
        for (i16 = 9; i16 < 354; i16++) {
            Test.iFld += i16;
            switch (((i16 % 2) * 5) + 104) {
            case 107:
                if (b) {
                    for (i18 = 5; i18 > i16; --i18) {
                        for (i20 = 1; i20 > 1; --i20) {
                            Test.iArrFld[i20 + 1] = 0;
                            Test.instanceCount %= (i19 | 1);
                            i21 += i19;
                            i19 *= by2;
                            i21 -= (int)2.959F;
                            i21 = (int)Test.instanceCount;
                        }
                    }
                }
                break;
            case 106:
                lArr1[i16 + 1] -= Test.iFld;
                break;
            default:
                Test.iFld = 21902;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i16 + i17 + i18 + i19 + i20 + i21 + by2 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f3=95.560F;
        int i22=5, i23=-39820, i25=-5, i26=42213, i27=-249, i28=-55849, i29=8, i30=2, iArr[]=new int[N];
        double d2=16.21581;
        short s1=-26809;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(lArr2, -1514259048L);

        iArr = iArr;
        Test.iFld -= (int)((Test.iFld++) + (Test.instanceCount--));
        vMeth(f3);
        for (i22 = 12; i22 < 201; ++i22) {
            for (i25 = i22; i25 < 133; ++i25) {
                i26 *= Test.iFld;
                Test.instanceCount += (i25 - f3);
                i23 = (int)Test.instanceCount;
                Test.iFld -= i22;
                i26 <<= Test.iFld;
                lArr2 = lArr2;
                for (i27 = 1; i27 > 1; i27--) {
                    i26 |= i25;
                    Test.instanceCount += (((i27 * Test.instanceCount) + i25) - i25);
                    i28 += (int)(-1.367F + (i27 * i27));
                    switch (((i25 >>> 1) % 2) + 107) {
                    case 107:
                        Test.instanceCount = Test.instanceCount;
                        d2 -= i27;
                        Test.iFld = i26;
                        break;
                    case 108:
                        Test.instanceCount += (211L + (i27 * i27));
                        s1 += (short)(-247 + (i27 * i27));
                        Test.iFld = i23;
                        iArr[i25 + 1] += i28;
                        break;
                    }
                    i23 += (i27 * i27);
                }
            }
            Test.instanceCount -= i27;
            i29 = 133;
            while (--i29 > 0) {
                i30 = 1;
                do {
                    Test.iArrFld[i22] -= 9308;
                    if (Test.bFld) continue;
                    i23 >>= i26;
                } while (++i30 < 1);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
