package tests.javafuzzer451;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:05:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2L;
    public volatile float fFld=0.531F;
    public int iFld=-9;
    public int iFld1=199;
    public float fArrFld[][]=new float[N][N];
    public static short sArrFld[]=new short[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-29248);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, double d) {

        int i8=-11, i9=-10, i10=-12, i11=47828, i12=-97, i13=157;
        long l1=-228L;
        float f1=-1.30F;
        short s=23963;

        for (i8 = 7; i8 < 309; ++i8) {
            i9 = i9;
            i7 = (int)-82L;
            for (i10 = 1; i10 < 5; ++i10) {
                i7 += 2;
            }
            Test.instanceCount += (i8 * Test.instanceCount);
            i7 += (int)-18L;
            for (l1 = 1; l1 < 5; ++l1) {
                i11 += (int)(((l1 * l1) + l1) - i12);
                i7 += i9;
            }
        }
        i13 = 393;
        do {
            i9 -= (int)f1;
            i12 -= 12;
            i7 = s;
            i9 -= (int)l1;
        } while (--i13 > 0);
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + l1 + i12 + i13 +
            Float.floatToIntBits(f1) + s;
    }

    public static int iMeth(int i4, int i5, int i6) {

        double d1=92.120649;
        int i14=-38260, i15=17531, i16=-31287, i17=111, i18=-22, iArr1[]=new int[N];
        byte by1=-94;
        float f2=14.411F;
        short s1=18032;
        boolean b=true;

        FuzzerUtils.init(iArr1, -8923);

        vMeth1(i6, d1);
        d1 = i6;
        for (i14 = 164; i14 > 4; --i14) {
            i6 |= 33158;
            for (i16 = 1; i16 < 10; i16++) {
                i6 += i14;
                if (b) {
                    switch (((i16 % 1) * 5) + 39) {
                    case 42:
                        i15 -= (int)Test.instanceCount;
                        Test.sArrFld[i16 - 1] -= by1;
                        for (f2 = 2; f2 > 1; f2 -= 2) {
                            by1 = (byte)i5;
                            i6 = (int)Test.instanceCount;
                            iArr1[i14 + 1] += i18;
                            s1 -= (short)i4;
                        }
                        break;
                    }
                } else if (b) {
                    s1 *= (short)Test.instanceCount;
                } else if (b) {
                    i17 *= i16;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + by1 +
            Float.floatToIntBits(f2) + i18 + s1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=-17923, i19=-61961, i20=-36757, i21=4455, iArr2[]=new int[N];
        float f=11.651F;
        double d2=-1.6045;

        FuzzerUtils.init(iArr2, -75);

        i3 = 1;
        do {
            f = (float)(iMeth(i2, i2, i3) - -1.22771);
            for (d2 = i3; d2 < 5; ++d2) {
                short s2=5567;
                i19 |= (int)Test.instanceCount;
                f += (float)(d2 * s2);
                Test.instanceCount -= Test.instanceCount;
                iArr2[(int)(d2)] <<= i3;
            }
        } while (++i3 < 326);
        Test.instanceCount *= i3;
        for (i20 = 248; i20 > 14; i20 -= 2) {
            i21 = i20;
            i21 -= (int)Test.instanceCount;
            i19 -= i19;
            i2 <<= i2;
            Test.instanceCount += i20;
            i2 *= (int)Test.instanceCount;
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i19 + i20 + i21 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=14, i22=1, i23=215, i24=-27309, i25=-19701, i26=13, iArr[]=new int[N];
        byte by=-44, byArr[]=new byte[N];
        long l=59L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, -218);
        FuzzerUtils.init(byArr, (byte)-6);
        FuzzerUtils.init(lArr, -10L);

        i *= ((by++) * Math.max((int)(-(-116 - (fArrFld[(i >>> 1) % N][(i >>> 1) % N]++))), (int)(Test.instanceCount -
            i)));
        l = 263;
        do {
            iArr[(int)(l - 1)] = (int)(Math.abs(Math.abs(i1)) - ((++i) - l));
            vMeth(i1);
            i1 += (int)(l * l);
            fFld -= i;
            i -= iFld;
            fFld *= iFld;
            for (i22 = (int)(l); i22 < 190; i22++) {
                i = (int)-38.626F;
                i24 = 1;
                while (++i24 < 1) {
                    double d3=-32.65150;
                    i |= (int)l;
                    i = iFld;
                    iArr[(i >>> 1) % N] -= (int)fFld;
                    i23 -= (int)fFld;
                    fArrFld[i24 - 1][(int)(l - 1)] += 0.400F;
                    i23 = (int)Test.instanceCount;
                    Test.instanceCount = i23;
                    d3 -= -5;
                    byArr[i22 + 1] = (byte)-32845;
                    i23 >>= by;
                }
                i23 += i1;
                Test.instanceCount = iFld1;
                i1 %= (int)(l | 1);
                lArr[i22] = iFld1;
                Test.instanceCount = 2;
                for (i25 = i22; i25 < 1; ++i25) {
                    iFld1 *= iFld1;
                    Test.bArrFld[(int)(l)] = false;
                    i23 -= -1214;
                }
            }
        } while ((l -= 2) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
