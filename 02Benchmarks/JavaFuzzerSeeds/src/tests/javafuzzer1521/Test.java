package tests.javafuzzer1521;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:05:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7180L;
    public static int iFld=3907;
    public static volatile byte byFld1=103;
    public static int iFld1=122;
    public float fFld1=2.990F;
    public static int iArrFld1[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 17);
        FuzzerUtils.init(Test.sArrFld, (short)23996);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        float f=22.611F;
        double d=0.76068;
        int i5=0, i6=49;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)80);
        FuzzerUtils.init(lArr, -113955008L);

        Test.instanceCount = Test.instanceCount;
        Test.iArrFld1[(i4 >>> 1) % N] = Test.iFld;
        i4 += i3;
        Test.instanceCount %= (i3 | 1);
        i4 = Test.iFld;
        byArr[(i4 >>> 1) % N] = (byte)f;
        Test.byFld1 = (byte)i3;
        for (d = 1; d < 151; d++) {
            i6 = 1;
            do {
                i3 += (int)Test.instanceCount;
                f -= i5;
                i5 -= i6;
                Test.instanceCount += i6;
                i5 = Test.iFld;
                lArr[(int)(d)] -= Test.iFld;
            } while (++i6 < 11);
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + i6 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {

        int i7=-9, i8=12, i9=-11, i10=106, i11=-1;
        short s1=20343;
        double d1=-42.42478;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -17789L);

        vMeth1(Test.iFld, Test.iFld);
        Test.iFld += Test.iFld;
        i7 = 1;
        do {
            for (i8 = 1; i8 < 7; ++i8) {
                Test.iFld *= i7;
                Test.iFld -= (int)Test.instanceCount;
                Test.instanceCount += Test.iFld;
                for (i10 = i8; i10 < 2; ++i10) {
                    s1 = (short)Test.instanceCount;
                    i9 += (int)d1;
                    Test.iFld <<= i10;
                    Test.iFld = (int)Test.instanceCount;
                    Test.byFld1 *= (byte)s1;
                }
                lArr1[i7][i7] = Test.instanceCount;
                Test.iFld += (int)Test.instanceCount;
            }
        } while (++i7 < 250);
        long meth_res = i7 + i8 + i9 + i10 + i11 + s1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i2) {

        double d2=-58.58753, d3=0.119477;
        int i12=32874, i13=-246, i14=-13;
        float f1=-29.210F;

        Test.iFld *= (-(-i2));
        Test.iFld += (Test.byFld1++);
        l = (lMeth() + Test.iFld1);
        d2 = 5;
        Test.iFld += -44122;
        for (i12 = 2; i12 < 275; ++i12) {
            i2 |= Test.iFld;
            l = Test.iFld1;
            for (d3 = 1; d3 < 6; d3++) {
                Test.iArrFld1[(i12 >>> 1) % N] = (int)44602L;
                i13 -= (int)Test.instanceCount;
                Test.iFld = (int)589980604L;
                f1 -= i13;
                Test.iFld1 *= Test.iFld;
                Test.instanceCount = Test.instanceCount;
            }
        }
        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d2) + i12 + i13 + Double.doubleToLongBits(d3) + i14 +
            Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr3) {

        int i15=0, i16=7, i17=174, i18=15874, i19=122, i20=-36, i21=228, i22=19, i23=-4, i24=-49445;
        long l1=-4674552255402447437L;
        double d4=0.105638;

        Test.iFld = Test.iFld;
        vMeth(Test.instanceCount, Test.iFld);
        for (i15 = 20; i15 < 327; i15++) {
            i16 += i15;
            fFld1 += (12 + (i15 * i15));
            i16 *= i16;
            for (l1 = i15; l1 < 82; ++l1) {
                Test.instanceCount = Test.iFld;
                i17 <<= i15;
                d4 = 1;
                do {
                    i16 += (int)(d4 * d4);
                    Test.iArrFld1[(int)(d4)] <<= (int)l1;
                    switch ((int)((l1 % 1) + 93)) {
                    case 93:
                        i18 += (int)d4;
                        break;
                    default:
                        Test.iFld1 = i18;
                    }
                    Test.iFld1 ^= (int)-10L;
                } while (++d4 < 1);
                for (i19 = 1; i19 < 1; ++i19) {
                    Test.instanceCount -= l1;
                    Test.iArrFld1 = Test.iArrFld1;
                    i20 += (((i19 * i18) + i18) - i18);
                    i20 = (int)d4;
                }
            }
            for (i21 = 5; i21 < 82; i21 += 2) {
                switch ((i21 % 5) + 33) {
                case 33:
                    Test.sArrFld[i21 - 1] -= (short)i21;
                    break;
                case 34:
                    Test.sArrFld[i15 - 1] >>= (short)l1;
                    break;
                case 35:
                    i16 = i18;
                    for (i23 = 1; 3 > i23; i23++) {
                        Test.iArrFld1[i15 - 1] = -55705;
                        i22 += (((i23 * fFld1) + i21) - i23);
                    }
                    i20 >>= i21;
                    break;
                case 36:
                    try {
                        Test.iArrFld1[i15] = (i20 / -1712427366);
                        i16 = (i15 / -33935);
                        i20 = (i21 % i23);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 37:
                    Test.instanceCount += (long)d4;
                    break;
                default:
                    i18 |= (int)Test.instanceCount;
                }
            }
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
