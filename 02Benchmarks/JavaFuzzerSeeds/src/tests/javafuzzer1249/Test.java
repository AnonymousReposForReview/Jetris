package tests.javafuzzer1249;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:20:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5259530277590493009L;
    public static byte byFld=36;
    public boolean bFld=true;
    public static double dFld=2.72108;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth1() {

        long l1=14L;
        int i1=-10, i2=150, i3=2087, i4=232, i5=109, iArr[]=new int[N];
        double d=0.122437;
        float f1=2.100F;
        byte by=-51;
        short s=-21591;

        FuzzerUtils.init(iArr, -37);

        l1 = 1;
        while (++l1 < 174) {
            i1 = 1;
            do {
                iArr[i1 + 1] = i1;
            } while (++i1 < 9);
        }
        d = 1;
        do {
            for (i2 = 6; i2 > 1; i2 -= 2) {
                f1 -= Math.max((int)((i3 + Test.instanceCount) - (i3--)), (int)((Test.instanceCount - i3) +
                    (Test.instanceCount + i2)));
                iArr[(int)(d - 1)] -= (int)(by - ((-f1) + (Test.instanceCount--)));
                iArr = iArr;
                i3 += i2;
                i3 += i2;
                i3 = (int)l1;
            }
            for (i4 = (int)(d); i4 < 6; i4++) {
                iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)3)));
                f1 += (i4 * i1);
                s += (short)(((i4 * i2) + i4) - Test.instanceCount);
            }
        } while (++d < 272);
        vMeth1_check_sum += l1 + i1 + Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f1) + by + i4 + i5 +
            s + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i9) {

        int i10=2, i11=-1208, i12=7193, i13=-38806, i14=-186, i15=1, iArr1[]=new int[N];
        double d2=104.70727;
        byte by1=14;
        float f2=-1.843F;

        FuzzerUtils.init(iArr1, -14);

        i10 = 1;
        do {
            switch (((i10 % 2) * 5) + 82) {
            case 87:
                d2 -= i10;
                by1 += (byte)(((i10 * f2) + Test.instanceCount) - i10);
                for (i11 = i10; i11 < 5; ++i11) {
                    i12 += (int)f2;
                    f2 += Test.instanceCount;
                    for (i13 = 1; i13 > 1; --i13) {
                        iArr1[i10 + 1] <<= i10;
                        d2 %= (i15 | 1);
                        i12 += i13;
                        i14 = i10;
                    }
                    iArr1[i11] <<= i13;
                    try {
                        i12 = (125 % i14);
                        i15 = (-32420 % i9);
                        i15 = (i15 % 2067086262);
                    } catch (ArithmeticException a_e) {}
                    i9 = i13;
                }
                break;
            case 91:
                f2 += i10;
            }
        } while (++i10 < 302);
        long meth_res = i9 + i10 + Double.doubleToLongBits(d2) + by1 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14
            + i15 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(long l2) {

        int i8=-51226, i16=-37, i17=-128, i18=15, i19=-24404, i20=-4, i21=-5694, iArr2[]=new int[N];
        float f3=-116.269F;
        short s1=26480;
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -116L);
        FuzzerUtils.init(iArr2, -1);
        FuzzerUtils.init(dArr, 29.127618);

        i8 = (int)((i8--) * lMeth(9));
        for (i16 = 9; i16 < 193; ++i16) {
            switch ((i16 % 6) + 80) {
            case 80:
                switch (((i16 % 7) * 5) + 98) {
                case 121:
                    i8 = (int)f3;
                    lArr[i16 - 1] -= i16;
                    break;
                case 118:
                    i18 += (i16 * i16);
                    l2 += i17;
                    for (i19 = 9; i19 > 1; i19--) {
                        iArr2[i19] >>= -43901;
                        i21 = 1;
                        do {
                            Test.instanceCount = i19;
                            s1 = s1;
                            lArr[i21] += -7;
                            i18 = (int)l2;
                        } while (++i21 < 2);
                    }
                    break;
                case 114:
                    l2 += i16;
                    break;
                case 120:
                    dArr[i16] = i16;
                case 103:
                    i20 -= i8;
                    break;
                case 122:
                    l2 += (-30718 + (i16 * i16));
                    break;
                case 129:
                }
                break;
            case 81:
                s1 |= (short)i17;
            case 82:
                i20 = i18;
            case 83:
                s1 += (short)i16;
            case 84:
                if (b) break;
                break;
            case 85:
                i20 >>= Test.byFld;
                break;
            }
        }
        long meth_res = l2 + i8 + i16 + i17 + Float.floatToIntBits(f3) + i18 + i19 + i20 + i21 + s1 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i, float f, long l) {

        double d1=50.46631;
        int i6=-10360, i7=-27432, i22=137, i23=-8;
        long l3=2100380111L;
        boolean b1=false;

        vMeth1();
        d1 = (-(f--));
        vMeth1();
        for (i6 = 10; i6 < 347; i6++) {
            i7 -= Math.min(7362, i7);
            i -= (int)((Math.min(i7, i6) * fMeth(5L)) * 2);
            for (i22 = 1; i22 < 5; ++i22) {
                l3 = 1;
                do {
                    if (b1) continue;
                    i = (int)l;
                    if (b1) {
                        i -= i23;
                        i -= i7;
                        i7 <<= i22;
                        Test.iArrFld[(int)(l3)] = 66;
                    } else {
                        f = f;
                    }
                } while (++l3 < 2);
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d1) + i6 + i7 + i22 + i23 + l3 +
            (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i24=-12, i25=-5, i26=-135, i27=-46, i28=-215, i29=-6;
        float f4=-1.1F, fArr[]=new float[N];
        short s2=25955;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 4126065126L);
        FuzzerUtils.init(fArr, -81.306F);

        vMeth(i24, f4, Test.instanceCount);
        for (i25 = 1; 140 > i25; ++i25) {
            Test.instanceCount -= i25;
            i24 <<= i24;
            Test.byFld -= (byte)-102;
            i27 = 180;
            do {
                switch (((i25 % 6) * 5) + 105) {
                case 116:
                    i26 -= (int)Test.instanceCount;
                    bFld = bFld;
                case 120:
                    lArr1[i25 + 1] = i25;
                    Test.instanceCount = -165;
                case 123:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 132:
                    try {
                        i26 = (-65510 / i26);
                        i24 = (62 / i27);
                        i26 = (-114 / Test.iArrFld[i27]);
                    } catch (ArithmeticException a_e) {}
                    for (i28 = 1; i28 < 1; ++i28) {
                        switch ((i28 % 1) + 94) {
                        case 94:
                            i29 &= (int)Test.instanceCount;
                            try {
                                i26 = (Test.iArrFld[i25 - 1] % 256);
                                i24 = (Test.iArrFld[i25 - 1] / -64);
                                i26 = (1641503906 / i25);
                            } catch (ArithmeticException a_e) {}
                            i29 = (int)Test.instanceCount;
                            if (true) {
                                s2 -= (short)i24;
                                i24 += i28;
                            } else {
                                Test.instanceCount = i24;
                                fArr[i27 + 1] *= f4;
                                Test.dFld = 8967799302977293161L;
                                i24 = i24;
                            }
                        default:
                            switch ((i27 % 2) + 70) {
                            case 70:
                                switch ((((i27 >>> 1) % 10) * 5) + 43) {
                                case 66:
                                    i29 += (i28 + i29);
                                    break;
                                case 78:
                                    i29 *= (int)64703L;
                                    i29 = (int)-17747L;
                                    break;
                                case 73:
                                    Test.iArrFld[i27 - 1] -= i26;
                                    break;
                                case 81:
                                    Test.byFld = (byte)i24;
                                    break;
                                case 59:
                                    i29 += (((i28 * i27) + i28) - Test.instanceCount);
                                    break;
                                case 61:
                                    i29 = i28;
                                    break;
                                case 58:
                                    lArr1[i28] = i26;
                                case 91:
                                    i24 = i24;
                                    break;
                                case 50:
                                    Test.instanceCount *= -64L;
                                case 72:
                                    lArr1[i27] += i28;
                                }
                                break;
                            case 71:
                                i26 = i28;
                                break;
                            default:
                                Test.iArrFld = Test.iArrFld;
                            }
                        }
                    }
                    break;
                case 126:
                    Test.dFld += Test.instanceCount;
                    break;
                case 112:
                    Test.instanceCount >>= i26;
                    break;
                }
            } while (--i27 > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
