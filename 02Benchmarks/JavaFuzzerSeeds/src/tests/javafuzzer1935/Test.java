package tests.javafuzzer1935;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-58827L;
    public static double dFld=85.69755;
    public static float fFld=-2.129F;
    public static volatile byte byFld=23;
    public static int iFld=-4;
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.3262);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4) {

        int i5=-7, i6=-4, i7=-170, i8=-14, i9=2, i10=-57, i11=-5, i12=-57;
        float f2=1.86F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 79L);

        for (i5 = 8; i5 < 237; i5++) {
            i4 -= (int)f2;
            for (i7 = 1; i7 < 7; i7++) {
                lArr[i5] ^= 64428;
            }
            i8 += i7;
            Test.dFld = -1742049239L;
            i8 = (int)-2599448399L;
            i8 -= i8;
            Test.instanceCount = i5;
            f2 += Test.instanceCount;
            for (i9 = i5; 7 > i9; ++i9) {
                Test.instanceCount += i7;
                for (i11 = i9; 1 > i11; ++i11) {
                    i4 = i7;
                    i6 += (i11 * i11);
                }
            }
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, int i2) {

        int i3=-10, i13=-156, i14=-41, i15=90;
        byte by=112;
        float fArr[]=new float[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, -10.460F);
        FuzzerUtils.init(lArr1, 10L);

        i3 = 1;
        do {
            i2 = (int)lMeth(i2);
            i13 = 1;
            do {
                fArr[i3 + 1] = l;
                i2 = -9;
                for (i14 = 1; i14 < 1; ++i14) {
                    by += (byte)(i14 + Test.fFld);
                    lArr1[i14 - 1][i3 - 1] = 27;
                    lArr1[i3 - 1][i13] -= (long)-38.8F;
                    switch (((i15 >>> 1) % 2) + 3) {
                    case 3:
                    case 4:
                        if (i14 != 0) {
                        }
                        i2 += i14;
                        i2 <<= i14;
                        break;
                    }
                    i15 = i13;
                    by = (byte)l;
                }
            } while (++i13 < 8);
        } while (++i3 < 201);
        long meth_res = l + i2 + i3 + i13 + i14 + i15 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, float f1, int i1) {

        int i16=-16126, i17=-60914, i18=289, i19=-2, i20=-14505;
        long l1=-4316261555657152645L;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.84F);

        i1 |= (iMeth(Test.instanceCount, i1) - i1);
        Test.instanceCount = i1;
        i16 = 1;
        do {
            i1 = (int)Test.instanceCount;
            i1 += (((i16 * Test.fFld) + i1) - i16);
            l1 = 1;
            while (++l1 < 5) {
                for (i17 = 1; 1 < i17; i17--) {
                    fArr1 = fArr1;
                }
                i18 += (int)(l1 * l1);
                for (i19 = 1; i19 < 1; i19++) {
                    i1 += (((i19 * i16) + Test.instanceCount) - Test.byFld);
                    i18 -= i17;
                    i18 = -817;
                    i1 <<= (int)l1;
                    i20 = i20;
                }
            }
        } while (++i16 < 329);
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i1 + i16 + l1 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=73, i21=1, i22=-215, i23=52144, i25=-4, i26=12, i27=8, i28=10, i29=-1886, i30=-6, iArr[]=new int[N];
        double d=-85.21611;
        long l2=7212L;
        boolean b=true;

        FuzzerUtils.init(iArr, 14);

        i = iArr[(i >>> 1) % N];
        i = (int)(++Test.instanceCount);
        vMeth(0.383F, Test.fFld, 58558);
        for (d = 14; d < 383; d++) {
            for (l2 = 1; l2 < 68; ++l2) {
                i21 >>= i;
                i21 += (int)Test.fFld;
                i22 <<= Test.byFld;
                Test.instanceCount = i;
                Test.instanceCount >>= i21;
            }
            i *= (int)Test.instanceCount;
        }
        i23 = 1;
        do {
            for (i25 = 2; i25 < 124; i25++) {
                i27 = 1;
                do {
                    i22 = (int)Test.instanceCount;
                    i = i27;
                } while (++i27 < 2);
                iArr[(i21 >>> 1) % N] = i;
            }
            i28 = 1;
            while (++i28 < 124) {
                switch ((i28 % 10) + 74) {
                case 74:
                    for (i29 = i23; i29 < 1; i29++) {
                        i21 = i27;
                        if (b) continue;
                        iArr[i23] >>= i26;
                        Test.dFld -= Test.fFld;
                        i26 += (((i29 * i28) + i27) - Test.fFld);
                        Test.fFld += (i29 + i30);
                        Test.dArrFld[i29 + 1] += i21;
                        Test.instanceCount *= 1456031925331341121L;
                    }
                    Test.fFld *= Test.instanceCount;
                    iArr[i28 - 1] -= i26;
                case 75:
                    Test.fFld -= i;
                    break;
                case 76:
                    Test.instanceCount = Test.instanceCount;
                case 77:
                    i = (int)l2;
                    break;
                case 78:
                    Test.iFld |= Test.byFld;
                    break;
                case 79:
                    Test.iFld >>>= i21;
                    break;
                case 80:
                case 81:
                    Test.fFld += i28;
                    break;
                case 82:
                    iArr[(-7 >>> 1) % N] -= (int)Test.fFld;
                case 83:
                    i26 += (i28 * i28);
                    break;
                default:
                    iArr[(i26 >>> 1) % N] = (int)l2;
                }
            }
        } while (++i23 < 202);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
