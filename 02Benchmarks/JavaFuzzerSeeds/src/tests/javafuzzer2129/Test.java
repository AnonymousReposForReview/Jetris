package tests.javafuzzer2129;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:15:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-235L;
    public static int iFld=32171;
    public static double dFld=-2.105666;
    public static short sFld=7589;
    public static boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.969F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3) {

        float f=-72.278F, f1=-62.323F;
        int i4=-11737, i5=-8, i6=-88, i7=-1, i8=0, i9=-195, i10=-56317;
        byte by=65;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -42976L);

        Test.sFld += (short)f;
        for (i4 = 138; i4 > 8; i4 -= 3) {
            by += (byte)(i4 * i4);
            Test.sFld = (short)i5;
            i3 = (int)Test.instanceCount;
        }
        switch ((((i4 >>> 1) % 1) * 5) + 121) {
        case 122:
            lArr[(i2 >>> 1) % N] -= i6;
            break;
        default:
            i5 += (int)-1917733924L;
            for (i7 = 256; i7 > 1; --i7) {
                if (true) break;
                for (i9 = i7; i9 < 6; i9 += 3) {
                    Test.dFld -= -54;
                    f1 = 1;
                    while (++f1 < 1) {
                        i8 += (int)((long)f1 ^ Test.instanceCount);
                        by += (byte)f1;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + by + i6 + i7 + i8 + i9 + i10 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i=-6381, i1=5, i11=-162, i12=12, i13=-118, iArr[]=new int[N];
        float f2=0.938F, f3=0.987F;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -160);
        FuzzerUtils.init(lArr1, 48L);

        for (i = 10; 245 > i; ++i) {
            Test.fArrFld[i] += (float)(Test.dFld * ((i1++) / (iMeth(i, Test.iFld) | 1)));
        }
        for (f2 = 15; f2 < 387; ++f2) {
            for (i12 = (int)(f2); 5 > i12; i12 += 2) {
                i13 <<= (int)Test.instanceCount;
                switch (((116 >>> 1) % 3) + 85) {
                case 85:
                    b = b;
                    iArr[i12 - 1] *= (int)Test.instanceCount;
                    break;
                case 86:
                case 87:
                    Test.instanceCount = -3553709833013717076L;
                    break;
                }
                if (b) {
                    i13 = (int)f2;
                    switch (((i13 >>> 1) % 7) + 90) {
                    case 90:
                        Test.iFld += Test.sFld;
                        i11 >>= i;
                        Test.instanceCount = i11;
                        break;
                    case 91:
                        iArr[(int)(f2 - 1)] += (int)Test.dFld;
                        break;
                    case 92:
                    case 93:
                    case 94:
                        Test.iFld >>>= i12;
                    case 95:
                        f3 += (-1530080548L + (i12 * i12));
                        break;
                    case 96:
                        Test.instanceCount <<= i1;
                        break;
                    default:
                        Test.instanceCount += i12;
                    }
                } else if (b) {
                    f3 *= i11;
                } else if (b) {
                    lArr1[i12 + 1] &= Test.iFld;
                    vMeth1_check_sum += i + i1 + Float.floatToIntBits(f2) + i11 + i12 + i13 + (b ? 1 : 0) +
                        Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                    return;
                } else {
                    Test.instanceCount -= i13;
                }
            }
        }
        vMeth1_check_sum += i + i1 + Float.floatToIntBits(f2) + i11 + i12 + i13 + (b ? 1 : 0) +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {


        Test.iFld <<= (-(Test.iFld++));
        vMeth1();
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i14=-11, i15=-251, i16=10, i17=-137, i18=58317, i19=-17406, i20=-4, i21=54, i22=103, i23=1, iArr1[]=new
            int[N];
        float f4=-29.809F;
        byte by1=-1;

        FuzzerUtils.init(iArr1, -28919);

        vMeth();
        for (i14 = 22; 394 > i14; i14++) {
            i15 -= (int)Test.instanceCount;
            if (Test.bFld) {
                Test.iFld += (((i14 * f4) + Test.instanceCount) - Test.iFld);
            }
            for (i16 = 68; i14 < i16; i16--) {
                switch (((i16 % 1) * 5) + 86) {
                case 91:
                    switch (((i14 % 8) * 5) + 9) {
                    case 28:
                    case 21:
                        i17 *= 42279;
                        Test.instanceCount *= 53710;
                        break;
                    case 27:
                        try {
                            Test.iFld = (i14 / iArr1[i16 - 1]);
                            i17 = (i17 / i16);
                            iArr1[i16] = (i15 % i15);
                        } catch (ArithmeticException a_e) {}
                    case 40:
                        iArr1[i14 - 1] = i16;
                        i18 -= i17;
                        iArrFld[i16] -= i14;
                        for (i19 = 1; 1 < i19; i19--) {
                            i15 += by1;
                            Test.instanceCount = -4;
                            Test.instanceCount = 9;
                            if (Test.bFld) {
                                f4 += i20;
                                i15 = i17;
                                i21 *= (int)Test.instanceCount;
                                Test.iFld += i19;
                            } else {
                                i18 -= by1;
                                i18 *= (int)Test.instanceCount;
                                i18 += i19;
                            }
                        }
                        break;
                    case 19:
                        for (i22 = i14; 1 > i22; ++i22) {
                            i20 += (int)f4;
                        }
                        break;
                    case 12:
                    case 49:
                        i17 = (int)Test.instanceCount;
                        Test.sFld += (short)(i16 + i18);
                    case 41:
                        Test.instanceCount = Test.sFld;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
