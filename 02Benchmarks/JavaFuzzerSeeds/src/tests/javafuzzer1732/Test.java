package tests.javafuzzer1732;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:38:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-515898778L;
    public int iFld=-14;
    public static float fFld=1.634F;
    public static int iFld1=-3;
    public static double dFld=73.33379;
    public volatile short sFld=-31186;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -19615);
        FuzzerUtils.init(Test.lArrFld, -53878L);
        FuzzerUtils.init(Test.fArrFld, 0.431F);
        FuzzerUtils.init(Test.dArrFld, 45.95615);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1) {

        int i5=11, i6=33, i7=19567, i8=-13, i9=-48872, i10=36631, i11=54573;
        double d=1.81699;
        long l2=2932834512L;
        float f=105.530F;
        short s=-34;

        for (i5 = 6; i5 < 289; ++i5) {
            i6 *= (int)d;
            i6 -= (int)1.52965;
            for (l2 = 1; l2 < 6; l2 += 2) {
                for (i8 = i5; i8 < 3; ++i8) {
                    i9 *= i7;
                    Test.instanceCount = l2;
                    i9 -= i10;
                }
                i11 = 3;
                do {
                    f = i6;
                } while (--i11 > 0);
                Test.iArrFld[(int)(l2 + 1)] += i11;
            }
            Test.fArrFld[i5 + 1] *= -21451;
            i7 += (int)l;
            i6 |= i6;
            i7 = s;
        }
        vMeth1_check_sum += l + l1 + i5 + i6 + Double.doubleToLongBits(d) + l2 + i7 + i8 + i9 + i10 + i11 +
            Float.floatToIntBits(f) + s;
    }

    public int iMeth(int i1, int i2, int i3) {

        int i4=41892, i12=14;
        double d1=7.114517;
        long l3=-899589785L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)16063);

        i4 = 1;
        while (++i4 < 238) {
            vMeth1(1842292323L, Test.instanceCount);
            d1 += i2;
            switch (((i4 % 9) * 5) + 103) {
            case 129:
                Test.iArrFld[i4] += (int)l3;
                i3 -= i3;
                sArr[i4] -= (short)l3;
                i1 += (((i4 * iFld) + iFld) - i3);
                break;
            case 140:
                i1 *= (int)d1;
                Test.iArrFld[i4 - 1] -= (int)Test.fFld;
                break;
            case 119:
                Test.iArrFld[i4 + 1] += (int)2.1012F;
            case 121:
                try {
                    i1 = (i1 / -55357);
                    Test.iArrFld[i4] = (i2 / i2);
                    i2 = (i1 % 39602);
                } catch (ArithmeticException a_e) {}
            case 126:
                i12 += (i4 | iFld);
                l3 += (((i4 * l3) + i12) - Test.instanceCount);
                Test.fFld *= l3;
            case 118:
                iFld += (-65007 + (i4 * i4));
                break;
            case 116:
                i2 += i4;
                break;
            case 106:
            case 113:
                Test.fFld += (float)d1;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(d1) + l3 + i12 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(byte by) {

        int i13=-37077, i14=49978, i15=-6, i16=77, i17=-80;
        short s1=-26607;

        Test.iArrFld[(iFld >>> 1) % N] ^= (int)(Math.min(++Test.instanceCount, iFld * -1) - (Math.min(-30, iFld) +
            (iFld * iFld)));
        Test.lArrFld[(iFld >>> 1) % N] -= ((iFld -= iMeth(iFld, iFld, iFld)) - 51989);
        iFld = 0;
        i13 = 1;
        do {
            Test.iArrFld[i13] += i13;
            s1 = (short)Test.instanceCount;
            iFld += (((i13 * i13) + by) - Test.instanceCount);
            iFld &= i13;
            for (i14 = 1; 11 > i14; i14++) {
                Test.instanceCount += i14;
                Test.iArrFld[i14 - 1] -= i13;
            }
        } while (++i13 < 137);
        Test.dArrFld[(i13 >>> 1) % N][(i13 >>> 1) % N] += s1;
        for (i16 = 12; i16 < 301; ++i16) {
            iFld -= (int)-2.231F;
            Test.instanceCount -= i13;
        }
        vMeth_check_sum += by + i13 + s1 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=53, i18=222, i19=-41824, i20=14, i21=-3003, i22=166;
        byte by1=-62;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i = 1;
        do {
            switch ((i % 8) + 91) {
            case 91:
            case 92:
                vMeth((byte)(-30));
                i18 = 84;
                do {
                    iFld = i;
                    Test.iArrFld[i + 1] &= i;
                    Test.instanceCount <<= i;
                    Test.fFld -= iFld;
                    bArr[i] = true;
                    i19 = 1;
                    while (++i19 < 1) {
                        iFld += (int)Test.instanceCount;
                        Test.instanceCount -= i18;
                        iFld = 8;
                    }
                    iFld -= i19;
                    iFld >>= i18;
                    for (i20 = 1; i20 > i18; i20--) {
                        Test.instanceCount = Test.iFld1;
                    }
                    Test.instanceCount += (((i18 * Test.instanceCount) + i19) - i);
                } while (--i18 > 0);
            case 93:
                i22 = 1;
                do {
                    Test.dFld = -1.973F;
                    Test.instanceCount += i22;
                    Test.instanceCount = -60;
                    iFld <<= i;
                    i21 |= i20;
                    switch (((Test.iFld1 >>> 1) % 4) + 39) {
                    case 39:
                        sFld *= (short)229;
                        Test.fFld = by1;
                        Test.iFld1 = iFld;
                    case 40:
                        Test.iArrFld[i22 - 1] = -105;
                        i21 = (int)Test.instanceCount;
                        break;
                    case 41:
                    case 42:
                        iFld -= (int)Test.instanceCount;
                        break;
                    }
                } while (++i22 < 84);
                break;
            case 94:
                Test.instanceCount = Test.instanceCount;
                break;
            case 95:
                Test.iFld1 += (((i * Test.fFld) + Test.instanceCount) - i19);
            case 96:
                i21 += (((i * iFld) + i18) - Test.instanceCount);
                break;
            case 97:
                Test.iArrFld[i] <<= -18528;
                break;
            case 98:
                Test.fArrFld[i] -= 3428143586L;
                break;
            default:
                Test.instanceCount = by1;
            }
        } while (++i < 300);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
