package tests.javafuzzer1774;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:14:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2909L;
    public volatile int iFld=35;
    public static float fFld=0.573F;
    public static byte byFld=45;
    public static short sFld=10726;
    public long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 201);
        FuzzerUtils.init(Test.fArrFld, 2.529F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        int i4=-45878, i5=-209, i6=-16444, i7=-4, i8=117, i9=7, i10=-3, i11=-20385, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -41421);

        for (i4 = 4; i4 < 218; i4++) {
            i3 += (((i4 * i3) + i5) - i3);
            for (i6 = i4; i6 < 8; i6++) {
                i7 ^= Test.byFld;
            }
            for (i8 = 1; i8 < 8; ++i8) {
                i3 = (int)Test.instanceCount;
                i10 *= Test.byFld;
                iArr[i8] >>= i7;
                i11 = 1;
                while (++i11 < 2) {
                    b1 = b1;
                    try {
                        i9 = (iArr[i11] / 303483745);
                        i9 = (41085 % i4);
                        i3 = (i9 / iArr[i8]);
                    } catch (ArithmeticException a_e) {}
                    i9 -= i6;
                    i7 += (int)Test.fFld;
                }
                i5 += (int)13L;
                i5 = 45034;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth1(long l) {

        int i12=19082, i13=56820, i14=-10, iArr1[]=new int[N];
        long l1=1L;
        boolean b2=false;
        double d1=0.108893;
        short s1=-23605;

        FuzzerUtils.init(iArr1, 5);

        iFld -= (int)Test.fFld;
        vMeth(iFld);
        iFld -= -135;
        for (i12 = 6; i12 < 149; i12++) {
            l <<= l1;
            iArr1[i12] -= Test.byFld;
            Test.fFld += iFld;
            b2 = false;
            i13 += (((i12 * i13) + iFld) - Test.fFld);
            if (b2) break;
            i14 = 1;
            do {
                iFld += (int)l;
            } while (++i14 < 11);
        }
        Test.fFld *= (float)d1;
        Test.fFld -= l1;
        iFld = s1;
        long meth_res = l + i12 + i13 + l1 + (b2 ? 1 : 0) + i14 + Double.doubleToLongBits(d1) + s1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(double d, int i1, int i2) {

        long l2=-2415792863776365149L;
        int i15=-40809, i17=-40802, i18=-55246;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -63.11771);

        i1 += ((Math.abs(i2) * iMeth1(Test.instanceCount)) * i2);
        for (l2 = 14; l2 < 250; ++l2) {
            Test.iArrFld[(int)(l2)] -= i1;
            i1 -= -119;
            Test.fFld -= i2;
            Test.fFld += l2;
        }
        for (int i16 : Test.iArrFld) {
            Test.fFld += i2;
            if (false) {
                Test.fArrFld[(i15 >>> 1) % N] = i1;
                iFld *= (int)-2.527F;
                for (i17 = 1; i17 < 4; i17++) {
                    Test.iArrFld[i17] = Test.sFld;
                    dArr[i17 + 1][i17 + 1] %= (i15 | 1);
                    Test.instanceCount = i16;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + l2 + i15 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11537;
        short s=31233;
        boolean b=false;
        float f=105.881F;
        double d2=-2.100308;

        Test.instanceCount = (-(lArrFld[(i >>> 1) % N] * Short.reverseBytes(s)));
        bArrFld[(-10 >>> 1) % N] = b;
        f = (iMeth(d2, i, -176) * i);
        iFld = iFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
