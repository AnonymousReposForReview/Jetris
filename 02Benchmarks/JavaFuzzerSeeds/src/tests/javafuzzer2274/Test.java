package tests.javafuzzer2274;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:16:49 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=523860721113186529L;
    public static int iFld=-13;
    public static volatile int iFld1=146;
    public float fFld=2.268F;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 44);
        FuzzerUtils.init(Test.lArrFld, 2979168779596251972L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-163, i3=-14, iArr[]=new int[N];
        long l=1L;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 104.23450);
        FuzzerUtils.init(iArr, 2);

        i2 = 1;
        while (++i2 < 175) {
            for (l = 9; 1 < l; --l) {
                dArr1[i2 + 1] = iArr[i2 - 1];
                Test.instanceCount += (l + i2);
            }
        }
        long meth_res = i2 + l + i3 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth() {

        int i8=3983, i9=-241, i10=-7, i11=-8;
        double d1=0.109928, dArr2[]=new double[N];
        boolean b=true;

        FuzzerUtils.init(dArr2, 0.120795);

        for (i8 = 11; 181 > i8; i8 += 3) {
            i10 = 1;
            do {
                i9 = i10;
                i11 = 1;
                while (++i11 < 1) {
                    i9 += (13 + (i11 * i11));
                    dArr2[i11 - 1] = 16;
                    Test.iArrFld[i8][i10] = (int)d1;
                    switch ((i11 % 7) + 86) {
                    case 86:
                        Test.iArrFld[i10] = Test.iArrFld[i8];
                        i9 = i10;
                        break;
                    case 87:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    case 88:
                        i9 *= i11;
                        if (b) {
                            d1 = Test.instanceCount;
                            i9 -= (int)Test.instanceCount;
                        } else {
                            i9 <<= (int)Test.instanceCount;
                        }
                        break;
                    case 89:
                        Test.instanceCount = i10;
                    case 90:
                        Test.lArrFld[i10] += i8;
                        break;
                    case 91:
                        i9 <<= i8;
                        break;
                    case 92:
                        i9 -= (int)Test.instanceCount;
                        break;
                    }
                }
            } while (++i10 < 27);
        }
        long meth_res = i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(int i4) {

        int i5=12, i6=24269, i7=-22, i12=-4897, i13=-42148, i14=6, i15=216;
        float f=41.1016F;
        double d2=0.36527;
        byte by1=-62;

        i5 = 1;
        do {
            for (i6 = 1; i6 < 4; i6++) {
                f *= byMeth();
                i12 += i6;
            }
            for (i13 = 1; 4 > i13; i13++) {
                short s=774;
                if (i13 != 0) {
                }
                s += (short)i13;
                i4 += (int)f;
                Test.iArrFld[i5][i13 + 1] += i5;
                i15 = 1;
                do {
                    switch ((i5 % 1) + 90) {
                    case 90:
                        i4 ^= (int)3095385347L;
                        d2 = Test.instanceCount;
                        break;
                    }
                    i7 <<= i7;
                    i7 += by1;
                } while (++i15 < 2);
            }
        } while (++i5 < 383);
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d2) + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, int i1) {

        double d=115.88110, dArr[]=new double[N];
        byte by=122;
        float f1=0.139F;
        long l1=3723971768L;
        int i16=7, i17=-46, i18=51146, i19=3, i20=5, i21=232;
        short s1=26373;

        FuzzerUtils.init(dArr, -48.9635);

        i -= (int)(d += ((-245 * (-157 + (by * 69))) * (++dArr[(i1 >>> 1) % N])));
        i = (int)(iMeth() - (lMeth(i) + i1));
        Test.iArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] = (int)f1;
        Test.instanceCount += i1;
        Test.iFld %= (int)(i | 1);
        f1 *= i1;
        for (l1 = 6; 267 > l1; l1++) {
            for (i17 = 1; 6 > i17; i17++) {
                try {
                    Test.iFld = (Test.iArrFld[(int)(l1)][i17] % Test.iArrFld[(int)(l1 - 1)][i17]);
                    Test.iFld = (Test.iArrFld[i17 + 1][(int)(l1)] / Test.iArrFld[(int)(l1 - 1)][(-1 >>> 1) % N]);
                    i = (Test.iArrFld[i17 - 1][i17 + 1] / i1);
                } catch (ArithmeticException a_e) {}
                s1 ^= (short)-51210;
            }
            for (i19 = 1; 6 > i19; ++i19) {
                i21 = 1;
                while (++i21 < 2) {
                    Test.instanceCount += 56804L;
                    Test.instanceCount >>= i21;
                }
                Test.instanceCount %= (i19 | 1);
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f1) + l1 + i16 + i17 + i18 +
            s1 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=-8674, i23=20, i24=5, i25=60, i26=12, i27=-107, i28=-14, i29=-1, i30=236;
        boolean b1=true;
        byte by2=10;
        short s2=767;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 2.971F);

        vMeth(Test.iFld1, 219);
        Test.iArrFld[(46439 >>> 1) % N] = Test.iArrFld[(Test.iFld1 >>> 1) % N];
        for (i22 = 4; i22 < 370; i22++) {
            double d3=1.61954;
            d3 += fFld;
            d3 -= Test.iFld1;
            for (i24 = i22; i24 < 69; ++i24) {
                Test.iFld = i22;
            }
            Test.iArrFld[i22][i22] += i26;
            if (b1) break;
            if (b1) {
                Test.instanceCount >>>= by2;
                Test.iArrFld[i22 - 1][i22] = Test.iFld1;
            } else if (false) {
                Test.iFld = Test.iFld;
                i23 *= by2;
                if (true) {
                    switch ((i22 % 5) + 25) {
                    case 25:
                        Test.iFld = (int)Test.instanceCount;
                        for (i27 = 69; i27 > 1; i27--) {
                            Test.instanceCount += i24;
                            Test.instanceCount = i23;
                            for (i29 = 2; i29 > 1; i29 -= 3) {
                                Test.instanceCount |= 9L;
                                Test.lArrFld[i29] >>= Test.instanceCount;
                                s2 += (short)(((i29 * i24) + Test.instanceCount) - i27);
                                switch ((i29 % 2) + 75) {
                                case 75:
                                    i30 += (i29 * Test.iFld);
                                    switch ((((i30 >>> 1) % 2) * 5) + 85) {
                                    case 93:
                                        fArr[i29 + 1][i27] += i30;
                                    case 88:
                                        Test.iArrFld[i27 + 1][i22 + 1] *= i28;
                                    default:
                                        Test.instanceCount = i23;
                                    }
                                case 76:
                                    s2 += (short)(((i29 * s2) + Test.instanceCount) - Test.instanceCount);
                                default:
                                    i23 = (int)Test.instanceCount;
                                }
                            }
                        }
                    case 26:
                        i25 >>= i30;
                        break;
                    case 27:
                        i30 *= (int)Test.instanceCount;
                        break;
                    case 28:
                        i23 = (int)-1359897087L;
                        break;
                    case 29:
                        if (b1) break;
                        break;
                    default:
                        Test.instanceCount += (((i22 * Test.instanceCount) + i29) - i29);
                    }
                } else {
                    Test.iFld >>>= -196;
                }
            } else {
                i25 += (((i22 * s2) + i22) - Test.instanceCount);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
