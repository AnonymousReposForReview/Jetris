package tests.javafuzzer584;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:14:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static double dFld=6.96648;
    public static volatile float fFld=0.586F;
    public static long lFld=-2066512984L;
    public static volatile long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 227L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=-52118, i3=28529, i4=-5, i5=-119, i6=14, i7=6, i8=-10, iArr[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2672L);
        FuzzerUtils.init(iArr, -56591);

        for (i2 = 2; i2 < 261; i2++) {
            for (i4 = i2; i4 < 6; ++i4) {
                Test.instanceCount = (long)Test.fFld;
                i6 = 1;
                do {
                    i3 += i3;
                    Test.dFld = i5;
                    i3 += (i6 * i6);
                    try {
                        i3 = (i4 % 10834);
                        i5 = (i2 % -148);
                        i3 = (i6 / i2);
                    } catch (ArithmeticException a_e) {}
                } while (++i6 < 1);
                for (i7 = 1; i7 < 1; ++i7) {
                    i8 ^= (int)138L;
                    i5 %= (int)(i5 | 1);
                    lArr[i2] += (long)Test.fFld;
                    Test.lFld *= 30995;
                    Test.instanceCount -= Test.lFld;
                    iArr[i4][i7] = -40437;
                }
            }
        }
        vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, int i1) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 50.102459);

        Test.instanceCount -= (long)((Test.dFld %= (i | 1)) + (dArr[(i >>> 1) % N]--));
        vMeth2();
        vMeth1_check_sum += i + i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(float f, boolean b) {

        int i9=167, i10=7, i11=99, i12=136, i13=-94, i14=-5248, i15=790;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3L);

        vMeth1(i9, i9);
        for (i10 = 286; 4 < i10; i10--) {
            i9 = i10;
            if (b) continue;
            i11 += (2 + (i10 * i10));
            i11 += (i10 * i10);
            i9 = (int)Test.instanceCount;
            for (i12 = 1; i12 < 6; ++i12) {
                i9 += i12;
                lArr1[i12] = i12;
                Test.instanceCount -= i12;
                for (i14 = i10; i14 < 2; i14++) {
                    i11 -= i10;
                    Test.instanceCount += i10;
                }
                Test.instanceCount -= Test.instanceCount;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=13, i17=4, i18=14, i19=3148, i20=-11, i21=-57, i22=-134;
        short s=-30508;
        boolean b1=false;
        byte by=-21;

        vMeth(1.648F, false);
        try {
            Test.instanceCount = -13186;
            i16 -= (int)-119.85317;
            Test.dFld *= -4;
            for (i17 = 10; 229 > i17; ++i17) {
                i19 = 1;
                while (++i19 < 115) {
                    i16 = (int)Test.fFld;
                    Test.lArrFld[(-42515 >>> 1) % N][i17 - 1] >>= s;
                    Test.lFld += (i19 - i17);
                    for (i20 = 1; i20 < 1; ++i20) {
                        switch ((i20 % 1) + 21) {
                        case 21:
                            i18 &= i20;
                            b1 = true;
                            i18 += (((i20 * Test.fFld) + Test.instanceCount) - i20);
                        }
                        Test.fFld += Test.lFld;
                    }
                    i22 = 1;
                    do {
                        Test.instanceCount += (i22 * i20);
                        i18 -= i19;
                        i18 <<= i18;
                        Test.fFld += (-129 + (i22 * i22));
                    } while (++i22 < 1);
                    iArrFld[i19] <<= i19;
                    Test.lFld = s;
                    i16 = (int)-13L;
                    if (false) {
                        i21 += (-10211 + (i19 * i19));
                        i21 >>= by;
                    } else if (true) {
                        i18 = s;
                    } else if (b1) {
                        iArrFld[i17 - 1] = (int)Test.fFld;
                        b1 = b1;
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            i21 += i19;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
