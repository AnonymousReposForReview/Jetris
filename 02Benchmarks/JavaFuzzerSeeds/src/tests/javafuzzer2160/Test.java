package tests.javafuzzer2160;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:42:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=55575L;
    public int iFld=8;
    public static short sFld=30233;
    public static float fFld=116.87F;
    public byte byFld=-113;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.62340);
        FuzzerUtils.init(Test.iArrFld, -34578);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f, boolean b1, int i10) {

        int i11=-2, i12=-11, i13=-6, i14=-1, i15=239, i16=134;

        for (i11 = 3; i11 < 266; i11++) {
            for (i13 = 6; i13 > 1; i13--) {
                double d2=110.26701;
                d2 -= i10;
                for (i15 = 1; i15 < 2; ++i15) {
                    long l=194L;
                    i16 *= (int)Test.instanceCount;
                    switch (((i14 >>> 1) % 2) + 81) {
                    case 81:
                        i12 = i16;
                        break;
                    case 82:
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount = Test.instanceCount;
                        l *= i15;
                        break;
                    default:
                        i16 = i13;
                        i10 -= -60926;
                        d2 += i14;
                        i10 -= -231;
                    }
                    i12 *= i10;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i7) {

        int i8=-1, i9=12, i17=-243, i18=63179, iArr[][]=new int[N][N];
        boolean b=false;
        float f1=-52.253F;

        FuzzerUtils.init(iArr, -12);

        for (i8 = 2; i8 < 284; i8++) {
            long l1=-3575863541L;
            i7 += i8;
            switch (((i8 % 9) * 5) + 43) {
            case 75:
                Test.instanceCount = (long)(i9 * Test.dArrFld[i8]);
                i7 <<= (int)Test.instanceCount;
                if (b = bMeth(f1, b, i8)) break;
            case 50:
                f1 = i9;
                break;
            case 49:
                for (i17 = 1; i17 < 6; i17++) {
                    f1 = i18;
                }
                i9 = i9;
            case 56:
                Test.dArrFld[i8] -= Test.instanceCount;
                l1 = i17;
                break;
            case 52:
                iArr[i8 + 1][i8] >>= i9;
                break;
            case 79:
                i7 >>>= i17;
                if (b) continue;
                break;
            case 62:
                i9 ^= i7;
                break;
            case 83:
                if (b) break;
                break;
            case 69:
            }
        }
        long meth_res = i7 + i8 + i9 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i17 + i18 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, double d) {

        double d1=-28.86919;
        int i6=5, i19=95, i20=-6, i21=-194, i22=166, i23=2, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -50);

        for (d1 = 7; 121 > d1; ++d1) {
            i5 -= (int)(--d);
            Test.instanceCount += (iMeth(-3) * 11);
            i5 += (int)d1;
        }
        i6 -= (int)Test.instanceCount;
        i6 = i6;
        i19 = 1;
        do {
            for (i20 = 9; i20 > 1; --i20) {
                for (i22 = 1; i22 < 2; ++i22) {
                    byte by=95;
                    i6 += i5;
                    by = (byte)Test.instanceCount;
                    i21 = i23;
                    Test.instanceCount = Test.sFld;
                    d += Test.fFld;
                    iArr1[i22 - 1] -= (int)1372442900L;
                }
            }
        } while (++i19 < 172);
        vMeth_check_sum += i5 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i6 + i19 + i20 + i21 + i22 +
            i23 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=-90, i2=-57534, i3=74, i4=-5;
        double d3=-99.14971;
        boolean b2=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.563F);

        iFld = (iFld--);
        for (i = 12; i < 244; ++i) {
            i2 = 108;
            while (--i2 > 0) {
                for (i3 = i2; i3 < 1; i3++) {
                    vMeth(i, d3);
                    i1 *= 30267;
                    byFld = (byte)-18;
                    Test.fFld -= i3;
                    i1 >>= i;
                    fArr[i3] -= i4;
                    i4 -= (int)Test.instanceCount;
                    switch (((iFld >>> 1) % 5) + 41) {
                    case 41:
                        Test.instanceCount = 2693550773566881482L;
                        i1 += (i3 + i4);
                        break;
                    case 42:
                        i1 += (i3 + i);
                        Test.iArrFld[i3] -= (int)1669836750L;
                        break;
                    case 43:
                        switch ((((i3 >>> 1) % 3) * 5) + 64) {
                        case 68:
                            i1 <<= -31;
                            break;
                        case 71:
                            iFld = i;
                            break;
                        case 69:
                            iFld *= (int)Test.fFld;
                            iFld += (int)Test.instanceCount;
                        default:
                            i1 += i3;
                        }
                        Test.iArrFld[i2 + 1] <<= 7;
                    case 44:
                        switch (i2 % 10) {
                        case 0:
                            b2 = b2;
                            break;
                        case 1:
                            switch (((i1 >>> 1) % 1) + 52) {
                            case 52:
                                Test.sFld += (short)(((i3 * i4) + i4) - iFld);
                                Test.iArrFld[i2 + 1] *= (int)Test.instanceCount;
                                Test.fFld += i;
                                break;
                            }
                            i4 = (int)Test.instanceCount;
                            break;
                        case 2:
                            iFld = (int)104L;
                            break;
                        case 3:
                            i1 += (i3 * i3);
                            break;
                        case 4:
                            Test.sFld += (short)(i3 + i);
                            break;
                        case 5:
                            iFld += (i3 - i1);
                            break;
                        case 6:
                            i4 += i;
                            break;
                        case 7:
                        case 8:
                            i4 = (int)d3;
                            break;
                        case 9:
                            i1 <<= iFld;
                            break;
                        default:
                            Test.fFld = Test.instanceCount;
                        }
                        break;
                    case 45:
                        Test.iArrFld[i - 1] = 1;
                        break;
                    default:
                        fArr[i3] = i3;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
