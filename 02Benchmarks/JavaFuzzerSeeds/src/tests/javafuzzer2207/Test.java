package tests.javafuzzer2207;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:17:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6633437428729336108L;
    public static boolean bFld=true;
    public static int iFld=-9;
    public static short sFld=1532;
    public static byte byFld=-115;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, long l1) {

        int i4=2, i5=176, i6=60456, iArr[]=new int[N];
        short s1=-30882;
        double d=11.243;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(lArr, 74L);

        iArr = iArr;
        i4 = 1;
        while (++i4 < 375) {
            if (Test.bFld) {
                Test.instanceCount >>= -62878;
            } else if (Test.bFld) {
                iArr = iArr;
                for (i5 = 1; i5 < 5; ++i5) {
                    i6 = (int)l1;
                    i3 -= i3;
                    i6 += i5;
                    iArr[i4] = s1;
                }
                vMeth2_check_sum += i3 + l1 + i4 + i5 + i6 + s1 + Double.doubleToLongBits(d) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                return;
            } else {
                Test.instanceCount &= i5;
                lArr[i4] = 205;
                d *= s1;
            }
            l1 -= 816570718L;
            lArr = lArr;
        }
        vMeth2_check_sum += i3 + l1 + i4 + i5 + i6 + s1 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i2, long l) {

        int i7=12, i8=95, i9=-51778;
        byte by=50;
        float f=-98.872F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 126L);

        vMeth2(i2, Test.instanceCount);
        i2 = i2;
        for (i7 = 14; i7 < 239; ++i7) {
            i2 += (i7 * i7);
            Test.iFld = i8;
            i9 = 7;
            while (--i9 > 0) {
                double d1=-2.38716;
                i8 = (int)104L;
                Test.iFld += (i9 * Test.sFld);
                Test.instanceCount = l;
                by += (byte)Test.instanceCount;
                switch (((i7 % 9) * 5) + 97) {
                case 108:
                    f += i8;
                    i2 >>= i2;
                    break;
                case 100:
                    Test.bFld = false;
                    f = by;
                    break;
                case 141:
                    Test.iFld |= i2;
                case 132:
                    l <<= Test.sFld;
                    break;
                case 107:
                    l <<= i7;
                    break;
                case 130:
                    d1 += Test.iFld;
                    break;
                case 136:
                    lArr1[i9] <<= -101;
                    break;
                case 101:
                    i8 += i9;
                    break;
                case 106:
                    Test.iFld = -14925;
                    break;
                default:
                    Test.bFld = true;
                }
            }
        }
        vMeth1_check_sum += i2 + l + i7 + i8 + i9 + by + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(short s) {

        long l2=-3466646783L;
        int i10=28, i11=21853, i12=5, iArr1[]=new int[N];
        boolean b=false;
        double d2=0.127857;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(fArr, 1.240F);

        vMeth1(Test.iFld, l2);
        s += (short)Test.iFld;
        Test.instanceCount *= Test.iFld;
        Test.iFld = Test.iFld;
        Test.iFld >>= Test.byFld;
        Test.iFld = -113;
        for (i10 = 6; 137 > i10; ++i10) {
            switch ((((Test.iFld >>> 1) % 6) * 5) + 103) {
            case 107:
                i12 = 1;
                while ((i12 += 2) < 12) {
                    Test.byFld >>>= (byte)Test.instanceCount;
                    if (b) {
                        i11 += (((i12 * i12) + i10) - Test.instanceCount);
                        Test.iFld -= Test.byFld;
                    } else if (b) {
                        iArr1 = FuzzerUtils.int1array(N, (int)10);
                        if (b) break;
                    } else if (b) {
                        Test.iFld -= (int)Test.instanceCount;
                    } else {
                        fArr[i12] = i10;
                    }
                }
                break;
            case 120:
                iArr1[i10 + 1] = i12;
                break;
            case 111:
                d2 = Test.byFld;
                break;
            case 106:
                i11 >>>= i10;
            case 130:
                d2 = l2;
            case 126:
            }
        }
        vMeth_check_sum += s + l2 + i10 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-188, i1=201, i13=-32219, i14=-42, iArr2[]=new int[N];
        float f1=2.66F;
        double d3=0.81782, dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr2, -19152);
        FuzzerUtils.init(dArr, -31.2819);

        for (i = 2; i < 160; i++) {
            vMeth(Test.sFld);
            i1 += i;
            i1 *= Test.iFld;
            i1 -= (int)Test.instanceCount;
            Test.iFld += i;
            Test.iFld *= (int)6L;
            f1 += Test.instanceCount;
            for (i13 = 8; i13 < 159; ++i13) {
                Test.byFld >>= (byte)Test.iFld;
                switch (((Test.iFld >>> 1) % 1) + 39) {
                case 39:
                    iArr2[i] = (int)Test.instanceCount;
                    Test.instanceCount /= ((long)(d3) | 1);
                    break;
                default:
                    Test.iFld -= Test.iFld;
                }
                iArr2[i13 - 1] &= i14;
            }
            dArr[i - 1][(i13 >>> 1) % N] *= f1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
