package tests.javafuzzer1109;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=19493L;
    public static double dFld=-56.110558;
    public static int iFld=9;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.932F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, long l, int i3) {

        int i4=-211, i5=-2, i6=5, i7=11, i8=-19492, iArr[]=new int[N];
        float f=0.429F, f1=-2.95F;
        short s=-32341;

        FuzzerUtils.init(iArr, -54693);

        for (i4 = 4; i4 < 252; i4++) {
            switch ((((i5 >>> 1) % 4) * 5) + 91) {
            case 104:
                i2 = (int)f;
                break;
            case 103:
                i5 = i4;
            case 93:
                for (i6 = 1; 7 > i6; ++i6) {
                    for (f1 = 1; f1 < 2; ++f1) {
                        i2 += i8;
                        i7 += (-26283 + (f1 * f1));
                        if (true) break;
                        i3 += (int)((long)f1 | i8);
                        i8 -= i2;
                        i8 += i2;
                        i8 = i8;
                        i7 <<= s;
                        i2 -= (int)f;
                    }
                }
                break;
            case 96:
                i2 *= 0;
                break;
            default:
                iArr[i4] = -10559;
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + Float.floatToIntBits(f1) + i8 +
            s + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        boolean b=false;
        int i=13, i1=8, i10=-232, iArr1[]=new int[N];
        byte by=99;
        float f2=-123.895F;
        short s1=-21369;

        FuzzerUtils.init(iArr1, -5);

        b = (1.357F != Test.instanceCount);
        for (i = 157; i > 2; i--) {
            vMeth(i, Test.instanceCount, i1);
            iArr1[i] >>= by;
        }
        by += by;
        for (int i9 : iArr1) {
            i9 &= i9;
            f2 *= -164;
            i10 = 1;
            while (++i10 < 4) {
                i9 = by;
            }
            i1 = i9;
        }
        iArr1[(i1 >>> 1) % N] |= (int)Test.instanceCount;
        Test.instanceCount = s1;
        iArr1[(i >>> 1) % N] *= (int)Test.dFld;
        f2 += i;
        long meth_res = (b ? 1 : 0) + i + i1 + by + Float.floatToIntBits(f2) + i10 + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {


        iMeth();
        Test.iFld += (int)78.758F;
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i11=-47294, i12=110, i13=49, i14=29718, i15=-58979, i16=-11, i17=12, i18=-7, i19=-125, iArr2[]=new int[N],
            iArr3[]=new int[N];
        boolean b1=false;
        long l1=220026585239976735L, lArr[]=new long[N];
        short s2=-8847;
        float f3=2.961F;
        byte by1=-67;

        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(iArr2, -56068);
        FuzzerUtils.init(iArr3, 254);

        for (int smallinvoc=0; smallinvoc<342; smallinvoc++) vSmallMeth();
        Test.fArrFld[(Test.iFld >>> 1) % N] *= 212;
        for (i11 = 17; i11 < 395; ++i11) {
            lArr[i11 + 1] >>= i11;
            i12 <<= 11;
            Test.instanceCount = i11;
        }
        i13 = 181;
        while (--i13 > 0) {
            i14 = 1;
            do {
                i12 += i14;
                try {
                    i12 = (i11 / i12);
                    Test.iFld = (i12 % -16);
                    i15 = (i15 / i15);
                } catch (ArithmeticException a_e) {}
                for (i16 = 1; 1 > i16; i16 += 2) {
                    Test.instanceCount = Test.instanceCount;
                    i15 += i16;
                    if (b1) continue;
                    Test.instanceCount *= l1;
                    i17 += (i16 | l1);
                    try {
                        iArr2[i14] = (46125 / i12);
                        iArr2[i13 + 1] = (i15 / i16);
                        iArr2[i14] = (-246 / iArr2[i13 + 1]);
                    } catch (ArithmeticException a_e) {}
                }
                i17 >>= i12;
                i15 = i13;
                i17 += (240 + (i14 * i14));
                iArr2 = iArr3;
                s2 *= (short)f3;
                for (i18 = 1; 1 > i18; ++i18) {
                    i12 = (int)l1;
                    if (b1) continue;
                    lArr = lArr;
                    i12 += (((i18 * i17) + Test.instanceCount) - by1);
                    i17 += i18;
                }
                i19 += i14;
            } while (++i14 < 139);
            iArr3[i13] &= i16;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
