package tests.javafuzzer215;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:17:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-22723L;
    public float fFld=-1.130F;
    public static int iFld=-11204;
    public static double dFld=-2.128309;
    public static short sFld=25358;
    public static volatile int iFld1=60570;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i10) {


        Test.dFld = Test.dFld;
        long meth_res = i10;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6, float f1) {

        int i7=58188, i8=-5, i9=29062, i11=-182, i12=-170, iArr1[]=new int[N];
        boolean b=true;
        long lArr1[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -16);
        FuzzerUtils.init(lArr1, -211L);
        FuzzerUtils.init(fArr, 52.338F);

        i7 = 1;
        while (++i7 < 155) {
            byte by=-107;
            for (i8 = 1; i8 < 10; ++i8) {
                iArr1[i8] ^= i8;
                i5 = (int)(((-11L + Test.instanceCount) * i7) + (Test.instanceCount + (1.110613 * (--lArr1[i7 -
                    1][i7]))));
                Test.instanceCount += ((iMeth1(i8) * Test.iFld) - 60634L);
                try {
                    Test.iFld = (-452866920 % i5);
                    Test.iFld = (i6 % Test.iFld);
                    i6 = (Test.iFld % 175);
                } catch (ArithmeticException a_e) {}
                for (i11 = 1; 2 > i11; ++i11) {
                    i9 += (((i11 * Test.sFld) + Test.sFld) - f1);
                    fArr[i11] *= i12;
                }
                i6 *= (int)-35770L;
                Test.iFld1 += (((i8 * i5) + Test.iFld) - Test.instanceCount);
                Test.iFld1 += (int)Test.instanceCount;
            }
            if (b) {
                iArr1[i7 + 1] += by;
            } else {
                i9 += (i7 * i7);
                vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i11 + i12 + (b ? 1 : 0) +
                    FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i11 + i12 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i3, long l, int i4) {

        float f=-2.325F;
        double d1=1.98679;
        byte by1=121;
        int i13=-10, i14=6, i15=5, i16=-6, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -867247548834734004L);
        FuzzerUtils.init(iArr2, 3);

        i3 = (int)(f--);
        Test.iFld |= i3;
        f -= (f - ((f - Test.instanceCount) - (-(181 - lArr[(i3 >>> 1) % N]))));
        vMeth(i4, Test.iFld, f);
        d1 = 1;
        do {
            iArr2 = iArr2;
            f = f;
            i3 >>= i4;
            Test.iFld1 += by1;
        } while (++d1 < 271);
        for (i13 = 6; 193 > i13; i13++) {
            i14 *= Test.iFld;
            for (i15 = 9; i15 > 1; i15--) {
                Test.iFld1 -= i14;
                i3 >>= i3;
                f *= -3394;
            }
        }
        long meth_res = i3 + l + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + by1 + i13 + i14 + i15 +
            i16 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-55107, i1=-4, i2=40194, i17=-3, i18=-170, i19=9, i20=68, i21=-4, i22=-12, iArr[]=new int[N];
        double d=47.120937;
        byte by2=107, byArr[][]=new byte[N][N];
        boolean b1=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, -51247);
        FuzzerUtils.init(byArr, (byte)105);
        FuzzerUtils.init(lArr2, 4267871893448408223L);

        Test.instanceCount += iArr[(i >>> 1) % N];
        d -= ((i + (-4 >>> (Test.instanceCount - i))) * (fFld + i));
        i ^= (int)(Test.instanceCount + ((Test.iFld * Test.iFld) + 18484));
        fFld = ((iArr[(-3 >>> 1) % N]++) + ((i--) + (Test.iFld / ((long)(fFld) | 1))));
        for (i1 = 7; 162 > i1; ++i1) {
            iMeth(-13, Test.instanceCount, Test.iFld);
        }
        i ^= -60110;
        Test.iFld = (int)4518997243675679879L;
        fFld -= i2;
        Test.sFld |= (short)-33;
        Test.instanceCount ^= i;
        d *= i1;
        byArr[(i1 >>> 1) % N][(Test.iFld1 >>> 1) % N] = (byte)Test.instanceCount;
        d = -37.854F;
        for (i17 = 5; i17 < 262; i17++) {
            d = fFld;
            for (i19 = 2; i19 < 98; i19++) {
                lArr2[i19 + 1] += (long)Test.dFld;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.sFld <<= (short)i2;
                    i18 = (int)Test.dFld;
                    Test.instanceCount = (long)1.23059;
                    Test.instanceCount <<= i19;
                    Test.iFld1 -= i19;
                    by2 &= (byte)-129;
                    if (b1) break;
                }
                Test.iFld += (i19 + Test.iFld1);
                Test.instanceCount >>= i2;
                Test.instanceCount -= i19;
                Test.iFld1 <<= (int)Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
