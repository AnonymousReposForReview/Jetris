package tests.javafuzzer2616;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:30:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1545022449L;
    public static boolean bFld=false;
    public static double dFld=-111.80833;
    public static volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.83726);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f=70.503F, f1=0.19F;
        int i7=43583, i8=-61764, i9=-242, i10=-39361;
        double d1=-106.18569;
        byte by2=62;

        f = -94;
        i7 = 1;
        do {
            for (i8 = 1; i8 < 5; ++i8) {
                i9 *= (int)f1;
                i10 = 1;
                do {
                    i9 += (i10 * i10);
                } while (++i10 < 2);
            }
            d1 = i9;
            if (Test.bFld) continue;
            Test.instanceCount += (((i7 * i8) + Test.instanceCount) - i10);
        } while (++i7 < 316);
        i9 -= (int)Test.instanceCount;
        if (Test.bFld) {
            i9 = i8;
            i9 <<= i7;
            by2 &= (byte)i7;
            f1 += i8;
        }
        long meth_res = Float.floatToIntBits(f) + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 +
            Double.doubleToLongBits(d1) + by2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, byte by1, int i6) {

        long l=22678L;
        int i11=17454, i12=0, i13=-23290, i14=53534, i15=-10, iArr[][]=new int[N][N], iArr1[][]=new int[N][N];
        float f2=2.38F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 216);
        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(sArr, (short)-20045);

        Test.instanceCount -= ((iArr[(i5 >>> 1) % N][(i6 >>> 1) % N]--) - iMeth());
        i5 -= (int)Test.dFld;
        for (double d2 : Test.dArrFld) {
            try {
                i6 = (106 % iArr[(i5 >>> 1) % N][(i5 >>> 1) % N]);
                i5 = (i6 % 41456);
                i6 = (i6 % -29767);
            } catch (ArithmeticException a_e) {}
        }
        if (true) {
            for (l = 3; l < 272; l++) {
                f2 *= Test.instanceCount;
                for (i12 = 1; i12 < 6; i12++) {
                    i11 = (int)-5L;
                    for (i14 = 1; i14 < 2; ++i14) {
                        short s=-4171;
                        switch ((((-60 >>> 1) % 8) * 5) + 114) {
                        case 127:
                            switch (((i14 >>> 1) % 4) + 54) {
                            case 54:
                                i6 = by1;
                                i6 = (int)f2;
                                iArr[i14][i14] = -8;
                                break;
                            case 55:
                                s -= (short)i6;
                                break;
                            case 56:
                                i6 += (i14 * i14);
                            case 57:
                                if (i14 != 0) {
                                    vMeth1_check_sum += i5 + by1 + i6 + l + i11 + Float.floatToIntBits(f2) + i12 + i13
                                        + i14 + i15 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
                                        FuzzerUtils.checkSum(sArr);
                                    return;
                                }
                                break;
                            }
                        case 123:
                            i6 = i15;
                            break;
                        case 122:
                            iArr[i14][(int)(l - 1)] -= i13;
                            break;
                        case 124:
                            s += (short)i14;
                            break;
                        case 129:
                            iArr1[(int)(l)][(int)(l)] += 7;
                            break;
                        case 138:
                            sArr[i14 - 1] <<= (short)l;
                            break;
                        case 141:
                            i6 += (0 + (i14 * i14));
                            break;
                        case 133:
                            i13 <<= i12;
                            break;
                        }
                    }
                }
            }
        } else {
            Test.instanceCount <<= i13;
        }
        vMeth1_check_sum += i5 + by1 + i6 + l + i11 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        int i1=220, i2=25985, i3=-47039, i4=34372, i16=27486;
        byte by3=99;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 7687L);

        for (i1 = 13; i1 < 379; ++i1) {
            float f3=2.503F;
            for (i3 = 1; i3 < 5; i3++) {
                vMeth1(i3, by3, i2);
                Test.iArrFld[i3] = i2;
                try {
                    i4 = (-359591802 % Test.iArrFld[i3 + 1]);
                    i2 = (i3 % i1);
                    i4 = (Test.iArrFld[i3 + 1] / 256);
                } catch (ArithmeticException a_e) {}
            }
            Test.dFld += i16;
            lArr[i1 + 1][i1 - 1] = Test.instanceCount;
            i4 *= (int)f3;
            Test.instanceCount = Test.instanceCount;
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + by3 + i16 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i17=-23504, i18=-5, i19=1, i20=56949, i21=-3;
        byte by=-24;
        double d=2.19487;
        long l1=-42L;
        short s1=1905;
        float f4=-120.302F;

        Test.instanceCount = (-((i * -8) - Test.instanceCount));
        by |= (byte)(d - i);
        vMeth();
        for (l1 = 131; l1 > 5; l1 -= 2) {
            i += (-103 + (l1 * l1));
            for (i18 = (int)(l1); i18 < 397; i18++) {
                i19 = -18955;
                if (Test.bFld) continue;
                i19 -= i;
                Test.instanceCount = i18;
                i = i19;
                for (i20 = 1; i20 < 1; i20++) {
                    i17 = 9;
                    i19 += (((i20 * s1) + f4) - i);
                    f4 -= i20;
                    i17 += (((i20 * Test.instanceCount) + i21) - i17);
                    by = (byte)i17;
                    i21 *= (int)f4;
                    Test.instanceCount = i18;
                    if (true) {
                        f4 += i17;
                        i >>= i17;
                        i21 <<= by;
                    } else if (Test.bFld) {
                        Test.instanceCount *= 3244920288459756571L;
                        i += i;
                        f4 = i19;
                    } else if (Test.bFld) {
                        i17 |= (int)-4187616047L;
                        i19 = i19;
                    } else {
                        Test.dFld *= d;
                        Test.instanceCount = i20;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
