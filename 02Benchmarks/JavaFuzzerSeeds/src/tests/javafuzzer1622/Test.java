package tests.javafuzzer1622;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:17:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5848070035804980404L;
    public volatile int iFld=-231;
    public static float fFld=118.870F;
    public static volatile int iFld1=-47;
    public static double dFld=111.97079;
    public static volatile boolean bFld=false;
    public static short sFld=-452;
    public int iFld2=-11;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 155);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, long l, short s) {

        int i8=-40356, i9=19, i10=58398, i11=186, i12=6, i13=-4, i14=-56007, i15=20165, i16=170, i17=0, iArr1[]=new
            int[N];
        double d=-2.8872;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -39015);
        FuzzerUtils.init(lArr1, 5L);

        i8 += i8;
        i8 = i8;
        for (i9 = 359; i9 > 9; i9 -= 3) {
            i8 = (int)Test.instanceCount;
        }
        for (i11 = 4; i11 < 304; i11 += 3) {
            l = 1;
            d *= -8;
            for (i13 = 1; i13 < 16; i13++) {
                iArr1[i13 + 1] <<= s;
                for (i15 = 1; i15 < 2; i15++) {
                    switch ((i15 % 2) + 3) {
                    case 3:
                        l <<= i8;
                        i10 <<= (int)-10L;
                        Test.instanceCount += (((i15 * l) + i15) - i8);
                        lArr1 = lArr1;
                        break;
                    case 4:
                        Test.instanceCount = i10;
                        break;
                    default:
                        i12 = i17;
                    }
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + l + s + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) +
            i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1() {

        int i18=-11, i19=-11740, i20=-234, i21=32708, i22=106, i23=109;
        float f2=0.868F;

        vMeth2(Test.fFld, Test.instanceCount, (short)(27519));
        Test.iFld1 -= Test.iFld1;
        for (i18 = 6; i18 < 148; ++i18) {
            i19 *= Test.iFld1;
            Test.instanceCount = Test.instanceCount;
        }
        i20 = 1;
        while (++i20 < 358) {
            for (i21 = 1; i21 < 5; ++i21) {
                Test.iFld1 += i21;
                for (f2 = 1; f2 < 2; ++f2) {
                    Test.iArrFld[i21] = -25337;
                    Test.instanceCount >>= i18;
                    switch (((i21 % 1) * 5) + 82) {
                    case 87:
                        Test.instanceCount -= Test.iFld1;
                        i23 += (int)f2;
                        Test.instanceCount |= i22;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i18 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f2) + i23;
    }

    public static void vMeth() {

        int i2=8, i3=0, i5=-2, i6=-196, i7=-21360, i24=-219, iArr[]=new int[N];
        byte by=64;
        short s1=-13435, sArr[]=new short[N];
        double d1=-119.84648, dArr[]=new double[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-19008);
        FuzzerUtils.init(lArr, 451841728947376519L);
        FuzzerUtils.init(fArr, -2.941F);
        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(dArr, 1.22243);

        i2 = 1;
        do {
            switch ((i2 % 8) + 105) {
            case 105:
                i3 = 1;
                do {
                    int i4=4261;
                    i4 -= (++i5);
                    Test.instanceCount = (++i5);
                } while (++i3 < 6);
                break;
            case 106:
                sArr[i2 - 1] = (short)lArr[i2 - 1];
                iArr[i2 + 1] += (int)(--Test.instanceCount);
                i6 = 6;
                while ((i6 -= 2) > 0) {
                    i5 *= (--i5);
                    by += (byte)(i6 ^ Test.instanceCount);
                    i7 = 1;
                    while (++i7 < 2) {
                        switch ((((i6 + 42715) >>> 1) % 6) + 72) {
                        case 72:
                            vMeth1();
                            Test.iFld1 -= (int)Test.instanceCount;
                            Test.instanceCount = s1;
                        case 73:
                            Test.iFld1 -= i7;
                        case 74:
                            lArr[i6] *= (long)d1;
                            break;
                        case 75:
                            Test.iFld1 = Test.iFld1;
                            break;
                        case 76:
                            try {
                                i5 = (i5 / -7961);
                                iArr[i6] = (i7 % i24);
                                i5 = (Test.iFld1 / iArr[i6 + 1]);
                            } catch (ArithmeticException a_e) {}
                        case 77:
                            i5 -= -2;
                            break;
                        default:
                            dArr[i6 + 1] += 25849;
                        }
                    }
                }
                break;
            case 107:
            case 108:
                i24 = 19330;
            case 109:
                i5 += (((i2 * i24) + i7) - Test.fFld);
                break;
            case 110:
                Test.instanceCount += (i2 - i3);
                break;
            case 111:
                try {
                    Test.iFld1 = (i24 / 7060);
                    Test.iFld1 = (i7 / Test.iArrFld[i2 - 1]);
                    iArr[i2] = (i24 / 54434);
                } catch (ArithmeticException a_e) {}
                break;
            case 112:
                Test.iFld1 = (int)Test.instanceCount;
                break;
            }
        } while (++i2 < 278);
        vMeth_check_sum += i2 + i3 + i5 + i6 + by + i7 + s1 + Double.doubleToLongBits(d1) + i24 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=-72, i25=9663, i26=-4, i27=29024, i28=59495, i29=154, i30=235;

        iFld = (int)(-(-(++Test.fFld)));
        for (i = 2; i < 142; i++) {
            vMeth();
            for (i25 = 9; i25 < 179; ++i25) {
                iFld -= (int)Test.dFld;
            }
            Test.fFld *= Test.instanceCount;
            if (Test.bFld) {
                Test.instanceCount += Test.instanceCount;
                i1 *= -42242;
                Test.instanceCount -= Test.iFld1;
            } else {
                switch (((Test.iFld1 >>> 1) % 1) + 8) {
                case 8:
                    for (i27 = 4; i27 < 179; ++i27) {
                        for (i29 = i27; i29 < 2; ++i29) {
                            Test.fFld = i1;
                            if (Test.bFld) continue;
                            switch ((i29 % 8) + 5) {
                            case 5:
                                switch ((((iFld >>> 1) % 8) * 5) + 93) {
                                case 125:
                                    Test.sFld = (short)i28;
                                    break;
                                case 99:
                                    Test.dFld -= Test.instanceCount;
                                    Test.instanceCount = i25;
                                    i30 *= i28;
                                    Test.iArrFld[i27] = iFld;
                                case 131:
                                    i1 = i26;
                                    i28 += (((i29 * i26) + i27) - Test.instanceCount);
                                    Test.sFld += (short)i29;
                                    iFld2 *= i26;
                                    break;
                                case 98:
                                    iFld2 += i29;
                                    i30 *= i1;
                                case 124:
                                case 97:
                                    Test.iArrFld[i27] = i27;
                                    iFld2 *= i;
                                    break;
                                case 100:
                                    Test.iFld1 += -9;
                                    break;
                                case 104:
                                    iFld2 = (int)Test.instanceCount;
                                    break;
                                default:
                                    Test.iFld1 = i1;
                                }
                                break;
                            case 6:
                                i26 -= (int)Test.dFld;
                                break;
                            case 7:
                                i30 *= Test.iFld1;
                                break;
                            case 8:
                                i30 = (int)Test.instanceCount;
                            case 9:
                                i1 = (int)Test.instanceCount;
                                break;
                            case 10:
                            case 11:
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 12:
                                i30 -= (int)Test.instanceCount;
                            }
                        }
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
