package tests.javafuzzer368;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:50:50 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4013759990L;
    public float fFld=2.607F;
    public static float fFld1=-2.665F;
    public int iFld=7708;
    public short sFld=15052;
    public static volatile double dFld=-1.5968;
    public boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 63.36243);
        FuzzerUtils.init(Test.lArrFld, 5898251287277323394L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, short s1, long l) {

        int i5=11, i6=20941, i7=-26394, i8=-247, i9=12, i10=8, i11=-42583, i12=1, i13=-6, iArr1[]=new int[N];
        boolean b=false;
        double d1=-50.26528;
        byte by=-25;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 64863);
        FuzzerUtils.init(lArr1, -573938781L);

        i5 = i5;
        i5 -= -57947;
        for (i6 = 7; i6 < 231; i6++) {
            for (i8 = 1; i8 < 7; i8++) {
                if (b) break;
                switch (((i7 >>> 1) % 10) + 53) {
                case 53:
                    for (i10 = i8; i10 < 2; i10++) {
                        iArr1[i10] -= i8;
                        iArr1[i6 - 1] = i5;
                        Test.dArrFld[i10] = d1;
                        if (i9 != 0) {
                            vMeth2_check_sum += Float.floatToIntBits(f) + s1 + l + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0)
                                + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + by +
                                FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                    }
                    break;
                case 54:
                    i11 = 64;
                    break;
                case 55:
                    for (i12 = 1; i12 < 2; i12++) {
                        lArr1[i6 + 1] *= by;
                        i9 = s1;
                    }
                    break;
                case 56:
                    f += i8;
                    break;
                case 57:
                    d1 = i13;
                case 58:
                    Test.fFld1 += (float)d1;
                case 59:
                    i5 = i10;
                    break;
                case 60:
                    i5 = i6;
                    break;
                case 61:
                    l += i13;
                case 62:
                    iArr1[i6] = i11;
                    break;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + s1 + l + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 +
            Double.doubleToLongBits(d1) + i12 + i13 + by + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(int i2, int i3, int i4) {

        double d=36.96897;
        short s2=-16218;
        int i14=49777, i15=-12, i16=-18166, i17=246, i18=102, i19=42499, i20=106, iArr[]=new int[N];
        float f1=-2.782F;

        FuzzerUtils.init(iArr, 12);

        iArr[(i4 >>> 1) % N] >>= (int)(Float.intBitsToFloat((int)(-(d + i4))) * i2);
        vMeth2(Test.fFld1, s2, Test.instanceCount);
        Test.instanceCount = i3;
        for (i14 = 5; i14 < 250; ++i14) {
            for (i16 = 7; i16 > 1; i16--) {
                i15 += i16;
                s2 += (short)(((i16 * i2) + i3) - Test.instanceCount);
                Test.lArrFld[i14] += (long)Test.fFld1;
                s2 -= (short)i15;
            }
            for (f1 = 1; f1 < 7; ++f1) {
                Test.instanceCount = i16;
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 += i4;
                    i3 *= 12;
                    i15 = i4;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d) + s2 + i14 + i15 + i16 + i17 +
            Float.floatToIntBits(f1) + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(short s) {

        int i21=2, i22=-13158, i23=-11, i24=-163, i25=-191;
        double d2=0.21766;
        long l1=2341589970L, l2=-207L;
        boolean b1=true;
        byte by1=-18;

        Test.instanceCount -= (-(Test.instanceCount + (s >>> 129)));
        vMeth1(iFld, iFld, iFld);
        iArrFld[(-59393 >>> 1) % N] = -14390;
        iFld += iFld;
        for (i21 = 5; i21 < 319; i21++) {
            Test.instanceCount += (((i21 * iFld) + iFld) - i21);
            d2 -= l1;
            for (l2 = 1; l2 < 5; l2++) {
                if (b1) continue;
                iArrFld[(int)(l2 + 1)] *= (int)4L;
                i22 -= (int)14L;
                for (i24 = 1; i24 < 2; i24++) {
                    iFld += (int)-138L;
                    by1 -= (byte)252;
                    Test.instanceCount *= iFld;
                }
            }
        }
        vMeth_check_sum += s + i21 + i22 + Double.doubleToLongBits(d2) + l1 + l2 + i23 + (b1 ? 1 : 0) + i24 + i25 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=13783, i26=56393, i27=0, i28=-14, i29=1, i30=-12, i31=-6, i32=3, i33=-13, i34=2;
        long l3=9L, lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 2.34382);
        FuzzerUtils.init(lArr, -6L);

        for (i = 7; i < 179; i++) {
            i1 >>>= Integer.reverseBytes(--i1);
            dArr[i - 1][i - 1] = ((~(long)(11 * fFld)) * (lArr[i] + Double.longBitsToDouble(Test.instanceCount)));
            vMeth(sFld);
            lArr[i + 1] *= l3;
            if (false) {
                i1 -= 148;
                iFld = -97;
            } else if (bFld) {
                for (i26 = 146; i26 > 7; i26--) {
                    byte by2=-17;
                    iArrFld[i] = (int)Test.instanceCount;
                    by2 -= (byte)Test.fFld1;
                    i1 = (int)l3;
                    i27 += (int)l3;
                    i1 -= (int)l3;
                    iFld += (((i26 * fFld) + i) - Test.fFld1);
                    i28 = 1;
                    do {
                        iFld = 3;
                        fArrFld[i28] = Test.instanceCount;
                        i1 = (int)l3;
                    } while (++i28 < 2);
                }
                fArrFld[i] *= 21577L;
                fFld *= l3;
                for (i29 = 8; 146 > i29; ++i29) {
                    for (i31 = 2; i31 > 1; i31 -= 3) {
                        Test.fFld1 = (float)Test.dFld;
                    }
                    iArrFld[i29 + 1] = i1;
                    for (i33 = i29; i33 < 2; i33++) {
                        i34 = (int)l3;
                        i30 -= (int)Test.instanceCount;
                        i1 += (((i33 * i28) + i29) - i31);
                        Test.instanceCount -= i26;
                    }
                }
            } else if (bFld) {
                iArrFld[i + 1] = (int)-1.71948;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
