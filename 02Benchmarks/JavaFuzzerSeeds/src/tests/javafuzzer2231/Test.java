package tests.javafuzzer2231;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:36:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1176442123811530913L;
    public static double dFld=-124.118370;
    public static boolean bFld=true;
    public static float fFld=106.334F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -17549);
        FuzzerUtils.init(Test.sArrFld, (short)-3053);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i6, int i7) {

        long l3=-49014L;
        int i8=-63, i9=-144, i10=-88, i11=-228;
        short s=-21209;
        double d=0.35760;

        for (l3 = 3; 153 > l3; ++l3) {
            i8 += i8;
            i8 -= i7;
            f1 += l3;
            f1 += s;
            i7 ^= -12;
            Test.instanceCount += (l3 * l3);
            i7 = (int)Test.instanceCount;
        }
        for (d = 17; d < 381; d++) {
            for (i10 = 1; i10 < 5; ++i10) {
                if (true) {
                    i9 = (int)1233031147L;
                    f1 = l3;
                    Test.iArrFld[i10] = i6;
                    vMeth2_check_sum += Float.floatToIntBits(f1) + i6 + i7 + l3 + i8 + s + Double.doubleToLongBits(d) +
                        i9 + i10 + i11;
                    return;
                } else {
                    f1 += (-43592L + (i10 * i10));
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i6 + i7 + l3 + i8 + s + Double.doubleToLongBits(d) + i9 + i10 +
            i11;
    }

    public static void vMeth1(long l1, float f, long l2) {

        int i4=29042, i5=-161, i12=37244, i13=-2, i14=-39, i15=-35583, i16=-53262;
        byte by=-28;
        long l4=-2227730910L, lArr1[]=new long[N];
        short s1=-31649;
        float f2=2.480F;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -22628L);
        FuzzerUtils.init(dArr, -1.79454);

        if (Test.bFld) {
            for (i4 = 3; i4 < 173; ++i4) {
                by *= (byte)((long)((180L + (0.434F + (l1 - i5))) - (l2 - -6991478302295945510L)) >> Math.abs(l1 - l2));
            }
            vMeth2(f, i5, i4);
            for (l4 = 9; l4 < 157; l4++) {
                for (i13 = 1; 11 > i13; i13++) {
                    lArr1[i13 + 1] = (long)f;
                }
                dArr[(int)(l4 + 1)] = Test.dFld;
                i5 += i12;
                if (Test.bFld) break;
                i14 = i13;
                for (i15 = (int)(l4); i15 < 11; ++i15) {
                    i14 = 13356;
                    s1 *= (short)i5;
                    Test.instanceCount = i13;
                }
            }
        } else if (Test.bFld) {
            f2 -= i14;
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + l2 + i4 + i5 + by + l4 + i12 + i13 + i14 + i15 + i16 + s1 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, int i1, long l) {

        int i2=-5159, i3=-33022, i17=-40289, i18=1, i19=-89, i20=21773;
        byte by1=25;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.1008F);
        FuzzerUtils.init(lArr, 8612598696599476840L);

        for (i2 = 18; i2 < 354; i2++) {
            i -= (i1 - ((i3--) - Math.abs(i3)));
        }
        fArr[(i2 >>> 1) % N] += (lArr[(i3 >>> 1) % N] + (i -= (int)(Test.instanceCount + i2)));
        vMeth1(Test.instanceCount, Test.fFld, l);
        fArr[(5079 >>> 1) % N] %= (i1 | 1);
        by1 += (byte)i2;
        i -= i;
        for (i17 = 7; i17 < 174; i17++) {
            i1 += (i17 + i17);
            i3 = (int)l;
            Test.iArrFld[i17 - 1] += i3;
            for (i19 = 1; i19 < 9; i19++) {
                i18 += (((i19 * i19) + i1) - l);
                i3 *= i2;
                i3 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i + i1 + l + i2 + i3 + by1 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=64, i22=-153, i23=-95, i24=-41089, i25=198, i26=-40666, i27=-9, i28=9, i29=81, i30=-7690;
        short s2=-18671;
        byte by2=107;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, -35.109F);

        vMeth(i21, i21, Test.instanceCount);
        for (i22 = 3; i22 < 122; i22++) {
            i21 |= i23;
            i23 = s2;
        }
        for (i24 = 13; i24 < 352; i24++) {
            Test.iArrFld[i24] += (int)Test.fFld;
            for (i26 = 4; i26 < 74; ++i26) {
                fArr1[i26][i26] -= i22;
                Test.iArrFld[i26 + 1] &= (int)Test.instanceCount;
                for (i28 = 1; i28 < 2; ++i28) {
                    i23 -= i24;
                    i23 += (((i28 * i23) + i29) - by2);
                    switch (((i24 % 5) * 5) + 64) {
                    case 79:
                        if (Test.bFld) continue;
                        break;
                    case 77:
                        Test.sArrFld[(i30 >>> 1) % N] *= (short)0;
                    case 66:
                        i27 -= (int)Test.fFld;
                        Test.iArrFld[i28 - 1] *= i27;
                        s2 >>= (short)i25;
                        break;
                    case 67:
                        i27 = i24;
                        i23 = i30;
                        s2 += (short)Test.fFld;
                        break;
                    case 84:
                        switch (((i26 % 5) * 5) + 126) {
                        case 144:
                            Test.fFld += (-72 + (i28 * i28));
                            i23 += 10;
                            break;
                        case 130:
                            Test.instanceCount += (i28 | i27);
                            i21 <<= (int)Test.instanceCount;
                            try {
                                i23 = (i27 % i24);
                                Test.iArrFld[i28 - 1] = (i26 / -62225);
                                i27 = (Test.iArrFld[i26 - 1] % Test.iArrFld[i24]);
                            } catch (ArithmeticException a_e) {}
                            Test.iArrFld[i28] = (int)Test.fFld;
                            break;
                        case 134:
                            byArrFld[i24 - 1][i24] ^= (byte)i27;
                            break;
                        case 129:
                            i21 %= 157;
                            break;
                        case 151:
                            if (Test.bFld) continue;
                            break;
                        }
                    default:
                        Test.iArrFld[i24 - 1] += i26;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
