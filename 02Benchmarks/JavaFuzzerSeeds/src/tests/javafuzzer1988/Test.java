package tests.javafuzzer1988;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:00:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public static int iFld=100;
    public static volatile byte byFld=-60;
    public static short sFld=9129;
    public int iFld1=3;
    public static short sArrFld[]=new short[N];
    public static volatile double dArrFld[][]=new double[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)9493);
        FuzzerUtils.init(Test.dArrFld, 51.11966);
        FuzzerUtils.init(Test.iArrFld, -216);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2) {

        double d1=0.64626;
        int i3=-53385, i4=9, i5=-46927, i6=-47691, iArr[]=new int[N];
        float f1=1.243F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -101);
        FuzzerUtils.init(lArr, -1L);

        i2 = Test.iFld;
        Test.iFld *= (int)d1;
        i3 = 1;
        do {
            for (i4 = 1; 8 > i4; i4++) {
                Test.iFld |= (int)Test.instanceCount;
                f1 -= i3;
                switch ((i3 % 10) + 52) {
                case 52:
                    f1 -= Test.byFld;
                    i6 = 1;
                    while (++i6 < 2) {
                        l -= Test.sFld;
                        i5 -= (int)l;
                        if (b) break;
                        iArr[i3] *= (int)-1649722915545172240L;
                        i5 += (((i6 * i3) + Test.iFld) - i2);
                        lArr[i6] <<= -168;
                    }
                case 53:
                    f1 += f1;
                    break;
                case 54:
                    if (b) continue;
                    break;
                case 55:
                    f1 += ((long)i4 | (long)i4);
                case 56:
                    d1 += i2;
                    break;
                case 57:
                    i2 >>>= Test.iFld;
                    break;
                case 58:
                    Test.iFld *= (int)-1.995F;
                    break;
                case 59:
                    Test.iFld += (int)f1;
                    break;
                case 60:
                    l = i4;
                    break;
                case 61:
                    i5 >>= i6;
                }
            }
        } while (++i3 < 201);
        vMeth1_check_sum += l + i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.61133);

        for (double d : dArr) {
            vMeth1(Test.instanceCount, Test.iFld);
            if (Test.iFld != 0) {
                vMeth_check_sum += Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth() {

        float f=0.742F;

        Test.sArrFld[(Test.iFld >>> 1) % N] += (short)((--f) * ((Test.instanceCount * Test.iFld) + (Test.iFld +
            Test.iFld)));
        vMeth();
        vSmallMeth_check_sum += Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=-4, i7=20483, i8=68, i9=-119, i10=21, i11=-7, i12=-188, i13=-3, i14=60881, i15=-20779, i16=65;
        boolean b1=false;
        long l1=2516207173L, lArr1[]=new long[N];
        float f2=97.63F, f3=-43.745F;

        FuzzerUtils.init(lArr1, 1273712824633199409L);

        for (i = 5; i < 387; i++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
            Test.instanceCount = i;
            for (i7 = i; i7 < 66; ++i7) {
                Test.dArrFld[i7 + 1][i7] *= i;
            }
            Test.dArrFld[i - 1][i - 1] = Test.instanceCount;
            for (i9 = 2; i9 < 66; ++i9) {
                if (b1) break;
                for (l1 = 1; l1 < 2; l1++) {
                    Test.instanceCount -= i1;
                    if (true) {
                        if (b1) continue;
                    }
                }
                i10 += (int)f2;
                for (i12 = 1; i12 < 2; ++i12) {
                    Test.iArrFld[i12] = -52339;
                    Test.instanceCount += i9;
                    Test.iArrFld[i9] -= (int)Test.instanceCount;
                    f2 -= -37079;
                }
                iFld1 += (int)l1;
                Test.instanceCount = Test.sFld;
                b1 = true;
                for (f3 = 1; f3 < 2; f3++) {
                    i10 *= i;
                    Test.iFld += (int)(f3 + i12);
                    Test.iArrFld[i9 - 1] -= i;
                }
                lArr1 = lArr1;
            }
            f2 = i12;
            for (i15 = 4; i15 < 66; i15++) {
                f2 += (((i15 * i11) + i14) - i);
                i13 = iFld1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
