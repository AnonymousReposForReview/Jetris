package tests.javafuzzer1222;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:41:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5397732697326813115L;
    public static int iFld=40794;
    public static float fFld=2.479F;
    public short sFld=25332;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -127);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, long l1, long l2) {

        byte by=15;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.9868);

        Test.iFld = Test.iFld;
        dArr = dArr;
        Test.iFld = (int)Test.instanceCount;
        Test.iFld -= by;
        Test.iFld *= (int)l2;
        l1 >>= Test.iFld;
        Test.iArrFld = Test.iArrFld;
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + l2 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        int i1=-271, i2=-33588, i3=137, i4=8078;
        byte by1=46;
        double d1=-25.9256;

        Test.instanceCount = ((Test.iFld * (Test.iFld - Test.iFld)) - Test.iFld);
        for (i1 = 7; i1 < 141; i1++) {
            Test.instanceCount = Test.iFld;
            for (i3 = 1; 12 > i3; i3++) {
                double d=122.1407;
                vMeth1(0.659F, Test.instanceCount, Test.instanceCount);
                d *= i4;
                i4 ^= i2;
                Test.iFld >>= 14;
                i2 -= i3;
                Test.iFld = i3;
                Test.fFld += (((i3 * Test.instanceCount) + by1) - i2);
                Test.iArrFld[i1] = i4;
                d1 = 1;
                do {
                    Test.instanceCount = Test.iFld;
                    Test.iFld = i1;
                } while (++d1 < 2);
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + by1 + Double.doubleToLongBits(d1);
    }

    public static int iMeth() {

        int i5=-121, i6=-7, i7=10, i8=11, i9=42304;
        short s=-26914, sArr[]=new short[N];
        byte by2=88, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-123);
        FuzzerUtils.init(sArr, (short)-16259);
        FuzzerUtils.init(fArr, 46.285F);

        vMeth();
        i5 -= s;
        byArr[(i5 >>> 1) % N] = (byte)-24638;
        sArr[(Test.iFld >>> 1) % N] *= (short)3384336473L;
        switch (((i5 >>> 1) % 10) + 38) {
        case 38:
            for (i6 = 6; 220 > i6; i6++) {
                fArr = fArr;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-219);
                try {
                    Test.iFld = (i6 / Test.iArrFld[i6]);
                    i7 = (199 % i7);
                    i5 = (-84 / i5);
                } catch (ArithmeticException a_e) {}
                for (i8 = i6; i8 < 8; ++i8) {
                    i5 += i7;
                    Test.instanceCount %= ((long)(Test.fFld) | 1);
                    i9 += (int)Test.instanceCount;
                    Test.iArrFld = Test.iArrFld;
                    Test.iArrFld[i6] = i8;
                }
            }
            break;
        case 39:
            Test.iArrFld[(Test.iFld >>> 1) % N] += 30334;
            break;
        case 40:
        case 41:
            i5 -= (int)Test.fFld;
            break;
        case 42:
            i7 -= i8;
            break;
        case 43:
            i9 -= i7;
            break;
        case 44:
            Test.iFld -= (int)Test.fFld;
        case 45:
        case 46:
            i5 += s;
            break;
        case 47:
            by2 = (byte)45986;
            break;
        }
        long meth_res = i5 + s + i6 + i7 + i8 + i9 + by2 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-1825573503L, lArr[]=new long[N];
        int i=-1139, i11=-180, i12=-22857, i13=-14938, i14=-13, i15=3, i16=12;
        double d2=-2.109491, d3=62.98062;
        boolean b=true;
        byte by3=-120;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.800F);
        FuzzerUtils.init(lArr, -3L);

        for (l = 8; l < 301; l++) {
            i = (int)(((-14388 - iMeth()) + 5518658165871780189L) % (Test.iFld | 1));
            for (i11 = 5; 86 > i11; i11++) {
                for (i13 = (int)(l); i13 < 2; i13++) {
                    Test.instanceCount = (long)57.36257;
                    i14 += i13;
                    Test.instanceCount = (long)d2;
                    Test.iArrFld[i13] = i13;
                    Test.instanceCount -= i11;
                    i14 += (i13 ^ i14);
                    i += (int)(-11L + (i13 * i13));
                    i <<= i14;
                    d3 += Test.instanceCount;
                    if (b) continue;
                }
                for (i15 = 1; i15 < 2; ++i15) {
                    i14 += (((i15 * i16) + Test.instanceCount) - i13);
                    Test.instanceCount = Test.instanceCount;
                    i14 = (int)Test.instanceCount;
                    Test.instanceCount += (long)(-2.153F + (i15 * i15));
                    Test.fFld *= l;
                    d3 *= 12;
                    Test.iArrFld[i11 + 1] += i12;
                    fArr1[i11 - 1] = i;
                }
                Test.iArrFld[(int)(l)] = i14;
                switch (((0 >>> 1) % 10) + 12) {
                case 12:
                    Test.iArrFld[(int)(l + 1)] -= i13;
                    Test.instanceCount *= Test.instanceCount;
                    sFld += (short)(74 + (i11 * i11));
                    break;
                case 13:
                    Test.iArrFld = Test.iArrFld;
                    i12 += i11;
                    break;
                case 14:
                    i12 += i13;
                    break;
                case 15:
                    by3 += (byte)45172;
                    break;
                case 16:
                    i16 += Test.iFld;
                    break;
                case 17:
                    Test.fFld += i11;
                    break;
                case 18:
                    Test.instanceCount += (i11 * i11);
                    break;
                case 19:
                    lArr[(int)(l - 1)] = 10;
                    break;
                case 20:
                    i -= i16;
                    break;
                case 21:
                    i += (int)(-47.379F + (i11 * i11));
                    break;
                default:
                    i14 ^= -41249;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
