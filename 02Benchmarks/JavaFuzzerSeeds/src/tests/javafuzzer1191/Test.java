package tests.javafuzzer1191;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:15:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=593240253L;
    public static boolean bFld=true;
    public static byte byFld=127;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 18786);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d2, byte by1) {

        long l1=-64L;
        int i7=3120, i8=-10, i9=2, i10=-121, i11=148;
        short s1=4233;
        float f1=-40.659F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -118.210F);

        for (l1 = 3; l1 < 209; ++l1) {
            Test.instanceCount += 3121300428L;
            for (i8 = 1; i8 < 8; ++i8) {
                Test.iArrFld[i8 - 1] -= i8;
                Test.instanceCount <<= 13911;
                s1 += (short)(i8 * i8);
                i9 = by1;
                i7 *= (int)Test.instanceCount;
                for (i10 = 2; i10 > 1; --i10) {
                    switch (((i7 >>> 1) % 2) + 106) {
                    case 106:
                        Test.bFld = Test.bFld;
                        break;
                    case 107:
                        i9 += (((i10 * i10) + f1) - l1);
                        i11 += (((i10 * Test.instanceCount) + i9) - i11);
                        Test.iArrFld[i8 - 1] = -120;
                        i7 += (i10 * Test.instanceCount);
                        break;
                    default:
                        fArr[i10 - 1] *= i9;
                    }
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d2) + by1 + l1 + i7 + i8 + i9 + s1 + i10 + i11 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l, int i6, double d1) {

        int i13=-17014, i14=43399, i15=-234, i16=-125, i17=111;
        float f2=126.891F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 162L);

        i6 |= (i6--);
        vMeth2(d1, Test.byFld);
        for (int i12 : Test.iArrFld) {
            i12 = i12;
            for (i13 = 1; i13 < 4; ++i13) {
                Test.iArrFld = FuzzerUtils.int1array(N, (int)56088);
                i15 = 1;
                while (++i15 < 2) {
                    i14 += (i15 - i14);
                    i12 = (int)f2;
                    Test.byFld += (byte)(i15 - i12);
                    i14 += (i15 * i12);
                    lArr[i15 + 1] = (long)f2;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    Test.iArrFld[i13] &= -19512;
                }
                l -= i17;
            }
        }
        vMeth1_check_sum += l + i6 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 +
            i17 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3, byte by) {

        short s=7524;
        int i4=-25, i5=12;
        float f=2.351F;
        double d=-112.75241;

        s -= (short)Test.iArrFld[(i3 >>> 1) % N];
        for (i4 = 4; i4 < 311; i4++) {
            f += (i4 + i3);
            Test.instanceCount += (((i4 * Test.instanceCount) + i3) - i4);
            d -= (s + ((Test.instanceCount % (by | 1)) + (Test.iArrFld[i4]++)));
        }
        vMeth1(Test.instanceCount, i4, d);
        vMeth_check_sum += i3 + by + s + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i=14318, i1=-7, i2=3, i18=-4, i19=-4183, i20=-14, i21=-191, i22=-124, i23=590, i24=16228, iArr[][]=new
            int[N][N];
        double d3=-2.56581, dArr[]=new double[N];
        float f3=-1.396F;
        short s2=13218;
        long lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -12844);
        FuzzerUtils.init(lArr1, 1336564738L);
        FuzzerUtils.init(byArr, (byte)-93);
        FuzzerUtils.init(dArr, 1.60569);

        iArr[(i >>> 1) % N][(i >>> 1) % N] = (Math.min(i++, i) + i);
        for (i1 = 3; i1 < 252; i1++) {
            vMeth(5, Test.byFld);
            if (Test.bFld) continue;
            i = -65;
            i /= (int)(Test.instanceCount | 1);
            d3 += Test.byFld;
            d3 -= i1;
            iArr[i1 + 1][i1 - 1] -= i2;
            lArr1[i1 + 1] = (long)f3;
            i2 += i;
        }
        Test.iArrFld = Test.iArrFld;
        switch (((i >>> 1) % 8) + 96) {
        case 96:
            for (i18 = 6; i18 < 156; i18 += 2) {
                i2 *= (int)-11L;
                s2 = (short)f3;
                i = i1;
                Test.iArrFld[i18] = i20;
                byArr[i18] = (byte)10756;
                i20 <<= (int)Test.instanceCount;
            }
            break;
        case 97:
            for (i21 = 15; 379 > i21; i21 += 2) {
                i22 = i21;
                f3 = 9025;
                Test.instanceCount *= i19;
                i20 += (i21 * i21);
                Test.instanceCount -= Test.instanceCount;
                i22 *= i2;
                for (i23 = 6; i23 < 138; ++i23) {
                    Test.byFld = (byte)Test.instanceCount;
                    i24 += i18;
                }
            }
            break;
        case 98:
            i2 += -143;
            break;
        case 99:
        case 100:
            i24 -= (int)d3;
            break;
        case 101:
            Test.instanceCount >>= i1;
            break;
        case 102:
            dArr[(-151 >>> 1) % N] += Test.instanceCount;
            break;
        case 103:
            Test.bFld = Test.bFld;
            break;
        default:
            Test.instanceCount >>= 196;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
