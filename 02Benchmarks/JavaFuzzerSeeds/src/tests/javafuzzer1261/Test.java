package tests.javafuzzer1261;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:31:55 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3145837933L;
    public volatile int iFld=191;
    public volatile double dFld=-1.12801;
    public static short sFld=8671;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 30848);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3) {

        int i4=26, i5=-119, i6=76, i7=0, i8=-239, i9=14, iArr[]=new int[N];
        byte by=-104;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -7065);
        FuzzerUtils.init(lArr, -558996896942013318L);

        for (i4 = 13; i4 < 358; i4++) {
            Test.iArrFld[i4] -= i5;
            iArr[i4] <<= (int)Test.instanceCount;
            iArr[i4 + 1] = -83;
            i3 = 122;
            lArr[i4] = i5;
        }
        for (i6 = 3; i6 < 130; i6++) {
            try {
                i3 = (i2 / i7);
                i3 = (i2 % i6);
                i7 = (-86 % i5);
            } catch (ArithmeticException a_e) {}
            i5 <<= i2;
            i5 += i6;
            by = (byte)Test.instanceCount;
            i8 = 1;
            while (++i8 < 12) {
                i9 = 1;
                do {
                    i3 = i8;
                    i5 <<= i4;
                } while (++i9 < 1);
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + by + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i1) {

        float f=0.847F;
        double d=0.23491;

        i1 = iMeth(-176, -228);
        f += (float)d;
        long meth_res = i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vSmallMeth(int i, long l) {


        i -= (int)(l + (sMeth(i) + i));
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        int i10=1, i11=8714, i12=-11, i13=14, i14=-6, i15=-231, i16=-6, i18=13;
        float f1=-107.226F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (int smallinvoc=0; smallinvoc<129; smallinvoc++) vSmallMeth(i10, Test.instanceCount);
        for (i11 = 9; i11 < 301; ++i11) {
            for (i13 = 2; 86 > i13; ++i13) {
                for (i15 = 1; i15 < 2; i15 += 2) {
                    int i17=9;
                    if (false) break;
                    switch ((i13 % 3) + 111) {
                    case 111:
                        Test.instanceCount = i15;
                        i10 += i15;
                        i17 += (i15 - f1);
                    case 112:
                    case 113:
                        i14 >>>= i15;
                    }
                    try {
                        i17 = (21238 % i13);
                        i17 = (iFld / 760985154);
                        i10 = (1796307989 % i10);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i13] ^= i12;
                    iFld += iFld;
                    i10 = i11;
                    Test.instanceCount = Test.instanceCount;
                    i14 -= (int)Test.instanceCount;
                    bArr = bArr;
                }
                Test.instanceCount *= i12;
                i18 = 2;
                do {
                    switch ((i13 % 4) + 25) {
                    case 25:
                        iFld += (i18 * i18);
                        Test.iArrFld[i18 + 1] = 190;
                        i12 *= -18;
                        i10 += i18;
                    case 26:
                        dFld = Test.instanceCount;
                        Test.iArrFld[i13 - 1] -= (int)Test.instanceCount;
                        break;
                    case 27:
                        f1 = iFld;
                        iFld *= iFld;
                        break;
                    case 28:
                        i10 += (((i18 * iFld) + Test.sFld) - i16);
                        i10 = i11;
                        break;
                    default:
                        i14 /= 150;
                    }
                } while (--i18 > 0);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth sMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
