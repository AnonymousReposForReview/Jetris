package tests.javafuzzer2010;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:26:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58L;
    public static boolean bFld=true;
    public static float fFld=1.553F;
    public static int iFld=-10;
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3227395599L);
        FuzzerUtils.init(Test.dArrFld, -47.83186);
    }

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i5, double d, long l) {

        int i6=98, i7=139, i8=-5, i9=77, i10=13632, i11=3890, iArr1[]=new int[N];
        float f1=-2.49F;
        double dArr[][]=new double[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(dArr, -1.122208);
        FuzzerUtils.init(lArr, 6467665521855256368L);

        iArr1[(34350 >>> 1) % N] += (int)l;
        i5 = i5;
        i5 -= (int)-2L;
        dArr[(i5 >>> 1) % N][(i5 >>> 1) % N] = i5;
        for (i6 = 12; i6 < 332; ++i6) {
            if (Test.bFld) {
                i5 += (19561 + (i6 * i6));
            } else if (Test.bFld) {
                for (i8 = 1; i8 < 5; ++i8) {
                    i5 += i6;
                    i9 *= (int)-1.315F;
                    l += i6;
                    for (i10 = i6; 2 > i10; ++i10) {
                        lArr[i6 + 1] -= Test.instanceCount;
                        d %= (i11 | 1);
                        f1 += f1;
                    }
                }
            } else if (Test.bFld) {
                Test.instanceCount += 8092;
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + l + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1)
            + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i4=-229, i12=26409, i13=14863, i14=-9, i15=-15453, i16=-40434, i17=-8, iArr[]=new int[N];
        float f=2.426F;
        short s=22486;
        double d1=9.73840, dArr1[]=new double[N];
        long l1=3232383145L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -158);
        FuzzerUtils.init(dArr1, 1.113669);
        FuzzerUtils.init(bArr, true);

        i4 >>= (int)((Test.instanceCount + (f++)) % (((long)((f + s) - (i4 * i4))) | 1));
        iArr[(i4 >>> 1) % N] = (int)(i4 + f);
        iArr[(i4 >>> 1) % N] += (int)lMeth(i4, d1, Test.instanceCount);
        for (i12 = 356; i12 > 5; i12--) {
            Test.instanceCount += i4;
            for (i14 = 5; i14 > 1; --i14) {
                if (Test.bFld) continue;
                switch (((i14 % 2) * 5) + 37) {
                case 41:
                    switch (((i12 >>> 1) % 10) + 95) {
                    case 95:
                        switch (((i16 >>> 1) % 2) + 86) {
                        case 86:
                            for (l1 = 1; 2 > l1; l1++) {
                                i13 <<= i14;
                            }
                            break;
                        case 87:
                            Test.instanceCount = l1;
                        }
                        i15 += i14;
                        f -= i16;
                        break;
                    case 96:
                        dArr1[i12 + 1] = -21923;
                        break;
                    case 97:
                        i13 <<= i16;
                        break;
                    case 98:
                        bArr[i12 + 1] = Test.bFld;
                        break;
                    case 99:
                        i15 -= (int)f;
                        break;
                    case 100:
                        Test.instanceCount = i12;
                    case 101:
                        f = i15;
                        break;
                    case 102:
                        i17 += (i14 * i12);
                        break;
                    case 103:
                        bArr[i14] = Test.bFld;
                        break;
                    case 104:
                        Test.lArrFld[i12][i14] = (long)1.114369;
                        break;
                    }
                    break;
                case 45:
                }
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16
            + l1 + i17 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(bArr);
    }

    public byte byMeth(int i1, int i2, int i3) {

        int i18=-31, i19=35119, i20=-125, i21=10391, i22=-3727, i23=6;
        float f2=2.950F;
        byte by=-122;
        short s1=-21010;

        vMeth();
        try {
            Test.lArrFld[(i1 >>> 1) % N][(i3 >>> 1) % N] -= 53958;
            for (i18 = 20; 324 > i18; i18 += 3) {
                f2 %= (i1 | 1);
                for (i20 = i18; i20 < 15; i20++) {
                    switch ((i20 % 5) + 89) {
                    case 89:
                        switch ((i18 % 9) + 47) {
                        case 47:
                            i2 -= i21;
                            break;
                        case 48:
                            f2 = 1L;
                            Test.instanceCount = i22;
                            Test.lArrFld[i18 + 1][i20 - 1] += (long)2.622F;
                            break;
                        case 49:
                            fArrFld[i18] = i21;
                            if (Test.bFld) continue;
                            Test.instanceCount *= Test.instanceCount;
                            break;
                        case 50:
                            Test.instanceCount = -2175873529L;
                        case 51:
                            by <<= (byte)Test.instanceCount;
                            break;
                        case 52:
                            Test.instanceCount |= 12588;
                            break;
                        case 53:
                            Test.lArrFld[i18][i20] *= 120;
                            break;
                        case 54:
                            Test.lArrFld[i20 + 1][i18 + 1] = i18;
                        case 55:
                            i3 += i19;
                            break;
                        }
                        break;
                    case 90:
                        i2 -= i23;
                    case 91:
                        Test.instanceCount += i1;
                        break;
                    case 92:
                        iArrFld[i20 - 1] = i23;
                        break;
                    case 93:
                        i3 = i21;
                        break;
                    }
                }
            }
        }
        catch (NullPointerException exc1) {
            iArrFld[(i1 >>> 1) % N] = i18;
        }
        finally {
            Test.dArrFld[(i19 >>> 1) % N] *= s1;
        }
        long meth_res = i1 + i2 + i3 + i18 + i19 + Float.floatToIntBits(f2) + i20 + i21 + i22 + by + i23 + s1;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-69, i24=36384, i25=13148, i26=-9, i27=62469, i28=-27162, i29=44, i30=-64465;
        byte by1=69;
        short s2=18915;
        double d2=0.130283;

        i = (-((i * i) * byMeth(i, i, i)));
        for (i24 = 2; i24 < 303; ++i24) {
            i26 = 84;
            while (--i26 > 0) {
                by1 = (byte)i26;
                i25 = i;
                switch (((i26 % 3) * 5) + 55) {
                case 63:
                    Test.instanceCount = i26;
                    break;
                case 59:
                    Test.dArrFld[i26] *= i;
                    Test.instanceCount = i;
                    i25 += s2;
                    Test.bFld = Test.bFld;
                    break;
                case 64:
                    iArrFld[i24 - 1] *= 9;
                    iArrFld[i26] = i25;
                    for (i27 = i24; i27 < 1; i27++) {
                        i28 += (((i27 * i24) + i) - i24);
                        i = (int)Test.fFld;
                        i28 += (i27 + i27);
                        i = (int)Test.instanceCount;
                        i25 += (i27 | (long)Test.fFld);
                        Test.instanceCount = 131;
                        i28 -= (int)d2;
                        Test.iFld += i27;
                        Test.fFld = 0.925F;
                    }
                    for (i29 = 1; i29 < 1; i29++) {
                        switch ((i26 % 5) + 115) {
                        case 115:
                            Test.instanceCount -= 21;
                            break;
                        case 116:
                            Test.fFld = Test.instanceCount;
                            break;
                        case 117:
                            i28 = i30;
                            fArrFld[i26 - 1] += i27;
                            break;
                        case 118:
                            iArrFld[i26] -= 54815;
                            break;
                        case 119:
                            Test.instanceCount += i;
                            break;
                        default:
                            d2 += i;
                        }
                    }
                default:
                    i28 = (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
