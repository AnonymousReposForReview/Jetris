package tests.javafuzzer379;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:04:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57673L;
    public static boolean bFld=true;
    public int iFld=-64859;
    public short sFld=5475;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.93936);
        FuzzerUtils.init(Test.iArrFld, 2);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-44514;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)108);

        i5 = i5;
        byArr[(i5 >>> 1) % N] = (byte)i5;
        long meth_res = i5 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, double d1, byte by) {

        int i3=35, i4=-4, i6=143, i7=190, i8=-456, i9=-7, i10=-10, i11=-2;
        float f1=47.680F;
        short s=12535;

        for (i3 = 18; i3 < 328; ++i3) {
            Test.instanceCount += (i3 * i3);
            f1 = (iMeth() + i4);
            for (i6 = 1; i6 < 5; ++i6) {
                i4 = i3;
            }
            for (i8 = i3; i8 < 5; i8++) {
                i4 = i6;
                if (b) {
                    i7 += (((i8 * Test.instanceCount) + i8) - s);
                    Test.instanceCount ^= i7;
                    f1 += Test.instanceCount;
                } else {
                    for (i10 = 1; i10 > i3; --i10) {
                        Test.instanceCount = (long)f1;
                        d1 += i9;
                        f1 = 0L;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + by + i3 + i4 + Float.floatToIntBits(f1) + i6 +
            i7 + i8 + i9 + s + i10 + i11;
    }

    public static long lMeth(double d) {

        int i1=126, i2=-1, i12=-195, i13=54619, iArr[]=new int[N], iArr1[][]=new int[N][N];
        long l=10428L;
        byte by1=-103;
        short s1=23303;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -140);
        FuzzerUtils.init(fArr, 71.909F);
        FuzzerUtils.init(iArr1, 137);

        i1 = 1;
        while (++i1 < 309) {
            d += 8;
            Test.instanceCount = (iArr[i1]++);
            l = (i2 = (int)Math.abs(--Test.instanceCount));
            vMeth(Test.bFld, d, by1);
        }
        i2 &= i2;
        i2 = s1;
        for (i12 = 3; i12 < 178; ++i12) {
            if (Test.bFld) {
                fArr[i12] = i12;
                i13 = 25975;
                iArr1 = iArr1;
            }
        }
        i2 *= s1;
        i13 = i1;
        long meth_res = Double.doubleToLongBits(d) + i1 + l + i2 + by1 + s1 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i14=11, i15=-11, i16=-21906, i17=25, i18=-11, i19=-177;
        float f=29.685F, f2=-31.665F;
        double d2=-13.63285;
        long l1=3674422353L, lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -6173L);

        Test.instanceCount = (long)((++i) / (((long)((-10396 * (-2591 + (f + i))) + (i + -51093))) | 1));
        i -= ((i++) * 15589);
        Test.instanceCount += (long)(((i--) - Test.dArrFld[(109 >>> 1) % N]) - (Long.reverseBytes(Test.instanceCount) -
            (Test.instanceCount % (i | 1))));
        lMeth(d2);
        i14 = 1;
        while (++i14 < 234) {
            i15 = 1;
            do {
                Test.instanceCount *= Test.instanceCount;
                i = -116;
                Test.instanceCount += i15;
            } while (++i15 < 107);
        }
        f2 = 1;
        do {
            lArr[(int)(f2)][(int)(f2 + 1)] ^= Test.instanceCount;
            f *= i;
            for (i16 = 2; 139 > i16; ++i16) {
                try {
                    i17 = (i16 / i16);
                    i17 = (i15 % 184);
                    i17 = (i15 / -43824);
                } catch (ArithmeticException a_e) {}
                if (Test.bFld) break;
                Test.iArrFld[(int)(f2 - 1)] += i15;
            }
            switch ((int)((f2 % 7) + 106)) {
            case 106:
                Test.instanceCount += (long)(((f2 * Test.instanceCount) + iFld) - i15);
                break;
            case 107:
                f -= l1;
                sFld -= (short)i;
                for (i18 = 6; i18 < 139; i18++) {
                    iFld = (int)Test.instanceCount;
                    if (Test.bFld) break;
                    i19 = (int)Test.instanceCount;
                    i17 += (137 + (i18 * i18));
                    i19 += (i18 * Test.instanceCount);
                    l1 += i18;
                    l1 -= i19;
                    i19 -= i15;
                    iFld -= (int)d2;
                }
            case 108:
                Test.iArrFld[(int)(f2 - 1)] -= (int)f2;
                break;
            case 109:
                if (Test.bFld) break;
                break;
            case 110:
                l1 -= 37305;
                break;
            case 111:
            case 112:
                i17 = i15;
                break;
            }
        } while (++f2 < 180);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
