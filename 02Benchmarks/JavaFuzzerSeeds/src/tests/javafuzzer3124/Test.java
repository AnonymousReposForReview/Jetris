package tests.javafuzzer3124;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:22:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2187L;
    public static double dFld=-48.67437;
    public static float fFld=0.660F;
    public static boolean bFld=false;
    public static short sFld=5956;
    public boolean bFld1=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -160);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s) {

        int i13=222, i14=137, i15=46433, i16=71, i17=-2, i18=-108, i19=-13, i20=49200, iArr[]=new int[N];
        byte by=103;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(dArr, -2.71879);

        for (i13 = 13; i13 < 391; ++i13) {
            i14 += (int)Test.dFld;
            Test.instanceCount += (i13 * i14);
            for (i15 = 1; i15 < 4; ++i15) {
                i16 = i16;
                i14 = i16;
                Test.dFld += i16;
                for (i17 = 1; i17 < 2; i17++) {
                    iArr[i15] -= i13;
                    i18 -= by;
                    Test.instanceCount = i16;
                    i16 = i16;
                }
                for (i19 = 1; i19 < 2; ++i19) {
                    i18 += i19;
                }
                dArr[i13] *= 215L;
            }
        }
        vMeth2_check_sum += s + i13 + i14 + i15 + i16 + i17 + i18 + by + i19 + i20 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i8, int i9, int i10) {

        int i11=21757, i12=62873, i21=3, i22=64777, i23=24086, i24=-3, i25=-223, iArr1[]=new int[N];
        short s1=-23081;
        byte by1=-8;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -15.715F);
        FuzzerUtils.init(iArr1, -33276);

        for (i11 = 19; i11 < 336; ++i11) {
            switch ((i11 % 3) + 64) {
            case 64:
                vMeth2(s1);
                break;
            case 65:
                Test.dFld -= i10;
                i8 *= by1;
                fArr[i11] *= i9;
            case 66:
                for (i21 = i11; i21 < 5; i21++) {
                    for (i23 = 1; i23 < 1; ++i23) {
                        i9 <<= (int)Test.instanceCount;
                        try {
                            iArr1[i11] = (-41037 % i22);
                            i24 = (i10 % i8);
                            i25 = (i24 % i9);
                        } catch (ArithmeticException a_e) {}
                        i12 = i11;
                        iArr1[i11] = i21;
                        i8 = i23;
                        i22 += (i23 * i23);
                        i22 >>= (int)Test.instanceCount;
                    }
                }
                break;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + s1 + by1 + i21 + i22 + i23 + i24 + i25 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i7, long l) {

        float f=97.990F;
        int i26=-1, i27=-560, i28=150, i29=52219, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 9L);
        FuzzerUtils.init(iArr2, -158);

        vMeth1(i7, i7, -12);
        f = 1;
        while (++f < 275) {
            i26 = 1;
            do {
                Test.fFld += i26;
            } while (++i26 < 6);
            i27 = 1;
            do {
                lArr[i27 + 1] *= (long)f;
                i7 = i27;
                for (i28 = 1; i28 < 1; ++i28) {
                    Test.fFld = i26;
                    if (true) {
                        if (false) {
                            Test.dFld -= i7;
                            Test.dFld -= -37.675F;
                            try {
                                i7 = (iArr2[i28 + 1] / Test.iArrFld[(int)(f - 1)]);
                                i7 = (-52496 / i29);
                                i29 = (i28 % -50913);
                            } catch (ArithmeticException a_e) {}
                            i29 *= (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            iArr2[(int)(f)] += i7;
                        } else {
                            lArr[(int)(f)] = Test.sFld;
                        }
                    } else {
                        Test.iArrFld = Test.iArrFld;
                    }
                }
            } while (++i27 < 6);
        }
        vMeth_check_sum += i7 + l + Float.floatToIntBits(f) + i26 + i27 + i28 + i29 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr3) {

        int i1=-195, i2=-28, i3=-2124, i4=63054, i5=41, i6=253;
        long l1=200317902L;

        for (i1 = 6; i1 < 136; ++i1) {
            for (i3 = 9; i3 < 193; i3++) {
                for (i5 = 1; 2 > i5; ++i5) {
                    Test.instanceCount += (--i2);
                    switch (((i3 % 1) * 5) + 76) {
                    case 78:
                        vMeth(i1, l1);
                        switch (((160 >>> 1) % 4) + 41) {
                        case 41:
                            i2 += (-9 + (i5 * i5));
                            i6 = (int)-12.116951;
                            Test.dFld += i5;
                            break;
                        case 42:
                            if (Test.bFld) {
                                i6 = i6;
                                i6 = i5;
                                Test.bFld = bFld1;
                            } else {
                                switch ((i1 % 5) + 3) {
                                case 3:
                                case 4:
                                    Test.bFld = true;
                                    i2 *= 15779;
                                    i2 *= (int)Test.fFld;
                                case 5:
                                    try {
                                        Test.iArrFld[i3 - 1] = (i3 / i2);
                                        i4 = (i4 / -220);
                                        i6 = (i1 % i2);
                                    } catch (ArithmeticException a_e) {}
                                    i4 -= (int)l1;
                                    i6 <<= (int)55L;
                                    break;
                                case 6:
                                    l1 += i5;
                                    if (bFld1) continue;
                                    i6 &= i1;
                                    break;
                                case 7:
                                    i4 += i5;
                                    Test.instanceCount -= 227;
                                    l1 >>= i5;
                                    Test.iArrFld[i5 + 1] = (int)l1;
                                    break;
                                }
                                i6 /= (int)(i4 | 1);
                                i2 *= i6;
                            }
                        case 43:
                            i4 = i3;
                            break;
                        case 44:
                            i6 = 25544;
                            break;
                        }
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
