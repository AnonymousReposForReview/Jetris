package tests.javafuzzer487;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:35:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=85L;
    public static boolean bFld=false;
    public float fFld=50.14F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -27.740F);
        FuzzerUtils.init(Test.iArrFld, -37);
    }

    public static long dMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=22348, i9=49409, i10=-160, i11=-68, i12=-13, i13=116;
        short s1=-4841;
        boolean b=false;
        double d=-117.66413;
        byte by1=-22;
        float f=41.218F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -10293L);

        i8 += s1;
        i8 >>= (int)-52222L;
        for (i9 = 6; i9 < 250; ++i9) {
            for (i11 = 7; i11 > i9; i11--) {
                Test.instanceCount += (long)1.647F;
                switch ((i9 % 10) + 40) {
                case 40:
                    i12 = (int)-3894476444526044104L;
                    break;
                case 41:
                    b = true;
                    for (d = 1; d < 1; d++) {
                        if (b) {
                            i13 >>= i11;
                            i13 = by1;
                            vMeth_check_sum += i8 + s1 + i9 + i10 + i11 + i12 + (b ? 1 : 0) +
                                Double.doubleToLongBits(d) + i13 + by1 + Float.floatToIntBits(f) +
                                FuzzerUtils.checkSum(lArr1);
                            return;
                        } else if (Test.bFld) {
                            f *= i12;
                            f -= i13;
                            i12 |= i9;
                            vMeth_check_sum += i8 + s1 + i9 + i10 + i11 + i12 + (b ? 1 : 0) +
                                Double.doubleToLongBits(d) + i13 + by1 + Float.floatToIntBits(f) +
                                FuzzerUtils.checkSum(lArr1);
                            return;
                        } else if (Test.bFld) {
                            i10 %= 2828;
                        } else {
                            if (b) break;
                        }
                    }
                    break;
                case 42:
                    by1 *= (byte)i10;
                    break;
                case 43:
                    try {
                        i13 = (i13 / -3790);
                        i10 = (i12 / Test.iArrFld[i9 - 1][i11]);
                        i10 = (i13 % 1719);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 44:
                    Test.instanceCount += i11;
                    break;
                case 45:
                    i10 <<= s1;
                    break;
                case 46:
                    lArr1 = lArr1;
                    break;
                case 47:
                    i10 = i8;
                case 48:
                case 49:
                    if (b) break;
                    break;
                default:
                    i10 += i9;
                }
            }
        }
        vMeth_check_sum += i8 + s1 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i13 + by1 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr1);
    }

    public static double dMeth1(int i3) {

        int i4=13, i5=7033, i6=35354, i7=3;
        double d1=-64.113673;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 32541L);

        for (i4 = 7; 184 > i4; i4++) {
            for (i6 = 9; i6 > 1; --i6) {
                byte by=127;
                by = (byte)i4;
                Test.instanceCount <<= (-(i5++));
                i3 += i3;
                Test.instanceCount -= (++i3);
                i3 <<= ((i3 + (i3--)) - -93);
                i5 += (int)(++lArr[i4 + 1]);
                if (Test.bFld) {
                    Test.fArrFld[i4 + 1] += Test.iArrFld[i4 + 1][i4];
                    vMeth();
                    i3 *= (int)Test.instanceCount;
                } else {
                    if (i3 != 0) {
                    }
                    d1 -= by;
                    Test.bFld = Test.bFld;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static double dMeth(long l, int i2) {

        short s=26761;
        int i14=12, i15=2, i16=13, i17=-21607, i18=0, i19=-165, i20=441, i21=6;

        i2 = Math.max((i2 - i2) * (i2 - s), (int)((l++) * (12 - dMeth1(i2))));
        for (i14 = 16; i14 < 376; ++i14) {
            i2 += (i14 - i14);
            i2 <<= i15;
            l += i14;
        }
        i16 = 1;
        while (++i16 < 314) {
            l *= i16;
        }
        for (i17 = 1; i17 < 313; ++i17) {
            Test.iArrFld[i17 - 1][i17] <<= i17;
            i2 -= 33034;
            i19 = 1;
            do {
                i2 <<= (int)7655824435041762357L;
                for (i20 = 1; 1 < i20; i20 -= 2) {
                    i15 -= 188;
                    l = i21;
                }
            } while (++i19 < 5);
        }
        long meth_res = l + i2 + s + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=11425, i1=7, i22=78, i23=12, i24=-9, i25=146, i26=-6, i27=-30594;
        double d2=-1.79629;
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)32742);
        FuzzerUtils.init(lArr2, -6954304958206960976L);

        for (i = 8; i < 161; i++) {
            Test.instanceCount = (long)(dMeth(Test.instanceCount, i1) * i1);
            if (true) break;
        }
        i1 += i;
        i1 -= (int)2.1003F;
        sArr[(i1 >>> 1) % N] = (short)Test.instanceCount;
        for (i22 = 3; i22 < 236; i22++) {
            byte by2=19;
            i23 = (int)Test.instanceCount;
            lArr2[i22 + 1] += Test.instanceCount;
            i1 += (i22 + i);
            Test.instanceCount += i22;
            for (i24 = 5; i24 < 108; ++i24) {
                Test.instanceCount ^= 6298L;
                i25 -= i25;
                i25 = i1;
                i23 -= (int)1.131F;
                Test.fArrFld[i24] *= (float)d2;
                i23 += (int)Test.instanceCount;
                i25 = i;
                fFld = Test.instanceCount;
                d2 += i;
            }
            by2 = by2;
            i25 = (int)Test.instanceCount;
            i1 |= i25;
            by2 += (byte)Test.instanceCount;
        }
        for (i26 = 10; i26 < 237; ++i26) {
            fFld += (i26 + i23);
            i27 -= i26;
            fFld *= 95;
            fFld += i26;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth1 dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
