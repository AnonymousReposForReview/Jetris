package tests.javafuzzer2918;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:59:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2104L;
    public static volatile float fFld=99.490F;
    public static byte byFld=49;
    public static int iFld=12050;
    public long lFld=2L;
    public byte byFld1=-73;
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, int i3) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -1);

        i3 -= (int)Test.instanceCount;
        iArr1[(i3 >>> 1) % N] += i3;
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth1(int i2, long l) {

        short s=21377;
        int i4=1, i5=140, i6=-21169, i7=1, iArr2[]=new int[N];
        long l1=-3470944963L;
        double d=-66.99049;
        boolean b=true;

        FuzzerUtils.init(iArr2, 11);

        vMeth2(Test.fFld, i2);
        l *= s;
        if (b) {
            Test.instanceCount /= 3;
            iArr2[(i2 >>> 1) % N] = (int)l;
        } else if (b) {
            iArr2[(i2 >>> 1) % N] = i2;
            i4 = 322;
            do {
                if (b) {
                    for (l1 = 10; l1 > i4; l1 -= 3) {
                        l += (long)-66.507F;
                        for (i6 = 1; i6 > 1; i6--) {
                            i7 += i5;
                            i7 ^= 26089;
                        }
                        i5 += i4;
                        Test.fFld = (float)d;
                    }
                } else if (b) {
                    s = (short)i7;
                } else {
                    if (b) break;
                }
            } while ((i4 -= 2) > 0);
        } else {
            i2 *= (int)15.87269;
        }
        vMeth1_check_sum += i2 + l + s + i4 + l1 + i5 + i6 + i7 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth() {

        boolean b1=true, bArr[]=new boolean[N];
        int i8=225, i9=-165, i10=-1, i11=-5, i12=-125, i13=14;
        float f1=-72.955F;
        double d1=1.64517;

        FuzzerUtils.init(bArr, false);

        if (b1) {
            vMeth1(-19882, 14018L);
        } else {
            i8 -= Test.byFld;
            for (i9 = 17; i9 < 361; i9++) {
                for (f1 = 1; 5 > f1; ++f1) {
                    short s1=10506;
                    bArr[i9] = b1;
                    fArrFld[(int)(f1 + 1)] += i11;
                    i12 &= (int)Test.instanceCount;
                    i13 <<= -4;
                    d1 -= Test.fFld;
                    Test.fFld -= Test.instanceCount;
                    switch ((int)((f1 % 4) + 112)) {
                    case 112:
                        s1 = (short)Test.instanceCount;
                        i13 <<= i10;
                        b1 = false;
                        break;
                    case 113:
                        i12 -= (int)-63553L;
                        break;
                    case 114:
                        i13 = (int)-4003766043L;
                    case 115:
                        i13 += (int)f1;
                    default:
                        if (b1) continue;
                    }
                }
            }
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=131, i14=1, i16=6, i17=-1, i18=-144, i19=-11, i20=-11, iArr[]=new int[N];
        short s2=-30477;
        boolean b2=true;
        double d2=1.123323;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 82);
        FuzzerUtils.init(lArr, 1L);

        i = 1;
        do {
            int i15=-12844;
            iArr[i] = (int)(-Test.instanceCount);
            vMeth();
            switch ((i % 8) + 85) {
            case 85:
                Test.iFld += (i ^ i);
                break;
            case 86:
                Test.iFld += (((i * Test.instanceCount) + i) - i);
                Test.iFld >>>= Test.iFld;
                Test.byFld = (byte)i;
                i14 <<= s2;
                break;
            case 87:
                i15 = (int)Test.instanceCount;
                switch ((((Test.iFld >>> 1) % 9) * 5) + 69) {
                case 106:
                    for (i16 = 197; i16 > 12; i16--) {
                        Test.iFld <<= i17;
                        Test.instanceCount = Test.iFld;
                        i15 *= i15;
                        for (i18 = 1; i18 < 2; ++i18) {
                            if (b2) continue;
                            i19 <<= i19;
                            Test.fFld += -207;
                            Test.instanceCount >>= Test.instanceCount;
                            iArr = iArr;
                            lArr = lArr;
                        }
                        i14 -= (int)Test.instanceCount;
                        Test.fFld -= lFld;
                    }
                    i15 -= (int)lFld;
                    i20 = 1;
                    do {
                        iArr[i + 1] = i16;
                    } while (++i20 < 197);
                    Test.instanceCount = -64;
                    break;
                case 86:
                    i14 *= (int)8660702135873322921L;
                    i14 += (int)d2;
                case 70:
                    i15 *= (int)Test.instanceCount;
                    break;
                case 94:
                    Test.instanceCount -= 9;
                    break;
                case 88:
                    i14 += (int)(3561107039015407220L + (i * i));
                    break;
                case 109:
                    byFld1 = (byte)i15;
                case 112:
                    i14 = (int)-223L;
                    break;
                case 105:
                    Test.iFld += (((i * Test.instanceCount) + i18) - i19);
                    break;
                case 76:
                    Test.iFld ^= i18;
                    break;
                }
                break;
            case 88:
                byFld1 -= (byte)1.1005F;
            case 89:
                i17 >>>= i20;
                break;
            case 90:
            case 91:
                Test.iFld *= i17;
                break;
            case 92:
                i17 += Test.iFld;
                break;
            }
        } while (++i < 127);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
