package tests.javafuzzer1975;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=59595L;
    public static int iFld=-34436;
    public static int iFld1=-12;
    public static double dFld=-1.114864;
    public boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.741F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, byte by) {

        int i4=191, i5=44618, i6=-64115, i7=-193, i8=-62, iArr[][]=new int[N][N];
        float f=0.811F, f1=0.1019F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -39684);
        FuzzerUtils.init(dArr, 1.91477);

        for (i4 = 20; i4 < 324; i4 += 2) {
            i5 *= i3;
        }
        i3 = i5;
        Test.instanceCount -= i4;
        try {
            i3 -= by;
            iArr[(i5 >>> 1) % N][(0 >>> 1) % N] = 218;
            for (i6 = 13; i6 < 242; i6++) {
                f = 1;
                do {
                    dArr[(int)(f)] -= 14;
                    i3 -= i3;
                    f1 = Test.instanceCount;
                    i5 <<= Test.iFld;
                    i5 -= (int)-544747108721222977L;
                    i5 = i8;
                } while (++f < 7);
            }
        }
        catch (ArithmeticException exc1) {
            i3 = i5;
        }
        vMeth2_check_sum += i3 + by + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i8 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i1=4, i2=198, i9=-10, i10=153, i11=14, i12=21827, i13=-140, i14=26823, i15=5, iArr1[]=new int[N];
        byte by1=123;
        float f2=-68.168F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 13);
        FuzzerUtils.init(lArr, 2L);

        for (i1 = 17; 332 > i1; i1++) {
            vMeth2(i2, by1);
            iArr1 = iArr1;
            for (i9 = i1; i9 < 5; ++i9) {
                i2 += i1;
                iArr1[i9 - 1] >>= i10;
                f2 -= i1;
            }
        }
        i11 = 1;
        do {
            iArr1[i11] *= (int)Test.instanceCount;
            f2 += Test.instanceCount;
            for (i12 = 5; i11 < i12; --i12) {
                lArr[i11 - 1] *= i12;
            }
            for (i14 = 5; i14 > 1; i14--) {
                i13 += (int)Test.instanceCount;
                try {
                    i15 = (Test.iFld1 % Test.iFld1);
                    i10 = (i9 / i2);
                    iArr1[i14] = (i11 / 547641279);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i11 < 325);
        vMeth1_check_sum += i1 + i2 + by1 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i) {

        int i16=251, i17=174, i18=-105, i19=-56485, i20=-147;
        boolean b=false;
        float f3=5.881F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 2692506148110082838L);

        vMeth1();
        i16 = 1;
        do {
            if (b) {
                i *= 6;
                lArr1[i16 + 1][i16 - 1] += i;
            } else {
                i += (i16 * i16);
                f3 += f3;
                for (i17 = 1; 12 > i17; i17++) {
                    Test.iFld += (int)Test.instanceCount;
                    Test.instanceCount |= Test.iFld1;
                }
            }
            for (i19 = 1; i19 < 12; i19++) {
                f3 += 8;
                Test.iFld = i;
                Test.dFld *= i;
                Test.instanceCount = (long)f3;
            }
        } while (++i16 < 126);
        vMeth_check_sum += i + i16 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i21=-45598, i22=21464, i23=32430, i24=59590, i25=13, i26=-98, i27=236;
        byte by2=-2;
        float f4=-2.649F;
        double d=-98.69182;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3L);

        vMeth(Test.iFld);
        for (i21 = 2; i21 < 385; i21++) {
            try {
                Test.iFld = (i22 % -706485542);
                Test.iFld1 = (i22 / iArrFld[i21]);
                Test.iFld1 = (Test.iFld1 / i21);
            } catch (ArithmeticException a_e) {}
            iArrFld[i21] *= Test.iFld;
            for (i23 = 3; i23 < 66; ++i23) {
                by2 -= (byte)Test.iFld;
            }
            i25 = 1;
            do {
                i24 += (int)Test.instanceCount;
                Test.iFld = i25;
                f4 += i22;
                d = 1;
                while (++d < 1) {
                    lArr2[i21] >>>= Test.instanceCount;
                    Test.fArrFld[(int)(d + 1)] += (float)-119.15860;
                    if (bFld) continue;
                }
                Test.iFld1 += (i25 - i23);
                Test.instanceCount %= (i25 | 1);
                iArrFld[i21 - 1] = i21;
                Test.instanceCount -= Test.iFld1;
                switch ((((i21 >>> 1) % 1) * 5) + 58) {
                case 59:
                    i22 += (i25 ^ by2);
                    i24 -= i21;
                    break;
                default:
                    iArrFld[i25 + 1] += (int)f4;
                    Test.iFld1 = i22;
                }
            } while (++i25 < 66);
            Test.instanceCount &= i23;
            Test.iFld1 += (int)(92.384F + (i21 * i21));
            lArr2[i21] = i21;
            for (i26 = 3; i26 < 66; i26++) {
                i27 *= -14;
                Test.instanceCount += (i26 + f4);
                Test.iFld1 += (int)Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
