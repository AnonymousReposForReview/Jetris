package tests.javafuzzer1259;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:31:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static volatile long lFld=30163L;
    public static float fFld=-2.479F;
    public static volatile double dFld=88.2676;
    public int iFld=23871;
    public static short sFld=-16433;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -229);
        FuzzerUtils.init(Test.dArrFld, -123.106329);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static long lMeth(long l, int i6) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 39197);

        iArr2 = (iArr2 = (iArr2 = (iArr2 = FuzzerUtils.int1array(N, (int)-47693))));
        i6 = (int)Double.longBitsToDouble(--Test.lFld);
        long meth_res = l + i6 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i10=32206, i11=-226, i12=157, i13=45683, i14=4;
        short s=26269, s1=-29041;
        boolean b=true;

        for (i10 = 11; i10 < 195; ++i10) {
            Test.lFld -= -5791155779294950122L;
            Test.fFld = s;
            try {
                i11 = (Test.iArrFld[i10 + 1] % 30927);
                i11 = (118 / i11);
                i11 = (-43348 % Test.iArrFld[i10 + 1]);
            } catch (ArithmeticException a_e) {}
            if (i10 != 0) {
                vMeth1_check_sum += i10 + i11 + s + i12 + i13 + i14 + s1 + (b ? 1 : 0);
                return;
            }
            if (b) {
                i12 = 1;
                while (++i12 < 9) {
                    Test.instanceCount *= (long)2.22234;
                    for (i13 = i10; i13 < 1; i13++) {
                        Test.dFld -= i14;
                        i14 *= i13;
                        i11 &= s;
                    }
                    i11 += i10;
                }
                Test.dArrFld[i10] = -3022723393L;
                i14 = i13;
            } else if (b) {
                i11 *= s1;
            } else {
                i14 += i12;
            }
        }
        vMeth1_check_sum += i10 + i11 + s + i12 + i13 + i14 + s1 + (b ? 1 : 0);
    }

    public static void vMeth(int i7, int i8, int i9) {

        short s2=23506;
        byte by1=74;
        int i15=-12;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.131F);

        i7 = i9;
        for (float f : fArr) {
            vMeth1();
            Test.iArrFld = Test.iArrFld;
        }
        s2 -= (short)Test.lFld;
        i9 += by1;
        i15 = 1;
        while (++i15 < 372) {
            i9 -= i15;
            Test.fFld += i15;
        }
        i9 = (int)Test.lFld;
        vMeth_check_sum += i7 + i8 + i9 + s2 + by1 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i5=223, i17=19816, i18=17904, i19=18049, i20=193, i21=-5, iArr1[]=new int[N];
        byte by2=-4, byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 186);
        FuzzerUtils.init(byArr, (byte)97);

        iArr1[(i5 >>> 1) % N] = (int)((++byArr[(i5 >>> 1) % N]) + lMeth(lMeth(Test.instanceCount, 10), i5));
        vMeth(i5, 12309, i5);
        for (int i16 : iArr1) {
            i17 = 1;
            do {
                i16 *= i17;
            } while (++i17 < 4);
            by2 = (byte)13555;
            Test.fFld = i16;
            for (i18 = 1; i18 < 4; i18++) {
                Test.lFld *= i19;
                Test.lFld = 2113507616738168991L;
                i16 -= i19;
                for (i20 = 1; i20 < 2; ++i20) {
                    i21 = i19;
                    Test.dFld = 89;
                    i21 *= (int)Test.fFld;
                }
            }
        }
        long meth_res = i5 + i17 + by2 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=55474, i2=-12, i3=7, i4=8503, i22=-12, i23=-210, i24=-46873, i25=-28, i26=8, i27=-53131,
            iArr[]=new int[N];
        double d=-54.118989;
        byte by=101;
        long l1=-40724099L;

        FuzzerUtils.init(iArr, -33268);

        Test.instanceCount -= (++i);
        for (i1 = 9; i1 < 169; i1 += 2) {
            for (i3 = 7; i3 < 313; i3++) {
                Test.lFld ^= (long)((--d) - i4);
                i *= ((++iArr[i1]) + (++i));
                i2 += (i3 ^ i1);
                by += (byte)(i3 * i3);
                by += (byte)(1616492833233635477L + (i3 * i3));
                Test.lFld = (iMeth() - -13);
            }
            Test.lFld >>= Test.instanceCount;
            for (i22 = 15; i22 < 313; i22++) {
                boolean b1=false;
                Test.iArrFld[i1 + 1] += i23;
                Test.instanceCount >>= i22;
                b1 = true;
                if (true) continue;
                if (b1) break;
                iFld = i1;
            }
            iArr[(i2 >>> 1) % N] += 30078;
            Test.fFld -= iFld;
            switch (((i1 % 10) * 5) + 5) {
            case 32:
                Test.instanceCount <<= -12;
                break;
            case 43:
                for (l1 = 4; l1 < 313; l1++) {
                    Test.lFld = i3;
                    for (i25 = 1; i25 < 2; ++i25) {
                        iArr[(int)(l1)] = (int)-8L;
                    }
                    Test.fFld = 8;
                    iFld -= i27;
                    Test.instanceCount *= i1;
                }
                Test.lFld += (i1 * i27);
                break;
            case 12:
                d += i27;
                break;
            case 6:
                Test.lFld += i1;
            case 26:
                i24 += i1;
                break;
            case 8:
                i = -4;
                break;
            case 49:
                Test.dFld -= i24;
                break;
            case 54:
            case 36:
                i2 -= i2;
                break;
            case 51:
                Test.sFld -= (short)l1;
            default:
                Test.fFld += (222 + (i1 * i1));
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
