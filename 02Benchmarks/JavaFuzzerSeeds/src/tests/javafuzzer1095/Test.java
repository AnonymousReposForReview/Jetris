package tests.javafuzzer1095;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:25:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-191L;
    public float fFld=-37.600F;
    public static int iFld=14;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.186F);
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.lArrFld, -240L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, int i3, int i4) {

        int i5=-173, i6=12, i7=72, i8=-11, i9=-14854, i10=-21281, i11=-47;
        short s=11773;
        double d1=-49.59065;

        for (i5 = 3; i5 < 358; ++i5) {
            Test.iFld = i6;
            i6 -= i5;
            for (i7 = 1; i7 < 5; i7++) {
                i4 = i7;
            }
            i6 = -209;
        }
        for (i9 = 5; i9 < 293; ++i9) {
            i11 = 1;
            while (++i11 < 6) {
                i10 -= (int)Test.instanceCount;
                Test.instanceCount -= i10;
                Test.instanceCount >>= i9;
                Test.instanceCount -= i6;
                f1 += i11;
                s = (short)d1;
                Test.instanceCount += (i11 - Test.instanceCount);
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s +
            Double.doubleToLongBits(d1);
    }

    public static void vMeth1(long l1) {

        int i12=33248, i13=13, i14=-1, i15=47063, iArr[]=new int[N];
        double d2=110.100666;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(iArr, -38286);

        Test.iFld = -9837;
        try {
            Test.iFld -= (int)((l1--) - Test.iFld);
            vMeth2(-101.669F, Test.iFld, Test.iFld);
            for (long l2 : lArr) {
                iArr[(Test.iFld >>> 1) % N] >>= Test.iFld;
                for (i12 = 1; i12 < 4; i12++) {
                    d2 *= l1;
                    Test.iFld -= (int)Test.instanceCount;
                    Test.iFld = i12;
                }
                for (i14 = 1; i14 < 4; i14 += 2) {
                    lArr[i14] = i15;
                }
                lArr[(i15 >>> 1) % N] = (long)2.733F;
                i15 /= i12;
                i15 &= (int)l1;
            }
        }
        catch (ArithmeticException exc1) {
            d2 = i14;
        }
        vMeth1_check_sum += l1 + i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(long l, float f) {

        double d=0.77620;
        int i1=-163, i2=-11933, i16=14, i17=0, i18=-187, i19=0, i20=16, i21=157, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, 50);

        Test.iFld = (int)((f++) % (((long)(--d)) | 1));
        for (i1 = 7; i1 < 136; i1++) {
            i2 -= (int)(-((i2 * d) * Math.min(i1, i1)));
            Test.iFld = i2;
            vMeth1(l);
        }
        b = true;
        iArr1[(Test.iFld >>> 1) % N] <<= i1;
        Test.iFld = i2;
        for (i16 = 7; i16 < 145; ++i16) {
            for (i18 = 11; i18 > 1; i18 -= 3) {
                iArr1[(i16 >>> 1) % N] -= (int)Test.instanceCount;
                for (i20 = 1; i20 < 4; ++i20) {
                    f *= 2.12F;
                    Test.iFld += i2;
                    Test.iFld += (((i20 * l) + Test.iFld) - i20);
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + (b ? 1 : 0) + i16 + i17
            + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=12, i22=-1994, i23=39759;
        float f2=-1.374F;

        Test.fArrFld[(i >>> 1) % N] = (((i - fFld) * Test.instanceCount) - (--i));
        vMeth(Test.instanceCount, fFld);
        i = (int)Test.instanceCount;
        i22 = 1;
        do {
            try {
                Test.iArrFld[i22] = (Test.iArrFld[i22] / 31278);
                i = (-4 / i22);
                Test.iFld = (-2 % Test.iFld);
            } catch (ArithmeticException a_e) {}
            for (f2 = 2; f2 < 116; ++f2) {
                Test.lArrFld[(int)(f2)] *= i23;
                i += (int)Test.instanceCount;
                Test.iFld = i23;
            }
            Test.iArrFld[i22 - 1] += (int)Test.instanceCount;
            switch ((((i >>> 1) % 1) * 5) + 122) {
            case 124:
                i23 += (i22 * i22);
            }
        } while (++i22 < 217);
        i = i;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
