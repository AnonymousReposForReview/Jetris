package tests.javafuzzer958;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:05:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=148L;
    public static byte byFld=-27;
    public static float fFld=-1.713F;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.fArrFld, 1.968F);
        FuzzerUtils.init(Test.lArrFld, 2600736434L);
        FuzzerUtils.init(Test.dArrFld, 53.11799);
    }

    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, float f1) {

        int i10=7, i11=191, i12=-2, i13=124, i15=10384, i16=-6, i17=-224, i18=167;
        boolean b=false;
        float fArr[]=new float[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 111.427F);
        FuzzerUtils.init(dArr, 1.38069);
        FuzzerUtils.init(lArr, 11L);

        for (i10 = 10; i10 < 391; i10++) {
            for (i12 = 1; i12 < 4; ++i12) {
                fArr[i10 + 1] += 4;
                i11 += (((i12 * l1) + l1) - Test.instanceCount);
            }
            i15 = 1;
            do {
                fArr[i10 + 1] -= i13;
                Test.iArrFld[i15 + 1] -= i15;
                for (i16 = i15; i16 < 1; i16++) {
                    f1 -= i16;
                    dArr = dArr;
                    switch ((((24519 >>> 1) % 2) * 5) + 127) {
                    case 128:
                        i18 += (-54361 + (i16 * i16));
                        break;
                    case 135:
                        if (b) break;
                        break;
                    default:
                        lArr[i15] |= i15;
                        i13 >>= i16;
                    }
                }
            } while (++i15 < 4);
        }
        vMeth_check_sum += l1 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i15 + i16 + i17 + i18 + (b ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(lArr);
    }

    public static boolean bMeth(long l) {

        int i5=120, i6=222, i7=-32, i8=-43695, i9=-55080, i19=8, i20=-60741;
        short s=31335;

        Test.iArrFld[(i5 >>> 1) % N] <<= (i5 ^= Test.iArrFld[(i5 >>> 1) % N]);
        for (i6 = 170; i6 > 10; i6--) {
            Test.iArrFld[i6 - 1] <<= s;
            for (i8 = 1; i8 < 10; i8++) {
                vMeth(Test.instanceCount, Test.fFld);
                Test.instanceCount *= i19;
                i7 += (i8 - i6);
                Test.fArrFld[i6][i8 + 1] += i8;
                i5 = -2;
                i20 = 2;
                while (--i20 > 0) {
                    int i21=52;
                    switch (((-8 >>> 1) % 2) + 80) {
                    case 80:
                        Test.lArrFld[(i19 >>> 1) % N] += (long)20.668F;
                        break;
                    case 81:
                        Test.instanceCount >>= i19;
                    default:
                        i9 += i20;
                        i21 |= s;
                    }
                }
            }
        }
        long meth_res = l + i5 + i6 + i7 + s + i8 + i9 + i19 + i20;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth() {

        int i1=-2, i2=-5, i3=7, i4=1, i22=-34341;
        float f=-53.972F;
        double d=-99.118204;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-127);

        for (i1 = 3; i1 < 289; i1++) {
            byArr[i1] += (byte)(--Test.byFld);
            i2 = (i2 -= (i2 = i1));
            for (i3 = 1; i3 < 6; ++i3) {
                Test.iArrFld[i3] = i2;
                Test.byFld += (byte)(i3 ^ (long)f);
                i2 = (int)((++Test.instanceCount) << Test.byFld);
            }
            if (bMeth(Test.instanceCount)) break;
            Test.dArrFld[i1 - 1] = i4;
            for (d = 1; d < 6; d++) {
                i4 += (int)(d + i2);
                i4 >>>= i22;
                Test.iArrFld[(int)(d - 1)] -= (int)Test.instanceCount;
                i4 += i1;
            }
            i2 += i1;
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i22 +
            FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i23=-105, i24=-1, i25=-63356, i26=-22464, i27=-12371, i28=14357, i29=-68, i30=1, i31=12, i32=-64738;
        double d1=-79.81391;
        short s1=26285;

        Test.instanceCount = i;
        Test.iArrFld[(i >>> 1) % N] += (int)(i = (int)(dMeth() - i));
        bFld = bFld;
        i23 = 1;
        while (++i23 < 232) {
            i += (((i23 * i23) + i) - Test.fFld);
            for (i24 = 3; i24 < 108; i24++) {
                for (i26 = 1; i26 < 2; i26++) {
                    i = i25;
                    Test.instanceCount -= (long)Test.fFld;
                    if (bFld) break;
                    i27 >>= (int)Test.instanceCount;
                    i27 += (((i26 * i27) + Test.fFld) - i27);
                }
                Test.fFld -= -28998L;
                Test.fFld = i27;
                i += (i24 * i24);
                i27 -= (int)Test.fFld;
                for (i28 = 2; i28 > 1; i28--) {
                    Test.lArrFld[i24] -= i;
                    d1 += i30;
                    i += i28;
                }
                switch (((i23 % 2) * 5) + 32) {
                case 41:
                case 37:
                    i25 += i27;
                    Test.instanceCount -= Test.instanceCount;
                    i25 = i;
                    try {
                        i29 = (i28 / -445332315);
                        i25 = (Test.iArrFld[i23] % i28);
                        i30 = (-5514 / i30);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
                Test.fArrFld[i24 + 1][i23 - 1] -= i27;
            }
            for (i31 = 1; i31 < 108; i31++) {
                Test.fFld -= s1;
                i30 >>= i23;
                s1 <<= (short)4222736796774997896L;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
