package tests.javafuzzer1294;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11658L;
    public static boolean bFld=false;
    public byte byFld=63;
    public volatile int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9, double d1) {

        int i10=-64, i11=169;

        for (i10 = 12; i10 < 370; i10++) {
            Test.instanceCount -= Test.instanceCount;
        }
        i9 = (int)Test.instanceCount;
        vMeth1_check_sum += i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11;
    }

    public static void vMeth(byte by, int i) {

        int i1=-26554, i2=1, i3=38437, i4=195, i5=23513, i6=-64815, i7=-9, i12=-65342, iArr[]=new int[N];
        double d=-2.34087, dArr[]=new double[N];
        float f=110.772F, fArr[][]=new float[N][N];
        long l=-121L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(dArr, 1.123245);
        FuzzerUtils.init(fArr, -13.535F);
        FuzzerUtils.init(lArr, -1280505054L);

        for (i1 = 7; i1 < 197; ++i1) {
            Test.instanceCount -= (long)d;
            d = (++i);
            i3 = 1;
            do {
                i = (int)(i2 = (int)Math.max(Test.instanceCount, -(242L - Math.max(i, i1))));
                switch ((i3 % 1) + 5) {
                case 5:
                    for (i4 = 1; i4 < 1; ++i4) {
                        i5 *= (int)(((Test.instanceCount * f) - (-iArr[i4])) + dArr[i4 - 1]);
                    }
                    iArr[i1] *= (++i);
                    break;
                }
                for (i6 = 1; i6 > 1; i6--) {
                    vMeth1(i6, i7, -53.2412);
                }
            } while (++i3 < 8);
            for (l = 1; l < 8; ++l) {
                fArr[i1][i1 - 1] -= 64985;
                lArr[(int)(l + 1)] >>= i6;
                i >>= i5;
            }
        }
        vMeth_check_sum += by + i + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + Float.floatToIntBits(f) + i6
            + i7 + l + i12 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        byte by1=-49;
        int i13=87, i14=9, i15=2253, i16=-7, i17=123, i18=22975, i19=-77, iArr1[]=new int[N];
        double d2=124.41326;
        short s=-7606;
        float f1=85.198F;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(lArr1, 1961700878741983657L);
        FuzzerUtils.init(bArr, false);

        vMeth(by1, i13);
        for (i14 = 5; i14 < 313; ++i14) {
            Test.instanceCount += (-42429L + (i14 * i14));
            iArr1[i14 - 1] <<= i14;
            for (i16 = 1; i16 < 5; i16++) {
                d2 *= i16;
            }
            s = (short)Test.instanceCount;
            Test.instanceCount = -49343;
            i13 = (int)f1;
            for (i18 = 1; 5 > i18; ++i18) {
                i19 ^= i13;
                lArr1[i18] = i15;
                Test.instanceCount += (i18 * Test.instanceCount);
                i17 = -245;
                bArr[i18 + 1] = Test.bFld;
            }
        }
        long meth_res = by1 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d2) + s + Float.floatToIntBits(f1)
            + i18 + i19 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=37174, i21=0, i22=-13352, i23=52876, i24=4, i25=137;
        double d3=-93.15691, d4=-69.80147, d5=-77.37312;
        short s1=-23491;
        float f2=63.244F, f3=1.370F;

        iArrFld[(-159 >>> 1) % N] = iMeth();
        for (i20 = 7; i20 < 132; i20++) {
            byte by2=-118;
            i21 ^= i20;
            d3 = by2;
            i21 += (int)(13L + (i20 * i20));
            s1 -= (short)i21;
            f2 += i20;
            by2 += (byte)Test.instanceCount;
            for (f3 = 8; 201 > f3; ++f3) {
                Test.instanceCount += (long)(((f3 * f3) + i20) - i22);
                iArrFld[(int)(f3)] = i22;
            }
            i21 *= 56653;
            i21 += 39;
            i21 = (int)Test.instanceCount;
        }
        s1 = (short)i21;
        i21 = (int)f3;
        i22 += (int)Test.instanceCount;
        i21 >>= (int)Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        for (i23 = 8; 238 > i23; i23 += 3) {
            i24 += (11 + (i23 * i23));
            switch ((((i20 >>> 1) % 5) * 5) + 112) {
            case 134:
                Test.instanceCount += (i23 * i23);
                i22 += (i23 + byFld);
                for (d4 = 329; 20 < d4; d4--) {
                    i25 = i21;
                    f2 += i22;
                    d5 = 1;
                    while (++d5 < 2) {
                        iArrFld[i23] = i20;
                        Test.instanceCount -= i23;
                    }
                }
            case 131:
                i25 += (((i23 * i20) + i20) - i24);
                break;
            case 135:
                iArrFld[i23] *= i20;
                break;
            case 114:
                lArrFld[i23 + 1] += i25;
                break;
            case 133:
                try {
                    i21 = (i21 / -129516788);
                    i25 = (i20 % iArrFld[i23]);
                    i24 = (iArrFld[i23] / i22);
                } catch (ArithmeticException a_e) {}
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
