package tests.javafuzzer2909;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:55:06 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=321892640L;
    public static int iFld=45986;
    public static short sFld=29019;
    public static float fFld=79.157F;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 22167);
        FuzzerUtils.init(Test.lArrFld, -36819L);
        FuzzerUtils.init(Test.fArrFld, 11.358F);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static double dMeth(int i8) {


        Test.iArrFld[(33209 >>> 1) % N] -= 63061;
        long meth_res = i8;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i3=-143, i4=121, i5=251, i6=-95, i7=64309, iArr1[]=new int[N];
        float f=0.198F, f1=0.647F;
        double d=105.85317;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -55261L);
        FuzzerUtils.init(iArr1, 51175);

        i3 = 1;
        do {
            for (i4 = 1; i4 < 7; i4++) {
                i1 >>>= (++i5);
                lArr[i3 + 1] %= (((long)(((75 * i2) * (Test.instanceCount + f)) - ((-i4) - (f1 /
                    4320970366444729008L)))) | 1);
                for (i6 = i4; i6 < 2; ++i6) {
                    f += Math.max((int)((i1++) * (i2 + d)), i2);
                    i1 += (((i6 * Test.instanceCount) + f1) - Test.instanceCount);
                    lArr[i6] = (-i6);
                    Test.instanceCount = (++iArr1[i4 - 1]);
                    Test.iFld += i6;
                    Test.instanceCount += (long)dMeth(i2);
                    i2 = (int)Math.abs((Test.sFld - Test.instanceCount) - (i2 - i6));
                    i5 += (int)(++Test.instanceCount);
                    Test.iFld = ((++i1) + iArr1[i4]);
                }
                Test.instanceCount *= (((241 - Integer.reverseBytes(i6)) + Test.iFld) + ((i4 - i7) - (--i1)));
            }
        } while (++i3 < 225);
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i6 + i7 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth2(int i15, int i16, int i17) {


        i16 -= i15;
        i15 = 246;
        i16 = (int)Test.instanceCount;
        i16 = (int)Test.instanceCount;
        long meth_res = i15 + i16 + i17;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i13=-11, i14=-51987, i18=-57129, i19=13;
        double d4=2.66140, d5=0.41659;
        float f2=2.706F;
        boolean b1=false;

        for (i13 = 8; 244 > i13; i13++) {
            Test.iArrFld[i13] <<= Integer.reverseBytes((int)(iMeth2(i14, Test.iFld, i13) * -1.88721));
            for (d4 = i13; d4 < 7; ++d4) {
                i19 = 1;
                while (++i19 < 1) {
                    Test.iArrFld[(i19 >>> 1) % N] = Test.sFld;
                    i18 += (int)d5;
                    f2 = Test.iFld;
                    Test.iFld *= (int)Test.instanceCount;
                    if (b1) break;
                    f2 -= Test.instanceCount;
                    i14 = -220;
                    Test.instanceCount += (i19 * i19);
                }
                if (b1) {
                    Test.instanceCount <<= 41518L;
                }
                Test.instanceCount += Test.instanceCount;
            }
        }
        long meth_res = i13 + i14 + Double.doubleToLongBits(d4) + i18 + i19 + Double.doubleToLongBits(d5) +
            Float.floatToIntBits(f2) + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i10, long l, double d2) {

        double d3=1.98991;
        int i12=-6671, i20=6, i21=-19869;
        boolean b2=true;
        byte by1=126;

        for (int i11 : Test.iArrFld) {
            for (d3 = 1; d3 < 4; d3++) {
                Test.instanceCount = iMeth1();
                Test.iFld = i11;
                i11 += (int)(d3 + l);
                i12 = i11;
                switch (((i11 >>> 1) % 8) + 4) {
                case 4:
                    if (b2) continue;
                    for (i20 = 1; 2 > i20; ++i20) {
                        Test.iArrFld[(int)(d3 - 1)] = i11;
                        Test.iFld -= (int)l;
                        i10 <<= (int)5L;
                        i21 -= i11;
                        Test.iArrFld[i20] += Test.iFld;
                        Test.fFld = i10;
                    }
                    break;
                case 5:
                    i12 = i21;
                    break;
                case 6:
                    Test.instanceCount >>>= i10;
                    break;
                case 7:
                case 8:
                    d2 = -8L;
                    break;
                case 9:
                    Test.iArrFld[(int)(d3 - 1)] = (int)Test.fFld;
                    break;
                case 10:
                    i10 = i10;
                case 11:
                    Test.iArrFld[(int)(d3)] = (int)Test.fFld;
                    break;
                default:
                    i21 += (int)(d3 * by1);
                }
            }
        }
        long meth_res = i10 + l + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i12 + (b2 ? 1 : 0) + i20
            + i21 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=2.128182;
        byte by=78;
        boolean b=true;
        int i9=46667, i22=10693, i23=213, i24=8, i25=-24942, iArr[]=new int[N], iArr2[][]=new int[N][N];

        FuzzerUtils.init(iArr, -176);
        FuzzerUtils.init(iArr2, 4239);

        for (int i : iArr) {
            switch ((((i + -7) >>> 1) % 5) + 49) {
            case 49:
                i >>= i;
                break;
            case 50:
                vMeth((int)(((Test.instanceCount++) * (d1 * -37962)) - -45030), (int)(((++Test.instanceCount) + (-200 /
                    (by | 1))) - ((Test.iFld - i) + (iArr[(i >>> 1) % N] >>= (int)Test.instanceCount))));
                break;
            case 51:
                try {
                    iArr[(Test.iFld >>> 1) % N] = (Test.iFld % Test.iFld);
                    Test.iFld = (iArr[(i >>> 1) % N] / -230);
                    Test.iFld = (52 / i);
                } catch (ArithmeticException a_e) {}
                b = (Math.max(Test.iFld, (int)(0.18336 + (Test.iFld + i))) <= (--iArr[(i >>> 1) % N]));
                break;
            case 52:
                Test.instanceCount <<= (by >> (++i));
                i9 = 1;
                while (++i9 < 63) {
                    b = (iMeth(i, Test.instanceCount, 1.95572) >= -81);
                    Test.instanceCount = i9;
                    Test.iFld += (int)Test.fFld;
                    Test.iFld = (int)-12.929F;
                }
                Test.iArrFld[(29906 >>> 1) % N] = i9;
            case 53:
                switch ((((Test.iFld >>> 1) % 4) * 5) + 9) {
                case 19:
                    i &= i9;
                    break;
                case 16:
                    Test.iArrFld[(Test.iFld >>> 1) % N] >>= i;
                    for (i22 = 1; 63 > i22; ++i22) {
                        d1 += 9;
                    }
                    iArr2 = FuzzerUtils.int2array(N, (int)-61928);
                    break;
                case 28:
                    i23 *= (int)-7584309721697903135L;
                    Test.instanceCount >>>= -134;
                    Test.instanceCount /= (i | 1);
                    Test.instanceCount += -218;
                    break;
                case 27:
                    switch ((((i9 >>> 1) % 2) * 5) + 113) {
                    case 116:
                        if (b) break;
                        if (b) break;
                        Test.lArrFld[(i23 >>> 1) % N] -= i9;
                        for (i24 = 2; i24 < 63; i24++) {
                            Test.instanceCount &= i;
                            if (b) continue;
                        }
                    case 122:
                        Test.fArrFld[(i >>> 1) % N] = i22;
                        break;
                    default:
                        Test.instanceCount *= (long)1.934F;
                    }
                    break;
                default:
                    i23 >>= (int)Test.instanceCount;
                }
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
