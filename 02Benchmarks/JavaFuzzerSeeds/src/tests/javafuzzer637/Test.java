package tests.javafuzzer637;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:09:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=247L;
    public static volatile float fFld=-2.492F;
    public static int iFld=-10;
    public short sFld=2975;
    public boolean bFld=false;
    public static volatile short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)28321);
        FuzzerUtils.init(Test.dArrFld, 2.75328);
    }

    public static long dMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        boolean b=false;
        int i4=18955, i5=-126, i6=-1542, i7=8, i8=41313, i9=225, iArr[]=new int[N];
        short s=853;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 15);
        FuzzerUtils.init(dArr, 0.127718);

        iArr = iArr;
        iArr[(Test.iFld >>> 1) % N] = Test.iFld;
        if (b) {
            iArr[(Test.iFld >>> 1) % N] -= (int)Test.instanceCount;
            Test.instanceCount += Test.iFld;
        } else {
            for (i4 = 5; i4 < 130; i4++) {
                byte by1=28;
                Test.iFld >>>= by1;
                Test.iFld <<= i5;
                dArr[i4 + 1] += s;
                for (i6 = 1; i6 < 13; i6++) {
                    Test.iFld = s;
                    for (i8 = 1; i8 < 2; ++i8) {
                        i7 = (int)Test.instanceCount;
                        if (i9 != 0) {
                            vMeth_check_sum += (b ? 1 : 0) + i4 + i5 + s + i6 + i7 + i8 + i9 +
                                FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        i5 = (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i4 + i5 + s + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static double dMeth1(int i2, int i3) {

        int i10=74, i11=-16, iArr1[]=new int[N];
        short s1=-2235;

        FuzzerUtils.init(iArr1, -68);

        vMeth();
        iArr1[(i3 >>> 1) % N] <<= 2;
        iArr1[(-68 >>> 1) % N] = (int)Test.fFld;
        iArr1[(-6 >>> 1) % N] = Test.iFld;
        for (i10 = 4; 154 > i10; ++i10) {
            Test.iFld >>>= Test.iFld;
            i11 += (int)Test.instanceCount;
            Test.instanceCount -= i3;
            Test.iFld ^= s1;
            if (true) {
                i11 = i2;
                i11 *= (int)Test.fFld;
            } else {
                i3 <<= i3;
                i3 = -30170;
                try {
                    Test.iFld = (-12611326 / i3);
                    iArr1[i10 - 1] = (i11 % i10);
                    i3 = (iArr1[i10 + 1] / iArr1[i10 + 1]);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i2 + i3 + i10 + i11 + s1 + FuzzerUtils.checkSum(iArr1);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static double dMeth(int i1, byte by) {

        int i12=-9, i13=93, i14=-28055, i15=10, i16=-48392, i17=48019, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 8);

        i1 = (int)dMeth1(Test.iFld, -34315);
        for (i12 = 192; i12 > 8; i12--) {
            Test.iFld -= (int)Test.fFld;
            iArr2[i12 + 1] >>>= (int)Test.instanceCount;
            Test.iFld >>>= 13101;
            Test.iFld += i12;
            for (i14 = 1; i14 < 9; ++i14) {
                for (i16 = 2; i16 > 1; i16 -= 2) {
                    i15 <<= 7171;
                    iArr2[i16] -= Test.iFld;
                    Test.dArrFld[i14] %= (i15 | 1);
                    Test.fFld = i14;
                }
                Test.instanceCount = i17;
                iArr2[i14] = (int)Test.instanceCount;
                i13 = i12;
            }
        }
        long meth_res = i1 + by + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=176, i18=-18434, i19=-49982, i20=-20, i21=22229, i22=-2, i23=115, i24=237, i25=81, i26=2, i27=-87, i28=2,
            i29=170, i30=-16938, i31=0, iArr3[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr3, -22294);
        FuzzerUtils.init(lArr, 171L);

        i = (++Test.sArrFld[(193 >>> 1) % N]);
        Test.fFld *= (float)dMeth(i, (byte)(-18));
        for (i18 = 11; i18 < 394; ++i18) {
            for (i20 = 2; i20 < 66; i20 += 2) {
                Test.iFld += (((i20 * Test.instanceCount) + i18) - Test.fFld);
                i19 += (-68 + (i20 * i20));
                i21 = (int)9L;
                Test.iFld += (i20 | sFld);
            }
            i19 += i18;
            i = (int)Test.instanceCount;
            for (i22 = 4; i22 < 66; ++i22) {
                iArr3[i22][i18 + 1] <<= i22;
                Test.fFld += i22;
                i21 += (int)(12.360F + (i22 * i22));
                for (i24 = 1; i24 < 2; ++i24) {
                    try {
                        i19 = (i23 / -136);
                        Test.iFld = (Test.iFld / i19);
                        i19 = (i23 / 248);
                    } catch (ArithmeticException a_e) {}
                    i23 += (int)(50642L + (i24 * i24));
                }
            }
            i19 += Test.iFld;
        }
        iArr3[(i20 >>> 1) % N][(Test.iFld >>> 1) % N] = i21;
        i = sFld;
        for (i26 = 365; 7 < i26; i26--) {
            if (bFld) {
                Test.iFld = 143;
                for (i28 = 1; 70 > i28; ++i28) {
                    Test.iFld = (int)74L;
                    for (i30 = i26; i30 < 2; i30++) {
                        if (bFld) {
                            Test.fFld -= -178L;
                            lArr[i28 + 1] -= Test.instanceCount;
                            Test.fFld += (((i30 * i29) + i19) - i);
                        } else {
                            i29 *= i26;
                        }
                    }
                }
            } else {
                Test.fFld += sFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth1 dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
