package tests.javafuzzer962;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:13:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=87L;
    public static float fFld=2.97F;
    public static byte byFld=-34;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11393);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6) {

        int i7=-12, i8=-245, i9=-167, i10=-182, i11=-169, i12=19, iArr[][]=new int[N][N];
        float f1=-45.71F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8L);
        FuzzerUtils.init(iArr, 58);

        lArr[(i6 >>> 1) % N] = i6;
        for (i7 = 12; i7 < 298; ++i7) {
            f1 += f1;
            if (i6 != 0) {
            }
            for (i9 = i7; 6 > i9; ++i9) {
                for (i11 = 1; i11 < 1; ++i11) {
                    short s2=21532;
                    b = b;
                    Test.instanceCount <<= i7;
                    i6 <<= i11;
                    i12 -= i10;
                    switch ((((i7 >>> 1) % 8) * 5) + 41) {
                    case 57:
                        if (i10 != 0) {
                        }
                        break;
                    case 65:
                        i10 ^= s2;
                        i10 -= i6;
                        i10 >>= 245;
                    case 69:
                        iArr[i11 + 1][i7 + 1] = (int)-114L;
                        break;
                    case 80:
                        i6 += i11;
                        break;
                    case 75:
                        b = false;
                        break;
                    case 45:
                        i12 -= i12;
                    case 66:
                        i6 = (int)f1;
                        break;
                    case 48:
                        b = b;
                        break;
                    default:
                        Test.instanceCount /= (i6 | 1);
                    }
                }
            }
        }
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        int i4=-64709, i5=-238, i13=-3580, i14=-117;
        short s3=24416;
        float f2=52.125F;
        byte by=-109;

        i4 = 1;
        do {
            i5 = 5;
            do {
                i3 = (int)((iMeth1(218) - 199L) + s3);
                i3 <<= -64;
                i2 += i5;
                i13 = 1;
                do {
                    i3 += (i13 - f2);
                } while (++i13 < 1);
                Test.instanceCount = -24947;
                i3 = (int)Test.instanceCount;
                switch (((i13 >>> 1) % 4) + 87) {
                case 87:
                    i14 = 1;
                    while (++i14 < 1) {
                        Test.iArrFld[i5] -= -30;
                        f2 -= f2;
                        i3 += (int)Test.fFld;
                    }
                    Test.instanceCount = i4;
                    break;
                case 88:
                    i3 -= by;
                    break;
                case 89:
                case 90:
                    Test.iArrFld[i5 + 1] *= i3;
                    break;
                default:
                    i3 >>= -142;
                }
            } while (--i5 > 0);
        } while (++i4 < 355);
        long meth_res = i2 + i3 + i4 + i5 + s3 + i13 + Float.floatToIntBits(f2) + i14 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i1, short s1) {

        float f=2.320F;
        int i15=90, i16=-29413, i17=4, i18=9, i19=17165, i20=-2;
        long l=26595L, lArr1[]=new long[N];
        double d1=1.42792, dArr[]=new double[N];
        boolean b2=false;

        FuzzerUtils.init(lArr1, -14L);
        FuzzerUtils.init(dArr, -1.61077);

        i1 += (int)f;
        if (b2) {
            i1 -= (int)(iMeth(i1, 29817) * f);
            for (i15 = 204; i15 > 6; i15 -= 3) {
                i16 -= (int)Test.instanceCount;
                for (i17 = 1; i17 < 23; i17++) {
                    boolean b1=true;
                    i18 -= (int)2.119202;
                    if (b1) break;
                    lArr1[i17] *= i15;
                    i1 = (int)l;
                    dArr[i15] = i17;
                    i16 = i17;
                    for (i19 = 1; i19 < 2; ++i19) {
                        try {
                            i20 = (i16 / -7691);
                            i1 = (-37130 / i18);
                            i20 = (i20 % -1517391280);
                        } catch (ArithmeticException a_e) {}
                        i16 += i18;
                    }
                }
            }
        } else if (b2) {
            i16 = (int)d1;
        }
        long meth_res = i1 + s1 + Float.floatToIntBits(f) + i15 + i16 + i17 + i18 + l + i19 + i20 +
            Double.doubleToLongBits(d1) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.5366, d2=-91.25674;
        int i=189, i21=47812, i22=-101, i23=26040, i24=-12, i25=12, i26=-10, i27=32964;
        short s=-27161;
        boolean b3=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -108.498F);

        d = ((Math.min(i, i) * (i - d)) - (Long.reverseBytes(Test.instanceCount) * (i - s)));
        sMeth(i, s);
        i |= 19767;
        fArr[(i >>> 1) % N] += i;
        Test.fFld = i;
        for (i21 = 4; 366 > i21; i21++) {
            b3 = b3;
            Test.instanceCount -= Test.instanceCount;
            fArr[i21] += Test.instanceCount;
            fArr[i21 - 1] += Test.fFld;
            for (d2 = 4; d2 < 70; ++d2) {
                i23 = i;
                for (i24 = 1; i24 < 2; i24 += 3) {
                    Test.instanceCount = i21;
                    i23 += (i24 * i24);
                    Test.instanceCount += (i24 * Test.byFld);
                    d *= 91;
                }
                i -= (int)d2;
                i -= i25;
                switch ((i21 % 2) + 49) {
                case 49:
                    b3 = b3;
                    for (i26 = 1; i26 < 2; i26++) {
                        fArr[(int)(d2)] = Test.fFld;
                    }
                    break;
                case 50:
                    Test.iArrFld[(int)(d2 - 1)] = (int)Test.fFld;
                    try {
                        i23 = (i26 % i21);
                        i22 = (i22 / i);
                        i25 = (i24 % -74);
                    } catch (ArithmeticException a_e) {}
                    switch (((i23 >>> 1) % 6) + 90) {
                    case 90:
                        i &= i23;
                        i22 += Test.byFld;
                        i22 += (int)d2;
                        i23 = i26;
                        break;
                    case 91:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 92:
                        Test.iArrFld[i21 - 1] <<= 24355;
                        break;
                    case 93:
                        i25 += (int)((long)d2 | i25);
                        break;
                    case 94:
                        i = i;
                    case 95:
                        i22 += (int)(d2 * i24);
                        break;
                    }
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
