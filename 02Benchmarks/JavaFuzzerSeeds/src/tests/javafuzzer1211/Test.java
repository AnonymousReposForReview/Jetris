package tests.javafuzzer1211;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:35:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static volatile int iFld=32;
    public static short sFld=-2845;
    public static boolean bFld=true;
    public static byte byFld=-45;
    public double dFld=0.49455;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -828050433562680094L);
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i3=-10795, i4=-42603, i5=9, i6=-29612, iArr1[]=new int[N];
        boolean b=true;
        float f4=18.450F;
        double d=0.5701;

        FuzzerUtils.init(iArr1, -31843);

        i3 = 1;
        while (++i3 < 224) {
            Test.iFld >>= Test.iFld;
            Test.sFld += (short)(i3 * i3);
            b = b;
            Test.instanceCount = i3;
        }
        for (i4 = 6; i4 < 264; ++i4) {
            switch ((((i5 >>> 1) % 3) * 5) + 39) {
            case 41:
                Test.iFld += (int)f4;
                for (d = 6; d > 1; d -= 3) {
                    i6 *= (int)f4;
                    i6 |= i3;
                    Test.iFld |= i5;
                    iArr1 = iArr1;
                    if (Test.iFld != 0) {
                    }
                    iArr1[i4 + 1] += (int)d;
                }
                break;
            case 49:
                Test.iFld += (i4 * i4);
            case 44:
                Test.instanceCount -= i4;
                break;
            }
        }
        long meth_res = i3 + (b ? 1 : 0) + i4 + i5 + Float.floatToIntBits(f4) + Double.doubleToLongBits(d) + i6 +
            FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(float f3) {

        int i7=6, i8=60572, i10=198, i11=50533, i12=127, i13=-248, iArr2[][]=new int[N][N], iArr3[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)104);
        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(iArr3, 15);

        Test.iFld = (int)dMeth();
        Test.iFld += Test.iFld;
        switch (((Test.iFld >>> 1) % 1) + 118) {
        case 118:
            byArr[(Test.iFld >>> 1) % N] = (byte)85.47344;
            iArr2[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] ^= Test.iFld;
            for (i7 = 4; i7 < 293; ++i7) {
                Test.iFld += (-1 + (i7 * i7));
                Test.iFld += (i7 - i8);
                i10 = 1;
                while (++i10 < 6) {
                    i8 += i10;
                    for (i11 = i7; 1 > i11; i11++) {
                        iArr2[i10 + 1][i11 + 1] *= (int)Test.instanceCount;
                        i8 -= i13;
                        f3 = i12;
                        Test.iFld += (int)Test.instanceCount;
                    }
                }
            }
            break;
        default:
            Test.lArrFld[(i11 >>> 1) % N] += (long)f3;
        }
        long meth_res = Float.floatToIntBits(f3) + i7 + i8 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        float f2=-2.331F, f5=45.237F, fArr[]=new float[N];
        int i2=126, i14=-99, i15=6, iArr[]=new int[N];
        byte by=-35;
        double d1=-62.22218;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 31848);
        FuzzerUtils.init(fArr, 95.988F);
        FuzzerUtils.init(sArr, (short)12949);

        Test.iFld = iArr[(Test.iFld >>> 1) % N];
        switch ((((Test.iFld += Test.iFld) >>> 1) % 7) + 3) {
        case 3:
            Test.sFld = (short)(Test.iFld - ((-61806 + f2) + (Test.iFld * Test.instanceCount)));
            break;
        case 4:
            Test.iFld += (int)((fArr[(Test.iFld >>> 1) % N]++) * (Test.iFld + Test.iFld));
            switch (((((int)(Test.instanceCount * 153)) >>> 1) % 1) + 89) {
            case 89:
                i2 = 1;
                do {
                    lMeth(f2);
                } while (++i2 < 212);
                if (Test.bFld) {
                    f5 = 1;
                    while (++f5 < 252) {
                        for (i14 = 1; i14 < 6; ++i14) {
                            Test.iFld += i14;
                        }
                        i15 >>= (int)Test.instanceCount;
                        Test.instanceCount += (long)(f5 * i14);
                        f2 *= i15;
                        Test.iFld *= (int)Test.instanceCount;
                    }
                } else if (Test.bFld) {
                    Test.iFld >>= (int)Test.instanceCount;
                } else if (Test.bFld) {
                    Test.iFld += (int)f2;
                } else {
                    iArr[(i15 >>> 1) % N] -= (int)0L;
                }
                break;
            }
            break;
        case 5:
            Test.lArrFld[(i14 >>> 1) % N] *= Test.iFld;
            break;
        case 6:
            by = (byte)i2;
            break;
        case 7:
            sArr = sArr;
            break;
        case 8:
            Test.sFld <<= Test.sFld;
            break;
        case 9:
            i15 = i2;
            break;
        default:
            d1 *= 55;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i2 + Float.floatToIntBits(f5) + i14 + i15 + by +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.747F;
        int i=9435, i1=134, i18=5, i19=-9;

        f = 1;
        while (++f < 137) {
            float f1=-59.947F;
            f1 = Test.instanceCount;
            i = 183;
            do {
                i1 = 1;
                while (++i1 < 3) {
                    vMeth();
                    Test.iFld -= -6;
                    Test.iFld = 13967;
                    Test.lArrFld[i] = Test.instanceCount;
                    Test.iArrFld[(int)(f)] = Test.iFld;
                    switch (((i1 >>> 1) % 4) + 51) {
                    case 51:
                        Test.instanceCount = i1;
                    case 52:
                        Test.instanceCount = -2505L;
                        break;
                    case 53:
                        Test.lArrFld[i] += (long)f1;
                        Test.byFld = (byte)i;
                        Test.instanceCount = Test.sFld;
                        break;
                    case 54:
                        Test.iFld += i1;
                        break;
                    }
                    Test.instanceCount += Test.iFld;
                    f1 *= f;
                    Test.instanceCount += (i1 * i);
                    Test.sFld -= (short)229;
                }
                for (i18 = 3; i18 > 1; i18--) {
                    if (Test.bFld) break;
                    Test.instanceCount *= i19;
                    f1 += i;
                    f1 += i18;
                    Test.iFld += (i18 | i1);
                }
                dFld *= -145;
                Test.instanceCount = Test.instanceCount;
                i19 += i;
                f1 = i;
            } while ((i -= 3) > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
