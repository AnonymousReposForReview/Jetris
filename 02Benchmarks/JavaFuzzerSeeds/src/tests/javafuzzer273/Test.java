package tests.javafuzzer273;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:08:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1912341834L;
    public static volatile float fFld=-1.853F;
    public static short sFld=28429;
    public static byte byFld=38;
    public static double dFld=0.54554;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-17650);
        FuzzerUtils.init(Test.lArrFld, -8544658886438745543L);
        FuzzerUtils.init(Test.iArrFld, 4726);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vSmallMeth() {

        float f=2.289F;
        long l=-235L;

        f *= l;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + l;
    }

    public static float fMeth() {

        int i7=-26655, i8=22618, i9=63061, i10=-159, i11=12, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -124);

        i7 -= (int)Test.instanceCount;
        Test.instanceCount = i7;
        i7 = i7;
        for (i8 = 12; i8 < 397; i8++) {
            short s=-3636;
            i9 += (i8 ^ (long)Test.fFld);
            s = (short)i8;
            i9 += (((i8 * Test.instanceCount) + Test.fFld) - i9);
        }
        i7 >>>= 35;
        for (i10 = 14; i10 < 307; i10++) {
            i9 -= (int)Test.instanceCount;
            iArr[i10] = i11;
            i7 += -14;
            if (b1) {
                b1 = b1;
            } else if (true) {
                Test.sFld += (short)i10;
            } else {
                i9 = 10;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(double d, int i6, long l1) {

        int i12=2, i13=-6, i14=7, i15=-14, i16=97, i17=-18288, i18=2, iArr1[]=new int[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -79);
        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(dArr, 0.126584);

        i6 *= (int)fMeth();
        i6 = Test.sFld;
        for (i12 = 205; i12 > 5; i12--) {
            try {
                i6 = (i6 / 1218835074);
                i13 = (-176 / i6);
                iArr1[i12 - 1] = (i6 % i13);
            } catch (ArithmeticException a_e) {}
            l1 += (i12 | i14);
            d -= i13;
            for (i15 = 8; 1 < i15; i15--) {
                Test.instanceCount += (i15 + Test.fFld);
                switch ((i12 % 5) + 29) {
                case 29:
                    for (i17 = 1; 2 > i17; ++i17) {
                        i14 += i6;
                    }
                    d = i18;
                    i16 = i12;
                case 30:
                    Test.fFld += (i15 * i15);
                    if (i18 != 0) {
                    }
                    break;
                case 31:
                    lArr = lArr;
                    break;
                case 32:
                    Test.sArrFld[i15 + 1] = (short)i16;
                case 33:
                    dArr[i12] = Test.sFld;
                default:
                    Test.fFld *= Test.instanceCount;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i6 + l1 + i12 + i13 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=-178, i4=12324, i5=-75, i19=-18960, i20=-15970, iArr2[]=new int[N];
        byte by=7;
        double d1=1.23965;

        FuzzerUtils.init(iArr2, -44842);

        for (i3 = 12; i3 < 204; i3++) {
            boolean b=true;
            i2 += (i3 | i2);
            vSmallMeth();
            switch ((i3 % 8) + 84) {
            case 84:
                vSmallMeth();
                Test.fFld *= (--i4);
                i4 = (int)((-(i2 << by)) >> (long)(by -= (byte)(Test.fFld % (i4 | 1))));
                break;
            case 85:
            case 86:
                b = (((i3 + i4) + i5) > lMeth(d1, i5, Test.instanceCount));
                i2 *= i4;
                i2 = i3;
                break;
            case 87:
                for (i19 = 8; i19 > 1; i19 -= 3) {
                    i4 = i4;
                    Test.instanceCount -= (long)-38.365F;
                    Test.fFld += 1425810833049652951L;
                    Test.lArrFld = Test.lArrFld;
                }
                break;
            case 88:
                i4 += i19;
                break;
            case 89:
                iArr2[i3] = i5;
                break;
            case 90:
                i20 *= (int)Test.fFld;
                break;
            case 91:
                Test.instanceCount -= by;
                break;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + by + i5 + Double.doubleToLongBits(d1) + i19 + i20 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-29698, i1=233, i21=-27430, i22=247, i23=5, i24=3, i25=-2;
        float f1=0.182F;
        boolean b2=true;

        for (i = 278; i > 9; i--) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
        }
        vMeth(i);
        for (i21 = 4; i21 < 217; ++i21) {
            Test.instanceCount ^= i22;
            try {
                Test.iArrFld[i21 + 1] = (i21 / -293);
                i22 = (Test.iArrFld[i21] / i);
                Test.iArrFld[i21] = (i1 / -62);
            } catch (ArithmeticException a_e) {}
            i23 = 1;
            do {
                Test.iArrFld[i23 + 1] %= (int)(Test.sFld | 1);
                i22 += i21;
                i22 = Test.byFld;
                i1 *= (int)Test.dFld;
                switch (((30162 >>> 1) % 1) + 113) {
                case 113:
                    i1 = (int)Test.instanceCount;
                    i24 = 1;
                    while (++i24 < 1) {
                        i22 = (int)Test.instanceCount;
                        Test.iArrFld[i24] >>= i23;
                        i22 -= (int)Test.fFld;
                        Test.iArrFld[i24 + 1] += i24;
                        i1 = i23;
                        i22 += -5;
                        switch (((i23 % 7) * 5) + 118) {
                        case 149:
                            f1 = i23;
                            Test.fFld += 40.620F;
                            Test.instanceCount &= Test.instanceCount;
                            i22 -= (int)1469059860L;
                            break;
                        case 141:
                            if (b2) break;
                            i1 -= -41;
                            break;
                        case 123:
                            i22 += (i24 * i22);
                            i22 += (((i24 * i24) + i22) - Test.instanceCount);
                            i25 = i25;
                            break;
                        case 129:
                            Test.dFld = i21;
                        case 128:
                        case 136:
                            Test.lArrFld[i23] += -86L;
                            break;
                        case 120:
                            Test.instanceCount = i21;
                            break;
                        default:
                            Test.instanceCount += 244;
                        }
                    }
                    break;
                default:
                    i1 = -7;
                }
            } while (++i23 < 118);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
