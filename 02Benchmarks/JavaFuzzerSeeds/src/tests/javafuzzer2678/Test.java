package tests.javafuzzer2678;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:36:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=253L;
    public static int iFld=-8;
    public static byte byFld=-70;
    public static double dFld=2.33173;
    public int iArrFld[]=new int[N];
    public volatile float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i2) {

        int i3=52167, i4=-9326, i5=14, i6=-51836, i7=0, i8=-30608, iArr[]=new int[N];
        float f1=0.62F;
        boolean b2=false;

        FuzzerUtils.init(iArr, 236);

        i3 = 1;
        while (++i3 < 209) {
            i2 -= -13;
            Test.iFld >>= -14;
            for (i4 = i3; i4 < 8; i4 += 3) {
                i2 = -9;
                i2 -= i2;
                i6 = 1;
                while (++i6 < 1) {
                    Test.dFld %= 79.733F;
                    Test.iFld = (int)Test.instanceCount;
                    iArr[i3 - 1] += (int)1.308F;
                }
                if (b2) {
                    for (i7 = 1; i7 > 1; i7 -= 2) {
                        boolean b1=true;
                        b1 = b1;
                        i2 += (int)f1;
                        f1 -= i8;
                    }
                } else {
                    f1 += i4;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i1) {

        float f=37.616F;
        int i9=-4, i10=-5, i11=-142, i12=224, iArr1[]=new int[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.19402);
        FuzzerUtils.init(iArr1, -8);

        Test.byFld <<= (byte)((--dArr1[(Test.iFld >>> 1) % N]) - (--Test.instanceCount));
        Test.dFld *= (Math.abs((int)(-(f -= i1))) + (Math.min(14, 6) % ((long)(fMeth(Test.iFld)) | 1)));
        iArr1[(Test.iFld >>> 1) % N] -= i1;
        Test.instanceCount *= (long)-2.120423;
        for (i9 = 5; i9 < 177; ++i9) {
            boolean b3=true;
            i1 >>= i9;
            i1 -= -129;
            f = i1;
            f += ((long)i9 ^ (long)i10);
            f = Test.iFld;
            if (b3) break;
            Test.instanceCount += i9;
            for (i11 = 1; i11 < 9; i11++) {
                dArr1[i11 - 1] *= -2.975F;
                i10 >>= -56353;
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(boolean b) {

        int i13=-5, i14=0, i15=2, i16=17710, i17=-182, iArr2[]=new int[N];
        float f2=2.549F, fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(fArr, 53.900F);

        vMeth(Test.iFld);
        Test.iFld = Test.iFld;
        for (i13 = 17; 394 > i13; ++i13) {
            if (b) break;
            for (i15 = 1; i15 < 4; i15++) {
                i17 = 1;
                do {
                    i16 = (int)f2;
                    i14 = i16;
                    try {
                        Test.iFld = (Test.iFld / 1973190953);
                        i16 = (iArr2[i13] / i15);
                        Test.iFld = (i15 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    switch (((i14 >>> 1) % 6) + 113) {
                    case 113:
                        f2 *= i15;
                        i14 = i16;
                        break;
                    case 114:
                        Test.instanceCount = i13;
                        Test.instanceCount += Test.instanceCount;
                        fArr[i13 - 1] -= Test.instanceCount;
                    case 115:
                        Test.instanceCount = -12;
                        break;
                    case 116:
                        i16 = -12;
                    case 117:
                        i14 += (i17 * Test.instanceCount);
                    case 118:
                        i14 += (i17 ^ i17);
                        break;
                    default:
                        i14 += (((i17 * i13) + i16) - f2);
                    }
                } while (++i17 < 2);
            }
        }
        long meth_res = (b ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b4=false;
        int i18=-7, i19=37993, i20=-39323, i21=-10, i22=205, i23=10, i24=14, i25=-6;
        float f3=-1.164F, f4=-88.153F;
        short s=-10620;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.124356);

        dArr[(Test.iFld >>> 1) % N] = ((Test.instanceCount++) + -12);
        for (int i : iArrFld) {
            i = (Test.iFld + (iMeth(b4) - 0));
            for (i18 = 1; i18 < 63; ++i18) {
                for (i20 = 2; 1 < i20; --i20) {
                    if (b4) {
                        Test.iFld *= (int)Test.instanceCount;
                        i21 = i21;
                    }
                }
                Test.iFld <<= Test.iFld;
                i19 *= (int)f3;
                for (i22 = 2; 1 < i22; i22 -= 2) {
                    s += (short)(((i22 * i21) + Test.instanceCount) - f3);
                    i19 += i19;
                    if (b4) continue;
                    i += i22;
                    iArrFld[i22 + 1] <<= Test.byFld;
                    dArr[i18 - 1] = s;
                }
            }
            f4 = 1;
            do {
                Test.instanceCount += Test.instanceCount;
                f3 += f4;
                i19 += (int)f4;
                Test.iFld += (int)f4;
                i19 &= i19;
                fArrFld[(int)(f4)] -= -228;
                i -= (int)68.594F;
                for (i24 = 1; i24 < 1; ++i24) {
                    switch (((29005 >>> 1) % 1) + 87) {
                    case 87:
                        lArrFld = lArrFld;
                        s = (short)i21;
                        b4 = false;
                        break;
                    default:
                        i19 = Test.iFld;
                    }
                }
            } while (++f4 < 63);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
