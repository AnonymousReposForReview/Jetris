package tests.javafuzzer331;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:00:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static boolean bFld=true;
    public static volatile byte byFld=1;
    public static short sFld=20522;
    public static int iFld=-43680;

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i3) {

        float f2=-85.25F, f3=-2.139F;
        long l1=-232L;
        int i4=-1, i5=-44517, i6=8, iArr[][]=new int[N][N];
        double d=43.83186;
        byte by=-102;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -10);

        f2 = 1;
        while (++f2 < 175) {
            i3 += (int)(f2 * i3);
            bArr[(int)(f2 - 1)] = false;
            i3 += (int)(f2 * Test.instanceCount);
            for (l1 = 1; l1 < 9; l1++) {
                f3 = (float)d;
                for (i5 = 1; i5 < 2; i5++) {
                    i3 -= i6;
                    i4 = (int)l;
                    iArr[i5 + 1][(int)(l1 - 1)] = by;
                    i4 += (int)f2;
                }
                i3 = i4;
                Test.bFld = false;
                l += (60452 + (l1 * l1));
                i3 = 40309;
            }
        }
        long meth_res = l + i3 + Float.floatToIntBits(f2) + l1 + i4 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(d) + i5 + i6 + by + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i2) {

        float f1=-85.875F, fArr[]=new float[N];
        int i7=-2, i8=214, i9=11227, iArr1[]=new int[N];
        short s1=-17208;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 2.726F);
        FuzzerUtils.init(iArr1, -174);
        FuzzerUtils.init(lArr, -13L);

        i2 = (--i2);
        i2 = (int)(i2 = (int)(fArr[(i2 >>> 1) % N]--));
        i2 = Math.abs(i2--);
        f1 += iMeth(Test.instanceCount, i2);
        i7 = 1;
        do {
            Test.instanceCount -= 30865;
            for (i8 = 7; i8 > i7; i8--) {
                i9 *= (int)Test.instanceCount;
                iArr1[i7] = s1;
                i9 += (int)Test.instanceCount;
                i9 += (((i8 * i7) + Test.instanceCount) - i9);
                lArr = lArr;
                Test.instanceCount += (i8 + i7);
                iArr1[i7 - 1] = Test.byFld;
                if (Test.bFld) continue;
            }
        } while (++i7 < 224);
        long meth_res = i2 + Float.floatToIntBits(f1) + i7 + i8 + i9 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i1, float f, short s) {

        int i10=-2, i11=-12, i12=-1, i13=29782, i14=169, i15=-1, i16=43586;

        s = (short)(((-(++i1)) + (++f)) / (((i1 - -98) % (sMeth(i1) | 1)) | 1));
        for (i10 = 11; i10 < 252; i10++) {
            Test.instanceCount += (long)f;
            i1 >>= i10;
        }
        i12 = 342;
        while (--i12 > 0) {
            for (i13 = 5; i13 > 1; i13 -= 3) {
                for (i15 = 1; i15 < 5; ++i15) {
                    int i17=7746;
                    i1 -= i12;
                    i1 += (((i15 * i10) + Test.instanceCount) - i10);
                    Test.instanceCount += i15;
                    i11 += (((i15 * i1) + Test.instanceCount) - i17);
                    i17 *= i14;
                    Test.instanceCount = i17;
                    f += i17;
                    Test.instanceCount *= s;
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + s + i10 + i11 + i12 + i13 + i14 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=-183, i18=-176, i19=-15366, i21=-11, iArr2[]=new int[N];
        float f4=-51.982F, f5=-1.451F, fArr1[][]=new float[N][N];
        double d1=41.122157, dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -5);
        FuzzerUtils.init(lArr1, 2632279069L);
        FuzzerUtils.init(fArr1, 0.258F);
        FuzzerUtils.init(dArr, 0.127496);

        i = 1;
        while (++i < 300) {
            vMeth(i, f4, Test.sFld);
            Test.instanceCount = i;
            Test.instanceCount >>= 51609;
            f4 *= i;
            Test.iFld >>= (int)Test.instanceCount;
        }
        iArr2[(-137 >>> 1) % N] = 39514;
        for (long l2 : lArr1) {
            for (i18 = 1; i18 < 63; ++i18) {
                Test.iFld = (int)1.53897;
            }
        }
        Test.iFld += (int)d1;
        f5 = 1;
        while (++f5 < 136) {
            fArr1[(int)(f5)][(int)(f5 + 1)] = 5;
            if (Test.bFld) {
                iArr2[(int)(f5 + 1)] %= (int)(Test.instanceCount | 1);
            } else {
                Test.iFld += (int)f5;
                i19 += (int)(f5 * f5);
                i19 *= i;
            }
            i19 -= i;
            i19 = i18;
            i19 += (int)(((f5 * Test.instanceCount) + Test.iFld) - Test.byFld);
            Test.iFld += (int)f5;
            if (Test.bFld) {
                i21 = 184;
                do {
                    Test.byFld = (byte)Test.iFld;
                    Test.iFld += (int)Test.instanceCount;
                    switch (((i21 % 1) * 5) + 97) {
                    case 102:
                        Test.instanceCount += i21;
                        iArr2[(i21 >>> 1) % N] += Test.iFld;
                        break;
                    }
                    dArr[(int)(f5 + 1)] = -44290;
                } while (--i21 > 0);
            } else if (Test.bFld) {
                Test.iFld += (int)f5;
            } else {
                fArr1[(int)(f5)][(int)(f5)] = Test.iFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
