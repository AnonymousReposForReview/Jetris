package tests.javafuzzer720;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:34:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=15683L;
    public static short sFld=-31100;
    public float fFld=112.860F;
    public volatile int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=12, i5=-156, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 48764);

        for (i4 = 196; 12 < i4; i4 -= 3) {
            iArr1[i4] += (int)Test.instanceCount;
        }
        vMeth1_check_sum += i4 + i5 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2, float f, int i3) {

        int i6=0, i7=-143, i8=149, i9=8, i10=179, iArr[]=new int[N];
        double d=-1.37333;

        FuzzerUtils.init(iArr, -136);

        iArr = (iArr = (iArr = (iArr = iArr)));
        switch ((((i3 >>> 1) % 3) * 5) + 69) {
        case 70:
            vMeth1();
            i6 = 1;
            do {
                f += Test.instanceCount;
                for (i7 = 1; i7 < 13; i7++) {
                    Test.instanceCount += (-4 + (i7 * i7));
                    Test.instanceCount -= (long)d;
                    i8 = (int)f;
                    d -= f;
                    for (i9 = 1; 2 > i9; i9 += 3) {
                        switch (((i3 >>> 1) % 2) + 127) {
                        case 127:
                        case 128:
                            i2 += (-33456 + (i9 * i9));
                            break;
                        }
                        i8 = Test.sFld;
                        try {
                            i3 = (i2 / -19951);
                            i2 = (-204 % i2);
                            i10 = (i2 / 90);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            } while (++i6 < 122);
        case 81:
        case 78:
            Test.instanceCount = Test.sFld;
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i1) {

        float f1=-88.775F;
        int i11=-62978, i12=6, i13=-100, i14=41098, i15=10;
        byte by=-92;

        iArrFld[(i1 >>> 1) % N] += (int)(i1 + (iMeth(i1, f1, i1) + f1));
        i1 <<= i1;
        for (i11 = 384; 16 < i11; i11--) {
            i13 = 1;
            do {
                if (i12 != 0) {
                    vMeth_check_sum += i1 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + by;
                    return;
                }
            } while (++i13 < 5);
            for (i14 = 1; i14 < 5; i14++) {
                iArrFld[i14] = by;
                i15 = i11;
            }
        }
        iArrFld = iArrFld;
        vMeth_check_sum += i1 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i16=-30199, i17=-54, i18=9288, i19=-12, i20=-8920, i21=-184, i22=2;
        boolean b=false;
        double d1=-25.122028;
        byte by1=6;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2194745691L);

        Test.instanceCount += (++i);
        vMeth(i);
        i -= (int)Test.instanceCount;
        for (i16 = 5; i16 < 207; ++i16) {
            i17 >>>= i;
            i17 = i17;
            switch (((i16 % 10) * 5) + 45) {
            case 69:
                lArr[i16 - 1] |= 31012L;
                iArrFld[i16 + 1] = i17;
                i17 = i;
                Test.sFld >>= (short)i17;
            case 91:
                i18 = 1;
                do {
                    i17 %= (int)(Test.instanceCount | 1);
                    for (i19 = i16; 1 > i19; i19++) {
                        b = b;
                        i = -190;
                        i17 = i19;
                        i20 = (int)0L;
                        iArrFld[i18] >>= (int)Test.instanceCount;
                        fFld += (-4 + (i19 * i19));
                        i20 -= i20;
                        i17 %= 62274;
                        iArrFld[i16] -= (int)-57772L;
                    }
                    for (i21 = i18; i21 < 1; i21++) {
                        i17 *= i20;
                        fFld *= (float)d1;
                        try {
                            iArrFld[i21 - 1] = (i22 % iArrFld[i18 + 1]);
                            i = (-59659 % i17);
                            i = (i16 / 117);
                        } catch (ArithmeticException a_e) {}
                        b = b;
                        Test.instanceCount >>= Test.instanceCount;
                        i22 /= -66;
                    }
                } while (++i18 < 124);
            case 89:
                Test.instanceCount >>= 8;
                break;
            case 59:
                iArrFld[i16] += 85;
                break;
            case 51:
            case 46:
                i |= (int)Test.instanceCount;
                break;
            case 72:
                i -= 14;
                break;
            case 63:
                Test.instanceCount += (-2871 + (i16 * i16));
                break;
            case 56:
                i22 = i;
                break;
            case 54:
                by1 = (byte)i20;
                break;
            default:
                i22 -= i19;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
