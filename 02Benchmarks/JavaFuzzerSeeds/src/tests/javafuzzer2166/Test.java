package tests.javafuzzer2166;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:43:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public int iFld=0;
    public int iFld1=7;
    public static int iFld2=113;
    public static boolean bFld=true;
    public static byte byFld=-63;
    public static int iFld3=41667;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i1, int i2, int i3) {


        Test.iArrFld[(i1 >>> 1) % N] = i3;
        Test.iArrFld[(i2 >>> 1) % N] = (int)Test.instanceCount;
        long meth_res = i1 + i2 + i3;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l) {

        int i4=54224, i5=-9529, i6=-82, i7=117, i8=-3915, i9=-15054;
        float f=66.321F;
        byte by1=-80;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -66.39545);

        l <<= iMeth1(Test.iFld2, Test.iFld2, Test.iFld2);
        Test.iFld2 = Test.iFld2;
        i4 = 163;
        while (--i4 > 0) {
            i5 = 1;
            while (++i5 < 10) {
                Test.iFld2 += (i5 - i4);
                f = i4;
                for (i6 = 1; i6 > 1; i6 -= 2) {
                    Test.iFld2 >>= by1;
                    i8 -= (int)f;
                }
                i8 += (int)Test.instanceCount;
                i9 = 1;
                do {
                    i7 += i9;
                    by1 -= (byte)f;
                    dArr[i9] += i5;
                    l *= -5;
                } while (++i9 < 1);
            }
        }
        long meth_res = l + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + by1 + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i=-17, i10=14, i11=-6;
        byte by=53;
        short s=27270;
        float f1=-1.71F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 58.661F);

        i <<= by;
        i *= (int)(((i + i) - (-109.26908 + (i - i))) + (s += (short)(i + i)));
        s -= (short)(Test.iArrFld[(-5 >>> 1) % N] - lMeth(9001641202361799022L));
        for (i10 = 230; 12 < i10; i10 -= 2) {
            if (Test.iFld2 != 0) {
            }
            if (Test.bFld) {
                if (Test.bFld) break;
                Test.iArrFld[i10] = (int)Test.instanceCount;
            } else {
                Test.iFld2 += (i10 ^ Test.instanceCount);
            }
            Test.iArrFld = Test.iArrFld;
            f1 *= Test.iFld2;
            fArr[i10 + 1] *= Test.iFld2;
            Test.instanceCount = i;
            s += (short)i10;
            i -= (int)f1;
        }
        long meth_res = i + by + s + i10 + i11 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=6, i13=0, i14=-245, i15=-6, i16=37, i17=68, i18=-4, i19=-8, i20=42258, iArr[]=new int[N];
        short s1=11786;
        double d=47.129354, dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 35825);
        FuzzerUtils.init(dArr1, -126.128391);
        FuzzerUtils.init(lArr, -105L);

        iFld = ((iArr[(iFld >>> 1) % N] <<= (++iFld1)) - iMeth());
        iFld1 -= -26208;
        switch (((-44151 >>> 1) % 8) + 41) {
        case 41:
            Test.byFld += (byte)iFld1;
            break;
        case 42:
            for (i12 = 15; 240 > i12; ++i12) {
                if (false) {
                    iArr[i12 - 1] -= Test.iFld2;
                    iFld1 += (i12 - Test.byFld);
                    for (i14 = i12; 112 > i14; i14++) {
                        float f2=-2.371F;
                        for (i16 = 1; i16 > 1; --i16) {
                            Test.iFld2 = (int)Test.instanceCount;
                            Test.instanceCount |= i15;
                            dArr1[i14] -= -38L;
                            switch (((i14 % 2) * 5) + 80) {
                            case 81:
                            case 82:
                                i17 += (27019 + (i16 * i16));
                                Test.instanceCount = Test.instanceCount;
                                break;
                            }
                            Test.instanceCount = i17;
                        }
                        lArr[i14] = i16;
                        Test.instanceCount = Test.instanceCount;
                        i15 -= 21951;
                        i18 -= Test.iFld3;
                        if (Test.bFld) continue;
                        i13 /= (int)(Test.instanceCount | 1);
                        Test.iArrFld[i12 - 1] -= (int)f2;
                        s1 += (short)(i14 + i15);
                        Test.instanceCount += (i14 - Test.instanceCount);
                    }
                }
                Test.instanceCount = -89;
            }
            for (i19 = 1; i19 < 203; i19++) {
                i15 += -105;
                d *= i15;
            }
            break;
        case 43:
            i17 <<= i17;
            break;
        case 44:
            iArr = Test.iArrFld;
            break;
        case 45:
            iArr = iArr;
        case 46:
        case 47:
            s1 = (short)Test.instanceCount;
            break;
        case 48:
            iArr[(Test.iFld3 >>> 1) % N] = iFld;
            break;
        default:
            Test.instanceCount -= (long)d;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
