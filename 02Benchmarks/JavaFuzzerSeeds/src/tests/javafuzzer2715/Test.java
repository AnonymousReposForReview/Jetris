package tests.javafuzzer2715;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:08:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public byte byFld=61;
    public int iFld=-201;
    public static int iFld1=-47;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 93.767F);
        FuzzerUtils.init(Test.lArrFld, -18L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        float f1=0.860F;
        int i5=9, i6=-13, i7=26979, i8=-17, i9=-5024, i10=6, i11=-9, i12=-230, i13=8, iArr[][]=new int[N][N];
        boolean b=true;
        short s=17261;

        FuzzerUtils.init(iArr, -31);

        i4 = (int)f1;
        Test.fArrFld = FuzzerUtils.float1array(N, (float)1.218F);
        for (i5 = 7; i5 < 179; i5++) {
            iArr[i5][i5 + 1] = i4;
            for (i7 = 1; i7 < 9; i7++) {
                iArr[i7 + 1][i5] -= i5;
                for (i9 = 1; i9 < 2; i9++) {
                    if (i5 != 0) {
                        vMeth2_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
                            i13 + (b ? 1 : 0) + s + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    f1 += (((i9 * Test.instanceCount) + Test.instanceCount) - i5);
                }
            }
            Test.instanceCount <<= i5;
            for (i11 = 1; i11 < 9; ++i11) {
                i13 = 1;
                while (++i13 < 2) {
                    if (b) continue;
                    Test.instanceCount = (long)1.519F;
                    i10 += s;
                }
            }
        }
        vMeth2_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 :
            0) + s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(double d) {

        int i2=61, i3=51030, i14=-13, i15=93, i16=-1, i17=6, iArr1[]=new int[N];
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(dArr, -119.8528);

        for (i2 = 4; i2 < 203; ++i2) {
            vMeth2(i2);
            i3 &= i3;
            for (i14 = i2; i14 < 8; i14++) {
                Test.instanceCount <<= i14;
                switch ((i14 % 1) + 34) {
                case 34:
                    i3 &= (int)Test.instanceCount;
                    break;
                default:
                    iArr1[i14] *= (int)1.95550;
                }
                dArr[i14] -= i3;
                for (i16 = 1; i16 < 1; i16++) {
                    i17 <<= -7;
                    b1 = b1;
                }
                try {
                    i15 = (23 % i17);
                    i3 = (1153244573 / i14);
                    i17 = (i2 % iArr1[i2 - 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = i2;
            }
            Test.instanceCount = -90;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i1) {


        vMeth1(1.115885);
        vMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        float f=0.842F;
        int i=9, i18=-5, i19=59510, i20=155, i21=-85, i22=-15880, i23=13510, i24=-1104, i25=-9, i26=157, i27=-36618,
            i28=151;
        byte by=42;
        double d1=81.36197;

        f += ((i++) + (Math.abs(f) + (i * 1)));
        i = (i / ((byFld = (byte)-11) | 1));
        i %= (int)(i | 1);
        vMeth(i);
        i18 = 1;
        do {
            Test.instanceCount += i18;
        } while (++i18 < 164);
        i19 = 1;
        while (++i19 < 236) {
            for (i20 = 1; i20 < 106; ++i20) {
                i21 = i19;
                Test.instanceCount >>>= -74;
                i21 -= 166;
            }
            switch ((i19 % 8) + 30) {
            case 30:
                i += (((i19 * i20) + Test.instanceCount) - i21);
                break;
            case 31:
                i21 -= i21;
                byFld += (byte)i19;
                break;
            case 32:
                i22 = i18;
                break;
            case 33:
                i21 += i19;
                break;
            case 34:
                iFld += (i19 * f);
            case 35:
                for (i23 = i19; i23 < 106; i23++) {
                    for (i25 = 1; i25 < 1; ++i25) {
                        Test.lArrFld[i25] <<= iFld;
                        Test.iFld1 -= (int)141L;
                        i = (int)f;
                        by = (byte)i24;
                    }
                    if (bFld) continue;
                    Test.instanceCount *= i21;
                    switch ((i19 % 4) + 55) {
                    case 55:
                        for (i27 = 1; i27 < 1; i27++) {
                            i24 = (int)Test.instanceCount;
                            Test.instanceCount += (6 + (i27 * i27));
                        }
                        break;
                    case 56:
                        i24 += (int)d1;
                    case 57:
                        d1 = i20;
                    case 58:
                        f = iFld;
                        break;
                    }
                }
                break;
            case 36:
                i21 += (((i19 * i21) + i25) - i24);
            case 37:
                if (bFld) continue;
                break;
            default:
                i24 += (((i19 * iFld) + i27) - i18);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
