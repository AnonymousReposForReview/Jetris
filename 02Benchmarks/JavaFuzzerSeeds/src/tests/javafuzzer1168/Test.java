package tests.javafuzzer1168;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static double dFld=27.23075;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 12637L);
        FuzzerUtils.init(Test.dArrFld, 2.63173);
        FuzzerUtils.init(Test.byArrFld, (byte)-123);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i4=-63;

        Test.dArrFld[(i4 >>> 1) % N] = i4;
        vMeth1_check_sum += l1 + i4;
    }

    public static void vMeth(int i2, int i3, boolean b) {

        short s=32170;
        int i5=47660, i6=235, i7=14, iArr[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)118);
        FuzzerUtils.init(iArr, 1);

        i3 += (int)((i3++) + (-19524 * Test.lArrFld[(i2 >>> 1) % N]));
        Test.instanceCount <<= (s++);
        vMeth1(Test.instanceCount);
        for (long l2 : Test.lArrFld) {
            byArr[(i3 >>> 1) % N] >>= (byte)141;
            if (true) {
                for (i5 = 1; i5 < 4; i5++) {
                    if (i5 != 0) {
                        vMeth_check_sum += i2 + i3 + (b ? 1 : 0) + s + i5 + i6 + i7 + FuzzerUtils.checkSum(byArr) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i6 >>= -33;
                    i3 += 36407;
                    iArr[i5 + 1] -= (int)Test.instanceCount;
                    i7 = (int)l2;
                    i6 &= 112;
                    i7 += -12757;
                }
                Test.dFld *= 101;
            } else if (b) {
                l2 *= -250;
            } else if (b) {
                l2 = 8;
            }
        }
        vMeth_check_sum += i2 + i3 + (b ? 1 : 0) + s + i5 + i6 + i7 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i1=1, i8=-61, i9=-154, i10=-1, i11=9818, i12=-52, i13=190, iArr1[]=new int[N];
        long l=-132L;
        boolean b1=true;
        float f=24.749F;
        short s1=18095;
        byte by=-27;

        FuzzerUtils.init(iArr1, 4731);

        Test.instanceCount -= Integer.reverseBytes((int)((i1 + i1) - (Test.dFld - Test.instanceCount)));
        i1 *= (int)(i1 += (int)((l * -5) - (l + i1)));
        vMeth(i1, i1, b1);
        for (f = 4; f < 229; ++f) {
            Test.dFld = i8;
            for (i9 = 1; i9 < 7; i9++) {
                if (b1) continue;
            }
            for (i11 = 7; i11 > 1; --i11) {
                i12 = -165;
                if (b1) {
                    i13 = 1;
                    while (++i13 < 2) {
                        i12 = s1;
                        i10 *= i11;
                        Test.dArrFld[i13 + 1] = i9;
                        l >>= i12;
                    }
                } else if (b1) {
                    iArr1[i11] = (int)Test.dFld;
                } else if (b1) {
                    i12 /= (int)(by | 1);
                }
            }
        }
        long meth_res = i1 + l + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + i13 + s1 + by +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=166, i15=-21552, i16=-115, i17=8, i18=-31924, i19=-50991, i20=59111, i21=16140;
        float f1=-77.1015F, f2=0.874F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-17697);

        for (int i : iArrFld) {
            sArr[(i >>> 1) % N] = (short)(lMeth() * i);
            i &= i;
            Test.instanceCount = 128;
        }
        for (i14 = 3; i14 < 123; i14++) {
            i15 = i14;
            Test.instanceCount += (long)-59.101F;
            f1 *= Test.instanceCount;
            i15 &= (int)8070194830325172963L;
            f1 = i14;
            if (Test.bFld) {
                for (i16 = 1; i16 < 209; ++i16) {
                    i18 = 1;
                    while (++i18 < 2) {
                        i15 += (19119 + (i18 * i18));
                        Test.instanceCount = i18;
                    }
                    for (f2 = 1; f2 < 2; f2++) {
                        Test.instanceCount &= i15;
                    }
                    f1 = 194;
                    iArrFld[i14 - 1] = i17;
                    for (i20 = 1; i20 < 2; ++i20) {
                        if (Test.bFld) break;
                        Test.dFld += Test.instanceCount;
                        i17 -= i21;
                        if (Test.bFld) continue;
                        i17 >>= 31724;
                        Test.byArrFld[i14] -= (byte)i15;
                    }
                    Test.instanceCount *= Test.instanceCount;
                    i15 = i17;
                    Test.instanceCount += 3;
                    try {
                        i17 = (-9851 / i20);
                        i21 = (i16 / 24258);
                        i21 = (i15 % -158);
                    } catch (ArithmeticException a_e) {}
                }
            } else if (Test.bFld) {
                Test.instanceCount += (i14 * i17);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
