package tests.javafuzzer775;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:31:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1L;
    public static int iFld=42749;
    public static boolean bFld=true;
    public double dFld=0.10232;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 12578L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth() {

        int i6=-24791, i7=11, i8=-16, i9=10, i10=-219, i11=2, i12=-45749, iArr[]=new int[N];
        float f2=1.362F;
        double d=0.11166;

        FuzzerUtils.init(iArr, 205);

        for (i6 = 8; i6 < 176; i6++) {
            i7 -= (int)Test.instanceCount;
            for (i8 = 1; i8 < 9; i8 += 2) {
                i10 = 1;
                do {
                    f2 = 26562;
                    i9 = i8;
                } while (++i10 < 3);
                iArr[i8] = i6;
                f2 = (float)d;
                i7 >>= 14;
                for (i11 = i8; i11 < 3; i11 += 2) {
                    i7 = (int)18479L;
                }
                i7 += (i8 * i8);
                i12 ^= (int)Test.instanceCount;
                iArr[i6 + 1] *= (int)Test.instanceCount;
                iArr[i8 - 1] >>= (int)Test.instanceCount;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(boolean b, float f1) {

        int i4=-181, i5=11, i14=148, i15=223, iArr1[]=new int[N];
        double d1=-115.52373;

        FuzzerUtils.init(iArr1, -225);

        for (i4 = 285; 10 < i4; --i4) {
            byMeth();
            iArr1[i4 - 1] = i4;
        }
        i5 = i5;
        i5 = i5;
        for (int i13 : iArr1) {
            Test.instanceCount += i5;
            f1 = Test.instanceCount;
            Test.lArrFld[(i13 >>> 1) % N] += Test.instanceCount;
            d1 -= i13;
            i13 += (int)d1;
            d1 %= ((long)(f1) | 1);
            for (i14 = 1; i14 < 4; ++i14) {
                Test.iFld %= 25;
                f1 += (-112 + (i14 * i14));
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f1) + i4 + i5 + Double.doubleToLongBits(d1) + i14 + i15
            + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(byte by, float f) {

        int i=6, i1=-79, i2=-18899, i3=-52651, i16=164, i17=-3, i18=6, i19=14142;
        short s=28886;

        for (i = 1; i < 301; ++i) {
            for (i2 = 6; i2 > 1; i2--) {
                vMeth1(Test.bFld, f);
                by = (byte)i3;
                Test.iFld += (((i2 * s) + Test.iFld) - i2);
                i1 += (i2 * i2);
                i3 += i2;
            }
            for (i16 = i; i16 < 6; ++i16) {
                i1 += i16;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount = 12;
                    Test.instanceCount *= Test.instanceCount;
                    Test.iFld = (int)Test.instanceCount;
                    if (Test.bFld) break;
                    Test.instanceCount -= Test.iFld;
                }
            }
        }
        vMeth_check_sum += by + Float.floatToIntBits(f) + i + i1 + i2 + i3 + s + i16 + i17 + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        float f3=-2.536F, f4=2.584F;
        int i20=7402, i21=-37333, i22=86, i23=0, i24=-5, i25=10, i26=-2, iArr2[]=new int[N];
        byte by1=-102;
        short s1=7185;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, 10);

        vMeth((byte)(-33), f3);
        for (f4 = 18; f4 < 297; f4++) {
            i21 = 1;
            while (++i21 < 90) {
                dFld = i21;
                switch ((int)((f4 % 2) + 50)) {
                case 50:
                    i22 = 1;
                    do {
                        Test.iFld >>= i20;
                        bArr[i21 + 1][i22 - 1] = Test.bFld;
                        Test.iFld -= (int)f4;
                        Test.iFld = (int)Test.instanceCount;
                    } while (++i22 < 1);
                    dFld -= f4;
                    for (i23 = (int)(f4); 1 > i23; i23++) {
                        switch (((i23 % 1) * 5) + 83) {
                        case 86:
                            f3 -= -62767;
                            i24 += (((i23 * f3) + f4) - i23);
                            switch ((int)((f4 % 1) + 64)) {
                            case 64:
                            }
                            break;
                        default:
                            iArr2[i23 + 1] *= by1;
                            if (Test.bFld) continue;
                        }
                        f3 -= s1;
                        Test.instanceCount = Test.instanceCount;
                        iArr2 = iArr2;
                        Test.instanceCount <<= 245;
                        i24 -= i23;
                        Test.instanceCount = i21;
                        f3 += Test.instanceCount;
                        if (Test.bFld) break;
                        i20 = i24;
                    }
                    break;
                case 51:
                    for (i25 = 1; i25 < 1; i25 += 2) {
                        Test.iFld *= 15241;
                    }
                    iArr2[(int)(f4 + 1)] &= 0;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
