package tests.javafuzzer1033;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:01:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-221082334L;
    public static float fFld=2.77F;
    public static volatile double dFld=0.74978;
    public int iFld=-2;
    public static long lFld=3818695497L;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 101.238F);
        FuzzerUtils.init(Test.lArrFld, -1264158870414081855L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i1) {

        boolean b=false;

        b = b;
        vSmallMeth_check_sum += l + i1 + (b ? 1 : 0);
    }

    public static double dMeth() {

        int i5=-4;

        Test.fArrFld[(1 >>> 1) % N] = (--i5);
        long meth_res = i5;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {

        int i8=-13, i9=251, i10=29704;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        i8 = 1;
        do {
            i9 = 1;
            do {
                if (b2 & b2) break;
                lArr = (lArr = (lArr = (lArr = lArr)));
                if (b2 && b2) break;
            } while (++i9 < 5);
            switch (((i8 % 1) * 5) + 98) {
            case 101:
                i10 += (i8 ^ i10);
                break;
            }
            Test.instanceCount += i8;
            switch (((i8 % 6) * 5) + 116) {
            case 138:
                i10 += (i8 * i8);
                vSmallMeth(Test.instanceCount, i9);
            case 134:
                Test.instanceCount -= Test.instanceCount;
                Test.dFld -= -50516;
            case 119:
            case 130:
                i10 += i8;
                b2 = b2;
                break;
            case 139:
                i10 += i8;
                break;
            case 143:
                Test.instanceCount += i8;
                break;
            default:
                Test.instanceCount = -6L;
            }
        } while (++i8 < 374);
        long meth_res = i8 + i9 + (b2 ? 1 : 0) + i10 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i2=-51438, i3=45068, i4=96, i6=245, i7=49655, iArr[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 219);

        for (i2 = 5; i2 < 265; ++i2) {
            i4 = 1;
            do {
                bArr[i2] = (131 >= i2);
                Test.instanceCount *= (long)(((Test.instanceCount + -14) + (Test.fFld + i3)) + Math.abs(i3--));
                iArr = (iArr = (iArr = (iArr = iArr)));
                dMeth();
                b1 = false;
                for (i6 = 1; i6 < 1; i6 += 2) {
                    i7 = (i3--);
                    vSmallMeth(Test.instanceCount, (Math.min(12, 28307) / ((95 + (i3 - -147)) | 1)) - iMeth());
                    Test.fFld += (i6 + Test.instanceCount);
                    i3 %= (int)(i2 | 1);
                    b1 = b1;
                    Test.fArrFld[i6] = i6;
                    i7 *= i2;
                }
            } while (++i4 < 6);
        }
        long meth_res = i2 + i3 + i4 + (b1 ? 1 : 0) + i6 + i7 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-58710, i11=-10, i12=-85, i13=7, i14=131, i15=-173, iArr1[]=new int[N];
        byte by1=14, byArr[]=new byte[N];
        boolean b3=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-36);
        FuzzerUtils.init(dArr, -11.84721);
        FuzzerUtils.init(iArr1, -74);

        i += (int)(((Test.instanceCount--) * (i - Test.fFld)) - i);
        for (int smallinvoc=0; smallinvoc<479; smallinvoc++) vSmallMeth(lMeth(), i);
        Test.instanceCount >>= 4382;
        for (byte by : byArr) {
            i = i;
            dArr[(i >>> 1) % N] += iFld;
            try {
                iFld = (iFld / i);
                i = (iArr1[(i >>> 1) % N] % 168);
                i = (iFld % i);
            } catch (ArithmeticException a_e) {}
            Test.lFld += iFld;
            Test.dFld -= i;
            iFld |= 10;
            i *= i;
        }
        for (i11 = 22; i11 < 379; i11++) {
            Test.instanceCount &= i12;
            iArr1[i11] = i12;
            i += (((i11 * Test.lFld) + i) - iFld);
            for (i13 = 3; i13 < 71; ++i13) {
                iArr1[i11 + 1] += 55391;
                switch ((i11 % 1) + 96) {
                case 96:
                    i15 = 1;
                    while (++i15 < 2) {
                        i12 += (i15 - Test.instanceCount);
                        Test.lFld >>>= iFld;
                        Test.instanceCount -= 232;
                        if (true) break;
                        if (false) {
                            Test.lArrFld[i13 - 1][i13] = (long)Test.dFld;
                            i12 = iFld;
                            by1 += (byte)(i15 ^ iFld);
                            Test.lArrFld[i13 - 1][i15] += Test.instanceCount;
                        } else if (b3) {
                            Test.dFld += 13746;
                            iArr1[i15 - 1] -= iFld;
                        } else if (true) {
                            Test.instanceCount += (21884 + (i15 * i15));
                        } else {
                            i = i11;
                        }
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth iMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
