package tests.javafuzzer646;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:25:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-254L;
    public static float fFld=-2.762F;
    public static int iFld=4;
    public volatile byte byFld=22;
    public int iFld1=-14;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3875029199L);
        FuzzerUtils.init(Test.iArrFld, 29350);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=46, i7=-98, i8=-85, i9=6, i10=-46454, i11=6;
        byte by1=-39;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)20803);

        Test.iFld += (int)5L;
        for (i6 = 9; i6 < 219; i6 += 3) {
            i7 += (-7098 + (i6 * i6));
            Test.iFld = Test.iFld;
            Test.iFld += (((i6 * Test.instanceCount) + i6) - Test.iFld);
            for (i8 = 1; i8 < 22; i8++) {
                Test.iFld <<= i7;
                Test.fFld = Test.iFld;
                sArr[i8 - 1] &= (short)Test.instanceCount;
                for (i10 = 1; i10 < 2; ++i10) {
                    i9 = (int)25127L;
                    by1 >>= (byte)Test.instanceCount;
                    i9 += (i10 ^ Test.instanceCount);
                    Test.iArrFld[i6][i10 - 1] = (int)-5L;
                    Test.fFld *= i9;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + by1 + FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth(int i2, long l, int i3) {

        short s=5663;
        double d=0.98436;
        long l1=239L;
        int i4=-11, i5=-64, iArr[]=new int[N];
        byte by=-104;

        FuzzerUtils.init(iArr, -11);

        i3 = (int)((i3 ^= i2) << (long)((10 + (-71.576F + i2)) + l));
        Test.fFld *= ((s++) + ((-5768 * i3) - (i2--)));
        d = 0.573F;
        for (l1 = 15; 270 > l1; ++l1) {
            i4 += (int)(l1 + by);
            i3 += (int)l1;
            i5 = 1;
            while (++i5 < 6) {
                i3 += (i5 * i5);
            }
            iArr = (iArr = iArr);
            vMeth1();
            i2 -= -25496;
            by += (byte)i4;
            d *= Test.iFld;
            l >>>= -31394;
        }
        iArr = Test.iArrFld[(i5 >>> 1) % N];
        long meth_res = i2 + l + i3 + s + Double.doubleToLongBits(d) + l1 + i4 + by + i5 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=13, i1=-52290, i13=4103, i14=41, i15=34914;
        byte by2=-2;
        boolean b=true;
        double d1=41.75550;

        for (i = 17; 347 > i; ++i) {
            long l2=-182L;
            Test.lArrFld[i + 1] *= (lMeth(i, l2, i) - -18);
            Test.iFld = (int)Test.fFld;
            Test.iFld += by2;
            i1 = (int)l2;
            for (i13 = 1; i13 < 5; ++i13) {
                Test.instanceCount += i14;
                if (b) continue;
                d1 -= d1;
                i15 = 1;
                do {
                    i14 <<= (int)Test.instanceCount;
                    if (b) break;
                    i1 *= i15;
                    i1 += (i15 + i15);
                    Test.instanceCount >>= Test.instanceCount;
                } while ((i15 += 3) < 2);
            }
        }
        vMeth_check_sum += i + i1 + by2 + i13 + i14 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i15;
    }

    public void mainTest(String[] strArr1) {

        int i16=186, i17=209, i18=-250, i19=-133, i20=-35691, i21=-13241;
        short s1=-14209;

        vMeth();
        i16 = 171;
        do {
            Test.iFld = 245;
            for (i17 = 3; i17 < 147; i17++) {
                Test.instanceCount = byFld;
                for (i19 = i17; i19 < 2; i19++) {
                    boolean b1=false;
                    i18 >>= iFld1;
                    switch ((i17 % 5) + 8) {
                    case 8:
                        i18 += Test.iFld;
                    case 9:
                        Test.fFld = i19;
                        break;
                    case 10:
                        Test.instanceCount -= i20;
                        Test.instanceCount = i17;
                        break;
                    case 11:
                        i18 = i16;
                        Test.iFld -= (int)Test.instanceCount;
                        byFld += (byte)(i19 * i19);
                        break;
                    case 12:
                    }
                    if (b1) {
                        Test.instanceCount = i20;
                        i20 = i20;
                        if (b1) {
                            iFld1 = i19;
                        } else if (b1) {
                            iFld1 += i21;
                        } else {
                            Test.iArrFld[i16] = Test.iArrFld[i16];
                            iFld1 += (34328 + (i19 * i19));
                            iFld1 = -5;
                        }
                    } else {
                        Test.iFld *= i19;
                    }
                    i21 -= s1;
                    if (b1) {
                        byFld = (byte)Test.instanceCount;
                        i21 += (i19 * i19);
                    } else if (b1) {
                        Test.iFld += (i19 * i19);
                    } else if (b1) {
                        i21 += i19;
                    }
                }
            }
        } while (--i16 > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
