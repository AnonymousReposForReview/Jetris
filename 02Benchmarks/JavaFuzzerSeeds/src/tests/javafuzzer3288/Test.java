package tests.javafuzzer3288;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:39:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-15644L;
    public static int iFld=-160;
    public static byte byFld=84;
    public static float fFld=113.449F;
    public short sFld=-30581;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i5, int i6) {

        int i8=10, i9=-49193, iArr1[]=new int[N];
        float f=-53.19F;
        boolean b=false;

        FuzzerUtils.init(iArr1, 59658);

        for (int i7 : iArr1) {
            for (i8 = 1; i8 < 4; ++i8) {
                f = Test.instanceCount;
                iArr1[i8] += (int)Test.instanceCount;
                i5 += (((i8 * i8) + f) - i6);
                i6 += (i8 * i8);
            }
            i7 &= (int)Test.instanceCount;
            iArr1[(i9 >>> 1) % N] -= -11;
        }
        b = b;
        long meth_res = i5 + i6 + i8 + i9 + Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth1() {

        int i4=-21, i10=-129, i11=-16, i12=7, i13=-123, iArr2[][]=new int[N][N];
        double d=-65.73598;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 191L);
        FuzzerUtils.init(iArr2, -60503);

        i4 = 1;
        while (++i4 < 301) {
            Test.iFld = byMeth(i4, i4);
            for (i10 = 1; 5 > i10; i10 += 2) {
                Test.iFld = i4;
                try {
                    Test.iFld = (i10 / 1659090797);
                    i11 = (iArr2[i10][(i11 >>> 1) % N] % 1494202395);
                    iArr2[i4 + 1][i10 - 1] = (-44 / iArr2[i10 + 1][i10 + 1]);
                } catch (ArithmeticException a_e) {}
                i12 = 1;
                do {
                    Test.iFld = (int)Test.instanceCount;
                    Test.iFld <<= i12;
                    Test.iFld += (-31 + (i12 * i12));
                    i11 = i12;
                } while (++i12 < 3);
            }
            i11 /= (int)(i4 | 1);
            i13 = 1;
            while (++i13 < 5) {
                iArr2[i13 - 1][i4] = -53;
                Test.iFld *= (int)d;
            }
            if (i11 != 0) {
                vMeth1_check_sum += i4 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
                    FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
                return;
            }
        }
        vMeth1_check_sum += i4 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(byte by, int i3) {

        int i14=-23505, i15=-13444, i16=-131, i17=173, i18=-13, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, 1);

        i3 = (int)(((i3 + -4) - (--Test.iFld)) - (Test.instanceCount--));
        i3 -= -54866;
        vMeth1();
        for (i14 = 10; i14 < 306; i14++) {
            Test.iFld += (((i14 * i15) + Test.fFld) - Test.fFld);
            Test.iFld <<= (int)Test.instanceCount;
            Test.iFld += (((i14 * i14) + Test.byFld) - Test.instanceCount);
            Test.iFld >>= 29188;
        }
        for (i16 = 4; i16 < 140; ++i16) {
            switch ((((82 >>> 1) % 2) * 5) + 50) {
            case 55:
                i18 = 12;
                do {
                    iArr3[i16] += (int)-3331596738L;
                    iArr3[i16] ^= i14;
                    Test.instanceCount -= i3;
                    Test.byFld -= (byte)Test.iFld;
                } while (--i18 > 0);
                break;
            case 51:
                i17 += (((i16 * i17) + Test.instanceCount) - Test.instanceCount);
                break;
            }
        }
        vMeth_check_sum += by + i3 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr3) {

        int i1=-164, i2=89, i19=-44, i20=36224, i21=8, i22=-62394, i23=0, i24=-105, i25=54047, iArr[][]=new int[N][N];
        double d1=-64.100585, dArr[]=new double[N];
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 0.31845);
        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(lArr1, 6302056656626772953L);

        Test.iFld *= (int)dArr[(Test.iFld >>> 1) % N];
        Test.iFld = (int)(((Test.iFld * -2.63668) - (++Test.iFld)) + ((0.93053 * (Test.iFld & Test.iFld)) *
            (iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]++)));
        Test.iFld = Test.byFld;
        for (i1 = 6; 376 > i1; i1++) {
            vMeth(Test.byFld, 32);
            i2 += (i1 * i1);
            i2 = (int)Test.instanceCount;
            for (d1 = 3; d1 < 68; d1++) {
                Test.iFld = (int)Test.instanceCount;
                i2 += Test.iFld;
                iArr[i1 + 1] = iArr[i1];
                i19 >>>= i1;
                i19 &= sFld;
                Test.byFld >>>= (byte)Test.iFld;
            }
            Test.iFld -= i2;
            for (i20 = 3; i20 < 68; ++i20) {
                for (i22 = 2; i22 > 1; i22 -= 3) {
                    Test.iFld += (((i22 * i1) + i23) - Test.iFld);
                    Test.byFld = Test.byFld;
                }
                b1 = true;
                for (i24 = 1; i24 < 2; ++i24) {
                    Test.instanceCount -= i25;
                    sFld += (short)(i24 - i20);
                    i23 = i25;
                    lArr1[i24] = i2;
                    i19 = i20;
                    Test.fFld -= Test.iFld;
                    if (b1) break;
                    Test.iFld -= 20801;
                }
            }
            b1 = b1;
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
