package tests.javafuzzer3344;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:23:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public short sFld=25894;
    public static float fFld=-2.665F;
    public static volatile double dFld=-72.11327;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f2, float f3, int i7) {

        long l=8566889830381148423L, lArr[]=new long[N];
        int i8=65338, i9=192, i10=-7, i11=-11733, i12=16221, i13=-13, i14=148, iArr1[][]=new int[N][N];
        double d2=2.26899;
        short s=-13671;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 13266);
        FuzzerUtils.init(lArr, 33395L);
        FuzzerUtils.init(byArr, (byte)118);

        Test.instanceCount = Test.instanceCount;
        l = 1;
        while (++l < 294) {
            for (i8 = 1; i8 < 6; i8 += 3) {
                i9 &= i8;
                for (i10 = 1; i10 < 6; ++i10) {
                    Test.instanceCount = -6;
                }
                iArr1[(int)(l - 1)][(int)(l - 1)] = i11;
                for (i12 = 1; i12 < 6; i12++) {
                    i13 = (int)l;
                    d2 -= -29;
                    lArr = lArr;
                    i13 += (i12 ^ s);
                    i14 += i7;
                    byArr[(int)(l)] += (byte)f2;
                    i14 += (i12 * i12);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i7 + l + i8 + i9 + i10 + i11 + i12 + i13
            + Double.doubleToLongBits(d2) + s + i14 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i6, double d1) {

        int i15=-24, i16=-8, i17=2, i18=52971, i19=-39629, i20=-34732, i21=-145, i22=10;
        short s1=-18097;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.418F);

        i6 >>= iMeth1(Test.fFld, Test.fFld, i6);
        for (i15 = 348; i15 > 8; i15--) {
            i16 &= i6;
            Test.instanceCount <<= 2962000464L;
            Test.instanceCount = i16;
            i6 += i15;
        }
        for (i17 = 18; i17 < 374; ++i17) {
            Test.instanceCount += i17;
            s1 += (short)(-12556 + (i17 * i17));
            for (i19 = 1; i19 < 5; ++i19) {
                for (i21 = i19; i21 < 2; i21++) {
                    b = b;
                    if (i21 != 0) {
                        vMeth_check_sum += i6 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + s1 + i19 + i20 +
                            i21 + i22 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    if (b) break;
                    fArr[i17 + 1] -= Test.fFld;
                }
            }
        }
        vMeth_check_sum += i6 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + s1 + i19 + i20 + i21 + i22 + (b ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(double d, int i2, int i3) {

        float f=-16.547F, f1=-2.636F;
        int i4=10, i5=10, i23=2699, iArr[]=new int[N];
        short s2=-13495;
        byte by=-7;

        FuzzerUtils.init(iArr, 13);

        f = 1;
        do {
            f1 *= (i2--);
            for (i4 = (int)(f); i4 < 6; i4++) {
                iArr[i4 + 1] *= (int)(((Test.instanceCount - i5) + (i2++)) + d);
                f1 += ((long)i4 | (long)Test.instanceCount);
                i5 += (i4 * i4);
                vMeth(i5, d);
                d *= s2;
                Test.instanceCount = i2;
                i23 = 1;
                do {
                    i5 = i4;
                    i5 += (int)d;
                    try {
                        i3 = (i5 % iArr[i23]);
                        i5 = (14066 / i4);
                        i3 = (i2 / i4);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld += by;
                } while ((i23 += 2) < 1);
            }
            i3 += (int)f;
        } while (++f < 259);
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i4
            + i5 + s2 + i23 + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-146, i1=-61640, i24=6, i25=-11, i27=4328, i28=8, i29=4, i30=-9;
        long l1=8885988637259167090L, lArr1[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(lArr1, -3880661783271734391L);

        i = 1;
        do {
            i1 = (i - sFld);
            i1 += iMeth(Test.dFld, i1, -1);
            i1 = i;
            Test.iArrFld[i] = 14;
        } while (++i < 278);
        for (i24 = 8; 128 > i24; i24++) {
            i1 = (int)1.638F;
        }
        i25 = sFld;
        for (i27 = 7; i27 < 150; ++i27) {
            Test.instanceCount /= (i27 | 1);
        }
        Test.iArrFld[(i1 >>> 1) % N] >>= i25;
        try {
            Test.iArrFld[(-210 >>> 1) % N] += (int)Test.fFld;
            i29 = 1;
            while (++i29 < 319) {
                switch ((i29 % 7) + 89) {
                case 89:
                    i25 /= (int)10L;
                    for (l1 = i29; l1 < 79; ++l1) {
                        Test.fFld += i24;
                        i25 -= -37;
                        i28 = i;
                        Test.fFld = l1;
                    }
                    i28 |= i30;
                    i30 = i25;
                    break;
                case 90:
                    lArr1[i29 + 1] %= (l1 | 1);
                    Test.iArrFld[i29] *= -224;
                case 91:
                    Test.dFld = i28;
                    i28 = (int)Test.instanceCount;
                    b1 = b1;
                    i1 -= (int)Test.fFld;
                    break;
                case 92:
                    Test.iArrFld[i29 + 1] = (int)l1;
                    break;
                case 93:
                    i25 *= (int)4005531912549153929L;
                    break;
                case 94:
                    i28 += (int)Test.fFld;
                    break;
                case 95:
                    i28 = i;
                    break;
                default:
                    i28 <<= (int)8L;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            Test.instanceCount -= -183;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
