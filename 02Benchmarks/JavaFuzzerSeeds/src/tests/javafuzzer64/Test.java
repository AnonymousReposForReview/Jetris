package tests.javafuzzer64;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:44:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3798151977L;
    public static byte byFld=-22;
    public double dFld=1.128065;
    public float fFld=44.327F;
    public static volatile int iFld=14;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.lArrFld, -8921583315664604844L);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10, int i11) {

        int i12=-45, i13=-54963, i14=8485;
        double d=2.13072;
        float f1=1.446F;
        short s=29915;

        Test.instanceCount -= i10;
        Test.instanceCount %= (Test.instanceCount | 1);
        i12 = 1;
        do {
            i10 *= (int)Test.instanceCount;
            i11 %= (int)(i12 | 1);
            i11 = i11;
            i11 = i13;
        } while (++i12 < 389);
        i14 = 197;
        while (--i14 > 0) {
            i10 += 192;
        }
        d = 1;
        while (++d < 224) {
            Test.instanceCount += (long)(d - i11);
            i13 <<= (int)Test.instanceCount;
            Test.iArrFld[(int)(d)] += (int)Test.instanceCount;
            f1 += s;
            Test.byFld ^= (byte)i13;
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s;
    }

    public float fMeth() {

        int i8=-20767, i9=135, i15=8, i16=-9, i17=-38279, i18=5, i19=51514;
        float f=-92.543F;
        boolean b=false;

        for (i8 = 13; i8 < 208; ++i8) {
            f += (--Test.instanceCount);
            vMeth(i9, i8);
            for (i15 = 8; i15 > 1; i15 -= 2) {
                b = b;
                i9 *= -31146;
                if (b) {
                    Test.iArrFld = Test.iArrFld;
                    i16 += (i15 * i9);
                    Test.iArrFld[i15] = i17;
                } else if (b) {
                    for (i18 = i8; i18 < 3; ++i18) {
                        i19 ^= i18;
                        try {
                            Test.iArrFld[i8 + 1] = (Test.iArrFld[i15] / i9);
                            i19 = (58047 / i8);
                            i9 = (i17 / i9);
                        } catch (ArithmeticException a_e) {}
                        if (i18 != 0) {
                        }
                        Test.lArrFld[i15 + 1] += i9;
                    }
                } else {
                    i19 -= -66;
                }
            }
        }
        long meth_res = i8 + i9 + Float.floatToIntBits(f) + i15 + i16 + (b ? 1 : 0) + i17 + i18 + i19;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public long lMeth(int i7) {

        short s1=18906;
        boolean b1=true;
        int i20=-101, i21=-41657;
        float f2=2.216F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.111065);

        i7 = (int)((fMeth() - Test.instanceCount) * i7);
        if (b1) {
            i7 = i7;
        } else if (b1) {
            dArr[(i7 >>> 1) % N] *= -31983L;
            dFld += s1;
        }
        i20 = 1;
        while (++i20 < 275) {
            i21 = 1;
            while (++i21 < 6) {
                if (b1) break;
                i7 >>= 231;
                i7 *= i7;
                i7 += (-80 + (i21 * i21));
                switch ((i21 % 2) + 87) {
                case 87:
                    i7 += i20;
                    i7 ^= 18208;
                case 88:
                    Test.lArrFld[i20 + 1] = Test.instanceCount;
                    break;
                default:
                    i7 += (((i21 * Test.instanceCount) + i21) - f2);
                }
            }
        }
        long meth_res = i7 + s1 + (b1 ? 1 : 0) + i20 + i21 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-51029, i1=14, i3=-8, i4=-4, i5=-11, i6=10, iArr[]=new int[N];
        long l=218L;
        boolean b2=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(bArr, false);

        for (i = 11; i < 262; ++i) {
            for (i3 = 5; i3 < 100; ++i3) {
                for (i5 = i; i5 < 2; ++i5) {
                    i4 = (++i4);
                    i1 = (int)lMeth(i1);
                    switch (((i3 % 4) * 5) + 44) {
                    case 62:
                        i6 += (int)Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                        Test.instanceCount += i1;
                        break;
                    case 61:
                        i4 -= i5;
                        dFld += i1;
                        Test.instanceCount = i4;
                        break;
                    case 58:
                        switch (((i5 % 2) * 5) + 123) {
                        case 130:
                            fFld *= Test.instanceCount;
                            i1 += -12;
                            i4 += (int)Test.instanceCount;
                            bArr[i5 + 1] = true;
                            break;
                        case 126:
                            iArr[i5] <<= (int)3273912698630108504L;
                            break;
                        default:
                            switch (((i6 >>> 1) % 2) + 69) {
                            case 69:
                                i4 += (((i5 * l) + i5) - i6);
                                i6 += (int)40329L;
                                fFld += ((long)i5 | (long)i);
                                i4 *= (int)Test.instanceCount;
                                break;
                            case 70:
                                i4 += Test.iFld;
                            default:
                                i6 -= (int)111.674F;
                            }
                            Test.instanceCount -= 7;
                            Test.iArrFld[i5] -= i5;
                        }
                        l += (i5 * i5);
                        fFld += (5253711155901899292L + (i5 * i5));
                        fFld += i1;
                        break;
                    case 52:
                        bArr[i] = b2;
                        break;
                    default:
                        dFld -= i4;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
