package tests.javafuzzer2169;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:43:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=31553L;
    public static short sFld=-13290;
    public static float fFld=2.267F;
    public static byte byFld=-95;
    public double dFld=0.93636;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i10, short s) {

        double d=-35.89659, d1=-22.83298;
        int i11=-4, i12=10, i13=58732, i14=-11, i15=11;
        boolean b=true;
        float f3=-30.897F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)80);

        d *= 59655;
        i10 <<= (int)l1;
        for (i11 = 6; i11 < 122; i11++) {
            byArr[i11 + 1] = (byte)Test.instanceCount;
            i10 = i11;
            for (d1 = 1; d1 < 13; d1++) {
                byte by=-118;
                if (b) break;
                by = (byte)i13;
                switch ((int)((d1 % 5) + 88)) {
                case 88:
                    i13 = (int)-1646011097669571633L;
                    f3 += (float)d1;
                    break;
                case 89:
                    switch ((i11 % 10) + 17) {
                    case 17:
                        for (i14 = 2; i14 > 1; --i14) {
                            d += s;
                            i15 *= (int)f3;
                        }
                        break;
                    case 18:
                        by = (byte)i11;
                        break;
                    case 19:
                        l1 += (long)d1;
                        break;
                    case 20:
                        l1 >>>= 2;
                    case 21:
                        if (i11 != 0) {
                            vMeth2_check_sum += l1 + i10 + s + Double.doubleToLongBits(d) + i11 + i12 +
                                Double.doubleToLongBits(d1) + i13 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i14 + i15
                                + FuzzerUtils.checkSum(byArr);
                            return;
                        }
                        break;
                    case 22:
                        l1 = Test.instanceCount;
                        break;
                    case 23:
                        l1 >>>= Test.instanceCount;
                        break;
                    case 24:
                        b = b;
                        break;
                    case 25:
                        i15 = i15;
                        break;
                    case 26:
                    default:
                        try {
                            i13 = (-18361 % i11);
                            i12 = (Test.iArrFld[i11] % 49);
                            Test.iArrFld[i11] = (i10 % i13);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 90:
                case 91:
                    d -= i14;
                    break;
                case 92:
                    if (b) continue;
                    break;
                }
            }
        }
        vMeth2_check_sum += l1 + i10 + s + Double.doubleToLongBits(d) + i11 + i12 + Double.doubleToLongBits(d1) + i13 +
            (b ? 1 : 0) + Float.floatToIntBits(f3) + i14 + i15 + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth1() {

        int i9=-4, i17=1, i18=226;
        boolean b1=true;

        Test.instanceCount = Math.max(Math.max(i9--, (int)(-95.684F + Test.instanceCount)), i9--);
        vMeth2(Test.instanceCount, i9, Test.sFld);
        for (int i16 : Test.iArrFld) {
            Test.instanceCount = i9;
            i16 >>= (int)Test.instanceCount;
            switch (((i16 >>> 1) % 1) + 67) {
            case 67:
                Test.instanceCount -= i16;
                i17 = 1;
                do {
                    Test.instanceCount += 9;
                    i9 += (int)Test.fFld;
                    fArrFld[i17] = i17;
                    i16 += (((i17 * Test.instanceCount) + Test.instanceCount) - i17);
                    i9 += (((i17 * Test.byFld) + i9) - Test.instanceCount);
                } while ((i17 += 3) < 4);
                i9 = i18;
                if (b1) continue;
                break;
            default:
                i18 = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i9 + i17 + i18 + (b1 ? 1 : 0);
    }

    public void vMeth(float f1) {

        float f2=51.466F;
        int i1=-32511, i2=-8531, i3=40402, i5=-44754, i6=153, i7=25543, i8=2;
        double d2=100.57304;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 58L);

        for (f2 = 2; f2 < 233; f2++) {
            for (i2 = 1; i2 < 7; ++i2) {
                Test.instanceCount -= ((--i3) * lArr[(int)(f2)][i2 - 1]);
                Test.iArrFld[(int)(f2 + 1)] = (--i3);
                Test.instanceCount |= ((--i1) + Integer.reverseBytes(++i3));
                if (i1 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i1 + i2 + i3 + i5 + i6 +
                        i7 + i8 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
            for (i5 = 1; 7 > i5; i5++) {
                Test.instanceCount = Test.instanceCount;
                for (i7 = 1; i7 < 2; i7++) {
                    Test.instanceCount += (((i7 * i6) + i1) - i6);
                    switch (((i7 % 2) * 5) + 41) {
                    case 43:
                        Test.instanceCount -= i5;
                        break;
                    case 48:
                        vMeth1();
                        break;
                    }
                    f1 += (float)d2;
                    i1 = (int)d2;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i1 + i2 + i3 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        long l=51130L;
        int i=-12, i19=-142, i20=-22042, i21=6, i22=-10403, i23=10;
        float f=76.380F;
        boolean b2=false;
        double d3=-107.120922;

        for (l = 17; l < 384; ++l) {
            i = (int)(i + ((i + -1.842F) - (f--)));
            vMeth(f);
            i19 = 1;
            do {
                i += i;
                i = i;
            } while ((i19 += 2) < 69);
            i -= i;
            i <<= i;
            if (false) break;
            i += (int)(((l * i) + f) - f);
            for (i20 = 1; i20 < 69; i20++) {
                i22 = 2;
                while ((i22 -= 2) > 0) {
                    f += i20;
                    b2 = b2;
                    dFld /= ((long)(Test.fFld) | 1);
                    dFld += Test.instanceCount;
                    i21 -= -35062;
                    f -= i22;
                    i21 = Test.byFld;
                    i = -4;
                    i = i19;
                }
            }
            for (d3 = 3; d3 < 69; ++d3) {
                fArrFld[(int)(l)] -= Test.sFld;
                i21 += (int)Test.instanceCount;
                i += (int)(d3 * d3);
                Test.instanceCount += (long)(d3 * d3);
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-4);
                f *= i23;
                Test.fFld = 2.305F;
                i21 >>= i22;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
