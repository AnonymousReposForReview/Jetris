package tests.javafuzzer1039;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:06:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=234L;
    public int iFld=9;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7741L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i4=3;
        double d=-25.8228;
        short s=23836;

        i4 -= i4;
        i4 = i4;
        i4 -= (int)d;
        i4 -= s;
        i4 |= (int)Test.instanceCount;
        long meth_res = i4 + Double.doubleToLongBits(d) + s;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i3, long l1, float f1) {

        int i5=215, i6=-13, i7=-1, i8=61, i9=5771, i10=-63778, i11=35927, iArr[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr, -14105);

        i3 -= (int)dMeth();
        for (i5 = 5; i5 < 124; ++i5) {
            Test.instanceCount <<= 50437;
            iArr[i5][i5 - 1] += i6;
        }
        for (i7 = 6; i7 < 169; i7++) {
            i9 = 1;
            do {
                i10 = 1;
                while ((i10 -= 2) > 0) {
                    i3 += 111;
                    Test.instanceCount &= i5;
                }
                i3 += 0;
                i11 = 1;
                do {
                    i8 = i11;
                    i3 = (int)2.378F;
                    l1 = i3;
                    b = b;
                } while (++i11 < 1);
            } while (++i9 < 10);
        }
        vMeth_check_sum += i3 + l1 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, float f) {

        int i12=-5, i13=39523, i14=93, i15=-6, i16=-10576, i17=-6, i18=-254, iArr1[]=new int[N];
        short s1=22429;
        float f2=-124.768F;
        boolean b1=true;
        long l2=-8014488605743105577L, lArr[]=new long[N];
        double d1=1.120099;

        FuzzerUtils.init(lArr, -3633463063L);
        FuzzerUtils.init(iArr1, -28823);

        vMeth(i12, l, f);
        s1 = (short)-66;
        for (f2 = 231; 6 < f2; f2 -= 3) {
            lArr[(int)(f2 - 1)] ^= i12;
            if (b1) continue;
            for (i14 = 21; i14 > 1; i14 -= 2) {
                iArr1[i14 - 1] -= (int)114L;
            }
            for (l2 = 1; 21 > l2; l2++) {
                lArr[(int)(l2 - 1)] -= 6;
                i13 = i14;
                lArr[(int)(f2 - 1)] = (long)d1;
                i12 -= i15;
                for (i17 = 1; i17 < 2; ++i17) {
                    iArr1[(int)(l2 - 1)] -= i17;
                    i16 += (int)d1;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i12 + s1 + Float.floatToIntBits(f2) + i13 + (b1 ? 1 : 0) + i14 +
            i15 + l2 + i16 + Double.doubleToLongBits(d1) + i17 + i18 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=34992, i1=203, i2=-165, i19=-5, i20=1, i21=11409, i22=-14, i23=29111, i24=38903, i25=40318, i26=239,
            i27=-52657, i28=-211;
        float f3=0.890F;
        boolean b2=false;
        double d2=-2.38397;

        i = (int)(-(i + (i + Test.instanceCount)));
        for (i1 = 8; i1 < 276; ++i1) {
            i2 = (iMeth(632340379L, f3) - i2);
            i += (((i1 * f3) + i2) - i1);
            i2 = i1;
        }
        for (i19 = 7; 189 > i19; ++i19) {
            f3 = Test.instanceCount;
            for (i21 = i19; i21 < 138; i21++) {
                switch (((i19 % 10) * 5) + 14) {
                case 52:
                    for (i23 = i21; i23 < 1; i23++) {
                        i22 = i20;
                        Test.instanceCount += (long)f3;
                    }
                    f3 = i2;
                    i20 <<= i23;
                    break;
                case 31:
                    iFld += i21;
                    try {
                        iArrFld[i21 - 1] = (i21 / iArrFld[i21]);
                        i22 = (i20 % -174);
                        i22 = (i % iArrFld[i21 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i24 *= 0;
                    i22 += i20;
                    break;
                case 63:
                    try {
                        i22 = (i23 % i23);
                        i20 = (i20 / -172);
                        i22 = (29827 / iArrFld[i19 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i24 += i22;
                    b2 = b2;
                    break;
                case 47:
                    b2 = b2;
                    break;
                case 33:
                    for (i25 = 1; 1 > i25; i25++) {
                        i += (i25 * i25);
                    }
                    d2 *= Test.instanceCount;
                    for (i27 = i21; i27 < 1; ++i27) {
                        i20 += (int)-1.112536;
                        i2 = i19;
                        Test.lArrFld[i21 - 1] += i21;
                        i2 += (i27 ^ Test.instanceCount);
                    }
                    break;
                case 18:
                    i2 &= i22;
                case 61:
                    Test.instanceCount -= i24;
                    break;
                case 49:
                    i >>= (int)Test.instanceCount;
                    break;
                case 32:
                    i2 += (i21 + f3);
                case 51:
                    f3 += (27888 + (i21 * i21));
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
