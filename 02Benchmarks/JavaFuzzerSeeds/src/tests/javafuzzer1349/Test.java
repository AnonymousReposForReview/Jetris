package tests.javafuzzer1349;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:32:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2019337203L;
    public static int iFld=-55764;
    public volatile float fFld=-88.671F;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.fArrFld, -107.6F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public int iMeth1(int i2, int i3) {

        int i4=-11732, i5=-6, i6=9, i7=4, i8=-9;
        float f=48.166F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i4 = 19; i4 < 351; ++i4) {
            i5 += i4;
            for (i6 = 1; 5 > i6; i6++) {
                i8 = 1;
                do {
                    i7 *= 2;
                    i7 <<= i7;
                    bArr[i4] = false;
                    f += i4;
                    i2 += i5;
                    Test.instanceCount = i3;
                    i7 = 95;
                    Test.instanceCount = i5;
                    Test.instanceCount += i8;
                    Test.iArrFld = FuzzerUtils.int2array(N, (int)2);
                } while (++i8 < 2);
                i7 = i5;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(long l, int i1) {

        int i9=-13, i10=61559, i11=246, i12=14;
        float f1=2.215F, f2=-2.480F;
        double d=-16.94700;
        short s=-8223;
        long l1=-6314153366059423212L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7989854126292008888L);

        i1 *= Math.abs(iMeth1(-39737, -43225));
        for (i9 = 4; i9 < 306; ++i9) {
            lArr[i9 - 1] *= i9;
            for (f1 = i9; f1 < 5; f1++) {
                d -= l;
                i11 += i1;
                i11 += (int)(f1 * s);
                f2 += i11;
                lArr[(int)(f1)] += l;
                i1 += i11;
            }
            i11 &= (int)-62949L;
            for (l1 = 1; 5 > l1; l1++) {
                Test.fArrFld[(int)(l1 + 1)] = i12;
                if (true) break;
            }
            s *= (short)f2;
        }
        long meth_res = l + i1 + i9 + i10 + Float.floatToIntBits(f1) + i11 + Double.doubleToLongBits(d) + s +
            Float.floatToIntBits(f2) + l1 + i12 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        int i13=34381, i14=-27245, i15=-43531, i16=61961, i17=-42519;
        double d1=-97.25370;
        long l2=-3984398319L, lArr1[][]=new long[N][N];
        short s1=-9808;

        FuzzerUtils.init(lArr1, 29L);

        iMeth(Test.instanceCount, i);
        for (i13 = 10; i13 < 227; ++i13) {
            i14 <<= i14;
            for (i15 = 1; i15 < 7; ++i15) {
                i14 >>= (int)Test.instanceCount;
            }
        }
        d1 = 1;
        do {
            i += 76;
            i16 -= (int)-124L;
            Test.iArrFld[(int)(d1 + 1)][(int)(d1)] = (int)d1;
            lArr1[(int)(d1 - 1)][(int)(d1)] <<= i15;
            for (l2 = 4; l2 > d1; l2--) {
                i17 *= (int)l2;
                lArr1[(int)(l2 - 1)] = FuzzerUtils.long1array(N, (long)28399L);
                Test.instanceCount ^= i17;
                s1 *= (short)i;
            }
        } while (++d1 < 392);
        vMeth_check_sum += i + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + l2 + i17 + s1 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=226, i19=-8, i20=183, i21=-40223, i22=12589, i23=-40847, i24=-44103, i25=58124;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -33.32472);

        vMeth(Test.iFld);
        Test.iFld <<= (int)Test.instanceCount;
        Test.iFld >>= Test.iFld;
        for (i18 = 2; 187 > i18; i18++) {
            i20 = 1;
            do {
                fFld *= Test.iFld;
                fFld -= -46132L;
                i19 += (int)Test.instanceCount;
            } while (++i20 < 136);
            fFld += i19;
            Test.iFld += (((i18 * Test.instanceCount) + i20) - Test.iFld);
            i19 = i19;
            fFld = i19;
            dArr = dArr;
        }
        Test.iFld = (int)Test.instanceCount;
        Test.iArrFld[(Test.iFld >>> 1) % N][(i20 >>> 1) % N] = -8;
        for (i21 = 10; i21 < 232; i21++) {
            Test.iArrFld[i21 + 1][i21 + 1] -= (int)Test.instanceCount;
        }
        i22 = (int)517223024359984901L;
        Test.iFld -= (int)fFld;
        for (i23 = 3; i23 < 372; ++i23) {
            i22 <<= i18;
            Test.instanceCount += (i23 * Test.instanceCount);
            Test.iArrFld[i23 - 1][i23 - 1] = 92;
        }
        Test.iArrFld[(i20 >>> 1) % N][(i20 >>> 1) % N] <<= Test.iFld;
        i25 = 1;
        while (++i25 < 297) {
            Test.iFld ^= i21;
        }
        i19 -= i23;
        i24 *= Test.iFld;
        i24 = i24;
        fFld -= i20;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
