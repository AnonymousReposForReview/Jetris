package tests.javafuzzer2078;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:41:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=115L;
    public static float fFld=-2.601F;
    public static byte byFld=-113;
    public static long lFld=-4247326011L;
    public short sFld=11816;
    public static volatile boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -91.2675);
        FuzzerUtils.init(Test.iArrFld, 16811);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, float f, float f1) {

        int i5=-1, i6=-61291, i7=30867, i8=-14, i9=-6, iArr1[]=new int[N];
        double d=-2.33708, d1=1.89734;
        boolean b=false, b1=true, bArr[]=new boolean[N];
        short s=5179;

        FuzzerUtils.init(iArr1, 15543);
        FuzzerUtils.init(bArr, true);

        for (i5 = 6; i5 < 156; i5++) {
            for (i7 = i5; i7 < 11; ++i7) {
                i9 = 1;
                while (++i9 < 1) {
                    try {
                        i8 = (i9 / i8);
                        i6 = (i8 % 551773915);
                        iArr1[i7] = (42 / iArr1[i5]);
                    } catch (ArithmeticException a_e) {}
                    l = 23;
                    i8 += (int)Test.instanceCount;
                    switch ((i9 % 6) + 122) {
                    case 122:
                        if (b1) {
                            i8 *= (int)d;
                            iArr1[i5 - 1] -= (int)Test.instanceCount;
                            if (b) {
                                l += (i9 | i9);
                                iArr1[i7 - 1] = i5;
                                bArr[i9 + 1] = b;
                            } else {
                                iArr1[i5 + 1] <<= i8;
                            }
                            vMeth2_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i7 +
                                i8 + i9 + Double.doubleToLongBits(d) + (b ? 1 : 0) + (b1 ? 1 : 0) + s +
                                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                            return;
                        }
                        break;
                    case 123:
                        i8 = s;
                    case 124:
                        d1 -= i5;
                        break;
                    case 125:
                        Test.instanceCount = l;
                        break;
                    case 126:
                        f1 += i8;
                        break;
                    case 127:
                        if (i7 != 0) {
                            vMeth2_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i7 +
                                i8 + i9 + Double.doubleToLongBits(d) + (b ? 1 : 0) + (b1 ? 1 : 0) + s +
                                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                            return;
                        }
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 +
            Double.doubleToLongBits(d) + (b ? 1 : 0) + (b1 ? 1 : 0) + s + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {

        int i2=63430, i3=-12, i4=12, i10=-240, i11=3, i12=-10434, iArr[][]=new int[N][N];
        boolean b2=true;

        FuzzerUtils.init(iArr, 14);

        i2 = 1;
        do {
            iArr[i2][i2] = (int)Test.instanceCount;
            i3 = ((-12941 - i3) >>> Integer.reverseBytes(Math.abs(156)));
            if (b2) {
                try {
                    i3 = (-1874598263 / i2);
                    i3 = (iArr[i2 - 1][i2 - 1] % 89);
                    i3 = (-38307 / i4);
                } catch (ArithmeticException a_e) {}
                vMeth2(Test.instanceCount, Test.fFld, Test.fFld);
                iArr[i2 - 1][i2 + 1] = i4;
                i3 += i2;
            } else if (b2) {
                iArr[i2] = FuzzerUtils.int1array(N, (int)-8);
            }
            Test.fFld *= -13L;
            Test.dArrFld[i2] -= Test.instanceCount;
        } while (++i2 < 189);
        for (i10 = 2; i10 < 216; i10++) {
            Test.instanceCount *= (long)-17.64462;
            Test.instanceCount = i3;
            i4 &= i12;
        }
        vMeth1_check_sum += i2 + i3 + i4 + (b2 ? 1 : 0) + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        int i1=4, i13=-51133, i14=-50002, iArr2[][]=new int[N][N];
        float f2=2.518F;
        double d2=-84.27140;
        boolean b3=false;

        FuzzerUtils.init(iArr2, 23841);

        i1 = 1;
        while (++i1 < 198) {
            vMeth1();
            for (i13 = 1; i13 < 8; i13++) {
                i = i1;
                Test.fFld = Test.instanceCount;
                i *= i1;
                f2 = 1;
                while (++f2 < 2) {
                    short s1=-5672;
                    d2 -= Test.instanceCount;
                    i = 2;
                    switch ((i13 % 10) + 117) {
                    case 117:
                        Test.instanceCount = 26200;
                        Test.byFld += (byte)((long)f2 ^ i13);
                        break;
                    case 118:
                        i -= -4;
                        d2 -= i14;
                    case 119:
                        i += -43241;
                    case 120:
                        iArr2[(int)(f2)][i13 - 1] |= (int)Test.instanceCount;
                    case 121:
                        i += s1;
                        break;
                    case 122:
                        Test.instanceCount <<= i1;
                        break;
                    case 123:
                        if (b3) break;
                        break;
                    case 124:
                        i = i14;
                        break;
                    case 125:
                        i -= (int)Test.instanceCount;
                        break;
                    case 126:
                        i >>= (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i13 + i14 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + (b3 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i15=10, i16=-28724, i17=57877, i18=25868, i19=-40, iArr3[][]=new int[N][N];
        float f3=25.665F, fArr[]=new float[N];
        double d3=-21.82928;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -96.334F);
        FuzzerUtils.init(iArr3, 33455);
        FuzzerUtils.init(lArr, 51L);

        vMeth(i15);
        i15 = i15;
        for (i16 = 4; i16 < 254; ++i16) {
            for (f3 = 4; f3 < 101; f3++) {
                i15 = (int)Test.lFld;
                i19 = 1;
                do {
                    Test.dArrFld[(int)(f3 + 1)] += d3;
                    i17 -= (int)d3;
                    i17 = sFld;
                    Test.iArrFld[(int)(f3)] = (int)Test.instanceCount;
                    i18 <<= i17;
                    Test.byFld += (byte)Test.lFld;
                    Test.lFld -= i17;
                    switch (((i16 % 3) * 5) + 54) {
                    case 55:
                        i17 = i18;
                        switch ((((80 >>> 1) % 7) * 5) + 48) {
                        case 67:
                            switch ((i16 % 3) + 104) {
                            case 104:
                                Test.iArrFld = Test.iArrFld;
                                i15 += (i19 * i19);
                                break;
                            case 105:
                                Test.iArrFld[(int)(f3)] = (int)f3;
                                i15 >>= i17;
                                break;
                            case 106:
                                Test.iArrFld[i19 - 1] = (int)f3;
                            }
                            if (Test.bFld) continue;
                            i18 *= -185;
                            break;
                        case 75:
                            Test.instanceCount = i18;
                            Test.lFld -= Test.instanceCount;
                            Test.fFld %= 102;
                            fArr[i19] = 16.788F;
                            break;
                        case 56:
                            iArr3 = iArr3;
                            i15 += i18;
                            break;
                        case 65:
                            if (Test.bFld) continue;
                        case 71:
                            i15 = i17;
                            break;
                        case 64:
                            i17 >>= -13;
                            break;
                        case 50:
                            lArr = lArr;
                            break;
                        }
                        break;
                    case 61:
                        Test.byFld += (byte)(((i19 * Test.instanceCount) + i17) - i16);
                        break;
                    case 66:
                        i15 -= i18;
                        break;
                    default:
                        i18 >>= (int)Test.instanceCount;
                    }
                } while (++i19 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
