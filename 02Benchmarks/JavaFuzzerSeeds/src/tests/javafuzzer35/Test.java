package tests.javafuzzer35;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:26:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=188L;
    public static double dFld=0.27106;
    public static volatile short sFld=24681;
    public static volatile int iFld=0;
    public static float fFld=1.56F;
    public static byte byFld=114;
    public static int iFld1=47107;
    public static int iFld2=39110;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-25);
        FuzzerUtils.init(Test.iArrFld, -141);
        FuzzerUtils.init(Test.iArrFld1, -18576);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static double dMeth(int i1, int i2) {

        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -2955041501L);

        i1 -= (int)(lArr[(i1 >>> 1) % N][(i2 >>> 1) % N]--);
        long meth_res = i1 + i2 + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i11=-10, i12=63974, i13=-10, i14=241, i15=-11, iArr2[][]=new int[N][N];
        float fArr1[]=new float[N];
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr2, 14224);
        FuzzerUtils.init(fArr1, 0.73F);
        FuzzerUtils.init(lArr2, -10L);

        i11 = 1;
        while (++i11 < 378) {
            switch (((i11 >>> 1) % 9) + 64) {
            case 64:
                switch ((i11 % 5) + 91) {
                case 91:
                    for (i12 = i11; 4 > i12; i12++) {
                        Test.instanceCount <<= Test.sFld;
                        if (i13 != 0) {
                            vMeth1_check_sum += i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr2);
                            return;
                        }
                        Test.instanceCount -= i12;
                        i13 += (int)Test.instanceCount;
                        iArr2[i12 + 1][i11] >>= i11;
                        i13 += (((i12 * Test.instanceCount) + i11) - i11);
                        i13 += (i12 | i13);
                        iArr2[i12][i11] >>>= i12;
                        for (i14 = 1; i14 > i12; --i14) {
                            i15 |= Test.iFld;
                            i13 *= (int)Test.instanceCount;
                        }
                    }
                    break;
                case 92:
                    fArr1[i11 - 1] = Test.iFld;
                case 93:
                case 94:
                    try {
                        Test.iFld = (iArr2[i11][i11 - 1] / i13);
                        i13 = (i11 / 30182);
                        i15 = (Test.iFld % 103);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 95:
                    i13 -= 12;
                default:
                    Test.iFld = (int)Test.instanceCount;
                }
                break;
            case 65:
                Test.byArrFld[i11 + 1] += (byte)Test.fFld;
                break;
            case 66:
                Test.byFld = (byte)-159;
                break;
            case 67:
                Test.byFld *= (byte)Test.instanceCount;
                break;
            case 68:
                lArr2[i11 - 1] = lArr2[i11];
                break;
            case 69:
                Test.instanceCount += i11;
                break;
            case 70:
                try {
                    i13 = (i15 % i14);
                    i13 = (iArr2[i11][i11 + 1] % 928);
                    i13 = (-178 % iArr2[i11][i11 - 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 71:
                Test.instanceCount -= (long)Test.fFld;
                break;
            case 72:
                Test.instanceCount = Test.iFld;
                break;
            }
        }
        vMeth1_check_sum += i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(float f2, int i10) {

        long l2=-45L, l3=-50315L, lArr1[]=new long[N];
        int i16=-32927, i17=-205;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr1, -1544102517L);
        FuzzerUtils.init(sArr, (short)-8700);

        for (long l1 : lArr1) {
            vMeth1();
            for (l2 = 1; l2 < 4; ++l2) {
                for (l3 = l2; l3 < 2; l3++) {
                    Test.iFld = i17;
                }
                i17 *= (int)f2;
                if (b) break;
                switch ((int)((l2 % 7) + 2)) {
                case 2:
                    lArr1[(int)(l2)] += Test.byFld;
                    i10 = i16;
                    Test.iArrFld[(int)(l2)][(int)(l2 - 1)] += Test.sFld;
                    Test.iFld = (int)l2;
                    break;
                case 3:
                    i10 = i16;
                    break;
                case 4:
                    if (Test.iFld != 0) {
                    }
                    Test.fFld *= i16;
                    break;
                case 5:
                    i16 -= (int)l3;
                case 6:
                    i10 <<= Test.iFld;
                    break;
                case 7:
                    i16 += (int)(l2 ^ (long)Test.fFld);
                case 8:
                    Test.byFld *= (byte)i17;
                    break;
                default:
                    sArr[(int)(l2 - 1)] %= (short)(Test.instanceCount | 1);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i10 + l2 + i16 + l3 + i17 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4, double d) {

        int i5=246, i6=2, i7=3, i8=-40131, i9=-163, iArr1[]=new int[N];
        float f1=2.261F, fArr[]=new float[N], fArr2[][]=new float[N][N];
        boolean b1=true;
        double dArr[]=new double[N];
        long lArr3[]=new long[N];
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(iArr1, 170);
        FuzzerUtils.init(fArr, 54.331F);
        FuzzerUtils.init(dArr, -27.93857);
        FuzzerUtils.init(lArr3, 46L);
        FuzzerUtils.init(fArr2, -41.163F);
        FuzzerUtils.init(sArr1, (short)-17780);

        iArr1[(47518 >>> 1) % N] = i4;
        i5 = 1;
        do {
            f1 += (3 + (i5 * i5));
            switch ((i5 % 2) + 95) {
            case 95:
                for (i6 = 1; i6 < 5; i6++) {
                    for (i8 = i6; i8 < 2; i8++) {
                        Test.instanceCount &= (--Test.instanceCount);
                        iArr1[i8] = (int)((--i9) - ((fArr[i6 + 1] = -219) - Test.instanceCount));
                        Test.instanceCount <<= (--i3);
                        Test.instanceCount += (i8 * i8);
                        switch ((i8 * 5) + 58) {
                        case 194:
                            i7 += i6;
                            i7 -= (int)(((i5 * -94) * (64.122189 * i3)) % (Math.max(i3 - 98, (int)(-39880L +
                                (++iArr1[i5]))) | 1));
                            Test.dFld = (-232 * iMeth(f1, i5));
                            break;
                        case 216:
                            Test.iFld = i8;
                        case 228:
                            d += Test.iFld;
                        case 339:
                            i4 *= i6;
                            break;
                        case 254:
                            i9 += (i8 * i8);
                            break;
                        case 147:
                            Test.instanceCount -= i8;
                            break;
                        case 73:
                            dArr[i8 - 1] -= -18;
                        case 389:
                            Test.iFld &= i4;
                        case 235:
                            i9 = i7;
                            break;
                        case 352:
                            i3 += i5;
                        case 112:
                            if (b1) continue;
                            break;
                        case 366:
                            Test.fFld -= i4;
                            break;
                        case 261:
                            try {
                                iArr1[i6] = (Test.iArrFld1[i6] % 62205);
                                i3 = (i4 % Test.iFld1);
                                Test.iArrFld1[i5] = (-253 % i3);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 274:
                            lArr3[i8 - 1] = Test.instanceCount;
                            break;
                        case 210:
                            Test.iFld += (int)(51L + (i8 * i8));
                            break;
                        case 245:
                            i9 = (int)Test.instanceCount;
                        case 265:
                            i7 += (((i8 * Test.fFld) + i8) - Test.fFld);
                            break;
                        case 116:
                            b1 = b1;
                            break;
                        case 387:
                            f1 += (((i8 * i4) + i6) - Test.instanceCount);
                            break;
                        case 330:
                            b1 = true;
                            break;
                        case 205:
                            Test.iFld1 = i6;
                            break;
                        case 120:
                            Test.iFld1 += (i8 ^ Test.iFld);
                        case 391:
                            i4 = 57682;
                            break;
                        case 95:
                            fArr[i6] = (float)Test.dFld;
                            break;
                        case 255:
                            Test.iFld = i8;
                            break;
                        case 131:
                            Test.instanceCount >>= i6;
                        case 290:
                        case 184:
                            Test.iFld1 = 33803;
                            break;
                        case 312:
                            fArr2 = fArr2;
                        case 369:
                            if (i9 != 0) {
                                vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1)
                                    + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr3) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr1);
                                return;
                            }
                            break;
                        case 175:
                            Test.iArrFld[i6 + 1][i8 + 1] *= i9;
                            break;
                        case 227:
                            Test.dFld = f1;
                            break;
                        case 206:
                        case 213:
                            Test.instanceCount = i9;
                            break;
                        case 215:
                            i7 -= i8;
                        case 307:
                            f1 -= (float)d;
                            break;
                        case 322:
                            Test.iArrFld1[i5] = i8;
                            break;
                        case 61:
                            i4 += (i8 * i8);
                            break;
                        case 283:
                            i4 += (((i8 * Test.iFld) + Test.iFld1) - i6);
                            break;
                        case 177:
                            i4 >>>= Test.iFld1;
                            break;
                        case 402:
                            i3 = -59715;
                            break;
                        case 82:
                            i9 *= (int)-57796L;
                            break;
                        case 338:
                            Test.iArrFld1[i8 + 1] = (int)Test.instanceCount;
                        case 273:
                            i7 = (int)f1;
                        case 220:
                            i7 -= (int)Test.instanceCount;
                            break;
                        case 198:
                        case 306:
                            i9 += (int)Test.fFld;
                            break;
                        case 89:
                            if (i6 != 0) {
                                vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1)
                                    + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr3) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr1);
                                return;
                            }
                            break;
                        case 191:
                            f1 = i8;
                        case 87:
                            Test.iFld1 = (int)Test.fFld;
                            break;
                        case 102:
                            if (false) continue;
                            break;
                        case 98:
                            i7 -= Test.iFld1;
                            break;
                        case 195:
                            if (b1) continue;
                            break;
                        case 188:
                            Test.iFld1 >>= i5;
                            break;
                        case 314:
                            b1 = b1;
                            break;
                        case 158:
                            d += d;
                            break;
                        case 70:
                            if (i5 != 0) {
                                vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1)
                                    + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr3) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr1);
                                return;
                            }
                            break;
                        case 173:
                            sArr1[i6 - 1][i8 + 1] = (short)Test.instanceCount;
                            break;
                        case 404:
                            Test.byFld += (byte)(-248L + (i8 * i8));
                        case 388:
                            if (i4 != 0) {
                                vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1)
                                    + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr3) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr1);
                                return;
                            }
                            break;
                        case 67:
                            dArr[i5] = Test.sFld;
                            break;
                        case 79:
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        case 105:
                            Test.iFld2 <<= 218;
                            break;
                        case 125:
                            b1 = b1;
                        case 253:
                            i7 -= i4;
                            break;
                        case 100:
                        case 342:
                            Test.instanceCount += i3;
                        case 398:
                            Test.instanceCount += (i8 * i8);
                            break;
                        case 308:
                            Test.sFld *= (short)i4;
                        case 236:
                            Test.iFld2 *= i5;
                        default:
                            Test.instanceCount += i8;
                        }
                    }
                }
                break;
            case 96:
                d -= Test.instanceCount;
                break;
            default:
                Test.iFld -= i8;
            }
        } while (++i5 < 329);
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        long l=-13L;
        int i=-27795, i18=194, i19=0, i20=29507, i21=-11, iArr[]=new int[N];
        float f=3.19F, fArr3[]=new float[N];
        boolean b2=true;

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(fArr3, -123.874F);

        for (l = 1; l < 201; ++l) {
            iArr[(int)(l + 1)] = (iArr[(int)(l)]--);
            f += (float)dMeth(15092, Math.min(i++, -(++i)));
            vMeth(Test.iFld, Test.iFld2, Test.dFld);
            f %= (Test.instanceCount | 1);
            Test.iFld2 = (int)l;
            for (i18 = 4; 126 > i18; i18++) {
                switch ((int)((l % 10) + 4)) {
                case 4:
                    if (b2) continue;
                    break;
                case 5:
                    i20 = 2;
                    while (--i20 > 0) {
                        i19 = (int)3L;
                        Test.iFld1 += (51780 + (i20 * i20));
                        Test.iFld2 += 52239;
                    }
                    break;
                case 6:
                    i21 = 1;
                    while ((i21 += 2) < 2) {
                        i19 += i21;
                        Test.iFld1 += (((i21 * f) + i18) - i20);
                        Test.iFld = (int)Test.instanceCount;
                        Test.iFld2 >>= Test.iFld2;
                        if (b2) {
                            Test.iFld2 -= i21;
                            fArr3[i21] = i19;
                        }
                        Test.iFld1 += (i21 + f);
                    }
                    Test.iFld -= i21;
                    break;
                case 7:
                    switch ((int)((l % 9) + 120)) {
                    case 120:
                        Test.iArrFld[i18 - 1][i18 + 1] &= 66;
                        Test.byFld += (byte)(-3533L + (i18 * i18));
                        Test.iFld2 -= (int)l;
                        lArrFld[i18] = i18;
                        break;
                    case 121:
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount <<= -244;
                        break;
                    case 122:
                        Test.instanceCount = 3183L;
                        break;
                    case 123:
                        i = (int)l;
                    case 124:
                        Test.instanceCount = i19;
                        break;
                    case 125:
                        Test.iFld1 = i19;
                        break;
                    case 126:
                    case 127:
                        i19 = -44378;
                    case 128:
                    default:
                        i19 *= -31224;
                    }
                case 8:
                    Test.iFld += i18;
                    break;
                case 9:
                    Test.iFld2 = Test.iFld2;
                    break;
                case 10:
                    Test.iFld1 *= Test.iFld2;
                    break;
                case 11:
                    i += (i18 * i18);
                case 12:
                    i = 7;
                    break;
                case 13:
                    Test.iArrFld1[i18 - 1] ^= i18;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
