package tests.javafuzzer809;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:20:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2171944087L;
    public static int iFld=86;
    public static volatile float fFld=-2.547F;
    public static byte byFld=23;
    public static volatile double dFld=0.38145;
    public int iFld1=19541;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.fArrFld, -2.868F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, byte by) {

        double d=38.112935;
        int i7=11, i8=13, i9=-239, i10=21693, i11=37895;

        for (d = 14; d < 228; d++) {
            Test.instanceCount *= i6;
            Test.instanceCount += (long)d;
            for (i8 = (int)(d); 8 > i8; ++i8) {
                Test.iFld -= -10;
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.iFld += (i10 * i10);
                }
                Test.iFld += (((i8 * Test.instanceCount) + Test.iFld) - Test.iFld);
                i7 -= (int)Test.fFld;
                i7 <<= -6;
                i11 += (int)d;
                Test.iArrFld[i8 + 1][(int)(d)] = by;
                Test.fArrFld[i8 - 1] += i6;
            }
            Test.iArrFld[(int)(d)] = FuzzerUtils.int1array(N, (int)29558);
            i11 |= (int)Test.instanceCount;
        }
        long meth_res = i6 + by + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1) {

        short s1=13706;
        int i12=-6, i13=-7, i14=-56521, i15=-235, i16=-14964, i17=-112;

        Test.iFld -= ((-iMeth(Test.iFld, Test.byFld)) * s1);
        for (i12 = 1; 210 > i12; i12++) {
            Test.iFld += (((i12 * Test.fFld) + s1) - i13);
            Test.dFld -= i13;
            for (i14 = 1; i14 < 8; ++i14) {
                Test.instanceCount -= Test.byFld;
                Test.iArrFld[i14][i14 + 1] -= (int)Test.fFld;
                Test.iFld *= 19124;
                switch (((i12 % 6) * 5) + 66) {
                case 89:
                    i15 = 13;
                    break;
                case 70:
                    i13 += i14;
                    for (i16 = 1; i16 < 2; ++i16) {
                        Test.iFld *= i14;
                        Test.iFld += (60402 + (i16 * i16));
                        i17 *= i15;
                    }
                    break;
                case 68:
                    i17 = s1;
                    break;
                case 92:
                    Test.instanceCount += (i14 * i14);
                    break;
                case 90:
                    try {
                        i13 = (i14 % 105);
                        i15 = (i17 / 49915);
                        i15 = (42942 % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 72:
                    if (i14 != 0) {
                        vMeth_check_sum += l1 + s1 + i12 + i13 + i14 + i15 + i16 + i17;
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += l1 + s1 + i12 + i13 + i14 + i15 + i16 + i17;
    }

    public static long lMeth(float f1, int i3, float f2) {

        int i4=-44, i5=-16792, i18=-30537;
        double d1=20.39220, dArr[]=new double[N], dArr1[]=new double[N];
        short s2=4194;

        FuzzerUtils.init(dArr, -10.114077);
        FuzzerUtils.init(dArr1, 7.22665);

        Test.iArrFld[(63937 >>> 1) % N][(i3 >>> 1) % N] -= (int)(Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1)
            % N] * Math.abs(Test.instanceCount));
        dArr = (dArr = (dArr = (dArr1 = dArr1)));
        for (i4 = 10; i4 < 389; i4++) {
            vMeth(Test.instanceCount);
            for (d1 = 1; d1 < 4; ++d1) {
                i18 >>>= s2;
            }
        }
        i18 += Test.iFld;
        i18 += i5;
        long meth_res = Float.floatToIntBits(f1) + i3 + Float.floatToIntBits(f2) + i4 + i5 +
            Double.doubleToLongBits(d1) + i18 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=2783;
        int i=-8, i1=5, i2=14, i19=-113, i20=-35159, i21=-10, iArr[]=new int[N];
        float f=-8.709F;
        long l=-53607L;

        FuzzerUtils.init(iArr, 0);

        s = (short)Test.iFld;
        for (i = 7; i < 184; ++i) {
            Test.iArrFld[i - 1][i] += (int)((Test.iArrFld[i][i]--) + Test.fArrFld[i]);
            i1 += (i | Test.instanceCount);
            for (f = 142; i < f; f--) {
                boolean b=true;
                i1 >>= (int)(((Test.iFld - 47) * 52.44142) * (59393 + Test.iArrFld[(int)(f - 1)][(int)(f - 1)]));
                if (b) {
                    Test.iFld = (int)96L;
                } else if (b) {
                    i1 |= (int)((++i2) - l);
                    Test.iFld += (int)(lMeth(Test.fFld, Test.iFld, 122.177F) + i19);
                    b = b;
                    Test.instanceCount = i;
                }
                Test.iFld += (int)(f * f);
                switch ((int)((f % 4) + 91)) {
                case 91:
                case 92:
                    try {
                        i1 = (Test.iFld / 241);
                        i2 = (i2 % 22072);
                        i2 = (i2 % iArr[(int)(f - 1)]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 93:
                    i2 = i;
                    Test.byFld += (byte)f;
                    Test.fFld *= Test.iFld;
                case 94:
                    Test.fFld = iFld1;
                    if (b) {
                        l = Test.iFld;
                    } else if (b) {
                        Test.iFld = i19;
                    } else {
                        Test.fFld -= (float)Test.dFld;
                        for (i20 = 1; i20 < 1; ++i20) {
                            i21 += (i20 - i);
                            l *= (long)Test.dFld;
                        }
                        Test.instanceCount >>= Test.iFld;
                        iFld1 <<= (int)Test.instanceCount;
                    }
                    i19 -= i21;
                default:
                    l = Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
