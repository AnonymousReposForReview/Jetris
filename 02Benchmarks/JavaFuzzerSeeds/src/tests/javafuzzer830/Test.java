package tests.javafuzzer830;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:32:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=145L;
    public static short sFld=-14844;
    public static float fFld=1.595F;
    public static float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.319F);
        FuzzerUtils.init(Test.lArrFld, 18018L);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5, boolean b) {

        float f3=0.230F, fArr[]=new float[N];
        int i6=-1, i7=147, i8=-9, i9=-39523, i10=48, i11=-40161, iArr1[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -123L);
        FuzzerUtils.init(fArr, -26.700F);
        FuzzerUtils.init(iArr1, 0);

        i5 *= (int)f3;
        for (i6 = 4; i6 < 390; i6++) {
            lArr[i6 - 1][i6 + 1] = i7;
        }
        i8 = 1;
        while (++i8 < 165) {
            for (i9 = 1; 10 > i9; ++i9) {
                switch (((i8 >>> 1) % 2) + 78) {
                case 78:
                    i7 = (int)Test.instanceCount;
                    i7 ^= i9;
                    fArr[i9 + 1] += 208;
                    break;
                case 79:
                    if (i11 != 0) {
                    }
                    break;
                default:
                    iArr1[i8 - 1] = i5;
                    iArr1[i8] *= i5;
                    iArr1[i9 - 1] = i7;
                }
                i11 += (((i9 * Test.instanceCount) + i11) - f3);
            }
        }
        iArr1[(i5 >>> 1) % N] |= i9;
        long meth_res = i5 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i6 + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(float f1, int i3, long l) {

        double d=75.121117;
        int i4=9302, iArr[]=new int[N];
        byte by=-50;

        FuzzerUtils.init(iArr, -21);

        for (float f2 : Test.fArrFld) {
            i3 += Integer.reverseBytes(i3);
            l >>= i3;
            i3 *= (int)Test.instanceCount;
            d = (((i3 * -6) - Integer.reverseBytes(62400)) * ((49984 + (i3 -= (int)8L)) - 0.387F));
            i4 = 1;
            do {
                boolean b1=false;
                i3 *= (iArr[i4] + i3);
                i3 += (int)(-((l * by) + -152));
                switch (((i4 % 9) * 5) + 97) {
                case 120:
                    iArr[i4] = i4;
                    iArr[i4] = iMeth1(i3, b1);
                    i3 = i3;
                    i3 ^= Test.sFld;
                case 139:
                    l += (((i4 * f2) + Test.sFld) - i3);
                    i3 = (int)f2;
                    break;
                case 126:
                    l -= -3067032112790530535L;
                    break;
                case 111:
                case 142:
                    i3 += (i4 - i3);
                    break;
                case 114:
                    iArr[i4] >>= i3;
                    break;
                case 137:
                    i3 += i4;
                    break;
                case 105:
                    i3 *= (int)l;
                    break;
                case 98:
                    i3 = by;
                    break;
                default:
                    if (true) continue;
                }
            } while (++i4 < 4);
        }
        long meth_res = Float.floatToIntBits(f1) + i3 + l + Double.doubleToLongBits(d) + i4 + by +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(float f, int i1, int i2) {

        int i12=48808, i13=254, i14=-115, i15=8, i16=-24741, iArr2[]=new int[N];
        float f4=0.59F;
        boolean b2=true;
        byte by1=20;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, 2319);
        FuzzerUtils.init(sArr, (short)-21351);

        Test.instanceCount += (long)(fMeth(f, 7, Test.instanceCount) * i1);
        f = Test.instanceCount;
        Test.sFld |= (short)i1;
        for (i12 = 246; 7 < i12; i12 -= 2) {
            i13 += (int)-52816L;
            for (i14 = 1; 13 > i14; i14++) {
                for (f4 = 2; f4 > 1; f4--) {
                    iArr2[(int)(f4 + 1)] = i13;
                    i13 >>= i16;
                    Test.lArrFld[(int)(f4)] -= i2;
                    if (b2) break;
                    sArr[i12] = (short)Test.instanceCount;
                    i16 -= (int)f4;
                    Test.instanceCount &= Test.instanceCount;
                }
                f = by1;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f4) + i16 +
            (b2 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=30799, i17=41001, i18=-24744, i19=169, i20=0, i21=0, i22=-228, i23=12;
        boolean b3=true;
        double d1=75.8010;

        i = (int)(iMeth(Test.fFld, i, i) * 435980649938681359L);
        i = i;
        i17 = 188;
        while ((i17 -= 3) > 0) {
            i -= -7;
            if (b3) continue;
            i = i;
            iArrFld[i17 + 1] += (int)d1;
            for (i18 = 13; i18 < 397; i18++) {
                i19 <<= i18;
                i += i18;
                i20 = 1;
                while (++i20 < 2) {
                    Test.sFld <<= (short)i;
                    i = i;
                }
                for (i21 = 2; i21 > 1; i21 -= 3) {
                    Test.fFld = -40013L;
                    Test.lArrFld[i17] = i20;
                    iArrFld[i21 - 1] = (int)Test.instanceCount;
                    i -= -250;
                }
                i19 &= i22;
                Test.fFld = Test.instanceCount;
                i += -154;
                Test.sFld += (short)(i18 * i18);
                Test.instanceCount <<= Test.instanceCount;
                try {
                    i19 = (i20 % -536049791);
                    i = (i / -105);
                    iArrFld[i18 + 1] = (i22 / i20);
                } catch (ArithmeticException a_e) {}
            }
            i19 -= (int)d1;
            i23 = 1;
            while (++i23 < 397) {
                i += (int)Test.fFld;
                if (b3) {
                    i ^= 24412;
                } else {
                    i19 += (int)13225L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
