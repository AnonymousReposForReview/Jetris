package tests.javafuzzer1796;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:23:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-224L;
    public static byte byFld=11;
    public static short sFld=-21555;
    public static int iFld=0;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        int i7=14, i8=135, i9=59353, i10=-51, i11=-177, i12=136, iArr1[][]=new int[N][N];
        float f=-8.590F;
        boolean b2=false;
        byte by=-52;
        short s1=-25708;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2081299095L);
        FuzzerUtils.init(iArr1, -7);

        for (i7 = 20; i7 < 328; i7++) {
            f *= Test.instanceCount;
            try {
                i8 = (-1155227652 / i6);
                i8 = (i8 % -150);
                i8 = (Test.iArrFld[i7 + 1] / i6);
            } catch (ArithmeticException a_e) {}
            if (b2) break;
            f *= i6;
            i6 = -5;
            Test.instanceCount ^= 11423;
            switch ((i7 % 1) + 74) {
            case 74:
            }
            lArr[i7 + 1] -= i8;
        }
        for (i9 = 18; i9 < 372; ++i9) {
            switch (((i9 >>> 1) % 8) + 127) {
            case 127:
                by = (byte)i10;
                for (i11 = 1; i11 < 5; i11++) {
                    i8 = i12;
                    i6 *= (int)Test.instanceCount;
                }
                break;
            case 128:
                s1 += (short)i9;
                break;
            case 129:
                Test.iArrFld[i9 + 1] <<= i8;
                break;
            case 130:
                Test.iArrFld[i9 - 1] = i9;
            case 131:
                if (b2) continue;
                break;
            case 132:
                i6 -= i10;
                break;
            case 133:
                iArr1 = iArr1;
                break;
            case 134:
                i8 = i7;
                break;
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + Float.floatToIntBits(f) + (b2 ? 1 : 0) + i9 + i10 + by + i11 + i12 + s1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(boolean b1, int i5) {

        int i13=19278, i14=43487, i15=12, i16=-9, i17=144, i18=10, i19=-96, i20=54734, i21=-3;
        float f1=-2.592F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -82L);

        vMeth2(-2);
        i13 = 1;
        do {
            f1 += (i13 + Test.byFld);
        } while (++i13 < 200);
        for (i14 = 8; i14 < 350; i14++) {
            f1 += i14;
            for (i16 = i14; i16 < 5; ++i16) {
                lArr1[i16 + 1] += Test.sFld;
            }
            for (i18 = 1; i18 < 5; ++i18) {
                for (i20 = i18; 2 > i20; i20 += 2) {
                    Test.instanceCount += (i20 ^ i19);
                    if (false) continue;
                    Test.iFld += (int)-1.712F;
                    Test.iArrFld = Test.iArrFld;
                }
                if (i16 != 0) {
                    vMeth1_check_sum += (b1 ? 1 : 0) + i5 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 +
                        i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                i21 -= i21;
            }
        }
        vMeth1_check_sum += (b1 ? 1 : 0) + i5 + i13 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + i19 +
            i20 + i21 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i, long l, int i1) {

        long l1=-10L;
        int i2=-192, i3=64736, i4=-10, i22=29335, iArr[][]=new int[N][N];
        double d=-1.38085, d1=5.12721;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(fArr, 1.739F);

        for (l1 = 5; l1 < 159; l1++) {
            iArr[(int)(l1 + 1)] = (iArr[(int)(l1)] = (iArr[(int)(l1)] = (iArr[(int)(l1)] = iArr[(int)(l1)])));
            i1 *= (int)d;
            for (i3 = 1; i3 < 10; ++i3) {
                b = b;
                Test.instanceCount >>>= (i4++);
                vMeth1(b, Test.iFld);
                for (d1 = i3; d1 < 2; ++d1) {
                    fArr = fArr;
                    i22 = (int)Test.instanceCount;
                    i += -12;
                    i22 &= Test.sFld;
                }
                i1 += (((i3 * i1) + Test.byFld) - i4);
                try {
                    i1 = (i3 / 16920);
                    Test.iArrFld[(int)(l1)] = (51122 / i22);
                    i22 = (iArr[i3][i3 + 1] / Test.iFld);
                } catch (ArithmeticException a_e) {}
                iArr[i3 + 1][(int)(l1)] -= (int)l1;
            }
        }
        vMeth_check_sum += i + l + i1 + l1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i22 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        short s=21495;
        double d2=2.85523, d3=0.121133;
        int i24=-11, i25=-59397, i26=-95, i27=8239, i28=-16366, i29=-32755, i30=5804;
        float f2=0.174F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        s += (short)12L;
        vMeth(Test.iFld, Test.instanceCount, Test.iFld);
        Test.iFld = (int)Test.instanceCount;
        for (int i23 : Test.iArrFld) {
            Test.instanceCount *= s;
            for (d2 = 2; d2 < 63; ++d2) {
                f2 += (5L + (d2 * d2));
                s = (short)i23;
                i25 = 1;
                while (++i25 < 2) {
                    i23 = i25;
                    d3 += i23;
                    Test.iFld += i25;
                    i24 = (int)Test.instanceCount;
                    bArr[(i24 >>> 1) % N] = bFld;
                }
                i23 += (int)0L;
                f2 -= i24;
            }
        }
        Test.iFld += i24;
        for (i26 = 5; i26 < 209; ++i26) {
            Test.instanceCount += i24;
        }
        i28 = 1;
        while (++i28 < 333) {
            for (i29 = 76; i29 > 1; --i29) {
                Test.iFld -= i29;
                Test.iArrFld[i29 + 1] = i27;
                Test.iArrFld[i28 + 1] += 2;
                i24 *= i24;
                Test.instanceCount -= s;
                Test.instanceCount += 56212;
                lArrFld[i28] += 77;
                i27 *= (int)94.76546;
                Test.instanceCount += (((i29 * i30) + Test.instanceCount) - Test.iFld);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
