package tests.javafuzzer2215;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:22:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=238L;
    public int iFld=51554;
    public static double dFld=2.24476;
    public static short sFld=19397;
    public static float fFld=118.460F;
    public static volatile boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)56);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l2, int i3) {

        float f1=0.668F;
        int i4=-46805, i5=50785, i6=-10, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -7);

        i3 = (int)f1;
        i4 = 1;
        while (++i4 < 314) {
            iArr[i4 - 1] -= i3;
            iArr[i4 - 1] = (int)Test.instanceCount;
        }
        for (i5 = 16; i5 < 358; i5++) {
            Test.instanceCount &= i3;
            if (true) break;
            Test.dFld += i3;
            l2 -= i5;
            i3 &= (int)Test.instanceCount;
            i6 += i5;
            f1 = Test.sFld;
            i6 += i5;
        }
        Test.instanceCount -= (long)f1;
        iArr[(i4 >>> 1) % N] = -4;
        long meth_res = l2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l, long l1) {

        double d1=0.57227, dArr[]=new double[N];
        float f=2.122F;
        int i7=-10, i8=254, i9=-5, iArr1[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, -2.78225);
        FuzzerUtils.init(sArr, (short)20237);
        FuzzerUtils.init(iArr1, -189);

        d1 += (dArr[(11 >>> 1) % N] - ((d1 * f) * (13.101224 - iMeth1(l, i2))));
        i2 *= i2;
        sArr[(i2 >>> 1) % N] *= (short)i2;
        Test.instanceCount = l1;
        iArr1[(i2 >>> 1) % N] = i2;
        i7 = 1;
        while (++i7 < 185) {
            i2 += (i7 | i2);
            i2 = -24391;
            i2 -= (int)d1;
            Test.instanceCount >>>= Test.instanceCount;
            for (i8 = 1; i8 < 9; i8++) {
                i9 = i2;
                l1 <<= i7;
                iArr1 = iArr1;
                i9 += i8;
            }
        }
        vMeth_check_sum += i2 + l + l1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i7 + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i, byte by, double d) {

        int i1=130, i10=-94, i11=13, i12=-14584, iArr2[]=new int[N];
        float f2=0.65F, f3=93.672F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 49939);
        FuzzerUtils.init(lArr, 2L);

        i1 += (int)(((d + 16333) * (Test.instanceCount + i1)) + Test.byArrFld[(i >>> 1) % N]);
        vMeth(i, Test.instanceCount, Test.instanceCount);
        i10 = 1;
        while (++i10 < 159) {
            for (i11 = i10; 10 > i11; ++i11) {
                i1 >>= i10;
                i12 += (int)Test.instanceCount;
                iArr2[(i1 >>> 1) % N] = (int)f2;
                i *= i12;
                if (b) continue;
                f3 = 1;
                do {
                    i1 *= i10;
                    iArr2 = FuzzerUtils.int1array(N, (int)46);
                } while (++f3 < 1);
            }
            i12 = i1;
            i1 *= i;
            lArr[i10 + 1] += i11;
        }
        long meth_res = i + by + Double.doubleToLongBits(d) + i1 + i10 + i11 + i12 + Float.floatToIntBits(f2) + (b ? 1
            : 0) + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by1=118;
        int i13=6, i14=87, i15=35, i16=-2, i17=133, i18=110, i19=-134, i20=-3, i21=-189;

        iArrFld[(iFld >>> 1) % N] *= (-212 - (-(++iArrFld[(-220 >>> 1) % N])));
        iFld = iFld;
        iFld = (iMeth(iFld, by1, Test.dFld) - iFld);
        for (i13 = 8; 188 > i13; ++i13) {
            if (Test.bFld) {
                iArrFld[i13 - 1] = i14;
                i14 = (int)-39.14F;
                iFld += (i13 - Test.instanceCount);
            } else if (Test.bFld) {
                for (i15 = 139; 2 < i15; i15 -= 3) {
                    Test.fFld = i16;
                    i14 *= (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    iFld = by1;
                }
            } else if (Test.bFld) {
                iArrFld[i13 - 1] = i13;
                for (i17 = 4; 139 > i17; ++i17) {
                    i14 &= (int)-32847L;
                    for (i19 = 1; i19 < 2; i19++) {
                        i16 >>= (int)Test.instanceCount;
                        if (Test.bFld) {
                            i14 = Test.sFld;
                        } else if (Test.bFld) {
                            iArrFld = FuzzerUtils.int1array(N, (int)2);
                            Test.instanceCount += Test.instanceCount;
                            iArrFld[i13 - 1] = iFld;
                        } else {
                            Test.fFld = i16;
                        }
                        try {
                            iFld = (i16 / 1845029880);
                            i16 = (i15 % i14);
                            i16 = (52602 / i16);
                        } catch (ArithmeticException a_e) {}
                        i14 = (int)Test.instanceCount;
                        i20 = i14;
                        iFld += (((i19 * i20) + i21) - Test.instanceCount);
                    }
                    by1 *= (byte)Test.instanceCount;
                    iArrFld[i17 - 1] *= (int)Test.dFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
