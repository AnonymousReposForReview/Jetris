package tests.javafuzzer1512;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:56:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-29522L;
    public volatile double dFld=2.54055;
    public static byte byFld=52;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth(int i6, byte by) {

        float f=0.741F;

        f *= (--i6);
        long meth_res = i6 + by + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i12, int i13, double d2) {

        int i14=13, i15=170, i16=-34546, iArr1[]=new int[N];
        byte by2=119;
        float f3=77.873F;

        FuzzerUtils.init(iArr1, -209);

        i14 = 1;
        while (++i14 < 391) {
            i12 += (((i14 * i13) + Test.instanceCount) - i12);
            for (i15 = 4; i15 > 1; --i15) {
                i12 += i15;
                i16 = i14;
                i12 = i14;
                switch (((i14 % 10) * 5) + 63) {
                case 94:
                    Test.instanceCount += (i15 * i15);
                    by2 = (byte)i14;
                    break;
                case 81:
                    i13 += i12;
                    i16 = (int)f3;
                    if (i14 != 0) {
                        vMeth1_check_sum += i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + by2 +
                            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    if (i12 != 0) {
                        vMeth1_check_sum += i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + by2 +
                            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                case 103:
                    i12 = (int)f3;
                    i16 += (i15 * Test.instanceCount);
                    break;
                case 77:
                    i13 += i14;
                    break;
                case 75:
                    i12 = -59615;
                    break;
                case 96:
                    i13 = (int)Test.instanceCount;
                case 95:
                    f3 *= 2348272930849991428L;
                case 79:
                    i16 += i13;
                case 111:
                    try {
                        i13 = (i14 % 7472);
                        iArr1[i14 + 1] = (iArr1[i15 + 1] % -1899268314);
                        i13 = (-20766 % i16);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 112:
                    Test.instanceCount += i15;
                    break;
                }
            }
        }
        vMeth1_check_sum += i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + by2 + Float.floatToIntBits(f3)
            + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i9, int i10) {

        double d1=-1.38834, dArr[]=new double[N];
        int i11=145, i17=-50, i18=42783, i19=8;
        float f4=9.649F;
        boolean b1=false;

        FuzzerUtils.init(dArr, -28.14273);

        d1 *= (-Test.instanceCount);
        if (b1) {
            i11 = 174;
            do {
                vMeth1(i9, i10, d1);
                for (i17 = 9; i17 > 1; i17--) {
                    i19 = 2;
                    do {
                        Test.instanceCount -= Test.instanceCount;
                        Test.instanceCount = 101;
                        i10 -= (int)d1;
                    } while (--i19 > 0);
                }
                f4 -= i18;
                dArr[i11 + 1] += -13;
                Test.iArrFld[i11] += i19;
                Test.instanceCount *= i19;
            } while (--i11 > 0);
        }
        long meth_res = i9 + i10 + Double.doubleToLongBits(d1) + i11 + i17 + i18 + i19 + Float.floatToIntBits(f4) + (b1
            ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l) {

        int i2=166, i3=9, i4=-10, i7=-14, i8=19828, i20=0, iArr[]=new int[N];
        float f1=0.770F, f2=-29.887F, fArr[]=new float[N];
        double d=13.98986;
        boolean b2=false;
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 9924);
        FuzzerUtils.init(fArr, -1.790F);
        FuzzerUtils.init(byArr, (byte)107);
        FuzzerUtils.init(lArr, 14L);

        switch ((((((int)(-8716877132159320636L - (i2--))) >>> 1) % 10) * 5) + 12) {
        case 57:
            for (i3 = 13; i3 < 360; ++i3) {
                byte by1=-10;
                switch (((i3 % 2) * 5) + 9) {
                case 14:
                    l = iMeth(--i2, (byte)((i4 + by1) - (i4 * -178)));
                    f1 = 1;
                    while (++f1 < 5) {
                        boolean b=true;
                        if (b) break;
                        for (i7 = 1; i7 < 1; ++i7) {
                            d -= (++i2);
                            f2 *= (-iMeth((int)(8 * fArr[(int)(f1 - 1)]), by1));
                            Test.instanceCount *= Test.instanceCount;
                        }
                        iArr[(int)(f1)] &= (int)(fMeth(i3, i3) + i4);
                        try {
                            i4 = (i3 % i8);
                            Test.iArrFld[(int)(f1)] = (i7 % i3);
                            i8 = (i7 / -243);
                        } catch (ArithmeticException a_e) {}
                        if (i8 != 0) {
                            vMeth_check_sum += l + i2 + i3 + i4 + Float.floatToIntBits(f1) + i7 + i8 +
                                Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i20 + (b2 ? 1 : 0) +
                                FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        i8 <<= i8;
                        d = i3;
                    }
                    break;
                case 13:
                    l <<= i7;
                default:
                    i8 += (i3 - i2);
                }
            }
            break;
        case 36:
        case 43:
            i2 = i3;
            break;
        case 34:
            l -= i8;
            break;
        case 14:
            f2 -= i8;
        case 20:
            Test.instanceCount -= i20;
            break;
        case 23:
            l = 183;
            break;
        case 39:
            lArr = lArr;
            break;
        case 62:
            b2 = b2;
            break;
        case 46:
            i8 = (int)f2;
            break;
        default:
            Test.instanceCount /= (Test.instanceCount | 1);
        }
        vMeth_check_sum += l + i2 + i3 + i4 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + i20 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-36225, i1=-9, i21=30, i22=-42168, i23=41018, i24=-10722, i25=-39652, i26=91, i27=176, i28=-196, i29=-6;
        float f5=38.839F, fArr1[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, 0.683F);
        FuzzerUtils.init(lArr1, 3L);

        for (i = 12; i < 218; ++i) {
            vMeth(Test.instanceCount);
            i1 += (i - Test.instanceCount);
            i1 = (int)f5;
            i1 >>= i1;
            for (i21 = 3; i21 < 122; i21++) {
                boolean b3=true;
                i23 = 1;
                do {
                    i1 += i23;
                    dFld -= dFld;
                } while (++i23 < 2);
                if (b3) {
                    f5 += i21;
                    for (i24 = i21; i24 < 2; i24++) {
                        Test.iArrFld[i] -= i22;
                        i25 += (((i24 * i24) + i21) - i25);
                    }
                    i25 -= i23;
                    dFld += 1.525F;
                } else {
                    fArr1 = fArr1;
                    if (b3) continue;
                    i1 >>>= 40986;
                }
                for (i26 = 1; 2 > i26; i26++) {
                    i27 += (((i26 * i24) + i21) - i22);
                }
                Test.byFld += (byte)i23;
                for (i28 = 1; i28 < 2; i28++) {
                    f5 += i28;
                    if (b3) break;
                    fArr1[i] *= 3178600152L;
                }
                Test.iArrFld[i] >>= i;
                i1 = 0;
            }
            f5 -= i22;
            lArr1 = lArr1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
