package tests.javafuzzer2419;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:22:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8854451948566211347L;
    public volatile int iFld=67;
    public static int iFld1=-49193;
    public static float fFld=-99.388F;
    public static byte byFld=-10;
    public static double dFld=2.55000;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        double d=0.61307;
        int i2=8, i3=12, i4=-6935, i5=-15896, i6=120, i7=14, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -180);

        d += -1;
        for (i2 = 3; i2 < 162; ++i2) {
            i3 = 184;
            i3 = (int)Test.instanceCount;
            for (i4 = 1; i4 < 10; i4++) {
                boolean b=true;
                i5 += i4;
                if (true) continue;
                if (b) {
                    Test.iFld1 <<= i4;
                    switch (((i3 >>> 1) % 7) + 47) {
                    case 47:
                    case 48:
                        iArr1[i4 + 1] *= Test.iFld1;
                        break;
                    case 49:
                        i5 += (((i4 * i4) + i3) - Test.iFld1);
                        for (i6 = 1; 2 > i6; i6++) {
                            Test.fFld += (i6 * i3);
                        }
                        i3 <<= i3;
                        break;
                    case 50:
                    case 51:
                        iArr1 = iArr1;
                    case 52:
                        if (i4 != 0) {
                        }
                        break;
                    case 53:
                        iArr1[i2] += 154;
                        break;
                    default:
                        if (b) break;
                    }
                } else {
                    if (b) continue;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i8=48198, i9=246, i10=0, i11=-2, iArr2[][]=new int[N][N];
        float f1=-3.500F;
        double d1=-39.78981;
        long l1=8L;
        short s=4678;

        FuzzerUtils.init(iArr2, 86);

        Test.iFld1 <<= (int)lMeth();
        Test.fFld = 0.780F;
        for (i8 = 19; i8 < 347; i8++) {
            iArr2[i8] = iArr2[i8 + 1];
            for (f1 = 1; f1 < 5; f1++) {
                Test.byFld *= (byte)Test.dFld;
                d1 = 1;
                do {
                    Test.iFld1 <<= i9;
                    Test.fFld = Test.iFld1;
                    i9 = i9;
                    iArr2[(int)(f1 + 1)][(int)(d1 + 1)] -= (int)Test.instanceCount;
                    l1 = i11;
                    s -= (short)i11;
                    Test.dFld += -239;
                    i11 += (int)(d1 * d1);
                } while (++d1 < 2);
            }
        }
        vMeth1_check_sum += i8 + i9 + Float.floatToIntBits(f1) + i10 + Double.doubleToLongBits(d1) + l1 + i11 + s +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l, int i1, float f) {

        int i12=1, i13=-211, i14=-9, i15=59156, i16=2, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -8);

        i1 *= i1;
        vMeth1();
        i1 = -36207;
        for (i12 = 193; i12 > 11; i12 -= 2) {
            iArr3 = iArr3;
            i14 = 1;
            do {
                i1 = Test.iFld1;
                iArr3[i14 - 1] -= i1;
                for (i15 = 1; i15 < 1; ++i15) {
                    switch ((i14 % 7) + 17) {
                    case 17:
                        Test.instanceCount -= i16;
                        Test.iFld1 = -218;
                        break;
                    case 18:
                        i13 = Test.iFld1;
                        i16 += (int)f;
                        i1 *= (int)f;
                        break;
                    case 19:
                        Test.instanceCount -= i14;
                    case 20:
                        i16 += (((i15 * i13) + i15) - i14);
                        break;
                    case 21:
                        iArr3 = iArr3;
                        break;
                    case 22:
                        i13 = i16;
                        break;
                    case 23:
                        l -= i12;
                        break;
                    }
                }
            } while (++i14 < 17);
        }
        vMeth_check_sum += l + i1 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=62359, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 46927);

        i = 1;
        do {
            iArr[i + 1] += ((Math.min(i, i) * (-Math.max(i, i))) * ((--iFld) + iArr[i]));
            vMeth(Test.instanceCount, iFld, Test.fFld);
            Test.iFld1 += (i * i);
        } while (++i < 317);
        Test.instanceCount -= Test.iFld1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
