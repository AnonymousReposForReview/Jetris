package tests.javafuzzer2957;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:49:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=130818853567074643L;
    public static short sFld=-7475;
    public float fFld=0.549F;
    public double dFld=82.108886;
    public static boolean bFld=false;
    public float fFld1=32.500F;
    public static float fFld2=2.265F;
    public volatile float fArrFld[][]=new float[N][N];
    public long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 213);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d, double d1, int i3) {

        int i4=-11, i5=17693, i6=-18466, i7=-15620, i8=-35510, i9=-2, i10=55966, i11=-14, i12=50, iArr1[]=new int[N];
        byte by=108;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount |= i3;
        i4 = 1;
        while (++i4 < 223) {
            switch (((i4 % 6) * 5) + 11) {
            case 29:
                for (i5 = 1; 7 > i5; i5++) {
                    Test.instanceCount += i6;
                    i6 &= by;
                }
                for (i7 = i4; i7 < 7; i7++) {
                    Test.instanceCount += (104 + (i7 * i7));
                    Test.instanceCount += (((i7 * i4) + Test.instanceCount) - Test.instanceCount);
                    iArr1[i7 + 1] = i4;
                }
                for (i9 = 7; i9 > 1; i9--) {
                    for (i11 = 1; 2 > i11; ++i11) {
                        iArr1[i4 - 1] -= by;
                        Test.instanceCount = i12;
                        bArr[i11 + 1] = b;
                    }
                }
            case 25:
                i8 = i9;
                break;
            case 28:
                i8 = i4;
                break;
            case 34:
                i3 = i11;
                break;
            case 27:
                i10 += i4;
                break;
            case 22:
                Test.instanceCount += (((i4 * i6) + i9) - i7);
                break;
            default:
                Test.instanceCount = Test.instanceCount;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + by + i7 + i8 +
            i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2) {

        double d2=2.29905;
        int i13=-33, i14=-4, i15=-199, i16=253, i17=180, i18=-143, iArr[]=new int[N];
        byte by1=71;

        FuzzerUtils.init(iArr, 2);

        iArr[(i1 >>> 1) % N] |= -51262;
        iArr[(i2 >>> 1) % N] = Math.max((int)(-(iArr[(i1 >>> 1) % N] = (int)Test.instanceCount)), iMeth(d2, d2, i2));
        for (i13 = 17; i13 < 329; i13++) {
            for (i15 = i13; i15 < 5; i15 += 3) {
                Test.instanceCount = 144;
            }
            by1 *= (byte)i16;
            i14 = i16;
            i14 += (((i13 * i2) + i1) - i15);
            i16 -= i2;
        }
        Test.instanceCount = Test.sFld;
        Test.instanceCount >>>= Test.instanceCount;
        for (i17 = 3; i17 < 155; ++i17) {
            Test.instanceCount = Test.instanceCount;
            iArr[i17] = i1;
        }
        i18 -= i13;
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + by1 + i17 + i18 +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i19=5, i20=6, i21=11982, i22=-223, i23=-235, i24=162, i25=0, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, -7);

        vMeth1(i19, i19);
        for (i20 = 5; i20 < 229; ++i20) {
            i19 = i19;
        }
        if (b1) {
            for (i22 = 12; i22 < 287; ++i22) {
                for (i24 = 6; i24 > 1; i24 -= 3) {
                    i21 -= i23;
                    i23 <<= i19;
                    i23 += (((i24 * Test.instanceCount) + Test.instanceCount) - i22);
                    fFld -= Test.instanceCount;
                    switch ((i22 % 4) + 51) {
                    case 51:
                        i21 += (((i24 * i19) + Test.instanceCount) - i25);
                        i23 += (i24 * i24);
                        break;
                    case 52:
                        i19 += (i24 ^ i22);
                        i25 = i20;
                        break;
                    case 53:
                        iArr2 = FuzzerUtils.int1array(N, (int)-24228);
                        break;
                    case 54:
                        i21 = i21;
                        break;
                    default:
                        Test.instanceCount -= i19;
                    }
                }
            }
        }
        vMeth_check_sum += i19 + i20 + i21 + i22 + i23 + i24 + i25 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        long l=4L;
        int i=35994, i26=-64044, i27=73, i28=12494, i29=0, i30=-17818, i31=21;
        byte by2=7;
        short sArr[]=new short[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(sArr, (short)-4396);
        FuzzerUtils.init(dArr, -113.113993);

        for (l = 6; l < 212; l++) {
            vMeth();
            dFld *= i;
            for (i26 = 7; 122 > i26; i26++) {
                switch ((int)(((l % 7) * 5) + 97)) {
                case 118:
                    fFld = i;
                    if (Test.bFld) break;
                    break;
                case 114:
                    Test.instanceCount = i26;
                case 104:
                    for (i28 = 2; 1 < i28; i28 -= 3) {
                        fArrFld[(int)(l + 1)][i28 + 1] -= i28;
                        dFld = i26;
                        i += (i28 + i27);
                        lArrFld[i28 + 1][i28] += (long)-1.379F;
                        i29 += i;
                        Test.instanceCount = i;
                        Test.iArrFld = Test.iArrFld;
                        sArr[i26 - 1] = (short)Test.instanceCount;
                        Test.instanceCount += (i28 * i28);
                    }
                    i += (int)fFld;
                    i27 = i26;
                    Test.iArrFld[i26 - 1] <<= -4;
                    break;
                case 106:
                    for (i30 = 1; i30 < 2; i30++) {
                        i27 *= i26;
                        i29 = i29;
                        fFld1 += i30;
                        switch ((i30 % 9) + 71) {
                        case 71:
                            Test.instanceCount = i;
                            i = (int)l;
                            break;
                        case 72:
                            Test.instanceCount >>>= l;
                            Test.fFld2 *= Test.sFld;
                            break;
                        case 73:
                            i31 ^= (int)Test.instanceCount;
                            break;
                        case 74:
                            Test.instanceCount = 24L;
                            break;
                        case 75:
                            Test.iArrFld[i30] -= (int)dFld;
                            break;
                        case 76:
                            Test.instanceCount <<= -47638L;
                            break;
                        case 77:
                            i29 += by2;
                            break;
                        case 78:
                            dArr[(int)(l - 1)][(int)(l + 1)] += i31;
                            break;
                        case 79:
                            i31 += i;
                            break;
                        default:
                            i += (((i30 * l) + i28) - i);
                        }
                    }
                    break;
                case 122:
                    i = (int)Test.instanceCount;
                    break;
                case 108:
                    i31 = (int)dFld;
                    break;
                case 112:
                    i29 -= i27;
                default:
                    sArr[(int)(l + 1)] <<= (short)i28;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
