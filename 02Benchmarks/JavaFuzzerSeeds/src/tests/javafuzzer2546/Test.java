package tests.javafuzzer2546;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:26:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2880945031L;
    public static int iFld=136;
    public byte byFld=127;
    public static double dFld=-1.50681;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -125);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=60264, i6=-40622, i7=9, i8=-100, i9=51940;
        long l1=-2849836243L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.767F);
        FuzzerUtils.init(lArr1, -2176731719L);

        for (i5 = 6; 210 > i5; ++i5) {
            i4 = i4;
        }
        Test.instanceCount <<= i4;
        for (i7 = 10; 205 > i7; i7++) {
            i8 = i8;
            l1 = 1;
            while (++l1 < 8) {
                i6 += (int)(3.114F + (l1 * l1));
                i6 >>= i5;
                Test.instanceCount += (-3 + (l1 * l1));
                fArr[(int)(l1 - 1)] = i6;
                lArr1[(int)(l1)] = i4;
                i8 = i6;
                Test.instanceCount >>= i8;
            }
            i6 -= i4;
            Test.instanceCount += (i7 + i9);
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + l1 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(long l) {

        int i1=-24325, i2=-161, i3=41357, i10=-64115, i11=-48381;
        boolean b=false;
        float f1=1.889F;
        double d=-2.111627;
        byte byArr[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)100);
        FuzzerUtils.init(lArr, -3612155460846996697L);

        byArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = (byte)(lArr[(i1 >>> 1) % N]--);
        for (i2 = 13; 251 > i2; ++i2) {
            vMeth1(i1);
            if (false) {
                Test.iArrFld[i2 + 1] *= 18308;
                i1 += (i2 * Test.instanceCount);
            } else if (b) {
                lArr[i2] = i1;
                for (i10 = 1; i10 < 7; i10++) {
                    if (b) break;
                    i11 += i3;
                    switch (((i2 >>> 1) % 10) + 76) {
                    case 76:
                        i11 -= i11;
                        f1 += (-219 + (i10 * i10));
                        Test.iArrFld[i10] += i1;
                        Test.instanceCount = i10;
                        break;
                    case 77:
                        Test.instanceCount = i10;
                        break;
                    case 78:
                        Test.iArrFld[i10] -= (int)d;
                        break;
                    case 79:
                    case 80:
                        i3 += (int)Test.instanceCount;
                    case 81:
                        Test.iArrFld[i2] *= (int)l;
                        break;
                    case 82:
                        l += (i10 + i10);
                        break;
                    case 83:
                        d -= i2;
                        break;
                    case 84:
                        i3 /= (int)(i10 | 1);
                        break;
                    case 85:
                        Test.instanceCount = i2;
                    }
                }
            } else if (b) {
                i1 += i3;
            } else {
                Test.iArrFld[i2] -= i10;
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i10 + i11 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i) {


        vMeth(Test.instanceCount);
        i = i;
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        float f=121.706F, f2=24.24F;
        int i12=137, i13=22, i14=42454, i15=-2, i16=171, iArr[]=new int[N], iArr1[]=new int[N];
        double d1=-2.105002;
        short s=-6163;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 104);
        FuzzerUtils.init(iArr1, -15933);
        FuzzerUtils.init(lArr2, -5L);

        f = 1;
        do {
            Test.instanceCount += (long)f;
        } while (++f < 369);
        iArr = (iArr = (iArr = iArr1));
        for (int smallinvoc=0; smallinvoc<622; smallinvoc++) vSmallMeth(Test.iFld);
        Test.instanceCount -= Test.iFld;
        for (i12 = 17; i12 < 334; i12 += 2) {
            for (d1 = i12; d1 < 159; d1++) {
                Test.instanceCount = i12;
                Test.instanceCount = byFld;
                Test.iArrFld[i12 - 1] += i13;
                Test.iFld = (int)Test.instanceCount;
                try {
                    Test.iFld = (i14 / -1269346465);
                    i13 = (Test.iFld % 60851);
                    Test.iFld = (22871 % Test.iArrFld[(int)(d1)]);
                } catch (ArithmeticException a_e) {}
                s += (short)((long)d1 ^ Test.iFld);
                Test.iFld += Test.iFld;
                if (Test.bFld) {
                    for (i15 = (int)(d1); i15 < 1; ++i15) {
                        f2 += (i15 * i15);
                        Test.iFld += (i15 * i15);
                        if (Test.bFld) {
                            i16 -= 55321;
                        } else if (Test.bFld) {
                            Test.dFld += Test.iFld;
                            if (Test.bFld) break;
                            i13 = (int)0L;
                        } else if (Test.bFld) {
                            i13 >>= i16;
                            if (false) break;
                        } else {
                            Test.instanceCount -= (long)f;
                        }
                        f2 += (i15 * i15);
                        f2 -= f;
                        i16 >>= (int)-708563433L;
                        i14 = -159;
                    }
                } else {
                    lArr2[i12 + 1] = -21826;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
