package tests.javafuzzer2515;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:55:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public int iFld=203;
    public static byte byFld=-71;
    public static boolean bFld=false;
    public float fFld=-40.865F;
    public volatile int iFld1=-54242;
    public int iFld2=-49002;
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 167);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l1) {

        int i4=2, i5=3, i7=-11, i8=55100;
        double d=-3.28618;
        float f2=-2.105F;

        for (i4 = 7; 222 > i4; ++i4) {
            int i6=-5;
            Test.iArrFld[i4] = 32654;
            Test.iArrFld[i4 + 1] = (int)d;
            i3 = Test.byFld;
            i6 -= (int)l1;
            switch (((i4 % 2) * 5) + 36) {
            case 39:
                i3 += (53137 + (i4 * i4));
                for (i7 = 1; i7 < 7; ++i7) {
                    l1 = i3;
                    switch (((i7 % 6) * 5) + 32) {
                    case 51:
                        i6 = i6;
                        break;
                    case 61:
                        i8 = 14;
                        i8 = (int)Test.instanceCount;
                        f2 -= i3;
                        break;
                    case 39:
                        i5 += (((i7 * i8) + Test.instanceCount) - i5);
                        break;
                    case 43:
                        i5 += (int)Test.instanceCount;
                        break;
                    case 36:
                        Test.instanceCount -= i3;
                        break;
                    case 44:
                        i6 += (int)l1;
                        break;
                    default:
                        i3 <<= 14;
                    }
                }
                break;
            case 38:
                i8 += i4;
                break;
            }
        }
        vMeth1_check_sum += i3 + l1 + i4 + i5 + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f2);
    }

    public static int iMeth(float f1, long l) {

        int i9=-12, i10=-18169, i11=-237, i12=207, i13=-2, i14=5, iArr1[]=new int[N];
        float f3=-126.504F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(byArr, (byte)98);

        iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
        vMeth1(i9, -32273L);
        for (i10 = 375; i10 > 9; i10--) {
            i9 += (i10 - Test.instanceCount);
        }
        i12 = 1;
        do {
            iArr1[i12 - 1] = (int)-3234248454L;
            for (i13 = 1; 5 > i13; i13++) {
                f3 = 2;
                while (--f3 > 0) {
                    double d1=63.109101;
                    byArr[i13 - 1] = (byte)-1;
                    if (Test.bFld) {
                        d1 *= i11;
                        i11 <<= (int)l;
                        l *= i14;
                    } else {
                        Test.iArrFld[i12 + 1] = -37;
                    }
                    if (true) continue;
                }
            }
        } while (++i12 < 363);
        long meth_res = Float.floatToIntBits(f1) + l + i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1, int i2) {

        int i15=-23137, i16=-36, i17=33642, i18=-31323, iArr[][]=new int[N][N];
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -233);
        FuzzerUtils.init(fArr, 2.152F);
        FuzzerUtils.init(lArr1, 16395L);

        i *= (int)(Test.instanceCount <<= ((47 + (--i2)) - Test.instanceCount));
        i >>= Math.min(-42376, ++i1);
        iArr[(iFld >>> 1) % N][(iFld >>> 1) % N] = (iMeth(fFld, Test.instanceCount) / 11);
        Test.instanceCount <<= Test.byFld;
        fFld += Test.byFld;
        fArr = fArr;
        switch ((((i >>> 1) % 7) * 5) + 16) {
        case 21:
            for (i15 = 199; i15 > 4; i15--) {
                for (i17 = 1; i17 < 8; ++i17) {
                    i >>= i17;
                    fFld += i1;
                    switch ((i15 % 6) + 69) {
                    case 69:
                        Test.instanceCount = iFld;
                        break;
                    case 70:
                        i1 -= i16;
                        break;
                    case 71:
                        i1 = i17;
                    case 72:
                        i >>= Test.byFld;
                        break;
                    case 73:
                        if (true) continue;
                        break;
                    case 74:
                        iArr[i17 - 1][i15] += (int)Test.instanceCount;
                    }
                }
            }
            break;
        case 32:
            i1 = i16;
            break;
        case 31:
            i18 = (int)fFld;
            break;
        case 30:
            iArr[(13 >>> 1) % N][(i17 >>> 1) % N] ^= (int)Test.instanceCount;
            break;
        case 51:
            iArr[(iFld >>> 1) % N][(2 >>> 1) % N] += -176;
            break;
        case 17:
            iArr[(i17 >>> 1) % N] = iArr[(55793 >>> 1) % N];
            break;
        case 19:
            Test.instanceCount += i17;
            break;
        default:
            iFld1 -= iFld1;
        }
        vMeth_check_sum += i + i1 + i2 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.217F;
        int i19=-48, i20=-8, i21=3, i22=72;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(sArr, (short)3163);

        f *= lArr[(iFld >>> 1) % N];
        Test.byFld = (byte)((Test.instanceCount &= (iFld++)) + ((Test.instanceCount ^ iFld) + iFld));
        iFld ^= (int)Test.instanceCount;
        vMeth(iFld, iFld1, iFld);
        Test.instanceCount = iFld;
        Test.instanceCount += iFld1;
        Test.instanceCount += (long)32.515F;
        Test.iArrFld[(iFld1 >>> 1) % N] = -14951;
        Test.iArrFld[(iFld1 >>> 1) % N] += (int)fFld;
        for (double d2 : dArrFld) {
            switch (((iFld >>> 1) % 9) + 67) {
            case 67:
                lArr[(iFld >>> 1) % N] = 113;
                iFld1 += (int)Test.instanceCount;
                for (i19 = 3; i19 < 63; ++i19) {
                    d2 = 23;
                    iFld1 = (int)Test.instanceCount;
                    Test.instanceCount += -65279;
                    switch (((iFld >>> 1) % 7) + 70) {
                    case 70:
                        for (i21 = i19; i21 < 2; i21++) {
                            iFld += iFld;
                            Test.instanceCount = i22;
                            switch (((i20 >>> 1) % 5) + 51) {
                            case 51:
                                iFld <<= -58609;
                                f *= i20;
                                Test.instanceCount = -63425L;
                            case 52:
                                i22 -= (int)Test.instanceCount;
                                i22 = i20;
                                break;
                            case 53:
                                Test.instanceCount -= i21;
                                iFld1 = (int)Test.instanceCount;
                                i20 += i21;
                                break;
                            case 54:
                                Test.iArrFld[i19 - 1] |= i21;
                                break;
                            case 55:
                                f *= Test.byFld;
                                break;
                            default:
                                iFld1 += (i21 ^ i21);
                            }
                        }
                    case 71:
                        iFld -= i21;
                        break;
                    case 72:
                        i20 = i19;
                        break;
                    case 73:
                        Test.instanceCount &= iFld2;
                    case 74:
                        Test.instanceCount += i22;
                        break;
                    case 75:
                        if (Test.bFld) break;
                    case 76:
                        i22 = iFld;
                    }
                }
            case 68:
                lArr[(10 >>> 1) % N] *= iFld2;
                break;
            case 69:
                Test.iArrFld = Test.iArrFld;
                break;
            case 70:
                Test.instanceCount -= 108;
            case 71:
                Test.instanceCount *= (long)-120.864F;
                break;
            case 72:
                sArr[(i22 >>> 1) % N] = (short)i22;
                break;
            case 73:
                i20 += (int)Test.instanceCount;
            case 74:
                iFld1 += iFld;
                break;
            case 75:
                iFld = iFld;
                break;
            default:
                i20 += (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
