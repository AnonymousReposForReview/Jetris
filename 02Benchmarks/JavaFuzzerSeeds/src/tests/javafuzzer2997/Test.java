package tests.javafuzzer2997;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:38:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5L;
    public static byte byFld=-65;
    public static double dFld=-83.75058;
    public static volatile boolean bFld=false;
    public static byte byArrFld[]=new byte[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)52);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, float f1) {

        int i7=-30838, i8=-32431, i9=5, i10=-10840, i11=-38094, i12=15;
        double d=1.81350;
        short s1=9190;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1026475921L);

        Test.instanceCount = i6;
        i7 = 1;
        do {
            i6 = i6;
            i6 += i7;
            for (i8 = 1; i8 < 7; ++i8) {
                i6 = i9;
                switch (((i8 % 8) * 5) + 119) {
                case 156:
                case 158:
                    i10 = 1;
                    while (++i10 < 2) {
                        lArr1[i10 - 1] -= (long)d;
                        i9 = i6;
                    }
                    Test.instanceCount >>= i10;
                    for (i11 = 1; i11 < 2; ++i11) {
                        i9 |= (int)-1522956314L;
                        i12 -= i6;
                        i9 = (int)Test.instanceCount;
                    }
                    break;
                case 145:
                    i9 *= (int)Test.instanceCount;
                    break;
                case 130:
                    s1 += (short)(((i8 * i12) + i8) - i6);
                    break;
                case 134:
                    if (b) continue;
                case 153:
                    f1 += (i8 + i12);
                    break;
                case 121:
                    i9 += (-20169 + (i8 * i8));
                    break;
                case 120:
                    i9 += -6;
                    break;
                }
            }
        } while (++i7 < 238);
        vMeth1_check_sum += i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12
            + s1 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(long l3, byte by) {

        int i4=-35, i5=133, i13=-242, i14=-7294, iArr[]=new int[N];
        short s=28167;
        float f=9.1003F, f2=-1.956F;
        double d1=0.68578;
        boolean b1=false;

        FuzzerUtils.init(iArr, 34512);

        for (i4 = 6; i4 < 361; i4++) {
            iArr[i4 - 1] ^= (int)(((i4 + Test.instanceCount) + (-s)) + f);
            vMeth1(i4, 1.150F);
        }
        for (i13 = 13; i13 < 364; ++i13) {
            f2 = 1;
            do {
                f -= i14;
                switch ((i13 % 2) + 125) {
                case 125:
                    i5 = (int)f;
                    break;
                case 126:
                    i14 = i5;
                    Test.instanceCount = i5;
                    i14 += (int)d1;
                    Test.byArrFld[(int)(f2)] <<= (byte)l3;
                    break;
                }
                Test.instanceCount += i5;
                if (b1) break;
            } while (++f2 < 5);
            i5 = i5;
        }
        long meth_res = l3 + by + i4 + i5 + s + Float.floatToIntBits(f) + i13 + i14 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i) {

        int i1=254, i2=-103, i3=-21900, i15=-24132, iArr1[]=new int[N];
        long l2=211L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 159L);
        FuzzerUtils.init(iArr1, 115);

        for (long l1 : lArr) {
            for (i1 = 1; i1 < 4; i1++) {
                for (l2 = 1; l2 < 2; ++l2) {
                    i3 <<= (Math.max(iMeth(l1, Test.byFld), i) * i15);
                    i2 -= i3;
                    if (i2 != 0) {
                        vMeth_check_sum += l + i + i1 + i2 + l2 + i3 + i15 + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    Test.dFld = -182;
                    iArr1[i1] = i1;
                    i2 -= i1;
                    i += 47386;
                    i15 -= (int)l2;
                    lArr[i1] += Test.instanceCount;
                }
            }
            i3 -= (int)l2;
        }
        i15 >>= (int)l2;
        Test.dFld *= i15;
        vMeth_check_sum += l + i + i1 + i2 + l2 + i3 + i15 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=-14, i17=-59, i18=-11394, i19=9, i20=54951, i21=191, i22=-197, i23=-51, i24=-23894, i25=14, i26=5;
        float f3=60.765F;
        short s2=25064, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-19250);

        vMeth(Test.instanceCount, -13);
        iArrFld[(11 >>> 1) % N] >>>= (int)Test.instanceCount;
        for (i16 = 3; i16 < 193; ++i16) {
            sArr = sArr;
            i17 -= i17;
            i17 += (int)f3;
            i18 = 1;
            while (++i18 < 132) {
                if (Test.bFld) {
                    i17 += i18;
                    i19 = i16;
                    i17 = i18;
                    i19 += (i18 * i18);
                } else if (false) {
                    i17 += i18;
                    i17 *= (int)Test.instanceCount;
                    for (i20 = 1; i20 < 1; i20++) {
                        Test.dFld = Test.instanceCount;
                        Test.instanceCount = i19;
                        i19 += (((i20 * Test.instanceCount) + Test.instanceCount) - i17);
                    }
                    f3 = -38487;
                } else {
                    switch (((i17 >>> 1) % 1) + 108) {
                    case 108:
                        i17 -= (int)f3;
                        for (i22 = 1; i22 < 1; i22 += 2) {
                            iArrFld[(i24 >>> 1) % N] &= i17;
                            i21 -= (int)Test.instanceCount;
                        }
                        i21 -= i16;
                        i24 += (((i18 * s2) + i25) - i21);
                    }
                    i23 ^= (int)Test.instanceCount;
                    i26 = 1;
                    while (++i26 < 1) {
                        sArr[i18 - 1] += (short)i26;
                        i25 <<= i20;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
