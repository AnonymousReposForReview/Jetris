package tests.javafuzzer1050;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:32:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3194556665L;
    public static int iFld=43661;
    public static boolean bFld=true;
    public static short sFld=7298;
    public static volatile float fFld=2.97F;
    public static byte byFld=-39;
    public int iFld1=50;
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.104984);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {


        Test.iFld *= Test.iFld;
        vMeth1_check_sum += 0;
    }

    public static void vMeth(long l) {

        int i9=19, i10=54, i11=71, i12=-47976, i13=-206, iArr1[]=new int[N];
        byte by=-102;
        double d=-1.44234;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 40566L);
        FuzzerUtils.init(iArr1, 45234);

        for (i9 = 8; 141 > i9; ++i9) {
            for (i11 = i9; i11 < 12; ++i11) {
                lArr = lArr;
                Test.iFld |= (Test.sFld += by);
                d = lArr[i11 + 1];
                vMeth1();
                l -= by;
                l *= l;
                l += i11;
                i13 = 1;
                do {
                    switch (((i12 >>> 1) % 9) + 100) {
                    case 100:
                        i10 = i12;
                        try {
                            i12 = (i11 % 240);
                            Test.iFld = (187 % i9);
                            i10 = (-127 / i13);
                        } catch (ArithmeticException a_e) {}
                        if (i9 != 0) {
                            vMeth_check_sum += l + i9 + i10 + i11 + i12 + by + Double.doubleToLongBits(d) + i13 +
                                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        Test.iFld = (int)l;
                    case 101:
                        iArr1[i11] >>>= Test.sFld;
                        break;
                    case 102:
                        Test.iFld += (89 + (i13 * i13));
                        break;
                    case 103:
                        l *= i10;
                        break;
                    case 104:
                        iArr1 = iArr1;
                    case 105:
                        Test.instanceCount = i12;
                        break;
                    case 106:
                        l *= i11;
                        break;
                    case 107:
                        by += (byte)i9;
                    case 108:
                        Test.instanceCount += (-25296L + (i13 * i13));
                        break;
                    }
                } while (++i13 < 1);
            }
        }
        vMeth_check_sum += l + i9 + i10 + i11 + i12 + by + Double.doubleToLongBits(d) + i13 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(int i6) {

        int i7=1, i8=-93, i14=4, i15=-174;
        double d1=119.108834, d2=-87.116636;
        long l1=-106L;

        for (i7 = 7; i7 < 168; i7++) {
            vMeth(-46694L);
            if (i6 != 0) {
                return ((int)(i6 + i7 + i8 + Double.doubleToLongBits(d1) + i14 + Double.doubleToLongBits(d2) + i15 +
                    l1)) % 2 > 0;
            }
            d1 = Test.sFld;
            i8 += 6;
            i14 = 10;
            do {
                for (d2 = 1; d2 > i7; d2 -= 3) {
                    Test.instanceCount *= Test.instanceCount;
                    i15 += (int)(d2 * d2);
                    Test.instanceCount = i14;
                    i6 -= (int)Test.instanceCount;
                    switch (((i14 % 2) * 5) + 86) {
                    case 90:
                        Test.dArrFld[i14 + 1] += Test.fFld;
                        l1 += (56L + (d2 * d2));
                        l1 += (long)d2;
                        break;
                    case 88:
                    }
                }
            } while (--i14 > 0);
        }
        long meth_res = i6 + i7 + i8 + Double.doubleToLongBits(d1) + i14 + Double.doubleToLongBits(d2) + i15 + l1;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.815F;
        int i=46806, i1=-10, i2=-9, i3=6, i4=-41627, i5=-25018, i16=11263, i17=-103, i18=-16078, iArr[]=new int[N];
        double d3=-80.29292;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 27631);
        FuzzerUtils.init(lArr1, -3204023899L);

        Test.iFld *= Test.iFld;
        iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-9))));
        Test.iFld += (int)(f--);
        for (i = 6; 172 > i; i++) {
            for (i2 = 2; i2 < 151; i2++) {
                for (i4 = 1; i4 < 2; ++i4) {
                    Test.bFld = (!bMeth(i3));
                    iArr[i] += i1;
                }
                i16 = 1;
                while (++i16 < 2) {
                    lArr1[i2] = i2;
                    Test.iFld += i4;
                    Test.instanceCount = i5;
                    i3 >>= Test.iFld;
                    Test.instanceCount += (i16 * i16);
                }
                for (i17 = i2; i17 < 2; ++i17) {
                    Test.byFld = (byte)Test.instanceCount;
                    lArr1 = lArr1;
                    f += -39424;
                    lArr1[i17 - 1] <<= i1;
                    Test.iFld += -5;
                    f += (i17 * i17);
                    i3 -= i4;
                    i1 = i5;
                    Test.instanceCount = Test.iFld;
                    i5 += (i17 + i5);
                }
                Test.iFld += (i2 * i2);
                Test.sFld = (short)-55.48805;
                Test.iFld >>= Test.sFld;
            }
        }
        iFld1 = 3;
        d3 = f;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
