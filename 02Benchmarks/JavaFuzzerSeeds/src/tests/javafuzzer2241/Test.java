package tests.javafuzzer2241;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:47:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-62919L;
    public static byte byFld=33;
    public static short sFld=-22304;
    public float fFld=27.616F;
    public double dFld=2.81877;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 195L);
        FuzzerUtils.init(Test.iArrFld, -159);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i) {

        int i1=-91, i2=-8, i3=-9, i4=9, i5=10932, i6=47126, i7=135, i8=-18, iArr[]=new int[N];
        double d=97.47919;
        boolean b1=false;
        float f=0.329F, fArr[]=new float[N];
        short s=-9120;

        FuzzerUtils.init(fArr, 37.672F);
        FuzzerUtils.init(iArr, 4);

        for (i1 = 2; i1 < 137; i1++) {
            for (i3 = 1; i3 < 12; ++i3) {
                for (i5 = 2; i5 > i3; i5 -= 3) {
                    d = i5;
                    if (i5 != 0) {
                        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + (b1 ? 1 : 0)
                            + i7 + i8 + Float.floatToIntBits(f) + s +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    if (b1) break;
                    i2 = i;
                    fArr[i5] -= Test.instanceCount;
                    iArr[i3 + 1] = -7;
                }
                for (i7 = 1; i7 < 2; i7++) {
                    i8 = (int)Test.instanceCount;
                    f = Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    i %= (int)(i6 | 1);
                    Test.instanceCount += (((i7 * f) + s) - Test.instanceCount);
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i7 + i8 +
            Float.floatToIntBits(f) + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i9=23, i10=61570, i11=-149, i12=59270, iArr1[]=new int[N];
        boolean b2=true;
        float f1=94.775F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -114.40137);
        FuzzerUtils.init(iArr1, -29);

        vMeth1(i9);
        dArr = dArr;
        for (i10 = 8; 318 > i10; ++i10) {
            Test.instanceCount *= Test.instanceCount;
            Test.byFld += (byte)(((i10 * i11) + Test.instanceCount) - Test.byFld);
            Test.sFld += (short)i10;
            iArr1[i10 - 1] += (int)Test.instanceCount;
            i11 += i10;
            switch (((i10 % 8) * 5) + 103) {
            case 118:
                i9 *= i11;
                if (b2) break;
                i11 = i10;
                i12 = 1;
                while ((i12 += 3) < 5) {
                    i9 += (i12 * i10);
                }
                break;
            case 112:
                Test.instanceCount = i12;
                break;
            case 116:
                try {
                    i11 = (i12 % -5724);
                    i9 = (i12 / 664206388);
                    i9 = (i10 % 153);
                } catch (ArithmeticException a_e) {}
                break;
            case 107:
                Test.sFld /= (short)(i11 | 1);
                break;
            case 104:
                f1 -= 6;
                break;
            case 128:
                iArr1[i10 + 1] |= i9;
                break;
            case 139:
                iArr1[i10 + 1] = i9;
            case 137:
                i11 = (int)Test.instanceCount;
                break;
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + (b2 ? 1 : 0) + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth() {

        int i13=6216, i14=-195, i15=-34, i16=-13152, i17=-35, iArr2[]=new int[N];
        float f2=1.658F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 26196L);
        FuzzerUtils.init(fArr1, 118.633F);
        FuzzerUtils.init(iArr2, 20173);

        if (false) {
            vMeth();
        }
        for (i13 = 12; i13 < 283; i13++) {
            i14 += i14;
            i14 += i13;
            i14 = (int)Test.instanceCount;
        }
        lArr[(i14 >>> 1) % N] += -165L;
        fArr1[(-1 >>> 1) % N] *= i13;
        for (i15 = 8; i15 < 331; i15++) {
            i14 += i15;
            i17 = 1;
            while (++i17 < 5) {
                i14 -= (int)f2;
                i14 &= Test.sFld;
                iArr2 = iArr2;
                Test.instanceCount *= Test.instanceCount;
            }
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i18=117, i19=30143, i20=-250, i21=-25965, i22=-5915, i23=6, i24=14379;
        long l=-4L;
        float f3=-2.575F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -2.1547);

        b = bMeth();
        for (i18 = 19; i18 < 310; ++i18) {
            i20 = 86;
            do {
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount += -27;
                i19 = i19;
                Test.lArrFld = Test.lArrFld;
            } while (--i20 > 0);
            switch (((i18 % 5) * 5) + 51) {
            case 72:
                i19 -= i20;
                break;
            case 60:
                for (i21 = 2; i21 < 86; ++i21) {
                    Test.instanceCount = Test.instanceCount;
                    fFld -= i19;
                    Test.iArrFld[i18 + 1] <<= i18;
                    if (true) continue;
                    Test.instanceCount += i19;
                    i19 <<= 39513;
                    i22 += (int)dFld;
                }
                dArr1[i18 - 1] *= Test.instanceCount;
                break;
            case 55:
                Test.instanceCount = l;
                try {
                    i19 = (-4245 / Test.iArrFld[i18 - 1]);
                    i22 = (Test.iArrFld[i18] / i19);
                    i22 = (36473 % i19);
                } catch (ArithmeticException a_e) {}
                for (i23 = 2; i23 < 86; i23++) {
                    f3 = 1;
                    do {
                        fFld = i20;
                        i22 -= (int)Test.instanceCount;
                        Test.iArrFld[i23] -= (int)dFld;
                        Test.byFld = (byte)i19;
                        Test.instanceCount += (long)(f3 * f3);
                        Test.iArrFld[i18] -= (int)Test.instanceCount;
                        i22 = i22;
                        i22 = i20;
                    } while (++f3 < 2);
                }
                break;
            case 74:
                Test.iArrFld[i18 + 1] += (int)Test.instanceCount;
                break;
            case 53:
                i24 += (((i18 * i24) + i21) - f3);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
