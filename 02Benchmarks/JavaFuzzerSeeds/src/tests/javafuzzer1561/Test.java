package tests.javafuzzer1561;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:57:28 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1445L;
    public static boolean bFld=true;
    public static float fFld=-119.352F;
    public static double dFld=-1.20124;
    public static byte byFld=-59;
    public static volatile float fArrFld[][]=new float[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.593F);
        FuzzerUtils.init(Test.iArrFld, 253);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        int i9=-12, i10=5, i11=4, i12=-9, iArr1[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 7110);
        FuzzerUtils.init(sArr, (short)-27631);

        i8 <<= i8;
        iArr1[(i8 >>> 1) % N] -= 5;
        i8 = i8;
        Test.instanceCount = i8;
        i8 <<= (int)Test.instanceCount;
        i9 = 161;
        do {
            for (i10 = 1; i10 < 10; i10++) {
                i8 += (int)(-145L + (i10 * i10));
                sArr[i10 - 1] += (short)Test.instanceCount;
                i12 = 1;
                while (++i12 < 2) {
                    if (Test.bFld) {
                        iArr1[i9 - 1] = 0;
                    } else if (false) {
                        i8 -= i12;
                        i8 >>>= (int)Test.instanceCount;
                        if (Test.bFld) continue;
                    }
                }
            }
        } while (--i9 > 0);
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(double d) {

        int i6=-30532, i7=248, i13=-2, i14=862, i15=-128;
        long l=40884L, lArr[]=new long[N];
        short s=-3533;

        FuzzerUtils.init(lArr, 8394497003962323734L);

        for (i6 = 2; i6 < 135; i6 += 3) {
            Test.fArrFld[i6 - 1][i6] += (float)(Math.sqrt(i6 * 8869) * i6);
            vMeth1(0);
            for (l = 1; l < 35; l++) {
                switch (((-38326 >>> 1) % 7) + 9) {
                case 9:
                    for (i14 = 1; i14 < 2; i14 += 3) {
                        i7 = (int)Test.instanceCount;
                        i13 += (((i14 * i7) + Test.instanceCount) - i15);
                        i13 += i14;
                        if (Test.bFld) break;
                        Test.fFld *= i13;
                        i7 = i6;
                        s = (short)Test.fFld;
                        Test.fFld -= i14;
                        i15 += (int)d;
                    }
                    break;
                case 10:
                    Test.fArrFld[i6][i6 - 1] = i7;
                    break;
                case 11:
                    if (Test.bFld) continue;
                    break;
                case 12:
                    lArr[i6 + 1] = -28564;
                    break;
                case 13:
                    Test.instanceCount *= i15;
                    break;
                case 14:
                    i13 &= i15;
                case 15:
                    Test.instanceCount <<= i6;
                    break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i6 + i7 + l + i13 + i14 + i15 + s + FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth() {

        int i1=14, i2=-145, i4=-3707, i5=196, i16=-12, i17=1, i18=-11, i19=25387, iArr[]=new int[N];
        long l1=-6L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 43169);
        FuzzerUtils.init(lArr1, 43074L);

        for (i1 = 7; i1 < 372; ++i1) {
            i2 += (53818 + (i1 * i1));
        }
        for (i4 = 13; i4 < 239; i4++) {
            i2 |= (93 - iArr[i4]);
            vMeth(Test.dFld);
            lArr1[i4 + 1] = i4;
        }
        i2 = (int)Test.instanceCount;
        Test.fFld = i4;
        i16 = 1;
        while (++i16 < 390) {
            for (i17 = 1; 4 > i17; ++i17) {
                for (l1 = 1; 2 > l1; l1++) {
                    Test.instanceCount = i2;
                    iArr[i16 - 1] = i17;
                    i19 = i5;
                    i18 = i18;
                }
            }
        }
        long meth_res = i1 + i2 + i4 + i5 + i16 + i17 + i18 + l1 + i19 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-80, i20=-12, i21=16296, i22=13, i23=0, i24=13, i25=-44797, i26=-32453, i27=149, i28=-5, i29=-60679;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -64.94176);

        i -= (int)(dMeth() - Test.fFld);
        for (i20 = 17; i20 < 305; ++i20) {
            switch (((i20 % 1) * 5) + 4) {
            case 8:
                i21 += (i20 - i);
                break;
            default:
                for (i22 = i20; i22 < 87; i22++) {
                    i23 += (i22 * i22);
                    for (i24 = 1; i24 < 1; i24++) {
                        i21 = i23;
                        try {
                            i = (i20 / i20);
                            i23 = (i22 / i25);
                            i25 = (i20 % i22);
                        } catch (ArithmeticException a_e) {}
                        dArr[i20 - 1] += -26486L;
                    }
                    for (i26 = 1; i26 > 1; --i26) {
                        Test.instanceCount = i24;
                        i25 = -48;
                        Test.fArrFld[i22 + 1][i22] = i25;
                        i23 = Test.byFld;
                        Test.iArrFld = Test.iArrFld;
                        i = i26;
                        i21 = i23;
                        if (Test.bFld) continue;
                        Test.instanceCount += (i26 * Test.fFld);
                    }
                    i23 += (int)Test.fFld;
                    Test.iArrFld[i20] -= i23;
                    Test.iArrFld[i22] += i27;
                    if (false) continue;
                    i21 = i26;
                }
                switch ((i20 % 3) + 19) {
                case 19:
                    Test.fFld = Test.instanceCount;
                    break;
                case 20:
                    for (i28 = 4; i28 < 87; ++i28) {
                        Test.instanceCount = 11243;
                        Test.iArrFld[i20 - 1] += i27;
                    }
                    break;
                case 21:
                    Test.iArrFld[i20] <<= i23;
                    break;
                default:
                    Test.fFld += (((i20 * Test.fFld) + i27) - i);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
