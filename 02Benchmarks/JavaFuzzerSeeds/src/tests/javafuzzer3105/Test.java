package tests.javafuzzer3105;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:49:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static short sFld=31413;
    public static boolean bFld=true;
    public volatile long lFld=-11L;
    public static volatile double dFld=-123.62699;
    public float fArrFld[]=new float[N];
    public static float fArrFld1[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld1, -1.38F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=77, i7=-51919, i8=53, i9=7, i10=133, iArr[]=new int[N];
        double d=0.54705, dArr[]=new double[N];
        float f1=0.224F;

        FuzzerUtils.init(iArr, -189);
        FuzzerUtils.init(dArr, 50.61742);

        i6 = i6;
        i7 = 1;
        do {
            d += f1;
            f1 = Test.instanceCount;
            Test.instanceCount = i6;
            for (i8 = 1; i8 < 8; i8++) {
                switch ((i8 % 1) + 112) {
                case 112:
                    f1 -= 58308;
                    i10 = 1;
                    while (++i10 < 2) {
                        try {
                            i9 = (iArr[i8 + 1] / -1751857001);
                            iArr[i8] = (i9 / i6);
                            i6 = (i8 % 244);
                        } catch (ArithmeticException a_e) {}
                        iArr[i7 - 1] >>>= -25;
                        Test.instanceCount -= i9;
                    }
                    i6 ^= i10;
                    dArr[i8 - 1] /= 64831;
                    break;
                default:
                    Test.sFld += (short)i8;
                }
            }
        } while (++i7 < 196);
        vMeth_check_sum += i6 + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1(int i5) {

        int i11=-162, i12=49766, i13=-11, i14=-4, i15=95, i16=50752;
        float f2=2.536F;
        double d1=-78.35452, dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(dArr1, 28.121037);

        vMeth();
        switch (((i5 >>> 1) % 9) + 66) {
        case 66:
            for (i11 = 281; 2 < i11; --i11) {
                if (Test.bFld) {
                    Test.fArrFld1[i11 - 1] = f2;
                    for (i13 = i11; i13 < 6; ++i13) {
                        f2 *= i11;
                        Test.instanceCount += (long)f2;
                        i5 /= (int)(i12 | 1);
                    }
                } else if (Test.bFld) {
                    if (Test.bFld) break;
                    for (i15 = 1; i15 < 6; i15++) {
                        lArr[i11] -= i13;
                        dArr1[i11 + 1] = i13;
                        Test.instanceCount -= (long)d1;
                        i12 -= -1;
                    }
                } else {
                    i16 += i12;
                }
            }
            break;
        case 67:
            d1 *= Test.instanceCount;
            break;
        case 68:
            Test.bFld = Test.bFld;
            break;
        case 69:
            i12 = i5;
        case 70:
            i12 = i12;
        case 71:
            i5 %= -19170;
            break;
        case 72:
        case 73:
            Test.instanceCount = Test.instanceCount;
            break;
        case 74:
            i16 -= i5;
            break;
        }
        long meth_res = i5 + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, float f) {

        int i3=-75, i4=229, i17=-10, i18=12072, i19=9, i20=-40189, iArr1[]=new int[N];
        long l1=230L;
        double d2=53.108969, dArr2[][]=new double[N][N];

        FuzzerUtils.init(iArr1, 43);
        FuzzerUtils.init(dArr2, 115.57148);

        f += (((-42215 + Test.instanceCount) + (i2 >> i2)) - ((Test.instanceCount * i2) - (i2 - f)));
        for (i3 = 3; i3 < 181; ++i3) {
            Test.instanceCount >>= ((Math.max(i2, i3) + iMeth1(i3)) + i3);
            for (i17 = 1; i17 < 9; i17++) {
                iArr1[i17] &= -16267;
                for (l1 = i3; 2 > l1; l1++) {
                    i18 -= i3;
                    i2 -= (int)d2;
                    i18 += (int)(((l1 * i4) + f) - i3);
                    Test.instanceCount -= i19;
                    i20 -= (int)Test.instanceCount;
                    i18 >>= i4;
                    Test.instanceCount += (l1 - i2);
                    dArr2[(int)(l1 - 1)][i17] = i18;
                    iArr1[(int)(l1)] >>>= 30078;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i4 + i17 + i18 + l1 + i19 + Double.doubleToLongBits(d2) +
            i20 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=-206, i22=-38555, i23=-13580, i24=-7, i25=-13, i26=0, i27=41117, i28=-131, iArr2[]=new int[N];
        byte by=-86;
        long l=-102L, lArr1[]=new long[N];
        float f3=-2.247F;
        double d3=1.49885, d5=111.44879, d6=2.49747, d7=117.13833;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -15);
        FuzzerUtils.init(lArr1, -2364016910746453467L);
        FuzzerUtils.init(sArr, (short)31169);

        fArrFld[(i >>> 1) % N] = Test.sFld;
        i -= (int)(((-15004L + (i - -9583L)) + i) + (by - (i - i)));
        for (l = 12; l < 222; l++) {
            iMeth(i1, f3);
        }
        for (int i21 : iArr2) {
            lFld = i;
            f3 -= (float)Test.dFld;
            f3 -= -34L;
            for (i22 = 63; 2 < i22; i22 -= 3) {
                if (Test.bFld) continue;
            }
            lArr1[(i23 >>> 1) % N] *= i21;
            for (i24 = 2; i24 < 63; ++i24) {
                i25 = i21;
                Test.instanceCount += (6 + (i24 * i24));
                Test.dFld *= f3;
            }
            i1 *= (int)Test.dFld;
        }
        if (false) {
            for (d3 = 145; d3 > 4; d3 -= 2) {
                switch ((int)((d3 % 4) + 29)) {
                case 29:
                    for (d5 = 8; 358 > d5; d5++) {
                        iArr2[(int)(d3 - 1)] -= i23;
                        for (d6 = 1; d6 < 2; d6++) {
                            sArr[(int)(d3 - 1)] = (short)l;
                            Test.fArrFld1[(int)(d6 - 1)] *= i24;
                            i1 = i23;
                            f3 = i26;
                            lArr1[(int)(d3 + 1)] <<= i28;
                            i1 = (int)d7;
                        }
                        i -= (int)Test.instanceCount;
                        i26 += i27;
                    }
                    break;
                case 30:
                    Test.fArrFld1[(int)(d3 + 1)] = by;
                    break;
                case 31:
                    i27 &= i28;
                    break;
                case 32:
                    if (Test.bFld) break;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
