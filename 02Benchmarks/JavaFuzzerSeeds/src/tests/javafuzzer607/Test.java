package tests.javafuzzer607;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:29:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=491351621L;
    public static boolean bFld=true;
    public static volatile short sFld=-7848;
    public volatile double dFld=-122.18713;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, double d, int i8) {

        int i9=-13, i10=-6, i11=55, i12=223, i13=3379, i14=11, i15=-169, iArr[]=new int[N];
        float f1=-57.463F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(sArr, (short)-2580);

        i8 = i7;
        d *= Test.instanceCount;
        iArr[(i8 >>> 1) % N] *= i8;
        Test.bFld = Test.bFld;
        for (i9 = 7; 298 > i9; ++i9) {
            i11 = 1;
            do {
                Test.instanceCount -= i11;
                i7 += i11;
                Test.instanceCount >>= i7;
                i7 = (int)f1;
            } while (++i11 < 6);
            i10 -= i7;
            for (i12 = 1; i12 < 6; ++i12) {
                for (i14 = 1; i14 < 2; i14++) {
                    sArr[i12 + 1] = (short)i9;
                    i8 -= i12;
                }
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 +
            i14 + i15 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6, boolean b1) {

        double d1=0.113083, dArr[][]=new double[N][N];
        int i16=-3, i17=7, i18=0, i19=9, i20=-39, i21=-5, iArr1[][]=new int[N][N];
        short s=-20812;
        float f2=1.100F;
        byte by=87;

        FuzzerUtils.init(dArr, 1.107874);
        FuzzerUtils.init(iArr1, -22534);

        dArr[(i6 >>> 1) % N][(i5 >>> 1) % N] -= i6;
        i6 -= (Math.max(++i6, (int)(Test.instanceCount - i5)) + (iMeth(i6, d1, 139) - i6));
        i5 *= i5;
        iArr1[(i6 >>> 1) % N][(i5 >>> 1) % N] -= (int)Test.instanceCount;
        for (i16 = 8; i16 < 157; ++i16) {
            i5 += (i16 ^ s);
            for (i18 = 1; i18 < 11; i18 += 2) {
                i6 &= 4;
                for (i20 = 1; i20 < 3; i20++) {
                    switch ((i18 % 6) + 97) {
                    case 97:
                        i6 = i16;
                        f2 *= i18;
                        i5 = s;
                        break;
                    case 98:
                        iArr1[i18][i20] = (int)Test.instanceCount;
                        Test.instanceCount = i6;
                        break;
                    case 99:
                        i19 *= i20;
                        break;
                    case 100:
                        i17 += 99;
                        break;
                    case 101:
                        i5 += (i20 - i17);
                    case 102:
                        d1 = by;
                        break;
                    default:
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i6 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i16 + i17 + s + i18 + i19 + i20 + i21
            + Float.floatToIntBits(f2) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(boolean b, int i3) {

        float f=52.797F, f3=2.260F, fArr[]=new float[N];
        int i4=-10, i22=-1, i23=21036, i24=-107;
        long l=3472391908L;

        FuzzerUtils.init(fArr, -1.820F);

        for (f = 290; f > 14; f--) {
            switch ((((((int)(Test.instanceCount + Test.instanceCount)) >>> 1) % 6) * 5) + 27) {
            case 54:
                vMeth(1, i3, Test.bFld);
                i22 = 6;
                while (--i22 > 0) {
                    i4 += (((i22 * i3) + i22) - i3);
                    i3 += i22;
                    fArr[(int)(f)] = i22;
                    i4 += i22;
                    i4 = i4;
                    i3 += (i22 ^ i22);
                    Test.instanceCount = i4;
                    for (i23 = 1; i23 < 1; i23++) {
                        if (Test.bFld) {
                            Test.instanceCount += (((i23 * i3) + Test.sFld) - i22);
                            if (b) continue;
                        } else {
                            if (b) break;
                        }
                    }
                }
                break;
            case 40:
                i24 -= i22;
                break;
            case 41:
                l -= i3;
                break;
            case 33:
                Test.iArrFld[(int)(f)] -= (int)-5696027073372901384L;
            case 43:
                f3 += (f * f);
            case 55:
            default:
                f3 -= 49855;
            }
        }
        long meth_res = (b ? 1 : 0) + i3 + Float.floatToIntBits(f) + i4 + i22 + i23 + i24 + l +
            Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-101, i1=-142, i2=-10, i25=8, i26=33515, i27=-2, i28=7, i29=13, i30=1;
        short sArr1[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr1, (short)-1352);
        FuzzerUtils.init(lArr, -111L);

        i = 1;
        while (++i < 383) {
            for (i1 = i; i1 < 66; i1++) {
                if (bMeth(Test.bFld, -197)) continue;
                i2 = Test.sFld;
                for (i25 = 1; 1 < i25; --i25) {
                    i2 >>= 110;
                    Test.instanceCount *= i;
                    sArr1[i - 1] &= (short)7234842247544400557L;
                    i2 *= (int)1.89203;
                    Test.iArrFld[i1 - 1] = i25;
                    Test.instanceCount += (((i25 * i2) + i2) - i25);
                    i26 -= i2;
                    i26 -= i2;
                }
                i2 += (int)Test.instanceCount;
                dFld -= i;
                Test.instanceCount += (i1 ^ i);
                i2 = i1;
            }
        }
        for (i27 = 1; i27 < 391; i27++) {
            Test.instanceCount -= i28;
            lArr[i27 + 1] *= i2;
            try {
                Test.iArrFld[i27] = (i26 % 201);
                i2 = (i2 % i1);
                i2 = (Test.iArrFld[i27] / i2);
            } catch (ArithmeticException a_e) {}
            for (i29 = 2; i29 < 65; i29++) {
                Test.iArrFld[i27 - 1] += (int)Test.instanceCount;
                Test.iArrFld[i27 + 1] = i28;
            }
            i2 += (i27 - Test.instanceCount);
            i30 >>= (int)Test.instanceCount;
            i26 += (i27 - i27);
            i28 &= i28;
            i26 |= 9;
        }
        i30 = -15248;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
