package tests.javafuzzer1178;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:02:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8607199795065139095L;
    public int iFld=173;
    public static volatile int iFld1=249;
    public static int iFld2=26;
    public static double dFld=-1.16723;
    public float fFld=3.614F;
    public static boolean bFld=false;
    public volatile int iFld3=-32213;
    public int iFld4=-13;
    public static byte byArrFld[]=new byte[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-77);
        FuzzerUtils.init(Test.sArrFld, (short)-7841);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i1=-50735, i2=-7419, i3=13, iArr[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        float f1=-2.48F;
        double d=0.2396;

        FuzzerUtils.init(iArr, 3224);
        FuzzerUtils.init(bArr, true);

        iArr[(-247 >>> 1) % N] *= Test.iFld1;
        Test.iFld1 = -22506;
        Test.iFld1 *= (int)7L;
        for (i1 = 2; 192 > i1; ++i1) {
            Test.iFld1 += i1;
            Test.iFld1 += i1;
            Test.iFld1 += -185;
            if (true) break;
            Test.iFld1 ^= i2;
            bArr[i1] = b;
            for (f1 = 8; f1 > 1; --f1) {
                Test.instanceCount = Test.iFld1;
                Test.iFld2 -= (int)Test.instanceCount;
                d = d;
                Test.iFld2 += (int)1637642314L;
            }
        }
        long meth_res = i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i3 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(long l1, long l2, long l3) {

        int i4=50058;
        short s=23731;

        iFld += iMeth1();
        i4 = 1;
        while (++i4 < 304) {
            s = (short)Test.iFld1;
            Test.iFld1 <<= (int)l3;
        }
        Test.iFld2 = Test.iFld2;
        long meth_res = l1 + l2 + l3 + i4 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(long l, int i) {

        float f=2.718F;
        int i5=56491, i6=-235, i7=-116, i8=-6, i9=145, i10=-61324;
        byte by=82;
        short s1=23558;

        i >>>= (int)((l--) - Math.abs(f--));
        lMeth(l, Test.instanceCount, l);
        for (i5 = 17; i5 < 293; i5++) {
            for (i7 = 1; 6 > i7; ++i7) {
                i8 += (i7 - f);
                for (i9 = 1; i9 < 2; i9++) {
                    i10 += Test.iFld1;
                    Test.iFld1 = i;
                    l = l;
                    i += (int)(0L + (i9 * i9));
                    i8 += (((i9 * Test.iFld2) + iFld) - i6);
                    i = by;
                    Test.iFld2 += (i9 - Test.iFld2);
                    Test.dFld = f;
                    iFld += s1;
                }
            }
        }
        long meth_res = l + i + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 + by + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=-39746, i12=134, i13=-123, i14=-7, i16=77, i17=46501, i18=-107, i19=-63221, iArr1[]=new int[N];
        double d1=25.27857;
        short s2=28526;
        long l4=6L;
        float f2=-41.844F;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr1, 3900);
        FuzzerUtils.init(bArr1, true);

        iMeth(Test.instanceCount, 5);
        Test.instanceCount -= Test.iFld1;
        for (i11 = 7; i11 < 126; i11++) {
            Test.instanceCount += (i11 * i11);
        }
        for (i13 = 172; 3 < i13; --i13) {
            for (d1 = 4; d1 < 148; d1++) {
                switch ((int)((d1 % 2) + 126)) {
                case 126:
                    Test.instanceCount = (long)fFld;
                case 127:
                    for (i17 = 1; 2 > i17; ++i17) {
                        i16 = Test.iFld2;
                        fFld += (i17 * i13);
                        iArr1[i17 - 1] = Test.iFld2;
                        iFld = i14;
                        Test.dFld *= fFld;
                        iArr1[i13 + 1] -= iFld;
                    }
                    i18 += i16;
                    Test.instanceCount += (long)(d1 * s2);
                    i16 |= i17;
                    break;
                }
                i19 = 1;
                while (++i19 < 2) {
                    Test.iFld2 += (((i19 * Test.instanceCount) + i11) - iFld);
                    Test.byArrFld[(int)(d1 - 1)] = (byte)l4;
                    if (false) continue;
                }
                switch (((i12 >>> 1) % 9) + 86) {
                case 86:
                    f2 = 1;
                    do {
                        fFld = 4;
                        l4 += (-11 + (f2 * f2));
                        Test.iFld1 += 11;
                        if (Test.bFld) continue;
                        Test.iFld2 -= (int)200L;
                        if (Test.bFld) continue;
                    } while ((f2 += 2) < 2);
                    break;
                case 87:
                    fFld += (float)(((d1 * l4) + i17) - l4);
                case 88:
                    Test.sArrFld = Test.sArrFld;
                    break;
                case 89:
                    iArr1[(int)(d1 - 1)] = s2;
                    break;
                case 90:
                    i16 += (int)21.455F;
                    break;
                case 91:
                    Test.iFld2 <<= iFld3;
                    break;
                case 92:
                    Test.instanceCount -= iFld4;
                case 93:
                    iFld4 += i19;
                    break;
                case 94:
                    bArr1 = FuzzerUtils.boolean1array(N, (boolean)false);
                    break;
                default:
                    i14 = (int)l4;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
