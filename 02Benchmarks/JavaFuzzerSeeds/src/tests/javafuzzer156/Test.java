package tests.javafuzzer156;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:04:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=84L;
    public static int iFld=7;
    public static boolean bFld=true;
    public int iFld1=10;
    public static volatile short sFld=-26208;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 56086);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i5, int i6, int i7) {

        int i8=-18647, i9=11, i10=6, i11=104, i12=42113, iArr[][]=new int[N][N];
        byte by=119;
        float f1=92.965F;
        long l=-4L, lArr[]=new long[N];
        double d1=-16.22508;

        FuzzerUtils.init(iArr, -87);
        FuzzerUtils.init(lArr, 3222742680499789055L);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 5; i9++) {
                by += (byte)i7;
            }
            f1 = 1;
            do {
                iArr[(i6 >>> 1) % N][i8] += i8;
            } while (++f1 < 5);
            lArr[i8] += i10;
        } while (++i8 < 333);
        i6 += i6;
        i11 = 136;
        do {
            if (i7 != 0) {
            }
            for (l = 1; l < 12; l++) {
                d1 *= Test.iFld;
                i12 += (int)l;
                lArr[(-28639 >>> 1) % N] = Test.instanceCount;
                Test.instanceCount >>= i12;
                iArr[(int)(l + 1)][(int)(l + 1)] = i11;
            }
        } while (--i11 > 0);
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + by + Float.floatToIntBits(f1) + i11 + l + i12 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        short s=10137;
        int i13=4, i14=5, i15=-7306, i16=11, iArr1[][]=new int[N][N];
        float f2=70.804F;
        double d2=1.60628;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr1, -49163);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount = Test.iFld;
        Test.iFld = (int)lMeth(Test.iFld, Test.iFld, Test.iFld);
        Test.iFld >>= s;
        iArr1[(Test.iFld >>> 1) % N][(6 >>> 1) % N] = (int)Test.instanceCount;
        i13 = 1;
        do {
            switch ((i13 % 9) + 44) {
            case 44:
                iArr1[i13][i13 - 1] <<= i13;
                for (i14 = i13; 5 > i14; i14++) {
                    i16 = 1;
                    while (++i16 < 1) {
                        i15 -= i14;
                        Test.iFld = (int)-13L;
                        Test.bFld = false;
                        s -= (short)Test.iFld;
                        Test.iFld -= (int)f2;
                        Test.iFld += (((i16 * Test.instanceCount) + f2) - i15);
                    }
                }
            case 45:
                Test.instanceCount >>>= -3;
                break;
            case 46:
                Test.iFld -= i16;
                break;
            case 47:
                bArr = bArr;
                break;
            case 48:
                i15 += 0;
            case 49:
                i15 *= (int)d2;
                break;
            case 50:
                i15 *= i15;
            case 51:
                i15 += (int)Test.instanceCount;
                break;
            case 52:
                Test.iFld += (i13 ^ i13);
                break;
            default:
                Test.iFld = i14;
            }
        } while (++i13 < 331);
        long meth_res = s + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, double d) {

        int i1=3, i2=92, i3=57, i4=48292, i17=6, i18=47984;
        float f=1.764F;
        short s1=-792;

        for (i1 = 1; i1 < 130; i1++) {
            for (i3 = 1; 12 > i3; i3 += 3) {
                f = (Test.instanceCount - i1);
                iMeth1();
                i2 += i3;
                for (i17 = 4; 1 < i17; --i17) {
                    Test.iArrFld[i17 + 1] = i;
                    s1 = (short)i17;
                    Test.iArrFld[i17 + 1] += i18;
                    i4 -= (int)149L;
                    f -= Test.instanceCount;
                    Test.instanceCount += (((i17 * i) + Test.iFld) - f);
                    i4 = (int)Test.instanceCount;
                }
                Test.iArrFld = Test.iArrFld;
            }
            Test.iArrFld = Test.iArrFld;
        }
        long meth_res = i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i17 + i18 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d3=0.108223;
        int i19=13919, i20=209, i21=-2, i22=-89, i23=-187, i24=-145, i25=-14204, i26=-61611, i27=32013, i28=-47119,
            i29=-10, i30=-139;
        float f3=-21.346F, f4=-82.231F;
        byte by1=-2;
        boolean b=false;

        iMeth(-4, d3);
        Test.iArrFld = FuzzerUtils.int1array(N, (int)33873);
        i19 = 129;
        do {
            f3 += (i19 * i19);
            Test.instanceCount >>= Test.iFld;
            Test.iFld -= -5;
            for (f4 = i19; f4 < 194; ++f4) {
                f3 *= i20;
                by1 = (byte)-18106L;
            }
            for (i21 = 3; i21 < 194; i21++) {
                switch (((i19 % 9) * 5) + 6) {
                case 33:
                    Test.iArrFld[i21 - 1] &= i21;
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.iFld *= (int)d3;
                        Test.instanceCount += (i23 * i23);
                        f3 += (-2.202F + (i23 * i23));
                        Test.instanceCount = -135;
                        Test.iArrFld[i23] = i19;
                    }
                case 38:
                    i20 += (((i21 * i23) + Test.instanceCount) - i23);
                    i25 += (i21 * Test.instanceCount);
                    for (i26 = 1; i26 < 2; i26++) {
                        d3 -= iFld1;
                        by1 += (byte)Test.instanceCount;
                        f3 = i24;
                    }
                    break;
                case 27:
                    for (i28 = 1; i28 < 2; i28++) {
                        i30 += (int)d3;
                        if (b) break;
                        i25 *= Test.iFld;
                        Test.bFld = b;
                        by1 += (byte)f4;
                    }
                    break;
                case 23:
                    i30 *= by1;
                    break;
                case 40:
                    Test.sFld += (short)i21;
                    break;
                case 16:
                    f3 = 4;
                    break;
                case 34:
                    Test.iArrFld[i19 - 1] = Test.iFld;
                    break;
                case 15:
                    Test.instanceCount *= i19;
                    break;
                case 11:
                    i27 += (int)-54.116F;
                    break;
                default:
                    f3 += Test.instanceCount;
                }
            }
        } while (--i19 > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
