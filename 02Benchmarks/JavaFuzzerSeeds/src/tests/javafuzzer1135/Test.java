package tests.javafuzzer1135;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:18:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2566169091588715337L;
    public static int iFld=-9;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s, int i2, int i3) {

        float f1=0.936F;
        int i4=-13, i6=73, i7=0, i8=239, iArr1[]=new int[N];
        byte by1=121;

        FuzzerUtils.init(iArr1, -20380);

        Test.instanceCount &= i3;
        for (f1 = 4; f1 < 149; f1++) {
            iArr1[(int)(f1)] = i4;
            switch ((int)(((f1 % 1) * 5) + 53)) {
            case 57:
            default:
                try {
                    i4 = (132 % i4);
                    i4 = (-111 % i4);
                    i2 = (i4 / 10500);
                } catch (ArithmeticException a_e) {}
            }
            i2 = (int)Test.instanceCount;
        }
        for (int i5 : iArr1) {
            i6 = 1;
            while (++i6 < 4) {
                for (i7 = 1; i7 > 1; --i7) {
                    s >>= (short)i6;
                    iArr1[i6 + 1] = i2;
                    i8 += (((i7 * by1) + i5) - i8);
                    Test.instanceCount <<= i6;
                    i3 += (int)Test.instanceCount;
                    i4 -= 10216;
                }
            }
        }
        long meth_res = s + i2 + i3 + Float.floatToIntBits(f1) + i4 + i6 + i7 + i8 + by1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1, float f) {

        short s1=-26385;
        int i9=-227, i10=-5, i11=12, i12=-174, i13=-145, i14=3, i15=20177, iArr2[][]=new int[N][N], iArr3[]=new int[N];
        long l=0L, lArr[]=new long[N];
        byte by2=-56;

        FuzzerUtils.init(lArr, -1039167533L);
        FuzzerUtils.init(iArr2, 2);
        FuzzerUtils.init(iArr3, 15930);

        Test.instanceCount *= (iMeth(s1, i9, i9) + -23454L);
        for (i10 = 6; i10 < 390; i10++) {
            i11 <<= (int)Test.instanceCount;
            lArr[i10 + 1] += (long)d1;
            i11 += (((i10 * Test.instanceCount) + i10) - i11);
            for (i12 = 4; 1 < i12; i12--) {
                iArr2[i12] = iArr3;
                for (l = 1; l < 2; l++) {
                    iArr2[(int)(l)][i12] += i13;
                    s1 *= (short)i11;
                }
                i15 = 1;
                while ((i15 += 3) < 2) {
                    i14 *= i9;
                    by2 = (byte)l;
                    i9 += -11;
                    i11 -= 3954;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + s1 + i9 + i10 + i11 + i12 + i13 + l
            + i14 + i15 + by2 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
    }

    public static void vSmallMeth(double d, int i1) {

        byte by=-24;

        i1 *= ((by--) - ((i1 + i1) - (i1 + i1)));
        vMeth(43.7956, 0.274F);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i1 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=-52869, i16=-117, i17=-43, i18=-55399, i19=5, i20=-39, i21=-3373, iArr[]=new int[N];
        float f2=1.109F;
        boolean b=false;
        double d2=-2.118871;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 19532);
        FuzzerUtils.init(byArr, (byte)35);
        FuzzerUtils.init(sArr, (short)-9138);

        iArr[(200 >>> 1) % N] = iArr[(i >>> 1) % N];
        switch ((((i * i) >>> 1) % 4) + 22) {
        case 22:
            for (int smallinvoc=0; smallinvoc<323; smallinvoc++) vSmallMeth(2.99609, i);
            i += i;
            for (i16 = 8; i16 < 192; i16++) {
                iArr[i16] = i;
                Test.instanceCount = (long)f2;
                i17 += (i16 + f2);
                i -= i;
                i18 = 1;
                while (++i18 < 136) {
                    i17 += (int)Test.instanceCount;
                }
                try {
                    i = (i18 % -12);
                    i = (i18 % iArr[i16]);
                    Test.iFld = (34290 % i16);
                } catch (ArithmeticException a_e) {}
                i19 = 1;
                do {
                    byArr[i19] <<= (byte)88L;
                    try {
                        Test.iFld = (-26383 % Test.iFld);
                        i17 = (i % 32824);
                        i = (i16 % i19);
                    } catch (ArithmeticException a_e) {}
                    for (i20 = 1; i20 < 1; i20++) {
                        Test.iFld /= (int)(i19 | 1);
                        Test.instanceCount += Test.instanceCount;
                        f2 %= -157;
                        Test.iFld += (i20 * i20);
                        switch (((i20 % 6) * 5) + 81) {
                        case 108:
                            i = i20;
                            Test.instanceCount *= i19;
                            i21 -= -248;
                            break;
                        case 86:
                            i21 += (i20 | i17);
                            if (b) break;
                            Test.instanceCount = i17;
                        case 105:
                            i += (i20 | i21);
                            break;
                        case 103:
                            f2 = Test.instanceCount;
                            Test.instanceCount += (i20 - i21);
                            break;
                        case 84:
                        case 94:
                            sArr[i19] -= (short)Test.instanceCount;
                            break;
                        default:
                            Test.iFld *= Test.iFld;
                        }
                    }
                } while (++i19 < 136);
            }
            break;
        case 23:
            d2 -= i21;
            break;
        case 24:
            f2 += i;
        case 25:
            iArr[(i21 >>> 1) % N] = i18;
            break;
        default:
            i &= i20;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
