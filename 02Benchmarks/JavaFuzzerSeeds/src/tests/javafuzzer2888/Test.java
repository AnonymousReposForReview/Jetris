package tests.javafuzzer2888;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:17:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6086102826517225913L;
    public static byte byFld=66;
    public volatile short sFld=8251;
    public static volatile float fFld=22.896F;
    public byte byFld1=-12;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 11074L);
        FuzzerUtils.init(Test.iArrFld, -52000);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i5=5, i6=5, iArr1[]=new int[N];
        float f1=92.376F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -94.485F);
        FuzzerUtils.init(iArr1, 5);

        for (i5 = 2; i5 < 216; i5++) {
            Test.byFld %= (byte)-47.945F;
            fArr[(73 >>> 1) % N] = f1;
            iArr1 = iArr1;
            try {
                i4 = (i5 % -92);
                iArr1[i5 + 1] = (iArr1[i5] / i4);
                i6 = (55300 / i5);
            } catch (ArithmeticException a_e) {}
        }
        vMeth2_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i1=-2, i2=32614, i3=28250, i7=52286, i8=-209, i9=47987, i10=63, iArr[][]=new int[N][N];
        double d=0.40208;
        float f=122.683F;

        FuzzerUtils.init(iArr, -51871);

        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] |= (++i1);
        for (i2 = 4; 158 > i2; ++i2) {
            Test.instanceCount = ((Test.instanceCount--) * (iArr[i2 - 1][(i2 >>> 1) % N] + (i3--)));
            d = (--f);
            vMeth2(i3);
            for (i7 = 1; i7 < 10; i7++) {
                i3 += (((i7 * i1) + i3) - i2);
                Test.lArrFld[i7 + 1] <<= i2;
                i8 += i1;
                for (i9 = 1; i9 < 2; ++i9) {
                    i3 = 19426;
                    iArr[i7 - 1][i7] = i8;
                    i10 += (i9 * i9);
                    Test.instanceCount += i9;
                    Test.instanceCount += i9;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        int i11=219, i12=-1, i14=6, i15=50089, i16=1, i17=8;
        double d1=-9.51062;
        float f2=0.508F;

        vMeth1();
        for (i11 = 319; 18 < i11; --i11) {
            i12 = i11;
            i12 |= i12;
            if (false) {
                for (i14 = i11; 5 > i14; i14++) {
                    Test.iArrFld[i11 + 1] -= (int)Test.instanceCount;
                    d1 += -5L;
                    if (i12 != 0) {
                        vMeth_check_sum += i + i11 + i12 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 +
                            Float.floatToIntBits(f2);
                        return;
                    }
                    for (i16 = 1; i16 < 1; ++i16) {
                        Test.iArrFld[i16 - 1] += (int)f2;
                        Test.iArrFld[i16] *= i16;
                        i17 = i12;
                        i17 += i16;
                        f2 += (((i16 * f2) + Test.instanceCount) - i17);
                    }
                }
            } else {
                f2 = i12;
            }
        }
        vMeth_check_sum += i + i11 + i12 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 +
            Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i18=38929, i19=-9307, i20=-31, i21=-159, i22=-12, i23=247;
        double d2=-5.77707;
        boolean b=false;
        long l=16421326281184923L;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, 2.163F);

        vMeth(i18);
        i18 = (int)Test.instanceCount;
        for (d2 = 9; d2 < 330; d2++) {
            for (i20 = (int)(d2); 78 > i20; i20 += 3) {
                for (i22 = i20; i22 < 1; i22 += 2) {
                    Test.lArrFld[(int)(d2 + 1)] = (long)104.79031;
                    i21 = i23;
                    sFld -= (short)i23;
                    Test.iArrFld[i22] = sFld;
                    sFld = (short)7692;
                    Test.instanceCount += (((i22 * i21) + i23) - i23);
                    i18 += (i22 + sFld);
                    i18 = i20;
                    sFld += (short)i18;
                    switch (((i18 >>> 1) % 2) + 109) {
                    case 109:
                        switch (((i22 % 10) * 5) + 121) {
                        case 129:
                        case 125:
                            i19 = i20;
                            Test.iArrFld[(int)(d2)] = i20;
                            break;
                        case 165:
                            i23 = i21;
                            Test.instanceCount = i21;
                            sFld = (short)i23;
                            break;
                        case 160:
                            i18 += (i22 ^ Test.instanceCount);
                            Test.iArrFld[(int)(d2 + 1)] <<= i18;
                            break;
                        case 135:
                            i23 <<= i19;
                            break;
                        case 171:
                            Test.fFld += (((i22 * Test.fFld) + i21) - Test.instanceCount);
                            if (b) {
                                Test.instanceCount += i22;
                                fArr1[i20][(int)(d2)] = i21;
                                i21 = i19;
                            } else {
                                Test.instanceCount += (i22 | i23);
                            }
                            break;
                        case 130:
                            l += i22;
                        case 126:
                            Test.lArrFld[i20] = l;
                            break;
                        case 149:
                            byFld1 += (byte)(i22 * i20);
                            break;
                        case 170:
                            Test.iArrFld[i22 - 1] -= (int)Test.instanceCount;
                            break;
                        }
                        break;
                    case 110:
                        i18 += (int)(201L + (i22 * i22));
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
