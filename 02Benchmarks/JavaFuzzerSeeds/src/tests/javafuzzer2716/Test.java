package tests.javafuzzer2716;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:08:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=57809L;
    public static double dFld=-108.27713;
    public float fFld=1.1020F;
    public static float fFld1=-92.307F;
    public static int iFld=-14459;
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 108.763F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        int i8=-139, i9=-35, i10=-14, i11=50636, i12=14, i13=245, iArr[]=new int[N];
        boolean b=true;
        long l2=-4357732300337408125L;

        FuzzerUtils.init(iArr, 4680);

        for (i8 = 2; i8 < 395; ++i8) {
            Test.dFld -= Test.instanceCount;
            Test.fFld1 += i7;
            for (i10 = i8; i10 < 4; ++i10) {
                Test.instanceCount *= i9;
                Test.instanceCount += (-12346 + (i10 * i10));
                for (i12 = i8; i12 < 1; ++i12) {
                    if (false) break;
                    if (b) continue;
                    iArr[i8] = (int)Test.fFld1;
                    switch ((((Test.iFld >>> 1) % 1) * 5) + 95) {
                    case 99:
                        l2 -= 54223L;
                        Test.fArrFld[i12] -= i8;
                        break;
                    default:
                        iArr = iArr;
                        Test.fFld1 -= i8;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + l2 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(byte by, int i4, long l1) {

        int i5=-14, i6=5, i14=159, i15=-5, i16=-52, i17=-45908, i18=42;
        short s=-29970;

        for (i5 = 2; i5 < 140; i5++) {
            s += (short)(-(-(i4 *= i5)));
            i6 <<= (-i6);
            Test.bArrFld = (Test.bArrFld = Test.bArrFld);
            i6 += (i5 * i5);
            vMeth1(i5);
        }
        for (i14 = 4; i14 < 210; i14++) {
            i16 = 1;
            do {
                for (i17 = 1; i17 < 1; i17++) {
                    Test.instanceCount >>= l1;
                    i4 = (int)Test.fFld1;
                    i6 = i15;
                    Test.dFld = i14;
                    i15 *= i14;
                    i6 = i16;
                }
            } while (++i16 < 8);
        }
        long meth_res = by + i4 + l1 + i5 + i6 + s + i14 + i15 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, long l) {

        int i2=12, i3=26349, i19=189, i20=-8, i21=36650, i22=54106, iArr1[]=new int[N];
        byte by1=116;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 36218);

        for (i2 = 6; i2 < 396; ++i2) {
            switch ((i2 % 1) + 47) {
            case 47:
                i3 *= Math.max((int)((i3 - Test.fFld1) + iMeth((byte)(-97), i19, l)), i2);
                l >>= i19;
                for (i20 = 1; 4 > i20; ++i20) {
                    Test.instanceCount = i20;
                }
                break;
            default:
                i22 = 4;
                while (--i22 > 0) {
                    i21 = (int)l;
                    i21 <<= by1;
                    i21 = i3;
                    Test.iFld += (i22 * i22);
                    l ^= i21;
                    b1 = b1;
                    Test.iFld += (int)Test.instanceCount;
                    iArr1[i22] = 41;
                }
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + i19 + i20 + i21 + i22 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=11;
        float f=-125.261F;

        Test.dFld -= ((Math.abs(fFld) - (i++)) - ((i--) * (--f)));
        Test.dFld = (i--);
        vMeth(i, Test.instanceCount);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
