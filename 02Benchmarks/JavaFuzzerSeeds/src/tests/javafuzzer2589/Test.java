package tests.javafuzzer2589;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:56:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5603065462531105044L;
    public static byte byFld=59;
    public static int iFld=34376;
    public float fFld=15.558F;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2851101335L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, long l1) {

        int i8=6, i9=-29028, i10=6, i11=11, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -217);

        i7 >>= i7;
        for (i8 = 16; i8 < 305; ++i8) {
            boolean b=false;
            if (b) break;
            for (i10 = 1; i10 < 6; ++i10) {
                if (false) continue;
                iArr1 = iArr1;
                Test.lArrFld[i8][i8 - 1] += Test.instanceCount;
                iArr1[i10 + 1] += i10;
                Test.instanceCount -= i7;
            }
            i7 += (i8 * i8);
            iArr1[i8] += -87;
            if (b) {
                Test.byFld = (byte)-2363;
            }
            l1 >>= i10;
            Test.instanceCount += i8;
        }
        long meth_res = i7 + l1 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(long l, int i6) {

        short s=15242;
        int i12=198, i13=7, i14=11, i15=16, i16=5, i17=-214, iArr2[]=new int[N];
        float f=1.156F;

        FuzzerUtils.init(iArr2, -195);

        s -= (short)iMeth(i6, l);
        i12 = 33959;
        f = s;
        for (i13 = 7; i13 < 281; i13++) {
            iArr2[i13 - 1] += (int)f;
            i6 ^= (int)Test.instanceCount;
            for (i15 = 1; 6 > i15; ++i15) {
                switch ((i15 % 3) + 18) {
                case 18:
                case 19:
                    i17 -= i16;
                    i16 += (-37 + (i15 * i15));
                    switch (((i13 >>> 1) % 3) + 108) {
                    case 108:
                        i14 = i16;
                        i16 >>>= i13;
                        iArr2[i15] >>>= 185;
                        break;
                    case 109:
                        i6 -= Test.byFld;
                        break;
                    case 110:
                        l = -197;
                        break;
                    }
                    break;
                case 20:
                default:
                    iArr2[i13 - 1] = i17;
                }
            }
        }
        long meth_res = l + i6 + s + i12 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i2=42715, i3=-21079, i4=11, i5=-44539, i18=-236, iArr[]=new int[N];
        double d=1.75176, d1=-94.85193;
        byte by=18;
        float f1=3.560F;

        FuzzerUtils.init(iArr, 11);

        for (i2 = 7; i2 < 371; i2++) {
            i3 = (int)(i3 >>= (int)(Math.abs(Test.instanceCount) + (d % (i2 | 1))));
            for (i4 = 1; i4 < 5; ++i4) {
                i3 -= Math.max(iArr[i2 + 1] * by, ++i5);
                Test.instanceCount *= (long)(by - ((i3 * d) - dMeth(13L, i4)));
                Test.instanceCount -= i2;
                i3 >>= i2;
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount += Test.instanceCount;
                for (d1 = i2; d1 < 2; d1++) {
                    i5 = Test.byFld;
                    iArr[(int)(d1 + 1)] = i4;
                    d = Test.instanceCount;
                    i3 >>= 14;
                    Test.iFld += (int)((long)d1 | (long)f1);
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + by + Double.doubleToLongBits(d1) + i18 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-23379, i1=-59382, i19=1, i20=147, i21=-190, i22=94, i23=-1, i24=45512;
        short s1=9249;
        double d2=-2.18556;
        float f2=79.183F;

        for (i = 7; i < 240; i++) {
            vMeth();
            s1 = (short)d2;
            for (i19 = 4; i19 < 108; i19++) {
                d2 = i1;
                Test.iFld += (int)fFld;
                Test.iFld = s1;
            }
        }
        i21 = 1;
        while (++i21 < 312) {
            i22 = 1;
            do {
                switch (((i22 % 1) * 5) + 10) {
                case 15:
                    i1 = (int)-6953072292560983314L;
                    Test.iFld *= i23;
                    d2 = Test.instanceCount;
                    for (f2 = 1; f2 > 1; --f2) {
                        i1 += (int)(((f2 * f2) + i21) - i21);
                        Test.iFld = i24;
                        i1 = 7;
                        Test.instanceCount -= i24;
                        Test.iFld += (int)d2;
                        Test.instanceCount += (long)(f2 * f2);
                        i23 >>= i1;
                        Test.iFld |= 66;
                    }
                    break;
                default:
                    Test.instanceCount += i1;
                    i23 *= i1;
                }
                i23 = (int)Test.instanceCount;
                i1 <<= i20;
                Test.instanceCount = (long)f2;
                fFld -= i19;
                i23 = i1;
                Test.iFld += i20;
            } while (++i22 < 81);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
