package tests.javafuzzer2072;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:37:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3115748413167804536L;
    public static double dFld=112.67356;
    public static short sFld=7737;
    public static float fFld=-86.386F;
    public static int iFld=14597;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 186);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2) {

        boolean b=true;
        int i3=-96, i5=12, i6=10, i7=14, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -352211341L);
        FuzzerUtils.init(iArr1, -134);

        b = b;
        i3 = 1;
        while (++i3 < 262) {
            Test.sFld += (short)i3;
        }
        lArr[(i3 >>> 1) % N] = i2;
        for (int i4 : iArr1) {
            for (i5 = 1; i5 < 4; i5++) {
                lArr[i5] *= i4;
                i6 = (int)Test.dFld;
                Test.fFld = Test.instanceCount;
                i2 += (i5 * i5);
                i4 = i5;
                i6 >>>= (int)3725874083L;
                i7 = 1;
                while (++i7 < 2) {
                    i6 = 121;
                    iArr1[i5 - 1] >>= i7;
                }
            }
        }
        long meth_res = i2 + (b ? 1 : 0) + i3 + i5 + i6 + i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, float f) {

        short s=-10600;
        float f1=51.562F;
        int i=0, i1=149, i8=-55412, i9=-27685, iArr[][]=new int[N][N];
        byte by=16;

        FuzzerUtils.init(iArr, 83);

        f = s;
        f1 = 1;
        do {
            for (i = 1; i < 6; i++) {
                l = (long)(Test.dFld++);
                i1 >>>= by;
                iArr[(int)(f1)][(int)(f1 - 1)] = (i1++);
                i1 += (i * i);
                iArr[(int)(f1)][i + 1] += (++i1);
            }
            iArr[(int)(f1 - 1)][(int)(f1 - 1)] = (iArr[(int)(f1)][(int)(f1)]--);
            i1 = (int)lMeth(i1);
            i1 = -14;
        } while (++f1 < 268);
        i1 = -25;
        for (i8 = 4; 369 > i8; i8++) {
            f -= i1;
            i1 += -248;
        }
        long meth_res = l + Float.floatToIntBits(f) + s + Float.floatToIntBits(f1) + i + i1 + by + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        double d=-1.44848;
        float f2=0.419F;
        int i10=-31050, i11=0, i12=-48257, i13=-63, i14=-18959, i15=7073, i16=-76, i17=-9140, iArr2[][]=new int[N][N];
        long l1=5142269179753223725L;
        byte by1=-123;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 86);

        d = (iMeth(Test.instanceCount, Test.fFld) - Test.iFld);
        switch (((Test.iFld >>> 1) % 10) + 53) {
        case 53:
            Test.fFld -= Test.sFld;
            for (f2 = 23; f2 < 398; f2++) {
                for (i11 = 1; 5 > i11; i11++) {
                    i10 = (int)Test.instanceCount;
                    for (l1 = 2; 1 < l1; --l1) {
                        i13 += i11;
                    }
                    for (i14 = 1; i14 < 2; i14 += 3) {
                        by1 += (byte)i14;
                        Test.iArrFld[i11 - 1] = i12;
                    }
                    i12 -= -16921;
                }
                for (i16 = 1; 5 > i16; i16++) {
                    i10 -= i15;
                    bArr = Test.bArrFld;
                }
            }
        case 54:
        case 55:
            Test.instanceCount -= 66;
            break;
        case 56:
        case 57:
            i13 >>>= i11;
            break;
        case 58:
            i12 = (int)Test.instanceCount;
        case 59:
            Test.sFld = (short)Test.fFld;
            break;
        case 60:
            Test.instanceCount -= by1;
            break;
        case 61:
            Test.bFld = Test.bFld;
            break;
        case 62:
            iArr2 = iArr2;
            break;
        default:
            i12 <<= (int)Test.instanceCount;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i10 + i11 + i12 + l1 + i13 + i14 +
            i15 + by1 + i16 + i17 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=-9, i19=-53525, i20=34, i21=36762, i22=35, i23=29620, i24=5, i25=89, i26=11, i27=-33563;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -100.589F);

        vMeth();
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld <<= Test.iFld;
        Test.sFld ^= (short)Test.iFld;
        if (Test.bFld) {
            switch (((Test.iFld >>> 1) % 2) + 115) {
            case 115:
                Test.iFld += Test.iFld;
                Test.iArrFld[(-8 >>> 1) % N] += (int)Test.instanceCount;
            case 116:
                for (i18 = 8; i18 < 143; ++i18) {
                    i20 = (int)Test.fFld;
                    if (Test.bFld) {
                        try {
                            Test.iArrFld[i18 - 1] = (Test.iArrFld[i18] / 1167710195);
                            i20 = (i21 % i21);
                            Test.iFld = (36367 / i21);
                        } catch (ArithmeticException a_e) {}
                        i20 -= i18;
                        Test.iFld -= i21;
                    }
                    i21 = -2;
                    i20 += (((i18 * i18) + Test.fFld) - i19);
                    i20 += (((i18 * Test.sFld) + i18) - i19);
                    Test.iArrFld[i18 - 1] -= i18;
                }
                for (i22 = 13; i22 < 313; ++i22) {
                    Test.iFld >>= i21;
                    i24 = 1;
                    do {
                        fArr[i24 + 1] = Test.sFld;
                    } while (++i24 < 84);
                }
            }
            i19 = i22;
        }
        Test.instanceCount += Test.iFld;
        Test.fFld += i22;
        for (i25 = 6; 261 > i25; ++i25) {
            byte by2=-52;
            by2 -= (byte)Test.fFld;
            i27 = 1;
            while ((i27 += 3) < 99) {
                i26 += i27;
                Test.instanceCount = (long)Test.dFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
