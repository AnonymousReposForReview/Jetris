package tests.javafuzzer1845;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:25:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=36206L;
    public static int iFld=64351;
    public static short sFld=18635;
    public static float fFld=2.985F;
    public static byte byFld=119;
    public double dFld=82.9934;
    public static int iArrFld[][]=new int[N][N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 45);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        byte by=99, byArr[]=new byte[N];
        int i5=7122, i6=-310, i7=-19, i8=-245, i9=-12, i10=-35848, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(byArr, (byte)18);
        FuzzerUtils.init(iArr1, -59643);

        Test.iFld -= Test.iFld;
        if (false) {
            Test.iFld -= by;
            Test.iFld >>>= Test.iFld;
        } else if (b) {
            for (i5 = 140; i5 > 7; i5--) {
                byArr[i5 - 1] *= (byte)i6;
                switch (((-50782 >>> 1) % 10) + 41) {
                case 41:
                    try {
                        Test.iFld = (Test.iFld / 131);
                        Test.iFld = (iArr1[i5 + 1] % -3);
                        i6 = (i5 / -179);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i5 - i5);
                    Test.iFld += i5;
                    for (i7 = 1; i7 < 12; ++i7) {
                        for (i9 = i5; i9 < 2; i9++) {
                            Test.sFld += (short)(((i9 * i9) + Test.instanceCount) - i5);
                            i6 += i9;
                            Test.fFld += (i9 * i9);
                        }
                    }
                    break;
                case 42:
                case 43:
                    Test.instanceCount = i10;
                    break;
                case 44:
                case 45:
                case 46:
                    i8 <<= i8;
                    break;
                case 47:
                    Test.iFld = i10;
                case 48:
                    Test.fFld = Test.instanceCount;
                    break;
                case 49:
                    if (i8 != 0) {
                        vMeth1_check_sum += by + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 50:
                    Test.iFld &= i7;
                    break;
                }
            }
            vMeth1_check_sum += by + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
                FuzzerUtils.checkSum(iArr1);
            return;
        } else if (b) {
            Test.instanceCount = Test.iFld;
        }
        vMeth1_check_sum += by + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i11=140, i12=-7, i13=-13, i14=-9080, i15=4, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 230);

        vMeth1();
        i11 = 1;
        do {
            switch ((i11 % 7) + 47) {
            case 47:
                if (b1) {
                    Test.iFld -= Test.iFld;
                } else {
                    for (i12 = 1; 5 > i12; ++i12) {
                        Test.iFld *= i11;
                        for (i14 = 1; 2 > i14; i14++) {
                            switch (((Test.iFld >>> 1) % 1) + 28) {
                            case 28:
                                iArr2[i11 + 1] <<= Test.byFld;
                                Test.instanceCount -= (long)1.636F;
                                Test.sFld *= (short)i11;
                                i15 -= Test.sFld;
                            }
                            i15 -= (int)Test.instanceCount;
                            if (b1) break;
                        }
                    }
                }
                break;
            case 48:
            case 49:
                i13 -= (int)Test.fFld;
            case 50:
                Test.iFld = i15;
                break;
            case 51:
                Test.fFld = Test.instanceCount;
                break;
            case 52:
                i13 = (int)Test.instanceCount;
                break;
            case 53:
                if (Test.iFld != 0) {
                    vMeth_check_sum += i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                break;
            default:
                iArr2[i11 - 1] += (int)Test.fFld;
            }
        } while (++i11 < 330);
        vMeth_check_sum += i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        int i4=49802, i16=13, i17=-40, i18=11, i19=63398, iArr3[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, -28899);
        FuzzerUtils.init(lArr1, -592445242L);

        i4 = 1;
        while (++i4 < 155) {
            vMeth();
            try {
                iArr3[i4] = (Test.iFld / i4);
                Test.iFld = (iArr3[i4 - 1] / 15905);
                Test.iFld = (i4 / 53674);
            } catch (ArithmeticException a_e) {}
            Test.iFld = (int)Test.fFld;
            Test.instanceCount += (((i4 * Test.fFld) + Test.instanceCount) - i4);
            Test.iFld -= i4;
            for (i16 = 1; i16 < 10; i16++) {
                i17 += (i16 + Test.iFld);
                lArr1[i16] <<= i4;
                lArr1[i4] += i16;
                for (i18 = 2; i18 > i16; i18 -= 3) {
                    iArr3[i16] = -178;
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld += (int)Test.instanceCount;
                    try {
                        i19 = (i17 % -149);
                        Test.iFld = (i4 % i17);
                        i19 = (iArr3[i4] % -249);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i4 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=169, i2=2, i3=36, i20=-6, i21=-1, i22=57, iArr[]=new int[N], iArr4[]=new int[N];
        long l=2682L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, -50989);
        FuzzerUtils.init(lArr, 6460L);
        FuzzerUtils.init(iArr4, 166);

        Test.instanceCount = (iArr[(i >>> 1) % N]++);
        i1 = 1;
        while (++i1 < 346) {
            i -= (int)Math.max(lArr[i1] -= (iArr[i1 + 1]--), (-i) + (27 * iArr[i1 + 1]));
            switch (((i1 % 4) * 5) + 111) {
            case 125:
                for (i2 = 73; i2 > 2; i2 -= 2) {
                    iArr[i2 - 1] *= (int)(((i + i2) ^ (long)(-2.94F % ((iArr[i1]++) | 1))) - (i2 +
                        (Test.instanceCount--)));
                    iMeth();
                    iArr[i1 + 1] |= i2;
                    i += (i2 + i);
                    i20 = 1;
                    while (++i20 < 3) {
                        Test.iArrFld = Test.iArrFld;
                        i <<= -128;
                        Test.fFld = Test.sFld;
                        Test.instanceCount *= Test.iFld;
                        Test.iArrFld[i2 - 1] = iArr;
                        Test.instanceCount += (-16484 + (i20 * i20));
                        Test.iFld -= i1;
                        Test.fFld += -96.481F;
                        iArr[i1 - 1] >>= i3;
                        i3 *= (int)Test.instanceCount;
                    }
                    i += i20;
                    i21 = 1;
                    do {
                        dFld -= i20;
                        i += Test.iFld;
                        i += (i21 * i21);
                    } while (++i21 < 3);
                }
                switch (((-6 >>> 1) % 9) + 113) {
                case 113:
                    iArrFld1[i1] = Test.iFld;
                    i3 -= i3;
                    iArrFld1[i1] = i22;
                case 114:
                    i22 = (int)Test.fFld;
                case 115:
                    Test.iFld += (i1 | Test.instanceCount);
                    break;
                case 116:
                    Test.instanceCount *= Test.iFld;
                    break;
                case 117:
                    i += (i1 ^ i22);
                    break;
                case 118:
                    iArrFld1[i1 + 1] = Test.iFld;
                    break;
                case 119:
                    if (true) break;
                case 120:
                    l = 13;
                case 121:
                default:
                    l <<= Test.sFld;
                }
                break;
            case 122:
                l |= i1;
                break;
            case 118:
                Test.iArrFld[i1 + 1] = iArr4;
                break;
            case 128:
                i22 *= (int)Test.fFld;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
