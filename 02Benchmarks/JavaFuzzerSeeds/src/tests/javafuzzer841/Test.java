package tests.javafuzzer841;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13492L;
    public static volatile int iFld=-10;
    public static float fFld=-122.723F;
    public static boolean bFld=true;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -48L);
        FuzzerUtils.init(Test.iArrFld, -113);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-14, i4=-11, i5=-50175, i6=-25439, i7=-14;
        double d1=7.78074;
        boolean b=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -1.549F);

        for (i3 = 2; i3 < 354; ++i3) {
            i5 = 1;
            do {
                Test.iFld *= (int)Test.instanceCount;
                fArr[i3] = FuzzerUtils.float1array(N, (float)-2.589F);
                i4 += (int)Test.instanceCount;
                d1 = d1;
                try {
                    i4 = (i4 / i4);
                    Test.iFld = (1498931710 / i5);
                    i4 = (Test.iFld % i5);
                } catch (ArithmeticException a_e) {}
                Test.fFld = Test.instanceCount;
                Test.lArrFld[i3 + 1] >>= i4;
                i4 ^= 31071;
            } while (++i5 < 5);
            for (i6 = 5; i6 > 1; --i6) {
                Test.iFld += i4;
                d1 -= i6;
                Test.iFld += (i6 * Test.instanceCount);
                b = b;
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d, int i1, long l) {

        float f1=0.833F, fArr1[]=new float[N];
        int i2=6432, i8=0, i9=14, i10=-6, iArr[]=new int[N];
        long l1=-182245577895801560L;

        FuzzerUtils.init(fArr1, 1.251F);
        FuzzerUtils.init(iArr, -2);

        for (f1 = 2; f1 < 127; f1++) {
            vMeth2();
            fArr1[(int)(f1 + 1)] = i1;
            for (i8 = 1; 13 > i8; i8++) {
                i9 *= i1;
                i9 *= i2;
                Test.iFld *= (int)Test.instanceCount;
                Test.lArrFld = Test.lArrFld;
                iArr[(int)(f1 + 1)] = Test.iFld;
                try {
                    i2 = (Test.iFld / i9);
                    i10 = (9228 % iArr[i8 - 1]);
                    i9 = (i1 / 235);
                } catch (ArithmeticException a_e) {}
                i1 ^= Test.iFld;
                iArr[i8] -= Test.iFld;
                if (Test.bFld) {
                    l += (i8 * i8);
                    l1 = 68;
                } else if (Test.bFld) {
                    Test.instanceCount *= Test.instanceCount;
                } else if (Test.bFld) {
                    if (true) continue;
                } else {
                    vMeth1_check_sum += Double.doubleToLongBits(d) + i1 + l + Float.floatToIntBits(f1) + i2 + i8 + i9 +
                        i10 + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i1 + l + Float.floatToIntBits(f1) + i2 + i8 + i9 + i10 + l1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        float f=0.954F, fArr2[][]=new float[N][N];
        double d2=-2.64395;
        int i11=106, i12=-238, i13=11, i14=110, i15=202, i16=33510, i17=44580;

        FuzzerUtils.init(fArr2, -5.550F);

        f += Math.min(Test.instanceCount, Test.instanceCount);
        vMeth1(d2, 7, Test.instanceCount);
        Test.iFld = Test.iFld;
        Test.iFld -= i;
        for (i11 = 9; i11 < 152; ++i11) {
            switch (((i11 % 2) * 5) + 88) {
            case 91:
                Test.bFld = Test.bFld;
                Test.fFld = Test.instanceCount;
            case 97:
                Test.iArrFld[i11] -= (int)Test.instanceCount;
                for (i13 = 1; i13 < 11; i13++) {
                    i15 %= (int)(i11 | 1);
                    for (i16 = 1; i16 < 2; i16++) {
                        fArr2[i11 + 1][i16 + 1] += Test.iFld;
                        if (i13 != 0) {
                            vMeth_check_sum += i + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i11 + i12 +
                                i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
                            return;
                        }
                        i15 *= (int)1562761621L;
                    }
                }
                break;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15 +
            i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {


        Test.iFld >>= Test.iFld;
        vMeth(Test.iFld);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
