package tests.javafuzzer3014;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:13 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-140L;
    public static int iFld=23214;
    public static boolean bFld=false;
    public static short sFld=16024;
    public static double dFld=82.89095;
    public byte byFld=77;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -100);
        FuzzerUtils.init(Test.lArrFld, -7L);
        FuzzerUtils.init(Test.fArrFld, -2.598F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s1) {

        long l1=-5L, l2=1L;
        int i2=64323, i3=6, i4=5;
        float f2=-75.1010F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.531F);

        for (l1 = 380; l1 > 1; l1--) {
            fArr[(int)(l1)] -= (float)-40.64466;
            i2 += i2;
        }
        i2 -= s1;
        Test.bFld = Test.bFld;
        i2 += Test.iFld;
        i2 *= (int)Test.instanceCount;
        Test.instanceCount = i2;
        for (l2 = 13; 311 > l2; l2 += 2) {
            s1 = (short)i3;
            i3 -= -178;
            i4 = 1;
            do {
                i3 -= (int)f2;
                Test.bFld = Test.bFld;
                i2 = -20897;
            } while (++i4 < 11);
        }
        vMeth1_check_sum += s1 + l1 + i2 + l2 + i3 + i4 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        long l=-5L;
        int i5=-1, i6=-4, i7=2026, i8=21, i9=2, i10=-6;
        float f3=-2.71F;
        byte by=104;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 32.32817);

        switch ((((Test.iFld >>> 1) % 10) * 5) + 66) {
        case 89:
            Test.instanceCount <<= ((--Test.instanceCount) & ((Test.iFld + Test.iFld) + (Test.iFld = Test.iFld)));
            break;
        case 103:
            Test.iFld = (~Integer.reverseBytes((int)(l + 19778)));
            break;
        case 79:
            vMeth1(Test.sFld);
            Test.iFld = (int)l;
            Test.iArrFld[(Test.iFld >>> 1) % N] = (int)3497806614193926491L;
            for (i5 = 16; i5 < 296; ++i5) {
                for (i7 = 1; i7 < 6; i7 += 3) {
                    i6 = i8;
                    for (i9 = 1; i9 < 6; ++i9) {
                        Test.iArrFld[i5 - 1] |= Test.iFld;
                        Test.iArrFld[i7 + 1] -= -33081;
                        i8 >>= (int)Test.instanceCount;
                        f3 = i8;
                    }
                    by *= (byte)i9;
                }
            }
            break;
        case 88:
            Test.iFld = (int)Test.instanceCount;
            break;
        case 101:
            dArr[(i7 >>> 1) % N] += Test.sFld;
            break;
        case 77:
            i8 = i8;
            break;
        case 107:
            Test.lArrFld[(i5 >>> 1) % N] >>= Test.iFld;
            break;
        case 71:
            i10 <<= i10;
            break;
        case 97:
            i10 -= by;
            break;
        case 91:
            Test.dFld -= i9;
            break;
        default:
            Test.dFld = Test.iFld;
        }
        vMeth_check_sum += l + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(int i, float f1) {

        short s=24330;
        int i11=-29, i12=-228, iArr[]=new int[N], iArr1[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(iArr1, -251);
        FuzzerUtils.init(bArr, false);

        for (int i1 : iArr) {
            iArr1[(Test.iFld >>> 1) % N] <<= Math.min((int)((11 + Test.iFld) - Math.abs(Test.instanceCount)),
                Math.max(i, i) + s);
            vMeth();
            Test.instanceCount = i;
            i1 = -56;
            if (i != 0) {
            }
            Test.instanceCount = 7;
            iArr1[(i >>> 1) % N] = (int)Test.instanceCount;
            Test.sFld = (short)i;
            iArr[(i1 >>> 1) % N] = (int)Test.dFld;
            if (false) {
                for (i11 = 1; i11 < 4; i11++) {
                    i += (int)(-2L + (i11 * i11));
                    i1 += (((i11 * Test.instanceCount) + i1) - Test.instanceCount);
                    bArr[(i >>> 1) % N] = Test.bFld;
                }
            } else if (false) {
                Test.lArrFld = Test.lArrFld;
            } else {
                Test.iFld = (int)f1;
            }
        }
        long meth_res = i + Float.floatToIntBits(f1) + s + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.858F;
        int i13=53979, i14=87, i15=85, i16=-102, i17=5304, i18=169, i19=-52461, i20=-10;
        long l3=-8755736590801056338L;

        Test.iFld += (int)(Math.abs(Test.instanceCount + f) + iMeth(Test.iFld, f));
        Test.iFld += (int)1.102613;
        try {
            Test.iFld >>= -143;
            TestClassTest obj = null;
            Test.iFld = obj.field;
        }
        catch (NullPointerException exc1) {
            Test.bFld = false;
            f = Test.iFld;
        }
        i13 = 1;
        while (++i13 < 126) {
            for (i14 = 8; i14 < 199; i14 += 3) {
                Test.instanceCount -= 35;
                f -= Test.instanceCount;
                Test.iArrFld = Test.iArrFld;
                Test.iFld = (int)-7283229071880396220L;
                l3 = 4;
                do {
                    Test.bFld = Test.bFld;
                } while ((l3 -= 2) > 0);
                i15 = i15;
                Test.iFld += (i14 - i13);
                for (i16 = 4; i16 > 1; --i16) {
                    i15 = (int)f;
                    Test.lArrFld = Test.lArrFld;
                    Test.bFld = Test.bFld;
                    i15 -= (int)Test.instanceCount;
                    Test.iFld = i15;
                    Test.fArrFld[i14 - 1] -= i17;
                }
            }
            Test.iFld -= 158;
            byFld = (byte)i14;
            for (i18 = 7; 199 > i18; i18++) {
                i20 = 1;
                while (++i20 < 2) {
                    Test.instanceCount = i15;
                }
            }
        }
        Test.sFld += (short)i13;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class TestClassTest {
    public int field;
    public void meth() {field = 1;}
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
