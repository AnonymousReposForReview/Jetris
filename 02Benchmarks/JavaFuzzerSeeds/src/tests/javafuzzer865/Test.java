package tests.javafuzzer865;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:56:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=57677L;
    public static float fFld=-1.553F;
    public static double dFld=2.7455;
    public static short sFld=-22816;
    public static byte byFld=-62;
    public static boolean bFld=false;
    public int iFld=-2;
    public volatile long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i5=5, i6=7, i7=104, iArr1[]=new int[N];
        long l1=-46495L;
        short s=-9884;

        FuzzerUtils.init(iArr1, 43098);

        for (i5 = 15; i5 < 266; i5 += 3) {
            Test.fFld -= i6;
            i6 = i5;
            i6 = (int)9L;
            Test.instanceCount >>>= Test.instanceCount;
            l1 = 1;
            do {
                Test.fFld = i6;
                i7 += (int)(((l1 * i5) + l1) - s);
                iArr1 = iArr1;
                iArr1[i5] = i5;
                iArr1[i5] >>= (int)l1;
                Test.instanceCount += i6;
                i7 += s;
                i6 += (int)(l1 * l1);
                i7 = i5;
            } while (++l1 < 19);
        }
        vMeth2_check_sum += i5 + i6 + l1 + i7 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i3, double d, int i4) {


        vMeth2();
        Test.instanceCount = Test.instanceCount;
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d) + i4;
    }

    public static void vMeth(int i1, long l, int i2) {

        byte by=-16;

        i1 += (int)((++Test.fFld) * (i2 - (by -= (byte)i2)));
        i1 = (int)(Math.max(Integer.reverseBytes(i2), (int)(-68.125224 - i2)) - -2290376552L);
        vMeth1(i2, Test.dFld, i1);
        l -= -10812;
        vMeth_check_sum += i1 + l + i2 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=59336, i8=57821, i9=177, i10=14, i11=-47014, i12=164, i13=-159, iArr[]=new int[N];
        long l2=-96L;

        FuzzerUtils.init(iArr, 65);

        iArr[(i >>> 1) % N] += Math.abs(Integer.reverseBytes(i + i));
        vMeth(i, Test.instanceCount, i);
        for (i8 = 20; i8 < 373; i8++) {
            i9 += i;
            for (i10 = 3; i10 < 71; ++i10) {
                i9 *= i10;
                Test.instanceCount += (i10 + i10);
                for (i12 = 1; i12 < 2; ++i12) {
                    switch (((i8 % 7) * 5) + 82) {
                    case 109:
                        i13 *= -52;
                        i -= 16;
                        Test.sFld -= (short)Test.instanceCount;
                        break;
                    case 98:
                        i9 = 27684;
                        switch (((i10 % 9) * 5) + 85) {
                        case 129:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 118:
                            Test.fFld -= Test.instanceCount;
                            iArr[i12 + 1] += 130;
                            break;
                        case 123:
                            switch ((i8 % 2) + 97) {
                            case 97:
                                Test.instanceCount += (long)39.1019F;
                                i += (((i12 * i8) + i13) - Test.fFld);
                                break;
                            case 98:
                                lArrFld = lArrFld;
                                break;
                            default:
                                Test.byFld *= (byte)Test.dFld;
                                Test.fFld = i13;
                                i11 += Test.sFld;
                                switch ((i12 % 3) + 75) {
                                case 75:
                                    dArrFld[i8 + 1] = i12;
                                    Test.instanceCount = Test.instanceCount;
                                    i13 += (((i12 * i8) + Test.byFld) - Test.byFld);
                                    break;
                                case 76:
                                    Test.instanceCount += Test.byFld;
                                    Test.fFld *= Test.fFld;
                                case 77:
                                    iArr[i10] >>= i8;
                                default:
                                    if (Test.bFld) break;
                                }
                            }
                            break;
                        case 105:
                            l2 -= -32313L;
                            break;
                        case 96:
                            l2 += l2;
                            break;
                        case 120:
                        case 94:
                            i11 -= iFld;
                            break;
                        case 128:
                            i9 = (int)-33288L;
                        case 101:
                        }
                        break;
                    case 111:
                        l2 = i9;
                        break;
                    case 96:
                        lArrFld[i12 + 1] >>= Test.instanceCount;
                    case 87:
                        i11 = i12;
                    case 107:
                        iFld = -30370;
                        break;
                    case 94:
                        dArrFld[i12 - 1] += i8;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
