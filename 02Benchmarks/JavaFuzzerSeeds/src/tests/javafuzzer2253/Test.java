package tests.javafuzzer2253;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public float fFld=0.725F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -72.991F);
        FuzzerUtils.init(Test.iArrFld, 140);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i=-4;

        i -= (int)Test.instanceCount;
        vMeth2_check_sum += i;
    }

    public static void vMeth1() {

        int i1=158, i2=235, i3=1, i4=-14, i5=4, iArr[]=new int[N];
        byte by=42;
        float f=0.175F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -27665);
        FuzzerUtils.init(dArr, 34.105366);

        vMeth2();
        i1 = i1;
        iArr = FuzzerUtils.int1array(N, (int)-20226);
        by -= (byte)5;
        i1 <<= (int)Test.instanceCount;
        for (i2 = 7; i2 < 249; i2++) {
            i3 -= by;
        }
        Test.instanceCount = i2;
        for (i4 = 9; i4 < 262; ++i4) {
            i1 = (int)-248L;
            i3 -= (int)Test.instanceCount;
            switch (((i1 >>> 1) % 3) + 29) {
            case 29:
                Test.instanceCount += (((i4 * i2) + f) - by);
                dArr[i4 + 1] = f;
                Test.fArrFld = Test.fArrFld;
                break;
            case 30:
                f = by;
                break;
            case 31:
                Test.instanceCount = i5;
                break;
            default:
                i5 = i3;
            }
        }
        vMeth1_check_sum += i1 + by + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(long l) {

        int i6=-6481, i7=-10, i8=-175, i9=1;
        double d=-35.107779;
        float f1=7.164F;

        vMeth1();
        i6 <<= i6;
        i6 *= i6;
        i6 /= (int)-68.339F;
        i7 = 1;
        while (++i7 < 313) {
            d = 1;
            do {
                l += (long)d;
                i6 += (int)(((d * i7) + Test.instanceCount) - i7);
                i6 -= (int)l;
                i6 += (int)d;
                i6 >>= i6;
                for (i8 = 1; i8 < 1; ++i8) {
                    l >>>= i9;
                    Test.instanceCount <<= i7;
                    i9 += (int)f1;
                }
            } while (++d < 5);
        }
        vMeth_check_sum += l + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i10=18423, i11=52951, i12=238, i13=-45826, i14=-5, i15=10, i16=-187, i17=163, i18=9, i19=52982;
        double d1=1.105429, d2=0.90500;
        float f2=-41.963F;
        boolean b=false, bArr[][]=new boolean[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 220L);
        FuzzerUtils.init(bArr, false);

        vMeth(Test.instanceCount);
        for (i10 = 2; i10 < 130; ++i10) {
            for (i12 = i10; i12 < 196; i12++) {
                short s=-30382;
                i13 += i12;
                try {
                    i14 = (-217 % i12);
                    i11 = (i14 / 62078);
                    i14 = (2097493756 / i12);
                } catch (ArithmeticException a_e) {}
                for (d1 = i12; d1 < 1; ++d1) {
                    i14 -= i13;
                    i11 = -216;
                    i15 += (int)(d1 * d1);
                    try {
                        i11 = (Test.iArrFld[i10] % -137);
                        i15 = (i14 / i11);
                        Test.iArrFld[i10] = (Test.iArrFld[i12 - 1] / -856096690);
                    } catch (ArithmeticException a_e) {}
                    i15 += (int)((long)d1 ^ i12);
                }
                for (f2 = 1; f2 < 1; ++f2) {
                    i14 += (int)((long)f2 ^ i15);
                    try {
                        Test.iArrFld[(-129 >>> 1) % N] = (-21727 % i16);
                        Test.iArrFld[i10 - 1] = (12168 / i12);
                        i14 = (Test.iArrFld[i10 + 1] / i11);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i12 - 1] = (int)Test.instanceCount;
                    d2 = i16;
                    i16 += (int)f2;
                    i13 >>= i13;
                    i16 %= (int)(i10 | 1);
                    i11 += i16;
                }
                lArr[i10] = i11;
                switch (((i13 >>> 1) % 6) + 23) {
                case 23:
                    for (i17 = 1; i17 > i12; i17 -= 2) {
                        if (b) {
                            i16 <<= (int)Test.instanceCount;
                        } else {
                            i18 = (int)-17507L;
                        }
                        i14 = 26;
                        try {
                            i19 = (29242 % i16);
                            i14 = (46462 % i16);
                            i14 = (Test.iArrFld[i17] % i17);
                        } catch (ArithmeticException a_e) {}
                        i14 += (i17 ^ i18);
                        bArr[i17 - 1] = FuzzerUtils.boolean1array(N, (boolean)false);
                    }
                case 24:
                    i14 += (i12 - f2);
                    break;
                case 25:
                    if (b) continue;
                    break;
                case 26:
                    fFld = i16;
                    break;
                case 27:
                    s = (short)i19;
                    break;
                case 28:
                    Test.iArrFld[i10 - 1] >>= i11;
                    break;
                default:
                    lArr[i12] = 39;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
