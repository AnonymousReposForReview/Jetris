package tests.javafuzzer43;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:31:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=154L;
    public static int iFld=0;
    public short sFld=-31232;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.562F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=13, i4=-40343, i5=-19, i6=-5, i7=-54121;
        double d1=0.115985;
        float f=-1.590F, f1=2.389F;
        boolean b=false;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-124);
        FuzzerUtils.init(lArr, 61566L);

        for (i3 = 19; i3 < 310; ++i3) {
            byArr[i3] += (byte)d1;
            for (i5 = 1; i5 < 6; ++i5) {
                for (f = 1; f < 2; f++) {
                    i6 += (int)f;
                    i4 += (int)f;
                    Test.fArrFld[i3 + 1] *= i7;
                    Test.fArrFld[i3 + 1] -= Test.instanceCount;
                    d1 = f;
                    i7 *= 3;
                    if (b) continue;
                    lArr[(int)(f + 1)] = i7;
                }
                f1 -= (float)d1;
                i4 = i4;
                i7 <<= i6;
            }
        }
        vMeth1_check_sum += i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + Float.floatToIntBits(f) + i7 + (b ? 1 :
            0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1) {

        int i2=-9826, i8=3, i9=-23, i10=168;
        float f2=-2.176F;
        byte by=-88;
        double d2=-41.20011;

        i2 = 1;
        do {
            Test.instanceCount += (i2 * Test.instanceCount);
            vMeth1();
            f2 = Test.instanceCount;
            i8 = 1;
            while (++i8 < 4) {
                i1 += (i8 + i1);
                i1 &= (int)Test.instanceCount;
                by = (byte)70;
            }
            Test.instanceCount -= i8;
            for (i9 = 4; i9 > 1; i9 -= 2) {
                Test.instanceCount += (long)68.359F;
                i10 -= (int)-153671174L;
                f2 += ((long)i9 | (long)i1);
                d2 -= i10;
            }
        } while (++i2 < 391);
        f2 = Test.instanceCount;
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i8 + by + i9 + i10 + Double.doubleToLongBits(d2);
    }

    public static void vSmallMeth(int i, double d) {


        vMeth(i);
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i11=-1, i12=2, i13=-12755, i14=-236, i15=-83, i16=73, iArr[]=new int[N];
        double d3=11.119465, d4=-83.10498;
        float f3=-2.837F;
        byte by1=-34;
        boolean b1=true;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(lArr1, -192L);

        for (int smallinvoc=0; smallinvoc<234; smallinvoc++) vSmallMeth(i11, d3);
        f3 /= -2.627F;
        for (i12 = 14; i12 < 257; i12++) {
            for (d4 = 6; d4 < 103; d4++) {
                i14 = -8758;
                i15 = 1;
                while (++i15 < 2) {
                    Test.instanceCount += (-9 + (i15 * i15));
                    f3 += (float)d3;
                    if (b1) {
                        iArr[i15] = by1;
                        i11 = i13;
                        i11 += -10;
                    } else if (b1) {
                        i14 *= i15;
                    } else {
                        by1 *= (byte)Test.instanceCount;
                        f3 = i13;
                    }
                    if (true) break;
                    lArr1[i15][i15 + 1] <<= Test.instanceCount;
                    i14 = (int)Test.instanceCount;
                    i11 >>>= i12;
                }
                if (b1) continue;
                Test.instanceCount = -45;
                iArr[(int)(d4)] = -9;
                i16 = 2;
                while (--i16 > 0) {
                    f3 *= Test.instanceCount;
                    i14 *= i13;
                    switch (((i15 >>> 1) % 3) + 108) {
                    case 108:
                        if (b1) continue;
                        i11 = Test.iFld;
                        i11 *= (int)d3;
                    case 109:
                        Test.instanceCount = sFld;
                        break;
                    case 110:
                        Test.instanceCount += (((i16 * Test.instanceCount) + Test.instanceCount) - i15);
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
