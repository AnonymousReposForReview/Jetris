package tests.javafuzzer828;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:32:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=46L;
    public static float fFld=26.154F;
    public static byte byFld=109;
    public static int iFld=-13;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i2=47910, i3=194, i4=63327, i5=-18807, i6=14, iArr1[]=new int[N];
        long l=-5L, lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-22760);
        FuzzerUtils.init(iArr1, -114);
        FuzzerUtils.init(lArr, -2603073352L);

        i2 = 368;
        while (--i2 > 0) {
            i3 = (int)Test.fFld;
            sArr[i2 + 1] -= (short)8455773786717324237L;
            Test.instanceCount += (((i2 * Test.fFld) + i4) - i3);
        }
        for (l = 3; 168 > l; l++) {
            iArr1[(int)(l)] -= i2;
            lArr[(int)(l)] <<= Test.instanceCount;
            i6 = 1;
            do {
                iArr1[(int)(l + 1)] &= i6;
                i3 <<= i3;
                i3 += (-9 + (i6 * i6));
                Test.fFld = i6;
            } while (++i6 < 10);
            i5 <<= i5;
            i5 = i5;
        }
        iArr1[(i5 >>> 1) % N] += 124;
        vMeth_check_sum += i2 + i3 + i4 + l + i5 + i6 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1) {

        int i7=-252, i8=-58468, i9=-8, iArr[]=new int[N];
        double d1=-9.9667, d2=0.120927;
        boolean b=true;

        FuzzerUtils.init(iArr, -10);

        Test.instanceCount = (iArr[(i1 >>> 1) % N]++);
        vMeth();
        for (i7 = 7; i7 < 183; i7++) {
            Test.instanceCount >>>= i1;
            iArr[i7 - 1] <<= -98;
            i1 += (i7 | i1);
            i1 *= (int)Test.instanceCount;
            i1 -= i7;
            d1 += i8;
            for (d2 = i7; 9 > d2; d2++) {
                Test.instanceCount += (long)(((d2 * i1) + i8) - i8);
                i8 = i7;
                i9 = i1;
                i8 >>= -1;
                if (b) continue;
            }
        }
        long meth_res = i1 + i7 + i8 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        double d=12.8588;

        d += iMeth(i);
        d *= i;
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i10=-58549, i11=65, i12=64480, i13=67, i14=-138, i15=9, i16=18, i17=-41510, i18=-186, i19=-8, i20=11,
            i21=-88, i22=-4952;
        short s=16831;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 49.110232);

        for (int smallinvoc=0; smallinvoc<944; smallinvoc++) vSmallMeth(i10);
        Test.fFld -= Test.instanceCount;
        i10 <<= 6;
        Test.fFld = 17237L;
        iArrFld[(i10 >>> 1) % N] -= Test.byFld;
        i10 = (int)Test.instanceCount;
        for (i11 = 7; 293 > i11; i11++) {
            for (i13 = 2; i13 < 88; ++i13) {
                for (i15 = i11; i15 < 2; ++i15) {
                    i14 += i15;
                    Test.instanceCount += (i15 + i15);
                    i16 -= s;
                    Test.byFld *= (byte)-6624047114910114153L;
                    iArrFld[i13] <<= i12;
                    try {
                        i12 = (i10 % -6903);
                        i10 = (-47724 / i11);
                        i12 = (59932 / iArrFld[i15]);
                    } catch (ArithmeticException a_e) {}
                    Test.byFld += (byte)i10;
                }
                i14 -= (int)Test.instanceCount;
                for (i17 = 2; i17 > 1; --i17) {
                    iArrFld[i13] >>= i10;
                    i18 >>= i17;
                    i14 = (int)-8972L;
                    i14 = (int)Test.instanceCount;
                }
            }
            for (i19 = 5; i19 < 88; i19 += 3) {
                for (i21 = 1; i21 < 4; i21++) {
                    i22 += (i21 + i14);
                    dArr[i19 + 1][i21 - 1] = Test.fFld;
                    i12 += i21;
                    Test.fFld += (((i21 * Test.fFld) + i13) - Test.instanceCount);
                    Test.iFld = Test.byFld;
                    Test.instanceCount *= i19;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
