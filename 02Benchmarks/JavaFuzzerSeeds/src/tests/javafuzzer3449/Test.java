package tests.javafuzzer3449;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:30:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-29L;
    public static volatile int iFld=174;
    public static boolean bFld=true;
    public static int iFld1=14;
    public long lFld=-237L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -33476);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, boolean b) {

        int i8=-1, i9=-237, iArr[]=new int[N];
        float f2=0.387F;
        double d1=-2.112906;
        short s=9561;

        FuzzerUtils.init(iArr, 176);

        for (i8 = 1; i8 < 194; i8 += 2) {
            byte by=-41;
            f2 += (float)d1;
            Test.instanceCount *= (long)2.746F;
            switch (((Test.iFld >>> 1) % 5) + 76) {
            case 76:
                i6 *= i6;
                switch (((i6 >>> 1) % 6) + 79) {
                case 79:
                    Test.iFld += (-29571 + (i8 * i8));
                case 80:
                    by *= (byte)3069368893L;
                    i7 -= -29963;
                    switch (((i8 % 2) * 5) + 39) {
                    case 44:
                        Test.instanceCount <<= i8;
                        i9 += i8;
                        break;
                    case 46:
                        s <<= (short)i7;
                        by *= (byte)102.20496;
                        d1 -= i8;
                        break;
                    }
                    break;
                case 81:
                    d1 = f2;
                case 82:
                    i6 >>= i6;
                    break;
                case 83:
                    Test.iFld -= (int)Test.instanceCount;
                    break;
                case 84:
                    iArr = iArr;
                default:
                    i7 /= (int)(Test.instanceCount | 1);
                }
                break;
            case 77:
                i7 -= (int)-142L;
            case 78:
                Test.iFld = i8;
                break;
            case 79:
                f2 += (((i8 * i8) + Test.instanceCount) - Test.instanceCount);
                break;
            case 80:
                Test.instanceCount -= i7;
                break;
            }
        }
        vMeth1_check_sum += i6 + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            s + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, double d, float f1) {

        int i4=10, i5=619, i11=245, i12=178, i13=-99, iArr1[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(lArr, -2542764875662730803L);

        Test.iFld += (int)(f1++);
        for (i4 = 11; i4 < 287; ++i4) {
            vMeth1(54512, i4, true);
            switch ((i4 % 2) + 51) {
            case 51:
                i5 += (i4 * f1);
                i5 >>= (int)-7L;
                Test.bFld = Test.bFld;
                switch ((i4 % 6) + 27) {
                case 27:
                case 28:
                    i11 = 1;
                    do {
                        i5 = (int)f1;
                        if (i5 != 0) {
                        }
                        switch ((i11 % 9) + 109) {
                        case 109:
                            for (i12 = 1; i12 < 1; i12++) {
                                f1 += (float)d;
                                f1 += (i12 * i12);
                            }
                            break;
                        case 110:
                        case 111:
                            l += (((i11 * f1) + i5) - i11);
                            break;
                        case 112:
                            iArr1[i4] |= (int)Test.instanceCount;
                            break;
                        case 113:
                            l %= -5720302806439683668L;
                            break;
                        case 114:
                            l -= Test.iFld;
                            break;
                        case 115:
                            l = (long)d;
                        case 116:
                            iArr1[i11] = i5;
                            break;
                        case 117:
                            f1 += i11;
                            break;
                        }
                    } while (++i11 < 6);
                    break;
                case 29:
                    f1 = i12;
                    break;
                case 30:
                    Test.iFld += (int)(86.714F + (i4 * i4));
                    break;
                case 31:
                case 32:
                    i13 >>= i11;
                    break;
                }
                break;
            case 52:
                lArr[i4 - 1][i4 - 1] = 2407987088L;
            default:
                i5 += i4;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i4 + i5 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        float f=1.542F;
        long l1=3L, lArr1[]=new long[N];
        int i14=-112, i15=12, i16=-108, i17=-9364, i18=-4681;

        FuzzerUtils.init(lArr1, 889562868L);

        i2 <<= (int)Math.max((long)(i2 - f) & (Test.instanceCount--), (i3 >>> Test.instanceCount) *
            iMeth(Test.instanceCount, -74.92700, f));
        for (l1 = 15; l1 < 381; ++l1) {
            for (i15 = 1; i15 < 5; ++i15) {
                if (i3 != 0) {
                    vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + l1 + i14 + i15 + i16 + i17 + i18 +
                        FuzzerUtils.checkSum(lArr1);
                    return;
                }
                for (i17 = 1; i17 < 2; i17++) {
                    lArr1[i15] = (long)f;
                    f -= -1482692159L;
                    i14 += i17;
                    if (Test.bFld) continue;
                    Test.iArrFld[i15] += -19169;
                    Test.iFld = i14;
                    Test.iArrFld[i15 + 1] >>= i15;
                }
                try {
                    Test.iFld1 = (i18 / i18);
                    Test.iFld = (39945 / i18);
                    Test.iFld = (Test.iArrFld[(int)(l1 + 1)] % -36043);
                } catch (ArithmeticException a_e) {}
                i3 *= i3;
                i14 = i17;
            }
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + l1 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=111, i19=48546, i20=-4, i21=203, i22=89, i23=-63568, i24=37021, i25=-10, i27=131, i28=-7;
        double d2=-13.56251;
        float f3=-1.924F;
        byte by1=101;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 13644L);

        for (i = 1; i < 292; ++i) {
            vMeth(Test.iFld, i1);
            for (i19 = 3; 86 > i19; i19 += 3) {
                Test.instanceCount -= Test.iFld;
                i1 += i19;
            }
            d2 = 1;
            do {
                f3 = Test.instanceCount;
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.instanceCount += (((i21 * Test.iFld1) + i) - Test.instanceCount);
                }
                for (i23 = 1; i23 < 1; ++i23) {
                    if (Test.bFld) continue;
                    switch (((159 >>> 1) % 2) + 60) {
                    case 60:
                        i20 -= -3;
                        Test.instanceCount += i23;
                        i24 += (i23 - Test.iFld);
                        break;
                    case 61:
                    }
                    Test.instanceCount += (((i23 * Test.iFld1) + i21) - i23);
                    i22 = (int)Test.instanceCount;
                }
                f3 *= i23;
                Test.iArrFld[i - 1] %= (int)(Test.instanceCount | 1);
                i22 += (int)(59.772F + (d2 * d2));
            } while (++d2 < 86);
            Test.iFld = (int)f3;
            lArr2[i] += Test.instanceCount;
            i25 = i20;
            i1 = 1976;
            for (i27 = 86; i27 > i; i27--) {
                Test.instanceCount = 15540;
                switch (((i % 2) * 5) + 33) {
                case 36:
                    i28 = i21;
                    i25 += (22552 + (i27 * i27));
                    Test.iArrFld[i] -= (int)lFld;
                case 39:
                    Test.instanceCount = by1;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
