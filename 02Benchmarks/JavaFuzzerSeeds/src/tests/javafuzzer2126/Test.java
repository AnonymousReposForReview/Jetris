package tests.javafuzzer2126;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:13:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8272L;
    public static volatile int iFld=-68;
    public static byte byFld=109;
    public static volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)19);
        FuzzerUtils.init(Test.iArrFld, 47008);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, short s) {

        float f2=-11.849F;
        int i4=0, i5=2, i6=-19847, i7=113, i8=-48016, iArr[]=new int[N];
        double d1=0.574, d2=-2.1290;
        byte by=88;

        FuzzerUtils.init(iArr, -1260);

        Test.iFld = (int)f2;
        Test.iFld = (int)f2;
        i3 += i3;
        for (i4 = 12; i4 < 371; ++i4) {
            Test.byArrFld[i4] = (byte)i5;
            for (d1 = 1; d1 < 5; d1++) {
                i3 = i4;
                for (i7 = 1; i7 < 2; i7++) {
                    i6 += (i7 - Test.instanceCount);
                    d2 *= d2;
                    i5 += (i7 | by);
                    iArr[i7 - 1] -= (int)Test.instanceCount;
                }
                Test.instanceCount = i3;
                Test.iFld = (int)-1762416815L;
                i5 = i4;
            }
        }
        long meth_res = i3 + s + Float.floatToIntBits(f2) + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 +
            Double.doubleToLongBits(d2) + by + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f1, double d) {

        int i2=101, i9=-1, i10=59524;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -77.858F);

        Test.instanceCount = (long)(Float.intBitsToFloat(Math.min(Test.iFld, Test.iFld)) + Test.iFld);
        f1 = (float)((--d) + (83L - (Test.iFld - Test.iFld)));
        i2 = 1;
        while (++i2 < 246) {
            Test.instanceCount = (8885 * lMeth(i2, (short)(8392)));
            Test.instanceCount = Test.instanceCount;
            Test.iFld -= (int)Test.instanceCount;
            Test.iFld |= Test.byFld;
            Test.iFld |= (int)Test.instanceCount;
            for (i9 = 7; i9 > 1; --i9) {
                switch ((i9 % 2) + 41) {
                case 41:
                    fArr[i2] -= 253;
                    try {
                        Test.iFld = (243 % i2);
                        Test.iArrFld[i2 - 1] = (-16601 / i9);
                        Test.iFld = (-1558912997 / i2);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i2 - 1] -= i10;
                    i10 += (((i9 * i9) + Test.instanceCount) - Test.instanceCount);
                    break;
                case 42:
                    if (b) continue;
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i2 + i9 + i10 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, float f) {

        double d3=-35.128629;
        int i11=63684, i12=-10, i13=-18937, i14=233, i15=4;
        boolean b1=true;

        i = (int)(Math.min(Math.max(i1, i1), i << i) + (iMeth(f, d3) + Test.instanceCount));
        for (i11 = 348; i11 > 17; i11--) {
            for (i13 = 1; i13 < 5; ++i13) {
                i15 = 1;
                do {
                    if (b1) {
                        if (false) {
                            i1 += (i15 - i15);
                            Test.iArrFld[i15 + 1] *= (int)d3;
                            try {
                                Test.iArrFld[i13 + 1] = (i % i1);
                                i = (579170027 % i12);
                                i1 = (i11 % i12);
                            } catch (ArithmeticException a_e) {}
                            f += (i15 - Test.instanceCount);
                        }
                        f += i1;
                        Test.instanceCount = (long)d3;
                        i *= i15;
                    }
                    i1 += (((i15 * Test.iFld) + f) - Test.instanceCount);
                    f = f;
                } while (++i15 < 2);
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i11 + i12 + i13 + i14 + i15
            + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        float f3=99.766F;
        double d4=0.77508;
        int i16=4, i17=138, i18=-9, i19=-16100, i20=-49293, i21=-60648, i22=12;
        short s1=3957;

        vMeth(-4, Test.iFld, f3);
        for (d4 = 5; d4 < 232; d4++) {
            Test.instanceCount <<= Test.iFld;
            Test.iFld += (61911 + (d4 * d4));
            i16 = (int)f3;
            Test.instanceCount = Test.iFld;
        }
        Test.instanceCount >>= Test.iFld;
        Test.iArrFld[(i16 >>> 1) % N] *= (int)Test.instanceCount;
        Test.instanceCount <<= Test.iFld;
        lArrFld = lArrFld;
        Test.iArrFld[(i16 >>> 1) % N] = (int)d4;
        for (i17 = 8; i17 < 379; i17++) {
            switch ((i17 % 2) + 7) {
            case 7:
                Test.instanceCount -= Test.byFld;
                switch (((i17 % 2) * 5) + 24) {
                case 26:
                    s1 <<= (short)Test.instanceCount;
                    Test.iFld += (((i17 * Test.instanceCount) + i18) - Test.instanceCount);
                    for (i19 = 3; i19 < 68; i19++) {
                        i21 = 1;
                        while (++i21 < 2) {
                            i20 += (((i21 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                            i18 -= -22829;
                            f3 += f3;
                            i16 = Test.iFld;
                            Test.instanceCount = (long)f3;
                            i16 &= (int)Test.instanceCount;
                            i22 = s1;
                        }
                        lArrFld[i19 + 1] *= (long)d4;
                        Test.iFld = Test.byFld;
                        i18 /= (int)(Test.instanceCount | 1);
                        lArrFld[i17 + 1] = 46159;
                    }
                    break;
                case 31:
                    Test.iFld <<= i17;
                    break;
                }
            case 8:
                Test.iFld += (i17 * i17);
            default:
                Test.iFld += i17;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
