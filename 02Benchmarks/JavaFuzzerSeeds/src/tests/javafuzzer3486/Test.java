package tests.javafuzzer3486;

import utils.FuzzerUtils;

// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:21:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6064838463675552946L;
    public static float fFld=0.99F;
    public static short sFld=-6271;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i4=43843, i5=0, i6=6, i7=25246, i8=-25955, i9=-124, i10=6;
        boolean b1=true;

        for (i4 = 7; i4 < 239; i4++) {
            i5 >>= i5;
            for (i6 = 1; i6 < 7; i6++) {
                i7 += (-134 + (i6 * i6));
                i7 += i6;
                i5 >>= i7;
                i7 *= (int)-687862764L;
            }
            if (b1) break;
            i5 = i6;
            i8 = 1;
            do {
                for (i9 = 1; i9 < 1; ++i9) {
                    l >>= i7;
                }
                try {
                    i7 = (-817567150 / i4);
                    Test.iArrFld1[i8] = (1476960155 / i6);
                    Test.iArrFld1[i8 + 1] = (i4 % -242);
                } catch (ArithmeticException a_e) {}
                l += (i8 * i8);
                Test.fFld = 20110;
            } while (++i8 < 7);
        }
        vMeth1_check_sum += l + i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + i10;
    }

    public static long lMeth(int i3) {

        byte by=-88;
        int i11=0, i12=-13;
        float f=-1.673F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -87L);

        vMeth1(Test.instanceCount);
        Test.iArrFld1[(84 >>> 1) % N] = i3;
        switch (((i3 >>> 1) % 1) + 73) {
        case 73:
            i3 += 8;
            break;
        default:
            i3 >>= 26826;
            by += (byte)Test.fFld;
            i11 = 1;
            do {
                i3 += (i11 * i11);
                Test.sFld = (short)i3;
                for (f = 1; f < 7; ++f) {
                    i12 = (int)Test.instanceCount;
                }
                if (true) break;
                lArr[i11 - 1] <<= i12;
                Test.instanceCount += i11;
                i3 >>= 6387;
            } while (++i11 < 237);
        }
        long meth_res = i3 + by + i11 + Float.floatToIntBits(f) + i12 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(boolean b) {

        int i2=30041, i13=-14, i14=-45, i15=-8, i16=-13, i17=4, i18=176;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -34104L);

        iArrFld[(i2 >>> 1) % N] += (int)((iArrFld[(i2 >>> 1) % N] * lMeth(-154)) + -1.492F);
        for (i13 = 10; 225 > i13; i13++) {
            i14 -= (int)19759L;
            Test.instanceCount *= Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
            i2 = Test.sFld;
        }
        Test.instanceCount -= i13;
        for (i15 = 9; 264 > i15; ++i15) {
            i14 = i2;
            i16 += (-14 + (i15 * i15));
            i2 = (int)2880439143310821020L;
            for (i17 = 6; 1 < i17; --i17) {
                i2 = i2;
                try {
                    Test.iArrFld1[i17] = (i17 / i17);
                    i18 = (i17 % i17);
                    i18 = (-24376 / i16);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld1[i17 - 1] = i16;
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i2 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-22, i1=2, i19=-225, i20=8962, i21=38362, i22=2, i23=10, i24=-22106;
        boolean b2=true;
        double d=0.102867;
        short sArr[][]=new short[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)8309);
        FuzzerUtils.init(lArr2, -25679L);

        for (i = 12; i < 281; i++) {
            iArrFld[i + 1] = (i1++);
            vMeth(b2);
            Test.instanceCount += (i - i);
            i1 -= i1;
            for (i19 = 2; i19 < 93; i19++) {
                i20 -= i19;
                for (i21 = 1; i21 < 2; ++i21) {
                    Test.fFld += i21;
                }
                i20 = (int)Test.instanceCount;
                i22 = i21;
                i22 += i19;
                Test.sFld <<= (short)i;
                i1 -= (int)-3096728304L;
                i20 -= (int)Test.fFld;
                switch (((i20 >>> 1) % 9) + 20) {
                case 20:
                    i1 += (i19 ^ Test.instanceCount);
                    sArr[i19 - 1][i19] = (short)Test.fFld;
                    break;
                case 21:
                    switch (((i19 % 4) * 5) + 112) {
                    case 124:
                        i23 = 1;
                        do {
                            Test.instanceCount -= -145;
                            iArrFld[i19 - 1] += i;
                            iArrFld[i19] = i;
                        } while (++i23 < 2);
                        break;
                    case 123:
                        lArr2[i19 - 1] *= Test.sFld;
                    case 113:
                        i20 *= (int)Test.fFld;
                        i20 += i19;
                        try {
                            i22 = (iArrFld[i - 1] / i);
                            i1 = (i19 / -245);
                            i20 = (739 / i);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 116:
                        i1 += 6;
                        i20 -= i23;
                        Test.instanceCount += i19;
                        break;
                    }
                    break;
                case 22:
                    Test.fFld += (((i19 * Test.fFld) + i20) - Test.fFld);
                case 23:
                    try {
                        i22 = (42 / Test.iArrFld1[i - 1]);
                        i20 = (i24 / -180);
                        i22 = (i23 / -34428);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 24:
                    Test.instanceCount += i19;
                    break;
                case 25:
                    i20 += (((i19 * Test.instanceCount) + i23) - Test.instanceCount);
                case 26:
                    i22 += (((i19 * i23) + i22) - i20);
                    break;
                case 27:
                    iArrFld[i + 1] *= (int)Test.instanceCount;
                case 28:
                    d += i;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
