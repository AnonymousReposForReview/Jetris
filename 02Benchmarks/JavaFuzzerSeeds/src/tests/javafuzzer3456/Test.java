package tests.javafuzzer3456;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48803L;
    public static volatile int iFld=-251;
    public static double dFld=-1.105935;
    public static byte byFld=19;
    public volatile int iFld1=-44727;
    public short sFld=-2867;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 25157);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, short s) {

        int i6=-3229, i7=46350, i8=50290, i9=7, i10=-215;
        float f1=61.441F;
        long l1=114L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5492L);

        for (i6 = 20; 361 > i6; ++i6) {
            lArr[i6] -= (long)f1;
            Test.instanceCount -= 237;
            for (l1 = 5; l1 > i6; l1 -= 2) {
                f1 += (l1 * l1);
                s = (short)l1;
                if (Test.iFld != 0) {
                    vMeth2_check_sum += i4 + i5 + s + i6 + i7 + Float.floatToIntBits(f1) + l1 + i8 + i9 + i10 +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
                s = (short)3;
                i5 = i6;
                for (i9 = (int)(l1); i9 < 1; ++i9) {
                    i5 = 20603;
                    i5 += Test.iFld;
                    i4 = (int)-8568L;
                    Test.instanceCount = i6;
                    i8 >>>= Test.iFld;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + s + i6 + i7 + Float.floatToIntBits(f1) + l1 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        float f=0.765F;
        int i2=81, i3=-8, i11=-39963, i12=29873;
        short s1=13347;
        boolean b=true;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -1229883985217885883L);

        Test.iArrFld[(Test.iFld >>> 1) % N] <<= (int)((--Test.iFld) + (f - (Test.iFld * Test.iFld)));
        for (i2 = 3; i2 < 211; ++i2) {
            Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld));
            vMeth2(21245, -56910, s1);
            Test.iArrFld[i2] -= Test.iFld;
            f += (i2 * f);
            if (b) {
                if (b) {
                    lArr1[i2 - 1][i2 + 1] *= -34L;
                    if (i2 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + i3 + s1 + i11 + i12 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    for (i11 = 1; i11 < 8; i11++) {
                        lArr1[i11 + 1][i11] |= i3;
                        Test.iFld = -123;
                        Test.iFld *= (int)Test.instanceCount;
                        i3 += i11;
                    }
                } else {
                    Test.iFld += (i2 * i2);
                }
            } else if (false) {
                s1 ^= (short)Test.iFld;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + i3 + s1 + i11 + i12 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i, int i1, long l) {

        double d=-54.23905, dArr[]=new double[N];
        int i13=-27053, i14=-8, i15=-102, i16=-16273, i17=-44281;
        boolean b1=true;

        FuzzerUtils.init(dArr, 2.83212);

        vMeth1();
        for (d = 4; d < 190; d++) {
            for (i14 = 1; 9 > i14; i14++) {
                for (i16 = 1; i16 < 2; i16++) {
                    float f2=0.862F;
                    switch ((i14 % 10) + 33) {
                    case 33:
                        Test.instanceCount -= i17;
                        break;
                    case 34:
                        switch ((i16 % 5) + 126) {
                        case 126:
                        case 127:
                            Test.iArrFld[(int)(d - 1)] *= (int)Test.instanceCount;
                            Test.dFld = i17;
                            i17 += (int)l;
                            break;
                        case 128:
                            i -= i1;
                            b1 = b1;
                            break;
                        case 129:
                            Test.iFld = (int)1.864F;
                            Test.iFld *= Test.iFld;
                            break;
                        case 130:
                            Test.byFld -= (byte)-34442;
                            break;
                        }
                    case 35:
                        f2 += (i16 * i16);
                        break;
                    case 36:
                    case 37:
                        try {
                            Test.iArrFld[i14] = (Test.iArrFld[i14 + 1] % iFld1);
                            i17 = (-170 % i);
                            Test.iArrFld[(int)(d)] = (i17 / 2043250623);
                        } catch (ArithmeticException a_e) {}
                    case 38:
                        if (iFld1 != 0) {
                            vMeth_check_sum += i + i1 + l + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 +
                                (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 39:
                        Test.iArrFld = Test.iArrFld;
                    case 40:
                        dArr[(int)(d)] = sFld;
                        break;
                    case 41:
                        Test.instanceCount += i17;
                        break;
                    case 42:
                        i += (i16 * i15);
                        break;
                    default:
                        Test.dFld -= f2;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + l + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=31273, i19=-10, i20=8, i21=69, i22=-92, i23=-134, i24=36862, i25=-180;
        long l2=93293547L;
        float f3=63.667F, f4=0.849F;

        if (Test.bFld) {
            vMeth(Test.iFld, Test.iFld, Test.instanceCount);
        } else if (false) {
            for (i18 = 2; 139 > i18; i18++) {
                for (i20 = 8; i20 < 183; i20++) {
                    for (l2 = 1; l2 < 2; l2++) {
                        Test.instanceCount += (((l2 * f3) + Test.iFld) - i18);
                        i19 = Test.byFld;
                        Test.instanceCount += (-27336 + (l2 * l2));
                    }
                    i19 = (int)l2;
                    Test.instanceCount += i20;
                    i22 >>= i20;
                    for (i23 = 1; i23 < 2; ++i23) {
                        i24 = 4300;
                        i19 += (i23 * i23);
                        dArrFld[i20 + 1] -= f3;
                    }
                    i19 *= iFld1;
                    i25 = 1;
                    do {
                        Test.dFld = 159;
                        Test.instanceCount = i19;
                        Test.instanceCount = i25;
                        Test.iFld += i25;
                        iFld1 += i18;
                    } while (++i25 < 2);
                    i22 = 7;
                    if (Test.bFld) break;
                }
            }
            i22 = (int)f3;
        } else {
            f4 = 1;
            do {
                i19 -= 20501;
                Test.bFld = Test.bFld;
                Test.instanceCount += Test.byFld;
            } while (++f4 < 220);
            Test.instanceCount = sFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
