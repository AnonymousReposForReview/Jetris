package tests.javafuzzer555;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:41:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3262691749L;
    public static int iFld=-31;
    public static double dFld=0.105732;
    public boolean bFld=false;
    public float fFld=54.532F;
    public int iFld1=-17734;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -233);
        FuzzerUtils.init(Test.lArrFld, -928460295L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(double d1, int i5) {

        boolean b=true, bArr[]=new boolean[N];
        double d2=-2.90617;
        int i6=65294, i7=-108;
        byte by=120;
        long l=1406290076L;

        FuzzerUtils.init(bArr, true);

        Test.iFld -= 206;
        bArr[(i5 >>> 1) % N] = b;
        for (d2 = 1; d2 < 197; d2++) {
            i5 = by;
            try {
                Test.iFld = (-26370 / i6);
                Test.iFld = (i5 / -48090);
                Test.iArrFld[(int)(d2)] = (i6 % 63963);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += Test.iFld;
        }
        for (l = 358; l > 3; --l) {
            i5 += (int)l;
            i6 += (int)l;
            Test.instanceCount = by;
            i7 = (int)d2;
            i6 >>>= (int)-31579L;
            Test.lArrFld[(int)(l + 1)][(int)(l + 1)] = Test.iFld;
            Test.instanceCount = i6;
            i7 += Test.iFld;
        }
        long meth_res = Double.doubleToLongBits(d1) + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i6 + by + l + i7
            + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        double d=-1.89481, d3=66.37321;
        int i4=-2, i8=15001, i9=195;
        float f1=-2.943F;
        boolean b1=true;

        for (d = 125; d > 1; d -= 3) {
            Test.iFld %= (int)(((long)(-dMeth(d, -34180))) | 1);
            i4 = i4;
            Test.iArrFld[(int)(d)] += i4;
            Test.lArrFld[(int)(d + 1)][(int)(d + 1)] >>>= i4;
            i4 >>= Test.iFld;
            i4 *= (int)f1;
            Test.iFld = 4;
        }
        i4 = i4;
        i8 = 1;
        while (++i8 < 281) {
            Test.instanceCount = -59623;
        }
        i9 = 1;
        while (++i9 < 217) {
            d3 = Test.iFld;
            if (b1) continue;
            f1 += Test.instanceCount;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i8 + i9 +
            Double.doubleToLongBits(d3) + (b1 ? 1 : 0);
    }

    public static void vMeth() {

        int i=-14, i1=-6, i2=-10, i3=31355, i10=16989, i11=12236, iArr[]=new int[N];
        float f=0.456F;
        byte by1=123;
        double d4=39.49771;

        FuzzerUtils.init(iArr, 20072);

        for (i = 1; 281 > i; i++) {
            for (i2 = 6; i2 > i; i2 -= 2) {
                i3 >>= (int)((--iArr[(i >>> 1) % N]) >>> (long)((-(-(7 * (Test.instanceCount * f)))) + (-(i2 - i1))));
                Test.instanceCount <<= 4368;
                vMeth1();
                Test.instanceCount <<= i3;
                Test.instanceCount += (long)1.95035;
                for (i10 = 1; i10 < 1; ++i10) {
                    i11 = 11;
                    i1 ^= by1;
                    Test.iFld = (int)1.641F;
                    i1 /= (int)(i2 | 1);
                    by1 += (byte)(i10 - Test.iFld);
                    i3 >>= i;
                    Test.instanceCount = (long)d4;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f) + i10 + i11 + by1 + Double.doubleToLongBits(d4) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=34176, i13=-180, i14=122, i15=12, i16=8, i17=-105, i18=5;
        byte by2=-65;
        short s=16666;
        double dArr[]=new double[N];
        boolean bArr1[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 104.90846);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(fArr, 0.958F);

        vMeth();
        Test.iFld *= Test.iFld;
        for (i12 = 374; i12 > 17; --i12) {
            by2 += (byte)i12;
            by2 -= (byte)Test.instanceCount;
            i14 = 71;
            while (--i14 > 0) {
                dArr = dArr;
                Test.dFld = Test.iFld;
                Test.instanceCount <<= i13;
                for (i15 = 1; i15 < 1; i15++) {
                    bArr1[i14 + 1] = bFld;
                    i13 += (int)Test.dFld;
                    Test.iFld <<= Test.iFld;
                    fArr[i14 - 1] += i13;
                    Test.iFld = i15;
                    Test.instanceCount = Test.instanceCount;
                }
                i13 += i14;
                for (i17 = 1; 1 > i17; i17++) {
                    int i19=230;
                    i16 *= i15;
                    Test.instanceCount += i15;
                    i16 = (int)Test.instanceCount;
                    i13 *= (int)Test.instanceCount;
                    i19 = i17;
                    Test.instanceCount *= 65191;
                    s *= (short)1.11313;
                    i16 -= (int)-2.28468;
                    switch ((i14 % 9) + 97) {
                    case 97:
                        i13 = -28;
                        fFld += i13;
                        break;
                    case 98:
                        Test.instanceCount *= by2;
                    case 99:
                        Test.iArrFld[i17 + 1] = i12;
                        break;
                    case 100:
                        Test.iArrFld[i12] = Test.iFld;
                        break;
                    case 101:
                        i16 = (int)fFld;
                        break;
                    case 102:
                        i19 += (i17 | iFld1);
                    case 103:
                        fFld -= i14;
                        break;
                    case 104:
                        i19 += (i17 + Test.instanceCount);
                        break;
                    case 105:
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
