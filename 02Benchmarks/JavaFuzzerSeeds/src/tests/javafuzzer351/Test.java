package tests.javafuzzer351;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:37:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=234L;
    public volatile short sFld=16195;
    public volatile byte byFld=35;
    public double dFld=-40.34796;
    public int iFld1=-52249;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, int i9) {

        int i10=243, i11=-70, i12=-229, i13=115, i14=164, iArr1[]=new int[N];
        float f1=-39.791F;

        FuzzerUtils.init(iArr1, -10767);

        i10 = 1;
        do {
            i9 /= (int)(i10 | 1);
            i9 = (int)f1;
            i9 <<= i9;
            try {
                iArr1[i10 - 1] = (30526 % i9);
                i9 = (i9 % 187);
                iArr1[i10 - 1] = (i10 % -108);
            } catch (ArithmeticException a_e) {}
            i9 += (int)Test.instanceCount;
            for (i11 = 1; i11 < 4; i11++) {
                i9 = i9;
                iArr1[i11 + 1] <<= i9;
                i12 += (int)f1;
                i12 += (i11 | i10);
                for (i13 = 1; i13 < 2; i13 += 3) {
                    i9 += (int)Test.instanceCount;
                    Test.instanceCount *= i13;
                    i9 = (int)f1;
                }
            }
        } while (++i10 < 382);
        long meth_res = (b ? 1 : 0) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, int i8) {

        boolean b1=true;

        i8 += (int)((Math.max(Test.instanceCount, Test.instanceCount) + (i8--)) + iMeth(b1, i8));
        vMeth1_check_sum += l1 + i8 + (b1 ? 1 : 0);
    }

    public void vMeth(int i5, int i6, int i7) {

        int i15=-13, i16=-13, i17=-7140, i18=0, i19=-152, i20=-2, iArr[]=new int[N];
        float f2=-1.96F;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(byArr, (byte)-46);
        FuzzerUtils.init(sArr, (short)29767);
        FuzzerUtils.init(lArr1, -31918L);

        Test.instanceCount = (byFld = (byte)(iArr[(i7 >>> 1) % N] + i6));
        vMeth1(Test.instanceCount, i7);
        i7 -= i6;
        for (i15 = 13; i15 < 317; i15++) {
            for (i17 = 1; 5 > i17; ++i17) {
                i18 &= i7;
                for (i19 = 1; i19 < 2; i19++) {
                    byArr[i17 - 1] >>= (byte)Test.instanceCount;
                    sArr[i19] |= (short)i19;
                    dFld = i17;
                    switch ((((i18 >>> 1) % 8) * 5) + 106) {
                    case 126:
                        i6 += (((i19 * Test.instanceCount) + i20) - Test.instanceCount);
                        break;
                    case 117:
                        lArr1[i15 + 1] = iFld1;
                        break;
                    case 107:
                        i16 += (int)(3026210465L + (i19 * i19));
                        i5 -= (int)f2;
                        break;
                    case 114:
                        iFld1 += (i19 ^ Test.instanceCount);
                        break;
                    case 138:
                        iArr = iArrFld;
                        break;
                    case 108:
                        Test.instanceCount += (long)dFld;
                        break;
                    case 141:
                        Test.instanceCount = i15;
                    case 135:
                        Test.instanceCount = Test.instanceCount;
                    default:
                        i16 &= (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr3) {

        long l=-40L, l2=-5388856662981036974L, lArr[][]=new long[N][N];
        int i=244, i1=-149, i2=4, i3=-53698, i4=-41040, i21=254, i22=2;
        byte by=-99, byArr1[]=new byte[N];
        float f=-92.237F;

        FuzzerUtils.init(lArr, -6383631923688847232L);
        FuzzerUtils.init(byArr1, (byte)-105);

        l = 1;
        while (++l < 173) {
            lArr[(int)(l - 1)] = (lArr[(int)(l + 1)] = (lArr[(int)(l - 1)] = (lArr[(int)(l - 1)] = lArr[(i >>> 1) %
                N])));
            switch (((((by >>> sFld) >>> 1) % 2) * 5) + 61) {
            case 70:
                for (i1 = 8; i1 < 145; i1++) {
                    for (i3 = 1; i3 < 2; ++i3) {
                        try {
                            i = (i2 % 146);
                            i = (i3 / 43882);
                            i2 = (i % i);
                        } catch (ArithmeticException a_e) {}
                        i4 = (int)(-(f = i4));
                        vMeth(-44553, iFld1, -140);
                        i4 >>= (int)l;
                        f = Test.instanceCount;
                        i += (i3 | iFld1);
                        Test.instanceCount = i2;
                        iFld1 += i3;
                    }
                    by += (byte)-232L;
                    switch ((int)((l % 8) + 71)) {
                    case 71:
                        i21 = 1;
                        while (++i21 < 2) {
                            lArr[(int)(l)] = lArr[(int)(l)];
                            i >>>= i1;
                            i2 += (i21 * i21);
                            i2 += i;
                            Test.instanceCount = i1;
                            lArr[(int)(l - 1)][i1 - 1] <<= i1;
                            iFld1 += (i21 + Test.instanceCount);
                            i4 = i1;
                            i2 <<= i21;
                        }
                        break;
                    case 72:
                        i4 -= (int)f;
                        i2 += i2;
                        for (l2 = i1; l2 < 2; l2++) {
                            f += ((long)l2 ^ (long)iFld1);
                        }
                        break;
                    case 73:
                        Test.instanceCount += i1;
                        break;
                    case 74:
                        Test.instanceCount *= i3;
                        break;
                    case 75:
                        byArr1[(int)(l)] >>>= (byte)Test.instanceCount;
                        break;
                    case 76:
                        i += i1;
                        break;
                    case 77:
                        lArr[(int)(l)][i1 - 1] -= iFld1;
                        break;
                    case 78:
                        Test.instanceCount = (long)1.5851;
                    }
                }
            case 67:
                f -= i22;
                break;
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
