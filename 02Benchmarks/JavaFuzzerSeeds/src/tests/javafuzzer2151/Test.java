package tests.javafuzzer2151;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:32:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=125L;
    public float fFld=-30.837F;
    public static double dFld=0.84465;
    public static int iFld=-150;
    public static int iFld1=26;
    public static float fFld1=79.274F;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -50695);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i5, int i6, int i7) {


        i6 = (int)Test.instanceCount;
        i7 *= i5;
        Test.dFld *= i5;
        long meth_res = i5 + i6 + i7;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i4, short s) {

        int i8=-121, i9=-235, i10=214, i11=234, i12=-63729;
        float f=1.181F;
        byte by=53;
        boolean b=true;

        lMeth(i4, 12, Test.iFld);
        for (i8 = 19; i8 < 320; ++i8) {
            Test.instanceCount = 2;
        }
        for (f = 6; f < 342; ++f) {
            if (b) {
                by += (byte)(f - Test.iFld);
                by = by;
                Test.dFld += Test.iFld;
                for (i11 = 5; i11 > 1; i11 -= 3) {
                    Test.instanceCount *= -5;
                }
            } else if (false) {
                switch ((int)((f % 1) + 106)) {
                case 106:
                default:
                    i4 += (int)(f + i4);
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount >>= i8;
                }
                Test.dFld += i10;
            } else {
                i9 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i4 + s + i8 + i9 + Float.floatToIntBits(f) + i10 + by + i11 + i12 + (b ? 1 : 0);
    }

    public static int iMeth(int i2, int i3) {

        int i13=-49321, i14=61007, i15=-2194, i16=235, i17=1, i18=-2;

        vMeth(i2, (short)(26024));
        Test.iFld1 = Test.iFld;
        for (i13 = 11; 228 > i13; i13++) {
            for (i15 = 1; i15 < 7; ++i15) {
                Test.iArrFld[i13 - 1] += (int)Test.instanceCount;
                Test.fFld1 += i15;
                switch ((i13 % 2) + 42) {
                case 42:
                    Test.instanceCount = i13;
                    Test.iFld = i17;
                    Test.instanceCount += (i15 - i15);
                    break;
                case 43:
                    i18 = 1;
                    do {
                        i17 += (i18 - i14);
                        Test.instanceCount -= i13;
                        Test.fFld1 -= Test.instanceCount;
                    } while (++i18 < 2);
                    i17 += (((i15 * i18) + i15) - i3);
                    break;
                }
            }
        }
        long meth_res = i2 + i3 + i13 + i14 + i15 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=0, i19=13, i20=-5, i21=-9, i22=-93, i23=-5, i24=12, i25=-9, i26=-55, i27=-85;
        double d=0.69226, d1=-16.2989;
        long l=-123L, l1=-30327L;
        boolean b1=false;

        for (i = 13; 300 > i; i++) {
            i1 /= (int)(((long)(((Test.instanceCount + i1) + (62.17634 + (i1 - fFld))) * (d++))) | 1);
            i1 = (int)(iMeth(41, i1) * fFld);
            i19 = 1;
            while (++i19 < 88) {
                switch (((i % 6) * 5) + 19) {
                case 22:
                    for (i20 = 1; i20 < 1; i20++) {
                        i1 *= 24048;
                    }
                    for (i22 = 1; i22 < 1; ++i22) {
                        Test.instanceCount += Test.iFld1;
                        i1 += i22;
                    }
                    break;
                case 41:
                    Test.iFld += i1;
                    break;
                case 35:
                    Test.instanceCount += i19;
                    i21 += (int)Test.fFld1;
                    Test.dFld = Test.instanceCount;
                    l = l;
                case 28:
                    d1 = i23;
                    switch (((Test.iFld >>> 1) % 6) + 96) {
                    case 96:
                        bArrFld[i - 1] = b1;
                        i21 /= (int)(i21 | 1);
                        fFld = Test.fFld1;
                        break;
                    case 97:
                        i23 += (((i19 * i21) + Test.iFld) - l);
                    case 98:
                    case 99:
                        i21 += (int)Test.dFld;
                        i24 = 1;
                        while (--i24 > 0) {
                            i1 *= -146;
                            Test.iFld1 = (int)-50113L;
                            if (b1) break;
                        }
                        break;
                    case 100:
                        i25 = 1;
                        while (++i25 < 1) {
                            l1 = 156;
                            fFld = Test.fFld1;
                            Test.iFld *= (int)Test.instanceCount;
                        }
                        break;
                    case 101:
                        Test.iFld += (i19 * i19);
                        break;
                    }
                    break;
                case 25:
                    b1 = true;
                    break;
                case 49:
                    i26 = i27;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
