package tests.javafuzzer980;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:18:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-37688838L;
    public static short sFld=-29293;
    public static int iFld=4;
    public static long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1585240442L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        byte by1=34;
        int i6=43495, i7=250, i8=-97, i9=-48690, iArr2[]=new int[N];
        short s=13762;
        float f1=2.77F;
        double d1=-100.73770;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -37162);

        by1 = (byte)i6;
        Test.instanceCount >>>= i6;
        s *= (short)i6;
        i6 = i6;
        i7 = 1;
        do {
            f1 += i6;
            i6 = by1;
            iArr2[i7] = (int)-168L;
            switch ((((i7 >>> 1) % 9) * 5) + 33) {
            case 73:
                f1 = i6;
                i8 = 1;
                while ((i8 += 2) < 6) {
                    i9 <<= 13824;
                    iArr2[i8 + 1] = i7;
                    i6 = i8;
                    d1 *= Test.instanceCount;
                }
                break;
            case 40:
                i9 += (((i7 * i6) + i6) - i7);
                break;
            case 62:
                Test.instanceCount = -96;
                break;
            case 54:
                i9 = 131;
                break;
            case 74:
                s >>= (short)i7;
                break;
            case 63:
                i6 -= (int)d1;
                break;
            case 57:
                i6 += (((i7 * i6) + by1) - i8);
            case 53:
                Test.lArrFld[i7][i7 - 1] *= i7;
                break;
            case 38:
                b1 = true;
                break;
            default:
                s *= (short)-64.156F;
            }
        } while (++i7 < 292);
        long meth_res = by1 + i6 + s + i7 + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d1) + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(byte by) {

        int i1=28384, i3=10, i4=9761, i5=54, iArr[][]=new int[N][N], iArr1[]=new int[N];
        boolean b=true, bArr[][]=new boolean[N][N];
        double d=0.90767;
        float f2=2.32F;

        FuzzerUtils.init(iArr, 48812);
        FuzzerUtils.init(iArr1, -29);
        FuzzerUtils.init(bArr, true);

        i1 -= (int)(i1 = (int)Math.abs(Math.min(1179280289L, 42541L)));
        try {
            iArr[(14 >>> 1) % N][(i1 >>> 1) % N] = (i1--);
        }
        catch (UserDefinedExceptionTest exc1) {
            for (int i2 : iArr1) {
                for (i3 = 1; i3 < 4; ++i3) {
                    i1 = 287;
                    i5 = 1;
                    do {
                        bArr[i3][i3] = b;
                        i2 = (int)(((i1 - d) / (Long.reverseBytes(-5135676578920984641L) | 1)) - iMeth());
                        i2 = i3;
                        i1 = i5;
                        f2 += Test.instanceCount;
                        i1 += i5;
                        i4 += i2;
                        d -= i3;
                    } while (++i5 < 2);
                }
            }
        }
        vMeth1_check_sum += by + i1 + i3 + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(long l, float f, int i) {

        byte by2=110;
        int i10=-141, i11=54, i12=124, i13=-1, i14=-14702, i15=59423, i16=-206;
        double d2=0.22264;

        vMeth1(by2);
        for (i10 = 3; i10 < 177; ++i10) {
            if (i10 != 0) {
                vMeth_check_sum += l + Float.floatToIntBits(f) + i + by2 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
                    Double.doubleToLongBits(d2);
                return;
            }
        }
        for (i12 = 319; i12 > 10; i12--) {
            i13 >>= Test.sFld;
            i14 = 1;
            do {
                i11 += (i14 * i14);
                i13 += i14;
                iArrFld[i12 + 1] = -13;
                if (false) continue;
                i = (int)Test.instanceCount;
                for (i15 = 1; i15 < 1; i15++) {
                    i13 -= -106;
                    i13 *= Test.sFld;
                    d2 += i12;
                }
            } while (++i14 < 5);
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i + by2 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        float f3=0.847F;
        double d3=-1.124631, d5=9.10120, dArr[]=new double[N];
        int i17=-7, i18=-31674, i19=-237, i20=-12;
        boolean b2=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 50.128147);
        FuzzerUtils.init(byArr, (byte)86);

        vMeth(Test.instanceCount, f3, 62725);
        for (d3 = 12; d3 < 263; d3++) {
            for (i18 = 5; 100 > i18; ++i18) {
                i20 = 2;
                while (--i20 > 0) {
                    double d4=-17.54034;
                    b2 = b2;
                    dArr[i18] = Test.iFld;
                    Test.iFld += i20;
                    f3 = -2;
                    switch (((i20 >>> 1) % 2) + 100) {
                    case 100:
                        Test.instanceCount += (i20 * Test.iFld);
                        Test.instanceCount += (i20 + f3);
                        Test.iFld >>>= -190;
                        break;
                    case 101:
                        i19 *= i18;
                        Test.lArrFld[i20][(int)(d3 + 1)] = i20;
                        if (b2) {
                            b2 = b2;
                        } else if (b2) {
                            f3 *= f3;
                            switch ((((i18 >>> 1) % 9) * 5) + 36) {
                            case 71:
                                d4 += i20;
                                Test.instanceCount += (i20 - Test.instanceCount);
                                Test.instanceCount += (((i20 * i19) + i20) - i20);
                                break;
                            case 58:
                                i17 ^= Test.iFld;
                                break;
                            case 61:
                                iArrFld[i18 - 1] = i18;
                                Test.instanceCount &= 62663;
                                switch (((i18 % 7) * 5) + 36) {
                                case 49:
                                    if (b2) break;
                                    Test.instanceCount ^= Test.instanceCount;
                                    if (b2) break;
                                    d4 = Test.sFld;
                                    break;
                                case 51:
                                    d5 = -6;
                                    break;
                                case 38:
                                    Test.iFld >>= (int)Test.instanceCount;
                                    break;
                                case 55:
                                    Test.iFld += (i20 * i20);
                                    break;
                                case 43:
                                    i19 = (int)d4;
                                    break;
                                case 68:
                                    i19 += i18;
                                    break;
                                case 47:
                                    Test.iFld *= i20;
                                default:
                                    i19 >>= i18;
                                }
                                break;
                            case 76:
                                iArrFld[(int)(d3)] *= (int)d5;
                                break;
                            case 45:
                                iArrFld[(int)(d3 + 1)] >>>= i19;
                                break;
                            case 57:
                                i19 -= -7;
                                break;
                            case 49:
                                iArrFld[(int)(d3 + 1)] -= i17;
                                break;
                            case 72:
                                i17 >>= Test.iFld;
                                break;
                            case 67:
                                Test.sFld *= (short)f3;
                                break;
                            default:
                                byArr[i18] = (byte)Test.instanceCount;
                            }
                        }
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
