package tests.javafuzzer3230;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:22:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static float fFld=68.360F;
    public static boolean bFld=false;
    public static double dFld=0.38894;
    public byte byFld=-121;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -168L);
        FuzzerUtils.init(Test.iArrFld, -63643);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, long l2, long l3) {

        int i7=-5, i8=-124, i9=-14, i10=-835, i11=24435, i12=49686;

        for (i7 = 8; i7 < 229; i7 += 3) {
            i8 += (((i7 * Test.fFld) + i8) - i7);
            for (i9 = 21; 1 < i9; --i9) {
                Test.fFld -= i6;
                i6 += i10;
                Test.instanceCount = l3;
            }
        }
        i6 = i10;
        for (i11 = 7; i11 < 178; i11++) {
            if (Test.bFld) break;
            i10 >>= 252;
        }
        long meth_res = i6 + l2 + l3 + i7 + i8 + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i4, short s, long l1) {

        int i5=95, i13=145, i14=-10, i15=1, i16=-4, i17=-196;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 15.668F);

        i5 = 1;
        while (++i5 < 192) {
            l1 >>= ((Test.instanceCount * i5) * iMeth(i5, Test.instanceCount, Test.instanceCount));
        }
        i13 = 1;
        do {
            byte by=120;
            switch (((i13 % 9) * 5) + 22) {
            case 43:
                by += (byte)(22872 + (i13 * i13));
            case 50:
                if (Test.bFld) continue;
                for (i14 = 1; i14 < 11; ++i14) {
                    Test.lArrFld[i13 + 1][i14] -= i14;
                    if (Test.bFld) break;
                    if (Test.bFld) {
                        i15 = i4;
                        try {
                            Test.iArrFld[i13 + 1] = (i4 / i5);
                            Test.iArrFld[i13 - 1] = (i13 % -1711317711);
                            i15 = (1936460235 % i15);
                        } catch (ArithmeticException a_e) {}
                        for (i16 = 1; i16 < 2; ++i16) {
                            Test.bFld = Test.bFld;
                            i15 &= i13;
                        }
                    } else if (true) {
                        Test.dFld -= i16;
                    } else if (false) {
                        i17 -= 13;
                    }
                }
                break;
            case 63:
                Test.fFld += (((i13 * i17) + Test.fFld) - i16);
                break;
            case 47:
                fArr = fArr;
            case 62:
                Test.bFld = true;
                break;
            case 35:
                Test.fFld -= -2;
            case 45:
            case 58:
                i4 >>= i5;
                break;
            case 25:
                Test.dFld += i5;
                break;
            }
        } while (++i13 < 148);
        long meth_res = i4 + s + l1 + i5 + i13 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(long l, int i2, double d) {

        int i3=12, i18=-5, i19=-120, i20=-21936, i21=137;
        short s1=-30923;
        byte by1=-22, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(byArr, (byte)-21);
        FuzzerUtils.init(bArr, true);

        i3 = 1;
        do {
            sMeth(i3, s1, l);
            i2 += s1;
            i18 = 1;
            while (++i18 < 6) {
                for (i19 = 1; i19 < 1; ++i19) {
                    byArr[i19 + 1] <<= (byte)i3;
                }
                s1 <<= (short)138;
                if (Test.bFld) {
                    if (i2 != 0) {
                        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d) + i3 + s1 + i18 + i19 + i20 + i21 + by1
                            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                } else if (Test.bFld) {
                    i20 += i18;
                } else {
                    switch (((i18 % 7) * 5) + 79) {
                    case 108:
                        i21 = 1;
                        do {
                            int i22=-4;
                            if (Test.bFld) {
                                i22 = (int)l;
                                i20 += (int)Test.instanceCount;
                            } else {
                                bArr[i21] = Test.bFld;
                            }
                        } while (++i21 < 1);
                        break;
                    case 112:
                        Test.dFld += l;
                        break;
                    case 86:
                        i2 += (i18 | i18);
                        break;
                    case 96:
                        Test.iArrFld[i3] *= i18;
                        break;
                    case 92:
                        Test.iArrFld[i18] = i20;
                        break;
                    case 90:
                        Test.iArrFld[i18] >>= (int)Test.instanceCount;
                    case 93:
                        i2 |= by1;
                        break;
                    }
                }
            }
        } while (++i3 < 284);
        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d) + i3 + s1 + i18 + i19 + i20 + i21 + by1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=52485, i1=6375, i23=-4091, i24=194, i25=46499, i26=-27, iArr[]=new int[N];
        boolean b=true;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr1, -1.885F);

        Test.fFld = (Test.instanceCount -= (--Test.instanceCount));
        i = (i /= (int)(((i + 104) * i) | 1));
        b = (b = Test.bFld);
        i1 = 1;
        while ((i1 += 2) < 396) {
            i >>>= (int)(((i * -1.102640) - (Test.fFld - Test.fFld)) * i);
            vMeth(Test.instanceCount, 215, Test.dFld);
            Test.instanceCount *= Test.instanceCount;
            Test.fFld += (((i1 * byFld) + i1) - i1);
            switch ((i1 % 2) + 16) {
            case 16:
                iArr[i1 + 1] /= (int)(i1 | 1);
                if (b) {
                    Test.instanceCount >>= -11L;
                    iArr = Test.iArrFld;
                    i += (((i1 * Test.instanceCount) + i) - i1);
                } else {
                    i += (((i1 * i1) + i) - Test.fFld);
                    fArr1[i1] = 47;
                    Test.fFld = i1;
                }
                for (i23 = i1; 127 > i23; i23++) {
                    if (Test.bFld) continue;
                    i24 += i;
                }
            case 17:
                if (b) {
                    for (i25 = 3; i25 < 127; i25++) {
                        i -= i;
                        i24 = (int)Test.instanceCount;
                        i >>= i24;
                        Test.instanceCount += -3986;
                    }
                }
                iArr[i1] *= i26;
                Test.instanceCount += byFld;
                i26 += (int)Test.instanceCount;
                break;
            default:
                Test.iArrFld = iArr;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
