package tests.javafuzzer2475;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:16:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3760688463L;
    public int iFld=9;
    public static float fFld=43.55F;
    public static int iFld1=-2;
    public static int iFld2=-9;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -203);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=-40129, i5=-65, i6=13, i7=10, i8=47475;
        double d2=121.9471;
        byte by=-21;
        boolean b=false;

        for (i4 = 9; i4 < 315; ++i4) {
            Test.iFld1 -= Test.iFld1;
            i6 = i6;
            d2 = 1;
            do {
                Test.iArrFld[(int)(d2 + 1)] -= (int)d2;
                Test.iFld1 = i5;
                i5 = i6;
                for (i7 = 1; i7 < 1; ++i7) {
                    i8 *= i4;
                    i5 = by;
                    i5 >>= (int)Test.instanceCount;
                }
                i8 = (int)Test.instanceCount;
                i8 = i4;
                Test.instanceCount = i7;
                Test.bArrFld[i4 - 1] = b;
            } while (++d2 < 5);
        }
        vMeth1_check_sum += i4 + i5 + i6 + Double.doubleToLongBits(d2) + i7 + i8 + by + (b ? 1 : 0);
    }

    public static int iMeth(long l1) {

        double d1=-51.79412, d3=-34.30490;
        int i3=-27776, i9=-181, i10=131, i11=-13102, i12=8, iArr[]=new int[N];
        long l2=-215L, l3=199L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 27715);
        FuzzerUtils.init(lArr, 2983593367L);

        iArr[(Test.iFld1 >>> 1) % N] *= (int)(Test.iFld1 + (-(++d1)));
        l1 <<= iArr[(i3 >>> 1) % N];
        vMeth1();
        i3 >>= (int)l2;
        Test.iFld1 *= (int)1.420F;
        i9 = 1;
        do {
            Test.fFld %= (l3 | 1);
            lArr[i9 - 1] = -11;
            for (i10 = i9; i10 < 8; i10++) {
                l1 = (long)Test.fFld;
                for (d3 = 1; d3 < 1; ++d3) {
                    i3 += (int)(d3 - i11);
                    iArr[(Test.iFld1 >>> 1) % N] %= 6;
                    iArr[(i10 >>> 1) % N] -= i12;
                    i12 = -14228;
                }
            }
        } while (++i9 < 205);
        long meth_res = l1 + Double.doubleToLongBits(d1) + i3 + l2 + i9 + l3 + i10 + i11 + Double.doubleToLongBits(d3)
            + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l) {

        double d=59.57362;
        int i13=-88, i14=30087, i15=-14;

        Test.iFld1 = (int)(Test.iFld1 -= (int)((long)(d - -21158) ^ (Test.iFld1 * l)));
        i2 += (iMeth(Test.instanceCount) * i2);
        i13 = 1;
        while (++i13 < 313) {
            Test.iFld1 = i13;
            Test.iFld1 >>>= Test.iFld1;
            i14 = 1;
            while (++i14 < 5) {
                if (true) {
                    i15 = 1;
                    do {
                        l = Test.iFld1;
                        Test.iFld1 += (((i15 * Test.instanceCount) + Test.fFld) - l);
                        Test.instanceCount = i13;
                        switch (((i15 % 2) * 5) + 21) {
                        case 23:
                            Test.iFld1 += i13;
                            break;
                        case 29:
                            if (false) continue;
                            d = l;
                            break;
                        }
                    } while (++i15 < 1);
                } else {
                    Test.iFld1 += i14;
                }
            }
        }
        vMeth_check_sum += i2 + l + Double.doubleToLongBits(d) + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        short s=22577;
        int i=119, i1=-24048, i16=-32, i17=217, i18=-19953, i19=-95, i20=-29, i21=33779, i22=-11, i23=-64613, i24=1,
            i25=2286;
        double d4=0.117408, dArr[]=new double[N];
        boolean b1=false;

        FuzzerUtils.init(dArr, -2.21190);

        Test.instanceCount += (long)((-(iFld - Test.fFld)) - s);
        for (i = 367; i > 18; --i) {
            vMeth(Test.iFld1, Test.instanceCount);
            i1 += (int)Test.instanceCount;
        }
        for (i16 = 11; i16 < 326; ++i16) {
            if (true) {
                Test.iFld1 += Test.iFld1;
            }
            Test.iFld1 += (int)Test.instanceCount;
            for (i18 = 1; i18 < 80; i18++) {
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.fFld *= s;
                    Test.fFld = Test.instanceCount;
                    Test.instanceCount >>>= iFld;
                    i21 = (int)d4;
                    iFld += i;
                }
                Test.fFld = i17;
                if (b1) continue;
                for (i22 = 1; i22 < 2; i22++) {
                    Test.iFld1 = i17;
                    Test.fFld += (57558 + (i22 * i22));
                    d4 -= -156L;
                }
                b1 = b1;
                dArr[i18 - 1] *= Test.instanceCount;
                Test.fFld -= i20;
                i21 -= i;
                for (i24 = 1; i24 < 2; ++i24) {
                    Test.iFld2 >>= -7487;
                    iFld += (i24 + Test.instanceCount);
                }
                Test.iFld1 = Test.iFld1;
            }
            s += (short)i18;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
