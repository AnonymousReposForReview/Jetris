package tests.javafuzzer2594;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:59:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=107L;
    public int iFld=141;
    public float fFld=-2.142F;
    public static float fFld1=107.648F;
    public static volatile boolean bFld=false;
    public static short sFld=-23432;
    public static long lFld=-14L;
    public int iFld1=-1;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -91);
        FuzzerUtils.init(Test.sArrFld, (short)-19960);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=-9, i5=27586, i6=159, i7=-64855, i8=63, i9=35184, i10=48008, i11=-11, iArr1[]=new int[N];
        short s=-23366, sArr[]=new short[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(sArr, (short)-30994);
        FuzzerUtils.init(iArr1, -222);
        FuzzerUtils.init(bArr, true);

        for (i4 = 6; 221 > i4; ++i4) {
            for (i6 = 1; i6 < 7; i6++) {
                Test.instanceCount = i5;
                Test.fFld1 += Test.instanceCount;
            }
            for (i8 = 1; i8 < 7; i8++) {
                if (b) {
                    sArr[i4] >>= (short)Test.instanceCount;
                    for (i10 = 1; 2 > i10; i10++) {
                        i11 += (i10 - i11);
                        iArr1[i8 + 1] = -61;
                        Test.instanceCount <<= Test.instanceCount;
                        i5 = (int)Test.instanceCount;
                        s -= (short)Test.instanceCount;
                        bArr[i4] = true;
                        Test.fFld1 *= i8;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i3) {


        i3 = (int)(i3 *= (int)lMeth());
        long meth_res = i3;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=205, i2=-8, i12=-44525, i13=12, i14=1306, i15=-26, iArr[][]=new int[N][N];
        byte by=-97;
        long l=64992L, lArr[]=new long[N];
        double d1=2.124081;
        float f=0.660F, fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(fArr, -57.743F);
        FuzzerUtils.init(lArr, -12L);

        for (i1 = 11; i1 < 200; ++i1) {
            i2 += (((i1 * Test.fFld1) + Test.fFld1) - i1);
        }
        i2 &= (int)Test.instanceCount;
        by = (byte)(i2 - (l++));
        iArr[(95 >>> 1) % N][(i1 >>> 1) % N] += iMeth1(i2);
        for (i12 = 22; 364 > i12; ++i12) {
            i2 -= (int)d1;
            i14 = 1;
            do {
                i15 = 1;
                while (++i15 < 1) {
                    f += (float)d1;
                    i13 += (i15 * f);
                    fArr[i15 - 1][i12] -= i13;
                    iArr[i15 - 1][i12 + 1] >>= i15;
                    i13 %= (int)(i14 | 1);
                    lArr[i14 + 1] += i14;
                }
            } while (++i14 < 5);
        }
        long meth_res = i1 + i2 + by + l + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))
            + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i17=58569, i18=-176, i19=17, i20=0, i21=-138;
        double d=1.124165, dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, -1.27964);
        FuzzerUtils.init(lArr1, 103L);

        i = 1;
        while (++i < 180) {
            iFld += (((i * fFld) + Test.instanceCount) - iFld);
        }
        d -= (((47792 * iMeth()) - i) * i);
        for (int i16 : Test.iArrFld) {
            Test.sArrFld[(iFld >>> 1) % N] |= (short)iFld;
            for (i17 = 2; i17 < 63; ++i17) {
                i18 -= i;
                i18 += (i17 * i17);
                for (i19 = 1; i19 < 2; ++i19) {
                    d -= i20;
                    dArr[i19] = -179;
                    i18 += (i19 + i17);
                    i16 += (i19 + i19);
                    i18 = i17;
                    lArr1 = lArr1;
                    switch (((i19 % 2) * 5) + 45) {
                    case 50:
                        Test.bFld = Test.bFld;
                        Test.sFld ^= (short)i19;
                        break;
                    case 48:
                    default:
                        if (true) continue;
                        iFld = (int)Test.lFld;
                        i16 -= i16;
                        Test.instanceCount >>>= iFld1;
                    }
                }
                i21 = 1;
                while (++i21 < 2) {
                    iFld = -5567;
                    lArr1 = lArr1;
                    i16 += (int)-3715735757L;
                    Test.instanceCount >>= iFld;
                    Test.iArrFld[(iFld >>> 1) % N] -= (int)-425450050L;
                }
            }
            i18 = iFld;
            i18 = iFld1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
