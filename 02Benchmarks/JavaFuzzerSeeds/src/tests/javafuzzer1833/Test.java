package tests.javafuzzer1833;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:10:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-37692L;
    public static float fFld=0.95F;
    public static boolean bFld=false;
    public static volatile double dFld=0.120637;
    public short sFld=31937;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4707);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9) {

        int i10=0, i11=0, i12=48, i13=2, i14=61470, i15=4, i16=89, iArr[]=new int[N];
        boolean b=true;
        long l=2274425103L;

        FuzzerUtils.init(iArr, -2);

        for (i10 = 3; i10 < 389; i10 += 3) {
            Test.instanceCount += i10;
            iArr[i10 - 1] = (int)Test.instanceCount;
            if (b) continue;
            i11 += (i10 * i10);
            for (i12 = 1; i12 < 12; i12++) {
                i11 = i13;
                for (l = i12; l < 2; l++) {
                    b = b;
                    i13 *= i10;
                    Test.fFld += i13;
                }
            }
            for (i15 = 1; i15 < 12; i15++) {
                i13 = (int)-142L;
                if (true) break;
                i9 *= i14;
            }
        }
        long meth_res = i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + l + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        int i7=-32661, i8=13, i17=-4, i18=-46, i19=230, i20=-55, i21=-5385, i22=5256;
        long l1=-1680960072242649048L, lArr[]=new long[N];
        short s=12513;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 9L);

        for (i7 = 278; i7 > 6; --i7) {
            i8 <<= i7;
            i5 += iMeth1(i5);
            i6 += (i7 ^ Test.instanceCount);
            if (i8 != 0) {
                vMeth_check_sum += i5 + i6 + i7 + i8 + i17 + i18 + l1 + i19 + i20 + i21 + i22 + s +
                    FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
                return;
            }
        }
        Test.bFld = Test.bFld;
        for (i17 = 13; i17 < 233; ++i17) {
            i6 *= (int)l1;
            for (i19 = 1; i19 < 7; ++i19) {
                bArr[i19 - 1] = false;
                for (i21 = i19; i21 < 2; i21++) {
                    Test.fFld += (i21 + i5);
                    s *= (short)i20;
                    l1 += (((i21 * i18) + i22) - s);
                    lArr[i19 + 1] -= Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i17 + i18 + l1 + i19 + i20 + i21 + i22 + s + FuzzerUtils.checkSum(bArr)
            + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        double d=-85.64784;
        int i4=9, i23=-57331, i24=-38881, i25=222, i26=-12632, i27=-11, i28=-13, i29=-3112, i30=34717;
        short s1=8907;
        byte by=41;

        d = 312;
        while (--d > 0) {
            i4 += (-13 + (d * d));
            switch (((i4 >>> 1) % 5) + 101) {
            case 101:
                vMeth(i4, i4);
            case 102:
                s1 >>= (short)22040;
                for (i23 = 1; 5 > i23; ++i23) {
                    for (i25 = 1; i25 < 2; ++i25) {
                        i24 -= i26;
                        i24 = by;
                        i24 += (i25 - i26);
                    }
                    for (i27 = 1; i27 < 2; ++i27) {
                        switch (((i28 >>> 1) % 10) + 19) {
                        case 19:
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)1);
                            i28 += (((i27 * i23) + Test.instanceCount) - i26);
                            Test.instanceCount += (i27 * by);
                            break;
                        case 20:
                            try {
                                i26 = (-228 % i28);
                                Test.iArrFld[i23 + 1] = (-1844 % i29);
                                i24 = (Test.iArrFld[i27 + 1] / -34495);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 21:
                            Test.dFld *= i27;
                        case 22:
                            Test.fFld = by;
                            break;
                        case 23:
                        case 24:
                            if (i30 != 0) {
                            }
                            break;
                        case 25:
                            Test.iArrFld[i23 + 1] = 33;
                            break;
                        case 26:
                            i29 += (int)d;
                            break;
                        case 27:
                            Test.iArrFld[(int)(d + 1)] = i23;
                            break;
                        case 28:
                            i30 = i23;
                            break;
                        default:
                            i4 += (((i27 * Test.fFld) + i24) - i26);
                        }
                    }
                }
                break;
            case 103:
                Test.instanceCount = i23;
                break;
            case 104:
                Test.dFld = i24;
                break;
            case 105:
                Test.iArrFld[(int)(d)] = i26;
                break;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + s1 + i23 + i24 + i25 + i26 + by + i27 + i28 + i29 + i30;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=42962, i1=-14, i2=-203, i3=-181, i31=24529;
        double d1=-2.19639;
        byte by1=-112;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-6958);

        for (i = 16; 379 > i; i += 3) {
            i1 >>= Integer.reverseBytes((int)(Test.fFld * (Test.fFld - i)));
            if (Test.bFld) {
                Test.instanceCount += (i * i);
            } else if (Test.bFld) {
                for (i2 = i; i2 < 207; ++i2) {
                    Test.fFld %= (((long)(((++Test.fFld) - (i2 - i1)) - iMeth())) | 1);
                    i3 += (int)(103.258F + (i2 * i2));
                    i3 += i2;
                    for (d1 = 1; 1 > d1; ++d1) {
                        if (false) {
                            by1 += (byte)d1;
                            by1 = (byte)i2;
                        }
                        switch ((i % 3) + 71) {
                        case 71:
                            Test.fFld -= Test.fFld;
                            Test.iArrFld[i] += i;
                            sFld += (short)(((d1 * i31) + Test.instanceCount) - Test.instanceCount);
                            break;
                        case 72:
                            dArrFld[(int)(d1 + 1)] -= i3;
                            i31 = i31;
                            i31 = i;
                            break;
                        case 73:
                            i31 = by1;
                            switch ((int)((d1 % 8) + 18)) {
                            case 18:
                                Test.iArrFld[i] %= -113;
                            case 19:
                                Test.iArrFld = Test.iArrFld;
                                i1 = 124;
                                sArr[(int)(d1 + 1)] = (short)i1;
                                Test.iArrFld[i2] -= i;
                                break;
                            case 20:
                                Test.dFld -= i3;
                                i31 *= (int)-6995534021624624565L;
                            case 21:
                                i31 = (int)Test.instanceCount;
                                break;
                            case 22:
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 23:
                                i3 = by1;
                                break;
                            case 24:
                                Test.fFld -= i;
                            case 25:
                                Test.iArrFld = Test.iArrFld;
                            }
                            break;
                        default:
                            i31 += (int)200L;
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
