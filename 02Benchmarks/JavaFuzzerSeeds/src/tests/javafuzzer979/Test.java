package tests.javafuzzer979;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:18:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=289816267L;
    public static byte byFld=49;
    public static short sFld=-13588;
    public float fFld=-2.590F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 50084);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8) {

        double d1=102.124773, dArr[]=new double[N];
        int i9=-16, i10=40862, i11=-10, i12=-8859, iArr[]=new int[N];
        float f=-2.119F;

        FuzzerUtils.init(dArr, -15.71086);
        FuzzerUtils.init(iArr, -14);

        i8 |= i8;
        Test.byFld += (byte)i8;
        d1 *= i8;
        i9 = 1;
        while (++i9 < 294) {
            for (i10 = 6; i10 > 1; i10--) {
                if (true) break;
                dArr[i10] = Test.instanceCount;
                i11 *= (int)Test.instanceCount;
                i8 = (int)-27218L;
                Test.instanceCount = (long)-2.119F;
                try {
                    iArr[i10] = (iArr[i9 - 1] / 177);
                    i11 = (i11 / -83);
                    i8 = (17297 / iArr[i10 + 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount -= i11;
                i12 = 1;
                do {
                    i11 -= -63;
                    f -= i10;
                } while (++i12 < 2);
            }
        }
        vMeth2_check_sum += i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l1) {

        int i7=-24, i13=49, i14=62266, i15=2, i16=6846, i17=-183, i18=213;
        double d2=-20.107671;
        boolean b=false;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)16247);
        FuzzerUtils.init(fArr, 1.339F);

        i7 = i7;
        vMeth2(i7);
        Test.instanceCount -= i7;
        sArr = FuzzerUtils.short1array(N, (short)6648);
        Test.iArrFld[(i7 >>> 1) % N] *= 2;
        d2 = Test.instanceCount;
        for (i13 = 5; i13 < 265; ++i13) {
            switch (((i14 >>> 1) % 9) + 61) {
            case 61:
                for (i15 = 1; i15 < 6; ++i15) {
                    Test.instanceCount += (((i15 * l1) + i7) - Test.instanceCount);
                    for (i17 = 2; i17 > 1; i17--) {
                        d2 -= Test.instanceCount;
                        i7 -= (int)d2;
                        i18 += (((i17 * Test.sFld) + Test.instanceCount) - i16);
                    }
                    if (b) break;
                }
            case 62:
                i7 <<= (int)-2290046920L;
            case 63:
                i18 <<= i7;
                break;
            case 64:
                l1 = i15;
            case 65:
            case 66:
                i7 -= (int)l1;
                break;
            case 67:
                i16 = i17;
                break;
            case 68:
                Test.byFld %= (byte)(l1 | 1);
            case 69:
                i7 += i7;
                break;
            }
        }
        vMeth1_check_sum += l1 + i7 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i1, int i2, long l) {

        int i3=-12, i4=-10, i5=-118, i6=-195, i19=-4, i20=-14, i21=-34853;
        double d3=35.77413;
        boolean b1=false;

        for (i3 = 23; i3 < 376; ++i3) {
            if (b1) {
                for (i5 = i3; i5 < 5; ++i5) {
                    vMeth1(l);
                    switch (((i3 % 9) * 5) + 52) {
                    case 63:
                        l += -194L;
                        break;
                    case 55:
                        i1 -= i1;
                        break;
                    case 77:
                        Test.instanceCount = i6;
                        Test.byFld += (byte)(82.136F + (i5 * i5));
                        i4 += i5;
                        break;
                    case 56:
                        for (i19 = 1; i19 < 1; ++i19) {
                            l = i5;
                            i6 += (i19 + i20);
                        }
                        break;
                    case 64:
                        fFld += Test.byFld;
                        d3 = Test.sFld;
                    case 96:
                        d3 = i3;
                        break;
                    case 80:
                        i4 += i21;
                    case 65:
                        i20 = (int)Test.instanceCount;
                    case 73:
                        fFld -= 186;
                    }
                }
            } else if (b1) {
                i6 <<= i3;
            } else if (b1) {
                i4 += (int)l;
            }
        }
        vMeth_check_sum += i1 + i2 + l + i3 + i4 + i5 + i6 + i19 + i20 + Double.doubleToLongBits(d3) + i21 + (b1 ? 1 :
            0);
    }

    public void mainTest(String[] strArr1) {

        int i=146, i22=-117, i23=-10281, i24=61754, i25=-201, i26=6, i27=52, i28=-10, i29=-176, i30=2;
        double d=-28.91437, d4=1.89845;
        float f2=0.381F, f3=0.563F;
        long lArr[]=new long[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(lArr, 126L);
        FuzzerUtils.init(sArr1, (short)-25137);

        if (Test.bFld) {
            switch (((((i--) >>> 1) % 10) * 5) + 12) {
            case 26:
                lArr[(i >>> 1) % N] += (-Math.min(i + i, i - i));
                d -= Test.instanceCount;
                Test.instanceCount -= i;
                vMeth(i, -9, -3473374072L);
                break;
            case 25:
                i <<= (int)Test.instanceCount;
                break;
            case 37:
                f2 = 1;
                while (++f2 < 126) {
                    for (i22 = 5; i22 < 199; i22++) {
                        d = i23;
                        for (i24 = 1; 2 > i24; i24++) {
                            Test.instanceCount = Test.instanceCount;
                            fFld += i22;
                            i23 = (int)fFld;
                            lArr[(int)(f2 - 1)] <<= i22;
                            i23 >>= i24;
                        }
                        lArr[(int)(f2)] = (long)1.656F;
                        i26 = 1;
                        while ((i26 += 2) < 2) {
                            i23 += i26;
                            sArr1[i22 - 1] >>= Test.byFld;
                            i23 = i24;
                        }
                        i23 = (int)Test.instanceCount;
                        for (f3 = 1; f3 < 2; ++f3) {
                            sArr1[i22] &= (short)184;
                        }
                    }
                    for (d4 = 199; d4 > 3; --d4) {
                        fFld *= Test.instanceCount;
                        i23 += 2232;
                    }
                    for (i29 = 8; i29 < 199; ++i29) {
                        sArr1[i29] /= (short)(i23 | 1);
                        i27 += (((i29 * i24) + Test.instanceCount) - i25);
                    }
                }
            case 42:
                Test.iArrFld[(-55 >>> 1) % N] += -94;
            case 57:
                i28 &= (int)Test.instanceCount;
            case 43:
                i30 += (int)Test.instanceCount;
                break;
            case 48:
                Test.instanceCount = i27;
                break;
            case 36:
                Test.iArrFld[(i28 >>> 1) % N] = i28;
            case 62:
                i27 -= i29;
                break;
            case 40:
                i = (int)Test.instanceCount;
                break;
            default:
                fFld = i27;
            }
        } else if (Test.bFld) {
            Test.iArrFld[(i24 >>> 1) % N] += i25;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
