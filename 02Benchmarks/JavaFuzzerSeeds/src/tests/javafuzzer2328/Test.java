package tests.javafuzzer2328;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:32:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3233834130L;
    public static byte byFld=-84;
    public static float fFld=0.651F;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -32921);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.byArrFld, (byte)-35);
        FuzzerUtils.init(Test.fArrFld, 2.261F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        short s=22511;
        double d=-1.36459;
        int i5=0, i6=-13, i7=-111, i8=6, i9=164, iArr[]=new int[N];
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 74);
        FuzzerUtils.init(lArr1, 43L);

        iArr[(i4 >>> 1) % N] = i3;
        s += (short)d;
        for (i5 = 6; i5 < 187; i5++) {
            iArr[i5] *= i5;
            i4 += (i5 * i5);
            d = s;
            lArr1[i5] -= 47229L;
            i7 = 1;
            while (++i7 < 9) {
                i4 += (int)1.264F;
                i3 = -204;
                if (b) continue;
                for (i8 = 1; i8 > 1; i8 -= 2) {
                    i9 -= i6;
                    i4 |= (int)Test.instanceCount;
                    i3 += i4;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + s + Double.doubleToLongBits(d) + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i) {

        int i1=-244, i2=23234, i10=-14, i11=46328, i12=37120, i13=-13;
        double d1=0.54741;
        long lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, 8343811058254983490L);
        FuzzerUtils.init(fArr, 0.375F);

        for (i1 = 11; i1 < 380; i1++) {
            vMeth1(i2, 54);
        }
        for (i10 = 17; i10 < 281; ++i10) {
            Test.instanceCount *= i11;
            Test.instanceCount = 12;
            Test.byFld += (byte)Test.fFld;
            i += (i10 * i10);
            i11 += (i10 * i10);
            switch (((i10 % 9) * 5) + 57) {
            case 97:
                i11 += i11;
                break;
            case 71:
                Test.iArrFld[i10 - 1] |= (int)Test.instanceCount;
                for (i12 = 1; i12 < 6; i12++) {
                    Test.instanceCount += (i12 + i);
                }
                i = -167;
                break;
            case 61:
                i = i11;
                break;
            case 89:
            case 67:
                fArr[i10 + 1] = fArr[(i11 >>> 1) % N];
            case 66:
                lArr = lArr;
            case 83:
                i2 >>>= i11;
                break;
            case 59:
                d1 -= Test.byFld;
                break;
            case 74:
                Test.byFld >>= (byte)Test.instanceCount;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {


        vMeth(-195);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i14=251, i15=-2, i16=44745, i17=14, i18=187, i19=198, i20=-74, i21=32, i22=-112;
        double d2=1.26586;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 2L);

        for (int smallinvoc=0; smallinvoc<692; smallinvoc++) vSmallMeth();
        Test.instanceCount *= i14;
        i14 -= Test.byFld;
        for (i15 = 2; i15 < 350; ++i15) {
            i16 += i15;
            d2 -= 56872L;
            Test.iArrFld = Test.iArrFld;
            switch (((i15 % 3) * 5) + 60) {
            case 66:
                for (i17 = 3; 72 > i17; i17++) {
                    Test.instanceCount = 24176;
                    i19 = 1;
                    do {
                        i16 <<= i19;
                        switch (((i16 >>> 1) % 1) + 108) {
                        case 108:
                            Test.bArrFld[i17 + 1] = true;
                            d2 = i17;
                            break;
                        }
                        Test.byArrFld[i15] -= (byte)i19;
                        Test.instanceCount *= Test.instanceCount;
                        Test.byFld += (byte)(i19 ^ i16);
                    } while (++i19 < 2);
                    Test.fFld -= -152;
                    lArr2[i17 - 1] <<= i20;
                    Test.fArrFld[i17 - 1] *= -115;
                    Test.instanceCount %= (Test.instanceCount | 1);
                    for (i21 = 1; i21 < 2; ++i21) {
                        d2 = Test.instanceCount;
                        Test.instanceCount = i19;
                    }
                    Test.instanceCount += Test.byFld;
                }
                break;
            case 72:
                Test.instanceCount <<= -58909;
                Test.fFld -= i19;
                Test.fFld = Test.instanceCount;
                i18 += (i15 * i19);
                break;
            case 75:
                Test.fFld += i20;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
