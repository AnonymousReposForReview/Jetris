package tests.javafuzzer2362;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:27:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=45605L;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 148);
        FuzzerUtils.init(Test.dArrFld, 2.21696);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        short s1=6671;
        int i8=-59191, i9=30758, i10=55617, i11=-52949, i12=-164;
        float f=-1.333F;
        long l2=12296L, lArr[]=new long[N];
        byte by=36;

        FuzzerUtils.init(lArr, -1056263809L);

        s1 = s1;
        i7 = i6;
        for (i8 = 9; i8 < 231; i8 += 3) {
            lArr[i8] <<= Test.instanceCount;
            for (i10 = i8; i10 < 21; ++i10) {
                i11 = i7;
                f += f;
                i7 -= i6;
                for (l2 = 1; l2 < 1; l2++) {
                    by = (byte)i8;
                    i7 += (int)(((l2 * f) + i7) - i9);
                    by <<= (byte)i12;
                    try {
                        i7 = (-1848973600 / i7);
                        Test.iArrFld[(int)(l2 - 1)] = (i12 % i7);
                        Test.iArrFld[i10 - 1] = (i11 % i8);
                    } catch (ArithmeticException a_e) {}
                    i11 = 59;
                    Test.instanceCount = i6;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + s1 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + l2 + i12 + by +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l1, int i5) {

        double d=1.113827;
        int i13=81, i14=18979, i15=-172, i16=46951, i17=-10;
        short s2=-30079;
        byte by1=-46;
        boolean b=true;
        float fArr[][]=new float[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -2.208F);
        FuzzerUtils.init(lArr1, 4L);

        d *= Test.iArrFld[(i5 >>> 1) % N];
        vMeth1(i5, i5);
        i13 = 1;
        do {
            fArr[i13] = fArr[i13 + 1];
            for (i14 = 1; i14 < 13; i14++) {
                l1 >>>= i15;
                s2 *= (short)14;
                l1 -= i14;
                i15 += i14;
                for (i16 = i13; i16 < 2; i16++) {
                    l1 = 75;
                    switch ((((i5 >>> 1) % 9) * 5) + 87) {
                    case 123:
                        if (i5 != 0) {
                            vMeth_check_sum += l1 + i5 + Double.doubleToLongBits(d) + i13 + i14 + i15 + s2 + i16 + i17
                                + by1 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                                FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                        lArr1[i13 - 1] = i15;
                        d += i17;
                        break;
                    case 120:
                        d = l1;
                        break;
                    case 97:
                        Test.iArrFld[i16] -= i13;
                        break;
                    case 116:
                        l1 = i17;
                    case 96:
                        i15 -= i15;
                    case 122:
                        l1 = -11000;
                        break;
                    case 109:
                        i5 *= i13;
                        break;
                    case 132:
                        by1 = (byte)i16;
                        break;
                    case 118:
                        i5 -= i13;
                    default:
                        b = b;
                    }
                }
            }
        } while (++i13 < 121);
        vMeth_check_sum += l1 + i5 + Double.doubleToLongBits(d) + i13 + i14 + i15 + s2 + i16 + i17 + by1 + (b ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(short s, long l) {

        int i18=-12;

        vMeth(l, i18);
        l = Test.instanceCount;
        vSmallMeth_check_sum += s + l + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=215, i1=-45054, i3=-61194, i4=3, i19=-30969, i20=-13, i21=35439, i22=-169, i23=79, i24=13617, i25=201,
            i26=-140, iArr[]=new int[N];
        short s3=31289;
        float f1=26.790F;
        double d1=0.52964;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(lArr2, 44442L);

        for (i = 2; i < 135; i++) {
            for (i3 = 6; i3 < 188; i3++) {
                i4 <<= (int)(--Test.instanceCount);
            }
            bFld = bFld;
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(s3, Test.instanceCount);
            lArr2[i] += i;
            for (i19 = i; 188 > i19; i19++) {
                byte by2=71;
                f1 += (i19 * i19);
                i1 &= by2;
                i4 = (int)42947L;
                d1 *= i3;
                i1 = -6199;
                iArr[i] = (int)17.765F;
                for (i21 = 1; i21 < 1; i21++) {
                    i20 += (-3734 + (i21 * i21));
                }
                f1 = i4;
            }
            bFld = bFld;
            Test.instanceCount %= (i1 | 1);
            i22 = (int)Test.instanceCount;
            i22 >>= (int)-56L;
        }
        iArr[(i21 >>> 1) % N] = i21;
        i22 >>>= i3;
        for (i23 = 6; i23 < 186; ++i23) {
            switch (((i23 % 1) * 5) + 3) {
            case 5:
                for (i25 = 8; i25 < 139; ++i25) {
                    i22 = 25;
                    i24 |= i;
                    s3 += (short)i21;
                    bFld = false;
                }
            default:
                Test.dArrFld[i23] = -186;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
