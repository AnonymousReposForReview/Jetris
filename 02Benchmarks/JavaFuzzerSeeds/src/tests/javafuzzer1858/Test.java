package tests.javafuzzer1858;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:41:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static int iFld=153;
    public static short sFld=28052;
    public static double dFld=125.37095;
    public static short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-24843);
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.lArrFld, 6306731849393090169L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d=1.77659, d1=-53.118615, dArr[]=new double[N];
        int i4=-2, i5=-36828, i6=-48, i7=2, i8=11, i9=61;
        float f1=58.9F, fArr[]=new float[N];

        FuzzerUtils.init(dArr, 114.33413);
        FuzzerUtils.init(fArr, 2.401F);

        Test.iFld -= (int)Test.instanceCount;
        for (d = 20; d < 377; ++d) {
            f1 += Test.instanceCount;
            Test.iFld += (int)d;
        }
        i4 *= 8;
        Test.iFld *= Test.iFld;
        for (i5 = 12; 269 > i5; ++i5) {
            dArr[i5 + 1] -= i4;
            for (i7 = 1; i7 < 6; i7++) {
                i4 += i5;
                i8 += 4999;
                i4 = i8;
                for (d1 = 1; d1 < 2; d1 += 3) {
                    i6 = i4;
                    fArr[i5 - 1] /= (Test.instanceCount | 1);
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d1) + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l) {

        int i2=-107, i3=-1, i10=235, i11=10831;
        boolean b=true;
        byte by=-88;
        float f2=0.354F;

        Test.sArrFld[(Test.iFld >>> 1) % N] += (short)-107.297F;
        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        for (i2 = 4; i2 < 175; i2++) {
            Test.iFld += (((i2 * i2) + l) - l);
            vMeth2();
            if (b) continue;
        }
        by >>>= (byte)Test.iFld;
        i3 %= (int)(i2 | 1);
        for (i10 = 6; 238 > i10; ++i10) {
            i3 = -161;
            i3 >>>= (int)872716139L;
            switch (((i10 % 5) * 5) + 32) {
            case 37:
                i3 += i11;
                Test.lArrFld[i10] += i10;
                i3 -= Test.iFld;
            case 49:
                Test.instanceCount = i10;
                break;
            case 56:
                Test.instanceCount += (((i10 * i10) + Test.sFld) - f2);
                break;
            case 54:
            case 33:
                Test.iFld = i10;
                break;
            default:
                l -= (long)1.59458;
            }
        }
        vMeth1_check_sum += l + i2 + i3 + (b ? 1 : 0) + by + i10 + i11 + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i1, short s) {

        float f=1.19F;
        int i12=-49995, i13=-163, i14=242, i15=-6, i16=39817, i17=-18796, i18=32489;
        double d2=0.20652;

        i1 -= (int)(f--);
        s -= (short)Math.abs(i1--);
        vMeth1(1L);
        for (i12 = 10; i12 < 209; i12++) {
            Test.instanceCount = i12;
            for (i14 = 1; 8 > i14; ++i14) {
                Test.iArrFld[i12] *= s;
                i15 = i15;
                for (i16 = i14; i16 < 2; ++i16) {
                    d2 *= Test.instanceCount;
                    f += (((i16 * i18) + i16) - Test.iFld);
                    Test.iArrFld = Test.iArrFld;
                    i13 = i15;
                    i18 >>= Test.iFld;
                    i15 += (((i16 * f) + i17) - i17);
                }
            }
        }
        vMeth_check_sum += i1 + s + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(d2) + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=-16155, i19=30166, i20=10, i21=-7, i22=34759, i23=-6134, i24=0, i25=163, i26=-18, i27=3, i28=-62365,
            i29=8, iArr[]=new int[N];
        float f3=-14.109F;
        boolean b1=true;
        byte by1=120;
        double d3=2.67456;

        FuzzerUtils.init(iArr, -40457);

        iArr[(i >>> 1) % N] -= (int)(-((i + 0.1009F) * Integer.reverseBytes(i)));
        vMeth(Test.iFld, (short)(8968));
        Test.iFld <<= Test.iFld;
        for (i19 = 10; i19 < 282; ++i19) {
            Test.iFld = (int)f3;
            i = -59;
            for (i21 = 2; 92 > i21; i21++) {
                for (i23 = 1; i23 < 2; i23 += 3) {
                    i20 += (((i23 * Test.instanceCount) + Test.instanceCount) - Test.sFld);
                    i22 += (i23 ^ (long)f3);
                    bArrFld[i19] = b1;
                    Test.dFld += i24;
                }
                Test.dFld *= 2456926165L;
            }
            Test.iArrFld[i19 + 1] *= i19;
            switch ((i19 % 2) + 57) {
            case 57:
                for (i25 = 3; i25 < 92; i25++) {
                    i = by1;
                    Test.instanceCount >>= Test.instanceCount;
                    for (i27 = 1; i27 < 2; ++i27) {
                        i26 += i28;
                        iArr[i25] += (int)f3;
                        i = Test.iFld;
                    }
                    for (d3 = 1; d3 < 2; d3++) {
                        i20 += (int)(d3 * by1);
                        Test.instanceCount += -54273;
                        Test.iFld = 193;
                    }
                    i26 = i23;
                    i26 = Test.sFld;
                }
                break;
            case 58:
                i29 &= i21;
                i29 = -4;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
