package tests.javafuzzer2667;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:20:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3003688285L;
    public static double dFld=47.17954;
    public static boolean bFld=false;
    public static float fFld=-97.708F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 185L);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static float fMeth(int i3) {

        int i4=3, i5=9, i6=-4, i7=29, i8=-10, i9=28235, i10=8, i11=153, i12=8, i13=7, iArr1[]=new int[N];
        double d=-2.107374, dArr[]=new double[N];
        short s=10744;
        float f=2.648F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -4125320304L);
        FuzzerUtils.init(byArr, (byte)104);
        FuzzerUtils.init(iArr1, -25);
        FuzzerUtils.init(dArr, 11.128155);

        i3 <<= (++i3);
        for (i4 = 3; i4 < 232; ++i4) {
            for (i6 = 1; i6 < 7; i6++) {
                i7 = i3;
                for (i8 = i6; i8 < 2; i8++) {
                    lArr[i8] *= (((-(Test.instanceCount - i5)) << (lArr[i4 - 1] += i9)) * (i5 + (i3--)));
                    d -= ((i3++) - ((i10 * -12) - s));
                    i5 += (int)(0.465F + (i8 * i8));
                    i10 = i3;
                    f = byArr[i6 + 1];
                }
                for (i11 = 1; 2 > i11; i11++) {
                    s -= (short)(i10 += (--i5));
                }
                i13 = 1;
                do {
                    byte by=72;
                    Test.instanceCount -= (iArr1[i4 + 1]--);
                    i5 = (int)(((--dArr[i4 - 1]) - (Test.instanceCount + by)) * (-i5));
                } while (++i13 < 2);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + s +
            Float.floatToIntBits(f) + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i15) {


        i15 = 28381;
        vMeth_check_sum += i15;
    }

    public static int iMeth1(float f1) {

        int i16=-46736, i17=-182, i18=98, i19=5, i20=37, i21=5, i22=-5, iArr2[]=new int[N];
        double d2=1.72500;

        FuzzerUtils.init(iArr2, 9523);

        vMeth(i16);
        for (d2 = 14; 374 > d2; d2++) {
            Test.dFld = i17;
            try {
                iArr2[(int)(d2)] = (iArr2[(int)(d2 - 1)] / 252);
                i16 = (iArr2[(int)(d2 - 1)] % i16);
                i16 = (i17 / i16);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) {
                i16 = (int)47.128350;
            } else if (Test.bFld) {
                for (i18 = 1; i18 < 5; i18++) {
                    try {
                        i19 = (i20 / 127);
                        i19 = (i18 / i19);
                        i20 = (44571 / i19);
                    } catch (ArithmeticException a_e) {}
                    Test.bFld = Test.bFld;
                    Test.instanceCount <<= 12481;
                    for (i21 = (int)(d2); i21 < 2; i21++) {
                        i19 -= i18;
                        i20 += i21;
                        i20 -= i19;
                        i19 += (int)(1264492364L + (i21 * i21));
                    }
                }
            } else {
                f1 += Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20 + i21 +
            i22 + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, long l) {

        int i14=-34, i23=60598, i24=-19068, i25=-249, i26=-25536, i27=207, i28=-64, iArr[]=new int[N];
        double d1=1.87137;
        long l1=-5L;

        FuzzerUtils.init(iArr, -11);

        iArr[(-61823 >>> 1) % N] = (i1 = i2);
        i2 = (int)fMeth(Math.max((int)(Test.instanceCount * i2), Math.min(i1, i1)));
        i1 = (--i14);
        i14 *= (int)(~(long)((i1 - d1) + (l * i2)));
        iArr[(i14 >>> 1) % N] = (int)(iMeth1(Test.fFld) - Test.instanceCount);
        for (i23 = 6; 214 > i23; ++i23) {
            i14 <<= i2;
            Test.fFld += l;
        }
        i25 = 1;
        while (++i25 < 220) {
            for (l1 = 1; l1 < 7; ++l1) {
                if (Test.bFld) continue;
                i26 = (int)l;
                for (i27 = 1; i27 < 2; i27++) {
                    i24 <<= i27;
                    i26 += i25;
                }
            }
        }
        long meth_res = i1 + i2 + l + i14 + Double.doubleToLongBits(d1) + i23 + i24 + i25 + l1 + i26 + i27 + i28 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i29=-69, i30=-3507, i31=90, i32=-5, i33=11, i34=37, iArr3[]=new int[N], iArr4[][]=new int[N][N];
        short s1=7095;
        byte by1=48;

        FuzzerUtils.init(iArr3, -1);
        FuzzerUtils.init(iArr4, 4509);

        i <<= ((iMeth(i, i, Test.instanceCount) * i) * 12);
        for (i29 = 15; i29 < 376; i29++) {
            i30 = 56127;
            for (i31 = i29; 70 > i31; ++i31) {
                for (i33 = 1; i33 < 1; i33++) {
                    i30 *= i29;
                    i32 >>>= i33;
                    iArr3[i33] >>= (int)Test.instanceCount;
                    Test.instanceCount += (i33 * i33);
                    i += (i33 ^ i29);
                    iArr3[i31] *= i33;
                    Test.lArrFld[i33 - 1] <<= i34;
                }
                switch ((((i33 >>> 1) % 8) * 5) + 29) {
                case 69:
                    i32 = i31;
                case 66:
                    Test.instanceCount += (i31 - Test.instanceCount);
                    if (Test.bFld) {
                        Test.instanceCount += -11;
                        Test.instanceCount ^= i32;
                        i += (((i31 * Test.fFld) + i33) - s1);
                    } else {
                        Test.fFld *= i33;
                        by1 = (byte)i29;
                    }
                    try {
                        i = (iArr4[i31][i31 + 1] % -69);
                        i30 = (i32 / iArr3[i31 - 1]);
                        i = (i34 / 6426);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 55:
                    i -= i33;
                    Test.instanceCount += i31;
                    Test.dFld = i;
                    Test.instanceCount += (((i31 * i30) + i30) - i30);
                    break;
                case 59:
                    i -= (int)Test.instanceCount;
                    iArr3[i29 - 1] = (int)33992L;
                    break;
                case 40:
                    i34 *= i;
                    i32 += (((i31 * i31) + i31) - i33);
                    break;
                case 58:
                case 62:
                    i += (i31 ^ i32);
                    break;
                case 44:
                    Test.fFld = (float)Test.dFld;
                    break;
                default:
                    Test.instanceCount += i31;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
