package tests.javafuzzer2676;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:35:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6998250750057487429L;
    public static int iFld=-30840;
    public static int iFld1=4;
    public int iFld2=-224;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 69.112738);
        FuzzerUtils.init(Test.fArrFld, -55.924F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static float fMeth(long l, int i8, int i9) {


        i9 -= (int)l;
        long meth_res = l + i8 + i9;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(short s1, boolean b, double d1) {

        int i11=-1, i12=203, i13=-58770, i14=-10, i15=125, i16=147, i17=-813, i18=68, iArr2[]=new int[N];
        float f3=-5.104F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -7L);
        FuzzerUtils.init(iArr2, -1825);

        if (b) {
            lArr1[(Test.iFld >>> 1) % N] = Test.iFld;
            for (i11 = 6; i11 < 170; ++i11) {
                try {
                    i12 = (50061 / i13);
                    i13 = (i12 / iArr2[i11]);
                    i13 = (i13 % -4625);
                } catch (ArithmeticException a_e) {}
                for (i14 = 10; i14 > 1; i14 -= 2) {
                    iArr2[i14] *= 18719;
                }
                Test.iFld += i11;
                iArr2[i11] -= (int)d1;
            }
            for (i16 = 11; i16 < 285; i16++) {
                b = true;
                f3 = i13;
                i18 = 1;
                do {
                    try {
                        i12 = (Test.iFld / Test.iFld);
                        i13 = (i11 % i17);
                        i15 = (10656 % i18);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = 9;
                    i13 = Test.iFld1;
                } while (++i18 < 6);
            }
        } else if (b) {
            i12 += i18;
        }
        vMeth1_check_sum += s1 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
            Float.floatToIntBits(f3) + i18 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(float f2, int i10) {

        double d2=2.90874, d3=1.123561;
        int i19=62259, i20=-116, i21=-15498, i22=117, i23=10, i24=12, i25=56825, i26=32858, iArr3[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -1085741964L);
        FuzzerUtils.init(iArr3, 12);

        vMeth1((short)(-22627), true, d2);
        for (i19 = 7; i19 < 342; ++i19) {
            i20 += i19;
            lArr2[i19] = i10;
            for (i21 = 5; i21 > i19; i21--) {
                i23 += (int)d2;
            }
            iArr3[i19 - 1] = i23;
            iArr3[i19 - 1] /= (int)(0 | 1);
            Test.fArrFld[i19 - 1] = Test.iFld;
            try {
                i23 = (31773 / iArr3[i19 + 1]);
                i24 = (Test.iFld % i24);
                i25 = (i24 / i22);
            } catch (ArithmeticException a_e) {}
            for (d3 = i19; d3 < 5; d3++) {
                Test.instanceCount = 5;
                i24 -= 27276;
            }
            i20 -= (int)Test.instanceCount;
            i10 &= i26;
        }
        long meth_res = Float.floatToIntBits(f2) + i10 + Double.doubleToLongBits(d2) + i19 + i20 + i21 + i22 + i23 +
            i24 + i25 + Double.doubleToLongBits(d3) + i26 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s, int i2) {

        int i3=7, i4=-186, i5=-43153, i6=-87, i7=116, iArr1[]=new int[N];
        double d=1.32950;
        float f1=-37.1022F;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -35858L);
        FuzzerUtils.init(iArr1, 5918);
        FuzzerUtils.init(sArr, (short)-881);

        for (i3 = 2; 381 > i3; ++i3) {
            i2 = i2;
            i4 >>= (int)(Long.reverseBytes(lArr[i3 - 1]) + ((i4 + i3) + Math.min(i4, i2)));
            iArr1 = (iArr1 = (iArr1 = (iArr1 = FuzzerUtils.int1array(N, (int)-111))));
            iArr1[i3 - 1] += ((++i2) - s);
            i5 = 4;
            while (--i5 > 0) {
                i2 <<= (int)lArr[i3 - 1];
                for (i6 = 1; i6 < 1; i6++) {
                    iArr1[i6 + 1] = (int)(Math.abs(++d) + ((50.904F * (Test.instanceCount + i4)) - (--f1)));
                    iArr1[i6 - 1] = (int)(((i6 + i6) - fMeth(Test.instanceCount, i5, -27480)) + (++sArr[i3]));
                    i2 = (i2 |= ((i6 + 27546) - (i7++)));
                    i4 += (i6 - i4);
                    if (i5 != 0) {
                        vMeth_check_sum += s + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
                            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
                            FuzzerUtils.checkSum(sArr);
                        return;
                    }
                    try {
                        i4 = (i5 % 58714);
                        i7 = (i4 % -187);
                        iArr1[i5 - 1] = (i4 % 35115);
                    } catch (ArithmeticException a_e) {}
                    i2 |= ((Test.iFld--) + iMeth(-19.861F, i4));
                }
            }
        }
        vMeth_check_sum += s + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-28460, i1=-62, i27=93, i28=-98, i29=10, i30=80, i31=-34747, i32=6, iArr[][]=new int[N][N];
        float f=-23.174F;
        short s2=17325;
        boolean b1=true;
        long lArr3[]=new long[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(lArr3, -3432718103229252737L);

        for (i = 13; i < 288; i++) {
            double d4=0.25641;
            try {
                i1 = (i % 37658);
                iArr[i][i + 1] = (i1 / i1);
                iArr[i][i] = (i % -1826420609);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount -= (long)((i * (-Math.max(i1, i1))) - ((++Test.dArrFld[i]) / (((long)(i + f)) | 1)));
            if (b1) {
                switch (((i % 1) * 5) + 98) {
                case 100:
                default:
                    switch ((i % 5) + 88) {
                    case 88:
                        vMeth((short)(-26060), i);
                    case 89:
                        Test.instanceCount = Test.instanceCount;
                        iArr[i][i + 1] = i;
                        Test.iFld1 -= -6562;
                        try {
                            Test.iFld1 = (Test.iFld1 / Test.iFld1);
                            iArr[i - 1][i] = (-655778074 % iArr[i + 1][i + 1]);
                            iFld2 = (iArr[i][i + 1] % -52);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 90:
                        switch ((((i1 >>> 1) % 1) * 5) + 63) {
                        case 67:
                            for (i27 = 1; i27 < 91; i27 += 3) {
                                for (i29 = 4; i29 > i; i29--) {
                                    Test.iFld += (((i29 * i28) + Test.instanceCount) - s2);
                                    lArr3[i] += i28;
                                    Test.iFld1 -= i;
                                    f += (((i29 * Test.instanceCount) + iFld2) - i30);
                                    i1 += (-12 + (i29 * i29));
                                    Test.instanceCount += (i29 * iFld2);
                                    iArr[i27 + 1][i - 1] = (int)Test.instanceCount;
                                }
                                iFld2 *= (int)f;
                                i30 = Test.iFld1;
                                if (b1) break;
                                for (i31 = 4; 1 < i31; i31 -= 3) {
                                    i30 *= (int)Test.instanceCount;
                                    iArr[i31 + 1][i - 1] = i28;
                                    i28 += (i31 * Test.instanceCount);
                                }
                                try {
                                    i1 = (-32321 / i1);
                                    i28 = (55827 / i28);
                                    iArr[i27][i27] = (138 / i30);
                                } catch (ArithmeticException a_e) {}
                            }
                            Test.instanceCount = 3;
                            break;
                        default:
                            d4 *= i;
                        }
                    case 91:
                        Test.iFld += i29;
                        break;
                    case 92:
                        iArr[i][i + 1] = (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
