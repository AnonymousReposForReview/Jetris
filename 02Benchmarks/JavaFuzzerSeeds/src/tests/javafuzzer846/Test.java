package tests.javafuzzer846;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:53:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-28032L;
    public double dFld=114.70813;
    public static byte byFld=-90;
    public static int iFld=-1;
    public static boolean bFld=false;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -35L);
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=-58697, i9=2, i10=21950, i11=14;
        double d=-112.64993;
        short s=-28052;
        boolean b=true;
        float f=-105.898F;

        for (i8 = 6; i8 < 263; i8++) {
            i10 = 1;
            do {
                i9 -= i8;
                Test.instanceCount = Test.byFld;
                d -= i8;
                i11 = 1;
                do {
                    s += (short)i11;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount = i10;
                    if (b) break;
                    i9 += i11;
                    if (true) {
                        f *= i10;
                        Test.lArrFld[i10] = i8;
                        vMeth1_check_sum += i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + s + (b ? 1 : 0) +
                            Float.floatToIntBits(f);
                        return;
                    } else {
                        d = i8;
                    }
                } while (++i11 < 1);
            } while (++i10 < 6);
        }
        vMeth1_check_sum += i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + s + (b ? 1 : 0) +
            Float.floatToIntBits(f);
    }

    public static void vMeth(byte by, int i5) {

        int i6=-5, i7=12804, i12=-2, i13=-204, i14=10;
        float f1=-126.292F, f2=0.44F;
        long l2=8354582144130726253L;
        double d1=2.90570;

        for (i6 = 6; i6 < 289; ++i6) {
            vMeth1();
            f1 -= f1;
            for (i12 = 1; 6 > i12; i12++) {
                for (l2 = i6; l2 < 2; l2++) {
                    i7 -= i6;
                    i7 += 196;
                    i7 += (int)(((l2 * i5) + i6) - i14);
                    i7 += (int)(((l2 * Test.byFld) + i14) - f1);
                    i5 *= (int)f1;
                    Test.iArrFld[i6][i6] <<= i12;
                    i7 >>= i13;
                    Test.instanceCount -= (long)d1;
                    i14 *= i14;
                    f1 -= f2;
                }
            }
        }
        vMeth_check_sum += by + i5 + i6 + i7 + Float.floatToIntBits(f1) + i12 + i13 + l2 + i14 +
            Double.doubleToLongBits(d1) + Float.floatToIntBits(f2);
    }

    public int iMeth() {

        long l=35900L, l1=-4565451219080258526L;
        int i1=-14, i2=-125, i3=-18547, i4=19, i15=200;
        float f3=-1.548F;

        for (l = 21; l < 384; l++) {
            for (l1 = 5; l1 > 1; l1--) {
                for (i3 = 1; 2 > i3; i3++) {
                    vMeth(Test.byFld, i2);
                    Test.iFld %= (int)(Test.instanceCount | 1);
                    Test.byFld = (byte)Test.instanceCount;
                }
            }
            i15 = 1;
            do {
                Test.iArrFld[i15][(int)(l + 1)] = (int)83280942L;
                Test.instanceCount *= 177;
                Test.lArrFld[i15 + 1] += -7606702691438134314L;
                Test.iArrFld[i15][i15] += i2;
                Test.iFld -= 36987;
                Test.instanceCount = (long)f3;
                Test.lArrFld[(int)(l + 1)] += Test.iFld;
                Test.iArrFld[i15 - 1][i15] >>= i15;
            } while (++i15 < 5);
        }
        long meth_res = l + i1 + l1 + i2 + i3 + i4 + i15 + Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=38973, i16=11613, i17=-7, i18=64238, i19=-225, i20=31572, i21=9539, i22=-1, i23=19533;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -134L);
        FuzzerUtils.init(dArr, 0.107003);

        dFld += (((Test.instanceCount++) * (lArr[(i >>> 1) % N]++)) + iMeth());
        i -= i;
        for (i16 = 8; i16 < 149; i16++) {
            i18 = 1;
            while (++i18 < 178) {
                i += i18;
                lArr[i18 + 1] += 28857;
                dArr[i18] = Test.iFld;
                i19 = 1;
                while (++i19 < 1) {
                    i = -25;
                    i >>= (int)Test.instanceCount;
                    Test.instanceCount -= Test.byFld;
                    i17 += i16;
                    i *= (int)dFld;
                    dFld = i;
                }
                Test.instanceCount += -11;
                for (i20 = i16; i20 < 1; i20 += 3) {
                    i21 >>= (int)-6736847086213376642L;
                    i21 = i;
                    Test.iArrFld[i18][i18] += Test.byFld;
                    Test.iFld += -171;
                    i21 += i;
                }
                for (i22 = 1; 1 > i22; i22 += 2) {
                    Test.instanceCount = -7L;
                    Test.byFld += Test.byFld;
                }
                Test.instanceCount = i23;
            }
        }
        for (long l3 : Test.lArrFld) {
            if (Test.bFld) break;
            Test.bFld = Test.bFld;
            if (Test.bFld) continue;
            sArrFld[(i18 >>> 1) % N] = (short)i16;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
