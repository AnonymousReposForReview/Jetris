package tests.javafuzzer1103;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public short sFld=3862;
    public static double dFld=1.66526;
    public static byte byFld=89;
    public static short sFld1=-16837;
    public static volatile float fFld=51.283F;
    public static volatile boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.66514);
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i10=-8, i11=-133, i12=-8644, i13=-12, iArr1[]=new int[N];
        float f3=-2.834F;
        short s=-460;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(byArr, (byte)126);

        for (i10 = 2; 158 > i10; ++i10) {
            Test.instanceCount <<= i11;
            for (i12 = i10; i12 < 10; ++i12) {
                Test.dFld -= i13;
                iArr1[i10 + 1] <<= i13;
                byArr[i12 - 1] = (byte)i11;
                switch ((i12 % 1) + 58) {
                case 58:
                    Test.instanceCount += (i12 - f3);
                    iArr1[i10] += Test.byFld;
                    Test.instanceCount -= s;
                    break;
                }
                i11 = (int)-1.204F;
                iArr1[i12 + 1] = i13;
                Test.instanceCount = i12;
                Test.dArrFld = Test.dArrFld;
            }
            if (i12 != 0) {
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + s + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(double d1) {

        int i9=55643, i14=-227, i15=-13, i16=1103, i17=8, i18=6425, i19=39, i20=-40431;
        float f2=-1.295F, fArr[][]=new float[N][N];
        long l=-109L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6201900460799402831L);
        FuzzerUtils.init(fArr, 115.629F);

        i9 -= (int)(-55761 - Test.instanceCount);
        Test.instanceCount = (long)(lArr[(4 >>> 1) % N] = (long)(f2 - lMeth()));
        for (l = 7; 132 > l; l++) {
            for (i15 = (int)(l); i15 < 13; i15 += 2) {
                for (i17 = 1; i17 < 1; i17++) {
                    Test.instanceCount = Test.instanceCount;
                }
                i19 = 1;
                do {
                    Test.dFld -= i18;
                    Test.sFld1 += (short)i18;
                    fArr[(int)(l)][(int)(l - 1)] *= i15;
                    i9 = i16;
                } while (++i19 < 1);
            }
            Test.iArrFld = FuzzerUtils.int1array(N, (int)53164);
        }
        f2 = Test.instanceCount;
        i9 = Test.byFld;
        fArr[(73 >>> 1) % N][(i20 >>> 1) % N] = -2.508F;
        long meth_res = Double.doubleToLongBits(d1) + i9 + Float.floatToIntBits(f2) + l + i14 + i15 + i16 + i17 + i18 +
            i19 + i20 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i2, float f1) {

        int i3=-216, i4=61773, i5=193, i6=9, i7=-94, i8=-56328, i21=-49836, iArr[]=new int[N];
        double d=-1.105727;

        FuzzerUtils.init(iArr, -215);

        for (i3 = 7; 260 > i3; ++i3) {
            for (i5 = i3; i5 < 6; i5 += 3) {
                i2 += (i5 * i5);
                for (i7 = 1; i7 < 1; ++i7) {
                    i2 >>= (++iArr[i7 - 1]);
                    i8 += (((i7 * f) + i8) - i2);
                    d -= (i4++);
                    Test.instanceCount >>= (i2 >>= iMeth(d));
                    i21 >>= -5220;
                    Test.byFld >>= (byte)i6;
                    if (i21 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6
                            + i7 + i8 + Double.doubleToLongBits(d) + i21 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
                Test.sFld1 |= (short)-8;
                Test.iArrFld[i5] = (int)Test.instanceCount;
                i2 >>= -121;
            }
        }
        Test.instanceCount = i4;
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d) + i21 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-29141, i1=33512, i22=13743, i23=42716, i24=2905, i25=-8430, i26=-49117, i27=13, i28=-5, i29=37178,
            i30=-65;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, -1L);
        FuzzerUtils.init(bArr, false);

        for (i = 5; 237 > i; i++) {
            i1 += (((i * sFld) + i1) - Test.instanceCount);
            vMeth(Test.fFld, i1, Test.fFld);
            Test.instanceCount = i1;
            i1 &= 61669;
        }
        Test.iArrFld[(i >>> 1) % N] -= i1;
        for (i22 = 2; i22 < 128; i22++) {
            i23 ^= i;
            for (i24 = i22; i24 < 199; i24++) {
                Test.fFld += (i24 - Test.instanceCount);
                if (Test.bFld) break;
            }
        }
        i26 = 1;
        do {
            Test.instanceCount += (((i26 * i25) + i25) - i25);
            Test.bFld = false;
            for (i27 = 5; i27 < 131; ++i27) {
                if (Test.bFld) break;
                i23 -= (int)Test.fFld;
                Test.instanceCount += (139 + (i27 * i27));
                i1 += i27;
                switch ((((i22 >>> 1) % 3) * 5) + 66) {
                case 68:
                    Test.instanceCount += i;
                    for (i29 = 1; i29 < 2; i29++) {
                        Test.iArrFld[i26 - 1] = i25;
                        lArr1[i27] += i;
                    }
                    i28 += (((i27 * i27) + Test.instanceCount) - i23);
                    break;
                case 76:
                    Test.iArrFld[i27] = i29;
                    Test.instanceCount -= Test.instanceCount;
                    i23 += (int)1.192F;
                    bArr[i26 - 1] = Test.bFld;
                    break;
                case 72:
                    i28 += (i27 * Test.instanceCount);
                    break;
                }
            }
        } while (++i26 < 192);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
