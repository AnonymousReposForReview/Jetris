package tests.javafuzzer3369;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:45:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=40156L;
    public static double dFld=-91.46816;
    public static short sFld=9056;
    public static boolean bFld=true;
    public static int iFld=122;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -69.904F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i12=-1, i13=13, i14=-1, i15=39846, i16=-46989, i17=30684;
        byte by=-24;
        float f2=-19.25F;

        switch (((i12 >>> 1) % 3) + 29) {
        case 29:
            for (i13 = 5; i13 < 282; ++i13) {
                if (i14 != 0) {
                    vMeth1_check_sum += l + i12 + i13 + i14 + i15 + i16 + i17 + by + Float.floatToIntBits(f2);
                    return;
                }
                Test.instanceCount += (long)Test.dFld;
                for (i15 = 1; i15 < 6; i15++) {
                    switch (((i15 % 3) * 5) + 105) {
                    case 110:
                        Test.sFld *= (short)Test.dFld;
                    case 116:
                    case 112:
                        i17 = 1;
                        while (++i17 < 2) {
                            by += (byte)(i17 ^ Test.instanceCount);
                            Test.dFld += i12;
                            Test.instanceCount -= i13;
                            f2 *= i14;
                            i12 -= (int)l;
                        }
                        i16 -= i12;
                        break;
                    default:
                        l += i15;
                    }
                }
            }
            break;
        case 30:
            i14 &= 12;
            break;
        case 31:
            i14 += (int)l;
        }
        vMeth1_check_sum += l + i12 + i13 + i14 + i15 + i16 + i17 + by + Float.floatToIntBits(f2);
    }

    public static float fMeth(int i7, int i8, int i9) {

        int i10=173, i11=-60, i18=204, i19=22957, i20=-81, i21=226, iArr1[]=new int[N];
        double d=79.39712;
        float f1=1.294F;
        byte by1=-87;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3794390860L);
        FuzzerUtils.init(iArr1, -71);

        for (i10 = 299; i10 > 16; i10 -= 3) {
            d -= i11;
            i8 = (int)(f1--);
            vMeth1(10L);
            lArr[i10 - 1] = i10;
            Test.sFld += (short)(i10 * i10);
            if (Test.bFld) continue;
            i18 = 1;
            while (++i18 < 16) {
                switch (((i10 % 10) * 5) + 112) {
                case 131:
                    i9 = (int)Test.instanceCount;
                    Test.instanceCount = (long)f1;
                    for (i19 = 1; i19 < 1; i19++) {
                        i11 -= i10;
                        if (Test.bFld) break;
                        Test.dFld = Test.dFld;
                    }
                case 140:
                    i7 <<= i20;
                    break;
                case 146:
                    by1 = (byte)i11;
                    break;
                case 132:
                    iArr1[i10 + 1] -= i20;
                    break;
                case 134:
                    Test.instanceCount *= i7;
                    break;
                case 117:
                    i7 -= (int)f1;
                    break;
                case 155:
                    Test.instanceCount = Test.sFld;
                    break;
                case 130:
                    if (true) break;
                    break;
                case 141:
                    iArr1 = iArr1;
                    break;
                case 118:
                    Test.iFld >>>= 139;
                    break;
                default:
                    try {
                        Test.iFld = (iArr1[i18 - 1] / Test.iFld);
                        i21 = (26022 / i18);
                        i7 = (i18 / i10);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i18 + i19 +
            i20 + by1 + i21 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i2, float f) {

        int i3=-61, i4=44919, i5=-193, i6=-30647, iArr[]=new int[N];
        boolean b=true;
        byte by2=-6;

        FuzzerUtils.init(iArr, -210);

        f = 63595;
        i2 &= (--i2);
        for (i3 = 8; i3 < 197; ++i3) {
            b = (((i2 >> i4) - (i2 + i3)) < ((++f) + Math.min(i2, i4)));
            try {
                i4 = (i2 % i3);
                iArr[i3 - 1] = (i3 % 183);
                iArr[i3] = (i4 / i2);
            } catch (ArithmeticException a_e) {}
            for (i5 = 1; 8 > i5; i5++) {
                Test.fArrFld[i3] -= (fMeth(i3, -22584, i5) * Test.instanceCount);
                i2 = 13;
                b = b;
                i2 += i2;
                Test.fArrFld[i5 + 1] *= Test.instanceCount;
            }
            Test.sFld = (short)Test.iFld;
            i6 = (int)-6L;
            by2 += (byte)Test.dFld;
            Test.iFld -= 1;
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + (b ? 1 : 0) + i5 + i6 + by2 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-19143, i1=-44541, i22=39294, i23=229, i24=-36266, i25=5, i26=-109, i27=-41907, i28=-11;
        float f4=1.567F;
        byte by3=-1;

        for (i = 382; i > 9; --i) {
            float f3=2.858F;
            vMeth(i, f3);
            Test.sFld -= (short)-24081;
            i22 = 1;
            do {
                Test.instanceCount = i1;
                for (i23 = 1; 1 < i23; i23 -= 3) {
                    Test.iFld -= (int)-813349306960781145L;
                    i1 *= (int)Test.dFld;
                    i24 = (int)2.868F;
                    iArrFld[i - 1] *= (int)Test.instanceCount;
                    i24 = (int)Test.instanceCount;
                    Test.iFld += (i23 * i23);
                    i24 += (i23 * i23);
                    i1 += (int)Test.instanceCount;
                    i1 += (i23 ^ i);
                    Test.instanceCount -= i23;
                }
                for (i25 = 1; i25 < 1; ++i25) {
                    Test.instanceCount -= Test.sFld;
                    Test.iFld *= (int)Test.instanceCount;
                    i24 -= i23;
                    Test.instanceCount += (long)Test.dFld;
                    f4 += Test.instanceCount;
                }
            } while (++i22 < 68);
            for (i27 = 2; i27 < 68; i27++) {
                try {
                    Test.iFld = (i1 / iArrFld[i]);
                    i24 = (i1 % i23);
                    i1 = (iArrFld[i27 - 1] % -21790);
                } catch (ArithmeticException a_e) {}
                switch (((i >>> 1) % 2) + 11) {
                case 11:
                    i26 <<= i23;
                    Test.sFld += (short)(i27 * Test.sFld);
                    f3 -= by3;
                    break;
                case 12:
                    Test.instanceCount *= Test.instanceCount;
                    i28 &= i;
                default:
                    i26 *= (int)Test.dFld;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
