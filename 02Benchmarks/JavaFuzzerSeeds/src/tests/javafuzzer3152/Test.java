package tests.javafuzzer3152;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:54:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52779L;
    public static byte byFld=15;
    public static short sFld=25149;
    public static volatile boolean bFld=false;
    public static int iFld=-9;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 22402L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3) {

        int i4=-78, i5=-7, i6=-18039;
        double d=111.24749;
        float f=80.411F;
        byte by=-2;

        i4 = 1;
        do {
            i2 = 49480;
            i3 = -67;
            i3 += i4;
            if (Test.bFld) {
                d += i2;
                i3 += i4;
                switch (((i2 >>> 1) % 1) + 44) {
                case 44:
                    i5 = 1;
                    while (++i5 < 7) {
                        Test.instanceCount += (long)f;
                        i2 += (int)f;
                        f -= i2;
                        i2 = i3;
                        by += (byte)(((i5 * i4) + Test.sFld) - i6);
                    }
                    f -= Test.instanceCount;
                    break;
                }
            } else {
                f += i3;
            }
        } while (++i4 < 239);
        long meth_res = i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f) + by + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i7=-115, i8=186, i9=-197, iArr[][]=new int[N][N];
        float f1=25.276F;
        double d1=75.112833;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -2465);
        FuzzerUtils.init(lArr, 2396L);

        switch ((((iMeth(i, i) >>> 1) % 5) * 5) + 52) {
        case 58:
            i7 = 352;
            while ((i7 -= 2) > 0) {
                Test.instanceCount = Test.byFld;
                iArr[i7 + 1][i7 + 1] -= i1;
                if (Test.bFld) break;
                iArr[i7][i7 + 1] = i;
                Test.instanceCount = i1;
                i <<= (int)Test.instanceCount;
            }
        case 64:
            i = i;
            for (long l1 : lArr) {
                i1 ^= (int)Test.instanceCount;
            }
            for (i8 = 275; i8 > 1; i8 -= 3) {
                lArr[i8] = Test.instanceCount;
                f1 %= -23223;
                f1 += i9;
            }
        case 53:
            Test.bFld = false;
            break;
        case 59:
            lArr[(i8 >>> 1) % N] = (long)d1;
        case 62:
            Test.instanceCount -= i1;
        }
        vMeth_check_sum += i + i1 + i7 + i8 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(long l) {

        int i10=-12, i11=18477, i12=186, i13=7313, i14=-13, i15=12, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 39610);

        vMeth(i10, i10);
        i10 = i10;
        for (i11 = 1; i11 < 139; i11++) {
            l >>= i10;
            i13 = 1;
            while ((i13 += 3) < 11) {
                iArr1[i11] >>= -25603;
                i12 += (((i13 * Test.byFld) + i13) - Test.instanceCount);
                Test.sFld -= (short)i10;
                iArr1[i11 + 1] = i13;
                i12 = (int)l;
                i12 = i12;
            }
            for (i14 = 1; i14 < 11; ++i14) {
                double d2=0.97465;
                if (false) continue;
                d2 = i12;
            }
            i12 *= i11;
        }
        long meth_res = l + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d3=-112.51094;
        float f2=1.691F, fArr[]=new float[N];
        int i16=-122, i17=2, i18=40615, i19=108, i20=14, i21=-27089, i22=-14, i23=49202, i24=-63;
        boolean b=true, bArr[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -2.239F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(sArr, (short)-14093);

        Test.byFld = (byte)(lMeth(Test.instanceCount) / ((long)(d3) | 1));
        Test.iFld <<= Test.iFld;
        f2 += (float)d3;
        for (i16 = 3; i16 < 374; i16++) {
            b = b;
            Test.iFld += i16;
            i17 = -31134;
            Test.instanceCount *= i16;
        }
        for (i18 = 277; i18 > 10; i18--) {
            i20 = 1;
            do {
                Test.instanceCount *= i19;
            } while (++i20 < 94);
            fArr[i18 - 1] -= i17;
            d3 = i18;
        }
        i21 = 1;
        while ((i21 += 2) < 247) {
            if (b) {
                Test.iFld += (((i21 * i18) + f2) - Test.iFld);
            } else {
                bArr[i21] = true;
                i17 += (i21 * f2);
                fArr[i21 - 1] -= 214;
            }
            Test.byFld += (byte)-91;
            Test.instanceCount = i19;
            Test.lArrFld[i21] <<= 49706;
            sArr[i21] += (short)i19;
            Test.iFld = 195;
            i22 = 1;
            while (++i22 < 204) {
                for (i23 = i21; i23 < 1; i23++) {
                    sArr[i21] -= (short)i18;
                    i24 += (i23 ^ i22);
                    f2 *= Test.byFld;
                    f2 += i23;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
