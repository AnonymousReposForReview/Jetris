package tests.javafuzzer2087;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:47:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7524446570897647702L;
    public static int iFld=21342;
    public static int iFld1=3;
    public static boolean bFld=false;
    public static byte byFld=-22;
    public static long lFld=-102L;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 183);
        FuzzerUtils.init(Test.sArrFld, (short)12083);
        FuzzerUtils.init(Test.lArrFld, -175L);
        FuzzerUtils.init(Test.fArrFld, -1.202F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6) {

        int i7=53406, i8=13, i9=14, i10=-100, i11=23741;
        byte by1=-92;
        short s1=29400;
        float f2=1.119F;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -1.1957);
        FuzzerUtils.init(lArr, -8L);

        Test.iFld >>= (int)Test.instanceCount;
        i7 = 1;
        do {
            if (Test.bFld) {
                for (i8 = i7; i8 < 11; i8++) {
                    Test.instanceCount += i8;
                    Test.iFld = 41275;
                    dArr[i8] *= -10192;
                    for (i10 = 1; 1 > i10; i10++) {
                        by1 -= (byte)i11;
                        Test.bFld = Test.bFld;
                        if (Test.bFld) break;
                        Test.iArrFld[i8] = (int)Test.instanceCount;
                        Test.iFld1 += s1;
                        lArr[i7] = -65334L;
                        f2 = Test.iFld;
                    }
                }
            } else if (Test.bFld) {
                Test.iFld = -6798;
            } else {
                Test.iFld1 += (((i7 * Test.iFld) + i11) - i9);
            }
        } while (++i7 < 150);
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + by1 + s1 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        boolean b=false;
        float f1=-59.87F, fArr[]=new float[N];
        double d1=-53.86212;
        int i12=170, i13=-1555;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -2.341F);
        FuzzerUtils.init(lArr1, 0L);

        if (true) {
            b = ((Test.iArrFld[(60613 >>> 1) % N] + (Test.iFld - Test.iFld1)) < ((f1 = Test.iFld) - iMeth1(-12265)));
            Test.instanceCount = Test.iFld1;
            d1 = 1;
            do {
                Test.iFld &= (int)Test.instanceCount;
                Test.iFld1 -= (int)Test.instanceCount;
                Test.iFld1 >>= -221;
                f1 += (float)d1;
                Test.iFld1 = Test.iFld1;
                try {
                    Test.iFld1 = (Test.iFld % Test.iArrFld[(int)(d1 - 1)]);
                    Test.iFld = (Test.iFld1 / Test.iArrFld[(int)(d1 - 1)]);
                    Test.iFld = (Test.iFld / 69);
                } catch (ArithmeticException a_e) {}
                for (i12 = 1; i12 < 7; i12++) {
                    switch (((i12 >>> 1) % 9) + 100) {
                    case 100:
                        f1 = Test.instanceCount;
                    case 101:
                        Test.bFld = Test.bFld;
                        Test.byFld = (byte)Test.instanceCount;
                    case 102:
                        fArr[(int)(d1 - 1)] = Test.instanceCount;
                        break;
                    case 103:
                        lArr1[i12 - 1] += (long)-118.148F;
                        break;
                    case 104:
                        if (b) break;
                        break;
                    case 105:
                        Test.iFld1 += (i12 * i12);
                        break;
                    case 106:
                        Test.iFld1 = i13;
                        break;
                    case 107:
                        Test.iFld1 = 28104;
                        break;
                    case 108:
                        Test.iFld1 = i12;
                        break;
                    }
                }
            } while (++d1 < 245);
        } else {
            Test.iFld1 = Test.iFld1;
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=11, i3=7, i4=97, i5=65101, i14=97, iArr[]=new int[N];
        byte by=1;
        float f=-59.967F;
        double d2=-38.83114;

        FuzzerUtils.init(iArr, -9);

        for (i2 = 19; 375 > i2; i2++) {
            by += (byte)(((i2 * i3) + i3) - f);
            for (i4 = 1; i4 < 5; i4++) {
                f = Math.abs(Test.iFld);
                iArr[i4] = ((Test.iFld1 >>>= iMeth()) + Test.iFld);
                for (d2 = 1; d2 < 2; ++d2) {
                    double d3=-41.30472;
                    switch ((int)(((d2 % 2) * 5) + 55)) {
                    case 56:
                        if (false) break;
                        Test.sArrFld[(int)(d2 + 1)] = Test.byFld;
                        d3 -= Test.iFld;
                        break;
                    case 57:
                        if (true) continue;
                        iArr[i2 - 1] += (int)f;
                        i14 *= i5;
                        break;
                    }
                    Test.iFld1 += (int)(d2 - i14);
                    i3 += (int)(((d2 * i4) + Test.iFld) - Test.instanceCount);
                }
            }
        }
        vMeth_check_sum += i2 + i3 + by + Float.floatToIntBits(f) + i4 + i5 + Double.doubleToLongBits(d2) + i14 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=2.52531;
        int i=11817, i1=0, i15=173, i16=-6, i17=-4, i18=11, i19=3, i20=49057, i21=-8;
        short s=30757;
        float f3=23.742F;

        Test.iFld += (int)(Test.instanceCount - (d++));
        for (i = 7; i < 318; i++) {
            Test.iFld += (((i * Test.instanceCount) + s) - Test.iFld1);
            Test.iFld1 += (((i * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            vMeth();
            Test.byFld += (byte)i1;
            f3 += (i * Test.instanceCount);
            Test.instanceCount = i1;
            Test.instanceCount += -59;
        }
        for (i15 = 7; i15 < 134; i15++) {
            for (i17 = 4; i17 < 197; i17++) {
                i19 = 1;
                do {
                    f3 = -12L;
                    Test.byFld += (byte)107.124F;
                    Test.lArrFld[i17 - 1] >>>= Test.iFld1;
                    Test.fArrFld[i19] = (float)d;
                } while (++i19 < 2);
                Test.instanceCount = Test.instanceCount;
                Test.lArrFld[i17 + 1] += Test.instanceCount;
                for (i20 = i17; i20 < 2; ++i20) {
                    long l1=-4191418642518806472L;
                    Test.iFld >>= -13;
                    Test.iArrFld[i17] |= (int)Test.instanceCount;
                    i1 -= (int)Test.lFld;
                    f3 -= -53268;
                    Test.iFld += (int)Test.lFld;
                    Test.iFld *= (int)d;
                    l1 += (((i20 * f3) + i) - i20);
                    i1 += (((i20 * Test.instanceCount) + Test.instanceCount) - i21);
                    Test.lArrFld = Test.lArrFld;
                }
                Test.iArrFld[i15 - 1] += i1;
                Test.bFld = Test.bFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
