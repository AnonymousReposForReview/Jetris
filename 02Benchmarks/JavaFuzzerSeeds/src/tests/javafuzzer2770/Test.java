package tests.javafuzzer2770;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:56:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12831L;
    public static volatile boolean bFld=true;
    public static short sFld=-31262;
    public static double dFld=0.78460;
    public static int iFld=51594;
    public int iFld1=162;
    public static byte byFld=93;
    public static volatile double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.22813);
        FuzzerUtils.init(Test.lArrFld, 2458668801L);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        long l=14L;
        int i9=85, i10=-121, i11=11, i12=7, i13=18963, i14=0, i15=47711, i16=-8, iArr1[]=new int[N];
        short s1=23118, sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)4925);
        FuzzerUtils.init(iArr1, 6);
        FuzzerUtils.init(fArr, 0.281F);

        for (l = 7; l < 198; l++) {
            Test.bFld = Test.bFld;
            sArr = FuzzerUtils.short1array(N, (short)17252);
            i9 -= i9;
        }
        Test.instanceCount <<= i9;
        for (i10 = 5; i10 < 173; i10 += 2) {
            switch (((i10 % 10) * 5) + 20) {
            case 40:
                for (i12 = i10; i12 < 18; ++i12) {
                    i9 *= i11;
                }
                Test.instanceCount += i10;
                break;
            case 70:
            case 27:
                i13 = i11;
                i9 = i9;
                for (i14 = 18; i14 > 1; i14 -= 3) {
                    i11 ^= (int)l;
                }
                iArr1[i10] += (int)l;
                break;
            case 59:
                i13 <<= i10;
                break;
            case 52:
                iArr1[i10] -= i13;
                break;
            case 38:
                Test.instanceCount += (((i10 * i9) + i13) - i11);
                break;
            case 42:
                Test.dArrFld[i10] = i16;
                break;
            case 56:
                try {
                    i13 = (11780 / iArr1[i10]);
                    i13 = (40546 / i13);
                    i16 = (iArr1[i10] % i12);
                } catch (ArithmeticException a_e) {}
                break;
            case 63:
                fArr[i10] += i12;
                break;
            case 30:
                i15 -= s1;
                break;
            }
        }
        vMeth_check_sum += l + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + s1 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(float f, int i8) {

        int i17=-63160, i18=-158, i19=-17888, iArr2[][]=new int[N][N];
        double d1=-111.73194;
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(lArr, -35L);
        FuzzerUtils.init(fArr1, -22.424F);

        vMeth();
        iArr2[(i8 >>> 1) % N][(i8 >>> 1) % N] >>= i8;
        switch ((((i8 >>> 1) % 7) * 5) + 25) {
        case 46:
            i8 >>= (int)-828901778864560636L;
            switch ((((i8 >>> 1) % 6) * 5) + 20) {
            case 36:
                i8 = i8;
                iArr2[(-71 >>> 1) % N][(i8 >>> 1) % N] <<= i8;
                break;
            case 26:
                for (i17 = 9; i17 < 158; i17++) {
                    for (d1 = 1; d1 < 11; d1++) {
                        iArr2[(int)(d1)][i17] &= i17;
                        switch ((int)(((d1 % 1) * 5) + 30)) {
                        case 31:
                            i8 -= i19;
                            break;
                        }
                        Test.instanceCount >>= i19;
                        if (Test.bFld) continue;
                        Test.instanceCount = i19;
                    }
                }
                break;
            case 47:
                lArr[(i18 >>> 1) % N] %= (i17 | 1);
            case 28:
                Test.instanceCount = -63;
                break;
            case 37:
                f *= f;
                break;
            case 24:
                i8 /= (int)65314L;
                break;
            }
            break;
        case 56:
            fArr1[(i17 >>> 1) % N] += i18;
            break;
        case 37:
            i8 += i19;
        case 43:
            Test.instanceCount += Test.sFld;
            break;
        case 42:
            Test.dFld *= i18;
            break;
        case 27:
        case 53:
            Test.instanceCount = Test.sFld;
            break;
        default:
            Test.dFld -= 26411;
        }
        long meth_res = Float.floatToIntBits(f) + i8 + i17 + i18 + Double.doubleToLongBits(d1) + i19 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public int iMeth(double d, int i, int i1) {

        int i2=11, i3=106, i4=69, i5=-57197, i6=-46511, i7=-9, iArr[]=new int[N], iArr3[][]=new int[N][N];
        short s=14419;

        FuzzerUtils.init(iArr, 151);
        FuzzerUtils.init(iArr3, -32602);

        for (i2 = 18; i2 < 393; ++i2) {
            Test.instanceCount = (-(iArr[i2 - 1]++));
            s = (short)Integer.reverseBytes(i1);
            for (i4 = 1; 5 > i4; i4++) {
                i1 = Math.max((int)(i5 -= (int)Test.instanceCount), (int)((Test.instanceCount = i) - (--i3)));
                i3 ^= (int)(i3 >>= (int)(Test.instanceCount <<= (Test.instanceCount += i4)));
                for (i6 = 1; i6 < 2; i6++) {
                    float f1=48.925F;
                    Test.instanceCount += (i6 * i6);
                    i5 -= Integer.reverseBytes(i1++);
                    if (Test.bFld = (fMeth(f1, i4) != 0.284F)) continue;
                    i3 += (i6 * Test.iFld);
                    d += 11668;
                    i7 += (int)Test.instanceCount;
                    iArr3 = FuzzerUtils.int2array(N, (int)50450);
                    i1 += (i6 * i6);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + i1 + i2 + i3 + s + i4 + i5 + i6 + i7 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-215, i21=94, i22=-64196, i23=3, i24=22936, i25=7;
        float f2=2.195F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        iMeth(Test.dFld, Test.iFld, iFld1);
        for (i20 = 12; i20 < 331; i20++) {
            iArrFld[i20] = (int)Test.instanceCount;
            switch (((i20 % 3) * 5) + 76) {
            case 81:
                for (i22 = 4; i22 < 79; i22++) {
                    f2 += i22;
                    for (i24 = 1; 2 > i24; i24++) {
                        int i26=-14;
                        switch ((i20 % 6) + 60) {
                        case 60:
                            i23 -= i23;
                            i25 += (-85 + (i24 * i24));
                            Test.instanceCount = -9370;
                            if (true) continue;
                            break;
                        case 61:
                            Test.lArrFld[i24 - 1] *= i21;
                            break;
                        case 62:
                            iArrFld[i22] = i23;
                        case 63:
                            i25 >>= (int)Test.instanceCount;
                            iFld1 ^= iFld1;
                            break;
                        case 64:
                            if (Test.bFld) {
                                Test.instanceCount += i24;
                                Test.instanceCount += (long)f2;
                                i23 >>>= (int)Test.instanceCount;
                            } else if (Test.bFld) {
                                bArr[i24 - 1] = Test.bFld;
                                fArrFld[i22] -= Test.iFld;
                            } else if (Test.bFld) {
                                i26 = (int)Test.dFld;
                                Test.instanceCount += (i24 * i24);
                            } else {
                                iFld1 += (i24 * i20);
                                i25 = i23;
                            }
                            break;
                        case 65:
                            i21 = i26;
                            fArrFld[(i24 >>> 1) % N] *= -160;
                            iArrFld[i22 + 1] *= i22;
                            i23 -= 3;
                            break;
                        }
                    }
                }
            case 83:
                Test.byFld = (byte)i23;
                break;
            case 78:
                Test.iFld += (i20 + i21);
            default:
                iFld1 -= Test.iFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
