package tests.javafuzzer1569;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:09:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3028371759057021867L;
    public int iFld=-5;
    public byte byFld=-89;
    public double dFld=77.107349;
    public float fFld=0.795F;
    public boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.37287);
        FuzzerUtils.init(Test.sArrFld, (short)12397);
        FuzzerUtils.init(Test.lArrFld, 118L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, int i4) {

        int i5=6, i6=183, i7=12, i8=28544, i9=2, i10=-7, i11=-13, i12=11, iArr2[]=new int[N];
        float f=-101.476F;
        boolean b=false;
        short s1=-16118;
        double d1=108.94178;

        FuzzerUtils.init(iArr2, 57362);

        for (i5 = 1; i5 < 233; ++i5) {
            for (i7 = 7; i7 > 1; i7--) {
                f += i2;
                iArr2[i5 - 1] = i6;
            }
            iArr2[i5] += (int)Test.instanceCount;
            for (i9 = i5; i9 < 7; ++i9) {
                i10 = i2;
            }
            if (b) continue;
            i3 *= s1;
            Test.instanceCount *= (long)d1;
            for (i11 = 1; i11 < 7; i11++) {
                i12 += i6;
                f -= 2.583F;
                Test.instanceCount <<= i8;
                i6 -= 47551;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + (b ? 1 : 0) + s1 +
            Double.doubleToLongBits(d1) + i11 + i12 + FuzzerUtils.checkSum(iArr2);
    }

    public float fMeth(long l, int i1) {

        float f1=0.471F, f2=-2.5F;
        int i13=-62773, i14=99, i15=-12, i16=-50495, iArr3[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr3, -64757);

        vMeth1(i1, iFld, i1);
        f1 = 1;
        do {
            for (i13 = 1; i13 < 6; i13++) {
                iFld = i14;
                if (false) break;
                byFld += (byte)i13;
                for (i15 = i13; i15 < 2; ++i15) {
                    l += iFld;
                    l += (-6 + (i15 * i15));
                    iArr3[(int)(f1)] -= iFld;
                    f2 -= (float)dFld;
                    i14 += (((i15 * i1) + l) - l);
                    i14 += (i15 ^ Test.instanceCount);
                    if (b1) continue;
                }
                f2 += (float)dFld;
            }
        } while (++f1 < 274);
        long meth_res = l + i1 + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth() {

        double d=-2.30722;
        long l1=47357L;
        int i17=-6, iArr1[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)27);
        FuzzerUtils.init(iArr1, 46717);

        Test.dArrFld[(iFld >>> 1) % N] -= ((++byArr[(iFld >>> 1) % N]) + iFld);
        iFld <<= (iArr1[(iFld >>> 1) % N]--);
        d += fMeth(Test.instanceCount, iFld);
        iArr1[(iFld >>> 1) % N] = iFld;
        for (l1 = 1; l1 < 165; l1++) {
            byFld = (byte)iFld;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l1 + i17 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=49777, i18=11, i19=-4, i20=57614, i21=-12, i22=253, iArr[][]=new int[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 98.621F);
        FuzzerUtils.init(iArr, -3);

        fArr[(iFld >>> 1) % N] = (float)(Test.dArrFld[(-7 >>> 1) % N] + (iArr[(iFld >>> 1) % N][(iFld >>> 1) % N] * i));
        for (short s : Test.sArrFld) {
            vMeth();
            i18 = 1;
            while (++i18 < 63) {
                Test.lArrFld[i18] += Test.instanceCount;
            }
            i >>= (int)Test.instanceCount;
            for (i19 = 1; 63 > i19; i19++) {
                switch (((iFld >>> 1) % 5) + 29) {
                case 29:
                    i20 >>= i;
                    dFld = byFld;
                case 30:
                    Test.dArrFld[i19] += i19;
                    break;
                case 31:
                    i += (((i19 * Test.instanceCount) + i) - Test.instanceCount);
                    Test.lArrFld[i19 + 1] = -53;
                    Test.dArrFld[i19 - 1] %= -11;
                    Test.instanceCount = 56160L;
                case 32:
                    i += i19;
                    Test.instanceCount = iFld;
                    for (i21 = 1; 2 > i21; i21++) {
                        boolean b2=true;
                        switch ((i19 % 10) + 41) {
                        case 41:
                            Test.instanceCount = iFld;
                            Test.instanceCount <<= i18;
                            byFld -= (byte)Test.instanceCount;
                            break;
                        case 42:
                            i22 += i20;
                            fFld = fFld;
                            break;
                        case 43:
                            iFld += (i21 | i22);
                            switch ((((90 >>> 1) % 7) * 5) + 81) {
                            case 94:
                                Test.instanceCount *= 18831L;
                                iArr[i19 - 1][i21 - 1] |= (int)-951384112L;
                                iFld += i21;
                                iFld -= (int)Test.instanceCount;
                                break;
                            case 105:
                                byFld -= (byte)i20;
                            case 93:
                                iFld += i19;
                                break;
                            case 101:
                                iFld = i22;
                                break;
                            case 100:
                                s = (short)i20;
                                break;
                            case 88:
                                iArr[i19][i19] *= i20;
                            case 92:
                                b2 = b2;
                                break;
                            }
                            break;
                        case 44:
                            if (b2) break;
                            break;
                        case 45:
                            i22 = i19;
                            break;
                        case 46:
                            iArr[i19 + 1][i19] -= (int)Test.instanceCount;
                            break;
                        case 47:
                            b2 = b2;
                        case 48:
                            i += i21;
                            break;
                        case 49:
                            i22 = (int)Test.instanceCount;
                            break;
                        case 50:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        default:
                            iFld *= (int)dFld;
                        }
                    }
                    break;
                case 33:
                    if (bFld) break;
                    break;
                default:
                    i20 *= byFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
