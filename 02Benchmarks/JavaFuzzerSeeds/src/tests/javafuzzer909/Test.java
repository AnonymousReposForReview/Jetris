package tests.javafuzzer909;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:30:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static float fFld=-84.823F;
    public static byte byFld=-59;
    public static boolean bFld=false;
    public static double dFld=-34.114977;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-29);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1, int i3) {

        int i4=-9, i5=58258, i6=-26, i7=-14, i8=-37748, i9=-14, i10=1591, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -1);

        i3 = (int)Test.instanceCount;
        iArr1[(i3 >>> 1) % N] += i3;
        Test.instanceCount = (long)Test.fFld;
        for (i4 = 3; i4 < 175; i4++) {
            for (i6 = 1; i6 < 9; ++i6) {
                if (false) {
                    Test.instanceCount ^= Test.instanceCount;
                }
                for (i8 = 2; i8 > 1; --i8) {
                    Test.instanceCount += (i8 * i8);
                    iArr1[i4 + 1] += i7;
                    i3 = i7;
                    iArr1[i6 - 1] >>>= i4;
                    i7 += i6;
                }
            }
            d1 = Test.byFld;
            i7 += i10;
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l1, int i2) {

        double d2=84.56107;
        int i11=-12, i12=10, i13=39814, i14=-59893, i15=-2;

        vMeth2(d2, -60);
        i11 = 1;
        do {
            for (i12 = 1; i12 < 11; i12++) {
                l1 = Test.byFld;
                for (i14 = i12; 2 > i14; i14++) {
                    i13 >>= i12;
                    try {
                        i15 = (-49 % i14);
                        i2 = (i15 % 976774200);
                        i2 = (i11 % i15);
                    } catch (ArithmeticException a_e) {}
                    l1 -= i13;
                    i15 |= i11;
                    i2 -= (int)Test.instanceCount;
                }
                i2 = i13;
                l1 = 29961;
                i2 += i12;
                Test.byArrFld[i11 + 1] += (byte)i2;
            }
            if (Test.bFld) continue;
        } while (++i11 < 142);
        vMeth1_check_sum += l1 + i2 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15;
    }

    public static void vMeth(long l) {

        int i=9, i1=1, i16=204, i17=-61980, i18=-41041, iArr[]=new int[N];
        double d=-26.91897;
        float f=0.787F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1188475813L);
        FuzzerUtils.init(iArr, 42934);

        i = (int)(++lArr[(i >>> 1) % N]);
        i = i;
        for (d = 18; 381 > d; ++d) {
            iArr[(int)(d)] = (int)(++Test.instanceCount);
        }
        vMeth1(2590087738L, i1);
        for (i16 = 19; 338 > i16; i16++) {
            if (i != 0) {
                vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + i16 + i17 + Float.floatToIntBits(f) + i18
                    + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                return;
            }
            iArr[i16 + 1] = i;
            try {
                i = (35 % i1);
                iArr[i16] = (i1 / iArr[i16 - 1]);
                i = (iArr[i16] / i17);
            } catch (ArithmeticException a_e) {}
            switch ((i16 % 9) + 70) {
            case 70:
                i1 = (int)-6L;
                for (f = 1; f < 5; f++) {
                    if (i != 0) {
                        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + i16 + i17 +
                            Float.floatToIntBits(f) + i18 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
                break;
            case 71:
                if (Test.bFld) break;
                i1 -= -220;
                break;
            case 72:
                i1 -= (int)Test.instanceCount;
                break;
            case 73:
                Test.fFld += i16;
                break;
            case 74:
                iArr[i16 + 1] -= i16;
                break;
            case 75:
                i -= -7;
                break;
            case 76:
                lArr[i16 + 1] += -227L;
            case 77:
                Test.instanceCount = i18;
            case 78:
                iArr[i16 - 1] *= i16;
                break;
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + i16 + i17 + Float.floatToIntBits(f) + i18 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-8, i20=21, i21=40239, i22=2, i23=10346, i24=12, i25=-41690, i26=27680, i27=-20266, iArr2[]=new int[N];
        short s=-12644, sArr[]=new short[N];
        long l2=1122760097L, lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -7L);
        FuzzerUtils.init(dArr, 0.8946);
        FuzzerUtils.init(iArr2, -326);
        FuzzerUtils.init(sArr, (short)-25172);

        vMeth(-140L);
        Test.instanceCount <<= 213;
        for (i19 = 7; 244 > i19; i19++) {
            i21 = 106;
            do {
                for (i22 = i21; i22 < 1; ++i22) {
                    if (Test.bFld) break;
                    lArr1[i19 - 1] += Test.instanceCount;
                    i23 += (-127 + (i22 * i22));
                    Test.byFld *= (byte)i20;
                    s >>= (short)Test.instanceCount;
                    Test.instanceCount ^= Test.instanceCount;
                    Test.dFld -= Test.dFld;
                }
                dArr[i21 + 1] += i22;
                i23 >>= i19;
                switch ((i19 % 3) + 99) {
                case 99:
                    i23 += (7 + (i21 * i21));
                    iArr2[i21 + 1] <<= i24;
                    for (l2 = 1; l2 < 1; l2++) {
                        i24 -= i23;
                    }
                    Test.fFld = (float)Test.dFld;
                case 100:
                    i20 >>= i25;
                    i24 >>= i20;
                case 101:
                    Test.dFld /= (i19 | 1);
                    Test.instanceCount &= i25;
                    lArr1[i21 - 1] -= Test.instanceCount;
                default:
                    for (i26 = i19; i26 < 1; ++i26) {
                        i25 += (((i26 * i21) + i20) - i26);
                        sArr[i21] -= (short)i24;
                        Test.instanceCount *= -176;
                        i27 += i19;
                    }
                }
            } while (--i21 > 0);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
