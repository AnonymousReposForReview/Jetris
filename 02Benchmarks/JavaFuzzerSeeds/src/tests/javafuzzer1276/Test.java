package tests.javafuzzer1276;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:39:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static float fFld=-63.363F;
    public int iArrFld[]=new int[N];

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, byte by1, int i6) {

        int i7=65248, i8=89, i9=43, i10=63603, iArr[]=new int[N];
        float f=35.389F;
        short s=-1388;
        double d=39.11295;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 162L);
        FuzzerUtils.init(iArr, -98);

        Test.instanceCount = i6;
        i7 = 365;
        do {
            Test.instanceCount += (i7 ^ (long)Test.fFld);
            for (f = i7; f < 9; ++f) {
                for (i9 = 1; i9 > 1; i9--) {
                    i8 -= i10;
                }
                lArr[i7] <<= s;
                Test.instanceCount += (long)(f * f);
                Test.fFld *= i9;
                i8 += (int)d;
                Test.fFld += s;
                i10 = i7;
            }
            Test.fFld += Test.instanceCount;
        } while ((i7 -= 2) > 0);
        by1 = (byte)2269833069187568290L;
        iArr[(i5 >>> 1) % N] = i5;
        vMeth1_check_sum += i5 + by1 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + s +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l1, int i4) {

        byte by2=-55;
        int i11=32, i12=35753, i13=-123, i14=-20, i15=8, i16=193, iArr1[]=new int[N];
        boolean b=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr1, 230);
        FuzzerUtils.init(bArr, true);

        vMeth1(i4, by2, i4);
        by2 = (byte)Test.instanceCount;
        i4 = i4;
        for (i11 = 348; i11 > 4; --i11) {
            for (i13 = 1; i13 < 5; ++i13) {
                by2 += (byte)i13;
                b = b;
                for (i15 = 2; i15 > 1; --i15) {
                    iArr1 = iArr1;
                    i14 += (i15 | i12);
                    bArr[i15][i13 - 1] = b;
                    i16 += (((i15 * i4) + Test.instanceCount) - i15);
                    Test.fFld += (i15 + i14);
                    i16 <<= i12;
                }
                i14 += i16;
            }
        }
        vMeth_check_sum += l1 + i4 + by2 + i11 + i12 + i13 + i14 + (b ? 1 : 0) + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static float fMeth(int i2, int i3, long l) {

        int i17=-44614, i18=51, i19=9404, i20=2, iArr2[]=new int[N];
        short s1=-9848;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -39574);
        FuzzerUtils.init(fArr, 26.393F);

        vMeth(Test.instanceCount, i3);
        for (i17 = 198; i17 > 9; i17--) {
            i18 += (i17 - i2);
            Test.fFld -= i17;
            iArr2 = iArr2;
            for (i19 = 8; i19 > 1; --i19) {
                i2 += (-6 + (i19 * i19));
                iArr2[i19] -= (int)Test.instanceCount;
            }
            i3 = (int)Test.instanceCount;
            fArr[i17] += s1;
        }
        iArr2[(i3 >>> 1) % N] = i3;
        long meth_res = i2 + i3 + l + i17 + i18 + i19 + i20 + s1 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-74, i1=16055, i21=45622, i22=-15, i23=27, i24=-14, i25=8, i26=4, i27=-5, i28=41941, i29=38459;
        byte by=38;
        double d1=-44.127499;
        boolean b1=false, bArr1[]=new boolean[N];
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)-32162);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr1, 1685827370L);

        i = 330;
        do {
            i1 += (i * i);
            Test.instanceCount -= (long)(((++Test.fFld) + (i1 >>= (int)Test.instanceCount)) % (((--i1) - (by * 0)) |
                1));
            sArr[i] -= (short)fMeth(i1, 7, Test.instanceCount);
            i1 += i;
            for (i21 = 76; i21 > 3; i21 -= 3) {
                i1 = (int)50L;
                i22 -= i1;
                for (i23 = 1; 4 > i23; i23 += 2) {
                    Test.fFld -= i22;
                    d1 = i;
                    i24 += (i23 ^ i1);
                    Test.instanceCount *= -242;
                    iArrFld[i + 1] += i;
                    bArr1[i21 + 1] = b1;
                    Test.instanceCount &= i1;
                    i24 += (int)Test.fFld;
                    by += (byte)(0.602F + (i23 * i23));
                }
            }
            lArr1[i - 1] = -9;
        } while (--i > 0);
        i25 = 1;
        do {
            for (i26 = 4; 72 > i26; i26++) {
                if (b1) {
                    i1 += i22;
                    b1 = false;
                    for (i28 = 1; i28 < 2; i28++) {
                        i29 *= i29;
                        i27 += (-3 + (i28 * i28));
                        i22 = i26;
                        sArr[i25] = (short)i27;
                    }
                    i29 += i29;
                }
            }
        } while (++i25 < 348);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
