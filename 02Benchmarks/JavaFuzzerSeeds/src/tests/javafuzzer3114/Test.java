package tests.javafuzzer3114;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:03:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6945487669749568533L;
    public static double dFld=0.10043;
    public static float fFld=21.861F;
    public static short sFld=18458;
    public float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        boolean b=false;
        int i4=0, i5=-53165, i6=48231, i7=0, i8=242, i9=220, i10=170, i11=-28634, iArr1[]=new int[N];
        short s=1902;
        float f=0.80F;
        long l1=90L;

        FuzzerUtils.init(iArr1, -8);

        b = b;
        for (i4 = 308; i4 > 9; i4--) {
            i3 >>= -217;
            for (i6 = 6; i6 > 1; i6 -= 2) {
                for (i8 = 1; i8 < 3; i8++) {
                    Test.dFld += Test.instanceCount;
                    i5 <<= s;
                    Test.fFld -= (float)Test.dFld;
                }
                i10 = 1;
                do {
                    i5 = (int)Test.fFld;
                    iArr1[i10] = (int)f;
                } while (++i10 < 3);
                i7 += (i6 + i6);
                i3 = i3;
                iArr1[i6] ^= (int)l1;
            }
            i11 += (int)l1;
        }
        vMeth_check_sum += i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + Float.floatToIntBits(f) + l1 +
            i11 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1) {

        long l=-5092034125220808973L, lArr[]=new long[N];
        int i2=23342, i12=4, i13=-8, iArr[]=new int[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr, 20);
        FuzzerUtils.init(lArr, -1933274473L);
        FuzzerUtils.init(sArr, (short)-31199);

        for (l = 17; 351 > l; ++l) {
            iArr[(int)(l)] >>= ((--iArr[(int)(l - 1)]) + (Integer.reverseBytes(i2) * -23294));
            vMeth(i1);
            for (i12 = 1; i12 < 5; i12++) {
                i1 += i12;
                i1 += (((i12 * i13) + i12) - i2);
                iArr[(int)(l + 1)] -= (int)l;
                lArr[(int)(l + 1)] <<= i13;
                Test.fFld += (i12 * i12);
                iArr = iArr;
            }
            i2 = i1;
            lArr[(int)(l)] = (long)Test.fFld;
            iArr[(int)(l + 1)] *= (int)Test.dFld;
            sArr[(int)(l + 1)][(int)(l + 1)] += (short)i1;
            i1 -= i13;
        }
        long meth_res = i1 + l + i2 + i12 + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        int i=8;

        i <<= iMeth(-16443);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i14=5, i15=-44213, i16=-123, i17=24791, i18=-146, i19=-173, i20=-198, i21=55049, i22=135, i23=11;
        boolean b1=false;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -1375815769L);

        for (int smallinvoc=0; smallinvoc<902; smallinvoc++) vSmallMeth();
        i14 = -7;
        fArrFld[(i14 >>> 1) % N] += i14;
        for (i15 = 24; i15 < 385; i15++) {
            for (i17 = 3; i17 < 70; i17++) {
                i18 += (i17 * i15);
                lArr1[i17][i15] -= -5507L;
                iArrFld[i15 - 1] += (int)Test.instanceCount;
                for (i19 = 1; i19 < 2; ++i19) {
                    try {
                        iArrFld[i15 + 1] = (i14 % i20);
                        i16 = (1753915042 % i17);
                        i14 = (i18 / i19);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (((i19 * Test.fFld) + Test.instanceCount) - i14);
                    lArr1[i15][i17] >>= i20;
                    b1 = b1;
                    Test.instanceCount -= i20;
                }
                Test.fFld += (i17 + i20);
                i21 = 1;
                while (++i21 < 2) {
                    Test.instanceCount += (((i21 * i18) + i15) - i15);
                }
                Test.dFld = Test.instanceCount;
                switch ((i17 % 3) + 101) {
                case 101:
                    i20 = (int)Test.instanceCount;
                    break;
                case 102:
                    if (b1) continue;
                    for (i22 = 1; i22 < 2; i22++) {
                        i16 -= i23;
                        i20 = (int)Test.instanceCount;
                        i18 -= 211;
                        iArrFld[i22] = -64225;
                        switch (((i22 % 7) * 5) + 1) {
                        case 21:
                            lArr1[i17 - 1][i17] = i14;
                            i14 += (73 + (i22 * i22));
                            Test.sFld <<= (short)Test.instanceCount;
                            break;
                        case 9:
                            i16 = (int)Test.instanceCount;
                            break;
                        case 3:
                            lArr1[i15 + 1][i17] += Test.sFld;
                        case 18:
                            Test.instanceCount >>= i15;
                        case 30:
                            i23 += i22;
                            break;
                        case 29:
                            iArrFld[i15 + 1] = i16;
                            break;
                        case 14:
                            i23 >>= (int)Test.instanceCount;
                            break;
                        }
                    }
                case 103:
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
