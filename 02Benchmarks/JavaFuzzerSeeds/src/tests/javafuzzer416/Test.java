package tests.javafuzzer416;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:21:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=20L;
    public int iFld=73;
    public static byte byFld=-116;
    public static long lFld=8L;
    public static float fFld=-2.365F;
    public static int iFld1=-3;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-92);
        FuzzerUtils.init(Test.iArrFld, 10);
        FuzzerUtils.init(Test.lArrFld, -146L);
        FuzzerUtils.init(Test.fArrFld, 0.954F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, long l, double d2) {

        long l1=60196L, lArr[]=new long[N];
        int i9=7, i10=-7, i11=-14, iArr2[]=new int[N];
        short s1=17120;
        float f=-2.976F;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 14582L);
        FuzzerUtils.init(dArr, -2.72397);
        FuzzerUtils.init(iArr2, -17);

        l1 = 124;
        do {
            i9 = (int)107.121140;
            i9 = (int)Test.lFld;
            lArr[(int)(l1 - 1)] -= 16341;
            lArr[(int)(l1 - 1)] *= l;
            s1 += (short)(-37017L + (l1 * l1));
            dArr[(int)(l1)] += 22140;
            for (i10 = 13; i10 > 1; --i10) {
                f += 164;
                iArr2[(int)(l1)] = 2;
                iArr2[(int)(l1 - 1)] <<= i9;
                Test.byFld += (byte)(((i10 * f) + Test.byFld) - i11);
                Test.instanceCount = (long)d2;
                try {
                    iArr2[(int)(l1 + 1)] = (i9 / 1167);
                    i9 = (-55280 / i11);
                    i11 = (i10 % i10);
                } catch (ArithmeticException a_e) {}
                Test.lFld >>= -105;
            }
        } while (--l1 > 0);
        vMeth1_check_sum += Double.doubleToLongBits(d1) + l + Double.doubleToLongBits(d2) + l1 + i9 + s1 + i10 + i11 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        int i7=11, i8=-62, i12=57829, i13=114, i14=-43673, i15=-51562, iArr1[]=new int[N];
        short s=-31305;
        double d3=33.99851, dArr1[]=new double[N];
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(dArr1, 1.59973);
        FuzzerUtils.init(lArr1, 14L);

        for (i7 = 8; i7 < 140; ++i7) {
            i8 *= (Integer.reverseBytes(Integer.reverseBytes(i8)) - s);
            Test.instanceCount = -56290;
            Test.byFld = (byte)(iArr1[i7]++);
            vMeth1(d3, Test.instanceCount, d3);
            d3 += s;
            if (true) {
                Test.byArrFld[i7 - 1] = (byte)Test.instanceCount;
            } else if (b1) {
                i8 += (((i7 * i8) + Test.fFld) - Test.iFld1);
                switch ((i7 % 8) + 46) {
                case 46:
                    switch ((i7 % 5) + 24) {
                    case 24:
                        for (i12 = 1; i12 < 12; ++i12) {
                            for (i14 = 2; i14 > 1; i14--) {
                                i15 += (((i14 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                                Test.fFld += (float)d3;
                            }
                        }
                        break;
                    case 25:
                        Test.iFld1 *= (int)d3;
                        break;
                    case 26:
                        i13 += i7;
                        break;
                    case 27:
                        Test.iFld1 += (i7 * i7);
                        break;
                    case 28:
                        i8 -= i14;
                        break;
                    }
                case 47:
                    Test.lFld += (-52826 + (i7 * i7));
                    break;
                case 48:
                    Test.instanceCount ^= i15;
                    break;
                case 49:
                    dArr1[i7] -= -10;
                case 50:
                    Test.iFld1 += (i7 * i7);
                    break;
                case 51:
                    lArr1[i7 + 1] *= i13;
                    break;
                case 52:
                    if (i8 != 0) {
                    }
                    break;
                case 53:
                    i8 *= i7;
                    break;
                }
            } else {
                Test.iFld1 += (((i7 * i15) + Test.instanceCount) - i12);
            }
        }
        long meth_res = i7 + i8 + s + Double.doubleToLongBits(d3) + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i) {

        int i1=-14, i2=-19, i3=-41906, i4=-7, i5=8, i6=42273, i16=-8, i17=12, iArr[]=new int[N];
        boolean b2=false;
        double dArr2[]=new double[N];

        FuzzerUtils.init(iArr, -7211);
        FuzzerUtils.init(dArr2, 1.89779);

        for (i1 = 346; i1 > 16; --i1) {
            for (i3 = i1; i3 < 5; i3++) {
                for (i5 = 1; i5 < 1; ++i5) {
                    iArr[i5 - 1] = (int)(((172 * (i4 - Test.instanceCount)) - (i - i2)) * ((Test.instanceCount + i3) +
                        (234 >> (-(i6 + 186)))));
                }
                iArr[i1 + 1] *= iMeth();
                i -= i6;
                dArr2[i3] += Test.lFld;
                i4 = (int)Test.instanceCount;
                for (i16 = i3; i16 < 1; ++i16) {
                    Test.fFld += i2;
                    i2 = i2;
                    b2 = b2;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + i4 + i5 + i6 + i16 + i17 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2));
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i18=8, i19=20174, i20=-96, i21=-9, i22=13758, i23=26318, i24=4, i25=54103, iArr3[]=new int[N];
        short s2=-19592;
        float f1=0.909F;
        double dArr3[]=new double[N];

        FuzzerUtils.init(iArr3, 48495);
        FuzzerUtils.init(dArr3, 95.29717);

        b = (((iFld + iFld) != iFld) != b);
        vMeth(0.128809, Test.iFld1);
        for (i18 = 8; i18 < 385; i18++) {
            Test.iFld1 = Test.iFld1;
            for (i20 = 3; i20 < 67; ++i20) {
                i19 = (int)Test.instanceCount;
                Test.lFld = 14;
                for (i22 = i18; i22 < 2; i22++) {
                    i23 += 13;
                    i23 += Test.iFld1;
                    i21 = 39487;
                    Test.iArrFld[i18 + 1] = (int)Test.instanceCount;
                    Test.lFld -= s2;
                    i23 += (((i22 * i23) + iFld) - i18);
                    i23 += s2;
                    Test.iArrFld[i20 + 1] = (int)Test.fFld;
                    Test.lFld = iFld;
                }
            }
            f1 = 1;
            while (++f1 < 67) {
                switch ((i18 % 9) + 32) {
                case 32:
                    Test.iArrFld[i18 + 1] = (int)Test.lFld;
                    if (b) {
                        Test.iFld1 = i18;
                        for (i24 = i18; i24 < 1; ++i24) {
                            i19 = i20;
                            i19 = i18;
                            Test.lArrFld[i24 - 1] <<= i20;
                            i21 += (i24 * i24);
                            Test.fArrFld[i18 + 1] -= i19;
                            i21 = i25;
                            try {
                                Test.iArrFld[i18 + 1] = (i23 % i18);
                                iArr3[(int)(f1 + 1)] = (Test.iArrFld[(int)(f1 + 1)] / -39583);
                                i25 = (-1290248777 % Test.iFld1);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                case 33:
                    Test.byFld += (byte)i25;
                case 34:
                case 35:
                    Test.instanceCount >>= Test.instanceCount;
                    break;
                case 36:
                    iFld <<= Test.iFld1;
                case 37:
                    b = b;
                case 38:
                    dArr3[i18] -= Test.fFld;
                case 39:
                    i25 += Test.byFld;
                    break;
                case 40:
                    i25 = -19;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
