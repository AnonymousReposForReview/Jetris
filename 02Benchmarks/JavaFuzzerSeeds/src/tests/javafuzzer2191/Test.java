package tests.javafuzzer2191;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:01:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4249983445409574257L;
    public int iFld=0;
    public static int iFld1=-9;
    public static short sFld=3870;
    public static boolean bFld=true;
    public int iFld2=-162;
    public long lFld=-651310328L;
    public int iFld3=-124;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, long l1, int i5) {

        int i6=30, i7=-6, iArr1[]=new int[N];
        float f1=-43.384F;
        byte by=20;
        double d=-42.108667;

        FuzzerUtils.init(iArr1, -29300);

        Test.iFld1 += i4;
        switch (((i4 >>> 1) % 8) + 44) {
        case 44:
            iArr1[(i4 >>> 1) % N] += (int)Test.instanceCount;
            break;
        case 45:
            Test.instanceCount -= (long)-102.251F;
            break;
        case 46:
            i5 = (int)Test.instanceCount;
            i4 |= -44279;
            for (i6 = 10; 268 > i6; i6++) {
                Test.iFld1 += i6;
                i7 -= Test.sFld;
                i7 >>>= Test.iFld1;
                switch (((i6 % 1) * 5) + 96) {
                case 100:
                    Test.iFld1 >>= i6;
                    break;
                }
                Test.instanceCount += Test.iFld1;
                f1 += (i6 * i6);
                by = (byte)i5;
            }
            break;
        case 47:
            iArr1[(i4 >>> 1) % N] <<= i6;
            break;
        case 48:
            iArr1[(i6 >>> 1) % N] = (int)l1;
        case 49:
            d += -6;
            break;
        case 50:
            i5 = i4;
            break;
        case 51:
            i5 = i5;
        default:
            Test.bFld = Test.bFld;
        }
        vMeth1_check_sum += i4 + l1 + i5 + i6 + i7 + Float.floatToIntBits(f1) + by + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1) {

        int i2=-12, i3=1944, i8=2, i9=4, iArr[]=new int[N];
        byte by1=119;
        double d1=0.80468;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, -59);
        FuzzerUtils.init(fArr, -121.960F);

        for (i2 = 9; i2 < 225; ++i2) {
            float f2=0.2F;
            iArr[i2 - 1] = (int)4067597319060241836L;
            if (Test.bFld) {
                vMeth1(66, Test.instanceCount, i1);
            } else {
                Test.instanceCount += (i2 ^ i1);
                by1 += (byte)i1;
                Test.instanceCount += (long)1.39294;
                Test.instanceCount += (-13L + (i2 * i2));
            }
            Test.iFld1 <<= Test.iFld1;
            switch (((i2 % 10) * 5) + 29) {
            case 53:
                f2 = 62L;
                for (i8 = i2; i8 < 7; ++i8) {
                    Test.iFld1 += i2;
                    iArr[i8 + 1] = i1;
                    i9 += (int)1.42053;
                }
                break;
            case 63:
                Test.iFld1 = (int)Test.instanceCount;
                break;
            case 49:
                f2 -= i2;
                break;
            case 54:
                by1 <<= by1;
            case 65:
                i3 >>= Test.iFld1;
                break;
            case 31:
                Test.iFld1 = (int)f2;
                break;
            case 58:
                fArr = FuzzerUtils.float2array(N, (float)1.494F);
                break;
            case 76:
                Test.sFld -= (short)f2;
                break;
            case 57:
                Test.instanceCount >>= -6;
                break;
            case 73:
                i1 += (int)d1;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + by1 + i8 + i9 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(long l, float f) {


        Test.iFld1 += (int)(--l);
        vMeth(Test.iFld1, Test.iFld1);
        vSmallMeth_check_sum += l + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        float f3=-1.665F;
        int i10=4, i11=13, i12=43364, i13=16, i14=-3, i15=-16, i16=59383, i17=159, iArr2[]=new int[N];
        short s=16391, sArr[]=new short[N];
        double d2=1.3749;
        byte by2=-5;

        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(sArr, (short)19615);

        iFld -= (int)(((-3L + Test.instanceCount) - Math.abs(iFld)) + iFld);
        for (int smallinvoc=0; smallinvoc<284; smallinvoc++) vSmallMeth(Test.instanceCount, f3);
        Test.iFld1 += Test.iFld1;
        for (i10 = 9; i10 < 155; i10++) {
            if (Test.bFld) {
                i12 = 1;
                while (++i12 < 172) {
                    i11 = s;
                    switch ((i12 % 5) + 56) {
                    case 56:
                        for (i13 = 1; i13 < 1; i13++) {
                            Test.iFld1 *= (int)249L;
                            iFld2 += (((i13 * Test.instanceCount) + Test.instanceCount) - i14);
                            iFld2 += (i13 + Test.instanceCount);
                            Test.iFld1 = i11;
                            lFld += (i13 * i13);
                        }
                        i15 = 1;
                        do {
                            Test.iFld1 += (((i15 * iFld) + lFld) - i13);
                            iFld2 = i10;
                            i11 *= (int)-2.117F;
                        } while (++i15 < 1);
                        i11 += (((i12 * f3) + Test.instanceCount) - f3);
                        Test.instanceCount = iFld3;
                        break;
                    case 57:
                        f3 -= f3;
                        switch (((i10 % 10) * 5) + 40) {
                        case 43:
                            lFld *= i15;
                            Test.iFld1 = i11;
                        case 70:
                            iFld3 -= (int)6652856500911341324L;
                            iFld3 += i12;
                            for (i16 = 1; i16 < 1; ++i16) {
                                iFld3 += i16;
                                d2 *= -3;
                                Test.instanceCount += i16;
                            }
                        case 86:
                        case 88:
                            iArr2 = FuzzerUtils.int1array(N, (int)88);
                            break;
                        case 57:
                            sArr[i10] = (short)-19905;
                            break;
                        case 68:
                        case 53:
                            iFld += (((i12 * iFld2) + i15) - by2);
                            break;
                        case 54:
                            iFld >>= Test.sFld;
                            break;
                        case 82:
                        case 46:
                            i14 += (int)d2;
                            break;
                        }
                        break;
                    case 58:
                        i17 = (int)f3;
                        break;
                    case 59:
                        iFld3 += i12;
                        break;
                    case 60:
                        iFld2 += i12;
                        break;
                    default:
                        iArr2[i10 - 1] = iFld3;
                    }
                }
            } else {
                Test.instanceCount = iFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
