package tests.javafuzzer2268;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:07:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=182L;
    public static volatile byte byFld=-9;
    public static int iFld=-43749;
    public static volatile float fFld=0.1008F;
    public static volatile double dFld=2.58140;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -194);
        FuzzerUtils.init(Test.fArrFld, 0.629F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=-121, i9=7, i10=-11467, i11=10, i12=11012, i13=52803;
        double d=-74.601;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -7089076333805809147L);

        Test.instanceCount <<= 9;
        for (i8 = 4; 164 > i8; i8++) {
            Test.iFld >>>= i9;
            i9 = i9;
            for (i10 = 1; i10 < 10; i10 += 3) {
                Test.iFld *= -48423;
                if (Test.iFld != 0) {
                    vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
                        FuzzerUtils.checkSum(lArr1);
                    return;
                }
                for (i12 = 1; i12 < 4; i12++) {
                    Test.iFld *= (int)d;
                    Test.fFld = (float)d;
                    lArr1[i10] >>= i11;
                    Test.iArrFld[i10 - 1] -= i13;
                    i13 = i11;
                    i9 = (int)Test.instanceCount;
                    i13 -= i9;
                }
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth() {

        int i7=5, i14=-185;
        long lArr[][]=new long[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 3344719144L);
        FuzzerUtils.init(fArr1, 109.658F);

        Test.iFld <<= (int)(++lArr[(Test.iFld >>> 1) % N][(-253 >>> 1) % N]);
        Test.iFld -= Test.byFld;
        i7 = 1;
        while (++i7 < 397) {
            switch ((i7 % 1) + 19) {
            case 19:
                vMeth1();
                Test.fFld += -87;
                Test.iFld += Test.iFld;
                Test.iFld |= Test.iFld;
            }
            Test.iFld += (i7 * i7);
            Test.fFld *= i7;
            Test.iFld += (i7 * i7);
        }
        switch (((i7 >>> 1) % 7) + 81) {
        case 81:
            Test.iFld *= (int)Test.instanceCount;
            Test.iFld = (int)10L;
            break;
        case 82:
            lArr[(11 >>> 1) % N][(i7 >>> 1) % N] += i7;
        case 83:
            Test.iFld >>>= -4;
        case 84:
            fArr1[(Test.iFld >>> 1) % N] -= Test.instanceCount;
            break;
        case 85:
            Test.instanceCount = (long)Test.dFld;
            break;
        case 86:
            Test.iFld *= Test.iFld;
            break;
        case 87:
        default:
            i14 -= i7;
        }
        long meth_res = i7 + i14 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i4) {

        float f=1.859F;
        int i5=78, i6=93, i15=-10233, i16=-263;
        boolean b=true;
        long l=16802L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -93.70300);

        Test.byFld = (byte)((~i4) + ((f - -197) * 0.327F));
        for (i5 = 10; i5 < 387; i5++) {
            if ((((-121 * i5) - i5) * ((i4 - Test.instanceCount) * (i5 + i5))) > (--i6)) break;
            i4 -= (int)Math.abs(fMeth());
            for (i15 = 1; 4 > i15; i15++) {
                dArr[i15] += Test.dFld;
                Test.iFld += Test.byFld;
                if (b) continue;
                l = 1;
                do {
                    i16 = i16;
                    i4 += (int)f;
                    f = i15;
                    Test.fArrFld = FuzzerUtils.float1array(N, (float)-2.617F);
                } while (++l < 2);
                Test.instanceCount += (i15 * i15);
                if (false) continue;
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i15 + i16 + (b ? 1 : 0) + l +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-16634, i1=-132, i2=1, i3=87, i17=-153, i18=-57717, i19=14, i20=-2, i21=-34259;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.357F);

        for (i = 1; i < 249; ++i) {
            for (i2 = i; i2 < 101; ++i2) {
                i1 = ((i1++) * i1);
                Test.instanceCount += (long)fArr[i2];
                vMeth(Test.iFld);
                Test.iFld -= i1;
                i3 = (int)Test.instanceCount;
                i3 *= i;
                switch (((Test.iFld >>> 1) % 7) + 52) {
                case 52:
                    try {
                        Test.iFld = (Test.iArrFld[i2] / i3);
                        i3 = (i2 % -97);
                        i1 = (i1 / -17493);
                    } catch (ArithmeticException a_e) {}
                    Test.byFld -= (byte)12;
                    break;
                case 53:
                    i17 = 1;
                    do {
                        i3 = i2;
                        i3 -= (int)Test.instanceCount;
                    } while (++i17 < 1);
                    i1 += (i2 - i3);
                    Test.fArrFld[i - 1] += 33384;
                    break;
                case 54:
                    Test.fFld += (float)Test.dFld;
                case 55:
                    bArrFld[i - 1] = b1;
                case 56:
                    for (i18 = 1; i18 < 1; i18 += 2) {
                        Test.iFld *= i18;
                        Test.instanceCount >>= -10;
                        Test.dFld += i18;
                        Test.instanceCount -= Test.instanceCount;
                        Test.instanceCount += i1;
                        Test.byFld -= (byte)i19;
                    }
                    break;
                case 57:
                    i19 += (((i2 * i19) + Test.instanceCount) - i19);
                    for (i20 = 1; i20 < 1; ++i20) {
                        short s=-14944;
                        i19 += i20;
                        i19 /= (int)(s | 1);
                        i21 *= i21;
                    }
                case 58:
                    i21 >>= (int)Test.instanceCount;
                    break;
                default:
                    Test.fFld -= -9048;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
