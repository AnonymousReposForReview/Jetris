package tests.javafuzzer2981;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:26:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2223L;
    public int iFld=-126;
    public static boolean bFld=true;
    public static volatile int iFld1=-21170;
    public static float fFld=54.38F;
    public static double dFld=-51.91679;
    public static short sFld=24686;
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1, int i3, byte by) {

        short s1=-21327;
        float f1=-10.128F, f2=-115.221F, fArr[]=new float[N];
        double d=-2.7973;
        int i4=-9, i5=14015, i6=-8, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(fArr, -2.471F);

        Test.lArrFld[(i3 >>> 1) % N] = i3;
        iArr[(i3 >>> 1) % N] = s1;
        f1 = 1;
        while (++f1 < 252) {
            for (d = 1; d < 6; ++d) {
                i4 *= (int)d;
                i3 -= (int)-1.81733;
                if (Test.bFld) continue;
                f2 -= l1;
                fArr[(int)(d - 1)] = 45851;
                by -= (byte)i4;
                i3 += (int)(((d * Test.iFld1) + Test.iFld1) - i3);
                for (i5 = 1; 2 > i5; i5++) {
                    iArr[(int)(f1 - 1)] >>>= s1;
                    Test.iFld1 *= (int)-1534541425070884863L;
                    try {
                        i3 = (iArr[(int)(d)] / i6);
                        i3 = (i3 % 156);
                        i3 = (187 / i3);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = l1 + i3 + by + s1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i4 +
            Float.floatToIntBits(f2) + i5 + i6 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, short s, int i) {

        int i1=2, i2=-42212, i8=-8, i9=-14, iArr1[]=new int[N];
        long l2=136L;
        float f3=114.486F;

        FuzzerUtils.init(iArr1, -10);

        for (i1 = 2; i1 < 258; ++i1) {
            byte by1=79;
            lMeth(l2, i, by1);
            f3 = i1;
            if (Test.bFld) {
                if (Test.bFld) break;
                l2 = i2;
                for (i8 = i1; 6 > i8; i8++) {
                    Test.iFld1 *= (int)Test.instanceCount;
                    if (Test.bFld) {
                        i += (int)l2;
                        iArr1[i1] ^= i8;
                        i -= s;
                        vMeth1_check_sum += l + s + i + i1 + i2 + l2 + Float.floatToIntBits(f3) + i8 + i9 +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    l2 = Test.instanceCount;
                    l = 199;
                    iArr1[i8 - 1] = (int)Test.instanceCount;
                }
            } else if (Test.bFld) {
                if (Test.bFld) break;
            } else {
                s += (short)(-21181 + (i1 * i1));
            }
        }
        vMeth1_check_sum += l + s + i + i1 + i2 + l2 + Float.floatToIntBits(f3) + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(boolean b, float f, boolean b1) {

        short s2=-26329;
        int i10=-13, i11=1219, i12=-7, i13=11, i14=-17660, i15=-6, i16=-1, i17=-107, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 0);

        vMeth1(Test.instanceCount, s2, Test.iFld1);
        Test.iFld1 += Test.iFld1;
        for (i10 = 328; i10 > 17; --i10) {
            Test.instanceCount <<= i11;
        }
        for (i12 = 16; i12 < 281; i12++) {
            i14 = 1;
            while (++i14 < 6) {
                Test.instanceCount += Test.iFld1;
                i13 += (i14 ^ (long)f);
                i15 = 1;
                do {
                    Test.instanceCount -= s2;
                    i13 >>= Test.iFld1;
                } while (++i15 < 1);
                i11 += i14;
                for (i16 = 1; i16 < 1; ++i16) {
                    iArr2[i12 + 1] <<= -9;
                }
                i17 += (i14 * i14);
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + (b1 ? 1 : 0) + s2 + i10 + i11 + i12 + i13 + i14 +
            i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=-34, i19=-86, i20=45667, i21=-153, i22=-1, i23=63224, i25=-55751, i26=3386;
        byte by2=39;

        iFld = (int)1.14F;
        vMeth(Test.bFld, 0.213F, Test.bFld);
        for (i18 = 193; i18 > 11; i18--) {
            Test.instanceCount = -12;
            iArrFld[i18 - 1] = 13;
        }
        Test.fFld = i18;
        Test.iFld1 = -95;
        switch ((((i18 >>> 1) % 6) * 5) + 70) {
        case 86:
            Test.dFld *= -3249311993L;
            i20 = 237;
            while (--i20 > 0) {
                Test.dFld = 10441;
            }
            break;
        case 87:
            iFld -= 8;
            i21 = 144;
            while (--i21 > 0) {
                for (i22 = 10; i22 < 174; i22++) {
                    i23 <<= by2;
                    Test.fFld += (-22933 + (i22 * i22));
                }
                Test.instanceCount += (((i21 * i18) + i20) - i22);
                for (i25 = i21; 174 > i25; ++i25) {
                    iFld += (((i25 * Test.instanceCount) + i19) - Test.instanceCount);
                    Test.instanceCount -= -7892;
                    i26 += (-73 + (i25 * i25));
                    iArrFld[i25 + 1] = i20;
                    i26 += (i25 * i25);
                    iFld += i25;
                    Test.iFld1 += (int)35.64490;
                    if (Test.bFld) break;
                    Test.iFld1 += i18;
                    Test.iFld1 -= iFld;
                }
                Test.instanceCount += (long)Test.dFld;
                i19 *= i26;
            }
            break;
        case 83:
            i19 *= i25;
            break;
        case 77:
            Test.sFld -= (short)i20;
            break;
        case 78:
            i26 = (int)Test.fFld;
            break;
        case 79:
            iArrFld[(i21 >>> 1) % N] += (int)Test.dFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
