package tests.javafuzzer1008;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:49:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3871127021414943882L;
    public static volatile float fFld=-109.666F;
    public static short sFld=-6934;
    public static boolean bFld=false;
    public float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];
    public volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(long l1, int i7) {


        i7 = i7;
        Test.instanceCount = i7;
        long meth_res = l1 + i7;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1(long l, int i5, int i6) {

        int i8=0, i9=-48629, i10=-53508, i11=17247, i12=-4, i13=-14919, iArr[]=new int[N];
        double d=2.70247;

        FuzzerUtils.init(iArr, -62663);

        Test.fFld = (Long.reverseBytes(Math.max(l, l)) - i6);
        i6 = (iArr[(i5 >>> 1) % N] + (--i6));
        Test.fFld -= (((i6--) - i5) * lMeth(l, 64601));
        for (i8 = 17; 394 > i8; i8++) {
            Test.sFld = (short)i8;
            for (i10 = 1; i10 < 4; i10++) {
                i5 -= i10;
                Test.fFld += i5;
                if (Test.bFld) {
                    i9 = i11;
                    if (true) continue;
                } else if (Test.bFld) {
                    for (i12 = 1; i12 < 2; i12++) {
                        try {
                            i13 = (i9 % i11);
                            i6 = (i12 % i9);
                            i13 = (i12 % 123);
                        } catch (ArithmeticException a_e) {}
                        d = 34322L;
                        i6 += (i12 - Test.fFld);
                    }
                } else if (Test.bFld) {
                    Test.fFld += i10;
                    vMeth1_check_sum += l + i5 + i6 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                } else {
                    l <<= i9;
                }
            }
        }
        vMeth1_check_sum += l + i5 + i6 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i4) {

        int i14=-52371, i15=-3, i16=-7324, i17=231, i18=-29151, i19=5, i20=14, iArr1[]=new int[N];
        long l2=16L;
        double d1=2.38694;

        FuzzerUtils.init(iArr1, -3);

        vMeth1(Test.instanceCount, i4, i4);
        iArr1[(52639 >>> 1) % N] <<= (int)Test.instanceCount;
        iArr1 = iArr1;
        for (i14 = 8; i14 < 206; i14++) {
            i4 -= i4;
        }
        for (i16 = 1; i16 < 276; i16++) {
            if (i17 != 0) {
                vMeth_check_sum += i4 + i14 + i15 + i16 + i17 + l2 + i18 + Double.doubleToLongBits(d1) + i19 + i20 +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (l2 = 1; l2 < 6; l2++) {
                i18 = i14;
                Test.bFld = Test.bFld;
                iArr1[(int)(l2)] = (int)d1;
                for (i19 = 2; i19 > 1; --i19) {
                    iArr1[i19 - 1] *= i4;
                    fArrFld[(int)(l2)][i19 + 1] -= l2;
                    i17 = -179;
                }
            }
        }
        vMeth_check_sum += i4 + i14 + i15 + i16 + i17 + l2 + i18 + Double.doubleToLongBits(d1) + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=-48588, i2=14, i3=0, i21=-1, i22=5, i23=13;
        float f=-10.298F;
        double d2=-1.69873;

        for (i = 7; i < 350; ++i) {
            for (i2 = 73; i2 > i; i2--) {
                i3 -= (-i2);
            }
            vMeth(-6);
            Test.instanceCount += (i * Test.instanceCount);
            switch ((i % 2) + 51) {
            case 51:
                for (i21 = 4; 73 > i21; i21++) {
                    for (f = 1; f < 2; f++) {
                        i22 = i23;
                        i23 = i2;
                        i1 += (int)f;
                        switch ((i % 2) + 127) {
                        case 127:
                            Test.fFld = (float)d2;
                            iArrFld[(int)(f)] = (int)176L;
                        case 128:
                            Test.instanceCount *= i1;
                            Test.instanceCount = 2;
                            break;
                        default:
                            i22 = (int)Test.instanceCount;
                        }
                        i22 = i21;
                        Test.sFld = (short)i1;
                        Test.instanceCount = (long)Test.fFld;
                        fArrFld[(int)(f + 1)][i21 + 1] = i2;
                        fArrFld[i21][i21] -= i1;
                    }
                    Test.instanceCount += i21;
                    Test.fFld += Test.fFld;
                    d2 = i3;
                    i3 <<= i3;
                    i1 = (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                }
                i23 = (int)Test.instanceCount;
                dArrFld[i] -= i22;
                break;
            case 52:
                lArrFld[i + 1] = i2;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
