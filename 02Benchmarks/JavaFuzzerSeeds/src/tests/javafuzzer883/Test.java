package tests.javafuzzer883;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:18:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7550844014164202585L;
    public static volatile byte byFld=-41;
    public static float fFld=-2.480F;
    public static boolean bFld=true;
    public static double dFld=1.28359;
    public static long lFld=-133L;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 61003);
        FuzzerUtils.init(Test.byArrFld, (byte)-86);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(byte by) {

        int i8=229, i10=1, i11=-196, i12=-238;
        boolean b=false;

        i8 = 1;
        while (++i8 < 293) {
            double d1=-1.123177;
            Test.instanceCount += i8;
            i10 += (int)Test.instanceCount;
            i10 += (int)Test.fFld;
            d1 -= i8;
            if (Test.bFld) continue;
            try {
                i10 = (i8 / 1741313706);
                i10 = (i8 % i8);
                i10 = (-9737 / i10);
            } catch (ArithmeticException a_e) {}
            i11 = 1;
            do {
                i10 += i11;
                i12 -= i8;
                if (b) break;
            } while (++i11 < 6);
        }
        for (int i13 : Test.iArrFld) {
            Test.iArrFld[(i10 >>> 1) % N] = (int)46L;
        }
        Test.iArrFld[(i10 >>> 1) % N] = i12;
        Test.fFld = Test.fFld;
        long meth_res = by + i8 + i10 + i11 + i12 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2, short s, int i3) {

        float f=0.113F;
        int i4=223, i5=-57197, i6=-72, i7=-61226, iArr[]=new int[N];
        double d=-105.127248;

        FuzzerUtils.init(iArr, 53538);

        s += (short)f;
        for (i4 = 14; i4 < 237; ++i4) {
            i2 += (i4 * i4);
            Test.instanceCount = (iArr[(i5 >>> 1) % N]++);
            for (d = 1; 7 > d; ++d) {
                i3 %= (int)((--iArr[i4 + 1]) | 1);
                i7 = 1;
                while (++i7 < 2) {
                    i6 *= (--i3);
                }
                if (Test.bFld) {
                    Test.byFld -= (byte)(lMeth(Test.byFld) - Test.fFld);
                    i5 = i5;
                } else {
                    i6 -= 344;
                    Test.bFld = Test.bFld;
                }
                Test.dFld *= Test.instanceCount;
            }
            i3 *= (int)Test.instanceCount;
        }
        long meth_res = i2 + s + i3 + Float.floatToIntBits(f) + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=31456, i1=5, i14=-8, i15=52786, i16=-38354, i17=-2;
        short s1=-21627;
        float fArr[][]=new float[N][N];
        long lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(fArr, 70.334F);
        FuzzerUtils.init(lArr, 154L);
        FuzzerUtils.init(dArr, 0.25956);

        for (i = 3; 162 > i; i += 2) {
            Test.instanceCount -= (-((-Math.max(Test.instanceCount, Test.instanceCount)) * (36198 - iMeth(i1, s1,
                -49))));
            switch ((i % 10) + 10) {
            case 10:
                Test.byArrFld[i - 1] *= (byte)27120;
                Test.instanceCount = i;
                break;
            case 11:
                for (i14 = 1; i14 < 19; i14++) {
                    i15 = (int)Test.instanceCount;
                    i15 += (i14 + i);
                    Test.instanceCount = Test.instanceCount;
                }
                Test.fFld += 25187L;
                switch ((i % 1) + 118) {
                case 118:
                    i15 += (i - i14);
                    break;
                default:
                    for (i16 = 1; i16 < 19; i16++) {
                        i17 += i16;
                        Test.instanceCount = (long)Test.dFld;
                    }
                }
            case 12:
                Test.iArrFld = FuzzerUtils.int1array(N, (int)247);
                break;
            case 13:
                fArr[i - 1][i - 1] = (float)Test.dFld;
                break;
            case 14:
                Test.iArrFld[i] = (int)-6711L;
            case 15:
                lArr[i - 1] = -10623;
                break;
            case 16:
                i15 = s1;
                break;
            case 17:
                dArr[i - 1] = dArr[i - 1];
                break;
            case 18:
                i1 += (((i * Test.instanceCount) + Test.instanceCount) - s1);
            case 19:
                Test.instanceCount += (i * i);
                break;
            }
        }
        vMeth_check_sum += i + i1 + s1 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        double d2=-125.45195, dArr1[]=new double[N];
        int i18=-45449, i19=3, i20=-151, i21=-171, i22=34, i23=-97;
        short s2=32539;
        float f1=61.431F;

        FuzzerUtils.init(dArr1, 17.16646);

        vMeth();
        d2 = 1;
        while (++d2 < 203) {
            i18 += i18;
        }
        Test.instanceCount = -4409;
        i18 += (int)Test.lFld;
        i19 = 1;
        do {
            for (i20 = 2; i20 < 118; i20++) {
                if (Test.bFld) {
                    i18 = i19;
                    Test.bFld = Test.bFld;
                    i18 *= i19;
                    i22 = 1;
                    while (++i22 < 2) {
                        try {
                            i18 = (Test.iArrFld[i20] % i22);
                            Test.iArrFld[i19] = (i20 / i22);
                            i18 = (-153 % i18);
                        } catch (ArithmeticException a_e) {}
                        Test.iArrFld[i20 + 1] ^= i18;
                        i21 = i19;
                        if (Test.bFld) continue;
                        i21 = 19;
                    }
                } else {
                    Test.fFld += i20;
                }
                s2 += (short)i21;
                Test.fFld = i18;
                i21 += (i20 | i21);
                switch (((i19 >>> 1) % 9) + 18) {
                case 18:
                    s2 += (short)i20;
                    break;
                case 19:
                    switch (((i19 % 1) * 5) + 66) {
                    case 70:
                        switch ((i20 % 4) + 121) {
                        case 121:
                            Test.iArrFld[i20] = i22;
                            i21 = s2;
                        case 122:
                            for (f1 = 1; f1 < 2; f1++) {
                                Test.iArrFld[i19 - 1] = i23;
                                i21 = 59949;
                            }
                            break;
                        case 123:
                            Test.lFld &= 55245;
                            break;
                        case 124:
                            i21 = i20;
                        }
                        break;
                    default:
                        Test.lFld = -44L;
                    }
                case 20:
                    Test.iArrFld[i19 - 1] <<= i22;
                    break;
                case 21:
                    i18 += i20;
                case 22:
                    Test.instanceCount = (long)Test.dFld;
                    break;
                case 23:
                    Test.dFld -= i23;
                    break;
                case 24:
                    Test.instanceCount += i21;
                    break;
                case 25:
                case 26:
                    i18 += i20;
                    break;
                default:
                    dArr1 = dArr1;
                }
            }
        } while (++i19 < 213);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
