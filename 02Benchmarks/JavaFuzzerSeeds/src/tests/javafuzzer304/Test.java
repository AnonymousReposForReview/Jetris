package tests.javafuzzer304;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:34:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26L;
    public static int iFld=12;
    public static byte byFld=5;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {

        boolean b=true;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 4);

        i1 -= iArr[(54792 >>> 1) % N];
        b = (b = b);
        vSmallMeth_check_sum += i + i1 + i2 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        float f1=0.392F, f2=-4.12F;
        int i5=9, i6=16649, i7=-37933, i9=61397, i10=107, iArr1[]=new int[N];
        short s=-30460, sArr[]=new short[N];
        double d1=27.120991;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 18678);
        FuzzerUtils.init(sArr, (short)-21841);

        Test.iFld = Test.iFld;
        Test.iFld *= Test.iFld;
        f1 = 1;
        while (++f1 < 167) {
            for (i5 = (int)(f1); i5 < 9; i5++) {
                s = (short)9L;
            }
        }
        if (b1) {
            i7 = 1;
            do {
                int i8=47;
                f2 = i8;
                iArr1[i7] = -1795;
                for (i9 = 1; i9 < 12; i9++) {
                    switch (((i7 % 8) * 5) + 120) {
                    case 150:
                        i6 = s;
                        i6 += (((i9 * Test.iFld) + i7) - i7);
                        break;
                    case 135:
                        Test.iFld = i9;
                        iArr1[i7] >>= 48899;
                    case 125:
                        i8 -= (int)1.877F;
                    case 142:
                        Test.instanceCount *= i10;
                        break;
                    case 130:
                        d1 *= Test.iFld;
                        break;
                    case 155:
                        s -= (short)f2;
                        break;
                    case 131:
                        Test.iFld *= (int)d1;
                        break;
                    case 158:
                        sArr[i9] *= (short)1.670F;
                    }
                }
            } while (++i7 < 129);
        } else if (false) {
            s = (short)i5;
        } else if (b1) {
            i6 -= i5;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i5 + i6 + s + i7 + Float.floatToIntBits(f2) + i9 + i10 +
            Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i4, double d, float f) {

        int i11=-120, i12=-6, i13=61335, i14=-1, i15=62192;
        long l1=7L;
        boolean b2=true;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)23143);

        vMeth1();
        for (i11 = 9; i11 < 163; ++i11) {
            i4 += (int)(-1.102F + (i11 * i11));
            if (b2) {
                f *= -1.374F;
                for (l1 = 1; l1 < 10; l1++) {
                    for (i14 = 2; i14 > 1; i14--) {
                        i13 += (((i14 * f) + i4) - i11);
                        i15 -= i14;
                        i12 = i11;
                        i15 = i15;
                        f = (float)d;
                    }
                    i13 <<= -9;
                    sArr1[i11] <<= (short)Test.instanceCount;
                    Test.byFld *= (byte)Test.iFld;
                }
            }
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i11 + i12 + l1 + i13 + i14 + i15
            + (b2 ? 1 : 0) + FuzzerUtils.checkSum(sArr1);
    }

    public static int iMeth(long l) {

        double d2=0.78110, dArr[]=new double[N];
        float f3=1.50F;
        int i16=54409, i17=5;

        FuzzerUtils.init(dArr, -107.87927);

        vMeth(Test.iFld, d2, f3);
        i16 = 1;
        do {
            l %= (i17 | 1);
            l = Test.iFld;
        } while (++i16 < 288);
        dArr[(Test.iFld >>> 1) % N] -= l;
        l >>= l;
        long meth_res = l + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {


        Test.instanceCount = (-(51 * (Test.instanceCount--)));
        for (int smallinvoc=0; smallinvoc<572; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld++, Test.iFld--);
        Test.instanceCount += iMeth(Test.instanceCount);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
