package tests.javafuzzer1572;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:12:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6624937198862324494L;
    public static int iFld=-6;
    public static short sFld=30292;
    public static boolean bFld=true;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i1) {

        int i2=212, i3=158, i4=-200;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -80.190F);

        Test.iFld = i1;
        i1 >>>= -1;
        Test.iFld >>>= Test.iFld;
        i2 = 1;
        while ((i2 += 2) < 246) {
            Test.iFld -= Test.sFld;
        }
        i1 = (int)Test.instanceCount;
        for (i3 = 9; i3 < 265; ++i3) {
            i1 -= i4;
            Test.sFld /= (short)(i3 | 1);
            Test.instanceCount = Test.instanceCount;
            i1 &= i4;
            fArr[i3 + 1] /= (Test.iFld | 1);
            Test.instanceCount = 14;
            Test.instanceCount = Test.iFld;
            Test.instanceCount /= (i1 | 1);
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        float f=1.289F;
        byte by=47;
        int i5=-10, i6=-47751, i7=30385, iArr[]=new int[N];
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -14779);
        FuzzerUtils.init(lArr1, 6L);
        FuzzerUtils.init(dArr, -1.41367);

        iArr[(Test.iFld >>> 1) % N] += (int)((Test.iFld--) * lArr1[(Test.iFld >>> 1) % N]);
        lMeth(-7);
        f -= by;
        i5 = 1;
        do {
            Test.instanceCount += (i5 * i5);
            lArr1[i5] = (long)-60.31547;
            Test.iFld <<= Test.iFld;
            if (Test.bFld) {
                by -= (byte)Test.instanceCount;
            } else {
                Test.instanceCount = Test.instanceCount;
                for (i6 = 1; 5 > i6; ++i6) {
                    dArr[i6 + 1] -= i6;
                    i7 &= i7;
                    if (Test.bFld) continue;
                    Test.instanceCount += i6;
                }
            }
        } while (++i5 < 324);
        long meth_res = Float.floatToIntBits(f) + by + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 725442094L);

        lArr[(i >>> 1) % N] <<= i;
        i = iMeth();
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i8=-177, i9=12, i10=-40, i11=9, i12=-11697, i13=55831, i14=13, i15=-206, i16=-6, i17=-54917, i19=-63985,
            iArr1[]=new int[N];
        byte by1=-106;
        double d=121.32070, dArr1[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -172);
        FuzzerUtils.init(fArr1, -21.868F);
        FuzzerUtils.init(dArr1, 81.68744);

        for (int smallinvoc=0; smallinvoc<174; smallinvoc++) vSmallMeth(Test.iFld);
        for (i8 = 217; i8 > 3; --i8) {
            float f1=-119.271F;
            for (i10 = 7; i10 < 117; i10++) {
                i11 *= -22902;
                iArr1[i8] = i10;
            }
            try {
                i9 = (i8 / 168);
                iArr1[i8] = (i8 % -39810);
                i9 = (iArr1[i8] / iArr1[i8 - 1]);
            } catch (ArithmeticException a_e) {}
            fArr1[i8 - 1] *= Test.instanceCount;
            i11 = (int)Test.instanceCount;
            Test.iFld = by1;
            f1 = i11;
            i12 = 117;
            do {
                Test.instanceCount *= 54727L;
                by1 += (byte)(((i12 * i11) + Test.instanceCount) - i10);
                Test.iFld += i9;
                i9 -= (int)1333L;
                for (i13 = 1; 1 > i13; ++i13) {
                    if (false) break;
                }
                f1 -= i10;
                Test.instanceCount = i14;
                dArr1[i8 + 1] -= -127;
                f1 += i12;
                i15 += (((i12 * Test.instanceCount) + Test.instanceCount) - i15);
            } while (--i12 > 0);
        }
        for (i16 = 9; i16 < 157; ++i16) {
            Test.sFld += (short)Test.instanceCount;
            i9 = 12994;
            for (d = 2; 169 > d; ++d) {
                i11 += (int)d;
                if (Test.bFld) break;
            }
            Test.instanceCount += (((i16 * Test.instanceCount) + i14) - by1);
        }
        i19 += Test.sFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
