package tests.javafuzzer2976;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:26:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=51615L;
    public static volatile boolean bFld=false;
    public double dFld=-113.25690;
    public static short sFld=-26927;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f, double d1) {

        int i4=18, i5=-7, i6=-10, i7=-1;
        double d2=1.40814;
        byte by=-90;
        short s=-30605;

        i4 -= i4;
        i4 = -13546;
        for (d2 = 20; d2 < 330; d2++) {
            if (Test.bFld) {
                for (i6 = 1; i6 < 5; i6++) {
                    if (i7 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i4 +
                            Double.doubleToLongBits(d2) + i5 + i6 + i7 + by + s;
                        return;
                    }
                    Test.instanceCount += (long)f;
                    switch ((((i6 >>> 1) % 2) * 5) + 81) {
                    case 90:
                    case 86:
                        by = (byte)115;
                        Test.iArrFld[(int)(d2 - 1)] = i5;
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount += i4;
                    }
                    Test.iArrFld = Test.iArrFld;
                    i7 += (((i6 * i7) + s) - Test.instanceCount);
                    Test.iArrFld[(int)(d2)] += (int)7614630478337850487L;
                }
            } else {
                i4 = i6;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i4 + Double.doubleToLongBits(d2) +
            i5 + i6 + i7 + by + s;
    }

    public static int iMeth1(int i2, int i3) {

        double d=2.12370;
        float f1=117.192F;
        int i9=9643, i10=138;
        byte by1=121;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -55749L);

        i2 -= (--i3);
        Test.iArrFld[(i3 >>> 1) % N] *= (int)((lArr[(10 >>> 1) % N] - (10L + (i3 = (int)d))) - (Test.iArrFld[(i2 >>> 1)
            % N] = (int)(i2 * Test.instanceCount)));
        vMeth(f1, d);
        for (i9 = 15; 291 > i9; i9++) {
            i10 += (((i9 * i3) + i3) - i9);
            if (Test.bFld) {
                f1 += (4450872501964043474L + (i9 * i9));
                by1 += (byte)(i9 * i9);
                Test.bFld = Test.bFld;
                by1 += (byte)i9;
            }
            lArr[i9 + 1] -= (long)d;
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i9 + i10 + by1 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-19931, i11=-14, i12=-39762, i13=-165, i14=-22169, i15=-11;
        float f2=122.475F;
        double d3=1.74513;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 2308139042L);

        Test.iArrFld[(i1 >>> 1) % N] += ((7309 - iMeth1(i1, i1)) + -43346);
        for (i11 = 2; i11 < 188; ++i11) {
            lArr1 = lArr1;
            Test.instanceCount = Test.instanceCount;
            i13 = 1;
            while (++i13 < 9) {
                i1 = i1;
                for (i14 = 1; i14 < 1; ++i14) {
                    f2 += i11;
                    d3 *= i15;
                    i15 = i1;
                    i12 += i14;
                    lArr1[i14][i14] *= i15;
                    i1 = (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    try {
                        i12 = (i13 / i13);
                        i1 = (i14 / i11);
                        i15 = (i1 / 2081241216);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i1 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=109, i16=-4, i17=-28, i18=154, i19=-11, i20=4, i21=3;
        float f3=-1.198F, fArr[]=new float[N];
        long l=194L;
        byte by2=-81;
        double d4=0.130203;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 99.997F);

        i += iMeth();
        f3 -= i;
        bArr[(i >>> 1) % N] = Test.bFld;
        i -= i;
        for (l = 10; 334 > l; l += 2) {
            for (i17 = 1; i17 < 155; i17++) {
                Test.instanceCount = 6;
                f3 += (float)dFld;
                Test.instanceCount += i16;
                by2 = (byte)Test.instanceCount;
                i18 = Test.sFld;
            }
            i18 -= i16;
            switch ((((i17 >>> 1) % 1) * 5) + 70) {
            case 74:
                i16 = i17;
                i16 = i18;
                break;
            default:
                i19 = 155;
                while (--i19 > 0) {
                    lArrFld[(int)(l - 1)][i19 - 1] = i19;
                    f3 += -62691;
                    i += i18;
                    Test.iArrFld[(int)(l - 1)] |= Test.sFld;
                    i20 = 1;
                    while (++i20 < 1) {
                        i18 >>= 59208;
                    }
                    i16 = by2;
                    i += (((i19 * i18) + l) - i18);
                    Test.instanceCount = i17;
                    f3 += i19;
                    bArr[i19 + 1] = Test.bFld;
                }
                for (d4 = 2; 155 > d4; ++d4) {
                    i = -4810;
                    Test.instanceCount += (long)((long)d4 ^ Test.instanceCount);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
