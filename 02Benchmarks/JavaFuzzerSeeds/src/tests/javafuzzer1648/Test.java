package tests.javafuzzer1648;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static short sFld=-10974;
    public static byte byFld=50;
    public double dFld=-1.31241;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-27985);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7) {

        int i8=13, i9=161, i10=-32, i11=2845, i12=14, iArr[]=new int[N];
        short s=28084;
        byte by=-71;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1853444196628063161L);
        FuzzerUtils.init(iArr, 11);

        i8 = 1;
        do {
            i7 = i8;
            i7 >>= -197;
        } while (++i8 < 153);
        s >>>= (short)i7;
        for (i9 = 19; i9 < 356; i9++) {
            lArr[i9 - 1] ^= i8;
            for (i11 = 1; 5 > i11; ++i11) {
                i7 |= i10;
                Test.instanceCount -= 28555;
            }
            Test.sArrFld[i9 - 1] = by;
        }
        Test.instanceCount *= s;
        i12 >>= i9;
        if (b) {
            iArr[(i9 >>> 1) % N] += (int)Test.instanceCount;
        }
        Test.instanceCount -= -1;
        long meth_res = i7 + i8 + s + i9 + i10 + i11 + i12 + by + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i3=-21, i4=12, i5=39063, i6=-9722, i13=9, i14=-41;
        float f=-1.884F;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -12L);
        FuzzerUtils.init(dArr, -1.104521);

        for (i3 = 6; i3 < 122; i3++) {
            for (i5 = 1; i5 < 13; i5++) {
                Test.instanceCount >>= (long)((f - iMeth(i4)) - i6);
                i6 = i2;
                f *= 64;
                lArr1[i5 + 1] = i1;
                dArr[i3] *= f;
            }
            i4 = i6;
            i6 = (int)-3625054593L;
            Test.instanceCount = i3;
            Test.instanceCount += i3;
            i1 = (int)Test.instanceCount;
            for (i13 = 1; i13 < 13; ++i13) {
                i1 = Test.sFld;
                i2 = 48;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i13 + i14 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth() {

        int i15=184;

        vMeth(12887, i15);
        vSmallMeth_check_sum += i15;
    }

    public void mainTest(String[] strArr1) {

        int i=-42485, i16=40884, i17=12, i18=-236, i19=58851, i20=-7456, i21=-78, i22=-30928, i23=14, iArr1[]=new
            int[N];
        float f1=13.474F, f2=-2.512F, fArr[]=new float[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(dArr1, -2.4918);
        FuzzerUtils.init(fArr, 0.432F);

        i += ((++i) - (--i));
        for (int smallinvoc=0; smallinvoc<978; smallinvoc++) vSmallMeth();
        i += Test.byFld;
        for (i16 = 13; i16 < 297; i16++) {
            i17 = (int)Test.instanceCount;
        }
        Test.instanceCount = i;
        Test.instanceCount = i;
        Test.instanceCount *= Test.instanceCount;
        i17 &= -218;
        iArr1[(i16 >>> 1) % N] -= Test.byFld;
        iArr1[(i16 >>> 1) % N] <<= -6;
        i18 = 1;
        do {
            boolean b1=false;
            switch (((i17 >>> 1) % 8) + 56) {
            case 56:
                Test.sFld = (short)i17;
                Test.instanceCount *= -16;
                i -= (int)-28L;
                break;
            case 57:
                Test.instanceCount += i18;
                break;
            case 58:
                i = i18;
                break;
            case 59:
                if (true) break;
                if (b1) {
                    i17 = i18;
                    for (i19 = 4; 109 > i19; i19++) {
                        i20 >>= i17;
                    }
                } else if (b1) {
                    if (b1) continue;
                } else if (true) {
                    for (i21 = i18; i21 < 109; ++i21) {
                        for (f1 = i21; f1 < 1; ++f1) {
                            dFld -= Test.sFld;
                            Test.instanceCount = Test.instanceCount;
                        }
                        i17 -= (int)-84.119632;
                    }
                    f2 += (i18 * i18);
                }
                break;
            case 60:
                fArr[i18] += Test.sFld;
                break;
            case 61:
                i23 += i18;
                break;
            case 62:
                dFld *= Test.instanceCount;
            case 63:
                iArr1[i18] |= (int)Test.instanceCount;
                break;
            default:
                i ^= (int)Test.instanceCount;
            }
        } while (++i18 < 230);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
