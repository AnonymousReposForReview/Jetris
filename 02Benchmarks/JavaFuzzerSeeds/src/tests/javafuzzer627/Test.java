package tests.javafuzzer627;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:51:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-413472984L;
    public static float fFld=29.942F;
    public static short sFld=-2591;
    public static volatile long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -14952L);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2, int i8) {

        int i9=3, i10=68, i11=-121, i12=-49262, i13=9;
        float f=0.803F;
        short s=10958;

        for (i9 = 7; i9 < 137; i9++) {
            Test.instanceCount += (i9 * i9);
            for (i11 = 1; i11 < 12; i11++) {
                if (true) break;
                for (f = i11; f < 2; ++f) {
                    Test.instanceCount *= l2;
                    Test.fFld -= s;
                    i10 += (int)(f * Test.fFld);
                    Test.lArrFld[i11 + 1][(i9 >>> 1) % N] = i11;
                    i12 += (int)(((f * i8) + i10) - i11);
                    i8 += (int)(7L + (f * f));
                    l2 = 26913;
                }
            }
            i12 -= (int)1048184214764471258L;
        }
        i8 = (int)Test.instanceCount;
        i12 = i13;
        vMeth_check_sum += l2 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) + i13 + s;
    }

    public static int iMeth(long l1, boolean b) {

        int i6=86, i7=179, i14=-11, i15=127, i16=27414, i17=-187, i18=-30528, i19=29312, iArr[]=new int[N];
        short s1=24764;
        byte by=107;

        FuzzerUtils.init(iArr, 3);

        for (i6 = 21; i6 < 354; i6++) {
            iArr[i6] -= Integer.reverseBytes((int)((i7 - l1) + (i6 * i7)));
            vMeth(Test.instanceCount, i6);
        }
        for (i14 = 11; i14 < 202; ++i14) {
            i7 += (int)Test.instanceCount;
            Test.sFld += (short)Test.instanceCount;
            i15 = (int)149L;
            for (i16 = 1; 8 > i16; i16++) {
                i15 += (((i16 * s1) + i14) - i17);
                i17 <<= i14;
                i17 *= i17;
                for (i18 = i14; 2 > i18; i18++) {
                    i15 += (i18 * i17);
                }
                by >>= by;
            }
        }
        i7 += i19;
        long meth_res = l1 + (b ? 1 : 0) + i6 + i7 + i14 + i15 + i16 + i17 + s1 + i18 + i19 + by +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(double d, int i2, int i3) {

        int i4=-153, i5=-4, i20=4, i21=46988, i22=-109, iArr1[]=new int[N];
        boolean b1=false;
        double d1=-92.115084;
        byte by1=-59;

        FuzzerUtils.init(iArr1, 44504);

        for (i4 = 12; i4 < 198; i4++) {
            Test.instanceCount >>= ((Test.instanceCount += iMeth(-63631L, b1)) * i3);
            for (i20 = 9; i20 > 1; --i20) {
                d = 222;
                i3 += (int)Test.fFld;
                i21 >>>= i4;
                for (d1 = i4; d1 < 2; d1++) {
                    i22 /= (int)((long)(d) | 1);
                    iArr1[i4 - 1] >>= i20;
                    Test.instanceCount += by1;
                    Test.fFld += i4;
                    i5 *= (int)Test.instanceCount;
                    i22 -= (int)Test.instanceCount;
                }
                Test.instanceCount *= Test.instanceCount;
                d *= d1;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + i20 + i21 +
            Double.doubleToLongBits(d1) + i22 + by1 + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=15L, l3=56889L;
        int i=98, i1=183, i23=-59505, i24=27, i25=9, i26=-11, i28=-14, i29=40, i30=-45186;
        boolean b2=true;
        byte by2=-26;
        float f1=0.98F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.653F);

        for (l = 9; l < 212; l++) {
            i1 = 124;
            while ((i1 -= 2) > 0) {
                i += (i1 * i1);
            }
            i = (sMeth(-2.23921, i, i) / (i | 1));
        }
        i23 = 1;
        do {
            for (l3 = i23; l3 < 74; l3++) {
                for (i25 = 1; i25 < 1; ++i25) {
                    Test.lArrFld[(int)(l3 - 1)][i25 - 1] = i23;
                    iArrFld[i25 + 1] = -37945;
                }
                if (b2) continue;
            }
            b2 = b2;
            i24 += (-54 + (i23 * i23));
            i -= i25;
            if (true) break;
            i += i26;
            i28 = 74;
            while ((i28 -= 2) > 0) {
                fArr[i23 - 1] *= Test.sFld;
                for (i29 = 2; i29 > 1; --i29) {
                    i <<= (int)l3;
                    i24 = (int)l3;
                    by2 = (byte)-3;
                    Test.instanceCount += i29;
                }
                i30 -= -11;
            }
            Test.sFld += (short)i23;
        } while (++i23 < 342);
        f1 = 1;
        do {
            Test.fFld -= Test.sFld;
            Test.fFld += (((f1 * i24) + Test.instanceCount) - f1);
            i24 = (int)Test.instanceCount;
            Test.sFld += (short)(f1 * i30);
            try {
                iArrFld[(int)(f1)] = (i30 / i28);
                i = (i30 / i25);
                i26 = (i / iArrFld[(int)(f1 + 1)]);
            } catch (ArithmeticException a_e) {}
        } while (++f1 < 223);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
