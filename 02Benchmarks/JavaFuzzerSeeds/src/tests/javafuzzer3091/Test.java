package tests.javafuzzer3091;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:35:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1015847432L;
    public volatile short sFld=31873;
    public boolean bFld=false;
    public volatile double dFld=26.97995;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1) {

        int i8=4480, i9=-61414, i10=-8, i11=-227, i12=19689, i13=24261, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 5; ++i9) {
                i11 += (int)(2360153485L + (i9 * i9));
                i11 -= i11;
                Test.instanceCount /= (i8 | 1);
                for (i12 = 1; i12 < 2; i12++) {
                    switch (((i9 % 4) * 5) + 62) {
                    case 65:
                        i11 += i10;
                        i13 *= i9;
                        i13 -= i10;
                        i11 += (int)l1;
                        break;
                    case 68:
                        i13 -= 16426;
                        break;
                    case 80:
                        iArr[i12] = i8;
                        break;
                    case 74:
                        try {
                            i13 = (i12 / i8);
                            i10 = (i13 / i8);
                            iArr[i12 + 1] = (i9 / 44570);
                        } catch (ArithmeticException a_e) {}
                        i13 = (int)l1;
                        break;
                    }
                }
            }
        } while (++i8 < 315);
        long meth_res = l1 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i1) {

        int i2=-6, i3=38292, i4=-10, i5=142, i6=-238, i7=-12;
        boolean b=true;
        float f1=2.103F;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(dArr, 0.128569);

        for (i2 = 304; i2 > 12; --i2) {
            for (i4 = 1; i4 < 6; ++i4) {
                b = b;
                lArr[i4 + 1] = i3;
                for (i6 = i2; i6 < 2; ++i6) {
                    i5 *= (int)((Test.instanceCount - (--i7)) * iMeth(Test.instanceCount));
                    Test.instanceCount += i6;
                    if (b) break;
                    i5 += (i6 + Test.instanceCount);
                    switch ((i6 % 2) + 70) {
                    case 70:
                        i1 += i6;
                        i3 = i4;
                        f1 = -109.763F;
                        Test.instanceCount -= 10;
                        break;
                    case 71:
                        dArr[i4] -= l;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += l + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(short s) {

        int i14=-233, i15=166, i16=32099, i17=181, i18=-152, iArr1[]=new int[N];
        boolean b1=true;
        float f2=0.484F, fArr[]=new float[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, -56);
        FuzzerUtils.init(dArr1, -1.53892);
        FuzzerUtils.init(fArr, -1.315F);

        vMeth1(-156L, i14);
        i14 *= 16655;
        i15 = 1;
        do {
            Test.instanceCount += (long)(-1.542F + (i15 * i15));
            i14 = i14;
            iArr1[i15 - 1] *= i14;
            dArr1[i15 + 1] += 21509;
        } while (++i15 < 218);
        Test.instanceCount -= i14;
        i16 = 1;
        while (++i16 < 294) {
            for (i17 = 1; i17 < 6; i17++) {
                i18 *= 2;
                fArr = fArr;
                i14 = i14;
                if (b1) break;
                f2 += (22579 + (i17 * i17));
            }
        }
        vMeth_check_sum += s + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f=41.103F, fArr1[]=new float[N];
        int i=-56475, i19=-7, i20=-250, i21=4, i22=1, i23=5, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -56913);
        FuzzerUtils.init(lArr1, -114L);
        FuzzerUtils.init(fArr1, 0.80F);

        f /= (((i += (i = i)) >> (i--)) | 1);
        vMeth(sFld);
        i = (int)f;
        iArr2 = iArr2;
        f = Test.instanceCount;
        for (i19 = 6; i19 < 167; i19++) {
            i21 = 1;
            do {
                switch ((((i20 >>> 1) % 8) * 5) + 33) {
                case 50:
                    lArr1[i21 - 1] = (long)f;
                    i = i20;
                    bFld = false;
                    break;
                case 35:
                    i20 += i;
                    i20 += i21;
                    i += (i21 * i21);
                    break;
                case 42:
                    i = i19;
                    Test.instanceCount += i20;
                    break;
                case 34:
                    fArr1[i19 + 1] -= i19;
                    if (bFld) continue;
                    i <<= i19;
                    break;
                case 39:
                    for (i22 = 1; 1 > i22; ++i22) {
                        i -= (int)dFld;
                        Test.instanceCount *= i23;
                        i20 = i21;
                        i = (int)1.17988;
                        i23 >>= i20;
                        i20 = (int)dFld;
                        i20 -= (int)f;
                    }
                    i20 += -236;
                    i23 += sFld;
                    break;
                case 72:
                    i >>= (int)1L;
                    break;
                case 63:
                case 48:
                    i += (((i21 * i23) + i20) - i23);
                    break;
                }
            } while (++i21 < 156);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
