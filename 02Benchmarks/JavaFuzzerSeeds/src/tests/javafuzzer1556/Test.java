package tests.javafuzzer1556;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:54:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6184363849625428756L;
    public volatile int iFld=40;
    public boolean bFld=false;
    public short sFld=-2488;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i9=55179;
        float f2=1.84F;

        i9 += i9;
        f2 = 304;
        long meth_res = i9 + Float.floatToIntBits(f2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6) {

        int i7=12, i8=-41767, i10=-14, i11=47555, i12=-3586, i13=-240, iArr2[]=new int[N];
        double d2=2.83554;
        float f3=2.54F, fArr[]=new float[N];
        byte by=-17;
        short s=-26367;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 0.673F);
        FuzzerUtils.init(lArr, -10L);
        FuzzerUtils.init(iArr2, 18650);

        for (i7 = 7; i7 < 327; ++i7) {
            Test.instanceCount = (long)(((-18153 - (i8 + i8)) - (-iMeth1())) + d2);
            i6 = i6;
            fArr[i7] *= i8;
            i8 = i8;
        }
        for (f3 = 20; f3 < 343; f3++) {
            for (i11 = 1; 5 > i11; i11++) {
                Test.instanceCount *= i6;
                i13 = 1;
                do {
                    i8 = i10;
                } while (++i13 < 2);
                switch (((14027 >>> 1) % 1) + 30) {
                case 30:
                    lArr[(int)(f3)][(int)(f3 + 1)] += by;
                    break;
                default:
                    s = (short)i7;
                    iArr2[(int)(f3)] <<= i6;
                }
                lArr[(int)(f3)][i11] += i7;
            }
        }
        long meth_res = i6 + i7 + i8 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i10 + i11 + i12 + i13 +
            by + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, double d1, int i3) {

        int i4=-12, i5=165, i14=160, i15=-12, i16=-11, i17=9475, i18=-9, i19=-4, i20=-12, iArr1[][]=new int[N][N];
        float f=0.100F;
        boolean b=false, bArr[]=new boolean[N];
        double d3=-51.106023;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 42);
        FuzzerUtils.init(byArr, (byte)115);
        FuzzerUtils.init(bArr, false);

        i4 = 1;
        while (++i4 < 183) {
            for (f = 1; f < 9; ++f) {
                float f1=0.22F;
                f1 *= i5;
                iArr1[(int)(f + 1)][(int)(f)] -= ((iMeth(i5) * -225) * i5);
                f1 = i5;
                i3 >>= i4;
            }
        }
        for (i14 = 191; i14 > 9; i14 -= 3) {
            for (i16 = 1; i16 < 26; i16++) {
                Test.instanceCount += (i16 * i16);
                byArr[i14 - 1] -= (byte)-1;
                bArr[i16 + 1] = b;
            }
            for (d3 = 1; d3 < 26; d3++) {
                for (i19 = 1; 2 > i19; i19++) {
                    d1 -= Test.instanceCount;
                    bArr[i14] = b;
                }
            }
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + i3 + i4 + Float.floatToIntBits(f) + i5 + i14 + i15 + i16
            + i17 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        double d=22.120907;
        int i=-115, i1=-12, i21=-206, i22=-23087, i23=-3, i24=-4, i25=8, i26=13, i27=-19669, i28=0, i29=227, i30=217,
            i31=4, i32=-16093, iArr[]=new int[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr, 730);
        FuzzerUtils.init(bArr1, true);

        iArr[(iFld >>> 1) % N] >>>= (int)(-10691 * (Test.instanceCount -= (13808 + (iFld + iFld))));
        d -= (iArr[(iFld >>> 1) % N]--);
        for (i = 2; i < 196; i++) {
            iFld = i1;
        }
        vMeth(iFld, d, iFld);
        switch (((i >>> 1) % 1) + 54) {
        case 54:
            for (i21 = 4; i21 < 292; ++i21) {
                for (i23 = 3; i23 < 87; ++i23) {
                    for (i25 = 1; i25 < 2; i25++) {
                        d -= Test.instanceCount;
                    }
                    i1 *= (int)d;
                    for (i27 = 2; i27 > 1; --i27) {
                        i24 >>= i26;
                        Test.lArrFld[i23 - 1] = -2734366754L;
                        i24 -= 114;
                    }
                    bArr1[i21] = bFld;
                    for (i29 = 2; i29 > 1; i29--) {
                        Test.instanceCount -= Test.instanceCount;
                        bFld = true;
                        d -= -35071;
                        if (bFld) break;
                        Test.instanceCount += (i29 + i27);
                        bFld = bFld;
                    }
                    i28 -= i30;
                    for (i31 = 1; i31 < 2; ++i31) {
                        Test.instanceCount = i23;
                        Test.instanceCount += i31;
                        d += i24;
                        d *= sFld;
                        iFld -= (int)Test.instanceCount;
                    }
                }
            }
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
