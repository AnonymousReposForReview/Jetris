package tests.javafuzzer1970;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:54:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static boolean bFld=false;
    public static double dFld=0.122944;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -757152923698983632L);
        FuzzerUtils.init(Test.dArrFld, -32.45661);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long byMeth1_check_sum = 0;

    public static byte byMeth1(int i3, int i4, int i5) {

        int i6=-45286, i7=-2, i8=21828, i9=7494, i10=3, iArr1[]=new int[N];
        double d=-61.8967;
        float f=0.759F;

        FuzzerUtils.init(iArr1, -138);

        iArr1[(-24897 >>> 1) % N] = 3;
        i4 = i3;
        for (i6 = 2; i6 < 128; ++i6) {
            i3 += (((i6 * Test.instanceCount) + Test.instanceCount) - i6);
            i7 += i6;
            i8 = 1;
            while (++i8 < 12) {
                for (i9 = 1; i9 < 1; ++i9) {
                    i4 += i9;
                    i7 %= (int)((long)(d) | 1);
                    if (i9 != 0) {
                    }
                    f *= i4;
                }
            }
        }
        i4 += i6;
        i4 <<= i3;
        i3 <<= i10;
        iArr1[(14 >>> 1) % N] *= i7;
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1);
        byMeth1_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static byte byMeth() {

        int i2=-5382, i12=-7, i13=151, i14=1693, i15=-155, i16=93, i17=-13798, iArr[]=new int[N];
        float f1=0.616F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr, 18.573F);

        Test.lArrFld[(i2 >>> 1) % N] = (((Test.instanceCount >>> i2) - (iArr[(-24441 >>> 1) % N]++)) | byMeth1(13, i2,
            37722));
        for (i12 = 2; i12 < 124; i12++) {
            Test.dArrFld[i12] += Test.instanceCount;
            Test.lArrFld[i12 - 1] = i2;
            i13 += (((i12 * Test.instanceCount) + i12) - i2);
            Test.instanceCount += (i12 * i12);
            i13 = i12;
            i13 = i12;
            for (i14 = 1; i14 < 13; i14++) {
                for (i16 = 1; 2 > i16; ++i16) {
                    fArr[i16] -= f1;
                    i13 *= i16;
                    if (Test.bFld) continue;
                }
                Test.instanceCount *= Test.instanceCount;
                i17 -= i17;
            }
        }
        long meth_res = i2 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i, int i1, long l) {

        int i18=-6, i19=11, i20=7;
        short s=-7312;

        i -= (int)((byMeth() - i1) + l);
        Test.dArrFld = FuzzerUtils.double1array(N, (double)5.37253);
        i >>= 16993;
        i18 = 1;
        do {
            i19 = 1;
            while (++i19 < 4) {
                if (true) {
                    s += (short)i1;
                    Test.dFld -= 36.26088;
                    i20 = 1;
                    while (++i20 < 1) {
                        i1 *= -9;
                        i *= (int)-1.188F;
                        l += (((i20 * i18) + i18) - i);
                        l = (long)2.420F;
                        i += (int)1.44126;
                        i1 = i19;
                    }
                } else if (Test.bFld) {
                    if (Test.bFld) break;
                    vMeth_check_sum += i + i1 + l + i18 + i19 + s + i20;
                    return;
                }
            }
        } while (++i18 < 387);
        vMeth_check_sum += i + i1 + l + i18 + i19 + s + i20;
    }

    public void mainTest(String[] strArr1) {

        int i21=5, i22=127, i23=5, i24=-7, i25=-24068, i26=-31, i27=185, i28=32406;
        short s1=24145;
        float f2=1.961F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7956951220959677965L);

        vMeth(19, i21, Test.instanceCount);
        for (i22 = 6; 333 > i22; ++i22) {
            for (i24 = 77; i24 > 3; i24--) {
                Test.instanceCount = (long)1.90F;
                s1 -= (short)i21;
                i25 >>= i21;
                iArrFld[i22] += i23;
            }
            i23 += (((i22 * i25) + s1) - Test.instanceCount);
            i25 += (int)86.840F;
            switch ((((i21 >>> 1) % 4) * 5) + 98) {
            case 108:
                Test.bFld = Test.bFld;
                for (i26 = 4; i26 < 77; i26++) {
                    f2 += -13L;
                    i27 -= i22;
                    i28 = 1;
                    do {
                        iArrFld[i22 - 1] = (int)Test.dFld;
                        i27 = (int)f2;
                        Test.instanceCount -= i27;
                        switch (((i26 % 4) * 5) + 46) {
                        case 61:
                        case 48:
                            switch (((i25 >>> 1) % 4) + 75) {
                            case 75:
                                iArrFld[i26 + 1] = (int)Test.instanceCount;
                                i25 += 102;
                                break;
                            case 76:
                                Test.instanceCount &= i21;
                                lArr[i22 - 1] <<= i28;
                                f2 += (i28 - Test.instanceCount);
                                iArrFld[i26 - 1] = (int)Test.instanceCount;
                            case 77:
                            case 78:
                                iArrFld[i28 + 1] = i26;
                            default:
                                i23 += i21;
                                iArrFld[i28 + 1] <<= i25;
                                i25 += (i28 * i28);
                            }
                            break;
                        case 54:
                            try {
                                i25 = (i25 % i23);
                                i23 = (-45411 % i23);
                                i21 = (i28 / 247);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 57:
                            lArr[i26 - 1] += i21;
                        }
                    } while (++i28 < 2);
                }
                break;
            case 112:
                if (Test.bFld) continue;
                break;
            case 109:
                i23 ^= 11;
                break;
            case 101:
                try {
                    i25 = (-15189 / i22);
                    i27 = (91 % i28);
                    i27 = (i25 % i26);
                } catch (ArithmeticException a_e) {}
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  byMeth1 ->  byMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
