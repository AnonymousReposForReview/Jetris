package tests.javafuzzer3439;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:22:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2565613421948817014L;
    public int iFld=19835;
    public byte byFld=6;
    public static float fFld=1.631F;
    public static boolean bFld=true;
    public short sFld=-16106;
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.111820);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, int i5) {

        int i7=-238, i8=9, iArr[]=new int[N];
        double d=-1.63367;
        short s=-990;

        FuzzerUtils.init(iArr, -10);

        iArr[(i4 >>> 1) % N] = (int)Test.instanceCount;
        i4 = (int)Test.instanceCount;
        for (int i6 : iArr) {
            for (i7 = 1; 4 > i7; ++i7) {
                Test.bFld = Test.bFld;
                Test.instanceCount *= (long)Test.fFld;
                i4 += (i7 | i7);
                iArr[i7 + 1] += i8;
                i5 -= i5;
                d += i4;
                i5 -= i8;
                i5 += s;
                i4 = i4;
            }
            Test.instanceCount = i7;
            if (i5 != 0) {
            }
        }
        long meth_res = i4 + i5 + i7 + i8 + Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public float fMeth(int i3) {

        int i9=24, i10=-10, i11=-18167, i12=25184, i14=8969, i15=-22910, i16=-208, iArr1[]=new int[N];
        double d1=-2.13383;
        long l=-3687879749L, lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -32);
        FuzzerUtils.init(lArr, -819486684L);

        i3 <<= (byFld * Math.max((int)(Test.fFld * 18651), iMeth(iFld, 6)));
        for (i9 = 11; i9 < 186; ++i9) {
            for (i11 = i9; i11 < 9; i11++) {
                d1 = -2.623F;
            }
            Test.instanceCount = 95;
            Test.instanceCount -= i12;
            i12 += 15599;
            iArr1[i9] -= i11;
        }
        for (i14 = 7; i14 < 262; i14++) {
            Test.instanceCount >>= Test.instanceCount;
            for (l = 1; l < 6; ++l) {
                Test.fFld -= 58583;
                Test.dArrFld = FuzzerUtils.double1array(N, (double)-82.70480);
                lArr[(int)(l)] = i3;
                Test.instanceCount = l;
            }
        }
        long meth_res = i3 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i14 + i15 + l + i16 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i1, int i2) {


        Test.fFld -= (i1 = (int)fMeth(21765));
        i2 = iFld;
        vMeth_check_sum += i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i=78, i17=-9, i18=2989, i19=-16038, i20=-18705;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 64.172F);

        iFld -= (iFld * (byFld--));
        i = 1;
        while (++i < 346) {
            iFld += iFld;
            iFld += i;
            vMeth(iFld, i);
            if (Test.bFld) break;
            sFld = (short)8;
            for (i17 = 2; i17 < 73; i17++) {
                fArr[i - 1] *= -3L;
            }
            iFld = iFld;
            iFld = i;
        }
        iFld += (int)Test.instanceCount;
        for (i19 = 11; i19 < 315; i19++) {
            i20 = i19;
            iFld <<= 12;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
