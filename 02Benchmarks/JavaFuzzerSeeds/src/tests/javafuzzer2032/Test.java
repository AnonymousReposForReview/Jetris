package tests.javafuzzer2032;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=63977L;
    public static double dFld=0.130049;
    public static float fFld=-19.110F;
    public short sFld=-22311;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7156);
        FuzzerUtils.init(Test.iArrFld1, -10933);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10) {

        int i11=-11, i12=9, i13=-58466, i14=1, i15=-171, i16=-6, i17=46772, iArr1[][]=new int[N][N];
        double d=0.76697;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.783F);
        FuzzerUtils.init(iArr1, 52600);

        for (i11 = 3; i11 < 205; i11++) {
            i13 = 1;
            do {
                i12 = 61421;
                Test.dFld = -202;
                fArr[i11] *= i14;
                Test.fFld += (((i13 * i12) + i14) - i13);
                i14 <<= i14;
                iArr1[i13 - 1] = iArr1[i13 + 1];
            } while (++i13 < 8);
            for (i15 = 1; 8 > i15; ++i15) {
                i10 = 14;
                Test.instanceCount = i16;
                for (d = 1; d < 2; d++) {
                    try {
                        i17 = (i16 / i12);
                        iArr1[(int)(d)][i15 - 1] = (189 % i15);
                        iArr1[(int)(d - 1)][i15] = (i14 % -29537);
                    } catch (ArithmeticException a_e) {}
                    Test.dFld *= i10;
                    i12 *= i12;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i6) {

        int i7=-30592, i8=-45637, i18=-45867, i19=0, i20=-20028, iArr[]=new int[N];
        double d1=-55.12071;

        FuzzerUtils.init(iArr, -1);

        i7 = 1;
        do {
            iArr[i7] -= (int)(Test.instanceCount--);
            i8 = 10;
            do {
                i6 += (i6++);
            } while ((i8 -= 3) > 0);
            i6 &= 8;
            iArr[i7] += Math.max(i6 <<= i7, -1);
            i6 -= iMeth(i6);
        } while (++i7 < 151);
        i6 -= i6;
        i6 = (int)Test.instanceCount;
        i18 = 298;
        do {
            i6 = i8;
            d1 = 1;
            do {
                for (i19 = (int)(d1); i19 < 1; ++i19) {
                    i20 = (int)Test.instanceCount;
                    i6 *= i8;
                }
            } while (++d1 < 6);
        } while (--i18 > 0);
        vMeth_check_sum += i6 + i7 + i8 + i18 + Double.doubleToLongBits(d1) + i19 + i20 + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i21=148, i22=-3, i23=-197, i24=-111, i25=129, i26=-115;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.66397);

        vMeth(i21);
        i21 = i21;
        i21 += i21;
        i22 = 1;
        while (++i22 < 308) {
            dArr[(i22 >>> 1) % N] = i22;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)31995);
            Test.iArrFld[i22] >>= (int)Test.instanceCount;
            for (i23 = 1; i23 < 5; i23++) {
                i21 += (int)Test.instanceCount;
                Test.iArrFld[i23] >>>= i24;
                for (i25 = 2; i23 < i25; --i25) {
                    Test.iArrFld[i22] += -11;
                    i21 >>>= (int)Test.instanceCount;
                    Test.instanceCount += (i25 * i25);
                    i24 += (((i25 * i25) + i24) - Test.instanceCount);
                }
            }
        }
        long meth_res = i21 + i22 + i23 + i24 + i25 + i26 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=36634, i1=-45028, i2=-195, i3=-26397, i4=-59209, i5=215, i27=13, i28=6, i29=7, i30=-8718;
        float f=-2.1022F;
        byte by=57;

        i = 1;
        do {
            i1 += (((i * i) + Test.instanceCount) - Test.instanceCount);
            for (i2 = i; i2 < 67; ++i2) {
                for (i4 = 1; i4 < 1; i4 += 3) {
                    f = lMeth();
                    i1 = -7;
                    Test.instanceCount >>>= i1;
                    Test.instanceCount = i2;
                    i1 = -5;
                }
                i27 = 1;
                while (--i27 > 0) {
                    Test.instanceCount = i3;
                    by += (byte)(((i27 * i27) + i) - f);
                    Test.iArrFld[i] *= i1;
                    i3 *= (int)Test.dFld;
                    Test.fFld += Test.instanceCount;
                    Test.fFld += sFld;
                    i3 ^= sFld;
                }
                i3 -= i5;
                i1 = i27;
                i3 = -154;
                i1 += i2;
                try {
                    Test.iArrFld[i2 - 1] = (i5 % i2);
                    i5 = (-412285185 % i27);
                    Test.iArrFld1[i2 + 1] = (i4 / i1);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i < 374);
        for (i28 = 2; 367 > i28; ++i28) {
            i5 = (int)Test.instanceCount;
            sFld *= (short)i3;
            Test.instanceCount ^= Test.instanceCount;
            Test.dFld -= i1;
            try {
                Test.iArrFld1[i28 + 1] = (5690 / i5);
                i29 = (i / i1);
                i3 = (i30 / -7);
            } catch (ArithmeticException a_e) {}
        }
        Test.instanceCount = i4;
        i1 = (int)1.119587;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
