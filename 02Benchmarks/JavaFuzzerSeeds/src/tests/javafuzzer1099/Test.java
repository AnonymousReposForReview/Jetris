package tests.javafuzzer1099;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:31:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1779761073L;
    public static boolean bFld=false;
    public float fFld=0.125F;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i2, int i3, long l) {

        int i4=-210, i5=55779, i6=144, i7=63662, i8=18664, iArr1[]=new int[N];
        short s=10987;
        float f1=-126.391F, f2=-92.678F;
        boolean b=false;
        byte by1=-62;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 43398L);
        FuzzerUtils.init(iArr1, 2);

        i2 += i2;
        i3 = (int)Test.instanceCount;
        for (i4 = 333; i4 > 11; i4 -= 3) {
            l *= s;
            f1 -= i3;
        }
        for (long l1 : lArr1) {
            i2 = i4;
            i3 -= (int)Test.instanceCount;
            for (f2 = 1; 4 > f2; ++f2) {
                i5 = i5;
                for (i7 = 1; i7 < 2; i7++) {
                    if (b) {
                        i5 += (i7 - l1);
                    } else {
                        iArr1[(int)(f2)] ^= by1;
                        i6 = -9;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + l + i4 + i5 + s + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i6 + i7 + i8
            + (b ? 1 : 0) + by1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i1) {

        int i9=214, i10=-1295, i11=24, i12=-14, i13=0, i14=-37981;
        float f3=1.419F, f4=-1.360F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -108.785F);

        i1 *= i1;
        i1 = (i1 = sMeth(i1, i1, Test.instanceCount));
        i9 = 1;
        do {
            for (i10 = 1; i10 < 4; ++i10) {
                Test.instanceCount <<= 6;
                Test.instanceCount >>= i11;
                for (i12 = 1; i12 < 2; ++i12) {
                    Test.instanceCount >>= 41654;
                    f3 -= i13;
                    fArr[i12 + 1] = i10;
                    Test.instanceCount += i13;
                }
                for (f4 = i9; 2 > f4; f4++) {
                    i11 += (int)Test.instanceCount;
                    if (Test.bFld) continue;
                }
            }
            f3 += i9;
        } while (++i9 < 394);
        long meth_res = i1 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f) {

        double d=0.75774;
        int i=-39962, i15=-23082, i16=-6, i17=-4, i18=-30591, i19=-134, i20=-64918, iArr[]=new int[N];
        byte by=23;
        float f5=2.201F;

        FuzzerUtils.init(iArr, 7);

        d = (--i);
        iArr[(i >>> 1) % N] |= ((i -= (i + i)) | by);
        Test.instanceCount -= iMeth1(i);
        i *= (int)Test.instanceCount;
        for (i15 = 8; i15 < 155; ++i15) {
            i16 = 37588;
            for (i17 = i15; 11 > i17; i17++) {
                for (i19 = 1; i19 < 1; ++i19) {
                    i16 += (i19 * Test.instanceCount);
                    Test.instanceCount = Test.instanceCount;
                    iArr[i15 - 1] -= i16;
                    Test.instanceCount = Test.instanceCount;
                }
                if (Test.bFld) continue;
                i16 += (((i17 * f5) + i19) - Test.instanceCount);
                d -= 2.0F;
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i + by + i15 + i16 + i17 + i18 + i19 +
            i20 + Float.floatToIntBits(f5) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=104, i22=14283, i23=13, i24=9, i25=11, i26=78, i27=46, i28=0, i29=3, i30=28631, i31=-14, i32=-53854,
            iArr2[]=new int[N];
        short s1=-19500;
        double d2=-2.106028;
        byte by2=-32;
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 20368L);
        FuzzerUtils.init(fArr1, 119.711F);
        FuzzerUtils.init(iArr2, 6771);

        lArr[(-1 >>> 1) % N] += ((iMeth(fFld) + -13) + Test.instanceCount);
        i21 = i21;
        Test.instanceCount -= (long)fFld;
        i21 += 6;
        i21 += 37547;
        fArr1 = fArr1;
        iArr2[(i21 >>> 1) % N] <<= -57170;
        for (i22 = 285; i22 > 5; i22 -= 2) {
            for (i24 = 4; i24 < 179; i24++) {
                i26 = 1;
                while (++i26 < 2) {
                    double d1=0.38488;
                    i21 = s1;
                    fFld = Test.instanceCount;
                    d1 *= i22;
                    iArr2[i26] = (int)d1;
                    i25 <<= i23;
                    Test.instanceCount = i24;
                }
                fArr1[i24] -= i25;
            }
            fFld += (i22 * i26);
            i23 *= i24;
            for (i27 = 3; i27 < 179; i27++) {
                fFld -= -53;
                for (i29 = 2; i29 > i22; --i29) {
                    Test.bFld = Test.bFld;
                    i30 >>= (int)-4015664517L;
                    iArr2[i29] = -8;
                    fFld += (float)d2;
                    i28 = i27;
                }
            }
            for (i31 = 7; i31 < 179; ++i31) {
                i25 -= by2;
            }
        }
        i28 = (int)-2.113790;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
