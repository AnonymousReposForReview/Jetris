package tests.javafuzzer2960;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:52:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2475733194L;
    public static int iFld=27;
    public static double dFld=-2.104675;
    public static float fFld=2.130F;
    public static int iFld1=-136;
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.lArrFld, 39144L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=-27378, i9=-36562, i10=-193;
        boolean b=true;
        float f2=-127.515F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 45.65566);

        try {
            i8 = 1;
            while ((i8 += 3) < 396) {
                dArr1 = dArr1;
                if (false) {
                    Test.instanceCount += (i8 - Test.iFld);
                    try {
                        Test.iFld = (-1393036605 / Test.iArrFld[i8 - 1]);
                        Test.iArrFld[i8 - 1] = (976754127 / Test.iFld);
                        Test.iFld = (157 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    for (i9 = 1; i9 < 12; i9++) {
                        b = b;
                        i10 += i9;
                        Test.instanceCount -= i10;
                        Test.dFld *= Test.instanceCount;
                        i10 = i10;
                    }
                } else if (b) {
                    i10 = (int)-632359760L;
                    if (false) continue;
                    i10 *= Test.iFld;
                } else {
                    Test.iFld += i8;
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.instanceCount = 8;
        }
        finally {
            f2 += i8;
        }
        long meth_res = i8 + i9 + i10 + (b ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f1, int i5) {

        int i6=33750, i7=73, i11=14, i12=12464;

        i6 = 370;
        do {
            Test.instanceCount += (2 + (i6 * i6));
            i7 = 1;
            while (++i7 < 5) {
                i5 = (int)Test.instanceCount;
                switch (((i7 % 2) * 5) + 2) {
                case 4:
                    Test.iFld >>= (int)Test.instanceCount;
                    iMeth1();
                    f1 = (float)-103.26719;
                    for (i11 = 1; i11 < 1; ++i11) {
                        f1 = (float)Test.dFld;
                        if (i12 != 0) {
                        }
                        i12 = (int)Test.instanceCount;
                        i5 += (int)Test.instanceCount;
                        Test.lArrFld[i11 - 1] >>= i12;
                    }
                    break;
                case 3:
                    i5 += (int)Test.instanceCount;
                    break;
                }
            }
        } while (--i6 > 0);
        long meth_res = Float.floatToIntBits(f1) + i5 + i6 + i7 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f3=1.250F, f4=-16.107F;
        int i13=-118, i14=-3, i15=41141, i16=189, i17=-123;
        short s=11667;
        byte by1=108;

        Test.iFld += Math.min(iMeth(f3, Test.iFld) ^ 57279, 0);
        for (i13 = 10; 374 > i13; ++i13) {
            i14 |= s;
            Test.iFld -= -88;
            Test.instanceCount = i13;
            Test.iFld += i14;
            for (i15 = 1; 5 > i15; ++i15) {
                Test.instanceCount += i16;
                Test.iArrFld = Test.iArrFld;
                for (f4 = 1; f4 < 2; f4++) {
                    long l=-85L;
                    i16 += (int)(((f4 * Test.instanceCount) + i16) - i13);
                    by1 = (byte)i14;
                    Test.iFld |= i16;
                    Test.iArrFld[i13 + 1] &= (int)Test.instanceCount;
                    i17 = (int)l;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f3) + i13 + i14 + s + i15 + i16 + Float.floatToIntBits(f4) + i17 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i=116, i1=-41145, i2=8, i3=-2851, i4=213, i18=-24771, i19=-142, i20=2141, i21=-59224, i22=23374, iArr[]=new
            int[N];
        float f=1.774F;
        byte by=14;
        short s1=-1968;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(dArr, 0.76776);

        Test.iFld = (int)lArr[(Test.iFld >>> 1) % N];
        i = 1;
        while ((i += 3) < 226) {
            Test.dFld -= Math.max(47075, i);
        }
        for (i1 = 325; i1 > 2; --i1) {
            iArr[i1] = (int)(((--Test.instanceCount) - (-160 + byArrFld[i1])) - ((i - i2) % (((long)(--f)) | 1)));
        }
        for (i3 = 9; 250 > i3; i3++) {
            dArr[i3 - 1] *= (-Integer.reverseBytes((int)(Test.instanceCount - by)));
            vMeth();
            i2 *= Test.iFld;
            for (i18 = i3; i18 < 104; ++i18) {
                f += (((i18 * i3) + i1) - Test.fFld);
                s1 = (short)i1;
                Test.fFld -= i4;
                Test.instanceCount *= i4;
                Test.iFld1 <<= (int)Test.instanceCount;
            }
            i19 = i4;
            i20 = 1;
            while (++i20 < 104) {
                lArr[i20 - 1] = Test.instanceCount;
                iArr[i3 + 1] = i18;
                Test.iFld1 *= (int)Test.instanceCount;
                f -= Test.iFld;
            }
            Test.instanceCount += i1;
            i19 >>>= i19;
        }
        for (i21 = 13; i21 < 279; i21++) {
            Test.iFld1 += (i21 * i21);
            Test.iFld1 += 59332;
            i2 += (i21 - i3);
        }
        by = (byte)Test.iFld;
        iArr[(Test.iFld1 >>> 1) % N] >>>= by;
        by &= (byte)12;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
