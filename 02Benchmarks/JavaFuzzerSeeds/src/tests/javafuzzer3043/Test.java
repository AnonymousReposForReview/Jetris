package tests.javafuzzer3043;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:13:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=55815L;
    public static double dFld=100.119477;
    public static volatile int iFld=-1955;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -70.96837);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i9=-3, i10=10, i11=-49117, iArr1[]=new int[N];
        long l1=8641497143466023374L;
        float f2=-12.988F;
        short s3=-4035;
        boolean b=true;

        FuzzerUtils.init(iArr1, -153);

        i9 &= 41546;
        i10 = 1;
        do {
            i9 += i10;
            for (l1 = i10; 8 > l1; ++l1) {
                i11 += (int)(((l1 * i11) + i11) - i11);
                f2 *= s3;
                iArr1[(int)(l1)] |= -16212;
                if (b) {
                    i11 = i9;
                    iArr1[i10] = i9;
                    i9 = i9;
                    i11 = (int)f2;
                } else if (false) {
                    i9 *= 2;
                } else {
                    i9 += (int)(l1 * l1);
                    i9 = (int)l1;
                }
            }
        } while (++i10 < 192);
        long meth_res = i9 + i10 + l1 + i11 + Float.floatToIntBits(f2) + s3 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s2) {

        int i6=6, i7=55, i8=-148, iArr2[]=new int[N];
        boolean b2=false;
        byte by1=-36;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(iArr2, 23307);
        FuzzerUtils.init(fArr, 112.563F);

        for (long l : lArr) {
            switch (((((int)(-5 - (i6 * l))) >>> 1) % 8) + 80) {
            case 80:
                for (i7 = 1; i7 < 4; i7 += 2) {
                    boolean b1=true;
                    iMeth1();
                    i8 = (int)Test.instanceCount;
                    if (b1) continue;
                    i8 += (38829 + (i7 * i7));
                    lArr[i7 + 1] += i8;
                }
                iArr2 = FuzzerUtils.int1array(N, (int)-58414);
                break;
            case 81:
                i8 = i7;
                iArr2[(i8 >>> 1) % N] = i8;
                break;
            case 82:
                if (b2) continue;
                i8 = i7;
                l <<= by1;
                break;
            case 83:
                by1 &= (byte)i7;
            case 84:
                i6 -= 32;
                break;
            case 85:
                Test.instanceCount -= Test.iFld;
                break;
            case 86:
                b2 = b2;
                break;
            case 87:
                l = by1;
                break;
            }
        }
        vMeth_check_sum += s2 + i6 + i7 + i8 + (b2 ? 1 : 0) + by1 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth(short s1) {

        int i3=55718, i4=59, i5=70, i12=-45234, i13=-15, i14=12, i15=-60916;
        float f=-1.798F, f1=-2.733F;
        boolean b3=true;

        Test.dFld = (Test.dFld = s1);
        Test.instanceCount = (0L + (Test.instanceCount--));
        i3 = (int)(((long)(f + -2.334F) >>> i3) - (i3++));
        for (f1 = 305; f1 > 9; f1 -= 2) {
            i5 = 1;
            while (++i5 < 11) {
                vMeth((short)(-7272));
            }
            for (i12 = 1; i12 < 11; i12 += 2) {
                for (i14 = 1; i14 < 3; ++i14) {
                    i15 = i4;
                    if (b3) {
                        Test.dFld -= i5;
                        f += i14;
                    } else if (b3) {
                        Test.dFld = -104L;
                        Test.dFld -= -68L;
                    }
                    if (true) continue;
                }
            }
        }
        long meth_res = s1 + i3 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i4 + i5 + i12 + i13 + i14 + i15
            + (b3 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=46, i1=34717, i2=48, iArr[][]=new int[N][N];
        byte by=61;
        short s=-20329;

        FuzzerUtils.init(iArr, 6);

        i -= (i <<= (by - (s / 175)));
        for (i1 = 11; i1 < 391; i1++) {
            i += (((i1 * Test.instanceCount) + s) - Test.instanceCount);
        }
        iArr[(i >>> 1) % N][(i >>> 1) % N] -= Math.abs(iMeth(s));
        iArr[(i >>> 1) % N] = iArr[(52 >>> 1) % N];
        Test.dArrFld[(i2 >>> 1) % N] -= 36.740F;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
