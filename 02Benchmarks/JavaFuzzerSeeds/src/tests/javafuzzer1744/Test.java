package tests.javafuzzer1744;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:59:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=519305319L;
    public static volatile byte byFld1=-67;
    public static short sFld1=-5965;
    public boolean bFld=true;
    public double dFld=-63.42958;
    public long lArrFld1[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.sArrFld, (short)6834);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l2, int i11, int i12) {

        long l3=12L;
        int i13=71, i14=11, iArr1[]=new int[N];
        double d1=-2.46798;
        float f2=-60.900F, fArr[]=new float[N];
        short s1=13985;

        FuzzerUtils.init(iArr1, -52861);
        FuzzerUtils.init(fArr, 0.629F);

        for (l3 = 2; l3 < 169; l3++) {
            switch ((int)((l3 % 4) + 33)) {
            case 33:
                i11 = (int)-2489848224L;
                break;
            case 34:
                Test.instanceCount -= i13;
            case 35:
                i12 = i12;
                d1 = f2;
                Test.instanceCount = i12;
                i14 = 1;
                while (++i14 < 9) {
                    switch ((((i14 >>> 1) % 1) * 5) + 99) {
                    case 101:
                        switch (((i14 % 8) * 5) + 34) {
                        case 59:
                            i11 += (((i14 * i14) + Test.instanceCount) - f2);
                            l2 += (9 + (i14 * i14));
                            f2 += i14;
                            iArr1 = iArr1;
                            break;
                        case 57:
                            d1 -= f2;
                            break;
                        case 70:
                            Test.instanceCount += i13;
                            break;
                        case 53:
                            Test.byFld1 *= (byte)-224L;
                        case 46:
                            i11 = (int)l2;
                        case 66:
                            i13 = i11;
                            break;
                        case 68:
                            fArr[i14 + 1] = i12;
                        case 74:
                        default:
                            iArr1[i14 + 1] = i11;
                        }
                        break;
                    default:
                        i12 >>= 55366;
                    }
                }
                break;
            case 36:
                l2 += (long)41.330F;
                break;
            default:
                s1 *= (short)i14;
            }
        }
        vMeth2_check_sum += l2 + i11 + i12 + l3 + i13 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i14 +
            s1 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d) {

        int i15=94;

        vMeth2(Test.instanceCount, i15, i15);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i15;
    }

    public static void vMeth(int i7, int i8, long l1) {

        int i9=221, i10=-17134, i16=-189, i17=-251;
        double d2=1.67944;
        float f3=9.62F, fArr1[]=new float[N];
        boolean b=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr1, -37.335F);
        FuzzerUtils.init(byArr, (byte)-27);

        for (i9 = 5; i9 < 171; i9++) {
            vMeth1(d2);
            Test.iArrFld[i9 + 1] = i9;
            i8 += (i9 - Test.instanceCount);
            f3 -= i8;
            for (i16 = 1; i16 < 10; ++i16) {
                i7 = i9;
                i7 *= (int)Test.instanceCount;
                Test.sFld1 = (short)i16;
                d2 = i17;
                fArr1[i16 - 1] *= i8;
                if (b) {
                } else if (b) {
                    i10 -= (int)Test.instanceCount;
                    Test.instanceCount += (i16 * i16);
                    vMeth_check_sum += i7 + i8 + l1 + i9 + i10 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3)
                        + i16 + i17 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                } else {
                    byArr[i16 - 1] = (byte)99.479F;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + l1 + i9 + i10 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i16 + i17
            + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr3) {

        int i5=-1, i6=-2, i18=-81, i19=-176, i20=6, i21=-126, i22=-88, i23=-202, i24=1;
        float f1=-2.81F;

        for (i5 = 13; i5 < 233; ++i5) {
            Test.byFld1 *= (byte)(++lArrFld1[i5]);
            f1 += i5;
            switch ((i5 % 10) + 20) {
            case 20:
                vMeth(i6, 2690, Test.instanceCount);
                break;
            case 21:
                Test.iArrFld[i5] *= i5;
                i6 >>= i6;
                i6 = (int)Test.instanceCount;
                break;
            case 22:
                f1 = i6;
                for (i18 = 4; i18 < 114; i18++) {
                    i20 = 1;
                    while (++i20 < 2) {
                        Test.sFld1 /= (short)(Test.instanceCount | 1);
                        try {
                            i19 = (i5 / -174);
                            i6 = (i5 % i5);
                            Test.iArrFld[i5] = (-143 / i6);
                        } catch (ArithmeticException a_e) {}
                        Test.sArrFld[i20 + 1] += (short)i6;
                        i6 += (i20 ^ Test.instanceCount);
                    }
                }
                if (bFld) break;
                i6 += (i5 ^ Test.instanceCount);
                break;
            case 23:
                switch ((i5 % 2) + 40) {
                case 40:
                    if (bFld) {
                        Test.sFld1 += Test.sFld1;
                        for (i21 = 3; i21 < 114; i21 += 3) {
                            dFld = i21;
                            Test.sFld1 = (short)dFld;
                            i23 = 1;
                            while (++i23 < 4) {
                                dFld = i18;
                                Test.iArrFld[i5 + 1] = (int)Test.instanceCount;
                                i19 <<= 15034;
                                Test.instanceCount = (long)f1;
                                Test.byFld1 += (byte)(i23 - i22);
                                i19 -= (int)Test.instanceCount;
                            }
                        }
                    } else if (false) {
                        byArrFld[i5] = (byte)Test.instanceCount;
                    } else if (bFld) {
                        i19 = i21;
                    }
                    break;
                case 41:
                    Test.iArrFld[i5 + 1] = i20;
                    break;
                }
                break;
            case 24:
                i19 |= -209;
            case 25:
                if (bFld) continue;
                break;
            case 26:
                bFld = bFld;
            case 27:
                Test.sFld1 -= (short)Test.instanceCount;
                break;
            case 28:
                f1 = i24;
                break;
            case 29:
                Test.instanceCount = -4;
            default:
                Test.instanceCount += 238363768L;
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
