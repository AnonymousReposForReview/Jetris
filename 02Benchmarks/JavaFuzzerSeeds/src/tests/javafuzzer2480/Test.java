package tests.javafuzzer2480;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:22:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=232L;
    public static boolean bFld=true;
    public static long lFld=12L;
    public static short sFld=-16293;
    public volatile int iFld=-30417;
    public float fFld=-49.228F;
    public volatile double dFld=0.64659;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 62611);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, long l1, int i4) {

        int i5=48303;
        double d1=0.31289;
        boolean b1=true;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)30702);
        FuzzerUtils.init(lArr, 60L);

        Test.iArrFld[(i4 >>> 1) % N] -= (int)Test.instanceCount;
        for (short s : sArr) {
            float f1=96.807F;
            if (b1) {
                if (i3 != 0) {
                    vMeth_check_sum += i3 + l1 + i4 + i5 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i5 = 1;
                do {
                    i4 *= i5;
                    Test.instanceCount += (((i5 * i5) + i4) - i3);
                    Test.instanceCount += i5;
                    Test.iArrFld[i5] -= -2;
                } while (++i5 < 4);
                f1 -= Test.instanceCount;
                if (b1) {
                    Test.iArrFld[(i5 >>> 1) % N] = i4;
                    lArr = lArr;
                    d1 -= i5;
                    i4 *= (int)f1;
                } else if (b1) {
                    Test.iArrFld[(-13 >>> 1) % N] = (int)f1;
                } else {
                    if (i3 != 0) {
                        vMeth_check_sum += i3 + l1 + i4 + i5 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) +
                            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                }
            } else if (b1) {
                i3 = (int)Test.instanceCount;
            } else if (false) {
                i4 = i5;
            } else {
                lArr[(i5 >>> 1) % N] = i4;
            }
        }
        vMeth_check_sum += i3 + l1 + i4 + i5 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(sArr)
            + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(int i2, float f, long l) {

        int i6=-5, i7=-11118, i8=-30, i9=7994, i10=205, i11=12;
        double d2=-121.85873;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2L);

        vMeth(i2, l, -714);
        for (i6 = 5; 263 > i6; ++i6) {
            i7 += (int)-9L;
            lArr1[i6] = i7;
            switch ((((i6 >>> 1) % 1) * 5) + 21) {
            case 23:
                switch (((i6 >>> 1) % 1) + 38) {
                case 38:
                    i7 >>>= i2;
                    break;
                default:
                    for (i8 = 1; i8 < 6; i8++) {
                        if (i6 != 0) {
                        }
                        try {
                            i7 = (i2 % 1531246504);
                            i2 = (155 / i8);
                            i2 = (i7 / 1063886319);
                        } catch (ArithmeticException a_e) {}
                        if (i7 != 0) {
                        }
                        for (i10 = 1; i10 < 2; i10++) {
                            Test.bFld = Test.bFld;
                            try {
                                i9 = (158 / Test.iArrFld[i8]);
                                i2 = (i7 % 29);
                                i7 = (Test.iArrFld[i6 - 1] / -937490875);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.lFld -= (long)d2;
                    }
                }
                break;
            default:
                lArr1[i6 + 1] += l;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + l + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2)
            + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, int i1, boolean b) {

        double d=21.81368;
        float f2=2.184F, fArr[]=new float[N];
        int i12=-13383, i13=2, i14=11, i15=143, i16=3, i17=26386;
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 8.449F);
        FuzzerUtils.init(lArr2, -3779490351L);

        d = iMeth1(i, f2, Test.instanceCount);
        i1 = (int)d;
        for (i12 = 19; i12 < 345; ++i12) {
            Test.lFld = Test.lFld;
            Test.instanceCount += i12;
            try {
                i = (i12 % i);
                i13 = (i / -11819);
                i = (i % 35249);
            } catch (ArithmeticException a_e) {}
            for (i14 = 1; i14 < 5; ++i14) {
                Test.iArrFld[(i13 >>> 1) % N] = i1;
                if (Test.bFld) break;
                for (i16 = 2; i16 > 1; i16--) {
                    i13 -= i14;
                    fArr[i14] = (float)d;
                    i1 -= (int)Test.instanceCount;
                    f2 -= Test.sFld;
                    lArr2[i14 + 1] %= (i13 | 1);
                }
            }
        }
        long meth_res = i + i1 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i12 + i13 + i14
            + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-34, i19=-8175, i20=-8317, i21=34468, i22=12, i24=4, i25=4;
        short s1=-11888;
        float f3=1.679F;
        byte by=59, byArr[]=new byte[N];
        long lArr3[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-12);
        FuzzerUtils.init(lArr3, -21550L);

        Test.instanceCount = (long)(iMeth(iFld, iFld, Test.bFld) * fFld);
        iFld |= -115;
        iFld = iFld;
        for (i18 = 151; i18 > 1; i18--) {
            i19 >>= iFld;
        }
        dFld -= i18;
        iFld >>= -16543;
        for (i20 = 10; i20 < 213; ++i20) {
            Test.instanceCount += 23976;
            Test.sFld += (short)(i20 * i20);
            i19 += (((i20 * Test.lFld) + Test.lFld) - i19);
            s1 -= (short)Test.instanceCount;
            i21 = iFld;
            f3 = 1;
            while (++f3 < 124) {
                fFld -= -10;
                byArr[(int)(f3)] ^= by;
                lArr3[i20] = -12;
                i19 *= i19;
            }
        }
        i22 = 1;
        while (++i22 < 304) {
            Test.sFld += (short)(i22 ^ i22);
            fFld += i22;
            iFld += (((i22 * i19) + i19) - i18);
            i21 = s1;
        }
        Test.iArrFld[(iFld >>> 1) % N] = i21;
        for (i24 = 8; i24 < 234; ++i24) {
            int i26=-162;
            i21 >>= i20;
            i21 = (int)Test.instanceCount;
            i25 <<= 48766;
            i26 = (int)dFld;
            Test.lFld += i24;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
