package tests.javafuzzer745;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:58:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-164L;
    public static short sFld=-1704;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 71L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        double d=-2.66237;
        float f=-38.525F;
        int i5=-35, i6=-34403, i7=-11864;

        d -= f;
        i5 += 32494;
        Test.instanceCount = i5;
        i5 += (int)d;
        for (i6 = 362; i6 > 18; --i6) {
            Test.lArrFld[i6 - 1] >>= i7;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + i6 + i7;
    }

    public static int iMeth1(int i2) {

        int i3=-6, i4=207, i8=62406, i9=223, i10=-243, i11=42542, i12=-45, i13=62105, iArr[]=new int[N];
        boolean b=true;
        byte by=127;
        double d1=-69.23860;

        FuzzerUtils.init(iArr, -144);

        for (i3 = 9; 398 > i3; i3++) {
            if (b = b) break;
            i4 *= (int)Test.instanceCount;
            Test.lArrFld[i3] *= (i4--);
            vMeth();
            iArr[i3] >>= (int)Test.instanceCount;
            by *= (byte)i3;
        }
        for (i8 = 3; i8 < 214; ++i8) {
            for (i10 = 1; i10 < 8; i10++) {
                if (b) break;
                for (i12 = 1; i12 < 2; i12++) {
                    i2 -= (int)Test.instanceCount;
                    try {
                        i9 = (i11 / -23493);
                        i11 = (i3 / iArr[i10]);
                        i9 = (i9 % iArr[i8]);
                    } catch (ArithmeticException a_e) {}
                }
                i13 += (i10 ^ i12);
                Test.sFld -= (short)d1;
            }
        }
        long meth_res = i2 + i3 + i4 + (b ? 1 : 0) + by + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=176, i14=-12, i15=-223, i16=-249, i17=-39, i18=40, i19=-25, i20=-29618, iArr1[]=new int[N];
        short s=-9469;
        float f1=-51.177F;

        FuzzerUtils.init(iArr1, 55210);

        i1 -= (int)(((i1 += s) + (i1 + -4173270401L)) - (iMeth1(i1) * -208));
        for (i14 = 5; 192 > i14; ++i14) {
            iArr1[i14 - 1] = i14;
            iArr1[i14 - 1] = i15;
            for (i16 = 9; 1 < i16; --i16) {
                switch ((i14 % 2) + 122) {
                case 122:
                    i17 += (i16 * i16);
                    i18 = 1;
                    do {
                        try {
                            i1 = (iArr1[i16 - 1] % -62429);
                            i15 = (i15 % 253);
                            i15 = (i14 % iArr1[i16]);
                        } catch (ArithmeticException a_e) {}
                    } while (++i18 < 2);
                    break;
                case 123:
                    i17 = i16;
                    f1 += (31.744F + (i16 * i16));
                    Test.lArrFld[i14 - 1] = i1;
                    for (i19 = 1; i19 < 2; ++i19) {
                        f1 += (i19 - i18);
                        i17 <<= (int)Test.instanceCount;
                    }
                    break;
                default:
                    Test.instanceCount = i18;
                }
            }
        }
        long meth_res = i1 + s + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=20, i21=-2, i22=75, i23=8, i24=-3, iArr2[]=new int[N];
        double d2=1.93043, d3=49.92549;
        float f2=118.913F;
        boolean b1=true;
        byte by1=-121;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)27453);
        FuzzerUtils.init(iArr2, 196);

        i = (int)(iMeth() + 72.442F);
        for (d2 = 12; d2 < 376; d2++) {
            for (i22 = 4; i22 < 69; i22++) {
                f2 = -26358;
                Test.instanceCount = i23;
            }
            if (false) {
                i23 += i;
                i21 = i23;
            } else if (b1) {
                if (false) break;
                sArr = sArr;
            } else {
                d3 -= 62.554F;
                switch ((int)((d2 % 7) + 40)) {
                case 40:
                    Test.instanceCount *= i;
                    Test.instanceCount /= (i21 | 1);
                    i = by1;
                    i += (int)Test.instanceCount;
                case 41:
                    switch (((9 >>> 1) % 5) + 98) {
                    case 98:
                        i *= (int)Test.instanceCount;
                        i += (int)(((d2 * Test.instanceCount) + f2) - Test.sFld);
                        f2 += (float)(((d2 * i21) + i) - i21);
                        break;
                    case 99:
                        i -= i21;
                        iArr2[(int)(d2)] >>>= (int)Test.instanceCount;
                        d3 += i21;
                        i21 -= (int)f2;
                        break;
                    case 100:
                        i24 = 1;
                        do {
                            Test.instanceCount -= (long)d3;
                            i23 += (i24 - Test.instanceCount);
                            Test.instanceCount += (i24 * i24);
                            if (b1) break;
                            Test.lArrFld[i24] = i21;
                        } while (++i24 < 69);
                        break;
                    case 101:
                        i21 *= i;
                    case 102:
                    }
                case 42:
                    iArr2[(int)(d2)] |= 199;
                    break;
                case 43:
                    i += (int)(d2 + i24);
                case 44:
                    try {
                        i21 = (i22 / i);
                        i = (iArr2[(int)(d2)] / -1210);
                        i21 = (169 / i21);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 45:
                    Test.sFld -= (short)i22;
                case 46:
                    i21 += (int)f2;
                default:
                    Test.instanceCount += (long)(((d2 * i22) + i) - i24);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
