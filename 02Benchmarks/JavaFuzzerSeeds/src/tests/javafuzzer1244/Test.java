package tests.javafuzzer1244;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:07:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=35710618L;
    public static double dFld=2.126519;
    public static float fFld=68.1014F;
    public static short sFld=-29811;
    public long lFld=4205646938914108821L;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, int i10, long l2) {

        int i11=40715, i12=-196, i13=-127, i14=-118, iArr[]=new int[N];
        short sArr[]=new short[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 203);
        FuzzerUtils.init(sArr, (short)-31509);
        FuzzerUtils.init(dArr, 32.76041);

        iArr[(i10 >>> 1) % N] = i10;
        for (short s : sArr) {
            i11 = 1;
            while (++i11 < 4) {
                i10 += i10;
                i10 = i10;
                for (i12 = 1; i12 < 1; i12++) {
                    Test.dFld -= i10;
                    i13 += (((i12 * i12) + i10) - i12);
                    iArr[i11 + 1] += i14;
                    i13 -= i13;
                    Test.fFld += (float)19.54853;
                    s = (short)i10;
                    dArr[i11 - 1] += i12;
                }
                i10 += i10;
                Test.instanceCount += (i11 * Test.fFld);
            }
        }
        long meth_res = l1 + i10 + l2 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i8, float f1, int i9) {

        boolean b=false, bArr[]=new boolean[N];
        int i15=49645, i16=-86, i17=-11528, i18=8022;
        double dArr1[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr1, 21.101197);
        FuzzerUtils.init(byArr, (byte)-99);

        b = (bArr[(i9 >>> 1) % N] = (Test.instanceCount >= (103.68938 - iMeth(Test.instanceCount, i8,
            Test.instanceCount))));
        i8 -= i8;
        dArr1[(i8 >>> 1) % N] -= i8;
        for (i15 = 18; 364 > i15; ++i15) {
            for (i17 = i15; i17 < 5; i17 += 3) {
                i16 += (i17 * i18);
                i16 *= 215;
                i8 += i17;
                Test.instanceCount *= i17;
                i9 &= -180;
                i9 ^= i17;
                Test.fFld = i16;
                byArr[i15 + 1] -= (byte)Test.instanceCount;
                i9 = (int)Test.instanceCount;
            }
            i9 += i16;
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i1, int i2, long l) {

        int i3=0, i4=21650, i5=-14, i6=46987, i7=12, i19=29843, i20=-3, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 248);

        for (i3 = 170; i3 > 10; i3--) {
            i5 = i2;
            l += (i4 + (i5++));
            for (i6 = 10; i3 < i6; --i6) {
                vMeth1(i7, Test.fFld, i7);
                i2 *= i7;
                for (i19 = 1; i19 < 1; ++i19) {
                    Test.fFld -= -7758892486627731122L;
                    l -= (long)Test.fFld;
                    Test.instanceCount <<= -36;
                    i5 = (int)l;
                }
                i4 -= i6;
                i4 += i7;
                iArr1[i6 + 1] += (int)2.126424;
                i4 = -31;
            }
        }
        vMeth_check_sum += i1 + i2 + l + i3 + i4 + i5 + i6 + i7 + i19 + i20 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=19.127F, fArr[]=new float[N];
        int i=-89, i21=-9, i22=93, i23=-2, i24=-12, iArr2[]=new int[N];
        byte by=56;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(iArr2, 32);
        FuzzerUtils.init(fArr, 0.502F);

        f = (((++lArr[(i >>> 1) % N]) * (++lArr[(64 >>> 1) % N])) - i);
        vMeth(i, i, Test.instanceCount);
        try {
            i = i;
            iArr2 = FuzzerUtils.int1array(N, (int)204);
            Test.fFld -= i;
            Test.instanceCount += 120;
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.instanceCount %= ((long)(Test.dFld) | 1);
            i = i;
        }
        Test.dFld = -12L;
        i21 = 1;
        do {
            Test.instanceCount >>= i;
        } while (++i21 < 190);
        i22 = 1;
        do {
            iArr2[i22 + 1] >>= i22;
            i = (int)Test.instanceCount;
            Test.instanceCount += (i22 * i22);
            iArr2[i22] -= i22;
            i = by;
            fArr[i22 + 1] -= Test.instanceCount;
            i23 = 1;
            do {
                switch ((((14 >>> 1) % 7) * 5) + 46) {
                case 62:
                    i += (int)Test.instanceCount;
                    Test.sFld -= (short)i23;
                    lArr[i22 - 1] -= lFld;
                    i += (i23 * i23);
                    break;
                case 53:
                    Test.fFld -= Test.instanceCount;
                    i24 = 1;
                    do {
                        Test.instanceCount += (i24 - Test.instanceCount);
                    } while (++i24 < 1);
                    break;
                case 63:
                    Test.instanceCount = i23;
                    lArr[i23 + 1] = -6932172825060782058L;
                case 64:
                    by += (byte)(-3497730388L + (i23 * i23));
                    break;
                case 80:
                    iArr2[i22] <<= (int)Test.instanceCount;
                case 65:
                    Test.dFld = i;
                case 79:
                    i &= i24;
                    break;
                default:
                    lArr[i22 - 1] = i24;
                }
            } while (++i23 < 130);
        } while (++i22 < 193);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
