package tests.javafuzzer140;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:01:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-60749L;
    public static int iFld=-10847;
    public float fFld=-85.765F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11956);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, int i4, int i5) {

        byte by2=-21;
        int i6=-11512, i7=-25, i8=11, i9=-39738;
        float f1=0.994F;

        Test.instanceCount *= i5;
        by2 += (byte)Test.iFld;
        for (i6 = 131; i6 > 5; i6--) {
            Test.instanceCount += (i6 + i7);
            by2 = (byte)-4525442106356242697L;
            i7 = (int)Test.instanceCount;
            switch ((i6 % 2) + 115) {
            case 115:
                Test.instanceCount = Test.instanceCount;
                switch ((((i6 >>> 1) % 6) * 5) + 54) {
                case 58:
                    if (i7 != 0) {
                    }
                case 60:
                    for (i8 = 1; 12 > i8; i8++) {
                        Test.iArrFld[i6] -= i7;
                        f1 = Test.iFld;
                        i7 = i5;
                        f1 = i4;
                    }
                    break;
                case 55:
                    f1 *= Test.instanceCount;
                    break;
                case 67:
                    Test.iArrFld[i6 + 1] = i7;
                case 65:
                    by2 = (byte)35;
                    break;
                case 57:
                    i7 -= i6;
                    break;
                default:
                }
                break;
            case 116:
                i5 += i6;
                break;
            default:
                i5 += i4;
            }
        }
        long meth_res = i3 + i4 + i5 + by2 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, float f, int i2) {

        byte by1=-51;
        int i10=7, i11=-63864, i12=6, i13=184;
        long l2=-54514L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.878F);

        i2 -= (int)(by1 + ((--i2) * (Test.iFld + 108L)));
        Test.instanceCount -= iMeth(i1, i2, i1);
        i1 *= Test.iFld;
        i2 *= (int)Test.instanceCount;
        i1 -= Test.iFld;
        for (float f2 : fArr) {
            Test.iArrFld[(i10 >>> 1) % N] >>>= i2;
            fArr[(-4 >>> 1) % N] *= i1;
            i10 = -137;
            for (l2 = 4; 1 < l2; --l2) {
                i11 += (int)(l2 | Test.instanceCount);
                for (i12 = (int)(l2); 2 > i12; ++i12) {
                    Test.instanceCount = i1;
                    try {
                        Test.iFld = (-146 % Test.iArrFld[i12 - 1]);
                        i10 = (-140 / Test.iArrFld[i12 - 1]);
                        i13 = (i12 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld -= i11;
                }
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + i2 + by1 + i10 + l2 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, long l1) {

        byte by=98;
        float f3=-127.604F;

        by = (byte)Test.iFld;
        by = (byte)(((Test.iFld++) | Test.iArrFld[(Test.iFld >>> 1) % N]) + (++Test.iArrFld[(Test.iFld >>> 1) % N]));
        Test.iArrFld[(Test.iFld >>> 1) % N] += (int)(l1++);
        vMeth1(-138, f3, Test.iFld);
        vMeth_check_sum += l + l1 + by + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        int i=58, i14=46107, i15=24720, i16=-6, i17=106, i18=2, i19=43802, i20=30054;
        double d=0.46940, d1=-36.16681;
        boolean b1=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.481F);

        i = 294;
        while (--i > 0) {
            vMeth(25L, -686679309279844090L);
            switch (((Test.iFld >>> 1) % 4) + 54) {
            case 54:
                Test.iArrFld[i - 1] = i;
                for (i14 = 4; i14 < 86; ++i14) {
                    Test.iFld ^= -101;
                    for (i16 = 1; 2 > i16; ++i16) {
                        boolean b=false;
                        byte by3=-42;
                        b = b;
                        Test.iArrFld[i - 1] = i14;
                        i17 = by3;
                        try {
                            Test.iFld = (Test.iArrFld[i16] / 19834);
                            i17 = (-1840662406 % i16);
                            i15 = (115 / i14);
                        } catch (ArithmeticException a_e) {}
                        try {
                            Test.iFld = (163 / i16);
                            Test.iArrFld[(i16 >>> 1) % N] = (-18556 % i17);
                            Test.iArrFld[i16 - 1] = (-1974218490 % i14);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                i15 *= -9624;
                Test.instanceCount -= (long)d;
                break;
            case 55:
            case 56:
                i15 <<= i;
                Test.iFld += (i ^ i);
            case 57:
            }
            i15 <<= i14;
            for (i18 = 2; i18 < 86; ++i18) {
                Test.iFld = Test.iFld;
                Test.iFld += (i18 ^ i14);
                Test.instanceCount = -7408290490660209539L;
                Test.instanceCount = i16;
                d -= fFld;
                b1 = b1;
                for (d1 = 1; 2 > d1; ++d1) {
                    i19 *= (int)d1;
                    i17 += i17;
                    i20 = (int)-6L;
                    fArr1 = FuzzerUtils.float1array(N, (float)97.53F);
                    Test.iArrFld[i18 - 1] += i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
