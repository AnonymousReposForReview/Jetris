package tests.javafuzzer947;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:54:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3012713638L;
    public static byte byFld=-9;
    public static double dFld=0.22269;
    public static int iFld=13328;
    public float fFld=-118.965F;
    public volatile float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i5, int i6) {

        float f2=1.838F, f3=0.486F;
        int i7=5463, i8=17464, iArr[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 174);
        FuzzerUtils.init(byArr, (byte)9);

        f2 = Test.byFld;
        Test.instanceCount = -36;
        i6 *= (int)Test.instanceCount;
        iArr[(i6 >>> 1) % N] *= i6;
        for (f3 = 7; f3 < 185; f3++) {
            i7 += (int)(f3 + Test.instanceCount);
            Test.instanceCount = Test.instanceCount;
            i8 = 1;
            while ((i8 += 2) < 9) {
                i6 += i7;
                Test.dFld = -13;
                i6 <<= 0;
                i5 = i8;
                i5 += i8;
                byArr[i8] >>= (byte)i7;
                Test.instanceCount += i5;
            }
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i7 + i8 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i, int i1, int i2) {

        float f1=74.493F;
        int i3=-14, i4=-7, i9=7, i10=125, i11=0, i12=11, i13=-20873;
        short s=-12693, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)30914);

        for (f1 = 7; f1 < 295; ++f1) {
            i4 = 1;
            while (++i4 < 6) {
                sArr[i4] -= (short)(byMeth(i, -55964) + i2);
                Test.instanceCount += (i4 - i);
                i2 -= (int)f1;
                Test.dFld *= i3;
                i += (int)f1;
                i3 += (i4 | (long)f1);
            }
            for (i9 = (int)(f1); i9 < 6; i9++) {
                for (i11 = 1; i11 < 1; ++i11) {
                    Test.byFld += (byte)f1;
                    Test.byFld += (byte)(i11 ^ s);
                }
                i13 = 1;
                do {
                    i1 <<= i10;
                    i12 = (int)Test.instanceCount;
                } while (++i13 < 1);
            }
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f1) + i3 + i4 + i9 + i10 + i11 + i12 + s + i13 +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        int i14=52350, i15=-120, iArr1[]=new int[N];
        long l=13884L;
        float f4=119.137F;
        boolean b=false;

        FuzzerUtils.init(iArr1, -4);

        iMeth(Test.iFld, Test.iFld, Test.iFld);
        Test.dFld = 136;
        Test.iFld = Test.byFld;
        i14 = 1;
        while (++i14 < 259) {
            iArr1[i14 - 1] = i14;
            l = 1;
            do {
                f = -2189526660L;
                Test.iFld += (int)(l ^ i14);
                for (f4 = 1; 1 > f4; f4++) {
                    i15 >>= i14;
                    i15 += (int)(((f4 * i15) + i15) - f4);
                    i15 = (int)Test.instanceCount;
                    iArr1[(int)(l + 1)] -= Test.iFld;
                    i15 <<= (int)-3968433529L;
                    if (b) break;
                }
            } while (++l < 6);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i14 + l + Float.floatToIntBits(f4) + i15 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=-7, i17=75, i18=-12, i19=-184, i20=65090, i21=42645, i22=-60406, i23=-194, i24=-76, i25=-5, i26=10,
            i27=20, i28=136, i29=92, i30=-3, iArr2[][]=new int[N][N];
        short s1=4873;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -39);
        FuzzerUtils.init(lArr, -33786L);

        vMeth(fFld);
        for (i16 = 12; i16 < 398; i16++) {
            Test.iFld |= Test.iFld;
        }
        for (i18 = 8; 372 > i18; ++i18) {
            Test.iFld -= s1;
        }
        fArrFld[(i16 >>> 1) % N] -= 63685;
        for (i20 = 7; i20 < 259; i20++) {
            for (i22 = 6; i22 < 100; i22++) {
                switch (((i20 % 10) * 5) + 68) {
                case 79:
                    iArr2[i22 - 1][i20 + 1] -= 15883;
                    break;
                case 102:
                    i24 = 1;
                    do {
                        Test.dFld += i22;
                        i19 += -14;
                    } while (++i24 < 2);
                    for (i25 = 2; i25 > 1; i25 -= 2) {
                        Test.instanceCount -= i18;
                        Test.dFld = fFld;
                        i23 = i22;
                        i26 += (i25 * i25);
                        Test.instanceCount <<= i18;
                        i26 = i21;
                        i17 *= i27;
                        i23 = Test.byFld;
                    }
                    i26 = i27;
                    for (i28 = 1; 2 > i28; ++i28) {
                        fFld -= s1;
                        fFld -= i30;
                        lArr[i22 + 1] -= s1;
                        Test.instanceCount = (long)fFld;
                        i23 += i28;
                        Test.instanceCount += Test.iFld;
                    }
                    break;
                case 69:
                    i21 >>= i28;
                case 88:
                    iArr2[i22 - 1][i22 + 1] = i24;
                case 116:
                    lArr[i20 - 1] -= (long)-2.793F;
                    break;
                case 94:
                    Test.instanceCount ^= Test.iFld;
                    break;
                case 75:
                    i27 += (((i22 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    break;
                case 109:
                    Test.iFld >>= i25;
                    break;
                case 98:
                    i27 -= (int)Test.instanceCount;
                    break;
                case 103:
                    i26 = i25;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
