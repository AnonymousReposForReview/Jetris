package tests.javafuzzer482;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:33:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public float fFld=0.897F;
    public static float fFld1=19.759F;
    public static boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2) {

        int i7=-54057, i8=35188, i9=-103, i10=-2, i11=18, i12=60991;
        short s=7087, sArr[]=new short[N];
        long l3=3485711703973648719L, lArr[]=new long[N];
        double d1=83.26405;
        byte by1=39, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)123);
        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(sArr, (short)-10784);

        i7 %= (int)(s | 1);
        for (i8 = 8; i8 < 201; ++i8) {
            i7 *= -52442;
            Test.instanceCount &= -10;
            i9 = i8;
            for (l3 = 1; l3 < 8; l3++) {
                Test.instanceCount += (((l3 * Test.fFld1) + Test.fFld1) - Test.fFld1);
                i7 += (187 + (l3 * l3));
            }
        }
        for (i11 = 4; i11 < 136; i11++) {
            switch ((((i11 >>> 1) % 3) * 5) + 56) {
            case 65:
                switch (((i11 % 9) * 5) + 22) {
                case 37:
                    i7 = (int)Test.instanceCount;
                    i9 += i11;
                    i7 >>= -57068;
                    d1 += i7;
                    break;
                case 42:
                    s += (short)i7;
                    break;
                case 61:
                    i12 = i11;
                case 65:
                    l2 = i8;
                    break;
                case 40:
                    byArr[i11] = (byte)i9;
                case 36:
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-13461);
                    break;
                case 26:
                    Test.bFld = Test.bFld;
                    break;
                case 24:
                    by1 = (byte)-2L;
                    break;
                case 30:
                    lArr = lArr;
                    break;
                default:
                    Test.iArrFld[i11 - 1] = -15;
                }
            case 69:
                s += (short)i11;
                break;
            case 64:
                i9 += i12;
                break;
            default:
                sArr[i11 - 1] = (short)i11;
            }
        }
        vMeth_check_sum += l2 + i7 + s + i8 + i9 + l3 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + by1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth1(double d) {

        int i4=177, i5=104, i6=-133, i13=-205, i14=46100;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        bArr[(i4 >>> 1) % N] = ((-(Test.fFld1 + i4)) <= (i4 + (-(Test.instanceCount - i4))));
        i5 = 1;
        while (++i5 < 211) {
            i6 = 1;
            while (++i6 < 8) {
                switch (((i5 % 1) * 5) + 99) {
                case 102:
                    i4 ^= i5;
                    vMeth(Test.instanceCount);
                    Test.instanceCount += (i6 * i6);
                    break;
                default:
                    for (i13 = 1; i13 < 1; i13++) {
                        i4 <<= i5;
                        i4 *= i5;
                        i14 = (int)Test.instanceCount;
                        i4 = i13;
                        i14 |= (int)Test.instanceCount;
                        i4 += (int)d;
                        i4 += i14;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i13 + i14 + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i1, long l, long l1) {

        float f=-1.220F;
        byte by=19;
        int i2=42143, i3=12, i15=-9998, i16=85, i17=-2981;

        fFld *= ((long)(f - i1) >>> ((i1 + by) - (i1 + i1)));
        for (i2 = 2; 124 > i2; i2++) {
            if (false) {
                iMeth1(32.3604);
            }
            Test.iArrFld = Test.iArrFld;
            if (Test.bFld) continue;
            for (i15 = 1; i15 < 13; i15++) {
                i16 = i3;
            }
            i1 = i15;
            if (Test.bFld) continue;
            i3 <<= by;
        }
        Test.iArrFld[(i1 >>> 1) % N] += i2;
        i17 = 1;
        do {
            if (i15 != 0) {
            }
            f += i17;
        } while (++i17 < 352);
        long meth_res = i1 + l + l1 + Float.floatToIntBits(f) + by + i2 + i3 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-31075, i18=-18, i19=-58516, i20=-14620, i21=-10, i22=-3, i23=53434, i24=0, i25=-6, i26=-10, i27=51,
            i28=51579, i29=54843;
        double d2=-55.16559;
        short s1=6426;
        byte by2=9;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 12L);

        i += Test.iArrFld[(-7 >>> 1) % N];
        i = i;
        i -= iMeth(i, Test.instanceCount, Test.instanceCount);
        Test.iArrFld[(-229 >>> 1) % N] <<= 198;
        d2 *= i;
        for (i18 = 187; i18 > 7; i18--) {
            i19 += i18;
            for (i20 = 2; i20 < 139; i20++) {
                i22 = 1;
                while (++i22 < 2) {
                    try {
                        i21 = (i20 / -779795380);
                        i = (i / 12226);
                        Test.iArrFld[i22 - 1] = (i21 / -38155);
                    } catch (ArithmeticException a_e) {}
                    i <<= (int)1593067793L;
                    Test.fFld1 -= i18;
                    i = (int)Test.instanceCount;
                    i21 += (i22 + Test.instanceCount);
                }
                Test.instanceCount ^= i;
            }
            if (true) continue;
            Test.instanceCount -= i;
            fFld -= i20;
            Test.iArrFld[i18 - 1] *= s1;
            for (i23 = 7; i23 < 139; ++i23) {
                lArr1[i23 - 1] -= i25;
                if (Test.bFld) continue;
                for (i26 = i23; i26 < 2; i26++) {
                    i25 += i26;
                }
                i24 <<= i19;
                switch ((i23 % 4) + 127) {
                case 127:
                    switch ((((i26 >>> 1) % 2) * 5) + 71) {
                    case 77:
                        for (i28 = 1; i28 < 2; i28++) {
                            i29 = 0;
                            Test.instanceCount = (long)d2;
                        }
                    case 76:
                        lArr1[i18] += i24;
                        break;
                    }
                    break;
                case 128:
                    Test.instanceCount ^= by2;
                    break;
                case 129:
                    Test.instanceCount *= Test.instanceCount;
                    break;
                case 130:
                    if (Test.bFld) break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
