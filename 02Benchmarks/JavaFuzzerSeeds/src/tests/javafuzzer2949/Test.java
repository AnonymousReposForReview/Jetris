package tests.javafuzzer2949;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:41:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2597984776L;
    public static volatile float fFld=-1.708F;
    public double dFld=-84.36783;
    public static short sFld=-21329;
    public static byte byArrFld[]=new byte[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-11);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, int i7) {

        int i8=-217, i9=-164, i10=25113, i11=1, i12=-84, iArr[]=new int[N];
        boolean b=false;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -2.30397);
        FuzzerUtils.init(iArr, -22633);

        dArr[(i7 >>> 1) % N][(i8 >>> 1) % N] = -37073;
        b = b;
        i8 = (int)Test.instanceCount;
        i7 = (int)d;
        for (i9 = 4; i9 < 315; i9++) {
            try {
                i10 = (i8 % i10);
                i7 = (i10 % 17077);
                i11 = (-59554 % i10);
            } catch (ArithmeticException a_e) {}
        }
        i7 -= i9;
        iArr[(i10 >>> 1) % N] = 10;
        Test.instanceCount >>= Test.instanceCount;
        i12 = 1;
        do {
            switch (((-3 >>> 1) % 4) + 41) {
            case 41:
                i7 = (int)Test.instanceCount;
                Test.fFld -= i11;
                break;
            case 42:
                i11 = i8;
                Test.fFld += i10;
                break;
            case 43:
                b = true;
                break;
            case 44:
                i7 = (int)Test.fFld;
                break;
            }
        } while (++i12 < 362);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l) {

        int i13=230, i14=-147, i15=7;
        short s=-29708;
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -12131L);
        FuzzerUtils.init(dArr1, -70.78841);

        vMeth1(-1.44201, i13);
        i13 >>= i13;
        for (i14 = 7; i14 < 341; i14++) {
            lArr[i14 + 1] += l;
            i13 |= i14;
            dArr1[i14] -= s;
            i13 |= 3;
        }
        long meth_res = l + i13 + i14 + i15 + s + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=7, i3=53, i4=-53, i5=12, i6=-4, i16=6, i17=170, i18=2;
        boolean b1=false;

        for (i2 = 281; i2 > 7; i2--) {
            i4 = 1;
            while (++i4 < 6) {
                i3 = (i3 += (i1++));
                for (i5 = 1; 1 > i5; ++i5) {
                    i += (int)(lMeth(Test.instanceCount) + Test.instanceCount);
                    i1 = i5;
                    i3 -= -5;
                    i3 -= (int)Test.instanceCount;
                    i = (int)Test.instanceCount;
                }
                i1 = i6;
                Test.fFld += (i4 * i4);
                i6 = i1;
                for (i16 = 1; i16 < 1; ++i16) {
                    i17 = i18;
                    if (b1) break;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i16 + i17 + i18 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i19=36270, i20=20, i21=-33368, i22=-49539, i23=0, i24=-2, i25=5521;
        boolean b2=true;
        long l1=-229L;
        byte by=38;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -61.577F);

        vMeth(i19, i19);
        dFld = i19;
        i19 -= 50951;
        i19 = i19;
        i19 = i19;
        Test.byArrFld[(i19 >>> 1) % N] += (byte)Test.instanceCount;
        Test.instanceCount = 229;
        dFld = 10L;
        b2 = b2;
        i20 = 1;
        while (++i20 < 254) {
            i19 -= 29465;
            for (i21 = 1; i21 < 99; i21++) {
                iArrFld[i20 - 1] = (int)dFld;
            }
            i23 = 1;
            while (++i23 < 99) {
                i22 = 183;
                i19 += (((i23 * Test.instanceCount) + i20) - Test.instanceCount);
                if (b2) break;
                i19 = i20;
            }
            i19 += 111;
            i24 = 1;
            while (++i24 < 99) {
                Test.fFld += (i24 * i24);
                for (l1 = 1; l1 < 1; l1++) {
                    Test.sFld %= (short)(i21 | 1);
                    iArrFld[i24] = (int)74L;
                    i19 += (int)(((l1 * i22) + i22) - i24);
                    i25 += (int)l1;
                    by += (byte)i20;
                    i22 = i21;
                    Test.fFld += -101;
                    fArr[i24 + 1] *= -194;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
