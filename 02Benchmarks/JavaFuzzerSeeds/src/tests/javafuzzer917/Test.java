package tests.javafuzzer917;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:32:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=65486L;
    public static int iFld=-37012;
    public static byte byFld=-9;
    public static double dFld=77.62175;
    public float fFld=0.249F;
    public boolean bFld=false;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 8731124840360059494L);
        FuzzerUtils.init(Test.iArrFld, -94);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, long l, int i10) {

        int i11=-9, i12=36015, i13=-14, i14=-60450, i15=14, i16=240;
        float f1=41.33F;
        double d=0.90909;
        long l1=-13L;
        boolean b=true;

        Test.iFld &= i10;
        i11 = 1;
        while (++i11 < 392) {
            Test.iArrFld[i11][i11] = -88;
            i12 = 1;
            do {
                i9 = i9;
            } while (++i12 < 4);
            if (b) {
                for (i13 = 1; 4 > i13; i13++) {
                    Test.iArrFld[i11 + 1][i13 - 1] = (int)l;
                    for (f1 = 1; 2 > f1; f1++) {
                        d /= ((long)(f1) | 1);
                        Test.byFld >>= (byte)Test.iFld;
                    }
                    Test.iArrFld[i13 + 1] = Test.iArrFld[i11 - 1];
                    for (l1 = 1; l1 < 2; ++l1) {
                        i14 += (int)-11L;
                        l += (((l1 * Test.iFld) + Test.instanceCount) - Test.byFld);
                    }
                }
            }
        }
        long meth_res = i9 + l + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 +
            Double.doubleToLongBits(d) + l1 + i16 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(short s, int i2, int i3) {

        int i4=-7, i5=120, i6=3, i7=9, i8=-17920;
        double d1=-31.67502;

        for (i4 = 14; i4 < 393; ++i4) {
            Test.instanceCount += (((s - i3) * (Test.instanceCount * i2)) + ((i5 - -14398) + Test.byFld));
            if (i3 != 0) {
            }
            i6 = 1;
            do {
                for (i7 = 1; i7 > 1; i7--) {
                    i3 *= (i2 * iMeth(i5, Test.instanceCount, Test.iFld));
                    i2 = i2;
                    i5 = (int)Test.instanceCount;
                    i2 = i8;
                    Test.iFld += (-6 + (i7 * i7));
                    Test.instanceCount -= i3;
                    i8 = Test.byFld;
                    i5 = i8;
                }
                i8 *= (int)d1;
                Test.iFld += i6;
            } while (++i6 < 4);
        }
        long meth_res = s + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i=29455, i1=1, i17=13, i18=-12, i19=-142, i20=-2;
        float f=85.899F, fArr[]=new float[N];
        short s1=5027;
        boolean b1=false;

        FuzzerUtils.init(fArr, 0.403F);

        for (i = 2; i < 175; i++) {
            fArr[i - 1] *= (-f);
            Test.lArrFld = (Test.lArrFld = (Test.lArrFld = Test.lArrFld));
            i1 = (int)((i1 - (13L + (i1 - f))) - fMeth((short)(191), 13, i));
            s1 -= (short)Test.instanceCount;
            i1 = (int)-201L;
            b1 = b1;
            Test.bArrFld[i] = false;
        }
        i1 *= i1;
        for (i17 = 5; 229 > i17; i17++) {
            Test.iArrFld[i17 + 1][i17] /= (int)-80.1000F;
            switch ((((i >>> 1) % 1) * 5) + 14) {
            case 16:
                for (i19 = 7; 1 < i19; i19--) {
                    Test.instanceCount += Test.instanceCount;
                    Test.iArrFld[i17 - 1][i19] = (int)Test.dFld;
                }
                break;
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + s1 + (b1 ? 1 : 0) + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=-253, i22=-10, i23=-25533, i24=57551, i25=232, i26=-66, i27=133;

        Test.iFld -= (--Test.iFld);
        vMeth();
        Test.lArrFld[(-2 >>> 1) % N] <<= Test.iFld;
        Test.iFld = 4;
        i21 = 1;
        do {
            Test.iFld += (int)Test.instanceCount;
            Test.instanceCount += Test.iFld;
            Test.instanceCount <<= i21;
            i22 = 1;
            while (++i22 < 79) {
                Test.iFld += (((i22 * Test.byFld) + Test.iFld) - Test.byFld);
                Test.iFld = i21;
                Test.iFld += (26644 + (i22 * i22));
                fFld = Test.instanceCount;
                i23 = 1;
                do {
                    Test.iFld += (i23 + i23);
                    Test.iFld += (i23 + Test.iFld);
                    Test.iFld >>= (int)Test.instanceCount;
                    Test.instanceCount += (i23 - i23);
                    Test.iArrFld[i22][i23 + 1] = Test.byFld;
                    try {
                        Test.iFld = (32599 / i22);
                        Test.iFld = (i23 % Test.iFld);
                        Test.iFld = (130 % i21);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = -61467;
                    Test.iFld += i21;
                    Test.iFld <<= -38;
                } while (++i23 < 1);
            }
            if (bFld) continue;
            Test.dFld = Test.instanceCount;
            for (i24 = 79; i24 > 1; --i24) {
                Test.iArrFld[i24 + 1][i24 - 1] -= (int)Test.instanceCount;
                for (i26 = 1; i26 < 2; i26++) {
                    Test.iArrFld[i21] = Test.iArrFld[i24 + 1];
                    i27 *= Test.iFld;
                }
            }
        } while (++i21 < 317);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
