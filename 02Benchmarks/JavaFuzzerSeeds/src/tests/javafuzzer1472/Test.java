package tests.javafuzzer1472;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:11:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3668330023868189844L;
    public static int iFld=35501;
    public static double dFld=1.30281;
    public static volatile boolean bFld=true;
    public static float fFld=-33.181F;
    public static volatile byte byFld=-77;
    public volatile int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, int i4) {

        float f2=0.797F;
        long l=13L, l1=2497162994L;
        int i5=20338, i6=226, i7=7, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 12035);

        f2 = i3;
        i4 *= i4;
        for (l = 8; 173 > l; l++) {
            l1 = 10;
            do {
                Test.instanceCount <<= i3;
                Test.dFld = Test.instanceCount;
                Test.instanceCount += (((l1 * Test.instanceCount) + l1) - l);
                f2 += (l1 * l1);
                for (i6 = 1; i6 < 1; i6++) {
                    iArr1[(int)(l1 - 1)] = i7;
                    i7 = (int)l1;
                    Test.instanceCount = l1;
                    if (Test.bFld) break;
                    try {
                        i7 = (i3 / iArr1[(int)(l1 - 1)]);
                        i4 = (1217310632 % i4);
                        iArr1[(int)(l1)] = (i4 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld += (((i6 * i3) + f2) - l);
                }
            } while (--l1 > 0);
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f2) + l + i5 + l1 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f1, int i2) {

        int i8=2, i9=3323, i10=60350, i11=46133, i12=-14, i13=-63346, i14=0, i15=2, i16=6, iArr2[]=new int[N];
        short s=12256;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(lArr, -2333716219L);

        Test.iFld %= (int)((iMeth1(i2, -46304) + 14) | 1);
        f1 *= -1;
        Test.instanceCount = i2;
        for (i8 = 1; i8 < 150; i8++) {
            for (i10 = 1; i10 < 11; ++i10) {
                i9 >>= i8;
            }
        }
        for (i12 = 7; i12 < 261; i12++) {
            i14 = 1;
            do {
                for (i15 = 1; i15 < 1; ++i15) {
                    Test.dFld *= 47558;
                    iArr2[i14 + 1] += Test.iFld;
                    if (Test.bFld) {
                        lArr = lArr;
                        s += (short)-23958;
                        lArr[i15 - 1] = i8;
                    }
                }
            } while (++i14 < 6);
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + s +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i17=233, i18=-3, i20=199, i21=-11, iArr[]=new int[N];
        short s1=10418;

        FuzzerUtils.init(iArr, 159);

        Test.iFld *= (int)((iArr[(Test.iFld >>> 1) % N]++) + (lMeth(0.311F, Test.iFld) | Test.iFld));
        Test.bFld = Test.bFld;
        i17 = 1;
        do {
            i18 = 1;
            do {
                int i19=252;
                Test.iFld += -830;
                Test.iFld ^= i17;
                Test.instanceCount *= i18;
                Test.instanceCount += Test.iFld;
                i19 %= (int)(i17 | 1);
                Test.iFld += (((i18 * i17) + Test.instanceCount) - i17);
                for (i20 = i18; i20 < 1; i20++) {
                    s1 += (short)i20;
                    i21 += i21;
                    Test.fFld += (i20 * i20);
                    Test.instanceCount = s1;
                }
            } while (++i18 < 11);
        } while ((i17 += 2) < 296);
        long meth_res = i17 + i18 + i20 + i21 + s1 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=180, i1=50098, i22=-5, i23=1, i24=1;
        float f=-1.77F, fArr[]=new float[N];
        double d=126.102796;
        short s2=-904;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -99.476F);
        FuzzerUtils.init(lArr1, -3270442276803318522L);

        for (i = 8; 155 > i; i++) {
            f += (i * Test.instanceCount);
            switch ((((iMeth() >>> 1) % 9) * 5) + 72) {
            case 78:
                for (i22 = 7; i22 < 171; i22++) {
                    byte by=-127;
                    i1 += (int)f;
                    i1 >>= (int)Test.instanceCount;
                    Test.instanceCount &= i;
                    iArrFld[i22 - 1] -= by;
                    for (d = 1; d < 2; ++d) {
                        Test.instanceCount = i23;
                        iArrFld[i22 - 1] = s2;
                        i1 >>= i1;
                        Test.instanceCount += 23;
                        i24 = i23;
                        fArr[(int)(d)] = i1;
                        switch ((int)((d % 3) + 3)) {
                        case 3:
                            i23 += (int)(((d * Test.iFld) + i1) - i1);
                            break;
                        case 4:
                            if (false) continue;
                        case 5:
                            i23 = Test.iFld;
                            Test.fFld -= Test.iFld;
                            if (Test.bFld) continue;
                            Test.dFld -= 4L;
                            break;
                        }
                    }
                    if (Test.bFld) break;
                    Test.fFld *= i22;
                    i1 += (((i22 * Test.iFld) + i22) - Test.fFld);
                    lArr1[i + 1] = i23;
                }
                Test.iFld -= i24;
                iArrFld[i - 1] += i24;
                Test.iFld = 5;
            case 81:
                Test.byFld = (byte)i;
                break;
            case 84:
            case 98:
                Test.byFld = (byte)i1;
                break;
            case 114:
                Test.byFld += (byte)i;
            case 104:
                i24 += (((i * Test.byFld) + i1) - Test.iFld);
                break;
            case 89:
                Test.dFld /= -171604568L;
                break;
            case 93:
                i1 = (int)Test.instanceCount;
                break;
            case 73:
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
