package tests.javafuzzer1922;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:55:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4038822597L;
    public static volatile float fFld=8.331F;
    public static volatile double dFld=-1.13466;
    public static short sFld=-4290;
    public static int iFld=8906;
    public int iFld1=-18706;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 946);
        FuzzerUtils.init(Test.byArrFld, (byte)105);
        FuzzerUtils.init(Test.fArrFld, 1.586F);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=6, i3=-57054, i4=8, i6=-27652, i7=12831;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.31798);

        i2 = 1;
        while (++i2 < 288) {
            for (i3 = 6; i3 > i2; i3--) {
                dArr[i2 - 1] = i4;
                Test.fFld += i4;
                Test.instanceCount *= 0;
                Test.dFld *= i2;
                i4 += (((i3 * Test.fFld) + i3) - i2);
            }
            if (i3 != 0) {
            }
            Test.fFld -= Test.instanceCount;
            i4 <<= i2;
            i4 >>>= i3;
            Test.iArrFld[i2] += (int)Test.dFld;
            for (i6 = 6; i6 > 1; --i6) {
                if (false) break;
                i4 = Test.sFld;
            }
        }
        long meth_res = i2 + i3 + i4 + i6 + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        long l1=31378L, lArr[]=new long[N];
        int i8=-220, i9=-9, i10=-14, i11=58;
        boolean b1=true;
        double dArr1[][]=new double[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr1, -95.67916);
        FuzzerUtils.init(lArr, -22L);
        FuzzerUtils.init(fArr, -1.324F);

        i1 >>>= ((++i1) + ((-iMeth()) - i1));
        for (l1 = 8; l1 < 224; l1++) {
            Test.fFld += (l1 * l1);
            dArr1[(int)(l1)] = dArr1[(int)(l1)];
        }
        b1 = b1;
        try {
            i1 -= i1;
            i8 = i8;
            i1 = i1;
            lArr[(i8 >>> 1) % N] -= l1;
            for (i9 = 8; i9 < 366; ++i9) {
                i11 = 1;
                while (++i11 < 5) {
                    Test.iArrFld[i11] = i10;
                    fArr[i11] *= l1;
                    Test.instanceCount *= i8;
                }
            }
        }
        catch (ArithmeticException exc1) {
            i8 /= (int)(Test.instanceCount | 1);
        }
        vMeth_check_sum += i1 + l1 + i8 + (b1 ? 1 : 0) + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static double dMeth(long l) {

        boolean b=false, bArr[]=new boolean[N];
        int i12=231, i13=8, i14=-228, i15=-6, i16=-11;

        FuzzerUtils.init(bArr, true);

        b = true;
        vMeth(Test.iFld);
        i12 = 1;
        do {
            Test.byArrFld[i12] = (byte)-23625;
            for (i13 = 1; i13 < 5; ++i13) {
                Test.iArrFld[i12 + 1] = Test.iFld;
                Test.iFld *= i12;
                Test.fFld -= Test.instanceCount;
                for (i15 = 2; 1 < i15; i15--) {
                    bArr[(i15 >>> 1) % N] = b;
                    Test.iArrFld = Test.iArrFld;
                    l <<= i13;
                    i14 += (((i15 * Test.fFld) + i12) - Test.fFld);
                }
            }
            Test.fArrFld[i12 - 1] -= -218;
        } while (++i12 < 363);
        Test.instanceCount += i16;
        long meth_res = l + (b ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=2.115924;
        int i=-11, i17=5, i18=149, i19=-76, i20=9122, i21=229, i22=175, i23=2, i24=-14, i25=169, i26=5, i27=45267;
        float f=-115.594F;
        byte by=-33;
        boolean b2=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 62405L);

        for (d = 367; d > 10; d -= 3) {
            f -= (float)(Math.max((int)(by - d), i - i) * dMeth(Test.instanceCount));
            for (i17 = 13; 211 > i17; i17 += 3) {
                i -= iFld1;
                i18 += (i17 - Test.fFld);
                i -= (int)Test.fFld;
                iFld1 = iFld1;
                Test.iArrFld[i17 - 1] = (int)Test.instanceCount;
                Test.dFld = Test.instanceCount;
            }
            if (b2) break;
            for (i19 = 1; i19 < 211; i19++) {
                i20 += i19;
                Test.bArrFld[(int)(d)] = b2;
                Test.instanceCount -= 44908;
                lArr1[i19] = Test.iFld;
                for (i21 = 1; i21 < 2; i21++) {
                    i += (0 + (i21 * i21));
                }
                for (i23 = 1; i23 < 2; i23++) {
                    i22 *= i17;
                    iFld1 = i24;
                    i <<= (int)8L;
                    iFld1 = i20;
                }
            }
            for (i25 = 211; 10 < i25; i25--) {
                i27 = 1;
                while (++i27 < 2) {
                    Test.sFld -= (short)i27;
                    i22 = 100;
                    Test.iFld += i21;
                    Test.sFld |= (short)Test.instanceCount;
                    i18 = (int)Test.instanceCount;
                    i26 -= Test.sFld;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
