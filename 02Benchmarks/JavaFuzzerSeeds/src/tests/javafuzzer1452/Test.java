package tests.javafuzzer1452;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:57:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=162L;
    public float fFld=-28.184F;
    public static byte byFld=-47;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8402);
        FuzzerUtils.init(Test.dArrFld, 0.42584);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=27026, i5=-61826, i6=21187, i7=9;
        double d2=1.61895, d3=0.15407;
        float f=99.241F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2L);

        i4 *= i4;
        Test.instanceCount &= i4;
        Test.instanceCount = (long)d2;
        if (b) {
            Test.instanceCount += (long)d2;
        } else if (b) {
            for (long l : lArr) {
                for (i5 = 1; i5 < 4; ++i5) {
                    Test.iArrFld[i5 - 1][i5 + 1] -= 110;
                    l -= 48754;
                    Test.byFld += (byte)(i5 + i4);
                    if (true) break;
                    d2 = 0;
                    for (d3 = 1; d3 < 2; d3++) {
                        Test.iArrFld[i5][(int)(d3 + 1)] += i4;
                        f -= i6;
                    }
                }
            }
        }
        vMeth2_check_sum += i4 + Double.doubleToLongBits(d2) + i5 + i6 + Double.doubleToLongBits(d3) + i7 +
            Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i3) {

        int i8=1, i9=-35, i10=-13, i11=-34;
        float f1=0.678F, f2=0.799F;
        double d4=-51.2866, d5=0.96327;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 7L);

        Test.instanceCount -= Test.instanceCount;
        vMeth2();
        for (i8 = 11; i8 < 224; ++i8) {
            switch ((i8 % 9) + 4) {
            case 4:
                lArr1[i8 + 1][i8 + 1] -= i3;
                i9 += (i8 * i8);
            case 5:
                f1 = 1;
                while (++f1 < 8) {
                    i3 *= (int)d4;
                }
            case 6:
                switch (((12 >>> 1) % 8) + 87) {
                case 87:
                    for (i10 = 1; i10 < 8; ++i10) {
                        switch (((i10 % 7) * 5) + 119) {
                        case 123:
                            if (Test.bFld) {
                                i11 -= (int)f1;
                                i3 >>= (int)-5218210247915558784L;
                                i3 += i3;
                            }
                            break;
                        case 131:
                        case 152:
                            f2 *= 59243;
                        case 133:
                            lArr1[i8][i10 - 1] -= i3;
                            break;
                        case 136:
                            d5 *= Test.byFld;
                            break;
                        case 138:
                            i9 = i3;
                            break;
                        case 140:
                            d5 = i9;
                            break;
                        }
                    }
                    break;
                case 88:
                    i3 += (int)Test.instanceCount;
                    break;
                case 89:
                    Test.instanceCount = i11;
                case 90:
                    Test.instanceCount >>= i9;
                case 91:
                    i11 = (int)f1;
                    break;
                case 92:
                case 93:
                    i9 += (i8 ^ i9);
                case 94:
                    Test.dArrFld[i8 - 1] = -186L;
                    break;
                }
                break;
            case 7:
                lArr1[i8][i8 + 1] = Test.byFld;
                break;
            case 8:
                Test.dArrFld[i8 - 1] *= 10763;
                break;
            case 9:
                Test.instanceCount += (i8 | i11);
                break;
            case 10:
                Test.iArrFld[i8 - 1][i8 + 1] *= (int)Test.instanceCount;
            case 11:
                Test.byFld += (byte)(i8 ^ i3);
                break;
            case 12:
                Test.iArrFld[i8][i8 + 1] += (int)7727330041800890672L;
                break;
            }
        }
        vMeth1_check_sum += i3 + i8 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d4) + i10 + i11 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(d5) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i2) {

        double d1=-65.17015;
        short s1=2455;
        int i12=-162, i13=1, i14=31756;
        float f3=2.2F;

        d1 = 1;
        while (++d1 < 187) {
            i2 += i2;
            vMeth1(i2);
            i2 *= s1;
            for (i12 = 1; i12 < 9; ++i12) {
                if (i13 != 0) {
                    vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + s1 + i12 + i13 + Float.floatToIntBits(f3) +
                        i14;
                    return;
                }
            }
            i13 = i12;
            i2 = (int)1.766F;
        }
        i2 *= -52;
        f3 *= Test.instanceCount;
        i14 = 359;
        while (--i14 > 0) {
            if (false) {
                i2 += (int)d1;
                Test.byFld = (byte)i13;
                i13 *= i12;
            } else {
                if (i12 != 0) {
                    vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + s1 + i12 + i13 + Float.floatToIntBits(f3) +
                        i14;
                    return;
                }
                vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + s1 + i12 + i13 + Float.floatToIntBits(f3) + i14;
                return;
            }
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + s1 + i12 + i13 + Float.floatToIntBits(f3) + i14;
    }

    public void mainTest(String[] strArr1) {

        int i=-52813, i1=-4, i15=-219, i16=-4955, i17=-32613, i18=19;
        short s=-20105;
        double d=2.75833;

        i -= (int)Long.reverseBytes((Test.instanceCount + i) * (i + i));
        i = (int)(((-(fFld - s)) + (d * i)) + ((Test.iArrFld[(-240 >>> 1) % N][(i1 >>> 1) % N] = i) * (i1++)));
        vMeth(i);
        s += (short)12L;
        i1 -= 3;
        i1 = i1;
        for (i15 = 3; i15 < 154; i15++) {
            i = i1;
            i1 = i15;
            for (i17 = i15; i17 < 166; ++i17) {
                switch ((i15 % 4) + 114) {
                case 114:
                    Test.instanceCount = (long)d;
                    Test.instanceCount ^= Test.instanceCount;
                case 115:
                    d += i;
                    i += (i17 ^ i16);
                    break;
                case 116:
                    Test.bFld = Test.bFld;
                case 117:
                    i1 *= i15;
                    i16 += i17;
                    Test.instanceCount >>= Test.instanceCount;
                    i1 >>>= (int)Test.instanceCount;
                default:
                    lArrFld[i17 + 1] = Test.instanceCount;
                    i16 += -9;
                    Test.iArrFld[i15 - 1][i17 + 1] -= (int)fFld;
                    Test.iArrFld[i17][i17] += (int)Test.instanceCount;
                }
                s = (short)i15;
                i16 = i1;
                s -= (short)Test.instanceCount;
                i /= (int)((long)(d) | 1);
                i18 = i17;
                i += (((i17 * i17) + i17) - i17);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
