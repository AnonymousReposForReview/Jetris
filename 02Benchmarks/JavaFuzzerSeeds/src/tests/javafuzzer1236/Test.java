package tests.javafuzzer1236;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:53:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2251810570L;
    public static byte byFld=104;
    public static short sFld=-9677;
    public static double dFld=-84.4774;
    public static float fFld=1.951F;
    public boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i4, int i5, int i6) {

        int i7=56204, i8=-31443, iArr1[]=new int[N];
        boolean b=false;
        double d1=-3.42930;

        FuzzerUtils.init(iArr1, -31470);

        i4 = (int)Test.instanceCount;
        Test.byFld &= (byte)Test.instanceCount;
        for (i7 = 3; i7 < 251; ++i7) {
            switch ((i7 % 1) + 19) {
            case 19:
                Test.sFld += (short)i5;
                i6 /= (int)(Test.instanceCount | 1);
                Test.byFld = (byte)i6;
                break;
            }
            i4 += (10741 + (i7 * i7));
            if (b) {
                if (b) break;
            } else {
                i8 += (((i7 * i6) + i8) - i7);
            }
            i6 -= (int)d1;
            i8 = (int)-47997L;
            iArr1 = iArr1;
            iArr1[i7 - 1] += i8;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth() {

        int i2=-159, i3=-65467, i9=-22657, i10=-233, i11=4, i12=231;
        double d2=-2.67558;
        float f=1.770F;

        for (i2 = 13; i2 < 213; ++i2) {
            if (i2 != 0) {
            }
            i3 = (i3++);
        }
        lMeth1(i2, i2, i3);
        Test.instanceCount = i2;
        d2 = i2;
        Test.instanceCount += i2;
        Test.instanceCount >>= i3;
        i3 = (int)Test.instanceCount;
        Test.instanceCount <<= i3;
        for (i9 = 331; 6 < i9; --i9) {
            i3 -= (int)Test.instanceCount;
            for (i11 = 1; i11 < 5; ++i11) {
                i3 = (int)-125L;
                f = f;
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i1=15698, i13=-203, iArr2[][]=new int[N][N];
        double d3=-1.128021;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -2);
        FuzzerUtils.init(lArr, 4377083095281767045L);

        i1 = 1;
        while (++i1 < 335) {
            if (bFld) {
                lMeth();
                Test.dFld = Test.instanceCount;
                iArr2 = iArr2;
                switch (((i1 % 3) * 5) + 76) {
                case 77:
                case 83:
                    Test.instanceCount -= i1;
                    lArr[i1] -= i1;
                    d3 = 1;
                    do {
                        Test.instanceCount = i1;
                        i13 *= (int)Test.fFld;
                        i13 >>= i1;
                    } while (++d3 < 5);
                    i13 += (i1 ^ i1);
                    break;
                case 80:
                    i13 += (i1 - i13);
                    lArr[i1 - 1] = i13;
                    break;
                }
            } else {
                i13 %= (int)(i13 | 1);
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d3) + i13 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i14=107, i15=-58, i16=5, i17=16, i18=-252, i19=-235, i20=201, iArr[]=new int[N];
        double d=-54.63111;
        long l=3342363274L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 64573);
        FuzzerUtils.init(lArr1, 2104900034L);

        i = 1;
        do {
            d = (++iArr[i]);
            vMeth();
        } while (++i < 387);
        bFld = bFld;
        for (i14 = 11; 284 > i14; i14++) {
            for (i16 = 3; i16 < 92; ++i16) {
                switch ((i14 % 4) + 90) {
                case 90:
                case 91:
                    switch (((i16 % 1) * 5) + 59) {
                    case 64:
                        for (l = 1; l < 2; ++l) {
                            try {
                                i15 = (iArr[i16 + 1] % i14);
                                i15 = (219 / i18);
                                i15 = (i18 % -4480);
                            } catch (ArithmeticException a_e) {}
                            switch (((i16 % 6) * 5) + 79) {
                            case 109:
                                i17 += (int)Test.fFld;
                                switch (((i16 % 7) * 5) + 59) {
                                case 83:
                                    i18 = 12;
                                case 64:
                                    i15 >>= i;
                                    i17 += (int)l;
                                    i17 >>= Test.byFld;
                                    break;
                                case 93:
                                    i17 = i;
                                    lArr1[i14] = Test.sFld;
                                    break;
                                case 60:
                                    i18 += (int)l;
                                    if (bFld) continue;
                                    Test.byFld = (byte)Test.instanceCount;
                                    break;
                                case 72:
                                    switch ((i16 % 6) + 84) {
                                    case 84:
                                        switch ((i14 % 4) + 59) {
                                        case 59:
                                            if (bFld) break;
                                            i15 += (int)1.573F;
                                            iArr[i14 + 1] -= (int)Test.instanceCount;
                                            Test.fFld = l;
                                            break;
                                        case 60:
                                            i18 = 12719;
                                        case 61:
                                            try {
                                                i15 = (i15 % i17);
                                                i18 = (25226 % i);
                                                i17 = (i18 % i15);
                                            } catch (ArithmeticException a_e) {}
                                            break;
                                        case 62:
                                            Test.sFld += (short)(((l * i16) + i17) - i16);
                                        default:
                                            Test.byFld += (byte)(-328908816L + (l * l));
                                        }
                                    case 85:
                                    case 86:
                                        i18 %= 22023;
                                    case 87:
                                        Test.fFld = i16;
                                    case 88:
                                        Test.instanceCount += l;
                                        break;
                                    case 89:
                                    }
                                case 77:
                                    Test.instanceCount += i19;
                                    break;
                                case 66:
                                    i18 += (0 + (l * l));
                                    break;
                                }
                                break;
                            case 83:
                                if (bFld) break;
                            case 88:
                                i17 += (int)(((l * i15) + i16) - Test.fFld);
                                break;
                            case 90:
                                i17 += (int)(((l * Test.fFld) + i19) - i19);
                                break;
                            case 97:
                                iArr[(i >>> 1) % N] >>= i16;
                                break;
                            case 103:
                                i18 -= -7;
                                break;
                            }
                        }
                        break;
                    }
                    break;
                case 92:
                    i20 += i;
                    break;
                case 93:
                    i19 = i15;
                default:
                    i19 -= (int)l;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
