package tests.javafuzzer2904;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:43:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2206206727L;
    public static short sFld=14288;
    public static volatile double dFld=1.20902;
    public static float fFld=0.677F;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i6) {

        long l=28965L;
        int i7=55839, i8=0, i9=10, iArr1[]=new int[N];
        float f1=-74.1012F, f2=2.562F;

        FuzzerUtils.init(iArr1, 9);

        iArr1[(i6 >>> 1) % N] = i6;
        l = i6;
        for (i7 = 13; i7 < 329; i7 += 3) {
            Test.instanceCount = i6;
            for (f1 = 1; f1 < 15; ++f1) {
                Test.instanceCount = 2199519135L;
            }
            i8 <<= i9;
            f2 = 1.197F;
            i9 = (int)Test.dFld;
        }
        l = l;
        vMeth1_check_sum += s + i6 + l + i7 + i8 + Float.floatToIntBits(f1) + i9 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i5=10, i10=58921, i11=-122, i12=10, iArr[]=new int[N];
        double d=2.124897;
        float f=20.467F;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 22);
        FuzzerUtils.init(sArr, (short)17130);

        Test.sFld = (short)(((Test.instanceCount - i5) - (i5 * 0)) * d);
        iArr[(-64 >>> 1) % N] -= (int)((--i5) - ((iArr[(i5 >>> 1) % N]--) - (f + Test.sFld)));
        i5 += 163;
        b = (b = ((i5 != i5) && (false & (Test.bArrFld[(i5 >>> 1) % N] = false))));
        i5 = (int)(-((29310L - sArr[(i5 >>> 1) % N]) + (i5 - -10)));
        vMeth1(Test.sFld, i5);
        i5 *= i5;
        i10 = 1;
        do {
            i11 = 1;
            while (++i11 < 4) {
                if (b) continue;
                i12 = 1;
                do {
                    Test.instanceCount -= i10;
                    iArr[i11] = (int)-199L;
                    d -= -14640;
                } while (++i12 < 1);
                Test.instanceCount += i11;
            }
        } while (++i10 < 384);
        vMeth_check_sum += i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + (b ? 1 : 0) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vSmallMeth() {

        int i4=-12;

        i4 = (int)(Math.abs(i4 * i4) * ((-Math.abs(6184165608052346720L)) + Math.abs(-64.40F)));
        vMeth();
        vSmallMeth_check_sum += i4;
    }

    public void mainTest(String[] strArr1) {

        int i=-28423, i1=44897, i2=-63868, i3=-3, i13=54679, i14=52511, i15=2, i16=-253, iArr2[]=new int[N];
        boolean b1=false;
        short sArr1[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -7797);
        FuzzerUtils.init(sArr1, (short)-11091);
        FuzzerUtils.init(lArr, -3004911791026120992L);

        for (i = 6; i < 243; i++) {
            Test.sFld = (short)i;
        }
        for (i2 = 9; i2 < 393; i2++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
            for (i13 = 4; i13 < 66; ++i13) {
                iArr2[i13 - 1] += (int)Test.fFld;
                i1 = i;
                iArr2[i13 - 1] = (int)Test.fFld;
                sArr1[i13 + 1] = (short)-4;
                switch (((i13 % 10) * 5) + 93) {
                case 138:
                    try {
                        i1 = (iArr2[i13 - 1] / 254);
                        iArr2[i2] = (-1911280158 / i14);
                        iArr2[i2 - 1] = (i1 / 24063);
                    } catch (ArithmeticException a_e) {}
                case 105:
                case 103:
                    lArr[i2] -= Test.instanceCount;
                    i14 -= i;
                    iArr2 = FuzzerUtils.int1array(N, (int)59155);
                    break;
                case 120:
                    i3 -= 151;
                    break;
                case 133:
                    for (i15 = 1; i15 < 2; ++i15) {
                        iArr2 = FuzzerUtils.int1array(N, (int)-59088);
                        Test.instanceCount += (((i15 * i16) + i14) - Test.fFld);
                        i16 >>= i14;
                        b1 = b1;
                        iArr2[i13] = i2;
                        switch (((-9 >>> 1) % 2) + 117) {
                        case 117:
                            b1 = false;
                            Test.instanceCount += 220;
                            Test.fFld += i2;
                        case 118:
                            i3 *= (int)96.130891;
                            if (b1) continue;
                            i3 = i14;
                            Test.dFld = i16;
                            break;
                        }
                        Test.fFld = i14;
                    }
                    break;
                case 129:
                    i3 += (i13 * i13);
                    break;
                case 115:
                    if (b1) continue;
                    break;
                case 109:
                    iArr2[i2 + 1] -= (int)Test.fFld;
                    break;
                case 131:
                    lArr[i2] += (long)Test.dFld;
                    break;
                case 136:
                    if (b1) break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
