package tests.javafuzzer2527;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:14:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static int iFld=-27406;
    public float fFld=0.723F;
    public static float fFld1=-96.577F;
    public short sFld=17342;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7980666181168210962L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {

        int i3=-30179, i4=-210, i5=14, i6=-40, iArr1[]=new int[N];
        byte by=-100;
        float fArr[]=new float[N];
        double dArr[]=new double[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 0.603F);
        FuzzerUtils.init(iArr1, 189);
        FuzzerUtils.init(dArr, 40.103514);
        FuzzerUtils.init(lArr, -7L);

        i3 = 1;
        do {
            l1 >>>= i3;
            Test.lArrFld[i3 - 1] -= Test.iFld;
            i4 += i3;
            fArr = FuzzerUtils.float1array(N, (float)1.411F);
            switch ((i3 % 8) + 41) {
            case 41:
                Test.iFld += Test.iFld;
                for (i5 = 1; i5 < 5; ++i5) {
                    i6 -= i4;
                    try {
                        i6 = (i5 % -27);
                        iArr1[i3] = (i3 / -195);
                        Test.iFld = (iArr1[i5] % i6);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = i4;
                    l1 += i3;
                    i4 *= -5;
                    dArr = dArr;
                    Test.instanceCount += (((i5 * l1) + Test.iFld) - Test.fFld1);
                }
            case 42:
                i6 += -12;
                break;
            case 43:
                i6 = -7;
                break;
            case 44:
                iArr1[i3 - 1] += Test.iFld;
                break;
            case 45:
                lArr = lArr;
            case 46:
                l1 += (((i3 * l1) + Test.instanceCount) - i4);
                break;
            case 47:
                iArr1[i3 - 1] = by;
                break;
            case 48:
                Test.iFld = Test.iFld;
                break;
            }
        } while (++i3 < 303);
        vMeth_check_sum += l1 + i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1, int i2, long l) {

        int i7=9, i8=-40909, i9=19107, i10=27;
        byte by1=24;
        double d=-1.81786;

        Test.instanceCount += (long)(((--Test.iFld) + (Test.iFld * i2)) - ((8 + (Test.fFld1 * 49676)) + 185));
        i2 = (int)(--l);
        vMeth(l);
        for (i7 = 9; i7 < 236; ++i7) {
            Test.iFld <<= i7;
            by1 *= (byte)Test.instanceCount;
            Test.fFld1 = Test.fFld1;
            l = i8;
            i2 += (-6 + (i7 * i7));
            for (i9 = i7; i9 < 7; ++i9) {
                Test.instanceCount += (((i9 * i10) + i2) - i2);
                i10 += i9;
            }
            l &= 2830415749L;
            Test.fFld1 = (float)d;
        }
        i1 >>= i2;
        long meth_res = i1 + i2 + l + i7 + i8 + by1 + i9 + i10 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        float f=-76.708F;

        f += Math.min(Test.iFld, iMeth(i, i, Test.instanceCount));
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i11=-251, i12=-9, i13=5, i14=-59, i15=8, i16=25234, i17=-19935, i18=-145, i19=10, iArr[]=new int[N];
        double d1=0.62401;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -95);
        FuzzerUtils.init(fArr1, 101.119F);

        Test.instanceCount -= (iArr[(Test.iFld >>> 1) % N]++);
        Test.iFld <<= (int)((--Test.iFld) + (-(-Test.instanceCount)));
        Test.iFld *= (int)((--fFld) - (-14 - (-18.227F - (++Test.iFld))));
        for (int smallinvoc=0; smallinvoc<738; smallinvoc++) vSmallMeth(Test.iFld);
        i11 = 1;
        do {
            for (i12 = 8; i12 < 131; ++i12) {
                for (i14 = 2; i14 > 1; --i14) {
                    Test.lArrFld[i11 + 1] += i14;
                    i13 = Test.iFld;
                }
                fArr1 = fArr1;
                iArr[i11 - 1] ^= i15;
                i15 += (((i12 * i15) + Test.instanceCount) - Test.iFld);
                Test.lArrFld[i11 - 1] = -11635L;
                Test.lArrFld[i11 - 1] = Test.instanceCount;
                Test.iFld <<= (int)Test.instanceCount;
                i15 = i13;
                Test.iFld += (i12 ^ i13);
            }
            Test.instanceCount *= i13;
            sFld -= (short)i12;
            for (i16 = 5; i16 < 131; i16 += 2) {
                i18 = 1;
                do {
                    i15 += i11;
                    Test.instanceCount += (i18 * i18);
                    Test.iFld *= (int)d1;
                    Test.lArrFld[i16 - 1] -= (long)d1;
                    i17 += (i18 | i19);
                    Test.instanceCount -= Test.instanceCount;
                } while (++i18 < 3);
                i19 -= (int)Test.instanceCount;
                i17 += (((i16 * Test.iFld) + fFld) - i16);
                iArr[i11 + 1] += (int)Test.instanceCount;
            }
        } while (++i11 < 191);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
