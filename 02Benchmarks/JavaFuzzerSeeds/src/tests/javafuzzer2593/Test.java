package tests.javafuzzer2593;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:59:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-92L;
    public volatile byte byFld=-1;
    public static boolean bFld=true;
    public static short sFld=20933;
    public static float fFld=30.243F;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 179);
        FuzzerUtils.init(Test.lArrFld, -46078L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i6) {

        int i7=-6, i8=20232, i9=6, i10=-150;
        boolean b=true;
        byte by=99;
        double d2=66.119941;
        short s1=-25796;

        for (i7 = 4; 179 > i7; ++i7) {
            if (b) {
                Test.bFld = Test.bFld;
                if (Test.bFld) continue;
            } else {
                l *= by;
                i9 = 1;
                while (++i9 < 9) {
                    i8 += (int)l;
                    i8 += i9;
                }
                for (d2 = 1; d2 < 9; d2++) {
                    by += (byte)(1252 + (d2 * d2));
                }
            }
            i10 >>= s1;
            Test.instanceCount <<= i8;
            i8 >>= i9;
        }
        s1 -= (short)l;
        i10 += 6;
        vMeth1_check_sum += l + i6 + i7 + i8 + (b ? 1 : 0) + by + i9 + Double.doubleToLongBits(d2) + i10 + s1;
    }

    public static float fMeth(float f1, int i5, double d1) {

        int i11=48117, i12=2, i13=-209, i14=7516;
        long l1=8L;
        short s2=16173;

        i5 = (int)(Math.max(Math.abs(-12), 4 + (i5 - i5)) - ((i5++) - (Test.instanceCount--)));
        vMeth1(Test.instanceCount, i5);
        for (i11 = 316; 4 < i11; --i11) {
            i13 = 1;
            do {
                i5 = 72;
                i12 += (int)(-43523L + (i13 * i13));
                i12 = (int)f1;
                for (l1 = 1; i13 < l1; l1--) {
                    s2 += (short)(((l1 * i11) + i14) - i12);
                    d1 -= 158;
                    Test.instanceCount += (l1 * l1);
                    Test.lArrFld[i11 - 1] <<= i11;
                    Test.instanceCount = 20631;
                    Test.iArrFld[i11 + 1] = i12;
                    f1 += l1;
                }
            } while (++i13 < 5);
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + l1 + i14 + s2;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i1, float f) {

        double d=0.8599;
        int i2=1, i3=62, i4=130, i15=7, i16=0, i17=7;

        i1 = (int)(i1 *= (int)d);
        byFld *= (byte)(--Test.iArrFld[(i1 >>> 1) % N]);
        i2 = 1;
        while (++i2 < 161) {
            for (i3 = i2; i3 < 10; i3++) {
                if (i1 != 0) {
                    vMeth_check_sum += i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + i3 + i4 + i15 +
                        i16 + i17;
                    return;
                }
                i4 = (int)(fMeth(f, i4, d) - i4);
            }
            i1 -= i3;
            f = f;
            f *= Test.instanceCount;
            Test.sFld += (short)(1575408569360177772L + (i2 * i2));
            i15 = 1;
            while (++i15 < 10) {
                for (i16 = 1; i16 > i15; i16--) {
                    i17 += (int)71L;
                    Test.iArrFld[i2] -= (int)Test.instanceCount;
                    f = 246;
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + i3 + i4 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=-92, i18=-11579, i19=7, i20=58015, i21=-51972, i23=124, i24=5, i25=-121, iArr[]=new int[N];
        short s=-26935, sArr[]=new short[N];
        long l2=19638L, l3=3995333607244044272L;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 61978);
        FuzzerUtils.init(sArr, (short)-3682);
        FuzzerUtils.init(dArr, -116.124047);

        i <<= (int)((iArr[(i >>> 1) % N] -= (-(-2 >> s))) - Test.instanceCount);
        vMeth(-222, Test.fFld);
        for (i18 = 10; 383 > i18; ++i18) {
            i20 = 68;
            do {
                for (l2 = 1; l2 > 1; l2--) {
                    int i22=-13132;
                    i = i21;
                    i22 += (int)l2;
                    if (Test.bFld) break;
                    s = (short)-3.842F;
                }
                i21 = i20;
                byArrFld[i20] = (byte)i;
                switch ((i20 % 9) + 19) {
                case 19:
                    for (l3 = 1; l3 < 1; ++l3) {
                        i = i19;
                        sArr[(int)(l3 + 1)] += (short)i19;
                        Test.instanceCount = Test.instanceCount;
                        i = (int)l3;
                    }
                case 20:
                    i23 <<= i20;
                    break;
                case 21:
                    switch (((i20 % 8) * 5) + 106) {
                    case 126:
                        if (Test.bFld) {
                            for (i24 = 1; i24 < 1; ++i24) {
                                switch ((i20 % 1) + 80) {
                                case 80:
                                    dArr[i20] %= -4;
                                    break;
                                }
                                if (Test.bFld) break;
                                i21 += i19;
                                i25 <<= i18;
                                i21 = i19;
                                i23 += i19;
                                Test.lArrFld[i20] >>= i18;
                                Test.instanceCount += i24;
                            }
                        } else {
                            Test.instanceCount += (-3135119248L + (i20 * i20));
                        }
                        break;
                    case 132:
                        byFld -= (byte)Test.fFld;
                        break;
                    case 134:
                        i21 = i18;
                        break;
                    case 112:
                        iArr[i20 - 1] *= i19;
                    case 140:
                        iArr[i18 - 1] *= (int)Test.instanceCount;
                        break;
                    case 142:
                        i21 *= (int)Test.instanceCount;
                    case 109:
                        Test.instanceCount += i;
                        break;
                    case 118:
                        i19 += (((i20 * i24) + byFld) - Test.fFld);
                        break;
                    default:
                        i -= i19;
                    }
                    break;
                case 22:
                    Test.iArrFld[i20 - 1] *= (int)1.849F;
                    break;
                case 23:
                    i += 12;
                    break;
                case 24:
                    i19 = i24;
                    break;
                case 25:
                    i25 += (i20 * i20);
                    break;
                case 26:
                    i *= 11;
                    break;
                case 27:
                    Test.instanceCount -= i23;
                    break;
                default:
                    i19 = (int)Test.fFld;
                }
            } while (--i20 > 0);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
