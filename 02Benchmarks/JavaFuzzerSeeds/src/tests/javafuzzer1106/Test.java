package tests.javafuzzer1106;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8499480453389869349L;
    public static int iFld=-191;
    public static float fFld=76.375F;
    public static double dFld=4.75811;
    public byte byFld=82;
    public boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.fArrFld, -118.732F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d) {

        boolean b=false;
        float f1=0.273F;
        int i1=-5754, i2=-44568, i3=-12207, i4=213;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)14058);

        Test.iFld -= Test.iFld;
        sArr[(Test.iFld >>> 1) % N] = (short)Test.iFld;
        b = true;
        Test.iFld >>= Test.iFld;
        f1 = 1;
        while (++f1 < 314) {
            Test.iFld = (int)d;
            if (b) break;
            Test.iFld += (int)(f1 + Test.iFld);
            for (i1 = 1; i1 < 5; ++i1) {
                for (i3 = 1; i3 < 2; i3++) {
                    Test.iFld += (i3 * i3);
                    Test.instanceCount >>>= i1;
                    Test.iFld = -56814;
                    i2 += Test.iFld;
                    Test.instanceCount %= (Test.instanceCount | 1);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        float f=-2.757F;
        int i=29, i5=110, i6=14, i7=-14740, iArr[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, -37766);

        for (f = 5; f < 141; ++f) {
            if (((i++) - lMeth(-101.117443)) != Test.instanceCount) continue;
            Test.iFld = (int)-2.9129;
            Test.iFld += -73;
            iArr[(int)(f - 1)] = Test.iFld;
            i5 = 1;
            do {
                Test.iFld -= (int)Test.instanceCount;
                if (b1) {
                    i = i5;
                    iArr[i5] <<= 57;
                    vMeth1_check_sum += Float.floatToIntBits(f) + i + i5 + i6 + i7 + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                } else if (b1) {
                    i += (int)(-9957L + (i5 * i5));
                    Test.fFld -= i5;
                    for (i6 = 1; 1 > i6; i6++) {
                        Test.instanceCount >>= i7;
                        i7 = Test.iFld;
                    }
                }
            } while (++i5 < 12);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i + i5 + i6 + i7 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(long l) {

        int i8=-129, i9=250, i10=-38192, i11=9, i12=103, iArr1[]=new int[N];
        boolean b2=false;
        long l1=-3042608219L;

        FuzzerUtils.init(iArr1, -122);

        vMeth1();
        Test.fFld -= Test.iFld;
        Test.fFld += 3;
        Test.iFld += (int)Test.fFld;
        for (i8 = 2; i8 < 167; ++i8) {
            b2 = b2;
            iArr1[i8] = Test.iFld;
            for (i10 = 1; i10 < 10; ++i10) {
                Test.iFld = Test.iFld;
                for (l1 = 1; l1 < 2; ++l1) {
                    i12 /= (int)((long)(Test.fFld) | 1);
                    Test.fFld += i11;
                    if (b2) continue;
                    i12 -= (int)l;
                    i12 += i10;
                }
            }
        }
        vMeth_check_sum += l + i8 + i9 + (b2 ? 1 : 0) + i10 + i11 + l1 + i12 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i13=-4, i14=-11, i15=-31939, i16=-7, i17=-60, i18=122;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 114.113467);

        vMeth(150L);
        Test.iFld = 20225;
        Test.iFld = 5;
        for (i13 = 8; i13 < 213; i13 += 2) {
            for (i15 = 246; i15 > 15; --i15) {
                boolean b3=true;
                Test.iFld >>>= i14;
                if (b3) break;
                Test.iFld = (int)Test.dFld;
                Test.dFld -= i16;
                i14 += (i15 * i15);
                i14 = i15;
                Test.fFld += (float)Test.dFld;
                Test.instanceCount = i13;
                bArrFld[i15 + 1][i13 - 1] = b3;
                Test.iFld += (i15 + byFld);
            }
        }
        Test.fFld = (float)Test.dFld;
        dArr[(Test.iFld >>> 1) % N][(-6 >>> 1) % N] = Test.instanceCount;
        i14 = 244;
        Test.iFld = i16;
        Test.iArrFld[(Test.iFld >>> 1) % N] >>= (int)Test.instanceCount;
        Test.instanceCount = i16;
        Test.iArrFld[(i15 >>> 1) % N] += i16;
        Test.fFld -= i13;
        for (i17 = 3; i17 < 232; i17 += 3) {
            Test.fArrFld[i17] -= Test.iFld;
            Test.dFld -= Test.iFld;
            i14 /= (int)(i15 | 1);
            i14 = Test.iFld;
            Test.iFld += i17;
            i16 %= (int)(Test.iFld | 1);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
