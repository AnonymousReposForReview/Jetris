package tests.javafuzzer2913;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:58:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=24006L;
    public static float fFld=1.638F;
    public static volatile int iFld=217;
    public static volatile int iFld1=50347;
    public static volatile byte byFld=22;
    public double dFld=18.27811;
    public short sFld=23325;

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth() {

        short s=24557;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -59);

        iArr[(Test.iFld >>> 1) % N] |= (Test.iFld--);
        Test.fFld -= (-(s--));
        Test.iFld += iArr[(Test.iFld1 >>> 1) % N];
        long meth_res = s + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i8, int i9, int i10) {

        int i11=18429, i12=29, i13=-146, i14=-59346, i15=-6, iArr1[]=new int[N];
        short s1=20632;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 24555);

        i11 = 1;
        while (++i11 < 272) {
            Test.iFld1 += (i11 + Test.instanceCount);
            iArr1[i11] = Test.iFld1;
            Test.instanceCount = Test.instanceCount;
            Test.instanceCount <<= Test.iFld1;
            if (b1) {
                for (i12 = 1; i12 < 6; i12++) {
                    i8 += (34956 + (i12 * i12));
                    switch (((-140 >>> 1) % 7) + 112) {
                    case 112:
                        i10 += (i12 * i12);
                        for (i14 = 1; i14 < 2; i14++) {
                            if (Test.iFld != 0) {
                                vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s1 + (b1 ? 1 : 0) +
                                    FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            i15 += Test.iFld;
                            iArr1[i12 - 1] &= i12;
                            Test.instanceCount += (i14 | i8);
                        }
                    case 113:
                        Test.iFld1 += i12;
                        break;
                    case 114:
                    case 115:
                    case 116:
                        Test.fFld -= s1;
                    case 117:
                        if (b1) continue;
                        break;
                    case 118:
                        Test.iFld += (i12 * i12);
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(long l1) {

        int i5=0, i6=649, i7=-6, i16=235, i17=63809, iArr2[]=new int[N];
        double d1=0.121671;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -191);
        FuzzerUtils.init(lArr, -1034201516L);

        for (i5 = 9; i5 < 275; i5++) {
            i7 = 6;
            while ((i7 -= 3) > 0) {
                vMeth(46808, Test.iFld1, i5);
                d1 -= Test.fFld;
                i6 >>= -32291;
                Test.instanceCount *= i5;
                iArr2[i7 - 1] = (int)Test.instanceCount;
                if (false) {
                    Test.iFld >>>= i6;
                    for (i16 = 1; 3 > i16; ++i16) {
                        Test.iFld += -3;
                        i6 = (int)Test.instanceCount;
                        lArr[i5] = Test.iFld1;
                    }
                } else {
                    Test.fFld += i7;
                    Test.instanceCount += (i7 * i7);
                }
            }
        }
        long meth_res = l1 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i16 + i17 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(byte by, double d, int i2) {

        int i3=-101, i4=4, i18=-14, i19=-196, i20=61283, i21=-14, iArr3[]=new int[N];
        boolean b2=false;
        short s2=26902;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, 126);
        FuzzerUtils.init(lArr1, -127L);

        if (b2) {
            for (i3 = 1; 270 > i3; ++i3) {
                i2 >>>= (int)((i2 /= (int)((Test.instanceCount >> i4) | 1)) + i3);
                i4 += (int)(iMeth() - ((Test.instanceCount * Test.instanceCount) - iMeth1(Test.instanceCount)));
                Test.instanceCount ^= Test.instanceCount;
                for (i18 = i3; i18 < 6; ++i18) {
                    iArr3[i18 - 1] -= 61392;
                    d = d;
                    for (i20 = 1; 1 > i20; ++i20) {
                        switch ((i18 % 9) + 27) {
                        case 27:
                            iArr3[i3] -= (int)3690372222L;
                            Test.iFld1 += (i20 * i20);
                            if (b2) {
                                Test.instanceCount += Test.iFld;
                                i2 += (int)Test.instanceCount;
                            }
                            break;
                        case 28:
                            if (b2) continue;
                            break;
                        case 29:
                            i21 = (int)Test.fFld;
                            break;
                        case 30:
                        case 31:
                            Test.instanceCount += (long)1.88644;
                            break;
                        case 32:
                            i2 = i4;
                        case 33:
                            Test.iFld = (int)1L;
                        case 34:
                            i4 /= (int)((long)(Test.fFld) | 1);
                            break;
                        case 35:
                            iArr3[i3] |= (int)Test.instanceCount;
                            break;
                        default:
                            s2 >>= (short)-9;
                        }
                    }
                }
            }
        } else if (b2) {
            d += by;
        } else {
            lArr1[(i4 >>> 1) % N] = i21;
        }
        long meth_res = by + Double.doubleToLongBits(d) + i2 + i3 + i4 + i18 + i19 + i20 + i21 + (b2 ? 1 : 0) + s2 +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-4L;
        int i=-184, i1=33362, i22=180, i23=20656, i24=-13939, i25=-11;
        boolean b=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-1112);

        for (l = 11; l < 218; l++) {
            i1 = 1;
            do {
                b = (((Test.instanceCount % (i | 1)) - (Test.fFld + i)) != lMeth(Test.byFld, dFld, i1));
                switch ((int)(((l % 8) * 5) + 99)) {
                case 137:
                    switch ((i1 % 1) + 35) {
                    case 35:
                        Test.iFld1 += (int)l;
                        Test.instanceCount += Test.iFld;
                        Test.iFld1 += 100;
                        break;
                    }
                    i += Test.iFld;
                    break;
                case 108:
                    Test.iFld /= (int)(sFld | 1);
                    break;
                case 116:
                    if (b) {
                        for (i22 = 1; 1 > i22; ++i22) {
                            Test.fFld = 223;
                            i23 -= sFld;
                            Test.iFld >>= -50893;
                            i23 >>= -18122;
                            b = b;
                        }
                        for (i24 = 1; i24 < 1; i24++) {
                            Test.instanceCount = 187;
                            i += (int)dFld;
                            Test.instanceCount = Test.iFld;
                            if (b) break;
                        }
                    } else if (b) {
                        Test.instanceCount = i23;
                        Test.instanceCount = Test.iFld;
                        Test.instanceCount += (107L + (i1 * i1));
                        i25 = (int)Test.fFld;
                    }
                    Test.fFld *= i24;
                    Test.iFld1 *= i23;
                    if (false) break;
                    break;
                case 115:
                    Test.instanceCount += (i1 + i24);
                    break;
                case 123:
                    Test.iFld1 *= (int)Test.instanceCount;
                    break;
                case 127:
                    Test.fFld = i22;
                    break;
                case 139:
                    Test.instanceCount += (i1 ^ i1);
                case 104:
                    sArr = sArr;
                    break;
                }
            } while (++i1 < 121);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
