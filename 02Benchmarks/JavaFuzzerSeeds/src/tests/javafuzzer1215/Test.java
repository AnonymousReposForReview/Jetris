package tests.javafuzzer1215;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:36:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3516169001342571541L;
    public static double dFld=1.51489;
    public static int iFld=-192;
    public static byte byFld=-81;
    public static short sFld=26647;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        int i6=2959, i7=-12, i8=9, i9=-11, i10=-246, i11=37847, iArr[]=new int[N];
        float f1=54.287F;

        FuzzerUtils.init(iArr, 10);

        for (i6 = 13; i6 < 379; i6++) {
            short s=-749;
            for (i8 = 1; i8 < 5; ++i8) {
                byte by=-92;
                i10 = 1;
                do {
                    f1 += (i10 + Test.instanceCount);
                    f1 += f1;
                    i4 += (i10 + i9);
                    Test.dFld -= i5;
                    Test.instanceCount <<= i11;
                    iArr[i10] = (int)Test.instanceCount;
                    f1 = i8;
                } while (++i10 < 2);
                switch ((((-11 >>> 1) % 1) * 5) + 23) {
                case 25:
                    iArr[i6 + 1] <<= i11;
                    i3 = by;
                    Test.instanceCount += (((i8 * f1) + Test.iFld) - i7);
                    break;
                }
            }
            s = Test.byFld;
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f, int i1) {

        long l1=63958L, l2=-23532L, lArr[]=new long[N];
        int i2=-19560, i12=-3, i13=-52659;
        float f2=-110.878F;

        FuzzerUtils.init(lArr, 2L);

        for (l1 = 8; l1 < 184; l1++) {
            vMeth2(0, i2, i2);
            i2 = (int)l1;
            i2 <<= i1;
            lArr[(int)(l1)] *= Test.iFld;
            Test.byFld += (byte)f;
        }
        for (i12 = 5; 129 > i12; i12++) {
            Test.dFld -= f;
            f2 = 1;
            while (++f2 < 13) {
                short s1=-25593;
                i13 *= 153;
                Test.instanceCount = Test.instanceCount;
                i1 = s1;
                l2 = 1;
                while ((l2 += 3) < 1) {
                    lArr[i12 - 1] = i2;
                    Test.instanceCount -= 73;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + l1 + i2 + i12 + i13 + Float.floatToIntBits(f2) + l2 +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(boolean b, int i, long l) {

        float f3=-105.135F, fArr[]=new float[N];
        int i14=-30159, i15=-14;

        FuzzerUtils.init(fArr, -84.735F);

        vMeth1(f3, i);
        i = Test.iFld;
        for (long l3 : lArrFld) {
            b = b;
            sArrFld[(Test.iFld >>> 1) % N] -= (short)i;
            fArr[(i >>> 1) % N] += i;
            for (i14 = 1; 4 > i14; i14++) {
                i15 += i15;
                switch (((Test.iFld >>> 1) % 2) + 83) {
                case 83:
                    i15 = i15;
                    break;
                case 84:
                    Test.iFld = i15;
                    break;
                }
                iArrFld[i14 + 1] += 13;
                l -= (long)1.487F;
            }
            i >>>= 30;
            Test.instanceCount = i14;
        }
        vMeth_check_sum += (b ? 1 : 0) + i + l + Float.floatToIntBits(f3) + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        float f4=79.356F, fArr1[]=new float[N];
        double d=0.64037;
        int i17=50, i18=-178, i19=-208, i20=11;

        FuzzerUtils.init(fArr1, 0.368F);

        vMeth(b1, Test.iFld, Test.instanceCount);
        Test.iFld >>= (int)Test.instanceCount;
        for (int i16 : iArrFld) {
            Test.instanceCount >>>= Test.iFld;
            lArrFld[(i16 >>> 1) % N] <<= 31;
            Test.instanceCount += (long)f4;
        }
        switch (((-67 >>> 1) % 2) + 48) {
        case 48:
        case 49:
        default:
            iArrFld[(12 >>> 1) % N] *= Test.iFld;
            Test.iFld &= Test.iFld;
            fArr1[(Test.iFld >>> 1) % N] -= Test.iFld;
            if (Test.bFld) {
                Test.iFld -= Test.iFld;
                d = 1;
                while (++d < 305) {
                    if (b1) {
                        Test.dFld += 4L;
                        if (b1) break;
                        if (b1) {
                            Test.iFld += (-189 + (d * d));
                            iArrFld[(int)(d - 1)] <<= Test.iFld;
                        }
                    }
                }
                b1 = b1;
                Test.iFld += Test.iFld;
            } else if (false) {
                for (i17 = 1; 154 > i17; ++i17) {
                    if (b1) {
                        for (i19 = i17; i19 < 164; i19++) {
                            f4 += i19;
                            Test.instanceCount = -7;
                            i20 >>>= (int)-22943L;
                            b1 = b1;
                            iArrFld[i19 + 1] = Test.iFld;
                            Test.sFld = (short)Test.iFld;
                        }
                    } else {
                        i20 += (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
