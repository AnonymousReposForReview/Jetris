package tests.javafuzzer754;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static volatile int iFld=-2;
    public static float fFld=-126.383F;
    public static byte byFld=-59;
    public static short sFld=31701;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35263);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, long l1) {

        int i5=10, i6=-9, i7=29, i8=-242;
        double d=0.125884;
        byte by=-27;
        float f=0.633F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1365793667L);

        i5 *= i5;
        i5 = i5;
        for (i6 = 1; i6 < 241; ++i6) {
            switch ((((i7 >>> 1) % 1) * 5) + 64) {
            case 69:
                i8 = 1;
                while (++i8 < 7) {
                    short s=13734;
                    d = i8;
                    i5 = by;
                    switch ((i6 % 10) + 127) {
                    case 127:
                        Test.iFld >>= (int)Test.instanceCount;
                        Test.iFld -= i8;
                        Test.iFld += i8;
                        break;
                    case 128:
                        i5 = i5;
                        i5 = i7;
                    case 129:
                        f *= i6;
                        i5 ^= (int)2899043581L;
                        break;
                    case 130:
                        by <<= (byte)i8;
                        break;
                    case 131:
                        f -= Test.instanceCount;
                        break;
                    case 132:
                        Test.iFld <<= Test.iFld;
                        break;
                    case 133:
                        s >>= (short)i7;
                    case 134:
                        lArr[i6] -= -92;
                    case 135:
                        if (i8 != 0) {
                        }
                        break;
                    case 136:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    }
                }
                break;
            }
        }
        long meth_res = l + l1 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i4) {

        int i9=-27945, i10=190;
        float f1=-28.916F;

        i4 -= (((i4 + 211) * i4) - iMeth(Test.instanceCount, -7350406942049279390L));
        for (i9 = 2; i9 < 130; ++i9) {
            Test.iArrFld[i9][i9] *= (int)f1;
            try {
                Test.iFld = (Test.iFld / -184);
                i10 = (54 / Test.iArrFld[i9][i9]);
                i4 = (47305 / i9);
            } catch (ArithmeticException a_e) {}
            Test.iArrFld[i9 + 1][i9] -= i9;
            Test.iArrFld[i9][i9 - 1] -= i9;
        }
        long meth_res = i4 + i9 + i10 + Float.floatToIntBits(f1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=-1, i3=-9, i11=217, i12=-104, i13=-10452, i14=193;
        double d1=117.48310;
        boolean b=true;

        for (i2 = 3; i2 < 270; ++i2) {
            switch ((i2 % 6) + 3) {
            case 3:
            case 4:
                dMeth(i2);
            case 5:
                d1 -= i3;
                if (false) {
                    i11 = 6;
                    do {
                        Test.instanceCount <<= i11;
                        i -= (int)Test.instanceCount;
                        i -= i;
                        Test.iFld <<= 38407;
                        i12 = 1;
                        do {
                            i = i;
                            i1 += i12;
                            if (b) continue;
                            i13 -= 11;
                        } while (++i12 < 1);
                    } while (--i11 > 0);
                } else {
                    i1 -= i1;
                }
                break;
            case 6:
                Test.iFld -= i13;
                break;
            case 7:
                try {
                    i = (-253 % i);
                    i = (i2 % i14);
                    Test.iArrFld[i2][i2 - 1] = (-135 / i11);
                } catch (ArithmeticException a_e) {}
            case 8:
                Test.instanceCount += (((i2 * Test.fFld) + Test.instanceCount) - i);
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d1) + i11 + i12 + (b ? 1 : 0) + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=49982, i16=60504, i17=-6, i18=-23433, i19=-182, i20=-110;
        double d2=0.78030;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -65102L);

        vMeth(-63753, Test.iFld);
        Test.iFld = Test.byFld;
        for (i15 = 12; i15 < 228; i15 += 3) {
            for (i17 = 17; i17 < 348; ++i17) {
                switch ((i17 % 4) + 86) {
                case 86:
                    switch ((i15 % 2) + 41) {
                    case 41:
                        i18 = 12;
                        Test.fFld -= i15;
                        Test.iFld += i17;
                        break;
                    case 42:
                        Test.iFld += (i17 | Test.instanceCount);
                        for (i19 = 2; i19 > 1; --i19) {
                            Test.instanceCount = i20;
                            Test.sFld <<= (short)i18;
                            switch (((i18 >>> 1) % 5) + 43) {
                            case 43:
                                i16 += i19;
                                Test.iArrFld[i15][i17 - 1] *= i17;
                                try {
                                    i16 = (-46069 % i20);
                                    i16 = (-23025 % i18);
                                    i18 = (Test.iArrFld[i15 + 1][i19] / -50086);
                                } catch (ArithmeticException a_e) {}
                                lArr1[i17] &= 0;
                                break;
                            case 44:
                                Test.iFld += i15;
                                break;
                            case 45:
                                Test.iArrFld[i15][i17] = i18;
                                Test.iFld *= 13;
                                d2 -= Test.instanceCount;
                                Test.iFld >>= i20;
                                break;
                            case 46:
                                i18 += (((i19 * Test.fFld) + i18) - i17);
                                i20 = i17;
                                i18 = i15;
                                i18 += (i19 ^ i19);
                                break;
                            case 47:
                                i20 += (((i19 * Test.instanceCount) + Test.iFld) - Test.instanceCount);
                            default:
                                lArr1[i17] += Test.iFld;
                            }
                            i18 *= (int)153L;
                        }
                        break;
                    default:
                        Test.iArrFld[i15 - 1][i15 - 1] >>= (int)-161L;
                    }
                case 87:
                    Test.instanceCount = -3229062790L;
                    break;
                case 88:
                    i16 = Test.iFld;
                    break;
                case 89:
                    Test.instanceCount = i18;
                    break;
                default:
                    Test.iFld = i17;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
