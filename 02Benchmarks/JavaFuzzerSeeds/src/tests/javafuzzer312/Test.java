package tests.javafuzzer312;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:40:12 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static float fFld=95.814F;
    public static byte byFld=79;
    public static boolean bFld=false;
    public static int iFld=4;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=9, i3=244, i4=12, i5=42915, i6=149, i7=116, i8=-32579;
        double d1=45.35671;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -557051904413335742L);

        i2 = i2;
        i2 = i2;
        Test.fFld = (float)1.96954;
        i2 %= (int)(Test.instanceCount | 1);
        i2 += i2;
        for (i3 = 8; 240 > i3; ++i3) {
            i2 = i4;
            i4 += (int)Test.fFld;
            i4 = i2;
            lArr = lArr;
            i2 += (int)d1;
            for (i5 = 1; i5 < 7; ++i5) {
                for (i7 = 1; i7 < 2; ++i7) {
                    Test.fFld = -47370;
                    i8 &= i4;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i9=-11, i10=11, i11=-96, i12=-2, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 53);

        vMeth1();
        i9 = 1;
        do {
            Test.byFld *= (byte)i9;
            i10 += (i9 * i9);
            try {
                iArr1[i9] = (i9 / -226);
                i10 = (iArr1[i9] % 30850);
                iArr1[i9 + 1] = (i9 % i9);
            } catch (ArithmeticException a_e) {}
            for (i11 = 1; i11 < 8; ++i11) {
                if (i10 != 0) {
                    vMeth_check_sum += i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                iArr1[i11 + 1] = Test.byFld;
                i12 = (int)Test.instanceCount;
                Test.instanceCount += (((i11 * Test.byFld) + i12) - i9);
                i12 += (i11 * i11);
                if (Test.bFld) {
                    i12 = (int)Test.instanceCount;
                    i12 |= i11;
                }
                i12 = (int)Test.instanceCount;
            }
        } while (++i9 < 191);
        vMeth_check_sum += i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1) {

        float f1=88.499F;
        double d=56.107559;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 34770);

        i1 = (int)(((--Test.instanceCount) + (--Test.instanceCount)) - (i1--));
        f1 = i1;
        iArr[(i1 >>> 1) % N] += (int)(d * ((--iArr[(i1 >>> 1) % N]) + 174));
        vMeth();
        Test.instanceCount += i1;
        i1 %= (int)((long)(Test.fFld) | 1);
        long meth_res = i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=222, i13=-4007, i14=29198, i15=-8, i16=-35135;
        float f=1.159F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.12598);

        i = (int)f;
        i -= (iMeth(i) % -6);
        for (i13 = 19; 374 > i13; i13++) {
            i14 += i13;
            for (i15 = 3; i15 < 71; i15 += 3) {
                dArr = dArr;
                Test.iFld %= (int)((long)(Test.fFld) | 1);
            }
            i16 = i;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
