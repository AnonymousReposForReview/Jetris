package tests.javafuzzer2251;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7905565667415506469L;
    public byte byFld=-45;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i6=-38436, i7=-126, i8=196, i9=3916, i10=-6414;
        double d=-2.37238, dArr[]=new double[N];
        float f1=0.320F;
        boolean b=false;

        FuzzerUtils.init(dArr, 1.32321);

        for (i6 = 14; 253 > i6; ++i6) {
            for (d = i6; 7 > d; ++d) {
                dArr[(int)(d + 1)] = f1;
                Test.iArrFld[i6 + 1][(i8 >>> 1) % N] += i8;
                i8 -= (int)d;
                for (i9 = 1; i9 < 1; ++i9) {
                    if (i7 != 0) {
                    }
                    if (i9 != 0) {
                    }
                    Test.instanceCount -= i7;
                    if (b) {
                        Test.instanceCount += (i9 | i6);
                        Test.instanceCount >>= i6;
                        Test.instanceCount >>= -5;
                        if (true) continue;
                    } else if (b) {
                        Test.instanceCount += i10;
                    } else {
                        i10 += (i9 ^ i8);
                    }
                }
            }
        }
        long meth_res = i6 + i7 + Double.doubleToLongBits(d) + i8 + Float.floatToIntBits(f1) + i9 + i10 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i5) {

        int i11=5909;

        Test.iArrFld[(i5 >>> 1) % N][(i5 >>> 1) % N] -= (int)Math.sqrt(i5 - lMeth());
        i11 = 1;
        do {
            i5 = (int)Test.instanceCount;
        } while (++i11 < 139);
        i5 = i11;
        vMeth_check_sum += i5 + i11;
    }

    public static void vSmallMeth(long l, int i3, int i4) {


        vMeth(i4);
        vSmallMeth_check_sum += l + i3 + i4;
    }

    public void mainTest(String[] strArr1) {

        int i=152, i1=-63133, i2=157, i12=4, i13=-34385;
        short s=31013;
        float f=9.929F;
        boolean b1=true;
        double dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, 0.66408);
        FuzzerUtils.init(lArr, 4L);

        for (i = 4; i < 124; i++) {
            i1 = (int)((++s) * (++f));
            i1 = 88;
            i2 = 1;
            while (++i2 < 209) {
                i1 = (int)(f++);
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(Test.instanceCount, -187, i);
                i1 = i;
                s >>= (short)Test.instanceCount;
                i1 = i;
                for (i12 = 1; i12 < 1; ++i12) {
                    if (false) continue;
                    Test.iArrFld[i2][i] -= byFld;
                    Test.iArrFld[i2][i12 + 1] *= (int)f;
                }
                i1 = (int)Test.instanceCount;
                i13 >>= i;
                Test.instanceCount >>= i1;
                if (b1) continue;
            }
            Test.iArrFld = Test.iArrFld;
            Test.instanceCount += (long)2.387F;
            i13 += (-165 + (i * i));
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
