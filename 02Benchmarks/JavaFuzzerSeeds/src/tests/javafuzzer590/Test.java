package tests.javafuzzer590;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:15:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1609692199L;
    public static float fFld=48.79F;
    public static short sFld=30080;
    public static boolean bFld=false;
    public static volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5) {

        int i6=-19666, i7=75, i8=-237;
        double d1=-20.3740, d2=-123.50329;
        float f=125.919F;
        byte by=122;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4L);

        Test.iArrFld[(i5 >>> 1) % N][(i5 >>> 1) % N] -= (int)Test.instanceCount;
        switch ((((i5 >>> 1) % 5) * 5) + 59) {
        case 76:
            for (i6 = 8; i6 < 144; i6++) {
                Test.instanceCount += (i6 | Test.instanceCount);
            }
            for (d1 = 10; d1 < 182; d1++) {
                i8 += (int)d1;
                f = 1;
                do {
                    lArr[(int)(f + 1)] += by;
                    Test.instanceCount += (long)f;
                    Test.iArrFld[(int)(f)][(int)(f + 1)] -= (int)47.85569;
                    Test.iArrFld[(int)(f - 1)][(int)(d1 - 1)] >>= (int)Test.instanceCount;
                    lArr[(int)(d1 + 1)] >>= i6;
                    i7 = (int)Test.instanceCount;
                    i7 = (int)Test.instanceCount;
                    lArr[(int)(f + 1)] += i6;
                } while (++f < 9);
            }
            break;
        case 74:
            i7 += i5;
            break;
        case 65:
            Test.fFld = Test.instanceCount;
            break;
        case 72:
            i5 += i8;
            break;
        case 62:
            d2 *= -11085;
            break;
        }
        vMeth1_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + Float.floatToIntBits(f) + by +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l1) {

        int i9=142, i10=37699, i11=-48026, i12=-9, i13=-2, i14=-2, i15=47, i16=253;
        double d3=0.113534;
        byte by1=90;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 8247583165840741977L);

        vMeth1(i9);
        i9 += (int)l1;
        Test.iArrFld[(-3 >>> 1) % N][(i9 >>> 1) % N] >>= i9;
        Test.fFld *= i9;
        for (i10 = 1; 264 > i10; ++i10) {
            i12 = 1;
            do {
                Test.fFld -= (float)d3;
                i9 += (((i12 * by1) + i9) - i11);
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.instanceCount += (i13 * i13);
                }
                if (true) break;
                for (i15 = i12; i15 < 1; ++i15) {
                    lArr1[i10 + 1] = -12982;
                    i11 += (i15 * i15);
                    i9 -= Test.sFld;
                }
            } while (++i12 < 6);
        }
        vMeth_check_sum += l1 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d3) + by1 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(long l, int i2, int i3) {

        double d=0.1730;
        int i4=11, iArr[][]=new int[N][N];
        byte by2=80;
        long l2=-158L, lArr2[]=new long[N];

        FuzzerUtils.init(iArr, -43870);
        FuzzerUtils.init(lArr2, -4246262917L);

        Test.fFld -= (-iArr[(2 >>> 1) % N][(i3 >>> 1) % N]);
        for (d = 10; 371 > d; ++d) {
            switch ((int)((d % 4) + 39)) {
            case 39:
                vMeth(Test.instanceCount);
                i3 = (int)d;
                break;
            case 40:
                switch ((int)(((d % 2) * 5) + 98)) {
                case 108:
                    if (Test.bFld) {
                        i4 -= (int)Test.fFld;
                        Test.instanceCount = Test.instanceCount;
                    } else if (Test.bFld) {
                        lArr2[(int)(d)] += i3;
                        iArr[(int)(d - 1)][(int)(d)] *= i3;
                    } else {
                        l += by2;
                        i4 >>>= i4;
                        i3 += 886;
                        i3 = i4;
                    }
                    break;
                case 103:
                    i3 += i4;
                    break;
                default:
                    i3 >>= (int)Test.instanceCount;
                }
                break;
            case 41:
                l = i2;
                break;
            case 42:
                i3 += (int)(((d * i2) + l2) - i2);
                break;
            default:
                i3 *= i3;
            }
        }
        long meth_res = l + i2 + i3 + Double.doubleToLongBits(d) + i4 + by2 + l2 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14439, i1=27832, i17=-9, i18=253, i19=-6, i20=234, i21=6, i22=5, i23=191, i24=-22;
        byte by3=83;
        double d4=0.105576;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, 5555064332536544582L);

        i ^= (i = (++i));
        i1 = 1;
        do {
            i = (int)((++i) - lMeth(Test.instanceCount, i, i));
        } while (++i1 < 176);
        Test.instanceCount = i;
        if (Test.bFld) {
            Test.instanceCount = -52;
            switch ((((i >>> 1) % 2) * 5) + 25) {
            case 26:
                i -= i;
                for (i17 = 4; 198 > i17; i17++) {
                    lArr3[i17] = i17;
                    for (i19 = 6; i19 < 129; i19++) {
                        by3 >>= (byte)10L;
                        i21 = 1;
                        do {
                            Test.instanceCount += i21;
                        } while (++i21 < 2);
                        Test.instanceCount -= -5;
                        Test.sFld = (short)Test.instanceCount;
                        i *= Test.sFld;
                        Test.instanceCount += (((i19 * i19) + i) - Test.instanceCount);
                        Test.instanceCount -= i;
                        i20 = i19;
                        i20 -= (int)Test.fFld;
                    }
                    for (d4 = i17; d4 < 129; ++d4) {
                        lArr3[i17] %= (i18 | 1);
                        Test.fFld += (-2 + (d4 * d4));
                        Test.iArrFld[(int)(d4 + 1)][i17] -= by3;
                        Test.instanceCount = (long)Test.fFld;
                        for (i23 = 1; 1 > i23; i23++) {
                            i18 = (int)Test.fFld;
                            Test.iArrFld[(int)(d4 - 1)] = Test.iArrFld[i17];
                            Test.bFld = Test.bFld;
                        }
                    }
                }
            case 30:
                i24 = (int)-64.71891;
                break;
            }
        } else {
            i >>= 58446;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
