package tests.javafuzzer1942;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=23840L;
    public volatile float fFld=-1.378F;
    public static volatile byte byFld=57;
    public boolean bFld=false;
    public static int iFld=16927;
    public static double dFld=1.31899;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)2972);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f=1.953F;
        int i9=43407, i10=-169, i11=-2, i12=2, i13=2, i14=-22012, iArr2[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr2, -13764);

        Test.iFld >>= Test.iFld;
        Test.instanceCount -= (long)f;
        for (i9 = 1; i9 < 221; ++i9) {
            iArr2 = iArr2;
            i10 = (int)-2665450111L;
            i10 &= i9;
            for (i11 = 1; i11 < 7; i11 += 2) {
                iArr2[i11 - 1] *= i10;
                iArr2[i11] *= (int)Test.instanceCount;
                for (i13 = 1; i13 < 3; ++i13) {
                    if (true) break;
                    iArr2[i11 - 1] = i9;
                    try {
                        i10 = (56 % i14);
                        Test.iFld = (i10 % i10);
                        i10 = (i12 % i13);
                    } catch (ArithmeticException a_e) {}
                    if (b) continue;
                    i10 = i10;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7, int i8) {

        long l1=53L, l2=-2535126274L;
        boolean b1=true;
        int i15=-16670, i16=-122, i17=-209, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 20523);

        iArr1[(i7 >>> 1) % N] = Math.min(iMeth1(), i7);
        l1 = 1;
        while (++l1 < 177) {
            Test.iFld = (int)l2;
            i8 += (int)(l1 * l1);
            switch ((int)((l1 % 2) + 98)) {
            case 98:
                Test.dFld = Test.iFld;
                if (b1) continue;
                Test.iFld = -230;
                break;
            case 99:
                if (b1) continue;
                Test.dFld -= l2;
            default:
                i15 = 1;
                while (++i15 < 9) {
                    i8 = Test.iFld;
                    for (i16 = 1; i16 < 1; ++i16) {
                        Test.iFld >>= 211;
                        Test.iFld = (int)1.53F;
                    }
                }
            }
        }
        vMeth_check_sum += i7 + i8 + l1 + l2 + (b1 ? 1 : 0) + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i6, long l) {

        boolean b2=true, bArr1[]=new boolean[N];
        int i19=11471, i20=10, iArr3[][]=new int[N][N];
        float f1=-1.823F;
        double d2=2.90577;

        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr3, 213);

        vMeth(i6, i6);
        bArr1[(-35164 >>> 1) % N] = b2;
        i6 += (int)Test.dFld;
        for (short s1 : Test.sArrFld) {
            int i18=20993;
            Test.iFld = i18;
            iArr3[(i18 >>> 1) % N][(Test.iFld >>> 1) % N] &= i6;
            for (i19 = 1; 4 > i19; i19++) {
                iArr3[i19][i19 + 1] >>>= i6;
                Test.iFld -= (int)f1;
                d2 = 1;
                while (++d2 < 2) {
                    Test.instanceCount *= (long)f1;
                    i6 *= i20;
                    i6 = 213;
                    i18 *= 3;
                    i6 = 5;
                }
            }
        }
        long meth_res = i6 + l + (b2 ? 1 : 0) + i19 + i20 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=27.5188, d1=-28.51426;
        int i=-217, i1=65352, i2=165, i3=-175, i4=38887, i5=-75, iArr[]=new int[N];
        short s=4819;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, 14);

        for (d = 166; d > 4; d -= 2) {
            Test.instanceCount = (Short.reverseBytes((short)(-(fFld * 0.10407))) * (Math.max(-54077, i) - (-i1)));
            for (i2 = 7; 309 > i2; ++i2) {
                Test.instanceCount += (((i2 * i1) + Test.instanceCount) - Test.byFld);
                bArr[i2] = (bArr[(int)(d - 1)] = bFld);
                for (i4 = 1; i4 < 2; i4++) {
                    switch ((int)((d % 7) + 36)) {
                    case 36:
                        iArr[i4] = (int)(((73.305F * i5) + (fFld + i3)) + ((2426561419234447730L * (i4 + s)) + i2));
                        Test.byFld *= (byte)((i2 * d) * Test.instanceCount);
                        Test.instanceCount <<= (long)((Math.abs(d) + (i1 + Test.instanceCount)) - (++s));
                        break;
                    case 37:
                        i5 *= (int)(d1++);
                        Test.instanceCount += (i4 | i4);
                        i |= (int)(((Test.instanceCount + i5) + Integer.reverseBytes(i)) - i2);
                        try {
                            i5 = (i1 / -238);
                            i1 = (-20 / i2);
                            i = (1 % iArr[i2 - 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 38:
                        iArr[i2] >>= (i1 *= iArr[i2 - 1]);
                        if (true) continue;
                        break;
                    case 39:
                        fFld += iMeth(i4, -16838L);
                        iArr = iArr;
                        i3 %= (int)(i2 | 1);
                        if (bFld) continue;
                    case 40:
                        iArr[i2] += i2;
                        i = (int)Test.instanceCount;
                        Test.sArrFld[(int)(d)] = (short)i3;
                        i5 += (i4 + i1);
                        break;
                    case 41:
                        i5 = Test.iFld;
                        try {
                            i5 = (i4 / 46782);
                            i = (i1 / 185);
                            i5 = (i5 % i5);
                        } catch (ArithmeticException a_e) {}
                        i3 >>= i5;
                        Test.iFld += i4;
                        break;
                    case 42:
                        bFld = bFld;
                    default:
                        fFld = Test.iFld;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
