package tests.javafuzzer2122;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:12:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3888804175335865750L;
    public int iFld=-46936;
    public static byte byFld=-73;
    public static volatile boolean bFld=true;
    public float fFld=-121.189F;
    public int iArrFld[][]=new int[N][N];
    public float fArrFld[]=new float[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i3) {

        int i4=61211, i5=-21537, i6=-13, i7=-9, i8=6852, i9=23613, i10=-42206, iArr[]=new int[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 213L);
        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(fArr, -2.852F);

        lArr[(i3 >>> 1) % N] <<= i3;
        for (i4 = 5; i4 < 161; i4++) {
            i6 = 1;
            while (++i6 < 10) {
                i3 = Test.byFld;
                Test.bFld = Test.bFld;
                Test.instanceCount -= 46;
                l1 += (((i6 * i6) + Test.instanceCount) - i6);
            }
            l1 = (long)54.1018F;
            for (i7 = 1; i7 < 10; i7++) {
                i8 = (int)Test.instanceCount;
                for (i9 = 1; i9 < 2; i9++) {
                    double d=-2.66177;
                    iArr[i9] = -8;
                    if (i9 != 0) {
                        vMeth1_check_sum += l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    l1 = l1;
                    fArr[i4] = (float)d;
                }
            }
        }
        vMeth1_check_sum += l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {

        boolean b=false;
        int i11=3, i12=225, i13=6938, i14=-4, i15=125, i16=17;
        double d1=42.24589;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 922282628L);

        b = b;
        vMeth1(Test.instanceCount, i11);
        for (i12 = 14; i12 < 261; ++i12) {
            i11 <<= 20235;
            for (i14 = 1; i14 < 7; i14++) {
                d1 = Test.instanceCount;
                i16 = 1;
                while (++i16 < 2) {
                    Test.byFld = (byte)i14;
                    l >>>= i12;
                    i15 -= (int)l;
                    i15 += i14;
                    lArr1[i16 + 1] -= i12;
                    if (b) break;
                    d1 -= i16;
                }
                if (Test.bFld) continue;
            }
        }
        vMeth_check_sum += l + (b ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(int i, int i1, int i2) {


        vMeth(Test.instanceCount);
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i17=10, i18=-47994, i19=-63001, i20=13, i21=55636, i22=41, i23=-53797, i24=-6413, i25=11, i26=-54135,
            i27=18425;
        double d2=-14.16816, dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)14739);
        FuzzerUtils.init(dArr, 1.40544);

        iFld -= (--iFld);
        for (int smallinvoc=0; smallinvoc<723; smallinvoc++) vSmallMeth(iFld, -49335, 27917);
        iFld += iFld;
        i17 = 1;
        while ((i17 += 2) < 379) {
            iFld *= Test.byFld;
            iFld -= iFld;
            if (Test.bFld) continue;
            Test.byFld *= (byte)i17;
        }
        iFld -= 5644;
        for (i18 = 12; i18 < 379; ++i18) {
            fFld += i18;
            for (i20 = 3; i20 < 69; ++i20) {
                i19 += i20;
                d2 *= i19;
                fFld -= iFld;
                i21 = (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                iArrFld[i20][i20 - 1] = (int)Test.instanceCount;
            }
        }
        for (i22 = 7; i22 < 201; i22++) {
            for (i24 = 8; 129 > i24; i24++) {
                Test.instanceCount *= (long)d2;
                fArrFld[i24 - 1] -= i18;
                if (Test.bFld) continue;
                dArr[i24 + 1] = Test.byFld;
                if (Test.bFld) {
                    i23 -= i23;
                } else if (Test.bFld) {
                    for (i26 = 1; i26 < 2; i26++) {
                        if (Test.bFld) continue;
                        fFld += fFld;
                        iArrFld[i24 + 1][i24] = i25;
                    }
                } else if (false) {
                    Test.bFld = Test.bFld;
                } else {
                    iFld += i19;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
