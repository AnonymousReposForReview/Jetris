package tests.javafuzzer2425;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:23:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static float fFld=-2.628F;
    public static double dFld=0.54661;
    public static int iFld=49;
    public int iFld1=77;
    public short sFld=17543;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 213L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f, int i2, long l) {

        int i3=-53767, i4=-26528, i5=-9, i6=9, iArr1[]=new int[N];
        double d1=0.112081, d2=-35.1867, d3=2.619;

        FuzzerUtils.init(iArr1, 244);

        iArr1[(i3 >>> 1) % N] += i2;
        l = i3;
        d1 *= i2;
        for (d2 = 19; d2 < 377; d2++) {
            i3 = (int)l;
            for (i5 = 1; i5 < 5; ++i5) {
                i2 = i3;
                i3 >>= (int)l;
                i3 += (i5 * i5);
                l += i5;
            }
            i2 += (int)(d2 * d2);
            i3 -= (int)d1;
        }
        d3 = 1;
        while (++d3 < 195) {
            i3 += i5;
            i6 *= (int)d1;
        }
        long meth_res = Float.floatToIntBits(f) + i2 + l + i3 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i4 + i5 + i6 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(double d) {

        int i1=-3, i7=215, iArr[]=new int[N];
        boolean b=true;
        long l1=13L;
        byte by1=55, byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(byArr, (byte)55);
        FuzzerUtils.init(sArr, (short)-27670);

        iArr[(i1 >>> 1) % N] *= (int)1.253F;
        b = bMeth(Test.fFld, i1, Test.instanceCount);
        for (l1 = 12; l1 < 268; ++l1) {
            Test.instanceCount += l1;
            sArr = FuzzerUtils.short1array(N, (short)-31292);
            if (b) {
                switch ((int)((l1 % 2) + 6)) {
                case 6:
                    switch (((i7 >>> 1) % 7) + 49) {
                    case 49:
                    case 50:
                        i1 -= i7;
                        Test.instanceCount = i7;
                        i7 += (int)(((l1 * Test.instanceCount) + i7) - i1);
                        Test.instanceCount += i7;
                        break;
                    case 51:
                        i7 -= i7;
                        b = b;
                        try {
                            i1 = (i1 % 53);
                            i7 = (i1 / i7);
                            i7 = (-60172 / iArr[(int)(l1)]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 52:
                        by1 += (byte)(l1 * i7);
                        break;
                    case 53:
                        i1 <<= i1;
                        break;
                    case 54:
                        if (b) break;
                        break;
                    case 55:
                        Test.fFld -= i1;
                    }
                case 7:
                    i1 -= 12;
                    break;
                default:
                    i7 = (int)Test.instanceCount;
                }
            } else if (b) {
                byArr[(int)(l1 + 1)] *= (byte)i1;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i1 + (b ? 1 : 0) + l1 + i7 + by1 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i) {


        vMeth1(Test.dFld);
        vMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        byte by2=-115;
        int i8=18800, i9=6, i10=82, i11=-64, i12=62147, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, -97);

        vMeth(Test.iFld);
        Test.iFld &= 7;
        iArr2[(Test.iFld >>> 1) % N] -= (int)-30.2312;
        iArr2[(Test.iFld >>> 1) % N] -= Test.iFld;
        by2 = (byte)Test.iFld;
        Test.iFld += 12;
        iArr2[(Test.iFld >>> 1) % N] += Test.iFld;
        Test.iFld = Test.iFld;
        Test.instanceCount = (long)Test.fFld;
        Test.iFld = Test.iFld;
        Test.lArrFld[(2209 >>> 1) % N] += Test.iFld;
        i8 = 1;
        while (++i8 < 383) {
            Test.iFld = (int)Test.instanceCount;
            Test.iFld = Test.iFld;
            for (i9 = 1; i9 < 66; ++i9) {
                Test.dFld = i8;
                Test.iFld += i8;
                switch ((i9 % 9) + 92) {
                case 92:
                    Test.iFld += iFld1;
                    Test.instanceCount += (i9 ^ i8);
                    break;
                case 93:
                case 94:
                    Test.dFld = Test.instanceCount;
                case 95:
                    Test.iFld += (int)Test.instanceCount;
                    if (b1) continue;
                    iFld1 ^= i8;
                case 96:
                    Test.fFld = sFld;
                    iArr2[i8] += (int)Test.instanceCount;
                    for (i11 = 1; i11 < 2; i11++) {
                        Test.iFld *= i12;
                        iFld1 += (int)Test.fFld;
                        b1 = b1;
                    }
                    break;
                case 97:
                    i10 *= i8;
                    break;
                case 98:
                    i12 >>= iFld1;
                case 99:
                    Test.instanceCount = i8;
                    break;
                case 100:
                    Test.instanceCount = 3714008457L;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
