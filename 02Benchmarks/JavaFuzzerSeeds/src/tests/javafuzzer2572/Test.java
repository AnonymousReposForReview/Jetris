package tests.javafuzzer2572;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:49:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-49040L;
    public static int iFld=48587;
    public static double dFld=2.49020;
    public static volatile boolean bFld=false;
    public static byte byFld=127;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f2=0.730F;
        int i3=189, i4=-50, iArr[]=new int[N];
        byte by1=101;

        FuzzerUtils.init(iArr, -7);

        Test.iFld -= (int)-9217152971780299556L;
        Test.instanceCount = (long)f2;
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        Test.instanceCount -= (long)-1.787F;
        f2 = -119;
        Test.iFld -= Test.iFld;
        Test.instanceCount = Test.iFld;
        i3 = 1;
        do {
            Test.instanceCount += (233 + (i3 * i3));
            Test.iFld = i3;
        } while (++i3 < 225);
        iArr[(-5 >>> 1) % N] = -65151;
        i4 >>>= i4;
        Test.iFld -= by1;
        i4 = Test.iFld;
        long meth_res = Float.floatToIntBits(f2) + i3 + i4 + by1 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        float f1=0.227F;
        int i5=-5, i6=-9, i7=-9, i8=-3;
        short s1=21632;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 91L);

        Test.instanceCount -= (long)(((i2 * f1) - Math.min(i2, i2)) - ((12 - iMeth1()) >> Test.iFld));
        Test.dFld %= ((long)(f1) | 1);
        Test.iFld = (int)3L;
        Test.iFld *= (int)Test.instanceCount;
        i2 = Test.iFld;
        f1 = Test.iFld;
        if (Test.bFld) {
            Test.instanceCount = Test.instanceCount;
            for (i5 = 6; 244 > i5; ++i5) {
                Test.iFld >>= (int)-32857L;
                lArr[i5 - 1] = i2;
                f1 = i6;
                for (i7 = 1; i7 < 7; i7++) {
                    Test.iFld += (int)(1.784F + (i7 * i7));
                    s1 += (short)i7;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + s1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, long l) {

        byte by=64;
        short s=707;
        float f=-1.898F, fArr[]=new float[N];
        int i9=0, i10=3, i11=-16477, i12=142, iArr1[]=new int[N];
        long l1=57621L, lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, -2.120F);
        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(lArr1, 28046L);

        i1 *= (int)(((by = (byte)-79) - (40446 - (i1 - -65053))) - (Test.instanceCount = (-(l * -12929))));
        s -= (short)(fArr[(i1 >>> 1) % N]--);
        i1 += (int)(Long.reverseBytes(Math.abs(Test.instanceCount)) + (8.664F + (f++)));
        l -= (long)(iMeth(Test.iFld) * Test.dFld);
        iArr1[(92 >>> 1) % N] >>= 20771;
        Test.dFld -= Test.iFld;
        if (Test.bFld) {
            for (i9 = 5; i9 < 217; ++i9) {
                if (Test.bFld) {
                    Test.iFld = Test.iFld;
                } else {
                    for (i11 = 1; 8 > i11; i11++) {
                        l1 = 1;
                        while (++l1 < 2) {
                            lArr1[i9][(int)(l1 + 1)] = i10;
                            Test.iFld += (int)(l1 * l1);
                        }
                        i12 += i11;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + l + by + s + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + l1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i13=-253, i14=57807, i15=7, i16=14, i17=47, i18=14032, i19=14, i20=-49770, i21=-62172, iArr2[]=new
            int[N];
        float f3=-2.160F;
        short s2=-20832;
        long l2=-39756L;
        boolean b=true;

        FuzzerUtils.init(iArr2, 65348);

        i = 320;
        while ((i -= 3) > 0) {
            vMeth(Test.iFld, -90L);
            Test.bFld = Test.bFld;
            f3 = i;
        }
        Test.bFld = Test.bFld;
        Test.iFld = 42549;
        if (Test.bFld) {
            for (i13 = 2; i13 < 219; i13++) {
                for (i15 = 4; i15 < 116; i15++) {
                    s2 += (short)(i15 - i15);
                    i16 = i16;
                    for (i17 = 1; 2 > i17; ++i17) {
                        i16 = (int)Test.dFld;
                        Test.instanceCount += (i17 - i14);
                        Test.iFld += (i17 * i17);
                        Test.iFld += i15;
                        Test.instanceCount += (long)(79.237F + (i17 * i17));
                        Test.dFld = i15;
                        Test.instanceCount >>= Test.instanceCount;
                        i14 += (i17 | Test.instanceCount);
                    }
                }
                f3 += Test.byFld;
                for (l2 = 7; l2 < 116; l2++) {
                    Test.iFld = i;
                    i19 = i19;
                    Test.bFld = false;
                    for (i20 = 1; i20 < 2; i20++) {
                        if (true) break;
                        iArr2[i13] = (int)Test.dFld;
                        Test.dFld += Test.instanceCount;
                        Test.instanceCount += (((i20 * i21) + l2) - i14);
                    }
                }
            }
        } else if (Test.bFld) {
            iArr2 = FuzzerUtils.int1array(N, (int)-10);
        } else if (true) {
            Test.bFld = b;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
