package tests.javafuzzer3315;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:47:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-38069L;
    public int iFld=192;
    public volatile float fFld=-88.966F;
    public static double dFld=75.54349;
    public static byte byFld=-110;
    public int iFld1=7;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vSmallMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i) {


        i += i;
        vSmallMeth_check_sum += i;
    }

    public static void vSmallMeth1(int i4, float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 0);

        i4 *= (i4++);
        vSmallMeth(iArr[(i4 >>> 1) % N]--);
        vSmallMeth1_check_sum += i4 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public long lMeth(long l) {

        double d=-68.111765;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3169428747L);

        vSmallMeth1(iFld, 37.918F);
        fFld -= Test.instanceCount;
        iFld = iFld;
        Test.dFld *= Test.dFld;
        lArr[(iFld >>> 1) % N] += (long)-25.8136;
        iFld += iFld;
        l = l;
        Test.instanceCount = Test.instanceCount;
        l += iFld;
        d = 1;
        do {
            l ^= -46544;
            iFld <<= (int)Test.instanceCount;
            iFld += iFld;
            if (iFld != 0) {
            }
            iFld += (int)((long)d | iFld);
        } while (++d < 351);
        long meth_res = l + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=13, i2=-56884, i3=-25330, i5=-65252, i6=154, i7=-7;
        short s1=-26051, sArr[]=new short[N];
        long l1=1439908371L, lArr1[]=new long[N];
        double d1=-34.91035;
        byte by=-102, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-29298);
        FuzzerUtils.init(byArr, (byte)70);
        FuzzerUtils.init(fArr, -61.508F);
        FuzzerUtils.init(lArr1, -7822298456671467937L);

        for (int smallinvoc=0; smallinvoc<470; smallinvoc++) vSmallMeth(--i1);
        vSmallMeth((int)(((++Test.instanceCount) * (iArrFld[(i1 >>> 1) % N]++)) + -26723));
        for (i2 = 7; i2 < 240; i2++) {
            i1 += i2;
            Test.instanceCount &= i1;
            s1 += (short)(((i2 * i1) + i2) - i2);
            Test.instanceCount += Long.reverseBytes((long)((82 + (i3 - iFld)) * (Test.instanceCount - fFld)));
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth1((int)(Float.intBitsToFloat(++i3) + 176),
                ((i1 - 52) - (i3 - i3)) - (lMeth(Test.instanceCount) * -251));
            for (l1 = 3; 108 > l1; ++l1) {
                switch ((int)((l1 % 7) + 27)) {
                case 27:
                    for (d1 = 2; d1 > 1; --d1) {
                        i6 >>= 56832;
                        i3 = i5;
                        byArr[(int)(l1)] = (byte)i2;
                        i1 += (int)fFld;
                        fArr[(int)(l1 - 1)] *= Test.byFld;
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount += (long)(d1 * d1);
                        fFld = l1;
                        s1 <<= (short)i6;
                        iArrFld[i2 + 1] += i1;
                    }
                    i7 = 1;
                    while (++i7 < 2) {
                        switch ((((i2 >>> 1) % 1) * 5) + 96) {
                        case 100:
                            iFld1 -= i5;
                            break;
                        }
                        i3 >>= i3;
                        by = (byte)s1;
                        switch ((int)(((l1 % 10) * 5) + 94)) {
                        case 115:
                            i6 <<= iFld1;
                            Test.instanceCount = i5;
                            iFld1 *= (int)l1;
                            break;
                        case 114:
                            fFld -= (float)2.58695;
                            break;
                        case 113:
                            Test.instanceCount = l1;
                        case 129:
                            iArrFld[i2 + 1] = -128;
                            break;
                        case 144:
                            iFld1 += (((i7 * Test.instanceCount) + Test.byFld) - Test.instanceCount);
                            break;
                        case 95:
                            Test.byFld += (byte)(((i7 * l1) + i2) - i2);
                            break;
                        case 108:
                            Test.dFld -= Test.instanceCount;
                            break;
                        case 123:
                        case 111:
                            iFld -= i5;
                            break;
                        case 98:
                            iFld += i7;
                            break;
                        }
                    }
                    break;
                case 28:
                    i3 += (int)-233L;
                    break;
                case 29:
                    Test.instanceCount += (((l1 * iFld1) + fFld) - i5);
                    break;
                case 30:
                    iArrFld[i2 - 1] = i2;
                    break;
                case 31:
                    lArr1[i2 - 1] += i7;
                    break;
                case 32:
                    Test.dFld = i3;
                    break;
                case 33:
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vSmallMeth1 lMeth
//DEBUG  vSmallMeth1 ->  vSmallMeth1 mainTest Test lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
