package tests.javafuzzer1651;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:47:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static int iFld=-13;
    public static double dFld=0.10475;
    public static short sFld=-7052;
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 14766L);
        FuzzerUtils.init(Test.dArrFld, 5.22266);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, long l1, short s) {


        i4 |= (int)Test.instanceCount;
        long meth_res = i4 + l1 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        double d=-36.50876;
        int i2=-1953, i3=208, i5=49963, i6=38179, i7=17952, iArr[]=new int[N];
        boolean b=true;
        byte by=4;
        short s1=-21248;

        FuzzerUtils.init(iArr, 61395);

        for (long l : Test.lArrFld) {
            Test.instanceCount >>= (long)(i1 - ((i1 - 0.497F) + iArr[(-13 >>> 1) % N]));
            d = (((i1 * 41462) >> (l--)) - ((--i1) * (i1 * Test.instanceCount)));
        }
        for (i2 = 13; i2 < 389; ++i2) {
            i3 = Math.max(Math.abs(iMeth(i3, Test.instanceCount, (short)(24640))), -83);
            i5 = 4;
            do {
                if (b) break;
                i3 >>>= (int)Test.instanceCount;
                i1 = 0;
                Test.iFld += (-10251 + (i5 * i5));
                for (i6 = i5; 2 > i6; i6 += 2) {
                    by = (byte)s1;
                    Test.iFld <<= 12;
                    Test.iFld += (i6 - i7);
                    Test.instanceCount >>= i7;
                }
            } while ((i5 -= 2) > 0);
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + i5 + (b ? 1 : 0) + i6 + i7 + by + s1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i) {


        vMeth(Test.iFld);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i8=-39682, i9=-63500, i10=8, i11=4, i12=-60961, i13=208, i14=14, i15=7, i16=21038;
        boolean b1=true;
        byte by1=41;
        float f=-42.698F;
        long l3=4990992160920974008L;

        for (int smallinvoc=0; smallinvoc<275; smallinvoc++) vSmallMeth(Test.iFld);
        for (i8 = 240; i8 > 7; --i8) {
            if (b1) break;
            for (i10 = i8; i10 < 108; ++i10) {
                by1 = (byte)Test.instanceCount;
                b1 = b1;
            }
            f *= i11;
            f += i11;
            Test.instanceCount = 61686;
            i9 += Test.iFld;
            f = -3;
            Test.iFld = (int)Test.dFld;
            for (i12 = 4; i12 < 108; i12 += 3) {
                for (l3 = 1; 4 > l3; ++l3) {
                    by1 <<= (byte)Test.iFld;
                }
                Test.sFld += (short)(i12 * i12);
                i11 -= (int)Test.instanceCount;
                for (i15 = 4; i15 > i12; i15 -= 3) {
                    iArrFld[i12 + 1] += i15;
                    Test.instanceCount += (i15 * i15);
                    Test.instanceCount = i16;
                    i13 += i9;
                    i14 = i8;
                    i13 += (((i15 * i11) + i10) - i10);
                    Test.dFld -= i16;
                    i16 += (i15 ^ i15);
                }
                if (b1) break;
                Test.instanceCount += i10;
                by1 += (byte)(i12 * i12);
            }
        }
        Test.iFld &= (int)Test.instanceCount;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
