package tests.javafuzzer3277;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:32:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4060907058L;
    public int iFld=30019;
    public static byte byFld=-113;
    public static float fFld=23.79F;
    public int iFld1=11;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3680978132L);
        FuzzerUtils.init(Test.iArrFld, -246);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i, long l) {


        i = (int)((i - (i * Test.instanceCount)) + ((i ^ i) / ((Test.instanceCount / (i | 1)) | 1)));
        vMeth_check_sum += i + l;
    }

    public static void vMeth1(int i9, int i10, boolean b) {

        int i11=6, i12=-225;
        float f=24.63F;
        long l1=-4219898871898119379L;
        double d1=0.118959;
        short s=-28805;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.instanceCount <<= -64206;
        i11 = 154;
        while ((i11 -= 3) > 0) {
            switch (((i11 % 8) * 5) + 84) {
            case 105:
                i12 = 1;
                while (++i12 < 29) {
                    Test.iArrFld[i11] -= i11;
                    switch ((i12 % 3) + 125) {
                    case 125:
                        switch (((i11 % 2) * 5) + 35) {
                        case 39:
                            f += 37023;
                            break;
                        case 43:
                            i9 += (45 + (i12 * i12));
                            Test.iArrFld[i12 - 1] = (int)f;
                        default:
                            Test.iArrFld[i12] |= i9;
                            i9 += -13;
                            f *= -116;
                        }
                        bArr[i12 + 1] = b;
                        i9 = (int)Test.instanceCount;
                        break;
                    case 126:
                        i9 += (((i12 * Test.byFld) + l1) - f);
                        break;
                    case 127:
                        l1 += i12;
                        break;
                    default:
                        Test.lArrFld[i12 - 1] = i10;
                    }
                }
                break;
            case 100:
                i9 *= (int)d1;
                break;
            case 99:
                i9 = i9;
            case 124:
                l1 = i9;
                break;
            case 123:
                d1 *= f;
                break;
            case 96:
                f = i10;
                break;
            case 86:
                s = (short)Test.instanceCount;
                break;
            case 98:
                Test.instanceCount += (long)-103.79616;
                break;
            }
        }
        vMeth1_check_sum += i9 + i10 + (b ? 1 : 0) + i11 + i12 + Float.floatToIntBits(f) + l1 +
            Double.doubleToLongBits(d1) + s + FuzzerUtils.checkSum(bArr);
    }

    public float fMeth(int i4, int i5, int i6) {

        int i7=-99, i8=-30457, i13=-12, i14=-14, i15=168, i16=-60934;
        boolean b1=false;
        short s1=28334;
        float f1=110.986F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 91.60897);

        for (i7 = 7; i7 < 355; i7++) {
            Test.iArrFld[i7] = Test.byFld;
            vMeth1(-2, i8, b1);
            Test.iArrFld = Test.iArrFld;
            for (i13 = 1; 5 > i13; ++i13) {
                Test.lArrFld[i7] -= i14;
                i14 = i14;
                Test.iArrFld[i13 - 1] *= i6;
                Test.iArrFld[i13] += i5;
                if (true) break;
                i6 += (i13 - i8);
            }
            dArr = dArr;
            for (i15 = 1; 5 > i15; i15++) {
                s1 <<= (short)-3;
                f1 = 6630;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + (b1 ? 1 : 0) + i13 + i14 + i15 + i16 + s1 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public int iMeth(int i2, int i3) {

        float f2=0.851F;
        int i17=7, i18=36429, i19=-8, i20=-11;
        boolean b2=false;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -2.28076);

        vMeth((int)(((i3 * i2) + (i2 <<= (int)Test.instanceCount)) - ((++iFld) |
            Long.reverseBytes(Test.instanceCount))), (long)(fMeth(-6, iFld, -1) * i2));
        Test.byFld = (byte)i2;
        for (f2 = 12; f2 < 206; f2++) {
            i18 = 1;
            do {
                for (i19 = 1; i19 < 1; ++i19) {
                    iFld |= i3;
                    i17 = i17;
                    if (b2) continue;
                    Test.fFld = 5188;
                    Test.iArrFld[i19] = i2;
                    dArr1[(int)(f2 + 1)] += i18;
                    lArrFld1[i18 - 1] = i18;
                }
                try {
                    i2 = (i18 / i19);
                    Test.iArrFld[i18] = (i17 / 77);
                    i17 = (iFld / 2142833578);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i18 * iFld) + i2) - Test.byFld);
                i17 += (123 + (i18 * i18));
            } while (++i18 < 8);
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-140, i21=-47, i22=253, i24=6, i25=14, i26=-65237, i27=-220;
        double d=-105.829;
        boolean b3=false;
        short s2=-17030;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)41);

        vMeth((int)(-((Test.lArrFld[(i1 >>> 1) % N]++) + (-65 % ((long)(d) | 1)))), ++Test.instanceCount);
        Test.lArrFld[(i1 >>> 1) % N] = (byArr[(i1 >>> 1) % N]--);
        for (byte by : byArr) {
            vMeth(i1, iMeth(iFld, iFld) - i1);
            for (i21 = 3; i21 < 63; ++i21) {
                int i23=37093;
                i22 = iFld;
                i1 -= (int)Test.instanceCount;
                iFld1 = i21;
                iFld += i21;
                switch (((i21 % 2) * 5) + 41) {
                case 46:
                case 43:
                    i23 >>= (int)Test.instanceCount;
                    break;
                default:
                    if (b3) break;
                }
                Test.iArrFld[i21 - 1] = i23;
                Test.fFld += iFld;
                s2 *= (short)iFld1;
            }
            if (b3) {
                Test.byFld = (byte)iFld;
                for (i24 = 3; 63 > i24; i24++) {
                    for (i26 = 1; i26 < 2; ++i26) {
                        Test.iArrFld = Test.iArrFld;
                        if (b3) continue;
                        iFld1 *= 254;
                        Test.instanceCount *= (long)110.113115;
                    }
                    Test.instanceCount = i25;
                    i27 = (int)Test.instanceCount;
                    i25 *= i26;
                    if (b3) {
                        Test.lArrFld[i24 + 1] *= (long)62.619F;
                    } else {
                        by += (byte)(((i24 * Test.instanceCount) + Test.fFld) - by);
                        iFld1 = (int)Test.instanceCount;
                    }
                }
            } else {
                iFld1 |= (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
