package tests.javafuzzer2046;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:54:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7614250661403109700L;
    public static short sFld=18981;
    public float fFld=-100.897F;
    public static volatile byte byFld=15;
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.fArrFld, -36.253F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, int i8) {

        int i9=-13956, i10=5, i11=9, i12=159, i13=-13, i14=54;
        double d=1.57052;
        float f=-11.977F;

        for (i9 = 7; i9 < 173; i9++) {
            Test.instanceCount -= i9;
            Test.iArrFld[i9 - 1] = i10;
            Test.instanceCount += i9;
            Test.instanceCount = i9;
            try {
                i10 = (i6 / -64);
                i7 = (i6 / i9);
                Test.iArrFld[i9 - 1] = (-8 % i7);
            } catch (ArithmeticException a_e) {}
            i7 += (i9 + i10);
            for (i11 = 1; 10 > i11; i11 += 2) {
                Test.iArrFld[i9] += (int)Test.instanceCount;
                for (i13 = 1; i13 < 3; ++i13) {
                    d = -3L;
                    Test.instanceCount = Test.instanceCount;
                    f -= (float)d;
                    i10 >>= (int)Test.instanceCount;
                    Test.iArrFld[i11] = i11;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f);
    }

    public static void vMeth() {

        int i4=-10, i5=-12, i15=37335, i16=-94, i17=-60468, i18=-59498;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-18393);

        for (i4 = 9; i4 < 215; i4++) {
            vMeth1(i4, 16804, i5);
            i5 += (i4 ^ Test.instanceCount);
            for (i15 = 1; i15 < 8; i15++) {
                Test.iArrFld[i15 - 1] += 3;
                try {
                    i5 = (106 % i4);
                    i16 = (i5 / Test.iArrFld[(-24803 >>> 1) % N]);
                    Test.iArrFld[i15 + 1] = (i16 % i16);
                } catch (ArithmeticException a_e) {}
                switch (((i16 >>> 1) % 9) + 49) {
                case 49:
                    i16 -= (int)Test.instanceCount;
                    i16 += (i15 * i15);
                    break;
                case 50:
                    i5 *= (int)Test.instanceCount;
                    i5 += (int)-74.995F;
                    break;
                case 51:
                    if (b) {
                        for (i17 = 1; i17 < 2; i17++) {
                            i16 -= -7;
                            if (i5 != 0) {
                                vMeth_check_sum += i4 + i5 + i15 + i16 + i17 + i18 + (b ? 1 : 0) +
                                    FuzzerUtils.checkSum(sArr);
                                return;
                            }
                        }
                    }
                    break;
                case 52:
                    b = b;
                    break;
                case 53:
                    i16 = -49057;
                case 54:
                    if (b) break;
                    break;
                case 55:
                    i5 *= -21983;
                case 56:
                    sArr[i4] = Test.sFld;
                    break;
                case 57:
                    Test.instanceCount = i17;
                default:
                    i16 = i15;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr);
    }

    public int iMeth(int i2, byte by, int i3) {

        double d1=2.19792;
        long l=13L;
        int i19=17073;

        vMeth();
        i2 *= (int)fFld;
        i2 += i3;
        i3 -= (int)fFld;
        i3 = 4;
        d1 -= i3;
        i3 = 4;
        for (l = 19; l < 330; l++) {
            i3 = i3;
            i2 += (int)(((l * i3) + fFld) - Test.instanceCount);
            i2 += (int)(l | i3);
            i3 <<= (int)Test.instanceCount;
            i3 += (-59135 + (l * l));
            d1 *= i19;
            Test.iArrFld[(int)(l)] = i3;
        }
        long meth_res = i2 + by + i3 + Double.doubleToLongBits(d1) + l + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=-132, i20=-1, i21=52671, i22=-55, i23=-4, i24=-152, i25=-30849, i26=-8, i27=38, i28=39, i29=34362,
            i30=-973, iArr[][]=new int[N][N];
        boolean b1=false, bArr[]=new boolean[N];
        float f1=60.228F;
        double d2=-1.77319;

        FuzzerUtils.init(iArr, 47069);
        FuzzerUtils.init(bArr, false);

        for (i = 12; i < 217; ++i) {
            iArr[i + 1][i + 1] = iMeth(i, Test.byFld, -252);
            for (i20 = i; i20 < 122; i20++) {
                b1 = false;
                fFld += (((i20 * i20) + i) - fFld);
                i21 -= i21;
                i1 *= i20;
                for (i22 = 1; i22 > i20; i22 -= 3) {
                    i23 = i1;
                    try {
                        i1 = (-20287 / i20);
                        i21 = (-63 % i1);
                        i1 = (iArr[i22 + 1][i - 1] / -89);
                    } catch (ArithmeticException a_e) {}
                }
                Test.instanceCount >>= i;
                iArr[i][i + 1] -= (int)fFld;
                i21 = i20;
            }
            fFld += (i * i23);
        }
        i23 *= (int)Test.instanceCount;
        for (f1 = 11; f1 < 252; ++f1) {
            i23 += (int)f1;
        }
        for (i25 = 2; i25 < 336; ++i25) {
            switch (((i24 >>> 1) % 6) + 76) {
            case 76:
                i26 += (int)fFld;
                dArrFld = dArrFld;
                dArrFld[i25] = i21;
                for (i27 = 1; i27 < 75; i27++) {
                    for (i29 = 1; 2 > i29; ++i29) {
                        if (b1) {
                            d2 = Test.instanceCount;
                            i28 = -34;
                            i28 += (i29 * i29);
                            i26 += i;
                        } else if (b1) {
                            d2 -= i22;
                        } else {
                            bArr[i25] = false;
                        }
                    }
                }
                break;
            case 77:
                i26 = i26;
                break;
            case 78:
                Test.byFld += (byte)(i25 - Test.instanceCount);
            case 79:
                Test.iArrFld = iArr[i25 + 1];
                break;
            case 80:
                d2 -= i22;
            case 81:
                Test.fArrFld[i25] = fFld;
                break;
            default:
                i30 += (((i25 * i28) + f1) - i25);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
