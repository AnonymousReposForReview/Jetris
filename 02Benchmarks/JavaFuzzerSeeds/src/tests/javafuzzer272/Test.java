package tests.javafuzzer272;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:08:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7499470805736729238L;
    public static float fFld=94.269F;
    public static boolean bFld=false;
    public static short sFld=-21918;
    public double dFld=-2.67461;
    public int iFld=193;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.lArrFld, 3109828047L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i5, float f) {

        byte by1=-67;
        double d1=1.53504;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 49758L);

        i5 += (int)Test.fFld;
        by1 = (byte)i5;
        i5 <<= i5;
        lArr[(i5 >>> 1) % N] = i5;
        i5 <<= i5;
        i5 -= i5;
        d1 += 251;
        Test.bFld = Test.bFld;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)-134);
        Test.iArrFld[(-58056 >>> 1) % N] = (int)Test.instanceCount;
        i5 += (int)d1;
        i5 <<= -9;
        Test.sFld += (short)-6951658581737527508L;
        i5 = i5;
        i5 = i5;
        vMeth1_check_sum += l1 + i5 + Float.floatToIntBits(f) + by1 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i6=-1574, i7=216, i8=225, i9=-11, i10=-48, i11=-21490;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.608F);

        vMeth1(Test.instanceCount, i6, -74.469F);
        for (i7 = 4; i7 < 210; ++i7) {
            fArr[i7 - 1] *= -112;
            i6 = i8;
            i9 = 8;
            do {
                if (Test.bFld) continue;
                i10 = 1;
                while (++i10 < 1) {
                    i8 += i10;
                    i11 = -53722;
                    i11 += (i10 * i10);
                    Test.bFld = Test.bFld;
                    Test.iArrFld[i9 - 1] = i8;
                    i11 = i9;
                    Test.instanceCount += i11;
                    i11 &= i10;
                }
            } while (--i9 > 0);
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(long l, int i1, int i2) {

        double d=-72.39301, dArr[]=new double[N];
        int i3=-61123, i4=52389, i12=12, i13=-4, iArr[]=new int[N];
        byte by=-58;
        float f1=-125.709F;

        FuzzerUtils.init(dArr, 1.113913);
        FuzzerUtils.init(iArr, -92);

        l *= (long)((dArr[(i1 >>> 1) % N]--) - d);
        for (i3 = 4; 378 > i3; ++i3) {
            by <<= (byte)(++iArr[i3 + 1]);
            i1 += (int)((l++) - i1);
            vMeth();
            for (i12 = 5; 1 < i12; --i12) {
                i2 = i12;
                f1 += 24354;
                Test.lArrFld[i12 + 1] -= l;
                i4 *= -2;
                Test.fFld *= i1;
                iArr[i3] *= i1;
                l = i1;
                Test.iArrFld[i3] += i4;
                i13 &= i3;
            }
        }
        long meth_res = l + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + by + i12 + i13 + Float.floatToIntBits(f1)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11171, i14=-10, i15=-241, i16=-13, i17=-1, i18=-11, i19=18007, i20=-247, i21=0, i22=-3;
        short s=-21271;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.1021F);

        i >>= (int)(((Test.fFld * i) - (s - Test.instanceCount)) * fMeth(Test.instanceCount, i, 41447));
        i /= (int)((long)(dFld) | 1);
        i = iFld;
        i14 = 1;
        while (++i14 < 169) {
            sArrFld[i14 + 1] -= (short)iFld;
            Test.iArrFld[i14] -= (int)Test.instanceCount;
            if (Test.bFld) {
                iFld <<= (int)0L;
            }
            Test.iArrFld[i14] = (int)Test.instanceCount;
            Test.iArrFld[i14 + 1] -= (int)Test.instanceCount;
            iFld += -112;
            i += (1 + (i14 * i14));
            Test.lArrFld[i14 - 1] >>= i;
            Test.instanceCount = iFld;
        }
        for (i15 = 3; i15 < 162; i15++) {
            Test.instanceCount += i15;
            Test.instanceCount -= Test.instanceCount;
            iFld -= i16;
        }
        for (i17 = 14; i17 < 329; i17++) {
            for (i19 = 4; i19 < 80; ++i19) {
                fArr1[(-5 >>> 1) % N] = -9079;
                Test.fFld *= Test.fFld;
                i = i16;
                Test.iArrFld[i19 - 1] += (int)dFld;
                for (i21 = 1; i21 < 2; i21++) {
                    dFld -= 25373L;
                    Test.sFld += (short)Test.fFld;
                    iFld = i15;
                    Test.instanceCount += i;
                    Test.lArrFld = Test.lArrFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
