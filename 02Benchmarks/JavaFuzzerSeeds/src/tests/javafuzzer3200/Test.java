package tests.javafuzzer3200;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:48:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=25L;
    public static double dFld=-112.106931;
    public float fFld=114.455F;
    public static int iFld=-2;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-16);
        FuzzerUtils.init(Test.iArrFld, -118);
        FuzzerUtils.init(Test.lArrFld, 6L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1) {

        boolean b=true;
        int i12=-206, i13=9, i14=-20065, i15=29;
        float f1=0.752F, f2=-73.429F;
        long l2=34126L;

        l1 *= (long)Test.dFld;
        b = b;
        i12 <<= i12;
        f1 *= i12;
        l -= i12;
        for (i13 = 16; i13 < 329; ++i13) {
            for (l2 = 5; l2 > 1; l2 -= 2) {
                i12 = (int)l;
                i15 = i13;
                l1 >>= l;
                Test.instanceCount >>>= l1;
                i12 = (int)f2;
                i14 = i13;
                f1 += l2;
            }
        }
        f2 *= -3443;
        vMeth1_check_sum += l + l1 + (b ? 1 : 0) + i12 + Float.floatToIntBits(f1) + i13 + i14 + l2 + i15 +
            Float.floatToIntBits(f2);
    }

    public static double dMeth(int i4, int i5) {

        int i6=-15314, i7=-132, i8=-12, i9=-25406, i10=-3, i11=34723, i16=160, i17=54077, i18=7;
        float f=2.248F;

        i4 /= (int)((i5--) | 1);
        Test.byArrFld[(i4 >>> 1) % N] -= (byte)Integer.reverseBytes((int)((++i4) + (Test.instanceCount - 0)));
        i4 = (int)((i4++) + (Test.iArrFld[(i5 >>> 1) % N] *= (int)(Test.instanceCount--)));
        for (i6 = 5; i6 < 331; ++i6) {
            Test.dFld = ((f - (++i4)) - (++i7));
            for (i8 = 1; i8 < 5; i8++) {
                i4 -= (int)Math.min(Math.min(--Test.instanceCount, i4 - i6), Test.lArrFld[i8 - 1][i6]);
            }
            for (i10 = 1; 5 > i10; ++i10) {
                vMeth1(Test.instanceCount, Test.instanceCount);
            }
            for (i16 = i6; i16 < 5; i16++) {
                i18 = 1;
                do {
                    Test.instanceCount = Test.instanceCount;
                    Test.iArrFld[i6 + 1] = i5;
                } while (++i18 < 1);
                Test.dFld += Test.instanceCount;
                Test.instanceCount += i11;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i16 + i17 + i18;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth() {

        int i=52890, i1=13407, i2=52140, i3=4, i19=1, iArr[][]=new int[N][N];
        float f3=-1.762F;
        boolean b1=true;
        byte by=-122;

        FuzzerUtils.init(iArr, -27);

        for (i = 7; 232 > i; ++i) {
            for (i2 = i; i2 < 7; i2++) {
                iArr[i - 1][i2] = (int)(-(-dMeth(i3, 223)));
                i3 -= i1;
                f3 += 36134;
                i1 = 15358;
                fArrFld[i2][i2] *= f3;
                switch (((i2 >>> 1) % 2) + 81) {
                case 81:
                    b1 = b1;
                    i19 = 1;
                    while (++i19 < 1) {
                        i3 <<= by;
                        fFld -= i1;
                        i1 += (-6116 + (i19 * i19));
                        Test.dFld += i;
                        Test.iArrFld = iArr[i19];
                    }
                    break;
                case 82:
                    Test.lArrFld[i + 1][i2 - 1] = (long)f3;
                    break;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) + i19 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=191, i21=214, i22=212, i23=-4, i24=8014, i25=-8567, i26=-9, i27=-24303;
        double d=1.63379;
        short s=-8981;
        byte by1=-115;
        boolean b2=false;

        vMeth();
        for (i20 = 4; i20 < 206; ++i20) {
            for (d = 124; d > 6; d--) {
                i23 = 1;
                do {
                    Test.iArrFld[i23 - 1] = i21;
                    Test.iArrFld[i20 + 1] += i21;
                    fFld -= i21;
                    i21 = i20;
                    i21 <<= s;
                    Test.iFld >>= (int)Test.instanceCount;
                    i21 = Test.iFld;
                    i22 >>= i20;
                    Test.iFld = i21;
                } while (++i23 < 2);
                i24 = 1;
                do {
                    i21 = -50032;
                    Test.iArrFld[(int)(d)] -= (int)Test.instanceCount;
                } while (++i24 < 2);
                by1 <<= (byte)i20;
                Test.iArrFld = Test.iArrFld;
                try {
                    i21 = (i22 % 14712);
                    i22 = (50505 / i20);
                    i22 = (i21 / Test.iArrFld[(int)(d - 1)]);
                } catch (ArithmeticException a_e) {}
                fFld -= fFld;
                Test.iFld += (-205 + (d * d));
                fFld = -5362;
            }
            for (i25 = 3; i25 < 124; ++i25) {
                i27 = 1;
                while (++i27 < 2) {
                    i26 >>= i26;
                    i26 = i24;
                    try {
                        i22 = (3716 % i26);
                        Test.iFld = (-23480 % i22);
                        i21 = (i26 % -106);
                    } catch (ArithmeticException a_e) {}
                    by1 = (byte)i27;
                }
                if (b2) break;
                i21 += (i25 * i23);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
