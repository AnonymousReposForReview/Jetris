package tests.javafuzzer3166;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:07:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-68L;
    public static int iFld=3;
    public static int iFld1=-14;
    public float fFld=0.901F;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.dArrFld, 0.28053);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-4, i4=-40127, i5=219, i6=-3, i7=26, i8=-103, iArr[]=new int[N];
        float f=2.829F;
        byte by=-119;
        boolean b1=true, bArr[][]=new boolean[N][N];
        short s1=-17214;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -90.75083);
        FuzzerUtils.init(iArr, 18012);
        FuzzerUtils.init(bArr, true);

        i3 = (int)Test.instanceCount;
        i4 = 1;
        do {
            i3 -= i4;
            dArr[i4] = Test.instanceCount;
            for (i5 = 6; 1 < i5; --i5) {
                for (f = 1; f < 2; ++f) {
                    i3 += (int)f;
                    i6 += (int)(((f * by) + i7) - f);
                    switch ((i5 % 5) + 102) {
                    case 102:
                        iArr[i4 - 1] = (int)Test.instanceCount;
                    case 103:
                        switch (((i3 >>> 1) % 1) + 41) {
                        case 41:
                            Test.instanceCount ^= i8;
                            bArr = bArr;
                            i3 = (int)f;
                            iArr[i4 - 1] += i7;
                            break;
                        default:
                            if (b1) continue;
                        }
                        break;
                    case 104:
                        by = (byte)s1;
                    case 105:
                        iArr[i5 - 1] *= i6;
                        break;
                    case 106:
                        Test.instanceCount += 98L;
                        break;
                    }
                }
            }
        } while (++i4 < 256);
        vMeth2_check_sum += i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + by + i8 + (b1 ? 1 : 0) + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(boolean b, int i2) {

        int i9=-13, i10=-115, i11=59021, i12=-203;
        double d=-117.63776;

        vMeth2();
        for (i9 = 13; i9 < 235; i9++) {
            Test.iArrFld[i9 - 1] -= -40491;
            Test.iArrFld[i9] = 125;
            Test.instanceCount >>= i2;
            switch (((i9 % 9) * 5) + 40) {
            case 77:
            case 47:
                i2 += (((i9 * i10) + i2) - i9);
                i2 -= -9;
                if (b) {
                    d += i2;
                    if (b) continue;
                } else {
                    for (i11 = i9; i11 < 7; ++i11) {
                        if (b) continue;
                        Test.iArrFld[i11] >>= (int)Test.instanceCount;
                        Test.instanceCount = i12;
                    }
                }
                break;
            case 46:
                i12 += Test.iFld;
                break;
            case 72:
                Test.instanceCount = -4;
                break;
            case 71:
            case 45:
                Test.iFld1 *= i9;
                break;
            case 43:
                Test.instanceCount += (i9 ^ Test.instanceCount);
                break;
            case 59:
                i12 += i9;
                break;
            case 81:
                if (b) break;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i2 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12;
    }

    public static void vMeth(short s) {

        boolean b2=false;
        double d1=-2.85676, d2=41.63284;
        float f1=124.545F, f2=-80.67F;
        int i14=-5381, i15=-2;

        vMeth1(b2, Test.iFld);
        d1 = 1;
        do {
            if (false) {
                Test.instanceCount += (long)(((d1 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                Test.iFld1 -= s;
                d2 = 4728;
                vMeth_check_sum += s + (b2 ? 1 : 0) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
                    Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i14 + i15;
                return;
            } else {
                Test.iFld1 += (int)d1;
                f1 = (float)d1;
                Test.instanceCount = Test.iFld;
            }
        } while (++d1 < 240);
        Test.iFld = (int)Test.instanceCount;
        f2 = 1;
        do {
            for (i14 = 1; i14 < 4; i14++) {
                d2 += s;
                Test.instanceCount = i14;
                Test.instanceCount = i15;
            }
        } while (++f2 < 392);
        vMeth_check_sum += s + (b2 ? 1 : 0) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-15584, i16=-14, i17=-23, i18=50, i19=49318, i20=-188;
        short s2=10911;
        boolean b3=false;
        byte by1=-73;

        i = 1;
        while (++i < 285) {
            i1 += (((i * i1) + Test.instanceCount) - i);
            vMeth(s2);
        }
        b3 = b3;
        i16 = 1;
        while (++i16 < 196) {
            i1 += (((i16 * Test.iFld) + Test.iFld1) - s2);
            Test.iFld1 %= (int)((long)(fFld) | 1);
            by1 += (byte)i16;
            Test.iFld1 -= (int)-127L;
            for (i17 = 7; i17 < 128; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    double d3=-2.96578;
                    switch (((i >>> 1) % 5) + 106) {
                    case 106:
                        if (b3) {
                            Test.instanceCount = (long)fFld;
                        } else {
                            i20 -= i;
                            i20 *= i16;
                            Test.iArrFld[i17] += (int)fFld;
                            fFld -= i19;
                        }
                        Test.iArrFld[i19] -= 48186;
                        Test.instanceCount >>>= -86;
                        i1 = (int)-8614201800612757609L;
                        break;
                    case 107:
                        i20 -= i16;
                        Test.iFld1 = (int)-255950433L;
                        break;
                    case 108:
                    case 109:
                        d3 = i16;
                    case 110:
                        Test.instanceCount -= Test.instanceCount;
                        Test.dArrFld[i16 + 1] = s2;
                    default:
                        Test.instanceCount -= (long)d3;
                        Test.iFld = Test.iFld;
                        by1 <<= (byte)i20;
                        try {
                            Test.iFld1 = (-205 / i18);
                            Test.iArrFld[i19 + 1] = (i % i20);
                            i20 = (Test.iFld1 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
