package tests.javafuzzer893;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:19:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5586553138742367384L;
    public byte byFld=-4;
    public static double dFld=0.113864;
    public static boolean bFld=false;
    public int iFld=5;
    public static int iArrFld[]=new int[N];
    public volatile int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i8=189, i9=251, i10=-62, i11=8, i12=3, i13=53;
        short s=-14314;
        float f1=-85.622F;
        boolean b=false;

        i8 = 1;
        do {
            s >>= (short)-3050084247982018916L;
            i9 += (int)Test.instanceCount;
            f1 *= (float)Test.dFld;
            i9 = 18;
            for (i10 = i8; i10 < 5; i10++) {
                i11 += (((i10 * f1) + f1) - i10);
                Test.instanceCount = -690069976L;
                if (b) {
                    for (i12 = 1; i12 < 1; i12++) {
                        i9 -= (int)f1;
                    }
                    Test.instanceCount *= (long)Test.dFld;
                    Test.instanceCount ^= i13;
                    i9 *= i10;
                } else {
                    i13 += (((i10 * i13) + i10) - f1);
                }
            }
        } while (++i8 < 338);
        long meth_res = i8 + s + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, int i4, float f) {

        int i5=-9, i6=60918, i7=39443, i14=-41, i15=-2, i16=-48325, iArr[]=new int[N];
        byte by=-19;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 4359803337947077261L);
        FuzzerUtils.init(iArr, 53308);

        i4 *= (int)(f++);
        for (i5 = 11; 298 > i5; i5++) {
            Test.instanceCount = -20691;
            i7 = 6;
            while (--i7 > 0) {
                f += Math.max(lArr[i7][i5 + 1], (long)((--f) - (i5 - 20L)));
                f = (float)(((i5 + l1) - Math.abs(Test.dFld)) - (i6 + iMeth()));
                iArr[i5] *= i7;
            }
            Test.dFld *= i7;
        }
        for (i14 = 233; i14 > 8; --i14) {
            iArr[i14] -= by;
            iArr[i14 + 1] ^= -1;
            i16 = 1;
            while (++i16 < 7) {
                f *= l1;
                Test.dFld = i15;
            }
            try {
                i15 = (i15 / -1100084709);
                i4 = (i4 / iArr[i14]);
                i4 = (55648 % i14);
            } catch (ArithmeticException a_e) {}
        }
        vMeth1_check_sum += l1 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i14 + i15 + by + i16 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, long l) {

        int i2=5, i3=3, i17=2;
        float f2=0.247F;
        long l2=1300668137L;
        double d=-14.57207;
        byte by1=54;
        short s1=16571;

        for (i2 = 4; i2 < 341; i2++) {
            if (Test.bFld) {
                vMeth1(l, i1, f2);
                i3 &= i3;
                i3 += i2;
            } else {
                l2 = 1;
                do {
                    switch ((int)((l2 % 2) + 96)) {
                    case 96:
                        if (Test.bFld) continue;
                        i3 += (int)(l2 * l2);
                        for (d = 1; d < 1; d++) {
                            l += (83 + (d * d));
                            by1 = (byte)-123;
                            by1 ^= (byte)3;
                            i17 -= -15983;
                            i3 -= i3;
                        }
                        break;
                    case 97:
                        i1 += (int)(((l2 * s1) + i2) - i17);
                        break;
                    default:
                        l -= i3;
                    }
                } while (++l2 < 5);
                vMeth_check_sum += i1 + l + i2 + i3 + Float.floatToIntBits(f2) + l2 + Double.doubleToLongBits(d) + i17
                    + by1 + s1;
                return;
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + Float.floatToIntBits(f2) + l2 + Double.doubleToLongBits(d) + i17 + by1 +
            s1;
    }

    public void mainTest(String[] strArr1) {

        int i=-2607, i18=-63018, i19=-177, i20=54851, i21=-12, i22=-4355, i23=9, i24=-10, i25=-7, i26=-3;
        float f3=-16.348F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.22323);

        i = (int)(Test.instanceCount + ((byFld++) * 8));
        vMeth(i, Test.instanceCount);
        i = i;
        for (i18 = 6; 143 > i18; i18++) {
            for (i20 = 10; i20 < 183; ++i20) {
                i21 += (int)Test.instanceCount;
                for (i22 = 1; i22 < 2; i22++) {
                    Test.instanceCount += (i22 | i19);
                    i += (int)Test.instanceCount;
                    Test.instanceCount = i21;
                }
                if (false) {
                    switch (((i18 % 5) * 5) + 33) {
                    case 52:
                        i19 += (i20 + i18);
                        break;
                    case 40:
                        i19 <<= i19;
                        break;
                    case 36:
                        try {
                            i19 = (i20 / Test.iArrFld[i20 + 1]);
                            i24 = (i24 / Test.iArrFld[i18]);
                            i23 = (Test.iArrFld[i18 - 1] / i21);
                        } catch (ArithmeticException a_e) {}
                    case 37:
                        i25 = 1;
                        do {
                            Test.instanceCount -= iFld;
                            switch ((i20 % 8) + 91) {
                            case 91:
                                Test.instanceCount >>= Test.instanceCount;
                                break;
                            case 92:
                                if (Test.bFld) {
                                    iArrFld1 = iArrFld1;
                                    f3 *= i;
                                    i24 += iFld;
                                } else if (Test.bFld) {
                                    iFld = (int)Test.instanceCount;
                                    dArr[i18] = Test.instanceCount;
                                } else {
                                    i21 >>= (int)Test.instanceCount;
                                    Test.instanceCount += i18;
                                }
                                i23 += (i25 * i25);
                            case 93:
                                iFld += (i25 * i25);
                                break;
                            case 94:
                                i24 = i;
                            case 95:
                                i19 += (((i25 * i21) + i21) - Test.instanceCount);
                                break;
                            case 96:
                                byFld -= byFld;
                            case 97:
                                i21 += i25;
                                break;
                            case 98:
                                dArr = FuzzerUtils.double1array(N, (double)83.75676);
                                break;
                            default:
                                iFld += (int)-56957L;
                            }
                        } while (++i25 < 2);
                    case 47:
                        Test.iArrFld[i18 + 1] = i26;
                        break;
                    }
                } else {
                    i21 -= (int)Test.dFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
