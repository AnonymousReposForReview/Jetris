package tests.javafuzzer2212;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:22:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-939096851L;
    public static float fFld=-52.771F;
    public static volatile short sFld=-21233;
    public static int iFld=38856;
    public static int iFld1=-14;
    public static boolean bFld=false;
    public static byte byFld=-15;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 43);
        FuzzerUtils.init(Test.lArrFld, -27389L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth() {

        short s=30957;
        int i2=178;

        Test.fFld += (++s);
        i2 = (s++);
        i2 |= (int)(i2 -= (int)-153L);
        vMeth_check_sum += s + i2;
    }

    public static long lMeth(float f, int i, long l) {

        int i1=-3, i3=13, i4=-88;
        byte by=-109;

        i1 = 1;
        while (++i1 < 208) {
            if (i != 0) {
            }
        }
        vMeth();
        vMeth();
        vMeth();
        i -= (int)(++Test.fFld);
        for (i3 = 16; i3 < 367; ++i3) {
            i += (Test.iArrFld[i3]--);
            switch (((i3 % 1) * 5) + 91) {
            case 93:
                Test.iArrFld[i3] += (++i4);
                break;
            }
            Test.iArrFld[i3] = Integer.reverseBytes(Math.abs(-10 * (by - i3)));
            Test.iArrFld[i3 + 1] -= (int)(Test.iArrFld[i3 + 1] *= (int)((Test.fFld * i4) * i4));
            l = (((Test.sFld * 2) + i4) * i4);
            i4 = (int)Math.abs(Test.instanceCount);
            l >>= Test.lArrFld[i3];
        }
        long meth_res = Float.floatToIntBits(f) + i + l + i1 + i3 + i4 + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i7=-26127, i8=-31026, i9=-49664, i10=-33447, i11=61700, i12=204, i13=74, i14=-7;
        double d=2.9061;
        boolean b=true;

        for (i7 = 14; i7 < 238; i7++) {
            for (i9 = 7; i9 > i7; i9--) {
                i10 = i8;
                i10 *= (int)Test.instanceCount;
                if (b) {
                    try {
                        i10 = (Test.iFld % 179);
                        Test.iFld = (i7 % i10);
                        i10 = (i9 % 6648);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld -= (int)Test.instanceCount;
                    for (i11 = i9; i11 < 1; ++i11) {
                        Test.fFld += i8;
                    }
                    i13 += (int)d;
                } else if (b) {
                    i14 = 1;
                    while (++i14 < 1) {
                        i12 >>= 26;
                        d += -3;
                    }
                    Test.sFld -= (short)-203;
                    Test.instanceCount -= Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + (b ? 1 : 0);
    }

    public static int iMeth(short s1, int i6) {

        int i15=-4, i16=253, i17=-59154, i18=-1, i19=110, i20=-184;
        byte by1=43;
        long l1=168L;

        vMeth1();
        i15 = 1;
        while (++i15 < 137) {
            i16 >>= i16;
            i17 = 1;
            do {
                for (i18 = 1; i18 < 1; ++i18) {
                    Test.iFld <<= (int)Test.instanceCount;
                    Test.fFld += (((i18 * by1) + Test.fFld) - i15);
                }
                Test.instanceCount -= (long)Test.fFld;
                Test.instanceCount = Test.iFld;
                i16 -= (int)28430L;
                Test.iFld1 = (int)Test.fFld;
                for (l1 = i17; l1 < 1; l1++) {
                    Test.instanceCount = 0;
                    Test.instanceCount += (((l1 * by1) + i20) - Test.instanceCount);
                    Test.instanceCount <<= 62334;
                }
            } while (++i17 < 11);
        }
        long meth_res = s1 + i6 + i15 + i16 + i17 + i18 + i19 + by1 + l1 + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i21=-42816, i22=-11;
        double d1=53.62118;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.940F);

        for (int i5 : Test.iArrFld) {
            switch (((iMeth(Test.sFld, 223) >>> 1) % 4) + 6) {
            case 6:
                Test.iFld1 += i5;
                Test.iFld1 += (int)-2.861F;
                switch ((((234 >>> 1) % 2) * 5) + 87) {
                case 89:
                    i5 <<= (int)-16L;
                    Test.iFld >>= Test.sFld;
                case 90:
                    Test.iArrFld[(Test.iFld1 >>> 1) % N] -= (int)Test.instanceCount;
                    Test.iArrFld[(Test.iFld1 >>> 1) % N] += Test.iFld1;
                    Test.iFld = Test.iFld;
                    break;
                default:
                    for (i21 = 1; 4 > i21; ++i21) {
                        Test.bFld = Test.bFld;
                        fArr[i21 + 1] = Test.fFld;
                    }
                    Test.iFld1 *= 7;
                }
                break;
            case 7:
                d1 += Test.iFld1;
                break;
            case 8:
                if (i5 != 0) {
                }
                break;
            case 9:
                Test.fFld += (float)0.115834;
                break;
            }
        }
        long meth_res = i21 + i22 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i23=-2297, i24=-11, i25=114, i26=-4862, i27=-115, i28=-59041;
        byte by2=-26;

        lMeth(fMeth(), Test.iFld1, Test.instanceCount);
        Test.fFld -= Test.iFld1;
        Test.iFld1 += Test.iFld;
        Test.iFld += -26413;
        for (i23 = 17; i23 < 316; ++i23) {
            i25 = 1;
            while (++i25 < 84) {
                switch (((i24 >>> 1) % 6) + 54) {
                case 54:
                    Test.iFld1 *= i24;
                    Test.instanceCount = Test.iFld1;
                    Test.iFld1 = i24;
                case 55:
                    i26 = 1;
                    do {
                        i24 = Test.byFld;
                        Test.instanceCount = Test.sFld;
                        i24 = (int)Test.fFld;
                        i24 += (((i26 * Test.instanceCount) + i26) - i24);
                    } while (++i26 < 1);
                    break;
                case 56:
                    if (Test.bFld) break;
                    if (Test.bFld) {
                        Test.iFld *= -167;
                        Test.fFld += i25;
                        if (Test.bFld) break;
                    } else {
                        i24 += (i25 + Test.instanceCount);
                        Test.instanceCount += (long)Test.fFld;
                        Test.iArrFld = Test.iArrFld;
                        by2 += (byte)Test.instanceCount;
                    }
                    Test.instanceCount += Test.instanceCount;
                    Test.bFld = Test.bFld;
                case 57:
                    for (i27 = 1; 1 > i27; i27++) {
                        if (Test.bFld) continue;
                        if (Test.bFld) continue;
                        Test.iFld1 <<= (int)Test.instanceCount;
                    }
                    break;
                case 58:
                    Test.iArrFld[i23 + 1] = i24;
                case 59:
                    i28 = Test.iFld;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
