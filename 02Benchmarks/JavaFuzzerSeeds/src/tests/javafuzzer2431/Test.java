package tests.javafuzzer2431;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:23:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-53879L;
    public volatile float fFld=2.119F;
    public static boolean bFld=true;
    public volatile byte byFld=-120;
    public volatile short sFld=-4534;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 85);
        FuzzerUtils.init(Test.fArrFld, 80.447F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(int i16, int i17, int i18) {

        int i19=-103, i20=7, i21=69, i22=-16655, i23=-11;
        float f=0.876F;
        byte by=-51;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)5259);

        for (i19 = 11; i19 < 268; i19++) {
            for (i21 = 1; 6 > i21; ++i21) {
                Test.iArrFld[i19] ^= (int)Test.instanceCount;
                i20 = i18;
                i18 >>= i16;
                i23 = 1;
                do {
                    if (Test.bFld) continue;
                    f += (((i23 * i16) + Test.instanceCount) - f);
                    i16 = (int)Test.instanceCount;
                    Test.instanceCount += i23;
                    sArr[i23 - 1] = (short)i21;
                    switch (((i23 % 8) * 5) + 85) {
                    case 105:
                        i22 = i23;
                        break;
                    case 96:
                        i16 = (int)f;
                    case 110:
                        i20 += i23;
                        break;
                    case 86:
                        i22 += (i23 * i23);
                        break;
                    case 115:
                        Test.instanceCount %= 33218;
                    case 121:
                        i20 -= by;
                    case 109:
                        f = i18;
                        break;
                    case 87:
                        Test.instanceCount += (((i23 * i20) + f) - i23);
                        break;
                    }
                } while (++i23 < 2);
            }
        }
        long meth_res = i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + Float.floatToIntBits(f) + by +
            FuzzerUtils.checkSum(sArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth() {

        int i10=-13, i11=-9, i12=-49898, i13=-1, i14=29922, i15=-4249, i24=-50997;
        double d=0.82603;
        short s=-9927;
        long lArr[]=new long[N];
        float fArr[]=new float[N], fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 234L);
        FuzzerUtils.init(fArr, 0.943F);
        FuzzerUtils.init(fArr1, -106.613F);

        for (i10 = 10; 163 > i10; i10++) {
            switch ((i10 % 8) + 121) {
            case 121:
                for (i12 = i10; i12 < 10; i12++) {
                    for (i14 = 1; 1 > i14; i14++) {
                        i13 += (int)((--Test.instanceCount) - d);
                        i13 -= (int)fMeth1(-1, i14, 13);
                        switch ((i12 % 1) + 34) {
                        case 34:
                            s <<= (short)6;
                            i15 >>= 61895;
                            Test.instanceCount *= i13;
                            i15 >>= i14;
                            break;
                        }
                        i15 <<= (int)Test.instanceCount;
                        if (Test.bFld) break;
                        lArr[i10 + 1] *= Test.instanceCount;
                        i13 += (i14 + i10);
                    }
                }
            case 122:
                Test.instanceCount += i12;
                break;
            case 123:
                i15 <<= i15;
                break;
            case 124:
                fArr = fArr1;
                break;
            case 125:
                Test.iArrFld[i10] <<= i14;
                break;
            case 126:
                i24 &= i14;
                break;
            case 127:
                i13 = i15;
                break;
            case 128:
                i24 -= i12;
                break;
            default:
                Test.iArrFld[i10 - 1] -= i24;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) + s + i24 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i7, int i8) {

        long l=-10L;
        int i9=99, i25=101, i26=-57540, i27=47, iArr[]=new int[N];
        float f1=-1.196F;
        short s1=-15676;

        FuzzerUtils.init(iArr, -38189);

        for (l = 14; 259 > l; ++l) {
            i9 += (int)l;
            i7 &= iArr[(int)(l + 1)];
            i8 += (int)l;
            i9 <<= (int)((-fMeth()) + i9);
            i25 = 7;
            while (--i25 > 0) {
                switch (((i9 >>> 1) % 5) + 10) {
                case 10:
                case 11:
                    iArr[(int)(l)] = i8;
                    i7 = i7;
                    for (i26 = 1; i26 < 1; i26++) {
                        byte by1=124;
                        Test.fArrFld[i26] -= f1;
                        i8 -= i9;
                        s1 += (short)(((i26 * i25) + i25) - Test.instanceCount);
                        i7 += (i26 | by1);
                        Test.instanceCount += (8871 + (i26 * i26));
                    }
                    break;
                case 12:
                    i9 += (i25 - i26);
                    break;
                case 13:
                    i8 *= i26;
                    break;
                case 14:
                    Test.instanceCount >>>= -65450;
                }
            }
        }
        long meth_res = i7 + i8 + l + i9 + i25 + i26 + i27 + Float.floatToIntBits(f1) + s1 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=61373, i1=-43610, i2=-9, i3=-164, i4=-51174, i5=-4060, i6=2, i28=-173, i30=-9, i31=1, i32=10, i33=122;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -20848L);

        for (i = 8; 275 > i; i += 3) {
            i2 = 1;
            while (++i2 < 281) {
                for (i3 = 1; i3 < 1; ++i3) {
                    fFld += i3;
                    i4 -= Math.min(i3, ++i4);
                }
                Test.instanceCount += i2;
                i4 += (((i2 * Test.instanceCount) + i1) - i);
                for (i5 = 1; i5 < 1; i5++) {
                    Test.instanceCount += Math.min((i6++) - iMeth(i, i3), i4);
                }
                lArr1[(i6 >>> 1) % N][i] = Test.instanceCount;
            }
            if (Test.bFld) break;
            i28 = 1;
            while (++i28 < 281) {
                fFld *= i3;
            }
            byFld += (byte)(((i * Test.instanceCount) + fFld) - i);
            i6 -= (int)Test.instanceCount;
            i6 += i2;
        }
        for (int i29 : Test.iArrFld) {
            i1 = i3;
            i29 >>= byFld;
            sFld -= (short)i28;
            i29 = i4;
            i30 = 63;
            while (--i30 > 0) {
                Test.instanceCount += i;
            }
            i31 = 1;
            while (++i31 < 63) {
                for (i32 = 1; i32 < 1; i32 += 3) {
                    i1 -= -123;
                    lArr1[i31 + 1][i31] -= Test.instanceCount;
                    i6 *= (int)fFld;
                    i29 *= (int)127.971F;
                    i33 -= sFld;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
