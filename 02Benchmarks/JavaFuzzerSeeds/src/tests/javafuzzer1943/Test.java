package tests.javafuzzer1943;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:19:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-24172L;
    public static short sFld=26098;
    public volatile boolean bFld=true;
    public static boolean bFld1=false;
    public static int iFld=9;
    public static long lArrFld1[]=new long[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -27091L);
        FuzzerUtils.init(Test.iArrFld, 185);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i4, float f2) {

        double d1=-2.42790, d2=-23.44701;
        int i5=219, i6=-4, i7=129, i8=-119, i9=-194, i10=14;

        Test.sFld = (short)5;
        f2 += Test.instanceCount;
        try {
            i4 >>= i4;
        }
        catch (NegativeArraySizeException exc1) {
            d1 = 1;
            while (++d1 < 216) {
                i4 = (int)l1;
            }
            i4 <<= i4;
            for (i5 = 2; i5 < 291; ++i5) {
                for (i7 = 1; i7 < 6; i7++) {
                    for (d2 = 1; 2 > d2; ++d2) {
                        i8 = i7;
                        Test.instanceCount = -5;
                        i6 += i7;
                    }
                    Test.lArrFld1[i5 - 1] = i8;
                    i4 = i10;
                }
            }
        }
        vMeth1_check_sum += l1 + i4 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d2) + i9 + i10;
    }

    public void vMeth(int i3, long l) {

        float f3=-43.75F;
        int i11=117, i12=3, i13=252, i14=10, i15=-143, i16=15307;

        vMeth1(Test.instanceCount, i3, f3);
        Test.sFld *= (short)13257;
        i11 = i11;
        i11 += 2;
        switch ((((i11 >>> 1) % 2) * 5) + 15) {
        case 24:
            for (i12 = 1; i12 < 188; ++i12) {
                if (bFld) continue;
                Test.iArrFld = Test.iArrFld;
                for (i14 = i12; i14 < 9; i14++) {
                    l -= i15;
                    i16 = 1;
                    while (--i16 > 0) {
                        i3 >>= i14;
                        Test.instanceCount += (i16 * i16);
                    }
                    Test.iArrFld[i12 + 1] >>= (int)Test.instanceCount;
                    bFld = false;
                }
            }
            break;
        case 22:
            i15 *= (int)f3;
            break;
        }
        vMeth_check_sum += i3 + l + Float.floatToIntBits(f3) + i11 + i12 + i13 + i14 + i15 + i16;
    }

    public int iMeth(int i1, int i2, boolean b) {

        float f1=1.900F, fArr[]=new float[N];
        int i17=11, i18=7, i19=-136;
        byte by=-5;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 0.527F);
        FuzzerUtils.init(bArr, true);

        fArr[(-89 >>> 1) % N] += (((f1 - i1) + (f1--)) + i2);
        vMeth(i2, Test.instanceCount);
        for (i17 = 7; i17 < 218; i17++) {
            i18 += i17;
            if (Test.bFld1) {
                dArrFld[i17 + 1] = dArrFld[i17 + 1];
                i19 = 1;
                while (++i19 < 8) {
                    Test.iArrFld[i19 + 1] = i1;
                    i1 = i18;
                    Test.instanceCount = i19;
                    by <<= (byte)-12966;
                    try {
                        Test.iArrFld[i17] = (-1063082517 / i2);
                        i2 = (Test.iArrFld[i17 - 1] % i18);
                        i1 = (i19 / i17);
                    } catch (ArithmeticException a_e) {}
                    if (bFld) break;
                    i1 *= i19;
                    f1 += (i19 - i17);
                }
            } else if (b) {
                bArr[i17 - 1] = b;
            } else {
                Test.instanceCount -= i1;
            }
        }
        long meth_res = i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i17 + i18 + i19 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        double d=-11.74161;
        int i20=48892, i21=-125, i22=186, i23=-61, i24=165, i25=-1, i26=38540, i27=184, iArr1[]=new int[N];
        float f4=-77.321F, f5=-99.589F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)110);
        FuzzerUtils.init(iArr1, 23);

        d = iMeth(Test.iFld, -53458, false);
        for (i20 = 5; i20 < 225; i20++) {
            for (i22 = 3; i22 < 114; ++i22) {
                i23 -= (int)3L;
                byArr[i22] = (byte)i21;
            }
            for (f4 = 7; f4 < 114; f4++) {
                Test.iFld *= i21;
                Test.lArrFld1[i20 - 1] = Test.sFld;
                Test.instanceCount += (long)2.185F;
                i25 = 1;
                do {
                    Test.iFld += (i25 * i25);
                    i23 += i25;
                    i23 >>= (int)Test.instanceCount;
                    Test.iFld -= (int)d;
                    i23 -= (int)Test.instanceCount;
                } while (++i25 < 2);
                i26 = 1;
                while (++i26 < 2) {
                    i24 = (int)12.10F;
                    dArrFld[i20 + 1][i20 - 1] = Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    try {
                        i24 = (i23 % iArr1[i20]);
                        i21 = (-3121 % i20);
                        i24 = (iArr1[(int)(f4)] % 42550305);
                    } catch (ArithmeticException a_e) {}
                }
                i24 = (int)Test.instanceCount;
                for (f5 = 1; f5 < 2; ++f5) {
                    Test.iFld -= (int)f4;
                    dArrFld[(int)(f5 + 1)][i20 - 1] = i26;
                    Test.iFld ^= i23;
                    if (Test.bFld1) break;
                    i23 += (int)f5;
                    if (bFld) continue;
                    Test.iArrFld[(11 >>> 1) % N] = (int)Test.instanceCount;
                    Test.sFld += (short)i20;
                }
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
