package tests.javafuzzer2814;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:50:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static long lFld=-2829143097L;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 191L);
        FuzzerUtils.init(Test.iArrFld, 48161);
        FuzzerUtils.init(Test.fArrFld, 0.725F);
        FuzzerUtils.init(Test.dArrFld, -57.29708);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i4) {

        int i5=7595, i6=14, i7=75, i8=59825, i9=0, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -3);

        i5 = 1;
        while (++i5 < 353) {
            Test.instanceCount *= 8637396487938607598L;
            i6 = 1;
            while (++i6 < 5) {
                for (i7 = 1; i7 < 1; ++i7) {
                    i4 -= -9;
                    i8 += i7;
                    Test.instanceCount = i4;
                    i9 >>= (int)141L;
                    i8 += i7;
                    i4 = (int)195L;
                    iArr[i7] -= i6;
                }
                i9 = (int)-6625031295077866458L;
                i8 += (i6 - i7);
                iArr[i5 + 1] = -5;
                i4 -= 117;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, long l1, int i2) {

        double d=0.32811;
        int i3=13, i10=-91, i11=-33616, i12=-288, i13=-129;
        float f2=1.780F;
        byte by=-46;

        d -= i1;
        i1 = (int)(i3 * ((-1602846007364902419L + iMeth(f2, i1)) - l1));
        i3 -= i2;
        try {
            switch (((i1 >>> 1) % 4) + 47) {
            case 47:
            case 48:
                i10 = 1;
                do {
                    d = Test.instanceCount;
                    i11 = 1;
                    while (++i11 < 7) {
                        l1 += 22;
                        for (i12 = i11; i12 < 1; ++i12) {
                            i1 -= i13;
                            i2 <<= (int)-8L;
                            by = (byte)l1;
                        }
                        Test.lArrFld = Test.lArrFld;
                        f2 = (float)2.19950;
                    }
                } while (++i10 < 218);
                break;
            case 49:
                Test.iArrFld[(i12 >>> 1) % N] >>= i12;
                break;
            case 50:
                Test.fArrFld[(0 >>> 1) % N] = l1;
                break;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            i3 = (int)f2;
        }
        catch (NullPointerException exc3) {
            d -= -19297;
        }
        finally {
            l1 -= i13;
        }
        vMeth_check_sum += i1 + l1 + i2 + Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f2) + i10 + i11 + i12
            + i13 + by;
    }

    public static void vSmallMeth(float f, long l, int i) {


        vMeth(i, l, i);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + l + i;
    }

    public void mainTest(String[] strArr1) {

        int i14=11, i15=5, i16=150, i17=-61339, i18=-253, i19=-14885, i20=-228, i21=-47;
        short s=-8520;
        float f3=1.83F;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        for (int smallinvoc=0; smallinvoc<939; smallinvoc++) vSmallMeth(-114.345F, Test.instanceCount, i14);
        for (i15 = 6; i15 < 154; ++i15) {
            for (i17 = 6; i17 < 169; ++i17) {
                i19 = 1;
                do {
                    i16 += (i19 + i17);
                    s += (short)(i19 | i14);
                    Test.instanceCount -= -113;
                    Test.lFld += i17;
                    i18 &= i16;
                    i16 += i19;
                    Test.dArrFld[i19 + 1] += i16;
                    Test.fArrFld[i17 - 1] *= Test.lFld;
                    if (bFld) break;
                } while (++i19 < 2);
                i16 <<= i19;
                Test.lFld >>>= i19;
                i18 *= (int)f3;
                if (bFld) break;
                switch (((i15 % 1) * 5) + 53) {
                case 54:
                    bFld = true;
                    for (i20 = 1; i20 < 2; i20++) {
                        i21 += i20;
                        if (bFld) {
                            i21 += (int)Test.instanceCount;
                        } else {
                            f3 += (i20 * i19);
                        }
                        switch (((-54725 >>> 1) % 2) + 12) {
                        case 12:
                            bArr[i20][i15 + 1] = bFld;
                            Test.instanceCount += (long)f3;
                            f3 = i20;
                            break;
                        case 13:
                            Test.instanceCount += i19;
                            if (bFld) continue;
                        default:
                            Test.instanceCount += (i20 - i16);
                        }
                    }
                default:
                    i14 >>= (int)Test.instanceCount;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
