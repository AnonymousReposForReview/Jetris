package tests.javafuzzer2639;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:52:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-53605L;
    public static short sFld=2313;
    public static boolean bFld=false;
    public static double dFld=2.129923;
    public float fFld=1.543F;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.sArrFld, (short)-17383);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i1=12, iArr[]=new int[N];
        short s=-22269;
        byte by=19, byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(byArr, (byte)25);

        iArr[(i1 >>> 1) % N] = (int)(((Test.instanceCount - s) + -1.13868) - (by++));
        i1 -= byArr[(i1 >>> 1) % N];
        vSmallMeth_check_sum += i1 + s + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth1() {

        float f2=2.575F, f3=-58.401F;
        byte by1=15;
        int i6=32948, i7=13, i8=-27500, i9=-178, i10=3;
        double d1=-54.104624;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3L);

        f2 *= by1;
        i6 += (int)f2;
        for (f3 = 15; f3 < 372; f3++) {
            by1 /= (byte)(i6 | 1);
            switch (((i6 >>> 1) % 10) + 117) {
            case 117:
                i8 = 1;
                while (++i8 < 5) {
                    for (i9 = 1; 1 > i9; i9++) {
                        i7 += (i9 ^ i10);
                        Test.instanceCount = i6;
                        Test.sFld += (short)d1;
                    }
                    by1 = (byte)i10;
                    i10 = i8;
                    i10 -= (int)Test.instanceCount;
                    Test.instanceCount -= i9;
                    Test.iArrFld[i8] *= (int)Test.instanceCount;
                }
                break;
            case 118:
            case 119:
                i6 >>>= i8;
                break;
            case 120:
                i6 = (int)176081112L;
                break;
            case 121:
                i6 >>= i9;
                break;
            case 122:
                d1 /= -7;
                break;
            case 123:
                try {
                    i7 = (63 % i6);
                    i10 = (i7 % i9);
                    i6 = (5268 / i7);
                } catch (ArithmeticException a_e) {}
                break;
            case 124:
                i10 += (int)(((f3 * Test.instanceCount) + i8) - Test.instanceCount);
                break;
            case 125:
                lArr = lArr;
                break;
            case 126:
                Test.instanceCount = Test.instanceCount;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + by1 + i6 + Float.floatToIntBits(f3) + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f1, short s1) {

        int i4=34768, i5=-59966, i11=-10, i12=-50553, iArr1[]=new int[N];
        double d2=8.95699;
        byte by2=65;

        FuzzerUtils.init(iArr1, -7);

        for (i4 = 3; i4 < 193; i4 += 2) {
            iArr1[i4] = (int)((f1 + iMeth1()) - i5);
            i11 = 1;
            while (++i11 < 16) {
                i5 &= i4;
                d2 *= i4;
                if (i11 != 0) {
                }
                Test.instanceCount += (i11 * i11);
                f1 += i11;
                i12 = 1;
                while ((i12 += 3) < 1) {
                    iArr1[i4 + 1] >>>= i11;
                    Test.bArrFld[i12 + 1] = Test.bFld;
                    Test.instanceCount <<= i5;
                    Test.sArrFld[i11 - 1] += (short)i5;
                    by2 -= (byte)i5;
                    i5 += (((i12 * Test.instanceCount) + i5) - i4);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + s1 + i4 + i5 + i11 + Double.doubleToLongBits(d2) + i12 + by2 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f, double d, int i3) {

        int i13=-55839, i14=-222, i15=-17124;

        Test.instanceCount = (i3 &= iMeth(f, Test.sFld));
        for (i13 = 246; 12 < i13; --i13) {
            if (Test.bFld) {
                if (Test.bFld) break;
                i14 += (i13 ^ i13);
                Test.instanceCount = i14;
            } else if (Test.bFld) {
                i15 = 7;
                do {
                    i14 = i15;
                    Test.sFld >>= (short)144;
                    Test.iArrFld[i13 + 1] ^= i13;
                    i14 = 10;
                    try {
                        Test.iArrFld[i15 - 1] = (i3 / 1129);
                        i14 = (i14 % 138);
                        i3 = (i13 / i3);
                    } catch (ArithmeticException a_e) {}
                    i14 += (((i15 * i14) + f) - Test.instanceCount);
                    Test.instanceCount = i3;
                    Test.instanceCount = -29;
                } while (--i15 > 0);
            } else {
                Test.instanceCount = i14;
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i3 + i13 + i14 + i15;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i2=-240, i16=33455, i17=3, i18=-107, i19=142;
        byte by3=46;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 2.3630);
        FuzzerUtils.init(lArr1, 2L);

        for (int smallinvoc=0; smallinvoc<100; smallinvoc++) vSmallMeth();
        dArr[(i2 >>> 1) % N] -= lMeth(0.689F, Test.dFld, i2);
        fFld = Test.instanceCount;
        if (true) {
            for (i16 = 18; i16 < 295; ++i16) {
                i18 = 1;
                while (++i18 < 91) {
                    Test.dFld += Test.instanceCount;
                    Test.sFld += (short)(-125 + (i18 * i18));
                    i2 <<= i18;
                    i2 = (int)Test.instanceCount;
                    i17 += (((i18 * i16) + i18) - i2);
                    fFld *= 229;
                    Test.iArrFld[i16] = i17;
                    by3 += (byte)(i18 * i18);
                    if (Test.bFld) {
                        i17 = i17;
                        i17 += (3 + (i18 * i18));
                        Test.instanceCount %= (i16 | 1);
                    } else if (Test.bFld) {
                        i2 += i17;
                        lArr1[i18 + 1] += i18;
                        Test.dFld = i16;
                        i19 = 1;
                        do {
                            i2 = 2673;
                            Test.instanceCount += i19;
                            i2 >>= i16;
                            lArr1[i18 + 1] += -166L;
                            i2 *= (int)167L;
                            Test.instanceCount ^= i17;
                            i2 -= -11;
                            i17 = (int)Test.instanceCount;
                        } while (++i19 < 1);
                    } else {
                        Test.instanceCount <<= 139;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
