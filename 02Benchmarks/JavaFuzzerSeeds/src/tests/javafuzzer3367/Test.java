package tests.javafuzzer3367;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:45:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-61765L;
    public static volatile float fFld=0.735F;
    public static boolean bFld=false;
    public byte byFld=104;
    public static short sArrFld[]=new short[N];
    public static volatile double dArrFld[]=new double[N];
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)3276);
        FuzzerUtils.init(Test.dArrFld, -46.64791);
        FuzzerUtils.init(Test.iArrFld, 88);
        FuzzerUtils.init(Test.fArrFld, 8.1005F);
        FuzzerUtils.init(Test.lArrFld, -1894188960L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i12=-110, i13=-2, i14=-44794, i15=144, i16=6, i17=8, i18=-116, i19=9;
        byte by=94;

        for (i12 = 7; i12 < 130; i12++) {
            try {
                i13 = (9963 / i12);
                i13 = (i13 / -15399);
                i13 = (61559 % i13);
            } catch (ArithmeticException a_e) {}
            i13 >>>= i13;
            for (i14 = 1; i14 < 13; ++i14) {
                Test.fFld = i13;
            }
            i15 *= i14;
        }
        i16 = 1;
        do {
            i17 = 1;
            while (++i17 < 9) {
                Test.iArrFld[i17] >>= i15;
                i15 >>= -200;
                Test.iArrFld[i16] -= i12;
                for (i18 = i17; i18 < 1; ++i18) {
                    i19 >>= (int)Test.instanceCount;
                    i15 += (i18 ^ by);
                    try {
                        i13 = (-42150 % i13);
                        i19 = (Test.iArrFld[i16 - 1] % i18);
                        i13 = (i16 % i18);
                    } catch (ArithmeticException a_e) {}
                }
            }
        } while (++i16 < 175);
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1) {

        int i10=-65, i11=8, i20=45232, i21=53261, i22=16476, i23=-12, i24=11, i25=11440;
        byte by1=20;

        Test.fFld -= Test.iArrFld[(-5 >>> 1) % N];
        for (i10 = 382; i10 > 1; i10 -= 2) {
            iMeth();
            Test.iArrFld = Test.iArrFld;
            by1 += (byte)(i10 * i10);
            Test.fFld -= i10;
            if (Test.bFld) {
                for (i20 = 8; 1 < i20; --i20) {
                    Test.iArrFld[i10 + 1] = (int)Test.fFld;
                    l1 += (i20 * i20);
                }
            } else if (Test.bFld) {
                for (i22 = 1; i22 < 8; ++i22) {
                    for (i24 = 2; i24 > 1; --i24) {
                        i23 += (i24 ^ i21);
                        Test.fFld = i24;
                        Test.bFld = Test.bFld;
                    }
                }
            } else if (Test.bFld) {
                l1 *= 4343291020233071301L;
            } else {
                Test.instanceCount -= -243;
                vMeth_check_sum += l1 + i10 + i11 + by1 + i20 + i21 + i22 + i23 + i24 + i25;
                return;
            }
        }
        vMeth_check_sum += l1 + i10 + i11 + by1 + i20 + i21 + i22 + i23 + i24 + i25;
    }

    public static float fMeth(float f1, int i6, int i7) {

        int i8=-23780, i9=-1, i26=-8, i27=-84, i28=16547;
        long l2=34208L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8524806806412613305L);

        lArr[(211 >>> 1) % N] = (Test.instanceCount--);
        for (i8 = 8; i8 < 234; ++i8) {
            i9 *= (int)(((lArr[i8] += (long)-2.25F) * (++i9)) - (i7++));
            i7 >>= (-(i6--));
            vMeth(Test.instanceCount);
            if (Test.bFld) {
                i9 -= (int)f1;
                if (true) continue;
                for (i26 = i8; 7 > i26; ++i26) {
                    Test.instanceCount += (i26 * i26);
                    i28 += (i26 + i6);
                    Test.bFld = Test.bFld;
                    l2 = 1;
                    while ((l2 -= 2) > 0) {
                        Test.instanceCount >>= Test.instanceCount;
                        Test.fArrFld[i8][(int)(l2)] -= l2;
                    }
                }
            } else {
                i7 -= i6;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i26 + i27 + i28 + l2 +
            FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=61136, i1=25674, i2=29105, i3=2, i4=126, i5=-14;
        double d=0.79596;
        long l=-216L;
        short s=-3796;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-122);

        for (i = 15; i < 295; i++) {
            i1 >>= i;
            byArr[i - 1] <<= (byte)(i - Test.sArrFld[i - 1]);
            for (i2 = 90; i2 > 3; i2 -= 2) {
                for (i4 = i2; i4 < 3; ++i4) {
                    float f=12.732F;
                    switch ((i4 % 5) + 30) {
                    case 30:
                        d *= Math.min(i1, ++i5);
                        f += (float)((i2 - (Test.dArrFld[i2 - 1]--)) - ((l * l) + fMeth(Test.fFld, -35705, i4)));
                        f = byFld;
                        switch ((i4 % 9) + 88) {
                        case 88:
                            Test.instanceCount += i2;
                            Test.iArrFld[i] -= (int)Test.instanceCount;
                            i1 -= s;
                            i3 += (i4 * i4);
                            break;
                        case 89:
                            i1 = byFld;
                            Test.iArrFld = Test.iArrFld;
                            Test.lArrFld[i] >>>= -23823;
                        case 90:
                            l >>= i;
                        case 91:
                            i5 += (((i4 * l) + i4) - Test.fFld);
                            i3 += (((i4 * i1) + l) - i1);
                            i5 = (int)Test.instanceCount;
                        case 92:
                            i3 += (int)1.783F;
                            break;
                        case 93:
                            Test.fArrFld[i4 - 1][i2] -= -156;
                            f += (((i4 * i4) + i2) - i4);
                            l = l;
                            if (Test.bFld) break;
                            break;
                        case 94:
                            d += 1.628F;
                            d = -59.742F;
                            Test.fArrFld[i4 + 1][i] -= i4;
                            break;
                        case 95:
                            Test.bFld = Test.bFld;
                            break;
                        case 96:
                            Test.fFld += (i4 - i2);
                            break;
                        }
                    case 31:
                        i1 -= i1;
                        break;
                    case 32:
                        Test.iArrFld = Test.iArrFld;
                    case 33:
                        Test.iArrFld[i4 + 1] >>= (int)l;
                    case 34:
                        Test.fFld += byFld;
                    default:
                        i5 *= i1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
