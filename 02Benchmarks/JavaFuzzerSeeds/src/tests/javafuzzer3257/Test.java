package tests.javafuzzer3257;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:49:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=29499L;
    public static int iFld=-9;
    public static float fFld=2.127F;
    public static short sFld=768;
    public long lFld=2L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9555);
        FuzzerUtils.init(Test.lArrFld, 278689337108530793L);
    }

    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=-11, i9=245, i10=22, i11=30190, i12=-3, i13=37458, i14=42651, i15=-198;

        for (i8 = 286; i8 > 14; --i8) {
            for (i10 = 1; 6 > i10; i10++) {
                i9 = (int)Test.instanceCount;
            }
            Test.iArrFld[i8] = (int)63.291F;
            for (i12 = 1; i12 < 6; i12++) {
                i9 += Test.iFld;
                i11 -= 190;
                Test.instanceCount += Test.instanceCount;
                Test.iArrFld[i8 - 1] = Test.iFld;
                i11 = (int)31L;
            }
            i13 -= -7;
            for (i14 = 1; i14 < 6; i14 += 3) {
                Test.iArrFld[i14] >>= (int)Test.instanceCount;
            }
            i11 = i14;
            i13 *= i8;
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15;
    }

    public static long lMeth(float f2) {

        boolean b=false;
        double d1=2.77427;
        int i16=-13, i17=115, i18=2, i19=-139, i20=-46560, i21=-220, i22=-126, i23=150;
        byte by=13;

        b = (d1 != ((Test.instanceCount * Test.iFld) - Test.instanceCount));
        vMeth();
        for (i16 = 8; i16 < 292; ++i16) {
            Test.fFld += (236 + (i16 * i16));
        }
        for (i18 = 4; i18 < 346; i18++) {
            i19 -= -3;
            for (i20 = 1; 5 > i20; ++i20) {
                Test.iFld = (int)Test.instanceCount;
                for (i22 = i18; i22 < 2; ++i22) {
                    Test.iArrFld[i18] -= 10;
                }
                Test.iFld += (i20 * i20);
                Test.iArrFld[i20 + 1] = i19;
                Test.instanceCount += Test.instanceCount;
                by += (byte)(-6033 + (i20 * i20));
                Test.instanceCount += (((i20 * Test.instanceCount) + Test.instanceCount) - i23);
            }
        }
        long meth_res = Float.floatToIntBits(f2) + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i16 + i17 + i18 + i19 +
            i20 + i21 + i22 + i23 + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static boolean bMeth(int i3, int i4, int i5) {

        int i6=-62916, i7=-8, i25=-142, i26=36502, iArr[][]=new int[N][N];
        float f1=-2.153F;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(lArr, -60273L);

        Test.fFld = (++i5);
        Test.sFld <<= (short)(-(--Test.instanceCount));
        i6 = 1;
        while (++i6 < 335) {
            i3 >>= Test.sFld;
            if (bArr[i6 + 1]) continue;
            iArr[i6][i6 + 1] *= 2;
            for (f1 = 1; f1 < 5; f1++) {
                i7 += (int)((long)f1 ^ Test.instanceCount);
                i5 -= (int)(i6 - ((-10L + lMeth(Test.fFld)) ^ 6));
                if (i7 != 0) {
                    return ((int)(i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i25 + i26 +
                        FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr))) % 2 > 0;
                }
            }
            switch (((i4 >>> 1) % 2) + 92) {
            case 92:
                lArr[i6 - 1] = i4;
                for (i25 = 1; i25 < 5; ++i25) {
                    Test.fFld = -93;
                    Test.instanceCount += (i25 - i4);
                }
                break;
            case 93:
                if (i25 != 0) {
                    return ((int)(i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i25 + i26 +
                        FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr))) % 2 > 0;
                }
                break;
            default:
                Test.instanceCount *= i5;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i25 + i26 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        double d=0.109822;
        int i=-51108, i1=-6, i2=11, i27=-10, i28=-38053, i29=-10, i30=187, i31=33878, i32=81, i33=-6, iArr1[][]=new
            int[N][N];
        float f=-2.292F;
        byte by1=-22;

        FuzzerUtils.init(iArr1, -27831);

        Test.iFld ^= (int)((Test.iFld + (-10 * (Test.iFld - d))) - (Test.iFld++));
        for (i = 6; i < 154; i++) {
            Test.iFld <<= (int)((f + (i1++)) + (f++));
            i2 = 169;
            do {
                i1 %= (int)(Test.iFld | 1);
                if (bMeth(64284, i2, Test.iFld)) break;
                f -= i;
                Test.iFld = (int)Test.instanceCount;
                Test.iFld = 6;
            } while (--i2 > 0);
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-46265);
            Test.iArrFld[i] |= i;
        }
        for (i27 = 22; i27 < 364; ++i27) {
            for (i29 = 1; i29 < 74; i29++) {
                Test.iFld += (i29 | i29);
                i28 += (((i29 * lFld) + by1) - lFld);
                i28 = Test.iFld;
                Test.fFld += (-497 + (i29 * i29));
                Test.lArrFld[i27 + 1] >>= i27;
                Test.iArrFld[i29 - 1] -= 90;
                for (i31 = 1; i31 < 2; i31++) {
                    i28 = (int)f;
                    Test.iFld &= i1;
                    if (false) break;
                    i33 = i32;
                    Test.iArrFld[i31] *= (int)2.15950;
                    d *= Test.instanceCount;
                    i1 += Test.iFld;
                    iArr1 = FuzzerUtils.int2array(N, (int)-2);
                    i33 += i31;
                }
                f -= i1;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  lMeth ->  lMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
