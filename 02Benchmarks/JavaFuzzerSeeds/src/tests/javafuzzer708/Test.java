package tests.javafuzzer708;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:14:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=31188L;
    public static volatile float fFld=85.963F;
    public byte byFld=-87;
    public double dFld=-1.36280;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5) {

        int i6=28810, i7=13, i8=6, i9=9, i10=-58131, i11=1, iArr1[]=new int[N];
        long lArr[]=new long[N];
        byte byArr[][]=new byte[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -2413691692L);
        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(byArr, (byte)-58);
        FuzzerUtils.init(fArr, 11.498F);

        lArr = FuzzerUtils.long1array(N, (long)-166L);
        i6 = 1;
        do {
            for (i7 = 1; 5 > i7; ++i7) {
                i9 = 2;
                while ((i9 -= 3) > 0) {
                    iArr1[(i6 >>> 1) % N] = i5;
                    i8 ^= 1;
                    Test.instanceCount += (((i9 * i6) + Test.instanceCount) - i9);
                }
                for (i10 = 1; i10 < 2; ++i10) {
                    i11 = i9;
                    iArr1[i7] *= -77;
                    byArr[i7 - 1][i7] = (byte)Test.instanceCount;
                }
                i11 -= i10;
                i11 &= (int)Test.instanceCount;
                fArr[i6 - 1] %= (i6 | 1);
                iArr1[i6 - 1] = (int)Test.instanceCount;
            }
        } while (++i6 < 307);
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth1() {

        int i4=42506, iArr2[]=new int[N];
        double d=-76.103217;

        FuzzerUtils.init(iArr2, 42);

        Test.instanceCount -= ((-Test.instanceCount) - (Math.abs(i4) + byFld));
        vMeth(i4);
        d -= Test.fFld;
        iArr2[(i4 >>> 1) % N] = i4;
        long meth_res = i4 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i12=-54205, i13=38684, i14=-7, i15=102, i16=4;
        short s=-21868;
        double d1=-31.89667;

        Test.fFld -= iMeth1();
        lArrFld = lArrFld;
        for (i12 = 11; i12 < 209; ++i12) {
            i14 = 1;
            do {
                s -= (short)i14;
                s ^= s;
                dFld = i13;
                Test.instanceCount -= i14;
                switch (((i12 >>> 1) % 9) + 16) {
                case 16:
                    i13 += (int)Test.fFld;
                    iArrFld[i12 - 1][i14 + 1] += s;
                    Test.instanceCount >>= i13;
                    break;
                case 17:
                    for (d1 = i14; d1 < 1; ++d1) {
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount += i14;
                    }
                    break;
                case 18:
                    i13 = i16;
                case 19:
                    byFld *= (byte)i13;
                    break;
                case 20:
                    iArrFld[i12][i12 - 1] %= (int)(i15 | 1);
                    break;
                case 21:
                    i15 = i13;
                    break;
                case 22:
                case 23:
                    i15 = i15;
                    break;
                case 24:
                    i13 -= i15;
                    break;
                }
            } while (++i14 < 8);
        }
        long meth_res = i12 + i13 + i14 + s + Double.doubleToLongBits(d1) + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=62.723F, f1=4.265F, f2=0.354F, f3=-2.915F;
        int i1=103, i3=15399, iArr[]=new int[N], iArr3[]=new int[N];
        byte by=-89;
        short s1=-25835;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 12163);
        FuzzerUtils.init(dArr, 51.26538);
        FuzzerUtils.init(iArr3, 147);

        for (int i : iArr) {
            f = (i - ((i + f) + (f + i)));
            i1 = 1;
            do {
                Test.instanceCount += i1;
            } while (++i1 < 63);
            switch ((((((int)(f + 125.1005F)) >>> 1) % 1) * 5) + 115) {
            case 120:
                f1 = 63;
                do {
                    i += (int)f1;
                } while (--f1 > 0);
                i <<= (int)((++i) - lArrFld[(i >>> 1) % N]);
                break;
            default:
                dArr[(i1 >>> 1) % N] *= (-(i1 - (2 * (i1 * Test.instanceCount))));
                for (f2 = 2; f2 < 63; ++f2) {
                    f *= by;
                    i -= ((iMeth() + i3) + i3);
                    i3 = i;
                    if (Test.bFld) break;
                    try {
                        iArr[(int)(f2)] = (-19136 / iArrFld[(int)(f2)][(int)(f2 + 1)]);
                        iArrFld[(int)(f2 + 1)][(int)(f2)] = (i3 / 32);
                        iArr[(int)(f2 + 1)] = (iArrFld[(int)(f2)][(int)(f2 - 1)] % -77);
                    } catch (ArithmeticException a_e) {}
                    switch ((int)(((f2 % 2) * 5) + 117)) {
                    case 127:
                        i += (int)-64147L;
                        break;
                    case 119:
                        if (Test.bFld) break;
                        try {
                            i3 = (iArr[(int)(f2 - 1)] % iArrFld[(int)(f2 + 1)][(int)(f2)]);
                            iArr[(int)(f2)] = (i1 / i3);
                            i3 = (-223 % i);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (long)f2;
                        switch (((i3 >>> 1) % 8) + 32) {
                        case 32:
                            dArr[(int)(f2 + 1)] += byFld;
                            dFld = i;
                            iArr[(int)(f2 - 1)] += (int)Test.instanceCount;
                            break;
                        case 33:
                            i3 = (int)Test.instanceCount;
                            f3 = 1;
                            while (++f3 < 2) {
                                i3 = s1;
                                i3 += (-1420 + (f3 * f3));
                                f -= Test.instanceCount;
                            }
                            iArr3[(int)(f2 + 1)] += s1;
                            break;
                        case 34:
                            i3 += (int)((long)f2 | i1);
                        case 35:
                            iArr[(int)(f2 + 1)] <<= 37938;
                            break;
                        case 36:
                            if (Test.bFld) break;
                        case 37:
                            i3 = (int)Test.instanceCount;
                            break;
                        case 38:
                            i = (int)f2;
                        case 39:
                            i3 += i3;
                            break;
                        }
                    default:
                        by += (byte)(((f2 * Test.instanceCount) + f2) - i3);
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
