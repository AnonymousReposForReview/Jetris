package tests.javafuzzer1686;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:31:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3248930801L;
    public static byte byFld=-84;
    public float fFld=127.614F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.dArrFld, 0.8874);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(byte by, int i2, float f) {

        int i3=9, i4=-33588, i5=14049, i6=106;
        double d2=-94.14107;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2L);

        for (i3 = 3; 181 > i3; i3++) {
            Test.instanceCount >>= Test.instanceCount;
            i2 *= (int)Test.instanceCount;
            i4 -= (int)-69.144F;
            i4 += i2;
            d2 *= f;
            Test.instanceCount -= i3;
            i2 = i3;
            i4 *= i2;
        }
        for (long l1 : lArr) {
            if (false) continue;
        }
        for (i5 = 15; i5 < 328; ++i5) {
            i2 = i4;
            Test.iArrFld[i5] += i4;
        }
        i6 ^= i3;
        long meth_res = by + i2 + Float.floatToIntBits(f) + i3 + i4 + Double.doubleToLongBits(d2) + i5 + i6 +
            FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(long l) {

        short s=19992;
        int i1=-57552, i7=-11, i8=12, i9=11, i10=-10;
        double d1=-122.18250, dArr[]=new double[N];
        float f1=34.115F;
        boolean b=true;

        FuzzerUtils.init(dArr, -2.67173);

        s = (short)Test.iArrFld[(i1 >>> 1) % N];
        i1 += (int)(Math.sqrt(Double.longBitsToDouble(l)) - (--i1));
        d1 += Math.abs(lMeth1(Test.byFld, i1, f1));
        i7 = 1;
        do {
            for (i8 = 11; i8 > 1; i8 -= 2) {
                dArr[i8 - 1] *= f1;
                i9 -= i7;
                i1 += i8;
                Test.iArrFld[(i1 >>> 1) % N] <<= i7;
                i9 = i8;
                i1 += i8;
                if (true) {
                    Test.iArrFld[i7 + 1] = i7;
                    Test.instanceCount = l;
                    i10 = i1;
                } else if (b) {
                    i9 = (int)l;
                }
            }
        } while (++i7 < 141);
        long meth_res = l + s + i1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + (b ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i11=-9514, i12=51, i13=-4618, i14=-7, i15=-186;
        double dArr1[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr1, -81.12332);
        FuzzerUtils.init(lArr1, -12203L);

        Test.instanceCount = lMeth(Test.instanceCount);
        i11 = (int)Test.instanceCount;
        for (double d3 : dArr1) {
            i11 = (int)d3;
            for (i12 = 1; i12 < 4; ++i12) {
                for (i14 = 2; i14 > 1; --i14) {
                    Test.iArrFld[i12] <<= i11;
                    d3 += -23694;
                    lArr1[i14] += i14;
                    i15 = -119;
                    i15 <<= i11;
                    Test.instanceCount = Test.instanceCount;
                    i13 -= 3853;
                    d3 *= d3;
                    i15 = i15;
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=0.14660;
        int i=-63289, i16=30796, i17=47029, i18=-148, i19=7, i20=-2, i21=-42327, i22=-4, i23=186, i24=-45, i25=20882;
        short s1=-17675;
        long lArr2[]=new long[N];
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, 231L);
        FuzzerUtils.init(byArr, (byte)-127);
        FuzzerUtils.init(fArr, 1.657F);

        for (d = 9; d < 317; d++) {
            vMeth();
            for (i16 = 4; 82 > i16; i16++) {
                Test.iArrFld[(int)(d - 1)] *= (int)Test.instanceCount;
            }
            for (i18 = 4; 82 > i18; ++i18) {
                i *= (int)fFld;
                switch (((i17 >>> 1) % 2) + 27) {
                case 27:
                    for (i20 = 1; i20 < 2; ++i20) {
                        i21 += (i20 - Test.instanceCount);
                        lArr2[(int)(d + 1)] = i16;
                        Test.instanceCount -= 5;
                        i19 += -147;
                        Test.iArrFld[(int)(d + 1)] = (int)Test.instanceCount;
                    }
                    for (i22 = 1; i22 < 2; ++i22) {
                        byArr[(int)(d + 1)] *= (byte)i23;
                    }
                    break;
                case 28:
                    fArr[i18] += i17;
                    Test.dArrFld[(int)(d)] += i18;
                    Test.instanceCount |= Test.instanceCount;
                    break;
                }
                for (i24 = 1; 2 > i24; ++i24) {
                    switch ((((i21 >>> 1) % 8) * 5) + 40) {
                    case 53:
                        i25 -= i;
                        break;
                    case 77:
                        Test.instanceCount = (long)fFld;
                        Test.iArrFld[(int)(d)] = i23;
                        Test.dArrFld[i24] += Test.instanceCount;
                        break;
                    case 79:
                        Test.iArrFld[i18 - 1] = i23;
                        i25 >>= i22;
                        break;
                    case 59:
                        i23 += (((i24 * i) + Test.instanceCount) - i22);
                        i25 <<= i24;
                        i >>>= Test.byFld;
                        break;
                    case 48:
                        i += -27815;
                        break;
                    case 64:
                        i17 += (((i24 * i23) + i16) - s1);
                    case 54:
                        Test.iArrFld[i18 + 1] = -11;
                        break;
                    case 55:
                        i23 = (int)Test.instanceCount;
                    default:
                        Test.instanceCount += (((i24 * Test.instanceCount) + i23) - i19);
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
