package tests.javafuzzer2427;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:23:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static int iFld=-112;
    public static float fFld=-1.844F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 37.690F);
        FuzzerUtils.init(Test.iArrFld, -39175);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth() {

        int i5=28252, i6=50394, i7=194, i8=-8, i9=13, i10=36585, i11=-11;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5L);

        if (b) {
            Test.instanceCount = -193L;
            lArr[(Test.iFld >>> 1) % N] += Test.iFld;
            Test.iFld -= (int)Test.fFld;
        } else if (b) {
            for (i5 = 3; i5 < 168; i5++) {
                Test.iArrFld[i5] = Test.iFld;
            }
        }
        Test.iFld = i5;
        i6 *= (int)Test.fFld;
        for (i7 = 3; i7 < 264; i7 += 3) {
            try {
                i6 = (3582 % Test.iArrFld[i7 - 1]);
                i6 = (i8 / -10200);
                i8 = (-1910272708 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            Test.fFld %= ((long)(Test.fFld) | 1);
            i6 += (-13 + (i7 * i7));
            for (i9 = 1; i9 < 18; ++i9) {
                Test.instanceCount &= i11;
                Test.iArrFld = Test.iArrFld;
            }
        }
        long meth_res = i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1() {

        double d=-1.44566, d1=74.14357;
        int i2=-49705, i3=6, i4=-4, i12=-238, iArr[]=new int[N];
        short s=2679;
        byte by=-68;

        FuzzerUtils.init(iArr, -47217);

        Test.iFld -= (int)(d - Test.fArrFld[(0 >>> 1) % N]);
        for (d1 = 10; d1 < 230; d1++) {
            Test.iFld += (int)(d1 * i2);
            Test.fArrFld[(int)(d1)] += (float)((Integer.reverseBytes(Test.iFld) - (Test.iFld - d)) - ((i2 + s) *
                (Test.instanceCount + -12)));
            Test.iFld = (int)(((i2 + 110.77F) * i2) + (++i2));
            for (i3 = 1; i3 < 7; ++i3) {
                try {
                    iArr[i3 - 1] = (i4 / i3);
                    iArr[(int)(d1 + 1)] = (Test.iFld % i2);
                    i4 = (i2 % i4);
                } catch (ArithmeticException a_e) {}
                i4 += byMeth();
                try {
                    i2 = (i4 % -33405);
                    Test.iFld = (55 / i2);
                    Test.iArrFld[(int)(d1 - 1)] = (i3 % i3);
                } catch (ArithmeticException a_e) {}
                iArr[(int)(d1 + 1)] = (int)d1;
                i4 *= i2;
                Test.instanceCount = i2;
            }
        }
        i12 = 1;
        while ((i12 += 2) < 272) {
            iArr[i12] += by;
            Test.iFld += (int)-1001325894870610554L;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i2 + s + i3 + i4 + i12 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1) {

        boolean b1=false, b2=true;
        int i13=-32262;
        byte by1=66;

        vMeth1();
        b1 = b2;
        i13 = 1;
        while (++i13 < 330) {
            by1 <<= (byte)i;
        }
        Test.fFld = i1;
        vMeth_check_sum += i + i1 + (b1 ? 1 : 0) + (b2 ? 1 : 0) + i13 + by1;
    }

    public void mainTest(String[] strArr1) {


        Test.instanceCount = Math.abs((int)(-64284 % (((long)(Test.fArrFld[(Test.iFld >>> 1) % N] -= Test.iFld)) | 1)));
        Test.fFld = (Test.instanceCount++);
        vMeth(200, Test.iFld);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
