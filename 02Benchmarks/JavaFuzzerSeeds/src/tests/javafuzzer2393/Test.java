package tests.javafuzzer2393;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:05:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2490937435L;
    public static float fFld=-6.561F;
    public static short sFld=-19284;
    public static int iFld=59862;
    public static float fFld1=115.509F;
    public float fArrFld[][]=new float[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d2) {

        int i9=5231, i10=56619, i11=-8530, i12=-122, i13=165, i14=-26227, iArr1[][]=new int[N][N];
        byte by1=22;
        boolean b=true;

        FuzzerUtils.init(iArr1, 44469);

        for (i9 = 22; 353 > i9; ++i9) {
            by1 += (byte)i9;
            i10 = (int)Test.instanceCount;
            Test.fFld = Test.fFld;
            Test.sFld += (short)Test.instanceCount;
            iArr1[i9][i9] += (int)1.21043;
            for (i11 = 1; i11 < 5; ++i11) {
                iArr1[i9][i11] -= (int)d2;
                if (b) {
                    i12 = i9;
                } else {
                    i12 += i12;
                    i13 = 1;
                    do {
                        Test.fFld += (((i13 * i10) + i12) - Test.instanceCount);
                        Test.instanceCount -= Test.instanceCount;
                        i14 >>= (int)Test.instanceCount;
                    } while (++i13 < 2);
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + i9 + i10 + by1 + i11 + i12 + (b ? 1 : 0) + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i3=177, i4=28709, i5=-58131, i6=232, i7=-37867, i8=6, iArr[]=new int[N];
        double d=-6.80469, dArr[]=new double[N];
        float f=-82.90F, fArr[]=new float[N];
        byte by=115, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)14);
        FuzzerUtils.init(dArr, 115.128062);
        FuzzerUtils.init(iArr, -237);
        FuzzerUtils.init(fArr, 2.273F);

        Test.instanceCount += Math.max((int)((178 + (Test.instanceCount--)) + (i3++)), i3++);
        for (d = 170; d > 7; --d) {
            i4 <<= (int)((Math.abs(-3) * (195L + (byArr[(int)(d - 1)]++))) + Integer.reverseBytes((int)(27 - f)));
        }
        for (double d1 : dArr) {
            for (i5 = 1; 4 > i5; ++i5) {
                for (i7 = i5; i7 < 2; i7 += 3) {
                    Test.instanceCount += (((i7 * f) + i5) - f);
                    switch ((i5 % 5) + 48) {
                    case 48:
                        i8 = (int)f;
                        try {
                            i8 = (i7 % 119);
                            i3 = (i7 % i3);
                            i4 = (-205 % i4);
                        } catch (ArithmeticException a_e) {}
                        iArr[i5 - 1] = (int)((++Test.instanceCount) + (fArr[i5 + 1]--));
                        break;
                    case 49:
                        Test.instanceCount += (-2 + (i7 * i7));
                        by %= (byte)(((i4++) * (i4 + (Test.instanceCount--))) | 1);
                        i4 = (int)(f * (Test.instanceCount = (long)fArr[i7 - 1]));
                        i3 = iArr[i7];
                        break;
                    case 50:
                        vMeth1(d);
                    case 51:
                        i6 -= i3;
                        break;
                    case 52:
                        i6 *= i8;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + by +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(int i, int i1, int i2) {


        vMeth();
        i1 = i;
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        double d3=27.20651, dArr1[]=new double[N];
        int i15=-208, i16=-46, i17=6, i18=-224, i19=-10, i20=-6269, i21=-11, i22=11, i23=51606, iArr2[]=new int[N];
        byte by2=-35;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -4425);
        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(dArr1, 17.44364);

        for (int smallinvoc=0; smallinvoc<136; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld, Test.iFld);
        Test.iFld += Test.iFld;
        iArr2[(Test.iFld >>> 1) % N] *= (int)-1.544F;
        Test.iFld *= (int)d3;
        for (i15 = 12; i15 < 256; ++i15) {
            Test.iFld = -33254;
        }
        d3 += Test.instanceCount;
        Test.iFld = Test.iFld;
        lArr[(52904 >>> 1) % N] = (long)Test.fFld;
        for (i17 = 15; 356 > i17; i17 += 3) {
            Test.iFld = i15;
            iArr2[i17] = (int)-210L;
        }
        for (i19 = 7; 295 > i19; ++i19) {
            fArrFld = fArrFld;
            i18 += (((i19 * i15) + Test.instanceCount) - i15);
            i18 += (int)0L;
        }
        d3 += Test.instanceCount;
        Test.fFld = Test.fFld1;
        i18 = i20;
        d3 += d3;
        for (i21 = 10; i21 < 204; ++i21) {
            i22 -= (int)Test.instanceCount;
            iArr2 = FuzzerUtils.int1array(N, (int)-44705);
            Test.fFld1 = -7135817096607066156L;
            iArr2[i21] = i21;
            switch ((i21 % 9) + 6) {
            case 6:
                i16 = i17;
                Test.instanceCount <<= i16;
                break;
            case 7:
                by2 = (byte)Test.instanceCount;
                break;
            case 8:
                lArr[i21] = i21;
                break;
            case 9:
                i16 += (int)Test.fFld1;
                break;
            case 10:
                Test.instanceCount >>>= i20;
                break;
            case 11:
                i20 -= (int)Test.fFld1;
            case 12:
                i20 = i22;
                break;
            case 13:
                dArr1[i21] *= i23;
                break;
            case 14:
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
