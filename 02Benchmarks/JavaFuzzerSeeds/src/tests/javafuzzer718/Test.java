package tests.javafuzzer718;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:29:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=54653L;
    public static int iFld=-44696;
    public static double dFld=-7.118849;
    public int iFld1=-129;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.byArrFld, (byte)-75);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i11=-39, i12=0, i13=-5, i14=-7, i15=-7;
        float f4=22.316F;
        long l2=60919L, lArr[]=new long[N];
        byte by=-83;
        boolean b1=false;
        short s=-16700;

        FuzzerUtils.init(lArr, -14L);

        lArr[(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i11 = 6; i11 < 256; ++i11) {
            f4 -= Test.instanceCount;
        }
        i13 = 1;
        do {
            switch ((((i11 >>> 1) % 7) * 5) + 72) {
            case 81:
                i12 <<= i13;
                Test.iFld += i13;
                switch (((i12 >>> 1) % 2) + 77) {
                case 77:
                    Test.iFld = (int)l2;
                    Test.instanceCount = Test.iFld;
                    for (i14 = 1; i14 < 8; i14++) {
                        i12 += i11;
                        i12 >>= i15;
                        i12 = 12;
                        Test.iFld >>= (int)Test.instanceCount;
                    }
                case 78:
                    Test.iFld -= by;
                    break;
                }
                break;
            case 83:
                lArr = lArr;
                break;
            case 106:
            case 80:
                i12 *= -9874;
            case 105:
                i12 += (int)18.14590;
                break;
            case 107:
            case 73:
                b1 = b1;
                break;
            default:
                s += (short)(3577L + (i13 * i13));
            }
        } while (++i13 < 201);
        long meth_res = i11 + i12 + Float.floatToIntBits(f4) + i13 + l2 + i14 + i15 + by + (b1 ? 1 : 0) + s +
            FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i4) {

        float f2=64.25F, f3=2.372F;
        int i5=43177, i6=196, i7=38604, i8=-53, i9=54, i10=-163, i16=-10;
        long l3=1596695395L;

        for (f2 = 17; f2 < 335; f2++) {
            for (i6 = 1; i6 < 5; i6++) {
                switch ((int)((f2 % 2) + 92)) {
                case 92:
                    for (i8 = 1; 2 > i8; i8++) {
                        Test.iFld |= (int)((Math.abs(i9) + (f3 - i9)) + ((i8 - i4) + (-2305L + (--i5))));
                        Test.instanceCount = (long)(((i8 + i10) + (2.731F + fMeth())) + i6);
                        Test.instanceCount += (8204992515399044166L + (i8 * i8));
                    }
                    break;
                case 93:
                    if (i4 != 0) {
                        vMeth_check_sum += i4 + Float.floatToIntBits(f2) + i5 + i6 + i7 + i8 + i9 +
                            Float.floatToIntBits(f3) + i10 + l3 + i16;
                        return;
                    }
                    Test.dFld = i7;
                    Test.instanceCount = i4;
                    Test.instanceCount = i5;
                    break;
                }
                i10 += i6;
                for (l3 = (long)(f2); l3 < 2; l3++) {
                    i5 += (int)(l3 * l3);
                    i5 -= i7;
                }
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f2) + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f3) + i10 + l3
            + i16;
    }

    public int iMeth(long l, long l1, int i3) {

        int i17=-12, i18=48344, i19=182, i20=5, i21=0, i22=1, i23=-249, i24=7, i25=-5, i26=3, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -37751);

        vMeth(109);
        for (i17 = 3; i17 < 153; i17 += 2) {
            i18 = i18;
            Test.instanceCount = Test.instanceCount;
            Test.iFld >>= (int)l1;
        }
        for (i19 = 16; i19 < 308; ++i19) {
            for (i21 = 1; i21 < 6; ++i21) {
                i20 *= i20;
            }
            for (i23 = i19; i23 < 6; i23++) {
                switch ((i19 % 2) + 124) {
                case 124:
                    for (i25 = 1; i25 < 1; i25++) {
                        i24 <<= i18;
                        i24 = 3;
                        iArr[i19 + 1] -= i17;
                        i26 ^= i3;
                    }
                    break;
                case 125:
                    Test.iFld += i17;
                    break;
                default:
                    i3 -= i3;
                }
            }
        }
        long meth_res = l + l1 + i3 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.361F, f1=0.914F, f5=2.719F;
        int i=57972, i1=-5, i2=0, i27=33782, i28=-7, i29=4, i30=-14, i31=14, i32=12, i33=-40707;
        boolean b=true;
        byte by1=-122;
        short s1=-21571;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 2.130853);

        for (f = 3; f < 354; ++f) {
            switch ((int)((f % 9) + 39)) {
            case 39:
                Test.instanceCount += (long)f;
                if (b = ((i++) < -751)) continue;
                i = i;
                break;
            case 40:
            case 41:
                Test.instanceCount = Math.max(i - i, (int)((f1 = i) * (i + 79)));
                for (i1 = 1; i1 < 72; i1++) {
                    i2 += (int)((--Test.instanceCount) - iMeth(-127L, Test.instanceCount, i));
                }
                for (i27 = 72; i27 > 2; i27--) {
                    i %= (int)(i2 | 1);
                    for (f5 = f; f5 < 2; ++f5) {
                        Test.iFld ^= i;
                        i28 += i2;
                        Test.instanceCount += (long)f5;
                        f1 += f5;
                        i ^= i29;
                        Test.instanceCount += i1;
                        lArrFld[(int)(f + 1)] -= (long)f1;
                        i = i28;
                        Test.iArrFld[(int)(f)] = i29;
                    }
                    i28 = by1;
                    Test.dFld -= Test.iFld;
                    dArr[i27 + 1][(int)(f + 1)] -= 185;
                    Test.iFld = s1;
                }
                Test.iArrFld[(int)(f - 1)] = i28;
                break;
            case 42:
                for (i30 = (int)(f); i30 < 72; i30 += 2) {
                    for (i32 = 1; i32 < 1; ++i32) {
                        try {
                            i = (i28 % i32);
                            Test.iArrFld[i30 + 1] = (105 % i);
                            i2 = (-67 / iFld1);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld = Test.iFld;
                    }
                    Test.byArrFld[(int)(f)] = (byte)i31;
                }
                break;
            case 43:
                i2 += i32;
                break;
            case 44:
            case 45:
                iFld1 += (int)(f - Test.instanceCount);
                break;
            case 46:
                s1 -= (short)Test.instanceCount;
                break;
            case 47:
                Test.instanceCount += (long)(((f * i33) + Test.instanceCount) - Test.iFld);
                break;
            default:
                Test.iFld = (int)f;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
