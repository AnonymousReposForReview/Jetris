package tests.javafuzzer1996;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:09:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=37874L;
    public float fFld=2.225F;
    public static double dFld=-110.23485;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27556);
        FuzzerUtils.init(Test.fArrFld, -11.809F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i15) {

        int i16=51919, i17=253, i18=26040, i19=-158, i20=42414, i21=-6;
        float f=2.858F;
        boolean b2=false;

        for (i16 = 5; i16 < 309; ++i16) {
            i17 += i16;
            for (i18 = 1; i18 < 5; ++i18) {
                i15 += i17;
                i17 -= (int)f;
                i17 *= i17;
                i17 = i18;
                i19 -= (int)100L;
                Test.iArrFld[i16 + 1] = (int)-5L;
                f += i18;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.dFld -= 196;
                    b2 = b2;
                    i21 += (int)(14.507F + (i20 * i20));
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-62786);
                }
            }
        }
        long meth_res = l1 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f) + i20 + i21 + (b2 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, int i8) {

        int i9=216, i10=142, i11=9, i12=138, i13=-78, i14=-56662, i22=49260;
        boolean b1=true;
        double d=0.63358;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2L);

        for (i9 = 10; i9 < 295; i9 += 3) {
            for (i11 = i9; i11 < 16; ++i11) {
                b1 = b1;
                for (i13 = 1; i13 < 1; i13++) {
                    Test.dFld = ((i7++) - ((++lArr[i9]) * (Test.instanceCount * 203L)));
                    i14 >>= i10;
                    Test.dFld += (i14 += (--i8));
                    Test.dFld += iMeth1(Test.instanceCount, i11);
                    i7 += i13;
                }
                Test.dFld += i8;
                switch ((i9 % 4) + 113) {
                case 113:
                    for (d = 1; d < 1; d++) {
                        i10 += i7;
                        i8 += (int)d;
                        i12 += (int)d;
                    }
                    break;
                case 114:
                    Test.fArrFld[i11 - 1] -= (float)Test.dFld;
                    break;
                case 115:
                case 116:
                    i22 += i22;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(d) + i22 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i2, boolean b) {

        int i3=0, i4=17156, i5=12, i6=2577, i23=0, i24=11, i25=-236, i26=11, iArr[][]=new int[N][N];
        short s=21807;
        byte by=-88;
        double dArr[]=new double[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -131);
        FuzzerUtils.init(dArr, 19.98039);
        FuzzerUtils.init(lArr1, -52601L);

        iArr[(i2 >>> 1) % N][(4 >>> 1) % N] += 58200;
        for (i3 = 10; i3 < 334; ++i3) {
            i4 = (int)Test.instanceCount;
        }
        for (i5 = 7; i5 < 340; i5++) {
            iArr[i5 + 1][i5] = 0;
            iMeth(i3, i3);
            Test.instanceCount *= i6;
            for (i23 = 1; i23 < 5; i23++) {
                i2 = (int)Test.dFld;
                for (i25 = 1; i25 < 2; ++i25) {
                    s &= (short)31542L;
                    dArr[i25 - 1] %= (i3 | 1);
                    lArr1[i5 + 1][i23 + 1] <<= by;
                    l *= 3221758768L;
                    i26 >>= i25;
                }
            }
        }
        vMeth_check_sum += l + i2 + (b ? 1 : 0) + i3 + i4 + i5 + i6 + i23 + i24 + i25 + i26 + s + by +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-76, i1=-43781, i27=-105, i28=0, i29=-175, i30=-14, i31=11, i32=-32892, i33=-217, i34=-19051;
        boolean b3=true;
        short s1=-16318;

        for (i = 3; i < 210; i++) {
            Test.instanceCount += (i * fFld);
            i1 += (i + Test.instanceCount);
        }
        vMeth(1000933349L, i, b3);
        for (i27 = 17; i27 < 321; ++i27) {
            i28 += (6 + (i27 * i27));
            i1 += (int)Test.instanceCount;
            Test.iArrFld[i27 - 1] -= i;
            Test.fArrFld[i27 - 1] *= i27;
        }
        i1 %= (int)(Test.instanceCount | 1);
        for (i29 = 5; 168 > i29; i29 += 3) {
            i28 += (-54 + (i29 * i29));
            i31 = 1;
            do {
                i1 >>>= -32246;
                Test.instanceCount += (((i31 * i30) + i31) - i1);
                Test.iArrFld[i29] -= i29;
                i32 = 1;
                do {
                    i1 += i32;
                    fFld += i32;
                    if (b3) continue;
                    if (b3) {
                        Test.iArrFld[i31 + 1] += i1;
                        i30 -= i27;
                        i30 <<= 7;
                        i30 += (((i32 * i29) + i28) - i);
                    }
                    s1 += (short)(i32 * i);
                } while (++i32 < 3);
                for (i33 = 1; 3 > i33; ++i33) {
                    Test.instanceCount -= i28;
                    fFld += Test.instanceCount;
                    i34 += i33;
                }
            } while (++i31 < 160);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
