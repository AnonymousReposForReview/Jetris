package tests.javafuzzer2506;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:44:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=17815L;
    public static int iFld=9826;
    public static float fFld=-77.312F;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[][]=new long[N][N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 175);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i9, int i10, boolean b) {

        float f1=-2.853F;
        int i11=-15197, i12=47790, i13=19314, i14=4, i15=13;
        short s=20735;

        i10 -= i10;
        for (f1 = 8; f1 < 138; f1 += 2) {
            i11 -= i10;
            Test.fFld = i9;
        }
        for (i12 = 2; 203 > i12; i12++) {
            for (i14 = 1; i14 < 8; i14++) {
                i15 = 224;
                b = b;
                i11 += i13;
            }
            i9 += (i12 + i14);
            if (b) break;
            Test.instanceCount = Test.instanceCount;
            Test.fFld += (((i12 * i9) + s) - f1);
        }
        i11 = (int)99.471F;
        long meth_res = i9 + i10 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(float f) {

        int i5=44, i6=-11184, i7=-48114, i8=11350, i16=27758, i17=4;
        double d1=1.16740;
        boolean b1=false;
        byte by=-48;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5L);

        Test.iFld |= ((Math.max(-53, -1) * (-(Test.iFld - Test.iFld))) + (Test.iFld--));
        for (i5 = 2; i5 < 134; i5++) {
            for (i7 = 1; i7 < 12; ++i7) {
                Test.iArrFld[i7][i5] /= (int)(((long)(-((++i6) + Test.fFld))) | 1);
                Test.iFld -= (int)((d1--) * (i7 + lMeth(12, i6, b1)));
                Test.iFld += i7;
                Test.iFld += (i7 + Test.instanceCount);
                for (i16 = 1; i16 < 2; i16++) {
                    try {
                        i8 = (227 / i16);
                        i8 = (32408 / i16);
                        Test.iArrFld[i16 + 1][i16 + 1] = (60685 % i8);
                    } catch (ArithmeticException a_e) {}
                    i8 &= i7;
                    lArr[i7 + 1] -= i8;
                    i6 = i8;
                    Test.instanceCount = i16;
                    by -= (byte)Test.instanceCount;
                    try {
                        i8 = (-46 / i6);
                        i6 = (i8 % -5395);
                        i8 = (20907 / i5);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i16
            + i17 + by + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, double d, int i1) {

        int i2=184, i3=-233, i4=56174, i18=0, i19=-10379, i20=16, iArr[]=new int[N];
        float f2=60.565F, f3=0.900F;

        FuzzerUtils.init(iArr, 19);

        for (i2 = 3; i2 < 184; i2++) {
            Test.iArrFld[i2][i2] >>>= (--i4);
        }
        Test.instanceCount += (iMeth1(0.671F) - 79);
        Test.instanceCount -= Test.instanceCount;
        for (f2 = 5; f2 < 131; f2++) {
            Test.instanceCount += (long)f2;
        }
        Test.instanceCount = Test.instanceCount;
        i18 = i3;
        f3 = 1;
        do {
            Test.iArrFld[(int)(f3)] = Test.iArrFld[(int)(f3)];
            Test.iArrFld[(int)(f3 - 1)][(int)(f3)] = i2;
            for (i19 = 1; i19 < 10; ++i19) {
                Test.iArrFld[(int)(f3)][i19 - 1] <<= 227;
            }
            d = Test.instanceCount;
            i <<= i3;
        } while (++f3 < 165);
        long meth_res = i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + i18 +
            Float.floatToIntBits(f3) + i19 + i20 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i22=9, i23=-6, i24=12403, i25=110, i26=40, i27=-8;
        float f4=2.729F;
        double d2=0.74747;

        iMeth(Test.iFld, -2.104665, Test.iFld);
        for (i22 = 4; i22 < 155; i22++) {
            i23 -= (int)-241L;
            Test.instanceCount += Test.instanceCount;
            for (f4 = 10; f4 < 166; f4++) {
                i23 = (int)Test.instanceCount;
                Test.iFld += (int)f4;
                Test.iArrFld[(int)(f4 + 1)][i22] = (int)Test.instanceCount;
                Test.iArrFld[(int)(f4 - 1)][(int)(f4)] = i23;
                lArrFld[(int)(f4 + 1)][(int)(f4 + 1)] += -54718;
                d2 = Test.iFld;
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.fFld = Test.fFld;
                    Test.fFld += Test.instanceCount;
                    try {
                        i23 = (29820 / i22);
                        Test.iArrFld[i25 + 1][(int)(f4)] = (i24 % Test.iArrFld[i22][(int)(f4 + 1)]);
                        Test.iFld = (i24 % Test.iArrFld[i25 + 1][i25]);
                    } catch (ArithmeticException a_e) {}
                    i23 += i25;
                    try {
                        i26 = (Test.iFld % i23);
                        i26 = (i22 / 49465);
                        i24 = (i23 / 221);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(int)(f4 - 1)][(int)(f4 + 1)] = Test.iFld;
                    try {
                        i26 = (i26 / i26);
                        Test.iArrFld[i25 + 1][i22 + 1] = (978708732 % Test.iArrFld[i22][(int)(f4)]);
                        i24 = (174 % i26);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(int)(f4 + 1)][i25] = i23;
                    i24 *= i23;
                }
                i26 -= (int)f4;
            }
            i24 += (((i22 * i26) + i26) - Test.instanceCount);
            i26 += 14;
            switch ((((i24 >>> 1) % 7) * 5) + 72) {
            case 104:
                Test.instanceCount *= Test.instanceCount;
                d2 += i27;
                d2 -= i25;
                break;
            case 82:
                Test.instanceCount *= i24;
            case 81:
                Test.iArrFld[i22 + 1][i22] <<= i26;
            case 74:
                bArrFld[(Test.iFld >>> 1) % N] = true;
                break;
            case 83:
                Test.iFld = 10;
                break;
            case 73:
                Test.iArrFld[i22 + 1][i22] >>= (int)Test.instanceCount;
                break;
            case 87:
                Test.instanceCount += (i22 - i25);
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
