package tests.javafuzzer2820;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:56:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3314302826L;
    public static float fFld=81.737F;
    public byte byFld=54;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];
    public static volatile short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.113856);
        FuzzerUtils.init(Test.iArrFld, -34353);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, -2.428F);
        FuzzerUtils.init(Test.sArrFld, (short)-996);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, int i11, int i12) {

        double d1=0.59902;
        int i13=11, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -6);

        d1 -= Test.instanceCount;
        Test.dArrFld[(i11 >>> 1) % N] -= i12;
        iArr = iArr;
        Test.instanceCount = i10;
        i13 = 378;
        while (--i13 > 0) {
            i12 *= i12;
        }
        long meth_res = i10 + i11 + i12 + Double.doubleToLongBits(d1) + i13 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6, int i7, float f) {

        int i8=-253, i9=-152, i14=-159, i15=56, i16=-247, i17=27;
        short s=-16378;
        double d2=2.66850;
        boolean b=false;
        byte by=104;
        long l=4032323603L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 649033331L);

        for (i8 = 11; 206 > i8; ++i8) {
            iMeth(i9, i6, 0);
            s = (short)i9;
            switch ((i8 * 5) + 56) {
            case 107:
                for (i14 = 1; i14 < 8; i14++) {
                    lArr[i8 - 1] += Test.instanceCount;
                    Test.instanceCount -= i14;
                    d2 = Test.instanceCount;
                    Test.iArrFld[i14] = Test.iArrFld[i8];
                    for (i16 = 1; i16 < 2; ++i16) {
                        if (b) break;
                        i15 <<= 11;
                        if (i16 != 0) {
                            vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + s + i14 + i15 +
                                Double.doubleToLongBits(d2) + i16 + i17 + (b ? 1 : 0) + by + l +
                                FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        Test.instanceCount = i7;
                        Test.bArrFld[i8 + 1] = b;
                    }
                }
            case 282:
            case 92:
            case 165:
                i15 *= (int)Test.instanceCount;
                break;
            case 277:
                Test.instanceCount >>= i16;
                break;
            case 320:
                i15 -= 8741;
                break;
            case 141:
                Test.instanceCount &= i17;
                break;
            case 62:
                if (false) continue;
                break;
            case 381:
                if (false) continue;
            case 61:
                i9 = -1;
                break;
            case 342:
                Test.iArrFld[i8 - 1][i8 - 1] = (int)Test.instanceCount;
                break;
            case 137:
                i15 -= i7;
                break;
            case 106:
                Test.iArrFld[i8 + 1] = Test.iArrFld[i8 - 1];
                break;
            case 123:
                s -= (short)3944856640L;
            case 263:
                Test.iArrFld[(i9 >>> 1) % N][i8 + 1] *= i7;
                break;
            case 305:
                Test.instanceCount |= i15;
                break;
            case 133:
                Test.iArrFld[i8][i8 - 1] *= 8;
            case 188:
                i6 = i15;
                break;
            case 308:
                i7 &= i6;
                break;
            case 316:
                Test.iArrFld[i8][i8 + 1] |= s;
                break;
            case 211:
                i6 += (i8 ^ i9);
            case 235:
                i6 += i8;
                break;
            case 175:
                Test.fArrFld[i8] = Test.instanceCount;
                break;
            case 196:
                i17 += (((i8 * s) + i14) - Test.instanceCount);
                break;
            case 286:
                Test.instanceCount += i8;
                break;
            case 202:
            case 64:
                i7 += (int)Test.instanceCount;
            case 209:
                Test.instanceCount += -74;
                break;
            case 65:
                f = f;
                break;
            case 404:
                lArr[i8 - 1] = i8;
                break;
            case 153:
                i9 += i16;
                break;
            case 96:
                b = b;
                break;
            case 172:
                i7 -= i14;
                break;
            case 311:
                Test.iArrFld[i8] = FuzzerUtils.int1array(N, (int)-16313);
                break;
            case 338:
                i6 += (int)d2;
                break;
            case 259:
                Test.instanceCount += (i8 | Test.instanceCount);
            case 115:
                if (b) continue;
            case 347:
                d2 += f;
                break;
            case 348:
                try {
                    i17 = (i16 / -212);
                    i17 = (i7 / -58498);
                    i17 = (61094 / i7);
                } catch (ArithmeticException a_e) {}
                break;
            case 119:
                i9 <<= (int)Test.instanceCount;
                break;
            case 273:
                by = (byte)2357;
            case 166:
                try {
                    i17 = (-158 / i6);
                    i17 = (i16 / i17);
                    i6 = (Test.iArrFld[i8 + 1][i8 + 1] % 3);
                } catch (ArithmeticException a_e) {}
                break;
            case 223:
                i15 = (int)-84.238F;
                break;
            case 147:
                i6 *= by;
            case 326:
                i15 += i8;
                break;
            case 78:
                Test.iArrFld[i8 + 1][i8 + 1] = i17;
            case 385:
                d2 = -14;
                break;
            case 124:
                i7 = i6;
                break;
            case 149:
                by += (byte)(((i8 * s) + i7) - i16);
                break;
            case 333:
                i15 = -6;
                break;
            case 195:
                Test.fArrFld[i8 + 1] = Test.instanceCount;
                break;
            case 93:
                i15 *= (int)d2;
                break;
            case 60:
                l -= i14;
                break;
            case 343:
                i15 *= i8;
                break;
            case 100:
                i7 = i17;
                break;
            case 218:
                Test.instanceCount = 22363L;
                break;
            case 402:
                Test.instanceCount = l;
                break;
            case 281:
                i6 >>= i7;
                break;
            case 232:
                Test.instanceCount = l;
                break;
            case 130:
                l = -31498;
            case 177:
                l -= i15;
                break;
            case 405:
                Test.instanceCount ^= i8;
            case 155:
                lArr[i8] = i6;
                break;
            case 288:
                Test.sArrFld = Test.sArrFld;
                break;
            case 80:
                lArr[i8] -= i7;
            case 161:
                Test.iArrFld[i8][i8] *= -13665;
            case 374:
                i15 = i16;
                break;
            case 160:
                d2 = i7;
                break;
            case 312:
                Test.instanceCount += (i8 + i14);
                break;
            case 207:
                i9 = (int)Test.instanceCount;
                break;
            default:
                Test.iArrFld[i8 + 1] = Test.iArrFld[i8];
            }
        }
        vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + s + i14 + i15 + Double.doubleToLongBits(d2) +
            i16 + i17 + (b ? 1 : 0) + by + l + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=222, i4=-12, i5=-31414, i18=-1450, i19=39283, i20=-13, i21=-9;
        double d=-40.1576, d3=-1.72946;
        byte by1=-71;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 26.722F);

        i2 = (i + (i1--));
        for (i3 = 11; i3 < 346; i3++) {
            switch ((i3 % 8) + 122) {
            case 122:
                for (d = 1; d < 5; d++) {
                    Test.instanceCount *= (long)fArr[(int)(d)];
                    vMeth1(37519, i2, 71.98F);
                }
                i5 ^= by1;
                break;
            case 123:
                Test.iArrFld[i3 + 1][i3 + 1] = i;
                Test.iArrFld[i3] = Test.iArrFld[i3 - 1];
                break;
            case 124:
                for (i18 = 1; 5 > i18; i18++) {
                    for (i20 = 1; i20 < 2; ++i20) {
                        i19 = (int)Test.instanceCount;
                        Test.instanceCount += (140 + (i20 * i20));
                    }
                    i5 *= (int)Test.instanceCount;
                    i5 = i;
                }
                break;
            case 125:
                b1 = b1;
                break;
            case 126:
                i21 >>= -14;
                break;
            case 127:
                i1 = i18;
                break;
            case 128:
                i1 += i3;
                break;
            case 129:
                d3 -= Test.instanceCount;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + by1 + i18 + i19 + i20 + i21 + (b1
            ? 1 : 0) + Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=-24432, i23=1, i24=4778, i25=-56545, i26=-249, i27=-61087, i28=42894, i29=-3, i30=-212;
        boolean b2=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-45);

        vMeth(i22, i22, i22);
        Test.instanceCount = (long)Test.fFld;
        for (i23 = 5; i23 < 135; i23++) {
            byFld += (byte)(((i23 * i23) + i24) - Test.instanceCount);
            byFld -= (byte)Test.instanceCount;
            i24 += i23;
            Test.dArrFld[i23] *= -8;
        }
        for (i25 = 16; i25 < 387; i25++) {
            for (i27 = 2; i27 < 68; i27++) {
                i26 = i28;
                Test.instanceCount += (28535 + (i27 * i27));
                Test.instanceCount >>>= i22;
                i24 += (((i27 * i26) + i24) - Test.instanceCount);
                for (i29 = 1; 2 > i29; ++i29) {
                    i22 = (int)Test.instanceCount;
                    i28 &= (int)Test.instanceCount;
                    i26 /= (int)(i26 | 1);
                    byArr[i25] -= (byte)i26;
                    i28 = (int)Test.fFld;
                    i24 = byFld;
                    Test.iArrFld[i25 - 1] = FuzzerUtils.int1array(N, (int)-65387);
                    i28 -= -5677;
                    Test.iArrFld[i29][i29 - 1] <<= (int)Test.instanceCount;
                }
                Test.fFld *= Test.instanceCount;
            }
            i22 -= i23;
            if (b2) continue;
            Test.fFld += i23;
            Test.instanceCount = i27;
        }
        i26 *= (int)Test.instanceCount;
        Test.iArrFld[(55 >>> 1) % N][(i25 >>> 1) % N] >>>= (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
