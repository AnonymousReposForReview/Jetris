package tests.javafuzzer1011;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:49:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-88040460L;
    public static volatile int iFld=92;
    public int iArrFld[][]=new int[N][N];

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, int i4) {

        int i5=27, i6=-117, i7=-29307, iArr[]=new int[N];
        float f=0.744F;
        double d=0.65122;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 154);
        FuzzerUtils.init(lArr1, -2L);

        try {
            i4 = i3;
            iArr[(Test.iFld >>> 1) % N] *= 167;
            i5 = 1;
            while (++i5 < 298) {
                Test.instanceCount >>= Test.instanceCount;
                iArr[i5] = (int)Test.instanceCount;
                for (i6 = 1; 6 > i6; ++i6) {
                    Test.instanceCount += (i6 ^ (long)f);
                    i7 += 13;
                    switch (((i7 >>> 1) % 4) + 95) {
                    case 95:
                        switch (((i6 % 1) * 5) + 89) {
                        case 92:
                            i7 >>>= (int)Test.instanceCount;
                            lArr1[i5 + 1] = (long)d;
                            iArr[i6] /= (int)(Test.instanceCount | 1);
                            break;
                        default:
                            try {
                                i3 = (i5 % -1351503605);
                                Test.iFld = (i7 % 1904259560);
                                i7 = (iArr[i6 + 1] / i5);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    case 96:
                        i7 <<= Test.iFld;
                    case 97:
                        i4 = (int)Test.instanceCount;
                        break;
                    case 98:
                        b1 = b1;
                    }
                }
            }
        }
        catch (NullPointerException exc1) {
            Test.iFld -= -34307;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=2.643F, f2=-2.110F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 1.1017F);
        FuzzerUtils.init(lArr, -12L);

        Test.iFld *= (int)((Math.sqrt(0.24254) + (230 - (Test.instanceCount--))) + -4878943020374767024L);
        fArr[(Test.iFld >>> 1) % N] *= lArr[(Test.iFld >>> 1) % N];
        Test.iFld -= iMeth(Test.iFld, Test.iFld);
        f1 += Test.iFld;
        Test.iFld = Test.iFld;
        Test.instanceCount *= Test.instanceCount;
        f2 = 391;
        while (--f2 > 0) {
            Test.iFld += (int)f2;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth(boolean b, int i1, int i2) {

        short s=13969;
        byte by=-110, byArr[][]=new byte[N][N];
        int i8=1, i9=5, i10=38, i11=-216, i12=-9, i13=-244, i14=-74, iArr1[]=new int[N];
        double d1=-9.57738;
        float f3=1.221F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -2597120045L);
        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(byArr, (byte)-26);

        vMeth();
        s = (short)i1;
        by |= (byte)i8;
        lArr2[(Test.iFld >>> 1) % N] *= i2;
        for (i9 = 7; i9 < 305; ++i9) {
            i10 = (int)d1;
            for (i11 = 1; 6 > i11; ++i11) {
                if (b) break;
                iArr1[i9 + 1] += i1;
                Test.iFld -= i11;
            }
            if (Test.iFld != 0) {
            }
            i8 += (((i9 * by) + Test.instanceCount) - f3);
            for (i13 = 1; i13 < 6; i13++) {
                Test.instanceCount -= (long)d1;
            }
        }
        byArr[(i13 >>> 1) % N] = FuzzerUtils.byte1array(N, (byte)55);
        long meth_res = (b ? 1 : 0) + i1 + i2 + s + by + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 +
            Float.floatToIntBits(f3) + i13 + i14 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14708, i15=17353, i16=-5, i17=38262, i18=54506, i19=-118, i20=-23, i21=-59506, i22=-14, i23=4256;
        boolean b2=true;
        double d2=-48.130580;
        short s1=-10420;
        float f4=-5.180F;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, 5026603823506732585L);

        i >>= (int)(dMeth(b2, i, i) + d2);
        iArrFld[(i >>> 1) % N][(-149 >>> 1) % N] = -205;
        Test.iFld = Test.iFld;
        Test.iFld = s1;
        s1 += (short)Test.instanceCount;
        for (i15 = 2; 244 > i15; ++i15) {
            for (i17 = i15; 104 > i17; i17++) {
                i -= i17;
                for (i19 = 1; 1 > i19; ++i19) {
                    iArrFld[i17 + 1] = iArrFld[i19 + 1];
                    i16 += i19;
                    Test.iFld *= (int)Test.instanceCount;
                    iArrFld[i19][i19] = -138;
                    f4 += i19;
                    Test.iFld = (int)-107.882F;
                }
                i21 = 1;
                do {
                    Test.iFld -= i19;
                    iArrFld[i15 + 1] = FuzzerUtils.int1array(N, (int)-202);
                    lArr3[i15 - 1] = (long)f4;
                    i = i16;
                    i = i20;
                    Test.instanceCount += i21;
                } while (++i21 < 1);
                lArr3[i15 - 1] = Test.instanceCount;
                f4 -= 163;
                for (i22 = 1; i22 < 1; i22++) {
                    i23 = (int)Test.instanceCount;
                    if (b2) break;
                    Test.iFld += (((i22 * Test.iFld) + Test.iFld) - i17);
                    iArrFld[i15][i22] = i22;
                    b2 = true;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
