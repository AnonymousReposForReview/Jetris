package tests.javafuzzer426;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:33:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-242L;
    public int iFld=31238;
    public float fFld=4.761F;
    public static double dFld=0.40565;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 55468);
        FuzzerUtils.init(Test.dArrFld, -1.97978);
        FuzzerUtils.init(Test.lArrFld, -189L);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i2, float f, int i3) {

        int i4=3, i5=11, i6=27, i7=-61718, i8=14717, i9=3;
        long l1=-3154380118L;
        short s=-29358;

        i2 -= (int)Test.instanceCount;
        i2 = (int)Test.instanceCount;
        for (i4 = 9; i4 < 205; ++i4) {
            for (l1 = 1; 8 > l1; l1++) {
                for (i7 = 1; 2 > i7; ++i7) {
                    Test.instanceCount += l1;
                    i8 >>= i6;
                    try {
                        i8 = (i4 / Test.iArrFld[(int)(l1 - 1)]);
                        Test.iArrFld[i4] = (i2 % i6);
                        Test.iArrFld[(int)(l1 + 1)] = (-1484499473 / i2);
                    } catch (ArithmeticException a_e) {}
                    i5 = (int)l1;
                    i5 -= i8;
                    switch ((((i9 >>> 1) % 4) * 5) + 23) {
                    case 35:
                        Test.instanceCount += (i7 ^ l1);
                        i8 = i9;
                        i8 = -19107;
                        break;
                    case 41:
                        s += (short)i7;
                        break;
                    case 26:
                        i8 += (((i7 * s) + i6) - l1);
                        break;
                    case 39:
                        i8 = i9;
                        break;
                    }
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + l1 + i6 + i7 + i8 + i9 + s;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public byte byMeth(long l) {

        int i=70, i1=105, i10=-15679, i11=223;
        boolean b=true;

        for (i = 7; i < 226; ++i) {
            Test.instanceCount += i;
            switch ((i % 1) + 43) {
            case 43:
                b = b;
                break;
            default:
                i1 -= i;
                iFld += i;
                Test.iArrFld[i] *= (-iMeth1(iFld, fFld, iFld));
            }
            for (i10 = i; i10 < 7; i10++) {
                fFld *= (float)Test.dFld;
                Test.dArrFld[i] = 99.986F;
                iFld += (((i10 * iFld) + i11) - i10);
                Test.iArrFld[i] = -7;
                Test.dFld = -21L;
            }
            i11 -= i11;
            sArrFld[i - 1] -= (short)-64796L;
        }
        long meth_res = l + i + i1 + (b ? 1 : 0) + i10 + i11;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth() {

        int i13=-4, i14=180, i15=-49;
        long l2=-52929L;
        byte by=-82;

        byMeth(Test.instanceCount);
        for (i13 = 8; 365 > i13; i13++) {
            if (bFld) break;
            i14 = i13;
            i14 += i13;
            Test.instanceCount -= i14;
            iFld = i14;
        }
        iFld += iFld;
        iFld = (int)l2;
        bFld = bFld;
        i14 = (int)Test.instanceCount;
        for (long l3 : Test.lArrFld) {
            iFld <<= by;
            iFld *= i13;
        }
        iFld <<= i15;
        long meth_res = i13 + i14 + l2 + by + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f1=2.520F, fArr[][]=new float[N][N];
        int i16=-2, i17=7, i18=-1;
        double d=2.23390;
        byte by1=-62;

        FuzzerUtils.init(fArr, 1.287F);

        iFld = (int)(Test.instanceCount + ((fFld--) + iMeth()));
        for (f1 = 3; f1 < 229; ++f1) {
            iFld = iFld;
            for (d = 111; 2 < d; --d) {
                i18 = 1;
                while ((i18 += 3) < 2) {
                    Test.iArrFld[(int)(d)] = (int)Test.instanceCount;
                    if (bFld) {
                        switch ((i18 % 4) + 105) {
                        case 105:
                        case 106:
                            i16 += (((i18 * Test.instanceCount) + iFld) - iFld);
                            Test.instanceCount += i18;
                            break;
                        case 107:
                            i16 -= (int)Test.instanceCount;
                            i16 = (int)Test.instanceCount;
                            break;
                        case 108:
                            i17 = (int)Test.instanceCount;
                        default:
                            i16 = -22505;
                            iFld = -7;
                            Test.instanceCount += (3 + (i18 * i18));
                        }
                        if (bFld) {
                            bFld = false;
                            Test.instanceCount += (((i18 * i16) + i16) - i17);
                            Test.instanceCount += 8;
                            if (false) {
                                fArr[(int)(f1 - 1)] = fArr[i18];
                                i16 += i18;
                                i17 &= i17;
                                if (bFld) {
                                    try {
                                        i16 = (Test.iArrFld[i18] / 1265125018);
                                        i16 = (i18 / i18);
                                        i16 = (i16 / -207925119);
                                    } catch (ArithmeticException a_e) {}
                                    iFld = i17;
                                    Test.dFld = fFld;
                                } else {
                                    sArrFld[(int)(f1 + 1)] >>>= (short)i17;
                                    iFld += (int)Test.instanceCount;
                                }
                            } else {
                                Test.dFld *= Test.instanceCount;
                            }
                        } else {
                            bFld = bFld;
                        }
                    } else if (bFld) {
                        Test.iArrFld[i18 - 1] += by1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
