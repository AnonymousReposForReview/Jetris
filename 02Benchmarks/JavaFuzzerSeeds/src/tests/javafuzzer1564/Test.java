package tests.javafuzzer1564;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:59:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=47L;
    public static float fFld=-1.300F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13694);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i4, int i5) {

        double d=94.115319;
        byte by=61;

        d = (((--by) + Math.max(i4, i4)) + ((i4 + 65353) >> i4));
        vSmallMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d) + by;
    }

    public static long lMeth(int i10) {

        short s1=14598;
        int i12=40176, i13=61688, i14=-59;
        double d1=-1.19300, dArr[]=new double[N];
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, -51.5563);
        FuzzerUtils.init(byArr, (byte)113);

        for (int i11 : Test.iArrFld) {
            vSmallMeth(i10, i11);
            try {
                i10 = (-60813 % i11);
                i11 = (i11 / -23698);
                i10 = (i11 % i11);
            } catch (ArithmeticException a_e) {}
            i10 -= (int)Test.instanceCount;
        }
        s1 -= (short)i10;
        dArr[(i10 >>> 1) % N] = -20958;
        for (i12 = 14; i12 < 390; ++i12) {
            i13 += (int)d1;
            i10 = (int)Test.instanceCount;
            Test.instanceCount = i10;
            i10 *= i12;
        }
        if (b1) {
            i10 = i13;
            Test.instanceCount = i14;
            i10 = -98;
        }
        long meth_res = i10 + s1 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, short s) {

        int i7=-4, i8=-41891, i9=55, i15=-46340, i16=-22283, i17=-239;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i7 = 12; 243 > i7; i7++) {
            bArr[i7] = b;
        }
        i9 = 1;
        do {
            Test.instanceCount = lMeth(i8);
            Test.iArrFld[i9] >>= (int)Test.instanceCount;
            Test.instanceCount = i8;
            i8 += (((i9 * i8) + i7) - Test.instanceCount);
            Test.fFld = i8;
        } while (++i9 < 162);
        for (i15 = 248; 10 < i15; i15 -= 3) {
            i16 = i8;
            l *= Test.instanceCount;
            i17 = 1;
            while (++i17 < 19) {
                Test.fFld += i16;
                Test.iArrFld[i17 + 1] += (int)Test.fFld;
                s -= (short)i17;
            }
        }
        vMeth_check_sum += l + s + i7 + i8 + (b ? 1 : 0) + i9 + i15 + i16 + i17 + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-45374, i1=-107, i2=-28, i3=152, i6=12867, i18=-160, i19=-7, i20=0, i21=-8;
        short s2=2789;
        boolean b2=false;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -7.939F);
        FuzzerUtils.init(lArr, -8312426631513612198L);

        for (i = 8; i < 146; i++) {
            for (i2 = 2; 182 > i2; ++i2) {
                double d2=2.100140;
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(i1--, i3);
                i6 = 2;
                while ((i6 -= 2) > 0) {
                    vMeth(2651881837L, (short)(1504));
                }
                switch (((i1 >>> 1) % 10) + 72) {
                case 72:
                    Test.instanceCount += (i2 * i2);
                case 73:
                    i1 += (((i2 * i) + i) - Test.instanceCount);
                    Test.fFld += s2;
                    Test.iArrFld[i + 1] += (int)d2;
                    Test.iArrFld[i] = i6;
                    break;
                case 74:
                    for (i18 = 2; 1 < i18; i18--) {
                        i19 += (i18 * i18);
                        Test.instanceCount <<= i2;
                        Test.iArrFld[i + 1] -= (int)Test.instanceCount;
                        Test.instanceCount += i6;
                        Test.iArrFld[i - 1] -= i19;
                        Test.fFld += Test.instanceCount;
                        i3 += i18;
                        fArr[i2 + 1] = 21.119F;
                        if (b2) continue;
                    }
                    i1 += (((i2 * i2) + i3) - i6);
                    break;
                case 75:
                    Test.iArrFld[i2 + 1] += (int)16928L;
                    lArr[i] = i;
                    break;
                case 76:
                case 77:
                    for (i20 = 1; i20 < 2; ++i20) {
                        i19 += (((i20 * s2) + Test.fFld) - i6);
                        i21 >>= -11;
                        d2 = i;
                    }
                    i19 = (int)Test.instanceCount;
                    try {
                        i3 = (i20 % i18);
                        i19 = (25234 / i2);
                        i21 = (Test.iArrFld[i] / -5776);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 78:
                case 79:
                case 80:
                    i21 = (int)2.33057;
                    break;
                case 81:
                    i1 += (i2 - i18);
                    break;
                default:
                    i3 += (int)-7844052195384457561L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
