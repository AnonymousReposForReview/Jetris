package tests.javafuzzer3280;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:32:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8767974244074782256L;
    public short sFld=-18727;
    public double dFld=1.8519;
    public static volatile boolean bFld=true;
    public static byte byFld=26;
    public static float fFld=-91.119F;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.lArrFld, 149L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-3268, i4=-118, i5=-12940, i6=-6, i7=87, iArr1[][]=new int[N][N];
        double d1=0.27868;
        float f=16.322F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -1.575F);
        FuzzerUtils.init(iArr1, 2157);

        i3 += (int)Test.instanceCount;
        Test.instanceCount &= i3;
        Test.instanceCount *= i3;
        Test.instanceCount += (long)d1;
        for (i4 = 4; i4 < 137; i4++) {
            if (Test.bFld) {
                fArr[i4 - 1][i4 - 1] *= -4;
                if (Test.bFld) {
                    for (i6 = 1; i6 < 12; i6++) {
                        i7 &= (int)Test.instanceCount;
                        iArr1[i4][i6 - 1] = i6;
                    }
                    i7 -= i6;
                } else {
                    i5 -= i4;
                    Test.byFld <<= (byte)i5;
                }
                Test.instanceCount = Test.instanceCount;
            } else if (Test.bFld) {
                i3 *= (int)Test.instanceCount;
            } else {
                Test.byFld = (byte)f;
            }
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i8=25057, i9=-64876, i10=-2, i11=-254, i12=25207, i13=4, iArr2[]=new int[N];
        float f1=0.440F;

        FuzzerUtils.init(iArr2, 11);

        vMeth1();
        i8 = 1;
        while (++i8 < 209) {
            if (false) continue;
        }
        i9 >>>= 0;
        for (i10 = 2; i10 < 312; ++i10) {
            i9 += i10;
            for (i12 = 1; i12 < 5; ++i12) {
                f1 = 1;
                while (++f1 < 2) {
                    i11 = i13;
                    iArr2[(int)(f1)] -= (int)Test.instanceCount;
                    i13 -= i10;
                    i11 /= -11508;
                    i11 += (int)((long)f1 | i11);
                }
                i9 -= i9;
                Test.instanceCount -= i10;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i2, long l, double d) {

        int i14=6594, i15=10, i16=-120, i17=-217, i18=-48006, iArr3[]=new int[N];
        float f2=-1.913F, f3=-1.370F, fArr1[]=new float[N];
        short s=-12779;

        FuzzerUtils.init(fArr1, 0.162F);
        FuzzerUtils.init(iArr3, -43421);

        vMeth();
        fArr1[(i2 >>> 1) % N] *= (float)54.90577;
        for (i14 = 2; i14 < 352; i14++) {
            Test.instanceCount += Test.instanceCount;
            i15 += (int)Test.instanceCount;
            i16 = 1;
            while (++i16 < 5) {
                for (i17 = 1; i17 < 1; ++i17) {
                    i15 = i2;
                    i15 /= (int)((long)(f2) | 1);
                    try {
                        i18 = (i2 % i14);
                        iArr3[i16] = (-2100957826 / i2);
                        i2 = (i18 % i17);
                    } catch (ArithmeticException a_e) {}
                    i18 += i17;
                    iArr3[i16] = i15;
                    iArr3[i16 + 1] = i18;
                    s = (short)i2;
                    i15 *= (int)f3;
                }
            }
        }
        long meth_res = i2 + l + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) +
            s + Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=42737, i1=5, i19=51298, i20=85, i21=-16831, i22=-10, i23=48064, i24=112, iArr[]=new int[N];
        byte by=30;
        long l1=-10640L;
        float fArr2[][]=new float[N][N];

        FuzzerUtils.init(iArr, 225);
        FuzzerUtils.init(fArr2, -65.383F);

        for (i = 9; i < 307; i++) {
            try {
                i1 = (iArr[i] / -34263);
                i1 = (-1184223809 % iArr[i - 1]);
                i1 = (i % 113);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) {
                sFld <<= (short)(((dFld - -13350) / (iMeth(i1, Test.instanceCount, dFld) | 1)) - by);
            } else {
                Test.fFld += (i + Test.instanceCount);
            }
            iArr[i - 1] = by;
            for (i19 = 5; i19 < 84; ++i19) {
                Test.instanceCount -= (long)dFld;
                Test.fFld += ((long)i19 | (long)i19);
                i20 += i19;
                if (Test.bFld) continue;
                switch ((((-14289 >>> 1) % 7) * 5) + 58) {
                case 85:
                    for (i21 = 2; i21 > 1; i21--) {
                        i22 = i20;
                        iArr[i19 - 1] -= i20;
                        Test.fFld += i21;
                        Test.instanceCount *= -1947109758484508030L;
                        i20 *= (int)l1;
                        i20 >>= i1;
                    }
                    Test.instanceCount = i20;
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.iArrFld = FuzzerUtils.int2array(N, (int)167);
                        Test.lArrFld[i19 - 1] -= i24;
                        i1 = 63543;
                        i20 -= i1;
                        i20 += (int)Test.instanceCount;
                        switch ((((11177 >>> 1) % 1) * 5) + 73) {
                        case 77:
                            i24 *= i21;
                            Test.bFld = Test.bFld;
                            l1 = i24;
                            break;
                        }
                    }
                    break;
                case 64:
                    Test.iArrFld[i19 - 1][i19] = i23;
                    break;
                case 81:
                    Test.fFld += (((i19 * Test.instanceCount) + Test.instanceCount) - i22);
                    break;
                case 60:
                    fArr2[i - 1][i + 1] += Test.fFld;
                    break;
                case 73:
                    i24 <<= (int)Test.instanceCount;
                    break;
                case 82:
                    Test.fFld *= Test.instanceCount;
                    break;
                case 71:
                    i20 -= (int)Test.instanceCount;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
