package tests.javafuzzer1982;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=62L;
    public static int iFld=11;
    public static float fFld=-109.177F;
    public static volatile byte byFld=7;
    public static volatile short sFld=-9110;
    public static double dFld=-2.117369;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.18394);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5, int i6) {

        int i7=5, i8=-14, i9=-1, i10=-199, i11=3558, i12=0, i13=-3, i14=-1, i15=-28760, iArr[][]=new int[N][N];
        double d=-1.86085;

        FuzzerUtils.init(iArr, -22);

        for (i7 = 5; i7 < 173; i7++) {
            i9 = 1;
            do {
                iArr[i9 - 1][i7] = i6;
                i5 /= (int)(i9 | 1);
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.fFld += ((long)i10 ^ (long)i10);
                    iArr[i7][i9 - 1] *= (int)Test.instanceCount;
                    iArr[i9 + 1][i9 + 1] = (int)Test.fFld;
                }
                i8 += (int)d;
                for (i12 = 1; 1 > i12; i12++) {
                    iArr[i7][i12] -= (int)2.102F;
                }
                for (i14 = 1; 1 > i14; ++i14) {
                    i15 *= (int)Test.instanceCount;
                    iArr[i14 - 1][i9] -= (int)Test.instanceCount;
                    i11 = i7;
                }
            } while (++i9 < 9);
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15
            + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        byte by=-92;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 40.168F);

        by += (byte)(++fArr[(Test.iFld >>> 1) % N]);
        Test.instanceCount += (long)((++Test.fFld) * (++Test.dArrFld[(Test.iFld >>> 1) % N]));
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        by >>= (byte)Test.iFld;
        long meth_res = by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=231, i1=46, i2=-196, i3=-210, i16=-23819, i17=-30190, i18=-10, i19=-131, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 235);

        for (i = 3; i < 259; ++i) {
            Test.fFld += (i * i);
            for (i2 = 1; 6 > i2; ++i2) {
                Test.iFld = (((70 + iMeth1()) << -40965) * Test.iFld);
                for (i16 = 1; i16 < 2; i16++) {
                    i3 += i16;
                    Test.iFld += i2;
                    i1 += (int)Test.fFld;
                }
                Test.instanceCount = i3;
                switch (((i2 % 9) * 5) + 99) {
                case 120:
                    Test.fFld += Test.fFld;
                    i17 = i3;
                    for (i18 = i2; i18 < 2; ++i18) {
                        Test.fFld = Test.fFld;
                        try {
                            Test.iFld = (i16 / -176);
                            i3 = (-127 % iArr1[i - 1]);
                            i19 = (iArr1[i2 + 1] / i1);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 114:
                    Test.instanceCount *= (long)Test.fFld;
                    break;
                case 131:
                    i3 += Test.iFld;
                    break;
                case 134:
                    i3 = i2;
                    break;
                case 106:
                    iArr1[i2] = 30;
                case 112:
                    Test.byFld += (byte)12;
                    break;
                case 123:
                    iArr1[i2 + 1] = i19;
                    break;
                case 130:
                    i17 = (int)Test.fFld;
                    break;
                case 118:
                    i19 *= i1;
                    break;
                default:
                    i19 += (i2 | Test.instanceCount);
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-240, i21=130, i22=14, i23=6049, i24=-24761, i25=59915, i26=45001, i27=25, i28=11, i29=233, i30=-6,
            iArr2[]=new int[N];
        long l=4112524563L;

        FuzzerUtils.init(iArr2, 11759);

        Test.iFld = Test.iFld;
        Test.iFld *= iMeth();
        i20 = 1;
        do {
            Test.iFld += (int)Test.fFld;
            Test.instanceCount *= Test.sFld;
        } while (++i20 < 156);
        for (i21 = 5; i21 < 184; i21++) {
            Test.dFld += -90.98747;
        }
        iArr2 = iArr2;
        l = 1;
        do {
            Test.iFld *= -3363;
            Test.iFld += i22;
            Test.instanceCount /= (Test.byFld | 1);
            iArr2[(int)(l + 1)] <<= Test.iFld;
            for (i23 = 3; i23 < 81; i23++) {
                i22 += (i23 ^ Test.sFld);
                Test.iFld += (2 + (i23 * i23));
                i25 = 1;
                do {
                    Test.fFld = Test.byFld;
                } while (++i25 < 2);
                i22 = i21;
                Test.instanceCount /= (i20 | 1);
            }
            for (i26 = 2; 81 > i26; i26++) {
                iArr2[i26] = i25;
                i28 -= i26;
                for (i29 = 1; i29 < 2; ++i29) {
                    Test.instanceCount *= Test.sFld;
                    i24 = (int)l;
                    i28 += (i29 + Test.byFld);
                    iArr2[i29 + 1] += -86;
                    i27 -= (int)Test.instanceCount;
                    i22 -= (int)44.98432;
                }
            }
        } while (++l < 312);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
