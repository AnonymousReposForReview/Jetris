package tests.javafuzzer2609;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:25:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3487937506964181643L;
    public static volatile double dFld=-1.64225;
    public static int iFld=-24393;
    public static float fFld=1.544F;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.217F);
        FuzzerUtils.init(Test.iArrFld, -39574);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-14, i8=-194, i9=-83, i10=12, i11=-246, i12=67;
        float f1=111.554F;

        Test.instanceCount -= i7;
        i8 = 163;
        do {
            for (i9 = 1; i9 < 10; ++i9) {
                for (i11 = 1; i11 < 2; i11++) {
                    Test.instanceCount = i7;
                    f1 -= 23606;
                    i12 >>= 56142;
                    Test.instanceCount += (long)f1;
                    i10 *= (int)Test.dFld;
                }
                i12 -= i8;
                i7 = i9;
                Test.fArrFld[i9 - 1] *= f1;
                i10 *= i9;
            }
            Test.iArrFld[i8 + 1] -= i9;
            Test.iArrFld[i8] = (int)f1;
        } while (--i8 > 0);
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1);
    }

    public static int iMeth(int i5, long l) {

        long l1=5691L, lArr[]=new long[N];
        int i6=-7, i13=150, i14=6;
        float f2=0.915F;

        FuzzerUtils.init(lArr, -3L);

        for (l1 = 23; l1 < 396; ++l1) {
            boolean b=false;
            if (b) break;
            vMeth1();
        }
        Test.iArrFld[(Test.iFld >>> 1) % N] = i5;
        i5 += i6;
        Test.iFld = Test.iFld;
        for (i13 = 14; i13 < 251; i13++) {
            int i15=25254, i16=-14;
            i15 = i15;
            l = i13;
            i15 <<= i13;
            lArr[i13 + 1] *= -16;
            i15 = 57;
            i5 += i14;
            i16 = i5;
        }
        i5 += (int)f2;
        long meth_res = i5 + l + l1 + i6 + i13 + i14 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        byte by=16;
        int i17=-8, i18=10, i19=-32001, i20=40;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, false);

        i4 += (int)(((i4 + Test.instanceCount) + iMeth(14565, Test.instanceCount)) + by);
        Test.fFld -= Test.iFld;
        bArr1[(-41 >>> 1) % N] = false;
        for (i17 = 17; i17 < 312; i17++) {
            Test.instanceCount *= Test.iFld;
            i4 = i18;
            try {
                Test.iFld = (-23 / i4);
                i4 = (Test.iFld / i4);
                Test.iArrFld[i17 - 1] = (i4 / i4);
            } catch (ArithmeticException a_e) {}
            for (i19 = 1; i19 < 6; ++i19) {
                i18 = i19;
            }
            try {
                Test.iFld = (i4 % i4);
                Test.iArrFld[i17] = (i4 / i18);
                Test.iArrFld[i17] = (i17 % -79);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += (long)Test.dFld;
            i20 = (int)Test.instanceCount;
            i20 += (i17 * i17);
            i18 = i4;
            Test.instanceCount += (((i17 * Test.fFld) + Test.instanceCount) - i20);
        }
        vMeth_check_sum += i4 + by + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(bArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=199, i1=24532, i2=-139, i3=-2, i21=13894, i22=-253, i23=-111, i24=-50565, i25=37113, i26=3, iArr[]=new
            int[N];
        float f=0.935F;
        boolean b1=false, bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -122.79619);
        FuzzerUtils.init(iArr, -132);
        FuzzerUtils.init(bArr, false);

        dArr[(i >>> 1) % N] -= (Test.dFld - ((iArr[(i >>> 1) % N]++) * (f * 138)));
        i1 = 1;
        do {
            dArr[i1] = -29900;
            bArr[i1 - 1] = (Long.reverseBytes((long)(Test.instanceCount + f)) > ((-217 - (i * i1)) * (244 +
                (Test.instanceCount = (long)f))));
            iArr[i1] *= (i++);
            for (i2 = 4; i2 < 92; i2 += 2) {
                switch (((i2 % 1) * 5) + 102) {
                case 103:
                    vMeth(i1);
                    i3 += (int)(-9L + (i2 * i2));
                    for (i21 = 1; i21 < 3; i21++) {
                        i3 = i22;
                        if (b1) continue;
                    }
                    for (i23 = i2; i23 < 3; ++i23) {
                        Test.instanceCount += (i23 + i23);
                        i += (i23 ^ Test.instanceCount);
                        Test.instanceCount += i23;
                        i3 = 213;
                    }
                    break;
                }
                Test.instanceCount -= Test.instanceCount;
                if (b1) continue;
                Test.dFld += i23;
                Test.iArrFld[i1] = i21;
                Test.iFld = i3;
                for (i25 = 1; i25 < 3; i25++) {
                    Test.instanceCount &= 1;
                    switch (((49 >>> 1) % 2) + 65) {
                    case 65:
                        Test.instanceCount = i25;
                        f %= (i23 | 1);
                        i3 -= (int)82.995F;
                        Test.instanceCount = i21;
                        break;
                    case 66:
                    default:
                        Test.iArrFld[i1 - 1] += i3;
                    }
                }
            }
        } while (++i1 < 274);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
