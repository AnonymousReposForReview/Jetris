package tests.javafuzzer2896;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:41:31 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12L;
    public static double dFld=-2.96403;
    public static byte byFld=59;
    public static volatile byte byArrFld[][]=new byte[N][N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-69);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9, long l) {

        int i10=34136, i11=49767, i12=84, i13=33955, i14=14, iArr1[]=new int[N];
        float f1=0.852F;
        short s=-23200;
        double d=0.76637;
        boolean b=true;

        FuzzerUtils.init(iArr1, -6);

        Test.instanceCount = i8;
        if (b) {
            i9 = (int)Test.instanceCount;
            for (i10 = 353; i10 > 22; --i10) {
                i11 = (int)l;
                i8 += (((i10 * i8) + i9) - i9);
                f1 = s;
            }
            Test.dFld -= -13;
            d = 1;
            do {
                double d1=-2.73181;
                d1 = s;
                for (i12 = (int)(d); i12 < 7; ++i12) {
                    iArr1[(int)(d + 1)] -= (int)d1;
                    Test.instanceCount = Test.instanceCount;
                    i11 = i13;
                    Test.byFld = (byte)i10;
                }
            } while (++d < 239);
        } else if (b) {
            l = i14;
            vMeth1_check_sum += i8 + i9 + l + i10 + i11 + Float.floatToIntBits(f1) + s + Double.doubleToLongBits(d) +
                i12 + i13 + i14 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
            return;
        } else {
            i8 = (int)l;
        }
        vMeth1_check_sum += i8 + i9 + l + i10 + i11 + Float.floatToIntBits(f1) + s + Double.doubleToLongBits(d) + i12 +
            i13 + i14 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(float f, int i4, int i5) {

        int i6=2, i7=-49910, i15=-13, i16=1954;
        boolean b1=false;
        float f2=47.67F;

        for (i6 = 6; i6 < 173; i6 += 2) {
            vMeth1(i5, i6, Test.instanceCount);
            i7 = i7;
        }
        Test.byArrFld[(i6 >>> 1) % N][(i5 >>> 1) % N] &= (byte)i4;
        if (false) {
            b1 = true;
        } else {
            i5 ^= i5;
            for (f2 = 191; f2 > 5; --f2) {
                Test.instanceCount = (long)f;
                i15 *= (int)Test.instanceCount;
                Test.dFld = Test.instanceCount;
            }
            i16 = 211;
            while ((i16 -= 2) > 0) {
                i4 = -11;
                Test.byFld -= (byte)Test.instanceCount;
                f -= i16;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i15
            + i16;
    }

    public static long lMeth() {

        int i=-230, i1=188, i2=-190, i3=43874, iArr[]=new int[N];
        float f3=-54.32F;
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.49823);
        FuzzerUtils.init(iArr, -28008);

        i = 1;
        do {
            i1 = 1;
            while (++i1 < 5) {
                i2 += (-14 + (i1 * i1));
                i3 = 1;
                do {
                    dArr[i3 + 1] += (i1 - (i2--));
                    Test.instanceCount += (i3 | Test.instanceCount);
                    switch (((((int)(i3 | Test.instanceCount)) >>> 1) % 1) + 33) {
                    case 33:
                        iArr = (iArr = iArr);
                        vMeth(2.844F, -4, 6);
                        i2 += (((i3 * f3) + Test.instanceCount) - i1);
                        Test.bArrFld[i3] = true;
                        break;
                    }
                    i2 = i;
                } while (--i3 > 0);
                i2 += (i1 | i);
            }
            Test.instanceCount += (((i * i3) + i) - Test.instanceCount);
            if (b2) continue;
        } while (++i < 375);
        long meth_res = i + i1 + i2 + i3 + Float.floatToIntBits(f3) + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {


        lMeth();
        Test.dFld = 45309;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
