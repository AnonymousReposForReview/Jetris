package tests.javafuzzer288;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:19:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static volatile byte byFld=92;
    public static float fFld=1.186F;
    public static double dArrFld[]=new double[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.55707);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, long l2, int i8) {

        byte by=-125;
        int i9=-58437;
        double d1=-6.27720;

        l2 -= by;
        l2 *= i7;
        i9 = 208;
        while (--i9 > 0) {
            i8 -= (int)d1;
        }
        long meth_res = i7 + l2 + i8 + by + i9 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, long l) {

        long l1=3767123399L;
        int i3=262, i4=10, i5=-3, i6=-4, iArr1[]=new int[N];
        boolean b=false;
        float f1=-106.139F;
        byte by1=13;
        short s=29421;

        FuzzerUtils.init(iArr1, 114);

        for (l1 = 7; l1 < 212; l1++) {
            for (i4 = (int)(l1); i4 < 8; ++i4) {
                i5 >>= (int)(Integer.reverseBytes(i3) + l1);
                Test.instanceCount = l;
                switch ((i4 % 9) + 24) {
                case 24:
                    Test.instanceCount *= i5;
                    break;
                case 25:
                    i6 = 1;
                    do {
                        i3 >>>= (++iArr1[i4]);
                        b = ((Test.dArrFld[i4 - 1] != iArr1[i4]) & (b = (i6 <= f1)));
                        switch ((int)(((l1 % 10) * 5) + 12)) {
                        case 15:
                            i2 = iMeth(i5, Test.instanceCount, -11);
                            break;
                        case 34:
                            Test.instanceCount -= by1;
                            if (i2 != 0) {
                                vMeth1_check_sum += i2 + l + l1 + i3 + i4 + i5 + i6 + (b ? 1 : 0) +
                                    Float.floatToIntBits(f1) + by1 + s + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            Test.instanceCount = i6;
                            break;
                        case 62:
                            i2 = i3;
                            break;
                        case 19:
                            i2 = -8932;
                            break;
                        case 13:
                            i2 += (i6 * i6);
                        case 46:
                            i2 += (i6 * i5);
                            break;
                        case 45:
                            i5 += i6;
                            break;
                        case 55:
                            i2 -= i5;
                            break;
                        case 38:
                        case 37:
                            i3 -= i2;
                            break;
                        default:
                            i2 += (int)Test.instanceCount;
                        }
                    } while (++i6 < 1);
                    break;
                case 26:
                    Test.instanceCount += (i4 - s);
                    break;
                case 27:
                    i5 = (int)-54012L;
                    break;
                case 28:
                    iArr1[(int)(l1 - 1)] <<= (int)-2828646894L;
                    break;
                case 29:
                    i2 -= i6;
                case 30:
                    f1 += i4;
                    break;
                case 31:
                    i2 >>>= s;
                    break;
                case 32:
                    i3 += i4;
                    break;
                }
            }
        }
        vMeth1_check_sum += i2 + l + l1 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + Float.floatToIntBits(f1) + by1 + s +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1) {

        float f=42.391F;
        double d=-8.78154;
        int i10=-2, i11=11, i12=-59, i13=-7, i14=37481, i15=-20173, iArr[]=new int[N];
        byte by2=60;
        boolean b1=true;

        FuzzerUtils.init(iArr, -10728);

        i += (int)Math.max(--Test.instanceCount, Test.instanceCount--);
        i -= Integer.reverseBytes(Math.max(iArr[(i >>> 1) % N], (int)(i1 - 14L)));
        i -= (int)((f++) * ((d - i1) % ((++i) | 1)));
        if (b1) {
            f = (++i);
            vMeth1(i, -47L);
            for (i10 = 135; i10 > 7; i10--) {
                i += by2;
                for (i12 = 1; i12 < 12; i12++) {
                    i11 -= (int)Test.instanceCount;
                    iArr[i10 - 1] *= (int)d;
                    i -= -13000;
                    for (i14 = 1; 2 > i14; ++i14) {
                        i13 = (int)f;
                        iArr[i14] >>= i15;
                    }
                }
            }
        } else if (true) {
            i15 -= (int)d;
        } else {
            b1 = b1;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i10 + i11 + by2 + i12 + i13
            + i14 + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=61207, i17=19, i18=0, i19=-30397, i20=-11, i21=196, i22=8;
        double d2=1.106134;
        boolean b2=false;
        long l3=4162484155L;

        vMeth(i16, i16);
        d2 *= i16;
        i16 = i16;
        i17 = 1;
        do {
            i18 = 1;
            do {
                i16 -= (int)-1043225885026922581L;
                i16 += (-8 + (i18 * i18));
                i16 = i16;
            } while (++i18 < 70);
            Test.instanceCount -= i17;
            if (b2) {
                d2 *= Test.instanceCount;
                try {
                    i16 = (i17 / iArrFld[i17 - 1][i17 - 1]);
                    i16 = (244 % i17);
                    iArrFld[i17][i17 + 1] = (i18 / 25);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += Test.byFld;
            } else if (b2) {
                iArrFld[i17 + 1][i17 + 1] = (int)Test.fFld;
                i19 = 1;
                do {
                    i16 = i19;
                    if (b2) break;
                    Test.instanceCount = i18;
                } while (++i19 < 70);
                for (i20 = 70; 2 < i20; --i20) {
                    switch (((i20 % 7) * 5) + 123) {
                    case 144:
                        i16 = (int)Test.instanceCount;
                        break;
                    case 130:
                        i21 += (i20 | i20);
                        iArrFld[i17][i20 + 1] = (int)d2;
                        switch ((((-10 >>> 1) % 4) * 5) + 10) {
                        case 19:
                            i16 = (int)Test.fFld;
                            break;
                        case 13:
                            i21 = i19;
                            break;
                        case 22:
                        case 29:
                            for (l3 = 1; l3 < 2; ++l3) {
                                i21 -= -14;
                                i21 += (int)(l3 | i19);
                                i21 = i21;
                            }
                            break;
                        default:
                            iArrFld[i20 + 1][i20] = -13;
                        }
                        break;
                    case 155:
                        i16 += (((i20 * i20) + Test.instanceCount) - Test.byFld);
                        break;
                    case 129:
                        Test.byFld += (byte)i20;
                        break;
                    case 146:
                        b2 = b2;
                        break;
                    case 152:
                        i21 += (i20 * i20);
                        break;
                    case 125:
                        i22 += i20;
                    }
                }
            }
        } while (++i17 < 360);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
