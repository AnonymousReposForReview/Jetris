package tests.javafuzzer713;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:22:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8963655330848313052L;
    public static int iFld=-3;
    public static byte byFld=33;
    public static boolean bFld=false;
    public static volatile float fFld=-2.343F;
    public static volatile short sFld=26170;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.fArrFld, -2.408F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, int i8, int i9) {

        int i10=-60633, i11=-16047, i12=53958, i13=-15260, iArr[][]=new int[N][N];
        double d1=77.51584;
        short s=-1670;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -857664253L);
        FuzzerUtils.init(iArr, -9);

        for (i10 = 2; i10 < 277; ++i10) {
            lArr[i10 + 1] >>>= i11;
            i8 = i9;
            Test.byFld <<= (byte)Test.instanceCount;
            d1 -= Test.instanceCount;
            Test.iArrFld[i10] = (int)Test.instanceCount;
            for (i12 = 1; i12 < 6; ++i12) {
                if (Test.bFld) continue;
                i9 += (((i12 * i12) + i9) - i13);
                switch (((i10 % 3) * 5) + 84) {
                case 93:
                    Test.iArrFld[i10 + 1] -= s;
                    Test.instanceCount += Test.instanceCount;
                    Test.iFld += (((i12 * i8) + i9) - s);
                case 86:
                    if (i11 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1)
                            + i12 + i13 + s + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    d1 -= -1.126842;
                    break;
                case 99:
                    iArr[i10][i12] %= (int)(i9 | 1);
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + s
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(int i7, double d) {

        int i14=2, i15=240, i16=9, i17=-4, i18=14, i19=24696;
        short s1=-21589;

        vMeth(-1.932F, Test.iFld, i7);
        for (i14 = 262; 10 < i14; --i14) {
            try {
                Test.iArrFld[i14 + 1] = (i7 % 847580080);
                i7 = (Test.iArrFld[i14 + 1] % Test.iArrFld[i14 + 1]);
                Test.iArrFld[i14 + 1] = (-653052667 / Test.iArrFld[i14 - 1]);
            } catch (ArithmeticException a_e) {}
            for (i16 = 6; i16 > i14; i16--) {
                Test.iArrFld[i14 - 1] -= (int)Test.fFld;
                for (i18 = 1; 1 > i18; ++i18) {
                    Test.instanceCount *= Test.iFld;
                    Test.bFld = Test.bFld;
                    s1 <<= (short)Test.instanceCount;
                    i15 -= i15;
                    Test.instanceCount = 0;
                    Test.instanceCount = i7;
                    Test.fFld += Test.byFld;
                    Test.iFld += i14;
                }
                Test.iFld += (((i16 * Test.instanceCount) + Test.instanceCount) - i15);
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d) + i14 + i15 + i16 + i17 + i18 + i19 + s1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(byte by1, int i5, int i6) {

        double d2=123.30833;
        int i20=33450, i21=-15701, i22=-55146, i23=-12, i24=46651;
        short s2=24810;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -613216519L);

        switch ((((Math.max(i5, Test.iFld) >>> 1) % 2) * 5) + 67) {
        case 71:
            fMeth(Test.iFld, d2);
            for (long l : lArr1) {
                for (i20 = 1; i20 < 4; ++i20) {
                    i5 <<= i20;
                }
                if (Test.bFld) {
                    for (i22 = 1; 4 > i22; i22++) {
                        l = -12;
                        s2 += (short)i22;
                        Test.fFld += -49;
                    }
                    i24 = 4;
                    while (--i24 > 0) {
                        Test.fArrFld[i24 - 1] += i6;
                        Test.iArrFld[i24 - 1] += -4;
                        lArr1[i24] >>= 6L;
                        i6 |= Test.iFld;
                    }
                } else if (Test.bFld) {
                    i5 = i21;
                } else if (Test.bFld) {
                    Test.fFld = s2;
                } else {
                    Test.byFld |= (byte)-232L;
                }
            }
        case 74:
            i6 *= 0;
            break;
        }
        long meth_res = by1 + i5 + i6 + Double.doubleToLongBits(d2) + i20 + i21 + i22 + i23 + s2 + i24 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=13, i2=-10, i3=-4, i4=221, i25=-201, i26=-9554, i27=-10, i28=4, i29=-41100;
        byte by=-72, byArr[]=new byte[N];
        float f=2.749F, f1=-23.318F, f3=0.988F, fArr[][]=new float[N][N];
        double d3=29.39949;

        FuzzerUtils.init(fArr, 27.167F);
        FuzzerUtils.init(byArr, (byte)-62);

        for (i = 2; i < 358; i += 3) {
            for (i2 = 11; i2 < 212; ++i2) {
                by += (byte)i2;
                i3 += (((i2 * i1) + i2) - Test.iFld);
                i3 |= (i3--);
                for (f = 1; f < 2; f++) {
                    fArr[(int)(f + 1)] = (fArr[(int)(f)] = (fArr[(int)(f)] = (fArr[(int)(f)] = fArr[(int)(f + 1)])));
                    f1 /= (Test.instanceCount | 1);
                    i1 -= (int)(-((long)(111.694F * (Test.iArrFld[i2 + 1]--)) << lArrFld[i2 - 1][i + 1]));
                    i4 >>= (int)(((Test.instanceCount - i4) + iMeth(Test.byFld, i2, i2)) - i2);
                    try {
                        i1 = (-114 / Test.iArrFld[i2 - 1]);
                        i4 = (27194 % Test.iFld);
                        i1 = (Test.iArrFld[i2 - 1] / i1);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = i4;
                    f1 = Test.instanceCount;
                    Test.iFld += Test.iFld;
                    Test.iFld += (int)f;
                }
                for (i25 = 1; i25 < 2; ++i25) {
                    i1 += (int)(156L + (i25 * i25));
                    i4 = 188;
                    lArrFld[i25][i2] -= i2;
                    try {
                        Test.iArrFld[i25 - 1] = (Test.iFld % -184630003);
                        i4 = (i / i25);
                        i4 = (i4 / i3);
                    } catch (ArithmeticException a_e) {}
                }
                i3 += (int)Test.instanceCount;
                for (i27 = 2; 1 < i27; i27 -= 2) {
                    try {
                        i28 = (210 / Test.iArrFld[i27 + 1]);
                        i3 = (i2 / i3);
                        i28 = (-6009 / Test.iArrFld[i27 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
                for (f3 = 2; f3 > 1; f3 -= 3) {
                    i26 = (int)d3;
                    d3 = 2508562799L;
                }
                i26 += 26;
            }
            byArr[i + 1] = (byte)d3;
        }
        i26 = (int)Test.instanceCount;
        Test.iArrFld[(i25 >>> 1) % N] <<= Test.sFld;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
