package tests.javafuzzer2363;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:34:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8481917857957737589L;
    public int iFld=-71;
    public static short sFld=-24465;
    public static volatile float fFld=0.848F;
    public static float fFld1=40.735F;
    public int iFld1=8;
    public static volatile long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 9L);
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i4) {

        int i5=38556, i6=-186, i7=8, i8=-22, i9=-58, i10=63326, i11=8, iArr1[]=new int[N];
        double d1=0.122879;
        boolean b=false;

        FuzzerUtils.init(iArr1, -8);

        for (i5 = 5; 196 > i5; i5++) {
            i6 = i6;
            for (i7 = 1; 8 > i7; ++i7) {
                for (i9 = 1; 2 > i9; ++i9) {
                    f = i5;
                    try {
                        i4 = (i9 / iArr1[i7]);
                        i4 = (i10 / -1585769061);
                        i8 = (56493 / i7);
                    } catch (ArithmeticException a_e) {}
                    if (i10 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10 +
                            Double.doubleToLongBits(d1) + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    d1 *= -3134127947L;
                    i8 = 158;
                }
                i11 = 1;
                do {
                    if (b) {
                        try {
                            i10 = (i6 / i4);
                            i6 = (-8 / i8);
                            i10 = (iArr1[i7] / i4);
                        } catch (ArithmeticException a_e) {}
                        vMeth1_check_sum += Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10 +
                            Double.doubleToLongBits(d1) + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    if (b) {
                        Test.instanceCount += (((i11 * i10) + Test.sFld) - i7);
                        i8 += (((i11 * i4) + Test.instanceCount) - Test.instanceCount);
                    } else {
                        i4 = i5;
                    }
                } while (++i11 < 2);
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) +
            i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(double d) {

        int i3=194, i12=-169, i13=-13, i14=7881, i15=225, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -245);

        iArr[(i3 >>> 1) % N] = (int)(Test.instanceCount--);
        vMeth1(Test.fFld, -40844);
        i12 = 1;
        do {
            i3 += (i12 * Test.fFld);
            i3 = i3;
            i3 *= (int)122L;
            iArr[i12 - 1] = i12;
            Test.fFld1 += ((long)i12 ^ (long)Test.instanceCount);
            for (i13 = 1; i13 < 7; i13++) {
                i14 /= (int)(i14 | 1);
            }
        } while (++i12 < 238);
        i15 = 1;
        while (++i15 < 394) {
            if (b1) {
                iArr[i15] >>= Test.sFld;
                i3 += i13;
            } else if (b1) {
                Test.instanceCount += (((i15 * Test.instanceCount) + Test.instanceCount) - Test.sFld);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        double d2=0.638;
        int i16=-11, i17=-38549, i18=-251, i19=-27208, i20=-202, i21=0, i22=-11, i23=-44675;
        boolean b2=true;
        byte by=3;

        i1 += iMeth(d2);
        for (i16 = 3; 166 > i16; ++i16) {
            for (i18 = 1; i18 < 10; i18++) {
                Test.iArrFld[i18 - 1] -= -14;
                i19 = 8;
                for (i20 = 2; i20 > i16; i20 -= 2) {
                    i2 *= (int)d2;
                    i2 = i16;
                    i19 -= (int)2910775623L;
                    i2 += (int)2.1013F;
                }
                if (b2) continue;
                by = (byte)i18;
            }
        }
        for (i22 = 13; i22 < 289; i22++) {
            if (i21 != 0) {
                vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + i19 + i20 + i21 + (b2 ? 1
                    : 0) + by + i22 + i23;
                return;
            }
            try {
                Test.iArrFld[i22 - 1] = (i21 % i18);
                i23 = (i21 % i20);
                i2 = (Test.iArrFld[i22] / -2039774669);
            } catch (ArithmeticException a_e) {}
        }
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + i19 + i20 + i21 + (b2 ? 1 : 0) +
            by + i22 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i=7394, i24=-5, i25=3, i26=1732, i27=60, i28=-8, i29=-9, i30=13, i31=-5, i32=-10;
        double d3=14.70236;
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, 1.589F);
        FuzzerUtils.init(sArr, (short)2172);

        i = 1;
        do {
            Test.lArrFld[i][i - 1] = (iFld--);
            vMeth(iFld, i);
            Test.instanceCount = Test.instanceCount;
            iFld = (int)Test.instanceCount;
            Test.lArrFld[i - 1][i] *= Test.sFld;
            d3 = Test.instanceCount;
        } while (++i < 289);
        for (i24 = 4; i24 < 175; i24++) {
            Test.instanceCount -= (long)d3;
            for (i26 = i24; i26 < 147; i26++) {
                dArrFld[i26] += i24;
                i27 = (int)Test.instanceCount;
                Test.instanceCount *= i27;
                Test.fFld *= i25;
                d3 = i24;
                iFld *= i24;
                i25 += i26;
                fArr[i26 - 1] -= Test.instanceCount;
                Test.iArrFld[i26] *= (int)-1.759F;
            }
            i28 = 1;
            do {
                Test.sFld = (short)-47727;
            } while (++i28 < 147);
            for (i29 = 8; i29 < 147; i29++) {
                i30 += (int)739519016775759609L;
                for (i31 = 1; i31 < 2; i31++) {
                    Test.instanceCount *= iFld1;
                    i25 = 1;
                    sArr = FuzzerUtils.short1array(N, (short)28243);
                    i32 >>= i;
                    i32 = i29;
                    i30 /= (int)(i31 | 1);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
