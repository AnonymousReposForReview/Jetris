package tests.javafuzzer2959;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:52:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=42043L;
    public static boolean bFld=false;
    public static byte byFld=35;
    public int iFld=-14;
    public long lFld=2421446716L;
    public static short sFld=-18147;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -251);
        FuzzerUtils.init(Test.dArrFld, -2.100167);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {


        Test.iArrFld = Test.iArrFld;
        vMeth1_check_sum += 0;
    }

    public static byte byMeth() {

        float f=114.884F, fArr[]=new float[N];
        int i2=-33678, i3=-43902, i4=-10, i5=2318;
        byte by=-19;

        FuzzerUtils.init(fArr, 56.15F);

        for (int i1 : Test.iArrFld) {
            if (i1 != 0) {
            }
            vMeth1();
            Test.instanceCount = (long)f;
            for (i2 = 1; i2 < 4; i2++) {
                for (i4 = i2; i4 < 2; i4++) {
                    i1 += (int)(-92.388F + (i4 * i4));
                    Test.instanceCount *= i2;
                    fArr[i4] = i1;
                    i5 += i4;
                    if (Test.bFld) {
                        i1 += (((i4 * f) + by) - Test.instanceCount);
                        i5 = -5;
                        Test.instanceCount += (long)f;
                        i1 += i3;
                    } else if (true) {
                        i5 ^= (int)Test.instanceCount;
                    } else if (true) {
                        Test.instanceCount += i4;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i) {

        float f1=-6.189F;
        int i6=126, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7085191522267042970L);
        FuzzerUtils.init(iArr, 13);

        lArr[(29129 >>> 1) % N] *= byMeth();
        for (f1 = 170; f1 > 5; f1 -= 3) {
            lArr = lArr;
            i -= -8;
            Test.byFld *= (byte)i;
            i6 -= (int)6L;
            Test.dArrFld[(int)(f1 - 1)] = i6;
            iArr[(int)(f1 + 1)] -= (int)Test.instanceCount;
            Test.instanceCount += (long)(((f1 * i) + i6) - i6);
            Test.byFld += (byte)(f1 * f1);
            Test.iArrFld[(int)(f1)] *= (int)Test.instanceCount;
        }
        i6 = 19402;
        vMeth_check_sum += i + Float.floatToIntBits(f1) + i6 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f2=-38.1003F, fArr1[]=new float[N];
        int i7=-5, i8=4, i9=86, i10=-3, i11=-6, i12=-72, i13=-76, i14=-37232;

        FuzzerUtils.init(fArr1, 8.914F);

        vMeth(iFld);
        Test.iArrFld[(iFld >>> 1) % N] -= iFld;
        Test.instanceCount = iFld;
        f2 = 55.59F;
        if (Test.bFld) {
            i7 = 1;
            while (++i7 < 224) {
                if (Test.bFld) break;
                Test.instanceCount = 9;
                for (i8 = i7; i8 < 112; ++i8) {
                    switch (((i8 >>> 1) % 9) + 28) {
                    case 28:
                        for (i10 = 1; 1 > i10; i10 += 3) {
                            i11 *= i10;
                        }
                        break;
                    case 29:
                        if (Test.bFld) break;
                        Test.iArrFld[i8 - 1] = (int)Test.instanceCount;
                        switch (((i11 >>> 1) % 2) + 24) {
                        case 24:
                            i12 = 1;
                            do {
                                lFld <<= i9;
                                i11 += Test.sFld;
                                i11 = iFld;
                                Test.iArrFld[i7] -= i11;
                                Test.instanceCount ^= lFld;
                                Test.iArrFld = FuzzerUtils.int1array(N, (int)-82);
                                Test.byFld = (byte)158;
                            } while (++i12 < 1);
                            i11 += (i8 - Test.instanceCount);
                            break;
                        case 25:
                            fArr1[i7] += iFld;
                            for (i13 = 1; i13 < 1; i13++) {
                                Test.instanceCount = i11;
                            }
                            i9 -= i7;
                            break;
                        default:
                            lFld = i13;
                            Test.instanceCount *= i12;
                        }
                    case 30:
                        iFld -= (int)f2;
                    case 31:
                        iFld = (int)Test.instanceCount;
                        break;
                    case 32:
                        Test.iArrFld[i8 - 1] = i10;
                        break;
                    case 33:
                    case 34:
                        i14 *= (int)lFld;
                        break;
                    case 35:
                        f2 *= f2;
                        break;
                    case 36:
                        iFld += (int)f2;
                        break;
                    }
                }
            }
        } else if (Test.bFld) {
            i9 = Test.byFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
