package tests.javafuzzer721;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:34:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1020594954L;
    public static float fFld=0.802F;
    public static float fFld1=68.954F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8129L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static void vSmallMeth(int i, long l, long l1) {

        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -1535L);

        lArr[(i >>> 1) % N] = lArr[(i >>> 1) % N];
        i -= (++i);
        vSmallMeth_check_sum += i + l + l1 + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth(long l3, int i5) {


        i5 = (int)l3;
        long meth_res = l3 + i5;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth() {

        int i6=-14, i7=176, i8=-7, i9=1201, i10=23910, i11=-36, i12=60654, iArr[]=new int[N];
        byte by1=38;
        boolean b1=false;

        FuzzerUtils.init(iArr, 9);

        Test.instanceCount = ((-2 + sMeth(Test.instanceCount, i6)) - i6);
        i6 += (int)Test.fFld;
        for (i7 = 10; i7 < 256; i7++) {
            iArr[i7 - 1] = (int)Test.instanceCount;
        }
        i6 *= i8;
        i6 += -26331;
        for (i9 = 11; i9 < 331; i9++) {
            for (i11 = 5; i11 > 1; i11--) {
                iArr[i9 - 1] += 11;
                if (b1) {
                    i10 = i12;
                    i6 |= -32094;
                    i8 += (i11 | by1);
                    i12 += (-10278 + (i11 * i11));
                } else if (b1) {
                    i12 += (((i11 * Test.instanceCount) + i11) - i10);
                } else if (false) {
                    i12 = (int)Test.instanceCount;
                } else {
                    if (b1) break;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i3, long l2) {

        double d2=1.51605, dArr[]=new double[N];
        boolean b=true, bArr[]=new boolean[N];
        short s=-11158;
        int i4=11, i13=-113, i14=1, iArr1[]=new int[N];

        FuzzerUtils.init(dArr, 0.83708);
        FuzzerUtils.init(iArr1, -55289);
        FuzzerUtils.init(bArr, true);

        d2 += Double.longBitsToDouble(Test.lArrFld[(i3 >>> 1) % N]);
        b = (((-2739471870L & (-11 - i3)) * s) > ((i3 + i3) + (i3 * l2)));
        i4 = 324;
        while ((i4 -= 3) > 0) {
            i3 *= (int)((-(++i3)) - (iMeth() - -6L));
            Test.instanceCount += (long)Test.fFld;
            iArr1[i4 + 1] ^= i3;
            i3 = (int)-1669842681061816766L;
            for (i13 = 1; i13 < 14; i13++) {
                Test.instanceCount -= -40;
                bArr[i13] = b;
                try {
                    iArr1[i4 + 1] = (i4 / 66);
                    iArr1[i13] = (iArr1[i4] / 205);
                    i3 = (-39786 % i13);
                } catch (ArithmeticException a_e) {}
                l2 += (i13 - l2);
                i3 -= i4;
                Test.instanceCount = i3;
                i3 -= (int)l2;
            }
        }
        long meth_res = i3 + l2 + Double.doubleToLongBits(d2) + (b ? 1 : 0) + s + i4 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=205, i2=-31211, i15=-157, i16=13642, i17=229, i18=177, i19=11, i20=50607, i21=10848, iArr2[]=new int[N];
        byte by=72;
        double d=1.72572, d1=-1.31546, d4=-28.25224;
        short s2=-21183;

        FuzzerUtils.init(iArr2, 3);

        for (int smallinvoc=0; smallinvoc<781; smallinvoc++) vSmallMeth(Math.min(i1, 17177), Test.instanceCount--,
            ~Math.min(i1++, by + i1));
        vSmallMeth(++i1, Test.instanceCount, Test.lArrFld[(i1 >>> 1) % N]);
        for (d = 5; d < 161; d++) {
            boolean b2=true;
            if (b2) {
                i2 += (int)((++d1) * Math.abs(fMeth(-61851, Test.instanceCount)));
                iArr2[(int)(d)] -= i1;
                for (d4 = 7; d4 < 161; ++d4) {
                    switch ((int)(((d % 2) * 5) + 111)) {
                    case 118:
                        try {
                            i1 = (i15 % iArr2[(int)(d4 - 1)]);
                            i15 = (i1 % i2);
                            i1 = (i16 / i15);
                        } catch (ArithmeticException a_e) {}
                        i1 -= (int)Test.fFld;
                        i16 = (int)Test.instanceCount;
                        i16 <<= by;
                    case 117:
                        i16 = (int)Test.instanceCount;
                        for (i17 = 1; i17 < 2; i17++) {
                            Test.instanceCount += i18;
                            i2 -= i15;
                            Test.fFld1 -= (float)d;
                            iArr2 = FuzzerUtils.int1array(N, (int)-145);
                        }
                        switch (((i1 >>> 1) % 4) + 60) {
                        case 60:
                            i1 -= (int)Test.instanceCount;
                            break;
                        case 61:
                            Test.instanceCount <<= i15;
                            break;
                        case 62:
                            i19 = 1;
                            do {
                                d1 += i16;
                                by = (byte)i2;
                            } while (++i19 < 2);
                            Test.fFld1 = Test.instanceCount;
                            break;
                        case 63:
                            for (i20 = 1; 2 > i20; i20 += 2) {
                                short s1=-30032;
                                s1 += (short)(-12251 + (i20 * i20));
                            }
                            i21 >>= (int)Test.instanceCount;
                            Test.fFld1 += (float)(((d4 * Test.instanceCount) + Test.instanceCount) - s2);
                            break;
                        }
                    }
                    i2 = 118;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
