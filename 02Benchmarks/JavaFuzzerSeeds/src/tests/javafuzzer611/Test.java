package tests.javafuzzer611;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:34:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static int iFld=7602;
    public static volatile int iFld1=-56732;
    public float fFld=-2.59F;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 46983L);
        FuzzerUtils.init(Test.dArrFld, 14.98998);
        FuzzerUtils.init(Test.iArrFld, -40104);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=59700, i4=182, i5=6427, i6=-65321, i7=14551, iArr1[]=new int[N];
        double d1=-50.82902;

        FuzzerUtils.init(iArr1, 23715);

        i3 = 1;
        while (++i3 < 124) {
            float f1=78.781F;
            Test.iFld += (i3 - i3);
            d1 = f1;
            for (i4 = 1; i4 < 13; ++i4) {
                Test.iFld >>= i3;
                for (i6 = 1; i6 < 2; ++i6) {
                    i5 <<= i7;
                    switch (((i3 % 2) * 5) + 25) {
                    case 34:
                        Test.iFld = (int)Test.instanceCount;
                        Test.dArrFld[i3] = -54524;
                        i5 -= i4;
                        switch ((((Test.iFld >>> 1) % 2) * 5) + 96) {
                        case 98:
                            Test.lArrFld[i4 + 1] <<= i7;
                            break;
                        case 100:
                            Test.instanceCount += i4;
                            Test.dArrFld[i4] = i3;
                            break;
                        default:
                            try {
                                iArr1[i3] = (32464 % iArr1[i3 + 1]);
                                Test.iFld = (iArr1[i6 - 1] / i3);
                                Test.iFld = (-695532000 % i4);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    case 31:
                        Test.instanceCount -= Test.iFld1;
                        break;
                    }
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i2=206, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -9);

        iArr[(i2 >>> 1) % N] &= (int)(-109 - (Test.lArrFld[(i2 >>> 1) % N]--));
        Test.instanceCount >>= iMeth();
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i, int i1, float f) {

        double d2=-96.16143;
        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -55236);

        vMeth(d2);
        iArr2[(-46064 >>> 1) % N] -= -254;
        vSmallMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i8=-13, i9=38231, i10=7, i11=-38, i12=4, i13=-13845, i14=-105, i15=-7;
        boolean b=false, b1=false;
        float f2=-98.783F;

        try {
            for (int smallinvoc=0; smallinvoc<634; smallinvoc++) vSmallMeth(28866, Test.iFld, fFld);
            Test.iArrFld[(Test.iFld >>> 1) % N] = (int)fFld;
            if ((Test.iFld1) < 65536) throw new UserDefinedExceptionTest();
            Test.instanceCount += -19862;
            i8 = 1;
            while (++i8 < 290) {
                try {
                    Test.iFld = (-16610 / i9);
                    i9 = (Test.iFld1 / -247);
                    i9 = (103 % i9);
                } catch (ArithmeticException a_e) {}
                byArrFld[i8 + 1] >>>= (byte)Test.iFld1;
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.iArrFld[(i9 >>> 1) % N] *= Test.iFld;
            for (long l : Test.lArrFld) {
                Test.iFld1 = Test.iFld1;
                switch (((Test.iFld >>> 1) % 2) + 55) {
                case 55:
                    for (i10 = 63; i10 > 2; i10 -= 3) {
                        if (b) break;
                        i11 = i10;
                        b = b1;
                    }
                    fFld += Test.iFld1;
                    Test.iFld1 = i10;
                    fFld += f2;
                case 56:
                    i12 = 53693;
                default:
                    i13 = 1;
                    while (++i13 < 63) {
                        for (i14 = i13; i14 < 1; ++i14) {
                            fFld += (i14 * i14);
                            l = 16;
                            Test.dArrFld[i14 - 1] += f2;
                            Test.lArrFld[i13 - 1] *= i9;
                            i9 = (int)f2;
                            i15 >>>= 5;
                            Test.instanceCount += Test.iFld;
                            Test.lArrFld[i14] += i13;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
