package tests.javafuzzer412;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:19:47 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12L;
    public static volatile byte byFld=122;
    public static long lArrFld[][]=new long[N][N];
    public volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 58L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, int i7, int i8) {

        double d=-1.109082;
        int i9=-2, i10=37306, i11=-5, i12=-1, i13=34794, i14=0, i15=208, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(lArr1, 1500099711L);

        i8 = i8;
        d += i7;
        for (i9 = 17; i9 < 318; ++i9) {
            i7 <<= (int)Test.instanceCount;
        }
        for (i11 = 10; i11 < 380; ++i11) {
            Test.instanceCount *= i9;
        }
        Test.instanceCount = 48293;
        i12 |= i6;
        for (i13 = 187; i13 > 6; --i13) {
            i14 <<= (int)Test.instanceCount;
            iArr1[i13] += i6;
        }
        i15 = 1;
        while (++i15 < 177) {
            boolean b=true;
            Test.instanceCount <<= Test.instanceCount;
            if (b) continue;
        }
        i10 += (int)106L;
        vMeth_check_sum += i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i16=3, i17=-3, i18=35387, i19=180, i20=10503, i21=147, iArr2[][]=new int[N][N];
        float f1=0.999F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(iArr2, 69);

        for (long l : lArr) {
            vMeth(i5, i4, 200);
        }
        switch ((((i3 >>> 1) % 1) * 5) + 91) {
        case 93:
            iArr2 = iArr2;
        }
        for (i16 = 12; 304 > i16; i16++) {
            Test.instanceCount = i16;
            for (i18 = 1; i18 < 6; i18++) {
                Test.instanceCount += i3;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount ^= i16;
                    Test.instanceCount >>>= i18;
                }
                i19 += i20;
                i3 = i18;
                i4 += (i18 * i18);
                f1 *= i21;
            }
        }
        long meth_res = i3 + i4 + i5 + i16 + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f, int i1) {

        int i2=-13, i22=17, i23=-63287, i24=-11, i25=-252, i26=0, i27=166, i28=211, i29=-111, iArr3[]=new int[N];
        short s=-10035;
        double d1=0.13360;
        byte by=121;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, 15261);
        FuzzerUtils.init(lArr2, -4694034144288320918L);

        try {
            i2 = 1;
            do {
                i1 = (int)(lMeth(i1, i2, i1) / (Test.instanceCount | 1));
            } while (++i2 < 157);
            for (i22 = 9; 237 > i22; i22++) {
                Test.instanceCount = s;
            }
            iArr3[(i2 >>> 1) % N] = i1;
            for (i24 = 4; i24 < 170; i24++) {
                Test.instanceCount += -44468;
                for (i26 = 1; i26 < 10; i26++) {
                    for (i28 = 1; 2 > i28; i28++) {
                        i1 &= i28;
                        d1 = i23;
                        i1 = (int)d1;
                        iArr3[i28 - 1] &= (int)Test.instanceCount;
                        by = (byte)i27;
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            lArr2 = FuzzerUtils.long1array(N, (long)-2340601708891487836L);
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i22 + i23 + s + i24 + i25 + i26 + i27 + i28 + i29 +
            Double.doubleToLongBits(d1) + by + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i30=-54748, i31=-112, i32=-33830, i33=0, iArr[]=new int[N];
        float f2=40.910F, fArr[]=new float[N];
        double d2=-109.28237;
        short s1=12347;
        boolean b1=false;

        FuzzerUtils.init(iArr, -18683);
        FuzzerUtils.init(fArr, -1.945F);

        Test.instanceCount = (((i + i) - iArr[(i >>> 1) % N]) - (-iMeth(f2, i)));
        i ^= i;
        i = (int)Test.instanceCount;
        for (float f3 : fArr) {
            for (i30 = 2; i30 < 63; i30++) {
                switch (((i30 % 2) * 5) + 67) {
                case 74:
                    Test.instanceCount += (i30 * i31);
                    Test.instanceCount >>= i;
                    Test.instanceCount -= -112;
                    d2 -= 43221;
                    break;
                case 77:
                    for (i32 = 1; 2 > i32; ++i32) {
                        switch (((i30 % 6) * 5) + 99) {
                        case 116:
                            Test.lArrFld = Test.lArrFld;
                            Test.byFld += (byte)(i32 + i33);
                            break;
                        case 125:
                            iArr[i32] = i33;
                            i33 = i;
                            i31 = i;
                            break;
                        case 114:
                            f3 += i;
                            break;
                        case 123:
                            dArrFld[i32 - 1] = i30;
                            switch ((i30 % 7) + 54) {
                            case 54:
                                i33 *= -172;
                                i += (((i32 * Test.byFld) + i32) - s1);
                                i31 += (i32 ^ Test.byFld);
                                if (b1) continue;
                                break;
                            case 55:
                                try {
                                    i = (-46746 % i31);
                                    i = (i / -196);
                                    i = (i % 55129);
                                } catch (ArithmeticException a_e) {}
                                iArr[i32] = 197;
                                iArr[i30 + 1] += (int)Test.instanceCount;
                                Test.lArrFld[i32][i32] = i33;
                            case 56:
                                f3 -= Test.instanceCount;
                                if (true) break;
                            case 57:
                                i33 ^= i31;
                                break;
                            case 58:
                                f3 -= i33;
                                break;
                            case 59:
                                i31 = i32;
                            case 60:
                                iArr[i32] <<= i31;
                            default:
                                Test.lArrFld[i32][i32 - 1] += i;
                            }
                            break;
                        case 126:
                            Test.byFld += (byte)(242 + (i32 * i32));
                            break;
                        case 121:
                            Test.lArrFld[i32 - 1][i32] <<= i;
                            break;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
