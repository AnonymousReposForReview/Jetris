package tests.javafuzzer2592;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:59:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2158341774L;
    public static short sFld=-8988;
    public static boolean bFld=false;
    public int iFld=-8146;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 51);
        FuzzerUtils.init(Test.byArrFld, (byte)-40);
        FuzzerUtils.init(Test.dArrFld, 1.110514);
        FuzzerUtils.init(Test.lArrFld, -514893339L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=134, i4=-7, i5=0, i6=-14, i7=9, i8=21755, i9=-40187, i10=0, i11=39993, i12=-12, i13=0;
        float f2=0.25F, fArr[]=new float[N];
        byte by=-62;
        double d=-1.46792;

        FuzzerUtils.init(fArr, 83.380F);

        Test.iArrFld[(i3 >>> 1) % N] = i3;
        Test.byArrFld[(-58655 >>> 1) % N] = (byte)i3;
        switch (((i3 >>> 1) % 8) + 67) {
        case 67:
            for (i4 = 12; i4 < 370; ++i4) {
                fArr[i4 + 1] += i5;
            }
            for (i6 = 5; i6 < 214; ++i6) {
                for (i8 = 1; 8 > i8; i8++) {
                    i3 <<= (int)102L;
                    for (i10 = 1; i10 < 2; i10++) {
                        Test.instanceCount <<= i3;
                        i11 |= -18159;
                        Test.instanceCount += i10;
                    }
                }
                for (i12 = 8; i6 < i12; i12--) {
                    Test.iArrFld[i12 - 1] = i6;
                    Test.byArrFld[i12] = (byte)i7;
                }
            }
            break;
        case 68:
            Test.instanceCount = 114;
        case 69:
            f2 += by;
            break;
        case 70:
            i9 *= i12;
            break;
        case 71:
            Test.dArrFld[(i8 >>> 1) % N] = -11;
            break;
        case 72:
            Test.instanceCount >>= i9;
            break;
        case 73:
            d = -13;
        case 74:
            Test.lArrFld[(i8 >>> 1) % N] += 8;
            break;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + by +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(boolean b) {

        int i=-1, i1=0, i2=9956, i14=-8116, i15=33040, i16=-7, iArr[]=new int[N];
        float f1=1.267F;

        FuzzerUtils.init(iArr, 185);

        iArr[(i >>> 1) % N] += iArr[(i >>> 1) % N];
        for (i1 = 6; i1 < 144; i1++) {
            i2 += (((i1 * i2) + i) - f1);
            i2 += i1;
            i2 *= (int)58.24863;
            f1 = iMeth();
        }
        for (i14 = 4; i14 < 335; ++i14) {
            Test.sFld += (short)1708487548L;
            i15 += (i14 | i);
            f1 *= Test.sFld;
            Test.instanceCount &= i1;
            i16 = 1;
            while (++i16 < 5) {
                i -= (int)3103635485L;
                f1 += i16;
                i2 = i14;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i + i1 + i2 + Float.floatToIntBits(f1) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f) {

        int i17=2;

        vMeth1(Test.bFld);
        i17 = i17;
        vMeth_check_sum += Float.floatToIntBits(f) + i17;
    }

    public void mainTest(String[] strArr1) {

        float f3=-105.143F, f4=95.12F;
        int i18=179, i19=14, i20=2;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        if (false) {
            vMeth(f3);
        } else {
            Test.lArrFld[(iFld >>> 1) % N] = Test.instanceCount;
        }
        f4 = 1;
        do {
            Test.iArrFld[(int)(f4 - 1)] -= (int)Test.instanceCount;
            f3 += (((f4 * Test.instanceCount) + iFld) - Test.instanceCount);
            switch ((int)((f4 % 6) + 13)) {
            case 13:
                iFld += iFld;
                if (Test.bFld) {
                    iFld -= Test.sFld;
                    iFld += (230 + (f4 * f4));
                    bArr[(int)(f4)] = Test.bFld;
                } else {
                    f3 += (((f4 * Test.instanceCount) + iFld) - iFld);
                }
                if (Test.bFld) break;
            case 14:
                iFld += (int)(((f4 * iFld) + Test.instanceCount) - f4);
                for (i18 = 85; 5 < i18; --i18) {
                    i20 = 1;
                    while (++i20 < 2) {
                        if (Test.bFld) continue;
                        switch (((i19 >>> 1) % 2) + 89) {
                        case 89:
                            f3 = iFld;
                            Test.instanceCount &= i20;
                            i19 += (int)-14L;
                            i19 = (int)Test.instanceCount;
                            break;
                        case 90:
                            i19 = (int)Test.instanceCount;
                        default:
                            if (true) {
                                try {
                                    iFld = (-234 % iFld);
                                    i19 = (1391468863 % i19);
                                    i19 = (250 / i18);
                                } catch (ArithmeticException a_e) {}
                            } else {
                                Test.instanceCount += Test.instanceCount;
                            }
                            iFld += (i20 ^ (long)f3);
                            iFld = -247;
                        }
                        Test.instanceCount += i20;
                    }
                }
                break;
            case 15:
                Test.instanceCount = -149;
                break;
            case 16:
                iFld = i18;
            case 17:
            case 18:
                iFld >>= (int)Test.instanceCount;
                break;
            default:
                try {
                    i19 = (Test.iArrFld[(int)(f4 - 1)] % 186);
                    iFld = (i19 % iFld);
                    Test.iArrFld[(int)(f4)] = (Test.iArrFld[(int)(f4)] / 24897);
                } catch (ArithmeticException a_e) {}
            }
        } while (++f4 < 297);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
