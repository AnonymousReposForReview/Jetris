package tests.javafuzzer110;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-247L;
    public static float fFld=0.994F;
    public byte byFld=-111;
    public static short sFld=-24713;
    public static boolean bFld=true;
    public static volatile long lFld=-333581093L;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9, long l1, int i10) {

        int i11=-200, i12=-89, i13=30, i14=-11, i15=63506, i16=216, i17=-48001, i18=-42, i19=4;
        double d1=2.88321;
        byte by=-23;
        boolean b=true;

        i11 = 1;
        while (++i11 < 342) {
            for (i12 = 1; i12 < 5; ++i12) {
                for (i14 = i11; i14 < 2; ++i14) {
                    Test.instanceCount += (i14 * i14);
                    if (i12 != 0) {
                        vMeth2_check_sum += i9 + l1 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) +
                            i16 + i17 + i18 + by + i19 + (b ? 1 : 0);
                        return;
                    }
                    d1 = i11;
                }
                i10 += (i12 - Test.fFld);
                for (i16 = 1; 2 > i16; ++i16) {
                    try {
                        i9 = (i11 % -54442);
                        i13 = (i18 % -225);
                        i9 = (i13 % i16);
                    } catch (ArithmeticException a_e) {}
                    by += (byte)i16;
                    i17 >>= -51833;
                    i19 *= -2;
                    if (i19 != 0) {
                        vMeth2_check_sum += i9 + l1 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) +
                            i16 + i17 + i18 + by + i19 + (b ? 1 : 0);
                        return;
                    }
                    if (b) continue;
                    i15 += (((i16 * l1) + i19) - i15);
                }
            }
        }
        vMeth2_check_sum += i9 + l1 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + i18
            + by + i19 + (b ? 1 : 0);
    }

    public void vMeth1(int i7, int i8) {

        int i20=-13, i21=-207, i22=-243, i23=61356, i24=254;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.122319);

        vMeth2(i8, Test.instanceCount, i7);
        i20 = 1;
        do {
            i7 *= (int)Test.fFld;
            for (i21 = i20; i21 < 9; i21++) {
                i7 = i20;
                iArrFld[i20] |= i22;
                for (i23 = 1; i23 > 1; --i23) {
                    Test.instanceCount += (i23 + Test.instanceCount);
                    iArrFld[i21] = i24;
                    i7 -= i8;
                    i7 -= i21;
                    iArrFld[i20 - 1] = i20;
                    dArr[i21 - 1] *= i8;
                    i7 = byFld;
                }
            }
            Test.sFld += (short)(((i20 * i7) + i24) - i21);
        } while (++i20 < 182);
        vMeth1_check_sum += i7 + i8 + i20 + i21 + i22 + i23 + i24 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth() {

        int i5=90, i6=17132, i26=-3, i27=39758;
        float f1=-60.976F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);

        i5 %= (int)(i5 | 1);
        switch ((((((int)(-f1)) >>> 1) % 1) * 5) + 9) {
        case 12:
            for (long l : lArr) {
                i6 = 1;
                do {
                    vMeth1(i5, i5);
                    Test.instanceCount >>>= i6;
                    i5 -= i5;
                    Test.bFld = Test.bFld;
                } while ((i6 += 3) < 4);
            }
            i5 >>= i5;
            break;
        }
        for (int i25 : iArrFld) {
            for (i26 = 1; i26 < 4; ++i26) {
                i25 += i26;
                i5 += (((i26 * Test.instanceCount) + i5) - i27);
                lArr[(i25 >>> 1) % N] *= i25;
                iArrFld[i26 - 1] = -6;
            }
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i26 + i27 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-44383, i1=-9869, i2=-77, i3=-25877, i4=-5, i28=-66, i29=-52, i30=6, i31=-10;
        double d=1.113604;
        float f=2.384F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)117);

        for (i = 290; 12 < i; i -= 2) {
            i1 |= (int)(i1 += (int)((d * 13871) + (i1 = (int)Test.instanceCount)));
        }
        if (Test.bFld) {
            f = (Test.instanceCount + (Test.instanceCount--));
            i2 = 1;
            do {
                for (i3 = 1; i3 < 127; ++i3) {
                    vMeth();
                    d = -118.30283;
                    i4 >>>= (int)Test.instanceCount;
                }
                iArrFld[i2 + 1] += 27236;
                Test.lFld += (((i2 * Test.fFld) + i1) - i2);
            } while (++i2 < 197);
            byArr[(0 >>> 1) % N] = (byte)i4;
            i28 = 187;
            while ((i28 -= 3) > 0) {
                i4 += (i28 * i);
                i1 = (int)Test.instanceCount;
                Test.lFld *= i28;
                Test.sFld += (short)i3;
                i29 = 397;
                do {
                    for (i30 = i29; i30 < 3; i30++) {
                        switch ((((i2 >>> 1) % 2) * 5) + 112) {
                        case 117:
                            d *= i31;
                            i4 *= (int)Test.lFld;
                            i31 += (int)Test.lFld;
                            i1 = 77;
                            break;
                        case 113:
                            i1 <<= 10;
                            Test.instanceCount &= i3;
                            try {
                                i1 = (i4 / -12743);
                                iArrFld[i29 + 1] = (i28 / i1);
                                iArrFld[i28 - 1] = (i / i28);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            Test.sFld += (short)d;
                        }
                        Test.lFld = Test.sFld;
                        Test.lFld = (long)Test.fFld;
                    }
                } while ((i29 -= 3) > 0);
            }
        } else {
            i31 += i31;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
