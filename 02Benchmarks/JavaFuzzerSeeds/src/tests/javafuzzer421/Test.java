package tests.javafuzzer421;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:24:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static double dFld=0.103737;
    public short sFld=1814;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2618914628861584560L);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, int i12, long l1) {

        int i13=-14, i14=-10462, i15=5, i16=-215, i17=13, i18=3106, iArr2[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, -2);
        FuzzerUtils.init(bArr, true);

        for (i13 = 20; i13 < 336; ++i13) {
            for (i15 = 1; i15 < 5; ++i15) {
                for (i17 = 1; 2 > i17; i17++) {
                    i12 = i15;
                    i18 >>= i14;
                }
                i16 = (int)l1;
            }
            iArr2[(i14 >>> 1) % N] = 203;
            iArr2[i13 - 1] = i12;
            if (b) break;
            i18 -= 108;
            bArr[i13] = false;
            l1 -= 0;
        }
        i14 += i14;
        i18 += i12;
        l1 = 55671;
        long meth_res = l + i12 + l1 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i5) {

        int i6=191, i7=-4, i8=104, i9=4, i10=148, i11=-28666, iArr1[]=new int[N];
        float f=58.909F, fArr[]=new float[N];
        byte by=68, byArr[]=new byte[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(byArr, (byte)39);
        FuzzerUtils.init(iArr1, 146);
        FuzzerUtils.init(dArr, 1.125530);
        FuzzerUtils.init(fArr, -86.867F);

        for (i6 = 13; 268 > i6; ++i6) {
            for (i8 = 1; i8 < 6; i8++) {
                f -= f;
                switch ((i6 % 5) + 66) {
                case 66:
                    byArr[i8] >>= (byte)i8;
                    i5 += (int)(((i9 * 21620L) / ((i8 << i6) | 1)) + i9);
                    i7 = (int)(i5 * (++Test.instanceCount));
                    Test.instanceCount *= (i5--);
                case 67:
                    i9 *= (i5 * (by--));
                    for (i10 = i6; i10 < 2; i10++) {
                        iArr1[i6 - 1] -= (int)(3183850052824513683L - (Integer.reverseBytes(i10) - Math.abs(i11)));
                        i11 *= (Integer.reverseBytes(iArr1[i8]++) - ((i5 - i9) - iMeth1(Test.instanceCount, i8,
                            Test.instanceCount)));
                    }
                    dArr = dArr;
                    break;
                case 68:
                    f += f;
                    break;
                case 69:
                    i11 = -14994;
                    break;
                case 70:
                    i5 <<= (int)-4728561420990039799L;
                default:
                    fArr[i8 - 1] += Test.instanceCount;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + by + i10 + i11 + FuzzerUtils.checkSum(byArr)
            + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i, int i1, int i2) {

        int i3=55615, i4=-8, i19=-17699, iArr[]=new int[N];
        short s=-22670;
        byte by1=-124;

        FuzzerUtils.init(iArr, 11449);

        for (i3 = 4; i3 < 335; i3++) {
            Test.instanceCount <<= ((iArr[i3 - 1] - i) + (Test.lArrFld[i3 - 1] = i));
            Test.lArrFld[i3 + 1] -= (long)((iArr[i3] * (-(Test.dFld++))) * Math.max(Test.instanceCount <<= i4, s + i3));
            i4 >>= i4;
            Test.instanceCount -= ((-Math.max(i4, i3)) - (++i4));
            Test.dFld -= iMeth(i3);
            Test.instanceCount -= by1;
            i19 = 1;
            do {
                Test.lArrFld[i19 + 1] /= (i2 | 1);
                i2 += -6;
                i4 += (i19 + Test.instanceCount);
                i >>>= i4;
                iArr[i3] = (int)Test.instanceCount;
                i4 -= (int)Test.instanceCount;
                i2 >>>= i4;
            } while (++i19 < 5);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + s + by1 + i19 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-19252, i21=41, i22=-7933, i23=14, i24=3, i25=-56337, iArr3[][]=new int[N][N];
        float f1=0.80F;
        byte by2=89;

        FuzzerUtils.init(iArr3, -14);

        fMeth(i20, 58653, i20);
        for (i21 = 3; i21 < 181; ++i21) {
            try {
                iArr3[i21 + 1][i21] = (376986438 / i22);
                i22 = (i22 % i21);
                iArr3[i21 + 1][i21] = (i22 / -193);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount *= i22;
            i23 = 1;
            do {
                Test.dFld = sFld;
                for (i24 = 1; i24 < 1; i24++) {
                    switch ((i23 % 8) + 63) {
                    case 63:
                        Test.instanceCount = i21;
                        Test.dFld *= i25;
                        break;
                    case 64:
                        f1 = 40224;
                        Test.instanceCount = by2;
                    case 65:
                        switch (((i24 >>> 1) % 1) + 54) {
                        case 54:
                            Test.instanceCount >>= i21;
                            iArr3[i24 + 1][i21 - 1] += i23;
                            by2 += (byte)(i24 | i23);
                            f1 = i23;
                            break;
                        }
                        i20 += (i24 ^ i23);
                        break;
                    case 66:
                        Test.instanceCount += (((i24 * i21) + Test.instanceCount) - i25);
                        i20 >>= sFld;
                        break;
                    case 67:
                        i25 = i24;
                        break;
                    case 68:
                        iArr3[i24 - 1] = FuzzerUtils.int1array(N, (int)46141);
                        by2 += (byte)(((i24 * i25) + i21) - i25);
                        f1 -= i25;
                        break;
                    case 69:
                        i22 &= i20;
                        switch ((((-50091 >>> 1) % 8) * 5) + 122) {
                        case 158:
                            i20 *= i20;
                            break;
                        case 146:
                            if (true) {
                                i22 += (i24 - sFld);
                            } else {
                                by2 >>= (byte)-9;
                            }
                            break;
                        case 125:
                            iArr3[i24][i23 - 1] = i25;
                        case 150:
                            iArr3[i24 + 1][i24] >>= i25;
                            break;
                        case 127:
                            i20 = i24;
                        case 132:
                            f1 -= Test.instanceCount;
                            break;
                        case 130:
                            i22 += (i24 + i22);
                            break;
                        case 131:
                            Test.instanceCount += Test.instanceCount;
                        default:
                            Test.instanceCount += i21;
                        }
                        break;
                    case 70:
                        Test.instanceCount <<= i21;
                    default:
                        f1 -= i21;
                    }
                }
            } while (++i23 < 141);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
