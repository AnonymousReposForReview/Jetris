package tests.javafuzzer2945;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:31:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=162L;
    public static double dFld=0.45965;
    public static byte byFld=-47;
    public short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -247);
        FuzzerUtils.init(Test.lArrFld, -53721L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d=72.61608;
        int i6=-93, i7=0, i8=8, i10=54848;
        float f=0.450F;
        byte by=9;

        d = i6;
        for (i7 = 20; i7 < 358; i7++) {
            switch ((i7 % 9) + 14) {
            case 14:
                Test.instanceCount -= i8;
                i8 -= i6;
                break;
            case 15:
                Test.instanceCount = -3588667905L;
                i8 = (int)f;
                break;
            case 16:
                i8 -= i8;
                break;
            case 17:
                i6 = (int)1.928F;
                i6 += (((i7 * i7) + f) - i6);
                Test.iArrFld[i7] ^= (int)Test.instanceCount;
                break;
            case 18:
                i8 += (((i7 * i7) + i10) - i6);
                i8 += by;
                if (false) break;
                Test.instanceCount += i8;
                break;
            case 19:
                d -= i10;
                break;
            case 20:
                Test.iArrFld[i7 + 1] += i10;
                break;
            case 21:
                d *= d;
                break;
            case 22:
                f /= (Test.instanceCount | 1);
                break;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i6 + i7 + i8 + Float.floatToIntBits(f) + i10 + by;
    }

    public static void vMeth1() {

        int i4=-199, i5=2529, i11=-145, i12=-199, i13=14;
        float f1=-9.376F;
        boolean b=true;
        double d1=7.94458;

        for (i4 = 8; i4 < 169; ++i4) {
            i5 += ((--i5) + -32);
            i5 += (((i4 * Test.instanceCount) + i5) - i5);
            vMeth2();
            if (b) {
                f1 *= i5;
            } else {
                for (i11 = 1; i11 < 10; i11 += 3) {
                    i13 = 1;
                    while (++i13 < 4) {
                        Test.iArrFld[i4 - 1] = (int)1.1294;
                        i12 += (int)78.663F;
                        i5 += i13;
                        d1 += Test.instanceCount;
                        f1 += i13;
                    }
                    Test.iArrFld[i11 - 1] *= (int)Test.instanceCount;
                    i5 >>= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i11 + i12 + i13 +
            Double.doubleToLongBits(d1);
    }

    public static void vMeth(int i2, int i3, long l) {

        int i14=11, i15=-5, i16=-60228, i17=-12, i18=-16572, i19=9;
        float f2=81.549F;
        boolean b1=false;

        vMeth1();
        for (i14 = 17; i14 < 280; ++i14) {
            if (b1) {
                for (i16 = 1; 6 > i16; i16 += 2) {
                    f2 += i14;
                    i15 *= i14;
                    for (i18 = 1; i18 < 3; ++i18) {
                        Test.dFld = i14;
                        i19 -= 13;
                        Test.lArrFld[i18] >>= i15;
                    }
                }
                f2 -= i16;
            } else if (b1) {
                i17 *= 103;
                Test.dFld %= (i14 | 1);
            } else if (b1) {
                i19 *= (int)Test.dFld;
                l += -5735;
            }
        }
        vMeth_check_sum += i2 + i3 + l + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-41301, i1=-64, i20=8, i21=147, i22=-179;
        float f3=0.826F;
        boolean b2=true;

        for (i = 395; 14 < i; i--) {
            Test.instanceCount = (-(i1++));
            i1 ^= (int)((i1--) % (Test.instanceCount | 1));
            i1 -= (sArrFld[i + 1]++);
            i1 += (i + i1);
            vMeth(i1, -138, Test.instanceCount);
        }
        i1 >>>= (int)Test.instanceCount;
        i20 = 1;
        do {
            f3 -= Test.instanceCount;
            Test.iArrFld[i20 + 1] = -73;
            Test.instanceCount = 12;
            Test.lArrFld[i20] = i1;
            i1 = 25;
            if (b2) {
                f3 *= i1;
                fArrFld[i20 + 1] += i20;
                Test.byFld += (byte)(-14L + (i20 * i20));
            } else {
                i1 = 2902;
                Test.instanceCount += (((i20 * i20) + i) - i1);
                for (i21 = 1; i21 < 101; ++i21) {
                    Test.instanceCount *= Test.instanceCount;
                    b2 = b2;
                    i1 += (int)Test.instanceCount;
                    Test.iArrFld[i21 + 1] += (int)1.337F;
                    i1 = (int)Test.dFld;
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount += i;
                    Test.instanceCount = i;
                }
                i1 -= (int)f3;
            }
        } while (++i20 < 250);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
