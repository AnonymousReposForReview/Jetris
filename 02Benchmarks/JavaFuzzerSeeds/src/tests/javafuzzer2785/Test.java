package tests.javafuzzer2785;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:03:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12795L;
    public static byte byFld=17;
    public static int iFld=-165;
    public static short sFld=7893;
    public static boolean bFld=false;
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 65441L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2, int i3) {

        double d=16.6102;
        short s1=-11955, sArr[]=new short[N];
        long l1=2037158720955957951L;
        int i4=233, i5=-31938, i6=-28824, iArr[]=new int[N];

        FuzzerUtils.init(sArr, (short)2231);
        FuzzerUtils.init(iArr, 188);

        i3 >>>= i1;
        i2 *= (int)Test.instanceCount;
        sArr[(i2 >>> 1) % N] &= (short)Test.instanceCount;
        d += s1;
        for (l1 = 7; l1 < 186; l1++) {
            d -= i4;
        }
        i2 -= i3;
        iArr[(i4 >>> 1) % N] *= (int)l1;
        iArr[(-7 >>> 1) % N] = i4;
        Test.lArrFld[(11 >>> 1) % N][(i1 >>> 1) % N] = -74L;
        for (i5 = 8; i5 < 220; ++i5) {
            i6 |= i3;
            i4 += i5;
        }
        s1 += (short)i5;
        iArr[(i5 >>> 1) % N] >>>= (int)Test.instanceCount;
        vMeth2_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d) + s1 + l1 + i4 + i5 + i6 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, short s, float f1) {

        int i7=-183, i8=35361, i9=2, i10=13, i11=-5, i12=6, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -15568);

        vMeth2(-138, i, -9);
        Test.instanceCount += s;
        i += i;
        for (i7 = 2; 159 > i7; i7++) {
            double d1=71.105465;
            i += (((i7 * f1) + Test.instanceCount) - i8);
            d1 -= f1;
            d1 -= Test.byFld;
        }
        i8 -= (int)Test.instanceCount;
        i <<= i7;
        for (i9 = 4; i9 < 217; i9++) {
            Test.byFld <<= (byte)-51747;
            Test.byFld = (byte)i9;
            for (i11 = 1; i11 < 8; i11++) {
                i += (((i11 * Test.iFld) + i8) - Test.byFld);
                try {
                    iArr1[i9 + 1] = (i12 % iArr1[i9]);
                    i12 = (90 % i);
                    i12 = (iArr1[i9 + 1] / iArr1[i9 - 1]);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i + s + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, float f) {

        int i13=-97, i14=7, i15=15607, i16=3026, i17=-57184, iArr2[]=new int[N];
        double d2=45.110325;

        FuzzerUtils.init(iArr2, 199);

        vMeth1(Test.iFld, Test.sFld, f);
        Test.iFld = Test.iFld;
        f *= Test.iFld;
        Test.bFld = Test.bFld;
        for (i13 = 1; i13 < 222; ++i13) {
            for (i15 = 7; i15 > 1; i15--) {
                d2 += i15;
                iArr2[i15 - 1] = 65;
                i17 = 1;
                do {
                    i14 >>= (int)8L;
                    l += (i17 * Test.instanceCount);
                    f *= i17;
                    Test.iFld += i16;
                    iArr2 = iArr2;
                    if (Test.bFld) continue;
                } while (++i17 < 2);
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d2) + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f2=0.308F, fArr[]=new float[N];
        int i18=-11081, i19=11, i20=-166, i21=51859, i22=-177, i23=-4, i24=170, i25=-237, i26=-58719, iArr3[]=new
            int[N];
        double d3=2.129765;

        FuzzerUtils.init(fArr, -24.329F);
        FuzzerUtils.init(iArr3, -5);

        vMeth(Test.instanceCount, f2);
        for (i18 = 10; i18 < 333; ++i18) {
            Test.bFld = Test.bFld;
            fArr[i18] += Test.instanceCount;
            i19 = i19;
            i19 += (i18 * Test.instanceCount);
            Test.iFld += (((i18 * Test.instanceCount) + f2) - i18);
            Test.lArrFld[i18 + 1] = Test.lArrFld[i18 + 1];
            i19 /= (int)85.43F;
            i19 -= i19;
        }
        i20 = 1;
        while (++i20 < 355) {
            Test.iFld += (((i20 * Test.instanceCount) + i19) - f2);
            if (Test.bFld) continue;
            i19 -= (int)1.181F;
            f2 += (i20 * Test.iFld);
            i19 += i18;
            Test.sFld = (short)Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
        }
        for (i21 = 11; i21 < 185; i21++) {
            if (Test.bFld) {
                for (i23 = i21; i23 < 144; i23++) {
                    for (i25 = i23; i25 < 1; i25++) {
                        Test.instanceCount = Test.instanceCount;
                        i19 = (int)d3;
                        Test.instanceCount = i19;
                        iArr3[i21 + 1] *= 7;
                        Test.instanceCount += i23;
                        i19 -= i23;
                        Test.instanceCount += (((i25 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                        if (Test.bFld) continue;
                    }
                }
            } else {
                i19 += (-60454 + (i21 * i21));
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
