package tests.javafuzzer2051;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:02:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=635713651L;
    public static int iFld=28871;
    public boolean bFld=true;
    public static short sFld=22769;
    public int iFld1=-96;
    public static float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.411F);
        FuzzerUtils.init(Test.byArrFld, (byte)65);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f=-2.0F;
        int i5=10, i6=64581, i7=-32115, i8=-16347, iArr[]=new int[N];
        long l1=1326925136L, lArr[][]=new long[N][N];
        byte by=50;

        FuzzerUtils.init(lArr, -6453528169098858498L);
        FuzzerUtils.init(iArr, 30);

        lArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (long)f;
        for (i5 = 4; 299 > i5; i5++) {
            l1 = 1;
            while (++l1 < 6) {
                iArr[(int)(l1 - 1)] ^= i5;
                Test.iFld += i6;
                iArr[(int)(l1)] = Test.iFld;
                i6 ^= by;
                switch (((i5 % 1) * 5) + 72) {
                case 75:
                    try {
                        Test.iFld = (i5 / Test.iFld);
                        Test.iFld = (Test.iFld % i5);
                        Test.iFld = (i6 / i5);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    for (i7 = 1; i7 < 1; i7 += 2) {
                        boolean b=true;
                        if (b) break;
                        Test.iFld = i8;
                        Test.instanceCount = i5;
                        f *= i6;
                        Test.instanceCount >>= 53674;
                    }
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i5 + i6 + l1 + by + i7 + i8 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i1) {

        int i2=16050, i3=13879, i4=-236, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 63);
        FuzzerUtils.init(lArr1, 351142439L);

        Test.iFld <<= (int)(-((Test.iFld - Test.instanceCount) + (3 / ((-96 - (Test.iFld * Test.iFld)) | 1))));
        for (i2 = 5; i2 < 385; i2++) {
            i4 = 1;
            do {
                Test.fArrFld = (Test.fArrFld = (Test.fArrFld = Test.fArrFld));
                switch ((i2 % 1) + 18) {
                case 18:
                    Test.fArrFld = (Test.fArrFld = (Test.fArrFld = (Test.fArrFld = Test.fArrFld)));
                    vMeth2();
                    break;
                default:
                    i1 <<= (int)l;
                    Test.instanceCount <<= Test.instanceCount;
                    iArr1 = iArr1;
                }
                if (i3 != 0) {
                    vMeth1_check_sum += l + i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr1) +
                        FuzzerUtils.checkSum(lArr1);
                    return;
                }
                lArr1[i4] = -41155;
            } while (++i4 < 4);
            l += i2;
            i1 += i1;
        }
        iArr1[(i2 >>> 1) % N] = i2;
        vMeth1_check_sum += l + i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d1) {

        int i9=-12, i10=4, i11=-20878, i12=-3, i13=13, i14=-21, iArr2[]=new int[N];
        short s=22102;
        float f1=-1.351F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 129);
        FuzzerUtils.init(lArr2, 1527708852L);

        Test.iFld |= Test.iFld;
        vMeth1(Test.instanceCount, Test.iFld);
        Test.iFld ^= Test.iFld;
        Test.byArrFld[(143 >>> 1) % N] -= (byte)Test.iFld;
        for (i9 = 18; 296 > i9; ++i9) {
            for (i11 = 1; i11 < 6; i11++) {
                boolean b1=true;
                iArr2[i11 - 1] <<= i11;
                for (i13 = 1; i13 < 2; i13++) {
                    i12 -= s;
                    Test.iFld += (((i13 * i12) + i11) - s);
                    if (i13 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 + i14 + s +
                            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr2);
                        return;
                    }
                    i14 += (int)Test.instanceCount;
                }
                f1 = i10;
                b1 = b1;
                lArr2[i11 - 1] *= (long)f1;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 + i14 + s +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        double d=2.60607, d2=-1.34595;
        int i=-60752, i15=-108, i16=0, i17=-8, i18=11, i19=14, i20=-1, i21=-56776, i22=11, iArr3[][]=new int[N][N];
        float f2=-37.170F;
        byte by1=-90;
        long lArr3[]=new long[N];

        FuzzerUtils.init(iArr3, -52971);
        FuzzerUtils.init(lArr3, 8383018124070609528L);

        for (d = 9; d < 336; d++) {
            i += (int)d;
            vMeth(d);
        }
        for (i15 = 244; i15 > 3; i15--) {
            f2 = Test.instanceCount;
        }
        for (d2 = 343; d2 > 7; d2--) {
            Test.instanceCount |= i15;
            if (bFld) {
                i17 = i;
                i18 = 1;
                do {
                    i16 = (int)d2;
                } while (++i18 < 75);
                for (i19 = 75; d2 < i19; i19 -= 2) {
                    if (bFld) continue;
                    iArr3[i19][(int)(d2 - 1)] *= by1;
                    f2 = 8;
                }
            } else if (bFld) {
                i16 = i18;
                if (bFld) {
                    Test.iFld |= i15;
                    Test.instanceCount += (long)((long)d2 | Test.sFld);
                    if (bFld) break;
                }
                i21 = 75;
                do {
                    lArr3[(int)(d2)] = Test.instanceCount;
                    lArr3[i21 - 1] = Test.instanceCount;
                    i17 += (int)Test.instanceCount;
                    f2 = Test.instanceCount;
                    i20 = i19;
                    if (bFld) {
                        iFld1 *= i22;
                        i16 = Test.sFld;
                    }
                    i17 = (int)Test.instanceCount;
                } while (--i21 > 0);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
