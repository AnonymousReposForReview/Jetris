package tests.javafuzzer3283;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:38:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=125L;
    public static double dFld=0.88934;
    public static short sFld=-27502;
    public static double dFld1=0.73512;
    public static byte byFld=13;
    public float fFld=16.487F;
    public boolean bFld=true;
    public long lFld=8337164510381222970L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4181919590672835314L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i6, int i7) {

        float f=-5.266F, f1=-120.913F;
        int i8=-22871, i9=-60053, i10=-32, i11=-6, i12=-9, iArr[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -37.63824);
        FuzzerUtils.init(iArr, 97);
        FuzzerUtils.init(lArr, 3677949057930077264L);

        f = 1;
        while (++f < 137) {
            for (i8 = 1; 11 > i8; i8++) {
                Test.instanceCount >>= i6;
                dArr[(int)(f + 1)] += i7;
                iArr[i8] = i7;
                lArr[i8] *= i6;
                for (i10 = 2; i10 > 1; i10 -= 3) {
                    i7 = (int)-4.779F;
                }
                i6 = Test.sFld;
                i11 = i12;
            }
            f1 += (f * Test.instanceCount);
            f1 -= 6L;
            i12 = -193;
            i7 = -2;
            Test.instanceCount += (3323588826L + (f * f));
        }
        long meth_res = l + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3) {

        int i4=0, i5=-69, i13=244, i14=-33, i15=449, i16=24, iArr1[]=new int[N];
        short s=-541;
        byte by=120;
        double d=73.106913;

        FuzzerUtils.init(iArr1, -49944);

        for (i4 = 15; i4 < 247; ++i4) {
            Test.dFld *= (((i4 - i5) - (i5 = s)) - (iMeth(Test.instanceCount, i4, i3) - Test.instanceCount));
            iArr1[i4] %= (int)(i5 | 1);
        }
        Test.instanceCount <<= i4;
        i3 = i3;
        Test.lArrFld[(160 >>> 1) % N] = 141;
        i3 = by;
        for (i13 = 6; i13 < 258; i13++) {
            Test.dFld1 -= d;
            Test.instanceCount += i13;
            iArr1 = iArr1;
            for (i15 = 6; i15 > 1; --i15) {
                if (i15 != 0) {
                    vMeth1_check_sum += i3 + i4 + i5 + s + by + i13 + i14 + Double.doubleToLongBits(d) + i15 + i16 +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
                i5 <<= (int)9L;
                by = (byte)6;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + s + by + i13 + i14 + Double.doubleToLongBits(d) + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i=11, i1=-122, i2=-43, i17=196, i18=7, i19=-163, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -220);

        i = (((++i) - i) + i);
        for (i1 = 10; i1 < 296; i1++) {
            vMeth1(i1);
            i >>= (int)Test.instanceCount;
            Test.byFld /= (byte)((long)(Test.dFld) | 1);
            i17 = 1;
            do {
                for (i18 = 1; i18 < 1; i18++) {
                    i19 = i19;
                    Test.dFld *= i17;
                    switch ((i17 % 1) + 121) {
                    case 121:
                        i2 = i18;
                        break;
                    default:
                        i += (i18 * i18);
                        iArr2[i18] = Test.sFld;
                        i -= (int)Test.instanceCount;
                    }
                }
                Test.instanceCount = (long)Test.dFld1;
            } while (++i17 < 6);
        }
        vMeth_check_sum += i + i1 + i2 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i20=-184, i22=55499, i23=6, i24=-3, i25=4, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -3095);

        vMeth();
        i20 = 1;
        do {
            int i21=-46348;
            i21 += i20;
            i21 -= i20;
            i21 -= Test.sFld;
            i21 >>= i20;
            switch ((i20 % 2) + 89) {
            case 89:
                Test.instanceCount += (((i20 * fFld) + Test.instanceCount) - i20);
                switch (((i20 % 9) * 5) + 110) {
                case 125:
                case 149:
                case 127:
                    i21 *= (int)Test.instanceCount;
                    for (i22 = 8; 182 > i22; ++i22) {
                        switch (((i20 % 9) * 5) + 46) {
                        case 85:
                            Test.instanceCount >>= i23;
                            i21 >>= i22;
                            break;
                        case 47:
                            i21 += i22;
                            break;
                        case 90:
                        case 82:
                            bFld = bFld;
                            break;
                        case 81:
                            Test.instanceCount |= i22;
                            i23 += (i22 - i23);
                            for (i24 = 2; i24 > 1; --i24) {
                                i25 = (int)Test.instanceCount;
                                fFld = i25;
                                i21 = (int)fFld;
                                i23 = (int)Test.instanceCount;
                                try {
                                    i25 = (i22 / 9988);
                                    i25 = (i20 % 23763);
                                    i21 = (i22 % i20);
                                } catch (ArithmeticException a_e) {}
                            }
                            break;
                        case 57:
                            i21 = 13;
                            if (bFld) {
                                Test.instanceCount -= (long)fFld;
                            }
                        case 80:
                            Test.instanceCount %= (Test.instanceCount | 1);
                            Test.byFld *= (byte)Test.instanceCount;
                            i23 <<= i23;
                            break;
                        case 74:
                            i25 -= i20;
                            break;
                        case 61:
                            i21 += (int)lFld;
                            break;
                        default:
                            Test.instanceCount >>>= i24;
                        }
                    }
                case 133:
                    iArr3[(i21 >>> 1) % N] = i25;
                    break;
                case 154:
                    i23 += (((i20 * i22) + i25) - i23);
                    break;
                case 122:
                    i23 <<= -73;
                    break;
                case 140:
                    Test.instanceCount -= (long)fFld;
                    break;
                case 119:
                    i21 = -9719;
                case 113:
                    fFld = i23;
                    break;
                }
            case 90:
                Test.instanceCount = 5;
                break;
            }
        } while (++i20 < 138);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
