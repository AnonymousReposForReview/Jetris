package tests.javafuzzer975;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:16:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public double dFld=0.13097;
    public boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.344F);
        FuzzerUtils.init(Test.lArrFld, -108675070L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -300555868039185311L);

        i += (int)(lArr[(i >>> 1) % N]--);
        vSmallMeth_check_sum += i + i1 + i2 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i14, double d) {

        int i15=76, i16=-170, i17=3298, i18=-7, i19=-19230;
        float f1=-1.50F;

        vSmallMeth(i14, -244, i14);
        i15 = 1;
        do {
            i14 <<= (int)15439L;
            Test.lArrFld[i15 + 1] <<= Test.instanceCount;
            Test.instanceCount <<= Test.instanceCount;
            for (i16 = 10; i16 > 1; i16--) {
                f1 = -4549774598660511748L;
                i17 += i16;
                i17 <<= i14;
                for (i18 = 2; i16 < i18; i18--) {
                    Test.instanceCount >>= Test.instanceCount;
                    i14 *= 14;
                    i17 -= (int)Test.instanceCount;
                    i14 >>= -25432;
                    Test.instanceCount -= i15;
                }
            }
        } while (++i15 < 153);
        vMeth_check_sum += i14 + Double.doubleToLongBits(d) + i15 + i16 + i17 + Float.floatToIntBits(f1) + i18 + i19;
    }

    public static int iMeth(int i11, int i12, int i13) {

        double d1=0.42857;
        int i20=-6, i21=-11, i22=147, i23=-10, i24=238, i25=-8;
        float f2=-2.40F;
        boolean b=false;

        vMeth(i11, d1);
        i20 = 1;
        while (++i20 < 128) {
            i12 = (int)Test.instanceCount;
            for (i21 = 12; i21 > 1; i21 -= 3) {
                Test.instanceCount = Test.instanceCount;
                if (true) break;
                i12 >>= -132;
                i22 += (32571 + (i21 * i21));
                i22 <<= i13;
            }
            i13 += (i20 ^ Test.instanceCount);
            for (f2 = i20; f2 < 12; f2 += 3) {
                b = b;
                for (i24 = 1; i24 < 1; ++i24) {
                    d1 = i11;
                    i22 = (int)8910912552120013670L;
                }
            }
        }
        long meth_res = i11 + i12 + i13 + Double.doubleToLongBits(d1) + i20 + i21 + i22 + Float.floatToIntBits(f2) +
            i23 + (b ? 1 : 0) + i24 + i25;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-17430;
        int i3=2129, i4=6, i5=13, i6=-63313, i7=205, i8=-117, i9=-44632, i10=-42208, i26=-51680, i27=-67, i28=-7,
            i29=-12;
        float f=0.858F;
        byte by=34;

        for (int smallinvoc=0; smallinvoc<551; smallinvoc++) vSmallMeth((int)(((-(s--)) * (i3++)) + ((8417 + (i3 >>
            218)) * (8 - Math.abs(f)))), (int)(((i3--) + 7954) * Math.abs(--f)), Integer.reverseBytes(i3));
        by -= (byte)(-i3);
        for (i4 = 3; i4 < 199; ++i4) {
            i3 = -6;
            Test.fArrFld[i4] *= (by--);
        }
        i6 = 1;
        while (++i6 < 341) {
            switch ((i6 % 4) + 4) {
            case 4:
                for (i7 = 4; 74 > i7; ++i7) {
                    vSmallMeth(i4, (int)(Test.instanceCount + ((++i3) - (iArrFld[i6]++))), (int)(Test.instanceCount +
                        (Math.max(Test.instanceCount, Test.instanceCount) + (Test.instanceCount + dFld))));
                    s = (short)Math.abs((-18328 + (-41453L - (i8 - i7))) + by);
                    for (i9 = i6; i9 < 2; i9++) {
                        i8 = (int)(((i9 - i5) - Test.instanceCount) + ((i10++) + -1475625248480596587L));
                    }
                    i10 = (int)(((i9 - Test.instanceCount) / (iMeth(i7, i9, i7) | 1)) - 48.235F);
                }
                break;
            case 5:
                Test.instanceCount &= i9;
                if (bFld) {
                    by = (byte)i9;
                    i3 += (16 + (i6 * i6));
                    i5 = (int)f;
                    for (i26 = 1; i26 < 74; ++i26) {
                        for (i28 = 1; i28 < 2; i28++) {
                            if (bFld) continue;
                            switch ((((i10 >>> 1) % 6) * 5) + 124) {
                            case 141:
                                i29 *= (int)Test.instanceCount;
                                break;
                            case 153:
                                i27 -= -54;
                                i3 |= s;
                                Test.instanceCount = (long)-1.64029;
                                f = i3;
                                break;
                            case 132:
                                i3 -= (int)-4760761904423033843L;
                                f = Test.instanceCount;
                                i10 += (int)(56.577F + (i28 * i28));
                            case 151:
                                s += (short)(i28 ^ (long)f);
                                break;
                            case 145:
                                i8 -= (int)f;
                                break;
                            case 152:
                                Test.instanceCount += (i28 + i7);
                                break;
                            }
                        }
                    }
                } else {
                    f = f;
                }
                break;
            case 6:
                Test.instanceCount ^= Test.instanceCount;
                break;
            case 7:
                i5 = i5;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
