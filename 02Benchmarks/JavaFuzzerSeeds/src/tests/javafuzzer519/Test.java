package tests.javafuzzer519;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:04:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3663001301L;
    public static double dFld=1.115539;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 53.31869);
        FuzzerUtils.init(Test.iArrFld, -21197);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=36, i5=22026, i6=26506, i7=-14, i8=22, i9=54, i10=-215, i11=188;
        byte by1=-91;
        float f=75.609F;

        for (i4 = 185; 10 < i4; --i4) {
            for (i6 = 1; i6 < 9; ++i6) {
                i5 = i7;
                Test.instanceCount >>= -82;
                for (i8 = 1; 2 > i8; i8++) {
                    Test.dFld *= i4;
                    by1 = (byte)i7;
                    i5 += (int)f;
                }
                for (i10 = 1; i10 < 2; ++i10) {
                    i7 = i11;
                    if (i6 != 0) {
                        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + by1 + Float.floatToIntBits(f) + i10 + i11;
                        return;
                    }
                    i9 *= 6063;
                    i7 += (int)Test.instanceCount;
                    i9 |= i10;
                }
            }
            Test.iArrFld = Test.iArrFld;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + by1 + Float.floatToIntBits(f) + i10 + i11;
    }

    public static void vMeth() {

        int i12=40393;
        short s=10742;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5012646428567713433L);

        Test.instanceCount -= (--lArr[(52949 >>> 1) % N]);
        vMeth1();
        i12 >>= s;
        vMeth_check_sum += i12 + s + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(double d, int i2) {

        int i3=-11, i13=6, i14=52982, i15=-10639, i16=27744;
        byte by=54;
        short s1=22032;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -50.278F);

        i3 = 1;
        do {
            i2 += (int)(-Test.dArrFld[i3]);
            by >>>= (byte)(i2--);
            vMeth();
            for (i13 = 1; 7 > i13; i13++) {
                i14 -= by;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.iArrFld[i3][i3 + 1] -= 83;
                    i2 = (int)2.359F;
                    s1 = (short)i15;
                    i14 <<= i13;
                    Test.instanceCount += i16;
                    fArr[i3] *= -126.201F;
                    i14 = i13;
                }
                i16 = by;
            }
        } while (++i3 < 230);
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + by + i13 + i14 + i15 + i16 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-3, i17=-1, i18=9, i19=-1560, i20=12, i21=-61, i22=23560;
        long l=-232L, lArr1[]=new long[N];
        float f1=54.1012F;
        byte by2=-94;

        FuzzerUtils.init(lArr1, 8372538702794932207L);

        i = 1;
        do {
            i1 += (i + Test.instanceCount);
            iMeth(Test.dFld, -13265);
            for (i17 = i; i17 < 100; i17++) {
                lArr1[i - 1] = Test.instanceCount;
                i18 = (int)Test.instanceCount;
                i18 += i17;
                switch ((i17 % 4) + 5) {
                case 5:
                    for (i19 = i; i19 < 1; ++i19) {
                        boolean b=false;
                        if (b) continue;
                        Test.instanceCount += i;
                        i20 += (i19 * i19);
                    }
                    i1 += 8;
                    i20 += -11920;
                    try {
                        i20 = (i18 / -102);
                        i20 = (i18 / -461311199);
                        i18 = (i % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 6:
                    for (l = 1; l < 1; l++) {
                        lArr1[i + 1] = (long)Test.dFld;
                    }
                    Test.iArrFld[i17] = Test.iArrFld[i17 + 1];
                    i18 = i;
                    break;
                case 7:
                    i18 >>= i21;
                    switch (((i17 >>> 1) % 1) + 101) {
                    case 101:
                        i1 = i1;
                        f1 += (i17 - i19);
                        i22 = 1;
                        do {
                            f1 *= i1;
                        } while (++i22 < 1);
                        break;
                    default:
                        fArrFld[i + 1] += Test.instanceCount;
                        i18 += (int)-12L;
                        Test.iArrFld[i - 1][i - 1] = 28238;
                    }
                    Test.iArrFld[i17 - 1][i] >>= i21;
                    i18 *= by2;
                    break;
                case 8:
                    Test.instanceCount += (((i17 * i22) + i19) - f1);
                    break;
                default:
                    lArr1[i17] = i17;
                }
            }
        } while (++i < 251);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
