package tests.javafuzzer2845;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:26:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-43L;
    public static volatile short sFld=-20968;
    public static volatile boolean bFld=false;
    public static byte byFld=-31;
    public static volatile int iFld=37059;
    public static volatile int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7515);
        FuzzerUtils.init(Test.sArrFld, (short)19316);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i4=14, i5=9;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.110F);

        Test.instanceCount <<= Test.sFld;
        for (i4 = 15; 365 > i4; i4++) {
            i5 -= i5;
        }
        fArr[(37150 >>> 1) % N] -= 1.32F;
        vMeth1_check_sum += l + i4 + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i3) {

        int i6=7954, i7=-46596, i9=12, i10=-15, i11=57612, i12=-178;
        double d1=1.23112;
        float f1=-2.1006F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.743F);

        for (short s : Test.sArrFld) {
            vMeth1(Test.instanceCount);
        }
        for (i6 = 10; i6 < 221; i6++) {
            if (Test.bFld) {
                i3 /= (int)(i7 | 1);
            } else if (Test.bFld) {
                fArr1[i6] = (float)d1;
                i3 += i7;
                Test.instanceCount += (((i6 * Test.instanceCount) + i6) - i3);
                for (i9 = 1; i9 < 8; i9++) {
                    Test.instanceCount *= (long)f1;
                    for (i11 = 2; i11 > 1; i11--) {
                        if (false) continue;
                        f1 += Test.instanceCount;
                        f1 -= Test.instanceCount;
                        i10 = (int)Test.instanceCount;
                    }
                }
            } else {
                i10 += (((i6 * i3) + Test.sFld) - i10);
            }
        }
        long meth_res = i3 + i6 + i7 + Double.doubleToLongBits(d1) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, double d) {

        int i=3, i1=-13, i2=-31368, i13=12, i14=-2, i15=-13, i16=-151;

        i = (int)(f--);
        for (i1 = 2; i1 < 213; ++i1) {
            Test.sFld = (short)(Short.reverseBytes((short)(i1 - f)) - (Test.iArrFld[i1 - 1] >>= i));
            Test.iArrFld[i1] |= (int)lMeth(i1);
            switch ((i1 % 5) + 103) {
            case 103:
                i2 += Test.byFld;
                i13 = 8;
                while (--i13 > 0) {
                    i += i;
                    i2 += (((i13 * i) + f) - i1);
                    i14 = 1;
                    while (++i14 < 1) {
                        f += (i14 - i14);
                        i2 += 4;
                        Test.instanceCount += (-7570650990028394195L + (i14 * i14));
                        i15 += i14;
                        Test.instanceCount = Test.byFld;
                    }
                }
                break;
            case 104:
                i2 += i15;
                break;
            case 105:
                Test.sArrFld[i1 - 1] <<= Test.sFld;
            case 106:
                i16 = i1;
            case 107:
                try {
                    Test.iArrFld[i1 - 1] = (i / -54539);
                    Test.iArrFld[i1] = (-1976943021 % Test.iArrFld[i1]);
                    i = (29473 / i2);
                } catch (ArithmeticException a_e) {}
            default:
                i <<= i;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i + i1 + i2 + i13 + i14 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        float f2=2.817F;
        int i17=13, i18=132, i19=7, i20=-46150, i21=-843;
        long l1=1135448840673322352L;
        double d2=-42.48956;

        Test.instanceCount <<= (Test.instanceCount--);
        vMeth(f2, 2.35920);
        Test.iFld >>= (int)47L;
        for (i17 = 6; i17 < 228; ++i17) {
            i18 >>= i18;
            for (l1 = 1; l1 < 113; l1 += 3) {
                Test.instanceCount >>= i19;
                f2 -= i19;
                i20 = 4;
                do {
                    Test.instanceCount += i20;
                    Test.iArrFld = Test.iArrFld;
                    f2 *= (float)d2;
                    i19 *= Test.iFld;
                    i18 *= i19;
                    Test.instanceCount %= (i19 | 1);
                    i18 = (int)5392939144978114664L;
                    i19 = i19;
                    Test.sFld = (short)i19;
                    if (Test.bFld) break;
                } while (--i20 > 0);
                switch ((int)((l1 % 2) + 1)) {
                case 1:
                    Test.sFld /= (short)(i21 | 1);
                    i18 += (int)d2;
                    break;
                case 2:
                    i19 = i21;
                    i19 += (int)(((l1 * l1) + i17) - i21);
                    break;
                default:
                    Test.iArrFld[(int)(l1)] = i21;
                    i18 *= i19;
                    Test.instanceCount += Test.iFld;
                }
                f2 += (14277 + (l1 * l1));
            }
            d2 += i19;
            d2 *= l1;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
