package tests.javafuzzer3084;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:33:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7022L;
    public static int iFld=-10914;
    public static float fFld=-1.457F;
    public static volatile double dFld=1.113516;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -56092L);
        FuzzerUtils.init(Test.fArrFld, 26.152F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, int i6) {

        short s=-398;

        s ^= (short)Test.iFld;
        vMeth_check_sum += i5 + i6 + s;
    }

    public static int iMeth1() {

        int i7=-35210, i8=6, i9=7650, i10=13, i11=-24644, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 143L);
        FuzzerUtils.init(iArr1, 2);

        lArr[(Test.iFld >>> 1) % N] = (long)((iArr1[(-6 >>> 1) % N] + (24262 + (12 - (Test.iFld - Test.iFld)))) +
            Test.fFld);
        vMeth(Test.iFld, 76);
        Test.iFld = (int)Test.instanceCount;
        i7 = 1;
        do {
            for (i8 = 1; i8 < 4; ++i8) {
                Test.iFld *= (int)760788383L;
                i9 += i8;
                Test.iFld += i8;
                for (i10 = 1; i10 < 2; ++i10) {
                    iArr1[i10 + 1] -= (int)Test.instanceCount;
                    iArr1[i10 + 1] = (int)Test.dFld;
                    i11 = i9;
                    i11 += (int)3443919398078943290L;
                    Test.instanceCount >>= i8;
                }
                i11 += i8;
            }
        } while (++i7 < 398);
        long meth_res = i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i2, float f) {

        double d=-48.64813;
        int i4=-8, i12=210, i13=247, i14=11, iArr[]=new int[N];
        long l1=4L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(fArr, -4.9F);

        i2 += (int)Math.min(Test.instanceCount, (long)((d - l) - (3L - (i2 <<= (int)-23L))));
        for (int i3 : iArr) {
            iArr[(i3 >>> 1) % N] >>= (int)((f + (i2 -= i3)) - ((174 - (i3 - i2)) * (i3 - i2)));
            i2 >>>= (iArr[(i2 >>> 1) % N] = -161);
            i4 = 1;
            while (++i4 < 4) {
                fArr[i4 - 1] = (-iMeth1());
                i12 = 1;
                while (--i12 > 0) {
                    l += (i12 * i4);
                    Test.lArrFld[i12] = i2;
                    Test.instanceCount += (i12 + Test.iFld);
                }
                Test.instanceCount = 3;
                l1 -= l1;
                for (i13 = i4; 1 > i13; i13++) {
                    i3 |= i14;
                }
                Test.instanceCount += i4;
            }
        }
        long meth_res = l + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + i12 + l1 + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4914, i1=107, i15=121, i16=-14, i17=-8821, i18=-79, i19=-21480, i20=-7, i21=-1, i22=-65154, iArr2[]=new
            int[N];
        short s1=13835;
        byte by=-56;
        boolean b=false;

        FuzzerUtils.init(iArr2, -14029);

        for (i = 7; 384 > i; ++i) {
            i1 = Math.min(++i1, iMeth(-182L, Test.iFld, Test.fFld));
            Test.iFld += (i * i1);
        }
        i1 <<= Test.iFld;
        Test.instanceCount = (long)Test.fFld;
        Test.instanceCount = 6;
        for (i15 = 3; i15 < 252; i15++) {
            s1 &= (short)i15;
            for (i17 = 3; i17 < 101; ++i17) {
                Test.fArrFld[i15 + 1][i17 - 1] = by;
                switch ((i17 % 7) + 41) {
                case 41:
                    for (i19 = 1; i19 < 2; i19++) {
                        Test.fFld += ((long)i19 | (long)i18);
                        Test.instanceCount = i20;
                        s1 <<= (short)-9642;
                        i16 += i19;
                    }
                    i21 = 1;
                    while (++i21 < 2) {
                        Test.lArrFld[i15 - 1] = Test.iFld;
                        i1 = i20;
                        i18 -= i;
                        iArr2[i15] = Test.iFld;
                        Test.lArrFld[i17 - 1] *= Test.iFld;
                        Test.iFld += i19;
                    }
                    break;
                case 42:
                    Test.instanceCount = i21;
                    Test.instanceCount <<= Test.instanceCount;
                    i20 >>= i20;
                    break;
                case 43:
                case 44:
                    switch (((i15 % 9) * 5) + 76) {
                    case 116:
                        Test.fFld = i18;
                        iArr2[i15 + 1] += i15;
                        Test.lArrFld[i15 - 1] -= i15;
                        break;
                    case 83:
                        Test.iFld *= (int)Test.fFld;
                    case 84:
                        b = b;
                        break;
                    case 110:
                        try {
                            i18 = (i20 % i21);
                            Test.iFld = (-209 % i21);
                            i16 = (iArr2[i17 - 1] / -25);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 94:
                        Test.iFld *= 202;
                    case 106:
                        s1 += (short)i17;
                    case 120:
                        i22 += (int)Test.instanceCount;
                        break;
                    case 115:
                    case 77:
                        i1 = -95;
                        break;
                    default:
                        Test.lArrFld[i15] = s1;
                    }
                    break;
                case 45:
                    if (b) break;
                case 46:
                    Test.iFld = i15;
                    break;
                case 47:
                    iArr2[i17] <<= (int)-2076L;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
