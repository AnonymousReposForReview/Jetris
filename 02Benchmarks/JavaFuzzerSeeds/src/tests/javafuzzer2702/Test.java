package tests.javafuzzer2702;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static byte byFld=48;
    public static volatile boolean bFld=true;
    public static float fFld=-101.969F;
    public int iFld=35951;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, float f, int i4) {

        int i5=-9, i6=-106, i8=13, i9=245, i10=-59478, i11=-792, i12=59913, i13=7, iArr1[]=new int[N];
        double d=-2.60403;
        short s=-19213;

        FuzzerUtils.init(iArr1, 22188);

        for (i5 = 11; i5 < 192; ++i5) {
            for (i8 = i5; i8 < 9; i8++) {
                Test.instanceCount = 174;
            }
            for (i10 = 1; i10 < 9; i10++) {
                for (i12 = 1; 2 > i12; ++i12) {
                    i3 += (((i12 * i8) + Test.instanceCount) - f);
                    Test.instanceCount += (i12 * i12);
                    i9 += (((i12 * i12) + i4) - Test.instanceCount);
                    iArr1[i12] = i13;
                    switch ((i10 % 2) + 94) {
                    case 94:
                        switch ((i5 % 8) + 27) {
                        case 27:
                            Test.byFld = (byte)-2.364F;
                        case 28:
                            i6 += (((i12 * Test.instanceCount) + f) - f);
                            i11 = (int)Test.instanceCount;
                            break;
                        case 29:
                            i11 >>= i11;
                            break;
                        case 30:
                        case 31:
                            i4 = (int)d;
                        case 32:
                            i3 = -30665;
                            break;
                        case 33:
                            if (Test.bFld) continue;
                        case 34:
                            i11 = (int)d;
                            break;
                        }
                        break;
                    case 95:
                        f = Test.instanceCount;
                        break;
                    default:
                        s |= (short)i5;
                    }
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i8 + i9 + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2, long l, long l1) {

        float f1=-46.52F;
        int i14=-205, i15=-14, i16=-64769, i17=-12, i18=-59, i19=158, iArr2[]=new int[N];
        long l2=172L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-23129);
        FuzzerUtils.init(iArr2, 55);

        vMeth1(i2, f1, i2);
        sArr[(i2 >>> 1) % N] += (short)l;
        i2 <<= 24544;
        Test.bFld = true;
        for (i14 = 6; i14 < 167; i14++) {
            for (i16 = 1; i16 < 10; ++i16) {
                l1 *= i15;
                i17 -= 44020;
                switch ((i14 % 7) + 109) {
                case 109:
                    for (i18 = i16; i18 < 2; ++i18) {
                        switch ((((i2 >>> 1) % 2) * 5) + 98) {
                        case 104:
                            i17 += (i18 * i18);
                            break;
                        case 103:
                            l2 = Test.instanceCount;
                            iArr2[i18 + 1] *= -17117;
                            break;
                        default:
                            iArr2[i14 + 1] -= i18;
                        }
                    }
                case 110:
                    i19 += i14;
                    break;
                case 111:
                    iArr2 = iArr2;
                    break;
                case 112:
                case 113:
                    if (Test.bFld) break;
                    break;
                case 114:
                    i2 <<= i18;
                    break;
                case 115:
                    i19 = i15;
                    break;
                default:
                    i19 = i18;
                }
            }
        }
        long meth_res = i2 + l + l1 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + i19 + l2 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i20=-53926, i21=16823, i22=-214, i23=7, i24=-3, i25=-48171, i26=-221, iArr[][]=new int[N][N];
        double d1=-2.109699;
        short s2=-22862, sArr1[]=new short[N];

        FuzzerUtils.init(iArr, -248);
        FuzzerUtils.init(sArr1, (short)-29306);

        iArr[(i >>> 1) % N][(i1 >>> 1) % N] = iMeth(9, Test.instanceCount, Test.instanceCount);
        i >>>= i;
        i20 *= (int)Test.instanceCount;
        for (i21 = 12; i21 < 366; i21++) {
            d1 -= Test.instanceCount;
            i >>= Test.byFld;
            Test.fFld -= Test.instanceCount;
            i += (i21 * i21);
            i = i;
            for (i23 = 1; i23 < 5; ++i23) {
                Test.instanceCount -= i23;
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.instanceCount = (long)Test.fFld;
                    s2 += (short)Test.instanceCount;
                    iArr[i23][i25] -= i21;
                }
            }
        }
        vMeth_check_sum += i + i1 + i20 + i21 + i22 + Double.doubleToLongBits(d1) + i23 + i24 + i25 + i26 + s2 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        double d2=-38.40535, d3=52.40386;
        int i27=28640, i28=-21, i29=0, i30=0, i31=-16, i32=1, i33=-4, i34=16871, i35=-26964, i36=-10255, iArr3[]=new
            int[N];
        short s3=32004;

        FuzzerUtils.init(iArr3, 184);

        vMeth(iFld, iFld);
        for (d2 = 157; d2 > 3; d2--) {
            i28 = 1;
            while (++i28 < 163) {
                i29 = 1;
                do {
                    Test.instanceCount += i28;
                    iArr3[(int)(d2 + 1)] = iFld;
                    try {
                        iArr3[(int)(d2)] = (i27 / 18396);
                        iFld = (i29 % -2139886733);
                        iFld = (i29 / i28);
                    } catch (ArithmeticException a_e) {}
                    iFld += (((i29 * i28) + Test.fFld) - i27);
                    Test.instanceCount = i29;
                    d3 += Test.instanceCount;
                    iFld *= i29;
                    s3 = (short)Test.instanceCount;
                    iArr3[i29] = i27;
                } while (++i29 < 1);
                i30 = 1;
                while (++i30 < 1) {
                    iFld += i30;
                }
                for (i31 = i28; i31 < 1; ++i31) {
                    i32 += (((i31 * i31) + i31) - i31);
                    i33 = i29;
                    iFld += (((i31 * i29) + i29) - i27);
                    i33 -= i33;
                    i33 -= (int)Test.fFld;
                }
                i34 = 1;
                while (++i34 < 1) {
                    iFld = i30;
                    i27 += i32;
                    iArr3 = iArr3;
                    i32 = i28;
                    i33 = (int)Test.fFld;
                }
                for (i35 = 1; i35 < 1; i35++) {
                    iArr3[(int)(d2)] &= (int)Test.instanceCount;
                    Test.fFld *= i29;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
