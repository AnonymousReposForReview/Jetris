package tests.javafuzzer2359;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:22:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3621143831L;
    public static byte byFld=116;
    public static double dFld=117.46176;
    public short sFld=21432;
    public int iFld=27;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6698817498816004915L);
        FuzzerUtils.init(Test.iArrFld, 135);
        FuzzerUtils.init(Test.dArrFld, 1.7324);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {


        i7 >>>= i7;
        vMeth_check_sum += i7;
    }

    public static int iMeth1(long l, long l1, int i6) {

        float f3=0.337F, fArr[]=new float[N];
        int i8=-183, i9=-68, i10=-142, i11=-12, i12=5, i13=34023, i14=-2776;
        boolean b=false;

        FuzzerUtils.init(fArr, -1.716F);

        vMeth(i6);
        Test.instanceCount += (long)f3;
        for (i8 = 11; i8 < 340; i8++) {
            i9 -= (int)Test.dFld;
            for (i10 = 1; i10 < 5; ++i10) {
                Test.dArrFld[i10] -= i10;
                i6 -= 12;
            }
            for (i12 = 1; i12 < 5; ++i12) {
                if (b) {
                    i9 = i13;
                    l += (48593 + (i12 * i12));
                    switch (((i12 >>> 1) % 10) + 60) {
                    case 60:
                        i13 += (((i12 * Test.instanceCount) + i11) - Test.instanceCount);
                    case 61:
                        fArr[i8] += 132;
                        i9 += (i12 * i12);
                        break;
                    case 62:
                        i9 -= i8;
                        break;
                    case 63:
                        i14 = (int)Test.instanceCount;
                    case 64:
                        i14 *= i10;
                        break;
                    case 65:
                        l ^= i6;
                        break;
                    case 66:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 67:
                        Test.iArrFld[i12 - 1] *= (int)l;
                    case 68:
                        fArr[i12 - 1] += 113L;
                    case 69:
                        Test.iArrFld[i8 - 1] = i10;
                        break;
                    default:
                        i11 += i14;
                    }
                } else {
                    i6 ^= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = l + l1 + i6 + Float.floatToIntBits(f3) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i3=11, i4=17908, i5=-14;
        float f1=0.401F, f2=-1.68F;

        i3 = 1;
        do {
            i1 -= -48;
            for (f1 = 1; f1 < 5; ++f1) {
                i2 -= (int)(f2--);
                i5 = 1;
                do {
                    Test.iArrFld[(int)(f1)] >>= (i2 -= iMeth1(Test.instanceCount, -37694L, i4));
                    i1 += i5;
                    Test.instanceCount = -54015;
                    Test.instanceCount += (i5 * i5);
                    i1 <<= i2;
                    switch ((((i1 >>> 1) % 1) * 5) + 105) {
                    case 109:
                        Test.lArrFld[(int)(f1 + 1)] -= Test.instanceCount;
                        break;
                    default:
                        i4 &= i3;
                        i2 <<= i5;
                    }
                } while (++i5 < 2);
            }
            i1 += 152;
        } while (++i3 < 369);
        long meth_res = i1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f2) + i5;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=20978, i15=-10490, i16=19517, i17=-2, i18=1, iArr[]=new int[N];
        float f=1.270F;
        double d=-1.31294, d1=2.93987;
        long l2=-5712548073393712777L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 74);
        FuzzerUtils.init(bArr, true);

        i *= (int)(f + (-36.32180 * (-45145 / ((Test.instanceCount * Test.byFld) | 1))));
        Test.byFld >>= (byte)(Test.lArrFld[(54 >>> 1) % N] = i);
        Test.lArrFld[(i >>> 1) % N] *= iArr[(i >>> 1) % N];
        f += (float)(((i - d) * iMeth(i, i)) * 6);
        i *= -3;
        i -= i;
        iArr[(i >>> 1) % N] = i;
        for (l2 = 17; l2 < 386; l2++) {
            i16 = 1;
            do {
                i15 += (i16 * i16);
                i += (i16 ^ (long)f);
                Test.iArrFld[i16 - 1] += (int)f;
                Test.instanceCount -= i16;
                Test.iArrFld[i16] <<= i15;
            } while (++i16 < 68);
            Test.lArrFld[(int)(l2 + 1)] = i16;
            i15 += (int)(((l2 * i) + Test.instanceCount) - i16);
            i = -8;
            Test.iArrFld[(int)(l2 - 1)] = i16;
            for (d1 = 3; d1 < 68; ++d1) {
                i17 += (int)d1;
                sFld += (short)d1;
                bArr[(int)(l2 - 1)] = true;
                Test.iArrFld[(int)(l2 - 1)] *= i16;
            }
            Test.instanceCount += (l2 ^ Test.byFld);
            i18 = 1;
            while (++i18 < 68) {
                Test.iArrFld[(int)(l2)] += i;
                i17 -= (int)d;
                i17 += (((i18 * i) + i) - i);
                Test.dFld += iFld;
                Test.dFld *= i15;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
