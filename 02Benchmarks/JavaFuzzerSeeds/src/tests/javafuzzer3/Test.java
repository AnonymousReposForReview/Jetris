package tests.javafuzzer3;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 20:59:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=35418L;
    public static int iFld=9;
    public double dFld=2.106914;
    public static int iFld1=-160;
    public static short sFld=28532;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-2763);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, float f, short s) {

        int i2=-10, i3=-4, i4=-14509, i5=28782, i6=-15527, iArr[]=new int[N];
        double d=54.95584;
        boolean b=false;
        byte by=-6;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(fArr, -99.274F);
        FuzzerUtils.init(lArr, 7454165632710482765L);

        for (i2 = 2; i2 < 238; ++i2) {
            d = 6513890085719658085L;
        }
        for (i4 = 3; i4 < 292; i4++) {
            i3 = (int)f;
            i3 *= -25;
            try {
                i1 = (i3 / -23698);
                i6 = (39834 % i6);
                iArr[i4] = (i5 % i6);
            } catch (ArithmeticException a_e) {}
            b = b;
            if (false) {
                i1 >>= i1;
                i1 *= i2;
                by = (byte)i4;
                fArr[i4 - 1] -= f;
            } else if (b) {
                i3 >>= i1;
                lArr[i4] <<= i5;
                by = (byte)i2;
            }
        }
        vMeth2_check_sum += i1 + Float.floatToIntBits(f) + s + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + (b
            ? 1 : 0) + by + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i=55793, i7=-12, i8=5, i9=107, i10=202, i11=-38371, i12=-36259, iArr1[]=new int[N];
        float f1=-2.714F;
        short s1=26460;

        FuzzerUtils.init(iArr1, 46429);

        i = 1;
        while (++i < 191) {
            vMeth2(-229, f1, (short)(-28920));
            f1 += i;
            i7 ^= s1;
            iArr1[i + 1] = (int)Test.instanceCount;
            try {
                Test.iFld = (-1033573358 % i);
                i7 = (i / iArr1[i + 1]);
                i7 = (-227 / i);
            } catch (ArithmeticException a_e) {}
            Test.iFld = i;
            f1 = i7;
            for (i8 = 8; i8 > 1; --i8) {
                if (i10 != 0) {
                    vMeth1_check_sum += i + Float.floatToIntBits(f1) + i7 + s1 + i8 + i9 + i10 + i11 + i12 +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
                for (i11 = 1; i11 < 2; i11++) {
                    Test.iFld &= i10;
                    iArr1[i11] = i12;
                    i7 += i11;
                    f1 *= f1;
                }
            }
        }
        vMeth1_check_sum += i + Float.floatToIntBits(f1) + i7 + s1 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {

        int i13=-90, i14=19757, i15=97, i16=6, i17=-205, i18=11345;
        float f2=-101.510F;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -158051433L);

        vMeth1();
        Test.iFld <<= Test.iFld;
        for (i13 = 11; i13 < 192; ++i13) {
            if (b1) {
                Test.iFld += (i13 + i13);
                f2 += i13;
                Test.iFld += (i13 ^ Test.iFld);
            }
            if (true) break;
            lArr1[i13] = Test.instanceCount;
            for (i15 = 1; i15 < 9; ++i15) {
                f2 += (i15 - Test.instanceCount);
                for (i17 = i13; 2 > i17; ++i17) {
                    i14 += i14;
                    dFld -= i16;
                    Test.iFld = (int)57672L;
                }
            }
        }
        vMeth_check_sum += i13 + i14 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=574, i20=211, i21=35573, i22=51279, i24=-55042, i25=-3, i26=0, iArr2[]=new int[N];
        float f3=-85.14F, fArr1[]=new float[N];
        byte by1=14;
        boolean b2=false;
        long l=7L, lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 7878);
        FuzzerUtils.init(fArr1, 0.372F);
        FuzzerUtils.init(lArr2, 79L);

        vMeth();
        i19 = 1;
        do {
            Test.instanceCount -= (long)dFld;
            f3 -= by1;
        } while ((i19 += 3) < 121);
        Test.iFld -= (int)Test.instanceCount;
        for (i20 = 3; 396 > i20; ++i20) {
            switch ((((50 >>> 1) % 8) * 5) + 91) {
            case 110:
                switch (((i20 % 2) * 5) + 77) {
                case 78:
                    switch (((i19 >>> 1) % 9) + 64) {
                    case 64:
                    case 65:
                        iArr2[i20] = 8;
                        i22 = 1;
                        while (++i22 < 64) {
                            f3 += i19;
                            b2 = b2;
                            Test.iFld = i20;
                            i21 += (i22 - f3);
                            by1 >>= (byte)Test.instanceCount;
                            Test.iFld *= (int)Test.instanceCount;
                        }
                        if (b2) {
                            try {
                                i21 = (Test.iFld1 % 246);
                                iArr2[i20 + 1] = (5427 % i20);
                                i21 = (i20 % 150);
                            } catch (ArithmeticException a_e) {}
                            iArr2[i20 - 1] = i19;
                            Test.iFld1 *= 19870;
                            for (i24 = 1; i24 < 64; ++i24) {
                                dFld = i25;
                            }
                        } else if (b2) {
                            Test.iFld += (((i20 * i21) + by1) - Test.instanceCount);
                            switch (((-2 >>> 1) % 1) + 59) {
                            case 59:
                                Test.iFld1 += (((i20 * i20) + f3) - Test.instanceCount);
                                break;
                            default:
                                i26 += (int)-1571270073L;
                                Test.sFld *= (short)Test.instanceCount;
                            }
                            iArr2[i20] = (int)f3;
                            Test.iFld1 -= i19;
                        }
                        break;
                    case 66:
                        iArr2[i20] <<= i26;
                        break;
                    case 67:
                        dFld = Test.iFld;
                    case 68:
                        Test.iFld += (i20 * by1);
                        break;
                    case 69:
                        fArr1[i20] -= 2.244F;
                        break;
                    case 70:
                        i25 = i19;
                        break;
                    case 71:
                        dFld -= Test.sFld;
                        break;
                    case 72:
                    }
                case 82:
                    Test.instanceCount = i25;
                    break;
                }
                break;
            case 120:
                Test.instanceCount *= i26;
                break;
            case 95:
                b2 = b2;
            case 112:
                iArr2[i20] -= (int)2.726F;
                break;
            case 118:
                lArr2 = FuzzerUtils.long1array(N, (long)-38652L);
                break;
            case 92:
                iArr2[i20 + 1] = i24;
                break;
            case 103:
                dFld -= l;
                break;
            case 131:
                i25 = Test.sFld;
            default:
                l = Test.sFld;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
