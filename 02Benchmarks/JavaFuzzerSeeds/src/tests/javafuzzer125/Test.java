package tests.javafuzzer125;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:46:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-138L;
    public static double dFld=-115.21244;
    public static int iFld=3408;
    public static int iFld1=25175;
    public static float fFld=-71.98F;
    public static int iFld2=-64953;
    public int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -35651L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f=-21.372F;
        int i11=3, i12=-222, i13=-1717, i14=-76;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-24);

        for (f = 22; f < 393; ++f) {
            for (i12 = 1; 5 > i12; i12++) {
                byArr = byArr;
                Test.dFld = i13;
                if (i13 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
                Test.iFld1 -= i12;
                i13 -= (int)Test.instanceCount;
                Test.iFld1 -= i13;
                i14 = 1;
                do {
                    if (i12 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(byArr);
                        return;
                    }
                    switch ((i12 % 5) + 81) {
                    case 81:
                        Test.instanceCount = i13;
                        Test.instanceCount += Test.iFld1;
                        break;
                    case 82:
                        i11 += (int)f;
                        if (b) continue;
                        break;
                    case 83:
                        i13 += -29280;
                    case 84:
                        if (b) continue;
                        break;
                    case 85:
                        i13 = Test.iFld;
                        break;
                    }
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(int i6, int i7, int i8) {

        int i9=-41, i10=-246, i15=-12, i16=-132, i17=-7, iArr1[]=new int[N];
        short s=29642;
        byte by=-41;
        boolean b1=true;
        long l1=-2202690986L;

        FuzzerUtils.init(iArr1, 217);

        for (i9 = 137; i9 > 8; i9--) {
            i6 *= (((i7 - i10) - (s - Test.iFld)) - Math.min((int)(by + Test.dFld), Test.iFld));
            try {
                i10 = (iArr1[i9 - 1] / 170);
                i8 = (Test.iFld % 249);
                i7 = (i6 % -16349);
            } catch (ArithmeticException a_e) {}
            vMeth();
            i10 = (int)8.608F;
            if (b1) break;
            Test.iFld1 = (int)Test.fFld;
            iArr1[i9 + 1] /= (int)-33.649F;
            Test.instanceCount >>= i7;
            i15 = 1;
            do {
                for (i16 = 1; i16 > 1; i16 -= 2) {
                    Test.iFld += i16;
                    i17 &= (int)-4036670994661334898L;
                    i8 = (int)l1;
                    Test.iFld <<= -48857;
                }
            } while (++i15 < 12);
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + s + by + (b1 ? 1 : 0) + i15 + i16 + i17 + l1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i2, int i3, long l) {

        int i4=62423, i5=12588, i18=-4, i19=10828;
        boolean b2=false;

        l = i3;
        i3 += (int)((i2 &= (int)(-(i3 = (int)l))) * ((--iArrFld[(i3 >>> 1) % N]) - (Test.dFld + i3)));
        for (i4 = 6; i4 < 194; i4++) {
            i2 <<= (int)(((i4 + i3) * (--Test.dFld)) + (i2 % (iMeth(i5, Test.iFld, Test.iFld1) | 1)));
            iArrFld[i4] <<= i2;
            Test.iFld += i4;
            Test.lArrFld[i4] >>>= i5;
            i5 += i4;
            Test.dFld -= Test.instanceCount;
        }
        for (long l2 : Test.lArrFld) {
            Test.iFld = Test.iFld1;
            Test.iFld1 = i5;
            for (i18 = 1; i18 < 4; ++i18) {
                if (b2) continue;
                i19 ^= i5;
            }
        }
        long meth_res = i2 + i3 + l + i4 + i5 + i18 + i19 + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-165, i1=4, i20=22989, i21=57, i22=14, i23=10, i24=1, i25=13, i26=7328, i27=15107, i28=1, i29=-6,
            i30=-239, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -63703);

        i = i;
        i >>>= (-Math.min(i1, iArr[(i1 >>> 1) % N]++));
        Test.dFld = ((++i) - (lMeth(Test.iFld, i, 164L) * Test.iFld1));
        i20 = 1;
        do {
            Test.instanceCount = 8292563690242460742L;
            Test.fFld += (float)Test.dFld;
            i ^= (int)-9308L;
            for (i21 = 3; i21 < 184; i21++) {
                Test.iFld2 ^= Test.iFld2;
                Test.iFld -= i20;
                for (i23 = 1; i23 < 2; ++i23) {
                    iArr[i23 + 1] = (int)170L;
                    Test.iFld += i23;
                    i24 -= i24;
                }
                for (i25 = 1; i25 < 2; i25 += 2) {
                    Test.instanceCount = i23;
                    i24 <<= 18045;
                    iArr[i20] -= (int)Test.instanceCount;
                    Test.instanceCount -= i1;
                    iArr[i21] = i23;
                    try {
                        i22 = (i20 / Test.iFld2);
                        Test.iFld1 = (Test.iFld / -478192125);
                        iArr[i20] = (-73 / Test.iFld1);
                    } catch (ArithmeticException a_e) {}
                    i26 <<= i21;
                }
                Test.iFld1 = (int)-13L;
            }
            for (i27 = 2; i27 < 184; i27++) {
                for (i29 = i27; i29 < 2; i29++) {
                    Test.dFld = i22;
                    i22 += (i29 * i29);
                    i26 += -128;
                    try {
                        iArrFld[i20] = (i20 / i30);
                        i30 = (i24 % i29);
                        i30 = (200 / i22);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i29 + Test.iFld1);
                }
            }
        } while (++i20 < 136);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
