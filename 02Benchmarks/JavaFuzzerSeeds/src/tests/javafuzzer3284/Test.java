package tests.javafuzzer3284;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:38:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-15997L;
    public static float fFld=-65.591F;
    public volatile double dFld=-43.87333;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3) {

        double d=-17.17611, d1=2.6146;
        int i4=3, i5=-14205, i6=-7, i7=2, i8=-2, i9=11919, iArr[]=new int[N];
        byte by=103;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, -27.340F);
        FuzzerUtils.init(lArr, -1615921176L);

        i3 = (int)Test.instanceCount;
        i3 = i3;
        i3 += (int)d;
        for (i4 = 13; 295 > i4; ++i4) {
            try {
                i5 = (i4 / i3);
                i3 = (iArr[i4] % i3);
                i3 = (i5 / 11781);
            } catch (ArithmeticException a_e) {}
            fArr = fArr;
            Test.instanceCount = i3;
        }
        i3 = i4;
        for (i6 = 3; i6 < 153; i6 += 2) {
            for (i8 = i6; i8 < 21; i8++) {
                d1 -= i3;
                iArr[i6] = by;
                i9 = (int)Test.instanceCount;
                i9 *= (int)Test.fFld;
                lArr[i8] ^= i5;
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            by + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i2) {

        float f=1.621F;
        int i10=-65183;
        double d2=89.5232;
        byte by1=56, byArr[][]=new byte[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)3627);
        FuzzerUtils.init(byArr, (byte)123);

        i2 = (int)Math.abs((long)((i2 - Test.fFld) + lMeth(i2)));
        for (f = 328; f > 18; f -= 2) {
            i2 += (int)(f * f);
            d2 -= -764235308385240513L;
            i2 -= i10;
        }
        i10 >>>= i2;
        i2 -= i2;
        i2 >>= i2;
        i2 += by1;
        sArr[(i10 >>> 1) % N] = (short)i2;
        byArr[(7 >>> 1) % N] = byArr[(i2 >>> 1) % N];
        i10 = i2;
        i2 = (int)Test.instanceCount;
        Test.instanceCount = 7L;
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i10 + Double.doubleToLongBits(d2) + by1 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i11=-37344, i12=-204, i13=-4, i14=0, i15=-139, i16=16059, i17=16844, i18=41266, i19=3;
        float f1=-69.405F;
        byte by2=48;

        vMeth1(i11);
        for (f1 = 150; f1 > 6; --f1) {
            i12 -= -6308;
            for (i13 = 1; i13 < 11; ++i13) {
                if (false) break;
            }
            for (i15 = 1; i15 < 11; ++i15) {
                by2 <<= (byte)Test.instanceCount;
                i14 += (168 + (i15 * i15));
                i14 += i11;
            }
            i11 -= (int)-181L;
            try {
                i12 = (14014 % i16);
                i16 = (i16 / 71);
                Test.iArrFld[(int)(f1 - 1)] = (i13 % i11);
            } catch (ArithmeticException a_e) {}
        }
        for (i17 = 13; i17 < 235; ++i17) {
            i19 = 1;
            do {
                Test.instanceCount = i18;
            } while (++i19 < 7);
            Test.instanceCount = i11;
        }
        vMeth_check_sum += i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + by2 + i17 + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=13572, i1=-1, i20=2, i21=-59129, i22=-134, i23=-61849, i24=-25652, i25=-76, i26=-3, i27=-6;
        byte by3=89;
        short s=6618, sArr1[]=new short[N];
        long lArr1[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr1, -244L);
        FuzzerUtils.init(sArr1, (short)-28679);
        FuzzerUtils.init(dArr, -72.78488);

        for (i = 20; i < 381; i++) {
            vMeth();
            for (i20 = 70; 4 < i20; i20--) {
                Test.iArrFld[i - 1] += i21;
                lArr1 = lArr1;
                for (i22 = 1; i22 < 2; i22++) {
                    by3 -= (byte)i20;
                }
                for (i24 = 1; 2 > i24; ++i24) {
                    i25 -= i23;
                }
                Test.instanceCount *= i24;
                try {
                    i21 = (Test.iArrFld[i + 1] % i1);
                    i25 = (210 / i20);
                    i23 = (i20 % -43674);
                } catch (ArithmeticException a_e) {}
            }
            i26 = 1;
            while (++i26 < 70) {
                i23 <<= s;
                i21 += (i26 - i25);
                by3 = (byte)5;
                i1 += (i26 * Test.fFld);
                i1 += (int)Test.instanceCount;
                Test.instanceCount = i26;
                i27 = 1;
                do {
                    i21 += (i27 ^ i24);
                    Test.fFld = (float)dFld;
                    i23 += (((i27 * Test.fFld) + i22) - i20);
                    by3 = (byte)-6481;
                    by3 += (byte)(((i27 * i1) + Test.instanceCount) - i20);
                    s >>= (short)i25;
                    Test.fFld += Test.instanceCount;
                } while (++i27 < 1);
                s >>>= (short)i24;
            }
            sArr1[i - 1] = (short)dFld;
            dArr[i][i + 1] = i23;
            i1 += i;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
