package tests.javafuzzer1856;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:40:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=126L;
    public static float fFld=15.317F;
    public static long lFld=-54552L;
    public short sArrFld[][]=new short[N][N];
    public static volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)56);
        FuzzerUtils.init(Test.iArrFld, -84);
        FuzzerUtils.init(Test.iArrFld1, 50);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i5=12, i6=-63, i7=230, i8=-97, iArr1[]=new int[N];
        short s1=-4391;
        double d=42.52231;

        FuzzerUtils.init(iArr1, -206);

        for (i5 = 13; 336 > i5; i5++) {
            l1 = (long)Test.fFld;
            i6 *= (int)121.19610;
            for (i7 = 1; i7 < 5; ++i7) {
                boolean b=false;
                l1 -= i5;
                i6 = i7;
                switch ((i7 % 5) + 83) {
                case 83:
                    if (b) {
                        Test.fFld -= l1;
                        s1 *= (short)i8;
                        Test.fFld = i5;
                    } else {
                        i8 >>= (int)Test.instanceCount;
                    }
                    Test.fFld += i7;
                case 84:
                    Test.fFld = Test.fFld;
                    break;
                case 85:
                    l1 = (long)d;
                    break;
                case 86:
                    iArr1 = iArr1;
                    break;
                case 87:
                    Test.byArrFld[i7] += (byte)49226L;
                    break;
                default:
                    i6 = (int)Test.fFld;
                }
            }
        }
        vMeth1_check_sum += l1 + i5 + i6 + i7 + i8 + s1 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i1, int i2) {

        int i3=4860, i4=-4, i9=-96, i10=8;
        short s=10839;

        for (i3 = 152; 4 < i3; --i3) {
            s += s;
            vMeth1(Test.instanceCount);
            for (i9 = 1; i9 < 11; ++i9) {
                i10 >>= -16;
                try {
                    i10 = (Test.iArrFld[i3 - 1] / -558389723);
                    i1 = (i4 % 30);
                    i10 = (194 % i2);
                } catch (ArithmeticException a_e) {}
                Test.fFld = i9;
                i10 += i3;
                Test.iArrFld1 = FuzzerUtils.int2array(N, (int)-23237);
                i2 ^= i10;
                Test.instanceCount /= (i9 | 1);
            }
            i1 *= (int)l;
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + s + i9 + i10;
    }

    public static int iMeth(float f) {

        long l2=-205L;
        int i11=13, i12=-169, i13=48323, i14=-169, i15=-174, i16=-32038, i17=13563, i18=-15887;
        short s2=-7686;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.271F);

        vMeth(l2, i11, i11);
        i12 = 1;
        while (++i12 < 125) {
            for (i13 = 1; i13 < 13; ++i13) {
                i14 *= 32463;
                if (i14 != 0) {
                }
                l2 += i13;
            }
            for (i15 = 1; i15 < 13; ++i15) {
                Test.iArrFld1[i15][i12] += (int)Test.instanceCount;
                for (i17 = i15; i17 < 2; ++i17) {
                    Test.instanceCount += i17;
                    switch (((i15 % 8) * 5) + 61) {
                    case 69:
                        i11 += i16;
                        i18 *= (int)l2;
                        l2 = i17;
                        break;
                    case 67:
                        l2 -= i16;
                        break;
                    case 79:
                        i14 += i14;
                        break;
                    case 90:
                        i16 = (int)l2;
                        break;
                    case 86:
                        s2 = (short)1.372F;
                        break;
                    case 82:
                        fArr[i12 - 1] = i11;
                        break;
                    case 97:
                        i11 += (-29475 + (i17 * i17));
                        break;
                    case 64:
                        i11 -= i18;
                        break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + l2 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + s2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-18483, i19=12, i20=89, i21=0, i22=2, i23=-44204, i24=39968, i25=10, iArr[]=new int[N];
        byte by=-106, byArr[]=new byte[N];
        boolean b1=true;
        double d2=-73.123598;
        short s3=-13911;
        long lArr[][]=new long[N][N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(byArr, (byte)-10);
        FuzzerUtils.init(iArr, -168);
        FuzzerUtils.init(lArr, -1982202606L);
        FuzzerUtils.init(fArr1, 0.864F);

        sArrFld[(i >>> 1) % N][(i >>> 1) % N] >>= (short)((30210 * by) - (i = byArr[(i >>> 1) % N]));
        iArr[(i >>> 1) % N] <<= (int)((Test.instanceCount += iMeth(Test.fFld)) + -55377);
        for (i19 = 18; i19 < 308; ++i19) {
            i20 = -126;
            for (i21 = 87; i21 > i19; --i21) {
                double d1=2.84410;
                Test.iArrFld1[i21 - 1][i19] = i;
                b1 = true;
                switch (((i21 % 1) * 5) + 3) {
                case 6:
                    i20 *= i19;
                    Test.iArrFld1[i21 - 1][i19] = i;
                    i20 += (i21 * i21);
                    for (i23 = i19; i23 < 1; i23++) {
                        i22 *= -226;
                        Test.fFld *= i21;
                    }
                default:
                    i22 *= -1;
                    switch (((i19 % 8) * 5) + 47) {
                    case 62:
                        i22 = i;
                        d1 += d1;
                        i22 -= (int)Test.instanceCount;
                        i22 += (int)Test.fFld;
                        break;
                    case 80:
                        d2 = 1;
                        while (++d2 < 1) {
                            by *= (byte)i22;
                        }
                        s3 = (short)i20;
                        lArr[i19 + 1][i21 + 1] += -8486;
                    case 84:
                        i25 = 1;
                        while (++i25 < 1) {
                            Test.instanceCount = 12;
                            bArrFld = bArrFld;
                            Test.instanceCount = 5;
                            i22 += (((i25 * i20) + i20) - i19);
                            i24 = i21;
                        }
                    case 54:
                        if (b1) continue;
                        break;
                    case 74:
                        Test.iArrFld[i19] = i22;
                        break;
                    case 50:
                        i = i21;
                        break;
                    case 87:
                        iArr[i21 + 1] <<= (int)Test.instanceCount;
                        break;
                    case 77:
                        fArr1[i19][i21 + 1] /= (Test.lFld | 1);
                    default:
                        if (b1) break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
