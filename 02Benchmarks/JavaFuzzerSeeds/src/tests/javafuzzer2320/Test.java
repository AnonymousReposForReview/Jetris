package tests.javafuzzer2320;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:15:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=53044L;
    public static int iFld=-4;
    public double dFld=-2.46870;
    public static byte byFld=-104;
    public static long lFld=-1L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
        FuzzerUtils.init(Test.lArrFld, -91L);
        FuzzerUtils.init(Test.dArrFld, 107.2795);
        FuzzerUtils.init(Test.sArrFld, (short)-24321);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, float f, long l) {

        int i4=-21, i5=-2, i6=-11, i7=-55, i8=-33623, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -25.464F);
        FuzzerUtils.init(iArr, 242);

        i3 <<= -153;
        Test.instanceCount = -59488;
        fArr[(i3 >>> 1) % N] += l;
        i3 += i3;
        Test.iFld = Test.iFld;
        i4 = 1;
        while (++i4 < 183) {
            for (i5 = 1; 9 > i5; i5++) {
                for (i7 = 1; i7 < 2; ++i7) {
                    f = i4;
                    f = i8;
                }
                l ^= i5;
                try {
                    i6 = (Test.iArrFld[i4 + 1] % 26950);
                    i3 = (7 / i5);
                    i8 = (iArr[i4] % i5);
                } catch (ArithmeticException a_e) {}
                l *= Test.iFld;
            }
            i8 -= (int)-29.69F;
            l <<= i6;
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + l + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        float f1=0.480F;
        int i9=53, i10=8, i11=-95, i12=-73, i13=-61809;
        long l1=-2L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -186L);

        vMeth1(Test.iFld, f1, Test.instanceCount);
        i2 = (int)-2.124F;
        i2 -= i2;
        for (i9 = 13; i9 < 233; i9++) {
            Test.instanceCount = Test.iFld;
        }
        for (l1 = 223; l1 > 6; --l1) {
            for (i12 = 7; 1 < i12; i12--) {
                Test.byFld = (byte)i12;
                f1 = f1;
                i13 += i10;
                i10 = Test.iFld;
                f1 = f1;
                lArr[i12 + 1] = l1;
                lArr[(int)(l1)] *= Test.instanceCount;
                i2 += (((i12 * i13) + i12) - l1);
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i9 + i10 + l1 + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr);
    }

    public double dMeth() {

        int i=44420, i1=-121, i14=-9, i15=43364, i16=11, i17=-59472, i18=-222;
        short s=2991;
        float f2=-1.6F, fArr1[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(fArr1, -76.206F);

        i = 1;
        while (++i < 305) {
            Test.iFld = (int)dFld;
            i1 = 1;
            while (++i1 < 5) {
                vMeth(i);
                switch (((i % 10) * 5) + 11) {
                case 58:
                    switch ((i % 5) + 66) {
                    case 66:
                        for (i14 = i; i14 < 1; i14++) {
                            s |= (short)i14;
                            Test.iFld = Test.byFld;
                            i15 -= i15;
                            Test.iFld *= (int)9L;
                        }
                        f2 += i1;
                        break;
                    case 67:
                        for (i16 = 1; i16 < 1; i16++) {
                            Test.lArrFld[i1] *= Test.instanceCount;
                            i18 += i16;
                        }
                    case 68:
                        i18 += (i1 * i1);
                        break;
                    case 69:
                        Test.iFld *= -205;
                        break;
                    case 70:
                        if (b) break;
                        break;
                    }
                case 33:
                    i15 += (i1 | i18);
                    break;
                case 29:
                    fArr1[i + 1] = Test.instanceCount;
                    break;
                case 60:
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 32:
                    i18 = i16;
                    break;
                case 49:
                    b = b;
                    break;
                case 22:
                    dFld *= Test.instanceCount;
                    break;
                case 47:
                    Test.iFld = s;
                    break;
                case 16:
                    Test.instanceCount = Test.instanceCount;
                case 35:
                    i15 &= i18;
                    break;
                default:
                    Test.instanceCount >>>= i14;
                }
            }
        }
        long meth_res = i + i1 + i14 + i15 + s + Float.floatToIntBits(f2) + i16 + i17 + i18 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f3=17.910F, fArr2[]=new float[N];
        int i20=-113, i21=42589, i22=14, i23=10, i24=-146, i25=31935, i26=0, i27=-10526;
        long l2=0L;

        FuzzerUtils.init(fArr2, 1.155F);

        Test.iFld >>= (int)((-1.216F + dMeth()) - f3);
        Test.iFld *= 84;
        for (int i19 : Test.iArrFld) {
            dFld -= Test.iFld;
            dFld += i19;
            switch (((i19 >>> 1) % 6) + 77) {
            case 77:
                switch (((i20 >>> 1) % 1) + 16) {
                case 16:
                    switch (((i19 >>> 1) % 2) + 56) {
                    case 56:
                        for (i21 = 1; i21 < 63; ++i21) {
                            try {
                                Test.iFld = (Test.iArrFld[i21 + 1] / i19);
                                i19 = (i22 % 35063);
                                i19 = (i21 / Test.iArrFld[i21]);
                            } catch (ArithmeticException a_e) {}
                            i20 *= (int)Test.instanceCount;
                            if (false) {
                                for (l2 = 1; l2 < 2; l2++) {
                                    fArr2[(int)(l2)] += f3;
                                    Test.instanceCount = (long)dFld;
                                }
                                Test.iArrFld[i21 - 1] >>= Test.iFld;
                            } else {
                                for (i24 = i21; 2 > i24; i24++) {
                                    Test.iFld += i23;
                                    Test.dArrFld[i24 - 1] = -34;
                                }
                                Test.iFld += i21;
                            }
                            f3 += (i21 * Test.iFld);
                            if (true) {
                                Test.iFld ^= Test.iFld;
                            }
                            Test.iArrFld[i21 + 1] ^= -22440;
                            i26 = 1;
                            while (++i26 < 2) {
                                i19 *= (int)dFld;
                                i23 -= (int)-49110L;
                            }
                            i25 *= (int)Test.instanceCount;
                            dFld = dFld;
                        }
                        dFld += Test.instanceCount;
                        break;
                    case 57:
                    default:
                        Test.iFld = (int)Test.lFld;
                    }
                    break;
                }
                break;
            case 78:
                i23 *= (int)f3;
                break;
            case 79:
                Test.iFld *= i27;
            case 80:
                Test.lFld *= -5;
                break;
            case 81:
                Test.sArrFld = Test.sArrFld;
                break;
            case 82:
                Test.instanceCount >>= i20;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
