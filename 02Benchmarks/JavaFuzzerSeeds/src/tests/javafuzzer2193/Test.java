package tests.javafuzzer2193;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:02:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1279233196L;
    public double dFld=-52.112746;
    public static int iFld=-45971;
    public float fFld=-15.329F;
    public static float fFld1=-2.650F;
    public static double dFld1=62.102928;
    public static byte byFld=96;
    public boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2266577579840044013L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, long l2, boolean b1) {

        int i10=8, i11=30, i13=35845, i14=-6207, i15=11, iArr[]=new int[N];
        float f=-2.769F;
        short s2=32091;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr, 56295);
        FuzzerUtils.init(byArr1, (byte)21);

        for (i10 = 9; i10 < 164; i10++) {
            iArr[i10] -= Test.iFld;
            if (b1) {
                Test.iFld -= 189;
                i11 = (int)1241399945L;
                f *= i9;
                iArr[i10 - 1] = s2;
            }
            Test.iFld = (int)Test.instanceCount;
        }
        for (int i12 : iArr) {
            byArr1[(i10 >>> 1) % N] = (byte)i10;
            i13 = 1;
            do {
                for (i14 = 1; i14 < 1; i14++) {
                    i12 += i14;
                    Test.lArrFld[i14] = l2;
                    if (b1) break;
                }
            } while (++i13 < 4);
        }
        vMeth1_check_sum += i9 + l2 + (b1 ? 1 : 0) + i10 + i11 + Float.floatToIntBits(f) + s2 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr1);
    }

    public static void vMeth(int i8, boolean b, long l1) {

        int i16=36261, i17=8, i18=29727, i19=-13, i20=0;
        byte by=-37;
        double d1=-97.114728;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        vMeth1(i8, 35507L, b);
        for (i16 = 5; 343 > i16; i16++) {
            Test.instanceCount = i8;
            i18 = 1;
            while (++i18 < 5) {
                by -= (byte)d1;
                d1 *= -3671;
                for (i19 = 1; i19 < 1; i19++) {
                    l1 += (((i19 * i16) + i17) - i19);
                }
                Test.fFld1 -= 86;
                Test.iFld += (34257 + (i18 * i18));
                by += (byte)i18;
                Test.instanceCount = 1;
                i20 += i18;
                bArr[i18] = bArr[i18 + 1];
                i17 = i18;
            }
        }
        vMeth_check_sum += i8 + (b ? 1 : 0) + l1 + i16 + i17 + i18 + by + Double.doubleToLongBits(d1) + i19 + i20 +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i5, long l, short s1) {

        int i6=12, i7=35, i21=41, i22=20, iArr1[]=new int[N];
        float f1=1.214F;
        boolean b2=true;
        byte byArr2[]=new byte[N];

        FuzzerUtils.init(iArr1, 211);
        FuzzerUtils.init(byArr2, (byte)53);

        if (b2) {
            for (i6 = 275; i6 > 17; --i6) {
                vMeth(i5, true, Test.instanceCount);
                if (i7 != 0) {
                }
                l = Test.instanceCount;
                s1 += (short)Test.iFld;
                switch ((i6 % 10) + 48) {
                case 48:
                    Test.lArrFld[i6] -= -254;
                    Test.dFld1 = Test.instanceCount;
                    break;
                case 49:
                    i7 += i6;
                    if (i5 != 0) {
                    }
                    for (i21 = 1; i21 < 6; ++i21) {
                        f1 = 1;
                        while (++f1 < 2) {
                            l >>= 2986728051L;
                            Test.fFld1 = i7;
                        }
                    }
                    break;
                case 50:
                    Test.fFld1 = -173;
                    break;
                case 51:
                    i22 = i22;
                    break;
                case 52:
                    try {
                        Test.iFld = (21016 % i6);
                        i5 = (i22 / iArr1[i6 + 1]);
                        i7 = (61619 % i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 53:
                    Test.byFld *= Test.byFld;
                    break;
                case 54:
                    i5 = i5;
                    break;
                case 55:
                    byArr2[i6] *= (byte)l;
                    break;
                case 56:
                    Test.dFld1 -= i5;
                    break;
                case 57:
                    l &= s1;
                    break;
                }
            }
        } else {
            i22 = (int)l;
        }
        long meth_res = i5 + l + s1 + i6 + i7 + i21 + i22 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=22, i1=3129, i2=-62, i3=188, i4=-5364;
        double d=74.103180;
        short s=19461;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)55);

        dFld = iArrFld[(Test.iFld >>> 1) % N];
        for (i = 14; i < 250; i++) {
            for (i2 = 1; i2 < 106; i2 += 2) {
                Test.iFld = (int)((-(byArr[i - 1] = (byte)Test.instanceCount)) + (i1--));
                for (d = 1; d < 3; ++d) {
                    switch ((int)(((d % 1) * 5) + 16)) {
                    case 18:
                        switch (((i % 7) * 5) + 105) {
                        case 124:
                            fFld += i;
                            s >>>= (short)Math.max(i4, iMeth(i2, 25L, s));
                            Test.byFld = (byte)Test.iFld;
                            i4 = Test.iFld;
                        case 132:
                            i4 <<= i;
                            break;
                        case 127:
                            Test.instanceCount += (long)((long)d | Test.instanceCount);
                            break;
                        case 125:
                            i1 = Test.iFld;
                            Test.instanceCount += Test.instanceCount;
                            fArrFld[i2 + 1] = i;
                            break;
                        case 138:
                        case 110:
                            iArrFld[i + 1] = i1;
                            Test.iFld += (int)(d + i);
                            i1 += Test.byFld;
                            i4 += 23870;
                            break;
                        case 126:
                            i3 -= i4;
                            i1 += i1;
                            Test.instanceCount = -223;
                            break;
                        }
                        break;
                    default:
                        Test.byFld = (byte)60960;
                        iArrFld[i2] -= (int)Test.instanceCount;
                    }
                    Test.instanceCount = i2;
                    Test.lArrFld = Test.lArrFld;
                    if (bFld) continue;
                    i4 = i4;
                    Test.dFld1 -= Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
