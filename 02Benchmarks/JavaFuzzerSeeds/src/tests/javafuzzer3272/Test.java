package tests.javafuzzer3272;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:31:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30063L;
    public volatile int iFld=140;
    public static short sFld=5144;
    public static volatile float fFld=1.399F;
    public static boolean bFld=false;
    public byte byFld=25;
    public int iArrFld[]=new int[N];

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=-172, i4=-38299, i5=19931, i6=49887, i7=28595;
        byte by=-5;
        double d4=-65.113426;

        for (i3 = 5; i3 < 276; ++i3) {
            i4 = i4;
            i2 += -8;
            i2 = Test.sFld;
            i4 += by;
            by = (byte)i4;
            i5 = 1;
            do {
                for (i6 = i3; i6 < 1; i6++) {
                    Test.instanceCount <<= i6;
                    Test.fFld += (i6 * i4);
                }
                switch (((-75 >>> 1) % 5) + 95) {
                case 95:
                    if (i3 != 0) {
                        vMeth1_check_sum += i2 + i3 + i4 + by + i5 + i6 + i7 + Double.doubleToLongBits(d4);
                        return;
                    }
                    i7 = i2;
                    break;
                case 96:
                    if (Test.bFld) break;
                    break;
                case 97:
                    d4 *= Test.instanceCount;
                case 98:
                    i7 ^= (int)Test.instanceCount;
                    break;
                case 99:
                    i2 += (((i5 * i2) + i6) - i6);
                    break;
                }
            } while (++i5 < 6);
        }
        vMeth1_check_sum += i2 + i3 + i4 + by + i5 + i6 + i7 + Double.doubleToLongBits(d4);
    }

    public static void vMeth(double d3, boolean b, boolean b1) {

        int i=-76, i1=-118;

        for (i = 15; i < 328; ++i) {
            vMeth1(i1);
        }
        vMeth_check_sum += Double.doubleToLongBits(d3) + (b ? 1 : 0) + (b1 ? 1 : 0) + i + i1;
    }

    public float fMeth(double d1, double d2, float f) {

        double d5=88.27355;
        long l=-26984L;
        int i8=-18136, i9=2943, i10=2151, i11=11;

        Test.instanceCount -= (~(Test.instanceCount - iFld));
        vMeth(d5, Test.bFld, Test.bFld);
        l = 1;
        while (++l < 266) {
            try {
                iFld = (iFld / -45397);
                iFld = (151 % iArrFld[(int)(l)]);
                iFld = (iFld / 63821);
            } catch (ArithmeticException a_e) {}
            byFld = (byte)-2544286946L;
        }
        iArrFld[(i8 >>> 1) % N] -= (int)d1;
        i9 = 1;
        do {
            Test.instanceCount = (long)-35.117738;
            if (i9 != 0) {
            }
            iFld = iFld;
            iArrFld[i9 + 1] >>>= (int)l;
        } while (++i9 < 344);
        for (i10 = 15; i10 < 363; ++i10) {
            i8 = 26;
            if (Test.bFld) break;
            iArrFld[i10 + 1] += i11;
        }
        long meth_res = Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d5) + l + i8 + i9 + i10 + i11;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=8.49740, dArr[]=new double[N];
        int i12=-13321, i13=-53371, i14=128, i15=-21010, i16=169, i17=26, i18=6, i19=-35105;
        long l1=-240L, lArr[]=new long[N];
        float f1=13.272F;
        short sArr[]=new short[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, 57.71344);
        FuzzerUtils.init(lArr, 9L);
        FuzzerUtils.init(sArr, (short)13159);
        FuzzerUtils.init(bArr, false);

        Test.instanceCount = Math.max((int)(d * fMeth(d, d, Test.fFld)), iFld);
        Test.instanceCount >>= Test.instanceCount;
        for (i12 = 10; i12 < 340; ++i12) {
            Test.sFld = (short)i13;
            switch ((i12 % 1) + 71) {
            case 71:
                i14 = 1;
                do {
                    iFld -= (int)Test.fFld;
                    dArr[i12 + 1] -= 2.135F;
                    for (i15 = 1; i14 < i15; --i15) {
                        i13 &= -14;
                        lArr = FuzzerUtils.long1array(N, (long)553164800771653134L);
                        Test.instanceCount += i14;
                    }
                    switch (((i14 % 3) * 5) + 16) {
                    case 30:
                        iFld += i13;
                        break;
                    case 31:
                        for (i17 = 1; i17 < 1; ++i17) {
                            sArr[i17 + 1] += (short)Test.instanceCount;
                            iArrFld[i14] = i15;
                            if (Test.bFld) continue;
                            i13 *= -10;
                            Test.instanceCount -= Test.instanceCount;
                            Test.bFld = Test.bFld;
                            iArrFld[i14 - 1] += (int)-1069008029L;
                        }
                        l1 = 1;
                        do {
                            iArrFld[(int)(l1)] = 18005;
                        } while ((l1 += 3) < 1);
                        break;
                    case 27:
                    default:
                        for (f1 = 1; f1 < 1; f1++) {
                            dArr[i12] = iFld;
                            iArrFld[(int)(f1 - 1)] = i16;
                            bArr[i14 + 1] = Test.bFld;
                            Test.instanceCount = i14;
                        }
                        iFld -= i16;
                    }
                } while (++i14 < 76);
                break;
            default:
                i19 = i15;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
