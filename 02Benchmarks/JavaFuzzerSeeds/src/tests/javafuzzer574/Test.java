package tests.javafuzzer574;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:06:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3476049331137553317L;
    public static volatile byte byFld=-34;
    public static float fFld=-2.238F;
    public static double dFld=-16.129747;
    public short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 15181L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4) {

        int i5=6, i6=-203, i7=50550, i8=-36799, i9=-11, iArr[]=new int[N];
        float f1=-2.29F;
        double d2=-1.115468;
        boolean b=true;

        FuzzerUtils.init(iArr, 5);

        for (i5 = 170; i5 > 5; i5--) {
            i6 += i5;
            i6 = 1638;
            i4 = i5;
            i4 += (((i5 * Test.instanceCount) + i4) - i5);
            try {
                i6 = (i5 / iArr[i5]);
                i4 = (0 / iArr[i5]);
                i4 = (i6 / i5);
            } catch (ArithmeticException a_e) {}
            iArr[i5 + 1] = i6;
        }
        for (f1 = 6; f1 < 138; f1++) {
            if (b) {
                for (i8 = 1; i8 < 12; i8 += 3) {
                    Test.fFld = i7;
                    i4 += i7;
                    Test.instanceCount -= (long)d2;
                    iArr[(int)(f1 + 1)] <<= i8;
                    Test.instanceCount >>= i8;
                }
            } else if (b) {
                i7 /= (int)((long)(d2) | 1);
            } else {
                b = b;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + Double.doubleToLongBits(d2) + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, int i1) {

        double d=-112.93358, d1=24.89772;
        int i2=-24124, i3=-21690, i10=-140, i11=-44352, iArr1[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9216075641698760951L);
        FuzzerUtils.init(iArr1, 14260);

        for (d = 5; d < 209; d += 3) {
            i1 += (int)(d + i1);
            for (d1 = 1; 23 > d1; d1++) {
                i2 ^= (int)lArr[(int)(d1 - 1)];
                vMeth(i1);
                switch ((((-174 >>> 1) % 8) * 5) + 31) {
                case 66:
                    for (i10 = (int)(d1); i10 < 2; ++i10) {
                        i2 &= (int)Test.instanceCount;
                        i2 += i10;
                        i11 = (int)Test.instanceCount;
                        Test.fFld = i11;
                        iArr1[i10 - 1] = (int)Test.fFld;
                        iArr1[(int)(d1)] = (int)Test.fFld;
                        Test.instanceCount >>= i11;
                        if (b1) continue;
                    }
                    break;
                case 32:
                case 37:
                    Test.fFld += (float)d1;
                    break;
                case 36:
                    l <<= i11;
                    break;
                case 58:
                    iArr1[(int)(d1 + 1)] = i1;
                    break;
                case 64:
                    i11 >>>= Test.byFld;
                    break;
                case 51:
                    i3 += (int)(d1 * d1);
                case 56:
                    i11 = i2;
                    break;
                }
            }
        }
        long meth_res = l + i1 + Double.doubleToLongBits(d) + i2 + Double.doubleToLongBits(d1) + i3 + i10 + i11 + (b1 ?
            1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, float f) {


        Test.byFld >>= (byte)((long)((Test.instanceCount * Test.instanceCount) - 2.22012) << ((Test.instanceCount +
            -4797) - iMeth(Test.instanceCount, i)));
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i12=-55555, i13=-169, i14=-40, i16=-11878, i17=7, i18=-65, i19=251, i20=0, i21=4, i22=105, iArr2[]=new
            int[N];
        boolean b2=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr2, -35398);
        FuzzerUtils.init(fArr, -63.170F);

        for (int smallinvoc=0; smallinvoc<237; smallinvoc++) vSmallMeth(i12, Test.fFld);
        for (i13 = 4; i13 < 165; ++i13) {
            i14 >>= (int)Test.instanceCount;
            Test.instanceCount *= 3;
            for (i16 = 4; i16 < 156; ++i16) {
                Test.instanceCount = i17;
                i18 = 1;
                do {
                    i17 = (int)Test.instanceCount;
                    i14 = i14;
                    Test.fFld *= i13;
                    if (b2) continue;
                    i12 = i13;
                    i12 = i18;
                    i17 = i16;
                    if (b2) break;
                } while (++i18 < 2);
                i12 = i14;
                sArrFld[i16] -= (short)i18;
            }
            fArr[i13 + 1][i13 - 1] = (float)Test.dFld;
            i17 = i14;
            i12 = i13;
            switch ((i13 % 1) + 51) {
            case 51:
                Test.lArrFld[i13] = i17;
                break;
            }
        }
        i14 *= i16;
        i19 = 245;
        while (--i19 > 0) {
            for (i20 = 2; i20 < 103; i20++) {
                i22 = 1;
                do {
                    i21 -= (int)Test.fFld;
                    i17 += (i22 * i22);
                    i14 *= i14;
                    Test.instanceCount += (i22 * i17);
                } while (++i22 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
