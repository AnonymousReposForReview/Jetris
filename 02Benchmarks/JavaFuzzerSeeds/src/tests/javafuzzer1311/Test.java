package tests.javafuzzer1311;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:57:21 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=203L;
    public static float fFld=-62.164F;
    public static byte byFld=-13;
    public int iFld=1;
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.23400);
        FuzzerUtils.init(Test.iArrFld, -173);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i4=-18346, i5=11, i6=14, i7=234, i8=-209, i9=-13491, iArr[][]=new int[N][N];
        byte by=24;
        double d=-1.126616;
        short s1=11023;
        float f1=-77.266F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(lArr, 5L);

        for (i4 = 18; i4 < 327; ++i4) {
            try {
                i5 = (91 % iArr[i4 + 1][i4 - 1]);
                i5 = (214 / iArr[i4 - 1][i4]);
                i5 = (-33577 % i4);
            } catch (ArithmeticException a_e) {}
            iArr[i4 + 1][i4 - 1] = by;
            d = s1;
            for (f1 = 5; f1 > i4; f1--) {
                lArr[i4] += i6;
                Test.instanceCount -= -8;
                for (i7 = 1; i7 > 1; i7 -= 2) {
                    Test.instanceCount += (i7 - i9);
                    if (b) break;
                    i8 = (int)Test.instanceCount;
                    i5 ^= 44874;
                    try {
                        iArr[(int)(f1 - 1)][i7 + 1] = (86 / i5);
                        i6 = (i9 % 1996972112);
                        i6 = (i6 % 394370116);
                    } catch (ArithmeticException a_e) {}
                    s1 = (short)i7;
                    Test.dArrFld[i4][i7 + 1] -= i8;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + by + Double.doubleToLongBits(d) + s1 + Float.floatToIntBits(f1) + i6 + i7 + i8 +
            i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(short s) {

        int i3=-13, i10=3, i11=-57, i12=-4035, i13=-42285, iArr1[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-9532);
        FuzzerUtils.init(iArr1, -547);

        i3 += (int)(Test.fFld--);
        vMeth2();
        for (short s2 : sArr) {
            iArr1[(145 >>> 1) % N] += (int)Test.instanceCount;
            i3 = i3;
            for (i10 = 1; i10 < 4; i10++) {
                i3 = i3;
                for (i12 = 1; 2 > i12; ++i12) {
                    i3 *= (int)Test.fFld;
                    i13 *= (int)Test.instanceCount;
                    i13 += (((i12 * Test.instanceCount) + i3) - i3);
                    Test.byFld -= (byte)Test.fFld;
                    i11 += 158;
                    i13 %= (int)(Test.instanceCount | 1);
                    i11 -= i11;
                }
            }
        }
        vMeth1_check_sum += s + i3 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i1=-65422, i2=-64581, i14=14, i15=21995;
        short s3=29248;
        float f2=61.538F;
        double d1=2.33478;

        for (i1 = 1; i1 < 241; ++i1) {
            switch ((((Math.abs(i1) >>> 1) % 6) * 5) + 117) {
            case 140:
            case 129:
            case 139:
                vMeth1(s3);
                s3 += (short)i1;
                for (f2 = i1; f2 < 7; f2 += 2) {
                    i2 -= i2;
                    Test.iArrFld[(int)(f2)] = (int)Test.instanceCount;
                    i15 = 1;
                    while (++i15 < 1) {
                        Test.fFld *= Test.instanceCount;
                        Test.fFld -= -190;
                        Test.iArrFld[(int)(f2)] -= 11;
                        Test.iArrFld[(int)(f2 + 1)] *= i15;
                        Test.instanceCount *= i1;
                        Test.byFld *= (byte)22155;
                        d1 = i1;
                    }
                }
                break;
            case 132:
                i2 += (int)Test.instanceCount;
            case 133:
                i14 -= (int)d1;
                break;
            case 119:
                Test.iArrFld[i1] /= (int)(i14 | 1);
                break;
            }
        }
        vMeth_check_sum += i1 + i2 + s3 + Float.floatToIntBits(f2) + i14 + i15 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i16=137, i17=-5, i18=-162, i19=-47166, i20=28736, i21=-41, i22=-40649, i23=41036;
        float f=1.459F;
        double d2=-66.13847;
        short s4=-23708;
        boolean b1=false;

        i = (int)(((i * i) * (i + f)) * ((Test.instanceCount + i) % ((i + i) | 1)));
        vMeth();
        i |= (int)Test.instanceCount;
        i16 = 1;
        while (++i16 < 321) {
            i += i16;
            for (i17 = 1; i17 < 78; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.instanceCount *= -69;
                }
                switch ((i17 % 6) + 99) {
                case 99:
                    i18 += (((i17 * f) + Test.instanceCount) - i20);
                case 100:
                    i21 = 1;
                    while ((i21 += 2) < 2) {
                        Test.instanceCount ^= 10;
                        if (false) break;
                        d2 = iFld;
                        i18 += (int)(-4.565F + (i21 * i21));
                        i20 += -7;
                        i -= 50388;
                        Test.iArrFld[i16] *= (int)Test.instanceCount;
                    }
                case 101:
                    i20 += (i17 * i17);
                case 102:
                    iFld *= i;
                    Test.instanceCount >>= i19;
                    iFld += (((i17 * iFld) + Test.fFld) - Test.instanceCount);
                    i -= s4;
                    break;
                case 103:
                case 104:
                    Test.fFld += iFld;
                    i20 = (int)Test.fFld;
                    d2 = i20;
                    for (i22 = i16; i22 < 2; ++i22) {
                        b1 = false;
                        Test.iArrFld[i16] -= s4;
                        Test.iArrFld[i22] >>= i16;
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
