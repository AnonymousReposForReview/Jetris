package tests.javafuzzer2050;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:01:43 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3285125723L;
    public int iFld=-8;
    public static double dFld=28.36153;
    public byte byFld=92;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=6950, i4=13, i5=8, i6=31057, i7=143, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -10);

        i3 = 6;
        i3 *= i3;
        for (i4 = 386; i4 > 3; i4 -= 2) {
            iArr[i4 + 1] >>>= i5;
            for (i6 = 1; 8 > i6; i6++) {
                iArr[i6] = 13;
                Test.dFld *= i6;
                if (b) continue;
                Test.instanceCount <<= i7;
                Test.instanceCount ^= i7;
                i7 += i6;
                i7 = i7;
                i3 += (i6 ^ Test.instanceCount);
            }
            i3 &= (int)996391184L;
            i7 += i4;
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i8=39011, i9=-43876, i10=-65, i11=95, iArr1[]=new int[N];
        double d1=51.7169, dArr[]=new double[N];
        short s=-23882;
        byte by=118, byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-73);
        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(dArr, -81.71057);
        FuzzerUtils.init(lArr1, 381728022L);

        vMeth2();
        for (i8 = 2; i8 < 152; ++i8) {
            for (i10 = 1; 11 > i10; i10++) {
                d1 = 2;
                while (--d1 > 0) {
                    Test.dFld -= i10;
                    Test.instanceCount >>>= -175L;
                    if (true) break;
                    byArr[i8] = (byte)i9;
                    s <<= (short)i11;
                    iArr1[i8 - 1] = i11;
                }
                i11 += i10;
                by += by;
            }
            dArr[i8] = 0.49056;
        }
        lArr1[(i9 >>> 1) % N] = i9;
        i11 = (int)Test.instanceCount;
        vMeth1_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + s + by + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d, float f, int i) {

        int i1=144, i2=-97;

        for (i1 = 5; i1 < 122; ++i1) {
            vMeth1();
        }
        Test.dFld -= Test.instanceCount;
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        float f1=-55.636F;
        int i12=-45465, i13=24025, i14=189, i15=-229;
        short s1=-18485, sArr[]=new short[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-32519);
        FuzzerUtils.init(lArr, 3153215804L);

        sArr[(iFld >>> 1) % N] %= (short)14;
        for (long l : lArr) {
            vMeth(Test.dFld, f1, 51);
            for (i12 = 63; 2 < i12; --i12) {
                l += (((i12 * iFld) + i13) - byFld);
                iFld += (((i12 * l) + l) - l);
                switch (i12 % 8) {
                case 0:
                case 1:
                    i13 *= iFld;
                    iFld += iFld;
                    i13 += (((i12 * i13) + i13) - s1);
                    break;
                case 2:
                    lArr[i12 + 1] = i13;
                    i13 = iFld;
                    break;
                case 3:
                    i13 += (((i12 * f1) + i12) - Test.instanceCount);
                    i13 <<= i13;
                case 4:
                    iFld = i13;
                    switch ((i12 % 2) + 81) {
                    case 81:
                    case 82:
                        i13 *= (int)-57049L;
                        break;
                    }
                    break;
                case 5:
                case 6:
                    i13 += iFld;
                    iFld += (int)Test.instanceCount;
                    i13 = (int)f1;
                    if (b1) continue;
                case 7:
                    Test.iArrFld[i12] = i13;
                default:
                    lArr[i12 + 1] = i13;
                    i13 = (int)l;
                    for (i14 = 1; i14 < 2; i14++) {
                        i15 *= i12;
                        switch (((i14 % 7) * 5) + 69) {
                        case 79:
                            Test.instanceCount = i12;
                            break;
                        case 76:
                            Test.instanceCount = i15;
                            break;
                        case 86:
                            Test.dFld = Test.instanceCount;
                            break;
                        case 77:
                            b1 = b1;
                            break;
                        case 73:
                            iFld += (((i14 * Test.instanceCount) + f1) - i13);
                            break;
                        case 100:
                            if (b1) continue;
                            break;
                        case 80:
                            b1 = b1;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
