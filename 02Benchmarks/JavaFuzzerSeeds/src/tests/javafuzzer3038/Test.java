package tests.javafuzzer3038;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:05:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3656525634062241807L;
    public static volatile int iFld=23482;
    public static long lFld=93L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2716609774L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i2=135, i3=56824, i4=-129, i5=-18040, iArr1[]=new int[N];
        short s=32351;
        double d=-48.92646;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.172F);
        FuzzerUtils.init(iArr1, 8);

        Test.iFld = Test.iFld;
        for (i2 = 4; 300 > i2; ++i2) {
            i3 = (int)Test.instanceCount;
            s *= (short)i3;
            i3 -= (int)1.96683;
            Test.iFld += i2;
            i3 >>= i2;
            Test.iFld *= (int)Test.instanceCount;
            switch ((((Test.iFld >>> 1) % 3) * 5) + 42) {
            case 49:
                fArr = fArr;
                for (i4 = i2; i4 < 6; ++i4) {
                    iArr1[i2 + 1] <<= Test.iFld;
                    Test.instanceCount = i3;
                    d -= Test.instanceCount;
                    if (b) continue;
                }
                break;
            case 50:
                fArr[i2] = i2;
                break;
            case 46:
                d = i5;
                break;
            }
        }
        long meth_res = i2 + i3 + s + i4 + i5 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        double d1=-1.23767;
        int i6=-10, i7=-44256, i8=9, i9=249, i10=-57834;
        byte by=-4;
        float f=-107.681F;
        short s1=3669;

        Test.iFld += (int)((lMeth1() % 29240) - Test.iFld);
        for (d1 = 10; d1 < 166; d1++) {
            i7 = 1;
            while (++i7 < 10) {
                Test.iFld = i7;
                Test.iFld += (((i7 * Test.instanceCount) + Test.instanceCount) - i6);
                try {
                    i6 = (Test.iFld % -27);
                    Test.iFld = (1504 / i6);
                    i6 = (i6 / 127);
                } catch (ArithmeticException a_e) {}
                Test.iFld += i7;
                by = (byte)i7;
                i6 += (i7 + i7);
            }
            i8 -= Test.iFld;
            i8 = -2;
            for (i9 = 1; i9 < 10; i9++) {
                Test.instanceCount = i9;
                f += (((i9 * s1) + i7) - i10);
                i8 -= (int)Test.instanceCount;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i6 + i7 + by + i8 + i9 + i10 + Float.floatToIntBits(f) + s1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l) {

        int i=-9, i1=218, i11=-3, i12=-24058, i13=110, i14=-64, i15=-116, i16=48181, iArr[]=new int[N];
        short s2=29790;
        boolean b1=true;
        double d2=38.47952;

        FuzzerUtils.init(iArr, 52595);

        l -= (i = (int)(iArr[(i >>> 1) % N] - -495172236950956725L));
        i1 = (int)lMeth();
        for (i11 = 11; i11 < 227; i11++) {
            iArr = iArr;
            for (i13 = 1; 7 > i13; ++i13) {
                iArr[i11 + 1] = 5;
                for (i15 = 1; i15 < 2; ++i15) {
                    s2 += (short)i15;
                    i = 3998;
                    i1 += (i15 - l);
                    if (b1) {
                        l += (((i15 * i16) + Test.instanceCount) - i1);
                        Test.iFld %= (int)1.544F;
                        i14 += i15;
                        Test.iFld *= Test.iFld;
                    } else if (b1) {
                        i1 = i15;
                    } else if (b1) {
                        i16 >>>= i1;
                        vMeth_check_sum += l + i + i1 + i11 + i12 + i13 + i14 + i15 + i16 + s2 + (b1 ? 1 : 0) +
                            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
                        return;
                    } else {
                        d2 = Test.iFld;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i11 + i12 + i13 + i14 + i15 + i16 + s2 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f1=50.7F, f2=-3.403F;
        int i17=-80, i18=18820, i19=219, i20=-27826, i21=112, iArr2[]=new int[N];
        byte by1=-49, byArr[]=new byte[N];
        double d3=-97.102676;
        short s3=-1479;

        FuzzerUtils.init(iArr2, 62);
        FuzzerUtils.init(byArr, (byte)5);

        vMeth(Test.instanceCount);
        Test.iFld *= (int)Test.instanceCount;
        f1 -= (float)2.63429;
        Test.iFld >>= Test.iFld;
        for (f2 = 1; 195 > f2; ++f2) {
            for (i18 = 5; 129 > i18; i18++) {
                switch ((int)(((f2 % 4) * 5) + 54)) {
                case 61:
                    by1 |= (byte)Test.iFld;
                    iArr2[(int)(f2 + 1)] = (int)Test.instanceCount;
                    break;
                case 74:
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)2255257784L);
                    Test.iFld *= Test.iFld;
                    Test.iFld = i18;
                    iArr2[(int)(f2 + 1)] = i19;
                    break;
                case 56:
                    Test.lFld += i18;
                    for (i20 = 1; i20 < 2; ++i20) {
                        switch (((-29 >>> 1) % 5) + 52) {
                        case 52:
                            i21 = Test.iFld;
                            Test.lArrFld[(int)(f2 + 1)] += Test.lFld;
                            Test.iFld = i21;
                            i17 -= Test.iFld;
                            break;
                        case 53:
                            i19 -= (int)Test.instanceCount;
                            byArr[i18] = (byte)-14252;
                            break;
                        case 54:
                            by1 &= (byte)Test.iFld;
                            i17 = (int)Test.lFld;
                            i21 -= (int)Test.lFld;
                            i19 = (int)d3;
                        case 55:
                            Test.lFld = Test.instanceCount;
                            iArr2[(int)(f2 - 1)] = by1;
                            Test.instanceCount %= (i17 | 1);
                            i21 *= i18;
                            break;
                        case 56:
                            d3 *= f2;
                            break;
                        default:
                            s3 = (short)i19;
                        }
                    }
                    break;
                case 73:
                    Test.iFld -= Test.iFld;
                    break;
                default:
                    Test.iFld = i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
