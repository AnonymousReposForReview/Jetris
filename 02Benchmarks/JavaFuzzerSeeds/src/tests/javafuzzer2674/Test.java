package tests.javafuzzer2674;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:25:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public short sFld=21727;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, boolean b) {

        float f1=110.557F;
        int i11=-92, i12=82, i13=12, i14=-18080, i15=10;
        double d=0.94355;
        byte by=44;

        f1 -= 49;
        i11 *= (int)d;
        Test.instanceCount = 9948;
        i11 = (int)202L;
        for (i12 = 20; i12 < 370; i12++) {
            for (i14 = 1; i14 < 5; i14 += 2) {
                i11 += i14;
                i11 -= i13;
                b = false;
                i13 += (((i14 * Test.instanceCount) + i14) - i15);
            }
            d -= f1;
            i13 %= (int)(by | 1);
            if (b) continue;
            i13 -= i14;
        }
        Test.iArrFld[(i14 >>> 1) % N] &= i11;
        vMeth1_check_sum += l1 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i11 + Double.doubleToLongBits(d) + i12 + i13
            + i14 + i15 + by;
    }

    public static int iMeth() {

        int i7=-78, i8=95, i9=3, i10=-129;
        boolean b1=true;
        float f2=32.792F;
        double d1=0.28296;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 9L);

        for (i7 = 13; i7 < 329; i7++) {
            for (i9 = 1; i9 < 5; ++i9) {
                vMeth1(Test.instanceCount, b1);
                i8 += (i9 * i9);
                if (true) continue;
            }
            if (i7 != 0) {
            }
            switch (((i10 >>> 1) % 9) + 9) {
            case 9:
                Test.instanceCount += 112;
                i8 += (i7 ^ (long)f2);
                break;
            case 10:
                i8 = i10;
            case 11:
                i8 %= (int)(i8 | 1);
                Test.instanceCount = (long)d1;
                Test.iArrFld[i7 + 1] -= (int)d1;
                break;
            case 12:
                i10 -= (int)f2;
                break;
            case 13:
                i8 += i8;
                break;
            case 14:
                i8 = (int)d1;
            case 15:
                i10 *= -63082;
            case 16:
            case 17:
                lArr1[i7 - 1] |= i9;
                break;
            default:
                Test.instanceCount += (long)f2;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        int i2=7, i3=-177, i4=-60571, i5=-10, i6=-157;
        float f=-25.481F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        i2 = 1;
        while (++i2 < 261) {
            Test.iArrFld[i2 + 1] *= (int)((i1 = (int)l) + ((Test.instanceCount * i) - (i2 - i2)));
            for (i3 = 1; i3 < 6; ++i3) {
                for (i5 = 1; i5 < 2; ++i5) {
                    short s=-11776;
                    i6 *= (int)(-151 - ((--lArr[i5 - 1]) - (++f)));
                    l -= (long)1.390F;
                    try {
                        i1 = (i4 / i5);
                        i1 = (i2 / 255);
                        i4 = (Test.iArrFld[i5] / -792969887);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (long)(1.1021F + (i5 * i5));
                    if (b2) {
                        i4 *= (((-27544 * (i1--)) + Integer.reverseBytes(i5)) - (i6 - iMeth()));
                        s += (short)2.554F;
                    } else if (b2) {
                        i = (int)Test.instanceCount;
                        Test.iArrFld[i2 + 1] -= (int)f;
                        Test.iArrFld[i2 - 1] = i5;
                    } else {
                        i6 += (int)l;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=8833, i17=-11, i19=4, i20=146, i21=-11, i22=-13, i23=-47807, i24=4;
        float f3=108.506F, f4=-60.757F, fArr[]=new float[N];
        boolean b3=false;
        double d2=-1.125952;
        long l3=203L, lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 96.480F);
        FuzzerUtils.init(lArr2, -11L);

        vMeth(Test.instanceCount, 9, i16);
        i17 = 1;
        while (++i17 < 165) {
            long l2=-4L;
            Test.instanceCount += (i17 - f3);
            fArr[i17] *= l2;
            if (b3) {
                i16 = i17;
            }
            for (i19 = 9; i19 < 152; ++i19) {
                i20 += (((i19 * i20) + sFld) - f3);
                i16 += i19;
                switch (((i19 % 1) * 5) + 15) {
                case 18:
                    i16 *= i17;
                    Test.iArrFld[i19 - 1] *= i17;
                    break;
                }
                i16 = i17;
                i20 = i16;
            }
            i16 += (i17 | (long)f3);
            for (f4 = 9; f4 < 152; f4++) {
                i16 = (int)l2;
                d2 = sFld;
                l2 %= (i20 | 1);
                Test.iArrFld[(int)(f4)] -= i20;
                lArr2 = lArr2;
                try {
                    Test.iArrFld[i17] = (i20 % 189);
                    i16 = (i16 / i16);
                    i16 = (i21 / i21);
                } catch (ArithmeticException a_e) {}
                sFld += (short)(f4 * f4);
            }
            for (i22 = 6; i22 < 152; ++i22) {
                Test.instanceCount += (((i22 * i21) + i21) - f3);
            }
            Test.instanceCount += l2;
        }
        i20 = i16;
        for (l3 = 8; l3 < 297; l3++) {
            Test.instanceCount += l3;
        }
        Test.instanceCount = l3;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
