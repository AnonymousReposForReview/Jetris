package tests.javafuzzer1337;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:37 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static byte byFld=-125;
    public static int iFld=7;
    public float fFld=2.612F;
    public static short sFld=6076;
    public static volatile boolean bFld=false;
    public static int iFld1=12603;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.261F);
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8) {

        float f2=0.9F;
        int i9=-62, i10=6, i11=0, iArr1[]=new int[N];
        double d=46.9360;

        FuzzerUtils.init(iArr1, 13);

        i8 |= i8;
        Test.instanceCount -= -9727;
        for (float f1 : Test.fArrFld) {
            i8 = i8;
            switch (((i8 >>> 1) % 8) + 19) {
            case 19:
                f1 += -32717;
            case 20:
                f2 = 4;
                do {
                    try {
                        i8 = (181 / i8);
                        i8 = (iArr1[(int)(f2 + 1)] / 10702);
                        iArr1[(int)(f2 - 1)] = (i9 / i8);
                    } catch (ArithmeticException a_e) {}
                    if (false) {
                        for (i10 = 1; i10 < 2; i10++) {
                            d = -1;
                            Test.instanceCount *= (long)2.499F;
                            i9 += i9;
                        }
                        i11 = (int)1.717F;
                        iArr1[(int)(f2)] = (int)-10L;
                    }
                } while ((f2 -= 2) > 0);
                break;
            case 21:
                i8 = i9;
                break;
            case 22:
            case 23:
                i9 += i10;
                break;
            case 24:
                i8 ^= 21462;
                break;
            case 25:
                Test.instanceCount = (long)d;
                break;
            case 26:
            default:
                i9 = 2;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        float f3=-3.154F;
        int i12=-5, i13=51285, i14=4, i15=-32910, i16=-19002, i17=27090, i18=-8314, i19=-19629, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 59224);

        iMeth(Test.iFld);
        f3 += Test.iFld;
        for (i12 = 4; i12 < 127; ++i12) {
            iArr2 = iArr2;
            Test.iFld = Test.iFld;
            i13 |= (int)-3866436237L;
            Test.instanceCount -= (long)f3;
        }
        i14 = 1;
        do {
            for (i15 = 1; 6 > i15; i15++) {
                i13 += i15;
                Test.iFld &= -130;
                for (i17 = 2; i17 > i14; i17--) {
                    iArr2[i15 - 1] <<= i14;
                }
                iArr2[i15] = i13;
                i18 *= i19;
            }
        } while (++i14 < 252);
        vMeth1_check_sum += Float.floatToIntBits(f3) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=-37, i6=64405, i7=-13, i20=231, i21=-14, i22=-44138, iArr[]=new int[N];
        float f=1.604F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(byArr, (byte)-112);

        i5 = 1;
        while (++i5 < 136) {
            Test.byFld -= (byte)(f = i2);
            for (i6 = i5; i6 < 12; ++i6) {
                Test.byFld = (byte)(i3++);
                iArr[i6 - 1] &= (int)Test.instanceCount;
            }
            vMeth1();
            i7 += (int)f;
            for (i20 = 1; i20 < 12; i20++) {
                i22 = 2;
                while ((i22 -= 2) > 0) {
                    short s=20108;
                    Test.iFld = s;
                    Test.instanceCount = i7;
                    i4 >>= Test.byFld;
                    if (i4 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i20 + i21 + i22 +
                            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
                        return;
                    }
                }
                byArr[i20 - 1] = (byte)Test.instanceCount;
                iArr[i5] -= i5;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        long l=-717448240L, lArr[]=new long[N];
        int i=-125, i1=1, i23=-9, i24=11, i25=236, i26=14;
        double d1=-127.43604;

        FuzzerUtils.init(lArr, -5083L);

        for (l = 2; 149 > l; ++l) {
            if (Test.bFld) {
                i1 = 1;
                while (++i1 < 171) {
                    vMeth(i, 4, i1);
                    i -= (int)10L;
                    i = (int)Test.instanceCount;
                    Test.instanceCount += (i1 * i1);
                }
                fFld = Test.instanceCount;
                Test.fArrFld[(int)(l - 1)] += l;
                fFld += Test.instanceCount;
            } else if (Test.bFld) {
                switch ((int)(((l % 6) * 5) + 90)) {
                case 109:
                    i = (int)l;
                    i += (int)l;
                    break;
                case 118:
                    Test.iFld = (int)l;
                    for (i23 = 9; i23 < 171; ++i23) {
                        Test.iArrFld[(int)(l - 1)] = i1;
                        fFld = i1;
                        Test.sFld ^= (short)i23;
                        i /= (int)(i1 | 1);
                        i24 = i;
                        for (i25 = i23; i25 < 2; ++i25) {
                            Test.iFld = i1;
                            Test.iFld = Test.iFld;
                            i26 += i;
                            Test.instanceCount -= i26;
                            lArr[i25 + 1] = Test.instanceCount;
                            Test.iArrFld[i25 - 1] = Test.byFld;
                            Test.iArrFld[(int)(l - 1)] &= -3;
                            Test.instanceCount += l;
                            bArrFld[i23 - 1] = Test.bFld;
                        }
                    }
                case 91:
                    Test.bFld = false;
                    break;
                case 119:
                    lArr[(int)(l + 1)] += Test.iFld;
                    break;
                case 98:
                    d1 -= Test.iFld;
                    break;
                case 104:
                    Test.iFld1 += (int)(l - l);
                    break;
                }
            } else {
                i += (int)(((l * l) + Test.iFld1) - l);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
