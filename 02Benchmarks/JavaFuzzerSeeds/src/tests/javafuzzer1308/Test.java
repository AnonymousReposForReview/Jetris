package tests.javafuzzer1308;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:52:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static volatile float fFld=2.509F;
    public static boolean bFld=true;
    public short sFld=-28883;
    public int iFld=-5;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, int i6, int i7) {

        int i8=-76, i9=-52167, i10=9, i11=5, i12=-5, i13=-203, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 47791);

        for (i8 = 21; i8 < 351; ++i8) {
            i6 >>>= i8;
            for (i10 = 1; i10 < 5; ++i10) {
                i9 = -32196;
                Test.instanceCount <<= i6;
                iArr[i8] = i7;
            }
            i9 >>>= i11;
            for (i12 = 1; 5 > i12; ++i12) {
                Test.instanceCount <<= i5;
                i9 -= i10;
                i9 = (int)Test.instanceCount;
                Test.instanceCount += (i12 - i12);
                Test.instanceCount -= Test.instanceCount;
                i9 = i7;
                i13 += i10;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1) {

        int i2=-4, i3=41350, i4=-9076, i14=-9;
        double d=43.3696;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 83.261F);

        for (i2 = 10; i2 < 165; i2++) {
            i4 = 1;
            do {
                d -= d;
                Test.fFld -= (iMeth(i2, i2, i3) + 56);
                Test.instanceCount >>= Test.instanceCount;
                i3 += (i4 + Test.fFld);
                i3 %= (int)(i4 | 1);
            } while (++i4 < 10);
            switch ((i2 % 4) + 113) {
            case 113:
                try {
                    i3 = (i2 % i2);
                    i3 = (i4 / i2);
                    i1 = (186 / i3);
                } catch (ArithmeticException a_e) {}
                fArr[i2] += i1;
                break;
            case 114:
            case 115:
                if (Test.bFld) break;
                Test.fFld -= i3;
                i3 = i2;
            case 116:
                i14 = 22635;
                i1 = i4;
                break;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i) {

        int i15=-11, i16=-40282, i17=207, i18=-107, i19=10, i20=20, i21=-139, iArr1[][]=new int[N][N];
        short s=-16346;

        FuzzerUtils.init(iArr1, -25804);

        vMeth1(i);
        for (i15 = 12; 326 > i15; i15++) {
            iArr1[i15 + 1][i15] <<= i;
            i17 = 1;
            do {
                i += (i17 * i17);
                i -= i16;
                for (i18 = 1; i18 > i15; --i18) {
                    i16 += 14;
                }
            } while (++i17 < 5);
            i16 >>>= i15;
            i19 |= (int)Test.instanceCount;
        }
        Test.instanceCount = i15;
        s = (short)i19;
        for (i20 = 7; i20 < 263; ++i20) {
            if (i18 != 0) {
                vMeth_check_sum += i + i15 + i16 + i17 + i18 + i19 + s + i20 + i21 + FuzzerUtils.checkSum(iArr1);
                return;
            }
            Test.bFld = Test.bFld;
        }
        vMeth_check_sum += i + i15 + i16 + i17 + i18 + i19 + s + i20 + i21 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i22=180, i23=17399, i24=13, i25=-50683, i26=-187, i27=-16, i28=66, i29=-2, i30=-196, i31=62125, iArr2[]=new
            int[N];
        long l=-992397208L, lArr[]=new long[N];
        double d1=-95.98614, d2=-85.24735;

        FuzzerUtils.init(lArr, -24L);
        FuzzerUtils.init(iArr2, 179);

        vMeth(i22);
        Test.fFld += Test.instanceCount;
        i22 += (int)Test.instanceCount;
        for (i23 = 7; i23 < 236; i23++) {
            if (true) {
                for (l = 3; 110 > l; l++) {
                    Test.fFld = i23;
                    for (i26 = 1; 2 > i26; i26++) {
                        if (Test.bFld) continue;
                        i22 = (int)Test.instanceCount;
                        if (Test.bFld) continue;
                        lArr[(int)(l - 1)] = sFld;
                        i24 += (((i26 * i26) + i27) - l);
                    }
                    for (d1 = 1; d1 < 2; d1++) {
                        i22 *= i28;
                    }
                    i28 = iFld;
                    if (true) {
                        d2 = 0.698F;
                        Test.fFld += (float)d1;
                        i22 += (int)(((l * Test.instanceCount) + i26) - i27);
                        iArr2[i23 - 1] >>= (int)Test.instanceCount;
                    } else if (Test.bFld) {
                        for (i29 = 1; i29 < 2; i29++) {
                            lArr[i29] = i28;
                            i22 += (int)d2;
                        }
                        iArr2[i23 + 1] *= (int)Test.fFld;
                    } else {
                        switch ((int)((l % 2) + 114)) {
                        case 114:
                            i31 = 2;
                            do {
                                if (Test.bFld) continue;
                            } while ((i31 -= 2) > 0);
                            lArr[(int)(l)] = Test.instanceCount;
                            Test.instanceCount += (l * i31);
                            break;
                        case 115:
                            iArr2[i23 - 1] <<= sFld;
                            break;
                        }
                    }
                }
            } else {
                iArr2[i23] = -63299;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
