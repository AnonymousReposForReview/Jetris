package tests.javafuzzer1940;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-47411L;
    public static int iFld=-157;
    public short sFld=29251;
    public static float fFld=123.418F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.lArrFld, 12L);
        FuzzerUtils.init(Test.fArrFld, -82.193F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vSmallMeth(int i) {


        i = (++Test.iArrFld[(i >>> 1) % N]);
        vSmallMeth_check_sum += i;
    }

    public static void vMeth2(int i5, int i6, int i7) {

        int i8=61554, i9=9, i10=42342, i11=-40, i12=-1, i13=11471;

        for (i8 = 13; i8 < 247; i8 += 2) {
            for (i10 = 1; i10 < 13; ++i10) {
                switch ((i8 % 2) + 127) {
                case 127:
                    for (i12 = 2; i12 > 1; i12 -= 3) {
                        boolean b=false;
                        try {
                            i11 = (i9 / 16369);
                            i11 = (i8 / Test.iFld);
                            i11 = (-68 / i6);
                        } catch (ArithmeticException a_e) {}
                        i11 -= (int)Test.instanceCount;
                        Test.instanceCount %= (i9 | 1);
                        Test.instanceCount += (long)Test.fFld;
                        i11 -= (int)Test.fFld;
                        if (b) {
                            i5 = i7;
                            Test.lArrFld[i8 - 1] = Test.instanceCount;
                            Test.iFld <<= (int)Test.instanceCount;
                        } else {
                            Test.instanceCount += -232;
                            Test.iFld -= i10;
                        }
                    }
                    break;
                case 128:
                    i6 = 26121;
                default:
                    if (false) continue;
                }
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13;
    }

    public static void vMeth1() {

        double d=0.129708;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -253L);

        Test.iFld += (int)(d - lArr[(Test.iFld >>> 1) % N]);
        vMeth2(Test.iFld, -60035, Test.iFld);
        vMeth1_check_sum += Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i4) {

        short s=9359;
        int i14=11, i15=32323;
        byte by1=-27;

        switch ((((Test.iFld + i4) >>> 1) % 5) + 35) {
        case 35:
            vMeth1();
            s = (short)Test.iFld;
            break;
        case 36:
            Test.instanceCount -= i4;
            Test.iFld *= (int)-6384616957658290343L;
            i4 <<= -59402;
            for (i14 = 15; i14 < 356; ++i14) {
                i4 += (i14 - i15);
                if (Test.bFld) {
                    i15 += i15;
                } else if (Test.bFld) {
                    Test.fArrFld[i14] = Test.iFld;
                    i4 -= 48521;
                    by1 += (byte)(i14 ^ i14);
                    Test.instanceCount = 154;
                    vMeth_check_sum += i4 + s + i14 + i15 + by1;
                    return;
                }
                Test.instanceCount += (i14 * Test.instanceCount);
            }
        case 37:
        case 38:
            Test.iFld += (int)Test.fFld;
            break;
        case 39:
            Test.iArrFld[(Test.iFld >>> 1) % N] += -33;
            break;
        default:
            i15 -= 10333;
        }
        vMeth_check_sum += i4 + s + i14 + i15 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i1=6, i2=6, i3=8, i17=0, i18=60228, i19=-140, i20=0, i21=45003, i22=-6;
        byte by=-12, byArr[]=new byte[N];
        float f=86.612F;
        double d1=15.101206, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 52.99286);
        FuzzerUtils.init(byArr, (byte)0);

        for (int smallinvoc=0; smallinvoc<264; smallinvoc++) vSmallMeth((int)((-3138116275707827029L - (Test.iFld >>=
            Test.iFld)) - ((Test.instanceCount + Test.iFld) - (Test.instanceCount >>>= Test.iFld))));
        for (i1 = 7; i1 < 210; i1++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth((int)((--by) + ((-Test.instanceCount) *
                (i2--))));
            Test.iFld = Test.iFld;
            i2 += (i1 * i1);
            Test.iArrFld[i1 - 1] >>= sFld;
        }
        i3 = 1;
        while ((i3 += 2) < 184) {
            f = Test.instanceCount;
            vSmallMeth((int)(-11 + f));
            vMeth(i1);
            Test.instanceCount /= 5;
            i2 += (((i3 * i2) + f) - i2);
            Test.fFld += i1;
            Test.instanceCount += i3;
            Test.iArrFld[i3 + 1] += i1;
            Test.iFld = Test.iFld;
        }
        for (i17 = 7; 206 > i17; i17++) {
            int i23=-23698;
            for (i19 = i17; i19 < 126; ++i19) {
                f = i19;
            }
            if (Test.bFld) continue;
            switch ((((i3 >>> 1) % 10) * 5) + 32) {
            case 60:
                i18 += (((i17 * i1) + i3) - i2);
                break;
            case 57:
                i21 = 126;
                do {
                    d1 = i1;
                } while (--i21 > 0);
                Test.iArrFld[(4 >>> 1) % N] = (int)Test.instanceCount;
                switch (((i17 % 5) * 5) + 55) {
                case 73:
                    i22 = 1;
                    while (++i22 < 126) {
                        Test.instanceCount >>= i21;
                        Test.iArrFld[i17] = i21;
                        Test.instanceCount = i22;
                    }
                    break;
                case 78:
                    i18 -= i22;
                    break;
                case 77:
                    dArr[i17 + 1] += i21;
                    break;
                case 75:
                    Test.instanceCount += Test.instanceCount;
                    break;
                case 70:
                    d1 *= i21;
                    break;
                }
                break;
            case 68:
                i18 -= i22;
                break;
            case 61:
                i20 += i17;
                break;
            case 64:
                Test.bFld = Test.bFld;
            case 44:
                Test.instanceCount /= -1490568915576383022L;
                break;
            case 78:
                Test.iFld = (int)Test.instanceCount;
            case 42:
                i20 += (int)1.550F;
                break;
            case 70:
                Test.fFld += i17;
            case 40:
                i23 = i17;
                break;
            default:
                byArr[i17] = (byte)Test.iFld;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
