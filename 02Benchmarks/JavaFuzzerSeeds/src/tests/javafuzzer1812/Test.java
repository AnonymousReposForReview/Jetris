package tests.javafuzzer1812;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:34:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-197L;
    public double dFld=0.120554;
    public static short sFld=-8277;
    public static float fFld=8.633F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -248);
        FuzzerUtils.init(Test.lArrFld, -1L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth() {

        int i=-37144, iArr[]=new int[N];
        double d1=-69.19405;

        FuzzerUtils.init(iArr, 0);

        Test.instanceCount -= (long)(((++i) + (Test.instanceCount - i)) - (iArr[(i >>> 1) % N] - (d1 + i)));
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l) {

        int i8=-9, i9=-59038, i10=49263, i11=19, i12=-58535;
        double d2=0.99590;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1604637458L);

        i8 = i8;
        for (i9 = 4; i9 < 236; ++i9) {
            Test.iArrFld[i9 + 1] *= i9;
            l -= i8;
            l <<= l;
            for (i11 = 1; i11 < 7; i11++) {
                i10 = i9;
                l += (i11 ^ i8);
                lArr[i9] = i12;
                i10 = 208;
                Test.iArrFld[i11 + 1] = (int)d2;
                l <<= i10;
                i10 >>= i8;
                Test.iArrFld[i11 + 1] = 6;
            }
            Test.iArrFld = Test.iArrFld;
        }
        long meth_res = l + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i1) {

        int i2=-151, i3=-114, i4=-6, i5=23, i6=-15, i7=-8;
        boolean b=true;
        float f=2.570F;

        for (i2 = 8; i2 < 348; ++i2) {
            for (i4 = 1; i4 < 5; i4++) {
                byte by=56;
                Test.instanceCount += i4;
                i3 = (-13225 * (Math.abs(i1) - i3));
                if (b) break;
                i1 += (i4 + i4);
                i1 += (--by);
                for (i6 = 1; i6 < 2; ++i6) {
                    f += i6;
                    i7 += (int)lMeth(Test.instanceCount);
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount *= i1;
                    f += i6;
                    f = 36.644F;
                }
                if (b) break;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + Float.floatToIntBits(f);
    }

    public static int iMeth() {

        double d=109.91944;
        int i13=11;
        float f1=98.190F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.138F);

        d = Test.sFld;
        vMeth();
        vMeth();
        vMeth1(i13);
        f1 = 2954541806L;
        i13 *= i13;
        Test.lArrFld[(-3581 >>> 1) % N] *= i13;
        fArr[(i13 >>> 1) % N] = Test.instanceCount;
        long meth_res = Double.doubleToLongBits(d) + i13 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=229, i15=-3, i16=28039, i17=50665, i18=2, i19=0, i20=215;
        double d3=0.22289, dArr[]=new double[N];
        long l1=5L;

        FuzzerUtils.init(dArr, 62.96924);

        dFld = ((iMeth() * i14) + -3967767237L);
        fArrFld[(i14 >>> 1) % N] -= i14;
        i14 -= i14;
        i14 *= (int)Test.instanceCount;
        Test.iArrFld[(i14 >>> 1) % N] = i14;
        Test.iArrFld[(i14 >>> 1) % N] *= i14;
        i14 -= -16580;
        i14 &= i14;
        i14 = i14;
        i14 <<= i14;
        Test.lArrFld[(i14 >>> 1) % N] >>= i14;
        i14 = i14;
        i14 += i14;
        d3 = 1;
        while (++d3 < 308) {
            for (i15 = 2; i15 < 82; ++i15) {
                dArr[i15 - 1] += Test.instanceCount;
                Test.fFld = i16;
                Test.fFld *= i16;
                for (i17 = (int)(d3); i17 < 2; i17++) {
                    Test.lArrFld[i15 - 1] >>>= i17;
                    Test.fFld += i16;
                    fArrFld[i15] += 13;
                    l1 += 0;
                    i18 ^= (int)-104L;
                }
                i16 += i18;
                for (i19 = 1; 2 > i19; ++i19) {
                    Test.fFld *= i16;
                    l1 += (((i19 * i18) + Test.fFld) - i19);
                    i14 >>>= (int)Test.instanceCount;
                    Test.iArrFld[i19 - 1] = 7;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
