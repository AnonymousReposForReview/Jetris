package tests.javafuzzer2418;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:22:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static double dFld=107.57888;
    public static volatile int iFld=-221;
    public static byte byFld=37;
    public static short sFld=17014;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 14765L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(double d, long l) {

        int i3=-14, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -195);

        i3 += iArr1[(5 >>> 1) % N];
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i3 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(double d2, double d3) {

        long l2=-4343L, lArr[]=new long[N];
        int i5=0, i6=-11, i7=-190, i8=-220, i9=201;
        byte by1=125;
        short s=-22012;
        boolean b1=true;

        FuzzerUtils.init(lArr, 779705080934107527L);

        for (l2 = 1; l2 < 391; ++l2) {
            Test.instanceCount = by1;
            if (i5 != 0) {
                vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + l2 + i5 + by1 + i6 + i7
                    + i8 + i9 + s + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
                return;
            }
            for (i6 = 4; l2 < i6; i6 -= 2) {
                for (i8 = 1; i8 < 1; i8++) {
                    s -= (short)i8;
                    lArr[(int)(l2 + 1)] -= Test.instanceCount;
                    if (b1) break;
                    if (b1) break;
                    i9 = i5;
                }
                i7 = Test.iFld;
                i9 *= by1;
                i5 += i6;
                lArr[(int)(l2)] = i5;
                i7 <<= i9;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + l2 + i5 + by1 + i6 + i7 + i8 +
            i9 + s + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(int i4, long l1, double d1) {

        int i11=0, i12=-4725, i13=-190, i14=10, i15=57199, iArr2[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr2, -9);

        vMeth1(Test.dFld, Test.dFld);
        for (int i10 : iArr2) {
            if (false) continue;
            Test.byFld <<= (byte)Test.iFld;
            Test.instanceCount *= i4;
            for (i11 = 1; i11 < 4; ++i11) {
                try {
                    i10 = (8614 % iArr2[i11 - 1]);
                    iArr2[i11] = (Test.iFld / i12);
                    i4 = (iArr2[i11 + 1] % iArr2[i11]);
                } catch (ArithmeticException a_e) {}
                Test.iFld = i10;
                if (b2) continue;
                iArr2[i11 - 1] &= (int)-32L;
            }
            i13 = 1;
            while (++i13 < 4) {
                i4 >>>= i12;
            }
            for (i14 = 1; i14 < 4; i14++) {
                i15 = (int)Test.instanceCount;
                Test.lArrFld[i14] >>= i4;
            }
        }
        long meth_res = i4 + l1 + Double.doubleToLongBits(d1) + i11 + i12 + (b2 ? 1 : 0) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=63946, i1=9, i2=-102, i16=11, i17=177, iArr[]=new int[N];
        boolean b=false;
        byte by=-67;

        FuzzerUtils.init(iArr, -141);

        i = 1;
        do {
            i1 = iArr[i - 1];
            if ((i1++) > 8927171099899131281L) {
                i1 /= (int)(((++Test.instanceCount) + Test.instanceCount) | 1);
            } else if (b = false) {
                i2 = 1;
                do {
                    float f=61.236F;
                    vMeth(Test.dFld, Math.max(Long.reverseBytes(Test.instanceCount) - (i + -1020), (long)(iArr[i2 - 1]
                        - (f--))));
                } while (++i2 < 7);
                i1 = (int)Test.instanceCount;
            } else {
                i1 += i;
                i1 -= (i1 >>= i2);
                by = (byte)iMeth1(i, 29686L, Test.dFld);
                Test.iFld = i1;
            }
            iArr[i] += Test.iFld;
            for (i16 = 1; i16 < 7; i16++) {
                i17 &= i17;
                Test.instanceCount |= Test.sFld;
            }
        } while (++i < 227);
        long meth_res = i + i1 + i2 + (b ? 1 : 0) + by + i16 + i17 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-2, i19=60876, i20=4, i21=-3, i22=-7, i23=6, iArr3[]=new int[N];
        float f1=-1.164F, f2=2.596F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-16865);
        FuzzerUtils.init(iArr3, -18174);

        switch ((((iMeth() >>> 1) % 1) * 5) + 120) {
        case 121:
            for (i18 = 6; i18 < 176; ++i18) {
                i19 += i18;
                Test.iFld = i18;
                i19 = i19;
                i19 <<= -229;
                i19 += i19;
                Test.instanceCount = -200L;
                f1 = 1;
                do {
                    f2 += (((f1 * i18) + i19) - Test.sFld);
                    for (i20 = 1; i20 > 1; --i20) {
                        Test.byFld *= (byte)48;
                        i19 %= (int)(i21 | 1);
                        sArr[(int)(f1)] -= (short)Test.iFld;
                        if (Test.bFld) continue;
                        i19 += (i20 * i20);
                        Test.iFld = (int)Test.instanceCount;
                        i21 = (int)Test.instanceCount;
                        i19 += (i20 * i20);
                        i19 = -51449;
                        iArr3[i20 + 1] <<= -14;
                    }
                    i21 *= i19;
                    i19 = i19;
                    i21 |= i19;
                    f2 += (0 + (f1 * f1));
                } while (++f1 < 148);
                for (i22 = 5; 148 > i22; ++i22) {
                    i19 += -13;
                }
                Test.iFld *= i19;
            }
            iArr3[(i23 >>> 1) % N] = (int)f2;
        }
        Test.dFld = Test.dFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
