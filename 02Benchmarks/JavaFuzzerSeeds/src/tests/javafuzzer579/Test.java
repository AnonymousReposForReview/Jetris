package tests.javafuzzer579;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:13:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static boolean bFld=false;
    public static byte byFld=-117;
    public float fFld=17.411F;
    public static double dFld=-88.24147;
    public static float fFld1=0.936F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 51102);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by, long l1) {

        int i5=-46778, i6=-2, i7=-65183;
        float f1=85.12F, fArr[][]=new float[N][N];
        long l2=-5503715724819083174L;

        FuzzerUtils.init(fArr, -18.986F);

        i5 -= (int)13L;
        f1 -= Test.instanceCount;
        i5 *= (int)f1;
        f1 -= f1;
        for (l2 = 2; l2 < 134; l2++) {
            fArr[(int)(l2 - 1)][(int)(l2)] += i5;
            i7 = 1;
            while (++i7 < 12) {
                double d=-1.33303;
                if (i7 != 0) {
                }
                fArr[i7 + 1][(int)(l2 + 1)] = i6;
                i6 += (i7 * i7);
                Test.bFld = true;
                i6 &= -53;
                d += i5;
                Test.iArrFld[i7 - 1] = -4993;
                d -= 13380;
            }
        }
        long meth_res = by + l1 + i5 + Float.floatToIntBits(f1) + l2 + i6 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, long l, int i2) {

        int i3=218, i4=-57138;
        float f=-1.527F;

        for (i3 = 17; 322 > i3; ++i3) {
            f -= 1.418F;
            iMeth((byte)(105), l);
        }
        vMeth1_check_sum += i1 + l + i2 + i3 + i4 + Float.floatToIntBits(f);
    }

    public static void vMeth(int i) {

        long l3=251L, lArr[]=new long[N];
        int i8=172, i9=27379, i10=-6, i11=20343;
        double d1=2.41049;

        FuzzerUtils.init(lArr, -1098077346686651024L);

        lArr = lArr;
        vMeth1(i, Test.instanceCount, i);
        i ^= Test.byFld;
        for (l3 = 16; l3 < 281; l3++) {
            try {
                i8 = (-22753 / i8);
                i8 = (221 % i8);
                i = (Test.iArrFld[(int)(l3)] / -75);
            } catch (ArithmeticException a_e) {}
            i8 = i;
            for (i9 = 1; i9 < 6; ++i9) {
                Test.instanceCount += 200;
                Test.iArrFld[(int)(l3 + 1)] -= (int)d1;
                d1 *= i;
                i8 += (int)(-1174425704731904390L + (i9 * i9));
                i -= i;
            }
            i10 += (5 + (l3 * l3));
            i10 >>= i9;
            i11 += (-97 + (l3 * l3));
        }
        vMeth_check_sum += i + l3 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=2, i13=208, i14=-47470, i15=-9, i16=3, i17=-4589, i18=14;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -72.18392);

        vMeth(i12);
        for (i13 = 175; i13 > 4; i13 -= 2) {
            i12 += (i13 * i13);
            dArr[i13] += -116;
            for (i15 = 295; i15 > 15; --i15) {
                Test.bFld = false;
                i12 += i14;
                fFld *= i12;
                for (i17 = 1; 2 > i17; i17++) {
                    i18 = i15;
                    i12 += (((i17 * i18) + i14) - i13);
                    i14 += (i17 * i17);
                    Test.instanceCount = i12;
                    switch ((i13 % 8) + 10) {
                    case 10:
                        Test.instanceCount += (13 + (i17 * i17));
                        break;
                    case 11:
                    case 12:
                        i16 += (int)fFld;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)29139);
                        break;
                    case 13:
                        lArrFld[i17 + 1] *= i17;
                        i14 = (int)Test.instanceCount;
                        break;
                    case 14:
                        if (Test.bFld) continue;
                        i14 *= (int)Test.dFld;
                        Test.iArrFld[i13 + 1] += (int)Test.dFld;
                        Test.instanceCount <<= i18;
                        break;
                    case 15:
                        Test.iArrFld[i13 + 1] = i13;
                        Test.fFld1 += (i17 * i18);
                        i14 >>= 241;
                        i14 *= (int)fFld;
                        break;
                    case 16:
                        i14 += i17;
                        i16 += i15;
                        Test.bFld = false;
                    case 17:
                        Test.byFld *= (byte)i18;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
