package tests.javafuzzer3454;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=628248011268222516L;
    public static int iFld=1;
    public static boolean bFld=true;
    public int iFld1=21;
    public short sFld=-18537;
    public int iFld2=-9;
    public static short sFld1=7192;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i8=-139, i9=146, i10=77, i11=-57916, i12=-5330, i13=5, iArr2[]=new int[N];
        float f=88.480F;
        double d2=-1.36023;

        FuzzerUtils.init(iArr2, 146);

        for (i8 = 5; i8 < 134; i8++) {
            if (Test.bFld) {
                i9 /= (int)(Test.iFld | 1);
            } else if (Test.bFld) {
                Test.iFld += (i8 * Test.instanceCount);
                for (i10 = 1; i10 < 12; ++i10) {
                    for (i12 = 1; i12 < 2; i12++) {
                        i11 -= (int)3616159091270754189L;
                        iArr2[i8] >>= -1047;
                        iArr2[i8] = (int)Test.instanceCount;
                        f = i11;
                        i9 -= i11;
                        i9 = Test.iFld;
                        i13 += i12;
                        Test.instanceCount /= (Test.iFld | 1);
                    }
                    i13 += (((i10 * i9) + Test.iFld) - i9);
                }
            } else {
                Test.instanceCount = (long)d2;
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(double d1, int i6, int i7) {

        long l=4108235825483885262L;
        int i15=-31137, iArr3[]=new int[N];
        byte by=72;
        float f1=-70.994F;
        short sArr[]=new short[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, 53989);
        FuzzerUtils.init(sArr, (short)8535);
        FuzzerUtils.init(bArr, true);

        vMeth2();
        for (int i14 : iArr3) {
            sArr = sArr;
            bArr[(i14 >>> 1) % N] = Test.bFld;
            i7 += i6;
            Test.bFld = false;
            Test.iFld -= i6;
        }
        l = 1;
        while (++l < 212) {
            i6 >>= Test.iFld;
            i15 = 1;
            while (++i15 < 8) {
                Test.iFld -= Test.iFld;
                iArr3[(int)(l - 1)] = 148;
                Test.iFld = Test.iFld;
                by += (byte)(i15 * i15);
                f1 = i15;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i6 + i7 + l + i15 + by + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(int i3, int i4, double d) {

        byte by1=-64;
        int i16=-98, i17=10, i18=-21381, i19=42833, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 14);

        for (int i5 : iArr1) {
            vMeth1(d, i5, Test.iFld);
            by1 *= (byte)i3;
            Test.iFld >>>= i3;
            Test.instanceCount += (long)d;
            iArr1 = iArr1;
            for (i16 = 1; 4 > i16; i16++) {
                if (i16 != 0) {
                    vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + by1 + i16 + i17 + i18 + i19 +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
                iArr1[i16] -= Test.iFld;
                by1 *= (byte)iFld1;
                i4 = iFld1;
                Test.iFld = (int)Test.instanceCount;
            }
            for (i18 = 1; i18 < 4; ++i18) {
                i3 += (i18 | iFld1);
                Test.iFld = (int)61.117335;
            }
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + by1 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=158, i1=-6184, i2=-4, i20=-7, i21=10, i22=208, i23=8, i24=6, i25=-555, i26=-52, iArr[]=new int[N];
        double d3=62.102065;
        float f2=0.793F;
        byte by2=-120;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -51424);
        FuzzerUtils.init(lArr, 5L);

        Test.instanceCount += (Test.iFld--);
        Test.iFld -= iArr[(Test.iFld >>> 1) % N];
        for (i = 8; 277 > i; ++i) {
            i2 = 1;
            do {
                if (Test.bFld) {
                    vMeth(i1, -30336, d3);
                    iFld1 -= (int)f2;
                } else if (Test.bFld) {
                    for (i20 = 1; 1 > i20; ++i20) {
                        i21 = i20;
                    }
                } else if (Test.bFld) {
                    Test.instanceCount += (long)f2;
                    i22 = 1;
                    do {
                        iFld1 *= sFld;
                        Test.instanceCount = Test.iFld;
                        f2 -= i;
                        Test.instanceCount += (i22 + i1);
                    } while (++i22 < 1);
                    i23 = 1;
                    do {
                        i21 <<= i23;
                    } while (++i23 < 1);
                    by2 -= (byte)Test.instanceCount;
                }
                iFld1 += iFld1;
                i21 += iFld2;
                by2 += (byte)(((i2 * f2) + Test.instanceCount) - i20);
                for (i24 = 1; i24 > 1; --i24) {
                    sFld >>>= (short)Test.instanceCount;
                    switch ((i24 % 2) + 119) {
                    case 119:
                        i21 += iFld2;
                    case 120:
                        Test.iFld -= (int)Test.instanceCount;
                        Test.sFld1 += (short)(((i24 * by2) + i23) - i23);
                        iArr[i24] *= i26;
                        i1 = i;
                    }
                    lArr[i2] = -95;
                }
            } while (++i2 < 93);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
