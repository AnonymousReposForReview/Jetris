package tests.javafuzzer3240;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:24:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1402276863L;
    public static int iFld=5280;
    public static double dFld=98.94651;
    public static float fFld=2.440F;
    public static short sFld=17300;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)21206);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1) {

        int i19=-84, i20=-149, i21=12, i22=-16, i23=11, iArr1[]=new int[N];
        byte by2=-48;
        boolean b=true;
        short s2=-29238;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, 164);
        FuzzerUtils.init(lArr2, 3000L);

        i19 = 1;
        while (++i19 < 135) {
            Test.iFld = i19;
            if (b) {
                for (i20 = 12; i20 > 1; i20 -= 2) {
                    i22 = 1;
                    while (++i22 < 3) {
                        i21 = Test.iFld;
                        Test.dFld = f1;
                        switch (((i21 >>> 1) % 9) + 35) {
                        case 35:
                            try {
                                Test.iFld = (-20905 / i21);
                                Test.iFld = (Test.iFld % -56340);
                                iArr1[i19] = (Test.iFld / -2004173932);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 36:
                            i21 += (i22 - by2);
                        case 37:
                            b = b;
                            if (b) continue;
                            lArr2[i20] += 91L;
                        case 38:
                            Test.dFld *= s2;
                            i21 += (((i22 * i19) + i22) - Test.instanceCount);
                            break;
                        case 39:
                            Test.iFld >>= Test.iFld;
                            break;
                        case 40:
                            iArr1[i20 - 1] |= (int)Test.instanceCount;
                            break;
                        case 41:
                            Test.instanceCount <<= by2;
                            break;
                        case 42:
                            i23 -= i20;
                            break;
                        case 43:
                            i21 += (i22 * i23);
                        default:
                            Test.instanceCount = Test.iFld;
                        }
                    }
                }
            } else {
                i23 *= (int)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i19 + i20 + i21 + i22 + by2 + (b ? 1 : 0) + s2 + i23 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(short s1, int i13) {

        int i14=-10312, i15=11, i16=14, i17=-36245, i18=-38467;
        byte by1=-118;
        boolean b2=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -43535L);

        for (i14 = 135; i14 > 2; --i14) {
            Test.instanceCount *= 27267;
            Test.sArrFld = (Test.sArrFld = (Test.sArrFld = (Test.sArrFld = Test.sArrFld)));
            switch (((i14 % 1) * 5) + 112) {
            case 113:
                Test.instanceCount = (by1 >>= (byte)(++lArr1[i14 - 1]));
                for (i16 = 12; i16 > 1; --i16) {
                    boolean b1=true;
                    i18 = 1;
                    while ((i18 += 3) < 2) {
                        lArr1[i14] = (Integer.reverseBytes(i17) | lMeth(Test.fFld));
                        if (i15 != 0) {
                            vMeth1_check_sum += s1 + i13 + i14 + i15 + by1 + i16 + i17 + i18 + (b2 ? 1 : 0) +
                                FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                        i17 ^= i18;
                    }
                    Test.instanceCount = Test.instanceCount;
                    if (b1) {
                        if (true) break;
                    } else if (b1) {
                        i15 *= Test.iFld;
                        Test.instanceCount += (i16 ^ Test.instanceCount);
                        vMeth1_check_sum += s1 + i13 + i14 + i15 + by1 + i16 + i17 + i18 + (b2 ? 1 : 0) +
                            FuzzerUtils.checkSum(lArr1);
                        return;
                    } else if (b2) {
                        if (false) continue;
                    } else {
                        Test.dFld = i15;
                    }
                }
                break;
            }
        }
        vMeth1_check_sum += s1 + i13 + i14 + i15 + by1 + i16 + i17 + i18 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(short s, int i6, long l) {

        int i7=40869, i8=-7, i9=6, i10=59594, i11=25, i12=30328, iArr[]=new int[N];
        byte by=-18;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 536582648448306185L);
        FuzzerUtils.init(iArr, 66);

        for (i7 = 6; 211 > i7; i7++) {
            for (i9 = 1; i9 < 8; ++i9) {
                i6 <<= (i6++);
                i6 *= (int)l;
                for (i11 = 1; i11 < 2; i11++) {
                    i8 += (96 + (i11 * i11));
                    lArr[i7] = (++i10);
                    iArr[i7 - 1] = (-58 + (i10 + (++i8)));
                    i6 = (int)Math.min(Short.reverseBytes(s) * (by++), Long.reverseBytes(--Test.instanceCount));
                }
                vMeth1((short)(-5574), i7);
                i8 += i9;
                Test.instanceCount = -49005;
            }
            Test.fFld += i8;
            i12 += (i7 * i7);
        }
        i10 ^= i10;
        vMeth_check_sum += s + i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + by + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-155, i2=103, i3=238, i4=-10, i5=-18861, iArr2[][]=new int[N][N];
        byte by3=-55;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 1);
        FuzzerUtils.init(dArr, 0.79390);

        for (i = 6; 172 > i; ++i) {
            for (i2 = i; i2 < 151; ++i2) {
                float f=-105.901F;
                f -= (i + i2);
                for (i4 = 1; i4 > 1; i4--) {
                    f = (i1 - i5);
                    vMeth(Test.sFld, 8, Test.instanceCount);
                    Test.instanceCount = 3594678922050187491L;
                    i1 += i4;
                    i3 += (-64235 + (i4 * i4));
                    Test.iFld += (i4 ^ Test.instanceCount);
                    switch (((i % 6) * 5) + 19) {
                    case 38:
                        iArr2[i4 - 1][i + 1] += i2;
                        f += (((i4 * Test.instanceCount) + Test.instanceCount) - by3);
                        i1 += (i4 * i4);
                        i1 >>= (int)Test.instanceCount;
                        break;
                    case 45:
                        Test.instanceCount = i4;
                        f += Test.instanceCount;
                    case 37:
                        Test.instanceCount >>= 6;
                        break;
                    case 44:
                        Test.instanceCount += (((i4 * i3) + Test.instanceCount) - i3);
                        i1 -= i1;
                        dArr = dArr;
                        i5 += (((i4 * i) + i3) - Test.fFld);
                        break;
                    case 23:
                        Test.instanceCount = 7;
                        f += -12;
                    case 31:
                        iArr2[i2][i + 1] <<= i1;
                        break;
                    default:
                        iArr2[i2][i] -= (int)Test.dFld;
                        Test.dFld = i1;
                    }
                    Test.instanceCount += i4;
                    i3 += i4;
                }
                Test.instanceCount <<= 14;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
