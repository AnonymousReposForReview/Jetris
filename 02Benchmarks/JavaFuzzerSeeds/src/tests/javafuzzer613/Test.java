package tests.javafuzzer613;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:34:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public float fFld=-89.339F;
    public static double dFld=96.80834;
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -242);
        FuzzerUtils.init(Test.sArrFld, (short)-13318);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f1=-62.245F;
        int i8=-3, i9=11, i10=89, i11=-3, i12=1524, i13=77, i14=-25647, iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-20495);
        FuzzerUtils.init(iArr, -9);

        f1 -= i8;
        i8 = i8;
        i8 = (int)-52L;
        switch (((19659 >>> 1) % 3) + 92) {
        case 92:
            Test.instanceCount = 52096;
            break;
        case 93:
            sArr[(i8 >>> 1) % N] >>= (short)i8;
            break;
        case 94:
        default:
            for (i9 = 9; i9 < 373; ++i9) {
                for (i11 = 1; 5 > i11; i11++) {
                    i8 += (int)Test.dFld;
                    i10 >>>= i11;
                    i12 <<= (int)Test.instanceCount;
                    for (i13 = 1; i13 < 2; ++i13) {
                        i10 -= i12;
                        i12 *= i11;
                        iArr[i13 + 1] += i12;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        int i7=187, i15=-203, i16=-252, i17=-190, i18=64602, iArr1[]=new int[N];
        float f=75.714F;
        byte by1=-126;
        long l1=23L;

        FuzzerUtils.init(iArr1, 33077);

        i7 = 1;
        do {
            f += ((-120.59F * (f + f)) - iMeth());
            i5 >>>= (int)Test.instanceCount;
            i5 = i7;
            by1 -= (byte)i5;
            Test.instanceCount = i5;
            for (i15 = 1; i15 < 7; ++i15) {
                iArr1[i7] = i16;
                i6 *= by1;
                iArr1 = FuzzerUtils.int1array(N, (int)231);
                Test.instanceCount *= i15;
                switch ((i15 % 9) + 37) {
                case 37:
                    for (i17 = 2; i17 > 1; --i17) {
                        i16 += i17;
                        i18 -= i16;
                    }
                    break;
                case 38:
                    i16 >>>= i5;
                case 39:
                case 40:
                    iArr1[i7 - 1] -= 111;
                    break;
                case 41:
                    i6 = i18;
                case 42:
                    Test.instanceCount = i18;
                    break;
                case 43:
                case 44:
                    by1 = (byte)i17;
                case 45:
                    Test.instanceCount &= i6;
                    break;
                default:
                    i6 &= (int)l1;
                }
            }
        } while (++i7 < 226);
        vMeth_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f) + by1 + i15 + i16 + i17 + i18 + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i4) {

        int i19=-61420, i20=-16585, i21=-12, i22=-6;
        byte by2=4, byArr[]=new byte[N];
        float f2=0.834F, f3=28.42F;
        double d=-7.79806;

        FuzzerUtils.init(byArr, (byte)54);

        vMeth(-44258, i4);
        i4 &= i4;
        i4 += (int)Test.instanceCount;
        i4 = i4;
        i19 = 283;
        do {
            by2 = (byte)i19;
            f2 = i4;
            f2 -= i19;
            i4 = (int)f2;
            i20 = 1;
            while (++i20 < 6) {
                i4 >>= i20;
            }
            d = 1;
            while (++d < 6) {
                for (i21 = 1; 1 < i21; i21--) {
                    Test.instanceCount += (long)f3;
                    byArr[i21 - 1] = (byte)-21046;
                }
            }
        } while (--i19 > 0);
        long meth_res = i4 + i19 + by2 + Float.floatToIntBits(f2) + i20 + Double.doubleToLongBits(d) + i21 + i22 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i1=245, i2=53, i3=-216, i23=59733, i24=81, i25=37163, i26=-17945;
        long l=-5L, lArr[]=new long[N];
        byte by=-40;
        boolean b=false;
        short s=9641;

        FuzzerUtils.init(lArr, 2475190952L);

        fFld = Short.reverseBytes((short)((i - i) + (Test.instanceCount - Test.instanceCount)));
        for (l = 11; l < 232; ++l) {
            for (i2 = (int)(l); i2 < 114; ++i2) {
                fFld = (-(++Test.instanceCount));
                i3 = (int)Math.abs(Math.abs(l + Test.instanceCount));
                byArrFld[(int)(l)] = (byte)(-((6 - Test.instanceCount) - (by + i1)));
                lArr = (lArr = (lArr = (lArr = lArr)));
                i1 += (((i2 * i2) + i1) - i);
                b = b;
                s += (short)(lMeth(-7225) - i1);
                Test.iArrFld[(int)(l + 1)] = i3;
            }
            for (i23 = 7; i23 < 114; i23++) {
                for (i25 = 1; i25 < 2; ++i25) {
                    i26 += (i25 | (long)fFld);
                    fFld += (i25 - i);
                    s *= s;
                    i24 >>= i2;
                    i3 -= 132;
                    switch ((i25 % 2) + 48) {
                    case 48:
                        Test.sArrFld[(int)(l + 1)] += (short)i25;
                        Test.iArrFld[(int)(l)] = i26;
                        i1 *= i2;
                        break;
                    case 49:
                        switch (((i25 >>> 1) % 3) + 11) {
                        case 11:
                            i1 = 12126;
                        case 12:
                            lArr[(int)(l + 1)] -= i;
                            i24 -= (int)Test.dFld;
                            switch ((int)(((l % 2) * 5) + 97)) {
                            case 102:
                                Test.instanceCount += (((i25 * i2) + i1) - i);
                                Test.instanceCount %= 43254;
                                s ^= (short)-3565;
                            case 100:
                                Test.instanceCount = i23;
                                break;
                            default:
                                Test.instanceCount -= -3953;
                            }
                            break;
                        case 13:
                            fFld -= i24;
                            break;
                        default:
                            by = (byte)i25;
                        }
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
