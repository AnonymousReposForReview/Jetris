package tests.javafuzzer903;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:25:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public boolean bFld=true;
    public double dFld=108.35385;
    public int iFld=-11;
    public float fFld=1.138F;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, float f1) {

        int i3=20081, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -62783);

        i3 >>= i3;
        iArr1[(i3 >>> 1) % N][(i3 >>> 1) % N] += i3;
        long meth_res = l + Float.floatToIntBits(f1) + i3 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public boolean bMeth(float f) {

        int i2=2154, i4=61436, i5=6, i6=209, i7=-232, i8=9, i9=220;
        long l1=0L;
        short s=-23363;
        byte by1=111, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-10);

        i2 -= iMeth1(Test.instanceCount, f);
        for (l1 = 4; l1 < 391; l1 += 2) {
            for (i5 = 1; i5 < 8; ++i5) {
                Test.instanceCount *= 1;
                f *= Test.instanceCount;
                Test.instanceCount += (i5 * i5);
                f -= i2;
                for (i7 = i5; 2 > i7; i7++) {
                    if (false) {
                        s = (short)i6;
                        by1 += (byte)(((i7 * i9) + i8) - i5);
                    } else {
                        bFld = bFld;
                        return ((int)(Float.floatToIntBits(f) + i2 + l1 + i4 + i5 + i6 + i7 + i8 + s + by1 + i9 +
                            FuzzerUtils.checkSum(byArr))) % 2 > 0;
                    }
                    i4 += (((i7 * i7) + f) - i2);
                    if (bFld) continue;
                    byArr[i7] |= (byte)49268;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + l1 + i4 + i5 + i6 + i7 + i8 + s + by1 + i9 +
            FuzzerUtils.checkSum(byArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public int iMeth(int i, byte by, int i1) {

        float f2=25.120F;
        int i10=49187, i11=-2, i12=43, i14=31698, i15=-5, iArr[]=new int[N];
        short s1=-25972;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 25474);
        FuzzerUtils.init(dArr, -61.88057);

        iArr = (iArr = (iArr = iArr));
        bFld = (bMeth(f2) != bFld);
        iArr[(i >>> 1) % N] += i1;
        i10 = 1;
        do {
            i *= i;
            for (i11 = 1; 8 > i11; i11++) {
                Test.instanceCount = Test.instanceCount;
            }
        } while ((i10 += 2) < 376);
        for (int i13 : iArr) {
            Test.instanceCount += 597L;
            lArrFld[(-14575 >>> 1) % N] *= i13;
            switch ((((i11 >>> 1) % 2) * 5) + 59) {
            case 60:
                for (i14 = 1; i14 < 4; ++i14) {
                    iArr[(i10 >>> 1) % N] = i14;
                    Test.instanceCount = 239;
                    i += (int)dFld;
                }
            case 61:
                lArrFld[(i >>> 1) % N] = s1;
                break;
            default:
                dArr = dArr;
            }
        }
        long meth_res = i + by + i1 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i14 + i15 + s1 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=119;
        int i16=-5202, i17=3, i18=13, i19=213, i20=-232, i21=-60783, i22=235, i23=9266, i24=249, iArr2[][]=new
            int[N][N];
        short s2=31881;
        boolean bArr[]=new boolean[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr1, 0.47863);
        FuzzerUtils.init(iArr2, -2058);

        iMeth(iFld, by2, -8);
        iFld <<= iFld;
        Test.instanceCount -= Test.instanceCount;
        fFld += 65;
        Test.instanceCount *= -3260;
        iFld += (int)Test.instanceCount;
        iFld ^= iFld;
        by2 = (byte)-4634150301065078078L;
        for (i16 = 1; i16 < 287; i16++) {
            for (i18 = 5; 88 > i18; i18++) {
                bArr[i18] = bFld;
                iFld += i16;
            }
            lArrFld[i16 + 1] |= Test.instanceCount;
            i20 = 1;
            while (++i20 < 88) {
                dArr1[i20] += i16;
                Test.instanceCount -= Test.instanceCount;
                iFld += (int)Test.instanceCount;
                i17 >>= i19;
                dArr1[i20 - 1] *= i20;
                fFld = 6;
            }
        }
        for (i21 = 10; 256 > i21; ++i21) {
            i17 += (i21 + s2);
            Test.instanceCount += (i21 * i21);
            iArr2[i21][i21] -= (int)dFld;
            for (i23 = 6; i23 < 102; i23++) {
                iArr2[i23 - 1][i23] += (int)fFld;
                i19 = i17;
                Test.instanceCount += i23;
                s2 = (short)-3432453139574191761L;
                iArr2[i21] = iArr2[i23];
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
