package tests.javafuzzer3251;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:35:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1484488733L;
    public static int iFld=-12;
    public static float fFld=105.362F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        short s=-6965;

        s *= (short)(Short.reverseBytes((short)(s += (short)Test.iFld)) + ((Test.iFld + Test.iFld) - (Test.iFld -
            Test.instanceCount)));
        vSmallMeth_check_sum += s;
    }

    public static int iMeth1(short s2, long l1, int i15) {

        float f1=17.933F, f2=18.817F;
        int i16=-23, i17=-8748;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 31908L);

        for (f1 = 15; f1 < 243; f1++) {
            l1 = Test.iFld;
            Test.fFld = 2.923F;
            i16 -= Test.iFld;
            for (f2 = f1; f2 < 7; f2++) {
                Test.fFld *= -952461688831707138L;
                lArr[(int)(f2 + 1)][(int)(f1 - 1)] += Test.iFld;
                i15 += (int)l1;
                Test.iArrFld[(int)(f1)] >>= -8;
                i17 += s2;
            }
            if (true) break;
            Test.instanceCount = i15;
            Test.iFld *= (int)Test.fFld;
            Test.instanceCount *= i17;
        }
        i16 = i15;
        long meth_res = s2 + l1 + i15 + Float.floatToIntBits(f1) + i16 + Float.floatToIntBits(f2) + i17 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i8=-89, i9=172, i10=0, i11=96, i12=37403, i13=11932, i14=62787, i18=-39024, i19=-12328;
        double d1=-100.43916;
        short s1=12702;

        for (i8 = 12; 340 > i8; ++i8) {
            Test.instanceCount = (long)(Test.instanceCount - d1);
            Test.fFld = (Test.instanceCount * ((221 + Math.max(i9, i9)) + (Test.instanceCount * i8)));
        }
        for (i10 = 19; i10 < 327; i10++) {
            Test.instanceCount += (s1--);
            for (i12 = 1; i12 < 5; ++i12) {
                i14 = 1;
                while (++i14 < 2) {
                    if ((Test.instanceCount *= Test.iArrFld[i10]) != Math.max(iMeth1(s1, Test.instanceCount, 55716),
                        i12)) continue;
                    Test.fFld += (((i14 * s1) + i8) - i9);
                    Test.instanceCount = (long)Test.fFld;
                }
                d1 = d1;
                i11 = i13;
            }
            for (i18 = 1; i18 < 5; i18++) {
                Test.instanceCount -= s1;
                Test.fFld += (i18 * i8);
            }
        }
        vMeth_check_sum += i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + s1 + i12 + i13 + i14 + i18 + i19;
    }

    public static int iMeth(long l, int i2, int i3) {

        int i4=-14, i5=-166, i6=16867, i7=-234, i20=-44512, i21=-12;
        double d2=-14.109382;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, -10L);
        FuzzerUtils.init(bArr, true);

        for (i4 = 2; 263 > i4; i4++) {
            for (i6 = 1; i6 < 6; i6++) {
                vMeth();
                for (i20 = 1; 2 > i20; ++i20) {
                    Test.iArrFld[i4 + 1] *= i5;
                    l -= i4;
                    Test.instanceCount += (((i20 * i20) + i4) - Test.iFld);
                    lArr1 = lArr1;
                    Test.instanceCount -= l;
                    i3 >>= 197;
                    if (Test.bFld) {
                        Test.fFld *= (float)d2;
                        bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                        i3 -= (int)l;
                        i5 = i20;
                    } else if (Test.bFld) {
                        i3 += (int)-8L;
                    } else {
                        Test.instanceCount -= i21;
                    }
                }
            }
        }
        long meth_res = l + i2 + i3 + i4 + i5 + i6 + i7 + i20 + i21 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-35.181F;
        int i=133, i1=240, i22=-129, i23=-57956;
        double d=2.6024;

        for (int smallinvoc=0; smallinvoc<790; smallinvoc++) vSmallMeth();
        f = (Math.max((long)(f + Test.iFld), Test.instanceCount) + (-2.108F * Test.instanceCount));
        for (i = 14; i < 366; i++) {
            d /= ((((i % (Test.instanceCount | 1)) + iMeth(Test.instanceCount, i, Test.iFld)) + i1) | 1);
        }
        for (i22 = 177; i22 > 6; i22 -= 3) {
            i23 = (int)Test.instanceCount;
            Test.iFld = -13;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
