package tests.javafuzzer834;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:37:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1446422485754852257L;
    public static boolean bFld=true;
    public static float fFld=-2.549F;
    public static int iFld=3;
    public short sFld=1038;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth(int i1, double d, int i2) {

        int i3=12, iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.74957);
        FuzzerUtils.init(iArr1, -1);

        i3 = 1;
        do {
            i2 -= 6;
        } while (++i3 < 221);
        dArr[(i3 >>> 1) % N] = (i3 + (iArr1[(i1 >>> 1) % N] * (i2 + d)));
        i2 = (i3 >> i1);
        i1 += (iArr1[(i2 >>> 1) % N] %= (int)(i3 | 1));
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i3 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth1(float f, float f1, int i15) {

        long l1=2L;
        int i16=209, i17=-70, i18=179, i19=3, i20=228, i21=-4, iArr3[]=new int[N];
        double d2=-59.121919;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, 46718);
        FuzzerUtils.init(bArr, true);

        i15 += (int)l1;
        i16 = 1;
        while (++i16 < 201) {
            for (i17 = 1; i17 < 8; i17++) {
                i15 += i17;
                switch (((i17 >>> 1) % 5) + 34) {
                case 34:
                    for (i19 = i16; i19 < 2; i19++) {
                        i20 = i16;
                    }
                    i20 += (i17 - f1);
                    break;
                case 35:
                    iArr3[i17 + 1] <<= (int)Test.instanceCount;
                    switch ((i17 % 6) + 75) {
                    case 75:
                        iArr3[i17 - 1] >>>= (int)l1;
                        i21 = 1;
                        while (++i21 < 2) {
                            i15 = i21;
                            i20 *= (int)d2;
                            i15 += i20;
                        }
                        break;
                    case 76:
                        i18 += (i17 * i20);
                    case 77:
                        i20 -= i21;
                        break;
                    case 78:
                        i18 = i20;
                        break;
                    case 79:
                        i20 = -46927;
                    case 80:
                        l1 += (long)f;
                    default:
                        i18 += i17;
                    }
                case 36:
                    f1 = -12;
                case 37:
                    i15 = i20;
                    break;
                case 38:
                    bArr[i16 + 1] = Test.bFld;
                    break;
                default:
                    iArr3[i16 + 1] |= i17;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i15 + l1 + i16 + i17 + i18 + i19 + i20 +
            i21 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(short s, long l) {

        int i8=64, i9=-7, i10=55524, i11=36633, i12=-53569, i13=1, i14=-65367, iArr2[]=new int[N];
        byte by=68;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 4061616638L);
        FuzzerUtils.init(iArr2, -167);
        FuzzerUtils.init(sArr, (short)-25499);

        i8 += (int)Math.abs(--lArr[(i8 >>> 1) % N]);
        for (i9 = 12; i9 < 241; i9++) {
            for (i11 = 1; i11 < 7; i11++) {
                for (i13 = 2; i13 > 1; i13 -= 2) {
                    i10 += (((i13 * i13) + Test.instanceCount) - i14);
                    Test.bFld = (((-2573901439L + iArr2[i9 + 1]) + Test.instanceCount) >= -136);
                    by += (byte)i13;
                }
                i10 ^= i9;
                iArr2[i9] *= Integer.reverseBytes((int)(Integer.reverseBytes(i12) + lMeth1(Test.fFld, Test.fFld, i14)));
                i12 |= by;
            }
        }
        for (short s1 : sArr) {
            Test.instanceCount |= i13;
            by -= (byte)l;
            Test.fFld *= i11;
            Test.instanceCount <<= i11;
        }
        long meth_res = s + l + i8 + i9 + i10 + i11 + i12 + i13 + i14 + by + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i) {

        double d1=120.65387;
        int i4=29, i5=-188, i6=116, i7=4, i22=41330, i23=0, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -172);

        iArr[(i >>> 1) % N] = (int)((lMeth(i, d1, -9) + (Test.instanceCount * i)) / (((long)(i + (Test.instanceCount -
            -114.208F))) | 1));
        for (i4 = 6; i4 < 246; ++i4) {
            for (i6 = 1; i6 < 7; i6++) {
                iArr[i4 + 1] -= (int)(++Test.instanceCount);
                i /= (int)((byMeth((short)(14947), -6644860743012938216L) + 29200) | 1);
                for (i22 = 2; i22 > 1; i22 -= 3) {
                    i += (i22 + i6);
                    if (i != 0) {
                        vMeth_check_sum += i + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i22 + i23 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount += i22;
                    i += i22;
                    Test.fFld += (i22 * i22);
                    i = (int)Test.fFld;
                    Test.fFld = Test.instanceCount;
                    i5 = i7;
                    i7 ^= 20942;
                }
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i22 + i23 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i24=45702, i25=-137, i26=-146, i27=-7, i28=-49781, i29=57984, i30=-53946, i31=2, i32=54852;
        double d3=0.46091;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, -2449946567L);
        FuzzerUtils.init(fArr, -58.887F);

        vMeth(Test.iFld);
        for (i24 = 2; i24 < 121; ++i24) {
            for (i26 = 3; i26 < 211; i26++) {
                for (i28 = 1; i28 < 2; i28++) {
                    i29 = i27;
                    i29 = i26;
                    Test.iFld += (((i28 * i28) + i29) - Test.instanceCount);
                }
                Test.instanceCount = i24;
                if (Test.bFld) {
                    for (i30 = 1; i30 < 2; i30++) {
                        switch ((i24 % 6) + 40) {
                        case 40:
                            if (false) break;
                            iArrFld[i26 + 1] = 76;
                            if (Test.bFld) continue;
                        case 41:
                            lArr1[i24] -= -5;
                            i29 >>= (int)Test.instanceCount;
                            iArrFld[i26 + 1] >>= i31;
                            break;
                        case 42:
                            Test.fFld = Test.instanceCount;
                            Test.iFld += (int)Test.instanceCount;
                            fArr[i30 - 1] = Test.iFld;
                            break;
                        case 43:
                            d3 = d3;
                            try {
                                i32 = (-946258630 % i28);
                                Test.iFld = (-4 / i31);
                                i25 = (-40 % i31);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 44:
                            Test.iFld += (((i30 * i31) + i24) - i32);
                            switch (((i26 % 9) * 5) + 64) {
                            case 92:
                                switch (((i30 % 3) * 5) + 44) {
                                case 58:
                                case 53:
                                    Test.fFld = -34.643F;
                                    i25 *= (int)Test.instanceCount;
                                    Test.instanceCount = i25;
                                    i29 += sFld;
                                    break;
                                case 57:
                                    Test.instanceCount += i27;
                                    break;
                                }
                                break;
                            case 101:
                                iArrFld[i26 - 1] = (int)d3;
                            case 73:
                                i25 = 1600;
                                break;
                            case 108:
                            case 88:
                            case 91:
                                i29 >>>= (int)Test.instanceCount;
                                break;
                            case 104:
                                i27 -= Test.iFld;
                                break;
                            case 85:
                                i29 <<= i29;
                                break;
                            case 100:
                                Test.bFld = true;
                                break;
                            }
                            break;
                        case 45:
                            i31 += sFld;
                        }
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
