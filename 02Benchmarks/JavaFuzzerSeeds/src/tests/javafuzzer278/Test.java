package tests.javafuzzer278;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:09:28 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1L;
    public static byte byFld=71;
    public static short sFld=31947;
    public static int iFld=-76;
    public static volatile float fFld=-1.963F;
    public static volatile boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, float f2) {

        double d1=0.40783;
        boolean b1=true;
        int i9=32401, i10=43834, i11=147, i12=38979;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.515F);

        d1 = 1;
        do {
            i8 = (int)f2;
            i8 += (int)((long)d1 ^ i8);
        } while (++d1 < 283);
        i8 = i8;
        Test.sFld = (short)i8;
        fArr[(i8 >>> 1) % N] /= 236;
        b1 = b1;
        f2 = 245;
        i8 >>= (int)Test.instanceCount;
        for (i9 = 10; i9 < 354; ++i9) {
            for (i11 = i9; i11 < 5; ++i11) {
                i10 += i12;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount *= (long)110.7727;
                f2 += i8;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i9 + i10 + i11 +
            i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d, int i3, int i4) {

        float f1=0.673F;
        int i5=-5, i6=-51202, i7=32, i13=-118, i14=-159, iArr[]=new int[N];
        boolean b=false;
        double dArr[]=new double[N];
        byte byArr[]=new byte[N], byArr1[][]=new byte[N][N];

        FuzzerUtils.init(dArr, 1.42749);
        FuzzerUtils.init(byArr, (byte)-17);
        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(byArr1, (byte)92);

        dArr[(i4 >>> 1) % N] = ((i4 *= (int)Float.intBitsToFloat(i4)) % (Test.byFld | 1));
        try {
            byArr[(i3 >>> 1) % N] = (byte)(--Test.instanceCount);
            for (f1 = 8; f1 < 291; f1++) {
                if (b || (((false || (b = true)) && (b || b)) == Test.bArrFld[(int)(f1 - 1)])) continue;
                for (i6 = 6; 1 < i6; --i6) {
                    iMeth(i7, f1);
                    iArr[(int)(f1)] -= (int)f1;
                    d -= i3;
                    byArr1 = byArr1;
                    for (i13 = 1; i13 < 2; ++i13) {
                        Test.instanceCount *= -7L;
                        dArr = dArr;
                        d *= Test.instanceCount;
                        Test.instanceCount += (22552 + (i13 * i13));
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            iArr[(i13 >>> 1) % N] = Test.sFld;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f1) + i5 + (b ? 1 : 0) + i6 +
            i7 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr1);
    }

    public static void vMeth(long l, int i, int i1) {

        float f=0.177F, fArr1[]=new float[N];
        int i2=117, i15=2, i16=12, iArr1[]=new int[N];
        double d2=0.124908;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1578045649L);
        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(fArr1, 1.602F);

        lArr[(i >>> 1) % N] *= (long)(((++f) + (-165 + (48.36126 + i1))) * (l >>>= (i + 100)));
        i2 = 1;
        do {
            i1 <<= (++i1);
            vMeth1(d2, i1, i2);
            iArr1[i2] += i;
        } while (++i2 < 274);
        i1 -= 135;
        fArr1[(i >>> 1) % N] -= 11;
        for (long l1 : lArr) {
            i1 += (int)-1.69734;
            for (i15 = 1; i15 < 4; ++i15) {
                iArr1[i15] = i1;
                i1 -= (int)d2;
                i >>= i;
                Test.byFld ^= (byte)i;
                f += i15;
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d2) + i15 + i16 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i17=-148, i18=245, i19=1, i20=14773, i21=-18230, i22=-45043, i23=184, i24=244;
        double d3=-67.79226, d4=0.37958;
        float f3=119.884F;

        vMeth(Test.instanceCount, Test.iFld, Test.iFld);
        Test.iFld += Test.iFld;
        Test.iFld += i17;
        i17 = Test.iFld;
        for (i18 = 174; i18 > 4; i18--) {
            d3 += Test.iFld;
            Test.instanceCount = Test.instanceCount;
            for (i20 = 8; i20 < 148; ++i20) {
                d3 = d3;
                i17 += (int)Test.instanceCount;
                i17 ^= Test.byFld;
                i17 += (int)Test.fFld;
            }
            iArrFld = iArrFld;
            i19 = (int)Test.fFld;
            for (i22 = 3; i22 < 148; ++i22) {
                i23 += (145 + (i22 * i22));
                iArrFld[i22 + 1] += i19;
                Test.fFld += i20;
            }
            for (d4 = i18; d4 < 148; ++d4) {
                f3 = 1;
                do {
                    if (true) break;
                    i17 -= i20;
                    i21 = i20;
                    switch (((127 >>> 1) % 2) + 29) {
                    case 29:
                        i21 = (int)-54948L;
                    case 30:
                        Test.instanceCount = Test.instanceCount;
                        Test.byFld -= (byte)i23;
                        break;
                    }
                    iArrFld[i18] *= i23;
                    Test.instanceCount = i24;
                    i23 = (int)Test.instanceCount;
                } while (++f3 < 1);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
