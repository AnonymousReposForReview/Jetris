package tests.javafuzzer3265;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:10:50 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12L;
    public static float fFld=-63.214F;
    public static int iFld=-14;
    public static volatile boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i3=-31880, i4=-22670, i5=-133, i6=-11, i7=14, i8=13, i9=0, iArr[][]=new int[N][N];
        double d1=26.43699;
        boolean b=false;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr, 33375);
        FuzzerUtils.init(sArr, (short)12369);

        iArr[(i3 >>> 1) % N][(i3 >>> 1) % N] = i3;
        if (b) {
            Test.instanceCount = (long)d1;
            for (i4 = 13; i4 < 237; ++i4) {
                for (i6 = 1; i6 < 7; ++i6) {
                    i3 <<= (int)-194L;
                    sArr[i4][i4 + 1] = (short)-25226;
                    i3 *= (int)-183L;
                    i5 -= i4;
                    for (i8 = 1; i8 < 2; i8++) {
                        Test.instanceCount -= Test.instanceCount;
                        if (b) {
                            iArr[i8][i4] = (int)Test.fFld;
                        } else {
                            Test.instanceCount = i4;
                            if (b) break;
                        }
                    }
                }
            }
        } else {
            i3 = (int)Test.instanceCount;
        }
        long meth_res = i3 + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, double d, int i2) {

        int i10=118;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5672711053821718441L);

        d -= (lArr[(i2 >>> 1) % N] + (lMeth() * i2));
        i10 = 1;
        do {
            i2 = i2;
            i2 += (int)(244L + (i10 * i10));
        } while (++i10 < 160);
        long meth_res = l + Double.doubleToLongBits(d) + i2 + i10 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=165, i1=-238, i11=41548, i12=22034, i13=200, i14=42087, iArr1[]=new int[N];
        short s=19758;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2447472076L);
        FuzzerUtils.init(iArr1, -2);

        for (i = 8; i < 128; ++i) {
            i1 += (-83 + (i * i));
            Test.instanceCount += (i | i1);
            iMeth(Test.instanceCount, 1.19557, i1);
            i1 >>= i;
        }
        i11 = 1;
        while (++i11 < 388) {
            i12 = 1;
            while (++i12 < 4) {
                Test.fFld += i12;
                lArr1[i12 + 1] = Test.instanceCount;
                Test.fFld += i12;
            }
            for (i13 = 1; 4 > i13; i13++) {
                i1 *= s;
            }
            Test.instanceCount += i11;
            try {
                iArr1[i11] = (-150 / i1);
                iArr1[i11 - 1] = (-46271 % i1);
                i1 = (-52691 % i12);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += i11;
        }
        vMeth_check_sum += i + i1 + i11 + i12 + i13 + i14 + s + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i15=-6489, i16=-73, i17=-42911, i18=7, i19=0, i20=11, i21=-25, i22=4, iArr2[]=new int[N];
        short s1=-15656;
        long lArr2[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr2, -156L);
        FuzzerUtils.init(iArr2, 48);
        FuzzerUtils.init(bArr, true);

        vMeth();
        lArr2[(Test.iFld >>> 1) % N] -= Test.iFld;
        i15 = 1;
        do {
            iArr2[i15] += Test.iFld;
            i16 = 1;
            while (++i16 < 100) {
                double d2=-1.45753;
                switch (((i15 % 3) * 5) + 51) {
                case 52:
                    if (Test.bFld) break;
                    iArr2[i16 + 1] += (int)Test.instanceCount;
                case 58:
                    for (i17 = 1; i17 < 1; i17++) {
                        byte by=65;
                        Test.iFld -= i16;
                        by -= (byte)Test.instanceCount;
                        iArr2[i17 + 1] <<= i17;
                    }
                    if (Test.bFld) {
                        Test.instanceCount += -2L;
                        d2 *= 36327;
                    } else {
                        Test.instanceCount *= 2;
                    }
                    Test.iFld = i18;
                    Test.instanceCount = i18;
                    break;
                case 57:
                    try {
                        i18 = (-357983470 % i15);
                        iArr2[i16 + 1] = (3256 % i15);
                        Test.iFld = (24307 / i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    for (i19 = 1; i19 < 1; i19++) {
                        i18 = s1;
                        i20 *= (int)Test.fFld;
                    }
                }
                i18 = Test.iFld;
                for (i21 = 1; i21 < 1; i21++) {
                    s1 -= (short)i19;
                    i18 += (int)8580147763227270500L;
                    bArr = bArr;
                    iArr2 = iArr2;
                    i20 += (int)Test.instanceCount;
                    s1 >>>= (short)i16;
                }
            }
        } while (++i15 < 251);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
