package tests.javafuzzer213;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:17:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-219541004654542996L;
    public static short sFld=17794;
    public static volatile double dFld=-1.329;
    public static volatile long lFld=-7L;
    public static boolean bFld=true;
    public static float fFld=-2.492F;
    public volatile byte byFld=-43;
    public volatile int iFld=-36264;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.51097);
        FuzzerUtils.init(Test.lArrFld, 34L);
        FuzzerUtils.init(Test.iArrFld, -234);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    public static void vMeth1(int i2, boolean b, long l) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 129);

        Test.sFld -= (short)Math.abs((Test.instanceCount * i2) * iArr[(i2 >>> 1) % N]);
        vMeth1_check_sum += i2 + (b ? 1 : 0) + l + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth3(long l1, long l2, long l3) {

        int i5=-6, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -170);

        iArr1[(i5 >>> 1) % N] += (int)Test.dFld;
        vMeth3_check_sum += l1 + l2 + l3 + i5 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth2(int i3, int i4) {

        int i6=6, i7=-18, i8=-8, i9=-220;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -95.206F);

        vMeth3(Test.instanceCount, Test.lFld, 33L);
        for (i6 = 9; 173 > i6; i6++) {
            byte by=11;
            Test.lFld *= i6;
            i3 = i7;
            if (Test.bFld) break;
            i7 *= i3;
            Test.instanceCount = Test.instanceCount;
            for (i8 = 1; i8 < 10; ++i8) {
                i3 *= 153;
                Test.fFld += i8;
                fArr[i8 + 1] = (float)Test.dFld;
            }
            Test.fFld = Test.instanceCount;
            by += (byte)(195L + (i6 * i6));
            i3 = by;
        }
        Test.dArrFld[(i7 >>> 1) % N] += Test.instanceCount;
        vMeth2_check_sum += i3 + i4 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, int i, int i1) {

        boolean b1=false, bArr[]=new boolean[N];
        int i10=-65467, i11=-5, i12=205, i13=1;

        FuzzerUtils.init(bArr, false);

        vMeth1((int)(Math.abs(Test.instanceCount - i1) * (i--)), bArr[(i >>> 1) % N] = b1, (Test.instanceCount++) +
            (i1--));
        vMeth2(i1, i);
        for (i10 = 135; i10 > 3; i10--) {
            i += (((i10 * i10) + Test.fFld) - i10);
            if (Test.bFld) continue;
            i += (i10 * i10);
            i1 += i;
            i11 -= (int)Test.lFld;
            for (i12 = 1; 12 > i12; ++i12) {
                if (Test.bFld) continue;
                i11 <<= (int)Test.instanceCount;
                if (Test.bFld) break;
                Test.bFld = Test.bFld;
                Test.lArrFld[i12] *= Test.lFld;
                i += (int)Test.dFld;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=55988, i16=13, i17=-11771, i18=-41;
        float f1=90.986F;

        vMeth(Test.fFld, i14, i14);
        for (int i15 : Test.iArrFld) {
            for (f1 = 2; f1 < 63; f1++) {
                Test.lFld += (long)(f1 * f1);
                i15 <<= i14;
                byArrFld[(int)(f1)] &= (byte)i16;
                i15 += (int)(f1 + i14);
                i17 = 1;
                while (++i17 < 2) {
                    Test.dFld = i17;
                    byFld -= (byte)i17;
                    if (true) continue;
                    if (Test.bFld) {
                        Test.instanceCount = i16;
                    } else if (Test.bFld) {
                        Test.fFld = Test.lFld;
                        i16 >>>= (int)Test.instanceCount;
                        Test.iArrFld[(int)(f1)] >>>= Test.sFld;
                        i15 |= i15;
                    } else if (Test.bFld) {
                    } else {
                        i15 = -140;
                    }
                }
                i18 = 1;
                while (++i18 < 2) {
                    i16 += (i18 - iFld);
                    i14 >>= 74;
                    i15 += i14;
                    Test.instanceCount >>= iFld;
                    Test.fFld += (((i18 * Test.lFld) + i18) - iFld);
                    switch (((i14 >>> 1) % 3) + 17) {
                    case 17:
                        Test.lFld = i15;
                        Test.iArrFld[(int)(f1)] -= (int)Test.instanceCount;
                    case 18:
                        i14 *= i14;
                        i16 -= i16;
                        Test.instanceCount += (i18 - i18);
                        break;
                    case 19:
                        iFld += i14;
                        break;
                    default:
                        byFld <<= (byte)i16;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
