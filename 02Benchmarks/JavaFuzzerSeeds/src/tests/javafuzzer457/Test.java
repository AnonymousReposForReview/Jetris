package tests.javafuzzer457;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:06:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-370938697L;
    public static double dFld=-1.91540;
    public static int iFld=33;
    public static boolean bFld=true;
    public float fFld=-112.73F;
    public int iFld1=0;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12610);
        FuzzerUtils.init(Test.lArrFld, 3795762350921881162L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth1(int i1) {


        Test.iArrFld[(i1 >>> 1) % N] <<= (int)(Test.instanceCount - (Test.dFld++));
        vMeth1_check_sum += i1;
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i6=0, i7=12914, i8=13369, i9=-2;
        float f1=-30.624F;
        short s1=8788;
        long l=-7L;

        for (i6 = 259; 13 < i6; i6--) {
            i3 += (int)f1;
            for (i8 = 1; i8 < 7; ++i8) {
                i4 += (i8 ^ Test.iFld);
                Test.iArrFld[i6 + 1] = s1;
                i4 += i3;
                switch (((i6 % 1) * 5) + 54) {
                case 59:
                    l = 1;
                    do {
                        Test.instanceCount -= l;
                        i3 = (int)f1;
                        if (Test.bFld) {
                            Test.iArrFld[i6 - 1] -= i9;
                            i5 += (int)Test.dFld;
                            i3 += (int)(((l * Test.iFld) + i6) - l);
                        } else if (true) {
                            try {
                                i3 = (Test.iFld / 186);
                                Test.iArrFld[(i5 >>> 1) % N] = (i6 % i3);
                                Test.iArrFld[i8] = (Test.iArrFld[i8] / i6);
                            } catch (ArithmeticException a_e) {}
                        } else {
                            Test.iArrFld[(int)(l)] -= (int)Test.instanceCount;
                        }
                    } while (++l < 2);
                default:
                    Test.lArrFld[i8 + 1] -= Test.instanceCount;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + s1 + l;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i2=-47047, i10=22526, i11=19328, i12=-246;
        short s=-10990;
        float f2=2.492F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-34);

        Test.instanceCount = (-((-Test.iArrFld[(Test.iFld >>> 1) % N]) + (--Test.iFld)));
        i2 = 1;
        do {
            byArr[i2 - 1] += (byte)i2;
            Test.iFld <<= (int)(((i2 * Test.dFld) - (Test.dFld - s)) * ((Test.instanceCount - -13) / (i2 | 1)));
            Test.iFld += i2;
            lMeth(i2, i2, i2);
            Test.iArrFld[i2 - 1] -= 201;
            Test.iFld = 11;
            Test.iArrFld[i2] -= (int)f2;
            i10 = 1;
            while (++i10 < 10) {
                for (i11 = i10; i11 < 1; i11++) {
                    Test.lArrFld[i2] -= (long)f2;
                    i12 = i2;
                    Test.iArrFld[(3045 >>> 1) % N] = i11;
                    Test.dFld -= Test.iFld;
                }
            }
        } while (++i2 < 162);
        long meth_res = i2 + s + Float.floatToIntBits(f2) + i10 + i11 + i12 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        int i13=1796, i14=3, i15=0, i16=11, i17=9, i18=-2461;
        float f3=0.148F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -52.180F);

        vMeth1(iMeth());
        i13 = 1;
        do {
            Test.iFld -= (int)-13L;
            Test.instanceCount *= Test.iFld;
            for (i14 = 1; i14 < 7; ++i14) {
                for (f3 = 1; f3 < 2; f3++) {
                    fArr[i13 + 1] -= i15;
                    i16 += (int)f3;
                }
                i15 = i13;
                Test.instanceCount = i15;
                Test.instanceCount = (long)f3;
                for (i17 = i13; i17 < 2; i17++) {
                    if (Test.bFld) {
                        Test.iFld = (int)Test.instanceCount;
                        Test.bFld = Test.bFld;
                        vMeth_check_sum += Float.floatToIntBits(f) + i13 + i14 + i15 + Float.floatToIntBits(f3) + i16 +
                            i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
            }
        } while (++i13 < 237);
        vMeth_check_sum += Float.floatToIntBits(f) + i13 + i14 + i15 + Float.floatToIntBits(f3) + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-752;
        short s2=14734;

        i -= (-(--i));
        vMeth(fFld);
        i -= -6546;
        Test.iArrFld[(12 >>> 1) % N] >>= iFld1;
        s2 = (short)-8;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
