package tests.javafuzzer2778;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:57:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static volatile int iFld=4;
    public static boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i4=-60594, i5=35879, i6=20583, i7=118, i8=-4, iArr1[]=new int[N];
        short s1=31301;
        float f1=94.376F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, -25686);
        FuzzerUtils.init(fArr, 0.321F);

        i4 = 368;
        while ((i4 -= 3) > 0) {
            Test.iFld -= Test.iFld;
            Test.instanceCount = Test.instanceCount;
            for (i5 = 1; i5 < 13; i5++) {
                if (false) {
                    for (i7 = 1; i7 < 2; ++i7) {
                        i6 += s1;
                        i6 -= i5;
                        iArr1[i7 - 1] += i5;
                        f1 = -11;
                        fArr = fArr;
                        switch (((i5 % 5) * 5) + 40) {
                        case 47:
                            i6 = (int)Test.instanceCount;
                            if (b) continue;
                            Test.instanceCount += 5031;
                            break;
                        case 42:
                            i8 = 0;
                        case 46:
                        case 65:
                            Test.instanceCount *= s1;
                            break;
                        case 44:
                            Test.iFld *= i6;
                        }
                    }
                } else {
                    iArr1[i4] &= s1;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + s1 + Float.floatToIntBits(f1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i3) {

        byte by=62;
        float f2=2.65F;
        int i9=-8, i10=11, i11=-6147, iArr2[]=new int[N];
        double d1=-122.47808;
        long lArr[]=new long[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr, 5815738584117912597L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, -49992);

        lArr[(i3 >>> 1) % N] = (by + iMeth1());
        f2 %= (Test.iFld | 1);
        bArr[(Test.iFld >>> 1) % N][(4 >>> 1) % N] = Test.bFld;
        i9 = 1;
        while ((i9 += 2) < 261) {
            iArr2[i9] += i3;
            Test.iFld += i9;
            Test.iFld *= -16;
            if (Test.bFld) {
                by = (byte)-5;
                Test.instanceCount = 160;
                if (Test.bFld) {
                    d1 += Test.instanceCount;
                    for (i10 = 1; i10 < 12; ++i10) {
                        i3 += (i10 | i10);
                        Test.instanceCount = Test.instanceCount;
                    }
                } else if (Test.bFld) {
                    d1 *= i11;
                } else if (Test.bFld) {
                    f2 = 115;
                }
            } else {
                Test.bFld = Test.bFld;
            }
        }
        long meth_res = i3 + by + Float.floatToIntBits(f2) + i9 + Double.doubleToLongBits(d1) + i10 + i11 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        long l=-1880253242L, lArr1[]=new long[N];
        int i1=197, i2=31956, iArr[][]=new int[N][N];
        double d=-75.116448;
        short s=14445;
        float f=112.931F;

        FuzzerUtils.init(iArr, -49);
        FuzzerUtils.init(lArr1, -248L);

        Test.instanceCount >>= (i++);
        l = 302;
        do {
            i1 = 1;
            while (++i1 < 10) {
                i ^= (int)l;
                i += (i1 - i1);
                iArr[i1][i1 - 1] = i1;
                for (d = 1; d < 1; ++d) {
                    if (i1 != 0) {
                        vMeth_check_sum += i + l + i1 + Double.doubleToLongBits(d) + i2 + s + Float.floatToIntBits(f) +
                            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    Test.instanceCount -= Math.min(-s, ++i);
                    s *= (short)(-(Test.instanceCount - (i1 - f)));
                    i = (int)(iMeth(Test.iFld) * d);
                    i2 = i1;
                    lArr1[i1] = 211;
                    if (Test.bFld) break;
                    i = (int)d;
                }
            }
        } while ((l -= 2) > 0);
        vMeth_check_sum += i + l + i1 + Double.doubleToLongBits(d) + i2 + s + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f3=-2.778F;
        long l1=-10L, lArr2[]=new long[N];
        int i12=-82, i13=-202, i14=-180, i15=10, i16=2, i17=-8, i18=5, iArr3[][]=new int[N][N];
        double d2=-2.39093, dArr[][]=new double[N][N];
        byte by1=-107;

        FuzzerUtils.init(lArr2, -2256237029L);
        FuzzerUtils.init(dArr, 2.60382);
        FuzzerUtils.init(iArr3, -69);

        vMeth(Test.iFld);
        f3 += Test.instanceCount;
        for (l1 = 4; l1 < 143; ++l1) {
            long l2=-12L;
            switch ((((Test.iFld >>> 1) % 1) * 5) + 42) {
            case 45:
                lArr2[(int)(l1 - 1)] = i12;
                i12 = Test.iFld;
                d2 = l2;
                if (Test.bFld) {
                } else if (Test.bFld) {
                    lArr2 = lArr2;
                } else if (Test.bFld) {
                    for (i13 = 3; i13 < 180; ++i13) {
                        short s2=-22172;
                        for (i15 = i13; i15 < 2; i15++) {
                            f3 -= l1;
                            dArr[i13 - 1][(int)(l1)] = Test.iFld;
                            l2 += (230L + (i15 * i15));
                        }
                        if (Test.bFld) {
                            i16 += i16;
                        } else if (Test.bFld) {
                            i12 = (int)2.12F;
                            i12 = -216;
                            Test.iFld |= Test.iFld;
                            i14 = i15;
                        }
                        l2 = (long)1.862F;
                        by1 = (byte)f3;
                        s2 *= (short)f3;
                        lArr2[i13 - 1] >>= 48931;
                        i16 >>>= (int)Test.instanceCount;
                    }
                    by1 -= (byte)Test.instanceCount;
                    lArr2[(int)(l1)] %= (l1 | 1);
                } else {
                    for (i17 = 5; i17 < 180; i17++) {
                        i12 += i14;
                        iArr3[i17 + 1][i17 + 1] = (int)l2;
                    }
                }
                break;
            default:
                f3 += i18;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
