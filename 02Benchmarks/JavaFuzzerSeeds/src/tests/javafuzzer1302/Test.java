package tests.javafuzzer1302;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-25250L;
    public static boolean bFld=false;
    public static byte byFld=122;
    public static float fFld=2.1023F;
    public int iFld=-102;
    public static short sArrFld[][]=new short[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-30228);
        FuzzerUtils.init(Test.iArrFld, 13513);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, long l2, float f1) {

        int i6=-12, i7=-94, i8=207, i9=47373, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -139);

        Test.bFld = Test.bFld;
        for (i6 = 10; i6 < 178; i6++) {
            l1 -= Test.instanceCount;
            l1 += i6;
            if (Test.bFld) continue;
            i7 += (int)l2;
            i7 *= i6;
            Test.byFld <<= (byte)i7;
            Test.sArrFld[i6 + 1][i6 + 1] = (short)i6;
            iArr = iArr;
        }
        for (i8 = 21; i8 < 343; i8++) {
            i7 = i9;
            Test.bFld = Test.bFld;
            i9 += i8;
            f1 *= f1;
        }
        vMeth_check_sum += l1 + l2 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=-12974, i5=243, i10=-114, i11=-42544, i12=149;
        float f2=2.978F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -10437L);

        for (i4 = 8; i4 < 361; ++i4) {
            vMeth(-49814L, Test.instanceCount, f2);
            Test.instanceCount -= (long)f2;
            Test.instanceCount = -168609174L;
            for (i10 = 1; i10 < 5; ++i10) {
                f2 *= Test.instanceCount;
                if (Test.bFld) {
                    i5 = (int)Test.instanceCount;
                } else if (Test.bFld) {
                    lArr[i10] += i1;
                    if (Test.bFld) {
                        i3 += (i10 * Test.instanceCount);
                        i12 = 1;
                        do {
                            if (Test.bFld) break;
                            i1 += 13668;
                            i3 -= i10;
                        } while (++i12 < 2);
                    } else {
                        i11 += (((i10 * i2) + i5) - i2);
                    }
                } else {
                    i3 += (i10 * i10);
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f2) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l, float f, int i) {


        i *= iMeth(i, 59, i);
        Test.instanceCount -= Test.instanceCount;
        vSmallMeth_check_sum += l + Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        int i13=-5, i14=-25, i15=6, i16=-226, i17=28257;
        double d=-122.106917, d1=86.86067;
        short s=-32135, s1=-25927;
        float f3=0.199F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(fArr, 69.962F);

        for (int smallinvoc=0; smallinvoc<130; smallinvoc++) vSmallMeth(-179L, Test.fFld, iFld);
        iFld += 10679;
        i13 = 1;
        while (++i13 < 228) {
            Test.instanceCount += i13;
            Test.bFld = Test.bFld;
            iFld += (i13 + Test.instanceCount);
            d -= s;
        }
        if (b) {
            for (f3 = 8; f3 < 396; f3++) {
                switch ((int)((f3 % 8) + 79)) {
                case 79:
                    for (d1 = f3; d1 < 65; ++d1) {
                        d -= iFld;
                        if (b) {
                            iFld -= i13;
                            s1 *= (short)i15;
                        } else if (b) {
                            Test.fFld += (float)(d1 + i14);
                            iFld <<= s1;
                            try {
                                iFld = (i14 % -1074019030);
                                iFld = (i13 % Test.iArrFld[(int)(f3 - 1)][(int)(f3)]);
                                i14 = (iFld / -1759113982);
                            } catch (ArithmeticException a_e) {}
                        }
                        i15 = i15;
                        try {
                            i15 = (-132 % i13);
                            i14 = (i14 % i14);
                            i14 = (i13 / Test.iArrFld[(int)(d1)][(int)(f3)]);
                        } catch (ArithmeticException a_e) {}
                    }
                    i14 += (int)(f3 * f3);
                    switch ((int)((f3 % 3) + 92)) {
                    case 92:
                        for (i16 = (int)(f3); i16 < 65; i16++) {
                            try {
                                i14 = (-24202 / iFld);
                                i15 = (-85 % i13);
                                i15 = (-16762 / i17);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = i15;
                        }
                    case 93:
                        i14 -= -13;
                        break;
                    case 94:
                        i14 += (int)(f3 - Test.fFld);
                        if (Test.bFld) {
                            d = Test.instanceCount;
                            i15 >>= (int)-56L;
                        } else {
                            i14 <<= iFld;
                        }
                        break;
                    }
                    break;
                case 80:
                    Test.sArrFld[(int)(f3)][(int)(f3 + 1)] = (short)iFld;
                case 81:
                    fArr[(int)(f3 + 1)] = i17;
                    break;
                case 82:
                    i15 += i17;
                    break;
                case 83:
                    Test.fFld += i15;
                    break;
                case 84:
                    Test.instanceCount *= i15;
                    break;
                case 85:
                    Test.instanceCount += (32717 + (f3 * f3));
                case 86:
                    Test.fFld += iFld;
                    break;
                }
            }
        } else {
            Test.iArrFld[(0 >>> 1) % N] = Test.iArrFld[(i17 >>> 1) % N];
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
