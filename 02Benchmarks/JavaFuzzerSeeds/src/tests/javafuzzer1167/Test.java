package tests.javafuzzer1167;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4120706825L;
    public static int iFld=-229;
    public static int iFld1=122;
    public static double dFld=-111.84338;
    public static float fFld=65.935F;
    public static byte byArrFld[]=new byte[N];
    public static byte byArrFld1[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-39);
        FuzzerUtils.init(Test.byArrFld1, (byte)-106);
        FuzzerUtils.init(Test.iArrFld, -233);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, boolean b1) {

        int i10=12, i11=-12, i12=-14, i13=-8, i14=9, i15=91, i16=118, i17=-216;
        float f2=2.741F;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(dArr, -2.36674);

        i10 = 1;
        do {
            for (i11 = i10; i11 < 5; ++i11) {
                Test.iFld += -6576;
                lArr[i11] -= (long)f2;
                Test.iFld = (int)l;
            }
            i12 += (((i10 * i12) + Test.iFld) - i10);
            f2 += Test.iFld1;
        } while (++i10 < 368);
        i12 += i12;
        try {
            Test.iFld1 = i10;
            i12 -= (int)f2;
            i13 = 276;
            do {
                for (i14 = 6; i14 > 1; i14 -= 2) {
                    try {
                        Test.iFld = (i10 % -44);
                        Test.iFld1 = (Test.iFld % i12);
                        i15 = (Test.iFld1 / 42955);
                    } catch (ArithmeticException a_e) {}
                    try {
                        i16 = (i12 / i14);
                        i15 = (i14 % 1407621607);
                        i16 = (Test.iFld / -333052930);
                    } catch (ArithmeticException a_e) {}
                }
            } while (--i13 > 0);
        }
        catch (UserDefinedExceptionTest exc1) {
            dArr[(188 >>> 1) % N] -= Test.instanceCount;
        }
        finally {
            i17 = (int)f2;
        }
        vMeth1_check_sum += l + (b1 ? 1 : 0) + i10 + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17
            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(double d, int i8) {

        double d1=-1.81863;
        int i9=-41925, i18=10, i19=-30, i20=-40829, i21=-14441, iArr[]=new int[N];
        short s=24332;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 3715);
        FuzzerUtils.init(lArr1, 1828715379L);

        d *= (i8 + ((i8 + i8) * (i8 - Test.iFld)));
        for (d1 = 5; d1 < 136; d1++) {
            vMeth1(Test.instanceCount, true);
            for (i18 = 1; i18 < 12; i18++) {
                Test.instanceCount *= i9;
                iArr[(int)(d1)] = s;
                i19 -= (int)Test.instanceCount;
                iArr[(int)(d1)] = s;
                i19 -= i18;
                lArr1[(int)(d1)] = 13;
                i19 |= (int)Test.instanceCount;
            }
            i8 += (int)(((d1 * Test.iFld) + i9) - Test.iFld1);
            for (i20 = 12; i20 > 1; i20--) {
                Test.iFld1 *= (int)-4L;
                i21 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + Double.doubleToLongBits(d1) + i9 + i18 + i19 + s + i20 +
            i21 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth(int i4, byte by, int i5) {

        int i6=11, i7=-4, i22=-49075;
        boolean b2=false;

        i6 = 161;
        do {
            i7 = 1;
            while ((i7 += 2) < 10) {
                vMeth(-107.25983, i6);
                i22 = 1;
                do {
                    Test.dFld = Test.instanceCount;
                    i5 %= (int)(Test.iFld1 | 1);
                    Test.instanceCount -= (long)-52.357F;
                } while (++i22 < 2);
                if (b2) {
                    Test.iFld1 -= (int)Test.fFld;
                    if (i22 != 0) {
                    }
                    Test.instanceCount -= 23410L;
                } else {
                    if (b2) {
                        Test.instanceCount = Test.instanceCount;
                        i4 = i4;
                    } else if (b2) {
                        i5 *= 15685;
                    } else if (b2) {
                        if (b2) continue;
                    }
                }
            }
        } while (--i6 > 0);
        long meth_res = i4 + by + i5 + i6 + i7 + i22 + (b2 ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-15317, i2=-50780, i3=14;
        float f=0.258F, f1=-2.883F;
        boolean b=true;
        byte by1=-62;

        i = 1;
        do {
            for (f = 2; f < 79; f++) {
                for (i2 = (int)(f); i2 < 2; i2++) {
                    float f3=100.440F;
                    if (b) continue;
                    f1 += i2;
                    f1 += Math.abs((int)(fMeth(Test.iFld, (byte)(-36), Test.iFld) - Test.instanceCount));
                    i1 &= (int)Test.instanceCount;
                    Test.iFld |= i3;
                    Test.byArrFld = Test.byArrFld1;
                    i3 += (i2 * i2);
                    switch ((i % 2) + 21) {
                    case 21:
                        f1 = Test.instanceCount;
                        switch ((i % 10) + 124) {
                        case 124:
                            Test.iFld1 = 48878;
                            Test.dFld += i3;
                            Test.iFld += (int)Test.instanceCount;
                            f3 -= Test.instanceCount;
                        case 125:
                            i1 &= i3;
                            Test.iFld += (i2 * i2);
                        case 126:
                            Test.iFld = -207;
                            i3 = i3;
                            if (b) break;
                            Test.instanceCount = Test.iFld1;
                            break;
                        case 127:
                            Test.instanceCount = 218876371612675457L;
                            Test.instanceCount += (4 + (i2 * i2));
                            Test.iArrFld[i + 1] <<= by1;
                        case 128:
                            i1 -= Test.iFld;
                            Test.iArrFld[i - 1] -= Test.iFld1;
                            break;
                        case 129:
                            try {
                                Test.iArrFld[i + 1] = (i % Test.iArrFld[i2 + 1]);
                                Test.iArrFld[i] = (76 / Test.iFld1);
                                i3 = (-12 % Test.iArrFld[i + 1]);
                            } catch (ArithmeticException a_e) {}
                            i1 += i;
                        case 130:
                        case 131:
                            Test.iArrFld[i2] = (int)f1;
                            break;
                        case 132:
                            i1 -= 43594;
                            break;
                        case 133:
                            Test.iFld += (i2 * Test.instanceCount);
                            break;
                        }
                        break;
                    case 22:
                        Test.iFld1 >>= Test.iFld;
                        break;
                    }
                }
            }
        } while (++i < 319);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
