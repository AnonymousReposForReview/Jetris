package tests.javafuzzer578;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:13:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-55738L;
    public int iFld=-121;
    public byte byFld=-87;
    public double dFld=-36.70342;
    public long lArrFld[][]=new long[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i5=47, i6=-9, i7=4785, iArr2[]=new int[N];
        float f3=1.689F;
        byte by=118;
        boolean b=false;

        FuzzerUtils.init(iArr2, 11);

        i4 -= i4;
        for (i5 = 12; i5 < 206; ++i5) {
            i7 = 8;
            do {
                f3 = 2;
                while (--f3 > 0) {
                    short s=21378;
                    switch (((i5 % 5) * 5) + 45) {
                    case 62:
                        s -= by;
                        break;
                    case 63:
                        i6 += (int)(f3 * f3);
                        break;
                    case 70:
                        i4 += (int)(f3 * i7);
                        Test.instanceCount -= i5;
                        iArr2[i7] ^= -44645;
                        break;
                    case 48:
                        if (i4 != 0) {
                            vMeth2_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f3) + by + (b ? 1 : 0) +
                                FuzzerUtils.checkSum(iArr2);
                            return;
                        }
                    case 64:
                    default:
                        Test.instanceCount &= i5;
                        i6 = i4;
                    }
                    if (b) continue;
                }
                i6 *= i6;
            } while ((i7 -= 2) > 0);
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f3) + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(float f, double d, float f1) {

        float f2=1.245F, fArr[]=new float[N];
        int i3=-1875, i8=55308, i9=-5, i10=31968, i11=-51561, i12=-464, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, 31);
        FuzzerUtils.init(fArr, 0.321F);

        iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
        for (f2 = 13; f2 < 242; ++f2) {
            vMeth2(i3);
            for (i8 = (int)(f2); i8 < 7; ++i8) {
                i3 /= (int)(i3 | 1);
                switch (((10407 >>> 1) % 2) + 85) {
                case 85:
                    fArr[i8] += -52247;
                case 86:
                    iArr1[(int)(f2)] += i8;
                    break;
                }
                i10 += (i8 * i8);
                i10 += (((i8 * i8) + Test.instanceCount) - Test.instanceCount);
                iArr1[i8] /= (int)(i10 | 1);
                for (i11 = 1; i11 < 1; ++i11) {
                    if (b1) break;
                }
                if (i9 != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1)
                        + Float.floatToIntBits(f2) + i3 + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                d -= Test.instanceCount;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + i3 + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i1=-207, i2=-197, i13=-14793, i14=-37118, iArr[]=new int[N];
        float f4=-75.579F, f5=0.210F;
        double d1=108.87669, dArr[]=new double[N];
        boolean b2=true;
        short s1=22986;

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(dArr, -1.3142);

        for (int i : iArr) {
            switch (((i >>> 1) % 6) + 23) {
            case 23:
                for (i1 = 1; i1 < 4; i1++) {
                    vMeth1(f4, d1, f4);
                    if (i != 0) {
                        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f4) + Double.doubleToLongBits(d1) + i13 + i14
                            + (b2 ? 1 : 0) + Float.floatToIntBits(f5) + s1 + FuzzerUtils.checkSum(iArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i -= i1;
                    for (i13 = i1; 2 > i13; i13++) {
                        i <<= i1;
                        iArr[i13] >>>= i14;
                        Test.instanceCount -= (long)d1;
                        dArr[i13 - 1] *= i14;
                        b2 = b2;
                        f4 *= Test.instanceCount;
                        f5 = -56;
                    }
                    s1 = (short)i14;
                }
                break;
            case 24:
            case 25:
                iArr[(i14 >>> 1) % N] >>= i;
                break;
            case 26:
                f5 = i14;
                break;
            case 27:
                i14 &= (int)Test.instanceCount;
            case 28:
                dArr[(28004 >>> 1) % N] -= 6093026302475294376L;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f4) + Double.doubleToLongBits(d1) + i13 + i14 + (b2 ? 1 : 0)
            + Float.floatToIntBits(f5) + s1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=-12, i16=29417, i17=-21170, i18=-51198, i19=-16533, i20=-35367, i21=165, i22=-12, i23=14, i24=21661,
            i25=37355, iArr3[]=new int[N];
        double d2=0.19568;
        short s2=-15585;
        float f7=-76.250F;
        boolean b3=false;

        FuzzerUtils.init(iArr3, 50117);

        vMeth();
        iFld *= 38818;
        iFld *= (int)Test.instanceCount;
        for (i15 = 9; i15 < 269; ++i15) {
            float f6=-97.444F;
            f6 -= 0.588F;
        }
        switch (((iFld >>> 1) % 2) + 25) {
        case 25:
            for (i17 = 210; i17 > 13; i17--) {
                i18 += (i17 ^ i15);
                i16 >>= i17;
                lArrFld[i17 - 1][i17] = -12643;
                if (b3) {
                    lArrFld[i17][i17 - 1] = iFld;
                    Test.instanceCount = i15;
                    i16 = i16;
                    for (d2 = i17; d2 < 127; d2++) {
                        Test.instanceCount += Test.instanceCount;
                        i20 = 1;
                        do {
                            Test.instanceCount -= i19;
                            s2 >>= (short)iFld;
                            f7 *= Test.instanceCount;
                            byFld += (byte)(((i20 * iFld) + i18) - i18);
                        } while (++i20 < 1);
                        i16 = i16;
                        s2 = (short)-54132L;
                    }
                } else {
                    Test.instanceCount += i17;
                    i16 %= -14;
                    for (i21 = 3; i21 < 127; ++i21) {
                        i22 = (int)d2;
                        for (i23 = 1; i23 < 2; ++i23) {
                            dFld = i25;
                        }
                        iArr3 = FuzzerUtils.int1array(N, (int)57665);
                    }
                }
            }
        case 26:
            f7 = byFld;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
