package tests.javafuzzer581;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:14:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3L;
    public static volatile float fFld=-116.425F;
    public static boolean bFld=false;
    public int iFld=8;

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, int i7, int i8) {

        short s=22965;
        int i9=215, i11=-4795, i12=252, i13=-60930, iArr2[]=new int[N];
        byte by1=-53;
        float f2=0.404F;

        FuzzerUtils.init(iArr2, 186);

        s = (short)-217;
        iArr2[(i7 >>> 1) % N] -= (int)Test.fFld;
        i7 *= (int)1.222F;
        i9 = 1;
        while (++i9 < 145) {
            for (i11 = 11; i11 > 1; i11--) {
                Test.instanceCount += i11;
                Test.fFld = 4157973122L;
                Test.instanceCount += (i11 * i11);
                iArr2[i11 + 1] *= (int)Test.fFld;
                by1 = (byte)-13;
            }
            for (f2 = 11; f2 > i9; f2--) {
                Test.instanceCount >>= i8;
                iArr2[(int)(f2)] = (int)Test.instanceCount;
                i13 = i11;
                i12 = i13;
            }
        }
        long meth_res = i6 + i7 + i8 + s + i9 + i11 + i12 + by1 + Float.floatToIntBits(f2) + i13 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, int i4, int i5) {

        float f1=-2.158F;
        int i14=48749, i15=-95, i16=-7, i17=-10, iArr1[]=new int[N];
        double d=2.128344;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 133);

        iArr1[(i4 >>> 1) % N] += (int)(((++f1) * iMeth1(i3, i4, i4)) * 12);
        i3 *= 38707;
        for (i14 = 11; i14 < 209; i14++) {
            iArr1[i14 + 1] = 8;
            i3 = 221;
            f1 += i3;
            for (i16 = 1; 8 > i16; i16++) {
                Test.fFld -= i14;
                d = 49.361F;
                Test.instanceCount += (i16 | Test.instanceCount);
                switch ((((0 >>> 1) % 3) * 5) + 99) {
                case 111:
                    switch ((i16 % 5) + 84) {
                    case 84:
                        i17 |= i15;
                        i3 = (int)Test.instanceCount;
                        break;
                    case 85:
                        i4 = i17;
                    case 86:
                        if (b1) continue;
                        break;
                    case 87:
                        d = i4;
                        break;
                    case 88:
                        Test.fFld -= i4;
                    }
                    break;
                case 100:
                    i17 >>= i16;
                case 103:
                default:
                    try {
                        i17 = (iArr1[i14 - 1] % iArr1[i14 + 1]);
                        i3 = (i15 / 56);
                        iArr1[(i4 >>> 1) % N] = (-157 / i4);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d) +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, int i2, byte by) {

        boolean b=false;

        i2 = i2;
        b = ((lMeth(i1, 83, i2) - 133) > -22048);
        Test.instanceCount >>= 1;
        i1 += i1;
        long meth_res = i1 + i2 + by + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=70, i18=-6, i19=-14, i20=8, i21=1, i22=-252, iArr[][]=new int[N][N];
        float f=37.497F;
        byte by2=-52;
        double d1=47.68377;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr, 859670666L);

        switch ((((((int)(Test.instanceCount - Test.instanceCount)) >>> 1) % 2) * 5) + 7) {
        case 12:
            i = Math.min(--i, (int)((i - -9) + (i + f)));
            i = i;
            iArr[(0 >>> 1) % N][(i >>> 1) % N] *= ((i--) + Math.min(-Integer.reverseBytes(i), i - i));
            break;
        case 17:
            iArr[(-114 >>> 1) % N][(i >>> 1) % N] = iMeth(i, i, by2);
            iArr[(i >>> 1) % N][(70 >>> 1) % N] = (int)-3837472480L;
            i += -17;
            for (d1 = 307; 15 < d1; d1--) {
                i18 = i18;
                try {
                    i18 = (22617 / iArr[(int)(d1 + 1)][(int)(d1 - 1)]);
                    i18 = (515006169 % i);
                    iArr[(110 >>> 1) % N][(int)(d1)] = (iArr[(int)(d1 + 1)][(int)(d1)] / i18);
                } catch (ArithmeticException a_e) {}
                i18 >>= i18;
                i18 = 0;
                Test.instanceCount -= Test.instanceCount;
                if (false) {
                    i19 = 1;
                    while (++i19 < 86) {
                        for (i20 = (int)(d1); 1 > i20; i20++) {
                            if (Test.bFld) {
                                i22 <<= i22;
                                by2 -= (byte)i19;
                                Test.instanceCount = i20;
                            } else if (Test.bFld) {
                                i18 &= i19;
                                i22 *= i;
                                lArr[i20 + 1] *= i;
                            } else {
                                i22 = i20;
                            }
                            i21 *= 229;
                            iFld = by2;
                            Test.instanceCount >>= i20;
                            f += (i20 - Test.instanceCount);
                            iArr[(int)(d1 - 1)][i19] -= (int)Test.instanceCount;
                            lArr = lArr;
                        }
                    }
                } else {
                    Test.instanceCount = 4L;
                }
            }
            break;
        default:
            i22 <<= i;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
