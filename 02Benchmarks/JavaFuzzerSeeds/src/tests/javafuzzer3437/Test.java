package tests.javafuzzer3437;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:17:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-987842284267865349L;
    public static double dFld=0.17611;
    public static float fFld=-43.231F;
    public static short sFld=-31012;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -84L);
        FuzzerUtils.init(Test.iArrFld, 14198);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(long l, int i5, int i6) {

        long l1=3819063671L;
        int i7=-118, i8=-7, i9=4310, i10=15, i11=72, i12=10, iArr1[]=new int[N];
        byte by=64;
        boolean b2=true;

        FuzzerUtils.init(iArr1, -7);

        i6 >>= i6;
        i5 += (int)Test.dFld;
        l1 = i7;
        for (i8 = 5; i8 < 145; ++i8) {
            for (i10 = 1; i10 < 11; i10++) {
                Test.instanceCount += (i10 * i10);
            }
            Test.dFld %= -63749L;
            try {
                iArr1[i8 + 1] = (i11 / i9);
                i6 = (i5 % i10);
                iArr1[i8 + 1] = (i5 / i7);
            } catch (ArithmeticException a_e) {}
            i12 = 1;
            while (++i12 < 11) {
                Test.instanceCount |= by;
                iArr1 = iArr1;
                if (b2) continue;
                i5 = (int)-103.715F;
                i9 -= (int)Test.instanceCount;
                i5 += (i12 * i7);
            }
        }
        long meth_res = l + i5 + i6 + l1 + i7 + i8 + i9 + i10 + i11 + i12 + by + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(boolean b1, short s, float f) {

        int i4=-103, i13=-7, i14=45130, i15=-38034, i16=43577, iArr[]=new int[N];
        double d=-1.128738;

        FuzzerUtils.init(iArr, 28638);

        iArr[(i4 >>> 1) % N] = (int)(sMeth(-3L, 59459, -64) * Test.instanceCount);
        Test.lArrFld[(i4 >>> 1) % N] += (long)f;
        i13 = 1;
        while (++i13 < 249) {
            i4 = (int)f;
            if (b1) break;
            for (d = 1; d < 7; d++) {
                switch ((int)((d % 2) + 31)) {
                case 31:
                    Test.instanceCount *= i13;
                    Test.instanceCount ^= Test.instanceCount;
                    break;
                case 32:
                    i14 = (int)Test.instanceCount;
                    Test.instanceCount *= i4;
                    i14 = i14;
                    for (i15 = 1; i15 < 2; ++i15) {
                        i4 += i15;
                        i16 += i15;
                    }
                }
            }
        }
        vMeth_check_sum += (b1 ? 1 : 0) + s + Float.floatToIntBits(f) + i4 + i13 + Double.doubleToLongBits(d) + i14 +
            i15 + i16 + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(boolean b, int i, int i1) {

        int i2=55866, i3=-73, i17=-47386, i18=127, i19=-42529, i20=0;

        for (i2 = 8; i2 < 187; i2++) {
            vMeth(true, (short)(-13758), Test.fFld);
            i1 += (i2 * Test.instanceCount);
            for (i17 = 9; i17 > 1; i17--) {
                if (b) break;
                for (i19 = 2; i19 > 1; --i19) {
                    i20 += (i19 ^ i19);
                    i >>= 59056;
                    Test.iArrFld[i17] += i1;
                    if (i19 != 0) {
                    }
                    Test.instanceCount = Test.sFld;
                    Test.instanceCount += (i19 ^ i1);
                    Test.fFld /= (i | 1);
                    Test.iArrFld[i19 - 1] -= 54;
                    i20 = i18;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i + i1 + i2 + i3 + i17 + i18 + i19 + i20;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=21585, i22=0, i23=-66, i24=64375, i25=1, i26=49632, i27=8, i28=3798, i29=193, i30=-11581, i31=140;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.207F);

        Test.instanceCount = 0L;
        fMeth(Test.bFld, i21, i21);
        for (i22 = 9; i22 < 305; i22++) {
            i23 += (int)Test.instanceCount;
        }
        for (i24 = 3; 268 > i24; i24++) {
            i25 = -149;
            i23 += (i24 ^ (long)Test.fFld);
            switch ((((i24 >>> 1) % 4) * 5) + 54) {
            case 55:
            case 68:
                for (i26 = 3; i26 < 95; i26++) {
                    i28 = 1;
                    do {
                        Test.fFld += (-9 + (i28 * i28));
                        Test.fFld -= (float)Test.dFld;
                        Test.iArrFld[i26 + 1] = Test.sFld;
                        Test.dFld = Test.instanceCount;
                    } while (++i28 < 2);
                    Test.fFld += 2.491F;
                    fArr[i24] *= Test.instanceCount;
                    Test.iArrFld[i24] = (int)Test.fFld;
                    Test.instanceCount = (long)Test.fFld;
                    i23 = (int)Test.instanceCount;
                    i23 >>>= (int)Test.instanceCount;
                }
                Test.fFld -= i28;
                for (i29 = 2; i29 < 95; ++i29) {
                    i25 -= i28;
                    dArrFld = dArrFld;
                    i31 = 1;
                    while (++i31 < 2) {
                        i30 -= i21;
                        if (Test.bFld) break;
                        i23 = i23;
                        Test.iArrFld[i24 - 1] ^= i26;
                        Test.dFld -= 57451;
                    }
                }
            case 57:
                i30 >>>= i24;
                break;
            case 62:
                Test.instanceCount = Test.instanceCount;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
