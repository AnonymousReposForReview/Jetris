package tests.javafuzzer2569;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:44:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1380957311L;
    public double dFld=-76.37608;
    public static byte byFld=-64;
    public static int iFld=0;
    public static short sFld=-28235;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -49);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, int i10, int i11) {

        int i12=37, i13=10, i14=49, i15=5;

        for (i12 = 4; i12 < 175; ++i12) {
            Test.instanceCount += (i12 - Test.instanceCount);
            i9 -= i13;
            i11 += (107 + (i12 * i12));
            i9 -= (int)6287183313543678719L;
            Test.iArrFld[i12 - 1] -= i9;
            i9 = i9;
            for (i14 = 9; i14 > 1; i14--) {
                float f3=93.588F;
                Test.iArrFld[i14 - 1] *= i12;
                Test.iFld = (int)Test.instanceCount;
                f3 = -7697;
                i15 &= 2;
            }
            Test.instanceCount += i12;
        }
        Test.instanceCount += i11;
        i13 <<= (int)Test.instanceCount;
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + i15;
    }

    public int iMeth1(int i8, long l) {

        int i17=-14, i18=0, i19=-4, i20=-9, i21=-4, i22=-42, i23=52642, i24=40751;
        float f4=114.962F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6769429275114498442L);

        vMeth(50414, Test.iFld, -4);
        i8 -= (int)l;
        for (i17 = 272; i17 > 13; i17--) {
            if (Test.iFld != 0) {
            }
        }
        Test.byFld *= (byte)dFld;
        f4 = Test.sFld;
        for (i19 = 317; i19 > 17; --i19) {
            for (i21 = 1; i21 < 6; ++i21) {
                b = b;
                l += (i21 * i21);
                lArr[i21 - 1] = i19;
                for (i23 = i19; i23 < 2; i23++) {
                    f4 += i23;
                    Test.instanceCount <<= i18;
                    Test.sFld = (short)Test.iFld;
                }
            }
        }
        long meth_res = i8 + l + i17 + i18 + Float.floatToIntBits(f4) + i19 + i20 + i21 + i22 + (b ? 1 : 0) + i23 + i24
            + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(float f1, float f2) {

        int i25=0, i26=44, i27=52977, i28=85;
        long l1=7454555512958547931L;
        boolean b1=false;

        Test.iFld *= (Test.iFld -= Math.min(iMeth1(Test.iFld, Test.instanceCount), 127));
        for (i25 = 11; i25 < 323; i25++) {
            i26 += Test.iFld;
            l1 = 1;
            while (++l1 < 5) {
                for (i27 = 1; i27 < 1; i27++) {
                    i28 = (int)-10496L;
                    Test.byFld ^= (byte)i26;
                    Test.iArrFld[i27 - 1] &= (int)Test.instanceCount;
                    i26 += -64864;
                    if (b1) continue;
                    i28 += (i27 * i25);
                    Test.instanceCount += i27;
                    Test.iFld <<= i26;
                    i26 += i27;
                    i26 += (i27 | i26);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i25 + i26 + l1 + i27 + i28 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-52963, i1=42, i2=-9782, i3=-2596, i4=-3, i5=12, i6=-140, i7=12, i29=4, iArr[][]=new int[N][N];
        float f=0.712F;
        boolean b2=false;

        FuzzerUtils.init(iArr, -17559);

        dFld -= ((-(Test.byFld * Test.iFld)) + (Test.iFld++));
        for (i = 5; i < 229; i++) {
            Test.instanceCount = (long)((++i1) * (++f));
        }
        Test.instanceCount = ((-i) + 2);
        Test.iFld -= (int)(((i1 * i) - Float.intBitsToFloat(i1)) + ((i1 ^ 20946) * (Test.iFld--)));
        for (i2 = 5; 214 > i2; i2++) {
            i3 += (i2 + Test.byFld);
            switch ((i2 % 5) + 29) {
            case 29:
                for (i4 = 120; 4 < i4; i4 -= 2) {
                    for (i6 = 1; i6 < 3; i6++) {
                        dFld /= (Math.max((int)(Test.instanceCount + (f + 154)), i7--) | 1);
                        switch (((i4 % 2) * 5) + 45) {
                        case 52:
                            Test.instanceCount += i6;
                            Test.instanceCount -= Test.sFld;
                            iArr[i2 - 1][i6 - 1] -= (int)((i7 + (-(i2 * Test.instanceCount))) -
                                (Integer.reverseBytes(i7) - (-Test.instanceCount)));
                            i1 *= (int)Float.intBitsToFloat((int)((dFld + 0.831F) - iMeth(f, f)));
                            break;
                        case 49:
                            i5 = i4;
                            Test.iFld = (int)71.89038;
                            break;
                        default:
                            iArr[i4][i6] -= (int)dFld;
                            try {
                                i3 = (199 / i);
                                i29 = (-1911163910 % i4);
                                i1 = (-28721 % i6);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.instanceCount += i3;
                        Test.iFld *= i29;
                        i3 += (((i6 * Test.instanceCount) + Test.instanceCount) - i);
                        iArr[i6 + 1][i4] -= (int)f;
                        switch ((i6 % 1) + 122) {
                        case 122:
                            Test.iFld = (int)Test.instanceCount;
                            i5 += (i6 + i7);
                        default:
                            Test.instanceCount %= (Test.byFld | 1);
                            Test.iFld = (int)Test.instanceCount;
                        }
                        b2 = b2;
                    }
                }
                break;
            case 30:
                i29 *= i6;
            case 31:
                iArr[i2][i2] = i5;
                break;
            case 32:
                Test.sFld += (short)i4;
                break;
            case 33:
                if (b2) break;
                break;
            default:
                f += i2;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
