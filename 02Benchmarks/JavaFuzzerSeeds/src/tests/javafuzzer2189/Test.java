package tests.javafuzzer2189;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:53:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-61449L;
    public static int iFld=0;
    public static short sFld=6741;
    public double dFld=0.74417;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.24958);
        FuzzerUtils.init(Test.fArrFld, -1.632F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public int iMeth1(long l) {

        long l1=-2501354899554860625L;
        int i10=-6, i11=11, i12=-56631, i13=7, i14=31853, iArr1[]=new int[N];
        float f=-90.200F;

        FuzzerUtils.init(iArr1, 0);

        for (l1 = 1; 198 > l1; l1++) {
            i10 += i10;
            try {
                iArr1[(int)(l1 + 1)] = (iArr1[(int)(l1 + 1)] / i10);
                Test.iFld = (124 % i10);
                i10 = (iArr1[(int)(l1 + 1)] / 2095868671);
            } catch (ArithmeticException a_e) {}
            for (i11 = 1; i11 < 8; i11++) {
                i10 += (i11 + i10);
                switch ((int)(((l1 % 2) * 5) + 20)) {
                case 30:
                case 21:
                    l <<= -54603;
                    for (i13 = 1; i13 < 2; ++i13) {
                        iArr1 = FuzzerUtils.int1array(N, (int)-6);
                        Test.sFld |= (short)Test.iFld;
                        f = i13;
                        l = 54013;
                        i12 += Test.sFld;
                        f += f;
                    }
                    break;
                }
                i14 -= -56;
            }
        }
        long meth_res = l + l1 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i2, int i3, int i4) {

        int i6=22, i7=-18967, i8=-84, i9=-1, iArr[]=new int[N];
        boolean b=false;
        float f1=91.351F;

        FuzzerUtils.init(iArr, -238);

        for (int i5 : iArr) {
            for (i6 = 4; i6 > 1; i6--) {
                for (i8 = 2; 1 < i8; i8--) {
                    if (b) {
                        i9 = iArr[i6 + 1];
                        Test.dArrFld[i6] = -102;
                        i7 = iMeth1(49649L);
                    } else {
                        switch ((i8 % 2) + 81) {
                        case 81:
                            f1 += i2;
                            iArr[i6] = i4;
                            i5 += (((i8 * i8) + i2) - Test.instanceCount);
                            Test.instanceCount += (i8 - f1);
                        case 82:
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        }
                        Test.instanceCount /= (i6 | 1);
                        i2 += i8;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i15=-102, i16=-8, i17=6, iArr2[]=new int[N];
        double d=1.20336;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1918167899L);
        FuzzerUtils.init(iArr2, 28043);

        iMeth(Test.iFld, Test.iFld, Test.iFld);
        for (i15 = 295; i15 > 6; i15 -= 2) {
            Test.iFld += (i15 ^ i15);
            d += Test.iFld;
            i17 = 1;
            while (++i17 < 11) {
                byte by=-91;
                switch (((i15 % 8) * 5) + 101) {
                case 124:
                    i16 >>= i15;
                    Test.iFld *= i15;
                    break;
                case 102:
                    Test.instanceCount >>= i16;
                    break;
                case 131:
                    Test.fArrFld[i15] += i15;
                    i16 += i16;
                    Test.iFld ^= Test.iFld;
                    Test.iFld >>= Test.iFld;
                    break;
                case 126:
                case 120:
                    Test.instanceCount -= i17;
                    break;
                case 127:
                    by += (byte)Test.instanceCount;
                    break;
                case 125:
                    Test.iFld -= i17;
                case 140:
                    lArr[i17 - 1] = Test.iFld;
                    break;
                default:
                    iArr2[i15] >>= i15;
                }
            }
        }
        vMeth_check_sum += i15 + i16 + Double.doubleToLongBits(d) + i17 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-60, i1=-27521, i18=-48411, i19=-18863, i20=27664, iArr3[]=new int[N];
        double d1=59.24299;
        float f2=-2.441F, f3=-127.752F;

        FuzzerUtils.init(iArr3, 62576);

        for (i = 219; i > 3; i--) {
            vMeth();
            iArr3[i] = (int)Test.instanceCount;
            switch ((i % 3) + 70) {
            case 70:
                dFld -= 4.95F;
                iArr3[i] >>= i;
                d1 = 1;
                do {
                    byte by1=111;
                    i18 = 1;
                    while (--i18 > 0) {
                        Test.iFld *= 5907;
                        dFld *= i18;
                        iArr3[i18] = 8349;
                        if (Test.bFld) continue;
                        iArr3[(int)(d1)] = Test.iFld;
                        Test.instanceCount |= Test.instanceCount;
                        Test.iFld += (i18 | Test.iFld);
                        Test.instanceCount = Test.iFld;
                        Test.iFld += i1;
                        Test.instanceCount += i;
                    }
                    if (Test.bFld) break;
                    Test.dArrFld = Test.dArrFld;
                    f2 = 1;
                    while (++f2 < 1) {
                        Test.iFld *= (int)f2;
                    }
                    Test.instanceCount = by1;
                    Test.sFld += (short)Test.instanceCount;
                    dFld *= 93L;
                    i1 -= -130;
                } while (++d1 < 116);
                try {
                    i1 = (Test.iFld % i18);
                    i1 = (12977 / i1);
                    i1 = (i18 / iArr3[i]);
                } catch (ArithmeticException a_e) {}
            case 71:
                for (i19 = 116; i19 > 7; --i19) {
                    i20 ^= Test.sFld;
                    f3 += (i19 + Test.instanceCount);
                }
            case 72:
                Test.instanceCount %= (i1 | 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
