package tests.javafuzzer1757;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:01:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-64654L;
    public byte byFld=-68;
    public static byte byFld1=23;
    public static int iFld=9721;
    public static boolean bFld=true;
    public static double dFld=0.46647;
    public static int iFld1=-73;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2589477402739276691L);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, long l1) {

        int i5=22961, i6=-50984, i7=17410, i8=-1, i9=-8, i10=9, i11=-2125;
        short s=13942;
        boolean b=false;
        long lArr[][]=new long[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 53L);
        FuzzerUtils.init(fArr1, 0.112F);

        i5 = 365;
        do {
            for (i6 = 1; i6 < 5; i6++) {
                if (i6 != 0) {
                    vMeth_check_sum += l + l1 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                    return;
                }
            }
            for (i8 = 1; i8 < 5; i8++) {
                lArr = lArr;
                i7 = i8;
            }
        } while (--i5 > 0);
        fArr1[(i6 >>> 1) % N] = i5;
        for (i10 = 24; i10 < 396; i10++) {
            i9 = 57802;
            Test.instanceCount += i10;
            switch ((((i9 >>> 1) % 4) * 5) + 6) {
            case 18:
                i7 += (i10 * i10);
                if (b) {
                    i11 *= (int)l;
                } else if (b) {
                    s = (short)i7;
                } else {
                    Test.byFld1 += (byte)l1;
                    vMeth_check_sum += l + l1 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                    return;
                }
                break;
            case 20:
                i11 >>= (int)l;
            case 9:
                Test.byFld1 = (byte)Test.instanceCount;
            case 13:
                l1 *= i5;
                break;
            }
        }
        vMeth_check_sum += l + l1 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static float fMeth(double d, int i2, int i3) {

        int i4=-73, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -15972);

        i4 = 1;
        while (++i4 < 285) {
            i2 *= iArr1[i4 + 1];
            i2 = 11;
        }
        vMeth(Test.instanceCount, Test.instanceCount);
        Test.iFld = i4;
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i1) {

        double d1=-8.57626;
        float f=-2.194F, fArr[]=new float[N];
        int i12=128, i13=-38250, i14=13, iArr2[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(fArr, 0.469F);
        FuzzerUtils.init(iArr2, 5440);

        fArr[(i1 >>> 1) % N] -= i1;
        fMeth(d1, i1, -33639);
        f += i1;
        Test.iFld = -193;
        Test.byFld1 ^= (byte)Test.iFld;
        Test.iFld = Test.iFld;
        for (i12 = 7; i12 < 278; i12++) {
            iArr2[i12] -= i1;
            Test.lArrFld[i12 + 1] -= i13;
            if (b1) {
                i14 = 1;
                while (++i14 < 6) {
                    Test.iFld += (int)f;
                    d1 -= Test.instanceCount;
                }
                Test.instanceCount += (i12 * i12);
            }
            fArr = fArr;
        }
        long meth_res = i1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i12 + i13 + i14 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-30, i16=-34, i17=50564, i18=-42, i19=-14, i20=-154, iArr[]=new int[N];
        float f1=0.358F, f2=1.793F;
        short s1=-3636;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr, 598);
        FuzzerUtils.init(dArr, -2.89811);

        for (int i : iArr) {
            byFld -= (byte)(lMeth(i) & i);
            iArr[(i >>> 1) % N] |= 254;
            i15 = 1;
            while (++i15 < 63) {
                for (i16 = 1; i16 < 1; i16++) {
                    Test.instanceCount = (long)115.73027;
                }
                Test.lArrFld[i15 + 1] += i16;
            }
            i18 = 1;
            while (++i18 < 63) {
                iArr[i18 + 1] <<= -9;
            }
            if (Test.bFld) continue;
        }
        Test.instanceCount = i15;
        switch ((((i17 >>> 1) % 6) * 5) + 109) {
        case 115:
            f1 = i15;
            Test.lArrFld = Test.lArrFld;
            Test.dFld -= f1;
            i19 = 1;
            do {
                f2 = 1;
                while (++f2 < 69) {
                    Test.iFld = i19;
                    Test.dFld -= i19;
                    i20 = 1;
                    while (++i20 < 1) {
                        Test.iFld1 *= -184;
                        dArr[i19 - 1] = dArr[(int)(f2)];
                        Test.instanceCount += i20;
                        iArr[(int)(f2 + 1)] -= i18;
                        Test.iFld -= i19;
                        i17 = (int)-92L;
                        f1 = i20;
                        if (Test.bFld) break;
                    }
                    Test.dFld *= Test.instanceCount;
                    s1 += s1;
                }
            } while (++i19 < 366);
            break;
        case 125:
            Test.iFld1 *= i15;
            break;
        case 124:
            Test.instanceCount = Test.instanceCount;
        case 117:
        case 139:
            Test.iFld1 = -1;
        case 120:
            Test.iFld >>= i19;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
