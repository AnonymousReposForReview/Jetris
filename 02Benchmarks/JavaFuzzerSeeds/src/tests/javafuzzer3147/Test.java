package tests.javafuzzer3147;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:45:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=105L;
    public static double dFld=64.76604;
    public static volatile boolean bFld=true;
    public volatile boolean bFld1=true;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        float f=-1.472F;
        int i9=-10, i10=196, i11=0;
        double d=56.119431;
        boolean b=true;
        long l1=-1613242831L;

        for (f = 206; f > 11; f -= 2) {
            i9 = (int)d;
            i8 += (6 + (f * f));
            if (b) break;
            i10 = 1;
            do {
                i11 = 1;
                do {
                    switch ((int)((f % 10) + 3)) {
                    case 3:
                        switch ((int)((f % 2) + 1)) {
                        case 1:
                            Test.instanceCount = i8;
                            i8 += i11;
                            b = b;
                            break;
                        case 2:
                            i9 &= i10;
                            break;
                        default:
                            i8 <<= i9;
                            Test.instanceCount -= Test.instanceCount;
                            i9 *= i10;
                        }
                        break;
                    case 4:
                        l1 = -5;
                        break;
                    case 5:
                    case 6:
                        i8 = i8;
                        break;
                    case 7:
                        i8 += i11;
                    case 8:
                        i8 += i10;
                        break;
                    case 9:
                        b = b;
                        break;
                    case 10:
                        i8 = -229;
                        break;
                    case 11:
                        Test.instanceCount <<= 21934;
                    case 12:
                        i9 += i11;
                        break;
                    }
                } while (++i11 < 1);
            } while (++i10 < 16);
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f) + i9 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i10 + i11 +
            l1;
    }

    public static int iMeth(long l, int i5) {

        int i6=2, i7=5, i12=101, i13=2, i14=-242, iArr[]=new int[N];
        double d1=0.71106, d2=-2.24528;
        boolean b1=false;
        byte by1=-59, byArr[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 134);
        FuzzerUtils.init(lArr, -76L);
        FuzzerUtils.init(byArr, (byte)19);

        for (i6 = 1; 281 > i6; ++i6) {
            vMeth1(i6);
            iArr[i6] = i7;
            i5 += (int)5581194617300030227L;
            i5 *= (int)l;
            i7 += (i6 | i5);
            d1 = 1;
            do {
                i7 += i6;
                switch ((int)(((d1 % 10) * 5) + 34)) {
                case 80:
                    i12 = 1;
                    do {
                        i5 += (i12 | l);
                    } while (++i12 < 1);
                    break;
                case 68:
                    if (b1) {
                        for (i13 = (int)(d1); i13 < 1; i13++) {
                            i14 += (((i13 * i13) + i7) - i12);
                            i7 += (i13 * i13);
                        }
                    } else if (b1) {
                        i14 += (int)(d1 * d1);
                    } else if (b1) {
                        d2 = 4;
                    }
                    break;
                case 61:
                    iArr[i6] = (int)l;
                    break;
                case 63:
                    iArr[i6] ^= i7;
                    break;
                case 62:
                    lArr = FuzzerUtils.long1array(N, (long)1878931464L);
                    break;
                case 43:
                    Test.instanceCount = 21830;
                case 82:
                    byArr[i6][(int)(d1)] = (byte)Test.instanceCount;
                case 52:
                    i7 += by1;
                    break;
                case 35:
                    i7 = (int)1L;
                case 65:
                }
            } while (++d1 < 6);
        }
        long meth_res = l + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + Double.doubleToLongBits(d2)
            + (b1 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=184, i4=-5, i15=8, i16=-180, iArr1[]=new int[N];
        byte by=-114;
        float f1=-50.91F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1L);
        FuzzerUtils.init(iArr1, 64);

        for (i3 = 300; i3 > 2; i3--) {
            by %= (byte)(iMeth(Test.instanceCount, i) | 1);
            i15 = 1;
            do {
                lArr1[i3 + 1] += -10832;
                iArr1 = iArr1;
                i2 -= (int)Test.dFld;
            } while (++i15 < 6);
        }
        Test.bFld = Test.bFld;
        Test.bFld = Test.bFld;
        i16 = 1;
        do {
            try {
                i4 = (iArr1[i16] / i);
                i = (7280 / i);
                i1 = (1228046426 % iArr1[i16 - 1]);
            } catch (ArithmeticException a_e) {}
            i4 >>>= i15;
            Test.instanceCount += (((i16 * i3) + f1) - i2);
            Test.dFld = -33;
            i = i1;
            Test.instanceCount >>>= Test.instanceCount;
        } while (++i16 < 314);
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + by + i15 + i16 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-62888, i19=-149, iArr2[]=new int[N];
        byte by2=-99, byArr1[]=new byte[N];
        float f2=-13.992F;

        FuzzerUtils.init(iArr2, -47097);
        FuzzerUtils.init(byArr1, (byte)-41);

        vMeth(i18, i18, i18);
        i18 *= (int)-1.525F;
        Test.dFld = by2;
        i18 += (int)-70L;
        iArr2[(i18 >>> 1) % N] -= (int)Test.instanceCount;
        bFld1 = bFld1;
        byArr1[(i18 >>> 1) % N] = (byte)Test.instanceCount;
        i18 += -4;
        i18 *= i19;
        Test.dFld *= f2;
        i19 = -4;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
