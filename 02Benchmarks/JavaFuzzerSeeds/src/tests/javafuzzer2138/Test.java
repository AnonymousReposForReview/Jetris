package tests.javafuzzer2138;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:21:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=27465L;
    public static int iFld=-14;
    public static double dFld=23.12125;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -51L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, double d, double d1) {

        int i2=-200, i3=-59, i4=10619, iArr1[][]=new int[N][N];
        double d2=38.19011;
        float f=-108.67F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 9007646380331486438L);
        FuzzerUtils.init(iArr1, 9);

        Test.iFld = (int)l;
        Test.iFld += Test.iFld;
        for (i2 = 168; i2 > 1; --i2) {
            Test.iFld <<= Test.iFld;
            lArr = lArr;
            for (d2 = 1; d2 < 9; ++d2) {
                l += (long)(d2 * l);
            }
            i3 -= i2;
            i4 += (int)Test.instanceCount;
            l += Test.iFld;
        }
        iArr1[(i3 >>> 1) % N][(Test.iFld >>> 1) % N] = i2;
        Test.instanceCount += (long)f;
        Test.iFld += (int)l;
        l -= i2;
        i4 = -3;
        long meth_res = l + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i2 + i3 +
            Double.doubleToLongBits(d2) + i4 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i1) {

        short s=-21566;
        int i5=-44452, i6=2, i7=-251, i8=-4, i9=-2, iArr[]=new int[N];
        float f1=-1.541F;
        boolean b=true;

        FuzzerUtils.init(iArr, -8);

        iArr[(i1 >>> 1) % N] -= (int)((i1 + (i1 + Test.instanceCount)) - (lMeth(Test.instanceCount, Test.dFld,
            Test.dFld) - s));
        Test.dFld = Test.iFld;
        if (b) {
            i5 = 1;
            while (++i5 < 285) {
                i1 += Test.iFld;
                Test.dFld = Test.instanceCount;
                i1 = (int)Test.instanceCount;
                Test.dFld = i1;
                Test.iFld = (int)Test.instanceCount;
            }
            Test.iFld = i6;
            for (i7 = 7; 240 > i7; ++i7) {
                f1 *= (float)Test.dFld;
                i9 = 7;
                do {
                    i8 -= (int)89L;
                } while ((i9 -= 2) > 0);
                Test.instanceCount += (((i7 * Test.instanceCount) + Test.instanceCount) - i9);
            }
        } else {
            f1 /= (i6 | 1);
            vMeth1_check_sum += i1 + s + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) +
                FuzzerUtils.checkSum(iArr);
            return;
        }
        vMeth1_check_sum += i1 + s + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i=-9, i10=-221, i11=-4573, i12=38, i13=-50517, iArr2[]=new int[N];
        float f2=-65.104F, fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -26013);
        FuzzerUtils.init(fArr, 40.10F);

        i = 1;
        while (++i < 142) {
            vMeth1(i);
            for (i10 = 1; i10 < 11; i10++) {
                iArr2[i + 1] <<= (int)-3085116987393365692L;
                try {
                    i11 = (i11 / i10);
                    Test.iFld = (-184 / i10);
                    Test.iFld = (-45382 % i);
                } catch (ArithmeticException a_e) {}
                iArr2[i10 + 1] = Test.iFld;
                for (i12 = 1; i12 < 2; i12++) {
                    i13 = (int)Test.dFld;
                    fArr[i12] = i;
                    Test.instanceCount |= i11;
                    f2 += i10;
                    i11 += (i12 * i12);
                }
                Test.dFld = i;
                Test.instanceCount *= (long)1.740F;
                fArr[i] = i10;
            }
        }
        vMeth_check_sum += i + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i14=-16106, i15=5, i16=11, i17=200, i18=29739, i19=-10, i20=-4, iArr3[]=new int[N];
        float f3=122.712F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr3, 10);
        FuzzerUtils.init(dArr, 1.117884);

        vMeth();
        for (i14 = 1; 131 > i14; ++i14) {
            i15 += (int)4838300714180545931L;
            for (i16 = 6; i16 < 193; ++i16) {
                i17 >>= (int)-124L;
                Test.lArrFld[i16 + 1][i16] *= Test.instanceCount;
                for (i18 = i14; i18 < 2; i18++) {
                    Test.iFld = i16;
                    i19 += (i18 * i18);
                    iArr3 = iArr3;
                    f3 += 1;
                    dArr = dArr;
                    i20 += i18;
                    Test.lArrFld[i18] = Test.lArrFld[i18 - 1];
                    iArr3[i14 + 1] <<= Test.iFld;
                }
                i19 >>= i20;
                i15 *= i18;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
