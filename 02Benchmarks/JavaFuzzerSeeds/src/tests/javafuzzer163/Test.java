package tests.javafuzzer163;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:12:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12L;
    public static double dFld=-67.67669;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 182);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, int i8) {

        long l1=4L;
        int i9=-1, i10=8, i11=-29521;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -8.122186);

        Test.iArrFld[(-63 >>> 1) % N] *= -19371;
        l1 = 200;
        do {
            Test.iArrFld[(int)(l1)] += 14;
            for (i9 = 1; 8 > i9; ++i9) {
                i11 += (i9 * i9);
            }
            Test.instanceCount <<= i7;
            Test.dFld *= i10;
            dArr[(int)(l1)] = i10;
        } while (--l1 > 0);
        vMeth1_check_sum += i6 + i7 + i8 + l1 + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i4, long l, int i5) {

        int i12=10;

        vMeth1(197, i4, i12);
        Test.instanceCount -= -13;
        i4 -= i5;
        vMeth_check_sum += i4 + l + i5 + i12;
    }

    public static void vSmallMeth(int i2, int i3) {

        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-21816);

        vMeth(i3, 3305615368L, i3);
        sArr[(i3 >>> 1) % N] = (short)1.46F;
        vSmallMeth_check_sum += i2 + i3 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-58409, i1=4, i13=35613, i14=178, i15=-35332, i16=17, i17=3913;
        float f=2.184F;
        byte by=8;

        for (i = 2; i < 231; i++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i13, i);
            switch ((i % 2) + 33) {
            case 33:
                Test.iArrFld[i] -= 48333;
                i14 = 1;
                do {
                    i1 = i14;
                    f = i1;
                    i1 >>= i1;
                    switch (((i1 >>> 1) % 2) + 123) {
                    case 123:
                        for (i15 = 1; i15 > 1; --i15) {
                            Test.iArrFld = Test.iArrFld;
                            Test.instanceCount -= Test.instanceCount;
                            i13 = i;
                            f %= (i15 | 1);
                            Test.instanceCount = Test.instanceCount;
                            try {
                                i1 = (i13 % 158);
                                i16 = (Test.iArrFld[i + 1] % 40230);
                                i1 = (i15 / i13);
                            } catch (ArithmeticException a_e) {}
                            i13 -= (int)Test.instanceCount;
                            if (bFld) {
                                by = (byte)115;
                                f += i15;
                            } else if (bFld) {
                                Test.dFld = i14;
                            } else {
                                Test.instanceCount += Test.instanceCount;
                                if (bFld) continue;
                                f = 8463659019130824523L;
                                i1 -= i17;
                            }
                            Test.iArrFld[i14 - 1] = i;
                        }
                        i13 -= i;
                        Test.iArrFld[i14] <<= i;
                        i16 <<= i;
                        break;
                    case 124:
                        Test.instanceCount *= i1;
                        break;
                    default:
                        i17 = i14;
                    }
                } while (++i14 < 110);
            case 34:
                by *= (byte)Test.instanceCount;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
