package tests.javafuzzer267;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:06:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1354610141L;
    public static double dFld=104.122240;
    public short sFld=-2296;
    public boolean bFld=false;
    public static float fFld=112.571F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i10=-3904, i11=-131, i12=-10, i13=-131, i14=-63578, i15=-23, iArr1[]=new int[N];
        float f1=-2.252F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(lArr1, -2482528548850472706L);

        for (i10 = 1; i10 < 266; ++i10) {
            if (i11 != 0) {
            }
            for (i12 = 1; i12 < 6; ++i12) {
                i14 = 1;
                do {
                    iArr1[i14 - 1] *= 8;
                    f1 = Test.instanceCount;
                    i13 = i10;
                    lArr1[i12 + 1] = (long)-1.58F;
                    i11 = (int)-7L;
                } while (++i14 < 2);
                f1 -= f1;
                i13 = i11;
                Test.instanceCount *= Test.instanceCount;
                try {
                    i13 = (-59943 % i11);
                    iArr1[i10 - 1] = (i10 / i13);
                    i13 = (i11 % 804928788);
                } catch (ArithmeticException a_e) {}
                i15 += i13;
                Test.dFld *= 14014L;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(short s) {

        float f=1.157F;
        int i2=-1, i3=-5, i4=6703, i5=21311, i6=-10, i7=-252, i8=237, i9=-9543, iArr[][]=new int[N][N];
        double d=0.1032, d1=0.42174;
        long l=-54963L, lArr[]=new long[N];
        boolean b=true;

        FuzzerUtils.init(lArr, 7L);
        FuzzerUtils.init(iArr, 1665);

        f = ((lArr[(i2 >>> 1) % N]--) * ((i2 - i2) * (i2 - i2)));
        for (d = 7; d < 232; d++) {
            for (i4 = 1; i4 < 7; ++i4) {
                iArr[i4][(int)(d)] = (int)(i5 = (int)l);
            }
            b = true;
            for (i6 = 1; 7 > i6; ++i6) {
                i3 = (int)(((i2--) + l) + (++i5));
                for (i8 = 1; i8 < 2; i8++) {
                    i9 = Integer.reverseBytes((int)((i7 + i8) - (l + i4)));
                    f = (((++i3) + (i9--)) + lArr[(int)(d + 1)]);
                }
                i5 -= (-i3);
                f -= (float)(d1--);
                i3 += i6;
                i3 *= iMeth();
                l += i6;
            }
        }
        vMeth1_check_sum += s + Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + l + (b ? 1 :
            0) + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i=-4, i1=11, i16=65, i18=-58, i19=-55, i20=-53415, i21=41286, iArr2[]=new int[N];
        double d2=3.10428;

        FuzzerUtils.init(iArr2, 43929);

        for (i = 3; i < 156; i++) {
            vMeth1((short)(18249));
            i1 -= i;
            for (d2 = 1; d2 < 10; d2++) {
                Test.dFld += i16;
                sFld <<= (short)34;
                i1 += (int)(d2 * i16);
            }
            i16 += i;
            if (bFld) break;
            Test.instanceCount >>= Test.instanceCount;
            bFld = bFld;
            for (i18 = 1; i18 < 10; ++i18) {
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount = i18;
                    Test.instanceCount -= i19;
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d2) + i16 + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=-223, i23=238, i24=82, i25=4, i26=-4, i27=-13, iArr3[]=new int[N];
        byte by=27;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr3, -44908);
        FuzzerUtils.init(dArr, 110.36757);

        vMeth();
        for (i22 = 6; i22 < 122; i22++) {
            iArr3[i22 + 1] = i22;
            for (i24 = 9; i24 < 216; ++i24) {
                Test.fFld = Test.instanceCount;
                iArr3[i22] >>= i22;
                by = (byte)Test.fFld;
                i25 = (int)Test.instanceCount;
                for (i26 = 1; i26 < 2; i26 += 3) {
                    Test.instanceCount = i25;
                    Test.dFld += i24;
                    switch (((i24 % 6) * 5) + 44) {
                    case 53:
                        Test.dFld = -220;
                        by -= (byte)i22;
                        break;
                    case 48:
                        if (bFld) {
                            i23 += (-204 + (i26 * i26));
                            Test.fFld %= -5593;
                            switch ((((-60141 >>> 1) % 2) * 5) + 20) {
                            case 26:
                                Test.instanceCount *= i27;
                                Test.instanceCount <<= i23;
                                i23 += (int)Test.instanceCount;
                                i25 += (i26 - i23);
                            case 23:
                                i23 = i23;
                                i23 >>= by;
                                iArr3 = iArr3;
                            default:
                                try {
                                    i23 = (i24 % -20942);
                                    i27 = (i26 % i23);
                                    i27 = (i27 / i26);
                                } catch (ArithmeticException a_e) {}
                                by += (byte)i25;
                                i23 |= i25;
                                dArr[i26 - 1][i26 - 1] = Test.dFld;
                            }
                        } else {
                            i27 = i24;
                        }
                        break;
                    case 54:
                        iArr3[i24 + 1] = -13;
                    case 50:
                        iArr3[i24 + 1] -= i24;
                        break;
                    case 63:
                        i27 *= i23;
                        break;
                    case 55:
                        i27 = i23;
                        break;
                    default:
                        i25 = (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
