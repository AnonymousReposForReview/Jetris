package tests.javafuzzer3145;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:44:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5107677789664233732L;
    public static int iFld=24;
    public static double dFld=0.2389;
    public static long lFld=19779L;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -47269L);
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        float f=-2.330F;
        int i7=-216, i8=34, i9=-33, i10=10747, i11=-1, iArr[]=new int[N];
        short s=16296;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.75806);
        FuzzerUtils.init(iArr, 156);

        f -= i7;
        s <<= (short)i7;
        for (i8 = 24; i8 < 390; i8 += 3) {
            i7 = i7;
            dArr[i8 - 1] += Test.instanceCount;
            i9 &= i7;
            Test.iFld -= 16083;
            Test.iFld -= i8;
            Test.instanceCount = (long)Test.dFld;
            for (i10 = 1; 13 > i10; ++i10) {
                i7 |= i11;
                iArr[i10 - 1] *= Test.iFld;
                f += Test.instanceCount;
                iArr[i10 - 1] -= i11;
                i11 |= i8;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i7 + s + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        int i3=-14, i4=-9629, i5=-33814, i6=-86, i12=37578, i13=15405, i14=172;
        float f1=101.209F;
        byte by=127;
        short s1=20034;
        boolean b=false;

        for (i3 = 8; 226 > i3; ++i3) {
            for (i5 = 1; i5 < 7; ++i5) {
                i6 += (int)(Test.instanceCount * sMeth());
                for (i12 = i3; 2 > i12; i12++) {
                    Test.lArrFld[i3] = Test.instanceCount;
                    f1 += by;
                }
                Test.instanceCount += (i5 * f1);
                i6 += (((i5 * Test.iFld) + Test.instanceCount) - i12);
                s1 = (short)i4;
                i14 = 1;
                do {
                    try {
                        i6 = (i14 / -2153);
                        Test.iFld = (Test.iFld % -16545);
                        i6 = (-962091784 / i5);
                    } catch (ArithmeticException a_e) {}
                    f1 += -3464;
                    if (b) continue;
                    Test.iArrFld[i14 + 1] = (int)10385L;
                    by = (byte)Test.instanceCount;
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i12 + i13 + Float.floatToIntBits(f1) + by + s1 + i14 + (b ? 1 : 0);
    }

    public static int iMeth(int i1, long l, int i2) {

        int i15=-79, i16=159, i17=198, i18=-1;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 11.653F);

        vMeth();
        Test.dFld = i1;
        for (i15 = 310; i15 > 15; i15--) {
            byte by1=74;
            l ^= 244;
            Test.iFld += (((i15 * i16) + i1) - l);
            i17 *= i1;
            i2 /= (int)1905714098L;
            fArr1[i15 - 1] += l;
            i2 = by1;
            i16 = i2;
            i18 = 1;
            do {
                i17 <<= i15;
                fArr1[i15 + 1] -= (float)Test.dFld;
                i17 *= (int)Test.dFld;
                i16 <<= (int)Test.instanceCount;
            } while (++i18 < 6);
        }
        long meth_res = i1 + l + i2 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-36.130996, d1=45.56584;
        int i=-54658, i19=-40355, i20=8, i21=44279, i22=-57, i23=-69, i24=-50207, i25=0;
        float f2=1.577F, fArr[]=new float[N];
        long l1=-3L;
        byte by2=26;

        FuzzerUtils.init(fArr, 1.87F);

        d += i;
        fArr[(i >>> 1) % N] -= (iMeth(-164, Test.instanceCount, i) + 0.1009F);
        f2 = i;
        Test.instanceCount = -11;
        for (i19 = 1; i19 < 210; ++i19) {
            Test.instanceCount = i19;
            i21 = 1;
            do {
                i22 = 1;
                do {
                    Test.iArrFld[i19 + 1] = (int)l1;
                } while (++i22 < 1);
                f2 = i19;
                l1 = (long)d;
                l1 = Test.instanceCount;
                Test.iFld *= i;
                Test.iArrFld[i21 + 1] = (int)-8L;
                l1 *= -30347;
                l1 = i21;
            } while (++i21 < 120);
            d1 = 120;
            do {
                try {
                    Test.iFld = (32 % i22);
                    Test.iFld = (i % Test.iArrFld[i19]);
                    i = (i21 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                for (i23 = 1; i23 < 3; i23++) {
                    i20 = i;
                    f2 += by2;
                    f2 *= i21;
                    Test.iArrFld[(int)(d1 + 1)] -= by2;
                    by2 += (byte)(i23 * i23);
                    i24 >>= i22;
                    Test.dFld += f2;
                    i25 += (65253 + (i23 * i23));
                    Test.instanceCount -= i25;
                }
                Test.iArrFld = Test.iArrFld;
                f2 += Test.lFld;
            } while ((d1 -= 3) > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
