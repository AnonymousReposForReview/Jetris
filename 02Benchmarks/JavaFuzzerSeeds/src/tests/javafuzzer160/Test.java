package tests.javafuzzer160;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:11:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1897042214L;
    public static short sFld=30284;
    public static volatile boolean bFld=true;
    public volatile byte byFld=-55;
    public volatile short sFld1=-17564;
    public boolean bArrFld[][]=new boolean[N][N];
    public int iArrFld[]=new int[N];

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i12=-1, i13=77, i14=-11, i15=-23171, i16=14, iArr1[]=new int[N];
        float f1=1.258F;
        boolean b1=true;
        byte by=117;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(lArr, -2162503621979640943L);

        iArr1[(i12 >>> 1) % N] |= (int)Test.instanceCount;
        i12 += i12;
        i13 = 1;
        do {
            if (i12 != 0) {
            }
            for (i14 = 1; i14 < 7; ++i14) {
                f1 += (i14 * Test.instanceCount);
                lArr[i13][i14 + 1] *= -37;
                Test.instanceCount <<= i14;
                b1 = b1;
                i16 = 1;
                while (++i16 < 2) {
                    i15 += 35111;
                    i15 <<= i12;
                    i15 *= (int)f1;
                    iArr1[i14] >>= i14;
                    by *= (byte)i12;
                }
            }
        } while (++i13 < 247);
        long meth_res = i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i16 + by +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7) {

        int i8=12, i9=234, i10=-200, i11=-80, i17=28753, i18=240, iArr[]=new int[N];
        float f2=61.190F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -7.45F);
        FuzzerUtils.init(iArr, -30396);

        i7 = (int)6461667235214683395L;
        i7 += 2;
        for (i8 = 2; i8 < 140; ++i8) {
            for (i10 = 1; i10 < 11; ++i10) {
                i7 *= i10;
                fArr[i10 - 1] -= (Test.sFld - (++Test.instanceCount));
                i9 <<= (int)(((iArr[i8 + 1]--) * Math.abs(Test.instanceCount)) - Math.abs(++i9));
                i11 += iArr[i10 - 1];
                Test.instanceCount -= (((11 + (-i8)) + (i9 & i8)) * ((--i11) / (Math.min(i11, i8) | 1)));
                i7 += i10;
                i11 >>= (int)(iMeth() + f2);
                if (true) break;
            }
            for (i17 = i8; i17 < 11; i17++) {
                Test.bFld = Test.bFld;
                i7 = i7;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(long l1) {

        float f=79.759F;
        int i5=58, i6=2, i19=92, i20=-63914, iArr2[]=new int[N];
        byte by1=-55;

        FuzzerUtils.init(iArr2, -9);

        Test.sFld ^= (short)(f + l1);
        for (i5 = 335; i5 > 4; --i5) {
            switch (((i5 % 2) * 5) + 24) {
            case 31:
            case 25:
                switch ((i5 % 4) + 16) {
                case 16:
                    vMeth(i5);
                case 17:
                    Test.sFld += (short)i5;
                    iArr2[i5 - 1] -= i5;
                    f /= (i6 | 1);
                    if (false) break;
                    break;
                case 18:
                    i6 += -1;
                    Test.instanceCount = i5;
                case 19:
                    for (i19 = 1; i19 < 5; i19++) {
                        iArr2[i5 + 1] >>= (int)64877L;
                        by1 *= (byte)i6;
                        Test.instanceCount += i19;
                    }
                    break;
                }
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f) + i5 + i6 + i19 + i20 + by1 + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-1, i2=8, i3=-1, i4=-59782, i21=66;
        long l=7524L;
        double d=30.23722;
        float f3=93.515F;

        for (i = 3; i < 145; ++i) {
            for (i2 = 7; i2 < 177; i2++) {
                for (l = 2; l > 1; --l) {
                    boolean b=true;
                    i1 = (int)(((i4 + i2) % ((--i1) | 1)) + 19320L);
                    i4 += (int)(l * l);
                    i1 = i;
                    bArrFld[i][i2 - 1] = b;
                    bArrFld[i + 1][(int)(l + 1)] = ((bMeth(Test.instanceCount) || b) ^ false);
                    d -= i4;
                    switch ((i2 % 7) + 35) {
                    case 35:
                        f3 += l;
                        break;
                    case 36:
                        iArrFld[(int)(l)] = -117;
                        Test.bFld = Test.bFld;
                        break;
                    case 37:
                        Test.instanceCount += (long)f3;
                    case 38:
                        i1 <<= i4;
                        if (b) break;
                        break;
                    case 39:
                        if (b) break;
                        i4 += i4;
                        Test.instanceCount += (((l * i) + i4) - i3);
                        break;
                    case 40:
                        byFld += (byte)(((l * i4) + i2) - sFld1);
                        switch ((i2 % 2) + 83) {
                        case 83:
                            if (Test.bFld) {
                                switch (((i % 9) * 5) + 28) {
                                case 50:
                                    Test.instanceCount += (((l * i) + i2) - l);
                                    f3 += (((l * i1) + i1) - Test.instanceCount);
                                    break;
                                case 71:
                                    if (b) break;
                                    break;
                                case 49:
                                    switch (((i % 3) * 5) + 116) {
                                    case 129:
                                        i21 += (int)(l * i4);
                                        f3 += (((l * Test.instanceCount) + Test.instanceCount) - i1);
                                        i4 -= 3;
                                    case 121:
                                        if (Test.bFld) continue;
                                    case 125:
                                        iArrFld = iArrFld;
                                        break;
                                    }
                                    break;
                                case 45:
                                    i21 += (138 + (l * l));
                                    break;
                                case 34:
                                    iArrFld[i] -= (int)Test.instanceCount;
                                    break;
                                case 64:
                                    i1 += i3;
                                    break;
                                case 59:
                                    i21 = i1;
                                    break;
                                case 29:
                                    byFld >>= (byte)Test.instanceCount;
                                case 46:
                                    i1 -= 50555;
                                    break;
                                }
                            }
                        case 84:
                            i1 = -40391;
                            break;
                        }
                        break;
                    case 41:
                        i1 <<= i2;
                        break;
                    default:
                        d += i1;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
