package tests.javafuzzer2021;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:38:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=437797698L;
    public static boolean bFld=false;
    public static volatile int iFld=84;
    public static double dFld=-9.58583;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {


        Test.dFld /= 0.14442;
        long meth_res = 0;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(double d) {

        long l=-8L, lArr[]=new long[N];
        int i7=77, i8=-12, i9=-7;
        float f=-1.247F;

        FuzzerUtils.init(lArr, -44242L);

        Test.iFld = (int)(Test.iArrFld[(Test.iFld >>> 1) % N] % ((long)(dMeth()) | 1));
        Test.iFld = Test.iFld;
        if (Test.bFld) {
            Test.iFld >>= 57248;
        } else if (Test.bFld) {
            l = 1;
            while (++l < 268) {
                i7 = 1;
                do {
                    switch ((i7 % 9) + 89) {
                    case 89:
                        f -= f;
                        for (i8 = 1; i8 < 1; i8++) {
                            Test.iFld += (i8 ^ (long)f);
                            i9 += (i8 - i9);
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)-130);
                            lArr = lArr;
                            Test.iArrFld[i7] = (int)Test.instanceCount;
                            Test.iArrFld[(int)(l + 1)] = Test.iFld;
                        }
                    case 90:
                        Test.iArrFld[i7 - 1] = (int)Test.instanceCount;
                        break;
                    case 91:
                        Test.iFld = Test.iFld;
                        break;
                    case 92:
                    case 93:
                        Test.iFld += (i7 | i9);
                    case 94:
                        Test.iFld = i8;
                        break;
                    case 95:
                        i9 += Test.iFld;
                        break;
                    case 96:
                        i9 = (int)f;
                        break;
                    case 97:
                        Test.bFld = Test.bFld;
                        break;
                    }
                } while (++i7 < 6);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + i7 + Float.floatToIntBits(f) + i8 + i9 +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i6=16771, i10=-7, i11=-140, i12=24880, i13=-120, i14=-129, i15=-13885, i16=35897, i17=-5;
        short s=3949;

        Test.bFld = (Test.bFld && Test.bFld);
        i6 = (int)((i6 - lMeth(Test.dFld)) + 14249);
        for (i10 = 198; i10 > 11; --i10) {
            for (i12 = 1; i12 < 9; i12++) {
                for (i14 = 2; i14 > 1; i14 -= 3) {
                    i11 += (((i14 * i13) + Test.iFld) - i13);
                    if (Test.bFld) break;
                    Test.instanceCount = Test.iFld;
                    i13 = (int)Test.dFld;
                }
                switch ((i12 % 2) + 78) {
                case 78:
                    i11 -= (int)Test.dFld;
                    if (Test.bFld) continue;
                    for (i16 = i10; i16 < 2; i16++) {
                        i15 += (-14393 + (i16 * i16));
                        s += (short)(i16 * i16);
                    }
                    break;
                case 79:
                    i13 *= i12;
                    break;
                default:
                    i11 += (int)-175L;
                }
            }
        }
        vMeth_check_sum += i6 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s;
    }

    public void mainTest(String[] strArr3) {

        int i2=-156, i3=-197, i4=-13, i5=-210, i18=-27, i19=-194, i20=-241, i21=-194, i22=2, i23=-43974;
        byte by=89;
        short s1=-32341, sArr[]=new short[N];
        float f1=124.1015F;
        double d1=-1.46847;
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)13779);
        FuzzerUtils.init(lArr1, 62L);

        if (Test.bFld) {
            for (i2 = 9; i2 < 309; ++i2) {
                for (i4 = 84; i4 > 1; --i4) {
                    by -= (byte)(i5++);
                    if (!Test.bFld) break;
                    vMeth();
                    for (i18 = 1; i18 < 2; i18++) {
                        if (true) break;
                        sArr[i18 - 1] = (short)i4;
                        i19 = i19;
                        lArr1[i4] >>= Test.instanceCount;
                        i3 = -21485;
                    }
                    Test.instanceCount -= s1;
                }
                i19 = i4;
                for (i20 = i2; i20 < 84; ++i20) {
                    f1 = Test.iFld;
                    i5 = i2;
                }
                Test.iArrFld[i2 - 1] = 56;
                i22 = 1;
                while (++i22 < 84) {
                    switch ((i22 % 1) + 62) {
                    case 62:
                        Test.dFld *= i20;
                        break;
                    }
                    Test.iFld += i21;
                    for (d1 = 1; d1 < 1; ++d1) {
                        Test.iArrFld[i2] *= (int)d1;
                    }
                }
                f1 = i19;
            }
        } else {
            Test.instanceCount -= i20;
            i23 = i4;
            Test.iArrFld[(i2 >>> 1) % N] /= (int)-1.19237;
        }
        lArr1[(126 >>> 1) % N] = s1;
        lArr1[(i23 >>> 1) % N] <<= Test.instanceCount;


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
