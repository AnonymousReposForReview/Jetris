package tests.javafuzzer1139;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:33:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static boolean bFld=true;
    public static float fFld=-2.47F;
    public double dFld=0.24862;
    public static short sFld=8319;
    public static byte byArrFld[]=new byte[N];
    public volatile double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-120);
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b) {

        int i8=-42562, i9=171, i10=-8355, i11=-1, iArr1[]=new int[N];
        byte by1=125;
        double d=0.113075;

        FuzzerUtils.init(iArr1, 38663);

        for (i8 = 3; i8 < 387; i8++) {
            float f2=-2.336F;
            f2 += i8;
            i9 *= i8;
            i9 = by1;
            for (i10 = 1; i10 < 4; i10++) {
                try {
                    i11 = (i11 / 223);
                    i11 = (-33994 % i8);
                    i11 = (i10 / -29);
                } catch (ArithmeticException a_e) {}
                i9 >>= i10;
                d = Test.instanceCount;
            }
        }
        i9 = 67;
        iArr1[(30 >>> 1) % N] -= i9;
        long meth_res = (b ? 1 : 0) + i8 + i9 + by1 + i10 + i11 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2, int i3) {

        int i4=1, i5=11, i6=-167, i7=8, iArr[]=new int[N];
        float f1=124.898F;
        byte by=80;

        FuzzerUtils.init(iArr, -45376);

        i2 = iArr[(i3 >>> 1) % N];
        for (i4 = 336; i4 > 5; i4 -= 3) {
            f1 *= (++Test.instanceCount);
            for (i6 = 1; i6 < 14; i6++) {
                boolean b1=false;
                by = (byte)(iMeth(b1) * i5);
                try {
                    i7 = (i3 % -225);
                    iArr[(i5 >>> 1) % N] = (iArr[i6] / -20);
                    i2 = (i2 / i1);
                } catch (ArithmeticException a_e) {}
                Test.byArrFld[i4] -= (byte)i1;
                i3 *= i4;
                if (b1) {
                    Test.instanceCount += -78;
                    i3 += (((i6 * i7) + i3) - i3);
                    i5 <<= i1;
                    iArr[i4] *= i6;
                } else {
                    if (b1) break;
                    i1 = i1;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, float f) {

        double d1=1.49020;
        int i12=-40312, i13=-5, i14=-298, i15=-7599, i16=21468, i17=18866, i18=34476, iArr2[]=new int[N];
        float f3=57.853F;
        byte by2=34;

        FuzzerUtils.init(iArr2, -51873);

        vMeth1(-39175, i, i);
        for (d1 = 397; d1 > 1; d1 -= 2) {
            i12 -= i;
        }
        for (i13 = 10; i13 < 265; i13++) {
            for (i15 = 1; i15 < 6; i15++) {
                i14 -= i13;
                f *= (float)d1;
                for (f3 = 1; f3 < 2; f3++) {
                    f += (((f3 * Test.instanceCount) + f3) - Test.instanceCount);
                    try {
                        iArr2[i13] = (i14 % -58355);
                        i12 = (iArr2[i15 - 1] / i);
                        iArr2[(int)(f3 - 1)] = (i15 / 1090052384);
                    } catch (ArithmeticException a_e) {}
                    iArr2 = iArr2;
                    i += (int)((long)f3 ^ by2);
                    Test.instanceCount += Test.instanceCount;
                    i18 = i18;
                    if (Test.bFld) break;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f3) + i17 + by2 + i18 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i19=22352, i20=139, i21=31805, i23=5, i24=4, i25=40, i26=-61663, i27=-48, i28=148;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 101.483F);

        if (Test.bFld) {
            vMeth(i19, Test.fFld);
            switch (((i19 >>> 1) % 1) + 125) {
            case 125:
                i19 <<= -5;
                for (float f4 : fArr) {
                    i19 = (int)Test.instanceCount;
                    f4 -= -29503;
                    dArrFld = dArrFld;
                    i19 >>>= i19;
                    Test.instanceCount = i19;
                    Test.iArrFld[(i19 >>> 1) % N][(i19 >>> 1) % N] -= i19;
                    Test.iArrFld[(-51 >>> 1) % N][(i19 >>> 1) % N] = (int)dFld;
                    i19 += (int)f4;
                }
                i19 >>= i19;
                break;
            default:
                for (i20 = 10; 170 > i20; ++i20) {
                    i21 += (((i20 * Test.sFld) + i19) - i20);
                    i19 += (i20 * i20);
                }
                for (int i22 : iArrFld1) {
                    for (i23 = 2; i23 < 63; ++i23) {
                        for (i25 = 1; i25 < 2; i25++) {
                            i26 -= i24;
                            if (Test.bFld) break;
                            Test.instanceCount <<= 125;
                            i24 = (int)Test.instanceCount;
                            Test.instanceCount += i20;
                            Test.bFld = Test.bFld;
                            i19 = i20;
                        }
                        for (i27 = i23; i27 < 2; ++i27) {
                            i24 = (int)Test.fFld;
                            i19 += (-56 + (i27 * i27));
                        }
                    }
                }
            }
        } else {
            i26 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
