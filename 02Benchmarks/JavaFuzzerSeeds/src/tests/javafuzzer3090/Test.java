package tests.javafuzzer3090;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:34:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public static int iFld=7;
    public static volatile short sFld=17731;
    public volatile double dFld=-2.37011;
    public volatile byte byArrFld[]=new byte[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, long l1, long l2) {

        int i6=-14, i7=-21071, i8=159, i9=-78;
        boolean b=true;
        short s=16109;
        float f=-111.874F;
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(lArr, -6609506816697447593L);
        FuzzerUtils.init(lArr1, 119L);

        Test.iFld -= Test.iFld;
        i6 = 372;
        do {
            d -= -4L;
            b = b;
            Test.iFld >>= i6;
            for (i7 = 13; 1 < i7; i7 -= 2) {
                Test.iFld += (i7 | s);
                switch (((i6 % 2) * 5) + 56) {
                case 60:
                    lArr = lArr1;
                    if (i8 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d) + l1 + l2 + i6 + (b ? 1 : 0) + i7 + i8 + s +
                            Float.floatToIntBits(f) + i9 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    break;
                case 61:
                    i8 = i8;
                    d += i7;
                    Test.iFld += (i7 + f);
                    break;
                default:
                    i9 *= i7;
                    if (i6 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d) + l1 + l2 + i6 + (b ? 1 : 0) + i7 + i8 + s +
                            Float.floatToIntBits(f) + i9 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                }
            }
        } while ((i6 -= 3) > 0);
        vMeth1_check_sum += Double.doubleToLongBits(d) + l1 + l2 + i6 + (b ? 1 : 0) + i7 + i8 + s +
            Float.floatToIntBits(f) + i9 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(long l, int i3) {

        int i4=208, i5=-6, i10=11, i11=-29285;
        double d1=-97.45244;
        float f1=0.275F;
        boolean b1=true;

        for (i4 = 6; i4 < 130; i4++) {
            l += -51255;
            vMeth1(d1, l, Test.instanceCount);
            f1 = -31706;
            i3 -= i3;
            i10 = 1;
            while (++i10 < 13) {
                i5 += (i10 * i3);
                b1 = b1;
                Test.iFld += i10;
                l = i4;
                if (b1) {
                    i5 &= Test.iFld;
                } else {
                    i11 = 1;
                    while (++i11 < 1) {
                        Test.iFld *= (int)f1;
                        i5 += 0;
                    }
                }
            }
        }
        long meth_res = l + i3 + i4 + i5 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10 + (b1 ? 1 : 0)
            + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {


        iMeth(Test.instanceCount, i2);
        vMeth_check_sum += i2;
    }

    public void mainTest(String[] strArr1) {

        int i=-21280, i1=207, i12=160, i13=-37814, i14=-27481, i15=37099, i16=-7, i17=-1, iArr[]=new int[N];
        byte by=56;
        float f2=-39.667F;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 24468);

        for (i = 15; i < 284; ++i) {
            vMeth(Test.iFld);
        }
        for (i12 = 4; i12 < 288; i12++) {
            i1 = by;
            Test.sFld += (short)Test.instanceCount;
            i14 = 1;
            while ((i14 += 2) < 89) {
                bArr[i14] = false;
                switch ((i14 % 4) + 35) {
                case 35:
                    Test.iFld = (int)Test.instanceCount;
                    f2 = (float)dFld;
                    Test.instanceCount = Test.instanceCount;
                case 36:
                case 37:
                    Test.iFld = (int)f2;
                    Test.iFld >>= 158;
                    if (b2) continue;
                    break;
                case 38:
                    Test.instanceCount = i12;
                    i1 = i13;
                    i15 = 1;
                    while ((i15 += 3) < 3) {
                        Test.iFld = (int)Test.instanceCount;
                        Test.instanceCount += i1;
                        i16 += (i15 * i15);
                        switch (((i15 % 1) * 5) + 12) {
                        case 13:
                            i13 = i14;
                            f2 = Test.instanceCount;
                            break;
                        default:
                            Test.sFld >>= (short)6L;
                        }
                        byArrFld[i15] ^= (byte)i12;
                        i17 += (int)5L;
                    }
                    switch (((i12 % 1) * 5) + 97) {
                    case 102:
                    }
                    break;
                default:
                    f2 += i14;
                    Test.instanceCount = (long)dFld;
                    iArr[i14 + 1] += by;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
