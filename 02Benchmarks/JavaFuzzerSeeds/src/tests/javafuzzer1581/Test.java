package tests.javafuzzer1581;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:18:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9429L;
    public static long lFld=1843623111098288633L;
    public static short sFld=-4382;
    public static double dFld=116.13058;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public volatile double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1) {

        byte by=101;
        int i6=-60029, i8=-7957, i9=4, i10=-4, i11=-24293, iArr1[]=new int[N];
        float f1=46.732F;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 8095);
        FuzzerUtils.init(dArr, 1.97672);

        by = (byte)i6;
        for (int i7 : iArr1) {
            for (i8 = 4; i8 > 1; i8--) {
                i9 *= (int)l1;
                dArr[i8] += f1;
                l1 ^= i8;
                for (i10 = i8; i10 < 2; i10 += 2) {
                    if (b1) continue;
                    l1 = by;
                    i7 >>= i6;
                    iArr1 = iArr1;
                    switch (((i10 >>> 1) % 3) + 73) {
                    case 73:
                        by += (byte)i6;
                        i11 += (((i10 * l1) + Test.lFld) - Test.sFld);
                        if (i7 != 0) {
                            vMeth2_check_sum += l1 + by + i6 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + (b1 ? 1
                                : 0) + FuzzerUtils.checkSum(iArr1) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 74:
                    case 75:
                        i7 -= i8;
                    }
                }
            }
        }
        vMeth2_check_sum += l1 + by + i6 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(float f, boolean b) {

        int i4=-13, i5=-212, i12=-8, i13=-6, i14=220, i15=-6939, i16=-3, i17=-5, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -113);

        for (i4 = 11; 265 > i4; ++i4) {
            vMeth2(10L);
            for (i12 = 1; i12 < 6; ++i12) {
                i5 += (int)74.642F;
                try {
                    i13 = (-246 % i13);
                    i13 = (iArr2[i4 + 1] % -36527);
                    iArr2[i4] = (i4 % i5);
                } catch (ArithmeticException a_e) {}
                for (i14 = 2; i14 > 1; i14 -= 3) {
                    i15 ^= i5;
                    i13 = i5;
                }
                for (i16 = 1; 2 > i16; i16++) {
                    i5 += (i16 * i4);
                    switch ((i12 % 4) + 22) {
                    case 22:
                        f = Test.lFld;
                        iArr2[i16 - 1] -= i17;
                    case 23:
                        i13 += i16;
                        Test.sFld = (short)i5;
                    case 24:
                        i15 = i12;
                        break;
                    case 25:
                        Test.dFld *= Test.lFld;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + i4 + i5 + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(long l, int i3) {

        float f2=1.909F;
        boolean b2=true;
        int i18=11926, i19=147, i20=3822, i21=-1;

        vMeth1(f2, b2);
        i18 = 1;
        do {
            iArrFld[i18 + 1] = -154;
            i3 += (int)Test.dFld;
            f2 += 175;
            i19 = 1;
            do {
                if (i18 != 0) {
                    vMeth_check_sum += l + i3 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21;
                    return;
                }
                i3 += i19;
                Test.lFld -= i19;
                for (i20 = 1; 1 > i20; i20++) {
                    Test.dFld = -1.935F;
                    Test.sFld += (short)(i20 + i19);
                    i21 = (int)18095L;
                    i21 >>= (int)-126L;
                    Test.dFld = Test.dFld;
                }
            } while (++i19 < 6);
        } while (++i18 < 282);
        vMeth_check_sum += l + i3 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i=26406, i1=-29902, i2=1, i22=58, i23=-120, i24=9, i25=2, i26=-175, i27=111, iArr[][]=new int[N][N];
        byte by1=94, byArr[]=new byte[N];
        float f3=-2.747F, f4=2.121F, fArr[]=new float[N];
        boolean b3=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(fArr, -24.989F);
        FuzzerUtils.init(sArr, (short)-1622);
        FuzzerUtils.init(byArr, (byte)126);

        switch (((iArr[(i >>> 1) % N][(i >>> 1) % N] >>> 1) % 9) + 52) {
        case 52:
            fArr[(i >>> 1) % N] = Math.max(i, iArr[(i >>> 1) % N][(i >>> 1) % N]);
        case 53:
            for (i1 = 12; i1 < 365; ++i1) {
                vMeth(Test.instanceCount, i2);
                for (i22 = 2; i22 < 71; ++i22) {
                    switch ((((i >>> 1) % 9) * 5) + 104) {
                    case 119:
                        i <<= -73;
                        i += i22;
                        for (i24 = 1; i24 < 2; ++i24) {
                            Test.sFld >>= (short)i22;
                            i25 -= i24;
                            i2 &= i22;
                            i23 = i22;
                            i23 += (int)Test.instanceCount;
                            i23 >>>= i25;
                            Test.instanceCount = by1;
                        }
                        break;
                    case 114:
                        i2 <<= 36449;
                        i23 += (i22 | i24);
                        for (i26 = 1; i26 < 2; ++i26) {
                            i2 -= i2;
                            lArrFld[i22 + 1] = i25;
                            i27 += (((i26 * f3) + i26) - i24);
                            if (false) {
                                iArrFld[i22 - 1] -= i24;
                                if (b3) continue;
                                try {
                                    i = (47979 % i25);
                                    i25 = (i2 % i26);
                                    i25 = (-495728015 % iArrFld[i1 + 1]);
                                } catch (ArithmeticException a_e) {}
                                i23 -= i2;
                            }
                            iArrFld[i26 - 1] -= (int)f3;
                            dArrFld[i1] -= f3;
                            dArrFld[i22 - 1] /= (Test.instanceCount | 1);
                        }
                    case 107:
                        i23 = -24623;
                    case 143:
                        Test.dFld += f3;
                    case 140:
                    case 113:
                        try {
                            i25 = (iArrFld[i22 - 1] / -4);
                            i27 = (234 % i22);
                            i2 = (-61214 / i1);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 137:
                        f3 += i25;
                        break;
                    case 142:
                        i23 += (((i22 * Test.lFld) + i) - i23);
                    case 118:
                        Test.instanceCount -= i24;
                    }
                }
            }
            break;
        case 54:
            i25 += (int)-248L;
            break;
        case 55:
            f3 *= f4;
            break;
        case 56:
            Test.lFld = Test.instanceCount;
        case 57:
            Test.lFld = Test.instanceCount;
            break;
        case 58:
            byArr[(i24 >>> 1) % N] = (byte)i24;
            break;
        case 59:
            i25 /= (int)(by1 | 1);
            break;
        case 60:
            f4 *= f3;
            break;
        default:
            iArr[(i25 >>> 1) % N][(i23 >>> 1) % N] += 11;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
