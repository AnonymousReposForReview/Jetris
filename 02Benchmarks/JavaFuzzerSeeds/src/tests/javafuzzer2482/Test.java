package tests.javafuzzer2482;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:22:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static int iFld=-112;
    public static double dFld=113.76769;
    public float fFld=1.301F;
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 0L);
        FuzzerUtils.init(Test.byArrFld, (byte)48);
        FuzzerUtils.init(Test.iArrFld, -61);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, float f) {

        int i3=-168, i4=-32888, i5=-7440, i6=-25152, i7=15722, i8=117;
        float f1=0.888F;

        for (i3 = 1; i3 < 147; i3++) {
            Test.lArrFld[i3 - 1] = i3;
            Test.lArrFld[i3] *= 37612;
            for (f1 = 1; f1 < 11; ++f1) {
                Test.instanceCount += (long)1.98897;
                i2 = i4;
                i2 -= (int)Test.instanceCount;
            }
            for (i6 = i3; 11 > i6; ++i6) {
                i2 = i5;
                f = i7;
                i7 += (int)Test.instanceCount;
                i8 += i6;
                i8 = i7;
                i8 >>>= -244;
                Test.instanceCount = -11;
            }
        }
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8;
    }

    public static void vMeth() {

        float f2=-1.709F;
        int i9=139, i10=126, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 9);

        vMeth1(Test.iFld, f2);
        Test.byArrFld[(Test.iFld >>> 1) % N] *= (byte)Test.iFld;
        Test.iFld <<= Test.iFld;
        Test.iFld *= (int)1.89873;
        Test.lArrFld[(Test.iFld >>> 1) % N] |= -16;
        Test.iFld *= (int)Test.instanceCount;
        for (i9 = 7; i9 < 346; ++i9) {
            switch (((Test.iFld >>> 1) % 2) + 9) {
            case 9:
                Test.iFld += 58669;
            case 10:
                Test.iFld = (int)1.230F;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i9 + i10 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i=-24314, i1=62199;
        boolean b=false;

        i += (int)Math.abs(++Test.instanceCount);
        i1 = 1;
        while (++i1 < 382) {
            vMeth();
            Test.iArrFld[i1 - 1] = i1;
            Test.instanceCount = 173;
            Test.instanceCount <<= Test.iFld;
            Test.iFld <<= Test.iFld;
            switch (((Test.iFld >>> 1) % 1) + 126) {
            case 126:
                if (i1 != 0) {
                }
                Test.iArrFld[i1 - 1] += i;
                break;
            default:
                switch (((i1 % 5) * 5) + 72) {
                case 76:
                    Test.instanceCount += i;
                    Test.dFld -= i;
                    i >>= Test.iFld;
                    break;
                case 75:
                    b = b;
                case 93:
                    i >>= (int)Test.instanceCount;
                case 85:
                    Test.iFld = (int)1.275F;
                    break;
                case 74:
                    Test.iFld += (((i1 * i) + i) - Test.instanceCount);
                    break;
                default:
                    Test.iArrFld[i1] -= -119;
                }
            }
        }
        long meth_res = i + i1 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=-2, i13=8, i14=743, i15=-5, i16=-55, i18=-10, i19=239;
        byte by=-58;
        short s=8016, sArr[]=new short[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -32.673F);
        FuzzerUtils.init(sArr, (short)-4050);

        iMeth();
        for (i12 = 8; i12 < 180; ++i12) {
            i14 = 1;
            while (++i14 < 146) {
                Test.instanceCount = (long)Test.dFld;
                i13 = 29841;
                fArr = fArr;
                by = (byte)Test.instanceCount;
                i13 = s;
                Test.iArrFld[i12 - 1] -= 20365;
                switch (((i14 % 1) * 5) + 81) {
                case 84:
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount <<= i13;
                    break;
                }
                for (i15 = 1; i15 < 1; i15++) {
                    i13 -= i13;
                }
                Test.iArrFld[i14] = (int)Test.instanceCount;
                Test.instanceCount = i12;
            }
            Test.instanceCount <<= i15;
            i16 <<= (int)Test.instanceCount;
            switch ((((-8800 >>> 1) % 8) * 5) + 125) {
            case 151:
                Test.instanceCount = i15;
                switch (((i12 % 10) * 5) + 61) {
                case 86:
                    Test.iArrFld[i12 - 1] >>= -47644;
                    break;
                case 63:
                    for (i18 = i12; i18 < 146; ++i18) {
                        by >>= (byte)7;
                        i13 = (int)fFld;
                        Test.dFld -= by;
                        Test.iArrFld[i18] = i12;
                        i13 = (int)Test.instanceCount;
                        fFld = i16;
                        Test.lArrFld[i18 - 1] += 23833;
                    }
                    break;
                case 110:
                    Test.instanceCount += i12;
                    break;
                case 111:
                    Test.iFld += i12;
                    break;
                case 65:
                    Test.instanceCount <<= i14;
                    break;
                case 79:
                    i16 = 32039;
                    break;
                case 95:
                    i13 += (int)Test.instanceCount;
                    break;
                case 104:
                    i19 += (i12 | i15);
                case 88:
                    Test.instanceCount += (i12 * i15);
                    break;
                case 105:
                }
                break;
            case 132:
                Test.instanceCount *= i18;
                break;
            case 149:
                i16 = i15;
                break;
            case 155:
                i16 -= 0;
                break;
            case 138:
                fFld += (i12 * i19);
            case 146:
                if (true) break;
                break;
            case 141:
            case 129:
                i19 = i18;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
