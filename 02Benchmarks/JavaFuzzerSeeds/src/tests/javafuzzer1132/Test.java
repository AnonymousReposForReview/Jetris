package tests.javafuzzer1132;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:11:27 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6L;
    public static int iFld=-125;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 36L);
        FuzzerUtils.init(Test.iArrFld, -233);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, short s, double d) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -246);

        iArr = iArr;
        long meth_res = l1 + s + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        short s1=15850;
        double d1=0.12187, dArr[]=new double[N];
        int i2=146, i3=8, i4=0, i5=-7;
        byte by=95;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -105.166F);
        FuzzerUtils.init(dArr, 0.4989);

        Test.iFld -= Test.iFld;
        Test.lArrFld[(-9 >>> 1) % N] = (long)fMeth(Test.instanceCount, s1, d1);
        for (i2 = 9; i2 < 398; i2++) {
            i4 = 1;
            do {
                i5 = 1;
                do {
                    float f2=-2.574F;
                    i3 += i5;
                    fArr[i4] *= i5;
                    try {
                        Test.iArrFld[i4] = (694451569 % i5);
                        i3 = (i4 / i5);
                        i3 = (-197 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    by = (byte)i3;
                    dArr[i5] -= i4;
                    d1 *= i3;
                    Test.iFld += (i5 + i2);
                    Test.iFld = i5;
                    Test.iFld -= (int)f2;
                    s1 = (short)i4;
                } while (++i5 < 1);
            } while (++i4 < 4);
        }
        long meth_res = s1 + Double.doubleToLongBits(d1) + i2 + i3 + i4 + i5 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, long l) {

        float f1=1.735F;
        int i6=-20538, i7=-61493, i8=-5, i9=-48;
        double d2=-101.32166;

        f1 = ((-(Test.instanceCount++)) - iMeth());
        for (i6 = 14; i6 < 341; i6++) {
            i1 -= 184;
            for (i8 = 1; i8 < 5; ++i8) {
                switch (((i6 % 10) * 5) + 110) {
                case 134:
                    d2 = 1;
                    while (++d2 < 2) {
                        boolean b=true;
                        Test.iArrFld[i8] >>= -3050;
                        Test.iFld += (int)d2;
                        if (Test.iFld != 0) {
                            vMeth_check_sum += i1 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
                                Double.doubleToLongBits(d2);
                            return;
                        }
                        i9 += i8;
                        Test.iFld += (int)d2;
                        if (false) {
                            if (b) break;
                            Test.instanceCount = i7;
                        } else if (b) {
                            i9 += (int)d2;
                        } else {
                            i1 *= i8;
                        }
                    }
                    break;
                case 132:
                    i1 -= (int)l;
                    break;
                case 128:
                    Test.iFld = (int)Test.instanceCount;
                    break;
                case 120:
                    f1 *= i6;
                    break;
                case 149:
                    if (i9 != 0) {
                        vMeth_check_sum += i1 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
                            Double.doubleToLongBits(d2);
                        return;
                    }
                    break;
                case 137:
                    i7 = Test.iFld;
                    break;
                case 142:
                    i9 >>= (int)Test.instanceCount;
                    break;
                case 139:
                    Test.instanceCount = l;
                    break;
                case 124:
                    i9 -= (int)-14.624F;
                    break;
                case 143:
                    if (Test.iFld != 0) {
                        vMeth_check_sum += i1 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
                            Double.doubleToLongBits(d2);
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.518F, fArr1[]=new float[N];
        int i=11, i10=34223, i11=-10, i12=55879, i13=138, i14=26106, i15=198, i16=27987, i17=-12;
        long l2=110L;
        boolean b1=false;
        byte by1=-35;

        FuzzerUtils.init(fArr1, 31.852F);

        f -= (i++);
        i = i;
        vMeth(107, Test.instanceCount);
        for (i10 = 17; i10 < 286; ++i10) {
            try {
                Test.iArrFld[i10 + 1] = (i11 / i);
                Test.iFld = (-220 % i10);
                Test.iFld = (Test.iArrFld[(i10 >>> 1) % N] / i);
            } catch (ArithmeticException a_e) {}
            fArr1 = fArr1;
            l2 += (-118 + (i10 * i10));
            for (i12 = 5; 93 > i12; i12++) {
                i -= i11;
                b1 = b1;
                fArr1[i10] = i13;
                i11 = i11;
                i11 = -4966;
                l2 <<= Test.instanceCount;
                i13 += i12;
                Test.iArrFld[i10 + 1] -= (int)l2;
            }
            for (i14 = 3; i14 < 93; ++i14) {
                i += Test.iFld;
                i11 += by1;
                for (i16 = 2; i16 > i14; i16--) {
                    Test.instanceCount *= Test.instanceCount;
                    switch ((i16 % 3) + 48) {
                    case 48:
                        b1 = true;
                        f = f;
                        Test.instanceCount *= l2;
                        break;
                    case 49:
                        i += Test.iFld;
                        i11 = (int)f;
                        Test.iArrFld[i14] *= (int)Test.instanceCount;
                        break;
                    case 50:
                        Test.instanceCount = 8;
                        i15 ^= (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
