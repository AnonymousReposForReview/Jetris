package tests.javafuzzer1446;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:49:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2138784207L;
    public static boolean bFld=true;
    public static short sFld=-28305;
    public static byte byArrFld[][]=new byte[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)57);
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5) {

        long l2=6L, lArr[]=new long[N];
        int i6=-3, i7=11053, i8=6;
        double d=-127.108515;
        float f1=1.321F;
        short s=28796;

        FuzzerUtils.init(lArr, -2149435136590553555L);

        switch ((((i5 >>> 1) % 2) * 5) + 62) {
        case 71:
            for (l2 = 15; l2 < 281; l2++) {
                for (i7 = 1; i7 < 6; i7++) {
                    d = f1;
                    Test.iArrFld[i7] -= i7;
                    Test.instanceCount = i7;
                    s -= (short)4;
                    f1 += -189;
                }
                Test.instanceCount += (((l2 * i5) + f1) - Test.instanceCount);
                i5 += (int)f1;
                lArr[(int)(l2)] = i7;
                Test.instanceCount -= i7;
                f1 -= l2;
            }
            break;
        case 68:
            i5 -= i7;
            i5 -= (int)1.556F;
            break;
        default:
            Test.bFld = false;
        }
        long meth_res = i5 + l2 + i6 + i7 + i8 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, float f) {

        int i1=8221, i2=-10, i3=128, i4=-16692, i9=14, i10=-111;
        byte by=76;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.88577);

        for (i1 = 3; i1 < 134; i1++) {
            Test.byArrFld[i1 - 1] = (Test.byArrFld[i1 - 1] = Test.byArrFld[i1 - 1]);
            switch ((i1 % 2) + 79) {
            case 79:
                for (i3 = 1; i3 < 12; ++i3) {
                    by = (byte)(++i4);
                }
                Test.iArrFld[i1] <<= iMeth(i4);
                break;
            case 80:
            }
            if (Test.bFld) {
                Test.sFld += (short)i1;
                for (i9 = 1; i9 < 12; i9++) {
                    f += i1;
                    dArr[i1] = i3;
                    Test.instanceCount &= Test.sFld;
                    Test.sFld >>= (short)i1;
                    i10 = (int)l1;
                    Test.bFld = Test.bFld;
                }
            } else if (Test.bFld) {
                i4 /= (int)((long)(f) | 1);
            } else {
                i2 += i1;
                vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + by + i9 + i10 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + by + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, long l) {

        float f2=36.920F, f3=0.745F, fArr[]=new float[N];
        int i11=-3, i12=29924, i13=8, i14=110;
        byte by1=-118;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -697817216L);
        FuzzerUtils.init(fArr, -1.617F);

        i = (++i);
        vMeth1(13L, f2);
        for (i11 = 12; i11 < 389; i11 += 2) {
            f3 = 1;
            do {
                lArr1[(int)(f3)] -= i11;
                l += (long)((long)f3 ^ (long)f2);
                if (i11 != 0) {
                    vMeth_check_sum += i + l + Float.floatToIntBits(f2) + i11 + i12 + Float.floatToIntBits(f3) + by1 +
                        i13 + i14 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                fArr[i11 - 1] += i11;
                f2 += (f3 * f3);
                i >>= by1;
                for (i13 = 1; i13 > 1; --i13) {
                    i12 += (i13 | i);
                    Test.iArrFld[(int)(f3)] += 33951;
                    i14 -= i13;
                    i12 = i14;
                }
            } while (++f3 < 8);
        }
        vMeth_check_sum += i + l + Float.floatToIntBits(f2) + i11 + i12 + Float.floatToIntBits(f3) + by1 + i13 + i14 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=-29909, i17=-38525, i18=-25231, i19=14, i20=147, i21=-226, i22=-3, i23=-3, i24=-9, i25=-6921, i26=26658;
        float f4=1.498F, fArr1[]=new float[N];
        double d1=-121.126225, d2=-37.3450;
        byte by2=18;

        FuzzerUtils.init(fArr1, -2.809F);

        vMeth(i15, Test.instanceCount);
        for (int i16 : Test.iArrFld) {
            f4 = 121;
            i15 >>= (int)Test.instanceCount;
        }
        i15 &= (int)Test.instanceCount;
        i15 += (int)Test.instanceCount;
        for (d1 = 132; d1 > 8; d1 -= 3) {
            for (i18 = (int)(d1); i18 < 369; i18++) {
                switch (((i18 >>> 1) % 6) + 94) {
                case 94:
                    switch (((i18 % 3) * 5) + 28) {
                    case 40:
                        for (i20 = 1; i20 < 2; i20++) {
                            i15 = i21;
                            i19 += i20;
                            try {
                                i19 = (i18 / Test.iArrFld[(int)(d1 + 1)]);
                                Test.iArrFld[i20 + 1] = (912695498 / i20);
                                i21 = (-23 / i18);
                            } catch (ArithmeticException a_e) {}
                            Test.bFld = Test.bFld;
                            Test.bFld = Test.bFld;
                            i21 *= i15;
                        }
                        d2 -= -1;
                        i19 -= (int)Test.instanceCount;
                    case 34:
                        for (i22 = 1; i22 < 2; i22++) {
                            Test.instanceCount = i20;
                        }
                        for (i24 = 2; i24 > 1; i24--) {
                            Test.bFld = Test.bFld;
                            i19 += i24;
                        }
                        d2 = i22;
                        break;
                    case 39:
                        i26 = 1;
                        do {
                            Test.iArrFld[i26 + 1] >>= i23;
                            if (Test.bFld) {
                                Test.iArrFld[(int)(d1 - 1)] += 0;
                            }
                            fArr1[i26 - 1] = f4;
                        } while (++i26 < 2);
                        break;
                    default:
                        Test.instanceCount = i24;
                    }
                    break;
                case 95:
                    by2 += (byte)(((i18 * Test.instanceCount) + i18) - f4);
                    break;
                case 96:
                    i25 = i26;
                    break;
                case 97:
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 98:
                    f4 *= Test.instanceCount;
                    break;
                case 99:
                    d2 -= i15;
                    break;
                default:
                    Test.iArrFld[(int)(d1 + 1)] = i22;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
