package tests.javafuzzer710;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:14:15 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public static double dFld=10.42426;
    public static float fFld=0.845F;
    public static byte byFld=-103;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 54199L);
        FuzzerUtils.init(Test.iArrFld, 1);
        FuzzerUtils.init(Test.sArrFld, (short)-15770);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i13, long l2) {

        int i14=-42, i15=-12, i16=-10133, i17=7618, i18=1, i19=14, i20=1, iArr[]=new int[N];
        byte by=6, byArr[]=new byte[N];
        boolean b=false;
        long l3=-113L;

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(byArr, (byte)35);

        iArr[(i13 >>> 1) % N] += (int)1.72045;
        for (i14 = 6; 347 > i14; i14 += 2) {
            for (i16 = i14; i16 < 9; i16++) {
                try {
                    i13 = (Test.iArrFld[i14] / i15);
                    i15 = (-47 / i14);
                    i13 = (-7769 % iArr[i14 - 1]);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i16 - 1] >>= (int)Test.instanceCount;
                byArr[i14 - 1] = (byte)i13;
                i18 = 1;
                do {
                    i17 += i18;
                    i15 >>>= by;
                    b = b;
                    if (i18 != 0) {
                    }
                } while (++i18 < 1);
                l2 ^= i14;
                for (i19 = 1; 1 > i19; ++i19) {
                    l3 += 36;
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }
        long meth_res = i13 + l2 + i14 + i15 + i16 + i17 + i18 + by + (b ? 1 : 0) + i19 + i20 + l3 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i8=-10, i9=-181, i10=63, i11=-191, i12=-83;
        float f1=0.489F;
        boolean b1=false;

        for (i8 = 13; i8 < 222; ++i8) {
            for (i10 = 8; i10 > 1; i10 -= 3) {
                for (f1 = 1; f1 < 4; ++f1) {
                    Test.dFld = (((Test.fFld--) - (Test.dFld *= i12)) - 20.552F);
                    if (i12 != 0) {
                    }
                    i12 += (int)(f1 - i10);
                    i11 = (int)((fMeth(i9, Test.instanceCount) + -47690L) - Test.dFld);
                    Test.sArrFld[(int)(f1)] = (short)i12;
                    switch ((i10 % 2) + 89) {
                    case 89:
                        Test.fFld = Test.instanceCount;
                        Test.byFld += (byte)i8;
                        break;
                    case 90:
                        Test.fFld -= i8;
                        i11 += -2847;
                        i12 = i9;
                        try {
                            i11 = (i9 / i11);
                            i12 = (i9 % Test.iArrFld[i8 - 1]);
                            i11 = (i8 % i11);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        if (b1) break;
                    }
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i2=-1, i3=6482, i4=-29, i5=0, i6=-2, i7=63718, i21=10, i22=23806;
        float f=0.138F, fArr[]=new float[N];
        short s=23914;

        FuzzerUtils.init(fArr, 1.890F);

        for (i2 = 17; 354 > i2; ++i2) {
            Test.lArrFld = (Test.lArrFld = Test.lArrFld);
            i3 *= ((++i3) * i2);
            Test.iArrFld[i2] *= (int)Double.longBitsToDouble(Test.lArrFld[i2] = (++i3));
            for (i4 = 1; i4 < 5; i4++) {
                for (i6 = 1; i6 < 2; i6++) {
                    fArr[i4 - 1] *= (((i3 + 51427L) + (f + i2)) + (iMeth() * Test.instanceCount));
                    Test.iArrFld[i2] -= (int)-708768589L;
                }
                for (i21 = 1; i21 < 2; i21++) {
                    i5 *= 49645;
                }
                Test.dFld = f;
                Test.fFld = s;
                i3 += (((i4 * i2) + i5) - i7);
                if (i5 != 0) {
                    vMeth_check_sum += l + l1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i21 + i22 + s +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                i7 <<= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += l + l1 + i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i21 + i22 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=64, i1=-6, i23=196, i24=-7, i25=-6, i26=251, i27=-67;
        float f2=25.963F;
        short s1=-13936;
        long l4=4984471637734504182L;

        for (i = 14; 383 > i; ++i) {
            switch (((i % 2) * 5) + 10) {
            case 14:
                vMeth(Test.instanceCount, Test.instanceCount);
                for (i23 = 3; i23 < 68; i23++) {
                    i24 = i23;
                    Test.iArrFld[i23] *= i23;
                    i25 = 1;
                    while (++i25 < 2) {
                        i1 += i24;
                        Test.iArrFld[i23] += i25;
                        Test.instanceCount %= 21814;
                        Test.iArrFld[i + 1] ^= i23;
                        i24 -= (int)1135842747936425907L;
                    }
                    i24 += i23;
                    i24 += (int)(-8L + (i23 * i23));
                    switch ((((i23 >>> 1) % 2) * 5) + 53) {
                    case 56:
                        Test.instanceCount += i23;
                        for (f2 = 1; f2 < 2; ++f2) {
                            bFld = bFld;
                            i1 = i23;
                            Test.fFld *= Test.byFld;
                            i26 += (int)((long)f2 | s1);
                            Test.iArrFld[i23 + 1] %= -15852;
                            if (bFld) break;
                            Test.iArrFld = Test.iArrFld;
                            Test.iArrFld[i] = i24;
                        }
                        break;
                    case 58:
                        i1 >>= i26;
                    }
                    Test.dFld = f2;
                    for (l4 = 1; l4 < 2; l4++) {
                        i27 += (int)Test.instanceCount;
                        Test.instanceCount += (l4 - i1);
                    }
                }
            case 19:
                i27 >>= -3;
                break;
            default:
                Test.lArrFld[i - 1] -= 8133406530205031086L;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
