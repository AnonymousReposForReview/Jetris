package tests.javafuzzer3441;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:23:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3349710967L;
    public double dFld=-12.38568;
    public byte byFld=-27;
    public static short sFld=-20590;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -39779);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=41, i7=230;
        double d=2.16782;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.141F);

        for (i6 = 10; i6 < 306; ++i6) {
            try {
                i7 = (-124 % Test.iArrFld[i6]);
                i7 = (Test.iArrFld[i6] / 58357);
                i7 = (Test.iArrFld[i6] % Test.iArrFld[i6]);
            } catch (ArithmeticException a_e) {}
            Test.iArrFld[i6 - 1] = i7;
            fArr[i6 - 1] += Test.instanceCount;
            i7 += (int)-1880245980L;
        }
        d *= Test.instanceCount;
        long meth_res = i6 + i7 + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i5=41099, i8=151, i9=55408, i10=21, i11=32599, i12=8;
        double d1=-2.40212, dArr[]=new double[N];
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 126.65324);
        FuzzerUtils.init(lArr, 1406835736L);

        i5 >>= ((~(--i5)) - (i5 - (i5++)));
        if (b) {
            dArr[(i5 >>> 1) % N] = ((++Test.instanceCount) - (iMeth() >> i5));
        } else if (b) {
            for (i8 = 14; i8 < 338; i8 += 3) {
                i5 *= (int)Test.instanceCount;
                i10 = 14;
                do {
                    Test.iArrFld[i10 + 1] += (int)d1;
                    d1 = Test.instanceCount;
                } while (--i10 > 0);
                if (true) {
                    for (i11 = 1; i11 < 14; i11++) {
                        Test.instanceCount += (i11 * i11);
                    }
                    Test.instanceCount = i8;
                    if (b) continue;
                    vMeth1_check_sum += i5 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + (b ? 1 : 0) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                Test.iArrFld[i8] = i10;
                i9 += (-186 + (i8 * i8));
            }
        } else {
            lArr[(i5 >>> 1) % N] *= i5;
        }
        vMeth1_check_sum += i5 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3, float f, int i4) {

        double d2=-1.89671;
        int i14=72, i15=13, i16=-188;
        byte by=67;
        short s=283;

        vMeth1();
        i3 -= i3;
        f *= (float)d2;
        for (int i13 : Test.iArrFld) {
            i14 = 1;
            while (++i14 < 4) {
                for (i15 = 1; 1 > i15; ++i15) {
                    i3 += (int)f;
                    Test.iArrFld[i15] ^= (int)101L;
                    i13 -= (int)Test.instanceCount;
                    Test.instanceCount += i15;
                }
                i4 += by;
            }
            d2 = i13;
            f *= 48321;
            s += (short)i4;
            i3 += (int)Test.instanceCount;
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + by + s;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-4, i2=40894, i17=7, i18=-196, i19=8;
        float f1=1.424F;
        long l=-11L;
        boolean b1=true;

        i = 1;
        while (++i < 254) {
            for (i1 = 3; 99 > i1; i1++) {
                vMeth(i1, f1, i1);
            }
            for (i17 = 2; i17 < 99; ++i17) {
                switch ((((i >>> 1) % 4) * 5) + 79) {
                case 84:
                    dFld = -33;
                    i18 += (int)Test.instanceCount;
                    break;
                case 86:
                    f1 += (-64 + (i17 * i17));
                    byFld >>= (byte)Test.sFld;
                    i18 += i18;
                case 98:
                    for (l = 1; l < 2; l += 3) {
                        f1 -= (float)dFld;
                        Test.instanceCount += (((l * Test.sFld) + i19) - i2);
                        i18 = i1;
                        Test.iArrFld[i + 1] %= (int)(i | 1);
                        switch ((i % 5) + 101) {
                        case 101:
                            Test.iArrFld[i17] += i19;
                            i19 += (int)(l ^ (long)f1);
                            Test.iArrFld[i17] = (int)f1;
                            Test.instanceCount = i2;
                            break;
                        case 102:
                            i2 = 44869;
                        case 103:
                            Test.instanceCount >>= i1;
                            i2 = (int)Test.instanceCount;
                            Test.instanceCount += (l ^ byFld);
                            break;
                        case 104:
                            i18 += (int)l;
                            i18 = i17;
                            i2 = (int)Test.instanceCount;
                            break;
                        case 105:
                            i2 = i18;
                            if (bFld) break;
                            break;
                        default:
                            i19 += -1248;
                        }
                    }
                case 83:
                    bFld = b1;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
