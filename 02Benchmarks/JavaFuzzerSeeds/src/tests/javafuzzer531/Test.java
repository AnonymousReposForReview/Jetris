package tests.javafuzzer531;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:18:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3558626501L;
    public static int iFld=-161;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 75);
        FuzzerUtils.init(Test.lArrFld, 5L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l2) {

        float f1=-114.653F;
        int i7=-3, i8=25687, i9=27, i10=0, i11=3;
        double d=113.59328, d1=11.23571;
        byte by=46;

        Test.iFld = 122;
        Test.iFld *= (int)Test.instanceCount;
        f1 *= Test.iFld;
        for (i7 = 10; i7 < 221; ++i7) {
            d = 1;
            while (++d < 8) {
                Test.instanceCount += Test.iFld;
                i8 -= (int)l2;
                by = (byte)Test.iFld;
                d1 -= i8;
            }
            Test.iFld += i7;
            i9 = 1;
            while (++i9 < 8) {
                i8 = i8;
                for (i10 = 1; i10 > 1; i10--) {
                    Test.iFld = (int)Test.instanceCount;
                    i8 = (int)l2;
                }
            }
        }
        long meth_res = l2 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) + by +
            Double.doubleToLongBits(d1) + i9 + i10 + i11;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i6, long l, long l1) {

        float f2=0.911F, f3=108.21F, fArr[]=new float[N];
        int i12=12, i13=-45, i14=67, i15=190, i16=-143, iArr[]=new int[N];
        double d2=-1.58229;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(iArr, -17680);
        FuzzerUtils.init(fArr, -31.14F);

        lArr[(-61293 >>> 1) % N] += iMeth1(l1);
        for (f2 = 4; 236 > f2; f2++) {
            for (i13 = 1; i13 < 7; ++i13) {
                i12 += (int)Test.instanceCount;
                i14 = i13;
            }
            Test.iFld >>= -64878;
            i6 += (5009 + (f2 * f2));
            for (d2 = 1; d2 < 7; ++d2) {
                float f4=2.701F;
                i15 *= (int)f2;
                switch ((int)((f2 % 9) + 105)) {
                case 105:
                    for (f3 = 1; f3 < 2; f3++) {
                        i6 *= (int)l1;
                        i12 >>= (int)-12L;
                    }
                    break;
                case 106:
                    try {
                        i14 = (iArr[(int)(d2)] % -156);
                        i14 = (-25521 / i13);
                        iArr[(int)(d2)] = (-229 / iArr[(int)(f2)]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 107:
                    fArr[(int)(d2)] = -34871;
                    break;
                case 108:
                    i12 <<= 20601;
                    break;
                case 109:
                    if (b) break;
                    break;
                case 110:
                    i12 <<= i6;
                    break;
                case 111:
                    f4 += i12;
                    break;
                case 112:
                    l1 = i15;
                    break;
                case 113:
                    if (b) continue;
                    break;
                default:
                    if (i15 != 0) {
                    }
                }
            }
        }
        long meth_res = i6 + l + l1 + Float.floatToIntBits(f2) + i12 + i13 + i14 + Double.doubleToLongBits(d2) + i15 +
            Float.floatToIntBits(f3) + i16 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i2=5, i3=-56150, i4=59807, i5=-44999, i17=-52186, i18=-11;
        double d3=2.100017;
        byte by1=-53;
        float f5=-62.30F;

        for (i2 = 356; i2 > 6; --i2) {
            i4 = 1;
            do {
                i5 = 1;
                while (++i5 < 1) {
                    i3 = (int)Math.max(lMeth(Test.iFld, Test.instanceCount, Test.instanceCount), Test.instanceCount);
                }
                for (i17 = 1; i17 < 1; i17++) {
                    i3 = i5;
                    i3 = i3;
                    Test.iFld *= Test.iFld;
                    i18 += (i17 + i17);
                    i3 = i3;
                    d3 -= i18;
                    by1 %= (byte)(i3 | 1);
                    i3 -= i5;
                    d3 -= f5;
                    i18 <<= by1;
                }
            } while (++i4 < 5);
        }
        long meth_res = i2 + i3 + i4 + i5 + i17 + i18 + Double.doubleToLongBits(d3) + by1 + Float.floatToIntBits(f5);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.405F, f6=-1.673F, fArr1[]=new float[N];
        int i=2, i1=-23348, i19=1, i20=-218, i21=-9, i22=134;
        boolean b1=false;
        byte by2=51;
        double d4=-43.73838;

        FuzzerUtils.init(fArr1, 2.142F);

        f *= -43914;
        for (i = 13; i < 294; i++) {
            Test.iFld += iMeth();
            Test.iArrFld[i] = Test.iFld;
            for (i19 = 2; i19 < 89; ++i19) {
                for (f6 = 1; f6 < 2; ++f6) {
                    Test.instanceCount *= 12119;
                    i20 += i;
                    Test.lArrFld[i] += i;
                    Test.iFld += i1;
                }
                i22 = 2;
                while ((i22 -= 2) > 0) {
                    i1 *= (int)9L;
                    bArrFld[i22] = b1;
                    Test.iFld -= (int)f;
                    i20 -= i19;
                    Test.iArrFld[i19] *= (int)f6;
                    switch (((i22 >>> 1) % 6) + 105) {
                    case 105:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 106:
                    case 107:
                        Test.iFld += Test.iFld;
                        try {
                            i1 = (-62 % i20);
                            Test.iFld = (Test.iFld / -39232);
                            i1 = (-22757 / i19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 108:
                        by2 += (byte)Test.instanceCount;
                        d4 = -1;
                        fArr1[i19 + 1] += i19;
                        break;
                    case 109:
                        i1 -= i;
                        Test.iArrFld[i22] >>= by2;
                        if (false) break;
                        break;
                    case 110:
                        Test.instanceCount += i;
                        f += Test.instanceCount;
                        Test.iFld += 15843;
                        Test.iArrFld[i + 1] += (int)f;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
