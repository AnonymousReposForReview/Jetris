package tests.javafuzzer1793;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:23:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-757L;
    public static double dFld=-53.16502;
    public static float fFld=40.194F;
    public static byte byFld=124;
    public int iFld=-32;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)15);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10, int i11) {

        int i12=-5537, i13=-9, i14=-207, i15=-85, i16=-41651, iArr1[]=new int[N];
        long l1=-49523L;

        FuzzerUtils.init(iArr1, -5);

        Test.byFld = (byte)i11;
        for (i12 = 5; i12 < 326; ++i12) {
            for (i14 = i12; i14 < 5; i14++) {
                for (l1 = 1; 1 < l1; l1 -= 3) {
                    Test.byFld += (byte)(l1 ^ (long)Test.fFld);
                    iArr1[(int)(l1)] &= (int)l1;
                    Test.fFld = i15;
                    i16 = 8;
                    Test.instanceCount += (l1 * l1);
                    Test.instanceCount = i10;
                    i15 += (int)Test.fFld;
                    if (i14 != 0) {
                        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + l1 + i16 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[i14] >>= i14;
                }
                Test.instanceCount = (long)1.107748;
                i10 = i15;
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + l1 + i16 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(float f, int i7, boolean b) {

        int i8=54150, i9=-5, i17=-9, i18=-17, i19=-13, i20=-10, iArr2[][]=new int[N][N];
        short s1=27805;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 6);
        FuzzerUtils.init(lArr1, -28971712L);

        for (i8 = 237; i8 > 4; i8 -= 2) {
            i9 -= (int)(((-46 - (Test.instanceCount - i7)) * (Test.dFld - i9)) - i7);
            vMeth(i7, i8);
            i9 = i7;
            i7 = i8;
            Test.instanceCount -= i9;
            Test.dFld -= Test.instanceCount;
            i9 = i7;
            Test.instanceCount = 11;
        }
        i9 = (int)-1.474F;
        iArr2[(i9 >>> 1) % N][(i7 >>> 1) % N] *= i7;
        for (i17 = 7; i17 < 185; ++i17) {
            for (i19 = i17; 9 > i19; ++i19) {
                lArr1[i19 - 1] *= s1;
            }
            Test.fFld = Test.byFld;
        }
        long meth_res = Float.floatToIntBits(f) + i7 + (b ? 1 : 0) + i8 + i9 + i17 + i18 + i19 + i20 + s1 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i1) {

        int i2=36040, i3=8, i4=-151, i5=21479, i6=-64454, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(dArr, -118.119491);

        i2 = 1;
        do {
            short s=-10477;
            switch ((((((int)(-7 + Test.instanceCount)) >>> 1) % 10) * 5) + 12) {
            case 43:
                if (b1) {
                    i1 = (++iArr[i2]);
                } else if (b1) {
                    i1 = (int)((i1 = (int)(i1 - Test.dFld)) - (s + (iArr[i2 - 1] -= i2)));
                    iArr[i2] *= (int)((i1 + (i1 ^= i1)) - (++Test.fFld));
                    for (i3 = i2; i3 < 9; i3++) {
                        for (i5 = 1; 1 > i5; ++i5) {
                            i1 |= (int)(lArr[i2 + 1] + ((Test.instanceCount / 1.811F) * (--i1)));
                            dArr[i3] = Math.min((--Test.byFld) * (-(i2 / (i2 | 1))), (int)((--lArr[i5]) -
                                iMeth1(Test.fFld, i2, b1)));
                            switch ((i2 % 3) + 83) {
                            case 83:
                            case 84:
                                lArr[(i3 >>> 1) % N] -= (long)Test.dFld;
                                iArr[i5 + 1] = (int)l;
                                break;
                            case 85:
                            default:
                                iArr[i5] = i6;
                                i4 += (i5 * i5);
                            }
                        }
                    }
                }
                break;
            case 35:
                i1 *= i4;
                break;
            case 45:
                b1 = b1;
                break;
            case 16:
                if (b1) break;
            case 61:
                i1 = i4;
                break;
            case 37:
                iArr[i2] += i6;
                break;
            case 15:
                i4 += i5;
            case 42:
                lArr[i2] >>= s;
                break;
            case 57:
                Test.dFld -= Test.instanceCount;
                break;
            case 39:
                l = i4;
                break;
            default:
                i1 >>= (int)l;
            }
        } while (++i2 < 172);
        long meth_res = l + i1 + i2 + i3 + i4 + i5 + i6 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i21=208, i22=-11, i23=41990, i24=-11, i25=-13, i26=-11, iArr3[]=new int[N];
        double d=1.120618;
        short s2=-3681;
        boolean b2=true;

        FuzzerUtils.init(iArr3, -18147);

        i = (int)1.662F;
        d = 1;
        do {
            i += iMeth(Test.instanceCount, i);
        } while (++d < 247);
        i = s2;
        i *= (int)Test.instanceCount;
        for (i21 = 14; i21 < 357; ++i21) {
            i23 = 73;
            while (--i23 > 0) {
                if (b2) break;
                Test.fFld += i23;
                i += i23;
                i22 += (i23 | i21);
                iArr3[i21 - 1] = i23;
                switch (((i21 % 2) * 5) + 32) {
                case 39:
                    i22 <<= i21;
                case 35:
                    Test.fFld = s2;
                    Test.instanceCount += (long)Test.fFld;
                    for (i24 = i23; i24 < 1; ++i24) {
                        Test.instanceCount += (((i24 * i23) + i21) - Test.fFld);
                        iFld -= s2;
                        s2 += s2;
                        i25 += i24;
                        i25 = (int)Test.instanceCount;
                        iArr3[i23 + 1] &= -195;
                    }
                    i26 = 1;
                    while (++i26 < 1) {
                        iFld = (int)Test.fFld;
                        i += i24;
                        i = iFld;
                    }
                    break;
                }
                if (true) continue;
            }
        }
        Test.fFld -= Test.instanceCount;
        i25 |= (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
