package tests.javafuzzer2262;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:06:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public static int iFld=178;
    public static float fFld=1.7F;
    public double dFld=0.131027;
    public volatile byte byFld=120;
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3879863630L);
        FuzzerUtils.init(Test.byArrFld, (byte)-63);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, float f1) {

        int i7=-26632, i8=-32412, i9=-41291, i10=-21050, i11=-163, i12=29885, iArr[]=new int[N];
        double d=0.16144;

        FuzzerUtils.init(iArr, 12);

        for (i7 = 1; i7 < 250; ++i7) {
            i6 += (int)(8L + (i7 * i7));
            switch (((i7 % 1) * 5) + 58) {
            case 62:
                i8 += Test.iFld;
                for (i9 = 7; 1 < i9; --i9) {
                    Test.iFld += i9;
                    Test.iFld = (int)Test.instanceCount;
                    iArr[i7] = (int)Test.instanceCount;
                    d = i8;
                    i8 = i9;
                    Test.instanceCount += i9;
                    i10 = (int)123.55299;
                }
            default:
                for (i11 = 7; i11 > 1; i11--) {
                    i8 += (((i11 * i12) + Test.instanceCount) - Test.instanceCount);
                    i8 = i10;
                }
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l) {

        int i4=-231, i5=175, i13=9, i14=169, i15=-101, i16=-237, i17=-34371, i18=121, iArr1[]=new int[N];
        float f=-1.941F;
        long l1=-137L;

        FuzzerUtils.init(iArr1, 0);

        Test.iFld *= (int)(l = ((--Test.iFld) << (Test.iFld + Test.iFld)));
        for (i4 = 6; i4 < 341; ++i4) {
            f += ((lMeth(i13, 0.993F) + Test.iFld) % (i4 | 1));
            Test.iFld += (((i4 * i13) + Test.instanceCount) - i14);
            for (i15 = 1; i15 < 5; i15++) {
                short s=31736;
                l *= s;
                i16 += (int)1.394F;
                Test.lArrFld = Test.lArrFld;
                l1 += i5;
            }
        }
        Test.iFld >>>= i13;
        for (i17 = 386; i17 > 15; i17 -= 3) {
            i13 += (i17 | i18);
            Test.lArrFld = Test.lArrFld;
            iArr1[i17] <<= i4;
            Test.lArrFld[i17 + 1] |= 1130938633841013717L;
        }
        long meth_res = l + i4 + i5 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + l1 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, int i2, int i3) {


        i2 += iMeth(Test.instanceCount);
        vMeth_check_sum += (b ? 1 : 0) + i2 + i3;
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=1, i19=29227, i20=-4794, i21=-78, i22=-10455, i23=-52584, i24=-184, i25=-9, i26=6, i27=-26, i28=7,
            i29=-13;
        boolean b1=false;
        float fArr[]=new float[N];
        short sArr[]=new short[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -2.731F);
        FuzzerUtils.init(sArr, (short)16486);
        FuzzerUtils.init(dArr, -1.61406);

        for (i = 4; i < 184; ++i) {
            if (true) {
                fArr = fArr;
            } else if (b1) {
                vMeth(b1, i, i1);
            } else {
                for (i19 = 3; i19 < 139; ++i19) {
                    i20 += i20;
                }
                for (i21 = 5; 139 > i21; ++i21) {
                    if (b1) break;
                    i20 += i21;
                    i20 += i21;
                }
            }
            Test.iFld = -53245;
            for (i23 = 2; i23 < 139; i23++) {
                Test.lArrFld[i - 1] *= Test.instanceCount;
                Test.iFld -= (int)Test.fFld;
            }
            i25 = 1;
            do {
                i20 = -9;
            } while (++i25 < 139);
            i1 <<= (int)Test.instanceCount;
        }
        i20 += i19;
        Test.iFld = Test.iFld;
        Test.iFld <<= i25;
        for (i26 = 12; i26 < 359; ++i26) {
            Test.byArrFld[i26] *= (byte)i26;
            dFld *= byFld;
            sArr = sArr;
        }
        for (i28 = 12; i28 < 207; ++i28) {
            Test.fFld = i29;
            i22 = i27;
        }
        i22 <<= -8;
        dArr[(i28 >>> 1) % N] = Test.fFld;
        i22 += i23;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
