package tests.javafuzzer3051;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:20:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-722172746L;
    public static int iFld=-28516;
    public static byte byFld=-34;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1616092964L);
        FuzzerUtils.init(Test.dArrFld, 2.41931);
        FuzzerUtils.init(Test.sArrFld, (short)28210);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i11=14, i12=67, i13=244, i14=-11, i15=-7, i16=28, iArr1[]=new int[N];
        double d1=1.83620;
        boolean b=true;
        float f1=-73.681F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 209);
        FuzzerUtils.init(lArr, 112L);
        FuzzerUtils.init(byArr, (byte)21);

        for (int i10 : iArr1) {
            if (b) {
                Test.instanceCount = Test.instanceCount;
                for (i11 = 1; i11 < 4; ++i11) {
                    Test.iFld += i11;
                    iArr1[i11 + 1] -= (int)d1;
                    b = false;
                }
                f1 = Test.iFld;
            } else if (b) {
                f1 += i11;
                for (i13 = 1; i13 < 4; i13 += 3) {
                    for (i15 = 4; i13 < i15; i15 -= 2) {
                        lArr[i15 + 1] <<= i11;
                        if (true) continue;
                        byArr[i13 + 1] = (byte)156;
                    }
                    i14 ^= i16;
                }
            } else {
                if (i12 != 0) {
                }
            }
        }
        long meth_res = i11 + i12 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + Float.floatToIntBits(f1) + i13 + i14 +
            i15 + i16 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i3, int i4) {

        int i5=-175, i6=232, i7=-3, i8=-138, i9=59158, i17=-74, i18=-86, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -223);
        FuzzerUtils.init(lArr1, -3601769504942498742L);

        for (i5 = 4; i5 < 209; i5++) {
            for (i7 = 8; i7 > i5; i7 -= 2) {
                Test.instanceCount -= Integer.reverseBytes(i6 *= (36 >>> i5));
                i9 = 1;
                do {
                    i4 += i9;
                } while (++i9 < 1);
                Test.instanceCount += (long)(fMeth() + -22);
                Test.instanceCount = Test.instanceCount;
                Test.iFld += i7;
                Test.instanceCount <<= Test.instanceCount;
                Test.instanceCount = Test.iFld;
                i17 = 1;
                while (++i17 < 1) {
                    Test.byFld &= (byte)18466;
                    iArr2[i17] >>= (int)Test.instanceCount;
                    lArr1[i5 - 1] = i3;
                    i3 += (i17 | i18);
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i17 + i18 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        float f2=0.663F;
        int i19=-5400, i20=-94, i21=12, i22=-47525, iArr[][]=new int[N][N];
        double d2=-2.85324;
        boolean b1=true;

        FuzzerUtils.init(iArr, -70);

        iArr[(Test.iFld >>> 1) % N][(-2800 >>> 1) % N] <<= iMeth(Test.iFld, 13170);
        f2 -= Test.instanceCount;
        Test.lArrFld[(-128 >>> 1) % N] -= Test.instanceCount;
        f2 *= Test.instanceCount;
        Test.byFld >>= (byte)-54291;
        Test.iFld += Test.iFld;
        for (i19 = 363; i19 > 8; i19 -= 3) {
            Test.instanceCount += i19;
            switch (((-5 >>> 1) % 2) + 113) {
            case 113:
            case 114:
                d2 += -92;
                iArr[i19 + 1][i19 + 1] = i19;
                for (i21 = 1; i21 < 13; i21++) {
                    b1 = b1;
                    i20 += (int)(0.1019F + (i21 * i21));
                    b1 = true;
                }
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i19 + i20 + Double.doubleToLongBits(d2) + i21 + i22 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=-157, i2=-54547, i23=0, i24=-235, i25=-22252, i26=32486, i27=18, i28=39, i29=21, iArr3[]=new int[N];
        float f=1.390F;
        byte by=-38;
        double d=-91.103426;
        short s=-1021;

        FuzzerUtils.init(iArr3, 115);

        Test.instanceCount = (Test.instanceCount++);
        for (i = 11; i < 224; i++) {
            i1 -= (int)(((7 - (--i1)) * (Test.instanceCount + i1)) - ((f - 249) - (Test.instanceCount + i1)));
        }
        i1 += Short.reverseBytes((short)((by * -55926) ^ (i2++)));
        d = ((--Test.instanceCount) + lMeth());
        i2 += i1;
        Test.instanceCount -= -14408;
        f = Test.instanceCount;
        Test.instanceCount <<= i;
        Test.iFld ^= (int)2683631195L;
        Test.iFld -= i1;
        f = (float)2.75067;
        Test.instanceCount *= Test.iFld;
        i23 = 130;
        do {
            s = (short)i;
            Test.instanceCount += (i23 * i23);
            Test.dArrFld[i23] *= Test.instanceCount;
            iArr3[i23] = i1;
            Test.sArrFld = FuzzerUtils.short1array(N, (short)25659);
            i2 = Test.iFld;
        } while (--i23 > 0);
        Test.lArrFld[(i23 >>> 1) % N] <<= i2;
        for (i24 = 9; i24 < 378; i24 += 3) {
            for (i26 = 4; i26 < 204; ++i26) {
                for (i28 = 1; i28 < 2; ++i28) {
                    i25 = -13;
                    Test.iFld -= (int)f;
                    i1 = i2;
                    i2 += (int)Test.instanceCount;
                    Test.instanceCount >>= -23;
                    i2 &= (int)128L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
