package tests.javafuzzer808;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:20:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=129L;
    public boolean bFld=true;
    public int iFld=-225;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -89);
        FuzzerUtils.init(Test.lArrFld, 632841688L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        int i7=-185, i8=8, i9=-14, i10=-48428, i11=-46879, i12=45621;
        boolean b1=false;
        float f1=0.667F;
        byte by=-23;
        short s=-10421;
        double d=73.119725;

        i6 = i6;
        for (i7 = 18; i7 < 339; i7++) {
            b1 = b1;
            f1 *= by;
            f1 += Test.instanceCount;
            for (i9 = 1; 5 > i9; ++i9) {
                i6 <<= s;
                Test.iArrFld[i7 - 1] -= by;
                for (i11 = 1; i11 < 2; ++i11) {
                    Test.iArrFld[i9] = i6;
                    d *= -86.60312;
                    i12 >>= i12;
                    i6 += 26216;
                    i8 += i11;
                    i10 *= i6;
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + by + i9 + i10 + s + i11 + i12 +
            Double.doubleToLongBits(d);
    }

    public static void vMeth1(int i2, int i3) {

        int i4=-8, i5=8, i13=55115, i14=26354, i15=53, i16=-9;
        float f=-84.487F;
        boolean b2=true;

        for (i4 = 1; i4 < 172; ++i4) {
            i3 += (((i4 * i3) + i3) - i3);
            f -= ((i2 + Test.instanceCount) / (((long)(f - i5)) | 1));
            vMeth2(i2);
            i2 = 2;
        }
        for (i13 = 8; i13 < 244; i13++) {
            i15 = 1;
            do {
                i16 = 1;
                while (++i16 < 1) {
                    Test.lArrFld[i15] += -13956;
                    if (b2) {
                        i2 += (i16 ^ i14);
                        i3 += i16;
                        Test.iArrFld[i15 + 1] -= (int)f;
                    } else {
                        Test.iArrFld = Test.iArrFld;
                    }
                    i14 += (int)Test.instanceCount;
                }
            } while (++i15 < 7);
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + (b2 ? 1 : 0);
    }

    public static void vMeth(boolean b, int i1, long l) {

        int i17=-131, i18=10959, i19=-1, i20=-5, i21=12, i22=-6116;
        double d1=-2.74210;
        float f2=0.122F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-3030);

        vMeth1(i1, i1);
        for (i17 = 5; i17 < 245; ++i17) {
            i18 += i17;
            if (b) break;
            for (i19 = 1; i19 < 7; ++i19) {
                for (i21 = 1; i21 < 2; ++i21) {
                    d1 = i19;
                    i20 += 65396;
                    b = true;
                    i18 = (int)5L;
                    i18 = i22;
                    Test.iArrFld[i17] >>= -39220;
                    i20 = (int)d1;
                    sArr[i19 - 1] = (short)i22;
                }
                f2 += (i19 * i20);
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i1 + l + i17 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-51577, i23=-4, i24=138, i25=-7, i26=155, i27=-208, i28=151, i30=3, i31=-167, i32=189, i33=-55,
            iArr[]=new int[N];
        double d2=4.44567;
        float f3=-94.416F;
        short s1=-14984;

        FuzzerUtils.init(iArr, -2433);

        i = (int)(((i / (Test.instanceCount | 1)) - (Test.instanceCount >>>= 36187)) * Math.min(iArr[(i >>> 1) % N],
            i));
        vMeth(bFld, i, Test.instanceCount);
        d2 = -4348L;
        i23 = 1;
        do {
            i24 = 1;
            do {
                for (i25 = 1; i25 > 1; i25 -= 2) {
                    i = 9;
                    f3 += -120.316F;
                    bFld = bFld;
                    i *= 29082;
                    iArr[i23 - 1] |= i23;
                    i26 += i25;
                }
                for (i27 = 1; i27 < 1; ++i27) {
                    byte by1=-89;
                    i26 <<= i28;
                    i28 = i;
                    f3 += (i27 - s1);
                    i28 = (int)5622519790861066501L;
                    i26 += i23;
                    by1 <<= (byte)i;
                }
            } while (++i24 < 65);
            bFld = bFld;
            iFld += i23;
            i += (i23 + i26);
            d2 = i27;
            Test.bArrFld[i23 + 1] = bFld;
            for (i30 = 65; i30 > 3; i30 -= 2) {
                Test.lArrFld[i23] >>= 102;
            }
            for (i32 = 1; i32 < 65; ++i32) {
                iArr[i23 + 1] >>>= i28;
            }
        } while (++i23 < 387);
        bFld = bFld;
        iArr[(-8197 >>> 1) % N] *= 0;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
