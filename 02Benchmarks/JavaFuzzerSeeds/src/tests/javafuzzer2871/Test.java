package tests.javafuzzer2871;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:58:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static int iFld=-37;
    public static float fFld=-126.488F;
    public static short sFld=8237;
    public static boolean bFld=false;
    public static int iFld1=12;
    public static boolean bArrFld[]=new boolean[N];
    public static byte byArrFld[][]=new byte[N][N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte)-65);
        FuzzerUtils.init(Test.lArrFld, 330042325L);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static long lMeth1(int i6, int i7, int i8) {

        float f1=-1.621F;
        short s1=-22482;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -8);

        iArr1[(i8 >>> 1) % N] <<= (int)(f1 - ((i6 - s1) + iArr1[(59 >>> 1) % N]));
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + s1 + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f2) {

        byte by1=75;
        int i12=105, i13=23, i14=10, i15=7, i16=180, i17=-42767, iArr2[]=new int[N];
        float f3=1.191F;
        double d1=-88.87352;

        FuzzerUtils.init(iArr2, -245);

        iArr2[(Test.iFld >>> 1) % N] = by1;
        for (i12 = 8; i12 < 223; i12++) {
            for (i14 = 1; i14 < 7; i14 += 2) {
                i13 += (i14 + Test.instanceCount);
                i16 = 1;
                while (++i16 < 3) {
                    Test.instanceCount <<= i14;
                }
                for (f3 = 1; f3 < 3; f3++) {
                    Test.iFld = (int)f3;
                    Test.iFld += Test.iFld;
                    i17 -= (int)Test.instanceCount;
                    i17 = i12;
                    d1 -= i17;
                }
                iArr2[i12 + 1] /= (int)(Test.instanceCount | 1);
                Test.instanceCount -= 224L;
                Test.sFld = (short)i14;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + by1 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f3) + i17 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i9, long l) {

        byte by=-75;
        int i10=-11567, i11=19562, i18=-4, i19=-9, i20=0, iArr3[]=new int[N];
        long l1=14050L, lArr[]=new long[N];
        boolean b=false;
        double d2=1.62367;

        FuzzerUtils.init(lArr, -15482L);
        FuzzerUtils.init(iArr3, -14);

        by *= (byte)(lArr[(i9 >>> 1) % N]++);
        Test.instanceCount = (i9 + Test.iFld);
        Test.fFld = i9;
        for (i10 = 8; i10 < 369; i10++) {
            i9 = Math.max(i9, (int)((i9--) * (2299293634L + (l1 * 19342L))));
            i9 <<= iMeth(Test.fFld);
            try {
                i11 = (i10 % i10);
                iArr3[i10 + 1] = (-12278 / Test.iFld);
                Test.iFld = (i10 / -1082736807);
            } catch (ArithmeticException a_e) {}
            l1 -= i10;
            for (i18 = 1; i18 < 5; ++i18) {
                if (b) continue;
                for (d2 = 1; d2 < 2; ++d2) {
                    Test.bFld = b;
                    if (Test.bFld) {
                        i20 = (int)Test.instanceCount;
                        Test.byArrFld[(int)(d2)][i10] += (byte)i11;
                    }
                }
            }
        }
        vMeth_check_sum += i9 + l + by + i10 + i11 + l1 + i18 + i19 + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i20 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr3);
    }

    public static long lMeth(int i5, double d) {

        int i21=-46991, i22=-3, i23=-14, i24=25084;

        Test.bArrFld[(617 >>> 1) % N] = (lMeth1(Integer.reverseBytes(i5), i5, Integer.reverseBytes(i5)) > (i5++));
        vMeth(-6, Test.instanceCount);
        Test.instanceCount = -62607;
        Test.instanceCount += i5;
        for (i21 = 2; i21 < 336; ++i21) {
            i5 ^= i21;
            d = i21;
            d = i5;
            Test.iFld1 = Test.iFld1;
            i23 = 5;
            while ((i23 -= 2) > 0) {
                i24 = 2;
                do {
                    Test.fFld += (i24 * i24);
                    Test.instanceCount += i24;
                    Test.lArrFld[i24][i21] |= Test.iFld;
                    Test.lArrFld[i23][i23] = Test.instanceCount;
                } while (--i24 > 0);
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + i21 + i22 + i23 + i24;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=13, i2=-208, i3=5, i4=76, i25=49437, i26=1939, i27=-161, i28=-193, iArr[]=new int[N];
        short s=-31588;
        double d3=2.76188, d4=61.124736;
        byte by2=-119;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(fArr, 2.916F);

        try {
            for (int i : iArr) {
                for (i1 = 2; i1 < 63; ++i1) {
                    for (i3 = i1; 2 > i3; i3++) {
                        iArr[i3] += (int)((++Test.instanceCount) * ((Test.instanceCount + s) + fArr[i3 + 1]));
                        iArr[i1] *= (int)(-19579 - (-lMeth(i3, d3)));
                        i = i3;
                        Test.iFld += i3;
                    }
                    Test.instanceCount >>= s;
                }
                for (i25 = 2; i25 < 63; i25++) {
                    d3 *= Test.instanceCount;
                    i4 -= (int)Test.instanceCount;
                    i -= (int)Test.instanceCount;
                    iArr[i25] *= Test.iFld;
                    for (d4 = 1; d4 < 2; d4++) {
                        Test.fFld -= i4;
                        Test.instanceCount += Test.iFld;
                        i2 += (int)(d4 * d4);
                        Test.fFld += (float)(d4 * i1);
                        Test.iFld1 <<= (int)Test.instanceCount;
                    }
                }
                i28 = 1;
                do {
                    i2 -= i4;
                    Test.instanceCount += Test.instanceCount;
                    Test.iFld1 >>= 0;
                    Test.sFld = (short)i27;
                    Test.sFld += (short)i28;
                    i26 = -54048;
                    by2 += (byte)(238 + (i28 * i28));
                    Test.fFld *= 4;
                    Test.iFld <<= i1;
                } while (++i28 < 63);
            }
        }
        catch (ArithmeticException exc1) {
            Test.iFld = i28;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
