package tests.javafuzzer2372;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:39:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=117L;
    public static float fFld=2.533F;
    public static boolean bFld=true;
    public short sFld=-17681;
    public int iFld=7;
    public static byte byFld=-61;
    public static volatile float fFld1=-80.721F;
    public volatile int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=-54976, i2=9, i3=4, i4=45307, i5=27935, i6=-44438, i7=118, iArr[]=new int[N];
        double d=-1.116190, dArr[]=new double[N];
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -23006L);
        FuzzerUtils.init(dArr, 1.14180);
        FuzzerUtils.init(iArr, 250);

        for (i1 = 18; i1 < 387; i1++) {
            for (i3 = 1; i3 < 5; ++i3) {
                lArr[i1] *= (long)Test.fFld;
                if (i4 != 0) {
                    vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (i5 = 2; i5 > 1; i5--) {
                    if (false) {
                        i2 *= i2;
                        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0)
                            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount += (long)d;
                    dArr[i3] = i1;
                    if (b) {
                        try {
                            i2 = (i2 / -221);
                            iArr[(i1 >>> 1) % N] = (219 % i5);
                            i6 = (i5 / i2);
                        } catch (ArithmeticException a_e) {}
                    } else if (b) {
                        i6 += i6;
                        i7 >>= i3;
                        i7 += (i5 ^ i7);
                        i2 = i2;
                    } else {
                        dArr[i3] -= i6;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f) {

        int i8=-2, i9=-1, i10=6854, i11=-134, i12=9, i13=-13, i14=-22372;
        double d1=9.88312;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -49.930F);

        vMeth1();
        if (Test.bFld) {
            i8 <<= i8;
            d1 = i8;
            for (i9 = 6; i9 < 236; ++i9) {
                fArr[i9][i9] *= i8;
                Test.instanceCount += i10;
                fArr[i9 - 1][i9 - 1] -= i8;
            }
        } else {
            i8 += i9;
            for (i11 = 5; i11 < 122; ++i11) {
                for (i13 = i11; i13 < 13; i13++) {
                    i14 += (((i13 * Test.fFld) + f) - i14);
                    Test.instanceCount += (i13 * i13);
                    i8 += (i13 ^ i10);
                    Test.instanceCount += Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 +
            i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {


        vMeth(Test.fFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i15=10, i16=-25729, i17=86, i18=-51832, i19=110, i20=92, i21=-71;
        double d2=-122.76085, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -79.108352);

        i = 298;
        do {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
            Test.instanceCount = (long)-55.71570;
            for (i15 = 6; i15 < 168; i15++) {
                i16 += (11457 + (i15 * i15));
                Test.fFld += i16;
                Test.fFld += (i15 * Test.instanceCount);
                i16 += i15;
                for (i17 = 2; 1 < i17; i17--) {
                    i16 *= i16;
                    i18 = i18;
                    iArrFld[i - 1] = sFld;
                    iFld = Test.byFld;
                    iFld += iFld;
                    i18 &= i;
                    i18 = i15;
                    i16 -= (int)Test.fFld;
                    iFld += i;
                }
                Test.fFld1 += (i15 * iFld);
                dArr1 = FuzzerUtils.double1array(N, (double)1.2774);
            }
            Test.instanceCount = (long)Test.fFld;
            if (Test.bFld) {
                for (i19 = i; i19 < 168; ++i19) {
                    d2 -= i18;
                    Test.instanceCount *= i;
                    Test.instanceCount |= 6;
                    i21 = 1;
                    do {
                        Test.fFld = Test.instanceCount;
                        Test.byFld += (byte)(i21 - Test.instanceCount);
                        i20 -= i19;
                    } while ((i21 += 2) < 1);
                }
            } else {
                Test.fFld += (i - i16);
            }
        } while ((i -= 2) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
