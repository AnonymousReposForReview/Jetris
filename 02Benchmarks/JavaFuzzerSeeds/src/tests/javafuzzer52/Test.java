package tests.javafuzzer52;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:37:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public static int iFld=-41;
    public static boolean bFld=false;
    public static byte byFld=103;
    public double dFld=1.112960;
    public short sFld=-946;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -24684L);
        FuzzerUtils.init(Test.fArrFld, 44.678F);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(short s) {

        int i5=-17721, i6=-77, i7=12, i8=-10, i9=8, iArr1[]=new int[N];
        float f=-2.985F, fArr[]=new float[N];
        boolean b=true;
        long l2=-137L;

        FuzzerUtils.init(iArr1, 195);
        FuzzerUtils.init(fArr, -94.546F);

        for (i5 = 1; i5 < 124; i5++) {
            f -= i5;
            i6 += (((i5 * i5) + i5) - i5);
            if (true) {
                try {
                    i6 = (i6 / -23966);
                    i6 = (i5 % i5);
                    Test.iFld = (i5 / Test.iFld);
                } catch (ArithmeticException a_e) {}
            } else if (b) {
                Test.instanceCount <<= i6;
            } else {
                for (i7 = i5; 13 > i7; i7++) {
                    for (l2 = 1; l2 < 1; l2++) {
                        i9 += i5;
                        s /= (short)(i9 | 1);
                        iArr1[i7 + 1] -= i7;
                        i9 += i6;
                    }
                    if (Test.bFld) continue;
                    Test.instanceCount += (-28 + (i7 * i7));
                }
            }
            fArr[i5 - 1] = -3;
        }
        vMeth_check_sum += s + i5 + i6 + Float.floatToIntBits(f) + (b ? 1 : 0) + i7 + i8 + l2 + i9 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i1=7, i2=170, i3=-10, i4=0, i10=191, i11=-16, iArr[]=new int[N];
        short s1=18583;
        float f1=126.236F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -35);
        FuzzerUtils.init(lArr, 3993221414919740398L);

        for (i1 = 4; i1 < 123; i1++) {
            for (i3 = 13; i3 > 1; i3 -= 3) {
                iArr[i1 + 1] *= i1;
                vMeth(s1);
                Test.iFld += i3;
                Test.iFld *= i4;
                i2 *= (int)133L;
                lArr[i1 + 1] = i1;
                if (Test.bFld) {
                    i4 %= (int)((long)(f1) | 1);
                    for (i10 = i3; i10 < 4; i10++) {
                        lArr[i10 - 1] |= i4;
                        i2 += 78;
                        iArr[i1] -= i4;
                        i4 -= i2;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + s1 + Float.floatToIntBits(f1) + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i, long l, long l1) {


        Test.instanceCount += i;
        i -= iMeth();
        long meth_res = i + l + l1;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=191, i13=170, i14=-41484, i15=16, i16=108, i17=-164, i18=-59788, iArr2[]=new int[N];
        float f2=-86.609F;

        FuzzerUtils.init(iArr2, -18275);

        dMeth(i12, -2460424147L, Test.instanceCount);
        for (i13 = 7; i13 < 127; i13++) {
            i14 += i12;
            iArr2[i13 - 1] += i13;
            i14 -= i12;
            Test.iFld &= (int)Test.instanceCount;
        }
        for (f2 = 4; f2 < 180; f2++) {
            Test.iFld |= 64;
            i15 += (5 + (f2 * f2));
            for (i16 = 8; i16 < 143; ++i16) {
                if (Test.bFld) break;
                Test.lArrFld[i16 + 1] = Test.instanceCount;
                i15 += (-6 + (i16 * i16));
                i18 = 1;
                do {
                    i17 = (int)4L;
                    Test.instanceCount += (-130 + (i18 * i18));
                    Test.byFld = (byte)Test.iFld;
                    i14 *= (int)dFld;
                    iArr2[(int)(f2 - 1)] <<= i14;
                    i17 += (((i18 * Test.iFld) + Test.instanceCount) - i13);
                    i12 += (((i18 * i16) + Test.iFld) - Test.byFld);
                    i14 = (int)Test.instanceCount;
                } while (++i18 < 2);
                sFld *= Test.byFld;
                dFld -= f2;
                i17 += (i16 + i15);
                i17 -= i17;
                switch ((int)((f2 % 2) + 5)) {
                case 5:
                    i17 -= i13;
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 6:
                    Test.fArrFld[i16 + 1] += i12;
                    break;
                default:
                    Test.instanceCount = (long)f2;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
