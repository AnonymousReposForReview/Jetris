package tests.javafuzzer1499;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:28:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2981703524891149830L;
    public static int iFld=44027;
    public static int iFld1=213;
    public static volatile float fFld=2.858F;
    public static float fArrFld[][]=new float[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -42.68F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vSmallMeth(float f) {

        int i=-7;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -165L);

        f += (-(lArr[(i >>> 1) % N]--));
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + FuzzerUtils.checkSum(lArr);
    }

    public static byte byMeth() {

        double d=-93.92251, d1=-62.62669;
        short s=-10891;
        int i3=-11, i4=-19073, iArr[][]=new int[N][N];
        boolean b=false;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-121);
        FuzzerUtils.init(lArr1, 5053L);
        FuzzerUtils.init(iArr, 4);

        Test.iFld1 += Test.iFld;
        for (byte by : byArr) {
            by -= (byte)Test.iFld;
            Test.iFld1 = 94;
            switch (((Test.iFld1 >>> 1) % 7) + 7) {
            case 7:
                d = Test.instanceCount;
                s *= (short)Test.instanceCount;
                for (i3 = 1; i3 < 4; ++i3) {
                    if (b) break;
                    d1 = 1;
                    while (++d1 < 2) {
                        Test.instanceCount += i4;
                        lArr1[i3] += Test.instanceCount;
                        Test.instanceCount += (long)81.542F;
                        Test.iFld1 *= Test.iFld;
                        Test.fArrFld[i3 - 1][i3] += Test.iFld1;
                    }
                }
                break;
            case 8:
                Test.iFld = Test.iFld;
                break;
            case 9:
                by = (byte)i3;
                break;
            case 10:
                Test.instanceCount = Test.iFld;
                break;
            case 11:
                iArr[(i3 >>> 1) % N][(Test.iFld >>> 1) % N] = i4;
            case 12:
                i4 = -40344;
                break;
            case 13:
                Test.iFld -= (int)Test.instanceCount;
                break;
            default:
                Test.iFld >>= Test.iFld;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + i3 + i4 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static double dMeth(long l) {

        short s1=-12046;
        double d2=-119.86084;
        int i5=0, i6=3, i8=-14, i9=1107;
        float f1=2.951F;
        boolean b1=false;

        Test.iFld -= ((Test.iFld++) * byMeth());
        Test.iFld1 -= s1;
        Test.iFld *= (int)d2;
        for (i5 = 12; 353 > i5; i5++) {
            f1 = 1;
            while (++f1 < 5) {
                int i7=-5;
                i6 -= -4238;
                Test.instanceCount += (long)((long)f1 | i7);
                Test.iFld1 += (int)Test.instanceCount;
                for (i8 = (int)(f1); 1 > i8; i8++) {
                    switch ((int)(((f1 % 2) * 5) + 46)) {
                    case 55:
                        if (b1) break;
                        Test.iFld1 = Test.iFld1;
                        b1 = b1;
                        Test.iFld += (int)Test.instanceCount;
                        break;
                    case 53:
                        d2 += Test.iFld1;
                        break;
                    }
                }
            }
        }
        long meth_res = l + s1 + Double.doubleToLongBits(d2) + i5 + i6 + Float.floatToIntBits(f1) + i8 + i9 + (b1 ? 1 :
            0);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i1, int i2) {

        int i10=-1, i11=-12950, i12=11, i13=-50, iArr1[]=new int[N];
        double d3=54.45473, d4=-3.30892;
        short s2=574;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, 9531);
        FuzzerUtils.init(lArr2, 3570951542L);

        dMeth(-7008993030390230315L);
        for (i10 = 16; i10 < 325; ++i10) {
            i2 = (int)1172027727011478365L;
            Test.instanceCount += (((i10 * i10) + Test.iFld) - Test.instanceCount);
            i2 = -212;
            i1 = i1;
            iArr1[i10] = (int)d3;
            Test.instanceCount = (long)Test.fFld;
            i2 -= (int)Test.fFld;
            i11 = (int)30.211F;
        }
        d4 = i2;
        for (i12 = 354; i12 > 22; --i12) {
            Test.instanceCount += (i12 ^ s2);
            i2 *= i11;
            i13 -= i2;
        }
        long meth_res = i1 + i2 + i10 + i11 + Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + i12 + i13 +
            s2 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-172, i15=64692, i16=-246, i17=-25113, i18=62542, i19=0, i20=150, i21=-14, i22=211, iArr2[]=new int[N];
        double d5=1.79191;
        boolean b2=false;

        FuzzerUtils.init(iArr2, -28269);

        for (int smallinvoc=0; smallinvoc<262; smallinvoc++) vSmallMeth(lMeth(Test.iFld1, Test.iFld) * 141);
        i14 = 1;
        while (++i14 < 398) {
            Test.iFld <<= 54;
        }
        iArr2[(Test.iFld1 >>> 1) % N] = i15;
        for (long l4 : lArrFld) {
            d5 -= Test.instanceCount;
            d5 += d5;
            iArr2[(i14 >>> 1) % N] += i14;
            Test.instanceCount >>= i14;
            if (b2) break;
        }
        for (i16 = 2; i16 < 362; ++i16) {
            Test.iFld1 += i16;
            if (b2) {
                for (i18 = 3; 70 > i18; ++i18) {
                    Test.iFld = (int)Test.instanceCount;
                    d5 = i14;
                    for (i20 = 1; i20 < 2; i20++) {
                        i17 = i18;
                        Test.instanceCount = Test.instanceCount;
                        i21 <<= -14;
                        i19 >>= i16;
                        Test.iFld -= i18;
                    }
                    Test.iFld = i20;
                    i22 = 1;
                    while (++i22 < 2) {
                        Test.instanceCount = Test.instanceCount;
                        try {
                            iArr2[i16 + 1] = (92 / i17);
                            i19 = (i20 / -1019177661);
                            Test.iFld = (Test.iFld1 % i22);
                        } catch (ArithmeticException a_e) {}
                        iArr2[i22] = (int)Test.fFld;
                        Test.instanceCount -= Test.instanceCount;
                        if (b2) continue;
                        Test.instanceCount = i21;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  byMeth ->  byMeth dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
