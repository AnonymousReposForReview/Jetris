package tests.javafuzzer538;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:26:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-212L;
    public byte byFld=123;
    public static long lFld=-6956140131322930339L;
    public static double dFld=0.13979;
    public float fFld=2.260F;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=27008, i3=10, i4=-8, i5=1, i6=4, iArr[]=new int[N];
        float f=64.622F;
        boolean b=false;

        FuzzerUtils.init(iArr, -4);

        for (i2 = 4; i2 < 273; i2 += 3) {
            if (b) {
                switch ((i2 % 4) + 46) {
                case 46:
                    i3 += (int)Test.instanceCount;
                case 47:
                    switch (((i2 >>> 1) % 7) + 18) {
                    case 18:
                        iArr[i2] += i2;
                        i3 = (int)f;
                        break;
                    case 19:
                        i3 += (int)Test.instanceCount;
                    case 20:
                        i3 >>= i2;
                        break;
                    case 21:
                        i4 = 1;
                        do {
                            switch (((i4 >>> 1) % 5) + 57) {
                            case 57:
                                for (i5 = 1; i5 < 1; ++i5) {
                                    i6 -= (int)124.100907;
                                }
                                i6 += (((i4 * f) + Test.instanceCount) - i2);
                                f += i4;
                                break;
                            case 58:
                                b = b;
                                break;
                            case 59:
                                i6 = i6;
                                break;
                            case 60:
                                Test.instanceCount *= Test.lFld;
                                break;
                            case 61:
                                f += (-32160 + (i4 * i4));
                            default:
                                i6 <<= (int)Test.lFld;
                            }
                        } while (++i4 < 17);
                        break;
                    case 22:
                        if (b) break;
                        break;
                    case 23:
                        f -= i6;
                    case 24:
                        i6 += i2;
                        break;
                    }
                    break;
                case 48:
                    b = b;
                case 49:
                }
            } else if (false) {
                if (i6 != 0) {
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i1=29386;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 0.523F);
        FuzzerUtils.init(dArr, 68.75119);

        fArr[(i1 >>> 1) % N] -= (-13L + byFld);
        Test.instanceCount -= (~(long)((dArr[(i1 >>> 1) % N]++) + iMeth()));
        iArrFld[(i1 >>> 1) % N] = i1;
        vMeth_check_sum += i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public float fMeth() {

        double d=-26.115986;
        int i8=-30219, i9=164, i10=49515, i11=33907, i12=2;
        float f1=-118.100F;

        vMeth();
        for (int i7 : iArrFld) {
            d += 2.377F;
            iArrFld[(i7 >>> 1) % N] += (int)d;
            i7 |= i7;
        }
        for (i8 = 10; i8 < 164; ++i8) {
            Test.lFld += 74;
            i9 &= (int)Test.instanceCount;
            i10 = 1;
            while (++i10 < 10) {
                i9 += i10;
                for (i11 = 1; 1 > i11; ++i11) {
                    i9 = (int)d;
                    i12 = i8;
                }
                f1 = 24641;
                i9 += (((i10 * i10) + i12) - i9);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i13=167, i14=-37457, i15=2, i16=-25132, i17=165, i18=45071, i19=-191, i20=0, i21=-175, i22=6;
        boolean b1=false;
        float fArr1[][]=new float[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr1, -2.39F);
        FuzzerUtils.init(sArr, (short)24139);

        i -= (int)(lArrFld[(i >>> 1) % N]++);
        i += (int)fMeth();
        i -= i;
        b1 = b1;
        i -= 32783;
        i = i;
        for (i13 = 11; i13 < 310; i13++) {
            Test.instanceCount *= i;
            i14 = i;
            i += i;
            Test.lFld = i13;
            Test.dFld += Test.lFld;
            i -= i13;
            fArr1[i13] = FuzzerUtils.float1array(N, (float)-40.87F);
        }
        Test.dFld = i;
        Test.lFld |= -164;
        for (i15 = 1; i15 < 166; i15++) {
            Test.instanceCount >>>= i14;
            for (i17 = 7; i17 < 152; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    i16 = i13;
                }
                lArrFld[i15] *= i19;
                i += i19;
            }
            Test.lFld -= Test.instanceCount;
            sArr[i15 + 1] /= (short)((long)(fFld) | 1);
            for (i21 = 8; i21 < 152; i21++) {
                b1 = Test.bFld;
                i14 += (((i21 * fFld) + i17) - Test.lFld);
                Test.dFld -= fFld;
                i20 ^= -63720;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
