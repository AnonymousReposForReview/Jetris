package tests.javafuzzer3070;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:31:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=42484L;
    public double dFld=107.53827;
    public static float fFld=0.47F;
    public static short sFld=26626;
    public static volatile boolean bFld=false;
    public static volatile short sArrFld[]=new short[N];
    public static boolean bArrFld[]=new boolean[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-18658);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, int i3) {

        int i4=-37637, i5=-4, i6=-10, i7=-242, i8=-179, i9=-4, iArr3[][]=new int[N][N];
        byte by=65;

        FuzzerUtils.init(iArr3, 14);

        i3 *= Test.sFld;
        for (i4 = 6; i4 < 282; ++i4) {
            Test.instanceCount = i5;
            i5 = (int)l1;
            l1 <<= by;
            for (i6 = 1; i6 < 6; ++i6) {
                i7 = (int)l1;
                i5 += (int)l1;
                for (i8 = 1; i8 < 2; ++i8) {
                    i7 += (i8 + Test.sFld);
                    if (true) break;
                    try {
                        i5 = (iArr3[i8 - 1][i8] % i7);
                        i7 = (-1303623038 % iArr3[i8][i8 - 1]);
                        iArr3[i8 + 1][i8 - 1] = (i8 / -45);
                    } catch (ArithmeticException a_e) {}
                    i5 = i5;
                    l1 += (i8 * i3);
                    i9 += (i8 * i7);
                }
            }
        }
        long meth_res = l1 + i3 + i4 + i5 + by + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i2=24582, i10=-14054, i11=51543, i12=10, iArr2[]=new int[N];
        short s=-25002;
        long l2=-1616693645L, lArr[]=new long[N];
        double dArr[][]=new double[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 50);
        FuzzerUtils.init(lArr, 9113836816660951540L);
        FuzzerUtils.init(dArr, -1.32808);
        FuzzerUtils.init(fArr, 24.786F);

        Test.sArrFld[(-14 >>> 1) % N] = (short)(((-(15647 - (-63 + Test.instanceCount))) + i2) - (s = (short)-58600));
        Test.fFld = i2;
        i2 += (int)(Test.instanceCount--);
        iArr2[(i2 >>> 1) % N] = (int)((lArr[(i2 >>> 1) % N]++) * fMeth(Test.instanceCount, 179));
        i10 = 1;
        do {
            dArr[i10 - 1][i10] *= Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
            Test.instanceCount += i10;
            i2 += i10;
            for (i11 = 1; i11 < 8; ++i11) {
                byte by1=113;
                Test.instanceCount >>= by1;
                i2 -= (int)l2;
                Test.instanceCount += (((i11 * i12) + by1) - Test.fFld);
                fArr[i11] -= i11;
                i2 ^= i12;
            }
        } while (++i10 < 192);
        vMeth_check_sum += i2 + s + i10 + i11 + i12 + l2 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public double dMeth(long l, float f) {

        int i1=66, i13=-26, i14=77, i15=-9, i16=-11, i17=-44, i18=-59910, iArr1[]=new int[N];
        byte by2=54;

        FuzzerUtils.init(iArr1, -140);

        switch (((iArr1[(i1 >>> 1) % N] >>> 1) % 2) + 53) {
        case 53:
            vMeth();
            Test.bArrFld[(i1 >>> 1) % N] = Test.bFld;
            break;
        case 54:
            for (i13 = 6; i13 < 164; i13++) {
                for (i15 = i13; i15 < 10; i15++) {
                    l -= (long)f;
                    for (i17 = 1; i17 < 1; ++i17) {
                        fArrFld[i17 + 1][i15 - 1] *= i15;
                        i16 = i14;
                        by2 |= (byte)i18;
                        Test.fFld += (float)dFld;
                        i18 += (i17 * i17);
                        i18 += (i17 | Test.sFld);
                    }
                    if (Test.bFld) break;
                    f = i17;
                }
            }
            break;
        default:
            Test.fFld = l;
        }
        long meth_res = l + Float.floatToIntBits(f) + i1 + i13 + i14 + i15 + i16 + i17 + i18 + by2 +
            FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-37959, i19=-119, i20=-12, i21=186, i22=-60253, iArr[]=new int[N];
        float f1=-95.676F;
        double dArr1[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(dArr1, 0.61023);
        FuzzerUtils.init(lArr1, -13L);

        dFld = (((-(i = i)) * (++iArr[(i >>> 1) % N])) / (((long)((Test.instanceCount - 6L) - dMeth(Test.instanceCount,
            Test.fFld))) | 1));
        switch ((((i >>> 1) % 9) * 5) + 50) {
        case 75:
            for (i19 = 3; i19 < 213; i19++) {
                i20 += (int)Test.fFld;
                f1 = 1;
                do {
                    for (i21 = 1; i21 < 1; ++i21) {
                        switch (((i21 % 9) * 5) + 16) {
                        case 24:
                            i = (int)Test.instanceCount;
                            switch ((i19 % 2) + 57) {
                            case 57:
                                if (Test.bFld) continue;
                                break;
                            case 58:
                                iArr[i21 - 1] = (int)f1;
                                i20 = i19;
                            }
                            dArr1[i19 - 1] -= Test.instanceCount;
                            break;
                        case 39:
                            iArr[(int)(f1 + 1)] %= (int)((long)(dFld) | 1);
                            if (Test.bFld) continue;
                            break;
                        case 51:
                            i &= Test.sFld;
                            i = (int)Test.instanceCount;
                            break;
                        case 36:
                            try {
                                i = (i22 / 4276);
                                i20 = (4 / i21);
                                i = (-32981 / i);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount += i;
                        case 60:
                            i22 += (int)(-2050244447L + (i21 * i21));
                            iArr = iArr;
                        case 22:
                            if (Test.bFld) continue;
                            break;
                        case 58:
                            Test.instanceCount = i22;
                            Test.bFld = Test.bFld;
                            break;
                        case 50:
                            dFld += i20;
                            if (Test.bFld) break;
                            iArr[(int)(f1 + 1)] = -42337;
                            i = -20706;
                            break;
                        case 29:
                            i22 = 189;
                            Test.instanceCount >>= Test.instanceCount;
                            break;
                        }
                    }
                } while (++f1 < 120);
            }
            break;
        case 92:
            i22 += i20;
        case 94:
            Test.sArrFld[(i20 >>> 1) % N] -= (short)i22;
            break;
        case 52:
        case 80:
            lArr1[(i19 >>> 1) % N] = i22;
            break;
        case 73:
            lArr1[(i >>> 1) % N] /= -51540;
            break;
        case 65:
            i20 = i;
            break;
        case 64:
            iArr = iArr;
            break;
        case 78:
            Test.instanceCount = i20;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
