package tests.javafuzzer2017;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:27:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=17863L;
    public static double dFld=-112.110882;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 192L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, long l, float f1) {

        int i6=-24792, i7=8, i8=-71, i9=169;
        byte by=-112;
        short s1=-2241;
        double d1=-1.95928;

        i6 = 1;
        while (++i6 < 172) {
            for (i7 = i6; i7 < 9; i7++) {
                i8 -= (int)1.95622;
                i8 += i7;
                i5 += 17737;
                i8 |= i6;
                i9 = 1;
                do {
                    by += (byte)247;
                    s1 &= (short)i9;
                    d1 += i6;
                    i5 = -28326;
                    i8 = 0;
                    Test.instanceCount >>= i8;
                    i5 = i9;
                    Test.instanceCount *= (long)d1;
                } while ((i9 -= 3) > 0);
            }
        }
        long meth_res = i5 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + by + s1 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, double d) {

        float f2=0.531F, f3=2.470F;
        int i10=0, i11=237, i12=10, i13=19342, i14=-6, iArr1[]=new int[N];
        byte by1=0;
        boolean b=true;
        short s2=3906;

        FuzzerUtils.init(iArr1, -10);

        switch (((iMeth(43, Test.instanceCount, f2) >>> 1) % 3) + 40) {
        case 40:
            for (i10 = 19; i10 < 351; i10++) {
                for (i12 = 1; 5 > i12; i12++) {
                    by1 += (byte)i12;
                    iArr1[i12 - 1] >>>= i12;
                    iArr1[(i12 >>> 1) % N] = i12;
                    switch (((i12 % 4) * 5) + 74) {
                    case 75:
                        switch ((i10 % 7) + 12) {
                        case 12:
                            i11 = i4;
                            break;
                        case 13:
                            i4 >>= (int)Test.instanceCount;
                            for (f3 = 1; f3 < 2; f3 += 3) {
                                switch ((((i14 >>> 1) % 5) * 5) + 99) {
                                case 103:
                                case 104:
                                    i4 += (int)f3;
                                    Test.instanceCount = Test.instanceCount;
                                    if (b) continue;
                                    break;
                                case 101:
                                    i14 %= (int)((long)(d) | 1);
                                    break;
                                case 108:
                                case 119:
                                    iArr1[i10 + 1] = i13;
                                    break;
                                }
                            }
                            break;
                        case 14:
                            if (i12 != 0) {
                                vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i10 +
                                    i11 + i12 + i13 + by1 + Float.floatToIntBits(f3) + i14 + (b ? 1 : 0) + s2 +
                                    FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            break;
                        case 15:
                            i11 >>>= (int)-142L;
                            break;
                        case 16:
                            i4 += (i12 - i13);
                            break;
                        case 17:
                            Test.instanceCount = i10;
                            break;
                        case 18:
                            i14 %= (int)((long)(d) | 1);
                            break;
                        default:
                            iArr1[i10] = -12;
                        }
                    case 94:
                        i14 = (int)d;
                    case 89:
                        if (false) continue;
                        break;
                    case 87:
                        i11 += i11;
                    }
                }
            }
        case 41:
            s2 -= (short)i4;
            break;
        case 42:
            i13 += (int)Test.instanceCount;
            break;
        default:
            i13 = (int)Test.instanceCount;
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + by1 +
            Float.floatToIntBits(f3) + i14 + (b ? 1 : 0) + s2 + FuzzerUtils.checkSum(iArr1);
    }

    public double dMeth() {

        int i15=58229, i16=-118, i17=-18145, i18=-1, i19=0, i20=-119, i21=32100;
        float f4=-58.1005F;
        double d2=0.6509;
        boolean b1=false;

        vMeth(i15, Test.dFld);
        Test.instanceCount >>= Test.instanceCount;
        for (f4 = 14; 231 > f4; ++f4) {
            i15 <<= (int)Test.instanceCount;
            if (b1) {
                for (d2 = 1; d2 < 7; ++d2) {
                    for (i18 = (int)(d2); i18 < 2; i18++) {
                        i15 -= i18;
                        Test.instanceCount = (long)f4;
                        if (b1) continue;
                    }
                    for (i20 = 2; i20 > 1; i20 -= 3) {
                        i16 -= i15;
                        i17 &= 34364;
                        i17 >>>= i16;
                        if (false) break;
                    }
                }
            } else {
                i19 -= i18;
            }
        }
        long meth_res = i15 + Float.floatToIntBits(f4) + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 + (b1 ? 1
            : 0) + i20 + i21;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=25538, i2=-213, i3=62397, i22=-61793, i23=0, i24=120, iArr[]=new int[N];
        float f=20.404F;
        double d3=21.20262;
        short s3=-28446;

        FuzzerUtils.init(iArr, -54072);

        i = 1;
        while (++i < 288) {
            Test.instanceCount += ((-(--Test.instanceCount)) * i);
            i1 = 1;
            do {
                Test.instanceCount += (((i1 * i) + f) - Test.instanceCount);
                for (i2 = 1; i2 < 1; i2++) {
                    short s=3852;
                    try {
                        iArr[i + 1] = (i3 % i3);
                        i3 = (25556 % i);
                        i3 = (i % i);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[i1] = (((-217 - (--s)) * (i + i)) - i);
                    i3 += (((i2 * s) + i2) - f);
                    i3 *= (int)((-(Test.instanceCount + Test.instanceCount)) * (dMeth() * i1));
                }
                for (i22 = 1; i22 < 1; i22++) {
                    i3 += (((i22 * i22) + Test.instanceCount) - Test.instanceCount);
                    i23 -= (int)26L;
                    i3 += i23;
                    i23 += i3;
                    Test.instanceCount = (long)f;
                }
                i3 = i2;
                Test.lArrFld[i + 1] <<= 31;
                i3 = i2;
                i23 = (int)Test.instanceCount;
                for (d3 = 1; 1 > d3; d3 += 3) {
                    i3 += (int)d3;
                    i23 += (int)(((d3 * Test.instanceCount) + i) - i24);
                    i24 = i24;
                    s3 = (short)i24;
                }
                i24 -= (int)-2.31541;
            } while (++i1 < 87);
        }
        i3 >>>= s3;
        i23 -= i24;
        i3 = i24;
        iArr[(162 >>> 1) % N] >>= i23;
        Test.instanceCount >>>= i2;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
