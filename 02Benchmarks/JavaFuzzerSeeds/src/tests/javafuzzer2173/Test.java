package tests.javafuzzer2173;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:44:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static double dFld=-1.61260;
    public static float fFld=48.766F;
    public static boolean bFld=true;
    public long lFld=-169L;
    public static byte byArrFld[]=new byte[N];
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-11);
        FuzzerUtils.init(Test.fArrFld, 0.610F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i5=-162, i6=11, i7=-11, i8=-16660, i9=72, i10=-6, iArr[]=new int[N];
        boolean b=true;
        byte by1=-19;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(dArr, 29.68057);

        i5 *= i5;
        i6 = 1;
        do {
            for (i7 = 1; i7 < 7; ++i7) {
                iArr[i6 - 1] |= i5;
                dArr[i7 + 1] = Test.dFld;
                for (i9 = i6; i9 < 2; i9 += 3) {
                    byte by=103;
                    i8 = (int)Test.instanceCount;
                    Test.instanceCount = by;
                    if (b) continue;
                    iArr[i6] += (int)Test.instanceCount;
                }
            }
            i5 += -13;
        } while (++i6 < 248);
        i5 <<= i10;
        i8 -= i7;
        Test.instanceCount *= Test.instanceCount;
        by1 += (byte)Test.fFld;
        vMeth2_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i3=13, i4=-17729, i11=-89, i12=233, i13=6, i14=86, iArr1[][]=new int[N][N];
        boolean b1=false;
        long l=2L;

        FuzzerUtils.init(iArr1, 49908);

        for (i3 = 6; i3 < 174; ++i3) {
            vMeth2();
            b1 = b1;
            try {
                iArr1[i3][i3 + 1] = (i3 % iArr1[i3 + 1][i3]);
                i4 = (i4 / i3);
                i4 = (i3 / 8425);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount -= -22125;
            for (i11 = 1; i11 < 9; i11 += 2) {
                for (i13 = 1; 3 > i13; i13++) {
                    i4 = i4;
                    iArr1[i11 + 1][i11] = i12;
                    l += i13;
                    try {
                        iArr1[i13 + 1][i3] = (i14 / 27993);
                        i14 = (i3 / i14);
                        i12 = (i11 % iArr1[i13 + 1][i13]);
                    } catch (ArithmeticException a_e) {}
                    i14 -= i12;
                    i12 = -8518;
                    Test.byArrFld[i13] -= (byte)115;
                    Test.instanceCount = 14;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + l + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, float f) {

        int i1=65277, i2=-4, i15=2, i16=-13, i17=69, i18=-8, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        short s=17391, sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -17916);
        FuzzerUtils.init(iArr3, 3);
        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(sArr, (short)30462);

        for (i1 = 16; i1 < 336; i1++) {
            vMeth1();
            for (i15 = 1; i15 < 5; ++i15) {
                i16 += i15;
                iArr2[i15 - 1] = (int)Test.fFld;
                switch (((i >>> 1) % 2) + 18) {
                case 18:
                    i = i;
                    switch (((48130 >>> 1) % 4) + 126) {
                    case 126:
                        i2 -= i1;
                        for (i17 = i15; i17 < 2; ++i17) {
                            switch (((i1 % 10) * 5) + 54) {
                            case 84:
                                Test.dFld -= i16;
                                Test.instanceCount += Test.instanceCount;
                                i18 = (int)Test.instanceCount;
                                iArr2[i17] *= s;
                                break;
                            case 63:
                                i *= 7;
                                break;
                            case 66:
                                iArr2[i15 + 1] >>= i15;
                                break;
                            case 64:
                                iArr2 = iArr2;
                                break;
                            case 69:
                                if (true) continue;
                                break;
                            case 76:
                                i ^= (int)Test.instanceCount;
                            case 102:
                                iArr3 = iArr3;
                                break;
                            case 93:
                                i = i18;
                                break;
                            case 99:
                                i16 = (int)Test.instanceCount;
                                break;
                            case 98:
                                i16 = (int)-2247600895364451152L;
                                break;
                            default:
                                lArr[i17] = i1;
                            }
                        }
                        break;
                    case 127:
                        s >>= (short)-1142949699592425979L;
                        break;
                    case 128:
                        lArr[i15 + 1] = i1;
                        break;
                    case 129:
                        i16 = i18;
                        break;
                    }
                    break;
                case 19:
                    s >>>= (short)Test.instanceCount;
                    break;
                default:
                    sArr[i15] += (short)-123;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i15 + i16 + i17 + i18 + s +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-13236, i20=52, i21=170, i22=15, i23=55065, i24=6305;
        byte by2=126;
        short s1=744;

        vMeth(i19, Test.fFld);
        Test.instanceCount *= i19;
        i20 = 311;
        do {
            i19 += i20;
            switch (((i19 >>> 1) % 9) + 116) {
            case 116:
                Test.instanceCount = i19;
                for (i21 = 4; i21 < 161; i21++) {
                    i22 = i20;
                    i22 <<= by2;
                    switch ((i21 % 7) + 66) {
                    case 66:
                        for (i23 = i21; i23 < 2; i23++) {
                            i22 += (-47221 + (i23 * i23));
                            i24 += i23;
                            i22 = (int)Test.dFld;
                            Test.instanceCount *= i23;
                            i22 = i23;
                            switch ((i21 % 3) + 83) {
                            case 83:
                                i19 *= i23;
                                i24 = (int)Test.dFld;
                                Test.fFld *= Test.instanceCount;
                                break;
                            case 84:
                                Test.instanceCount = by2;
                                break;
                            case 85:
                                Test.fFld -= i19;
                                Test.instanceCount += i23;
                                break;
                            }
                            iArrFld[i21] = (int)Test.fFld;
                            s1 <<= (short)i19;
                            i24 = (int)Test.instanceCount;
                            Test.fFld = (float)Test.dFld;
                        }
                    case 67:
                        iArrFld = iArrFld;
                        i19 = i22;
                        by2 += (byte)(((i21 * Test.fFld) + i19) - Test.instanceCount);
                        break;
                    case 68:
                        i22 -= (int)2.22627;
                        break;
                    case 69:
                        i24 += (i21 - Test.instanceCount);
                        break;
                    case 70:
                        Test.bFld = Test.bFld;
                    case 71:
                        Test.bFld = Test.bFld;
                    case 72:
                        Test.fArrFld = Test.fArrFld;
                        break;
                    default:
                        i22 -= i24;
                    }
                }
                break;
            case 117:
                Test.fFld -= (float)Test.dFld;
            case 118:
                i19 >>= i19;
                break;
            case 119:
                s1 = (short)-119;
            case 120:
                i19 *= (int)Test.instanceCount;
            case 121:
                lFld >>= Test.instanceCount;
                break;
            case 122:
                iArrFld[i20] = (int)Test.fFld;
                break;
            case 123:
                Test.fFld += (i20 + by2);
                break;
            case 124:
                i19 = i19;
                break;
            }
        } while ((i20 -= 2) > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
