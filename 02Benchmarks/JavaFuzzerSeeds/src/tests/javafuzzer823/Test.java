package tests.javafuzzer823;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:27:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=54940L;
    public static boolean bFld=true;
    public static int iFld=-61643;
    public static volatile float fFld=0.127F;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61654);
        FuzzerUtils.init(Test.byArrFld, (byte)-37);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, int i2, int i3) {

        int i4=-2, i5=0, i6=53;
        short s=-25517;
        boolean b1=true;
        float f=0.650F, fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 2.930F);
        FuzzerUtils.init(lArr, 13L);

        fArr[(i3 >>> 1) % N] -= i2;
        i3 >>= i2;
        for (i4 = 3; i4 < 247; i4++) {
            Test.instanceCount = i2;
            i3 += (i4 | i2);
            s += (short)-60046;
            i6 = 1;
            do {
                double d=-124.89419;
                i1 += i6;
                d -= Test.instanceCount;
                if (b1) continue;
                lArr[i4 - 1][i6 - 1] >>>= i6;
                if (false) {
                    Test.iArrFld[i6] -= i3;
                    Test.instanceCount = (long)f;
                    d += i2;
                } else if (b1) {
                    s = s;
                } else if (false) {
                    Test.instanceCount = -167;
                } else {
                    i3 -= i1;
                }
            } while (++i6 < 7);
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + s + i6 + (b1 ? 1 : 0) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i=55, i7=20837, i8=167, i9=12, i10=-13623, iArr[]=new int[N];
        boolean bArr[]=new boolean[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 2.72F);

        i <<= (int)((--Test.instanceCount) + iArr[(i >>> 1) % N]);
        vMeth1(i, 9, i);
        bArr[(i >>> 1) % N] = Test.bFld;
        for (i7 = 10; 376 > i7; i7++) {
            if (Test.bFld) continue;
            Test.bFld = Test.bFld;
        }
        i += -19;
        for (float f1 : fArr1) {
            i = (int)Test.instanceCount;
            f1 = -24195;
            Test.instanceCount = i;
            for (i9 = 1; 4 > i9; i9++) {
                try {
                    i8 = (-22 % i10);
                    iArr[i9 - 1] = (i10 % i8);
                    i = (i % -25546);
                } catch (ArithmeticException a_e) {}
                Test.byArrFld[i9 + 1] >>= (byte)-230;
                i10 = -21470;
            }
        }
        vMeth_check_sum += i + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static long lMeth(byte by, boolean b) {

        int i11=35979, i12=164, i13=-48, i14=-9, i15=5, i16=-8691;
        float f2=-2.957F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2374511109693208732L);

        vMeth();
        for (i11 = 19; 350 > i11; i11++) {
            switch ((i11 % 5) + 33) {
            case 33:
                try {
                    i12 = (Test.iArrFld[i11] % i11);
                    i12 = (i11 / i11);
                    i12 = (i11 / i12);
                } catch (ArithmeticException a_e) {}
                i12 = 209;
                i13 = 1;
                while (++i13 < 5) {
                    Test.instanceCount += (i13 - Test.instanceCount);
                    for (i14 = 1; i14 < 1; i14++) {
                        if (b) {
                            i15 *= (int)f2;
                            Test.iFld *= (int)1.778F;
                            switch ((((i11 >>> 1) % 1) * 5) + 38) {
                            case 43:
                                if (i11 != 0) {
                                }
                                f2 -= -6.779F;
                                i12 = (int)f2;
                                break;
                            default:
                                f2 = i16;
                            }
                        }
                    }
                }
                break;
            case 34:
                Test.instanceCount = i16;
                break;
            case 35:
                Test.iFld -= Test.iFld;
                break;
            case 36:
                f2 = i13;
                break;
            case 37:
                i12 *= 62169;
                break;
            }
        }
        long meth_res = by + (b ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by1=-63;
        int i17=44651, i18=156, i19=10, i20=133, i21=-1, i22=-41, i23=-40406, i24=13, i25=-118, i26=-33273, i27=162,
            i28=-79;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 7109656193603061712L);

        Test.instanceCount -= Long.reverseBytes(lMeth(by1, Test.bFld));
        Test.iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        for (i17 = 14; i17 < 344; i17++) {
            Test.instanceCount = Test.iFld;
            i18 += i18;
        }
        for (i19 = 1; i19 < 254; ++i19) {
            for (i21 = 6; i21 < 99; i21++) {
                i22 = (int)Test.instanceCount;
            }
            if (false) {
                i23 = 99;
                while (--i23 > 0) {
                    try {
                        Test.iArrFld[i19 - 1] = (207381604 % Test.iArrFld[i19]);
                        i18 = (Test.iFld % 185);
                        i18 = (Test.iFld % i22);
                    } catch (ArithmeticException a_e) {}
                    i20 = (int)Test.instanceCount;
                    Test.iFld = (int)-1.20005;
                    for (i24 = 1; i24 < 1; i24++) {
                        i18 = i20;
                        Test.instanceCount += (((i24 * i18) + Test.iFld) - by1);
                    }
                    for (i26 = 1; i26 > 1; i26--) {
                        Test.instanceCount = i19;
                        Test.iArrFld[i23 - 1] >>= 20388;
                        switch ((i26 % 9) + 52) {
                        case 52:
                            Test.iArrFld[i19 - 1] >>>= (int)Test.instanceCount;
                            break;
                        case 53:
                            dArrFld[i26] %= (Test.instanceCount | 1);
                            lArr2[i19] = Test.instanceCount;
                            break;
                        case 54:
                            Test.fFld %= ((long)(Test.fFld) | 1);
                            by1 = by1;
                            if (Test.bFld) break;
                            break;
                        case 55:
                        case 56:
                            Test.fFld -= by1;
                            i20 += Test.iFld;
                            Test.iArrFld[i23 + 1] = i22;
                            by1 <<= (byte)-1759228030L;
                            break;
                        case 57:
                            i18 = i18;
                            break;
                        case 58:
                            i22 *= (int)Test.instanceCount;
                            break;
                        case 59:
                            by1 >>= (byte)i28;
                            break;
                        case 60:
                            Test.iArrFld[i26] -= (int)Test.fFld;
                            break;
                        default:
                            i27 += i19;
                        }
                    }
                }
            } else {
                by1 *= (byte)Test.fFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
