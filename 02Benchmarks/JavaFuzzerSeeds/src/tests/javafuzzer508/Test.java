package tests.javafuzzer508;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:47:50 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4438537538629432565L;
    public static double dFld=93.116465;
    public static int iFld=81;
    public static float fFld=0.62F;
    public static byte byFld=113;
    public static short sFld=16177;
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.lArrFld, -9L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=-173, i7=-9694, i8=-8, i9=2, iArr[]=new int[N];
        boolean b=false;
        float f1=-1.89F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -158);
        FuzzerUtils.init(fArr, 0.953F);

        iArr[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
        i6 = 1;
        while (++i6 < 291) {
            Test.iFld += (int)(-19436L + (i6 * i6));
            i7 = 6;
            while (--i7 > 0) {
                if (b) continue;
                if (i6 != 0) {
                    vMeth_check_sum += i6 + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                for (i8 = 1; 1 > i8; i8++) {
                    try {
                        Test.iFld = (-28421 / iArr[i8 + 1]);
                        Test.iFld = (iArr[i8] % -29240);
                        Test.iFld = (i7 / i8);
                    } catch (ArithmeticException a_e) {}
                    Test.dFld -= i7;
                    iArr[i6 - 1] = Test.iFld;
                    Test.iFld |= i7;
                    iArr[i8] = Test.iFld;
                }
                f1 += Test.iFld;
            }
            b = b;
            fArr[i6 - 1] *= -181;
        }
        vMeth_check_sum += i6 + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i4, int i5) {

        int i10=-13, i11=-236, i12=147, i13=199, i14=0, i15=2, i16=-55557, i17=9, iArr1[]=new int[N];
        boolean b1=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(fArr1, 39.188F);

        vMeth();
        for (i10 = 3; 395 > i10; i10++) {
            if (b1) continue;
            i4 -= 250;
            Test.instanceCount *= Test.instanceCount;
            try {
                i11 = (i4 / i10);
                i4 = (iArr1[i10 + 1] % 238);
                iArr1[i10] = (Test.iFld / -191);
            } catch (ArithmeticException a_e) {}
        }
        for (i12 = 2; 233 > i12; i12 += 2) {
            i4 *= (int)Test.dFld;
            i4 += (int)Test.fFld;
            i14 += 29;
            fArr1[i12 + 1] += i4;
        }
        i15 = i10;
        for (i16 = 3; i16 < 130; i16++) {
            Test.byFld += (byte)(i16 * i17);
            i17 = i12;
        }
        long meth_res = i4 + i5 + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        float f=72.982F;
        int i18=-53942, i19=-18590, i20=4, i21=-5, i22=53831;
        boolean b2=true;

        Test.dFld += (--i2);
        f += (i3++);
        Test.instanceCount -= ((lMeth(i2, Test.iFld) + i2) + Test.iFld);
        i18 = 1;
        while (++i18 < 341) {
            Test.iFld |= i3;
            for (i19 = 1; i19 < 5; ++i19) {
                for (i21 = i19; i21 < 2; ++i21) {
                    i2 = (int)Test.instanceCount;
                    Test.instanceCount = (long)f;
                    i22 -= (int)Test.instanceCount;
                    i20 >>= (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    Test.sFld += (short)(((i21 * i18) + f) - i19);
                    if (b2) break;
                }
                i22 = i18;
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + i18 + i19 + i20 + i21 + i22 + (b2 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=4, i23=-58, i24=-12544, i25=-12, i26=116;

        for (i = 4; 288 > i; ++i) {
            i1 |= (int)((Test.instanceCount++) - (iMeth(Test.iFld, i) * Test.instanceCount));
            Test.dFld *= 3;
            i1 -= (int)1.477F;
            switch (((i % 1) * 5) + 124) {
            case 128:
                byArrFld[i - 1] |= (byte)Test.instanceCount;
                for (i23 = 5; i23 < 89; i23 += 3) {
                    i24 ^= Test.iFld;
                    i1 >>= 82;
                    try {
                        i24 = (50480 / i24);
                        Test.iFld = (i23 / i1);
                        i1 = (i % -42091);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount <<= 7L;
                    for (i25 = 4; i25 > i23; --i25) {
                        Test.iArrFld[i23 - 1] = 11;
                        Test.lArrFld[i23 - 1] *= -5;
                        Test.sFld = (short)i23;
                        i24 <<= Test.iFld;
                        Test.sFld += (short)Test.instanceCount;
                        switch (((Test.iFld >>> 1) % 5) + 86) {
                        case 86:
                            try {
                                i26 = (Test.iFld / Test.iArrFld[i25 - 1]);
                                i1 = (-43254 % i1);
                                Test.iFld = (i26 % 165);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 87:
                            Test.lArrFld[i25 - 1] -= i;
                            break;
                        case 88:
                            Test.instanceCount += (((i25 * Test.fFld) + Test.fFld) - i23);
                            Test.fFld = Test.instanceCount;
                            i26 = Test.iFld;
                            break;
                        case 89:
                            Test.fFld = Test.instanceCount;
                            break;
                        case 90:
                            i24 ^= i26;
                        default:
                            Test.iFld += i;
                            Test.iFld += (i25 * Test.instanceCount);
                            i1 = i26;
                        }
                        Test.iFld <<= (int)Test.instanceCount;
                        Test.byFld = (byte)Test.instanceCount;
                    }
                }
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
