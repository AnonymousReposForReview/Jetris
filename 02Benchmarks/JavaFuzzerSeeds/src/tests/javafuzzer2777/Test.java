package tests.javafuzzer2777;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:57:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-196L;
    public float fFld=-2.210F;
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3237);
        FuzzerUtils.init(Test.iArrFld1, -48269);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9) {

        int i10=3, i11=14, i12=7, i13=-9, i14=16549, i15=5738, iArr1[]=new int[N];
        float f1=0.140F;
        boolean b=true;
        double d=1.76943, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -87.4062);
        FuzzerUtils.init(iArr1, 11);

        switch ((((i8 >>> 1) % 8) * 5) + 63) {
        case 67:
            for (i10 = 191; i10 > 8; --i10) {
                for (i12 = 9; 1 < i12; i12--) {
                    i13 += (i12 * i12);
                    i9 += (int)-253L;
                    i11 += i12;
                    dArr[i12] /= (Test.instanceCount | 1);
                    Test.instanceCount = 0;
                    i9 += i12;
                    f1 = Test.instanceCount;
                    for (i14 = i12; i14 < 2; ++i14) {
                        if (b) {
                            Test.instanceCount -= i12;
                        }
                        dArr[i10 - 1] *= i8;
                        Test.instanceCount <<= i10;
                    }
                }
            }
            break;
        case 84:
            Test.instanceCount = (long)1.8821;
            break;
        case 77:
            f1 += 54552L;
            break;
        case 99:
            i15 = i14;
            break;
        case 92:
            b = b;
        case 68:
            Test.iArrFld[(12 >>> 1) % N][(i14 >>> 1) % N] += i15;
            break;
        case 90:
            i11 /= (int)(Test.instanceCount | 1);
        case 73:
            d -= f1;
            break;
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i6, int i7) {

        short s1=-28394;

        s1 = (short)i7;
        vMeth1(i6, i7);
        for (int i17 : Test.iArrFld1) {
            i6 = (int)Test.instanceCount;
        }
        vMeth_check_sum += l + i6 + i7 + s1;
    }

    public static int iMeth(int i1) {

        int i2=81, i3=-37, i4=-4, i5=232, i18=32115, iArr[]=new int[N];
        short s=25825;
        float f2=-1.306F, fArr[]=new float[N];
        double d1=-65.109079, dArr1[]=new double[N];

        FuzzerUtils.init(fArr, -1.255F);
        FuzzerUtils.init(iArr, -117);
        FuzzerUtils.init(dArr1, 0.6448);

        for (i2 = 6; 295 > i2; i2++) {
            fArr[i2 + 1] %= (Long.reverseBytes(Test.instanceCount) | 1);
            Test.instanceCount += i2;
        }
        switch ((((iArr[(i1 >>> 1) % N] += i2) >>> 1) % 1) + 100) {
        case 100:
            for (i4 = 19; i4 < 308; ++i4) {
                float f=-94.971F;
                i1 >>= (s >>= (short)Integer.reverseBytes((int)(i2 + f)));
                i3 += (i4 ^ Test.instanceCount);
                i3 += (i4 ^ i1);
                vMeth(-136L, i5, i2);
                fArr[i4 - 1] += Test.instanceCount;
                Test.instanceCount = (long)-47.86F;
                for (f2 = 1; f2 < 6; f2++) {
                    Test.instanceCount += (long)f2;
                    iArr[i4 - 1] += (int)d1;
                    Test.iArrFld1[(int)(f2 + 1)] += i1;
                }
            }
            break;
        default:
            dArr1[(i18 >>> 1) % N] *= Test.instanceCount;
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + s + Float.floatToIntBits(f2) + i18 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=46, i20=5098, i21=-14, i22=0, i23=13, i24=-212, i25=-11, i26=18337;
        long l1=-15592L, lArr[]=new long[N];
        byte by=-113;

        FuzzerUtils.init(lArr, 3461343988L);

        i = iMeth(i);
        fFld = i;
        for (i20 = 7; i20 < 361; ++i20) {
            l1 = 71;
            do {
                i21 -= -16197;
                i = i20;
                i21 += (int)(l1 + i20);
                for (i22 = 1; 1 < i22; i22 -= 3) {
                    i = i;
                    i23 <<= 7;
                    Test.instanceCount = i23;
                    i = i21;
                }
                Test.instanceCount -= 464786536L;
                i21 += (int)(l1 * l1);
                fFld -= i21;
                fFld = i23;
            } while (--l1 > 0);
            i24 = 1;
            do {
                i21 -= (int)Test.instanceCount;
                by = (byte)Test.instanceCount;
                i21 += (int)(-176L + (i24 * i24));
                i23 += (i24 * i24);
                for (i25 = 1; i25 < 1; ++i25) {
                    fFld += (i25 - i);
                    i21 |= i26;
                    lArr = lArr;
                    i23 += i25;
                    i23 = i;
                    Test.iArrFld[i24][i24 + 1] += -3940;
                    i += i20;
                }
                Test.iArrFld1[i20] *= i20;
            } while (++i24 < 71);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
