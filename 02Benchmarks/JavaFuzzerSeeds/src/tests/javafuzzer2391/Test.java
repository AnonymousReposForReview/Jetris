package tests.javafuzzer2391;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:05:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static float fFld=0.723F;
    public static byte byFld=-75;
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -48808L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, long l1, int i5) {

        int i6=11585, i7=6756, i8=2, i9=113, iArr[]=new int[N];
        double d=-1.107413;
        boolean b1=true;

        FuzzerUtils.init(iArr, -11);

        i6 = 218;
        while ((i6 -= 3) > 0) {
            i7 = 1;
            while (++i7 < 21) {
                i8 = 1;
                while (++i8 < 1) {
                    i5 += (-5 + (i8 * i8));
                    Test.fFld -= i8;
                    i9 += (i8 + i8);
                    iArr[i7 + 1] = -10734;
                    d -= Test.fFld;
                    i4 = -101;
                    i4 >>>= 8;
                    if (b1) {
                        iArr[i6] = (int)7L;
                    }
                    i4 += (((i8 * i6) + i6) - i4);
                }
                l1 += (((i7 * i6) + i6) - i4);
                i9 += (int)(-1263633173L + (i7 * i7));
            }
        }
        vMeth1_check_sum += i4 + l1 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i3) {

        byte by=-68;
        float f=0.347F;
        int i10=36, i11=124, i12=35390, i13=-248, i14=11;
        boolean b2=true;
        short s=-20285;

        vMeth1(39850, Test.instanceCount, 0);
        i3 <<= i3;
        by = by;
        for (f = 3; f < 137; f++) {
            i3 = (int)Test.instanceCount;
            b2 = b2;
            if (b2) {
                for (i11 = 1; i11 < 12; i11++) {
                    i12 += (((i11 * i12) + i12) - i12);
                }
            } else if (b2) {
                for (i13 = 1; i13 < 12; i13++) {
                    s += (short)(i13 - Test.instanceCount);
                    Test.instanceCount += i14;
                    Test.instanceCount += i13;
                    Test.fFld += i13;
                    i3 += (((i13 * i10) + i12) - i14);
                }
            } else {
                Test.fFld -= i13;
            }
        }
        vMeth_check_sum += l + i3 + by + Float.floatToIntBits(f) + i10 + (b2 ? 1 : 0) + i11 + i12 + i13 + i14 + s;
    }

    public static float fMeth(int i2) {

        int i15=-13095, i16=-45140, i17=13, i18=147, i19=11;
        byte by1=15;
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -80.34377);
        FuzzerUtils.init(fArr, -2.925F);

        Test.lArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] -= (--i2);
        vMeth(Test.instanceCount, i2);
        for (i15 = 4; 159 > i15; ++i15) {
            i17 = 1;
            do {
                dArr[i17 + 1] -= i2;
                for (i18 = i15; 1 > i18; ++i18) {
                    fArr[i18] -= i15;
                    i19 += (int)-14L;
                    i16 += i18;
                    i2 = i17;
                    i19 += (i18 * i18);
                    Test.instanceCount = Test.instanceCount;
                    i16 += i18;
                    i2 = (int)Test.instanceCount;
                    by1 = (byte)i16;
                }
            } while (++i17 < 10);
        }
        long meth_res = i2 + i15 + i16 + i17 + i18 + i19 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i1=-166, i20=51, i21=-166, i22=10, i23=-48546, i24=13, i25=14;
        boolean b=false;
        short s1=29040;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-43);

        for (i = 1; i < 121; i++) {
            b = (fMeth(i) <= Test.byFld);
            i20 -= i20;
            i1 <<= i;
            i1 += i;
            i1 *= (int)Test.fFld;
            Test.lArrFld[i][i - 1] = 13;
            i1 &= (int)-50L;
            if (b) {
                fArrFld[i - 1] *= Test.instanceCount;
                i1 = i;
                Test.fFld = 34268;
                i21 = 1;
                while (++i21 < 209) {
                    for (i22 = 1; i22 > 1; --i22) {
                        switch ((i21 % 3) + 83) {
                        case 83:
                            Test.fFld += i22;
                            break;
                        case 84:
                            i23 = i;
                            i20 >>= i20;
                            i20 *= (int)-60.593F;
                            byArr[i] = (byte)i21;
                            break;
                        case 85:
                            s1 = (short)i20;
                            i20 += (((i22 * i21) + Test.fFld) - i21);
                            break;
                        }
                        i20 += (int)Test.instanceCount;
                        i1 += 112;
                        i23 = i22;
                    }
                    i1 += (((i21 * Test.instanceCount) + Test.fFld) - i1);
                    i1 -= i21;
                }
            } else {
                for (i24 = 9; 209 > i24; i24++) {
                    Test.fFld -= -28349;
                }
            }
            i23 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
