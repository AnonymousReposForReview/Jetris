package tests.javafuzzer2365;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:34:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=252L;
    public byte byFld=-125;
    public static byte byFld1=103;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f1=-119.50F, fArr[][]=new float[N][N];
        int i13=-8452, i14=11979, i15=-156, i16=-10, i17=-14886, iArr1[]=new int[N];
        byte by=-115;

        FuzzerUtils.init(iArr1, -69);
        FuzzerUtils.init(fArr, 0.110F);

        for (f1 = 16; f1 < 294; f1++) {
            Test.instanceCount += (long)(f1 * f1);
            i13 <<= i13;
            for (i14 = 1; i14 < 6; i14++) {
                Test.instanceCount = (long)-121.167F;
                i13 -= i14;
                iArr1[(int)(f1 - 1)] >>>= i13;
                Test.instanceCount = i15;
                for (i16 = (int)(f1); i16 < 2; i16++) {
                    i15 += (i16 ^ by);
                    iArr1 = iArr1;
                    i15 += (((i16 * f1) + i14) - i15);
                    Test.instanceCount += (((i16 * i15) + i16) - Test.instanceCount);
                    fArr[i16 + 1][i16 - 1] += -185;
                    i15 = 144;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + by + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, double d1) {

        int i11=-44301, i12=-202, i18=-39, i19=-53010, i20=-6;
        short s=-3033;
        byte by1=-46;

        i11 = 392;
        while ((i11 -= 2) > 0) {
            i12 ^= Math.min((int)((s - Test.instanceCount) - (d1 * i12)), iMeth1());
            Test.instanceCount = i11;
            Test.instanceCount = 184;
            i12 -= i11;
            i18 = 1;
            do {
                switch (((i11 % 1) * 5) + 112) {
                case 116:
                    Test.instanceCount += (((i18 * i12) + i11) - Test.instanceCount);
                    i12 += i12;
                    break;
                default:
                    for (i19 = 1; 1 < i19; --i19) {
                        switch ((i11 % 5) + 123) {
                        case 123:
                            f %= (i19 | 1);
                            i12 += (int)Test.instanceCount;
                            break;
                        case 124:
                            by1 += (byte)(((i19 * i19) + i18) - Test.instanceCount);
                            i12 += i19;
                        case 125:
                            if (i19 != 0) {
                                vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i11 + i12 +
                                    s + i18 + i19 + i20 + by1;
                                return;
                            }
                            break;
                        case 126:
                            f *= i18;
                            break;
                        case 127:
                            Test.instanceCount += (i19 * i19);
                            break;
                        default:
                            i12 += (i19 * i12);
                        }
                    }
                }
            } while (++i18 < 8);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i11 + i12 + s + i18 + i19 + i20 +
            by1;
    }

    public static int iMeth(int i6, int i7) {

        int i8=-27498, i9=51417, i10=212, i21=-29, i22=-202, i23=1, i24=11, iArr2[]=new int[N];
        long l1=572978976L;
        double d2=-31.123377;
        boolean b=true;

        FuzzerUtils.init(iArr2, -26861);

        for (i8 = 12; i8 < 269; i8++) {
            i6 = (int)(Test.instanceCount * (Test.instanceCount++));
            for (l1 = 6; l1 > 1; l1--) {
                i9 += (int)l1;
                vMeth(76.556F, d2);
                i10 = Test.byFld1;
                i7 >>>= i7;
                for (i21 = 1; i21 < 2; i21++) {
                    if (false) break;
                    i9 += i21;
                    d2 += i9;
                }
            }
            if (b) {
                for (i23 = i8; 6 > i23; i23++) {
                    iArr2[i23 + 1] = (int)Test.instanceCount;
                }
            } else {
                i22 = i23;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + l1 + i10 + Double.doubleToLongBits(d2) + i21 + i22 + i23 + i24 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=42.80876;
        int i=6, i1=17494, i2=12, i3=36104, i4=7, i5=-135, i25=-51745, i26=-121, i27=-59, i28=19405, i29=-7, i30=5,
            iArr[]=new int[N];
        long l=2L, lArr[]=new long[N];
        float f2=14.301F, fArr1[][]=new float[N][N];
        short s1=32192;
        boolean b1=false;

        FuzzerUtils.init(lArr, -1004L);
        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(fArr1, 53.903F);

        d += ((i++) - i);
        for (l = 11; 239 > l; l++) {
            for (i2 = (int)(l); i2 < 110; ++i2) {
                i >>>= (int)((lArr[(int)(l)] = (i2 * i3)) - i3);
                for (i4 = 1; i4 < 1; ++i4) {
                    byFld *= (byte)(--byFld);
                    try {
                        i1 = (i4 / iArr[i4]);
                        iArr[i4 - 1] = (i3 % 146);
                        i3 = (iArr[(int)(l)] / 46363);
                    } catch (ArithmeticException a_e) {}
                    i = ((i5 - (--i5)) - (i2 >> (-10 - Math.max(i5, i4))));
                    i -= (iMeth(i1, i2) * i3);
                    i3 *= (int)f2;
                    Test.instanceCount >>>= 6428869113868142000L;
                }
                i *= i1;
                d %= (Test.instanceCount | 1);
                i5 += 9;
                i += i2;
            }
            Test.instanceCount += (l * l);
            i += (int)17452L;
            i5 = i2;
            i3 = (int)Test.instanceCount;
            i3 = i4;
            for (i25 = 4; i25 < 110; ++i25) {
                d -= i3;
                s1 &= (short)-9351;
                fArr1[(int)(l)] = fArr1[i25];
                i = (int)246509465L;
            }
            Test.instanceCount += l;
            for (i27 = 110; i27 > 4; --i27) {
                for (i29 = 1; i29 < 2; i29 += 2) {
                    iArr = FuzzerUtils.int1array(N, (int)-13);
                    if (b1) continue;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
