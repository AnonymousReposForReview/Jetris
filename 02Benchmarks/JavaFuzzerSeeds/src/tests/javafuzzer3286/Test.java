package tests.javafuzzer3286;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:39:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1491997669L;
    public static volatile short sFld=-7458;
    public static volatile double dFld=114.3363;
    public static float fFld=-1.591F;
    public static boolean bFld=false;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-1353);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth(int i7, int i8, int i9) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -63);

        Test.instanceCount >>>= ((--i7) * iArr1[(-239 >>> 1) % N]);
        long meth_res = i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i10, int i11) {

        int i12=-6404, i13=45, i14=7, i15=-1, i16=-41289;
        byte by=-60;
        float f1=5.94F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -61821L);

        Test.instanceCount <<= (long)(i11 + (Float.intBitsToFloat(i11) + i10));
        iMeth(i11, i11, i10);
        Test.sFld *= (short)Test.fFld;
        Test.fFld *= (float)91.9973;
        for (i12 = 7; i12 < 137; ++i12) {
            lArr[i12] = i13;
            Test.fFld += (((i12 * i13) + Test.instanceCount) - i10);
        }
        i14 = 1;
        while ((i14 += 3) < 386) {
            i13 += (((i14 * by) + f1) - Test.instanceCount);
            Test.fFld += (((i14 * Test.sFld) + i11) - Test.fFld);
            i10 += i14;
            for (i15 = 12; i15 > 1; i15 -= 2) {
                Test.sArrFld[i14 + 1] -= (short)1288;
                Test.fFld = i14;
                lArr = lArr;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + by + Float.floatToIntBits(f1) + i15 + i16 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i6) {

        double d1=113.76270;
        int i17=38917, i18=13, i19=53955;
        byte by1=-18;

        Test.fFld += (i6 += 48);
        d1 = 1;
        while (++d1 < 134) {
            Test.instanceCount *= (long)((-(Test.dFld + Test.instanceCount)) + iMeth(i6, iMeth1(i6, i6), i6));
            i17 = 1;
            while (++i17 < 12) {
                for (i18 = 1; i18 < 1; i18++) {
                    i19 -= i6;
                    i6 %= (int)(i17 | 1);
                    Test.sFld += (short)1672673445L;
                }
                switch ((int)((d1 % 1) + 19)) {
                case 19:
                    by1 = (byte)i6;
                    Test.instanceCount += (-3 + (i17 * i17));
                    i19 += i17;
                    Test.instanceCount = 7;
                    break;
                }
                i19 = i19;
                Test.dFld *= Test.instanceCount;
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + by1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i2=36754, i3=-189, i4=-6, i5=51, i20=5, i21=-108, i22=-86, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, 12.158F);

        for (i2 = 3; i2 < 377; ++i2) {
            switch ((((iArr[i2 + 1] >>> 1) % 2) * 5) + 7) {
            case 11:
                for (i4 = 2; i4 < 67; i4++) {
                    Test.sFld += (short)Test.dFld;
                    Test.fFld = Math.abs(i4);
                    Test.instanceCount -= ((++i3) + (--i3));
                    switch (((((int)(Test.fFld - i5)) >>> 1) % 6) + 27) {
                    case 27:
                        iArr[i2] = i3;
                        iArr[i2] *= (int)fMeth(i2);
                        Test.fFld += i5;
                    case 28:
                        for (i20 = 1; i20 < 2; i20++) {
                            switch ((i4 % 4) + 96) {
                            case 96:
                                i21 = i3;
                                i3 += Test.sFld;
                                i3 = Test.sFld;
                                i5 += (i20 * i20);
                                break;
                            case 97:
                                iArr[i4 + 1] >>= 7933;
                                break;
                            case 98:
                            case 99:
                                i5 <<= 77;
                                iArr[i4] += i3;
                                Test.sFld <<= (short)Test.instanceCount;
                                break;
                            default:
                                Test.bFld = Test.bFld;
                                switch ((i20 % 2) + 12) {
                                case 12:
                                    Test.sFld = (short)i3;
                                    switch ((i2 % 2) + 97) {
                                    case 97:
                                        Test.instanceCount |= i5;
                                        break;
                                    case 98:
                                        i5 >>>= Test.sFld;
                                        iArr[i2] -= i22;
                                        i21 = -63998;
                                        fArr[i20 + 1] = i21;
                                        break;
                                    }
                                    Test.instanceCount &= 219;
                                    break;
                                case 13:
                                    if (Test.bFld) break;
                                    break;
                                }
                            }
                        }
                        break;
                    case 29:
                        iArr[i2] += (int)1.1023F;
                        break;
                    case 30:
                        Test.instanceCount >>= Test.instanceCount;
                    case 31:
                        Test.fFld -= -23246;
                        break;
                    case 32:
                    }
                }
                break;
            case 14:
            }
        }

    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest iMeth1
//DEBUG  iMeth1 ->  iMeth1 fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
