package tests.javafuzzer404;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:17:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static volatile short sFld=-9016;
    public static long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8464741691145066970L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8) {

        int i9=7, i10=78, i11=-19, i12=59, i13=-64, i14=30270, i15=23131, i16=-15397, iArr1[][]=new int[N][N];
        boolean b1=true;
        float f1=-126.332F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 14774);
        FuzzerUtils.init(fArr, -48.699F);

        for (i9 = 8; 317 > i9; i9++) {
            i11 = 1;
            do {
                for (i12 = 1; 1 > i12; i12++) {
                    i13 += i9;
                    b1 = b1;
                    Test.instanceCount += (long)f1;
                }
                i8 = (int)Test.instanceCount;
                Test.lArrFld[i9 - 1] <<= Test.instanceCount;
                try {
                    i10 = (i12 / i13);
                    iArr1[i11 - 1][i9] = (i14 % i13);
                    i10 = (iArr1[i11 - 1][i9 - 1] / -38864);
                } catch (ArithmeticException a_e) {}
                for (i15 = 1; i15 < 1; i15++) {
                    Test.instanceCount = Test.instanceCount;
                    i16 ^= (int)Test.instanceCount;
                    fArr = fArr;
                    f1 += (31830 + (i15 * i15));
                    i16 -= i14;
                }
            } while (++i11 < 5);
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l, int i) {

        int i1=41, i2=-25302, i4=4666, i5=-29097, i6=5, i7=47375, iArr[]=new int[N];
        short s1=2940;
        boolean b=false, bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -29326);
        FuzzerUtils.init(dArr, 35.48287);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount = i;
        for (i1 = 14; i1 < 248; ++i1) {
            for (i4 = i1; i4 < 7; i4++) {
                for (i6 = 1; i6 < 1; ++i6) {
                    l = (long)(dArr[i1 - 1] += (++s1));
                    bArr[i4] = (b = bArr[i4]);
                    i += (i6 * i6);
                    l += Short.reverseBytes((short)((i5 >>> i4) + (i4 - 91)));
                    i -= (int)((lMeth(i) * i4) + i1);
                    i += (i6 * l);
                    i5 = i4;
                    dArr[i4 - 1] += i5;
                    try {
                        i5 = (i / i7);
                        i5 = (25723 % i5);
                        iArr[i6 + 1] = (45 % i2);
                    } catch (ArithmeticException a_e) {}
                }
                i2 = (int)-5693429615146673490L;
                i2 += i4;
            }
        }
        vMeth1_check_sum += l + i + i1 + i2 + i4 + i5 + i6 + i7 + s1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(short s, double d, float f) {

        int i17=-13284, i18=-74, i19=27498, i20=194, i21=-8, i22=1, i23=-5, i24=-5;

        vMeth1(Test.instanceCount, i17);
        i18 = 1;
        do {
            Test.instanceCount = i17;
            for (i19 = 1; i19 < 12; ++i19) {
                i20 = i20;
                Test.instanceCount -= (long)-83.828F;
                i17 = i20;
                for (i21 = i19; i21 < 2; ++i21) {
                    i22 += (i21 - f);
                    f *= (float)89.10198;
                }
                i17 &= i18;
            }
            for (i23 = 1; i23 < 12; ++i23) {
                Test.instanceCount ^= i22;
                Test.lArrFld[i18] *= i21;
                i22 += (int)f;
            }
        } while (++i18 < 136);
        vMeth_check_sum += s + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 + i21 + i22
            + i23 + i24;
    }

    public void mainTest(String[] strArr1) {

        double d1=112.118894, d2=2.118155;
        float f2=1.576F, f3=-9.490F;
        int i25=14, i26=22964, i27=-9, i29=10, i30=-213, i31=173, i32=-44, i33=32521, i34=5, i35=-2538;
        byte by=7;
        boolean b2=false;

        vMeth(Test.sFld, d1, f2);
        Test.lArrFld[(-41486 >>> 1) % N] *= (long)f2;
        f2 %= (i25 | 1);
        for (i26 = 1; i26 < 166; i26++) {
            by += (byte)i26;
            iArrFld[i26 - 1] += i26;
        }
        for (int i28 : iArrFld) {
            try {
                iArrFld[(i25 >>> 1) % N] = (i28 / 55463);
                iArrFld[(i26 >>> 1) % N] = (-217 / i27);
                i25 = (i25 / i29);
            } catch (ArithmeticException a_e) {}
            for (f3 = 1; f3 < 63; f3++) {
                for (d2 = 1; d2 < 2; ++d2) {
                    Test.instanceCount += (long)(d2 * d2);
                }
                i28 -= i28;
                i31 -= (int)f2;
                i31 >>= i26;
            }
            try {
                iArrFld[(i28 >>> 1) % N] = (iArrFld[(i27 >>> 1) % N] % -530181387);
                i27 = (iArrFld[(i29 >>> 1) % N] / iArrFld[(i30 >>> 1) % N]);
                i28 = (i25 / -47383);
            } catch (ArithmeticException a_e) {}
            i31 = (int)Test.instanceCount;
            for (i32 = 3; i32 < 63; i32 += 2) {
                iArrFld[i32] += (int)Test.instanceCount;
                i30 += (((i32 * Test.instanceCount) + Test.instanceCount) - f3);
                switch (((i32 >>> 1) % 9) + 28) {
                case 28:
                    if (false) continue;
                    Test.lArrFld[i32] = i32;
                    Test.lArrFld[i32] += i32;
                    break;
                case 29:
                    for (i34 = 1; i34 < 3; i34++) {
                        iArrFld[i32] += i31;
                        iArrFld[i34] = i29;
                        if (b2) continue;
                        i31 <<= (int)Test.instanceCount;
                        d1 += i34;
                        i27 += (i34 | i27);
                    }
                    break;
                case 30:
                    Test.instanceCount += (49714 + (i32 * i32));
                    break;
                case 31:
                    try {
                        i25 = (i29 % i25);
                        iArrFld[i32] = (i27 % 138);
                        iArrFld[i32 + 1] = (i35 % 216);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 32:
                    iArrFld[i32] += (int)f2;
                    break;
                case 33:
                    i35 += i32;
                    break;
                case 34:
                    Test.lArrFld[i32 - 1] ^= Test.instanceCount;
                case 35:
                    Test.instanceCount <<= -55140;
                case 36:
                default:
                    f2 += 1.976F;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
