package tests.javafuzzer2690;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:46:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=15515L;
    public static boolean bFld=false;
    public static double dFld=-5.44856;
    public static byte byFld=48;
    public int iArrFld[]=new int[N];
    public static volatile int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -4);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i5, int i6, int i7) {

        int i8=0, i9=31912, i10=9194, i11=67;
        boolean b=true;

        i8 = 1;
        do {
            Test.iArrFld1[i8 - 1] = i7;
            for (i9 = 1; i9 < 5; i9++) {
                b = b;
            }
            i6 += i8;
            i11 = 5;
            do {
                int i12=14;
                byte by=-66;
                i10 += (int)Test.instanceCount;
                if (false) break;
                Test.instanceCount = i10;
                i7 -= i12;
                i7 += i5;
                i7 = i10;
                by *= (byte)20824L;
            } while (--i11 > 0);
            if (Test.bFld) break;
            i6 = i5;
        } while (++i8 < 310);
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i3=-186, i4=-46135, i13=4, i14=2, i15=-229;
        float f1=26.230F;

        for (i3 = 2; i3 < 376; i3 += 3) {
            i4 = (int)(i3 + (dMeth(i3, i3, 23731) + i3));
            Test.dFld += i3;
            Test.iArrFld1[i3 - 1] = i3;
            for (i13 = 1; i13 < 13; ++i13) {
                for (f1 = 1; 2 > f1; f1++) {
                    Test.instanceCount += (long)f1;
                }
                i4 += (((i13 * i13) + Test.instanceCount) - i15);
                i14 *= i4;
            }
        }
        vMeth_check_sum += i3 + i4 + i13 + i14 + Float.floatToIntBits(f1) + i15;
    }

    public static int iMeth(long l, double d, float f) {

        int i1=2, i2=1, i16=6, i17=-207, i18=5;

        i1 >>= (i1--);
        i2 = 1;
        while (++i2 < 258) {
            vMeth();
            Test.iArrFld1[i2] >>= i1;
            i1 = 86;
            i16 = 1;
            while (++i16 < 6) {
                byte by1=120;
                i1 += (((i16 * i16) + i2) - i16);
                i1 += (((i16 * by1) + l) - Test.instanceCount);
                if (Test.bFld) break;
                i1 *= i16;
                i1 = 269;
                for (i17 = i2; 1 > i17; ++i17) {
                    i1 = (int)d;
                    i1 *= by1;
                    Test.byFld = (byte)-44169;
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i1 + i2 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-129;
        float f2=-46.992F;

        iArrFld[(i >>> 1) % N] /= (int)(i | 1);
        iArrFld[(i >>> 1) % N] = (int)(0.732F + iMeth(Test.instanceCount, Test.dFld, f2));
        i <<= -9;
        iArrFld[(i >>> 1) % N] >>= -82;
        Test.iArrFld1[(164 >>> 1) % N] = i;
        i = i;
        i |= i;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
