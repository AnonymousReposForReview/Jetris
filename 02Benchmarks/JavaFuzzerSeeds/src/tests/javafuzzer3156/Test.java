package tests.javafuzzer3156;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:00:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4032067315L;
    public static double dFld=1.78867;
    public static volatile short sFld=16847;
    public static byte byFld=55;
    public int iFld=-86;
    public float fFld=-27.983F;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, int i6) {

        int i7=-1, i8=38953, i9=-2449, i10=-40017, iArr[]=new int[N];
        float f=2.846F;
        boolean b=false;
        byte by=122;

        FuzzerUtils.init(iArr, 40080);

        i4 += i5;
        for (i7 = 396; i7 > 4; i7 -= 3) {
            for (i9 = 1; i9 < 12; ++i9) {
                i6 = i7;
                switch ((i7 % 4) + 28) {
                case 28:
                    iArr[i9 + 1] *= -319;
                    i4 -= (int)Test.instanceCount;
                    switch ((i7 % 9) + 88) {
                    case 88:
                        if (b) {
                            i4 = i9;
                        } else if (b) {
                            i4 -= i5;
                            f += f;
                            if (b) continue;
                        }
                        i8 = (int)Test.instanceCount;
                        break;
                    case 89:
                        i8 = 128;
                        break;
                    case 90:
                        Test.instanceCount -= -45;
                        break;
                    case 91:
                        i5 = (int)Test.instanceCount;
                        break;
                    case 92:
                        i10 += (((i9 * i7) + f) - i6);
                        break;
                    case 93:
                        iArr = iArr;
                    case 94:
                    case 95:
                    case 96:
                        i4 = i6;
                    }
                    break;
                case 29:
                    if (i7 != 0) {
                        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) +
                            by + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                case 30:
                    by += (byte)i5;
                    break;
                case 31:
                    i6 += (i9 | Test.instanceCount);
                    break;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i1, int i2) {

        int i3=-6, i11=1, i12=-120, iArr1[]=new int[N];
        float f1=1.476F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-123);
        FuzzerUtils.init(iArr1, -6359);

        i3 = 1;
        do {
            if ((--i2) < ((++Test.lArrFld[i3 - 1]) - (byArr[i3 + 1] -= (byte)i2))) break;
            vMeth2(i1, i1, i1);
            i1 /= (int)(i1 | 1);
            i1 += (i3 + Test.sFld);
            for (i11 = 6; i11 > 1; i11--) {
                boolean b1=true;
                if (b1) break;
                f1 += i1;
                Test.dFld = Test.dFld;
                iArr1 = iArr1;
            }
            l += (14 + (i3 * i3));
            i12 += (int)(-6923342166638040312L + (i3 * i3));
            l = Test.byFld;
            Test.lArrFld[i3] = i2;
        } while (++i3 < 277);
        Test.dFld -= -12;
        vMeth1_check_sum += l + i1 + i2 + i3 + i11 + i12 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        int i13=-224, i14=3, i15=28001, i16=-25799, i17=-228, i18=-35787;
        float f2=-117.724F;
        long l1=-56106L;

        Test.dFld = 0;
        vMeth1(Test.instanceCount, i, i);
        i = (int)Test.dFld;
        for (i13 = 10; i13 < 235; i13++) {
            switch (((i13 % 5) * 5) + 112) {
            case 133:
                switch ((i13 % 2) + 26) {
                case 26:
                    for (i15 = 7; i15 > i13; --i15) {
                        i14 -= (int)f2;
                        i16 += -13718;
                        f2 += i13;
                        i16 %= (int)(i14 | 1);
                        for (i17 = 1; 1 > i17; i17++) {
                            i16 *= (int)l1;
                            Test.byFld += (byte)(i17 | i15);
                            Test.sFld <<= (short)i17;
                        }
                    }
                    break;
                case 27:
                    l1 += i13;
                    break;
                }
                break;
            case 122:
                i -= 46615;
                break;
            case 129:
                i += (4 + (i13 * i13));
                break;
            case 128:
                i18 += (i13 - i13);
                break;
            case 126:
                i18 += (i13 | i17);
                break;
            default:
                Test.byFld += (byte)f2;
            }
        }
        vMeth_check_sum += i + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 + l1;
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true, bArr[][]=new boolean[N][N];
        int i20=7737, i21=8454, i22=-228, i23=9, i25=-13, i26=-23750, i27=230;
        double dArr[]=new double[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 69.23653);

        vMeth(iFld);
        Test.instanceCount = iFld;
        for (int i19 : iArrFld) {
            if (b2) break;
            iArrFld[(i19 >>> 1) % N] -= iFld;
            for (i20 = 1; i20 < 63; ++i20) {
                Test.dFld += Test.dFld;
                for (i22 = 1; i22 < 2; ++i22) {
                    Test.instanceCount += i22;
                }
                bArr[i20][i20] = b2;
                iFld = -57638;
                Test.instanceCount += (((i20 * i23) + i19) - Test.instanceCount);
                iFld += (i20 * i20);
                i23 = i20;
                Test.lArrFld[i20] = iFld;
                i19 += i22;
                Test.byFld += (byte)(i20 * i20);
            }
            i23 -= Test.sFld;
            Test.instanceCount += -12463L;
            fFld += i20;
            iFld >>= i22;
            i19 = (int)Test.instanceCount;
            i25 = 1;
            while (++i25 < 63) {
                Test.instanceCount = 47L;
                fFld += Test.instanceCount;
                for (i26 = 1; i26 < 1; i26++) {
                    Test.dFld = fFld;
                }
                i19 = i22;
            }
        }
        i23 -= (int)Test.instanceCount;
        dArr[(i23 >>> 1) % N] = fFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
