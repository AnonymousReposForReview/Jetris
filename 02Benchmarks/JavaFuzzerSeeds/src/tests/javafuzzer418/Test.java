package tests.javafuzzer418;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:21:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58694L;
    public static double dFld=114.83760;
    public static volatile short sFld=-25561;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i5, int i6) {

        short s=-29427;
        float f=-2.556F;
        int i7=28270, i8=10, iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.78378);
        FuzzerUtils.init(iArr1, 230);

        dArr[(i5 >>> 1) % N] += i6;
        s = (short)i5;
        i5 = (int)Test.dFld;
        f = 1;
        while (++f < 151) {
            iArr1[(int)(f)] -= 1;
            i6 /= (int)(Test.instanceCount | 1);
            i7 = 1;
            while (++i7 < 10) {
                iArr1[i7 - 1] <<= 57182;
                i8 = 1;
                while (++i8 < 1) {
                    i6 ^= i7;
                    i5 = s;
                    switch ((i8 % 1) + 86) {
                    case 86:
                        Test.instanceCount += (long)Test.dFld;
                        i6 <<= i8;
                        i5 = i5;
                        break;
                    default:
                        Test.instanceCount = i7;
                    }
                }
            }
        }
        long meth_res = i5 + i6 + s + Float.floatToIntBits(f) + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=-42761, i4=230, i9=-18693, i10=-82, i11=-9066, i12=-1, iArr[]=new int[N];
        byte by=36;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -1251);
        FuzzerUtils.init(fArr, 2.291F);

        for (i3 = 9; i3 < 243; ++i3) {
            double d=2.44466;
            iArr[i3 - 1] *= ((++iArr[i3 - 1]) % 2);
            iArr[i3 - 1] -= (int)(iArr[i3 + 1] - (++d));
            fArr[i3 - 1] *= sMeth(i3, i4);
            i4 -= i4;
            d = Test.sFld;
            i2 >>>= by;
            for (i9 = 1; i9 < 7; i9++) {
                try {
                    i4 = (3992 / i9);
                    i4 = (i9 % -5035);
                    iArr[i9 - 1] = (i4 % i2);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount *= Test.instanceCount;
            }
        }
        i2 *= i2;
        Test.instanceCount = i9;
        i11 = 283;
        while (--i11 > 0) {
            try {
                i4 = (i10 % -343551910);
                i10 = (i9 % iArr[i11]);
                i4 = (-231 % i12);
            } catch (ArithmeticException a_e) {}
            i4 -= i4;
        }
        vMeth_check_sum += i2 + i3 + i4 + by + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(long l, int i1) {


        vMeth(i1);
        vSmallMeth_check_sum += l + i1;
    }

    public void mainTest(String[] strArr1) {

        int i=120, i13=7, i14=-41390, i15=0, i16=63339, i17=-224, i18=244, iArr2[]=new int[N];
        double d1=0.118514;
        boolean b=true;
        float f1=2.58F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -48571);
        FuzzerUtils.init(lArr, 3924130442L);

        Test.instanceCount = i;
        for (int smallinvoc=0; smallinvoc<684; smallinvoc++) vSmallMeth(Test.instanceCount, i);
        i %= -6;
        for (i13 = 12; i13 < 306; i13++) {
            iArr2[i13 + 1] = i14;
        }
        for (d1 = 16; 300 > d1; ++d1) {
            Test.instanceCount &= i14;
            if (b) break;
            i15 += (int)d1;
            i15 = i14;
            i *= i;
            i16 = 1;
            do {
                switch ((i16 % 6) + 113) {
                case 113:
                    for (i17 = 1; i17 < 1; ++i17) {
                        Test.sFld &= (short)Test.instanceCount;
                        iArr2[i16] = i17;
                        i15 = (int)f1;
                        i14 = i14;
                        Test.instanceCount += (((i17 * i) + Test.instanceCount) - Test.instanceCount);
                        i15 += (i17 * i17);
                        lArr[i16] += (long)d1;
                        i18 = i14;
                        lArr[(int)(d1)] *= i13;
                        iArr2[i16 + 1] >>= i14;
                    }
                    break;
                case 114:
                    Test.sFld -= (short)-38L;
                    b = b;
                    i15 += i17;
                    i |= i;
                    break;
                case 115:
                    i15 = (int)f1;
                    Test.sFld += (short)(((i16 * Test.instanceCount) + i14) - i15);
                    break;
                case 116:
                    i15 = i17;
                    break;
                case 117:
                case 118:
                    Test.instanceCount -= Test.instanceCount;
                    break;
                }
            } while (++i16 < 89);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
