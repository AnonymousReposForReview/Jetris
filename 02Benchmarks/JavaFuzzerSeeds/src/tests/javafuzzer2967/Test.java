package tests.javafuzzer2967;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:02:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=195687453706144327L;
    public static float fFld=7.955F;
    public static short sFld=32509;
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.122308);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, int i10) {

        int i11=-98, i12=25074;
        double d1=2.91712;

        i9 -= i10;
        i10 -= -51073;
        for (i11 = 11; i11 < 199; i11++) {
            i10 += i9;
        }
        i12 += (int)d1;
        vMeth_check_sum += i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1);
    }

    public static int iMeth1(long l) {

        int i6=55, i7=-137, i8=-63, i13=-6, i14=3, i15=-5, i16=34, i17=37, i18=6, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -41733);

        for (i6 = 8; 149 > i6; ++i6) {
            i7 = ((i7 *= (232 - (i6 / 184))) - i8);
            vMeth(i8, i6);
        }
        for (i13 = 12; i13 < 209; ++i13) {
            iArr1[i13 + 1] = (int)4016719239L;
            iArr1[i13] <<= 191;
            i14 += (i13 * i13);
        }
        for (i15 = 2; i15 < 178; i15++) {
            float f=1.742F;
            iArr1[i15 - 1] >>= -152;
            f = i13;
        }
        i14 <<= -17326;
        for (i17 = 14; i17 < 247; i17++) {
            i7 += (i17 | i6);
            Test.fFld -= 5L;
        }
        Test.sFld = (short)i7;
        long meth_res = l + i6 + i7 + i8 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5) {

        boolean b=true;
        int i19=201, i20=-185, i21=-59, i22=-14, i23=7, i24=35922, i25=238;

        b = ((i4 + -14906) != iMeth1(Test.instanceCount));
        i4 -= i4;
        Test.fFld = (float)-116.87815;
        for (i19 = 190; i19 > 5; i19 -= 2) {
            for (i21 = 1; i21 < 17; i21++) {
                switch (((i22 >>> 1) % 1) + 67) {
                case 67:
                    i20 >>= i19;
                default:
                    i20 >>= 44247;
                    for (i23 = 1; i23 < 2; i23++) {
                        i24 <<= (int)12L;
                        i4 = i4;
                        Test.fFld = Test.fFld;
                        Test.instanceCount += i23;
                        i25 *= i20;
                        Test.dArrFld[i23] -= i5;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + (b ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + i25;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50999, i1=30373, i2=162, i3=-9, i27=9, i28=-119, i29=27456, i30=67, i31=6, iArr[]=new int[N];
        boolean b1=true;
        byte by=-67;
        double d2=95.11374;

        FuzzerUtils.init(iArr, -18702);

        for (i = 7; i < 188; i++) {
            for (i2 = 139; i2 > 7; i2--) {
                i3 = (i3 * (iArr[i2 - 1]--));
                Test.instanceCount = iMeth(i1, 25080);
                lArrFld = lArrFld;
                Test.instanceCount += Test.sFld;
                Test.instanceCount -= i;
                i1 += -12861;
                if (b1) continue;
            }
            Test.fFld += ((long)i | (long)i2);
            lArrFld[i + 1] -= i3;
            Test.instanceCount += (i * i);
            i1 += i;
            i1 = i2;
            Test.sFld += Test.sFld;
            try {
                i3 = (i3 % 6096);
                i3 = (i2 / -34824);
                i1 = (i2 / 53140);
            } catch (ArithmeticException a_e) {}
            i27 = 1;
            while (++i27 < 139) {
                Test.instanceCount += Test.instanceCount;
                switch (((-40491 >>> 1) % 2) + 8) {
                case 8:
                    for (i28 = 1; 1 > i28; ++i28) {
                        b1 = b1;
                        lArrFld[i + 1] >>>= i29;
                        by += (byte)(i28 * Test.fFld);
                        Test.instanceCount += i28;
                    }
                    switch ((i % 7) + 52) {
                    case 52:
                        for (i30 = 1; 1 > i30; ++i30) {
                            i3 += (((i30 * i1) + i3) - Test.instanceCount);
                            b1 = b1;
                            d2 %= (i28 | 1);
                            Test.instanceCount -= Test.instanceCount;
                        }
                        break;
                    case 53:
                        if (b1) break;
                        break;
                    case 54:
                        by += (byte)Test.instanceCount;
                    case 55:
                        i31 += (i27 + i31);
                        break;
                    case 56:
                        try {
                            i31 = (i2 % iArr[i + 1]);
                            i3 = (i / -6494);
                            i1 = (17319 % i30);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 57:
                    case 58:
                        i3 += i27;
                        break;
                    }
                    break;
                case 9:
                    d2 *= -1430942081L;
                default:
                    Test.instanceCount *= Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
