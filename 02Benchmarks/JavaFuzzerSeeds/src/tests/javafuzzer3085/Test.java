package tests.javafuzzer3085;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:34:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3972677189L;
    public static volatile int iFld=-216;
    public boolean bFld=true;
    public static volatile double dFld=-100.84371;
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2, double d1, float f1) {

        int i5=18343, i6=-33031, i7=-96, i8=-11;
        byte by=124;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.115F);

        if (b1) {
            f1 -= Test.iFld;
            for (float f2 : fArr) {
                Test.iFld = (int)Test.instanceCount;
                for (i5 = 1; i5 < 4; ++i5) {
                    for (i7 = i5; i7 < 2; ++i7) {
                        by = (byte)Test.instanceCount;
                        f1 = i6;
                        b1 = b1;
                        d1 = Test.instanceCount;
                    }
                    switch (((i5 % 2) * 5) + 38) {
                    case 41:
                        f1 += (47483 + (i5 * i5));
                        f2 += (-111 + (i5 * i5));
                        l2 = Test.instanceCount;
                    case 46:
                        if (b1) continue;
                    }
                }
            }
        }
        vMeth_check_sum += l2 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + by + (b1 ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth() {

        int i4=187, i9=25526, i10=17237, i11=35, iArr1[]=new int[N];
        double d2=0.61865, dArr[]=new double[N];
        float f3=-56.1009F;
        byte by1=104;
        long l3=46931L;

        FuzzerUtils.init(dArr, 98.19656);
        FuzzerUtils.init(iArr1, 73);

        i4 = 260;
        do {
            boolean b=true;
            if (b) continue;
            Test.instanceCount = (long)Math.sqrt(dArr[i4 - 1]);
            Test.instanceCount += (((i4 * i4) + i4) - Test.instanceCount);
            vMeth(Test.instanceCount, d2, f3);
        } while ((i4 -= 2) > 0);
        for (i9 = 4; i9 < 135; ++i9) {
            Test.instanceCount = Test.instanceCount;
        }
        Test.iFld -= i10;
        Test.iFld *= (int)Test.instanceCount;
        iArr1[(i9 >>> 1) % N] = by1;
        i11 = 1;
        do {
            l3 = 1;
            do {
                iArr1[i11] -= 22;
                Test.iFld += (int)8L;
                f3 += i10;
            } while (++l3 < 9);
        } while (++i11 < 172);
        long meth_res = i4 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i9 + i10 + by1 + i11 + l3 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(long l, int i3, long l1) {


        i3 -= ((-byMeth()) - 63);
        long meth_res = l + i3 + l1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=47341, i2=5, i12=-3, i13=29031, i14=58705, i15=-52190, i16=-18673, iArr[]=new int[N];
        double d=-35.66072;
        short s=-28330;
        float f=2.185F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr, 1L);

        i = 1;
        while (++i < 151) {
            for (d = 5; d < 166; d++) {
                switch ((int)(((d % 9) * 5) + 22)) {
                case 54:
                    i1 -= (int)(((s + i1) + (--i1)) + ((Test.instanceCount + f) + (-(0.36118 * iArr[i - 1]))));
                    i2 += s;
                    i2 = ((--i1) * -10);
                    iArr[(int)(d)] = Short.reverseBytes((short)(-21483));
                    break;
                case 31:
                    iArr[(int)(d)] -= (iMeth(Test.instanceCount, i1, Test.instanceCount) - 1);
                    if (bFld) {
                        i12 *= i2;
                        Test.iFld = (int)-7827384200984535760L;
                    } else {
                        for (i13 = 1; i13 < 2; i13++) {
                            i2 += (i13 * i13);
                            Test.instanceCount -= Test.instanceCount;
                            iArr[i + 1] += i12;
                            i1 += i13;
                            try {
                                i12 = (i12 / i13);
                                iArr[i] = (i12 % i12);
                                iArr[(int)(d)] = (i14 % 5);
                            } catch (ArithmeticException a_e) {}
                            i2 += i13;
                            Test.iFld *= (int)Test.instanceCount;
                            Test.instanceCount += (i13 * i13);
                            Test.dFld = Test.iFld;
                        }
                        for (i15 = 1; i15 < 2; ++i15) {
                            i16 = i12;
                            bFld = bFld;
                            lArr[i] = i13;
                            i14 = i2;
                            lArr[(int)(d)] = Test.instanceCount;
                            i16 >>>= -14;
                            iArr[i + 1] &= (int)Test.instanceCount;
                            i12 = i13;
                        }
                    }
                    break;
                case 28:
                case 36:
                    i2 = (int)Test.instanceCount;
                    break;
                case 48:
                    try {
                        i16 = (iArr[(int)(d)] % 664705556);
                        iArr[(int)(d)] = (-14790 % i1);
                        i16 = (i12 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 52:
                    iArr[(i16 >>> 1) % N] = i15;
                    break;
                case 34:
                    fArrFld[(int)(d)] -= f;
                    break;
                case 37:
                    iArr[(int)(d + 1)] += -63;
                    break;
                case 32:
                    lArr[(int)(d)] += i15;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
