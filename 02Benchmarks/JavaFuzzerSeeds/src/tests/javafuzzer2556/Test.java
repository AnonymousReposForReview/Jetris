package tests.javafuzzer2556;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:28:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static volatile boolean bFld=true;
    public static int iFld=95;
    public float fFld=-2.97F;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.iArrFld1, -11);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3) {

        int i4=-5, i5=47722, i6=245, iArr[]=new int[N];
        float f1=1.67F;
        short s=-4216;
        byte by1=-110;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 226);
        FuzzerUtils.init(lArr, -57718L);

        for (i4 = 1; 327 > i4; ++i4) {
            i3 *= Test.iFld;
            i5 ^= Test.iFld;
            Test.instanceCount *= i5;
            iArr[i4] *= i3;
            i3 = (int)f1;
            s >>= (short)i3;
            i3 = by1;
            i5 += (i4 ^ s);
            i3 += (((i4 * Test.instanceCount) + i3) - by1);
            try {
                iArr[i4 - 1] = (i4 % -51546);
                Test.iFld = (iArr[i4 - 1] / -11);
                i3 = (i5 / -85);
            } catch (ArithmeticException a_e) {}
        }
        i6 = 1;
        while (++i6 < 339) {
            lArr = lArr;
            s += (short)(i6 * i6);
            Test.instanceCount >>>= i3;
        }
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f1) + s + by1 + i6 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(byte by, long l) {


        Test.iFld *= sMeth(Test.iFld);
        long meth_res = by + l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=-14, i2=13, i7=11, i8=221, i9=-21929, i10=36324;
        float f=-2.739F;
        double d=-2.4264, dArr[]=new double[N];
        short s1=24103, sArr[]=new short[N];
        long l1=291153063476178328L, lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)-27415);
        FuzzerUtils.init(dArr, 127.1759);
        FuzzerUtils.init(lArr1, -22103L);

        for (i1 = 14; i1 < 292; ++i1) {
            if (Test.bFld) {
                sArr[i1] &= (short)(i1 + ((16106 + (i++)) - (Test.instanceCount + Test.instanceCount)));
                f = (i2--);
            } else {
                i -= (iMeth((byte)(14), Test.instanceCount) - -3);
                for (i7 = 1; i7 < 6; i7++) {
                    d -= s1;
                    dArr[i7 + 1] -= i;
                    i8 += (i7 | i1);
                    Test.iArrFld[i7] -= (int)Test.instanceCount;
                    for (l1 = 1; l1 < 2; l1++) {
                        switch ((i7 % 9) + 101) {
                        case 101:
                            if (Test.iFld != 0) {
                                vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i7 + i8 +
                                    Double.doubleToLongBits(d) + s1 + l1 + i9 + i10 + FuzzerUtils.checkSum(sArr) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            i2 = (int)l1;
                            dArr[i7] = l1;
                            break;
                        case 102:
                            f -= -152;
                            break;
                        case 103:
                            Test.iFld *= (int)Test.instanceCount;
                        case 104:
                            lArr1[(int)(l1)] = i1;
                            break;
                        case 105:
                            i9 += Test.iFld;
                        case 106:
                            lArr1[i1] -= (long)-70.76914;
                        case 107:
                            i = -43;
                        case 108:
                            Test.iFld *= i9;
                            break;
                        case 109:
                            i10 += i9;
                            break;
                        default:
                            Test.instanceCount += (((l1 * i1) + f) - Test.iFld);
                        }
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i7 + i8 + Double.doubleToLongBits(d) + s1 + l1 + i9
            + i10 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i11=43165, i12=-164, i13=12, i14=2, i15=2, i16=132, i17=198, iArr1[][]=new int[N][N];
        short s2=8438;
        byte by2=59;
        long l2=62648L;

        FuzzerUtils.init(iArr1, 1);

        vMeth(12);
        i11 = 270;
        while ((i11 -= 3) > 0) {
            Test.instanceCount += (((i11 * Test.iFld) + i11) - s2);
            Test.iFld += (((i11 * Test.iFld) + Test.iFld) - by2);
            if (Test.bFld) {
                Test.iFld += (int)(11L + (i11 * i11));
                Test.iFld = 160;
                for (i12 = 1; i12 < 278; ++i12) {
                    i13 += i12;
                    Test.instanceCount += i12;
                    Test.instanceCount = Test.iFld;
                    i13 = i11;
                }
                Test.instanceCount += (((i11 * Test.iFld) + fFld) - Test.iFld);
            }
        }
        i13 <<= 4;
        Test.instanceCount += i13;
        for (i14 = 4; i14 < 215; i14++) {
            i13 -= (int)2.709F;
            i15 >>= i12;
            i15 += i14;
            iArr1 = Test.iArrFld1;
            Test.iFld -= -5;
            Test.iFld += (((i14 * Test.instanceCount) + Test.iFld) - i15);
            Test.iFld -= i14;
            i16 = 1;
            while (++i16 < 119) {
                Test.iFld += i16;
            }
        }
        Test.iArrFld[(i16 >>> 1) % N] = 40290;
        Test.iArrFld1[(33 >>> 1) % N][(i12 >>> 1) % N] = Test.iFld;
        for (l2 = 8; l2 < 386; l2++) {
            i13 %= (int)(Test.iFld | 1);
            i17 = i12;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
