package tests.javafuzzer1420;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:09:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2645377693L;
    public int iFld=-21;
    public static short sFld=-11511;
    public boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.lArrFld, -9L);
        FuzzerUtils.init(Test.dArrFld, -2.49321);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i6=-57867, i7=87, i8=246, i9=214, i10=201, i11=2609, iArr[]=new int[N];
        float f=91.954F, f1=78.169F, f2=4.615F;
        double d1=2.51317;

        FuzzerUtils.init(iArr, 251);

        i6 >>>= i6;
        iArr[(i6 >>> 1) % N] -= (int)f;
        for (f1 = 16; f1 < 315; ++f1) {
            for (f2 = 1; 6 > f2; ++f2) {
                Test.instanceCount *= (long)d1;
                Test.instanceCount *= (long)f2;
            }
            i9 = 1;
            do {
                iArr[i9 + 1] -= i6;
                i6 = 1;
                d1 += i7;
                i6 += i6;
            } while (++i9 < 6);
            i7 = i8;
            for (i10 = 1; i10 < 6; ++i10) {
                f = i10;
            }
        }
        Test.instanceCount = Test.sFld;
        vMeth2_check_sum += i6 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i7 + Float.floatToIntBits(f2) +
            i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i4=-7, i5=24, i12=45801, i13=-6, i14=26974;
        boolean b=true;
        float f3=-1.55F;
        byte by=-14;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2121029635L);

        i4 = 236;
        while (--i4 > 0) {
            i5 = 1;
            while (++i5 < 7) {
                vMeth2();
                i12 += (((i5 * i4) + i5) - i12);
                try {
                    i12 = (i12 % i12);
                    i12 = (i12 / 14);
                    i12 = (Test.iArrFld[i4 + 1] / -1);
                } catch (ArithmeticException a_e) {}
                if (i5 != 0) {
                    vMeth1_check_sum += i4 + i5 + i12 + i13 + i14 + (b ? 1 : 0) + Float.floatToIntBits(f3) + by +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
                for (i13 = 1; 1 < i13; i13--) {
                    i14 -= i4;
                    Test.iArrFld[i13 - 1] |= (int)4718132799642594307L;
                    lArr[i5] <<= i5;
                    b = b;
                    i14 -= i14;
                    f3 -= f3;
                    f3 = 4;
                    i14 += by;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i12 + i13 + i14 + (b ? 1 : 0) + Float.floatToIntBits(f3) + by +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(double d, int i2, int i3) {

        int i15=-38352, i16=-9, i17=4, i18=-10;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.2522);

        vMeth1();
        i15 = 1;
        do {
            for (i16 = 1; i16 < 14; ++i16) {
                i17 = i3;
                Test.instanceCount -= i18;
                dArr[i15 + 1] = Test.instanceCount;
                i17 += (((i16 * Test.instanceCount) + i15) - i3);
                i2 *= (int)1.18975;
                i3 = i16;
                Test.lArrFld[i15 - 1] >>= i18;
                Test.instanceCount -= Test.instanceCount;
            }
            d -= -8265L;
        } while ((i15 += 3) < 338);
        Test.instanceCount *= Test.instanceCount;
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-91, i1=0, i20=-69, i21=-3, i22=-8, i23=45280, i24=51390, i25=-182;
        double d2=0.62935;
        float f4=0.737F;
        boolean b1=true;

        bArrFld[(-68 >>> 1) % N] = (((iFld - 148) + Test.instanceCount) != i);
        i1 = 1;
        do {
            vMeth(d2, 7, i);
            Test.instanceCount += i;
            Test.iArrFld[i1 - 1] = 78;
            Test.iArrFld[i1 + 1] += (int)f4;
            for (i20 = 132; i20 > 3; i20 -= 3) {
                iFld = i20;
                d2 = 249;
                Test.sFld = (short)i1;
                Test.lArrFld[i1] >>= -33080;
                if (false) break;
                Test.instanceCount += (i20 | i20);
                iFld += (i20 * i20);
                Test.iArrFld[i1] = 18845;
            }
        } while (++i1 < 190);
        for (i22 = 3; i22 < 293; i22++) {
            iFld += i22;
            Test.iArrFld[i22 + 1] = i1;
            i *= -13;
            if (b1) {
                iFld *= iFld;
                i23 += (i22 * Test.instanceCount);
            } else if (b1) {
                d2 -= 49L;
                iFld *= iFld;
                for (i24 = 5; i24 < 87; ++i24) {
                    f4 += ((long)i24 ^ (long)f4);
                    Test.sFld += (short)(((i24 * Test.instanceCount) + i1) - i20);
                    Test.iArrFld[i24 - 1] >>>= iFld;
                    d2 = 191;
                    f4 += 7177635320336472737L;
                }
            } else {
                Test.instanceCount <<= 45216;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
