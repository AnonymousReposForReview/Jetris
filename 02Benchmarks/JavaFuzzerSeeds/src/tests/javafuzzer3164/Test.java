package tests.javafuzzer3164;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:07:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-64492L;
    public static double dFld=-53.65230;
    public static int iFld=-187;
    public static float fFld=-1.885F;
    public boolean bFld=false;
    public byte byFld=-35;
    public static float fArrFld[]=new float[N];
    public static volatile boolean bArrFld[]=new boolean[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 48.892F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, int i3) {

        float f=56.76F;
        int i4=1, i5=-2, i7=40, i8=-7, i9=9, iArr[]=new int[N];
        byte by=-29;

        FuzzerUtils.init(iArr, 112);

        f = Test.iFld;
        for (i4 = 9; i4 < 145; ++i4) {
            iArr[i4] = i4;
            iArr[i4] -= i3;
            i3 *= (int)Test.instanceCount;
            i5 += (((i4 * Test.instanceCount) + i2) - by);
            Test.instanceCount += (((i4 * i2) + i4) - Test.instanceCount);
            iArr[i4] *= (int)Test.instanceCount;
            if (true) continue;
            iArr[i4] >>>= i2;
            for (i7 = 1; i7 < 12; ++i7) {
                i8 = i4;
                i9 = 1;
                while (++i9 < 2) {
                    if (i4 != 0) {
                        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + by + i7 + i8 + i9 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    f = i4;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + by + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        float f1=0.419F, f2=39.620F;
        int i10=-143, i11=167, i12=3, i13=-5, i14=45435;
        boolean b=true;
        byte by1=-127;

        vMeth(Test.iFld, Test.iFld);
        for (f1 = 22; f1 < 372; ++f1) {
            for (i11 = 5; i11 > 1; i11--) {
                i13 = 2;
                do {
                    f2 += -213;
                    if (b) continue;
                    i14 *= (int)f1;
                    Test.dFld += Test.instanceCount;
                    by1 -= (byte)i14;
                    f2 -= i13;
                } while ((i13 -= 2) > 0);
                i10 -= i11;
                f2 = i12;
                Test.iFld = Test.iFld;
                i10 += (((i11 * i13) + i11) - Test.instanceCount);
                i10 += (i11 - i11);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i14
            + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        float f3=27.317F;
        int i15=25344, i16=-168, i17=-236, iArr1[]=new int[N];
        short s=17247, sArr[]=new short[N];
        boolean b1=false;
        byte by2=-88, byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 48103);
        FuzzerUtils.init(byArr, (byte)-80);
        FuzzerUtils.init(sArr, (short)14903);

        Test.instanceCount >>>= (long)((Test.dFld++) - ((Test.fArrFld[(Test.iFld >>> 1) % N]++) + iMeth()));
        for (f3 = 9; f3 < 218; f3++) {
            s += (short)(((f3 * s) + Test.iFld) - Test.instanceCount);
            Test.instanceCount += (long)(-116.756F + (f3 * f3));
        }
        for (i16 = 1; i16 < 397; ++i16) {
            Test.fFld *= -29127;
            try {
                i15 = (i16 % i17);
                i17 = (7182 / i16);
                iArr1[i16 - 1] = (i17 / 54625);
            } catch (ArithmeticException a_e) {}
            iArr1[i16 - 1] += i16;
            iArr1[i16 + 1] *= i15;
            byArr[i16] -= (byte)i17;
            if (b1) continue;
            sArr[i16 + 1] *= by2;
        }
        Test.bArrFld[(-151 >>> 1) % N] = true;
        i17 = i16;
        Test.iFld ^= i16;
        long meth_res = Float.floatToIntBits(f3) + i15 + s + i16 + i17 + (b1 ? 1 : 0) + by2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-42953, i1=-167, i18=43206, i19=-14, i20=236, i21=56, i22=6, iArr2[]=new int[N];
        double d=27.49852;

        FuzzerUtils.init(iArr2, -14);

        for (i = 10; 234 > i; i++) {
            i1 += (int)Test.instanceCount;
        }
        switch ((((i1 >>> 1) % 4) * 5) + 83) {
        case 102:
            d = (((--i1) - (i1 + i)) * (i1--));
            i1 >>= (int)(-fMeth());
            for (long l : lArrFld) {
                switch (((i >>> 1) % 2) + 61) {
                case 61:
                    Test.fFld = i1;
                    Test.fArrFld[(i1 >>> 1) % N] = i;
                    i1 = i;
                    Test.instanceCount = l;
                    break;
                case 62:
                default:
                    bFld = bFld;
                    for (i18 = 2; i18 < 63; i18++) {
                        d *= l;
                        iArr2[i18] <<= (int)Test.instanceCount;
                        Test.fFld = i19;
                    }
                }
                Test.instanceCount -= i;
                for (i20 = 3; i20 < 63; i20++) {
                    short s1=-27619;
                    Test.fArrFld[i20 + 1] -= i21;
                    Test.instanceCount >>= s1;
                    s1 -= (short)-40312;
                    l += i19;
                    i19 = byFld;
                    iArr2[i20] = i21;
                    i22 = 1;
                    do {
                        Test.instanceCount += i22;
                        i21 -= i;
                        Test.iFld += (int)d;
                        i19 += (((i22 * i20) + i22) - i21);
                        s1 = (short)i19;
                    } while (++i22 < 2);
                }
            }
            break;
        case 97:
            Test.instanceCount = i21;
            break;
        case 86:
            Test.fArrFld = Test.fArrFld;
            break;
        case 99:
            Test.fFld *= i;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
