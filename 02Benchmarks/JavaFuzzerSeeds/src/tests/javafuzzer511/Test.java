package tests.javafuzzer511;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:57:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2875624080533133470L;
    public static double dFld=0.62000;
    public static boolean bFld=false;
    public static short sFld=-14907;
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -4167024624L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, float f2, long l1) {

        int i6=7, i7=0, i8=41370, i9=-58395, i10=14, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(fArr, -2.794F);

        Test.instanceCount = -61331;
        for (i6 = 4; i6 < 135; i6++) {
            iArr[i6 - 1] += (int)l1;
            Test.dFld = 9;
            i7 = -161;
            switch (((i6 % 1) * 5) + 118) {
            case 119:
                Test.instanceCount *= i5;
                break;
            default:
                for (i8 = 1; i8 < 12; ++i8) {
                    i9 *= (int)Test.instanceCount;
                    if (i8 != 0) {
                        vMeth2_check_sum += i5 + Float.floatToIntBits(f2) + l1 + i6 + i7 + i8 + i9 + i10 +
                            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    i5 >>>= i7;
                    i10 = 1;
                    while (++i10 < 2) {
                        fArr[i8 - 1] -= i6;
                    }
                    i5 = -39079;
                    i9 >>>= i8;
                }
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f2) + l1 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d, int i3, float f1) {

        int i4=-48058, i11=-81, i12=43555, i13=-11, i14=-144, i15=-4, i16=42, iArr1[]=new int[N];
        byte by=113;
        short s=20205;

        FuzzerUtils.init(iArr1, 35);

        i3 *= (i3--);
        Test.instanceCount *= (-15833 - (++Test.lArrFld1[(i3 >>> 1) % N]));
        i4 = 1;
        while (++i4 < 317) {
            f1 %= (((-i3) - (i4 * by)) | 1);
            vMeth2(i4, f1, Test.instanceCount);
            for (i11 = 1; i11 < 5; ++i11) {
                i12 = i12;
                i3 += i11;
                Test.instanceCount >>= i12;
            }
            for (i13 = 1; i13 < 5; ++i13) {
                for (i15 = 1; i15 < 2; ++i15) {
                    iArr1[i13 + 1] += (int)12L;
                    if (i12 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f1) + i4 + by + i11
                            + i12 + i13 + i14 + i15 + i16 + s + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i14 = (int)219L;
                    s *= (short)i12;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f1) + i4 + by + i11 + i12 + i13 +
            i14 + i15 + i16 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, float f, int i2) {

        int i17=187, i18=50, i19=1, i20=-12354, i21=-184, i22=93, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -4);

        vMeth1(Test.dFld, 221, f);
        Test.bFld = Test.bFld;
        for (i17 = 2; i17 < 340; i17++) {
            i18 += (i17 * i17);
            for (i19 = i17; i19 < 5; ++i19) {
                switch (((i2 >>> 1) % 3) + 74) {
                case 74:
                    for (i21 = 1; i21 < 1; ++i21) {
                        int i23=24;
                        f = -45550L;
                        if (Test.bFld) continue;
                        i20 -= -11;
                        try {
                            i2 = (i17 % i2);
                            i2 = (iArr2[i19 - 1] / iArr2[i19 + 1]);
                            i22 = (90 / i17);
                        } catch (ArithmeticException a_e) {}
                        i18 += (i21 * i21);
                        i22 >>>= i23;
                        i18 = (int)1169910475L;
                        Test.dFld -= l;
                    }
                    break;
                case 75:
                    i2 -= i20;
                    break;
                case 76:
                    i2 -= (int)f;
                    break;
                default:
                    if (i22 != 0) {
                        vMeth_check_sum += l + Float.floatToIntBits(f) + i2 + i17 + i18 + i19 + i20 + i21 + i22 +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i2 + i17 + i18 + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=119, i1=23316, i24=227, i25=7, i26=14, i27=26366, i28=26455, i29=30276, i30=-31971, i31=236, iArr3[]=new
            int[N];
        float f3=1.287F, f4=2.40F;
        byte by1=-72;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.12790);
        FuzzerUtils.init(iArr3, 239);

        for (i = 1; i < 158; i++) {
            lArrFld = lArrFld;
            vMeth(Test.instanceCount, f3, i);
            Test.instanceCount <<= -7;
            i1 = (int)Test.instanceCount;
            dArr[i + 1] = i1;
            for (i24 = 7; 160 > i24; i24++) {
                i1 += (((i24 * i) + Test.instanceCount) - Test.instanceCount);
                Test.instanceCount <<= i1;
            }
        }
        i25 += i25;
        for (i26 = 6; i26 < 354; ++i26) {
            f3 += f3;
            Test.instanceCount -= i24;
        }
        for (long l2 : Test.lArrFld1) {
            i27 *= (int)f3;
            Test.instanceCount <<= Test.instanceCount;
        }
        iArr3[(i >>> 1) % N] <<= i25;
        i28 = 1;
        do {
            i29 = 1;
            while (++i29 < 67) {
                i30 = 1;
                while (--i30 > 0) {
                    if (Test.bFld) continue;
                    i1 *= (int)f3;
                    Test.sFld &= by1;
                    try {
                        i27 = (i25 / -43614);
                        i1 = (i25 / -80);
                        i25 = (i24 / -39696);
                    } catch (ArithmeticException a_e) {}
                }
                for (f4 = 1; f4 < 1; ++f4) {
                    i25 += i28;
                    Test.lArrFld1[i28] ^= i25;
                    i27 += i;
                }
                i1 += -98;
                i1 -= i26;
            }
        } while (++i28 < 377);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
