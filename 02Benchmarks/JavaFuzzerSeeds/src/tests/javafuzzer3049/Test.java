package tests.javafuzzer3049;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:19:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-31698L;
    public static volatile boolean bFld=true;
    public int iFld=-7;
    public double dFld=-87.82480;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=56697, i6=-15274, i7=-81, i8=-30701, i9=10;
        float f=-85.169F;
        double d=-15.79553;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3504128476L);

        for (i5 = 8; 229 > i5; ++i5) {
            i4 -= (int)Test.instanceCount;
            i7 = 1;
            do {
                i6 >>= i4;
                Test.instanceCount *= (long)f;
                for (i8 = 1; i8 < 1; i8++) {
                    Test.iArrFld[(i7 >>> 1) % N] += (int)f;
                    f = -30915;
                    Test.bFld = Test.bFld;
                    if (false) break;
                    i6 += (i8 - i5);
                    i6 += (i8 + i8);
                }
                i9 += i7;
                lArr[i7 - 1] *= (long)d;
                Test.iArrFld[i7 - 1] += (int)Test.instanceCount;
            } while (++i7 < 7);
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1) {

        int i2=-4, i3=7561, i10=-116, i11=63, i12=53130, i13=-31, i14=-54724;
        float f1=50.42F, f2=0.164F;
        double d1=2.93068;
        long lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, -4835857161344407041L);
        FuzzerUtils.init(byArr, (byte)-101);

        for (i2 = 11; i2 < 179; i2++) {
            vMeth1(i3);
            for (i10 = 1; i10 < 9; i10++) {
                try {
                    i1 = (-37261 / i2);
                    i11 = (Test.iArrFld[i10] % -59390);
                    i3 = (-53695 % i11);
                } catch (ArithmeticException a_e) {}
                for (i12 = 1; i12 < 2; ++i12) {
                    f1 -= i2;
                }
                i1 += (int)Test.instanceCount;
                lArr1[i2] = i12;
                Test.iArrFld[i10] = i13;
                for (f2 = i10; 2 > f2; f2++) {
                    i3 += (int)d1;
                    Test.instanceCount -= i10;
                    i14 >>= i1;
                    i14 = i10;
                    byArr[(int)(f2 + 1)] = (byte)2;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) +
            i14 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(int i) {


        vMeth(i);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i15=58452, i16=-132, i17=-22, i18=-110, i19=53, i20=7, i21=-13087;
        short s=32732, sArr[]=new short[N];
        float f3=-65.912F;
        byte by=93;
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)-23701);
        FuzzerUtils.init(lArr2, 51017L);

        for (int smallinvoc=0; smallinvoc<588; smallinvoc++) vSmallMeth(64429);
        iFld += iFld;
        i15 = 1;
        do {
            iFld *= i15;
            dFld = 14;
            iFld += i15;
            iFld -= -149;
            iFld += (i15 * i15);
            sArr[i15 + 1] += (short)iFld;
            for (i16 = 6; i16 < 120; i16++) {
                s -= (short)i17;
                for (i18 = i15; 2 > i18; ++i18) {
                    dFld = i19;
                    switch ((i16 % 1) + 7) {
                    case 7:
                        i17 ^= s;
                        break;
                    default:
                        i19 -= i18;
                    }
                    iFld = i18;
                }
                Test.instanceCount *= s;
                i17 = 1;
                iFld = i17;
                i17 -= (int)Test.instanceCount;
                switch ((i15 % 3) + 33) {
                case 33:
                    i19 -= (int)dFld;
                    for (i20 = 1; i20 < 2; i20++) {
                        i17 ^= i16;
                        f3 += (((i20 * i21) + i20) - i18);
                        i21 *= i16;
                        i19 *= by;
                        i17 += (i20 + i17);
                        if (Test.bFld) continue;
                    }
                    break;
                case 34:
                    Test.iArrFld[i16] += (int)-69.22471;
                    break;
                case 35:
                    Test.instanceCount = -45834;
                default:
                    lArr2[i16] = by;
                }
            }
        } while (++i15 < 210);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
