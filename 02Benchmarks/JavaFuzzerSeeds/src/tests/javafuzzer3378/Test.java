package tests.javafuzzer3378;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:52:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=-11;
    public static boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5) {

        int i6=-9, i7=63, i8=44263, i9=0, i10=8213, i11=-230, iArr1[][]=new int[N][N];
        double d=0.117967;
        float f=-116.4F, fArr[]=new float[N];
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 111.186F);
        FuzzerUtils.init(iArr1, 8);
        FuzzerUtils.init(lArr1, 975375138638207655L);

        i5 += 36446;
        for (i6 = 13; i6 < 278; ++i6) {
            i7 = i7;
            fArr[i6] *= i6;
            d *= i7;
            try {
                Test.iFld = (82 % Test.iFld);
                iArr1[i6 + 1][i6] = (-876015538 % i5);
                i7 = (i5 / 91);
            } catch (ArithmeticException a_e) {}
            for (i8 = 1; 6 > i8; i8++) {
                for (i10 = 1; i10 < 2; ++i10) {
                    f += (((i10 * Test.iFld) + Test.instanceCount) - f);
                    i5 += i10;
                    i5 = (int)Test.instanceCount;
                    Test.instanceCount *= i10;
                    if (b) break;
                    Test.instanceCount = Test.iFld;
                    lArr1[i8] >>= Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth() {

        int i12=-231, i13=14, i14=-195, i15=178, i16=-129, i17=38248, i18=-4, iArr[]=new int[N];
        double d1=0.7703;
        short s=32229;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 45595);
        FuzzerUtils.init(lArr2, -27725L);

        Test.iFld += (++iArr[(-100 >>> 1) % N]);
        vMeth1(i12);
        for (i13 = 19; 334 > i13; ++i13) {
            i14 %= (int)((long)(d1) | 1);
            iArr[(Test.iFld >>> 1) % N] += 197;
            for (i15 = 1; i15 < 5; i15++) {
                iArr[i15] = (int)Test.instanceCount;
                Test.iFld = (int)Test.instanceCount;
                for (i17 = 2; i17 > 1; i17 -= 3) {
                    Test.instanceCount <<= i18;
                    lArr2[i13] <<= s;
                    i12 += (((i17 * i16) + i17) - Test.iFld);
                    Test.instanceCount -= Test.instanceCount;
                    i14 <<= i14;
                    i16 -= i17;
                }
            }
        }
        long meth_res = i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i, long l, int i1) {

        int i2=-50, i3=-3, i4=195, i19=-56;
        double d2=-1.83895;
        byte by=70, byArr[]=new byte[N];
        float f1=1.77F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -720408189L);
        FuzzerUtils.init(byArr, (byte)10);

        i2 = 1;
        do {
            if (((lArr[i2 - 1]--) + (++i)) != (--lArr[i2 + 1])) break;
            for (i3 = 1; i3 < 7; ++i3) {
                i = (int)(fMeth() + d2);
                by -= (byte)528254703L;
                i -= i2;
                i4 >>= i2;
                i19 = 1;
                do {
                    byArr = byArr;
                    Test.iFld += i19;
                    Test.instanceCount -= (long)f1;
                    if (b1) continue;
                    l = i3;
                    Test.iFld = Test.iFld;
                    i = Test.iFld;
                } while (++i19 < 2);
            }
        } while (++i2 < 216);
        vMeth_check_sum += i + l + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d2) + by + i19 +
            Float.floatToIntBits(f1) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-6838, i21=-133, i22=-6, i23=31216, i24=-26284, i25=-49633, i26=43753, iArr2[]=new int[N];
        byte by1=81;
        float f2=-49.222F;
        double d3=-121.32593;
        long lArr3[]=new long[N];

        FuzzerUtils.init(iArr2, -48692);
        FuzzerUtils.init(lArr3, -5345495933986492294L);

        vMeth(Test.iFld, Test.instanceCount, Test.iFld);
        Test.iFld %= (int)(Test.instanceCount | 1);
        for (i20 = 1; i20 < 158; i20++) {
            for (i22 = 6; i22 < 160; ++i22) {
                Test.instanceCount = i20;
                by1 *= (byte)i21;
                i21 += i21;
                iArr2[i20] = i20;
                for (i24 = i20; i24 < 2; ++i24) {
                    i25 += (int)(-12549L + (i24 * i24));
                    f2 += Test.instanceCount;
                    i21 -= -238;
                    iArr2[i24] *= i22;
                    Test.instanceCount <<= i20;
                    i21 = i25;
                    f2 += i23;
                }
                i26 = 1;
                while (++i26 < 2) {
                    Test.instanceCount = 0;
                    i21 += i20;
                    switch ((i22 % 2) + 64) {
                    case 64:
                        i23 <<= i26;
                        i25 += (i26 * f2);
                        Test.bFld = false;
                        iArr2[i20 - 1] = i20;
                        break;
                    case 65:
                        i23 += (int)d3;
                        iArr2[i20] += (int)Test.instanceCount;
                        Test.instanceCount = -198;
                        break;
                    }
                    iArr2[(i23 >>> 1) % N] <<= i23;
                }
                Test.iFld += i22;
                lArr3 = lArr3;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
