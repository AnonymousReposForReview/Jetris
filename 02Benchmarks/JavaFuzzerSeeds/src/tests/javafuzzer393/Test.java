package tests.javafuzzer393;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:14:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1055309958909329555L;
    public static int iFld=-147;
    public static byte byFld=-76;
    public static boolean bFld=false;
    public static float fFld=0.152F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1) {

        int i10=-1, i11=-130, i12=113, i13=-65323, i14=191, i15=-207, iArr[]=new int[N];
        float f1=-117.293F;
        short s=18486;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(lArr, 13L);

        iArr = iArr;
        Test.instanceCount += -7;
        Test.iFld += Test.iFld;
        for (i10 = 7; i10 < 187; i10++) {
            i11 = i10;
            lArr[i10 + 1] += Test.instanceCount;
            for (i12 = 1; i12 < 9; i12++) {
                i13 -= (int)f1;
                for (i14 = 1; i14 < 2; i14 += 2) {
                    Test.byFld += (byte)(i14 - i11);
                    i15 -= i11;
                    Test.byFld = (byte)i13;
                    Test.instanceCount += s;
                }
                Test.iFld -= i14;
                Test.iFld -= i13;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15
            + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(double d, float f) {

        int i17=15, i18=4599, i19=139, i20=53536, iArr1[]=new int[N];
        short s1=5309;

        FuzzerUtils.init(iArr1, 16);

        vMeth2(d);
        Test.instanceCount -= Test.iFld;
        for (int i16 : iArr1) {
            Test.bFld = Test.bFld;
            for (i17 = 1; i17 < 4; i17++) {
                Test.instanceCount >>>= Test.iFld;
                i18 = i17;
                s1 |= (short)Test.instanceCount;
                i18 += (((i17 * s1) + i16) - i17);
            }
            i16 *= -7;
            iArr1[(i17 >>> 1) % N] %= (int)(Test.instanceCount | 1);
            i18 += i18;
            for (i19 = 1; i19 < 4; ++i19) {
                iArr1[(Test.iFld >>> 1) % N] += i20;
                Test.instanceCount *= -118;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i17 + i18 + s1 + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i2, int i3) {

        long l1=8520088513763435935L;
        int i4=36823, i5=-9, i6=-25, i7=-14, i8=-52636, i9=-14, i21=-14017, i22=-161, iArr2[]=new int[N];
        short s2=25840;

        FuzzerUtils.init(iArr2, 1);

        for (l1 = 11; l1 < 324; l1++) {
            i5 = i4;
        }
        for (i6 = 15; i6 < 252; i6++) {
            for (i8 = 1; 7 > i8; i8++) {
                i4 = ((--i3) * (-(i5++)));
                vMeth1(-2.116459, Test.fFld);
                iArr2[i6 + 1] |= Test.byFld;
                switch (((i6 % 2) * 5) + 69) {
                case 73:
                    Test.fFld = 1104883822773467731L;
                    switch ((i8 % 1) + 74) {
                    case 74:
                        s2 = (short)i2;
                        i7 *= (int)48L;
                    }
                    break;
                case 79:
                    for (i21 = 1; 2 > i21; i21++) {
                        i3 &= (int)l;
                        i7 >>= (int)3409556415288829497L;
                    }
                    break;
                default:
                    i5 += i8;
                }
            }
        }
        vMeth_check_sum += l + i2 + i3 + l1 + i4 + i5 + i6 + i7 + i8 + i9 + s2 + i21 + i22 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-111, i1=13, i23=9, i24=-47681, i25=46200, i26=9, i27=-13, iArr3[]=new int[N];
        float f2=2.693F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, 51933);
        FuzzerUtils.init(lArr1, -54118L);

        for (i = 11; i < 283; ++i) {
            Test.iFld *= (int)Test.instanceCount;
            Test.byFld += (byte)i;
            vMeth(-24L, i1, i);
            iArr3[i] = i1;
            Test.instanceCount *= (long)Test.fFld;
        }
        lArr1[(Test.iFld >>> 1) % N] |= -3;
        f2 = 1;
        do {
            for (i23 = 1; i23 < 136; i23++) {
                Test.iFld = (int)Test.fFld;
                Test.instanceCount += (((i23 * Test.instanceCount) + Test.iFld) - i1);
            }
            Test.iFld += (int)((long)f2 | i1);
            for (i25 = 8; 136 > i25; i25++) {
                i27 = 1;
                while (++i27 < 2) {
                    i26 <<= Test.byFld;
                    if (Test.bFld) continue;
                    Test.instanceCount = i26;
                    i26 -= (int)Test.instanceCount;
                    if (true) {
                        Test.iFld += i23;
                        if (Test.bFld) {
                            i26 -= (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            Test.instanceCount = i26;
                            i24 += i1;
                            Test.fFld += (((i27 * i26) + i26) - i);
                            Test.fFld += (i27 + i26);
                        } else {
                            Test.fFld = f2;
                            Test.iFld -= 0;
                            i1 |= i25;
                            Test.iFld *= (int)Test.instanceCount;
                        }
                    }
                }
            }
        } while (++f2 < 185);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
