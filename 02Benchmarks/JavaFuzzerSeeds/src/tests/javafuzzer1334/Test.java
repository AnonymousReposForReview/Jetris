package tests.javafuzzer1334;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3978354500L;
    public double dFld=1.21096;
    public static float fFld=1.320F;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i6, int i7, int i8) {

        int i9=29303, i10=-24064, i11=138, i12=-244, iArr1[]=new int[N];
        float f=0.874F, fArr[]=new float[N];
        byte by=126;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -42247);
        FuzzerUtils.init(fArr, 2.596F);
        FuzzerUtils.init(bArr, false);

        i6 += -1;
        for (i9 = 11; i9 < 371; i9++) {
            short s=-5273;
            iArr1[i9 + 1] >>= s;
            for (f = 1; f < 5; ++f) {
                boolean b1=true;
                iArr1[(int)(f)] |= s;
                Test.instanceCount &= Test.instanceCount;
                Test.instanceCount += (long)f;
                switch (((-57445 >>> 1) % 4) + 99) {
                case 99:
                    by = (byte)i7;
                    break;
                case 100:
                case 101:
                    i11 |= (int)-37L;
                    s >>= (short)Test.instanceCount;
                    try {
                        i11 = (32 / i8);
                        iArr1[(int)(f + 1)] = (i8 % 179);
                        i12 = (iArr1[i9] / i10);
                    } catch (ArithmeticException a_e) {}
                    i10 += (int)(f + i8);
                    break;
                case 102:
                    fArr = fArr;
                    bArr[i9] = b1;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + by + i12 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(bArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i3, int i4, int i5) {

        boolean b=false;
        double d1=-36.35335;
        int i14=4332, i15=10, i16=-50527, i17=-6489, iArr2[]=new int[N];
        byte by1=-83;
        float f2=2.809F, fArr1[]=new float[N];
        short s1=27019;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4059596885L);
        FuzzerUtils.init(iArr2, 73);
        FuzzerUtils.init(fArr1, -79.389F);

        b = ((i4--) != ((++Test.instanceCount) * 219));
        i5 += byMeth(i5, i5, -54884);
        lArr[(-85 >>> 1) % N] = -56;
        Test.instanceCount = Test.instanceCount;
        i5 = (int)217L;
        d1 *= -41;
        for (int i13 : iArr2) {
            i13 = i4;
            for (i14 = 1; i14 < 4; i14++) {
                switch ((i14 % 7) + 16) {
                case 16:
                case 17:
                    if (i15 != 0) {
                        vMeth1_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i14 + i15 + i16
                            + i17 + by1 + Float.floatToIntBits(f2) + s1 + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                    for (i16 = 1; i16 < 2; i16++) {
                        float f1=2.634F;
                        Test.instanceCount += (((i16 * f1) + Test.instanceCount) - i3);
                        Test.instanceCount ^= i17;
                        i5 += (((i16 * i14) + i5) - by1);
                    }
                case 18:
                    i5 += (18549 + (i14 * i14));
                    break;
                case 19:
                    i5 *= (int)d1;
                    break;
                case 20:
                    f2 += s1;
                    break;
                case 21:
                case 22:
                    i17 += i14;
                    break;
                default:
                    fArr1[i14] += (float)-2.91284;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + by1 +
            Float.floatToIntBits(f2) + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(int i2, long l, double d) {

        int i19=-204, i20=137, i21=-14603, iArr3[]=new int[N];
        byte by2=71;
        long l1=-10L;
        float f3=-43.875F;

        FuzzerUtils.init(iArr3, -6);

        vMeth1(i2, i2, -14);
        for (int i18 : iArr3) {
            i18 = i2;
            for (i19 = 1; i19 < 4; ++i19) {
                l -= i18;
                i21 = 1;
                do {
                    i20 >>= by2;
                    if (true) continue;
                    i20 += i21;
                    d += l1;
                    i20 += -59144;
                    f3 *= i2;
                } while (++i21 < 2);
            }
            f3 -= -44971;
            iArr3[(i2 >>> 1) % N] >>= (int)l;
            iArr3[(i20 >>> 1) % N] <<= 7;
        }
        vMeth_check_sum += i2 + l + Double.doubleToLongBits(d) + i19 + i20 + i21 + by2 + l1 + Float.floatToIntBits(f3)
            + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=-110, i1=-239, i22=-42501, i23=-7, i24=10, i25=-190, i26=60988, i27=-8, i28=-18096, iArr[]=new int[N];
        byte by3=107;
        boolean b2=false;
        float fArr2[][]=new float[N][N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(fArr2, 1.579F);

        for (i = 15; i < 258; i++) {
            i1 = iArr[i + 1];
        }
        vMeth(i1, Test.instanceCount, dFld);
        Test.fFld -= i1;
        i1 -= i1;
        i1 *= -12268;
        for (i22 = 2; i22 < 205; i22++) {
            try {
                i23 = (i % i23);
                i23 = (i22 / -150);
                iArr[i22] = (i1 % -50503);
            } catch (ArithmeticException a_e) {}
            fArr2[i22][i22 + 1] -= i23;
            iArr[i22 + 1] *= i22;
        }
        i1 |= i22;
        i23 = i1;
        for (i24 = 2; i24 < 129; i24++) {
            i25 = (int)Test.instanceCount;
            by3 += (byte)(63 + (i24 * i24));
            i1 <<= i23;
            i1 <<= i22;
            for (i26 = 4; i26 < 197; i26++) {
                i25 += i24;
                i28 = 1;
                while (++i28 < 2) {
                    short s2=-19538;
                    Test.fFld += i28;
                    i25 &= i27;
                    i27 = (int)Test.instanceCount;
                    i1 -= i26;
                    i27 += (i28 * i28);
                    Test.instanceCount += (i28 ^ i1);
                    Test.instanceCount |= Test.instanceCount;
                    Test.instanceCount -= i28;
                    fArr2[i28 - 1][i28] -= s2;
                    if (b2) break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
