package tests.javafuzzer3056;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:20:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=25235L;
    public int iFld=-10;
    public static boolean bFld=false;
    public static volatile float fFld=2.725F;
    public static long lFld=-221L;
    public static volatile int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.byArrFld, (byte)68);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i10, int i11, int i12) {

        float f1=1.293F;
        int i13=-79, i14=-177, i15=1834, i16=-6, i17=30985, i18=-6, iArr[]=new int[N];
        double d2=-1.39247;
        byte by=-7;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(iArr, 60412);

        f1 = -251L;
        lArr = lArr;
        i12 += i10;
        for (i13 = 17; i13 < 323; ++i13) {
            Test.instanceCount = i13;
            for (i15 = 1; i15 < 5; i15++) {
                i14 = (int)-20364L;
                for (i17 = 2; i17 > 1; i17 -= 3) {
                    i16 = i11;
                    f1 -= (float)d2;
                    iArr = iArr;
                }
                if (b) {
                    i10 = (int)-32.756F;
                    iArr[i13] = by;
                }
                i12 *= i16;
            }
        }
        long meth_res = i10 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d2) + by + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i8) {

        double d1=-2.19593;
        long l=2092L, lArr1[]=new long[N];
        int i9=-52, i19=176, i20=-27537, iArr1[]=new int[N];
        float f=12.315F;

        FuzzerUtils.init(iArr1, -6387);
        FuzzerUtils.init(lArr1, -6L);

        d1 *= (i8 + Test.instanceCount);
        for (l = 3; l < 357; ++l) {
            f = 5;
            while (--f > 0) {
                d1 -= (sMeth(-47608, -56, i9) + -50674);
                i8 <<= i8;
                iArr1[(int)(l)] *= -21049;
                i9 += (int)f;
                i8 = (int)f;
                for (i19 = 1; i19 < 1; i19++) {
                    lArr1[i19 + 1] += -52508;
                    i20 = (int)93.242F;
                    iArr1 = iArr1;
                    Test.instanceCount <<= i19;
                    i20 += (int)l;
                    i9 -= 810;
                }
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d1) + l + i9 + Float.floatToIntBits(f) + i19 + i20 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, int i1, int i2) {

        int i3=3, i4=-34784, i5=-50, i6=-5, i7=147, i21=-8;
        float f2=-2.643F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.37409);

        i1 = i;
        dArr = (dArr = dArr);
        for (i3 = 6; i3 < 361; i3++) {
            i5 = 1;
            do {
                for (i6 = 1; i6 < 1; ++i6) {
                    i1 = (iMeth1(7) + i3);
                }
                Test.bFld = Test.bFld;
                Test.instanceCount ^= i6;
                i21 = 1;
                do {
                    if (Test.bFld) continue;
                    if (true) continue;
                    Test.iArrFld[i5 + 1] = (int)f2;
                    Test.iArrFld[i3 - 1] >>>= i5;
                } while (++i21 < 1);
                i2 |= (int)Test.instanceCount;
                Test.instanceCount <<= Test.instanceCount;
            } while (++i5 < 5);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i21 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=56.86257, dArr1[]=new double[N];
        int i22=-6, i23=4, i24=1, i25=2, i26=-23, i27=-4348, i28=39, i29=61136, i30=56263, i31=117;
        long lArr2[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, 3688376946L);
        FuzzerUtils.init(fArr, 59.463F);
        FuzzerUtils.init(dArr1, 93.67558);

        Test.instanceCount -= (long)(Math.max(iFld | iFld, iFld = iFld) + ((-d) + iMeth(247, iFld, iFld)));
        for (long l1 : lArr2) {
            Test.byArrFld[(-54065 >>> 1) % N] *= (byte)14009;
            for (i22 = 1; i22 < 63; ++i22) {
                iFld = iFld;
                iFld &= iFld;
                Test.instanceCount = iFld;
            }
        }
        for (i24 = 16; i24 < 360; i24++) {
            fArr[i24 + 1] += -64776;
            for (i26 = 3; i26 < 73; i26++) {
                for (i28 = 1; i28 < 2; ++i28) {
                    if (true) break;
                    Test.bFld = Test.bFld;
                    i25 -= iFld;
                    Test.fFld = 235;
                    Test.iArrFld[i26] = i23;
                    i25 <<= (int)-2579922447596933647L;
                    lArr2 = lArr2;
                    i27 = (int)Test.fFld;
                    d += Test.instanceCount;
                }
                for (i30 = 1; i30 < 2; i30++) {
                    i23 >>>= i31;
                    Test.instanceCount <<= Test.instanceCount;
                    Test.instanceCount += i30;
                    if (false) break;
                }
                dArr1[i26] *= i22;
                d *= -51.413F;
                Test.fFld *= Test.fFld;
                iFld *= i29;
                i25 -= (int)Test.lFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
