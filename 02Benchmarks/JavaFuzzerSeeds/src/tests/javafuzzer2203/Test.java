package tests.javafuzzer2203;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:16:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static boolean bFld=true;
    public volatile byte byFld=104;
    public static volatile short sFld=-26898;
    public static volatile float fFld=2.577F;
    public int iArrFld[]=new int[N];
    public volatile float fArrFld[]=new float[N];
    public static volatile short sArrFld[]=new short[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-30383);
        FuzzerUtils.init(Test.dArrFld, -2.21093);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1) {

        int i6=31, i7=18240, i8=-8, i9=-96, i10=-13, iArr[]=new int[N];
        byte by=-62;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 18.497F);
        FuzzerUtils.init(lArr1, 1L);
        FuzzerUtils.init(iArr, -31535);

        switch (((i6 >>> 1) % 7) + 5) {
        case 5:
            for (i7 = 9; i7 < 162; ++i7) {
                i9 = 1;
                while (++i9 < 10) {
                    Test.instanceCount *= (long)f1;
                    fArr[i9] = Test.sFld;
                    Test.sArrFld = Test.sArrFld;
                    i8 += i9;
                    Test.instanceCount -= Test.instanceCount;
                }
            }
            try {
                if (Test.bFld) {
                    i10 = 1;
                    while (++i10 < 333) {
                        i8 += Test.sFld;
                    }
                } else {
                    i8 = i6;
                    i6 ^= i7;
                }
                i8 -= (int)f1;
            }
            catch (ArrayIndexOutOfBoundsException exc2) {
                i8 += (int)Test.instanceCount;
            }
            break;
        case 6:
            i6 = (int)f1;
            break;
        case 7:
            lArr1[(i10 >>> 1) % N] += Test.instanceCount;
            break;
        case 8:
            Test.instanceCount = 1383878009469935041L;
            break;
        case 9:
            i8 += -2986;
        case 10:
            f1 += f1;
            break;
        case 11:
            by -= (byte)i7;
        default:
            i8 = -164;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l1) {

        float f2=-2.562F;
        int i12=181, i13=131, i14=-63410, i15=-1412, i16=1, i17=0, i18=-10, iArr1[]=new int[N];
        double d2=0.8839, d3=46.49328;
        byte by1=-79;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -1777417592406478147L);
        FuzzerUtils.init(iArr1, 9);

        vMeth1(f2);
        i12 = i12;
        for (i13 = 2; i13 < 182; i13++) {
            lArr2[i13 - 1] = i14;
            d2 = f2;
            for (i15 = 1; i15 < 9; i15++) {
                by1 >>= (byte)i13;
                i16 = (int)d3;
                for (i17 = i13; i17 < 2; i17++) {
                    try {
                        i18 = (i14 % -1359852579);
                        i14 = (iArr1[i17 + 1] / i13);
                        iArr1[i15 - 1] = (i18 / i18);
                    } catch (ArithmeticException a_e) {}
                    i16 *= i18;
                    if (Test.bFld) break;
                    try {
                        i12 = (iArr1[i15 + 1] % 224);
                        iArr1[i15 - 1] = (iArr1[i17] / -64086);
                        i16 = (i17 % -18);
                    } catch (ArithmeticException a_e) {}
                    i16 = (int)l1;
                    i14 -= -3;
                }
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f2) + i12 + i13 + i14 + Double.doubleToLongBits(d2) + i15 + i16 + by1
            + Double.doubleToLongBits(d3) + i17 + i18 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i4, float f, int i5) {

        double d=-47.34614;
        byte by2=0;
        int i20=-56618, i21=-2, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 64292);

        d += Double.longBitsToDouble((++i4) - (-120 - lMeth(Test.instanceCount)));
        i5 -= i4;
        by2 *= (byte)Test.instanceCount;
        i4 *= i4;
        Test.bFld = Test.bFld;
        i4 += i5;
        for (int i19 : iArr2) {
            Test.instanceCount = i19;
            for (i20 = 1; i20 < 4; i20 += 2) {
                try {
                    iArr2[i20 + 1] = (i4 / i5);
                    iArr2[i20] = (i21 / 110);
                    iArr2[i20 + 1] = (i4 / iArr2[i20 + 1]);
                } catch (ArithmeticException a_e) {}
            }
            switch ((((i20 >>> 1) % 8) * 5) + 35) {
            case 68:
                iArr2[(i21 >>> 1) % N] = i21;
                break;
            case 72:
                try {
                    i5 = (i5 / 4547);
                    i21 = (i19 / iArr2[(i4 >>> 1) % N]);
                    i4 = (iArr2[(i5 >>> 1) % N] % i20);
                } catch (ArithmeticException a_e) {}
                break;
            case 54:
                Test.sFld += (short)i21;
                by2 = (byte)64;
            case 48:
                i5 += 62736;
                break;
            case 71:
                i19 = (int)Test.instanceCount;
                break;
            case 51:
            case 60:
                i19 -= -28468;
            case 65:
                iArr2[(4 >>> 1) % N] -= i20;
                break;
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + by2 + i20 + i21 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=219, i2=41660, i3=105, i22=35, i23=0, i24=58158, i25=-51718, i26=-7, iArr3[]=new int[N];
        double d4=0.38463;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 3170893144L);
        FuzzerUtils.init(byArr, (byte)-67);
        FuzzerUtils.init(iArr3, 107);

        for (i = 3; 236 > i; i++) {
            for (i2 = 1; i2 < 108; i2++) {
                Test.instanceCount += (i2 * i2);
                Test.bFld = (Test.instanceCount >= (Test.instanceCount * (++iArrFld[i + 1])));
                Test.instanceCount = (iArrFld[i]--);
                iArrFld[i2 + 1] = (int)((Test.instanceCount += (Test.instanceCount + 3)) - byFld);
                Test.instanceCount += iArrFld[i + 1];
                i3 += (int)(((i1++) - (i2 * -148L)) - ((i3 + i) - Test.instanceCount));
            }
        }
        i3 >>= (int)((++fArrFld[(i1 >>> 1) % N]) + ((byFld--) - i2));
        for (long l : lArr) {
            i3 *= 4;
            vMeth(74, Test.fFld, i1);
            byFld = (byte)i3;
            i1 *= i1;
        }
        iArrFld[(i2 >>> 1) % N] = (int)5078007592740810948L;
        for (i22 = 19; 367 > i22; i22++) {
            d4 -= Test.sFld;
            switch ((i22 * 5) + 46) {
            case 83:
                Test.fFld -= 938333199L;
                i1 += i2;
                break;
            case 116:
                Test.instanceCount = byFld;
                switch ((i22 % 7) + 5) {
                case 5:
                    i24 = 72;
                    do {
                        i25 = 1;
                        while (++i25 < 1) {
                            if (true) {
                                lArr[i25 - 1] = i26;
                                Test.instanceCount = Test.instanceCount;
                            } else {
                                Test.fFld -= Test.fFld;
                            }
                            Test.sFld = (short)-37529L;
                            Test.instanceCount += (((i25 * i26) + Test.instanceCount) - i26);
                        }
                    } while (--i24 > 0);
                    break;
                case 6:
                    i1 -= i22;
                    break;
                case 7:
                    Test.bFld = Test.bFld;
                    break;
                case 8:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 9:
                    lArr[i22 - 1] = 11;
                case 10:
                    i1 = i1;
                    break;
                case 11:
                    i1 += i22;
                    break;
                }
            case 251:
            case 314:
                Test.fFld += (((i22 * i26) + i26) - i);
                break;
            case 246:
                i23 *= i1;
                break;
            case 205:
                if (Test.bFld) continue;
                break;
            case 94:
                i23 = i26;
                break;
            case 248:
                iArrFld = iArrFld;
                break;
            case 85:
                Test.sFld += (short)-33920;
            case 312:
                i26 &= i3;
                break;
            case 297:
                i3 = -215;
            case 126:
                Test.fFld += i24;
                break;
            case 298:
                i1 -= i2;
                break;
            case 319:
                byArr[i22 - 1] = (byte)i26;
                break;
            case 318:
                Test.fFld = i22;
            case 335:
                lArr[i22 + 1] = i22;
                break;
            case 224:
                i23 += (((i22 * Test.sFld) + i22) - Test.instanceCount);
                break;
            case 71:
                Test.instanceCount += 916147567L;
            case 150:
                i1 >>= (int)Test.instanceCount;
                break;
            case 145:
                if (Test.bFld) continue;
                break;
            case 356:
                iArrFld[i22 + 1] -= (int)Test.instanceCount;
            case 137:
                i3 /= (int)(Test.instanceCount | 1);
            case 304:
                Test.instanceCount += (((i22 * i3) + Test.sFld) - Test.instanceCount);
            case 345:
                Test.fFld += (6 + (i22 * i22));
                break;
            case 144:
                Test.instanceCount += -104;
            case 240:
                i3 -= -2;
                break;
            case 211:
                Test.instanceCount -= i1;
            case 340:
                i1 >>= i22;
                break;
            case 328:
            case 213:
                Test.instanceCount -= byFld;
                break;
            case 109:
                i1 *= (int)Test.instanceCount;
                break;
            case 320:
                d4 = Test.instanceCount;
                break;
            case 308:
                Test.sArrFld[i22 + 1] = Test.sFld;
            case 332:
                Test.instanceCount += Test.instanceCount;
                break;
            case 380:
                Test.sFld |= (short)i23;
            case 61:
                d4 *= i24;
                break;
            case 106:
                Test.instanceCount = Test.instanceCount;
            case 277:
                i1 += (int)Test.instanceCount;
                break;
            case 174:
                try {
                    i23 = (iArrFld[i22] / i);
                    iArr3[i22] = (i2 % i1);
                    i23 = (1037569781 / i24);
                } catch (ArithmeticException a_e) {}
                break;
            case 151:
                i26 += byFld;
                break;
            case 342:
                i23 += (i22 * i22);
                break;
            case 235:
            case 190:
                iArrFld[i22 - 1] = -15555;
                break;
            case 220:
                Test.sFld -= (short)-1540611984648331446L;
            case 159:
                fArrFld[i22] *= i2;
                break;
            case 316:
                i3 <<= (int)Test.instanceCount;
            case 162:
                i1 ^= i23;
            case 67:
                i26 += (i22 - Test.instanceCount);
                break;
            case 178:
                i3 -= byFld;
                break;
            case 226:
                i1 += i22;
                break;
            case 393:
                i23 = (int)Test.instanceCount;
                break;
            case 262:
                i3 = (int)-8409749864412487670L;
            case 334:
                i23 &= 47860;
            case 250:
                i1 += (i22 * i22);
            case 326:
                lArr = FuzzerUtils.long1array(N, (long)-5619634794791273574L);
                break;
            case 52:
                Test.fFld -= Test.instanceCount;
                break;
            case 167:
                i23 = 5;
                break;
            case 368:
                i23 <<= i25;
                break;
            case 65:
                lArr[i22] += (long)Test.fFld;
                break;
            case 118:
                iArr3[i22] <<= (int)Test.instanceCount;
                break;
            case 313:
                i3 = i;
                break;
            case 282:
                i26 &= i1;
                break;
            case 148:
                d4 -= i24;
                break;
            case 276:
                Test.sFld += (short)-3775038866360099215L;
                break;
            case 152:
                Test.instanceCount *= i26;
                break;
            case 295:
                Test.fFld += i26;
            case 95:
                i23 = i26;
                break;
            case 264:
                d4 += -8;
            case 216:
                i1 = (int)Test.instanceCount;
            case 296:
                i23 += (int)Test.fFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
