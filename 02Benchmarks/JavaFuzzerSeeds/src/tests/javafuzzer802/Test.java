package tests.javafuzzer802;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:17:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1293898899L;
    public static volatile short sFld=-9929;
    public static boolean bFld=true;
    public static float fFld=0.59F;
    public static double dFld=-2.1135;
    public int iFld=200;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -56709L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4, int i5) {

        double d=-106.97388;
        int i6=13, i7=-35515, i8=-15537, i9=43, i10=-10, iArr[]=new int[N];
        boolean b=true;
        long l2=135L;

        FuzzerUtils.init(iArr, -2);

        i3 -= (int)d;
        for (i6 = 1; 345 > i6; ++i6) {
            if (b) break;
            for (i8 = 1; i8 < 5; i8++) {
                if (b) break;
                Test.instanceCount -= Test.sFld;
                switch (((i8 % 2) * 5) + 71) {
                case 80:
                    i5 += i9;
                    i4 += i8;
                    break;
                case 78:
                    Test.lArrFld[i8 - 1] >>= i7;
                    break;
                default:
                    for (l2 = 2; l2 > 1; l2--) {
                        i5 += (int)l2;
                        iArr[i8] >>>= i10;
                    }
                    i10 = i3;
                    i10 <<= i7;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + (b ? 1 : 0) + i8 + i9 + l2 + i10 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, long l1) {

        int i2=-38908, i11=-40670, i12=2, i13=-16419, i14=6, i15=-6;
        byte by=112;
        long l3=3399465326L;
        double d1=0.70362;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)2208);

        i2 = 1;
        while (++i2 < 274) {
            i1 <<= (int)(((i1 + i1) + (Test.sFld + i2)) + (-(i2 - -3236257993L)));
            i1 = (int)(62917 * (lMeth(i2, i2, i2) - i1));
            by -= (byte)i2;
            Test.instanceCount = i1;
            i1 = Test.sFld;
            for (l3 = 6; l3 > 1; l3 -= 2) {
                sArr[i2] += (short)d1;
                Test.instanceCount -= by;
            }
            i11 >>= -63203;
        }
        for (i12 = 6; i12 < 219; ++i12) {
            for (i14 = 1; i14 < 8; i14++) {
                i13 >>= 0;
                i15 = i14;
                i11 += (i14 * i14);
            }
        }
        vMeth_check_sum += i1 + l1 + i2 + by + l3 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vSmallMeth(long l, int i) {


        vMeth(i, l);
        i = i;
        vSmallMeth_check_sum += l + i;
    }

    public void mainTest(String[] strArr1) {

        int i16=-33935, i17=10, i18=-31414, i19=-58, i20=-24, i21=129, i22=3, i23=39, i24=-4983, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -152L);
        FuzzerUtils.init(iArr1, -55034);

        for (int smallinvoc=0; smallinvoc<179; smallinvoc++) vSmallMeth(Test.instanceCount, i16);
        i17 = 1;
        while (++i17 < 274) {
            for (i18 = 92; i18 > 5; --i18) {
                i20 = 1;
                do {
                    switch (((i18 % 2) * 5) + 117) {
                    case 127:
                        i19 -= 12;
                        i19 += 19716;
                    case 121:
                        Test.bFld = Test.bFld;
                        Test.fFld *= i20;
                        Test.instanceCount += i18;
                        break;
                    }
                } while (++i20 < 2);
                i16 = i19;
                i16 <<= i19;
                lArr[i18 + 1] += -63694;
                i16 = i18;
                i16 = (int)Test.instanceCount;
                i19 -= (int)Test.fFld;
            }
            Test.dFld *= i18;
            Test.instanceCount += i17;
            iArr1[i17] = (int)Test.dFld;
            Test.instanceCount = i16;
            iArr1[i17] = (int)Test.instanceCount;
            for (i21 = 4; i21 < 92; i21++) {
                i22 = iFld;
                for (i23 = 1; i23 < 2; i23++) {
                    switch ((i21 % 3) + 83) {
                    case 83:
                        iArr1[i21] = i17;
                        i24 %= (int)(Test.sFld | 1);
                        break;
                    case 84:
                        i24 = i18;
                        break;
                    case 85:
                        i16 *= (int)Test.instanceCount;
                        break;
                    default:
                        Test.fFld += -49484;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
