package tests.javafuzzer1809;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:34:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2075797057849047450L;
    public static float fFld=127.336F;
    public static int iFld=-33;
    public double dFld=2.7627;
    public static float fFld1=0.952F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -41962);
        FuzzerUtils.init(Test.dArrFld, 62.81056);
        FuzzerUtils.init(Test.lArrFld, -1L);
        FuzzerUtils.init(Test.byArrFld, (byte)22);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        int i4=-212, i5=-1571, i6=-26, i7=187, i8=48213, iArr[]=new int[N];
        short s=9089, sArr[]=new short[N];
        long l1=-14L, lArr[]=new long[N];
        boolean b=false;

        FuzzerUtils.init(lArr, 2626293202L);
        FuzzerUtils.init(sArr, (short)10929);
        FuzzerUtils.init(iArr, 14);

        Test.iFld >>= Test.iFld;
        lArr = lArr;
        for (i4 = 316; i4 > 6; i4--) {
            for (i6 = 1; i6 < 5; ++i6) {
                s += (short)i6;
                sArr[i6 + 1] += (short)i7;
                Test.iFld >>= i5;
                if (i5 != 0) {
                }
                Test.instanceCount += (i6 - i7);
                i5 = i6;
            }
            lArr[i4 - 1] -= 181;
            for (l1 = 1; l1 < 5; l1++) {
                iArr[(int)(l1 - 1)] /= (int)(Test.iFld | 1);
                b = b;
                Test.fFld *= 0.141F;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + s + l1 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(double d) {

        int i2=-2, i3=-79, i9=-61146, i10=242, i11=7409, iArr1[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, 3);

        i2 = (int)(Test.fFld--);
        i3 = 1;
        do {
            if (i2 != 0) {
            }
            switch ((((i2 >>> 1) % 2) * 5) + 86) {
            case 93:
                i2 = iMeth2();
                i9 = 1;
                do {
                    for (i10 = 1; i10 < 1; i10++) {
                        Test.iFld = -50940;
                        i11 += i10;
                        i11 = (int)Test.instanceCount;
                        i2 >>= (int)Test.instanceCount;
                        Test.iFld -= i10;
                        Test.iFld += (i10 ^ i10);
                        if (b1) continue;
                    }
                    i2 = Test.iFld;
                } while (++i9 < 10);
                break;
            case 95:
                iArr1[i3 + 1] = (int)-472205471686089446L;
                break;
            }
        } while (++i3 < 165);
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i9 + i10 + i11 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i1=-229, i12=-14, i13=-3, i14=38333, i15=10, i16=-14;
        double d1=-68.72118;
        short s1=16862;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 90.43F);

        i1 += (int)(i1 = (int)((i1 ^= i1) * (l * l)));
        l = iMeth1(d1);
        for (float f : fArr) {
            for (i12 = 4; 1 < i12; --i12) {
                Test.iArrFld[(Test.iFld >>> 1) % N] -= s1;
                for (i14 = 1; i14 < 2; ++i14) {
                    l += (((i14 * i12) + i14) - Test.iFld);
                    Test.instanceCount += (long)99.128564;
                    Test.iFld += (int)l;
                    Test.iFld %= (int)(i14 | 1);
                    i13 *= i12;
                    Test.iFld -= (int)d1;
                    i13 += i16;
                    Test.dArrFld[i12 - 1] -= i15;
                }
                i16 += i12;
            }
        }
        long meth_res = l + i1 + Double.doubleToLongBits(d1) + i12 + i13 + s1 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-29633, i17=229, i18=236, i19=-6, i20=-10, i21=173, i22=70, i23=-1;
        boolean b2=true;
        short s2=-18856;
        byte by=-121;

        i >>>= (((i + i) - iMeth(-2L)) * i);
        i17 = 1;
        do {
            for (i18 = 2; i18 < 108; i18++) {
                Test.iArrFld[i18] -= (int)Test.instanceCount;
                Test.iFld = 221;
                Test.fFld = Test.iFld;
                Test.fFld = i17;
                switch (((i17 % 10) * 5) + 24) {
                case 62:
                    Test.dArrFld[i17 - 1] += i19;
                    dFld = 0.585F;
                    break;
                case 34:
                    Test.fFld1 -= -188;
                    Test.lArrFld = Test.lArrFld;
                case 38:
                    Test.iArrFld[i18 + 1] -= i;
                    switch (((i17 >>> 1) % 8) + 58) {
                    case 58:
                        Test.fFld1 = Test.instanceCount;
                        i19 <<= 159;
                        for (i20 = 1; i20 < 2; ++i20) {
                            Test.iFld = (int)1.399F;
                            Test.instanceCount -= -27072;
                            Test.instanceCount = Test.iFld;
                            i21 = (int)-185L;
                            Test.fFld1 += (i20 + i18);
                            i ^= (int)Test.instanceCount;
                            i21 += -243;
                            Test.byArrFld[i20 + 1] = (byte)Test.instanceCount;
                        }
                        for (i22 = 2; i22 > i17; --i22) {
                            Test.fFld += (112.17F + (i22 * i22));
                            i23 -= i22;
                            Test.lArrFld[i18 - 1] -= (long)Test.fFld;
                            if (b2) break;
                        }
                        break;
                    case 59:
                        Test.instanceCount += (i18 | s2);
                        break;
                    case 60:
                        i23 *= i20;
                        break;
                    case 61:
                        i23 >>= (int)4454021167778886756L;
                        break;
                    case 62:
                        Test.fFld1 -= i21;
                    case 63:
                        dFld *= i23;
                        break;
                    case 64:
                        i21 += (-106 + (i18 * i18));
                        break;
                    case 65:
                        i -= i;
                        break;
                    default:
                        i23 >>>= -8;
                    }
                case 72:
                    i21 &= (int)Test.instanceCount;
                    break;
                case 25:
                    by += (byte)(i18 ^ i23);
                case 70:
                    i19 *= i22;
                    break;
                case 45:
                    Test.iArrFld[i18] -= i19;
                    break;
                case 57:
                    Test.iArrFld[(i20 >>> 1) % N] *= i23;
                    break;
                case 39:
                    Test.fFld += -2354149514326799158L;
                    break;
                case 60:
                    i21 -= i22;
                default:
                    i23 = (int)Test.instanceCount;
                }
            }
        } while (++i17 < 233);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
