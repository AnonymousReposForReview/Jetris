package tests.javafuzzer1210;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:35:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-927781703L;
    public short sFld=-12034;
    public static volatile float fFld=42.591F;
    public static byte byFld=25;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10312);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2) {

        double d1=0.122479;
        short s=-18152;
        int i11=91, i12=-9, i13=-10331;

        d1 += s;
        i11 -= -214;
        for (i12 = 357; i12 > 9; i12 -= 3) {
            i11 = i11;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + s + i11 + i12 + i13;
    }

    public static int iMeth(int i8) {

        double d=-1.40951, dArr[]=new double[N];
        int i9=24680, i10=3, i14=15, i15=3568, i16=4, i17=14922;
        boolean b1=true;

        FuzzerUtils.init(dArr, -96.44954);

        Test.instanceCount = (long)(((Test.fFld + i8) - (++d)) / (((long)(i8 + (i8 + Test.fFld))) | 1));
        for (i9 = 18; 334 > i9; ++i9) {
            vMeth(Test.fFld);
            if (b1) break;
            for (i14 = i9; 5 > i14; ++i14) {
                i10 += (i14 * i14);
                for (i16 = 1; i16 > i14; i16--) {
                    i17 = i9;
                    i8 = i9;
                    dArr[i14] += Test.byFld;
                    i17 *= 11;
                    if (b1) break;
                    Test.instanceCount <<= i15;
                    i15 += (((i16 * Test.instanceCount) + i8) - i14);
                    Test.fFld += i17;
                }
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d) + i9 + i10 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(boolean b, int i7) {

        float f1=107.505F;
        int i19=-169, i20=41242, i21=5, i22=-17234;
        double d3=0.97749;
        short s1=-11189;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2520514883L);

        i7 *= (int)(++Test.instanceCount);
        i7 -= (int)(((31019 & (i7 - i7)) * Long.reverseBytes(Test.instanceCount)) % (((long)((f1 + i7) + iMeth(i7))) |
            1));
        for (int i18 : Test.iArrFld) {
            Test.byFld -= (byte)i7;
            Test.instanceCount += i18;
        }
        for (i19 = 4; i19 < 148; i19++) {
            i20 *= i7;
            if (b) {
                switch (((i7 >>> 1) % 9) + 75) {
                case 75:
                    i21 = 1;
                    do {
                        double d2=-58.7357;
                        d2 = 25.18117;
                        Test.instanceCount -= Test.instanceCount;
                        for (d3 = 1; 1 > d3; d3++) {
                            i7 = i20;
                            if (b) break;
                        }
                    } while (++i21 < 11);
                    break;
                case 76:
                    Test.iArrFld[i19 + 1] = s1;
                case 77:
                    i7 += (int)Test.instanceCount;
                    break;
                case 78:
                    i22 = (int)f1;
                    break;
                case 79:
                    i20 ^= i19;
                case 80:
                    Test.instanceCount -= i20;
                    break;
                case 81:
                    i20 += (int)d3;
                    break;
                case 82:
                    i22 >>= i19;
                    break;
                case 83:
                    Test.instanceCount += (((i19 * f1) + i20) - Test.instanceCount);
                    break;
                }
            } else if (b) {
                lArr[i19 + 1] = s1;
            } else {
                Test.iArrFld[i19] += (int)Test.instanceCount;
            }
        }
        long meth_res = (b ? 1 : 0) + i7 + Float.floatToIntBits(f1) + i19 + i20 + i21 + Double.doubleToLongBits(d3) +
            i22 + s1 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=24067, i2=78, i3=-235, i4=-228, i5=-12, i6=-12, i23=190, i24=-5, i25=80, i26=33084, i27=1,
            iArr[]=new int[N];
        float f=48.129F, fArr[]=new float[N];
        boolean b2=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -36884);
        FuzzerUtils.init(fArr, -91.124F);
        FuzzerUtils.init(lArr1, -20671L);

        for (i = 14; i < 327; ++i) {
            iArr[i - 1] += (int)Test.instanceCount;
            try {
                i1 = (i1 / -19283);
                i1 = (i % i1);
                i1 = (i1 % -224);
            } catch (ArithmeticException a_e) {}
            f -= 59265;
        }
        i2 = 1;
        do {
            i1 <<= (int)((--sFld) >> Test.instanceCount);
            iArr[i2 - 1] -= (int)(f--);
        } while (++i2 < 246);
        for (i3 = 17; i3 < 378; i3++) {
            for (i5 = 1; 70 > i5; ++i5) {
                Test.instanceCount = (long)((iArr[i3] * fMeth(b2, -12)) - i1);
                iArr[i3] >>= i3;
                fArr[i3 + 1] += f;
                for (i23 = 2; 1 < i23; i23--) {
                    i24 += i24;
                    i1 -= (int)Test.instanceCount;
                    i4 += (((i23 * i5) + Test.instanceCount) - Test.instanceCount);
                    i1 += (((i23 * i24) + Test.fFld) - i3);
                    i6 *= i3;
                    Test.iArrFld[i5 + 1] += -10;
                    Test.instanceCount += (26290 + (i23 * i23));
                    lArr1[i5] &= i6;
                    lArr1[i23 + 1] = sFld;
                }
                i4 = i2;
                for (i25 = 1; i25 < 2; i25 += 3) {
                    Test.instanceCount = Test.byFld;
                    Test.instanceCount += -60L;
                    Test.byFld = (byte)i23;
                }
                i27 = 1;
                do {
                    i6 = i4;
                    i4 = i24;
                } while (++i27 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
