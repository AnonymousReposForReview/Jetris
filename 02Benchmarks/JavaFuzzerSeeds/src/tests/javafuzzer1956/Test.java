package tests.javafuzzer1956;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:30:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-30394L;
    public static boolean bFld=false;
    public static float fFld=1.106F;
    public volatile byte byFld=-47;
    public volatile int iFld=-72;
    public static volatile double dArrFld[]=new double[N];
    public static volatile long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 25.88208);
        FuzzerUtils.init(Test.lArrFld, 60147L);
        FuzzerUtils.init(Test.iArrFld, 22);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f2, int i10, int i11) {

        byte by=-117;
        int i12=-4, i13=6, i14=46120, i15=-46188, i16=-94, i17=29509, i18=-83, iArr1[][]=new int[N][N];
        double d1=0.60895;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -2055624994L);
        FuzzerUtils.init(iArr1, -195);

        i10 -= by;
        lArr[(i11 >>> 1) % N][(i10 >>> 1) % N] *= i10;
        for (i12 = 4; i12 < 237; ++i12) {
            if (i13 != 0) {
            }
        }
        for (i14 = 2; 308 > i14; i14++) {
            for (i16 = 1; i16 < 5; i16++) {
                Test.instanceCount = i14;
                i11 += (i16 + Test.instanceCount);
                i18 = 1;
                do {
                    i15 = i16;
                    i13 = i12;
                    i10 += (-8 + (i18 * i18));
                    iArr1[i14] = FuzzerUtils.int1array(N, (int)-51185);
                    f2 *= (float)d1;
                } while (++i18 < 2);
                Test.instanceCount += (((i16 * i17) + i16) - Test.instanceCount);
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i10 + i11 + by + i12 + i13 + i14 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, float f1, int i3) {

        int i5=-63586, i6=0, i7=23, i8=13, i9=8587, iArr[]=new int[N];
        short s=3103;
        double d2=3.84354;

        FuzzerUtils.init(iArr, -94);

        for (int i4 : iArr) {
            for (i5 = 1; i5 < 4; ++i5) {
                for (i7 = 1; 2 > i7; i7++) {
                    if (Test.bFld = (i4 <= Integer.reverseBytes((int)(Test.instanceCount - s)))) continue;
                    i6 ^= (int)((i4--) - ((-2297560467L + Math.abs(Test.instanceCount)) + i9));
                    i3 += (i7 * Test.instanceCount);
                    Test.dArrFld[i7 - 1] -= (-(iMeth(f1, i7, i7) / (s | 1)));
                    i8 = i6;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    d2 = -13;
                    d2 *= -30834;
                    Test.instanceCount = i9;
                }
                s = (short)i9;
                i2 += i9;
            }
        }
        vMeth1_check_sum += i2 + Float.floatToIntBits(f1) + i3 + i5 + i6 + i7 + i8 + s + i9 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, float f, boolean b) {

        int i19=9, i20=19412, i21=-48520, i22=57428, i23=37452, i24=110, i25=170, iArr2[][]=new int[N][N];
        byte by1=8;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -4599);

        vMeth1(i19, f, i19);
        for (i20 = 363; i20 > 13; i20--) {
            Test.instanceCount -= by1;
            bArr[i20 - 1] = Test.bFld;
            if (i21 != 0) {
                vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + (b ? 1 : 0) + i19 + i20 + i21
                    + by1 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
                return;
            }
            for (i22 = 1; i22 < 5; i22++) {
                Test.instanceCount += i22;
                i24 = 1;
                while (++i24 < 2) {
                    Test.instanceCount = 133;
                    iArr2 = iArr2;
                    Test.lArrFld[i24 - 1] >>= 49150;
                    d += Test.instanceCount;
                }
            }
            i25 = 5;
            while (--i25 > 0) {
                f *= i23;
                i21 *= -95;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + (b ? 1 : 0) + i19 + i20 + i21 + by1 +
            i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=56798, i1=-13, i26=106, i27=-210, i28=190, i29=-47177, i30=47136, i31=174, i32=-37502, i33=-10,
            i34=-11061, i35=-5848, i36=40865, i38=145, iArr3[]=new int[N];
        double d3=0.30516;
        short s1=24779;
        long l=-217L, l2=-2999532244134264470L;
        boolean bArr1[]=new boolean[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr3, -53);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(byArr, (byte)-19);

        for (i = 198; i > 1; i--) {
            long l1=14L;
            if (Test.bFld) {
                vMeth(d3, Test.fFld, Test.bFld);
                iArr3[i] *= 11;
                switch (i + 42) {
                case 42:
                    for (i26 = 4; 127 > i26; ++i26) {
                        s1 >>= (short)Test.instanceCount;
                        i1 >>= (int)Test.instanceCount;
                        for (l = i; 2 > l; l++) {
                            i27 += s1;
                        }
                        i28 >>>= i27;
                        Test.instanceCount += -6340564325301708154L;
                        iArr3[i + 1] = (int)Test.instanceCount;
                    }
                    break;
                case 43:
                    i27 = i;
                    Test.instanceCount *= (long)Test.fFld;
                    Test.fFld = i1;
                    break;
                case 44:
                    switch ((i % 6) + 51) {
                    case 51:
                        i28 *= (int)-180L;
                        try {
                            i28 = (i1 % -6880);
                            iArr3[i + 1] = (iArr3[i + 1] / i1);
                            i28 = (23808 / i1);
                        } catch (ArithmeticException a_e) {}
                        i29 = 1;
                        while (++i29 < 127) {
                            iArr3[i + 1] += i1;
                            i1 *= i28;
                            d3 -= -225;
                            for (i30 = 1; i30 < 1; i30++) {
                                iArr3 = iArr3;
                            }
                            for (i32 = 1; i < i32; i32 -= 3) {
                                i27 += i32;
                            }
                            for (i34 = 1; i34 < 1; ++i34) {
                                Test.instanceCount = -173;
                                Test.lArrFld[i34] = i28;
                            }
                        }
                        break;
                    case 52:
                        d3 += -29;
                        break;
                    case 53:
                        iArr3[i + 1] <<= i;
                        break;
                    case 54:
                        Test.instanceCount += 2405072649L;
                        break;
                    case 55:
                        Test.fFld -= i27;
                    case 56:
                        i28 += (((i * s1) + i27) - i1);
                        break;
                    }
                    break;
                case 45:
                    i27 *= (int)Test.instanceCount;
                case 46:
                    byFld = (byte)-4235888948L;
                    break;
                case 47:
                    Test.instanceCount += (i - i33);
                    break;
                case 48:
                    Test.bFld = Test.bFld;
                    break;
                case 49:
                    i27 += (i - i33);
                    break;
                case 50:
                    Test.lArrFld[i - 1] >>>= i34;
                    break;
                case 51:
                    Test.instanceCount <<= Test.instanceCount;
                    break;
                case 52:
                    i27 *= -39111;
                    break;
                case 53:
                    i35 &= i30;
                case 54:
                    i35 = i30;
                case 55:
                    i35 -= (int)Test.fFld;
                    break;
                case 56:
                    Test.instanceCount *= s1;
                    break;
                case 57:
                    i27 += (int)l1;
                    break;
                case 58:
                    l1 -= Test.instanceCount;
                case 59:
                    Test.fFld += (i * i);
                case 60:
                    Test.fFld -= i31;
                    break;
                case 61:
                    i35 = (int)Test.fFld;
                    break;
                case 62:
                    i35 = i35;
                case 63:
                    iArr3[i] *= (int)Test.instanceCount;
                case 64:
                    Test.fFld = (float)d3;
                    break;
                case 65:
                    i28 += (((i * i1) + i33) - s1);
                case 66:
                    Test.iArrFld[i] += i1;
                    break;
                case 67:
                    bArr1[i - 1] = Test.bFld;
                    break;
                case 68:
                    if (Test.bFld) continue;
                    break;
                case 69:
                    i27 >>>= i28;
                case 70:
                    i33 = (int)Test.fFld;
                    break;
                case 71:
                    sArrFld[i + 1] += (short)i30;
                    break;
                case 72:
                    i31 >>= iFld;
                    break;
                case 73:
                    Test.instanceCount += l;
                    break;
                case 74:
                    Test.iArrFld[i - 1] -= i35;
                    break;
                case 75:
                case 76:
                    i31 -= i36;
                    break;
                case 77:
                    i31 += (i * iFld);
                case 78:
                    bArr1[i - 1] = false;
                    break;
                case 79:
                    i27 *= (int)l;
                    break;
                case 80:
                    i1 -= i;
                    break;
                case 81:
                    i35 += (i + i);
                    break;
                case 82:
                    i27 = s1;
                case 83:
                    l1 <<= l1;
                    break;
                case 84:
                    i1 *= -204;
                    break;
                case 85:
                    Test.instanceCount <<= i34;
                    break;
                case 86:
                    i35 = i34;
                    break;
                case 87:
                    i33 += i;
                    break;
                case 88:
                    if (Test.bFld) continue;
                    break;
                case 89:
                    l1 = i26;
                    break;
                case 90:
                    byFld <<= (byte)l1;
                case 91:
                    i27 += (int)Test.instanceCount;
                    break;
                case 92:
                    i31 -= i33;
                    break;
                case 93:
                    i31 *= i34;
                    break;
                case 94:
                    iFld += (i * i);
                case 95:
                    iArr3[(i34 >>> 1) % N] += (int)Test.fFld;
                    break;
                case 96:
                    i35 += (i * i);
                    break;
                case 97:
                    i35 += (i ^ iFld);
                    break;
                case 98:
                    Test.fFld = i1;
                    break;
                case 99:
                    byArr[i - 1] = (byte)i28;
                    break;
                case 100:
                    Test.instanceCount += i;
                    break;
                case 101:
                    i38 += i29;
                    break;
                case 102:
                    d3 = i27;
                case 103:
                    l1 += (((i * l1) + i) - byFld);
                    break;
                case 104:
                    l2 <<= i27;
                    break;
                case 105:
                case 106:
                    Test.iArrFld[i + 1] = 118;
                    break;
                case 107:
                    try {
                        i27 = (i28 % iArr3[i - 1]);
                        Test.iArrFld[i - 1] = (17 % iArr3[i]);
                        i28 = (i33 / Test.iArrFld[i - 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 108:
                    i31 -= i29;
                case 109:
                    d3 -= iFld;
                    break;
                case 110:
                    iArr3 = Test.iArrFld;
                    break;
                case 111:
                    i1 = i;
                    break;
                }
            } else {
                i35 -= i38;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
