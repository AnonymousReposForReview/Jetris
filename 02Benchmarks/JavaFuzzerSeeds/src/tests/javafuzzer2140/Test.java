package tests.javafuzzer2140;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:21:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1879898317L;
    public static boolean bFld=false;
    public static short sFld=-11734;
    public static int iFld=-1;
    public static float fFld=-1.721F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -145);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {


        Test.iArrFld = Test.iArrFld;
        Test.bFld = Test.bFld;
        vMeth2_check_sum += 0;
    }

    public static void vMeth1(int i1) {

        int i2=-2, i3=38629, i4=-38366, i5=-10, i6=145, i7=-3, iArr[]=new int[N];
        float f=-2.864F;
        double d1=23.9524;

        FuzzerUtils.init(iArr, 36034);

        for (i2 = 1; i2 < 197; ++i2) {
            i1 = ((i1 >>= (i3 - i1)) - -6);
            i4 = 1;
            while (++i4 < 8) {
                iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-4))));
                i5 = 1;
                while (++i5 < 1) {
                    i1 = (int)((-(f + i1)) - ((d1 * 8) * (i5 >> i4)));
                }
                i3 += (int)(-7L + (i4 * i4));
                vMeth2();
                if (Test.bFld) continue;
                for (i6 = 1; i6 < 1; i6++) {
                    i1 <<= i5;
                    i7 += (i6 | Test.sFld);
                    if (Test.bFld) continue;
                    i7 -= (int)Test.instanceCount;
                    f += (-156L + (i6 * i6));
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i6 + i7 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d) {

        int i8=12, i9=8, i10=2, i11=-7;
        short s=15361;
        boolean bArr[][]=new boolean[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)51);

        vMeth1(Test.iFld);
        bArr[(82 >>> 1) % N][(Test.iFld >>> 1) % N] = Test.bFld;
        for (i8 = 4; 125 > i8; ++i8) {
            i9 *= i9;
            for (i10 = 1; i10 < 13; i10++) {
                Test.iFld >>>= (int)Test.instanceCount;
                if (true) break;
                Test.iFld += (i10 * i10);
                if (i8 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + s +
                        FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
                    return;
                }
                switch (((i8 % 2) * 5) + 50) {
                case 51:
                    byArr[i8] *= (byte)s;
                    i11 *= (int)Test.instanceCount;
                    break;
                case 60:
                    i9 = (int)580754425804021808L;
                    Test.iFld >>= i11;
                    break;
                }
                i9 *= i8;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + s + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=3, i12=9, i13=120, i14=-11, i15=-35074, i17=9939, i18=-39039;
        long l1=5L, lArr[]=new long[N];
        boolean b=true;
        byte by=-18;

        FuzzerUtils.init(lArr, -59395906L);

        i -= (int)(++lArr[(i >>> 1) % N]);
        vMeth(1.76166);
        for (i12 = 7; 296 > i12; ++i12) {
            Test.iArrFld[i12] += Test.iFld;
            l1 = 87;
            do {
                try {
                    i13 = (Test.iFld / i);
                    Test.iArrFld[i12 + 1] = (746117370 / i);
                    Test.iArrFld[(int)(l1 + 1)] = (Test.iFld % i);
                } catch (ArithmeticException a_e) {}
                if (b) continue;
                i = (int)l1;
                Test.iFld += (int)(l1 + i12);
                Test.instanceCount = Test.iFld;
                for (i14 = 1; i14 < 2; ++i14) {
                    int i16=-237;
                    i13 -= i14;
                    i15 = i13;
                    Test.instanceCount *= i14;
                    if (Test.bFld) break;
                    i &= i14;
                    i13 *= -93;
                    Test.instanceCount += (-63119 + (i14 * i14));
                    try {
                        i = (i13 / 998818524);
                        Test.iFld = (i16 % 45059);
                        i15 = (64597 % i16);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = (int)Test.fFld;
                }
                Test.iArrFld[i12 + 1] += (int)l1;
            } while ((l1 -= 2) > 0);
            if (Test.bFld) continue;
            Test.instanceCount = l1;
            i15 = (int)l1;
            Test.bFld = Test.bFld;
            i13 = by;
        }
        i -= (int)9L;
        for (i17 = 3; i17 < 158; ++i17) {
            i13 = (int)Test.fFld;
            i18 <<= (int)-2263156245L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
