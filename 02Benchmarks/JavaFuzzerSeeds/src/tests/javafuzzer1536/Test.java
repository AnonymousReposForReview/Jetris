package tests.javafuzzer1536;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:11:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-933214838L;
    public static int iFld=-54617;
    public boolean bFld=true;
    public float fFld=2.158F;
    public short sFld=21171;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(long l, long l1) {

        byte by1=50;
        float f=-28.829F;

        by1 += (byte)(--Test.instanceCount);
        l += (long)f;
        vSmallMeth_check_sum += l + l1 + by1 + Float.floatToIntBits(f);
    }

    public static long lMeth(int i8) {

        long l3=-2155073636899724872L;
        int i9=3, i10=7, i11=-23595, i12=2, i13=11, iArr[]=new int[N];
        float f2=126.293F, fArr1[][]=new float[N][N];
        boolean b=true;

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(fArr1, -124.796F);

        i8 >>= -18;
        vSmallMeth(Test.instanceCount, Test.instanceCount);
        for (l3 = 14; l3 < 353; ++l3) {
            for (i10 = 1; i10 < 5; i10++) {
                short s=3344;
                Test.iFld >>= i9;
                iArr[i10] = i9;
                if (b) {
                    i11 *= (int)f2;
                    f2 += i10;
                    i11 = i8;
                } else if (b) {
                    Test.instanceCount -= i9;
                    s = (short)i9;
                    for (i12 = i10; i12 < 2; i12++) {
                        f2 -= i13;
                    }
                } else {
                    fArr1[i10][i10 - 1] = Test.instanceCount;
                }
            }
        }
        long meth_res = i8 + l3 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3, int i4, long l2) {

        int i5=245, i6=-4647, i7=-13707, i14=5, i15=44829, i16=-21705, iArr1[]=new int[N];
        float f1=-58.279F;
        boolean b1=false;
        short s1=-20218;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -12L);
        FuzzerUtils.init(iArr1, -6);

        for (i5 = 9; i5 < 166; i5++) {
            lArr1 = (lArr1 = (lArr1 = lArr1));
            if (b1) {
                i7 = 1;
                while (++i7 < 10) {
                    f1 = (((lArr1[i7 + 1]--) * lMeth(i7)) * -3669);
                }
            } else {
                for (i14 = 1; i14 < 10; ++i14) {
                    i3 <<= i4;
                    switch ((i5 % 1) + 108) {
                    case 108:
                        i16 = 1;
                        do {
                            try {
                                iArr1[i16 + 1] = (-57396 % iArr1[i5]);
                                i3 = (Test.iFld % i7);
                                i4 = (i7 % 17613);
                            } catch (ArithmeticException a_e) {}
                            i15 += (14 + (i16 * i16));
                            l2 = i14;
                            f1 += i6;
                            l2 += i16;
                            i6 += (int)(-2254L + (i16 * i16));
                        } while (++i16 < 2);
                    default:
                        lArr1[i14 + 1] >>= s1;
                    }
                }
            }
        }
        long meth_res = i3 + i4 + l2 + i5 + i6 + i7 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i14 + i15 + i16 + s1 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=186, i1=9, i2=-216, i17=-38629, i18=3, i19=8, iArr2[]=new int[N];
        byte by=-98;
        float fArr[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -27.1012F);
        FuzzerUtils.init(lArr, 4693407207463198389L);
        FuzzerUtils.init(iArr2, 1);

        i = (int)(Math.abs(i - by) * (fArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] - -2679528270L));
        for (i1 = 11; i1 < 387; ++i1) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth((long)(lArr[i1 + 1] =
                (long)Float.intBitsToFloat(--i)), --Test.instanceCount);
            i += (int)(4431905511847123896L + (i1 * i1));
            lArr[i1] -= iMeth(38, i, Test.instanceCount);
            if (true) continue;
            if (bFld) continue;
            fFld += fFld;
            i >>>= Test.iFld;
            Test.instanceCount *= i2;
            Test.instanceCount *= 2L;
            i = (int)Test.instanceCount;
        }
        i2 -= i2;
        i17 = 1;
        do {
            for (i18 = 1; i18 < 70; i18++) {
                i2 = (int)-4L;
                switch (((i17 >>> 1) % 2) + 79) {
                case 79:
                    try {
                        iArr2[i17 - 1] = (Test.iFld % -51167);
                        i = (i18 % i1);
                        i2 = (2000 % i18);
                    } catch (ArithmeticException a_e) {}
                    i2 = (int)Test.instanceCount;
                    Test.instanceCount = by;
                    i2 -= i;
                case 80:
                    fFld += (((i18 * Test.instanceCount) + sFld) - i);
                    fFld += i2;
                    i2 <<= (int)Test.instanceCount;
                    break;
                default:
                    fFld += by;
                }
                fFld -= i;
                i2 += (i18 - i);
                fFld += (((i18 * Test.instanceCount) + i2) - i19);
                lArr[i17 - 1] = i1;
                iArr2[i18 - 1] |= Test.iFld;
            }
        } while (++i17 < 362);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
