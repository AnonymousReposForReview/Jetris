package tests.javafuzzer2100;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:07:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-129L;
    public static float fFld=83.371F;
    public static byte byFld=-20;
    public short sFld=-4726;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(long l, int i7, double d1) {

        boolean b=false;
        int i8=-23519, i9=-129, i10=1, i11=4, i12=57424, i13=24, iArr[]=new int[N];
        byte by=67;

        FuzzerUtils.init(iArr, -12962);

        if (b) {
            i7 = i7;
        } else {
            i8 = 1;
            do {
                for (i9 = 6; i9 > 1; i9 -= 3) {
                    i10 += (((i9 * by) + i10) - l);
                    i7 += (int)d1;
                    i10 |= 18657;
                }
                for (i11 = i8; i11 < 6; i11++) {
                    i13 = 1;
                    while ((i13 += 3) < 1) {
                        int i14=-4812;
                        l *= i11;
                        iArr[i11] *= i12;
                        Test.instanceCount = i14;
                        Test.instanceCount >>= i8;
                    }
                    i7 >>>= (int)l;
                    i12 *= (int)3556912324697334099L;
                }
            } while (++i8 < 279);
        }
        long meth_res = l + i7 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i8 + i9 + i10 + by + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i5, int i6, float f) {

        double d2=76.71010;
        byte by1=-25;
        short s=23499;
        int i15=27167, i16=-37, i17=54588, i18=120, i19=-5, i20=32119, iArr1[][]=new int[N][N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, 12);

        i5 = iMeth2(Test.instanceCount, i6, d2);
        Test.fFld = f;
        d2 = i6;
        i5 -= (int)f;
        by1 = (byte)s;
        for (i15 = 181; i15 > 7; i15 -= 3) {
            i16 = i15;
            for (i17 = 1; i17 < 26; ++i17) {
                for (i19 = i17; i19 < 2; i19++) {
                    d2 = i5;
                    i16 += (((i19 * i19) + Test.instanceCount) - i15);
                    if (b1) {
                        iArr1 = iArr1;
                        i5 = -51211;
                        i5 <<= i20;
                    } else {
                        i16 -= i18;
                    }
                }
            }
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + by1 + s + i15 + i16 + i17 +
            i18 + i19 + i20 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, double d) {

        int i21=-30931, i22=-221, i23=6, i24=-3, i25=2968, iArr2[]=new int[N];
        double d3=13.108872;

        FuzzerUtils.init(iArr2, -13);

        d += iMeth1(i4, i4, Test.fFld);
        for (i21 = 10; i21 < 336; ++i21) {
            i22 += (i21 * i21);
            i22 += -11600;
            switch (((i21 % 2) * 5) + 87) {
            case 90:
                i4 += (38448 + (i21 * i21));
                i4 <<= i22;
                break;
            case 96:
                i4 = (int)d;
                break;
            }
            for (d3 = 1; 5 > d3; ++d3) {
                for (i24 = 1; i24 < 2; ++i24) {
                    i25 += (i24 ^ Test.instanceCount);
                    iArr2[i21 - 1] -= 5118;
                    i22 = i21;
                    iArr2[i21 - 1] >>= i24;
                    i22 += i21;
                }
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d) + i21 + i22 + Double.doubleToLongBits(d3) + i23 + i24 + i25 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=32881, i2=-979, i3=-113, i28=-132, i29=13, i30=66, iArr3[]=new int[N];
        double d4=-2.123167;
        boolean b2=true;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.140F);
        FuzzerUtils.init(iArr3, -3);
        FuzzerUtils.init(lArr, 1245649899L);

        for (i = 15; i < 377; ++i) {
            i1 += i;
        }
        for (i2 = 10; 171 > i2; ++i2) {
            i1 = Math.max((i * -212) - i2, (i1 + i2) + i);
            fArr = fArr;
            Test.fFld -= (i3 = iMeth(i2, d4));
            d4 = i;
            i3 -= (int)-193L;
            i28 = 1;
            do {
                lArr[i28 - 1] <<= i1;
                iArr3[i2 + 1] = i2;
                i3 = (int)-27783L;
                d4 += i1;
                i1 += (int)Test.instanceCount;
                for (i29 = i28; 3 > i29; ++i29) {
                    i1 >>= (int)-62L;
                    lArr[i2 + 1] = i30;
                    if (b2) continue;
                }
                switch ((i2 % 7) + 100) {
                case 100:
                    if (b2) break;
                    i1 <<= (int)Test.instanceCount;
                    break;
                case 101:
                    try {
                        i3 = (-32814 % iArr3[i2]);
                        i30 = (i1 % i29);
                        i3 = (i % -245);
                    } catch (ArithmeticException a_e) {}
                    i1 += (i28 | i3);
                    i3 += (i28 * i28);
                case 102:
                    lArr[i2] = Test.instanceCount;
                    Test.byFld += (byte)i30;
                    break;
                case 103:
                case 104:
                    i1 = (int)Test.instanceCount;
                    Test.instanceCount -= -134;
                    break;
                case 105:
                    iArr3[i28] = sFld;
                    break;
                case 106:
                    i30 *= sFld;
                    break;
                default:
                    i1 *= (int)Test.instanceCount;
                }
            } while ((i28 += 3) < 156);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
