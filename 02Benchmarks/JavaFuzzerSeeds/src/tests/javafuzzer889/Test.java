package tests.javafuzzer889;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:18:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-47L;
    public static double dFld=0.127736;
    public static float fFld=-48.1020F;
    public static volatile boolean bFld=false;
    public static short sFld=-31061;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.dArrFld, 2.48397);
        FuzzerUtils.init(Test.fArrFld, 114.814F);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i7=-35, i8=-5, i9=-52, i10=151, i11=-33229, i12=574, i13=52, i14=205;
        long l2=3065221694L;

        for (i7 = 3; 241 > i7; i7++) {
            Test.bFld = Test.bFld;
            for (i9 = 1; i9 < 7; i9++) {
                Test.fFld += (float)66.1972;
            }
            i11 = i8;
            l2 = i11;
        }
        Test.instanceCount <<= -142;
        i12 = 1;
        do {
            i10 -= i12;
            i11 += i12;
            Test.fFld -= i12;
            for (i13 = 8; i13 > 1; --i13) {
                i10 += (i13 | i13);
            }
            f = i11;
            i11 <<= (int)-2919434207L;
        } while (++i12 < 214);
        vMeth1_check_sum += Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + l2 + i12 + i13 + i14;
    }

    public static void vMeth() {

        int i5=-1, i6=0, i15=9, i16=56112, i17=58426;
        float f1=0.963F;

        for (i5 = 11; i5 < 367; i5++) {
            Test.iArrFld[i5] -= (int)(Test.fFld * (--Test.instanceCount));
            vMeth1(-49.11F);
        }
        Test.sFld -= (short)Test.instanceCount;
        for (i15 = 6; i15 < 386; ++i15) {
            switch (((i15 % 1) * 5) + 20) {
            case 22:
                for (f1 = 1; f1 < 4; ++f1) {
                    Test.dArrFld[(int)(f1 - 1)] += i6;
                    if (Test.bFld) continue;
                    Test.instanceCount += (long)((long)f1 | i16);
                    Test.fArrFld[i15 - 1] += i16;
                }
                i17 += (int)Test.instanceCount;
                Test.fArrFld[i15] += Test.instanceCount;
                break;
            default:
                Test.bArrFld[i15 - 1] = Test.bFld;
                Test.instanceCount += (((i15 * i5) + i5) - i17);
            }
        }
        vMeth_check_sum += i5 + i6 + i15 + i16 + Float.floatToIntBits(f1) + i17;
    }

    public static int iMeth() {

        int i1=-50154, i2=1, i3=13911, i4=-35989;
        long l1=-8172618792571621039L, lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, 19L);
        FuzzerUtils.init(sArr, (short)-19408);

        for (i1 = 6; i1 < 201; ++i1) {
            i2 -= (int)((Test.instanceCount + Test.dFld) * (-(-(Test.dFld + i2))));
        }
        for (long l : lArr) {
            for (i3 = 1; i3 < 4; ++i3) {
                if (i2 != 0) {
                }
                Test.iArrFld[i3 - 1] <<= (i2++);
                Test.dFld += (i1 - (++i4));
                i4 -= (int)l;
                i4 *= (Test.iArrFld[i3] - Test.iArrFld[i3 - 1]);
                l1 += (0 + (i3 * i3));
                switch ((i3 % 9) + 31) {
                case 31:
                    i2 >>= (Test.iArrFld[i3]++);
                    i2 <<= 53;
                    i2 = (-(++i4));
                    Test.fFld += (--i4);
                    break;
                case 32:
                    i4 *= (int)(i1 + (-(2.324F - (l * -1787569425L))));
                    break;
                case 33:
                    i2 += (i3 * i3);
                    break;
                case 34:
                    i2 += i3;
                    break;
                case 35:
                    if (Test.bFld = ((sArr[i3 - 1][i3 - 1] - (l + l1)) != (--i2))) continue;
                case 36:
                    Test.iArrFld = Test.iArrFld;
                case 37:
                    vMeth();
                    break;
                case 38:
                    Test.fFld -= i4;
                    break;
                case 39:
                    l >>= i4;
                    break;
                default:
                    i2 = (int)1.620F;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + l1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=461, i18=-121, i19=-9, i20=-24691, i21=22569, i22=-12;
        long l3=55419L;
        byte by=40, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)97);

        Test.iArrFld[(i >>> 1) % N] *= iMeth();
        l3 = 1;
        do {
            for (i18 = (int)(l3); i18 < 84; i18++) {
                for (i20 = 1; 1 > i20; i20++) {
                    i += i;
                    if (Test.bFld) break;
                }
                Test.instanceCount += (((i18 * by) + i19) - i19);
                i += 8421;
                i19 += (i18 * i18);
                Test.iArrFld = FuzzerUtils.int1array(N, (int)0);
                by = (byte)i21;
                Test.instanceCount = Test.instanceCount;
                i21 -= (int)Test.dFld;
            }
            switch (((i18 >>> 1) % 9) + 67) {
            case 67:
                Test.iArrFld[(int)(l3 + 1)] = i;
                break;
            case 68:
                if (Test.bFld) break;
                break;
            case 69:
                i22 = 1;
                do {
                    int i23=-34534;
                    switch (((i20 >>> 1) % 3) + 96) {
                    case 96:
                        i19 = by;
                        byArr[i22] = (byte)i18;
                        Test.iArrFld[i22] *= (int)Test.instanceCount;
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    case 97:
                        i21 += (i22 * i19);
                        lArrFld[(int)(l3)][(int)(l3 + 1)] *= (long)Test.fFld;
                        break;
                    case 98:
                        Test.instanceCount += i22;
                        i21 -= i23;
                        Test.fFld += (((i22 * i23) + Test.fFld) - i23);
                        i19 += -29;
                    }
                    Test.instanceCount = (long)-51.407F;
                    i23 += (int)Test.fFld;
                } while (++i22 < 84);
                break;
            case 70:
                Test.instanceCount += (l3 * Test.instanceCount);
            case 71:
                if (false) continue;
                break;
            case 72:
                Test.instanceCount += (l3 - i18);
                break;
            case 73:
                i21 >>= i18;
                break;
            case 74:
                Test.instanceCount = (long)Test.dFld;
                break;
            case 75:
                i19 *= i22;
            }
        } while (++l3 < 299);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
