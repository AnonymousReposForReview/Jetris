package tests.javafuzzer155;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:03:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static double dFld=-84.107566;
    public static volatile int iFld=11;
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-5990);
        FuzzerUtils.init(Test.fArrFld, -22.99F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        int i9=-7, i10=0, i11=7, i12=226, iArr1[][]=new int[N][N];
        float f3=-1.519F;
        byte by1=125;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 4);

        if (b1) {
            for (i9 = 11; i9 < 301; i9++) {
                for (i11 = 1; 6 > i11; ++i11) {
                    byte by=-71;
                    i7 -= i12;
                    i7 += i11;
                    f3 *= i7;
                    i7 += (((i11 * by) + i8) - Test.iFld);
                    iArr1[i9][i11] = i11;
                    f3 -= i8;
                    Test.instanceCount = 191;
                }
                i7 = -2;
                by1 += (byte)f3;
                f3 = f3;
                i8 += i9;
                if (b1) break;
            }
        } else {
            Test.instanceCount *= i8;
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) + by1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(short s1, int i5, int i6) {

        float f2=0.583F;
        int i13=6500, i14=-119, i15=-7, i16=-55393, i17=31571, i18=-17, i19=38582, i20=-43371, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 30360);

        Test.instanceCount ^= (long)((--i6) + ((lArrFld[(i6 >>> 1) % N] -= (long)f2) + (-(-80L >> (long)(Test.dFld *
            i6)))));
        vMeth1(Test.iFld, 24029);
        for (i13 = 181; i13 > 11; --i13) {
            Test.iFld *= Test.iFld;
            i14 >>= i13;
            for (i15 = i13; i15 < 9; ++i15) {
                i16 += i15;
                Test.dFld = 5;
            }
            for (i17 = 1; i17 < 9; ++i17) {
                i18 = s1;
                if (false) continue;
                for (i19 = 2; i19 > 1; --i19) {
                    f2 -= i18;
                    iArr2[(i19 >>> 1) % N] *= i18;
                }
            }
            i6 = i5;
        }
        vMeth_check_sum += s1 + i5 + i6 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(short s, boolean b) {

        int i4=-171, i21=25649, i22=194;
        float f1=1.617F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.127867);

        i4 = 1;
        while (++i4 < 123) {
            if (true) {
                Test.sArrFld[i4 + 1] *= (short)f1;
            } else if (b) {
                vMeth((short)(-25257), Test.iFld, Test.iFld);
                if (b) break;
                Test.iFld += (i4 - Test.iFld);
                Test.instanceCount = 51241;
            } else {
                for (i21 = 1; i21 < 13; i21++) {
                    iArrFld[i21] *= (int)f1;
                    Test.fArrFld[i4 + 1] = Test.instanceCount;
                    iArrFld[i21 - 1] += i4;
                    Test.instanceCount ^= -55977;
                    f1 += ((long)i21 ^ (long)i22);
                    dArr[i21 - 1] = i4;
                }
                if (b) continue;
            }
        }
        long meth_res = s + (b ? 1 : 0) + i4 + Float.floatToIntBits(f1) + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=38294, i1=7, i2=214, i3=-20231, i23=-11236, i24=35, i25=-49395, i26=-6587, i27=-14, i28=1, iArr[]=new
            int[N];
        float f=0.748F, f4=39.8F;
        boolean b2=false;
        short s2=-1907;

        FuzzerUtils.init(iArr, 12);

        for (i = 12; i < 204; ++i) {
            for (i2 = 6; i2 < 131; i2++) {
                f = (float)((Test.dFld * (2.567F - (--i1))) + ((7 + iArr[i2 - 1]) + iMeth((short)(-16655), b2)));
                Test.iFld = -13;
                f += (i2 * i2);
                Test.iFld += (int)Test.instanceCount;
                for (i23 = 1; 2 > i23; ++i23) {
                    i3 -= (int)f;
                    Test.instanceCount *= Test.iFld;
                    f -= i1;
                    f += (float)Test.dFld;
                    lArrFld[i2] += i1;
                    Test.dFld -= i23;
                    i3 >>>= i1;
                }
                Test.instanceCount += (i2 * i2);
            }
            i3 = -182;
            i25 = 1;
            while (++i25 < 131) {
                for (f4 = 1; 1 > f4; ++f4) {
                    s2 %= (short)((long)(Test.dFld) | 1);
                }
                f += i23;
                for (i27 = 1; 1 > i27; i27++) {
                    i24 *= i25;
                    i28 = (int)Test.instanceCount;
                    i26 += (i27 * i27);
                    i24 += (i27 * i27);
                    b2 = b2;
                }
                lArrFld[i] += s2;
                iArrFld[i25] %= (int)(i3 | 1);
                b2 = true;
            }
            i28 -= i27;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
