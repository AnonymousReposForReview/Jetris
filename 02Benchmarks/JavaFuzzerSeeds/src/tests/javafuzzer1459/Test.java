package tests.javafuzzer1459;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:02:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static float fFld=-112.479F;
    public static volatile short sFld=29096;
    public static int iFld=50850;
    public short sFld1=-2774;
    public double dFld=-1.84162;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -122);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static void vSmallMeth(double d, long l, int i) {

        double dArr[][]=new double[N][N];
        int iArr[]=new int[N];

        FuzzerUtils.init(dArr, -82.120797);
        FuzzerUtils.init(iArr, 40456);

        dArr[(i >>> 1) % N][(i >>> 1) % N] -= i;
        i *= iArr[(i >>> 1) % N];
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + l + i +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth1() {

        int i3=-1, i5=138, i6=-15, i7=107;
        short s=-22051;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 216L);

        i3 = 1;
        while (++i3 < 319) {
            int i4=101;
            Test.iArrFld[(i3 >>> 1) % N] *= i3;
            i4 <<= i3;
            for (i5 = i3; 5 > i5; ++i5) {
                i6 = i3;
                Test.instanceCount = (long)Test.fFld;
                i4 += (((i5 * i6) + i5) - i5);
                Test.iArrFld[i3 - 1] -= i4;
            }
            switch ((((i3 >>> 1) % 7) * 5) + 46) {
            case 61:
                i4 = i5;
                break;
            case 75:
                i7 = 1;
                do {
                    i6 = i4;
                    s += (short)i7;
                    Test.instanceCount += i7;
                } while (++i7 < 5);
                if (b) continue;
            case 68:
                i6 -= 6750;
            case 47:
                i4 += (4775 + (i3 * i3));
                break;
            case 60:
                i6 += (i3 - i4);
                break;
            case 78:
                if (b) continue;
            case 59:
                Test.instanceCount *= i4;
            }
        }
        long meth_res = i3 + i5 + i6 + i7 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f1) {

        int i2=-14, i8=1067, i9=-56784, i10=-31059;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)93);

        Test.instanceCount <<= -244L;
        i2 -= (int)lMeth1();
        byArr[(i2 >>> 1) % N] -= (byte)i2;
        for (i8 = 6; 145 > i8; i8++) {
            Test.sFld += (short)-12;
            i9 -= i8;
            i10 = 1;
            do {
                Test.iArrFld[i10 - 1] *= (int)Test.instanceCount;
            } while (++i10 < 11);
            if (false) continue;
            Test.instanceCount -= i2;
            i2 = i10;
        }
        i2 = 186;
        Test.sFld += (short)i2;
        Test.sFld = (short)i9;
        Test.iArrFld[(i8 >>> 1) % N] += i10;
        vMeth_check_sum += Float.floatToIntBits(f1) + i2 + i8 + i9 + i10 + FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(int i1) {


        i1 += (int)(((Test.instanceCount * -14) - Test.instanceCount) - (i1 + (Test.instanceCount--)));
        vMeth(0.301F);
        i1 |= (int)Test.instanceCount;
        long meth_res = i1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.786F;
        int i11=16898, i12=-38953, i13=-14, i14=-13, i15=-41650, i16=4;
        byte by=-102;
        boolean b1=true;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.43070);

        for (int smallinvoc=0; smallinvoc<778; smallinvoc++) vSmallMeth((--f) + lMeth(Test.iFld), Test.instanceCount,
            Test.iFld);
        Test.iFld -= Test.iFld;
        Test.instanceCount >>>= sFld1;
        for (i11 = 9; 317 > i11; ++i11) {
            f += -52818L;
            for (i13 = 2; i13 < 82; ++i13) {
                switch (((-53725 >>> 1) % 2) + 59) {
                case 59:
                    Test.instanceCount -= Test.iFld;
                    Test.fFld -= i12;
                    Test.fFld += 5562;
                    break;
                case 60:
                    try {
                        Test.iArrFld[i13 - 1] = (i11 % i13);
                        Test.iArrFld[i11 - 1] = (51683 / Test.iFld);
                        i14 = (Test.iArrFld[i11 - 1] / -41091);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld *= by;
                    Test.iFld -= i11;
                }
                for (i15 = 1; 2 > i15; ++i15) {
                    long l2=45L;
                    i14 >>= (int)Test.instanceCount;
                    i12 += by;
                    dFld *= dFld;
                    dFld -= i14;
                    by ^= (byte)Test.instanceCount;
                    i16 = (int)Test.instanceCount;
                    switch ((i15 % 2) + 88) {
                    case 88:
                        i12 = Test.iFld;
                        Test.instanceCount <<= -55078L;
                        switch ((i13 % 5) + 120) {
                        case 120:
                        case 121:
                            i12 = (int)Test.instanceCount;
                            if (b1) {
                                switch (((i11 % 1) * 5) + 99) {
                                case 100:
                                    Test.sFld += (short)(((i15 * i15) + i16) - Test.iFld);
                                    i16 >>= -184;
                                    Test.iFld += i16;
                                }
                            } else {
                                Test.instanceCount -= (long)f;
                            }
                            break;
                        case 122:
                            Test.iFld -= i15;
                            break;
                        case 123:
                            Test.iFld <<= (int)l2;
                        case 124:
                            Test.iFld = i12;
                            break;
                        default:
                            i14 += Test.sFld;
                        }
                        break;
                    case 89:
                        dArr1[i15 - 1] += i15;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
