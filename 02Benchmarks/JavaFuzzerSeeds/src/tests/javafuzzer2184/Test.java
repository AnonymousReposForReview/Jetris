package tests.javafuzzer2184;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:48:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-108L;
    public static double dFld=-74.89326;
    public static float fFld=-28.522F;
    public volatile long lFld=-5L;
    public static byte byFld=25;
    public boolean bFld=true;
    public float fFld1=-48.823F;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 38941);
        FuzzerUtils.init(Test.sArrFld, (short)21487);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5) {

        int i6=-137, i7=4, i8=-187, i9=-55397, i10=-20824;
        float f1=85.530F;
        long l=-14L;
        boolean b=true;

        i5 <<= i5;
        for (i6 = 12; i6 < 307; i6++) {
            Test.iArrFld[i6] = (int)Test.instanceCount;
            f1 = l;
            for (i8 = 1; i8 < 6; i8++) {
                i7 += i9;
                i5 = i6;
            }
            i10 = 1;
            do {
                try {
                    i9 = (i10 / i10);
                    i9 = (i7 % -49);
                    i7 = (-17 % Test.iArrFld[i10 - 1]);
                } catch (ArithmeticException a_e) {}
            } while (++i10 < 6);
        }
        Test.instanceCount = (long)f1;
        for (int i11 : Test.iArrFld) {
            switch (((i11 >>> 1) % 9) + 86) {
            case 86:
                b = b;
            case 87:
            case 88:
                Test.iArrFld = Test.iArrFld;
            case 89:
                i5 = i7;
                break;
            case 90:
                i5 *= (int)Test.instanceCount;
                break;
            case 91:
                f1 = Test.instanceCount;
                break;
            case 92:
            case 93:
                i5 = 1379;
                break;
            case 94:
                i7 = (int)Test.dFld;
                break;
            default:
                if (b) continue;
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f1) + l + i8 + i9 + i10 + (b ? 1 : 0);
    }

    public static int iMeth(int i3, double d, int i4) {

        int i12=6, i13=-58, i14=-31264, i15=8, i16=163, i17=-93, i18=60556;
        boolean b1=false;
        long l1=-80L;
        float f2=68.493F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)16444);

        vMeth1(52599);
        Test.dFld = i3;
        for (i12 = 3; 261 > i12; i12++) {
            Test.instanceCount += i12;
            for (i14 = 6; 1 < i14; --i14) {
                i3 += (int)(2682168031L + (i14 * i14));
            }
            switch (((i12 % 1) * 5) + 45) {
            case 48:
                for (i16 = 1; 6 > i16; i16++) {
                    b1 = b1;
                    i4 = (int)2.854F;
                    i3 = i17;
                    sArr = sArr;
                    i18 = 1;
                    do {
                        i4 >>= i3;
                        Test.iArrFld[i18] = (int)13L;
                    } while (++i18 < 2);
                }
                break;
            default:
                Test.instanceCount += (((i12 * i12) + l1) - f2);
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18 +
            l1 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s) {

        int i=11, i1=11, i2=-7, i19=-9, i20=-148;
        float f=-71.95F;
        boolean b2=false;

        i = (int)Test.instanceCount;
        for (i1 = 11; i1 < 207; i1++) {
            f = 1;
            do {
                i2 = (int)(i * (iMeth(26948, Test.dFld, i) * 8L));
                i = i2;
                Test.iArrFld[(int)(f)] = i2;
                Test.fFld -= i1;
                i >>= 7951;
            } while (++f < 8);
            for (i19 = 1; i19 < 8; i19++) {
                Test.fFld += i20;
                Test.sArrFld = FuzzerUtils.short1array(N, (short)27234);
                i = (int)Test.instanceCount;
                if (b2) continue;
                i2 -= (int)f;
                Test.iArrFld[(11 >>> 1) % N] = i;
            }
        }
        vMeth_check_sum += s + i + i1 + i2 + Float.floatToIntBits(f) + i19 + i20 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        short s1=12048;
        int i21=-152, i22=-50117, i23=-29940, i24=-94, i25=-189, i26=-5, i27=-63623, i28=-168, i29=2, i30=25242, i31=8,
            iArr[]=new int[N];
        float f3=-1.621F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 163);
        FuzzerUtils.init(lArr, -1L);

        vMeth(s1);
        for (i21 = 10; i21 < 204; ++i21) {
            lFld += (-5L + (i21 * i21));
            for (i23 = 3; i23 < 129; i23++) {
                i22 += i23;
                i22 -= i23;
                for (i25 = 1; i25 < 2; i25++) {
                    lFld += i25;
                    Test.dFld -= -64648;
                    i22 = i26;
                    Test.dFld -= Test.fFld;
                }
                try {
                    i24 = (i23 % Test.iArrFld[i23]);
                    i22 = (24919 / i23);
                    iArr[i23 - 1] = (112 % i23);
                } catch (ArithmeticException a_e) {}
                for (i27 = 1; 2 > i27; i27++) {
                    i26 <<= (int)-2L;
                    Test.fFld += (float)Test.dFld;
                    i24 += i27;
                    Test.iArrFld[i21 + 1] &= i26;
                    i22 += (i27 * Test.byFld);
                }
                lArr[i23] -= (long)-1.378F;
            }
            if (bFld) break;
            for (i29 = 1; i29 < 129; ++i29) {
                i24 += i29;
                i26 += (((i29 * Test.byFld) + Test.fFld) - fFld1);
                for (f3 = i21; f3 < 2; f3++) {
                    iArr[i29] += i21;
                    Test.dFld = i31;
                    Test.instanceCount = Test.instanceCount;
                    i28 = (int)Test.dFld;
                    iArr[i29 + 1] |= s1;
                    iArr[i29] += i27;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
