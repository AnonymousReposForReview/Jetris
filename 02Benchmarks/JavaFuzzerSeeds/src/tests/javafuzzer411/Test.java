package tests.javafuzzer411;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:19:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-19131L;
    public static int iFld=-20504;
    public static float fFld=-107.835F;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)5933);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        double d=0.66848;
        int i=-107, i1=46, i2=50837, i3=102, i4=89, i5=-54903, i6=9, i7=-29663, iArr1[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 218L);
        FuzzerUtils.init(iArr1, 5);

        d = 1;
        while (++d < 315) {
            Test.iFld += Test.iFld;
        }
        for (i = 4; i < 270; i++) {
            for (i2 = i; i2 < 6; ++i2) {
                lArr1[i2 + 1] = i3;
                Test.instanceCount += (i2 * i2);
                i3 += (int)Test.instanceCount;
                Test.sArrFld[i2 - 1] >>= (short)-7;
                i1 *= (int)Test.instanceCount;
            }
            iArr1[i - 1][i] = (int)Test.instanceCount;
            for (i4 = i; i4 < 6; i4 += 2) {
                for (i6 = 1; i6 > 1; i6 -= 3) {
                    i7 = i1;
                }
                i3 = Test.iFld;
                Test.instanceCount |= Test.iFld;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + i4 + i5 + i6 + i7 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        double d1=1.106011;
        int i8=-35963, i9=227, i10=-42999, i11=148, i12=28096, iArr[]=new int[N], iArr2[][]=new int[N][N];

        FuzzerUtils.init(iArr, 20543);
        FuzzerUtils.init(iArr2, -224);

        Test.instanceCount <<= iArr[(Test.iFld >>> 1) % N];
        vMeth1();
        Test.iFld = (int)d1;
        iArr[(Test.iFld >>> 1) % N] <<= Test.iFld;
        for (i8 = 5; i8 < 176; ++i8) {
            short s=-6954;
            Test.iFld >>= Test.iFld;
            iArr[i8] *= (int)d1;
            try {
                iArr2[i8 - 1][i8 + 1] = (i8 / i8);
                i9 = (-1423213987 / iArr[i8]);
                Test.iFld = (Test.iFld / 18785);
            } catch (ArithmeticException a_e) {}
            iArr[i8 - 1] *= s;
            i9 = (int)Test.instanceCount;
            s -= (short)Test.instanceCount;
            for (i10 = 1; i10 < 9; ++i10) {
                i12 += -8;
                if (i8 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                Test.iFld += i10;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        double d2=41.83589;
        int i13=1548, i14=-34772, i15=-13, i16=-15219;
        float f=-2.872F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 47L);

        lArr = lArr;
        vMeth();
        Test.iFld = Test.iFld;
        d2 += Test.iFld;
        Test.instanceCount += -27812;
        Test.instanceCount += -57;
        Test.iFld += (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        Test.iFld >>>= (int)63904L;
        Test.instanceCount += (long)-2.468F;
        for (i13 = 6; i13 < 262; i13++) {
            for (i15 = 1; i15 < 6; i15++) {
                f = f;
                Test.iFld -= (int)d2;
                i16 += (i15 * i15);
            }
        }
        long meth_res = Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=135, i18=1, i19=28104, i20=15, i21=-16416, i22=-106, iArr3[]=new int[N];
        double d3=-2.43724;
        boolean b=true;
        short s1=-7583;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr3, 3);
        FuzzerUtils.init(fArr, -11.152F);

        Test.iFld *= (int)((iMeth() + Test.instanceCount) - Test.fFld);
        iArr3 = FuzzerUtils.int1array(N, (int)-13928);
        i17 = 1;
        while (++i17 < 314) {
            fArr[i17 + 1] += -38L;
        }
        Test.iFld = 172;
        Test.instanceCount = Test.iFld;
        iArr3[(i17 >>> 1) % N] -= (int)Test.instanceCount;
        fArr[(i17 >>> 1) % N] *= Test.fFld;
        for (i18 = 241; i18 > 3; i18--) {
            for (d3 = 3; 106 > d3; d3++) {
                if (b) break;
                for (i21 = 1; i21 < 2; i21 += 3) {
                    if (b) {
                        iArr3[i21] >>>= (int)Test.instanceCount;
                        Test.instanceCount >>= Test.instanceCount;
                        i20 += i21;
                        Test.instanceCount -= i17;
                    } else {
                        Test.iFld = 14;
                    }
                    Test.instanceCount <<= Test.instanceCount;
                    iArr3[(int)(d3 - 1)] = (int)-102L;
                    b = b;
                    iArr3[i21] += (int)Test.fFld;
                    Test.iFld = 153;
                    Test.instanceCount -= i17;
                    Test.instanceCount /= (i19 | 1);
                }
                b = false;
                b = b;
                Test.instanceCount = Test.iFld;
                s1 >>= (short)Test.instanceCount;
                s1 = (short)152;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
