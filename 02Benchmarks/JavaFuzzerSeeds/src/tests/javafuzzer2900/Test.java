package tests.javafuzzer2900;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:43:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7819008107512104192L;
    public int iFld=-71;
    public static byte byFld=11;
    public static int iFld1=39;
    public static float fFld=30.1022F;
    public boolean bFld=false;
    public double dFld=-2.42006;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 34.896F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {

        int i5=-58412, i6=-101, i7=-7, i8=-8, i9=-77, iArr1[]=new int[N];
        double d=33.112940;
        boolean b=true;
        short s=-10722, sArr[][]=new short[N][N];
        float f=99.552F;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)29);
        FuzzerUtils.init(lArr, 251L);
        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(sArr, (short)-21083);

        for (i5 = 17; i5 < 298; ++i5) {
            switch (((i5 % 10) * 5) + 51) {
            case 72:
                for (d = 1; 6 > d; ++d) {
                    i6 -= i4;
                    b = b;
                    byArr[(int)(d)] = (byte)i5;
                    Test.byFld = (byte)i5;
                    i6 = (int)Test.instanceCount;
                    i6 += (int)d;
                    lArr[(int)(d - 1)] = s;
                    for (i8 = 1; i8 < 2; i8 += 3) {
                        try {
                            Test.iFld1 = (i8 / 228);
                            Test.iFld1 = (-9970 % iArr1[(int)(d + 1)]);
                            i7 = (230 % i4);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (45 + (i8 * i8));
                        iArr1[i8 - 1] <<= Test.iFld1;
                        i9 >>>= i4;
                    }
                }
                break;
            case 98:
                i7 -= i6;
                break;
            case 87:
                f -= Test.iFld1;
                break;
            case 86:
                sArr[i5][i5] = (short)i4;
                break;
            case 91:
                Test.fArrFld[i5 - 1] *= Test.iFld1;
            case 77:
                i7 += i5;
            case 68:
                i7 |= 12;
                break;
            case 84:
                Test.instanceCount >>= i4;
                break;
            case 81:
                i9 = 1;
            case 52:
                Test.iFld1 += i5;
                break;
            default:
                i4 >>= 150;
            }
        }
        long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0) + s + i8 + i9 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i3) {

        int i11=4, i12=12, i13=-65106, i14=26395, i15=-56290, i16=6, i17=-62;
        short s1=1049;
        float f1=93.534F;

        iMeth1(Test.iFld1);
        Test.fFld = i3;
        for (i11 = 313; i11 > 7; --i11) {
            i12 += i12;
            i13 = 1;
            while (++i13 < 5) {
                for (i14 = 1; i14 < 1; i14++) {
                    double d1=1.96712;
                    l = s1;
                    switch ((i14 % 1) + 81) {
                    case 81:
                        Test.iFld1 = i3;
                        break;
                    default:
                        Test.iFld1 -= i12;
                    }
                    d1 *= Test.instanceCount;
                }
                Test.iFld1 += i15;
                for (i16 = 1; i16 < 1; i16++) {
                    i15 *= (int)1.524F;
                    f1 -= 4994L;
                }
            }
        }
        vMeth_check_sum += l + i3 + i11 + i12 + i13 + i14 + i15 + s1 + i16 + i17 + Float.floatToIntBits(f1);
    }

    public static int iMeth(int i) {

        int i1=-13905, i2=-8, i18=53800, iArr[]=new int[N];
        float f2=72.652F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -73);
        FuzzerUtils.init(lArr1, 5664398448743735686L);

        i += (int)Test.instanceCount;
        for (i1 = 6; i1 < 356; i1++) {
            i += i1;
            iArr[i1 - 1] += ((21920 / ((i1 + i2) | 1)) >> (--i2));
            vMeth(Test.instanceCount, i);
            i2 -= (int)Test.instanceCount;
            Test.fArrFld[i1] *= Test.fFld;
            Test.iFld1 = (int)Test.fFld;
            Test.iFld1 += (i1 * i1);
        }
        for (f2 = 6; 183 > f2; ++f2) {
            Test.fArrFld[(int)(f2 - 1)] -= -25142L;
            lArr1[(int)(f2)] *= Test.instanceCount;
            iArr[(int)(f2 + 1)] += Test.iFld1;
            i %= -13;
            i18 = i;
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f2) + i18 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=-252, i20=-2, i21=0, i22=0, i23=-10, i24=14, i25=-98, i26=-42505, i27=-98, i28=7;

        iFld += (int)(iMeth(iFld) + Test.instanceCount);
        Test.fArrFld[(-7 >>> 1) % N] %= (Test.instanceCount | 1);
        for (float f3 : Test.fArrFld) {
            iFld *= (int)f3;
        }
        iArrFld = iArrFld;
        for (i19 = 6; i19 < 255; ++i19) {
            Test.iFld1 += i19;
            for (i21 = 5; i21 < 101; i21++) {
                for (i23 = 1; i23 < 2; ++i23) {
                    Test.iFld1 >>= i23;
                }
                Test.instanceCount = 6L;
                if (bFld) break;
                iArrFld = iArrFld;
                i20 += (((i21 * Test.fFld) + i24) - Test.iFld1);
                iArrFld[(i19 >>> 1) % N] = (int)dFld;
                i24 += i21;
            }
            if (bFld) {
                i24 += i19;
                dFld = dFld;
                if (bFld) continue;
            } else {
                Test.fArrFld[i19 - 1] *= Test.iFld1;
                for (i25 = 3; i25 < 101; i25++) {
                    i26 -= 3;
                    Test.instanceCount = 210;
                    for (i27 = 1; i27 < 2; ++i27) {
                        i20 = (int)Test.fFld;
                        Test.iFld1 *= -12;
                        i22 += (int)Test.fFld;
                    }
                    Test.instanceCount = i24;
                }
                if (false) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
