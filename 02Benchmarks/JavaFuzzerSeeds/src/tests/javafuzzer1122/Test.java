package tests.javafuzzer1122;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:48:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public int iFld=-1327;
    public static float fFld=2.734F;
    public byte byFld=-109;
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static volatile long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.10804);
        FuzzerUtils.init(Test.fArrFld, 21.170F);
        FuzzerUtils.init(Test.lArrFld1, 20143L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9, int i10) {

        int i11=5, i12=7, i13=52977, i14=32, i15=19030, iArr[]=new int[N];
        short s1=-12556;
        byte by1=10;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3377L);
        FuzzerUtils.init(iArr, -38719);

        for (float f : Test.fArrFld) {
            for (i11 = 1; i11 < 4; ++i11) {
                double d=0.62025;
                for (i13 = i11; i13 < 2; ++i13) {
                    s1 -= (short)Test.fFld;
                    f = i14;
                    i8 -= i14;
                    i9 = i15;
                }
                f = (float)-117.34776;
                i9 = by1;
                d += -32.672F;
                lArr1[i11 - 1] = i11;
                iArr[i11 + 1] += i9;
                Test.instanceCount += (((i11 * Test.fFld) + f) - s1);
            }
            i9 *= i15;
            i15 >>= by1;
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + s1 + i15 + by1 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(byte by, int i5) {

        int i6=58686, i7=148, i16=-11548, i17=164, iArr1[][]=new int[N][N];
        short s2=23668;
        double d1=-2.124095;
        boolean b=true;

        FuzzerUtils.init(iArr1, -178);

        for (i6 = 17; i6 < 384; ++i6) {
            vMeth1(i7, i7, i6);
            i7 *= s2;
            i5 = i6;
            if (b) {
                i7 -= i5;
                by = (byte)Test.instanceCount;
                switch (((i6 % 1) * 5) + 58) {
                case 59:
                    d1 -= 71;
                    break;
                }
            } else if (b) {
                i7 = i6;
                for (i16 = 1; i16 < 5; i16++) {
                    i7 = i17;
                    iArr1[i6][i6 - 1] >>= by;
                    s2 += (short)i16;
                    i7 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = by + i5 + i6 + i7 + s2 + Double.doubleToLongBits(d1) + i16 + i17 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s, int i2) {

        int i3=4, i4=-36239, i18=32160, i19=1;
        byte by2=-42;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);

        for (i3 = 11; i3 < 229; ++i3) {
            i4 += i3;
            lArr[i3 + 1] |= lMeth(by2, i4);
            if (b1) break;
            s += (short)(i3 * i3);
            Test.instanceCount += (i3 | i2);
            by2 = (byte)20939;
            Test.instanceCount += (((i3 * i2) + Test.instanceCount) - i4);
            i4 += (i3 * i3);
            if (false) break;
            Test.instanceCount = i18;
        }
        i2 = 42631;
        i19 = 1;
        do {
            i2 &= (int)-6L;
            Test.instanceCount = i3;
        } while (++i19 < 212);
        vMeth_check_sum += s + i2 + i3 + i4 + by2 + (b1 ? 1 : 0) + i18 + i19 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=57470, i1=34268, i20=49978, i21=147, i22=200, i23=63, i24=11, i25=-8, i26=7142, iArr2[]=new int[N];
        short s3=-21580, sArr[][]=new short[N][N];
        byte by3=63, byArr[]=new byte[N];
        boolean b2=false;
        long l1=1L;

        FuzzerUtils.init(iArr2, 69);
        FuzzerUtils.init(byArr, (byte)-6);
        FuzzerUtils.init(sArr, (short)-17277);

        try {
            Test.dArrFld[(iFld >>> 1) % N] += (((Test.fFld - Test.instanceCount) * (10L >> (lArrFld[(iFld >>> 1) % N] =
                iFld))) + (++Test.fFld));
            Test.fArrFld[(iFld >>> 1) % N] += (Test.fFld--);
            for (i = 9; 276 > i; ++i) {
                vMeth(s3, i);
                for (i20 = 94; i20 > i; i20--) {
                    Test.fArrFld[i] += iFld;
                    iArr2[i] *= iFld;
                    lArrFld[i - 1] <<= by3;
                }
                Test.dArrFld[i - 1] *= i;
                i1 = iFld;
                if (b2) continue;
                i21 += (-6 + (i * i));
                iFld += (((i * i1) + i21) - Test.instanceCount);
                Test.instanceCount = Test.instanceCount;
            }
            for (l1 = 18; l1 < 380; l1++) {
                Test.instanceCount = i1;
                Test.instanceCount -= -43341L;
                byArr[(int)(l1 + 1)] = (byte)iFld;
                i1 += (int)(l1 * l1);
                for (i23 = (int)(l1); i23 < 70; i23++) {
                    b2 = b2;
                    Test.fFld = iFld;
                    lArrFld[(int)(l1)] = l1;
                    for (i25 = 1; i25 < 1; i25++) {
                        if (b2) break;
                        i24 -= (int)l1;
                        i24 += (((i25 * i26) + i26) - i25);
                        i1 += byFld;
                        Test.instanceCount += i20;
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            iArr2 = FuzzerUtils.int1array(N, (int)-197);
        }
        finally {
            sArr[(i25 >>> 1) % N] = sArr[(-4 >>> 1) % N];
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
