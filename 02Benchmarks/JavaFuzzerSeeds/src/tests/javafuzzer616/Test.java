package tests.javafuzzer616;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:40:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-15543L;
    public static int iFld=0;
    public static float fFld=63.683F;
    public static int iFld1=63198;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth() {

        double d=-49.47304;
        int iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(sArr, (short)9924);

        iArr[(Test.iFld >>> 1) % N] += (int)Test.fFld;
        sArr[(Test.iFld >>> 1) % N] -= (short)(((--Test.iFld) * (d = Test.iFld)) - ((-(Test.fFld + Test.iFld)) +
            Test.instanceCount));
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(byte by, double d1, int i4) {

        int i5=-3, i6=3, i7=-114, i8=-4, i9=62, i10=202;
        boolean b=false;

        for (i5 = 11; i5 < 340; i5++) {
            vSmallMeth();
            for (i7 = 1; i7 < 5; i7 += 3) {
                Test.iFld = i5;
                if (b) break;
                for (i9 = 1; i9 < 5; i9++) {
                    d1 -= 4040544121L;
                    Test.fFld += Test.instanceCount;
                    i10 *= i4;
                    by -= (byte)Test.iFld;
                    Test.iFld = 7;
                    Test.fFld += Test.fFld;
                    i10 += i9;
                    Test.instanceCount += (-22 + (i9 * i9));
                }
                d1 = 0.459F;
            }
        }
        long meth_res = by + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        byte by1=-113;
        int i12=-7, i13=-58890, i14=4, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -33448L);
        FuzzerUtils.init(iArr2, -7);

        try {
            Test.iFld += (((i2 *= Test.iFld) * iMeth(by1, -48.116755, Test.iFld)) * i1);
            i3 *= (int)Test.instanceCount;
            lArr[(Test.iFld >>> 1) % N] = -22;
            for (int i11 : iArr2) {
                lArr[(Test.iFld >>> 1) % N] += i2;
                iArr2[(7 >>> 1) % N] = Test.iFld;
                for (i12 = 1 - 400; i12 < 4; i12++) {
                    Test.instanceCount += (((i12 * by1) + i13) - Test.iFld);
                    iArr2[i12 - 1] = 8;
                    i14 = 1;
                    do {
                        i11 = i12;
                        i13 = i1;
                        i11 >>= Test.iFld;
                        i3 &= i13;
                    } while (++i14 < 1);
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
        }
        vMeth_check_sum += i1 + i2 + i3 + by1 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        long l=-1698610275L;
        int i=81, i15=241, i16=-141, i17=-1, i18=-8, i19=0, i20=23, iArr1[]=new int[N];
        double d2=-77.24749;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 34713);

        Test.iFld += (int)2.1874;
        for (int smallinvoc=0; smallinvoc<423; smallinvoc++) vSmallMeth();
        for (l = 13; 319 > l; ++l) {
            Test.fFld = (((i - Test.instanceCount) + (Test.iFld * Test.instanceCount)) - (Math.min(Test.iFld, i) %
                (iArr1[(int)(l)] | 1)));
            vMeth(Test.iFld, i, Test.iFld);
        }
        for (i15 = 4; i15 < 183; ++i15) {
            i17 = 1;
            do {
                for (i18 = 1; 1 > i18; ++i18) {
                    iArr1[i18 + 1] >>= i19;
                    Test.instanceCount += i18;
                    Test.iFld = (int)Test.instanceCount;
                    switch ((i17 % 5) + 13) {
                    case 13:
                    case 14:
                        i19 = (int)Test.instanceCount;
                        i20 = i20;
                        if (b1) {
                            Test.fFld += i17;
                            Test.iFld += i18;
                            Test.iFld1 *= (int)Test.fFld;
                        } else if (true) {
                            d2 -= Test.fFld;
                            Test.fFld += l;
                        } else {
                            d2 *= -6L;
                            if (b1) {
                                Test.instanceCount >>= i20;
                                i19 += (((i18 * l) + l) - i16);
                                iArr1 = iArr1;
                            } else {
                                Test.instanceCount = (long)d2;
                                i19 = 0;
                                Test.instanceCount += (i18 ^ i18);
                                Test.iFld1 = Test.iFld;
                            }
                            Test.iFld = (int)Test.instanceCount;
                        }
                        break;
                    case 15:
                        iArr1[i17 + 1] += Test.iFld;
                        break;
                    case 16:
                        Test.iFld -= (int)-13L;
                        break;
                    case 17:
                        if (b1) continue;
                    default:
                        Test.instanceCount += (i18 * i18);
                    }
                }
            } while (++i17 < 140);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
