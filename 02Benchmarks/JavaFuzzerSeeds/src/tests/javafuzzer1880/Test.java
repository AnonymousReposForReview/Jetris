package tests.javafuzzer1880;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:16:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=40790L;
    public static boolean bFld=false;
    public static long lFld=1659246430232250092L;
    public static volatile byte byFld=96;
    public int iFld=-46945;
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.31210);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static boolean bMeth(int i, double d, int i1) {

        int i2=-93, i3=-11, i4=-5, i5=9, i6=13;
        float f=55.696F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-127);
        FuzzerUtils.init(fArr, 0.846F);

        for (i2 = 4; i2 < 253; ++i2) {
            for (i4 = 1; i4 < 7; i4++) {
                if (Test.bFld) continue;
                i5 = (i * (byArr[i2 + 1] * i2));
                i = (int)d;
                i6 = 1;
                while (++i6 < 2) {
                    i5 -= (int)f;
                    Test.instanceCount = (long)(++fArr[i6 - 1]);
                    Test.instanceCount = (i1--);
                    Test.lFld += (Test.lFld--);
                    Test.lFld = i2;
                    switch ((((i3--) >>> 1) % 1) + 114) {
                    case 114:
                        i5 += i6;
                        Test.bFld = (Test.instanceCount <= Math.abs(--Test.lFld));
                    }
                }
                i3 += i4;
            }
        }
        long meth_res = i + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth2(short s) {

        int i9=-14;

        i9 += i9;
        vMeth2_check_sum += s + i9;
    }

    public static void vMeth1(int i8, long l, long l1) {

        short s1=17706;
        float f2=89.162F;
        int i10=2, i11=-1805, i12=-243, i13=-65116, i14=7;
        byte by=95;
        double d1=-1.37964;

        vMeth2(s1);
        i8 = (int)f2;
        for (i10 = 6; i10 < 321; i10++) {
            i12 = 1;
            while (++i12 < 5) {
                Test.lFld += i12;
                by += (byte)(-23114 + (i12 * i12));
                Test.bFld = Test.bFld;
                i11 %= (int)((long)(f2) | 1);
                for (i13 = i10; 1 > i13; i13++) {
                    f2 += (i13 * i13);
                    d1 = i14;
                    Test.lFld += (i13 | i10);
                    i14 *= i12;
                    i8 = (int)Test.lFld;
                    i14 >>>= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i8 + l + l1 + s1 + Float.floatToIntBits(f2) + i10 + i11 + i12 + by + i13 + i14 +
            Double.doubleToLongBits(d1);
    }

    public static void vMeth() {

        boolean b=true;
        int i7=-13, i15=-254, i16=39, i17=-9, i18=-31876, i19=38183, i20=18000, iArr[]=new int[N];
        float f1=41.945F;

        FuzzerUtils.init(iArr, 6);

        b = ((b = false) || bMeth(iArr[(i7 >>> 1) % N], Test.dArrFld[(i7 >>> 1) % N][(-13 >>> 1) % N], (int)(f1 * i7)));
        vMeth1(i7, Test.lFld, Test.lFld);
        for (i15 = 166; 4 < i15; --i15) {
            i16 += (115 + (i15 * i15));
            i7 -= (int)f1;
        }
        for (i17 = 398; i17 > 22; --i17) {
            Test.instanceCount = i16;
            for (i19 = 1; i19 < 4; ++i19) {
                switch ((i17 % 6) + 56) {
                case 56:
                    i20 *= (int)f1;
                    if (Test.bFld) break;
                    Test.bFld = false;
                    Test.instanceCount += (i19 * i19);
                    break;
                case 57:
                    iArr[i17] >>= i16;
                    i16 = i7;
                    break;
                case 58:
                    i18 = i7;
                    break;
                case 59:
                    Test.byFld >>= (byte)Test.instanceCount;
                case 60:
                    Test.instanceCount = i7;
                case 61:
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i7 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=9, i22=13, i23=-117, i24=-57360, i25=7980, i26=3596, i27=-9, i28=-37030, i29=8, i30=11882, i31=245,
            i32=-14, i33=45037, iArr1[][]=new int[N][N];
        long l2=-119L;
        double d2=2.59293;
        float f3=54.223F;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr1, 72);
        FuzzerUtils.init(byArr1, (byte)82);

        vMeth();
        for (i21 = 13; i21 < 231; i21++) {
            for (i23 = 6; i23 < 115; i23 += 2) {
                for (l2 = 1; 3 > l2; l2 += 3) {
                    if (Test.bFld) {
                        d2 *= Test.instanceCount;
                        i22 = i23;
                        i24 = i23;
                        Test.byFld *= (byte)Test.lFld;
                    }
                    i25 *= (int)d2;
                    if (false) continue;
                }
                for (i26 = 1; i26 < 3; ++i26) {
                    d2 += -2.676F;
                }
                i22 += (i23 ^ (long)f3);
                i25 += i27;
                f3 += i23;
                i22 >>>= i27;
                Test.lFld = i26;
                i22 += (((i23 * i23) + i23) - i25);
                iArr1[i21 + 1][i23] -= i27;
                i24 -= (int)Test.instanceCount;
            }
        }
        for (i28 = 13; i28 < 258; ++i28) {
            iArr1[i28 - 1][i28] = (int)f3;
        }
        i29 -= -49045;
        if (Test.bFld) {
            for (i30 = 14; i30 < 284; i30++) {
                for (i32 = 93; i32 > 4; i32 -= 2) {
                    i33 >>= iFld;
                    Test.instanceCount = i24;
                    byArr1[i30 + 1] -= (byte)d2;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
