package tests.javafuzzer1665;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:04:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public int iFld=-31;
    public static byte byFld=-38;
    public static short sFld=-32353;
    public static int iFld1=-26;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2, int i3) {

        int i4=-8, i5=5, i6=-17270, iArr[]=new int[N];
        double d2=0.21010;
        boolean b1=true;

        FuzzerUtils.init(iArr, 48093);

        try {
            f2 += i3;
        }
        catch (NullPointerException exc1) {
            i3 = (int)-3516544871L;
            Test.instanceCount = (long)f2;
            if (b1) {
                for (i4 = 14; i4 < 309; i4++) {
                    boolean b=true;
                    if (b) {
                        for (d2 = 1; d2 < 6; d2++) {
                            i3 -= i5;
                        }
                        i5 = i5;
                    }
                    i6 -= i5;
                }
                i5 += (int)3055026962982354199L;
                Test.byFld *= (byte)i5;
                i3 = i3;
                vMeth1_check_sum += Float.floatToIntBits(f2) + i3 + i4 + i5 + Double.doubleToLongBits(d2) + i6 + (b1 ?
                    1 : 0) + FuzzerUtils.checkSum(iArr);
                return;
            } else {
                iArr[(i4 >>> 1) % N] <<= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i3 + i4 + i5 + Double.doubleToLongBits(d2) + i6 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2, long l) {

        float f3=0.294F, f4=0.891F;
        int i7=-35130, i8=120, i9=-1, i10=-2324, i11=-2, i12=53741, i13=-181;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5171306058843182928L);

        i2 = (int)((l = Test.byFld) + (l - (93.24553 * (--i2))));
        vMeth1(f3, i2);
        f3 *= f3;
        f4 -= i2;
        for (i7 = 3; i7 < 199; i7++) {
            lArr = lArr;
            Test.sFld ^= (short)-28;
            for (i9 = 1; 8 > i9; i9++) {
                i11 = (int)Test.instanceCount;
                Test.sFld += (short)(((i9 * i8) + Test.sFld) - i11);
                for (i12 = i7; i12 < 2; ++i12) {
                    lArr[i9] -= i9;
                    i2 -= i9;
                }
            }
            i13 += (i7 * i7);
            Test.byFld += (byte)(((i7 * Test.byFld) + Test.instanceCount) - i13);
        }
        long meth_res = i2 + l + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i7 + i8 + i9 + i10 + i11 + i12 +
            i13 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=2.152F, fArr[]=new float[N];
        int i1=124, i14=-8, i15=-7, i16=28961, i17=-24, i18=-13, i19=-25;
        double d1=-2.17761, dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-13326);
        FuzzerUtils.init(fArr, -1.398F);
        FuzzerUtils.init(dArr, -1.5511);

        f1 = (float)((i1 << (long)(i1 - d1)) * ((d1 - i1) * (i1 ^ i1)));
        sArr = (sArr = (sArr = sArr));
        i1 -= iMeth(i1, Test.instanceCount);
        i1 /= (int)((long)(d1) | 1);
        for (i14 = 2; i14 < 169; i14 += 2) {
            Test.instanceCount >>= i1;
            i1 >>= i1;
            i15 = i15;
        }
        for (i16 = 19; i16 < 356; ++i16) {
            fArr[i16] = 4;
            for (i18 = 1; i18 < 5; ++i18) {
                switch (((i18 % 2) * 5) + 70) {
                case 76:
                    i1 -= (int)d1;
                    i15 += (int)Test.instanceCount;
                    break;
                case 78:
                    try {
                        Test.iFld1 = (i19 / Test.iFld1);
                        i19 = (i17 / i14);
                        i17 = (i19 % -105);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    dArr[i18 - 1] -= i1;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + i18 +
            i19 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-17596, i20=-29116, i21=39194, i22=13, i23=12, i24=-5, i25=-40, i26=120, i27=39, iArr1[]=new int[N];
        float f=0.634F;
        double d=-1.126663;
        boolean b2=true, b3=true;

        FuzzerUtils.init(iArr1, -6);

        i = 1;
        do {
            f += (9 + (i * i));
            iFld = iFld;
            Test.instanceCount -= (long)((-61466 * (d + f)) + ((i + Test.instanceCount) + i));
            vMeth();
            iFld += -8;
            iFld = (int)f;
        } while (++i < 171);
        i20 = 1;
        do {
            f -= 8;
        } while (++i20 < 198);
        for (i21 = 5; i21 < 128; i21++) {
            b2 = b3;
            i23 = 1;
            while (++i23 < 204) {
                for (i24 = 1; 1 > i24; ++i24) {
                    Test.iFld1 += (((i24 * i24) + i21) - Test.iFld1);
                    if (b2) break;
                    iArr1[i24] = iFld;
                    d -= i24;
                    i22 = -10;
                    d = i22;
                    Test.instanceCount >>= i20;
                }
                i25 >>= i22;
                for (i26 = 1; i26 < 1; ++i26) {
                    f += (i26 - Test.iFld1);
                    b3 = b3;
                    iArr1[i21 - 1] -= i22;
                    Test.instanceCount *= i25;
                }
                switch (((iFld >>> 1) % 9) + 21) {
                case 21:
                    i27 += (i23 + Test.instanceCount);
                    Test.instanceCount += (((i23 * i23) + i) - Test.instanceCount);
                    iArr1[i23 - 1] %= (int)(Test.sFld | 1);
                case 22:
                    i27 = 7;
                    break;
                case 23:
                    i22 += i23;
                    break;
                case 24:
                    i25 <<= i24;
                    break;
                case 25:
                    i27 *= (int)Test.instanceCount;
                    break;
                case 26:
                    f += (i23 * i23);
                case 27:
                    if (b3) continue;
                case 28:
                    Test.iFld1 += (i23 * i23);
                    break;
                case 29:
                    Test.instanceCount += i23;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
