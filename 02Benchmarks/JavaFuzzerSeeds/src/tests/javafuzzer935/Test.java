package tests.javafuzzer935;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:50:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=50250L;
    public long lFld=-8703323291918201936L;
    public static float fFld=0.277F;
    public int iFld=117;
    public static long lFld1=-180L;
    public volatile byte byArrFld[][]=new byte[N][N];
    public volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.29505);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(int i5, byte by, long l) {

        int i6=64145, i7=-5, i8=-158, i9=0, i10=-167, iArr1[]=new int[N];
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(fArr, -110.184F);
        FuzzerUtils.init(lArr, 36L);

        iArr1[(i5 >>> 1) % N] |= (int)lFld;
        for (i6 = 5; i6 < 196; i6++) {
            fArr[i6] = -14;
            for (i8 = 1; i8 < 8; i8++) {
                iArr1[i6] *= (int)Test.fFld;
                i10 = 2;
                while (--i10 > 0) {
                    if (true) break;
                    l = i5;
                    switch (((i8 >>> 1) % 8) + 70) {
                    case 70:
                        lArr = lArr;
                    case 71:
                        lFld += 14;
                        iFld += i10;
                        break;
                    case 72:
                        i9 += i10;
                        lArr[i10][i10 - 1] = i7;
                        break;
                    case 73:
                        fArr = FuzzerUtils.float1array(N, (float)-124.773F);
                        break;
                    case 74:
                        try {
                            iFld = (16158 / i7);
                            iArr1[i10] = (i9 % i6);
                            iFld = (i8 % 1253673954);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 75:
                        lArr[i10 - 1][i8 + 1] = l;
                    case 76:
                    case 77:
                        Test.instanceCount += (((i10 * lFld) + i5) - i9);
                    }
                }
            }
        }
        long meth_res = i5 + by + l + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1(int i3, int i4) {

        byte by1=-98;
        int i11=-167, i12=-12408, i13=10, i14=-35997, iArr2[]=new int[N];
        short s1=23681;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 46246L);
        FuzzerUtils.init(iArr2, -8);

        Test.instanceCount -= lMeth(i4, by1, Test.instanceCount);
        lArr1[(i4 >>> 1) % N] >>= lFld;
        iArrFld[(i4 >>> 1) % N] = (int)390196940L;
        iArr2[(iFld >>> 1) % N] -= (int)Test.fFld;
        iArrFld[(iFld >>> 1) % N] += (int)lFld;
        i4 *= i4;
        for (i11 = 11; i11 < 200; ++i11) {
            double d=1.23507;
            for (i13 = 1; 8 > i13; ++i13) {
                lFld = lFld;
            }
            d *= lFld;
            iFld >>= iFld;
        }
        s1 += (short)i12;
        vMeth1_check_sum += i3 + i4 + by1 + i11 + i12 + i13 + i14 + s1 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth() {

        float f=87.487F, f1=0.872F, fArr1[]=new float[N];
        int i1=33708, i2=-37757, i15=86, i16=-8, i17=196, i18=-197, i19=194;
        double d1=19.10898, dArr[]=new double[N];
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr, 2.12611);
        FuzzerUtils.init(lArr2, -48355L);
        FuzzerUtils.init(fArr1, 2.117F);

        f = (++i1);
        for (f1 = 373; f1 > 14; f1--) {
            dArr[(int)(f1 - 1)] = (((-5 + (Test.instanceCount - Test.instanceCount)) & -159) + i1);
            switch ((int)(((f1 % 8) * 5) + 32)) {
            case 53:
                vMeth1(iFld, i1);
                i2 *= (int)d1;
                Test.instanceCount %= (iFld | 1);
                for (i15 = 5; i15 > 1; i15 -= 3) {
                    for (i17 = 1; i17 < 5; ++i17) {
                        if (b) break;
                        Test.fFld -= i16;
                        Test.lFld1 >>= i15;
                        iFld = i18;
                        iArrFld[i17 + 1] += -6;
                        i2 += i17;
                    }
                }
            case 71:
                i16 = i19;
                break;
            case 56:
                lArr2[(int)(f1)] >>>= iFld;
                break;
            case 39:
                Test.instanceCount = i15;
                break;
            case 59:
                if (b) break;
                break;
            case 37:
                i18 = (int)-5L;
                break;
            case 47:
                lArr2[(int)(f1)] += 130;
                break;
            case 33:
                fArr1 = fArr1;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + Float.floatToIntBits(f1) + i2 + Double.doubleToLongBits(d1) +
            i15 + i16 + i17 + i18 + (b ? 1 : 0) + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=60241, i20=57669, i21=6, i22=-13, i23=33324, i24=-26016, i25=16, iArr[]=new int[N];
        short s=13209;
        double d2=-73.69606;
        boolean b1=true;
        byte by2=-62;

        FuzzerUtils.init(iArr, 88);

        i += (++byArrFld[(i >>> 1) % N][(i >>> 1) % N]);
        iArr[(i >>> 1) % N] *= (++iArr[(i >>> 1) % N]);
        i = Math.min((int)((s + Test.instanceCount) - (10041 + Test.instanceCount)), ++i);
        vMeth();
        i = (int)6127257595746400735L;
        d2 *= d2;
        i = 14167;
        i = i;
        switch (((i >>> 1) % 5) + 23) {
        case 23:
            i20 = 1;
            do {
                Test.instanceCount -= (long)d2;
                iFld = (int)Test.fFld;
                for (i21 = 177; i21 > 3; i21 -= 2) {
                    i22 <<= (int)lFld;
                }
                i23 = 1;
                do {
                    for (i24 = 1; i24 > 1; i24--) {
                        if (b1) {
                            b1 = b1;
                        } else if (b1) {
                            lFld = i23;
                        } else if (b1) {
                            i25 += (i24 - by2);
                            i22 ^= 213;
                            by2 = (byte)i25;
                            i22 += (int)lFld;
                        } else {
                            iArr[i23] &= i25;
                            iArrFld[i23 - 1] += (int)Test.instanceCount;
                            i ^= (int)Test.instanceCount;
                            iArrFld[i24 - 1] -= i24;
                        }
                        iFld += (i24 - Test.instanceCount);
                        iFld += (int)lFld;
                    }
                } while (++i23 < 177);
                lFld = i22;
            } while ((i20 += 2) < 285);
            break;
        case 24:
            Test.dArrFld[(i20 >>> 1) % N] = i25;
            break;
        case 25:
            iArr[(i25 >>> 1) % N] >>= i24;
            break;
        case 26:
            i22 = i21;
        case 27:
            lFld = -5;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
