package tests.javafuzzer3442;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:23:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-652651449673195718L;
    public static int iFld=59071;
    public static short sFld=23344;
    public static byte byFld=94;
    public static float fFld=72.175F;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -227);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i5, int i6) {

        double d2=-2.53121, dArr[]=new double[N];
        int i7=-70, i8=19, i9=-14, i10=3689, i11=-12, i12=59376, iArr1[]=new int[N], iArr2[]=new int[N];
        short s=-28151;
        byte by=-33;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -212);
        FuzzerUtils.init(iArr2, -94);
        FuzzerUtils.init(dArr, 0.77429);
        FuzzerUtils.init(bArr, true);

        d2 = i6;
        for (i7 = 15; i7 < 327; i7++) {
            i9 = 1;
            while (++i9 < 5) {
                try {
                    i8 = (i6 / i6);
                    i8 = (i9 % i5);
                    iArr1[i9 + 1] = (i6 % 42901);
                } catch (ArithmeticException a_e) {}
                for (i10 = 1; i10 > 1; i10 -= 3) {
                    i12 = (int)Test.instanceCount;
                    try {
                        i5 = (i8 / 135);
                        i12 = (iArr1[i10 - 1] / -129);
                        i5 = (i10 % iArr2[i10 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i12 += (((i10 * i7) + s) - i11);
                    iArr1[i7] *= by;
                    i12 &= (int)Test.instanceCount;
                    dArr[i7 + 1] -= 5658611391804192812L;
                    i8 -= i7;
                    i11 += (int)-3556627004L;
                    i11 *= (int)f1;
                    bArr[i9] = b;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + i6 + Double.doubleToLongBits(d2) + i7 + i8 + i9 + i10 + i11 +
            i12 + s + by + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(long l1, int i3, long l2) {

        double d1=41.120342;
        int i4=208, i13=-41127, iArr3[]=new int[N];
        float f2=54.475F;

        FuzzerUtils.init(iArr3, 178);

        for (d1 = 6; d1 < 304; d1++) {
            short s1=-15865;
            i3 = (int)(i3 = (int)((d1 - i3) * iMeth(f2, i4, i4)));
            s1 += (short)(((d1 * i3) + l1) - f2);
            l2 += (long)((long)d1 | i4);
        }
        i13 = 1;
        while (++i13 < 151) {
            boolean b1=true;
            i3 |= (int)Test.instanceCount;
            i4 += (-11 + (i13 * i13));
            l1 -= (long)f2;
            l1 += (((i13 * Test.instanceCount) + i3) - Test.iFld);
            b1 = b1;
            iArr3[i13 - 1] |= i3;
            if (b1) break;
            Test.iFld += (i13 * l2);
            if (b1) continue;
            Test.sFld = (short)Test.iFld;
        }
        long meth_res = l1 + i3 + l2 + Double.doubleToLongBits(d1) + i4 + Float.floatToIntBits(f2) + i13 +
            FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f, int i2, double d) {

        int i14=176, i15=-114, i16=-10, i17=-5, i18=14, i19=-29704, iArr[]=new int[N];
        boolean b2=false;
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(dArr1, 0.58238);

        i2 *= (++i2);
        iArr[(220 >>> 1) % N] = (int)fMeth(Test.instanceCount, Test.iFld, Test.instanceCount);
        i2 -= i2;
        for (i14 = 14; i14 < 251; i14++) {
            b2 = b2;
            d += Test.iFld;
            Test.instanceCount -= Test.sFld;
            iArr[i14 - 1] = 13;
            switch (((i14 % 5) * 5) + 68) {
            case 90:
                for (i16 = i14; i16 < 7; i16 += 3) {
                    dArr1[i14 - 1] = Test.iFld;
                    i15 *= 65239;
                    for (i18 = 1; 1 > i18; ++i18) {
                        if (i14 != 0) {
                            vMeth_check_sum += Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) + i14 + i15 +
                                (b2 ? 1 : 0) + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                            return;
                        }
                        i17 = i18;
                    }
                }
                break;
            case 83:
                Test.instanceCount = Test.instanceCount;
            case 93:
                Test.instanceCount -= i2;
                break;
            case 92:
                Test.byFld %= (byte)-4;
                break;
            case 86:
                f = i15;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) + i14 + i15 + (b2 ? 1 : 0) + i16 +
            i17 + i18 + i19 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=-254, i1=226, i20=-51, i21=6, i22=13, i23=-5, i24=-50;
        long l=1768831761671196132L;
        double d3=50.17165, d4=1.111822;
        boolean b3=false;

        i = (i--);
        for (l = 3; l < 254; l++) {
            i1 += (int)l;
            vMeth(Test.fFld, -202, 0.69899);
            i20 = 1;
            while (++i20 < 100) {
                for (d3 = 1; 1 > d3; d3++) {
                    switch ((((-55063 >>> 1) % 2) * 5) + 114) {
                    case 124:
                        Test.instanceCount += (long)Test.fFld;
                        i1 <<= i20;
                        i1 += i1;
                        Test.iArrFld = FuzzerUtils.int2array(N, (int)3630);
                    case 120:
                        lArrFld = lArrFld;
                        break;
                    default:
                        Test.fFld += l;
                        d4 *= i20;
                        lArrFld[(int)(d3 + 1)] += Test.byFld;
                    }
                    switch ((int)((l % 2) + 41)) {
                    case 41:
                        i21 += (int)(((d3 * i20) + i20) - l);
                        Test.iFld = (int)Test.fFld;
                    case 42:
                        i21 -= i20;
                        if (b3) break;
                        break;
                    }
                    if (true) break;
                    try {
                        i21 = (Test.iArrFld[i20][(int)(d3)] % 224);
                        i21 = (1681296297 % Test.iArrFld[(int)(l)][(int)(d3 - 1)]);
                        Test.iArrFld[i20][i20] = (i20 / i1);
                    } catch (ArithmeticException a_e) {}
                    if (b3) continue;
                    i1 *= (int)12L;
                }
            }
            i22 = 1;
            do {
                Test.iFld = Test.iFld;
                switch (((i22 % 4) * 5) + 70) {
                case 85:
                    for (i23 = 1; i23 < 1; ++i23) {
                        d4 -= i22;
                        b3 = b3;
                    }
                    break;
                case 82:
                    i1 += (i22 * i22);
                    break;
                case 89:
                    Test.fFld += i22;
                case 79:
                    Test.iArrFld[i22 + 1][i22] += 1;
                    break;
                default:
                    lArrFld[(int)(l + 1)] *= i1;
                }
            } while (++i22 < 100);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
