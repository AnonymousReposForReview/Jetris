package tests.javafuzzer2315;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:08:06 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=49802L;
    public static int iFld=65161;
    public static volatile boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.lArrFld, 2037893327764797166L);
        FuzzerUtils.init(Test.byArrFld, (byte)-83);
        FuzzerUtils.init(Test.lArrFld1, -28354L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f1=2.116F;
        boolean b1=false;
        double d=-122.7076, d1=-2.94853;
        int i5=0, i6=10;

        for (int i4 : Test.iArrFld) {
            Test.instanceCount = Test.iFld;
            Test.iArrFld[(i4 >>> 1) % N] = (int)f1;
            Test.instanceCount |= Test.instanceCount;
            Test.iFld *= Test.iFld;
            if (b1) {
                if (false) {
                    if (b1) continue;
                    switch (((-8376 >>> 1) % 7) + 22) {
                    case 22:
                        d = 1;
                        while (++d < 4) {
                            b1 = true;
                            for (d1 = 1; d1 < 1; ++d1) {
                                Test.instanceCount -= Test.iFld;
                                i5 = i5;
                                i4 = i4;
                            }
                        }
                        break;
                    case 23:
                        Test.lArrFld[(-36145 >>> 1) % N] >>= i4;
                    case 24:
                        Test.iFld -= (int)72.776F;
                    case 25:
                        i5 *= (int)Test.instanceCount;
                        break;
                    case 26:
                        Test.lArrFld = Test.lArrFld;
                    case 27:
                        i4 <<= i6;
                        break;
                    case 28:
                        b1 = b1;
                        break;
                    }
                } else if (b1) {
                    Test.iArrFld[(-60529 >>> 1) % N] *= i5;
                } else {
                    Test.instanceCount = -28847L;
                }
            } else {
                Test.instanceCount += Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + (b1 ? 1 : 0) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + i5 + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l, int i, int i1) {

        int i2=-48, i3=-6062, i7=0, i8=156, i9=-3, i10=-234;
        float f2=-1.997F, fArr[]=new float[N];
        double d2=1.126612;
        short s=25984;

        FuzzerUtils.init(fArr, 97.535F);

        for (i2 = 12; i2 < 325; i2++) {
            i |= (int)(l++);
            if ((fArr[i2] < iMeth()) && Test.bFld) break;
            for (i7 = 1; i7 < 5; i7++) {
                i1 <<= i7;
                i3 = i2;
                switch ((((i3 >>> 1) % 1) * 5) + 5) {
                case 10:
                }
                i3 += (((i7 * f2) + i3) - i7);
                d2 = i8;
                i8 += i8;
            }
            i1 += i;
            for (i9 = i2; i9 < 5; ++i9) {
                s = (short)i;
                Test.instanceCount = l;
                Test.iArrFld = Test.iArrFld;
            }
        }
        long meth_res = l + i + i1 + i2 + i3 + i7 + i8 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + i9 +
            i10 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(boolean b, byte by) {


        Test.iFld = (int)(-lMeth(Test.instanceCount, Test.iFld, Test.iFld));
        Test.iFld = Test.iFld;
        vSmallMeth_check_sum += (b ? 1 : 0) + by;
    }

    public void mainTest(String[] strArr1) {

        float f=28.650F, fArr1[]=new float[N];
        byte by1=28;
        int i11=3, i12=22869, i13=-176, i14=47708, i16=-106, i17=10, i18=-32356, i19=13, i20=11172, i21=-3, i22=8541;
        long l1=2824174065L;
        short s1=-15767;
        double d3=0.74621;
        boolean b2=true;

        FuzzerUtils.init(fArr1, -1.461F);

        f *= Test.iFld;
        for (int smallinvoc=0; smallinvoc<103; smallinvoc++) vSmallMeth(Test.bFld, by1);
        for (i11 = 4; i11 < 142; i11++) {
            l1 = 36561;
            i13 = 1;
            while (++i13 < 182) {
                i14 = 1;
                do {
                    int i15=-14;
                    Test.iArrFld[i11] &= i15;
                    fArr1[i14] = i11;
                    i12 += (i14 * Test.iFld);
                    i15 >>>= i11;
                    Test.byArrFld[i11] -= (byte)i12;
                    f = f;
                    Test.iArrFld[i11] >>= (int)l1;
                    Test.iArrFld[i14 - 1] = i12;
                } while (++i14 < 1);
                Test.instanceCount += i13;
                f += s1;
            }
            Test.iFld *= i11;
        }
        Test.iArrFld[(i11 >>> 1) % N] = by1;
        for (i16 = 10; i16 < 245; ++i16) {
            for (i18 = 2; 107 > i18; ++i18) {
                i19 = i16;
                i19 <<= i18;
            }
            for (i20 = 2; i20 < 107; i20++) {
                d3 = -49;
                Test.iArrFld = Test.iArrFld;
                Test.bFld = Test.bFld;
                try {
                    i19 = (-32821 / i21);
                    i22 = (Test.iFld % -56);
                    Test.iArrFld[i16] = (-2096651418 % i17);
                } catch (ArithmeticException a_e) {}
                Test.lArrFld1[i16 - 1] *= 0;
                if (b2) break;
                i17 |= i19;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
