package tests.javafuzzer722;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:35:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=108L;
    public static boolean bFld=false;
    public static double dFld=1.42648;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -102.5148);
        FuzzerUtils.init(Test.iArrFld, -137);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i13=-12, i14=-16876, i15=-18401, i16=0, i17=3, iArr1[]=new int[N];
        float f1=1.672F;

        FuzzerUtils.init(iArr1, 87);

        for (i13 = 3; i13 < 248; ++i13) {
            if (Test.bFld) continue;
            f1 += f1;
            for (i15 = 1; 7 > i15; ++i15) {
                i14 += i15;
                i17 = 1;
                do {
                    Test.dArrFld[i15] -= Test.instanceCount;
                    i16 = i14;
                    Test.instanceCount = i15;
                    f1 += i15;
                    switch ((((i15 >>> 1) % 4) * 5) + 14) {
                    case 25:
                        i14 += i17;
                        i16 = i17;
                        Test.instanceCount *= -120;
                        break;
                    case 26:
                        i14 += i17;
                        break;
                    case 16:
                        Test.bFld = Test.bFld;
                        break;
                    case 24:
                        try {
                            i14 = (i15 / -59882);
                            i14 = (i13 % -244);
                            i14 = (i14 % iArr1[i15 + 1]);
                        } catch (ArithmeticException a_e) {}
                    default:
                        i16 >>= (int)Test.instanceCount;
                    }
                } while (++i17 < 2);
            }
        }
        long meth_res = i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(double d, double d1, short s) {

        int i7=5, i8=-36107, i9=-7, i10=229, i11=-254, i12=-11, i18=-5, i19=-24975, i20=-237;
        float f2=-2.314F;

        for (i7 = 11; 352 > i7; i7 += 2) {
            for (i9 = 1; i9 < 9; ++i9) {
                for (i11 = 2; i11 > 1; --i11) {
                    Test.instanceCount = iMeth1();
                }
                i18 = i18;
                for (i19 = i9; i19 < 2; ++i19) {
                    switch (((i8 >>> 1) % 8) + 28) {
                    case 28:
                        try {
                            i10 = (i10 % 212);
                            i20 = (i18 % i11);
                            i12 = (i20 % i12);
                        } catch (ArithmeticException a_e) {}
                        if (false) continue;
                        break;
                    case 29:
                        Test.instanceCount = i8;
                        break;
                    case 30:
                        Test.instanceCount = i7;
                        i10 += i19;
                        if (false) break;
                    case 31:
                        i20 >>= i9;
                        break;
                    case 32:
                        Test.instanceCount ^= Test.instanceCount;
                        break;
                    case 33:
                        f2 += i19;
                        break;
                    case 34:
                        Test.iArrFld[i19] -= i9;
                        break;
                    case 35:
                        i20 = (int)d1;
                        break;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + s + i7 + i8 + i9 + i10 + i11 + i12 +
            i18 + i19 + i20 + Float.floatToIntBits(f2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public int iMeth(long l, float f, long l1) {

        int i6=-195, i21=-11, i22=-233, i23=2188, i24=19186, i25=10, i26=-5;
        short s1=28388;
        byte by=-100;

        i6 -= (int)Math.sqrt(dMeth(Test.dFld, Test.dFld, s1));
        s1 = (short)i6;
        for (i21 = 14; 249 > i21; ++i21) {
            for (i23 = 1; i23 < 7; i23++) {
                for (i25 = 1; 2 > i25; i25++) {
                    i24 ^= i21;
                    i6 <<= i24;
                    i24 += (i25 * i25);
                    f += by;
                    l1 = i25;
                    s1 += (short)(((i25 * l1) + i24) - i24);
                    if (Test.bFld) break;
                    i26 >>= (int)11L;
                    Test.iArrFld[i25 - 1] *= i22;
                }
                if (Test.bFld) break;
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + l1 + i6 + s1 + i21 + i22 + i23 + i24 + i25 + i26 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=24973, i1=9, i2=-31860, i3=152, i4=-66, i5=147, i27=39, i28=-2, i29=51662, iArr[]=new int[N];
        float f3=0.575F;
        byte by1=-88;
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(sArr, (short)26368);
        FuzzerUtils.init(lArr, -463539846L);

        for (i = 3; 366 > i; ++i) {
            for (i2 = 69; i2 > 1; i2--) {
                for (i4 = 1; i4 < 2; i4++) {
                    iArr = (iArr = (iArr = (iArr = iArr)));
                    Test.dArrFld[i2] -= (--sArr[i2 + 1][i2]);
                }
                i5 += (--iArr[i - 1]);
            }
            iMeth(Test.instanceCount, f3, Test.instanceCount);
            i1 >>= i2;
            i3 += -19351;
            i3 += (int)(2120093503143256912L + (i * i));
            i27 = 1;
            do {
                for (i28 = i; 1 > i28; ++i28) {
                    short s2=2827;
                    i5 *= i3;
                    if (Test.bFld) {
                        i5 += (int)(-3033140353L + (i28 * i28));
                        by1 = (byte)f3;
                        i29 -= i27;
                    } else if (true) {
                        if (Test.bFld) {
                            by1 -= (byte)Test.dFld;
                            i3 = i1;
                            lArr[i27 + 1] -= 184;
                        } else {
                            if (Test.bFld) continue;
                        }
                        Test.instanceCount *= s2;
                    }
                    Test.instanceCount = i4;
                    f3 *= i4;
                    i1 -= i28;
                    Test.instanceCount *= Test.instanceCount;
                    Test.iArrFld[i + 1] *= -15923;
                    Test.bFld = Test.bFld;
                }
                i29 = (int)Test.instanceCount;
            } while (++i27 < 69);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
