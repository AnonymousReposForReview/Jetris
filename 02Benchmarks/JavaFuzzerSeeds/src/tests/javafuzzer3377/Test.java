package tests.javafuzzer3377;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:52:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1965321520134309554L;
    public static volatile byte byFld=-40;
    public static int iFld=-2;
    public static double dFld=-9.3784;
    public int iFld1=-5;
    public static boolean bFld=false;
    public double dArrFld[][]=new double[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3511789043L);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=-47228, i9=-5, i10=10, i11=-46416, i12=-12, i13=-61834, i14=-2, i15=4;
        double d=2.38985, dArr[][]=new double[N][N];
        short s1=-18317;
        float f2=-103.620F;
        long l=-3814767246958015774L;
        boolean b=true;

        FuzzerUtils.init(dArr, -41.65833);

        if (b) {
            switch (((i8 >>> 1) % 4) + 66) {
            case 66:
                for (i9 = 364; i9 > 4; --i9) {
                    i10 = i10;
                    i8 -= (int)d;
                    i8 = (int)Test.instanceCount;
                    for (i11 = 5; i11 > 1; i11 -= 2) {
                        for (i13 = 1; i13 < 3; ++i13) {
                            s1 *= (short)f2;
                            i8 = (int)d;
                            Test.instanceCount += i13;
                            i14 += (i13 | i14);
                        }
                        i15 = Test.byFld;
                        i15 >>>= i15;
                        l += (i11 * i11);
                    }
                }
                break;
            case 67:
                Test.byFld += (byte)s1;
                break;
            case 68:
                dArr[(i13 >>> 1) % N][(i8 >>> 1) % N] = i15;
            case 69:
                f2 = -30269;
                break;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + s1 +
            Float.floatToIntBits(f2) + i15 + l + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static byte byMeth() {

        int i16=2, i17=10, i18=-11, i19=37444, i20=34313, i21=-36038, i22=-2;
        float f3=-87.446F, f4=0.613F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-21571);

        vMeth1();
        i16 ^= i16;
        i16 -= (int)Test.instanceCount;
        for (i17 = 163; i17 > 3; i17 -= 2) {
            i18 = i18;
            for (i19 = 1; i19 < 19; ++i19) {
                for (i21 = 1; i21 < 2; i21++) {
                    sArr[i21] = (short)i22;
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld += (i21 * i21);
                    i18 &= i18;
                    f3 = Test.instanceCount;
                    f4 += (((i21 * i16) + i21) - Test.instanceCount);
                    i20 += (i21 | i16);
                }
            }
            Test.dFld *= i20;
        }
        long meth_res = i16 + i17 + i18 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) +
            FuzzerUtils.checkSum(sArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        int i7=-84, iArr[][]=new int[N][N];
        float f1=5.475F;
        short s=-32238;
        boolean b1=false;

        FuzzerUtils.init(iArr, 8);

        iArr[(8 >>> 1) % N] = (iArr[(i7 >>> 1) % N] = (iArr[(i7 >>> 1) % N] = (iArr[(i7 >>> 1) % N] = iArr[(i7 >>> 1) %
            N])));
        iArr[(i7 >>> 1) % N][(i7 >>> 1) % N] = ((iArr[(i7 >>> 1) % N][(i7 >>> 1) % N]++) * (++i7));
        if (b1) {
            f1 = (++i7);
            s -= (short)f1;
            i7 += byMeth();
            Test.dFld += Test.iFld;
        }
        Test.iFld -= 13237;
        vMeth_check_sum += i7 + Float.floatToIntBits(f1) + s + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-110, i1=-14, i2=9, i3=34, i4=-236, i5=9, i6=-5, i23=9, i24=-239, i26=25372, i27=40564, i28=5,
            iArr1[]=new int[N];
        float f=78.546F, fArr[]=new float[N];
        short s2=15886;

        FuzzerUtils.init(iArr1, -16);
        FuzzerUtils.init(fArr, 2.331F);

        Test.instanceCount -= (i--);
        for (i1 = 11; i1 < 236; i1++) {
            for (i3 = 2; i3 < 112; ++i3) {
                f = Test.instanceCount;
            }
        }
        for (i5 = 10; i5 < 178; ++i5) {
            vMeth();
            Test.dFld -= i2;
            if (Test.bFld) {
                switch ((i5 % 9) + 112) {
                case 112:
                    iArr1[i5] <<= i4;
                    for (i23 = 6; i23 < 149; i23++) {
                        boolean b2=false;
                        iArr1[i5 + 1] = i24;
                        b2 = b2;
                        i6 += -12;
                        iFld1 = -11;
                        iFld1 >>>= Test.iFld;
                    }
                    Test.iFld = i;
                    Test.instanceCount += (((i5 * i5) + Test.iFld) - Test.instanceCount);
                    break;
                case 113:
                    i24 <<= -31998;
                    switch (((i6 >>> 1) % 10) + 86) {
                    case 86:
                        Test.dFld -= 35.427F;
                        i4 += (((i5 * i5) + i3) - i);
                        i24 += i5;
                        iArr1 = iArr1;
                        break;
                    case 87:
                        if (true) {
                            f *= i5;
                            for (i26 = 2; i26 < 149; i26++) {
                                i24 += (int)Test.instanceCount;
                                Test.instanceCount -= 104;
                                f += i28;
                            }
                        } else if (Test.bFld) {
                            i27 += (((i5 * i28) + f) - Test.instanceCount);
                        } else if (Test.bFld) {
                            fArr[i5 - 1] -= i4;
                        } else {
                            iArr1[i5 + 1] <<= (int)Test.instanceCount;
                        }
                    case 88:
                        f += i24;
                        break;
                    case 89:
                        Test.dFld = i4;
                        break;
                    case 90:
                        i = i6;
                        break;
                    case 91:
                        i2 <<= (int)Test.instanceCount;
                        break;
                    case 92:
                        i = i23;
                    case 93:
                        fArr[i5] -= Test.instanceCount;
                        break;
                    case 94:
                    case 95:
                        i27 -= 23782;
                        break;
                    default:
                        s2 -= (short)Test.dFld;
                    }
                    break;
                case 114:
                    Test.byFld -= (byte)i23;
                    break;
                case 115:
                    i27 -= (int)Test.dFld;
                case 116:
                    i24 = (int)Test.instanceCount;
                    break;
                case 117:
                    dArrFld[i5 - 1][i5] -= i27;
                    break;
                case 118:
                    Test.instanceCount -= -92;
                case 119:
                    i27 = (int)119.998F;
                    break;
                case 120:
                    Test.iFld = (int)8L;
                    break;
                default:
                    i27 = i24;
                }
            } else {
                dArrFld[i5] = dArrFld[i5];
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
