package tests.javafuzzer1637;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:33:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static int iFld=-43695;
    public static float fFld=90.457F;
    public static double dFld=0.96857;
    public static volatile boolean bFld=false;
    public static byte byFld=-62;
    public float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1557976937L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i8, boolean b, int i9) {

        int i10=63980, i11=53324, i12=250, i13=1, i14=-234, i15=11, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -28558);

        Test.lArrFld[(i9 >>> 1) % N] -= Test.instanceCount;
        Test.iFld = -2;
        i8 -= (int)16.26752;
        i8 += i9;
        for (i10 = 9; i10 < 249; ++i10) {
            Test.iFld += (((i10 * i9) + Test.instanceCount) - Test.instanceCount);
            i8 = (int)Test.instanceCount;
            if (false) break;
            for (i12 = 7; i12 > 1; --i12) {
                Test.dFld -= i12;
                for (i14 = i12; i14 < 2; i14++) {
                    i9 += (i14 * i14);
                    iArr1[i14 + 1] += (int)-127.911F;
                    Test.lArrFld[i12 - 1] = i13;
                    iArr1[i14 - 1] += (int)-16L;
                }
            }
        }
        long meth_res = i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth1(int i7) {

        double d=-2.48231;
        int i16=-26210, i17=64, i18=188, i19=34;
        long l=-5697137651440961352L;

        Test.iFld = (int)(--Test.instanceCount);
        i7 = (int)(((Test.instanceCount + Test.iFld) + (Test.fFld * Test.iFld)) * ((-(-(d - 5))) + (Test.iFld +
            Test.iFld)));
        dMeth(i7, Test.bFld, i7);
        Test.instanceCount += -3;
        for (i16 = 8; i16 < 392; i16++) {
            i17 += (i16 | i16);
            for (l = 1; 4 > l; l++) {
                Test.bFld = Test.bFld;
            }
            Test.iFld += (((i16 * i19) + i19) - Test.instanceCount);
            if (Test.iFld != 0) {
            }
            switch ((i16 % 2) + 92) {
            case 92:
                if (Test.bFld) {
                    if (false) continue;
                    d = -49;
                    Test.iFld += (i16 + Test.iFld);
                } else if (Test.bFld) {
                    i7 >>>= i18;
                } else {
                    Test.iFld = i16;
                }
            case 93:
                Test.iFld = (int)-151L;
                break;
            default:
                i7 += Test.iFld;
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d) + i16 + i17 + l + i18 + i19;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        byte by=121;

        i4 += (++by);
        i4 >>>= (((61190 - i5) - iMeth1(Test.iFld)) + -7);
        long meth_res = i4 + i5 + i6 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i1=-98, i2=164, i3=-1, i20=20758, i21=57425, i22=-10, i23=13, i24=-53071, i25=0, i26=29952,
            i27=-25414, i28=10, i29=-12744, i30=-18435, i31=-3331, iArr[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -187);
        FuzzerUtils.init(byArr, (byte)-115);

        for (i = 14; i < 240; i++) {
            fArrFld = (fArrFld = (fArrFld = fArrFld));
            i1 += (i * i);
            try {
                i1 = (i % 1347016381);
                Test.iFld = (iArr[i + 1] / i1);
                Test.iFld = (88 / i);
            } catch (ArithmeticException a_e) {}
            for (i2 = 3; i2 < 111; ++i2) {
                Test.iFld *= iMeth(i3, i1, i3);
            }
            for (i20 = 1; 111 > i20; ++i20) {
                Test.instanceCount += (i20 ^ i);
                iArr[i - 1] = i22;
            }
            if (Test.bFld) continue;
            try {
                i1 = (-39 / iArr[i]);
                iArr[i] = (-40728 / i22);
                Test.iFld = (i21 % 34739);
            } catch (ArithmeticException a_e) {}
            i22 <<= Test.byFld;
            if (Test.bFld) break;
            if (Test.bFld) break;
        }
        for (i23 = 5; i23 < 127; ++i23) {
            for (i25 = 2; i25 < 205; ++i25) {
                for (i27 = 1; 2 > i27; i27++) {
                    byArr[i27 + 1] ^= (byte)Test.iFld;
                    Test.fFld -= 62443;
                    Test.iFld += i27;
                    Test.lArrFld = Test.lArrFld;
                }
            }
            Test.byFld = (byte)16054;
            Test.lArrFld[i23] <<= 1;
            i29 = 1;
            do {
                for (i30 = 1; i30 < 1; ++i30) {
                    switch (((i23 % 2) * 5) + 94) {
                    case 103:
                        if (Test.bFld) break;
                        i28 = i28;
                        break;
                    case 99:
                        Test.instanceCount += (long)Test.dFld;
                        Test.dFld -= 10096;
                        break;
                    }
                }
            } while (++i29 < 205);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
