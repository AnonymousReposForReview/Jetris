package tests.javafuzzer1669;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:18:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4278692434609601638L;
    public float fFld=-56.713F;
    public static int iFld=103;
    public static float fFld1=0.759F;
    public boolean bFld=false;
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, double d) {

        double d1=-52.116081;
        int i5=4, i6=3, i7=-205, iArr[]=new int[N];
        float f=1.740F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1748331309L);
        FuzzerUtils.init(iArr, 0);

        Test.iFld -= i4;
        for (d1 = 3; d1 < 328; d1++) {
            Test.instanceCount += (long)(((d1 * i4) + Test.iFld) - Test.iFld);
            i6 = 1;
            do {
                lArr[(int)(d1 + 1)] ^= 66;
                i7 = 1;
                do {
                    iArr[(int)(d1)] >>= Test.iFld;
                    i5 += (64032 + (i7 * i7));
                    f += i6;
                    iArr[i7] += i6;
                    Test.instanceCount += i7;
                    i4 += -26161;
                    i5 = (int)-61485L;
                } while (--i7 > 0);
                i5 ^= i5;
                i4 *= (int)Test.instanceCount;
            } while (++i6 < 5);
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i5 + i6 + i7 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static short sMeth() {

        double d2=-2.10365;
        int i8=1258, i11=-63266, i12=72, i13=6541, iArr1[]=new int[N];
        boolean b=true;
        short s1=9266;

        FuzzerUtils.init(iArr1, -25932);

        vMeth1(Test.iFld, d2);
        i8 = 1;
        while (++i8 < 336) {
            int i10=3;
            iArr1[i8] = (int)176L;
            b = b;
            switch (((-16733 >>> 1) % 9) + 90) {
            case 90:
            case 91:
                Test.iFld += i10;
                for (i11 = 1; i11 < 5; i11++) {
                    i13 = 1;
                    while (++i13 < 2) {
                        short s=-5580;
                        Test.iFld &= (int)Test.instanceCount;
                        Test.instanceCount ^= i13;
                        Test.iFld = -29874;
                        Test.instanceCount -= s;
                        Test.iFld += i13;
                        Test.fFld1 = i11;
                        Test.instanceCount |= 32512;
                    }
                }
                break;
            case 92:
                b = false;
                break;
            case 93:
                i10 = Test.iFld;
                break;
            case 94:
                iArr1 = iArr1;
                break;
            case 95:
                Test.fFld1 *= Test.instanceCount;
                break;
            case 96:
                s1 += (short)(i8 | i11);
                break;
            case 97:
                iArr1[i8] *= i10;
                break;
            case 98:
                Test.fFld1 = Test.instanceCount;
                break;
            default:
                Test.iFld = Test.iFld;
            }
        }
        long meth_res = Double.doubleToLongBits(d2) + i8 + (b ? 1 : 0) + i11 + i12 + i13 + s1 +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        byte by=28;
        int i1=-41, i2=-22648, i3=-7, i14=-18535, i15=-42356, i16=-54, i17=3513, i18=-184, iArr2[][]=new int[N][N];
        short s2=29971;

        FuzzerUtils.init(iArr2, -62512);

        Test.instanceCount = (Test.instanceCount - ((Test.iFld >> Test.iFld) + (Test.iFld - by)));
        i1 = 1;
        while (++i1 < 173) {
            for (i2 = i1; i2 < 9; ++i2) {
                i3 >>= (-61351 + sMeth());
                i3 += (((i2 * i1) + i1) - Test.instanceCount);
                Test.iFld = i1;
                Test.iFld += (int)Test.instanceCount;
            }
            for (i14 = 1; i14 < 9; i14++) {
                iArr2[i14 - 1][i14 - 1] = s2;
                if (i2 != 0) {
                    vMeth_check_sum += by + i1 + i2 + i3 + i14 + i15 + s2 + i16 + i17 + i18 +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    try {
                        Test.iFld = (i18 / i1);
                        i15 = (i15 / iArr2[i1 + 1][i14]);
                        iArr2[i1][i1 - 1] = (i16 % -190);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i16 - 1] = iArr2[i14 - 1];
                    i18 += (int)Test.instanceCount;
                }
                i18 += (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += by + i1 + i2 + i3 + i14 + i15 + s2 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-38627, i19=-6169, i20=243, i21=-6346, i22=22, i23=-7, i24=-181, i25=0, iArr3[][]=new int[N][N];
        short s3=25396;
        float f1=-117.1008F, f2=-2.534F, fArr[]=new float[N];
        byte by1=-64;
        long l=2296809801L, lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr3, 10484);
        FuzzerUtils.init(lArr1, -48191L);
        FuzzerUtils.init(fArr, 0.752F);

        fFld -= ((i--) + -4);
        vMeth();
        for (i19 = 4; i19 < 331; i19++) {
            double d3=-10.13644;
            s3 = s3;
            Test.iFld -= i20;
            i21 += i;
            i21 |= -35869;
            d3 = Test.fFld1;
            i20 += (int)Test.instanceCount;
            bArr[i19 + 1] = bFld;
            fArrFld[i19] %= (i19 | 1);
            iArr3[i19 - 1][i19] = (int)Test.instanceCount;
        }
        for (f1 = 4; 162 > f1; f1++) {
            by1 *= (byte)fFld;
            for (l = 159; l > 8; l -= 2) {
                switch ((int)(((f1 % 7) * 5) + 28)) {
                case 45:
                    for (i24 = (int)(f1); i24 < 3; ++i24) {
                        i25 = i24;
                        i25 += (i24 - Test.instanceCount);
                        lArr1[i24 + 1] += Test.instanceCount;
                        iArr3[(int)(l)][i24 - 1] = i19;
                        iArr3[i24 + 1][i24 + 1] -= i25;
                    }
                    break;
                case 59:
                    Test.fFld1 = Test.iFld;
                    i23 ^= i20;
                case 49:
                    iArr3[(int)(f1 - 1)] = iArr3[(int)(l)];
                    f2 %= (i25 | 1);
                    fArr[(int)(l + 1)] = i20;
                    break;
                case 62:
                    i = Test.iFld;
                    iArr3[(int)(f1 - 1)][(int)(l - 1)] = s3;
                case 32:
                    i22 += (int)(-42186L + (l * l));
                    break;
                case 55:
                    Test.instanceCount *= (long)fFld;
                    break;
                case 51:
                    i21 = i23;
                    break;
                default:
                    iArr3[(int)(f1 - 1)][(int)(l)] = s3;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
