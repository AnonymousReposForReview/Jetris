package tests.javafuzzer264;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:06:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8736344829991214380L;
    public static float fFld=2.866F;
    public static int iFld=-22785;
    public static boolean bFld=true;
    public static double dFld=16.21432;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.dArrFld, -2.43000);
        FuzzerUtils.init(Test.byArrFld, (byte)-43);
        FuzzerUtils.init(Test.fArrFld, -123.795F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i5, double d) {

        int i6=0, i7=-19455, i8=-46627, i9=-187, i10=34665, i11=-5, i12=-67;
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 205L);
        FuzzerUtils.init(dArr, -103.41582);

        lArr = lArr;
        i5 = (int)93.41587;
        for (i6 = 12; i6 < 217; i6 += 3) {
            i7 = 204;
            Test.instanceCount += (232 + (i6 * i6));
            for (i8 = 1; 23 > i8; ++i8) {
                f += 130L;
                dArr[i6 - 1] = i6;
                i5 += (i8 * i8);
                i9 |= i7;
                b = b;
                i9 *= 15;
                for (i10 = 1; i10 < 2; ++i10) {
                    i5 += i9;
                    i7 &= i12;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + (b ? 1 : 0)
            + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        double d1=0.72471;
        int i13=5, i14=-38378, i15=171;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 261442262L);

        vMeth1(Test.fFld, 2, d1);
        for (long l1 : lArr1) {
            for (i13 = 1; i13 < 4; ++i13) {
                Test.iArrFld[i13 + 1] *= i14;
                i15 = 2;
                do {
                    switch (((i13 % 3) * 5) + 18) {
                    case 32:
                        Test.iArrFld[i15 + 1] >>= i13;
                        Test.iFld = i15;
                        i14 -= (int)1.46013;
                        Test.fFld = Test.instanceCount;
                        break;
                    case 29:
                        i14 *= (int)Test.fFld;
                        d1 += Test.iFld;
                        l1 -= (long)d1;
                        lArr1[i15 - 1] += i15;
                        break;
                    case 26:
                        Test.iArrFld[i15 + 1] = (int)Test.instanceCount;
                        break;
                    }
                } while (--i15 > 0);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(long l, int i3, int i4) {

        int i16=-79, i17=22574, i19=-11;
        long l2=7602588992981157829L, l3=1850781633L;
        byte by1=-8;
        double d2=-116.2064;
        short s=-28919;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth();
        for (i16 = 3; 308 > i16; i16++) {
            bArr[i16] = Test.bFld;
            Test.iArrFld[i16] >>>= Test.iFld;
            Test.dArrFld[i16 + 1] *= 2;
            if (Test.bFld) {
                Test.fFld -= i3;
                Test.byArrFld[i16] -= (byte)Test.iFld;
                l = Test.instanceCount;
                l2 = 1;
                do {
                    for (l3 = 1; l3 < 1; l3++) {
                        Test.fFld -= by1;
                        i4 = 5;
                        i3 = (int)d2;
                        s = (short)d2;
                    }
                } while (++l2 < 5);
            } else if (Test.bFld) {
                Test.instanceCount >>= i17;
            } else if (Test.bFld) {
                Test.fFld -= -3;
            } else {
                i19 *= i3;
            }
        }
        long meth_res = l + i3 + i4 + i16 + i17 + l2 + l3 + i19 + by1 + Double.doubleToLongBits(d2) + s +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=25510, i2=-205, i20=41309, i21=171, i22=-49, i23=61008, i25=157, i26=-8365, i27=-48645, i28=-5,
            i29=2, iArr[]=new int[N];
        byte by=-68;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 37179);
        FuzzerUtils.init(lArr2, 1L);

        Test.fFld = (--i);
        Test.fFld += i;
        i = (int)(((++iArr[(i >>> 1) % N]) * (Test.instanceCount + by)) - ((++i) - (by--)));
        Test.instanceCount *= ((i--) - ((i++) + (Test.instanceCount--)));
        for (i1 = 11; i1 < 233; ++i1) {
            iMeth(Test.instanceCount, i2, i1);
            i = i2;
            for (i20 = 1; i20 < 113; i20++) {
                i = i2;
                by += (byte)(((i20 * i2) + i1) - i2);
                i2 = by;
                by %= (byte)(i | 1);
                for (i22 = i20; i22 < 2; ++i22) {
                    Test.instanceCount += Test.instanceCount;
                    Test.iArrFld[i1] = i23;
                    i = Test.iFld;
                    lArr2[i20 - 1] = i23;
                    if (Test.bFld) break;
                    i23 -= i20;
                }
            }
        }
        for (int i24 : iArr) {
            Test.iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
            iArr[(i21 >>> 1) % N] = (int)Test.fFld;
            i21 = i25;
            i23 = by;
            Test.instanceCount = i22;
            switch (((i2 >>> 1) % 7) + 31) {
            case 31:
                for (i26 = 2; i26 < 63; ++i26) {
                    i28 = 1;
                    while (++i28 < 2) {
                        Test.instanceCount = i29;
                        Test.fFld = i21;
                    }
                }
                break;
            case 32:
                i21 -= (int)Test.dFld;
                break;
            case 33:
                Test.fArrFld[(i2 >>> 1) % N] = i29;
                break;
            case 34:
                Test.iArrFld[(i22 >>> 1) % N] += (int)-8806094397833776574L;
                break;
            case 35:
                if (true) continue;
                break;
            case 36:
                if (true) continue;
            case 37:
            default:
                i2 *= (int)Test.dFld;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
