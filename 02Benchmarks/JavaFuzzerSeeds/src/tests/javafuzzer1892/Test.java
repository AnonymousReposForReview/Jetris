package tests.javafuzzer1892;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:28 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1986620468737605661L;
    public double dFld=-84.45037;
    public static float fFld=2.153F;
    public byte byFld=75;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -117);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i1) {

        float f=-65.404F;

        Test.iArrFld[(i1 >>> 1) % N] = (int)((Test.instanceCount--) - ((f + 123.25754) + (i1 * f)));
        i1 |= (int)(Integer.reverseBytes(Math.min(i1, i1)) - ((--Test.instanceCount) << (i1--)));
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f);
    }

    public static void vMeth(double d) {

        int i3=81, i4=-15, i5=90, i6=-12, i7=-117;
        short s=-19379;
        boolean b=true;

        vSmallMeth(i3);
        i4 = 1;
        while (++i4 < 383) {
            i3 ^= s;
            i5 = 1;
            do {
                i3 *= (int)-14L;
                for (i6 = 1; i6 < 1; i6++) {
                    Test.fFld += 16541;
                    Test.instanceCount += (i6 | i3);
                    b = b;
                }
                Test.instanceCount = i6;
                i7 = i7;
                d *= d;
                i3 |= i3;
                i7 -= i3;
            } while (++i5 < 4);
            Test.fFld *= i5;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + s + i5 + i6 + i7 + (b ? 1 : 0);
    }

    public static int iMeth(byte by) {

        int i2=5;

        i2 = (int)6902377958169600857L;
        vMeth(2.83766);
        long meth_res = by + i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-162, i8=-16, i9=-233, i10=12, i11=31901, i12=62;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.541F);

        i -= (int)((++i) * (++dFld));
        for (int smallinvoc=0; smallinvoc<446; smallinvoc++) vSmallMeth(iMeth(byFld));
        i8 = 1;
        do {
            Test.iArrFld[i8] -= -12;
            i = i;
            i -= -9;
            i += (i8 * i8);
            fArr[i8 + 1] = Test.fFld;
            byFld *= (byte)i8;
        } while (++i8 < 251);
        Test.iArrFld[(i >>> 1) % N] += (int)Test.instanceCount;
        i9 = 1;
        while (++i9 < 361) {
            lArrFld[i9] = Test.instanceCount;
            i10 = 70;
            while (--i10 > 0) {
                short s1=4664;
                i -= i9;
                byFld = (byte)i;
                for (i11 = 1; i11 < 1; i11++) {
                    fArr[i9] -= Test.instanceCount;
                    if (true) break;
                    Test.iArrFld[i11 - 1] -= i12;
                    Test.iArrFld = Test.iArrFld;
                    Test.iArrFld[i10] = -1;
                    lArrFld[i9] = 14;
                    Test.iArrFld[i11] *= 59124;
                    i = i11;
                    i = 136;
                    i *= (int)Test.instanceCount;
                }
                i12 = i11;
                i12 = s1;
                if (Test.bFld) break;
                i += (((i10 * i8) + i11) - i12);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
