package tests.javafuzzer3170;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:08:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2943825129969774964L;
    public float fFld=54.415F;
    public static double dFld=0.85882;
    public static double dFld1=-20.30428;
    public int iArrFld[][]=new int[N][N];

    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i5, int i6, float f) {

        int i7=11, i8=-11, i9=64530, i10=8, i11=55496;
        byte by=0;
        double d=-2.64098;

        i7 = 1;
        while (++i7 < 150) {
            for (i8 = 1; i8 < 11; ++i8) {
                i9 = i9;
                by = (byte)i5;
                for (i10 = 2; i10 > i7; i10--) {
                    Test.instanceCount |= i6;
                    i11 -= (int)d;
                    i6 = (int)Test.instanceCount;
                    d *= i7;
                    by = (byte)i8;
                    i9 += i10;
                }
                Test.instanceCount += (((i8 * i8) + Test.instanceCount) - f);
                i9 = i10;
                i9 *= 31772;
            }
        }
        i6 -= (int)f;
        long meth_res = i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + i9 + by + i10 + i11 + Double.doubleToLongBits(d);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth() {

        int i1=31589, i2=3, i3=64590, i4=-47, i12=14732, iArr[]=new int[N];
        float f1=79.671F;
        double d1=-2.61902;
        boolean b=false, bArr[]=new boolean[N];
        byte by1=-96;
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -59646);
        FuzzerUtils.init(lArr, -92L);

        for (i1 = 8; i1 < 313; ++i1) {
            i3 = 1;
            while ((i3 += 3) < 5) {
                i4 = 1;
                do {
                    if (true) {
                        bArr[i4 + 1] = ((i2 = (-(-(15705 * (++i2))))) == ((i3 - -112) + fMeth(i2, 3, f1)));
                    } else if (b) {
                        i2 = (int)Test.instanceCount;
                        i12 = i2;
                    } else if (b) {
                        i2 += (i4 - i3);
                        d1 -= i1;
                    } else {
                        iArr[i3] >>>= i4;
                        i12 = i2;
                        by1 <<= (byte)Test.instanceCount;
                    }
                    iArr[i4] >>= i1;
                    i2 = i1;
                    lArr[i3 + 1] *= 32;
                } while (++i4 < 5);
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + i12 + Double.doubleToLongBits(d1) + (b ? 1 : 0)
            + by1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public short sMeth() {

        int i13=-14, i14=-27601, i15=32514;
        float f2=-17.24F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 207L);

        lMeth();
        for (i13 = 3; 133 > i13; ++i13) {
            fFld = i13;
            Test.dFld *= -45623;
            i14 -= (int)fFld;
            i15 = 1;
            do {
                i14 -= (int)Test.instanceCount;
                Test.instanceCount -= i13;
                f2 = 1;
                do {
                    i14 *= i13;
                    i14 += i13;
                    lArr1[i13] *= (long)Test.dFld;
                    i14 >>= i15;
                    iArrFld[i13 + 1][i13] = i14;
                    iArrFld[(int)(f2 - 1)] = FuzzerUtils.int1array(N, (int)163);
                } while (++f2 < 3);
            } while ((i15 += 3) < 12);
        }
        long meth_res = i13 + i14 + i15 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i16=29, i17=225, i18=0, i19=-64, i20=3, i21=-7, i22=-58, i23=193, i24=-17459;
        byte by2=57;
        short s=25390;
        boolean b1=true;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 122.1017F);
        FuzzerUtils.init(dArr, 100.124250);

        i = Short.reverseBytes(sMeth());
        for (i16 = 13; 357 > i16; ++i16) {
            i17 += -37838;
            iArrFld[i16 - 1][i16 - 1] <<= i16;
            Test.dFld1 = -18625;
            iArrFld[i16 - 1][i16 - 1] = i17;
            if (true) {
                iArrFld[i16 - 1][i16 - 1] *= (int)Test.dFld1;
                Test.instanceCount >>= Test.instanceCount;
            } else if (b1) {
                i += (i16 | i16);
                fFld -= by2;
                i18 = 73;
                do {
                    for (i19 = 1; i19 < 1; ++i19) {
                        i += (53904 + (i19 * i19));
                        i = i17;
                        s -= (short)i18;
                        iArrFld[(i18 >>> 1) % N][i19 - 1] *= i16;
                        i17 = (int)Test.instanceCount;
                        iArrFld[i19][i16 - 1] = i17;
                        iArrFld[i16][i19] ^= -146;
                    }
                    i17 += 33048;
                } while (--i18 > 0);
                for (i21 = 2; i21 < 73; ++i21) {
                    i17 += (int)1.762F;
                    for (i23 = 1; i23 < 2; i23++) {
                        switch ((((i22 >>> 1) % 2) * 5) + 34) {
                        case 42:
                            i20 += (((i23 * i18) + Test.instanceCount) - fFld);
                            iArrFld[i23 - 1][i21] = i19;
                            fArr[i23 - 1] += i16;
                            break;
                        case 38:
                            Test.dFld1 -= Test.instanceCount;
                            i17 = i;
                            break;
                        }
                    }
                }
            } else {
                dArr[i16] += Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
