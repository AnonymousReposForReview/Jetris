package tests.javafuzzer2784;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:03:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8091L;
    public static float fFld=2.13F;
    public static int iFld=-5;
    public short sFld=-8965;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
        FuzzerUtils.init(Test.lArrFld, 55477L);
        FuzzerUtils.init(Test.fArrFld, -58.911F);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, int i2, int i3) {

        int i4=240, i5=-400, i6=-5, i7=-14, i8=160, i9=-50423, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(lArr, -3590471784L);

        for (i4 = 20; 386 > i4; ++i4) {
            short s1=-23825;
            i2 += i2;
            i3 += (i4 ^ (long)Test.fFld);
            s1 += (short)(((i4 * i3) + i3) - i3);
            i2 = i4;
            i2 = (int)Test.instanceCount;
            Test.fFld *= i2;
            iArr = iArr;
        }
        lArr[(i2 >>> 1) % N] *= i5;
        i3 = (int)l1;
        i6 = 199;
        while ((i6 -= 2) > 0) {
            i7 = 1;
            while (++i7 < 16) {
                for (i8 = 1; i8 < 1; i8++) {
                    try {
                        i2 = (-26555 / i3);
                        i3 = (iArr[i8] % 7776);
                        i3 = (iArr[i8 - 1] % i9);
                    } catch (ArithmeticException a_e) {}
                    iArr[i7 - 1] &= (int)l1;
                }
            }
        }
        long meth_res = l1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i1, long l) {

        int i10=12, i11=0, i12=4, i13=217, i14=-180, i15=53408;
        double d=1.119681;
        long lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(lArr1, -31456L);
        FuzzerUtils.init(lArr2, -2647993475L);

        switch (((iMeth(Test.instanceCount, i1, i1) >>> 1) % 2) + 109) {
        case 109:
            for (i10 = 4; 124 > i10; ++i10) {
                i11 ^= i1;
                i1 >>= i1;
                Test.instanceCount ^= i1;
                i12 = 1;
                while (++i12 < 13) {
                    for (i13 = 1; i13 < 1; ++i13) {
                        Test.iArrFld[(i12 >>> 1) % N] = i14;
                        i11 += i13;
                        if (i15 != 0) {
                        }
                        Test.iArrFld[i12 - 1] += (int)d;
                        Test.fFld += (((i13 * Test.fFld) + l) - i14);
                        i1 += (((i13 * i11) + i12) - Test.instanceCount);
                        lArr1[i10] *= i13;
                        i11 += i15;
                    }
                }
            }
        case 110:
            lArr2 = lArr1;
            break;
        }
        long meth_res = i1 + l + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i=-37006, i16=42657, i17=98, i18=-58168, i19=65;
        short s=3343;
        boolean b=true, b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 42.80994);

        i = ((++i) - (i - (s + i)));
        dMeth(i, Test.instanceCount);
        for (i16 = 13; i16 < 233; i16++) {
            double d1=108.63065;
            i += i17;
            b = b1;
            Test.iArrFld[i16] = (int)Test.instanceCount;
            dArr[i16] = Test.instanceCount;
            Test.instanceCount -= (long)d1;
            Test.instanceCount >>= -4911816843851494310L;
            d1 -= -142;
            i += (((i16 * i) + i) - i);
        }
        for (i18 = 15; i18 < 380; ++i18) {
            Test.lArrFld[i18][i18] *= 7502;
        }
        Test.lArrFld[(i17 >>> 1) % N][(i16 >>> 1) % N] = -12;
        i17 = (int)Test.fFld;
        vMeth_check_sum += i + s + i16 + i17 + (b ? 1 : 0) + (b1 ? 1 : 0) + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        byte by=-89;
        double d2=2.29852;
        boolean b2=false, bArr[]=new boolean[N];
        int i20=-49, i21=-253, i22=-4, i23=58284, i24=75, i25=-172;

        FuzzerUtils.init(bArr, false);

        vMeth();
        Test.iFld = Test.iFld;
        Test.iFld = by;
        Test.instanceCount *= (long)d2;
        bArr[(Test.iFld >>> 1) % N] = b2;
        for (i20 = 231; 8 < i20; --i20) {
            for (i22 = i20; i22 < 113; ++i22) {
                i23 = (int)1.392F;
                sFld -= (short)-18618;
                i21 -= i20;
                switch (((i20 >>> 1) % 2) + 8) {
                case 8:
                    Test.instanceCount >>= i21;
                    break;
                case 9:
                    i21 += i22;
                    i21 <<= 208;
                    i21 -= i20;
                    break;
                default:
                    if (b2) {
                    }
                }
                try {
                    Test.iFld = (Test.iFld / -61518);
                    Test.iFld = (i21 % Test.iArrFld[(i22 >>> 1) % N]);
                    i23 = (i23 / Test.iArrFld[i20]);
                } catch (ArithmeticException a_e) {}
                switch ((i20 % 2) + 77) {
                case 77:
                    if (b2) break;
                    Test.iFld += i22;
                    if (b2) continue;
                    break;
                case 78:
                    Test.fArrFld[i20 - 1] *= i21;
                    break;
                }
                i23 <<= 6344;
                i23 -= (int)Test.instanceCount;
                Test.iArrFld = Test.iArrFld;
            }
            for (i24 = 6; 113 > i24; i24++) {
                d2 += Test.instanceCount;
                i23 *= i23;
                i23 += (int)Test.instanceCount;
                i21 <<= i23;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
