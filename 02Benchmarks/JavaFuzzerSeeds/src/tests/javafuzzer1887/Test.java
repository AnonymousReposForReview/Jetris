package tests.javafuzzer1887;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:22:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=217L;
    public float fFld=0.664F;
    public static int iFld=-1806;
    public static double dFld=58.4954;
    public static volatile byte byFld=-11;
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -44611);
        FuzzerUtils.init(Test.iArrFld1, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2) {

        int i3=194, i4=-33125, i5=2, i6=-128, i7=-9698, i8=189;
        byte by=-32;
        float f1=105.455F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -10L);

        Test.iFld = Test.iFld;
        for (i3 = 21; i3 < 371; i3++) {
            l2 = Test.iFld;
            lArr[i3 + 1] = -8605;
            i4 <<= i4;
            switch ((i3 % 10) + 62) {
            case 62:
                lArr[i3 - 1] += Test.iFld;
                Test.iFld += (3 + (i3 * i3));
                break;
            case 63:
                Test.instanceCount += (((i3 * l2) + i4) - Test.iFld);
                for (i5 = 1; i5 < 5; i5++) {
                    for (i7 = 1; i7 < 2; i7++) {
                        i8 = i4;
                        by += (byte)(((i7 * i8) + Test.iFld) - i3);
                        lArr[i3 - 1] = -33594;
                        i6 += 12;
                    }
                }
                break;
            case 64:
                f1 += by;
            case 65:
                Test.instanceCount = i3;
                break;
            case 66:
                Test.iArrFld[i3][i3 - 1] += (int)l2;
                break;
            case 67:
                i4 = 66;
                break;
            case 68:
                i6 = (int)Test.instanceCount;
            case 69:
                i8 -= 239;
                break;
            case 70:
                Test.iFld = i7;
                break;
            case 71:
                i8 += (i3 ^ Test.instanceCount);
            default:
                Test.dFld -= Test.iFld;
            }
        }
        vMeth_check_sum += l2 + i3 + i4 + i5 + i6 + i7 + i8 + by + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static byte byMeth(float f, long l1, boolean b) {

        int i2=5610, i9=-9, i10=8, i11=9222, i12=138;
        float f2=79.578F;
        byte by1=-101, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)61);

        i2 = i2;
        if (b) {
            Test.instanceCount = (--Test.iFld);
            vMeth(Test.instanceCount);
        } else {
            for (i9 = 6; i9 < 327; ++i9) {
                b = b;
                switch ((((Test.iFld >>> 1) % 7) * 5) + 89) {
                case 107:
                    for (f2 = i9; f2 < 5; f2++) {
                        i10 <<= i9;
                        byArr[(int)(f2)] >>= (byte)i9;
                        i12 = 1;
                        while (++i12 < 1) {
                            Test.instanceCount -= -18333;
                            l1 += (((i12 * l1) + by1) - i2);
                        }
                        Test.dFld += Test.iFld;
                        i2 *= (int)1.69F;
                    }
                    break;
                case 108:
                    i10 = (int)l1;
                case 93:
                    Test.iArrFld[i9][i9] *= Test.iFld;
                    break;
                case 113:
                    i10 <<= -79;
                case 122:
                    i2 += i9;
                    break;
                case 92:
                    Test.iArrFld1[i9] -= i9;
                    break;
                case 105:
                    Test.iFld += (i9 * i9);
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + l1 + (b ? 1 : 0) + i2 + i9 + i10 + Float.floatToIntBits(f2) + i11 +
            i12 + by1 + FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth(short s, long l) {

        int i1=-13, i14=1, i15=-22265, i16=-158, i17=-60705, iArr[]=new int[N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 64296);
        FuzzerUtils.init(dArr, 121.89282);

        iArr[(i1 >>> 1) % N] = (byMeth(fFld, l, b1) + i1);
        if (b1) {
            i14 = 1;
            do {
                Test.iFld <<= Test.iFld;
                for (i15 = 1; i15 < 11; ++i15) {
                    if (b1) {
                        switch ((i14 % 4) + 59) {
                        case 59:
                            if (Test.iFld != 0) {
                            }
                            b1 = b1;
                            Test.byFld = (byte)Test.iFld;
                            Test.iArrFld1[i15 - 1] = i1;
                        case 60:
                            i17 = 2;
                            while (--i17 > 0) {
                                i1 += (i17 ^ i1);
                                dArr[i14] *= -5;
                                i16 = i14;
                            }
                            break;
                        case 61:
                            fArrFld[i14 - 1] += Test.instanceCount;
                            break;
                        case 62:
                            iArr[i14 - 1] >>= (int)Test.instanceCount;
                            break;
                        default:
                            l -= i1;
                        }
                    }
                }
            } while (++i14 < 145);
        } else if (b1) {
            Test.byFld = (byte)l;
        } else {
            fFld -= Test.iFld;
        }
        long meth_res = s + l + i1 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-115, i18=13, i19=-9, i20=-212, i21=3, i22=0, i23=116, i24=102, i25=-105, i26=40105;
        short s1=-6676;
        double d=-88.130851, d1=2.124293;
        boolean b2=true;
        float f3=-42.656F;

        i >>= (int)(i * ((i * fFld) - (i - Test.instanceCount)));
        iMeth(s1, Test.instanceCount);
        try {
            for (i18 = 16; (364 + 400) > i18; i18++) {
                i19 += (int)-85L;
                for (i20 = 3; i20 < (63 + 400); i20++) {
                    Test.instanceCount <<= i;
                    fFld = i;
                    i19 *= i18;
                    d = Test.instanceCount;
                    i19 = i;
                    d1 = 1;
                    do {
                        Test.iFld = (int)d;
                    } while (++d1 < 1);
                    b2 = b2;
                }
                fArrFld = FuzzerUtils.float1array(N, (float)1.856F);
                i -= (int)Test.dFld;
            }
            Test.iFld = i21;
            Test.instanceCount -= i;
            i19 = i20;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (f3 = 2; f3 < 138; f3++) {
                i19 = i22;
                for (i23 = 4; i23 < 184; i23 += 3) {
                    i21 <<= (int)Test.instanceCount;
                    i = i21;
                    Test.instanceCount = (long)d;
                    i19 += (i23 ^ i23);
                    for (i25 = 4; i25 > 1; i25 -= 2) {
                        Test.instanceCount += (((i25 * i24) + i23) - i20);
                        Test.dFld = Test.dFld;
                    }
                    Test.iFld = -4;
                }
            }
        }
        finally {
            fFld = -12;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
