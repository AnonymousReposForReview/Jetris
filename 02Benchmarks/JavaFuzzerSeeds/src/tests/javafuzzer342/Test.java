package tests.javafuzzer342;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:17:52 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1968750133774421209L;
    public static float fFld=0.220F;
    public boolean bFld=false;
    public long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 199);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d, float f) {

        int i5=-6, i6=-10, i7=-42593, i8=2, iArr1[][]=new int[N][N];
        boolean b=true;
        double d1=93.10881;
        byte by=28;

        FuzzerUtils.init(iArr1, 61);

        f = -25;
        for (i5 = 5; i5 < 227; i5++) {
            if (b) continue;
            for (d1 = 7; d1 > 1; d1--) {
                iArr1 = iArr1;
                switch ((int)((d1 % 1) + 25)) {
                case 25:
                    iArr1[i5 + 1][i5] = (int)Test.instanceCount;
                    i8 = 1;
                    do {
                        Test.instanceCount >>= 12718;
                        i7 += 57;
                        switch ((int)((d1 % 2) + 76)) {
                        case 76:
                            i6 = i5;
                            break;
                        case 77:
                            by = (byte)i5;
                            f = i5;
                            if (b) continue;
                            break;
                        default:
                            i6 -= i7;
                        }
                    } while (++i8 < 2);
                    break;
                default:
                    Test.instanceCount += (long)((long)d1 | i8);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + i6 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i7 + i8 + by + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-48, i2=-30158, i3=47794, i4=-20958, iArr[]=new int[N];
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 87.467F);
        FuzzerUtils.init(dArr, -3.9812);
        FuzzerUtils.init(iArr, 22);

        Test.instanceCount = (long)(fArr[(i1 >>> 1) % N] %= ((long)(dArr[(i1 >>> 1) % N]) | 1));
        i1 >>= iArr[(i1 >>> 1) % N];
        i2 = 1;
        while ((i2 += 2) < 326) {
            for (i3 = 10; i3 > i2; i3 -= 3) {
                double d2=0.48698;
                Test.fFld = iMeth1(d2, Test.fFld);
            }
        }
        for (int i9 : iArr) {
            iArr[(i3 >>> 1) % N] *= i9;
            i1 += (int)Test.fFld;
            if (true) break;
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 62022);

        i -= iMeth();
        iArr2[(i >>> 1) % N] = (int)Test.instanceCount;
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i10=-6, i11=-9, i12=-11387, i13=-7236, i14=103;
        double d3=65.25253;
        short s=8350;
        float f1=44.403F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (int smallinvoc=0; smallinvoc<155; smallinvoc++) vSmallMeth(i10);
        for (long l : lArrFld) {
            d3 %= (Test.instanceCount | 1);
            for (i11 = 1; 63 > i11; ++i11) {
                for (i13 = 1; i13 < 2; i13++) {
                    if (bFld) break;
                    if (bFld) {
                        i12 += (i13 + Test.instanceCount);
                        i14 *= (int)l;
                        Test.iArrFld[i13 - 1] >>= i14;
                        switch (((-61385 >>> 1) % 2) + 78) {
                        case 78:
                        case 79:
                            bArr[i13] = bFld;
                            break;
                        default:
                            Test.iArrFld[i13 + 1] -= (int)l;
                            i12 = i11;
                        }
                    } else {
                        Test.instanceCount = i13;
                    }
                    i12 += (int)l;
                    l += (((i13 * Test.instanceCount) + Test.instanceCount) - i12);
                    i14 -= i10;
                    Test.fFld *= -245;
                    bFld = bFld;
                }
                s += (short)i10;
                f1 = 1;
                while (++f1 < 2) {
                    i14 = i11;
                    i12 += (int)(f1 + i12);
                    l = 12;
                    Test.instanceCount ^= i12;
                    Test.iArrFld[i11 - 1] *= (int)d3;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount *= (long)d3;
                    Test.instanceCount -= (long)Test.fFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
