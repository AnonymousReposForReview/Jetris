package tests.javafuzzer2756;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3281816188L;
    public static float fFld=1.73F;
    public short sFld=3467;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 107);
        FuzzerUtils.init(Test.sArrFld, (short)-11769);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, int i5) {

        int i6=32, i7=-217, i8=129, i9=8, i10=-53, i11=1, i12=-31614;
        double d2=-77.113341;
        byte by=-92;
        short s=-15962;

        b = b;
        for (i6 = 9; i6 < 367; i6++) {
            float f=92.16F;
            for (i8 = 1; i8 < 5; ++i8) {
                d2 = Test.instanceCount;
                by = (byte)21;
                Test.iArrFld[i6 - 1] = i8;
                Test.instanceCount ^= Test.instanceCount;
                i7 *= s;
            }
            i5 += i6;
            Test.instanceCount ^= i7;
            f = i6;
            for (i10 = 1; i10 < 5; i10++) {
                i12 = 1;
                while (++i12 < 2) {
                    i7 -= i7;
                    Test.instanceCount = i7;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d2) + by + s + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2, double d1) {

        int i3=10, i4=-247, i13=18699, i14=-129, i15=-98, i16=233;
        boolean b1=true;
        float f1=-24.407F;
        byte by1=-73;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);

        for (i3 = 11; i3 < 226; ++i3) {
            iMeth(b1, i1);
            lArr[i3] += (long)f1;
            i4 <<= by1;
            for (i13 = 1; i13 < 7; ++i13) {
                i1 *= (int)-121.913F;
                i2 -= -102;
                for (i15 = 1; i15 < 2; ++i15) {
                    i14 >>= by1;
                    i14 += 244;
                    Test.instanceCount += i15;
                    i14 *= i14;
                    Test.instanceCount += i2;
                    d1 = i2;
                    b1 = b1;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d1) + i3 + i4 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) +
            by1 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i17=39029, i18=-48045, i19=12, i20=215, i21=-64280;
        double d3=-8.76927;
        byte by2=30;

        vMeth1(-13, i17, d3);
        i17 += i17;
        i17 -= (int)l;
        Test.fFld = i17;
        i17 <<= i17;
        d3 += 82;
        for (i18 = 366; i18 > 13; i18--) {
            i19 += (i18 ^ i19);
            Test.sArrFld[i18] = (short)i19;
            for (i20 = 1; i20 < 5; ++i20) {
                i17 -= i17;
                l += (i20 ^ i19);
                by2 += (byte)i21;
            }
            Test.instanceCount += (i18 + i18);
            i17 = i17;
        }
        vMeth_check_sum += l + i17 + Double.doubleToLongBits(d3) + i18 + i19 + i20 + i21 + by2;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.85054, d4=0.49856, dArr[]=new double[N];
        int i=-202, i22=-36316, i23=-2, i24=-59732;
        long l1=-5577681586567521010L, lArr1[]=new long[N];
        boolean b2=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)33);
        FuzzerUtils.init(lArr1, 2375786682L);
        FuzzerUtils.init(dArr, -1.77250);

        d += Test.iArrFld[(i >>> 1) % N];
        vMeth(Test.instanceCount);
        byArr[(i >>> 1) % N] = (byte)i;
        Test.iArrFld[(i >>> 1) % N] = i;
        if (b2) {
            i22 = 300;
            do {
                Test.iArrFld[i22] += (int)Test.fFld;
                i += (i22 ^ i);
                Test.instanceCount <<= i;
                lArr1[i22] *= (long)Test.fFld;
                Test.fFld = i;
                i += i22;
                for (d4 = 13; d4 < 251; d4++) {
                    i23 &= 102;
                    i = i;
                    dArr[(int)(d4)] = i;
                    i23 -= (int)-119L;
                    d -= -2L;
                    lArr1[i22] <<= i22;
                    i23 = (int)Test.fFld;
                    if (b2) {
                        for (l1 = i22; l1 < 2; l1++) {
                            Test.iArrFld[(int)(d4)] <<= i24;
                            dArr[(int)(d4 - 1)] += i23;
                            Test.instanceCount = (long)Test.fFld;
                            Test.instanceCount -= Test.instanceCount;
                            i -= i23;
                            if (b2) continue;
                            i24 += i24;
                        }
                        sFld = (short)i24;
                    } else {
                        i24 -= (int)Test.fFld;
                    }
                }
            } while ((i22 -= 3) > 0);
        } else if (true) {
            Test.iArrFld[(i >>> 1) % N] *= 14;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
