package tests.javafuzzer1928;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:01:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3844949479761569198L;
    public static boolean bFld=false;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 78L);
        FuzzerUtils.init(Test.iArrFld, -3590);
        FuzzerUtils.init(Test.fArrFld, -2.38F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d=31.69734;
        short s=32473;
        int i4=179, i5=11031, i6=-191, i7=-88, i8=-18;
        float f=-112.315F;

        Test.instanceCount = Test.instanceCount;
        Test.instanceCount -= (long)d;
        Test.instanceCount *= s;
        for (i4 = 332; i4 > 20; i4--) {
            Test.iArrFld[i4] += (int)Test.instanceCount;
            Test.instanceCount = i4;
            i5 <<= (int)Test.instanceCount;
            i5 = s;
            for (i6 = 1; i6 < 5; i6++) {
                Test.instanceCount -= -3;
            }
            for (f = 1; f < 5; ++f) {
                Test.iArrFld[(int)(f)] = i7;
                i8 = i4;
                Test.instanceCount += i6;
                Test.fArrFld = Test.fArrFld;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + s + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8;
    }

    public static void vMeth1(int i2, int i3) {

        int i9=-8, i10=-7, i11=-36931, i12=-237, i13=-56235;
        float f1=15.441F;

        i2 -= (i2++);
        if (Test.bFld) {
            vMeth2();
            i2 += (int)Test.instanceCount;
            i2 = 106;
            vMeth1_check_sum += i2 + i3 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13;
            return;
        } else if (Test.bFld) {
            i3 += (int)Test.instanceCount;
            i9 = 1;
            do {
                for (i10 = i9; i10 < 8; ++i10) {
                    i2 *= (int)f1;
                    for (i12 = 1; i12 < 1; ++i12) {
                        Test.instanceCount %= (Test.instanceCount | 1);
                        i2 = i3;
                        i2 -= i13;
                        i11 -= (int)Test.instanceCount;
                        Test.fArrFld[i10 + 1] *= Test.instanceCount;
                    }
                }
            } while (++i9 < 212);
        }
        vMeth1_check_sum += i2 + i3 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13;
    }

    public static void vMeth(long l, int i1) {

        int i14=10027, i15=13862, i16=204, i17=-59708;
        double d1=-59.117601;
        float f2=0.712F;
        byte by=53;

        Test.iArrFld[(i1 >>> 1) % N] = -144;
        vMeth1(i1, i1);
        for (i14 = 2; i14 < 154; i14++) {
            i1 += i14;
            d1 += l;
            if (Test.bFld) {
                for (i16 = 1; i16 < 10; ++i16) {
                    Test.instanceCount = (long)f2;
                    l += i16;
                    Test.iArrFld[i16] = i14;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-59462);
                    if (Test.bFld) continue;
                    i15 += i15;
                    d1 = 13;
                    by += (byte)i16;
                }
            }
        }
        vMeth_check_sum += l + i1 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + Float.floatToIntBits(f2) + by;
    }

    public void mainTest(String[] strArr1) {

        int i=-5207, i18=12, i19=-64479, i20=24162, i21=-54527, i22=-71, i23=33119, i24=-158, i25=-37280, i26=248;
        float f3=2.564F;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 2.43008);

        i = (int)Test.lArrFld[(i >>> 1) % N][(i >>> 1) % N];
        vMeth(Test.instanceCount, -180);
        for (i18 = 8; i18 < 279; ++i18) {
            i20 = 1;
            while (++i20 < 93) {
                i19 = (int)Test.instanceCount;
                for (i21 = 1; i21 < 1; i21++) {
                    Test.iArrFld[i18 + 1] -= (int)Test.instanceCount;
                    if (Test.bFld) {
                        Test.bFld = Test.bFld;
                    } else {
                        Test.lArrFld[i20 - 1][i20 - 1] >>= i21;
                        if (Test.bFld) break;
                    }
                    Test.instanceCount += i21;
                    Test.instanceCount += i21;
                    i22 *= 42634;
                    Test.instanceCount += (((i21 * i18) + i19) - i20);
                    Test.bFld = Test.bFld;
                }
                dArr[i18 + 1][i20 + 1] += f3;
                try {
                    i = (8 / i);
                    i = (i18 % 36214);
                    i22 = (-234893938 / i19);
                } catch (ArithmeticException a_e) {}
                try {
                    Test.iArrFld[i20] = (856220179 % i19);
                    i = (Test.iArrFld[i18 + 1] % i);
                    i19 = (i22 % 13);
                } catch (ArithmeticException a_e) {}
                i22 += i20;
            }
            for (i23 = i18; 93 > i23; i23++) {
                for (i25 = i23; i25 < 1; ++i25) {
                    switch (((i23 % 6) * 5) + 58) {
                    case 81:
                        if (Test.bFld) continue;
                        i26 = (int)Test.instanceCount;
                        i19 = i20;
                        break;
                    case 86:
                    case 78:
                        i22 += (74 + (i25 * i25));
                        Test.lArrFld[i18 + 1][i23 + 1] = i23;
                        f3 = i21;
                        i += (i25 * i20);
                    case 60:
                        i26 = (int)Test.instanceCount;
                    case 85:
                        Test.iArrFld[i23 - 1] = i18;
                        break;
                    case 83:
                        Test.instanceCount = i;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
