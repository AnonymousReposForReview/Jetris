package tests.javafuzzer1118;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:43:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-27056L;
    public double dFld=0.49948;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -29489);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i3) {

        int i4=-78, i5=-26228, i6=-147, i7=43350, i8=-162, iArr[]=new int[N];
        float f=-121.317F, fArr[]=new float[N];
        long l2=3098190154L;

        FuzzerUtils.init(fArr, 2.529F);
        FuzzerUtils.init(iArr, 1805);

        fArr[(i3 >>> 1) % N] = 9;
        iArr[(i3 >>> 1) % N] <<= i3;
        iArr = iArr;
        Test.instanceCount = l1;
        for (i4 = 20; 367 > i4; ++i4) {
            Test.instanceCount >>= i4;
        }
        for (i6 = 2; i6 < 216; i6++) {
            i3 -= (int)1.53777;
            Test.instanceCount = i3;
            i7 *= 99;
            i5 += i7;
        }
        i3 += (int)f;
        for (l2 = 17; l2 < 346; ++l2) {
            byte by=-77;
            by *= (byte)i4;
            Test.instanceCount = (long)-89.854F;
        }
        vMeth2_check_sum += l1 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + l2 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i2) {

        int i9=-19443, i10=-15422, i11=-14, i12=248;
        long l3=5L, l4=1L;
        double d=-88.24002;
        float f1=2.467F;

        vMeth2(l, i2);
        i9 = 178;
        while (--i9 > 0) {
            i2 -= i9;
            i2 = i2;
            for (i10 = 1; i10 < 9; ++i10) {
                Test.instanceCount += i10;
                for (l3 = 1; l3 < 2; ++l3) {
                    i2 += (int)(l3 | i2);
                    d -= i12;
                    l4 += (((l3 * i9) + i11) - l);
                    l = 13;
                    d = i9;
                    l4 = l4;
                    l -= 12;
                }
                i2 = (int)f1;
            }
        }
        vMeth1_check_sum += l + i2 + i9 + i10 + i11 + l3 + i12 + Double.doubleToLongBits(d) + l4 +
            Float.floatToIntBits(f1);
    }

    public static void vMeth(int i, int i1) {

        int i13=1685, i14=160, i15=130, i16=-9, i17=93, i18=76, i19=96;
        float f2=0.387F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)8269);

        Test.instanceCount ^= (i1 = i);
        vMeth1(-3219321383842911465L, i);
        i1 >>= i;
        for (i13 = 11; i13 < 303; i13++) {
            for (i15 = 1; i15 < 6; i15 += 3) {
                byte by1=72;
                Test.instanceCount = i14;
                i16 += (i15 * i15);
                sArr[i15] *= (short)i15;
                by1 += (byte)(((i15 * f2) + i16) - by1);
                Test.iArrFld[i15 - 1] = (int)-841145711L;
            }
        }
        for (i17 = 10; i17 < 329; ++i17) {
            i16 = i14;
            i19 = 1;
            do {
                try {
                    i14 = (i17 % -254);
                    i14 = (i1 / i16);
                    i16 = (61752 / i17);
                } catch (ArithmeticException a_e) {}
                f2 %= (i1 | 1);
            } while (++i19 < 5);
        }
        vMeth_check_sum += i + i1 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 + i19 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-5141, i22=-35764, i23=-25499, i24=5, i25=-13656, i26=-8, i27=-10, i28=14, i29=-105;
        float f3=-77.741F, f4=-89.405F;
        double d1=-2.69293;
        short s=-7143;
        byte by2=-59;

        vMeth(i20, i20);
        f3 = 1;
        do {
            i20 += (int)(f3 * i20);
            i20 = i20;
        } while (++f3 < 334);
        for (i22 = 9; i22 < 304; ++i22) {
            Test.iArrFld[i22 - 1] *= -58420;
            f4 += i22;
            f4 += i23;
            Test.iArrFld[i22] += i20;
            switch (((i22 % 6) * 5) + 107) {
            case 110:
                Test.instanceCount = -53867;
                break;
            case 132:
            case 108:
                for (i24 = 1; i24 < 85; i24++) {
                    i26 = 2;
                    do {
                        Test.instanceCount = i24;
                    } while ((i26 -= 3) > 0);
                    d1 = 1;
                    while (++d1 < 2) {
                        dFld += f4;
                    }
                    Test.iArrFld[i22 + 1] >>= s;
                }
                for (i27 = 1; 85 > i27; i27++) {
                    Test.instanceCount += (i27 + i20);
                    Test.iArrFld[i22] += i24;
                    i25 <<= i26;
                    i28 = 10767;
                    i29 = 1;
                    do {
                        i20 <<= i27;
                        i23 += (int)Test.instanceCount;
                        Test.instanceCount += (i29 - i26);
                        Test.instanceCount -= by2;
                        i25 |= i26;
                        f4 -= i26;
                    } while (++i29 < 2);
                }
            case 114:
                Test.instanceCount &= i20;
                break;
            case 121:
                i25 <<= 14406;
                break;
            case 125:
            default:
                i25 += (((i22 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
