package tests.javafuzzer619;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:41:02 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-50L;
    public static int iFld=-6;
    public boolean bFld=false;
    public byte byFld=-79;
    public static int iFld1=-9571;
    public static int iFld2=-10;
    public float fFld=-1.555F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -142);
    }

    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=-17517, i2=-4, i3=6, i4=-228;
        short s=769;
        boolean b=true;
        byte by=-105;
        double d=45.27850, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 118.127412);

        Test.iFld = (int)Test.instanceCount;
        dArr[(Test.iFld >>> 1) % N] += Test.iFld;
        i1 = 1;
        do {
            s += (short)(0 + (i1 * i1));
            for (i2 = 1; i2 < 4; i2++) {
                b = b;
                i3 -= i2;
                Test.instanceCount = Test.iFld;
                i3 -= i2;
                by -= (byte)d;
                i3 <<= (int)Test.instanceCount;
                Test.iArrFld[i2 - 1] *= Test.iFld;
                if (i2 != 0) {
                    vMeth_check_sum += i1 + s + i2 + i3 + (b ? 1 : 0) + by + Double.doubleToLongBits(d) + i4 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                i3 += i2;
                try {
                    i3 = (i4 / -3381);
                    Test.iArrFld[i1] = (30579 % i2);
                    Test.iFld = (-1129607429 / i4);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i1 < 380);
        vMeth_check_sum += i1 + s + i2 + i3 + (b ? 1 : 0) + by + Double.doubleToLongBits(d) + i4 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public long lMeth() {


        vMeth();
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public short sMeth(float f) {

        int i=-3, i5=-86, i6=-8237, i7=20626, i8=8;
        double d1=0.26483;

        i = 1;
        while (++i < 285) {
            bFld = (((4 + (Test.iFld * i)) + lMeth()) <= Test.iFld);
            if (i != 0) {
            }
            i5 = byFld;
            Test.iFld1 -= Test.iFld;
            Test.instanceCount <<= -99;
            Test.iFld += Test.iFld1;
            Test.iFld = i;
            Test.iFld1 = (int)d1;
            i6 = 1;
            while (++i6 < 6) {
                switch ((((i >>> 1) % 7) * 5) + 109) {
                case 123:
                    for (i7 = 1; 1 > i7; i7++) {
                        f -= i8;
                        Test.iFld <<= (int)Test.instanceCount;
                        Test.instanceCount = Test.instanceCount;
                    }
                    break;
                case 127:
                    Test.iArrFld[i - 1] -= i6;
                    break;
                case 144:
                    Test.iArrFld[i6 - 1] = 28584;
                    break;
                case 136:
                    Test.instanceCount = (long)d1;
                case 142:
                    i5 = 13;
                    break;
                case 124:
                    Test.iArrFld[i + 1] += Test.iFld1;
                    break;
                case 110:
                    Test.iArrFld[i] = byFld;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i9=8, i10=-25407, i11=57365, i12=4, i13=-173, i14=24755, i15=-9, i16=4, i17=1;
        long l=9L;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -119.39450);

        Test.iFld -= sMeth(21.22F);
        Test.iFld1 *= (int)56027L;
        for (i9 = 11; i9 < 211; ++i9) {
            dArr1 = dArr1;
            for (i11 = 4; i11 < 126; i11++) {
                i10 *= i11;
                i12 = (int)Test.instanceCount;
                i12 += i11;
            }
            Test.iFld1 += (-61463 + (i9 * i9));
        }
        Test.iFld = (int)Test.instanceCount;
        Test.instanceCount = -225;
        Test.iFld1 >>>= i10;
        for (i13 = 8; i13 < 156; ++i13) {
            i10 += (i13 * i13);
            for (i15 = 9; i15 < 169; i15++) {
                switch ((((i9 >>> 1) % 7) * 5) + 83) {
                case 110:
                    i10 -= 100;
                    Test.instanceCount >>= Test.instanceCount;
                    Test.instanceCount += (((i15 * i14) + i9) - i15);
                    for (l = 1; l < 2; l++) {
                        Test.instanceCount >>= Test.iFld;
                        Test.iFld2 += (int)l;
                        i14 -= i17;
                        if (bFld) {
                            Test.iFld = (int)l;
                            Test.instanceCount += (-10 + (l * l));
                            Test.iArrFld = Test.iArrFld;
                            Test.iFld2 = i14;
                        }
                        Test.iArrFld[i15 + 1] = (int)l;
                        if (bFld) break;
                    }
                    break;
                case 92:
                    fFld += (i15 * Test.instanceCount);
                    break;
                case 114:
                    Test.iFld = i13;
                    break;
                case 88:
                    Test.instanceCount /= (i13 | 1);
                    break;
                case 118:
                    i14 += (i15 * i15);
                    break;
                case 115:
                    Test.instanceCount %= ((long)(fFld) | 1);
                    break;
                case 95:
                    bFld = true;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
