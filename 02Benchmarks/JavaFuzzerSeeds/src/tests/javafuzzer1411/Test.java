package tests.javafuzzer1411;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:55:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7084665400525951365L;
    public static boolean bFld=true;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -93.81526);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, float f1) {

        int i2=-7, i3=-57085, i4=-150, i5=-9, iArr[][]=new int[N][N];
        double d=-117.29717;
        byte by1=67;

        FuzzerUtils.init(iArr, 1016);

        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = (int)f1;
        i2 = 1;
        while (++i2 < 130) {
            iArr[i2][i2 + 1] -= -9;
            i1 = i2;
            i3 = 1;
            while (++i3 < 12) {
                i1 += (int)d;
                iArr[i2][i3 + 1] += i1;
                for (i4 = 1; i4 < 1; ++i4) {
                    i5 += (((i4 * i3) + i2) - i2);
                    switch (((i2 % 2) * 5) + 72) {
                    case 78:
                        i1 = i3;
                        f1 += Test.instanceCount;
                        break;
                    case 82:
                        Test.instanceCount += i4;
                        i5 >>= by1;
                        Test.dArrFld[i3] *= i5;
                        break;
                    default:
                        iArr[(i4 >>> 1) % N][i4 - 1] = -69;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i6=7, i7=-23782, i8=-8, i9=0, i10=-4777, i11=207, i12=119, iArr1[]=new int[N];
        float f2=88.869F;
        byte by2=-107;

        FuzzerUtils.init(iArr1, 80);

        vMeth1(i6, f2);
        i6 -= (int)f2;
        i6 += i6;
        for (i7 = 352; i7 > 16; i7 -= 3) {
            i6 = -12;
            i8 -= i6;
            i6 -= i6;
            for (i9 = 14; i9 > 1; --i9) {
                if (i6 != 0) {
                }
                i8 *= i10;
                f2 -= i7;
                iArr1[i7 + 1] >>= (int)47595L;
            }
            for (i11 = 14; i11 > 1; i11--) {
                if (i10 != 0) {
                }
            }
            i8 += by2;
        }
        long meth_res = i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + i12 + by2 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, int i, float f) {

        int i13=-12, i14=-13, i15=-52, i16=-9, i17=13469, i18=27441;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)86);

        i += (iMeth() + i);
        byArr[(i >>> 1) % N] |= (byte)Test.instanceCount;
        i13 = 121;
        do {
            i = (int)Test.instanceCount;
            f += i;
            for (i14 = 37; 1 < i14; i14--) {
                f += f;
                for (i16 = 1; i16 < 2; i16 += 3) {
                    if (b) continue;
                    by += (byte)(i16 | Test.instanceCount);
                    i17 += (int)Test.instanceCount;
                }
                Test.instanceCount = i14;
                i += i16;
            }
            Test.instanceCount += (((i13 * i) + Test.instanceCount) - i18);
            i18 += (i13 - i13);
        } while ((i13 -= 3) > 0);
        vMeth_check_sum += by + i + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + i18 +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        byte by3=-41;
        int i19=-217, i20=-3, i21=-14, i22=205, i23=-12, i24=14, i25=62172, i26=-43, iArr2[][]=new int[N][N];
        float f3=2.539F, f4=-8.355F;
        long l=-2943332782861723736L;
        short s=-28692;
        double d1=-45.37976;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 55);
        FuzzerUtils.init(bArr, true);

        vMeth(by3, i19, -2.26F);
        Test.dArrFld[(1 >>> 1) % N] += 1;
        Test.instanceCount += Test.instanceCount;
        for (i20 = 22; i20 < 376; ++i20) {
            for (f3 = 1; f3 < 71; f3++) {
                switch (((i22 >>> 1) % 1) + 13) {
                case 13:
                    i19 = (int)Test.instanceCount;
                    iArr2[i20][i20 + 1] &= i22;
                    i22 -= i21;
                    i21 += (int)(((f3 * f3) + i21) - i19);
                    break;
                default:
                    Test.bFld = Test.bFld;
                    Test.bFld = Test.bFld;
                    Test.instanceCount += -118;
                }
                i19 -= i22;
            }
        }
        i23 = 1;
        while (++i23 < 166) {
            f4 += 41437L;
            if (Test.bFld) {
                if (Test.bFld) {
                    i22 += i23;
                    i21 = i22;
                    i19 <<= (int)57351L;
                    for (i24 = 4; i24 < 151; i24++) {
                        for (l = 1; l < 2; l++) {
                            switch (((i23 % 8) * 5) + 69) {
                            case 87:
                                bArr[(int)(l)] = Test.bFld;
                                switch ((i24 % 7) + 73) {
                                case 73:
                                    i22 *= -171;
                                    Test.instanceCount += (((l * i20) + l) - s);
                                    break;
                                case 74:
                                    s += (short)i24;
                                    try {
                                        iArr2[i24][(int)(l)] = (i21 / i19);
                                        iArr2[i23 - 1][i23 + 1] = (i26 / iArr2[i24 + 1][i23]);
                                        i21 = (i21 / i23);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 75:
                                    iArr2[(-21450 >>> 1) % N][(int)(l)] *= 13;
                                    break;
                                case 76:
                                case 77:
                                    s = (short)-799957744L;
                                    break;
                                case 78:
                                    i25 += (int)d1;
                                case 79:
                                    i19 -= (int)d1;
                                    break;
                                }
                                break;
                            case 91:
                                iArr2[i23 + 1][i23] -= (int)Test.instanceCount;
                            case 92:
                                Test.instanceCount |= Test.instanceCount;
                            case 96:
                                Test.instanceCount >>>= i23;
                                break;
                            case 102:
                                i19 = i25;
                                break;
                            case 76:
                                i21 += (int)l;
                                break;
                            case 80:
                                i26 += (int)(l + i21);
                                break;
                            case 82:
                                d1 *= f4;
                                break;
                            default:
                                iArr2[(int)(l - 1)][i23 + 1] = (int)Test.instanceCount;
                            }
                        }
                    }
                } else {
                    iArr2[i23][i23 + 1] -= -217;
                }
            } else {
                f4 -= 4;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
