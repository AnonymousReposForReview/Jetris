package tests.javafuzzer1268;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:34:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static boolean bFld=true;
    public int iFld=-3;
    public static volatile short sFld=-8710;
    public float fFld=-114.305F;
    public byte byFld=-15;
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -394287531191512479L);
        FuzzerUtils.init(Test.dArrFld, -1.111712);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(double d) {

        int i=4;

        Test.bFld = (!((i > i) || (Test.instanceCount != i)));
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i;
    }

    public static void vMeth(int i3, int i4, long l) {

        double d1=61.66883, d2=26.74757;
        int i5=-23789, i6=40, i7=6, i8=4, i9=5958, i10=170;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.221F);

        d1 = 1;
        do {
            i3 = i4;
            for (i5 = 7; i5 > 1; i5--) {
                for (i7 = i5; i7 < 2; ++i7) {
                    float f1=2.757F;
                    i6 += (int)(77.1021F + (i7 * i7));
                    i6 += 7;
                    i4 += (((i7 * i5) + Test.sFld) - i7);
                    f1 += 38200L;
                    fArr[(int)(d1)] -= i8;
                    Test.lArrFld[i7] = i4;
                    Test.instanceCount <<= i4;
                    i8 = (int)Test.instanceCount;
                }
                for (i9 = 1; 2 > i9; i9++) {
                    Test.instanceCount = i6;
                    d2 = 4091681930L;
                }
            }
        } while (++d1 < 219);
        vMeth_check_sum += i3 + i4 + l + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(float f) {

        int i11=68, i12=4, i13=3237, i14=-63884, i15=15223, i16=-9;

        vMeth(i11, i11, Test.instanceCount);
        i11 = i11;
        i11 += (int)Test.instanceCount;
        for (i12 = 149; i12 > 3; i12 -= 3) {
            i14 = 1;
            while (++i14 < 32) {
                i13 = 32504;
                i11 = (int)355945304L;
            }
            Test.sFld *= (short)i14;
            i11 = i11;
            i11 = -60447;
            i13 -= (int)Test.instanceCount;
        }
        for (i15 = 9; i15 < 352; i15++) {
            double d3=0.31016;
            f += i15;
            i13 <<= (int)Test.instanceCount;
            i13 += (int)d3;
        }
        long meth_res = Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        float f2=2.530F, f3=-124.936F;
        int i17=-9, i18=38082, i19=3, i20=13, i21=-34077, iArr[]=new int[N];
        double d4=0.5783, dArr[]=new double[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-125);
        FuzzerUtils.init(dArr, 63.105252);
        FuzzerUtils.init(iArr, -37);

        vSmallMeth((i1 * (++i2)) * ((-30.1015F - (Test.sFld + 57663)) - Test.instanceCount));
        lMeth(f2);
        i1 >>= i1;
        for (i17 = 13; i17 < 254; i17++) {
            byArr[i17][i17] = (byte)7097459678887937064L;
            Test.bFld = Test.bFld;
            for (f3 = 1; f3 < 7; f3++) {
                d4 = i1;
                i1 *= i19;
                for (i20 = 2; i20 > f3; --i20) {
                    dArr[i17] *= i1;
                    if (Test.bFld) {
                        i2 *= (int)9L;
                        iArr[i20] += 49;
                        i19 += (i20 - i19);
                    }
                }
            }
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f2) + i17 + i18 + Float.floatToIntBits(f3) + i19 +
            Double.doubleToLongBits(d4) + i20 + i21 + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i22=-4, i23=-7, i24=-209, i25=-12, i26=-8, i27=24, i28=7, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        double d5=-25.94439;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(iArr2, 5);
        FuzzerUtils.init(sArr, (short)-22830);

        if (Test.bFld) {
            for (int smallinvoc=0; smallinvoc<165; smallinvoc++) vSmallMeth(((7132 - Test.instanceCount) + (-40384 ^
                (iFld + Test.instanceCount))) + iMeth(iFld, 11));
            i22 = 1;
            while ((i22 += 3) < 173) {
                iArr1[i22 + 1] *= i22;
                for (i23 = 252; 12 < i23; i23--) {
                    Test.instanceCount = i23;
                    iFld = i23;
                    for (i25 = 1; i25 < 2; ++i25) {
                        fArrFld[i22 - 1] += iFld;
                        iArr1 = iArr2[i23 - 1];
                        Test.dArrFld[i22] *= i24;
                        Test.instanceCount = i26;
                        i24 = i26;
                        i24 = i26;
                        d5 /= (i22 | 1);
                        sArr[i22 - 1] = (short)i22;
                        i24 -= (int)fFld;
                        Test.instanceCount += i25;
                    }
                }
                iFld += i22;
                iArr2[i22][i22] -= 35;
                Test.lArrFld[i22] = 230;
                fFld += i22;
                i27 = 1;
                while (++i27 < 191) {
                    i26 = -178;
                    iArr1[i27 - 1] >>= byFld;
                    if (Test.bFld) break;
                }
                i28 = 1;
                while (++i28 < 396) {
                    if (Test.bFld) continue;
                    iFld += (i28 ^ (long)fFld);
                    iArr2[i22 + 1][i22] += i23;
                }
            }
        } else {
            iFld >>= i27;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
