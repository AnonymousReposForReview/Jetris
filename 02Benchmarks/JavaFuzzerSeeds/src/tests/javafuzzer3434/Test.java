package tests.javafuzzer3434;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:16:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public int iFld=13;
    public static int iFld1=7;
    public static float fFld=2.635F;
    public static volatile byte byFld=-63;
    public short sFld=19689;
    public static long lFld=-11L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 183);
        FuzzerUtils.init(Test.lArrFld, 9316L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1) {

        int i1=-23, i2=4, i3=-4, i4=-12173, i5=-73, i6=-181, i7=-117;
        long l2=14L;
        double d=100.14887;

        Test.iFld1 += 14;
        for (i1 = 4; i1 < 330; ++i1) {
            Test.iFld1 -= i1;
            for (l2 = 1; l2 < 5; l2++) {
                d = l2;
                Test.fFld -= 52595;
                Test.instanceCount = (long)1.82632;
                try {
                    i2 = (i2 % Test.iArrFld[(int)(l2)]);
                    i3 = (Test.iFld1 % i1);
                    Test.iArrFld[(int)(l2 + 1)] = (i1 / -20424);
                } catch (ArithmeticException a_e) {}
            }
            i2 *= i2;
            Test.fFld /= (i2 | 1);
        }
        for (i4 = 5; i4 < 205; i4++) {
            Test.fFld += l1;
            for (i6 = 1; i6 < 8; ++i6) {
                i3 /= (int)(l1 | 1);
                Test.iFld1 += 29179;
            }
        }
        vMeth1_check_sum += l + l1 + i1 + i2 + l2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7;
    }

    public static void vMeth() {


        vMeth1(-118L, Test.instanceCount);
        Test.iFld1 |= (int)-1183790306L;
        Test.iFld1 = Test.byFld;
        vMeth_check_sum += 0;
    }

    public static int iMeth(byte by) {

        int i8=59246, i9=-102, i10=11, i11=-9, i12=76, i13=5, i14=172;
        double d1=-115.87624;

        vMeth();
        Test.instanceCount += Test.iFld1;
        for (i8 = 8; i8 < 238; ++i8) {
            Test.iArrFld[i8] = (int)d1;
            i9 >>>= i10;
            i10 += (7 + (i8 * i8));
            i10 += i11;
            i12 = 1;
            do {
                Test.iFld1 <<= 1;
                for (i13 = 1; i13 < 1; ++i13) {
                    i14 += (111 + (i13 * i13));
                }
                Test.iFld1 = Test.iFld1;
            } while (++i12 < 7);
            Test.byFld += (byte)i8;
        }
        Test.instanceCount = Test.instanceCount;
        Test.iArrFld[(i8 >>> 1) % N] <<= (int)Test.instanceCount;
        long meth_res = by + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-93, i15=0, i16=60267, i17=14, i18=-178, i19=2508, i20=-71;
        double d2=73.95678, dArr[]=new double[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 2.118F);
        FuzzerUtils.init(dArr, -2.124535);

        i = 1;
        do {
            iFld /= (int)((iFld - (iMeth(Test.byFld) * Test.instanceCount)) | 1);
            for (i15 = i; i15 < 110; i15++) {
                for (i17 = 1; i17 < 1; ++i17) {
                    fArr[(i16 >>> 1) % N][i15] *= i;
                    sFld <<= (short)Test.iFld1;
                    switch (((i % 1) * 5) + 38) {
                    case 41:
                        dArr[i] = i15;
                        try {
                            Test.iArrFld[i15] = (-2031463714 % iFld);
                            iFld = (i15 / -105);
                            iFld = (Test.iFld1 % Test.iFld1);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                    i18 = iFld;
                    i18 <<= iFld;
                    Test.instanceCount -= -120L;
                    Test.lArrFld[i15 + 1] -= (long)30.308F;
                    i16 += i17;
                    Test.iFld1 ^= 4;
                    d2 *= Test.instanceCount;
                }
                for (i19 = 1; i19 < 1; i19++) {
                    Test.iFld1 <<= iFld;
                    Test.instanceCount <<= Test.instanceCount;
                    Test.iFld1 += (int)(9L + (i19 * i19));
                    i20 -= (int)d2;
                    i16 += Test.iFld1;
                    iFld -= (int)Test.fFld;
                    Test.instanceCount = 4248L;
                    Test.lFld -= Test.lFld;
                    Test.iArrFld[i] += (int)175L;
                    d2 = Test.iFld1;
                }
                Test.byFld += (byte)Test.lFld;
                Test.instanceCount ^= Test.iFld1;
                Test.instanceCount += (((i15 * i18) + i16) - Test.lFld);
            }
        } while (++i < 229);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
