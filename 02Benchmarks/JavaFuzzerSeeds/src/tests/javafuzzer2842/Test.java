package tests.javafuzzer2842;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:20:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2681606069690994810L;
    public static int iFld=0;
    public static byte byFld=102;
    public static volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.sArrFld, (short)-7909);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1) {

        int i12=62425, iArr[][]=new int[N][N];
        byte by=74;
        float f1=-1.710F;

        FuzzerUtils.init(iArr, -59675);

        iArr = iArr;
        i12 = 361;
        do {
            Test.iArrFld[i12 - 1] += by;
            Test.iFld += (i12 * Test.instanceCount);
        } while (--i12 > 0);
        Test.iFld = (int)f1;
        Test.iFld *= Test.iFld;
        long meth_res = l1 + i12 + by + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i6=-220, i7=32327, i8=135, i9=216, i10=88, i11=190;
        boolean b=false;
        long l=-8235542264863526084L;
        double d=1.90083;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)120);

        i6 >>= (int)(i6 -= (int)(-(Test.instanceCount + Test.iFld)));
        i7 = 327;
        while (--i7 > 0) {
            switch ((i7 % 6) + 66) {
            case 66:
                b = b;
                Test.iFld <<= (int)((++l) * (-(l += Test.iFld)));
                break;
            case 67:
                try {
                    i6 = (214 % Test.iArrFld[i7]);
                    Test.iArrFld[i7] = (i6 % -163);
                    Test.iFld = (-29429 % i6);
                } catch (ArithmeticException a_e) {}
                for (i8 = 1; i8 < 5; ++i8) {
                    for (i10 = i7; i10 < 2; ++i10) {
                        byArr[i8] /= (byte)(i6 | 1);
                        Test.instanceCount += (long)(d--);
                        Test.iFld += (i10 - i9);
                        Test.iArrFld[i10] -= iMeth1(-1474L);
                        i11 = i10;
                        Test.byFld -= (byte)i8;
                        Test.iFld += 34775;
                    }
                }
                break;
            case 68:
                Test.iArrFld[i7] -= (int)Test.instanceCount;
                break;
            case 69:
                Test.instanceCount *= i7;
                break;
            case 70:
                i11 *= i10;
                break;
            case 71:
                i11 <<= i6;
                break;
            default:
                Test.instanceCount += (-12 + (i7 * i7));
            }
        }
        long meth_res = i6 + i7 + (b ? 1 : 0) + l + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i=9318, i1=106, i2=55483, i3=-24229, i4=49869, i5=167, i14=13;
        float f=2.612F, f2=-22.195F;

        i -= (--i);
        f += Test.iArrFld[(i1 >>> 1) % N];
        for (i2 = 9; i2 < 358; ++i2) {
            for (i4 = 1; i4 < 5; i4++) {
                switch (((iMeth() >>> 1) % 1) + 45) {
                case 45:
                    Test.iFld += (i4 * i4);
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-2);
                default:
                    Test.sArrFld[i4] += (short)f;
                    i = i;
                }
                for (f2 = 2; f2 > 1; f2 -= 2) {
                    Test.byFld ^= (byte)-61411;
                    f *= 3770336345L;
                    Test.instanceCount = i4;
                }
            }
            i5 = i5;
            Test.iArrFld[i2] <<= (int)282425594L;
        }
        long meth_res = i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f2) + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=141, i16=-3116, i17=-8, i18=8, i19=7, i20=64328, i21=-12, i22=-71, i23=-28353, i24=8074;
        double d1=2.105890;
        short s=-32530;
        float f3=-1.328F, f4=2.981F;
        boolean b1=false;

        lMeth();
        for (i15 = 9; i15 < 262; ++i15) {
            Test.instanceCount += i15;
        }
        for (i17 = 11; 233 > i17; ++i17) {
            for (i19 = 113; i19 > 5; i19--) {
                switch (((i19 % 9) * 5) + 54) {
                case 76:
                    switch ((i17 % 8) + 16) {
                    case 16:
                        Test.instanceCount = Test.byFld;
                        for (i21 = i17; i21 < 2; i21++) {
                            Test.instanceCount -= Test.instanceCount;
                            i18 *= i15;
                            i16 ^= (int)Test.instanceCount;
                            Test.instanceCount >>= Test.instanceCount;
                            i20 -= (int)Test.instanceCount;
                            Test.iFld += (i21 ^ Test.iFld);
                            d1 += Test.instanceCount;
                        }
                        Test.instanceCount = Test.instanceCount;
                        s += (short)(-11707 + (i19 * i19));
                        break;
                    case 17:
                        for (f3 = 2; f3 > 1; f3--) {
                            Test.iArrFld = Test.iArrFld;
                            Test.instanceCount = i20;
                        }
                        i20 += (i19 | Test.instanceCount);
                        Test.instanceCount <<= i15;
                        d1 += 54;
                        break;
                    case 18:
                        i18 += (-27453 + (i19 * i19));
                        i24 = 1;
                        while (++i24 < 2) {
                            Test.instanceCount = Test.instanceCount;
                            if (b1) break;
                            Test.instanceCount -= i18;
                        }
                        break;
                    case 19:
                        try {
                            i16 = (97 / Test.iArrFld[i19 + 1]);
                            i18 = (-26213 % i18);
                            i18 = (i21 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 20:
                        Test.iFld *= (int)f3;
                        break;
                    case 21:
                    case 22:
                        if (b1) continue;
                        break;
                    case 23:
                        Test.byFld |= (byte)i18;
                        break;
                    }
                    break;
                case 98:
                    i22 += (((i19 * s) + Test.instanceCount) - i21);
                    break;
                case 67:
                    i22 = 68;
                case 84:
                    i20 *= s;
                    break;
                case 87:
                    f4 += i15;
                case 69:
                    i20 = i22;
                    break;
                case 96:
                    i16 += i19;
                    break;
                case 99:
                    i16 = i18;
                    break;
                case 88:
                    i23 -= i24;
                    break;
                default:
                    Test.sArrFld[i19 + 1] -= (short)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
