package tests.javafuzzer2741;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:41:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7817436885740276731L;
    public static volatile byte byFld=-18;
    public static long lFld=148L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 10L);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7, long l1, long l2) {

        int i9=-27247, i10=29, i11=50195, i12=64244, i13=64978, iArr1[]=new int[N];
        float f2=1.572F, fArr[]=new float[N];
        boolean b=false;
        double d=-108.39831;

        FuzzerUtils.init(fArr, 41.769F);
        FuzzerUtils.init(iArr1, 59852);

        fArr[(i7 >>> 1) % N] -= -20;
        for (int i8 : iArr1) {
            for (i9 = 4; i9 > 1; i9--) {
                l1 += (i9 + f2);
                for (i11 = i9; i11 < 2; i11++) {
                    if (b) continue;
                    iArr1[i9 - 1] >>= i11;
                    i13 += i8;
                }
                Test.instanceCount = (long)f2;
                iArr1 = iArr1;
                Test.byFld &= (byte)i12;
                i10 |= 0;
                Test.lArrFld[i9] = i13;
                f2 -= -63.820F;
            }
            d += i12;
        }
        long meth_res = i7 + l1 + l2 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + (b ? 1 : 0) + i13 +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f1=0.646F, f3=0.341F, f4=-45.525F;
        int i6=3, i14=-16474, i15=-63191, i16=176;
        boolean b1=true;
        long l3=30558L;

        f1 /= (((long)(((i6 + i6) * (103 - iMeth1(-46714, 151L, -9L))) + f1)) | 1);
        Test.byFld -= (byte)Test.instanceCount;
        f3 += i6;
        f4 = 1;
        do {
            if (b1) continue;
            i14 = 1;
            while (++i14 < 7) {
                i6 += (((i14 * i14) + Test.byFld) - i6);
                i6 += (i14 * i14);
                for (i15 = 1; i15 < 1; i15++) {
                    Test.instanceCount *= Test.lFld;
                    i16 -= (int)-57115L;
                }
                Test.instanceCount = i16;
                l3 = 1;
                while (++l3 < 1) {
                    i6 |= i15;
                    i16 = Test.byFld;
                }
            }
        } while (++f4 < 250);
        long meth_res = Float.floatToIntBits(f1) + i6 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + (b1 ? 1 :
            0) + i14 + i15 + i16 + l3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth() {

        double d1=0.87922;
        int i17=-3;

        iMeth();
        d1 += i17;
        long meth_res = Double.doubleToLongBits(d1) + i17;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-250, i1=176, i2=-73, i3=-14, i4=-7, i5=9, i18=69, i19=-93, i20=-123, i21=-126, i23=-35497, i24=-193,
            i25=-32, iArr[]=new int[N];
        long l=-2091L, lArr[][]=new long[N][N];
        float f=0.306F;
        boolean b2=true;
        short s=23442;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-125);
        FuzzerUtils.init(iArr, 65226);
        FuzzerUtils.init(lArr, -178L);

        i = ((byArr[(i >>> 1) % N][(1 >>> 1) % N]++) * 22322);
        iArr[(12815 >>> 1) % N] -= i;
        lArr[(i >>> 1) % N][(-55 >>> 1) % N] = i;
        for (l = 20; l < 387; ++l) {
            for (i2 = 2; i2 < 69; i2++) {
                for (i4 = 1; i4 < 2; i4++) {
                    i3 *= (int)(f - (Math.min(-8L, l) + i5));
                    Test.byFld = (byte)((i3 -= (int)Test.lFld) - ((--i5) - (f - Test.lFld)));
                    i5 |= (int)(((i4 / (i3 | 1)) * iArr[i4]) * Test.instanceCount);
                    i5 += (((i4 * i3) + i3) - i5);
                    Test.lFld += (i4 * i4);
                    i += (i4 - i4);
                    Test.lFld = iArr[i2];
                }
                i5 += i2;
            }
            Test.byFld = (byte)(i1 % (Test.lArrFld[(int)(l - 1)] | 1));
        }
        if (bMeth() && false) {
            lArr[(i4 >>> 1) % N][(i1 >>> 1) % N] -= (long)(-39130 - ((-9 / (((long)(f - Test.instanceCount)) | 1)) - (i
                * -52544L)));
            Test.lFld = i2;
        }
        iArr[(-2312 >>> 1) % N] -= i4;
        i = (int)f;
        for (i18 = 3; i18 < 255; i18++) {
            if (b2) continue;
        }
        for (i20 = 6; i20 < 146; i20++) {
            i1 -= i2;
            i3 = (int)f;
            for (i23 = 179; i23 > i20; i23 -= 3) {
                s -= (short)i25;
                i25 += i2;
                i21 = (int)f;
                i21 <<= i23;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
