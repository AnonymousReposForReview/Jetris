package tests.javafuzzer1074;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:04:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=31L;
    public static int iFld=-12;
    public static float fFld=1.1013F;
    public int iFld1=-30;
    public static double dFld=-33.40490;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 75.95F);
        FuzzerUtils.init(Test.lArrFld, -3711629991526784977L);
        FuzzerUtils.init(Test.iArrFld1, 4);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(double d1) {

        int i16=35646, i17=-196, i18=19271, i19=6, i20=34, iArr1[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 9);

        for (i16 = 13; i16 < 239; ++i16) {
            Test.instanceCount -= Test.instanceCount;
            iArr1[i16][i16 - 1] = i16;
            i18 = 1;
            do {
                Test.iFld += i16;
                iArr1[i18][i16] <<= Test.iFld;
                i17 = Test.iFld;
                if (b) continue;
                Test.instanceCount -= (long)d1;
                Test.lArrFld[i18][i16] = i16;
                i17 = i18;
                Test.iFld += (int)Test.fFld;
                for (i19 = 1; i19 < 3; i19++) {
                    b = b;
                    iArr1[i16 + 1][i16] = 1;
                }
            } while ((i18 += 2) < 7);
        }
        long meth_res = Double.doubleToLongBits(d1) + i16 + i17 + i18 + (b ? 1 : 0) + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i10, float f, int i11) {

        int i12=52, i13=2, i14=44909, i15=0, i21=-57;
        double d2=-2.95916;
        float f1=-1.1010F;

        for (i12 = 14; i12 < 346; i12 += 2) {
            for (i14 = 1; i14 < 10; ++i14) {
                Test.fArrFld[i12 + 1] -= ((fMeth1(d2) * f) + i15);
                i11 = i12;
                Test.iFld -= i12;
                i11 *= i15;
                Test.instanceCount = (long)Test.fFld;
                Test.lArrFld[i14 + 1][i14 + 1] = i13;
                Test.iArrFld1[i14] = 30965;
                for (f1 = 2; f1 > i14; f1--) {
                    Test.instanceCount += (long)(((f1 * Test.instanceCount) + Test.iFld) - f1);
                    Test.instanceCount += (long)f;
                    i11 &= i15;
                    i15 -= i12;
                    Test.instanceCount *= (long)Test.fFld;
                }
            }
        }
        vMeth_check_sum += i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f1) + i21;
    }

    public static float fMeth(int i7, byte by, int i8) {

        long l=-15397L;
        int i9=174, i22=-50, i23=103, i24=3, i25=-171, iArr[]=new int[N];
        short s=31972;

        FuzzerUtils.init(iArr, 5);

        for (l = 17; l < 330; ++l) {
            i8 -= i7;
            s -= (short)((--Test.instanceCount) - Math.abs(--iArr[(int)(l - 1)]));
        }
        vMeth(i7, Test.fFld, -141);
        for (i22 = 5; i22 < 124; ++i22) {
            Test.iFld += (i22 + i9);
            Test.instanceCount *= -6;
            Test.dFld = i22;
            for (i24 = 1; i24 < 13; i24 += 2) {
                Test.fFld = -46306L;
                try {
                    i9 = (iArr[i24] % i24);
                    iArr[i22] = (Test.iFld / -191);
                    i9 = (936335404 / iArr[i22 + 1]);
                } catch (ArithmeticException a_e) {}
                i9 *= i7;
                Test.bFld = true;
                i7 += (i24 + i9);
            }
            Test.fArrFld[i22 + 1] = i7;
        }
        long meth_res = i7 + by + i8 + l + i9 + s + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=65, i1=9731, i2=14, i3=50, i4=45061, i5=0, i6=61745, i26=8, i27=-9, i28=-6, i29=27678, i30=15713,
            i31=32369, i32=-3, i33=-13, i34=-26756, i35=-91;
        double d=2.107757;
        byte by2=103;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-17362);
        FuzzerUtils.init(lArr, 5189881830849391896L);

        iArrFld[(Test.iFld >>> 1) % N] = (-Math.max((int)(Test.fFld + Test.iFld), Test.iFld));
        dArrFld[(Test.iFld >>> 1) % N] = sArr[(26554 >>> 1) % N];
        for (i = 14; 285 > i; i++) {
            lArr[i] -= -4500;
            for (i2 = 93; i2 > 4; i2 -= 3) {
                i1 = (i * i2);
            }
            for (i4 = 5; i4 < 93; ++i4) {
                for (d = i4; 2 > d; ++d) {
                    byte by1=67;
                    i5 <<= (int)(((i5 + Test.iFld) - (iFld1--)) * (Test.fFld++));
                    iArrFld[i4] = (int)(lArr[i + 1]++);
                    if (((i6--) * (Math.min(119, i4) - Test.instanceCount)) == (-fMeth(i5, by1, iFld1))) continue;
                }
                for (i26 = 1; i26 < 2; i26++) {
                    iFld1 += (i26 ^ i27);
                    Test.fFld -= i1;
                    i28 += (i26 * Test.instanceCount);
                    Test.iFld += (((i26 * iFld1) + i5) - i26);
                    Test.lArrFld[i][i26 - 1] = i3;
                }
                i5 += (-161 + (i4 * i4));
                i29 -= i28;
            }
        }
        for (i30 = 15; i30 < 276; ++i30) {
            i29 += (i30 * i30);
            for (i32 = 3; i32 < 96; i32++) {
                for (i34 = 1; i34 < 2; ++i34) {
                    Test.fFld = i32;
                    Test.dFld = d;
                    lArr[i30] = 139;
                    lArr[i30 - 1] += 12;
                    lArr[(-3 >>> 1) % N] &= i29;
                    Test.iArrFld1[i34] = by2;
                }
                i3 += -177;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
