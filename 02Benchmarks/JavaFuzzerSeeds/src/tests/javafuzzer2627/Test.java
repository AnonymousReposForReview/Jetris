package tests.javafuzzer2627;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static volatile boolean bFld=true;
    public static byte byFld=33;
    public static float fFld=-2.952F;
    public static double dFld=100.29371;
    public static boolean bFld1=false;
    public static int iArrFld[][]=new int[N][N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.sArrFld, (short)12583);
        FuzzerUtils.init(Test.lArrFld, 17097L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, long l1, int i8) {

        int i9=37846, i10=-44711, i11=-212, i12=-226, i13=-12, i14=-110, i15=1843;
        double d1=-2.28768;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i9 = 1; i9 < 285; i9++) {
            for (i11 = 1; 6 > i11; i11 += 2) {
                l += i10;
                bArr[i11] = Test.bFld;
                d1 -= d1;
                i8 *= i10;
                Test.instanceCount <<= i9;
            }
        }
        Test.iArrFld[(i8 >>> 1) % N][(i11 >>> 1) % N] >>= (int)l1;
        d1 -= -14;
        for (i13 = 8; i13 < 356; ++i13) {
            l *= 5;
            i10 -= 36219;
        }
        i15 = 1;
        do {
            i14 -= 0;
            i8 += i15;
        } while (++i15 < 314);
        long meth_res = l + l1 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, int i6, int i7) {

        int i16=9, i17=60879, i18=-9, i19=-5, i20=-23659, i21=-28490, i22=0;
        short s=18281;
        double d2=0.72298, d3=2.8978;
        float f1=42.189F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(byArr, (byte)-114);

        Test.instanceCount >>>= lMeth(159L, 198L, i6);
        Test.instanceCount += i5;
        switch ((((i7 >>> 1) % 5) * 5) + 41) {
        case 44:
            for (i16 = 12; i16 < 238; ++i16) {
                lArr[i16] >>= i17;
                Test.iArrFld[i16][i16 - 1] |= i6;
                for (i18 = 1; i18 < 7; ++i18) {
                    i19 = i17;
                }
                for (i20 = 1; i20 < 7; ++i20) {
                    Test.instanceCount = s;
                    for (d2 = i20; d2 < 2; d2++) {
                        byArr[i20 - 1] <<= (byte)i19;
                        Test.instanceCount = Test.byFld;
                        f1 *= f1;
                        d3 += i16;
                    }
                }
            }
        case 61:
            Test.sArrFld[(2 >>> 1) % N] -= (short)d3;
        case 56:
            f1 -= i5;
            break;
        case 62:
            Test.instanceCount = (long)f1;
        case 66:
            Test.instanceCount = i22;
            break;
        }
        vMeth1_check_sum += i5 + i6 + i7 + i16 + i17 + i18 + i19 + i20 + i21 + s + Double.doubleToLongBits(d2) + i22 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(int i3, double d, int i4) {

        int i23=-1, i24=29355, i25=143, i26=2, i27=-11133, i28=14, i29=235;

        if (Test.bFld) {
            vMeth1(9, i4, i3);
        } else if (Test.bFld) {
            i23 = 1;
            while (++i23 < 241) {
                Test.instanceCount += i4;
                for (i24 = 1; i24 < 7; i24++) {
                    for (i26 = 1; i26 < 2; ++i26) {
                        if (i4 != 0) {
                            vMeth_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i23 + i24 + i25 + i26 + i27 + i28
                                + i29;
                            return;
                        }
                        i25 = (int)Test.instanceCount;
                        Test.iArrFld[i24 + 1][i24] += i24;
                        Test.iArrFld[i23 + 1][i23 + 1] = i3;
                        Test.fFld += (-94 + (i26 * i26));
                    }
                    i3 = i24;
                }
                for (i28 = 1; i28 < 7; ++i28) {
                    i25 &= i23;
                    try {
                        i3 = (-37 % i28);
                        i4 = (i24 / Test.iArrFld[(i24 >>> 1) % N][i23]);
                        i25 = (i24 % -47335);
                    } catch (ArithmeticException a_e) {}
                }
            }
        } else {
            Test.lArrFld[(i4 >>> 1) % N][(i23 >>> 1) % N] *= Test.instanceCount;
        }
        vMeth_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i23 + i24 + i25 + i26 + i27 + i28 + i29;
    }

    public void mainTest(String[] strArr1) {

        int i=67, i1=-147, i2=-47919, i30=110, i31=-2, i32=31151, i33=-2, i34=110, i35=72, iArr[]=new int[N];
        float f=1.650F;
        short s1=-15308;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr, -40140);
        FuzzerUtils.init(byArr1, (byte)-93);

        iArr[(i >>> 1) % N] = (int)(++Test.instanceCount);
        Test.instanceCount += -15612;
        i = (int)(-((f + i) + (Test.instanceCount - f)));
        i = (int)(((++i) * (--Test.instanceCount)) + ((iArr[(i >>> 1) % N]--) + -94));
        for (i1 = 8; 393 > i1; ++i1) {
            vMeth(36521, Test.dFld, i);
            Test.lArrFld[i1][i1 + 1] &= i;
            for (i30 = i1; i30 < 65; ++i30) {
                try {
                    iArr[i30] = (i2 / i);
                    i31 = (i1 / -11460);
                    i = (Test.iArrFld[i30 + 1][i30] / -38426);
                } catch (ArithmeticException a_e) {}
                i31 = s1;
                Test.fFld = Test.byFld;
                for (i32 = 1; i32 < 1; ++i32) {
                    Test.instanceCount -= Test.instanceCount;
                    byArr1[i30] = (byte)i32;
                    i33 = (int)Test.instanceCount;
                    s1 >>= (short)Test.instanceCount;
                }
                for (i34 = i30; i34 < 1; ++i34) {
                    int i36=29928;
                    Test.dFld -= i32;
                    i36 = s1;
                    Test.iArrFld[i30][i34] = (int)Test.dFld;
                    Test.lArrFld[i34 - 1][i30 + 1] = i;
                    s1 += (short)-60;
                }
                f += (i30 + i);
                if (Test.bFld1) {
                    i -= i2;
                    i2 += (i30 * i30);
                    i = i;
                    Test.instanceCount += (i30 * i30);
                } else if (Test.bFld) {
                    i35 = i32;
                    i33 += (((i30 * Test.fFld) + i31) - i32);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
