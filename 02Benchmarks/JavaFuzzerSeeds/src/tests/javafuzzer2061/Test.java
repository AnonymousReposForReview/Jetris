package tests.javafuzzer2061;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:13:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-45731822220997508L;
    public static short sFld=6136;
    public static int iFld=-8;
    public static float fFld=-29.657F;
    public static byte byFld=-74;
    public static int iFld1=45574;
    public volatile boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9, short s) {

        int i10=-28400, i11=-5257, i12=-8, i13=-9, i14=-6, i15=-39637, i16=0, i17=162, iArr[]=new int[N];
        float f2=0.945F, fArr[][]=new float[N][N];
        double d=67.10525;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 222);
        FuzzerUtils.init(sArr, (short)-23970);
        FuzzerUtils.init(fArr, 0.738F);

        i9 = (int)1.355F;
        for (i10 = 4; i10 < 202; i10++) {
            i8 += i10;
            i9 += i10;
            iArr[i10] %= (int)(i12 | 1);
            try {
                iArr[i10 + 1] = (i12 % i9);
                i8 = (i11 % -1036755839);
                i8 = (156465331 / i10);
            } catch (ArithmeticException a_e) {}
            switch ((i10 % 8) + 37) {
            case 37:
                sArr[i10 - 1] = (short)i12;
                break;
            case 38:
                for (i13 = 1; i13 < 8; ++i13) {
                    i8 = -112;
                    for (i15 = i10; i15 < 2; i15++) {
                        s += (short)-15135;
                        fArr[i10][i10] *= i15;
                        i9 = -8295;
                        i12 += 3;
                    }
                }
                break;
            case 39:
                Test.instanceCount %= (i15 | 1);
                break;
            case 40:
                i9 += (((i10 * i12) + i13) - f2);
                break;
            case 41:
                iArr[i10 - 1] -= i17;
            case 42:
                f2 = (float)d;
                break;
            case 43:
                i12 += i10;
                break;
            case 44:
                sArr[i10] = (short)Test.instanceCount;
                break;
            default:
                iArr[i10 + 1] = s;
            }
        }
        vMeth2_check_sum += i8 + i9 + s + i10 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + i17 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l1, int i7) {

        float f1=0.993F;
        double d1=0.103622;
        boolean b=true;
        int i18=-44227, i19=-9, i20=14, i21=199, i22=-48, iArr1[]=new int[N];
        byte by=-85;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 158);
        FuzzerUtils.init(lArr, 5804296228182198003L);

        i7 -= (int)((f1 * Math.abs(l1)) - i7);
        vMeth2(i7, i7, Test.sFld);
        iArr1[(i7 >>> 1) % N] -= (int)d1;
        b = b;
        for (i18 = 2; i18 < 224; ++i18) {
            for (i20 = 1; 7 > i20; ++i20) {
                switch (((i18 % 2) * 5) + 43) {
                case 49:
                    Test.instanceCount += (237 + (i20 * i20));
                    lArr[i20 - 1] = (long)d1;
                    switch ((i20 % 3) + 62) {
                    case 62:
                        f1 += (((i20 * i21) + i20) - i20);
                        l1 += (((i20 * i18) + by) - i19);
                        l1 += (((i20 * Test.sFld) + i21) - i18);
                    case 63:
                        f1 = i21;
                    case 64:
                        if (i20 != 0) {
                            vMeth1_check_sum += l1 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + (b ?
                                1 : 0) + i18 + i19 + i20 + i21 + by + i22 + FuzzerUtils.checkSum(iArr1) +
                                FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    }
                    break;
                case 51:
                    lArr[i18] >>>= Test.iFld;
                    break;
                default:
                    lArr[i18] = i22;
                }
            }
        }
        vMeth1_check_sum += l1 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i18 + i19
            + i20 + i21 + by + i22 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, int i6) {

        int i23=-8, i24=1, iArr2[]=new int[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(dArr, 2.71733);

        vMeth1(Test.instanceCount, Test.iFld);
        Test.iFld = i6;
        i23 = 1;
        while (++i23 < 252) {
            i24 = 6;
            do {
                Test.iFld >>= Test.iFld;
                i6 -= (int)Test.instanceCount;
                iArr2[i23 - 1] <<= i24;
                l *= l;
                Test.instanceCount >>= -34;
                switch ((((Test.iFld >>> 1) % 9) * 5) + 75) {
                case 78:
                    dArr[(-182 >>> 1) % N][i24] *= Test.iFld;
                    Test.fFld -= l;
                    i6 *= Test.byFld;
                    break;
                case 92:
                    Test.iFld += i24;
                    break;
                case 114:
                    l = i24;
                    break;
                case 96:
                    Test.iFld = (int)1.338F;
                    break;
                case 77:
                    iArr2[i23 + 1] += i23;
                    break;
                case 102:
                    i6 -= (int)3835129597L;
                    break;
                case 82:
                    i6 = 3;
                    break;
                case 85:
                    l *= Test.instanceCount;
                    break;
                case 100:
                    Test.iFld1 = i24;
                    break;
                }
            } while (--i24 > 0);
        }
        vMeth_check_sum += l + i6 + i23 + i24 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-6954, i2=-10, i3=-9, i4=-245, i5=-54775, i25=-6, i26=-25, i27=69, i28=1;
        float f=0.839F;

        for (i = 314; i > 6; i -= 3) {
            f += (i * i);
            for (i2 = 5; i2 < 246; ++i2) {
                if (bFld) {
                    for (i4 = 1; i4 < 2; i4++) {
                        boolean b1=true;
                        i3 += (-12 + (i4 * i4));
                        i1 += i4;
                        vMeth(Test.instanceCount, i);
                        iArrFld[i2] -= i1;
                        Test.instanceCount -= (long)Test.fFld;
                        Test.fFld -= f;
                        Test.iFld1 = 17355;
                        i1 += (i4 - Test.instanceCount);
                        i3 = i1;
                        if (b1) break;
                    }
                    switch ((((i3 >>> 1) % 10) * 5) + 33) {
                    case 45:
                        Test.byFld = (byte)i2;
                        for (i25 = 1; i25 < 2; i25 += 3) {
                            i1 <<= (int)40798L;
                        }
                        iArrFld[i2] = Test.byFld;
                        break;
                    case 44:
                        Test.iFld1 >>= i5;
                        break;
                    case 53:
                        f += Test.iFld1;
                        if (bFld) break;
                        break;
                    case 83:
                    case 74:
                        f = i26;
                        i5 += (((i2 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                        for (i27 = 1; i27 < 2; ++i27) {
                            i3 += (((i27 * Test.instanceCount) + i28) - Test.byFld);
                            Test.byFld = (byte)Test.instanceCount;
                            Test.fFld += i2;
                            f = Test.instanceCount;
                        }
                        break;
                    case 61:
                        Test.sFld += (short)Test.instanceCount;
                        break;
                    case 73:
                        iArrFld = iArrFld;
                        break;
                    case 60:
                        i26 -= (int)f;
                        break;
                    case 40:
                        Test.bArrFld[i] = bFld;
                        break;
                    case 75:
                        iArrFld[i - 1] = (int)Test.instanceCount;
                        break;
                    default:
                        if (false) break;
                    }
                } else {
                    i1 = i26;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
