package tests.javafuzzer649;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:25:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static float fFld=-2.732F;
    public static volatile long lArrFld[]=new long[N];
    public static volatile short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 44519L);
        FuzzerUtils.init(Test.sArrFld, (short)-16486);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i, int i1, float f) {

        int i2=-61450, i3=0, i4=-54496, iArr[]=new int[N];
        double d1=2.24381, d2=-17.40138;
        byte by=-125;

        FuzzerUtils.init(iArr, -135);

        for (i2 = 9; i2 < 263; i2++) {
            i += i2;
            i += (int)f;
            iArr[i2] += i2;
            iArr[i2 - 1] += i1;
            switch (((i1 >>> 1) % 8) + 108) {
            case 108:
                i3 -= (int)d1;
                i1 += i1;
                try {
                    i1 = (i2 % 27);
                    i1 = (i3 / -33941);
                    i = (i / i3);
                } catch (ArithmeticException a_e) {}
                iArr[i2 + 1] -= i1;
                break;
            case 109:
                Test.instanceCount *= i1;
                for (d2 = 1; d2 < 6; ++d2) {
                    Test.lArrFld[(int)(d2)] |= i4;
                    i3 += (int)(d2 - Test.instanceCount);
                    i3 -= i3;
                }
                break;
            case 110:
                Test.lArrFld[i2] -= i4;
                break;
            case 111:
                i3 <<= (int)Test.instanceCount;
                break;
            case 112:
                Test.instanceCount += i3;
                break;
            case 113:
                i1 *= i3;
            case 114:
                i >>>= by;
            case 115:
                i4 >>>= i4;
                break;
            default:
                Test.lArrFld[i2 + 1] = -42;
            }
        }
        vMeth2_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i4 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, double d) {

        int i5=-89, i7=157, iArr1[]=new int[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr1, -196);
        FuzzerUtils.init(sArr, (short)905);

        vMeth2(i5, i5, Test.fFld);
        for (int i6 : iArr1) {
            byte by1=63;
            i5 %= (int)(i5 | 1);
            i6 *= i6;
            iArr1[(i5 >>> 1) % N] >>= i6;
            switch ((((-6257 >>> 1) % 1) * 5) + 109) {
            case 112:
                i5 = (int)d;
                i5 -= (int)-15528L;
                switch ((((i6 >>> 1) % 4) * 5) + 96) {
                case 101:
                    try {
                        i5 = (i5 / iArr1[(i6 >>> 1) % N]);
                        i6 = (-3 % i5);
                        i5 = (-1936573237 / iArr1[(i5 >>> 1) % N]);
                    } catch (ArithmeticException a_e) {}
                    i5 = i6;
                    sArr[(i6 >>> 1) % N] = sArr[(i5 >>> 1) % N];
                    i5 = by1;
                case 104:
                    iArr1[(14 >>> 1) % N] <<= i6;
                    iArr1[(i5 >>> 1) % N] = i6;
                case 99:
                    i6 /= (int)(by1 | 1);
                case 109:
                    i6 |= i7;
                    break;
                default:
                    iArr1[(i6 >>> 1) % N] = (int)l;
                }
                break;
            default:
                iArr1[(i6 >>> 1) % N] -= i7;
            }
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d) + i5 + i7 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        double d3=86.111622;
        int i8=47680, i9=228, i10=-19823, i11=-59985, i12=-9138, i13=-172;
        long l1=1L;
        short s=-251;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -9.177F);

        vMeth1(Test.instanceCount, d3);
        Test.instanceCount = i8;
        for (l1 = 4; l1 < 383; ++l1) {
            i10 = 1;
            while (++i10 < 4) {
                i8 -= i8;
                i8 -= (int)Test.instanceCount;
                s *= (short)d3;
                i9 += (int)Test.fFld;
            }
            i11 = 1;
            while (++i11 < 4) {
                Test.instanceCount = Test.instanceCount;
                Test.fFld += i11;
                for (i12 = (int)(l1); i12 < 1; i12++) {
                    s += (short)(((i12 * Test.fFld) + i9) - l1);
                    Test.instanceCount += i12;
                    fArr[i11 + 1] += i12;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d3) + i8 + l1 + i9 + i10 + s + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i14=5, i15=16505, i16=-24, i17=-21109, i18=-54641, i19=-28885, i20=-54911, i21=-3, i22=30942, i23=8,
            i24=1007, iArr2[]=new int[N];
        double d4=13.121757, d5=2.106166;
        float f1=-48.771F;
        short s1=-4354;

        FuzzerUtils.init(iArr2, -35221);

        vMeth();
        Test.sArrFld[(i14 >>> 1) % N][(i14 >>> 1) % N] -= (short)Test.instanceCount;
        i14 = 62234;
        iArr2[(1 >>> 1) % N] = (int)Test.instanceCount;
        i14 = (int)Test.fFld;
        i14 = (int)Test.instanceCount;
        i14 = (int)Test.fFld;
        for (i15 = 1; i15 < 140; i15++) {
            for (i17 = 180; i17 > i15; i17--) {
                Test.instanceCount &= 4082655675L;
                Test.instanceCount += (i17 + i15);
                i14 -= i18;
                iArr2 = iArr2;
            }
            i18 += (i15 | i14);
        }
        for (d4 = 381; d4 > 8; d4 -= 2) {
            for (i20 = 1; i20 < 135; ++i20) {
                i19 += (((i20 * Test.instanceCount) + i17) - i17);
                i19 %= (int)((long)(Test.fFld) | 1);
                iArr2[(int)(d4 - 1)] = i19;
                for (f1 = 1; f1 < 2; f1++) {
                    i18 += s1;
                    d5 = i21;
                    i19 /= (int)((long)(d5) | 1);
                    Test.instanceCount >>= i17;
                    Test.instanceCount += (long)((long)f1 | s1);
                }
                i22 = i15;
            }
            i19 = i18;
        }
        for (i23 = 187; i23 > 9; i23 -= 3) {
            d5 /= (Test.instanceCount | 1);
            d5 = i18;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
