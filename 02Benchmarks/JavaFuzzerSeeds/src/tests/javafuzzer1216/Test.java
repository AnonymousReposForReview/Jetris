package tests.javafuzzer1216;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:36:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=167L;
    public static float fFld=1.231F;
    public volatile boolean bFld=true;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 121.922F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i9=68;

        i9 = -21062;
        long meth_res = i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i6) {

        int i7=-97, i8=15565, i10=106, iArr[]=new int[N];
        byte by=67;
        boolean b=true;

        FuzzerUtils.init(iArr, 3);

        for (i7 = 4; 283 > i7; i7++) {
            Test.instanceCount += (long)(iMeth1() * Test.fFld);
            i8 >>>= i6;
            iArr[i7 - 1] -= i6;
            i8 += -3;
            switch ((i7 % 9) + 97) {
            case 97:
                by += (byte)(i7 | i6);
                Test.fFld += ((long)i7 | (long)Test.fFld);
                Test.instanceCount = i8;
                break;
            case 98:
                i10 = 6;
                while ((i10 -= 3) > 0) {
                    double d1=-1.38507;
                    d1 -= i10;
                    Test.instanceCount = i6;
                    i8 += i10;
                    Test.instanceCount = -181;
                    i8 = i6;
                }
                break;
            case 99:
            case 100:
                Test.fFld += (((i7 * i7) + i7) - by);
                break;
            case 101:
                i6 *= (int)Test.instanceCount;
                break;
            case 102:
                b = b;
                break;
            case 103:
                i8 = i8;
            case 104:
                iArr = iArr;
                break;
            case 105:
                i6 -= i8;
                break;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + by + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i2=-51284, i3=-17620, i4=-53, i5=96, i11=-4, i12=228;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -543198474L);

        for (i2 = 4; i2 < 271; i2++) {
            for (i4 = 1; i4 < 6; i4++) {
                vMeth(i3);
                i5 *= i5;
                i3 *= i5;
                Test.instanceCount += i4;
                Test.fFld *= i3;
                for (i11 = i4; 2 > i11; i11++) {
                    if (b1) break;
                    i12 = i4;
                    i3 = (int)Test.instanceCount;
                    if (i4 != 0) {
                    }
                }
            }
            i12 -= i3;
            i12 = (int)26L;
            i3 *= i3;
        }
        long meth_res = i2 + i3 + i4 + i5 + i11 + i12 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-124.57558, d2=-1.114733;
        int i=-96, i1=3096, i13=-168, i14=16679, i15=49728, i16=236, i17=13708, i18=-162, i19=-19937, iArr1[]=new
            int[N];
        float f=0.529F;
        byte by1=-29;
        long l1=1628246973L, l2=-2325858809L;

        FuzzerUtils.init(iArr1, -20);

        for (d = 293; 11 < d; --d) {
            i1 = 1;
            while (++i1 < 89) {
                if ((i1 + i1) < (--i)) continue;
                f *= i;
                iMeth();
                Test.instanceCount -= Test.instanceCount;
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.instanceCount *= i14;
                    d2 *= Test.instanceCount;
                    by1 += (byte)i13;
                }
                i += (((i1 * i1) + i13) - i1);
                Test.instanceCount += (((i1 * f) + i14) - i14);
                for (i15 = 1; i15 < 1; i15++) {
                    i16 += (((i15 * i) + i) - i15);
                    d2 -= d;
                }
                try {
                    i = (8493 % i16);
                    i = (i15 % 21);
                    i14 = (-7917 / i15);
                } catch (ArithmeticException a_e) {}
                for (l1 = 1; l1 < 1; ++l1) {
                    Test.instanceCount += (l1 ^ i17);
                    i += (int)(((l1 * i14) + by1) - i15);
                    i14 <<= i13;
                }
            }
            i = i16;
            l2 = 1;
            while (++l2 < 89) {
                Test.instanceCount -= i;
                for (i18 = 1; i18 < 1; i18 += 2) {
                    iArr1 = FuzzerUtils.int1array(N, (int)4);
                    Test.instanceCount = 9085998868271761579L;
                    if (bFld) {
                        d2 -= i19;
                        i17 = -51240;
                    } else {
                        try {
                            i19 = (-44624 % i17);
                            i14 = (i1 % iArr1[(int)(l2 + 1)]);
                            iArr1[(int)(l2 + 1)] = (28 % i1);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
