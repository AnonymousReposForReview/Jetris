package tests.javafuzzer432;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:43:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=432690447L;
    public static volatile float fFld=0.17F;
    public static boolean bFld=false;
    public static volatile short sFld=3766;
    public static double dFld=-86.126878;
    public long lFld=-207L;
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 30451L);
        FuzzerUtils.init(Test.dArrFld, 0.96562);
        FuzzerUtils.init(Test.byArrFld, (byte)-3);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        float f=-59.513F;
        int i4=-7, i5=71, i6=-40027, i7=0, i8=54829, iArr[]=new int[N], iArr1[][]=new int[N][N];
        boolean b=false;
        double d=53.8826;

        FuzzerUtils.init(iArr, -198);
        FuzzerUtils.init(iArr1, 45756);

        for (f = 171; f > 9; f--) {
            b = b;
            for (i5 = (int)(f); i5 < 10; ++i5) {
                i4 = i5;
                Test.instanceCount *= i3;
                d -= i6;
                i4 -= (int)Test.instanceCount;
            }
            i7 = 1;
            while (++i7 < 10) {
                switch (((i3 >>> 1) % 8) + 39) {
                case 39:
                    i6 = i8;
                    iArr[(int)(f + 1)] = (int)Test.instanceCount;
                    break;
                case 40:
                    i3 /= (int)(i6 | 1);
                    i6 += (i7 * i7);
                    break;
                case 41:
                    i6 -= i6;
                    try {
                        iArr[(int)(f - 1)] = (i3 % i4);
                        i3 = (iArr[i7] % 50571);
                        iArr[(int)(f + 1)] = (i8 / i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 42:
                    iArr1[i7 - 1][i7 - 1] >>= i5;
                    break;
                case 43:
                    d = 123.631F;
                    break;
                case 44:
                    Test.fFld += (i7 * i7);
                    break;
                case 45:
                    i3 += (i7 | (long)Test.fFld);
                    break;
                case 46:
                    iArr[i7] = i5;
                    break;
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d) + i7
            + i8 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i9=38560, i10=159, i11=0, i12=-2, i13=0, iArr2[]=new int[N];
        long l1=1055632853174918335L;

        FuzzerUtils.init(iArr2, -33251);

        vMeth1(i9);
        i9 = i10;
        Test.fFld *= i10;
        Test.fFld *= i9;
        if (Test.bFld) {
            iArr2[(-59 >>> 1) % N] = (int)Test.fFld;
            for (i11 = 1; i11 < 147; ++i11) {
                i12 += i11;
            }
            i12 -= (int)Test.instanceCount;
        }
        i10 += 216;
        iArr2[(i9 >>> 1) % N] -= i12;
        for (l1 = 5; l1 < 310; ++l1) {
            Test.lArrFld[(int)(l1 - 1)] -= (long)Test.fFld;
            Test.fFld += l1;
            Test.instanceCount -= Test.sFld;
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + l1 + i13 + FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth() {

        int i14=11775, i15=1, i16=-47595;
        long l2=2304142485L;
        float f1=1.1017F, f2=63.448F;

        vMeth();
        for (i14 = 6; i14 < 248; i14++) {
            Test.fFld = Test.instanceCount;
            i15 >>= i14;
            i15 += (((i14 * i15) + Test.instanceCount) - Test.instanceCount);
            for (l2 = 1; l2 < 7; l2 += 2) {
                f1 = 3;
                do {
                    byte by=13;
                    switch ((i14 % 6) + 114) {
                    case 114:
                    case 115:
                        i15 += (int)((long)f1 ^ (long)f2);
                        Test.instanceCount /= (i16 | 1);
                        break;
                    case 116:
                        i15 = i14;
                        f2 += by;
                        i16 += (int)(f1 * i16);
                        i16 -= (int)Test.dFld;
                        break;
                    case 117:
                        i16 = (int)f2;
                        break;
                    case 118:
                        i15 -= (int)Test.fFld;
                        break;
                    case 119:
                        Test.dArrFld[i14] = Test.instanceCount;
                        break;
                    }
                } while (--f1 > 0);
            }
        }
        long meth_res = i14 + i15 + l2 + i16 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i=-84, i1=-13, i2=-125, i17=-27, i18=5, i19=-3, i20=3, i21=-11, i22=5;
        long l=-77L, l3=13L;
        byte by1=-98;

        for (i = 9; i < 212; i += 3) {
            for (l = 10; l < 374; l++) {
                short s=-2910;
                s += (short)(Integer.reverseBytes(i1) + lMeth());
                Test.instanceCount *= i2;
                i1 = i;
                for (l3 = i; 2 > l3; l3++) {
                    switch ((int)((l3 % 2) + 15)) {
                    case 15:
                    case 16:
                        Test.dFld *= l;
                        i2 = i17;
                        switch ((i % 1) + 1) {
                        case 1:
                            iArrFld[(int)(l)] = i;
                            Test.lArrFld[(int)(l + 1)] = l3;
                            iArrFld[(i1 >>> 1) % N] -= (int)lFld;
                            break;
                        }
                        lFld = Test.instanceCount;
                        break;
                    }
                    i2 = by1;
                }
                iArrFld[(int)(l)] -= i18;
            }
            for (i19 = 1; i19 < 374; i19++) {
                for (i21 = 2; i21 > 1; i21--) {
                    Test.dArrFld[i19 - 1] += i2;
                    by1 = (byte)i20;
                    i20 ^= i;
                    Test.sFld += (short)(((i21 * i17) + i18) - i1);
                    Test.bFld = Test.bFld;
                    Test.dArrFld[i + 1] -= -126;
                    switch ((i21 % 8) + 5) {
                    case 5:
                        switch ((i % 2) + 30) {
                        case 30:
                            i17 += (i21 * i);
                            Test.bFld = Test.bFld;
                            i1 -= i;
                            Test.instanceCount = lFld;
                            break;
                        case 31:
                            i17 += (((i21 * Test.fFld) + by1) - i19);
                            break;
                        }
                    case 6:
                    case 7:
                        Test.byArrFld[i21] <<= (byte)i19;
                        break;
                    case 8:
                        i18 *= (int)-1.107704;
                        break;
                    case 9:
                        lFld += i2;
                        break;
                    case 10:
                        i1 <<= i18;
                    case 11:
                        lFld >>= lFld;
                        break;
                    case 12:
                        Test.dFld += i2;
                    default:
                        if (Test.bFld) continue;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
