package tests.javafuzzer598;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:20:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6542758556574748932L;
    public static double dFld=-2.54205;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -246L);
        FuzzerUtils.init(Test.iArrFld, 240);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-10, i6=246, i7=55, i8=3;
        boolean b=false;
        short s=29937;
        double d=0.23531;
        float f1=-2.569F;

        i5 = 234;
        while ((i5 -= 2) > 0) {
            b = b;
            if (b) {
                i6 = 1;
                while (++i6 < 13) {
                    for (i7 = 1; i7 < 1; i7++) {
                        Test.lArrFld[i6] = i6;
                        s = (short)Test.instanceCount;
                        i8 >>= (int)108L;
                        i8 += (int)Test.instanceCount;
                        i8 = 13;
                        d += Test.instanceCount;
                        try {
                            Test.iArrFld[i7] = (14372 % i7);
                            i8 = (45566 % i7);
                            i8 = (-200 / Test.iArrFld[i6 - 1]);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.lArrFld[i6 - 1] = i5;
                    i8 += (((i6 * i8) + i8) - f1);
                    Test.instanceCount += (i6 * i6);
                }
            } else {
                f1 = Test.instanceCount;
            }
        }
        long meth_res = i5 + (b ? 1 : 0) + i6 + i7 + i8 + s + Double.doubleToLongBits(d) + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f) {

        int i3=9, i4=43609, i9=13633, i10=152, iArr[]=new int[N];
        byte by=105;

        FuzzerUtils.init(iArr, -130);

        for (i3 = 1; 242 > i3; i3++) {
            i4 += i4;
            try {
                i4 = (i3 / -1548715625);
                i4 = (i4 % i4);
                i4 = (-127 % i4);
            } catch (ArithmeticException a_e) {}
            i4 += (i3 - Test.instanceCount);
            Test.instanceCount += i3;
            Test.instanceCount = by;
            f = (((++i4) + (-(i4 - Test.instanceCount))) + -105);
            switch ((i3 % 8) + 75) {
            case 75:
                Test.instanceCount |= ((-(-48826 * (--i4))) * Math.max(iArr[i3], iMeth()));
            case 76:
                i4 -= (int)f;
                Test.dFld *= -4;
                break;
            case 77:
                for (i9 = 1; i9 < 7; i9++) {
                    iArr[i9] -= 41510;
                    if (i3 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i4 + by + i9 + i10 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    f = 2933791335L;
                }
                break;
            case 78:
                i10 -= (int)f;
                break;
            case 79:
            case 80:
                i4 += (int)1.242F;
                break;
            case 81:
                i10 = (int)Test.instanceCount;
                break;
            case 82:
            default:
                i10 -= i3;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i4 + by + i9 + i10 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, int i2) {

        float f2=100.486F, f3=-38.400F, fArr[][]=new float[N][N];
        int i11=-59942, i12=4, i13=-5, i14=9, i15=22647;
        byte by1=20;
        long l=2118936405L;
        double dArr1[]=new double[N];

        FuzzerUtils.init(fArr, 0.239F);
        FuzzerUtils.init(dArr1, 0.80459);

        vMeth1(f2);
        fArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = i1;
        i11 = 1;
        while (++i11 < 278) {
            switch (((i11 % 8) * 5) + 49) {
            case 79:
                dArr1[i11 + 1] *= i1;
                i2 += i11;
                i2 -= by1;
                for (i12 = 1; i12 < 6; ++i12) {
                    i2 += (i12 ^ i12);
                    Test.iArrFld = Test.iArrFld;
                    for (f3 = 2; f3 > 1; f3--) {
                        i14 &= -60544;
                        i14 += (int)f3;
                        l <<= by1;
                        i1 += (int)f3;
                    }
                }
                break;
            case 84:
                i14 <<= (int)Test.instanceCount;
                break;
            case 72:
                i15 *= i13;
                break;
            case 62:
                Test.bFld = Test.bFld;
            case 87:
                i1 += i11;
                break;
            case 89:
                i2 += (150 + (i11 * i11));
                break;
            case 50:
                i13 -= (int)Test.instanceCount;
                break;
            case 63:
                i1 = i2;
                break;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + i11 + by1 + i12 + i13 + Float.floatToIntBits(f3) + i14
            + l + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=47318, i16=-29723, i17=12, i18=12, i19=2, i20=-60738, i21=-155, i22=9, i23=-147, i24=10, i25=8,
            iArr1[]=new int[N];
        byte by2=88;
        float f4=-20.829F, fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.77285);
        FuzzerUtils.init(fArr1, -49.642F);
        FuzzerUtils.init(iArr1, 24);

        i = (int)dArr[(i >>> 1) % N];
        vMeth(i, i);
        for (i16 = 213; i16 > 12; i16 -= 3) {
            if (false) break;
            i18 = 1;
            do {
                fArr1[i18 - 1] = by2;
            } while (++i18 < 374);
            iArr1[i16] -= i17;
            for (i19 = 13; i19 < 374; ++i19) {
                i17 *= i;
            }
            i17 = (int)Test.instanceCount;
            Test.iArrFld[i16 - 1] = i16;
            i20 -= i16;
            f4 = 26407;
        }
        i21 = (int)-57024L;
        Test.instanceCount = i18;
        f4 = i19;
        switch ((((i20 >>> 1) % 3) * 5) + 51) {
        case 66:
            Test.instanceCount *= Test.instanceCount;
            f4 -= by2;
            break;
        case 60:
            Test.bFld = Test.bFld;
        case 59:
            by2 = by2;
            break;
        default:
            Test.instanceCount *= (long)Test.dFld;
            iArr1[(i21 >>> 1) % N] = (int)Test.instanceCount;
        }
        for (i22 = 7; i22 < 235; ++i22) {
            i *= -5238;
            i21 += i23;
            for (i24 = 2; i24 < 110; i24++) {
                i25 = i24;
                Test.bFld = Test.bFld;
                Test.instanceCount = (long)119.244F;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
