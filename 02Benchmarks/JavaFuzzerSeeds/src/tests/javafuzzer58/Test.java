package tests.javafuzzer58;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:38:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static int iFld=134;
    public static boolean bFld=false;
    public static int iFld1=5;
    public static float fFld=-29.371F;
    public double dFld=109.113515;
    public int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -51.1599);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public long lMeth() {

        int i3=-6;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        bArr[(i3 >>> 1) % N] = b;
        long meth_res = i3 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth1() {

        short s=32176, s1=26978, sArr[]=new short[N];
        int i6=17768, i7=-9367, i8=0, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(sArr, (short)26604);

        for (int i5 : iArr) {
            s *= s1;
            i6 = 1;
            do {
                Test.iFld += i5;
                if (i5 != 0) {
                }
                try {
                    i5 = (Test.iFld / i5);
                    i5 = (79 / Test.iFld);
                    Test.iFld = (212 / i5);
                } catch (ArithmeticException a_e) {}
                for (i7 = 1; i7 < 1; ++i7) {
                    switch ((((i6 >>> 1) % 3) * 5) + 5) {
                    case 12:
                        Test.instanceCount += (i7 * i7);
                        i5 += i8;
                        i5 = (int)Test.instanceCount;
                        break;
                    case 9:
                        Test.bFld = Test.bFld;
                        i8 <<= (int)8L;
                        i5 = 7;
                        i8 <<= i5;
                        break;
                    case 17:
                    default:
                        sArr[i7 - 1] %= (short)-2;
                    }
                }
            } while (++i6 < 4);
        }
        long meth_res = s + s1 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i4=-24221, i9=-176, i10=1, i11=-54425, i12=-6, i13=-62298, i14=30, i15=-10233, i16=129, iArr1[][]=new
            int[N][N];
        long lArr[]=new long[N];
        short sArr1[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 67L);
        FuzzerUtils.init(iArr1, -76);
        FuzzerUtils.init(sArr1, (short)15573);
        FuzzerUtils.init(fArr, 0.290F);

        i4 += (int)lMeth1();
        if (Test.bFld) {
            for (i9 = 8; i9 < 352; ++i9) {
                i4 -= i4;
                lArr[i9 + 1] = (long)55.67687;
                for (i11 = 5; i11 > 1; --i11) {
                    for (i13 = 1; i13 < 2; ++i13) {
                        iArr1 = iArr1;
                        Test.iFld1 += (i13 * i13);
                        Test.bFld = Test.bFld;
                        sArr1[i9] ^= (short)i4;
                    }
                }
                iArr1[i9 + 1][i9] %= 16945;
            }
            for (i15 = 1; i15 < 227; i15++) {
                Test.instanceCount -= i4;
                fArr[i15 - 1] = i16;
            }
        } else if (Test.bFld) {
            i4 -= (int)Test.instanceCount;
        }
        long meth_res = i4 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, double d) {

        byte by=36;
        int i17=-245, i18=170, i19=23660, i20=11256, i21=11;

        Test.iFld += (int)Test.instanceCount;
        Test.iFld *= (int)((d - (Test.iFld + by)) - (Test.iFld / (((long)(Test.iFld - 1.41310)) | 1)));
        d = iMeth();
        i17 = 1;
        do {
            for (i18 = 1; i18 < 6; i18++) {
                by = (byte)i18;
                i19 += i18;
                Test.instanceCount -= Test.iFld;
                i19 = (int)l;
                if (Test.iFld1 != 0) {
                    vMeth_check_sum += l + Double.doubleToLongBits(d) + by + i17 + i18 + i19 + i20 + i21;
                    return;
                }
                l = l;
                i19 += i18;
                for (i20 = 1; i20 < 2; ++i20) {
                    by += (byte)(((i20 * by) + Test.iFld) - Test.instanceCount);
                    Test.fFld -= -34004;
                }
            }
        } while (++i17 < 275);
        vMeth_check_sum += l + Double.doubleToLongBits(d) + by + i17 + i18 + i19 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=10701, i2=31841;
        float f=-61.882F;
        double d1=-2.69249;

        i = 1;
        do {
            for (i1 = 5; i1 < 87; ++i1) {
                i2 = (int)((i + (f - -1.364F)) - lMeth());
                vMeth(Test.instanceCount, dFld);
                if (true) break;
                Test.instanceCount += (i1 - Test.iFld1);
                d1 = 1;
                while (++d1 < 2) {
                    Test.iFld1 = Test.iFld;
                    switch ((i % 7) + 36) {
                    case 36:
                        Test.iFld >>>= Test.iFld;
                        Test.iFld = (int)Test.instanceCount;
                    case 37:
                        dFld += i1;
                        if (Test.bFld) continue;
                        iArrFld[i - 1][i] *= (int)1.39230;
                        break;
                    case 38:
                        i2 -= 14;
                        break;
                    case 39:
                        f = i2;
                        if (Test.bFld) continue;
                        Test.iFld1 = Test.iFld1;
                        dFld += Test.iFld;
                    case 40:
                        switch ((((i2 >>> 1) % 2) * 5) + 9) {
                        case 18:
                            Test.instanceCount += (long)(((d1 * i) + Test.instanceCount) - Test.instanceCount);
                            break;
                        case 16:
                            Test.dArrFld[i + 1] += Test.fFld;
                            i2 = (int)Test.instanceCount;
                            dFld += 19758;
                            break;
                        }
                        iArrFld[(int)(d1 - 1)] = iArrFld[i - 1];
                        break;
                    case 41:
                        if (Test.bFld) continue;
                        switch ((i1 % 1) + 122) {
                        case 122:
                            iArrFld[i + 1][(int)(d1 - 1)] &= i2;
                            i2 += (int)-52170L;
                            break;
                        }
                        Test.instanceCount += -131;
                        break;
                    case 42:
                        Test.iFld = Test.iFld;
                        break;
                    default:
                        Test.instanceCount = (long)Test.fFld;
                    }
                }
            }
        } while (++i < 288);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
