package tests.javafuzzer908;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:30:37 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-39405L;
    public static byte byFld=-90;
    public static boolean bFld=true;
    public static volatile int iFld=174;
    public float fFld=52.437F;
    public static long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 41497L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f, int i3, int i4) {

        int i5=-8, i6=25765, i7=211, i8=10, i9=-55151, i10=7;
        short s=1790;
        boolean b=false;
        long l=-443842234L;

        f = i4;
        for (i5 = 22; i5 < 365; ++i5) {
            i4 >>= i6;
            i6 -= i6;
        }
        for (i7 = 9; i7 < 237; i7++) {
            Test.instanceCount = s;
            i9 = 1;
            while (++i9 < 7) {
                if (b) {
                    i3 <<= (int)Test.instanceCount;
                } else {
                    for (l = 1; 1 > l; l++) {
                        f -= i8;
                        Test.instanceCount -= i7;
                        i4 *= i4;
                        i4 <<= i9;
                        i4 = i7;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + s + i9 + (b ? 1 : 0) + l + i10;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i1=8865, i2=-10, i11=-20137, i12=-20238, i13=2, iArr[]=new int[N], iArr1[]=new int[N];
        float f1=89.660F;
        double d=0.83511;

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(iArr1, 10);

        for (i1 = 9; i1 < 373; ++i1) {
            double d1=-1.13849;
            iArr[i1 + 1] -= (int)fMeth(f1, i2, i2);
            for (d = 5; d > 1; d -= 3) {
                iArr1[(int)(d)] = (int)Test.instanceCount;
                i11 -= i2;
                for (i12 = i1; i12 < 5; i12++) {
                    Test.byFld += (byte)i12;
                }
            }
            i13 = (int)d;
            Test.lArrFld[i1 + 1] = i13;
            if (Test.bFld) break;
            i11 = 252;
            Test.lArrFld[i1 - 1] = -9L;
            d1 += Test.byFld;
            i11 += (i1 ^ i12);
        }
        i2 = i2;
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth() {

        int i=-10;

        i >>= (i * Math.abs(i = i));
        vMeth();
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i16=11, i17=-34, i18=157, i19=11, i20=69, i21=5, i22=1, i23=10, i24=2;
        float f2=111.320F, fArr[]=new float[N];
        long l1=-202L;
        double d2=1.111748, dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)31098);
        FuzzerUtils.init(fArr, -83.862F);
        FuzzerUtils.init(dArr, 2.47300);

        for (int smallinvoc=0; smallinvoc<348; smallinvoc++) vSmallMeth();
        i16 = 1;
        while (++i16 < 395) {
            i17 += (((i16 * Test.iFld) + Test.instanceCount) - fFld);
            i17 += (i16 * i16);
            Test.instanceCount *= 65477;
        }
        for (i18 = 282; i18 > 12; --i18) {
            i17 += (int)fFld;
            fFld *= fFld;
            for (i20 = i18; i20 < 93; i20++) {
                for (i22 = 1; i22 < 1; ++i22) {
                    sArr[i18] += (short)i20;
                    i21 += (int)Test.instanceCount;
                    iArrFld[i20 - 1][i22] += (int)-4902353950876927281L;
                    Test.bFld = false;
                }
                for (f2 = i18; f2 < 1; f2++) {
                    i24 += i20;
                    Test.lArrFld[i20 - 1] -= i18;
                    Test.instanceCount = i18;
                    fArr[i18] += i18;
                    switch (((i16 >>> 1) % 2) + 25) {
                    case 25:
                        i17 = i22;
                        iArrFld[i18][i20 - 1] -= 200;
                        break;
                    case 26:
                        i24 <<= -163;
                        Test.lArrFld = Test.lArrFld;
                        break;
                    default:
                        Test.instanceCount += i20;
                        dArr[i20 - 1] = f2;
                        Test.iFld = -12;
                    }
                    if (true) {
                    } else if (Test.bFld) {
                        l1 += (long)f2;
                        sArr[i20 + 1] -= (short)d2;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
