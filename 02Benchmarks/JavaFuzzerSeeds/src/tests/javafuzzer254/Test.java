package tests.javafuzzer254;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=19113L;
    public static double dFld=-88.82377;
    public static float fArrFld[]=new float[N];
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 47.239F);
        FuzzerUtils.init(Test.lArrFld, 4513593390256841556L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(short s) {

        int i4=-27195, i5=13805, i6=11, i7=-12, i8=53;
        float f=-37.249F;
        double d=0.30475;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 36L);

        i4 -= (int)Test.instanceCount;
        i4 %= (int)(Test.instanceCount | 1);
        i4 = (int)f;
        Test.fArrFld[(i4 >>> 1) % N] *= (float)d;
        i5 = 1;
        while (++i5 < 268) {
            i4 += (int)Test.instanceCount;
            i4 += (((i5 * i5) + Test.instanceCount) - i4);
            for (i6 = 1; i6 < 6; i6++) {
                Test.instanceCount = -23;
                i8 = 2;
                while (--i8 > 0) {
                    i7 *= i5;
                }
                i4 *= i8;
                s = (short)129;
                lArr = lArr;
                i4 = (int)-227L;
            }
        }
        long meth_res = s + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i3, byte by) {

        short s1=6135;
        int i9=62, i10=-18, i11=14, i12=119, iArr1[][]=new int[N][N];
        float f1=-1.966F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 140);
        FuzzerUtils.init(lArr1, -5464081192683069333L);

        i3 = (int)(byMeth(s1) + Test.instanceCount);
        for (i9 = 329; i9 > 2; --i9) {
            i10 += (int)Test.instanceCount;
            try {
                i3 = (i10 % -1179568217);
                i10 = (-3328 % i9);
                i3 = (153 % i3);
            } catch (ArithmeticException a_e) {}
            iArr1[i9 - 1][i9 + 1] += -50319;
            i3 += (i9 * i9);
        }
        i3 >>= i9;
        lArr1[(i3 >>> 1) % N] <<= -13;
        lArr1[(i3 >>> 1) % N] -= (long)f1;
        for (i11 = 12; 346 > i11; ++i11) {
            f1 += i10;
            Test.instanceCount >>= i9;
            Test.instanceCount += i11;
            s1 -= (short)i9;
            i10 >>>= -55964;
        }
        vMeth1_check_sum += i3 + by + s1 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i, int i1, int i2) {

        int i13=66, i14=10, i15=-3, i16=-27916, i17=7, i18=10, i19=-229, iArr[]=new int[N];
        byte by1=57;
        short s2=31075;
        float f2=33.458F;

        FuzzerUtils.init(iArr, -56684);

        i1 -= (int)(((iArr[(i2 >>> 1) % N] = i2) - (++Test.instanceCount)) + i);
        vMeth1(i13, by1);
        for (i14 = 9; i14 < 159; i14++) {
            s2 *= (short)i;
            f2 += i14;
            Test.instanceCount += i15;
            iArr[i14] += (int)Test.instanceCount;
            for (i16 = 11; i16 > 1; i16 -= 2) {
                i2 += (-45 + (i16 * i16));
                for (i18 = 1; i18 < 3; i18++) {
                    if (false) {
                        i13 = i13;
                        Test.instanceCount *= -48;
                    } else {
                        i15 += (i18 * i18);
                        by1 += (byte)(((i18 * f2) + i13) - i1);
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i13 + by1 + i14 + i15 + s2 + Float.floatToIntBits(f2) + i16 + i17 + i18 + i19
            + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=5, i21=-3835, i22=14, i23=9, i24=-75, i25=-8, i26=-3, i27=12, iArr2[]=new int[N];
        double d1=1.45496, dArr[]=new double[N];
        float f3=29.345F;
        boolean b=true;
        short sArr[]=new short[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(sArr, (short)10281);
        FuzzerUtils.init(iArr2, 4);
        FuzzerUtils.init(byArr, (byte)-21);
        FuzzerUtils.init(dArr, 19.25408);

        vMeth(i20, i20, -9);
        for (i21 = 346; i21 > 4; i21--) {
            switch ((i21 % 4) + 76) {
            case 76:
                sArr[i21 - 1] += (short)Test.instanceCount;
                for (i23 = 1; i23 < 74; i23++) {
                    d1 = 2;
                    do {
                        Test.dFld += i20;
                        Test.instanceCount += (long)(((d1 * i20) + i20) - i22);
                        try {
                            i20 = (-187 % i20);
                            i24 = (i23 / iArr2[i23 + 1]);
                            i22 = (110 / i23);
                        } catch (ArithmeticException a_e) {}
                        byArr[(int)(d1 - 1)] = (byte)f3;
                        Test.dFld -= -2576226016333988095L;
                        i24 |= i20;
                        Test.dFld += Test.instanceCount;
                        i20 = (int)Test.instanceCount;
                        dArr[(int)(d1)] -= i21;
                    } while ((d1 -= 2) > 0);
                    b = b;
                }
                switch ((i21 % 2) + 73) {
                case 73:
                    i25 = 1;
                    while (++i25 < 74) {
                        for (i26 = 1; 1 < i26; i26--) {
                            if (b) break;
                            i24 *= (int)Test.instanceCount;
                            i24 %= (int)(i20 | 1);
                            Test.dFld = i23;
                        }
                        i27 = 2;
                        i22 = i20;
                        Test.lArrFld[i25][i25 + 1] = i23;
                        Test.fArrFld[i25 + 1] = (float)Test.dFld;
                        iArr2[i25] = (int)d1;
                        iArr2[i25 + 1] *= (int)f3;
                    }
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 74:
                    i24 += (int)f3;
                default:
                    i24 *= i22;
                }
            case 77:
                i20 -= (int)d1;
                break;
            case 78:
                i20 = (int)Test.instanceCount;
                break;
            case 79:
                Test.instanceCount += (((i21 * i27) + i20) - i26);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
