package tests.javafuzzer2075;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:37:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5975L;
    public static int iFld=-1;
    public static boolean bFld=true;
    public static byte byFld=127;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, int i6) {

        int i7=149, i8=9, i9=-1, i10=12, i11=3240, i12=110, i13=-62012, iArr1[][]=new int[N][N], iArr2[]=new int[N];
        byte by=18;
        short s1=427;
        float f=-123.761F;
        long l=8998367741728180684L, lArr[][]=new long[N][N];
        double d=0.128071;
        boolean b1=false;

        FuzzerUtils.init(lArr, 8476159910920200553L);
        FuzzerUtils.init(iArr1, -47);
        FuzzerUtils.init(iArr2, 172);

        i7 = 1;
        do {
            i5 -= -11353;
            Test.instanceCount = by;
            lArr[i7 + 1] = FuzzerUtils.long1array(N, (long)-25581L);
        } while (++i7 < 169);
        if (false) {
            switch ((((i6 >>> 1) % 7) * 5) + 56) {
            case 84:
                for (i8 = 11; i8 < 214; i8++) {
                    for (i10 = 1; i10 < 8; ++i10) {
                        for (i12 = 1; i12 < 2; i12++) {
                            iArr1[i8][i10] *= s1;
                            f += i12;
                        }
                        i11 += (i10 * i10);
                        Test.instanceCount += i4;
                    }
                    i9 += i7;
                    i11 += (int)Test.instanceCount;
                }
            case 81:
                i9 *= (int)l;
                break;
            case 61:
                iArr2[(-3 >>> 1) % N] += i7;
                break;
            case 83:
                iArr1[(i8 >>> 1) % N][(i5 >>> 1) % N] -= Test.iFld;
                break;
            case 72:
                f *= (float)d;
            case 69:
                l = (long)d;
            case 89:
                l = i8;
                break;
            }
        } else if (b1) {
            f *= i4;
        } else if (true) {
            Test.instanceCount >>>= i13;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + by + i8 + i9 + i10 + i11 + i12 + i13 + s1 + Float.floatToIntBits(f) + l
            + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth() {

        int i3=-50814, i15=5, i16=-179, i17=-1, i18=46, i19=10, i20=-64433, iArr3[][]=new int[N][N];
        long l1=369292912L, lArr1[]=new long[N];
        float f1=2.763F;

        FuzzerUtils.init(iArr3, -70);
        FuzzerUtils.init(lArr1, -14L);

        Test.instanceCount &= (i3++);
        vMeth1(40562, Test.iFld, i3);
        Test.iFld ^= 54837;
        for (i15 = 2; i15 < 222; ++i15) {
            for (l1 = 1; l1 < 7; l1 += 3) {
                for (i18 = i15; i18 < 4; i18++) {
                    Test.instanceCount <<= i15;
                    iArr3[i15 - 1][i18 - 1] >>= i17;
                    f1 = i3;
                    lArr1[i18] += l1;
                    Test.instanceCount = i16;
                    Test.iFld >>= i16;
                    f1 -= i18;
                    Test.instanceCount += (((i18 * Test.instanceCount) + f1) - i20);
                    Test.instanceCount += (long)(-1.14F + (i18 * i18));
                }
            }
        }
        vMeth_check_sum += i3 + i15 + i16 + l1 + i17 + i18 + i19 + Float.floatToIntBits(f1) + i20 +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i2, short s, boolean b) {

        int i21=3, i22=55413, iArr4[]=new int[N];
        byte byArr[]=new byte[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr4, 26505);
        FuzzerUtils.init(byArr, (byte)-54);
        FuzzerUtils.init(lArr2, 84L);

        vMeth();
        i21 = 1;
        while (++i21 < 297) {
            iArr4[i21] = s;
            i22 = 1;
            while (++i22 < 6) {
                switch ((i22 % 5) + 49) {
                case 49:
                    byArr[i21 + 1] += (byte)Test.instanceCount;
                    iArr4 = iArr4;
                    if (i22 != 0) {
                    }
                    Test.iFld += (int)Test.instanceCount;
                    break;
                case 50:
                    Test.instanceCount = 234L;
                    lArr2[i21 - 1] = i2;
                    Test.instanceCount = -30549;
                    i2 -= i21;
                    break;
                case 51:
                    i2 *= i2;
                    Test.iFld += (i22 * i22);
                case 52:
                    i2 -= Test.iFld;
                    break;
                case 53:
                    Test.instanceCount &= Test.instanceCount;
                default:
                    iArr4[i22] -= i22;
                }
            }
        }
        long meth_res = i2 + s + (b ? 1 : 0) + i21 + i22 + FuzzerUtils.checkSum(iArr4) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=243, i1=-6, i23=11254, i24=-1, i25=-25340, iArr[]=new int[N];
        float f2=-1.10F, fArr[][]=new float[N][N];
        double d1=94.42664;
        short s2=16489;

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr, 0.709F);

        for (i = 11; i < 318; ++i) {
            if (Test.bFld) {
                iArr[i - 1] ^= (iMeth(Test.iFld, (short)(30990), Test.bFld) - 22856);
                i23 = 1;
                do {
                    Test.iFld += (int)2.51824;
                    switch ((i % 7) + 94) {
                    case 94:
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld += (int)f2;
                        for (i24 = 1; i24 > 1; --i24) {
                            Test.iFld |= i;
                            f2 *= i23;
                            iArr[i] += (int)Test.instanceCount;
                            i25 += (((i24 * f2) + Test.iFld) - Test.iFld);
                            Test.byFld *= (byte)i25;
                            iArr[i24] = i24;
                            switch ((i % 7) + 26) {
                            case 26:
                                f2 += (i24 + i24);
                                break;
                            case 27:
                                i25 += (i24 - f2);
                                Test.instanceCount += (long)f2;
                                iArr[i23] = (int)f2;
                                break;
                            case 28:
                                d1 = i1;
                                break;
                            case 29:
                                i1 *= (int)f2;
                                Test.instanceCount += (i24 ^ i23);
                                if (false) continue;
                            case 30:
                                Test.instanceCount <<= i1;
                                s2 += (short)i24;
                                break;
                            case 31:
                                iArr[i - 1] += Test.iFld;
                                f2 = Test.iFld;
                            case 32:
                                i25 = i23;
                                Test.byFld *= (byte)9255;
                                break;
                            }
                        }
                        break;
                    case 95:
                    case 96:
                        fArr[i - 1][i - 1] += Test.iFld;
                        break;
                    case 97:
                        Test.instanceCount = i;
                        break;
                    case 98:
                        Test.instanceCount = i23;
                        break;
                    case 99:
                        Test.iFld += (i23 ^ (long)f2);
                    case 100:
                        try {
                            iArr[i23 + 1] = (i1 / i24);
                            Test.iFld = (iArr[i] / 25401);
                            i25 = (867592650 / i25);
                        } catch (ArithmeticException a_e) {}
                    default:
                        Test.iFld = Test.iFld;
                    }
                } while (++i23 < 82);
            } else {
                i1 >>= Test.iFld;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
