package tests.javafuzzer1985;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-58612L;
    public static short sFld=-17742;
    public static boolean bFld=false;
    public static long lFld=-1L;
    public static volatile byte byFld=91;
    public double dFld=127.91104;
    public static long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 100L);
        FuzzerUtils.init(Test.fArrFld, -38.272F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i6, int i7, int i8) {

        float f1=0.184F;
        long l1=534206238L;
        int i9=-48531, i10=-8, i11=161, i12=1;

        f1 = Test.instanceCount;
        Test.fArrFld[(-14 >>> 1) % N] = i7;
        Test.lArrFld[(i6 >>> 1) % N] -= Test.instanceCount;
        Test.lArrFld[(-45 >>> 1) % N] <<= i7;
        if (Test.bFld) {
            l1 = 1;
            while ((l1 += 3) < 228) {
                f1 += -7;
                for (i9 = (int)(l1); i9 < 20; ++i9) {
                    i10 += (i9 * i9);
                    Test.lFld = i8;
                    for (i11 = i9; 1 > i11; ++i11) {
                        i6 *= i10;
                        i7 += i11;
                        Test.lFld <<= l1;
                        f1 -= -28052;
                    }
                }
            }
        } else if (true) {
            i6 -= i8;
        }
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + l1 + i9 + i10 + i11 + i12;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public int iMeth1() {

        int i2=-1, i3=94, i4=7, i5=-8, i13=-4, i14=-59250, i15=-153;
        float f=2.338F, f2=127.934F;
        double d=-38.46980;

        i2 = 184;
        while (--i2 > 0) {
            for (i3 = 9; i3 > 1; i3--) {
                Test.sFld += (short)i3;
                for (f = 1; f < 2; ++f) {
                    Test.bFld = (Test.bFld = (bMeth(i5, i5, i5) && Test.bFld));
                    Test.lArrFld[(int)(f + 1)] = i4;
                }
                for (i13 = i2; i13 < 2; i13++) {
                    Test.lFld += (i13 * i13);
                    i5 = Test.byFld;
                    i4 = (int)d;
                    i4 <<= i5;
                    i5 = (int)169L;
                }
                i15 += (((i3 * Test.lFld) + i14) - Test.lFld);
                f2 -= i5;
                try {
                    i5 = (i4 % -143);
                    i15 = (i13 / -114);
                    i5 = (-25 % i13);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i13 + i14 + Double.doubleToLongBits(d) + i15 +
            Float.floatToIntBits(f2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(long l, int i1) {

        int i16=-6, i17=22809, i18=-179, i19=-47316;
        float f3=-1.300F;
        double d1=-74.38414;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)31733);

        if (Test.bFld) {
            i1 += iMeth1();
            for (i16 = 10; 323 > i16; i16++) {
                f3 = 1;
                while (++f3 < 5) {
                    i1 -= i17;
                    d1 -= i1;
                    Test.instanceCount -= i17;
                    i17 += (int)(f3 * f3);
                    Test.byFld += (byte)(f3 * f3);
                    for (i18 = 1; i18 < 1; ++i18) {
                        i17 >>= i16;
                        i19 += (((i18 * i1) + Test.sFld) - i17);
                        i19 *= -6;
                        sArr[(int)(f3)] = (short)i1;
                        Test.instanceCount -= (long)f3;
                    }
                }
            }
        } else {
            i17 += (int)l;
        }
        long meth_res = l + i1 + i16 + i17 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + i18 + i19 +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=47028, i20=-38142, i21=-5, i22=148, i23=56028, i24=120, i25=0, iArr[]=new int[N];
        short s=-31152;
        float f4=0.907F;
        long l2=-14L;

        FuzzerUtils.init(iArr, -11730);

        Test.lArrFld[(i >>> 1) % N] -= (s * (~iMeth(Test.instanceCount, i)));
        i = (int)Test.instanceCount;
        i >>= (int)628L;
        for (i20 = 7; i20 < 239; i20++) {
            i -= (int)dFld;
            for (i22 = 2; i22 < 108; i22++) {
                i23 = (int)Test.instanceCount;
                i21 |= (int)80L;
                i21 = i23;
            }
            for (i24 = 4; i24 < 108; i24 += 2) {
                i23 += i24;
                if (Test.bFld) break;
                iArr[i24] += i24;
                switch ((i20 % 5) + 58) {
                case 58:
                    Test.lArrFld[i24 + 1] = i25;
                    dFld += Test.instanceCount;
                    Test.fArrFld[i24 + 1] = i23;
                    i25 = (int)dFld;
                case 59:
                    if (Test.bFld) {
                        i = (int)46.16205;
                        Test.instanceCount -= Test.lFld;
                    }
                    break;
                case 60:
                    f4 = i21;
                    break;
                case 61:
                    Test.instanceCount = l2;
                    iArr[i24 + 1] += i20;
                    i25 /= 122;
                    i23 = s;
                    break;
                case 62:
                }
            }
        }
        i21 ^= i20;
        i25 = i21;
        l2 *= i;
        s -= (short)i25;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
