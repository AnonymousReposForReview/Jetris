package tests.javafuzzer419;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:22:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2986859977116031438L;
    public static double dFld=19.35343;
    public static float fFld=78.751F;
    public static short sFld=2638;
    public static volatile byte byFld=-5;
    public volatile boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static volatile long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 7.83644);
        FuzzerUtils.init(Test.lArrFld, 36870L);
        FuzzerUtils.init(Test.iArrFld, 15482);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-144, i3=-8, i4=-6, i5=-59498, i6=-7, i7=-238, i8=98, i9=-10, i10=1, i11=-24374, iArr[]=new int[N];
        short s=32727, sArr[]=new short[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(sArr, (short)4352);

        for (i2 = 21; 397 > i2; ++i2) {
            for (i4 = 4; i4 > 1; i4 -= 3) {
                i6 = 1;
                while (++i6 < 4) {
                    i3 <<= i6;
                }
                for (i7 = 1; i7 < 4; ++i7) {
                    Test.dFld += i7;
                    i3 += (i7 * i8);
                    i9 -= (int)Test.instanceCount;
                    i8 *= s;
                    try {
                        i8 = (iArr[i2 - 1] / i5);
                        i3 = (i7 / 975050877);
                        i5 = (i4 % -107);
                    } catch (ArithmeticException a_e) {}
                    i5 += -31490;
                }
                i3 = i7;
                for (i10 = 1; i10 < 4; ++i10) {
                    sArr = sArr;
                }
                i5 += (int)Test.fFld;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1) {

        boolean b=true, bArr[]=new boolean[N];
        int i12=63, i13=12, i14=10, i15=-10, iArr1[]=new int[N];
        byte by=-90;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -12);

        Test.instanceCount += ((i1 >>= iMeth()) - 56877L);
        i1 = 14;
        Test.fFld = -10202L;
        Test.fFld += i1;
        i1 *= Test.sFld;
        bArr[(i1 >>> 1) % N] = b;
        for (i12 = 6; i12 < 226; ++i12) {
            i13 = i13;
            for (i14 = 1; i14 < 7; ++i14) {
                Test.instanceCount = i12;
                switch ((i14 % 7) + 41) {
                case 41:
                    Test.lArrFld[i12 - 1][i14 - 1] = Test.instanceCount;
                    break;
                case 42:
                    iArr1 = FuzzerUtils.int1array(N, (int)52);
                    Test.dFld += i14;
                    try {
                        i15 = (iArr1[i14] / -24);
                        iArr1[i12 - 1] = (i14 % -97);
                        i13 = (-215 / iArr1[i12 - 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 43:
                case 44:
                    i13 = by;
                    break;
                case 45:
                    i1 <<= i14;
                case 46:
                    if (i12 != 0) {
                        vMeth1_check_sum += i1 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + by + FuzzerUtils.checkSum(bArr)
                            + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 47:
                    Test.instanceCount -= Test.instanceCount;
                    break;
                default:
                    i15 >>>= by;
                }
            }
        }
        vMeth1_check_sum += i1 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + by + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        int i=-9, i16=-209, i17=-104, i18=46169, i19=41, i20=-35189;

        i += (int)Math.abs((long)(Test.dArrFld[(i >>> 1) % N] + l));
        switch ((((--i) >>> 1) % 5) + 91) {
        case 91:
            vMeth1(-235);
            i = i;
            break;
        case 92:
            Test.dArrFld[(i >>> 1) % N] *= Test.dFld;
            i += i;
            Test.iArrFld[(6 >>> 1) % N] *= i;
        case 93:
        case 94:
            l -= i;
            break;
        case 95:
            i16 = 1;
            do {
                for (i17 = 6; 1 < i17; i17--) {
                    for (i19 = 2; i19 > 1; i19 -= 3) {
                        Test.lArrFld[i17][i16 - 1] = i16;
                        l += i18;
                        i18 += i16;
                        Test.fFld = (float)-2.36125;
                    }
                }
            } while (++i16 < 279);
        default:
            Test.lArrFld[(i >>> 1) % N][(-5 >>> 1) % N] = Test.byFld;
        }
        vMeth_check_sum += l + i + i16 + i17 + i18 + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        int i21=25657, i22=-107, i23=-59731, i24=-210, i25=19, i26=-22395, i27=12928, i28=-19355, i29=5, i30=-58385,
            i31=-2;
        long l1=2864188522L;

        vMeth(Test.instanceCount);
        i21 ^= (int)Test.instanceCount;
        for (i22 = 6; 373 > i22; ++i22) {
            Test.dFld -= i23;
            Test.iArrFld[i22 + 1] = 4;
        }
        Test.lArrFld[(i23 >>> 1) % N][(i23 >>> 1) % N] *= 7;
        Test.fFld *= i22;
        bFld = bFld;
        Test.iArrFld[(i23 >>> 1) % N] = (int)Test.dFld;
        Test.fFld += i22;
        i24 = 1;
        do {
            Test.dFld *= i23;
            i23 += i24;
            Test.instanceCount += i24;
        } while (++i24 < 136);
        for (i25 = 3; i25 < 233; ++i25) {
            Test.instanceCount >>= 12;
            i26 >>= i26;
            i23 += (int)(107L + (i25 * i25));
            for (l1 = 4; l1 < 109; ++l1) {
                Test.lArrFld = Test.lArrFld;
                i21 -= 113;
                i26 |= 43614;
                for (i28 = (int)(l1); i28 < 2; i28++) {
                    Test.sFld += (short)i23;
                    i26 = (int)Test.dFld;
                }
            }
            if (bFld) continue;
            Test.instanceCount += i26;
        }
        for (i30 = 11; 384 > i30; i30 += 3) {
            i23 += i30;
            i26 -= (int)Test.dFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
