package tests.javafuzzer3009;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:45:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3835649535626827360L;
    public static int iFld=-196;
    public static volatile boolean bFld=false;
    public static float fFld=0.189F;
    public byte byFld=-126;
    public static float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -120.539F);
        FuzzerUtils.init(Test.byArrFld, (byte)-2);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=-6, i2=-2, i3=6, i4=202, i5=8, i6=50354, iArr1[]=new int[N];
        double d1=1.3158;

        FuzzerUtils.init(iArr1, -82);

        for (i1 = 15; i1 < 345; ++i1) {
            try {
                i2 = (210 % iArr1[i1 + 1]);
                i2 = (Test.iFld % -144);
                Test.iFld = (i2 % 1781217510);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount &= 1785274604L;
            iArr1[i1] >>= (int)40152L;
            Test.fFld += (-1 + (i1 * i1));
            try {
                iArr1[i1 + 1] = (i2 / 1989100210);
                i2 = (i1 % -36894);
                i2 = (Test.iFld % i1);
            } catch (ArithmeticException a_e) {}
            for (i3 = 1; i3 < 5; i3++) {
                for (i5 = i1; i5 < 2; ++i5) {
                    Test.iFld += (i5 * i5);
                    Test.instanceCount = 12;
                    Test.fFld = Test.instanceCount;
                    i4 = (int)d1;
                    Test.instanceCount >>= i3;
                    Test.instanceCount += (((i5 * Test.fFld) + Test.fFld) - Test.instanceCount);
                }
                Test.instanceCount += i5;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth() {

        int i7=224, i8=-11258, i9=0, i10=14, iArr2[]=new int[N];
        short s=25873;
        double d2=-67.26606;

        FuzzerUtils.init(iArr2, -223);

        Test.iFld -= (int)Test.fArrFld[(Test.iFld >>> 1) % N];
        vMeth1();
        for (i7 = 135; i7 > 2; i7 -= 3) {
            i8 = s;
            i8 += (int)Test.instanceCount;
            Test.instanceCount += i8;
            for (i9 = 2; i9 < 35; i9++) {
                Test.iFld -= (int)d2;
                try {
                    iArr2[i9 + 1] = (i10 % -1581633524);
                    iArr2[i9 + 1] = (i7 / iArr2[i9 + 1]);
                    i8 = (i8 / i10);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = i7;
                Test.iFld ^= Test.iFld;
                Test.iFld += Test.iFld;
                iArr2[i7] = Test.iFld;
                Test.instanceCount += Test.instanceCount;
                iArr2[i9] = (int)Test.instanceCount;
            }
        }
        long meth_res = i7 + i8 + s + i9 + i10 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void vMeth(long l) {

        int i11=-45462, i12=56884, i13=-10, i14=-13, iArr[]=new int[N];
        short s1=-351;
        float f1=-1.639F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 137);
        FuzzerUtils.init(lArr, -13L);

        for (int i : iArr) {
            Test.bFld = bMeth();
            i11 = 1;
            while (++i11 < 4) {
                Test.iFld = s1;
                Test.instanceCount = (long)1.450F;
                Test.instanceCount += (0 + (i11 * i11));
                Test.bFld = Test.bFld;
            }
            Test.iFld += i;
            try {
                iArr[(Test.iFld >>> 1) % N] = (Test.iFld % 46739);
                Test.iFld = (iArr[(-33839 >>> 1) % N] / 35585);
                Test.iFld = (i % 1029015033);
            } catch (ArithmeticException a_e) {}
            for (f1 = 4; 1 < f1; --f1) {
                for (i13 = 1; i13 < 2; i13++) {
                    lArr[i13 + 1] /= (i13 | 1);
                }
                Test.iFld >>= (int)-13L;
                i12 = i;
                try {
                    iArr[(int)(f1)] = (i12 / -55704);
                    i14 = (i11 % -248);
                    Test.iFld = (Test.iFld / 189517040);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += l + i11 + s1 + Float.floatToIntBits(f1) + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=0.489F, f2=1.349F, f3=1.405F;
        double d=2.97066;
        int i15=7, i16=-14, i17=2, i18=4, i19=-91, i20=-13919, i21=-23429, i22=-43150, iArr3[]=new int[N];
        short s2=-31536;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr3, -5);
        FuzzerUtils.init(lArr1, 484689565200909631L);

        Test.iFld >>= (int)(((f--) * (f--)) - ((--d) + (Test.iFld + 12600)));
        vMeth(14L);
        Test.bFld = Test.bFld;
        Test.iFld = 97;
        for (f2 = 15; 341 > f2; ++f2) {
            for (i16 = 1; 77 > i16; i16 += 3) {
                s2 -= (short)-239L;
                i17 -= (int)d;
                Test.fFld -= i16;
                Test.instanceCount += i15;
                Test.instanceCount = byFld;
                for (i18 = 1; i18 < 4; i18++) {
                    d %= -11L;
                }
                Test.byArrFld[(int)(f2 - 1)] = (byte)i17;
                iArr3[(int)(f2 - 1)] = s2;
                Test.instanceCount >>= Test.instanceCount;
                for (f3 = 4; 1 < f3; f3 -= 2) {
                    iArr3[i16] += byFld;
                    Test.iFld >>= i17;
                    i20 = i19;
                    lArr1[(int)(f3 - 1)] = i19;
                    f += i19;
                    Test.instanceCount = (long)Test.fFld;
                    f += Test.iFld;
                }
            }
            for (i21 = 4; i21 < 77; ++i21) {
                int i23=-14;
                i15 = (int)f;
                i23 = (int)Test.instanceCount;
                iArr3[(int)(f2)] += i20;
            }
            byFld -= (byte)i17;
            Test.instanceCount -= i20;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
