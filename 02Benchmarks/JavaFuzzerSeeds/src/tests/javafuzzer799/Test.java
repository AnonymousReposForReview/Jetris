package tests.javafuzzer799;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:12:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-79100207L;
    public static float fFld=1.222F;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -68.15504);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, double d1) {

        int i10=4, i11=9, i12=-68, i13=35874;
        short s=26262;
        byte by=96;

        i9 = i9;
        for (i10 = 3; i10 < 129; ++i10) {
            i12 = 1;
            while (++i12 < 12) {
                i11 = i10;
                Test.instanceCount = 8077126134981722086L;
                i9 -= i10;
                s += (short)i10;
                Test.fFld *= i11;
            }
            Test.dArrFld[i10 + 1] = Test.instanceCount;
        }
        i11 = by;
        i11 >>= i9;
        s = (short)i11;
        i13 = 1;
        while (++i13 < 202) {
            i11 -= -47746;
            i9 <<= i10;
        }
        vMeth1_check_sum += i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + s + by + i13;
    }

    public static int iMeth(int i5, int i6, int i7) {

        int i8=-9, i14=-23293, i15=1, i16=-3, i17=0, iArr1[][]=new int[N][N];
        byte by1=104;
        boolean b=true;
        double d2=-2.21603;
        short s1=18641;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 107L);
        FuzzerUtils.init(iArr1, -77);

        i8 = 1;
        while (++i8 < 218) {
            vMeth1(i6, -3.38199);
            i7 -= i6;
            for (i14 = 1; 7 > i14; ++i14) {
                Test.instanceCount >>>= i15;
                for (i16 = 1; i16 < 2; i16++) {
                    int i18=9297;
                    i17 = i5;
                    lArr[i8 + 1] ^= i6;
                    i18 += i16;
                    Test.dArrFld[i16 + 1] += i16;
                    switch (((i15 >>> 1) % 8) + 30) {
                    case 30:
                        switch ((i16 % 7) + 111) {
                        case 111:
                            by1 += (byte)(i16 - Test.instanceCount);
                            break;
                        case 112:
                        case 113:
                            i7 = (int)Test.instanceCount;
                            i7 = i17;
                            break;
                        case 114:
                            lArr[i8] &= 3492346652L;
                            break;
                        case 115:
                            iArr1[i16 - 1][i16 - 1] -= 4582;
                            break;
                        case 116:
                            i15 -= 111;
                            break;
                        case 117:
                            i7 ^= (int)Test.instanceCount;
                            break;
                        }
                        break;
                    case 31:
                        if (b) continue;
                        break;
                    case 32:
                        Test.instanceCount = (long)d2;
                        break;
                    case 33:
                        i7 += i15;
                        break;
                    case 34:
                        i18 >>= (int)Test.instanceCount;
                        break;
                    case 35:
                        i7 = s1;
                        break;
                    case 36:
                        i6 *= (int)Test.instanceCount;
                    case 37:
                    }
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i14 + i15 + i16 + i17 + by1 + (b ? 1 : 0) + Double.doubleToLongBits(d2) +
            s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i1=-14, i2=5, i3=118, i4=21258, i19=-115, iArr[]=new int[N];
        double d3=-2.25450;

        FuzzerUtils.init(iArr, 16243);

        for (i1 = 21; i1 < 368; ++i1) {
            boolean b1=false;
            i2 *= i1;
            if (b1) {
                Test.instanceCount = l;
                i3 = 1;
                do {
                    switch (((i3 % 8) * 5) + 20) {
                    case 27:
                        iArr[i1 + 1] *= (int)(Test.fFld--);
                        break;
                    case 60:
                        if (i4 != 0) {
                            vMeth_check_sum += l + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d3) + i19 +
                                FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        l = iMeth(65033, i3, i3);
                        iArr[i1] *= i4;
                    case 28:
                        i4 *= i2;
                        i4 += (i3 ^ i1);
                        break;
                    case 57:
                        Test.instanceCount >>>= i1;
                        break;
                    case 38:
                        i4 = (int)l;
                        Test.instanceCount = i1;
                    case 49:
                        iArr[i3 - 1] -= (int)Test.fFld;
                        break;
                    case 40:
                        i4 -= 5765;
                        break;
                    case 53:
                        i4 = (int)d3;
                        break;
                    default:
                        i2 >>= i2;
                    }
                } while (++i3 < 5);
            } else if (b1) {
                iArr[i1 - 1] = i19;
            } else if (b1) {
                Test.fFld -= 118;
            } else {
                i4 *= i19;
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d3) + i19 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-46954, i20=42659, i21=14419, i22=-49475, i23=42591, i24=57248, i25=-34083, i26=7, i27=11;
        double d=-2.73041;
        byte by2=-14, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-115);

        i += (int)(-(Math.max(i, 52) + (i * d)));
        iArrFld = (iArrFld = (iArrFld = FuzzerUtils.int1array(N, (int)-105)));
        vMeth(Test.instanceCount);
        for (i20 = 1; 337 > i20; i20++) {
            i = (int)Test.fFld;
            i22 = 75;
            while (--i22 > 0) {
                for (i23 = 1; i23 < 1; ++i23) {
                    Test.fFld += (-8101684346646618384L + (i23 * i23));
                    i21 = -12;
                    i24 = (int)Test.instanceCount;
                    Test.instanceCount &= i22;
                    d *= i22;
                }
                i24 += (i22 | Test.instanceCount);
                if (Test.bFld) continue;
                if (Test.bFld) continue;
            }
            i25 = 1;
            do {
                i24 *= (int)Test.instanceCount;
                i -= (int)Test.instanceCount;
                iArrFld[i20] += i22;
                Test.instanceCount = -28590;
                byArr[i20] = (byte)-2302964904L;
                i24 = (int)Test.fFld;
                iArrFld[i25] -= i;
                by2 = (byte)-181;
            } while (++i25 < 75);
            if (Test.bFld) continue;
            for (i26 = i20; i26 < 75; i26++) {
                i27 = i26;
                iArrFld[i20 + 1] += i27;
                i21 = (int)Test.instanceCount;
                i21 = i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
