package tests.javafuzzer1841;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:22:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2735936560L;
    public static double dFld=1.36010;
    public static boolean bFld=true;
    public static float fFld=0.148F;
    public static short sFld=-20709;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i7=-114, i8=-160, i9=7058, i10=-23696, i11=-208, i12=-95, i13=-4;
        long l1=8275493333087575772L;
        float f1=122.108F;

        i7 = (int)Test.dFld;
        Test.instanceCount -= Test.instanceCount;
        i8 = 347;
        while ((i8 -= 2) > 0) {
            if (Test.bFld) {
                for (i9 = 1; i9 < 9; ++i9) {
                    i7 = -68;
                    i10 *= -3790;
                }
                i7 <<= (int)l1;
            } else if (Test.bFld) {
                for (i11 = 1; i11 < 9; i11++) {
                    i7 = i10;
                }
            } else if (Test.bFld) {
                i10 += i8;
                for (f1 = 1; 9 > f1; f1++) {
                    i7 = (int)f1;
                    i10 <<= i12;
                    Test.bFld = Test.bFld;
                }
            } else {
                i12 *= (int)-19877L;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + l1 + i11 + i12 + Float.floatToIntBits(f1) + i13;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static byte byMeth(double d1, float f, double d2) {

        int i5=-58486, i6=11, i14=-210, i15=0, i16=-4611;
        long l2=8L;
        boolean b=true;
        byte by=-65;

        for (i5 = 10; i5 < 206; i5++) {
            fMeth();
        }
        for (i14 = 174; 8 < i14; i14--) {
            i6 -= i14;
            i15 = i14;
            i6 = (int)Test.instanceCount;
            i6 *= i5;
            f += i14;
            i15 = (int)l2;
            f += (float)d2;
            if (b) break;
        }
        Test.instanceCount += i15;
        i16 = 1;
        do {
            by ^= (byte)Test.instanceCount;
            i6 = 1;
        } while (++i16 < 130);
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i5 + i6 +
            i14 + i15 + l2 + (b ? 1 : 0) + i16 + by;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        double d=30.117912;
        int i4=-74, i17=-9, i18=50079, i19=205, i20=-248, i21=6, iArr[]=new int[N];
        short s=25971;
        float f2=-105.553F;
        byte by1=42, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)22);
        FuzzerUtils.init(lArr, 117L);
        FuzzerUtils.init(iArr, 6);

        d = i4;
        Test.instanceCount += (byArr[(i4 >>> 1) % N] - ((-19418L >>> (s--)) + byMeth(d, 1.660F, d)));
        for (i17 = 13; 292 > i17; i17++) {
            for (i19 = 1; i19 < 6; ++i19) {
                if (false) break;
                i21 = 1;
                do {
                    lArr[i19] = Test.instanceCount;
                    f2 -= i20;
                    if (Test.bFld) continue;
                    i4 = i17;
                    by1 = (byte)i17;
                    iArr[i19] >>>= (int)Test.instanceCount;
                    lArr[i17 - 1] >>= by1;
                } while (++i21 < 2);
            }
            by1 <<= (byte)i4;
            i20 = i19;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i4 + s + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2)
            + by1 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=23862, i1=-46173, i2=-30873, i3=165, i23=0, i24=9;
        long l=5000L;
        byte by2=-96;

        i *= (i--);
        for (i1 = 10; i1 < 220; i1++) {
            l = 1;
            while (++l < 120) {
                i3 = 1;
                do {
                    vMeth();
                    i23 = i;
                    i += (i3 + i23);
                    switch (((i1 >>> 1) % 1) + 40) {
                    case 40:
                        iArrFld[i3 + 1] = i;
                        Test.fFld = i23;
                        i >>>= (int)Test.instanceCount;
                        iArrFld[(int)(l + 1)] = (int)Test.instanceCount;
                    default:
                        Test.instanceCount = Test.instanceCount;
                        i23 += i3;
                        switch (((i1 % 2) * 5) + 4) {
                        case 8:
                            i23 = (int)Test.instanceCount;
                            i -= (int)Test.instanceCount;
                            Test.fFld += i1;
                            i += (i3 * i23);
                            break;
                        case 13:
                            Test.instanceCount = i23;
                        }
                        if (Test.bFld) continue;
                    }
                    i -= i23;
                    i2 >>= Test.sFld;
                } while (++i3 < 1);
                by2 *= (byte)i;
                Test.fFld *= Test.instanceCount;
                Test.instanceCount += -218;
                i24 = 1;
                do {
                    if (Test.bFld) {
                        i2 -= by2;
                        i2 = (int)l;
                    }
                } while ((i24 += 3) < 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
