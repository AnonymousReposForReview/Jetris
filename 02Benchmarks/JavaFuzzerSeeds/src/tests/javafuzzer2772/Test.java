package tests.javafuzzer2772;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:57:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-181L;
    public static double dFld=75.75125;
    public short sFld=-6167;
    public static volatile int iFld=55964;
    public boolean bFld=true;

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=-22782, i9=225, i10=0, i11=206, i12=-16598, i13=-11284, i14=14681;
        short s1=26254;
        byte by=75;
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -1792675731L);

        i7 >>= i7;
        i7 *= -132;
        for (i8 = 6; i8 < 289; ++i8) {
            for (i10 = 1; i10 < 6; ++i10) {
                i11 += i10;
                s1 = (short)i8;
                for (i12 = 1; i12 < 2; i12++) {
                    i11 += (i12 | by);
                    switch ((((i12 >>> 1) % 2) * 5) + 91) {
                    case 96:
                        i9 += (((i12 * Test.instanceCount) + by) - i7);
                        i9 = i14;
                        switch ((((i9 >>> 1) % 2) * 5) + 108) {
                        case 114:
                            if (b) break;
                            i14 >>= i13;
                            i9 >>= i8;
                            break;
                        case 117:
                            s1 -= (short)Test.instanceCount;
                        }
                    case 99:
                        lArr2[i8 - 1] = Test.instanceCount;
                    default:
                        i9 >>>= i11;
                    }
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + s1 + i12 + i13 + by + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth() {

        int i4=-6319, i5=-11, i6=216, i15=-106, i16=224, i17=64011, i18=60223, iArr1[]=new int[N];
        short s=17735;
        boolean b1=false;
        float f2=0.927F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 66.408F);
        FuzzerUtils.init(lArr1, -3952537571249566509L);
        FuzzerUtils.init(iArr1, -5580);

        Test.dFld -= ((0 - (++fArr[(i4 >>> 1) % N])) * (i4 = (i4 + i4)));
        for (i5 = 4; 130 > i5; ++i5) {
            lArr1[i5] *= (++s);
            vMeth(-32020);
            for (i15 = 1; i15 < 12; i15++) {
                i6 >>= 57966;
                i16 <<= (int)Test.instanceCount;
                for (i17 = i5; i17 < 2; ++i17) {
                    if (b1) {
                        i18 *= (int)Test.instanceCount;
                    } else if (b1) {
                        if (b1) {
                            iArr1[i17] -= i16;
                        }
                        i16 = (int)1172052234L;
                    } else if (true) {
                        i16 = -195;
                        f2 += (((i17 * i16) + Test.instanceCount) - i4);
                    } else {
                        iArr1[i17 + 1] *= (int)f2;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + s + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(float f1) {

        int i1=40930, i2=-9711, i3=183, i19=92, i20=-60222, iArr[]=new int[N];
        double d=0.29986;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(bArr, false);

        iArr[(-35377 >>> 1) % N] <<= ((i1++) * (i1--));
        for (i2 = 22; i2 < 374; i2++) {
            d = (i1++);
            d = (--f1);
            i1 += (i2 * i2);
            i3 *= (int)Test.instanceCount;
            iArr[i2 - 1] = i3;
        }
        iArr[(i2 >>> 1) % N] += (int)(iMeth() + Test.instanceCount);
        iArr[(i3 >>> 1) % N] <<= (int)Test.instanceCount;
        bArr[(i2 >>> 1) % N] = b2;
        Test.instanceCount -= (long)d;
        for (i19 = 17; i19 < 303; i19++) {
            i20 *= i19;
            i1 += (i19 + f1);
            Test.instanceCount -= i2;
        }
        long meth_res = Float.floatToIntBits(f1) + i1 + i2 + i3 + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i19 + i20
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.570F, f3=0.223F, fArr1[]=new float[N];
        int i=-25453, i21=-179, i22=10, i23=-41411, i24=0, i25=203, i26=228, i27=-57219, i28=-153, iArr2[]=new int[N];
        long lArr[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, 476688009L);
        FuzzerUtils.init(iArr2, -73);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(fArr1, 33.997F);

        for (f = 13; f < 375; f++) {
            lArr[(int)(f - 1)] >>>= sMeth(f);
            Test.instanceCount += (long)f;
        }
        for (i21 = 4; i21 < 159; i21++) {
            try {
                iArr2[i21] = (iArr2[i21 + 1] % i22);
                i22 = (iArr2[i21] % 1141745714);
                i = (155 % i21);
            } catch (ArithmeticException a_e) {}
            i22 += (((i21 * sFld) + Test.iFld) - f);
            Test.iFld += i21;
            i += (((i21 * i21) + i) - i);
        }
        for (i23 = 6; 388 > i23; ++i23) {
            bArr1 = bArr1;
            for (i25 = 66; i25 > 3; i25--) {
                iArr2[i23] -= i21;
                Test.instanceCount <<= i25;
                i26 -= i22;
                i22 = i;
                i26 += i25;
                Test.instanceCount |= i22;
                for (i27 = 2; i27 > 1; i27--) {
                    switch ((i23 % 2) + 12) {
                    case 12:
                        switch (((i23 % 7) * 5) + 33) {
                        case 37:
                            Test.dFld += 103;
                            i >>= 13;
                            break;
                        case 44:
                            bFld = false;
                            Test.instanceCount = i27;
                            fArr1[i23 + 1] = Test.instanceCount;
                            break;
                        case 46:
                            Test.iFld <<= i;
                            Test.iFld = i22;
                            i28 = (int)Test.instanceCount;
                            i26 <<= (int)47593L;
                            break;
                        case 50:
                            Test.instanceCount >>= i24;
                            break;
                        case 39:
                            Test.instanceCount = i25;
                        case 47:
                            f3 = i23;
                            break;
                        case 57:
                            Test.instanceCount += (((i27 * i24) + Test.instanceCount) - Test.instanceCount);
                            break;
                        }
                        break;
                    case 13:
                        i += (int)f3;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
