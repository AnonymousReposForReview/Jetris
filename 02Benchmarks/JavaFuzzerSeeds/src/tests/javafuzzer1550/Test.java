package tests.javafuzzer1550;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:43:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-13179L;
    public static int iFld=4205;
    public static volatile boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19);
        FuzzerUtils.init(Test.fArrFld, 116.386F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1) {

        double d=-40.42318, dArr[]=new double[N];
        int i2=-5, i3=0, i4=45674;
        long l2=-9915L;
        boolean b=true;

        FuzzerUtils.init(dArr, 114.7564);

        d = 1;
        do {
            for (i2 = 1; i2 < 5; ++i2) {
                float f=0.94F;
                f = i2;
                Test.iArrFld[i2 + 1] += (int)63171L;
                for (l2 = (long)(d); l2 < 2; ++l2) {
                    Test.iArrFld[(int)(l2)] = (int)d;
                    i4 += (int)l2;
                    dArr[i2] = l2;
                }
                b = true;
                i4 += (((i2 * i4) + f) - i3);
                Test.instanceCount = i3;
                l1 &= i3;
                i3 *= (int)l1;
            }
            i4 += i3;
            Test.iArrFld[(int)(d)] = i2;
        } while (++d < 337);
        vMeth2_check_sum += l1 + Double.doubleToLongBits(d) + i2 + i3 + l2 + i4 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(long l) {

        int i=-38, i1=-145, i5=239;
        short s=-31597;
        long l3=148L, lArr[]=new long[N];
        boolean b1=true;
        float f1=-2.516F;
        double d1=-2.118185;

        FuzzerUtils.init(lArr, -4L);

        for (i = 6; 231 > i; ++i) {
            vMeth2(l);
            i1 %= (int)(l | 1);
            i1 += (i * i1);
            i5 = s;
        }
        Test.iFld *= i5;
        s = (short)7;
        switch (((14 >>> 1) % 8) + 13) {
        case 13:
            switch (((i1 >>> 1) % 1) + 104) {
            case 104:
                i1 -= 25349;
                Test.iArrFld[(96 >>> 1) % N] >>>= (int)l3;
                break;
            default:
                b1 = b1;
                if (b1) {
                    i1 -= Test.iFld;
                    Test.instanceCount -= l3;
                } else {
                    Test.fArrFld[(i1 >>> 1) % N] = 11;
                }
            }
        case 14:
            l = i1;
        case 15:
            Test.fArrFld[(i5 >>> 1) % N] += 10L;
        case 16:
        case 17:
            lArr[(-2 >>> 1) % N] >>>= s;
            break;
        case 18:
            i5 -= (int)f1;
            break;
        case 19:
            Test.iArrFld[(i5 >>> 1) % N] -= (int)d1;
            break;
        case 20:
            i5 = (int)Test.instanceCount;
        default:
            l3 -= i;
        }
        vMeth1_check_sum += l + i + i1 + i5 + s + l3 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        byte by=116;
        int i7=6543, i8=-207, i9=9, i10=170, i11=147, i12=-111, i13=8057, i14=4967;
        long l4=248L;

        vMeth1(Test.instanceCount);
        by -= (byte)Test.iFld;
        for (i7 = 24; i7 < 387; ++i7) {
            Test.iFld &= i9;
            i10 = i8;
            Test.instanceCount = 6;
            i10 += (i7 * i7);
            Test.iArrFld[i7 + 1] -= i10;
            for (l4 = 1; l4 < 5; l4++) {
                for (i12 = 1; i12 < 2; ++i12) {
                    i14 += (i12 - i7);
                    Test.instanceCount <<= i12;
                    i14 += i8;
                    Test.bFld = Test.bFld;
                    Test.iArrFld[(int)(l4 - 1)] += (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += by + i7 + i8 + i9 + i10 + l4 + i11 + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=-191, i16=4, i17=-52, i18=-6, i19=-21897, i20=11, i21=79, i22=-11, i23=10, i24=4;
        double d2=-58.35019;
        byte by1=106;

        vMeth();
        for (i15 = 19; i15 < 368; i15++) {
            float f2=-23.444F;
            i16 *= (int)f2;
            i17 *= Test.iFld;
            i16 = i16;
            i17 = i15;
            for (i18 = 3; i18 < 72; i18++) {
                for (i20 = 2; i20 > 1; i20--) {
                    i17 = (int)Test.instanceCount;
                    i17 += (i20 | i20);
                    i19 = (int)f2;
                    i19 *= i15;
                    Test.instanceCount *= 233;
                    if (Test.bFld) {
                        Test.iFld += (i20 * i20);
                        i17 = (int)Test.instanceCount;
                    }
                    if (Test.bFld) continue;
                }
                for (i22 = 1; i22 < 2; i22 += 2) {
                    Test.instanceCount = 620302341L;
                    f2 *= Test.instanceCount;
                    Test.iFld += i22;
                    d2 = f2;
                    i16 >>>= i20;
                    by1 = (byte)d2;
                    i19 += (i22 - Test.instanceCount);
                    try {
                        i23 = (193 / i20);
                        i19 = (i18 % i18);
                        i16 = (-45734 / i19);
                    } catch (ArithmeticException a_e) {}
                }
                Test.iArrFld[i15] -= i22;
                i19 += i18;
            }
            i17 -= 13;
            Test.instanceCount %= (i24 | 1);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
