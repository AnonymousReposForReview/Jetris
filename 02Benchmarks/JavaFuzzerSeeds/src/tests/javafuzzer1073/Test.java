package tests.javafuzzer1073;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:04:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-48148L;
    public static float fFld=2.1021F;
    public static int iFld=4;
    public double dFld=-34.99887;
    public static boolean bFld=true;
    public static byte byFld=48;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, float f2, int i6) {

        int i7=38470, i8=-51610, i9=-52554, i10=-45173, i11=239, i12=4002;
        double d=-2.4953;
        boolean b=true;

        for (i7 = 386; i7 > 6; i7--) {
            for (i9 = 1; i9 < 4; i9++) {
                i10 >>= i10;
                if (i7 != 0) {
                    vMeth2_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 +
                        Double.doubleToLongBits(d) + i11 + i12 + (b ? 1 : 0);
                    return;
                }
                d = f1;
                for (i11 = 1; i11 < 2; ++i11) {
                    f2 = i10;
                    f2 -= i7;
                    i6 *= i8;
                    Test.instanceCount += (long)f1;
                    if (b) continue;
                    i10 = i7;
                    if (i11 != 0) {
                        vMeth2_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 +
                            i10 + Double.doubleToLongBits(d) + i11 + i12 + (b ? 1 : 0);
                        return;
                    }
                }
                Test.instanceCount = i12;
                b = b;
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d) + i11 + i12 + (b ? 1 : 0);
    }

    public static void vMeth1(float f, int i3, long l) {

        int i4=-51, i5=1501;
        byte by=124;
        boolean b1=false;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -2.587F);
        FuzzerUtils.init(lArr1, 25482L);
        FuzzerUtils.init(dArr, 0.10589);

        i3 = i3;
        for (i4 = 8; i4 < 284; i4++) {
            if (false) {
                vMeth2(f, -53.685F, i3);
            } else if (b1) {
                fArr[i4] -= i3;
                lArr1 = lArr1;
                fArr = fArr;
                i5 += (((i4 * Test.instanceCount) + i5) - by);
            } else if (b1) {
                i5 = (int)f;
                f += i5;
                i5 = (int)l;
                i5 += (((i4 * l) + i3) - i4);
            }
            dArr[i4] -= l;
            b1 = b1;
            i5 /= (int)(i3 | 1);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + l + i4 + i5 + by + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, int i1) {

        int i2=22380, i13=-55058, i14=65493, i15=1, i16=-62271, i17=-157, iArr[]=new int[N];
        float f3=0.499F;
        double d1=1.53110;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)27576);
        FuzzerUtils.init(lArr, -61051L);
        FuzzerUtils.init(iArr, -14);

        sArr[(i >>> 1) % N] >>= (short)i1;
        i1 -= Math.min((int)((i1 - Test.instanceCount) + (i1 - i)), ++i);
        lArr[(i >>> 1) % N] >>>= Test.instanceCount;
        iArr[(i >>> 1) % N] = (((i1 + i1) + (i1 - i)) - (i++));
        i += (++i1);
        i2 = 1;
        do {
            vMeth1(Test.fFld, -6, Test.instanceCount);
            Test.instanceCount -= i;
        } while (++i2 < 253);
        for (i13 = 5; i13 < 276; ++i13) {
            for (f3 = 1; f3 < 6; ++f3) {
                i1 = i;
                for (i16 = 1; 2 > i16; ++i16) {
                    d1 += -4;
                    if (i15 != 0) {
                        vMeth_check_sum += i + i1 + i2 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 +
                            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount = 34;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-5524, i19=-34391, i20=52076, i21=-92, i22=5, i23=-110, i24=-28392, i25=-27461, i26=-59515, i27=29301,
            iArr1[]=new int[N];
        short s1=30287;
        float fArr1[][]=new float[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(fArr1, -108.795F);
        FuzzerUtils.init(lArr2, -6841043720181265549L);

        vMeth(Test.iFld, Test.iFld);
        Test.fFld = Test.instanceCount;
        for (i18 = 14; i18 < 224; ++i18) {
            i19 >>= -9;
            iArr1[i18 + 1] += (int)Test.instanceCount;
            iArr1[i18 + 1] += (int)Test.instanceCount;
        }
        for (i20 = 1; i20 < 136; i20++) {
            iArr1[i20 - 1] = i20;
            iArr1[i20 - 1] = (int)Test.fFld;
            fArr1[i20][i20] *= i20;
            for (i22 = 186; i22 > 4; i22 -= 2) {
                Test.fFld = Test.instanceCount;
                iArr1[i20 - 1] += i23;
                i19 = i21;
                Test.fFld = (float)dFld;
                i23 = 63355;
                if (Test.bFld) continue;
            }
            lArr2[i20] = i21;
            for (i24 = 186; i24 > 11; i24--) {
                short s=9137;
                dFld *= Test.fFld;
                i21 += (i24 + Test.instanceCount);
                i25 += i18;
                Test.bFld = Test.bFld;
                i19 *= (int)dFld;
                i19 = (int)-8489L;
                s >>= (short)i21;
            }
            for (i26 = 4; 186 > i26; i26++) {
                Test.instanceCount += (((i26 * Test.byFld) + Test.instanceCount) - i27);
                i19 >>= s1;
                i19 = (int)Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
