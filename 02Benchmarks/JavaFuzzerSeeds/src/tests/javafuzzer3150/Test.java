package tests.javafuzzer3150;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:53:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=24848L;
    public static short sFld=-2357;
    public static float fFld=-28.953F;
    public volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, int i10, int i11) {

        long l=-549891401L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 65.24696);

        Test.sFld -= (short)-14;
        i11 *= (int)l;
        dArr[(61161 >>> 1) % N] = i10;
        vMeth_check_sum += i9 + i10 + i11 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i6) {

        int i7=157, i8=-166, i12=2, i13=-172;
        byte by=-40, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)59);

        for (i7 = 5; i7 < 143; ++i7) {
            boolean b=false;
            vMeth(i6, i8, i7);
            try {
                i6 = (i8 / 27889);
                Test.iArrFld[i7] = (808115107 / Test.iArrFld[i7]);
                i6 = (i6 / -9591);
            } catch (ArithmeticException a_e) {}
            byArr[i7 - 1] += (byte)i6;
            for (i12 = 1; i12 < 11; i12 += 2) {
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-2);
                Test.iArrFld[i12 + 1] = (int)Test.instanceCount;
                Test.instanceCount += (i12 | Test.instanceCount);
            }
            if (b) continue;
            Test.iArrFld[i7] = i6;
            i6 = i13;
            try {
                i8 = (i13 / 1262);
                Test.iArrFld[i7] = (i13 % 2113039846);
                i13 = (55520 / i13);
            } catch (ArithmeticException a_e) {}
        }
        by = (byte)-213;
        i6 -= i6;
        Test.iArrFld[(i13 >>> 1) % N] = by;
        long meth_res = i6 + i7 + i8 + i12 + i13 + by + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i1, int i2) {

        int i3=-152, i4=-24677, i5=-110, i14=-14;
        double d=-1.101098;
        float f=-35.238F, f1=-2.847F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -167L);

        for (i3 = 12; i3 < 352; i3 += 3) {
            d += ((d++) + (i2++));
            i5 = 1;
            while (++i5 < 14) {
                f += Math.max((int)((++f) - (i4 + 61392)), (int)((f + i3) * iMeth(i3)));
                i4 -= (int)Test.instanceCount;
                Test.instanceCount = (long)f;
                i2 = i2;
                for (f1 = i3; f1 < 1; f1++) {
                    boolean b1=false;
                    lArr[i5] *= Test.instanceCount;
                    i2 = i4;
                    i4 -= Test.sFld;
                    switch (((i1 >>> 1) % 6) + 77) {
                    case 77:
                        i1 <<= (int)Test.instanceCount;
                        Test.fFld = 1.233F;
                        i14 *= (int)-3678834753281549103L;
                    case 78:
                        Test.iArrFld[(int)(f1 - 1)] -= i4;
                        break;
                    case 79:
                        Test.instanceCount = i5;
                        break;
                    case 80:
                        try {
                            i4 = (i5 / -25884);
                            i4 = (Test.iArrFld[(i14 >>> 1) % N] % i2);
                            i14 = (-245 / i3);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 81:
                        if (b1) break;
                        break;
                    case 82:
                        i4 += (int)(f1 - Test.instanceCount);
                        break;
                    default:
                        i4 = -13708;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f) +
            Float.floatToIntBits(f1) + i14 + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-159;

        dArrFld[(i >>> 1) % N] -= dMeth(i, i);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
