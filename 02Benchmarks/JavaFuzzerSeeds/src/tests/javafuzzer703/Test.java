package tests.javafuzzer703;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:13:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=165L;
    public static byte byFld=95;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 120.33461);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i9, int i10, long l1) {

        int i11=158, i12=-8, i13=246, i14=48572, iArr1[]=new int[N];
        float f2=-35.604F;
        boolean b=false;

        FuzzerUtils.init(iArr1, -41550);

        for (i11 = 2; i11 < 167; ++i11) {
            Test.dArrFld = Test.dArrFld;
            if (b) {
                switch ((i11 % 2) + 85) {
                case 85:
                    i12 += i11;
                    i12 = (int)l1;
                    for (i13 = 10; i11 < i13; --i13) {
                        iArr1[(195 >>> 1) % N] = -5704;
                        i9 += i13;
                        iArr1[i13 - 1] -= i11;
                        iArr1[i11] /= (int)((long)(f2) | 1);
                        l1 += i14;
                        i14 -= (int)Test.instanceCount;
                        Test.instanceCount -= i11;
                    }
                    i9 -= i10;
                    break;
                case 86:
                    iArr1[i11] -= (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i9 + i10 + l1 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i8=-5, i15=6, i16=8768, i17=188, i18=-194, iArr2[]=new int[N];
        float f1=94.606F;
        double d1=-79.128209;

        FuzzerUtils.init(iArr2, 19749);

        i8 = (int)((Test.byFld - (Test.instanceCount + f1)) - Math.min((int)(-dMeth(i8, i8, -12L)), i8));
        for (i15 = 13; i15 < 337; ++i15) {
            for (i17 = i15; i17 < 5; i17++) {
                i8 *= i16;
                i8 += (int)d1;
                try {
                    i8 = (i16 / 465576333);
                    i8 = (i8 % i17);
                    iArr2[i17] = (-189 / i17);
                } catch (ArithmeticException a_e) {}
                i8 >>= i16;
            }
            switch ((((i18 >>> 1) % 1) * 5) + 35) {
            case 39:
            }
            i18 <<= i17;
            iArr2[i15 + 1] += (int)-21575L;
            i18 = i15;
        }
        switch (((i8 >>> 1) % 9) + 90) {
        case 90:
        case 91:
            iArr2[(-7757 >>> 1) % N] %= (int)(i15 | 1);
            break;
        case 92:
            d1 -= i17;
            f1 += Test.byFld;
            break;
        case 93:
            i18 = (int)Test.instanceCount;
            break;
        case 94:
            i16 *= i8;
        case 95:
        case 96:
            d1 -= d1;
        case 97:
            i16 = i15;
        case 98:
            i16 = 20455;
            break;
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(int i, long l, float f) {

        int i1=118, i2=-36728, i3=-9, i4=-6, i5=61, i6=-108, i7=8329, iArr[]=new int[N];
        double d=-28.60577;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 105);
        FuzzerUtils.init(lArr, -3771L);

        for (i1 = 1; i1 < 173; i1++) {
            i3 = 1;
            do {
                l += (i3 ^ i);
                iArr[i3 - 1] += (i2--);
            } while (++i3 < 9);
            i += i1;
            f = lArr[i1];
            d += (++i2);
            for (i4 = 1; 9 > i4; ++i4) {
                for (i6 = 1; i6 < 2; ++i6) {
                    l += (i6 * i6);
                    d -= iArr[i6 + 1];
                }
                if (i5 != 0) {
                    vMeth_check_sum += i + l + Float.floatToIntBits(f) + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4
                        + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i2 = (int)((f - (i1 + i)) * (++Test.byFld));
                d -= Test.byFld;
            }
            vMeth1();
        }
        vMeth_check_sum += i + l + Float.floatToIntBits(f) + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 +
            i7 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=99;
        float f3=-1.375F;

        vMeth(i19, Test.instanceCount, f3);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
