package tests.javafuzzer1513;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:56:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=87L;
    public static byte byFld=87;
    public int iFld=6;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7) {

        int i8=-88, i9=230, i10=4, i11=-186, i12=149, i13=-64100, i14=169, i15=-8, i16=-184, iArr1[][]=new int[N][N];
        double d2=-67.61099;
        long l=-5735488257753062994L;
        short s=27876;
        float f1=-80.527F;

        FuzzerUtils.init(iArr1, -29966);

        for (i8 = 1; 296 > i8; i8 += 3) {
            for (d2 = 1; d2 < 16; d2++) {
                i10 <<= i8;
            }
            iArr1 = iArr1;
        }
        for (l = 2; l < 147; ++l) {
            s |= (short)i11;
        }
        i12 = 1;
        while (++i12 < 184) {
            f1 += (((i12 * l) + l) - i10);
            try {
                i11 = (i11 / 394906199);
                i11 = (i12 / i8);
                i9 = (-23339 / i7);
            } catch (ArithmeticException a_e) {}
            for (i13 = 1; 9 > i13; ++i13) {
                for (i15 = 1; 2 > i15; i15++) {
                    f1 = f1;
                    f1 *= Test.instanceCount;
                    Test.instanceCount -= i11;
                }
                Test.byFld += (byte)(((i13 * i13) + i12) - s);
            }
        }
        long meth_res = i7 + i8 + i9 + Double.doubleToLongBits(d2) + i10 + l + i11 + s + i12 + Float.floatToIntBits(f1)
            + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(boolean b, double d1, float f) {

        int i6=14;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 243L);

        i6 *= (int)lArr1[(i6 >>> 1) % N];
        i6 -= (int)((iMeth(i6) + d1) - i6);
        i6 = i6;
        f = -2965527863L;
        vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i6 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth() {

        int i1=12, i2=1, i3=-7, i4=-21076, i5=-5;
        boolean b1=false;
        float f2=5.641F;
        double d3=0.117509;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3291L);

        lArr[(iFld >>> 1) % N] = lArr[(iFld >>> 1) % N];
        i1 = 192;
        do {
            for (i2 = i1; 16 > i2; ++i2) {
                for (i4 = 1; i4 < 1; i4++) {
                    vMeth1(b1, 81.89197, f2);
                    switch ((i4 % 2) + 65) {
                    case 65:
                        switch ((i4 % 1) + 121) {
                        case 121:
                            iArrFld[(i4 >>> 1) % N] >>>= i3;
                            i3 = i1;
                            if (i1 != 0) {
                                vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
                                    Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr);
                                return;
                            }
                            break;
                        default:
                            iFld += (((i4 * i2) + f2) - i2);
                            switch (((i1 % 2) * 5) + 97) {
                            case 105:
                                Test.instanceCount += i4;
                            case 104:
                                if (false) continue;
                                try {
                                    iArrFld[i1 - 1] = (1254380302 / i5);
                                    iArrFld[i2] = (i1 % i4);
                                    i5 = (i1 / -17861);
                                } catch (ArithmeticException a_e) {}
                                break;
                            }
                        }
                    case 66:
                        iFld <<= i2;
                    default:
                        d3 *= iFld;
                    }
                }
            }
        } while ((i1 -= 2) > 0);
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-161, i17=-5, i18=-21868, i19=-25210, i20=12, i21=-21597, i22=12239, iArr[][]=new int[N][N];
        double d=-1.107141;
        long l2=-376498800L, lArr2[]=new long[N];
        boolean b2=true;
        short s1=15694;
        float f3=107.26F, f4=-15.306F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -27874);
        FuzzerUtils.init(lArr2, 4015162542023902042L);
        FuzzerUtils.init(fArr, 0.110F);

        i += (int)(Test.instanceCount++);
        i -= (int)(((Test.byFld - d) * (Test.instanceCount--)) * d);
        Test.instanceCount <<= (((i -= i) + iArr[(i >>> 1) % N][(i >>> 1) % N]) + Test.byFld);
        d *= i;
        vMeth();
        iArrFld[(97 >>> 1) % N] *= iFld;
        for (long l1 : lArr2) {
            for (l2 = 1; l2 < 63; ++l2) {
                b2 = b2;
                iArr[(int)(l2)][(int)(l2 - 1)] = iFld;
                for (i18 = 1; i18 < 2; i18++) {
                    s1 += (short)(i18 | i19);
                    fArr[i18] *= -220L;
                }
                i17 += (int)(l2 - i17);
                iFld += (int)(l2 ^ i17);
            }
            l1 = i18;
            i17 >>= i19;
        }
        i20 = 1;
        do {
            i21 = 1;
            while (++i21 < 123) {
                Test.instanceCount -= s1;
                i17 += i20;
                if (b2) continue;
                for (f3 = 1; 1 < f3; --f3) {
                    s1 += (short)i;
                    s1 = (short)Test.instanceCount;
                    f4 = l2;
                    i17 -= i22;
                    i17 += (int)d;
                    i19 = i17;
                    Test.byFld /= (byte)40.774F;
                }
            }
        } while (++i20 < 204);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
