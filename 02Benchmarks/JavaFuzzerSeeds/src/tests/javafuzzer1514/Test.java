package tests.javafuzzer1514;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:56:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public boolean bFld=true;
    public byte byFld=-37;
    public boolean bArrFld[]=new boolean[N];
    public volatile long lArrFld[]=new long[N];
    public long lArrFld1[][]=new long[N][N];
    public static long lArrFld2[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld2, 11L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=-231, i7=-22596, i8=38829, i9=-131, i10=-122, iArr[]=new int[N];
        short s=32592;
        long l1=-1302226436498652937L, lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, 9L);
        FuzzerUtils.init(iArr, 65272);
        FuzzerUtils.init(fArr, 104.951F);

        for (i6 = 11; i6 < 308; ++i6) {
            lArr[i6] >>= i7;
            s <<= (short)i6;
            i7 += i6;
            i7 *= s;
            i7 = 43;
            iArr[i6 - 1] -= i6;
            lArr[i6] = i6;
        }
        lArr[(i6 >>> 1) % N] ^= i6;
        for (long l : lArr) {
            for (l1 = 1; l1 < 4; l1++) {
                for (i9 = 1; i9 < 2; i9++) {
                    iArr[(int)(l1 + 1)] += i9;
                    fArr = fArr;
                    s *= (short)1.67419;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + s + l1 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i11=-9, i12=241, iArr1[]=new int[N];
        float f=1.605F;
        double d1=0.104047;
        long l2=8L;

        FuzzerUtils.init(iArr1, -245);

        vMeth1();
        iArr1 = iArr1;
        i11 -= -9;
        f -= i11;
        i11 ^= -101;
        d1 = 261;
        do {
            i11 += (int)-67.39434;
            Test.instanceCount += (long)(d1 - f);
            iArr1 = iArr1;
            Test.lArrFld2 = Test.lArrFld2;
            iArr1[(int)(d1)] = i11;
            i11 += (int)(d1 * l2);
            i12 = 1;
            do {
                i11 = 162;
                iArr1[i12 + 1] -= i12;
            } while (++i12 < 6);
        } while (--d1 > 0);
        long meth_res = i11 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + l2 + i12 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b) {

        boolean b1=false;
        byte by=31;
        int i13=22, i14=1, i15=90, i16=-12, i17=-11, i18=-21336;
        double d2=1.83450;

        b1 = (!(iMeth() != -78.117366));
        by = (byte)i13;
        for (i14 = 302; i14 > 6; --i14) {
            by += (byte)i13;
            Test.instanceCount ^= i15;
            Test.instanceCount >>= by;
            for (d2 = 1; d2 < 6; ++d2) {
                Test.instanceCount <<= Test.instanceCount;
                for (i17 = 1; 2 > i17; i17++) {
                    short s1=3542;
                    if (false) continue;
                    i16 = i18;
                    i18 += (i17 + Test.instanceCount);
                    s1 = (short)i16;
                    i15 += by;
                    Test.instanceCount = 107L;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + (b1 ? 1 : 0) + by + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17
            + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=26357, i1=33239, i2=5, i3=-4, i4=-53200, i5=-34789, i20=-192, i21=-13, iArr2[]=new int[N];
        double d=0.80531;
        short s2=5678;
        float f1=2.342F;

        FuzzerUtils.init(iArr2, 12);

        for (i = 4; i < 161; i++) {
            if (bFld) {
                for (i2 = 4; i2 < 160; i2++) {
                    if ((bArrFld[i + 1] && ((i2 - i3) != (Test.instanceCount++))) | (Test.instanceCount > d)) continue;
                    lArrFld = (lArrFld = (lArrFld = (lArrFld = lArrFld1[i2 + 1])));
                    for (i4 = 2; i4 > 1; --i4) {
                        int i19=-212;
                        vMeth(bFld);
                        if (true) {
                            i1 = i4;
                            i1 = 7;
                        }
                        d -= -2.956F;
                        i5 = s2;
                        i3 += (int)Test.instanceCount;
                        i1 += (((i4 * Test.instanceCount) + f1) - Test.instanceCount);
                        i1 = i3;
                        i19 += (int)f1;
                        Test.instanceCount += (((i4 * byFld) + i5) - Test.instanceCount);
                    }
                    iArr2[i + 1] += (int)f1;
                    i1 += (((i2 * i1) + Test.instanceCount) - byFld);
                    for (i20 = 1; i20 < 2; ++i20) {
                        d += -64089;
                        Test.instanceCount = i4;
                        i5 <<= i21;
                        s2 += (short)i20;
                    }
                    i5 &= i5;
                    iArr2[i2] |= i4;
                    i3 /= (int)(s2 | 1);
                    i3 += (((i2 * i) + i20) - f1);
                }
            } else {
                i1 = -27645;
                i21 = i21;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
