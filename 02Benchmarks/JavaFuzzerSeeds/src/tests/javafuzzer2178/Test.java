package tests.javafuzzer2178;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:46:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5811040768448103960L;
    public static int iFld=29253;
    public static short sFld=14534;
    public static byte byFld=-87;
    public static short sFld1=-14801;
    public static boolean bFld=true;
    public float fFld=0.871F;
    public volatile int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i) {

        int i1=0, i2=-63081, i3=60, i4=-195, i5=34, i6=0, i7=-5;
        long l=9L;
        boolean b=true;

        i += i;
        for (i1 = 14; 349 > i1; i1++) {
            for (i3 = 5; i3 > 1; i3 -= 3) {
                Test.instanceCount += i3;
                for (i5 = 1; 5 > i5; i5 += 3) {
                    l = i6;
                    i2 -= i1;
                    i4 >>= -204;
                    Test.instanceCount += 15168;
                    switch ((i3 % 1) + 41) {
                    case 41:
                        Test.instanceCount = 17045;
                        i -= (int)Test.instanceCount;
                        break;
                    }
                }
                if (b) {
                    i2 = i3;
                    Test.iFld += (i3 * i3);
                } else if (b) {
                    i6 += i3;
                } else {
                    i7 &= i6;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + i6 + l + (b ? 1 : 0) + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by) {

        float f=-2.873F;
        double d=-1.86330;
        int i8=151, i9=48594, i10=-233;
        boolean b1=false;

        Test.iFld = (by++);
        Test.instanceCount /= ((long)(Math.abs(f)) | 1);
        Test.iFld = (iMeth(Test.iFld) - Test.iFld);
        f += Test.instanceCount;
        Test.iFld >>>= Test.iFld;
        if (b1) {
            Test.iFld >>= Test.sFld;
            Test.iFld = (int)Test.instanceCount;
            for (d = 2; d < 236; ++d) {
                by += (byte)Test.instanceCount;
                Test.iFld = (int)Test.instanceCount;
            }
        } else {
            Test.iFld = (int)8109L;
            vMeth_check_sum += by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i8 + (b1 ? 1 : 0) + i9 + i10;
            return;
        }
        for (i9 = 368; i9 > 16; i9 -= 2) {
            Test.iFld += (int)-5874233361579416311L;
            i8 *= (int)90.5507;
        }
        vMeth_check_sum += by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i8 + (b1 ? 1 : 0) + i9 + i10;
    }

    public static void vSmallMeth() {


        vMeth(Test.byFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        long l1=-60731L, lArr[]=new long[N], lArr1[]=new long[N];
        int i12=9, i13=153, i14=-9, i15=-33154, i16=25688, i17=10;

        FuzzerUtils.init(lArr, 113L);
        FuzzerUtils.init(lArr1, -4L);

        for (int smallinvoc=0; smallinvoc<640; smallinvoc++) vSmallMeth();
        switch ((((Test.iFld >>> 1) % 7) * 5) + 14) {
        case 29:
            Test.iFld -= Test.iFld;
            lArr[(Test.iFld >>> 1) % N] = Test.iFld;
            break;
        case 30:
            for (int i11 : iArrFld) {
                Test.iFld >>= Test.sFld1;
                if (Test.bFld) {
                    l1 = 1;
                    while (++l1 < 63) {
                        Test.iFld -= Test.iFld;
                        i12 = 1;
                        do {
                            Test.iFld = i11;
                        } while (++i12 < 1);
                        if (Test.bFld) break;
                        iArrFld[(i12 >>> 1) % N] = -4;
                        Test.instanceCount += (-18 + (l1 * l1));
                    }
                    for (i13 = 3; i13 < 63; i13++) {
                        fFld = Test.iFld;
                        Test.iFld += (((i13 * i12) + Test.instanceCount) - i15);
                        fFld += i13;
                        fFld += i13;
                        i15 *= i13;
                        i15 %= -3;
                        switch ((i13 % 5) + 23) {
                        case 23:
                            lArr[i13 + 1] *= 50645L;
                            break;
                        case 24:
                            fFld += (((i13 * l1) + l1) - Test.instanceCount);
                            for (i16 = 1; i16 < 2; ++i16) {
                                Test.iFld += i13;
                                i14 *= (int)-3L;
                                fFld += (((i16 * i16) + i11) - l1);
                                Test.bFld = Test.bFld;
                                fFld -= i13;
                            }
                            break;
                        case 25:
                            i11 += i14;
                        case 26:
                            i15 = i12;
                            break;
                        case 27:
                            try {
                                iArrFld[i13 + 1] = (65473 / i14);
                                i11 = (i14 % 460132486);
                                Test.iFld = (i16 / 8657);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            Test.iFld = (int)l1;
                        }
                    }
                } else if (Test.bFld) {
                    i14 = i14;
                }
            }
            break;
        case 49:
            lArr1[(-16037 >>> 1) % N] -= (long)fFld;
            break;
        case 15:
            i17 += (int)Test.instanceCount;
        case 44:
        case 23:
            Test.instanceCount = -194;
            break;
        case 47:
            i17 = (int)Test.instanceCount;
            break;
        default:
            i15 *= (int)l1;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
