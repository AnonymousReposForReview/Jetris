package tests.javafuzzer1378;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:09:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-237L;
    public int iFld=-3;
    public static boolean bFld=false;
    public short sFld=24058;
    public int iFld1=3;
    public volatile int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i4, float f2) {

        double d=-1.75243;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 41990);

        Test.instanceCount *= i4;
        i4 >>= 62403;
        d *= i4;
        i4 = -39367;
        iArr[(-28805 >>> 1) % N] += i4;
        long meth_res = Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, int i3) {

        float f3=-1.224F, f4=-1.792F, fArr[]=new float[N];
        int i5=11, i6=201, i7=-38057, i8=-2;
        byte by1=-1;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 1.748F);
        FuzzerUtils.init(dArr, 0.27477);

        if (Test.bFld) {
        } else if (Test.bFld) {
            iMeth(f3, i3, f3);
            i2 = -10;
            for (i5 = 1; i5 < 126; i5++) {
                Test.instanceCount = i3;
                i2 += (((i5 * f3) + by1) - i6);
                for (i7 = i5; i7 < 13; i7++) {
                    i2 += 1;
                }
                i2 += (((i5 * i5) + Test.instanceCount) - by1);
                f3 += f4;
                i8 += i5;
                Test.bFld = Test.bFld;
                dArr[i5] = 0;
                Test.instanceCount -= i2;
            }
            i3 = i8;
        } else {
            i6 = (int)-230L;
        }
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f3) + i5 + i6 + by1 + i7 + i8 + Float.floatToIntBits(f4) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(long l, int i1, long l1) {

        boolean b=false;
        byte by=-30;
        short s=1963;
        float f6=1.268F;
        int i9=14, i10=10, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -25702);
        FuzzerUtils.init(lArr1, -62413L);

        b = (Math.abs(l) > by);
        vMeth1(i1, i1);
        s -= (short)i1;
        iArr1[(i1 >>> 1) % N] -= (int)f6;
        for (i9 = 21; i9 < 342; i9++) {
            b = b;
            i10 >>= i1;
            switch (((i10 >>> 1) % 1) + 5) {
            case 5:
                l -= 2504883759L;
                i10 *= i9;
            }
            lArr1[i9] = s;
            i10 ^= i9;
            lArr1[i9 - 1] = i9;
            l1 = s;
            try {
                iArr1[i9 - 1] = (i10 % -121);
                i10 = (i9 / i10);
                i1 = (i1 / i10);
            } catch (ArithmeticException a_e) {}
        }
        vMeth_check_sum += l + i1 + l1 + (b ? 1 : 0) + by + s + Float.floatToIntBits(f6) + i9 + i10 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=107.450F, f7=0.564F;
        int i=-13, i11=205, i12=7, i13=59, i14=43368;
        double d1=0.14619;
        byte by2=13;
        long l2=8504884753949442881L, lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -6L);
        FuzzerUtils.init(bArr, true);

        lArr[(iFld >>> 1) % N] <<= Test.instanceCount;
        for (f = 11; f < 323; ++f) {
            vMeth(Test.instanceCount, iFld, -55235L);
            switch ((((i >>> 1) % 9) * 5) + 10) {
            case 49:
                d1 += i;
                by2 = (byte)Test.instanceCount;
            case 17:
                for (i11 = 5; i11 < 81; ++i11) {
                    for (i13 = 1; i13 < 2; i13++) {
                        i12 *= 54173;
                        iArrFld[i11] = i14;
                        iArrFld[(int)(f - 1)] -= i;
                        switch (((i11 % 3) * 5) + 112) {
                        case 117:
                            sFld = (short)Test.instanceCount;
                        case 115:
                            Test.instanceCount = i11;
                            i12 -= iFld;
                            iFld = (int)21.98325;
                            Test.instanceCount = 31;
                        case 123:
                            iFld = -5;
                            break;
                        }
                        if (Test.bFld) break;
                        i14 = 102;
                        Test.instanceCount >>= Test.instanceCount;
                    }
                    iFld *= i12;
                    l2 = 1;
                    while (++l2 < 2) {
                        f7 %= (i | 1);
                        i14 |= iFld;
                        d1 *= i11;
                        i -= i13;
                        i12 <<= i;
                        bArr[i11 - 1] = Test.bFld;
                    }
                    iFld = (int)f;
                }
            case 40:
                f7 -= Test.instanceCount;
                break;
            case 46:
                iFld += (int)d1;
            case 32:
                i *= (int)3.713F;
                break;
            case 51:
                i14 += (int)(((f * i13) + i) - i14);
            case 50:
                iFld1 += (int)(0.361F + (f * f));
                break;
            case 23:
                iFld1 += -2;
                break;
            case 13:
                iFld -= i12;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
