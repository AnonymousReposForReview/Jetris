package tests.javafuzzer1644;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9948L;
    public static volatile int iFld=-10;
    public double dFld=-2.107114;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.dArrFld, 1.49119);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, int i4, int i5) {

        int i6=141, i7=216, i8=-4, i9=-2, i10=60, i11=164, i12=-43991, iArr1[]=new int[N];
        boolean b=true;
        float f1=-115.80F;
        short s=-17969;
        double d=35.82595;

        FuzzerUtils.init(iArr1, 147);

        for (i6 = 12; i6 < 241; i6++) {
            i5 = i3;
            switch ((i6 % 8) + 105) {
            case 105:
                for (i8 = i6; i8 < 7; i8++) {
                    i9 = i6;
                    i7 += (((i8 * i9) + i8) - i8);
                    i5 += i8;
                    Test.instanceCount = -54;
                    for (i10 = 1; i10 < 1; ++i10) {
                        if (b) continue;
                        f1 = 4;
                        i12 -= -240;
                        i4 = (int)f1;
                        i5 &= (int)Test.instanceCount;
                        Test.instanceCount += Test.iFld;
                    }
                }
                break;
            case 106:
                iArr1[i6 + 1] -= s;
            case 107:
                Test.instanceCount >>= i4;
                break;
            case 108:
                i9 -= i7;
                break;
            case 109:
                d = -2.653F;
            case 110:
                b = b;
            case 111:
            case 112:
                i3 = (int)Test.instanceCount;
                break;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i12 + s
            + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i13=55092, i14=50819, iArr[]=new int[N];
        boolean b1=true;
        short s1=-2945;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 52454);
        FuzzerUtils.init(lArr, 1697714975L);

        iArr[(Test.iFld >>> 1) % N] >>= iMeth1(i2, 65431, Test.iFld);
        for (i13 = 295; i13 > 4; i13 -= 3) {
            Test.iFld = i14;
            i14 = (int)8700949498328771773L;
            lArr[i13] += i14;
            if (b1) continue;
        }
        Test.iFld = i13;
        s1 = (short)-3;
        Test.iFld *= Test.iFld;
        vMeth_check_sum += i2 + i13 + i14 + (b1 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i, int i1, long l) {

        int i15=23470, i16=-20, i17=-105, i18=-121;
        double d1=18.6819;
        float f2=80.447F;

        vMeth(Test.iFld);
        l = Test.instanceCount;
        Test.iFld = i;
        for (i15 = 11; i15 < 223; ++i15) {
            i16 = -27377;
            i17 = 1;
            while (++i17 < 8) {
                i18 = 1;
                do {
                    Test.iFld = (int)d1;
                    l -= (long)f2;
                    i16 += Test.iFld;
                    i16 = (int)l;
                    i1 = 109;
                    f2 %= (Test.instanceCount | 1);
                } while (++i18 < 1);
                Test.iFld = i15;
                l += i16;
            }
        }
        long meth_res = i + i1 + l + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=1.231F;
        int i19=42, i20=-56520, i21=-186, i22=101, i23=-12, i24=3, i25=44, i26=3;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.iFld = Test.iFld;
        dFld = (Math.abs((int)(Test.iFld - f)) + Test.iFld);
        iMeth(-3, -51404, Test.instanceCount);
        for (i19 = 14; i19 < 313; i19++) {
            Test.instanceCount += (((i19 * i19) + i20) - Test.instanceCount);
            bArr[i19] = bFld;
            Test.iArrFld[i19 - 1] *= (int)Test.instanceCount;
            i20 = i19;
            Test.instanceCount = 19973;
            Test.instanceCount += i20;
        }
        for (i21 = 326; i21 > 13; i21--) {
            if (bFld) {
                Test.iFld -= (int)Test.instanceCount;
                if (bFld) break;
            } else {
                for (i23 = 2; i23 < 80; ++i23) {
                    i24 += (((i23 * i20) + Test.instanceCount) - Test.iFld);
                    Test.iFld = (int)8818914642826108782L;
                    Test.iArrFld[i21] <<= i19;
                    Test.instanceCount -= -16581;
                    Test.iFld = -6060;
                    i20 = (int)f;
                    for (i25 = 2; i25 > 1; i25--) {
                        Test.iArrFld[i25 + 1] += (int)1.547F;
                        try {
                            i22 = (Test.iFld % i20);
                            i22 = (i23 % 836833596);
                            i24 = (-651982122 / i19);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld = (int)f;
                        i24 = (int)26222L;
                        Test.dArrFld[i25 - 1] = i20;
                        Test.iArrFld[i21] += i20;
                        Test.instanceCount = -75;
                        i26 = i25;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
