package tests.javafuzzer831;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:32:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52498L;
    public static double dFld=44.6517;
    public int iFld=6;
    public float fFld=57.972F;
    public static byte byArrFld[]=new byte[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-8);
        FuzzerUtils.init(Test.fArrFld, 1.177F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, int i2) {

        int i3=168, i4=-26, i5=-10, i6=11, i7=137, i8=-55947, iArr[]=new int[N];
        short s1=8465;
        byte by=-88;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 254L);
        FuzzerUtils.init(iArr, -8);

        for (i3 = 2; 343 > i3; ++i3) {
            float f1=20.967F;
            s1 += (short)i3;
            i4 *= (int)f1;
            Test.instanceCount = i4;
            for (i5 = 1; i5 < 5; i5++) {
                d1 = i5;
                Test.instanceCount += (i5 * i5);
                for (i7 = 1; 2 > i7; ++i7) {
                    switch (((i7 % 9) * 5) + 42) {
                    case 79:
                        switch (((i3 % 1) * 5) + 82) {
                        case 85:
                            switch ((i3 % 3) + 56) {
                            case 56:
                                f1 = 21583L;
                                i4 &= i8;
                                i8 += i7;
                                Test.instanceCount += (i7 - i4);
                            case 57:
                                lArr[(i6 >>> 1) % N] = Test.instanceCount;
                                break;
                            case 58:
                                if (i3 != 0) {
                                    vMeth1_check_sum += Double.doubleToLongBits(d1) + i2 + i3 + i4 + s1 + i5 + i6 + i7
                                        + i8 + by + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                                    return;
                                }
                                break;
                            }
                            break;
                        }
                        break;
                    case 81:
                        f1 += -9361;
                        break;
                    case 60:
                        i6 *= (int)-2.47572;
                        break;
                    case 57:
                        f1 = i3;
                        break;
                    case 61:
                        f1 *= f1;
                    case 49:
                        i6 <<= i8;
                    case 51:
                        i6 = i8;
                        break;
                    case 76:
                        i8 -= by;
                        break;
                    case 80:
                        iArr[i3 - 1] ^= i4;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i2 + i3 + i4 + s1 + i5 + i6 + i7 + i8 + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(double d) {

        int i9=204;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.932F);

        vMeth1(d, i9);
        b = b;
        if (b) {
            fArr[(i9 >>> 1) % N] *= -1.407F;
        }
        long meth_res = Double.doubleToLongBits(d) + i9 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i=-34137, i1=-114, i10=160, i11=-96, iArr1[]=new int[N];
        short s=20971, s2=28584;
        byte by1=35;
        boolean b1=true;
        long lArr1[][]=new long[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, 211);
        FuzzerUtils.init(lArr1, -1L);
        FuzzerUtils.init(fArr1, -48.175F);

        for (i = 9; i < 202; ++i) {
            switch ((i % 9) + 78) {
            case 78:
                Test.instanceCount += (i ^ i);
                s = (short)iMeth(Test.dFld);
                i1 ^= by1;
                try {
                    i1 = (59111 % i1);
                    iArr1[i + 1] = (i1 / -1874584296);
                    i1 = (i / -266005444);
                } catch (ArithmeticException a_e) {}
                break;
            case 79:
                b1 = b1;
                lArr1[i - 1][i] ^= -13;
                fArr1[i - 1] = i;
                i1 = i;
            case 80:
                f += (i - i);
                for (i10 = 1; i10 < 8; i10++) {
                    i11 += (((i10 * i) + f) - s2);
                    i11 = -18;
                    i1 += s;
                }
                break;
            case 81:
                i11 >>= i1;
                break;
            case 82:
                l = i11;
            case 83:
            case 84:
                Test.dFld += l;
                break;
            case 85:
                Test.dFld = i11;
                break;
            case 86:
                Test.dFld *= i;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + i1 + s + by1 + (b1 ? 1 : 0) + i10 + i11 + s2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true, b3=true;
        int i12=-3, i13=-57, i14=-6, i15=55993, i16=-51907, iArr2[][]=new int[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, -1287);
        FuzzerUtils.init(lArr2, -2054343087L);

        vMeth(20.991F, Test.instanceCount);
        b2 = b2;
        iFld -= (int)Test.instanceCount;
        switch ((((iFld >>> 1) % 8) * 5) + 15) {
        case 20:
            Test.byArrFld[(-16492 >>> 1) % N] <<= (byte)iFld;
            iFld -= iFld;
            iArr2[(1 >>> 1) % N][(iFld >>> 1) % N] &= 28716;
        case 49:
        case 51:
            for (i12 = 123; i12 > 6; i12--) {
                Test.instanceCount += i12;
                iFld = (int)Test.instanceCount;
                Test.dFld = Test.instanceCount;
                for (i14 = i12; i14 < 214; i14++) {
                    i15 -= 6;
                    i16 = 1;
                    do {
                        i15 <<= (int)Test.instanceCount;
                        iArr2[i16 - 1] = FuzzerUtils.int1array(N, (int)0);
                        Test.dFld = iFld;
                        iFld <<= (int)Test.instanceCount;
                        i13 <<= i16;
                        lArr2[i12] = -167;
                        switch ((i16 % 3) + 101) {
                        case 101:
                            i13 = i12;
                            Test.instanceCount += (long)Test.dFld;
                            b3 = true;
                            i13 >>>= iFld;
                            break;
                        case 102:
                            iArr2[i16 + 1][i14 + 1] <<= i13;
                            Test.instanceCount = i14;
                            iFld += (int)Test.dFld;
                            break;
                        case 103:
                            iArr2[i12 + 1][i12 - 1] *= i15;
                            break;
                        default:
                            Test.fArrFld[i14] -= 45806;
                        }
                    } while (--i16 > 0);
                }
            }
            break;
        case 46:
            lArr2[(2 >>> 1) % N] += -64017L;
            break;
        case 47:
            iArr2[(i16 >>> 1) % N][(i16 >>> 1) % N] &= i15;
            break;
        case 35:
            fFld += i15;
            break;
        case 26:
        case 30:
            iFld = i12;
            break;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
