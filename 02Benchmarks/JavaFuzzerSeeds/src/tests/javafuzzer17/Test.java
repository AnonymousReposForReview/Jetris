package tests.javafuzzer17;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:00:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-44358L;
    public static double dFld=-59.8011;
    public static float fFld=1.484F;
    public int iFld=154;
    public long lFld=12L;
    public static byte byFld=-89;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-49583, i3=-3760, i4=-51235, i5=42506, i6=-61, i7=0, iArr[]=new int[N];
        byte by=-4;

        FuzzerUtils.init(iArr, -8);

        i2 = 1;
        while (++i2 < 395) {
            for (i3 = 1; i3 < 4; i3++) {
                for (i5 = 1; i5 < 2; ++i5) {
                    iArr[i3 - 1] = i4;
                    switch (((i6 >>> 1) % 6) + 2) {
                    case 2:
                        by += (byte)(i5 | i6);
                        i7 += i7;
                        i6 -= (int)Test.instanceCount;
                        break;
                    case 3:
                    case 4:
                    case 5:
                        switch (((60 >>> 1) % 2) + 45) {
                        case 45:
                        case 46:
                            iArr = iArr;
                            Test.instanceCount = 13;
                            Test.instanceCount += (i5 * i5);
                            i7 += (int)Test.instanceCount;
                            break;
                        default:
                            i6 = i6;
                        }
                        Test.instanceCount += i3;
                        break;
                    case 6:
                        Test.dFld = Test.instanceCount;
                        break;
                    case 7:
                        i7 -= (int)Test.fFld;
                        break;
                    default:
                        iArr[i3] = i3;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + by + i7 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(short s, int i1) {

        int i8=-2, i9=27512, i10=-130, i11=4, i12=-56411, iArr1[]=new int[N];
        double d=-45.13622;
        byte by1=-102;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 32463L);
        FuzzerUtils.init(iArr1, 12);

        lArr[(-7 >>> 1) % N][(i1 >>> 1) % N] = iMeth();
        lArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = (long)Test.dFld;
        for (i8 = 11; 184 > i8; i8++) {
            Test.instanceCount = i1;
            Test.fFld -= Test.fFld;
            for (i10 = i8; 9 > i10; ++i10) {
                i9 += (-11440 + (i10 * i10));
                iFld += -53945;
                iArr1[i8 - 1] = (int)-5878073197414016161L;
            }
            i9 += (i8 + i1);
            i1 &= -34936;
        }
        for (d = 3; d < 154; ++d) {
            Test.instanceCount += (-70 + (d * d));
            by1 = (byte)Test.instanceCount;
            iArr1[(int)(d)] = (int)Test.fFld;
        }
        long meth_res = s + i1 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + by1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i=-13, i13=-114, i14=-10, i15=-3, i16=249, i17=249, i18=45813, iArr2[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 234);

        i = (i++);
        i >>= (int)lMeth((short)(-4332), 157);
        Test.dFld += Test.instanceCount;
        for (i13 = 334; i13 > 18; i13 -= 2) {
            for (i15 = 1; i15 < 10; ++i15) {
                lFld = Test.instanceCount;
                bArr[i13] = b;
                for (i17 = 1; i17 < 2; i17++) {
                    i18 *= (int)Test.instanceCount;
                    i = (int)Test.instanceCount;
                    Test.instanceCount += (i17 * i17);
                    iFld += i17;
                    iArr2[i13 - 1] -= (int)Test.instanceCount;
                    if (i15 != 0) {
                        vMeth_check_sum += i + i13 + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 +
                            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    Test.instanceCount *= (long)Test.fFld;
                }
            }
        }
        vMeth_check_sum += i + i13 + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i19=-13035, i20=40776, i21=14, i22=4, i23=-4, i24=33088, i25=14, i26=-12, i27=-50, i28=102, i29=-1, i30=-7,
            i31=-130, i32=-57192;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 35166L);

        vMeth();
        for (i19 = 6; i19 < 130; i19++) {
            if (b1) {
                for (i21 = 11; i21 < 202; i21++) {
                    for (i23 = 1; 2 > i23; i23++) {
                        i20 = i22;
                        if (b1) break;
                    }
                    iArrFld[i21] = 49869;
                    Test.fFld *= lFld;
                    lArr1[i21 + 1] += i24;
                    for (i25 = i19; 2 > i25; i25++) {
                        i20 -= (int)lFld;
                        iFld = -9;
                    }
                    i26 += (((i21 * i19) + lFld) - i23);
                }
                i24 = -11;
            } else {
                i20 += (int)Test.dFld;
                lFld = i27;
            }
            iArrFld[i19 + 1] += iFld;
            for (i28 = 11; i28 < 202; ++i28) {
                i20 += i27;
                i30 = 1;
                while (++i30 < 2) {
                    iFld = -8196;
                    i27 = (int)lFld;
                }
                for (i31 = 1; i31 < 2; ++i31) {
                    Test.dFld = i27;
                    i26 += Test.byFld;
                    if (b1) {
                        lArr1[i28] ^= 58387;
                        i24 *= (int)-2.15673;
                        Test.instanceCount = (long)Test.dFld;
                    } else if (b1) {
                        lArr1[i19] += i22;
                    } else {
                        i24 = i30;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
