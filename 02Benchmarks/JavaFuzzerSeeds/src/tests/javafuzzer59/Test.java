package tests.javafuzzer59;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:38:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50798L;
    public static int iFld=-207;
    public static byte byFld=-56;
    public static short sFld=-11409;
    public static short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)15729);
        FuzzerUtils.init(Test.iArrFld, 142);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i14) {

        double d1=2.130524;
        int i15=6, i16=20587, i17=1, i18=53551;
        boolean b=false;
        float f1=-2.97F, f2=-1.912F;

        d1 = Test.instanceCount;
        for (i15 = 10; i15 < 202; i15++) {
            b = b;
            i14 >>>= i16;
            Test.iArrFld[i15 - 1] += 59352;
            f1 = 1;
            while (++f1 < 8) {
                f2 -= -62261;
                f2 += (f1 + f2);
                f2 -= i16;
                f2 += i14;
                try {
                    i17 = (-72 / Test.iArrFld[i15 - 1]);
                    i16 = (Test.iArrFld[i15 + 1] / i14);
                    Test.iArrFld[(int)(f1)] = (i16 / Test.iArrFld[(int)(f1)]);
                } catch (ArithmeticException a_e) {}
                d1 = Test.iFld;
                i18 = 1;
                while (++i18 < 1) {
                    i14 = (int)Test.instanceCount;
                    Test.instanceCount += (i18 * i18);
                }
            }
        }
        long meth_res = i14 + Double.doubleToLongBits(d1) + i15 + i16 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i7) {

        int i8=-184, i9=-8, i10=206, i11=219, i12=6218, i13=21, iArr[]=new int[N];
        short s=-7459;
        byte by1=38;
        float f3=2.533F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -136);
        FuzzerUtils.init(lArr, 31348L);

        for (i8 = 22; i8 < 372; ++i8) {
            for (i10 = i8; i10 < 5; i10++) {
                Test.instanceCount += i10;
                for (i12 = i8; i12 < 1; i12++) {
                    double d2=-31.113730;
                    Test.instanceCount = (-(Test.instanceCount * (i9 + Test.instanceCount)));
                    Test.instanceCount += i12;
                    s = (short)iArr[i8 + 1];
                    switch ((((i10 >>> 1) % 1) * 5) + 124) {
                    case 126:
                        Test.sArrFld = (Test.sArrFld = (Test.sArrFld = (Test.sArrFld = Test.sArrFld)));
                        Test.instanceCount *= 226L;
                        switch ((i12 % 9) + 103) {
                        case 103:
                        case 104:
                            Test.instanceCount = (++Test.iArrFld[i8]);
                            i11 *= (int)((++lArr[i12 + 1]) - (Integer.reverseBytes(Test.iFld) - i10));
                            i13 = (int)lMeth(-232);
                            break;
                        case 105:
                        case 106:
                            by1 -= (byte)i9;
                            break;
                        case 107:
                            i11 &= i11;
                            break;
                        case 108:
                            Test.instanceCount = 92;
                            break;
                        case 109:
                        case 110:
                            Test.instanceCount &= 26679;
                            break;
                        case 111:
                            i9 += (int)f3;
                        default:
                            d2 -= i8;
                        }
                        break;
                    default:
                        i13 -= i11;
                    }
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + s + by1 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, double d) {

        long l=178L;
        int i1=-66, i2=14304, i3=14, i4=-158, i5=13, i6=31204;
        float f=0.309F;
        short s1=-13329;

        l += Math.abs(++Test.iFld);
        switch (((((Test.iFld * 17291) >>> 1) % 2) * 5) + 9) {
        case 14:
            for (i1 = 4; 363 > i1; ++i1) {
                Test.iFld -= (int)f;
                for (i3 = 1; i3 < 5; i3++) {
                    for (i5 = 1; i5 < 2; i5 += 2) {
                        byte by=94;
                        if (i != 0) {
                            vMeth_check_sum += i + Double.doubleToLongBits(d) + l + i1 + i2 + Float.floatToIntBits(f) +
                                i3 + i4 + i5 + i6 + s1;
                            return;
                        }
                        Test.instanceCount = (++l);
                        f += (((i5 * i3) + l) - by);
                        i4 += i5;
                        if (true) {
                            Test.instanceCount >>>= (-iMeth(-13));
                            Test.iFld += (((i5 * s1) + l) - f);
                            f += f;
                            f += Test.iFld;
                        } else {
                            i2 -= i6;
                        }
                    }
                }
            }
            break;
        case 10:
            Test.iArrFld[(i >>> 1) % N] = Test.iFld;
            break;
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + l + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 +
            s1;
    }

    public void mainTest(String[] strArr1) {

        double d3=0.87861, dArr[]=new double[N];
        float f4=-107.892F;
        int i19=-137, i20=-14, i21=1, i22=243, i23=7646, i24=9, i25=218, i26=-29953, iArr1[][]=new int[N][N];
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -5452);
        FuzzerUtils.init(dArr, -2.40323);
        FuzzerUtils.init(lArr1, 220L);

        vMeth(165, d3);
        Test.instanceCount += Test.iFld;
        Test.iFld >>= (int)Test.instanceCount;
        f4 -= 63227;
        for (i19 = 2; i19 < 350; ++i19) {
            Test.iArrFld[i19] = i19;
        }
        Test.instanceCount *= Test.iFld;
        iArr1 = iArr1;
        Test.instanceCount <<= Test.instanceCount;
        fArrFld[(i20 >>> 1) % N] = FuzzerUtils.float1array(N, (float)2.116F);
        for (i21 = 6; i21 < 287; ++i21) {
            Test.iFld /= (int)(i21 | 1);
            for (i23 = 89; i23 > 1; i23--) {
                i20 -= i22;
                i20 = (int)Test.instanceCount;
                i20 = i21;
                for (i25 = 1; i25 < 2; i25++) {
                    dArr[i21] = 1.88838;
                    try {
                        i20 = (iArr1[i23][i23 - 1] / Test.iArrFld[i25 - 1]);
                        i26 = (i19 % 56262);
                        i26 = (i23 / 210);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = -190;
                    i22 >>= i21;
                }
                f4 = Test.instanceCount;
            }
            if (b1) {
                i24 *= -249;
            } else {
                i20 = (int)Test.instanceCount;
                Test.instanceCount ^= Test.instanceCount;
                lArr1[i21 - 1] -= i21;
                Test.iFld -= i22;
            }
        }
        Test.byFld *= (byte)i22;
        i22 = Test.sFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
