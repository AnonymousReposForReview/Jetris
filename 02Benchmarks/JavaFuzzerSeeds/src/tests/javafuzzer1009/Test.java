package tests.javafuzzer1009;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:49:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3834772884270647963L;
    public static int iFld=-155;
    public static double dFld=0.14627;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, long l, float f3) {

        int i7=5, i8=-32108, i9=33868, i10=64, i11=0, i12=25730, i13=42;
        byte by=57;
        short s=20450;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 0L);

        for (i7 = 204; i7 > 7; --i7) {
            l += Test.instanceCount;
        }
        Test.dFld = -32892;
        i9 = 186;
        do {
            Test.iFld >>= i6;
            Test.instanceCount += 110;
        } while (--i9 > 0);
        for (i10 = 1; i10 < 230; i10++) {
            by += (byte)(((i10 * f3) + f3) - Test.iFld);
            lArr1[i10] += l;
            s = (short)i9;
            f3 = l;
            for (i12 = 7; 1 < i12; i12--) {
                f3 += f3;
                by <<= (byte)-4299;
            }
        }
        i6 += i13;
        long meth_res = i6 + l + Float.floatToIntBits(f3) + i7 + i8 + i9 + i10 + i11 + by + s + i12 + i13 +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i4=-57452, i5=32210, i14=60, i15=12, iArr1[]=new int[N];
        boolean b=false;
        float f2=1.687F;
        byte by1=58;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr1, -977);
        FuzzerUtils.init(dArr, -2.118535);

        for (i4 = 8; i4 < 349; i4++) {
            i5 -= (iArr1[i4 - 1] + (i4 + i5));
            b = (Test.instanceCount != ((f2 - Test.dFld) - (-1.96133 + (i4 * i5))));
            if (b) {
                Test.iFld -= (int)((--Test.dFld) + ((~(Test.instanceCount * 7182)) - (i4 - i5)));
            } else if (b) {
                i5 <<= iMeth(i5, Test.instanceCount, f2);
                i5 += (i4 * i4);
                Test.dFld -= i5;
            } else {
                i5 <<= -62969;
                dArr[i4 + 1][i4 + 1] = Test.dFld;
            }
            for (i14 = 1; i14 < 5; i14++) {
                if (b) break;
                Test.byArrFld[(i14 >>> 1) % N] = (byte)i14;
                f2 = -1.471F;
                Test.iFld = by1;
            }
        }
        vMeth1_check_sum += i4 + i5 + (b ? 1 : 0) + Float.floatToIntBits(f2) + i14 + i15 + by1 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i2, float f1, int i3) {

        int i16=2574, i17=64960, i18=49;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9211168071469325385L);

        Test.instanceCount = (long)(lArr[(-10 >>> 1) % N] = (long)((Test.dFld = i3) + (-11 /
            (Short.reverseBytes((short)(8670)) | 1))));
        vMeth1();
        i16 -= i16;
        for (i17 = 180; i17 > 9; --i17) {
            f1 = i2;
        }
        Test.instanceCount *= i17;
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i3 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-11745, i1=135, i19=-7, i20=-126, i21=82, iArr[][]=new int[N][N];
        float f=-114.575F, fArr[]=new float[N];
        long l1=-927927535469575080L;
        boolean b1=true;

        FuzzerUtils.init(iArr, 140);
        FuzzerUtils.init(fArr, -54.271F);

        for (i = 8; i < 179; i++) {
            Test.iFld >>= (((Test.iFld + i1) + (iArr[i][i - 1]++)) << (Test.iFld--));
            f = (Test.iFld++);
            vMeth(i, 1.124F, i1);
            for (l1 = i; l1 < 147; l1++) {
                Test.instanceCount <<= -319L;
                Test.instanceCount *= Test.iFld;
                Test.iFld += (int)(l1 ^ i1);
                Test.iFld = i;
                Test.iFld *= Test.iFld;
            }
            for (i20 = 8; i20 < 147; ++i20) {
                i19 += (((i20 * i21) + i1) - Test.instanceCount);
                f = i1;
                switch ((i20 % 8) + 45) {
                case 45:
                    Test.instanceCount = (long)53.545F;
                    break;
                case 46:
                    if (b1) break;
                    i19 += (i20 | i21);
                    Test.dFld += i19;
                    break;
                case 47:
                    Test.instanceCount %= 63712;
                    i1 = (int)l1;
                    Test.iFld += (((i20 * f) + i) - i);
                    i1 += (int)f;
                    break;
                case 48:
                    fArr[i20 - 1] = i1;
                    Test.iFld = (int)l1;
                    break;
                case 49:
                    iArr[i20][i] = i1;
                    iArr[i20][i20] *= i19;
                    iArr[i][i20 - 1] = Test.iFld;
                    i21 += -42771;
                    break;
                case 50:
                    b1 = b1;
                    Test.instanceCount += 27;
                case 51:
                    Test.dFld -= Test.iFld;
                case 52:
                    f += (((i20 * f) + l1) - f);
                    break;
                default:
                    Test.instanceCount *= i1;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
