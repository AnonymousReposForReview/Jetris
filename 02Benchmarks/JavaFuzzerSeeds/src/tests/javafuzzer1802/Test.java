package tests.javafuzzer1802;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:26:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2670316874L;
    public static short sFld=2043;
    public static volatile int iFld=-34197;
    public static volatile boolean bFld=false;
    public float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public int iArrFld1[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)31657);
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1429093862L);

        Test.iFld >>= Test.iFld;
        lArr[(Test.iFld >>> 1) % N] = Test.instanceCount;
        vMeth1_check_sum += FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(double d) {

        int i3=11, i4=0, i5=-8, iArr[][]=new int[N][N];
        float f=0.779F;

        FuzzerUtils.init(iArr, -14);

        vMeth1();
        d -= Test.iFld;
        i3 = 1;
        while (++i3 < 387) {
            d += -6.686F;
            Test.iFld += (int)17341L;
            iArr[i3] = iArr[i3];
            for (i4 = 1; i4 < 4; ++i4) {
                Test.iFld += i4;
                iArr[i3][i3 - 1] = i5;
            }
            f += (i3 * i3);
        }
        f += i3;
        iArr[(-44895 >>> 1) % N][(i4 >>> 1) % N] = (int)Test.instanceCount;
        iArr[(184 >>> 1) % N] = iArr[(i4 >>> 1) % N];
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + i5 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(int i2) {

        double d1=-1.112872;
        float f1=-28.430F;
        int i7=-58, i8=-208, iArr1[][]=new int[N][N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -30084);

        i2 -= (int)(i2 = (int)(Test.instanceCount + Test.sArrFld[(i2 >>> 1) % N]));
        Test.sFld = (short)Test.instanceCount;
        vMeth(d1);
        d1 += Test.sFld;
        iArr1[(Test.iFld >>> 1) % N][(i2 >>> 1) % N] = (int)f1;
        d1 %= (Test.iFld | 1);
        i2 = (int)3144480459L;
        for (int i6 : Test.iArrFld) {
            for (i7 = 1; i7 < 4; ++i7) {
                b = b;
                Test.iFld -= Test.iFld;
                iArr1[i7][i7] = Test.sFld;
            }
        }
        Test.instanceCount = i2;
        i8 += i8;
        Test.instanceCount = i2;
        long meth_res = i2 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i7 + i8 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-25473, i1=63451, i9=1, i10=11, i11=0, i12=-1, i14=-8, i15=8, i16=-8;
        double d2=0.3901, d3=1.72527;
        float f2=76.701F;

        for (i = 11; i < 288; ++i) {
            fArrFld[i - 1] = iMeth(Test.iFld);
            i1 += (((i * Test.iFld) + Test.instanceCount) - i);
            i1 |= Test.sFld;
            Test.instanceCount -= -12;
            Test.iFld = i;
        }
        for (i9 = 2; i9 < 126; i9++) {
            d2 += i1;
        }
        switch (((0 >>> 1) % 8) + 66) {
        case 66:
            for (i11 = 1; 326 > i11; i11++) {
                d2 += f2;
                Test.iFld *= i11;
                dArrFld[i11 - 1] += 4.83163;
                Test.sFld = (short)i10;
                iArrFld1[i11] = i12;
            }
            Test.iArrFld[(i1 >>> 1) % N] = i10;
            i10 = (int)-2.928F;
            break;
        case 67:
            lArrFld = lArrFld;
            for (int i13 : iArrFld1) {
                for (d3 = 63; 1 < d3; d3--) {
                    Test.iArrFld[(int)(d3 + 1)] = Test.iFld;
                    for (i15 = (int)(d3); i15 < 2; ++i15) {
                        Test.instanceCount = Test.iFld;
                        i10 -= i16;
                        try {
                            i14 = (46980 / iArrFld1[i15 - 1]);
                            Test.iArrFld[i15] = (61827 % Test.iArrFld[i15 + 1]);
                            i14 = (iArrFld1[i15] % i1);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (1 + (i15 * i15));
                        i14 += (int)75.55353;
                        Test.instanceCount = -58929;
                        iArrFld1[i15] >>= (int)Test.instanceCount;
                        Test.bFld = Test.bFld;
                    }
                }
            }
            break;
        case 68:
            Test.instanceCount -= Test.iFld;
            break;
        case 69:
            iArrFld1 = Test.iArrFld;
            break;
        case 70:
        case 71:
            i14 = (int)Test.instanceCount;
            break;
        case 72:
            i12 *= (int)-2.345F;
        case 73:
            i12 = Test.sFld;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
