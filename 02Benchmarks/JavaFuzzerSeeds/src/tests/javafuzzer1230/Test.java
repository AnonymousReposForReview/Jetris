package tests.javafuzzer1230;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:48:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=72910609538053353L;
    public static byte byFld=-17;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1455099445L);
        FuzzerUtils.init(Test.iArrFld, 239);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(int i, long l) {

        float fArr[]=new float[N];
        int iArr[]=new int[N];

        FuzzerUtils.init(fArr, -1.658F);
        FuzzerUtils.init(iArr, -164);

        i -= ((++Test.byFld) + (--i));
        iArr = (iArr = iArr);
        vSmallMeth_check_sum += i + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i5=4, i6=22905, i7=203, i8=-5408, i9=12, i10=-7, i11=88, i12=113, iArr1[]=new int[N], iArr2[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        short s=17482, sArr[]=new short[N];
        float f1=-56.960F;

        FuzzerUtils.init(sArr, (short)-7197);
        FuzzerUtils.init(iArr1, -102);
        FuzzerUtils.init(iArr2, -178);
        FuzzerUtils.init(bArr, true);

        switch (((i5 >>> 1) % 9) + 12) {
        case 12:
            for (i6 = 7; i6 < 188; ++i6) {
                if (b) continue;
                switch ((i6 % 10) + 31) {
                case 31:
                    i7 &= (int)Test.instanceCount;
                    i8 = 9;
                    while (--i8 > 0) {
                        i7 = i7;
                        for (i9 = 1; 1 < i9; --i9) {
                            sArr[i8] -= (short)-89;
                            Test.instanceCount = i7;
                        }
                    }
                    break;
                case 32:
                    Test.lArrFld[i6 - 1] = i8;
                case 33:
                    for (i11 = 1; i11 < 9; i11++) {
                        iArr1[(i5 >>> 1) % N] -= i5;
                        Test.instanceCount += i11;
                    }
                    break;
                case 34:
                    i5 = i11;
                    break;
                case 35:
                    i10 += (i6 * i6);
                    break;
                case 36:
                    i10 += (((i6 * i12) + i6) - i10);
                case 37:
                    i7 += (((i6 * Test.instanceCount) + i7) - i10);
                    break;
                case 38:
                    i7 += i6;
                case 39:
                    Test.byFld = (byte)Test.instanceCount;
                    break;
                case 40:
                    i7 = i7;
                    break;
                default:
                    i5 -= s;
                }
            }
            break;
        case 13:
            iArr2[(-4 >>> 1) % N] = i10;
            break;
        case 14:
            i10 >>= (int)Test.instanceCount;
            break;
        case 15:
            bArr[(i8 >>> 1) % N] = true;
            break;
        case 16:
            i7 = i6;
            break;
        case 17:
            i12 >>= (int)Test.instanceCount;
        case 18:
            i10 >>= (int)Test.instanceCount;
            break;
        case 19:
            Test.instanceCount <<= Test.instanceCount;
            break;
        case 20:
            f1 += f1;
            break;
        }
        long meth_res = i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + s + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i4) {

        float f2=-104.127F, f3=-2.719F;
        int i13=-246, i14=0, i15=-59095, i16=-103, i17=27501;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -34.59027);

        iMeth();
        Test.instanceCount *= i4;
        for (f2 = 9; 314 > f2; f2++) {
            for (i14 = 5; i14 > 1; i14 -= 2) {
                i4 += (((i14 * i14) + i4) - Test.byFld);
                i13 *= (int)Test.instanceCount;
            }
            for (i16 = 1; i16 < 5; i16++) {
                double d=-35.76046;
                if (b1) break;
                i4 <<= 22044;
                f3 += (i16 - Test.instanceCount);
                Test.iArrFld[i16 - 1] = i17;
                dArr[i16 - 1] += i17;
                i4 -= (int)Test.instanceCount;
                d += -6937;
                b1 = b1;
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2, long l1, int i3) {


        vMeth1(i2);
        vMeth_check_sum += i2 + l1 + i3;
    }

    public void mainTest(String[] strArr1) {

        int i1=8, i18=26925, i19=10, i20=-18863, i21=-124, i22=-2, i23=53218, i24=60654, i25=79, i26=43450;
        double d1=0.7301;
        long l2=-9L;
        boolean b2=true;

        for (int smallinvoc=0; smallinvoc<726; smallinvoc++) vSmallMeth(-7561, -1558976554L);
        Test.instanceCount -= i1;
        if (b2) {
            vMeth(i1, Test.instanceCount, i1);
        } else if (b2) {
            i1 <<= i1;
            i1 <<= i1;
        } else if (b2) {
            i1 <<= i1;
            for (i18 = 18; 377 > i18; i18++) {
                for (i20 = i18; i20 < 70; ++i20) {
                    switch ((i18 % 2) + 45) {
                    case 45:
                    case 46:
                        i19 += (i20 * i21);
                        break;
                    default:
                        i21 = i18;
                        Test.instanceCount = i21;
                        Test.instanceCount *= Test.instanceCount;
                        for (i22 = 1; i20 < i22; i22--) {
                            i21 &= i21;
                            i23 += (int)(0.648F + (i22 * i22));
                            Test.instanceCount -= Test.instanceCount;
                        }
                    }
                    d1 = -160L;
                    i23 += i20;
                    for (l2 = 1; 1 > l2; l2++) {
                        Test.iArrFld[(int)(l2)] = i23;
                    }
                    Test.iArrFld[i20] -= i24;
                    i24 -= (int)-6L;
                    switch (((i20 % 1) * 5) + 23) {
                    case 24:
                        i23 >>= (int)Test.instanceCount;
                        for (i25 = 1; i25 < 1; i25++) {
                            i26 = i24;
                            b2 = b2;
                            i26 /= (int)(i22 | 1);
                        }
                    default:
                        d1 += d1;
                    }
                }
            }
        } else {
            Test.instanceCount = i1;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
