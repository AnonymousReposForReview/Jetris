package tests.javafuzzer608;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:29:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2151913271L;
    public static volatile float fFld=-114.359F;
    public static short sFld=-24490;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i2=13, i3=25407;
        double d=-98.23928;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.162F);

        i2 = 0;
        i3 = 301;
        while (--i3 > 0) {
            Test.iArrFld = Test.iArrFld;
            i2 -= i2;
            i2 += (int)Test.fFld;
            switch ((i3 % 6) + 47) {
            case 47:
                fArr[i3 - 1] += i3;
                i2 *= i3;
                i2 += (i3 | i2);
                break;
            case 48:
            case 49:
            case 50:
                Test.instanceCount += (0 + (i3 * i3));
                Test.instanceCount += (((i3 * Test.instanceCount) + Test.fFld) - i3);
                break;
            case 51:
                fArr[i3] *= 62008;
                break;
            case 52:
                d -= i3;
                i2 += i3;
                i2 -= (int)Test.instanceCount;
                break;
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i1, boolean b, long l1) {

        int i4=-184, i5=-12, i6=216, i7=-55206, i8=6;
        double d1=-4.118126;
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, -6558281350135941581L);
        FuzzerUtils.init(fArr1, -70.628F);

        i1 = (int)(dMeth() + 42187);
        l1 += i1;
        for (i4 = 19; i4 < 309; i4++) {
            byte by1=-41;
            Test.fFld += i4;
            l1 = (long)125.34134;
            if (b) {
                for (i6 = 6; i4 < i6; i6 -= 2) {
                    byte by=-69;
                    i5 = i1;
                    i1 -= 31703;
                    by += (byte)(((i6 * i1) + i8) - Test.instanceCount);
                }
            } else {
                i8 += (((i4 * by1) + Test.fFld) - i4);
                lArr[i4] = i6;
                fArr1[(i5 >>> 1) % N] -= i8;
            }
            l1 += (((i4 * l1) + i8) - l1);
        }
        d1 -= i5;
        long meth_res = i1 + (b ? 1 : 0) + l1 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i=-11;
        boolean b1=false;

        i -= iMeth(i, b1, Test.instanceCount);
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i9=14, i10=102, i11=-26585, i12=-82, i13=-102, i14=-165, i15=-215, i16=14;
        double d3=-75.8783, d4=2.100077;
        long lArr1[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr1, 1205639228L);
        FuzzerUtils.init(sArr, (short)1761);

        vMeth(Test.fFld, Test.instanceCount);
        i9 *= (int)Test.fFld;
        for (i10 = 14; i10 < 386; ++i10) {
            double d2=-98.58147;
            d2 = i11;
            i11 = Test.sFld;
            i9 += (((i10 * i11) + i10) - Test.fFld);
        }
        for (long l2 : lArr1) {
            Test.instanceCount ^= i11;
            for (i12 = 2; i12 < 63; i12++) {
                i9 &= i10;
                d3 = i13;
                i11 -= (int)Test.fFld;
                sArr[i12 + 1] *= (short)i9;
                i9 = i9;
                d3 *= 8;
                for (i14 = i12; i14 < 2; ++i14) {
                    i13 <<= (int)Test.instanceCount;
                    i13 = i9;
                    i11 += (i14 * i14);
                    i13 <<= i11;
                    Test.instanceCount -= i14;
                    Test.iArrFld[i12 + 1] = i13;
                    i11 <<= i12;
                    Test.instanceCount <<= i10;
                    i9 -= i9;
                    i9 = i9;
                }
                for (d4 = 2; d4 > 1; --d4) {
                    if (true) continue;
                    Test.iArrFld[(int)(d4 + 1)] -= i16;
                    Test.instanceCount += (long)(d4 * d4);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
