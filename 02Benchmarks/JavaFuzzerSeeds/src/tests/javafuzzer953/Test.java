package tests.javafuzzer953;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:00:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static int iFld=2;
    public double dFld=0.15854;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 16005L);
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        float f1=-84.799F, fArr[]=new float[N];
        int i1=12, i2=58176, i3=8, i4=-14;
        byte by=63;

        FuzzerUtils.init(fArr, 36.347F);

        f1 += -31882L;
        for (i1 = 3; i1 < 127; i1++) {
            i2 -= i1;
            f1 += (((i1 * Test.instanceCount) + i2) - i2);
            for (i3 = 1; i3 < 13; ++i3) {
                i4 += by;
                fArr[i1 + 1] -= 56489;
                switch ((i3 % 2) + 118) {
                case 118:
                    i4 = i4;
                    i4 = (int)Test.instanceCount;
                    switch (((i3 % 2) * 5) + 30) {
                    case 34:
                        i2 += i2;
                        i2 ^= i1;
                        i4 += i3;
                        break;
                    case 39:
                        Test.instanceCount = 2451747579L;
                        break;
                    }
                    break;
                case 119:
                    i4 += (((i3 * i4) + by) - f1);
                    break;
                default:
                    i4 += (((i3 * i3) + f1) - i1);
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {

        double d1=117.109986, dArr[][]=new double[N][N];
        int i5=46189, i6=15456, i7=245, i8=11, i9=17361, i10=-42604, i11=65440;

        FuzzerUtils.init(dArr, 1.51637);

        vMeth1(d1);
        i5 = (int)l;
        i6 = 164;
        while (--i6 > 0) {
            if (i6 != 0) {
                vMeth_check_sum += l + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            dArr[i6] = dArr[i6];
            d1 = d1;
            l = i6;
            for (i7 = 1; i7 < 10; ++i7) {
                i5 += (((i7 * i7) + i5) - l);
            }
            i9 += (((i6 * i10) + Test.instanceCount) - i10);
            i11 = 10;
            do {
                Test.instanceCount |= l;
                Test.instanceCount += i11;
            } while ((i11 -= 2) > 0);
            i9 >>= i7;
            i10 += (((i6 * l) + i11) - l);
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static float fMeth() {

        int i12=118, i13=-8, i14=169;
        float f2=2.332F;
        double d2=1.75839;

        vMeth(Test.instanceCount);
        i12 = 251;
        while (--i12 > 0) {
            f2 = i12;
            Test.iFld *= 135;
            Test.iFld = -1;
        }
        Test.iFld = (int)Test.instanceCount;
        d2 = Test.iFld;
        for (i13 = 3; i13 < 223; i13++) {
            i14 = i14;
        }
        Test.lArrFld[(i12 >>> 1) % N] *= Test.instanceCount;
        long meth_res = i12 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + i13 + i14;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-31411, i15=-10, i16=187, i17=63542, i18=113, i19=-209, i20=11739, i21=160, i22=10, i23=-10443;
        float f=0.725F;
        byte by1=-81;
        boolean b=false;
        short s=770;

        i %= (int)((long)(f) | 1);
        f *= (fMeth() + -84);
        Test.iFld = Test.iFld;
        switch (((i >>> 1) % 2) + 17) {
        case 17:
            i15 = 280;
            do {
                i += i;
                i16 = 1;
                do {
                    i = (int)f;
                    for (i17 = i16; i17 < 1; ++i17) {
                        Test.instanceCount -= by1;
                        b = b;
                        Test.lArrFld[i15 + 1] = Test.iFld;
                    }
                    for (i19 = 1; i19 < 1; ++i19) {
                        i = s;
                        Test.iArrFld[i15 - 1] -= (int)f;
                    }
                    Test.lArrFld[i16 - 1] = i17;
                    i21 = 1;
                    while (++i21 < 1) {
                        if (b) break;
                        f += i19;
                        i18 -= i16;
                    }
                    i20 = i18;
                    i20 += (int)(-52440L + (i16 * i16));
                } while (++i16 < 90);
                switch (((i15 % 4) * 5) + 7) {
                case 24:
                    for (i22 = 90; i22 > 1; i22--) {
                        by1 += (byte)i19;
                        Test.instanceCount += (((i22 * i18) + Test.instanceCount) - Test.instanceCount);
                        f -= i23;
                        Test.iArrFld = Test.iArrFld;
                        i18 += (i22 * i22);
                        dFld *= Test.instanceCount;
                    }
                case 19:
                    dFld += i17;
                    break;
                case 8:
                    i20 -= Test.iFld;
                case 13:
                    Test.instanceCount += (long)(-58.206F + (i15 * i15));
                }
            } while (--i15 > 0);
            break;
        case 18:
            i18 = i18;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
