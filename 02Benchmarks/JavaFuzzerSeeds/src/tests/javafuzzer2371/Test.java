package tests.javafuzzer2371;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:39:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6477656382634954155L;
    public static short sFld=24911;
    public double dFld=-2.30762;
    public static volatile float fFld=0.264F;
    public byte byFld=30;
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public static int iArrFld2[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -9);
        FuzzerUtils.init(Test.iArrFld2, 66);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        float f1=-2.863F;
        int i9=242, i10=4, i11=99, i12=-21, i13=-9164;
        double d1=0.69100;

        i8 = 14165;
        f1 += 3;
        for (i9 = 4; i9 < 148; i9++) {
            i10 = i9;
            i8 -= i9;
            i10 = i10;
            i8 += (int)239L;
            for (i11 = 11; i9 < i11; --i11) {
                i12 += (i11 ^ i11);
                Test.iArrFld1[i9 - 1] = (int)d1;
                switch ((i9 % 2) + 6) {
                case 6:
                    i13 = 1;
                    while (++i13 < 1) {
                        f1 += i9;
                        i12 = Test.sFld;
                    }
                    i8 += i11;
                    break;
                case 7:
                    i8 += (i11 - i9);
                default:
                    Test.sFld -= (short)0;
                }
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i13;
    }

    public static void vMeth(int i4, int i5, float f) {

        int i6=-75, i7=-4, i14=219, iArr[][]=new int[N][N];
        boolean b=false;
        double d=2.113512;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(lArr, 5824532069800674940L);

        for (i6 = 356; i6 > 8; i6 -= 3) {
            i4 >>= i4;
            if (b = (((d + -21646) * (i4 + i5)) < iArr[i6][i6 - 1])) break;
            vMeth1(-179);
            i4 = (int)Test.instanceCount;
            i7 -= (int)210280533L;
            lArr[i6 - 1] = 17476;
            b = b;
        }
        Test.iArrFld2[(-52477 >>> 1) % N] -= 6;
        i14 = 1;
        while (++i14 < 245) {
            d = i5;
            f *= i7;
            i4 += -239;
            i7 += (171 + (i14 * i14));
            i4 = i6;
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i14
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1, int i2, int i3) {

        byte by=104;

        vMeth(i3, i3, 82.907F);
        by >>= (byte)i3;
        long meth_res = i1 + i2 + i3 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=27, i15=-22317, i16=-12, i17=-3, i18=215, i19=-13545, i20=79, i21=42449, i22=4, i23=-8, i24=43998;
        boolean b1=false;
        float f2=88.273F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -114.79F);

        i = 1;
        while (++i < 273) {
            iArrFld[i][i - 1] = iMeth(-28593, i, 91);
            Test.iArrFld2[i] = (int)Test.instanceCount;
        }
        fArr[(-12 >>> 1) % N] = i;
        for (i15 = 6; 149 > i15; i15++) {
            for (i17 = i15; 175 > i17; i17++) {
                for (i19 = 1; i19 < 1; ++i19) {
                    i20 = i18;
                    i16 = (int)-1L;
                    Test.iArrFld2[i17] >>= (int)Test.instanceCount;
                    b1 = false;
                    Test.instanceCount = 61980;
                }
                Test.instanceCount += Test.sFld;
                Test.instanceCount *= i17;
                i18 = i20;
                Test.instanceCount = i17;
                fArr[i15 - 1] = i16;
            }
            b1 = b1;
            for (f2 = 8; f2 < 175; ++f2) {
                Test.sFld += (short)i18;
            }
            i22 = 175;
            while (--i22 > 0) {
                for (i23 = 1; i23 < 1; i23++) {
                    i24 += (int)dFld;
                    Test.instanceCount = i20;
                    i18 += (((i23 * i20) + i23) - i16);
                }
                Test.fFld = i19;
                dFld += i;
                i16 >>= byFld;
            }
            bArrFld[i15] = true;
            Test.instanceCount += (i15 * i15);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
