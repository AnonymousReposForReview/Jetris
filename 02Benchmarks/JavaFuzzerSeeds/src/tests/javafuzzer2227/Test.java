package tests.javafuzzer2227;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:28:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58319L;
    public volatile int iFld=-5;
    public static double dFld=-1.93167;
    public static volatile int iFld1=-58;
    public static short sFld=-11709;
    public static volatile int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 22860);
        FuzzerUtils.init(Test.byArrFld, (byte)-58);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2) {

        int i6=6, i7=-1, i8=9, i9=10, i10=-2, i11=-4, iArr[]=new int[N];
        float f2=77.327F;
        short s=2309;
        byte by=26;
        boolean b=true;

        FuzzerUtils.init(iArr, 38);

        for (i6 = 20; 370 > i6; i6++) {
            f2 += (i6 + f2);
            for (i8 = 1; i8 < 5; ++i8) {
                switch ((((2722 >>> 1) % 8) * 5) + 67) {
                case 100:
                    for (i10 = 1; i10 < 2; i10++) {
                        switch ((i10 % 2) + 43) {
                        case 43:
                            Test.instanceCount += i10;
                            break;
                        case 44:
                            i9 = (int)Test.dFld;
                        default:
                            iArr[i10] >>>= (int)Test.instanceCount;
                            i11 = 25126;
                            Test.instanceCount += (i10 + f2);
                        }
                        s -= (short)i10;
                        if (i6 != 0) {
                            vMeth_check_sum += l2 + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + s + by +
                                (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        i9 -= 14181;
                        i11 += i10;
                    }
                case 91:
                    i11 += (((i8 * by) + i11) - i10);
                    break;
                case 78:
                    Test.instanceCount <<= -6531;
                case 94:
                    if (b) break;
                    break;
                case 104:
                case 89:
                    f2 += l2;
                case 72:
                    iArr[i6] += i10;
                    break;
                case 88:
                    i9 += (3 + (i8 * i8));
                    break;
                default:
                    s += (short)(164 + (i8 * i8));
                }
            }
        }
        vMeth_check_sum += l2 + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + s + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(int i3, long l, long l1) {

        int i4=35, i5=-15431, i12=8, i13=34936, i14=-31218, i15=-6, i16=-53154, iArr1[]=new int[N];
        float f1=-1.940F;
        long l3=-4268110339L;
        short s1=-25403;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-109);
        FuzzerUtils.init(iArr1, -40);

        for (i4 = 9; 258 > i4; ++i4) {
            f1 -= (++i3);
            if (b1) {
                vMeth(l1);
                byArr[i4] = (byte)-13;
            } else if (b1) {
                for (i12 = 7; i12 > i4; i12 -= 2) {
                    try {
                        iArr1[i4 + 1] = (30047 % iArr1[i4 - 1]);
                        Test.iFld1 = (i13 % 145634654);
                        i5 = (i3 % i4);
                    } catch (ArithmeticException a_e) {}
                }
                iArr1[i4] = -6462;
                for (i14 = 7; 1 < i14; i14--) {
                    for (l3 = 1; l3 < 2; l3++) {
                        l1 -= l;
                        s1 = (short)Test.instanceCount;
                        l1 = i15;
                        l1 = -3;
                        Test.dFld *= Test.iFld1;
                    }
                }
            } else {
                Test.instanceCount += i12;
            }
        }
        long meth_res = i3 + l + l1 + i4 + i5 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + l3 + i16 + s1 + (b1
            ? 1 : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i1, double d, int i2) {

        int i17=-218, i18=-13803, i19=-3, i20=8;
        short s2=-26082, sArr[]=new short[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.837F);
        FuzzerUtils.init(sArr, (short)20079);
        FuzzerUtils.init(lArr, -233610707282177298L);

        fArr[(i1 >>> 1) % N] -= (-fMeth(61320, -119L, Test.instanceCount));
        for (i17 = 16; i17 < 328; i17++) {
            d = i2;
            i18 -= i2;
            if (true) continue;
            s2 = (short)i18;
            Test.iFld1 -= Test.iFld1;
            Test.instanceCount *= Test.instanceCount;
        }
        switch (((i2 >>> 1) % 8) + 112) {
        case 112:
            i19 = 1;
            while (++i19 < 353) {
                i1 += (i19 * i19);
                i2 += (int)Test.instanceCount;
                Test.dFld += 13;
            }
            i18 *= i2;
            Test.iArrFld[(i1 >>> 1) % N] -= (int)d;
            break;
        case 113:
            sArr = sArr;
            break;
        case 114:
            fArr[(i18 >>> 1) % N] = i20;
            break;
        case 115:
            lArr[(i18 >>> 1) % N] *= Test.iFld1;
        case 116:
            Test.instanceCount = (long)72.145F;
        case 117:
            i18 ^= i17;
            break;
        case 118:
        case 119:
            i18 -= Test.iFld1;
            break;
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i17 + i18 + s2 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-223, i21=-6, i22=31985;
        float f=-73.84F;
        boolean b2=true, bArr[]=new boolean[N];
        double d1=2.9447;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 12L);
        FuzzerUtils.init(bArr, true);

        i = 1;
        while (++i < 198) {
            iFld <<= (int)Test.instanceCount;
            iFld -= (int)(((Test.instanceCount - iFld) / ((i * i) | 1)) * (iFld = (int)f));
            iMeth(i, Test.dFld, i);
            switch (((-248 >>> 1) % 4) + 76) {
            case 76:
                Test.iArrFld[i + 1] *= -2662;
                i21 = 1;
                do {
                    iFld += (((i21 * i21) + iFld) - i21);
                    iFld <<= i;
                    if (true) {
                        f *= Test.iFld1;
                    } else if (b2) {
                        Test.byArrFld[i21 - 1] -= (byte)i21;
                        Test.instanceCount -= Test.iFld1;
                    }
                    Test.iFld1 += (i21 | iFld);
                    lArr1 = lArr1;
                    i22 = 1;
                    do {
                        switch (((i % 10) * 5) + 40) {
                        case 58:
                            Test.instanceCount >>= 47;
                        case 72:
                            bArr[i21 + 1] = b2;
                            iFld += i22;
                            iFld += (i22 - Test.instanceCount);
                            Test.iArrFld[i] += (int)f;
                            break;
                        case 52:
                            Test.iFld1 >>>= i21;
                            Test.iFld1 -= (int)f;
                        case 69:
                            iFld = Test.iFld1;
                            Test.sFld = (short)-30.284F;
                            Test.iFld1 -= i21;
                            break;
                        case 57:
                            Test.iFld1 <<= i22;
                            try {
                                iFld = (Test.iArrFld[i22 + 1] / 184);
                                iFld = (Test.iArrFld[i22] / iFld);
                                Test.iFld1 = (i21 % 227);
                            } catch (ArithmeticException a_e) {}
                        case 77:
                            iFld = i22;
                            break;
                        case 60:
                            Test.dFld = -86;
                            break;
                        case 83:
                            Test.instanceCount = (long)d1;
                            break;
                        case 51:
                            Test.iFld1 ^= iFld;
                            break;
                        case 75:
                            if (false) break;
                            break;
                        }
                    } while (++i22 < 1);
                } while (++i21 < 127);
                break;
            case 77:
                Test.instanceCount |= -14;
            case 78:
                Test.instanceCount -= i21;
                break;
            case 79:
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
