package tests.javafuzzer3342;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:22:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50993L;
    public static short sFld=20053;
    public static boolean bFld=false;
    public static byte byFld=-105;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -859L);
        FuzzerUtils.init(Test.iArrFld, 2);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, double d4) {

        int i8=173, i9=8, i10=-3, i11=46, i12=-124, iArr1[]=new int[N];
        byte by=-60;

        FuzzerUtils.init(iArr1, -52923);

        d4 = i8;
        i9 = 1;
        while (++i9 < 240) {
            if (false) continue;
            Test.sFld = (short)l;
            i8 -= (int)Test.instanceCount;
            i8 *= i9;
            for (i10 = i9; i10 < 7; i10++) {
                i12 = 1;
                while (++i12 < 1) {
                    i11 += i8;
                    iArr1[i10 + 1] = (int)Test.instanceCount;
                    iArr1 = iArr1;
                    i8 >>>= i9;
                }
                i11 = 161;
                l *= i11;
                iArr1[i10 - 1] += by;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d4) + i8 + i9 + i10 + i11 + i12 + by + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f1, double d3) {

        int i6=-10, i7=85;
        short s=4117, sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-15836);

        f1 += (Test.instanceCount--);
        for (i6 = 5; i6 < 153; i6++) {
            i7 = (int)Test.instanceCount;
            i7 += (((i6 * s) + Test.instanceCount) - i6);
            i7 = (int)(iMeth1(Test.instanceCount, d3) * Test.instanceCount);
        }
        sArr[(i7 >>> 1) % N][(i6 >>> 1) % N] = (short)i6;
        i7 >>>= i7;
        vMeth_check_sum += Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + i6 + i7 + s +
            FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(int i5, double d1, double d2) {

        float f2=1.1014F, fArr[]=new float[N];
        int i13=-2, i14=65, i15=62520, i16=232, i17=6;

        FuzzerUtils.init(fArr, 61.307F);

        vMeth(f2, d2);
        for (i13 = 13; 242 > i13; ++i13) {
            i14 *= i13;
            i15 = 1;
            do {
                switch ((((i14 >>> 1) % 4) * 5) + 120) {
                case 124:
                    i5 -= (int)f2;
                    for (i16 = 1; 1 < i16; i16--) {
                        i14 *= (int)Test.instanceCount;
                        i5 += (((i16 * i17) + Test.instanceCount) - Test.instanceCount);
                        i14 >>= i14;
                        Test.bFld = Test.bFld;
                        i5 += (40725 + (i16 * i16));
                        Test.instanceCount += (i16 | i14);
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount <<= 9;
                    }
                    break;
                case 131:
                    i5 -= -149;
                    break;
                case 128:
                    fArr[i13] *= i14;
                    break;
                case 129:
                    i5 += (((i15 * Test.instanceCount) + i13) - i5);
                    break;
                }
            } while (++i15 < 7);
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i13
            + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-3, i2=3, i3=12, i4=-134, iArr[]=new int[N];
        double d=80.115057, dArr[][]=new double[N][N];
        float f=-2.588F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 93);
        FuzzerUtils.init(fArr1, 0.749F);
        FuzzerUtils.init(dArr, 38.121893);

        i = 1;
        do {
            Test.instanceCount += (long)(d * ((++Test.sFld) * (f -= i)));
            for (i1 = 3; i1 < 115; i1++) {
                i2 <<= (i2--);
                for (i3 = 2; i3 > 1; i3--) {
                    switch ((((i2 >>> 1) % 9) * 5) + 117) {
                    case 123:
                        Test.instanceCount += (i3 * f);
                        iArr[i] *= (int)Test.instanceCount;
                        iArr[i + 1] -= (int)(++Test.lArrFld[i + 1]);
                    case 152:
                        switch ((((((int)(i3 / (Test.instanceCount | 1))) >>> 1) % 6) * 5) + 22) {
                        case 28:
                            if (Test.bFld) {
                                Test.instanceCount += ((i2--) - iMeth(i, d, d));
                            }
                            i2 += (int)-43L;
                        case 47:
                            i2 = i3;
                            iArr[i3] -= i2;
                            break;
                        case 45:
                        case 46:
                            switch (((i1 % 9) * 5) + 92) {
                            case 128:
                                Test.iArrFld[i3] = i1;
                                switch (((i2 >>> 1) % 8) + 38) {
                                case 38:
                                    i2 >>= i2;
                                    Test.instanceCount += (((i3 * i3) + i3) - Test.instanceCount);
                                    i2 |= i2;
                                    break;
                                case 39:
                                    fArr1[i1] -= Test.byFld;
                                    iArr[i1 + 1] *= (int)Test.instanceCount;
                                    iArr[i3 - 1] ^= i4;
                                    Test.iArrFld[i1 - 1] = (int)115L;
                                    break;
                                case 40:
                                    i4 *= i2;
                                    break;
                                case 41:
                                    Test.iArrFld[i1] -= i3;
                                    dArr[i3 + 1][i3] += i2;
                                    break;
                                case 42:
                                    if (Test.bFld) break;
                                    Test.lArrFld[i1 + 1] -= i4;
                                    break;
                                case 43:
                                    Test.instanceCount <<= i;
                                case 44:
                                    Test.instanceCount = Test.instanceCount;
                                    break;
                                case 45:
                                    fArr1[i - 1] -= i;
                                    break;
                                default:
                                    Test.instanceCount = Test.instanceCount;
                                }
                            case 117:
                                if (Test.bFld) break;
                            case 107:
                                Test.bFld = Test.bFld;
                                break;
                            case 119:
                                i2 *= -9;
                                break;
                            case 126:
                                Test.sFld += (short)(i3 * i3);
                                break;
                            case 131:
                                i2 += i2;
                            case 106:
                                i2 -= 143;
                                break;
                            case 133:
                                if (Test.bFld) continue;
                                break;
                            case 116:
                                i2 += (((i3 * i1) + i3) - Test.instanceCount);
                                break;
                            }
                        case 32:
                            if (Test.bFld) break;
                            break;
                        case 27:
                            iArr[i3 - 1] = -97;
                            break;
                        }
                    case 131:
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    case 125:
                        i4 >>= i;
                    case 130:
                    case 145:
                        Test.lArrFld[i1] = Test.instanceCount;
                    case 160:
                        i4 >>= i4;
                        break;
                    case 144:
                        Test.byFld = (byte)f;
                        break;
                    case 140:
                        i2 += (int)f;
                        break;
                    default:
                        iArr[i3 - 1] += i4;
                    }
                }
            }
        } while (++i < 219);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
