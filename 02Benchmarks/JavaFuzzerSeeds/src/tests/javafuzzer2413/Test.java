package tests.javafuzzer2413;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:21:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=245740557L;
    public volatile int iFld=-5081;
    public long lFld=-7L;
    public static int iFld1=-13400;
    public static byte byFld=2;
    public static float fFld=0.475F;
    public static short sFld=3563;
    public static boolean bFld=false;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -68.954F);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        int i8=8, i9=6, i10=8, i11=-2, i12=-7, i13=-51304;
        byte by=29;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.69807);

        for (i8 = 136; i8 > 1; i8--) {
            Test.iFld1 = i9;
        }
        for (i10 = 6; i10 < 397; i10++) {
            i12 = 4;
            do {
                i13 = 1;
                do {
                    i9 *= i10;
                    i11 += i13;
                    by |= (byte)i9;
                    if (i12 != 0) {
                    }
                    i11 += Test.iFld1;
                    i11 = (int)Test.instanceCount;
                    switch (((i10 % 1) * 5) + 34) {
                    case 35:
                        dArr[i10 + 1] -= Test.instanceCount;
                        Test.iFld1 += i13;
                        Test.iFld1 += -96;
                    }
                } while (++i13 < 2);
            } while ((i12 -= 2) > 0);
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i5) {

        int i6=0, i7=14, i14=6, i15=-13, iArr[][]=new int[N][N];
        short s=21325;
        boolean b=true;

        FuzzerUtils.init(iArr, 227);

        for (i6 = 3; i6 < 140; ++i6) {
            sMeth();
            for (i14 = i6; i14 < 11; ++i14) {
                int i16=53888;
                try {
                    iArr[i6 - 1][i6] = (-53216 / i6);
                    i15 = (iArr[i6 - 1][i6 + 1] % -26);
                    i16 = (-34 % i7);
                } catch (ArithmeticException a_e) {}
                Test.iFld1 += (((i14 * Test.instanceCount) + i15) - i6);
                if (b) {
                    i16 += (i14 + Test.byFld);
                    i7 = -12;
                    Test.instanceCount -= i14;
                    if (true) {
                        i5 += (i14 ^ Test.instanceCount);
                        Test.fFld += Test.fFld;
                    } else if (b) {
                        s <<= (short)Test.instanceCount;
                        i7 = Test.iFld1;
                    } else if (b) {
                        i16 += (((i14 * Test.fFld) + i15) - Test.instanceCount);
                    } else {
                        i5 = i14;
                    }
                } else {
                    i5 = i7;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i14 + i15 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth(int i2, int i3, int i4) {

        int i17=5, i18=-8, i19=161, i20=-82, i21=21097, i22=23553, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7605437322683235871L);
        FuzzerUtils.init(iArr1, -7);

        vMeth(-1);
        for (i17 = 1; i17 < 322; ++i17) {
            for (i19 = i17; i19 < 5; ++i19) {
                for (i21 = 1; i21 < 1; i21++) {
                    Test.fFld = Test.fFld;
                    lArr[i21 - 1] = i3;
                    if (Test.bFld) {
                        iArr1[i21 + 1] = i21;
                        iArr1[i21] *= i17;
                        i2 += i22;
                        i4 = Test.sFld;
                    } else {
                        switch ((i17 % 2) + 17) {
                        case 17:
                            Test.sFld *= (short)i3;
                        case 18:
                            i18 += i21;
                            i2 = Test.sFld;
                            break;
                        }
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i17 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=28592, i1=-10910, i23=156, i24=-56230, i25=7, i26=1, i27=13754, i28=11, i29=-4, iArr2[]=new int[N];
        double d=57.106963, dArr1[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -24669);
        FuzzerUtils.init(dArr1, 1.88847);
        FuzzerUtils.init(sArr, (short)10745);

        switch (((((int)(iFld + Test.instanceCount)) >>> 1) % 2) + 25) {
        case 25:
            lFld >>>= Test.iFld1;
            for (i = 362; i > 17; i--) {
                dMeth(i1, i1, i1);
            }
            if (Test.bFld) {
                for (i23 = 16; i23 < 343; ++i23) {
                    i1 *= i;
                    iFld = i23;
                    i25 = 1;
                    while (++i25 < 77) {
                        for (i26 = 1; i26 < 1; i26++) {
                            int i30=203;
                            Test.iFld1 += i23;
                            switch (((i26 % 6) * 5) + 82) {
                            case 107:
                                Test.sFld += (short)(((i26 * Test.iFld1) + i24) - Test.instanceCount);
                                iArr2 = iArr2;
                            case 103:
                                Test.fFld += Test.sFld;
                                i24 += (i26 ^ i24);
                                break;
                            case 94:
                                switch ((i25 % 1) + 60) {
                                case 60:
                                    d = i25;
                                    dArr1 = dArr1;
                                    Test.fFld += i26;
                                    i1 -= i27;
                                    break;
                                default:
                                    iFld = 31200;
                                }
                                i27 += (((i26 * i25) + Test.byFld) - i);
                            case 100:
                                switch ((i26 % 10) + 85) {
                                case 85:
                                case 86:
                                    switch ((i25 % 8) + 124) {
                                    case 124:
                                        d = i;
                                        i1 = -31179;
                                        Test.iFld1 = i28;
                                        Test.fArrFld[i26 + 1] /= (i24 | 1);
                                        break;
                                    case 125:
                                        i28 += (int)lFld;
                                        break;
                                    case 126:
                                        iFld += (i26 * i26);
                                        break;
                                    case 127:
                                        Test.fFld += (((i26 * Test.byFld) + i26) - i26);
                                        break;
                                    case 128:
                                        d = i;
                                        break;
                                    case 129:
                                        iArr2[i23 - 1] -= i28;
                                        break;
                                    case 130:
                                        i28 = i24;
                                        break;
                                    case 131:
                                        Test.sFld = (short)i24;
                                        break;
                                    default:
                                        d -= -11509;
                                    }
                                    break;
                                case 87:
                                    Test.bFld = Test.bFld;
                                case 88:
                                    Test.iFld1 = i29;
                                case 89:
                                    i29 += (((i26 * Test.sFld) + Test.sFld) - i29);
                                    break;
                                case 90:
                                    sArr[i25 + 1] *= (short)i27;
                                    break;
                                case 91:
                                    iArr2[i23 - 1] = 26894;
                                    break;
                                case 92:
                                    iArr2[i26] = (int)-42897L;
                                    break;
                                case 93:
                                    i28 += i26;
                                case 94:
                                    iArr2[i26] = i27;
                                    break;
                                default:
                                    i24 = i30;
                                }
                                break;
                            case 105:
                                Test.fFld = 23780;
                                break;
                            case 111:
                                Test.instanceCount = i23;
                                break;
                            default:
                                lFld += (i26 + Test.iFld1);
                            }
                        }
                    }
                }
            } else {
                lFld -= Test.instanceCount;
            }
        case 26:
            i27 |= iFld;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
