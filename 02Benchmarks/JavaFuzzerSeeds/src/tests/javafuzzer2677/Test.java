package tests.javafuzzer2677;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:35:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-46016L;
    public static float fFld=-85.627F;
    public static double dFld=0.45693;
    public short sFld=18253;
    public static boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, boolean b, int i7) {


        Test.dFld += Test.instanceCount;
        long meth_res = i6 + (b ? 1 : 0) + i7;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i4=-11, i5=7, i8=-221, i9=-162, i10=246, i11=117, iArr[]=new int[N];
        boolean b1=false;
        byte by=-40;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr1, 55071L);

        i4 = 1;
        while (++i4 < 393) {
            i5 = Integer.reverseBytes((int)(iMeth1(-222, b1, i4) << 212L));
            i5 *= (int)Test.fFld;
            for (i8 = 1; i8 < 4; i8 += 3) {
                Test.instanceCount -= by;
                for (i10 = 4; i10 > 1; i10--) {
                    Test.instanceCount += (i10 - Test.instanceCount);
                    i5 = -174;
                    i11 >>= i11;
                    iArr[(i4 >>> 1) % N] += 117;
                    Test.instanceCount *= Test.instanceCount;
                    if (true) break;
                }
                Test.instanceCount = 0;
                Test.instanceCount = Test.instanceCount;
                lArr1[i4 - 1][i8 - 1] = i8;
            }
        }
        long meth_res = i4 + i5 + (b1 ? 1 : 0) + i8 + i9 + by + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s, int i3) {

        int i12=-80, i13=-7, i14=-8, i15=11, i16=-12, iArr1[]=new int[N];
        long lArr2[]=new long[N];
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, -134L);
        FuzzerUtils.init(iArr1, -36);
        FuzzerUtils.init(dArr, 30.109475);
        FuzzerUtils.init(fArr, 4.793F);

        i3 = (int)(((120 - Math.min(i3, i3)) - (Test.fFld--)) + iMeth());
        lArr2[(i3 >>> 1) % N] -= i3;
        i12 = 1;
        do {
            i3 *= i12;
            for (i13 = i12; i13 < 10; i13++) {
                if (i3 != 0) {
                    vMeth_check_sum += s + i3 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr2) +
                        FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                iArr1[i12] <<= (int)Test.instanceCount;
                for (i15 = 1; i15 > 1; i15 -= 3) {
                    iArr1[i13 + 1] = (int)-13L;
                    dArr[i15 - 1] *= Test.dFld;
                    Test.instanceCount -= s;
                    i14 = i13;
                }
                i14 += i13;
                Test.dFld += i16;
                fArr[i13 + 1] = (float)Test.dFld;
            }
        } while (++i12 < 159);
        vMeth_check_sum += s + i3 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-3, i1=-27665, i2=-3, i17=26561, i18=42, i19=-3, i20=13, i21=-42918, i22=-14;
        boolean b2=true;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 2608662658L);
        FuzzerUtils.init(sArr, (short)27776);

        i *= (int)(-(lArr[(i >>> 1) % N] + (i + i)));
        for (i1 = 1; i1 < 264; i1++) {
            vMeth(sFld, i1);
            i2 = (int)Test.instanceCount;
            lArr = FuzzerUtils.long1array(N, (long)549811738275618226L);
        }
        sArr[(i1 >>> 1) % N] >>>= (short)i2;
        for (i17 = 14; i17 < 231; i17 += 3) {
            lArr[i17 + 1] -= Test.instanceCount;
            i2 = i17;
            if (b2) {
                Test.dFld += i2;
            } else if (b2) {
                Test.bArrFld[i17] = b2;
                Test.bArrFld = Test.bArrFld;
                i += i17;
                i18 -= (int)Test.instanceCount;
            }
            i *= i1;
            for (i19 = 5; i19 < 348; ++i19) {
                Test.fFld += i19;
                Test.dFld -= 185;
            }
        }
        iArrFld[(-2 >>> 1) % N] |= i;
        for (i21 = 11; i21 < 241; ++i21) {
            b2 = false;
            i2 *= i18;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
