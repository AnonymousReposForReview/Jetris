package tests.javafuzzer2753;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-135L;
    public static int iFld=243;
    public static boolean bFld=true;
    public int iFld1=16637;
    public int iFld2=-116;
    public float fFld=-1.227F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -209);
        FuzzerUtils.init(Test.lArrFld, -157L);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l2, byte by1) {

        int i10=101, i11=-31319, i12=-13, i13=-57, i14=10, i15=222, i16=227, i17=-86;
        float f2=31.220F;
        boolean b1=false;

        for (i10 = 14; i10 < 272; ++i10) {
            i11 >>= i11;
            Test.instanceCount -= i11;
        }
        i11 |= i10;
        Test.iArrFld[(49309 >>> 1) % N] = (int)f2;
        for (i12 = 9; 156 > i12; i12++) {
            for (i14 = 1; i14 < 11; i14++) {
                i15 = (int)-55392L;
                for (i16 = 2; 1 < i16; i16--) {
                    short s1=-10977;
                    Test.instanceCount = -14;
                    s1 = (short)Test.instanceCount;
                    i11 = i17;
                    if (b1) continue;
                    b1 = true;
                    i11 += (i16 * i16);
                }
            }
        }
        long meth_res = l2 + by1 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 :
            0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static short sMeth(int i7, long l) {

        byte by=97;
        short s=7098;
        float f1=2.20F;
        int i8=-3, i9=-6, i18=-41925, i19=-5, i20=-31233;
        double d=9.124202;
        long l3=-9L;

        for (long l1 : Test.lArrFld) {
            Test.instanceCount = (((by + -119) + Test.lArrFld[(i7 >>> 1) % N]) % (Short.reverseBytes(s) | 1));
        }
        f1 *= 222;
        for (i8 = 266; i8 > 14; i8--) {
            Test.instanceCount |= l;
            i7 &= (int)lMeth(-457093097L, by);
        }
        for (d = 1; 193 > d; d += 3) {
            i19 = 1;
            do {
                switch ((((i9 >>> 1) % 2) * 5) + 13) {
                case 17:
                    Test.iArrFld[i19] >>= (int)Test.instanceCount;
                    i7 = (int)3L;
                    break;
                case 22:
                    for (l3 = (long)(d); 1 > l3; l3++) {
                        boolean b2=false;
                        b2 = b2;
                        i20 += (-2 + (l3 * l3));
                        if (b2) break;
                    }
                    break;
                default:
                    i9 += (int)l3;
                }
            } while (++i19 < 24);
        }
        long meth_res = i7 + l + by + s + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d) + i18 + i19 +
            l3 + i20;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void vMeth(boolean b) {

        int i3=-16, i4=-242, i5=201, i6=156, i21=14, i22=142, i23=-27720;
        float f=2.790F;
        byte by2=121;

        for (i3 = 14; i3 < 242; i3++) {
            for (i5 = i3; i5 < 7; i5++) {
                f += (Short.reverseBytes(sMeth(i5, -8522880506865899839L)) - Test.instanceCount);
                try {
                    i6 = (i4 % 205);
                    i6 = (i3 % i4);
                    Test.iFld = (185 / Test.iArrFld[i3 - 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i5 * f) + i3) - i6);
                if (b) break;
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.lArrFld = Test.lArrFld;
                    Test.iFld *= (int)Test.instanceCount;
                    by2 += (byte)i23;
                    f = i4;
                    Test.iFld *= (int)Test.instanceCount;
                    Test.instanceCount = (long)f;
                    i6 += (-223 + (i21 * i21));
                    i4 += i5;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i21 + i22 + by2 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i=-225, i1=-214, i2=-4, i24=38081, i25=-3, i26=12033, i28=46107, i29=-8, i30=-17380;
        long l4=-8850054762707371721L;
        double d1=1.89744, d2=2.64748;

        switch ((((15 - Test.iArrFld[(i >>> 1) % N]) >>> 1) % 1) + 86) {
        case 86:
            for (i1 = 10; i1 < 392; i1++) {
                i2 += (i1 - Test.instanceCount);
            }
            vMeth(Test.bFld);
            break;
        default:
            i24 = 1;
            while (++i24 < 382) {
                for (l4 = 66; l4 > 2; l4--) {
                    i2 *= (int)d1;
                }
                Test.iFld += (int)Test.instanceCount;
                if (Test.bFld) {
                    i26 = 1;
                    while (++i26 < 66) {
                        d2 -= 6;
                        i2 >>>= -2;
                        i2 *= i26;
                        Test.instanceCount -= -18;
                    }
                    i25 += (i24 | Test.instanceCount);
                    i -= (int)Test.instanceCount;
                    try {
                        Test.iFld = (i24 / i26);
                        i25 = (i2 / Test.iFld);
                        i2 = (iFld1 % Test.iArrFld[i24]);
                    } catch (ArithmeticException a_e) {}
                } else if (Test.bFld) {
                    i2 = i25;
                    iFld1 -= i26;
                    i2 >>>= i26;
                } else if (Test.bFld) {
                    iFld1 += i24;
                    i += (i24 + i25);
                } else {
                    iFld2 += (((i24 * i28) + i26) - i28);
                    for (i29 = i24; i29 < 66; ++i29) {
                        i30 = i26;
                        i += (int)fFld;
                        i25 -= i1;
                        i += i29;
                        iFld1 += (38 + (i29 * i29));
                        i2 += (-69 + (i29 * i29));
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
