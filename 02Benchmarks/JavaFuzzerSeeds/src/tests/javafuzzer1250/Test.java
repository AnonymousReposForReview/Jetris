package tests.javafuzzer1250;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:20:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2170245229L;
    public static float fFld=0.724F;
    public static boolean bFld=false;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(long l, float f, int i4) {

        short s=-2882;
        int i5=-13, i6=37187, i7=-253, i8=1, i9=0, i10=-6, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, 57367);

        s = (short)-1495469501928091134L;
        for (i5 = 4; i5 < 159; i5++) {
            for (i7 = 1; i7 < 10; ++i7) {
                for (i9 = i7; 2 > i9; ++i9) {
                    int i11=10;
                    i8 += (((i9 * i7) + i11) - i5);
                    iArr1[i7 - 1] *= (int)l;
                    l = i4;
                    i6 += (-20 + (i9 * i9));
                    i11 = (int)l;
                }
                l += s;
                i8 += (((i7 * l) + i7) - i6);
                if (b) break;
                l *= (long)-1.806F;
                if (b) continue;
                i4 += (i7 * i10);
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i4 + s + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i3=-13, i12=-2, i13=56279, i14=-2, i15=-60129, i16=-745;
        float f1=0.473F;

        i3 >>>= (int)lMeth1(-2083043964378771218L, f1, i12);
        for (i13 = 9; i13 < 233; ++i13) {
            for (i15 = 1; i15 < 7; i15 += 3) {
                double d=92.125878;
                i16 += i15;
                d *= -160;
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(byte by) {

        int i1=-7, i2=-49266, i17=-24831, i18=-48897, i19=-11, i20=54, i21=-8, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 89);
        FuzzerUtils.init(lArr, -6718L);

        by -= (byte)(-((i1 * i1) << Math.min(i1, i2)));
        Test.instanceCount = (iArr[(i1 >>> 1) % N]--);
        i2 >>= (int)Long.reverseBytes(i2 - lMeth());
        for (i17 = 264; 14 < i17; i17--) {
            for (i19 = 1; 7 > i19; i19++) {
                i21 = 1;
                do {
                    by >>= (byte)Test.instanceCount;
                    i1 = -42351;
                    i1 -= i18;
                    i1 >>= i2;
                    lArr[i21 + 1] -= i17;
                    i18 = i2;
                    Test.bArrFld[i17 - 1] = b1;
                } while (++i21 < 2);
                by += (byte)(i19 * i19);
            }
            i2 += (i17 * i17);
        }
        vMeth_check_sum += by + i1 + i2 + i17 + i18 + i19 + i20 + i21 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-254, i22=-46728, i23=15469, i24=-148, i25=45248, i26=23, i27=14, iArr2[]=new int[N];
        byte by1=14;
        double d1=-2.103736, d2=117.67447;
        short s1=14754;

        FuzzerUtils.init(iArr2, 7);

        Test.instanceCount = (long)Float.intBitsToFloat(i);
        vMeth(by1);
        i >>= (int)Test.instanceCount;
        d1 = 1;
        do {
            Test.fFld *= i;
            Test.instanceCount += (long)d1;
            i22 = 1;
            do {
                i &= -9;
                Test.bArrFld[(int)(d1)] = Test.bFld;
                Test.fFld -= Test.fFld;
                i -= i22;
                i = by1;
                i23 = 1;
                do {
                    i += (i23 ^ s1);
                    i += (i23 * i23);
                    iArr2[i23] >>= (int)Test.instanceCount;
                } while (++i23 < 1);
            } while (++i22 < 167);
            Test.fFld *= i23;
            iArr2[(int)(d1 + 1)] += i22;
            for (i24 = 10; 167 > i24; i24++) {
                switch (((i24 >>> 1) % 2) + 42) {
                case 42:
                    if (Test.bFld) break;
                    i25 = i24;
                    for (i26 = 1; 2 > i26; ++i26) {
                        i += i26;
                        d2 -= Test.fFld;
                        i27 = (int)Test.instanceCount;
                        iArr2[i26 - 1] *= 112;
                    }
                    s1 -= (short)i22;
                    break;
                case 43:
                    if (Test.bFld) break;
                    Test.instanceCount <<= i24;
                    break;
                }
            }
        } while ((d1 += 2) < 300);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
