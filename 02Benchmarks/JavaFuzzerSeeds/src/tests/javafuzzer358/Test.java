package tests.javafuzzer358;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:50:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static int iFld=-1;
    public static double dFld=-30.129811;
    public static byte byFld=12;
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.58226);
        FuzzerUtils.init(Test.sArrFld, (short)-11472);
        FuzzerUtils.init(Test.iArrFld, -26);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(boolean b) {

        int i2=10, i3=-17130, i4=-23695, i5=-5, i6=-18521, i7=-11, iArr[]=new int[N];
        long l=-1124689913L;
        float f1=-122.199F;

        FuzzerUtils.init(iArr, 227);

        Test.instanceCount = 20;
        iArr[(Test.iFld >>> 1) % N] = (int)-7363746512287472005L;
        for (i2 = 1; i2 < 142; ++i2) {
            Test.iFld -= 27709;
            i3 *= 6132;
            if (i3 != 0) {
            }
        }
        for (i4 = 2; i4 < 139; i4++) {
            i6 = 11;
            while (--i6 > 0) {
                for (l = 1; l > 1; --l) {
                    Test.instanceCount = (long)Test.dFld;
                    f1 += (-7 + (l * l));
                    f1 += l;
                    try {
                        i7 = (i4 / i5);
                        iArr[i4 + 1] = (i4 % i3);
                        Test.iFld = (228 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i6;
                    i7 += (13 + (l * l));
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + l + i7 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, short s1) {

        int i1=15177, i8=-119, i9=474, i10=38, i11=-126, i12=37569, i13=-2422;
        boolean b1=false;
        byte by=19;
        double d1=-2.40744;
        float f2=9.144F;

        i1 = Test.sArrFld[(i1 >>> 1) % N];
        i += (int)((iMeth1(b1) * -43825) - Test.instanceCount);
        for (i8 = 23; i8 < 372; ++i8) {
            i10 = 1;
            while (++i10 < 5) {
                i1 *= i1;
                by = (byte)110;
                i9 += -486;
                for (i11 = 1; i11 > 1; i11--) {
                    d1 += Test.instanceCount;
                    Test.iArrFld[i11 - 1] <<= i11;
                    switch ((((i1 >>> 1) % 5) * 5) + 56) {
                    case 78:
                        i9 -= i12;
                        f2 -= i;
                        Test.instanceCount -= i10;
                        break;
                    case 72:
                        Test.iArrFld[i11 + 1] = i10;
                        break;
                    case 59:
                        f2 = i13;
                        break;
                    case 70:
                        i1 += (i11 - i11);
                        break;
                    case 64:
                        if (b1) break;
                        break;
                    }
                }
            }
        }
        long meth_res = i + s1 + i1 + (b1 ? 1 : 0) + i8 + i9 + i10 + by + i11 + i12 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        double d=-96.59734;
        short s=-29490;
        float f=-1.833F;
        int i14=-54944, i15=3, i16=-182, i17=27688;
        boolean b2=true;

        d = (-Test.dArrFld[(Test.iFld >>> 1) % N]);
        Test.iFld >>= (s++);
        f -= (float)((-(Test.iFld + d)) - iMeth(Test.iFld, s));
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i14 = 2; i14 < 246; ++i14) {
            i16 = 1;
            while (++i16 < 7) {
                s = (short)i15;
                Test.iFld = (int)Test.instanceCount;
                Test.iFld <<= i14;
                i17 = 1;
                while (++i17 < 1) {
                    Test.instanceCount = i17;
                    b2 = false;
                    f -= i17;
                }
                Test.iFld <<= (int)Test.instanceCount;
                i15 += i14;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-10, i19=2, i20=8, i21=39269, i22=-37366, i23=-39, i24=-172, i25=56702, i26=61581, i27=-58;
        short s2=9895;
        float f3=69.526F, f4=2.250F, fArr[]=new float[N];
        boolean b3=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 125L);
        FuzzerUtils.init(fArr, 35.900F);

        Test.iFld *= (int)(lMeth() + Test.instanceCount);
        if (b3) {
            Test.instanceCount += (long)-2.823F;
        } else if (b3) {
            Test.instanceCount = -14L;
            for (i18 = 2; 377 > i18; ++i18) {
                Test.instanceCount <<= Test.instanceCount;
            }
            s2 -= (short)i19;
            i20 = 1;
            do {
                Test.iFld = -11;
                i19 += i20;
                switch ((i20 % 1) + 119) {
                case 119:
                    f3 /= (0L | 1);
                    lArr[i20 + 1] -= i20;
                    f3 += (((i20 * Test.iFld) + Test.instanceCount) - Test.iFld);
                    break;
                }
                Test.dFld *= i19;
                fArr[i20] = i19;
                Test.byFld += (byte)i20;
                i19 += i20;
                for (i21 = 1; i21 < 95; i21++) {
                    f3 += i21;
                }
            } while (++i20 < 265);
        }
        for (i23 = 8; 270 > i23; i23++) {
            i24 *= Test.iFld;
            if (b3) {
                i19 = i24;
                for (f4 = 3; f4 < 96; f4++) {
                    Test.iArrFld[i23 + 1] -= (int)Test.instanceCount;
                    i22 *= i22;
                    for (i26 = 1; i26 < 2; i26++) {
                        i24 >>= Test.iFld;
                        f3 *= Test.instanceCount;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
