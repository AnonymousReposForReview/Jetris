package tests.javafuzzer1491;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:18:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static byte byFld=-119;
    public static float fFld=1.1019F;
    public static short sFld=25644;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.lArrFld, 3740556043L);
        FuzzerUtils.init(Test.fArrFld, 0.711F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i3=58865, i4=-18295, i5=-35429, i6=-14, i7=2656;
        float f=-2.933F;
        long l1=-4714814986342930946L, lArr1[][]=new long[N][N];
        boolean b=false, bArr[]=new boolean[N];
        byte by1=-42;

        FuzzerUtils.init(lArr1, 12L);
        FuzzerUtils.init(bArr, true);

        switch (((i3 >>> 1) % 4) + 8) {
        case 8:
            for (i4 = 6; i4 < 387; ++i4) {
                f *= i4;
                i6 = 4;
                while (--i6 > 0) {
                    double d=2.2727;
                    for (l1 = 1; l1 < 1; l1++) {
                        Test.instanceCount |= Test.instanceCount;
                        Test.iArrFld[(int)(l1)] = i3;
                        if (b) break;
                        i3 += (int)l1;
                        by1 >>= (byte)i5;
                        i3 -= i3;
                        f = i4;
                    }
                    d *= i5;
                    Test.instanceCount *= by1;
                    i3 <<= i4;
                }
            }
            break;
        case 9:
            lArr1[(i5 >>> 1) % N][(i6 >>> 1) % N] >>= -47001;
        case 10:
            bArr[(i7 >>> 1) % N] = b;
            break;
        case 11:
            Test.instanceCount *= -200;
            break;
        }
        vMeth_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + l1 + i7 + (b ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth1(long l) {

        int i9=-9, i10=41863, i11=32268, i12=153, i13=-43;
        float f1=-24.291F;
        short s=20935;
        boolean b1=false;

        vMeth();
        i9 = 1;
        do {
            for (i10 = 1; i10 < 7; i10++) {
                f1 += -10;
                i11 /= 12;
                Test.lArrFld[i9] ^= l;
                Test.byFld >>>= (byte)i10;
                Test.fArrFld = Test.fArrFld;
                s += (short)(i10 | s);
                Test.instanceCount += i11;
                i11 >>>= (int)-73660880922145031L;
                for (i12 = 1; i12 < 2; i12++) {
                    i13 += (((i12 * f1) + f1) - f1);
                }
                if (b1) break;
            }
            i13 &= (int)Test.instanceCount;
        } while (++i9 < 248);
        long meth_res = l + i9 + i10 + i11 + Float.floatToIntBits(f1) + s + i12 + i13 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-3, i2=3, i15=83, i16=0;
        byte by=-48, byArr[]=new byte[N];
        long lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr, 4055141803L);
        FuzzerUtils.init(byArr, (byte)-111);
        FuzzerUtils.init(dArr, 1.86983);

        for (i1 = 18; i1 < 311; ++i1) {
            i2 *= (int)((lArr[i1 - 1]++) - (67.614F - (0.73395 - (by / (i2 | 1)))));
            Test.instanceCount += Math.abs(byArr[i1] - iMeth1(Test.instanceCount));
            if (i1 != 0) {
            }
            i15 = 1;
            do {
                i16 = 1;
                while (++i16 < 1) {
                    Test.instanceCount += (((i16 * i1) + i16) - i1);
                    dArr[i15][i1 + 1] = Test.fFld;
                    i2 = i2;
                    Test.iArrFld[i1] -= (int)2.201F;
                    Test.iArrFld[(i2 >>> 1) % N] = -142;
                    i2 += (i16 ^ i15);
                    i2 += (((i16 * i16) + Test.sFld) - i1);
                    i2 *= (int)Test.instanceCount;
                    i2 <<= (int)Test.instanceCount;
                }
            } while (++i15 < 6);
        }
        long meth_res = i1 + i2 + by + i15 + i16 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-154;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -3.850F);

        fArr[(i >>> 1) % N] = (iMeth() - -7);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
