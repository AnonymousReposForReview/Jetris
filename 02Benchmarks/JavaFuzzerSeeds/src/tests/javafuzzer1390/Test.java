package tests.javafuzzer1390;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:34:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2435537560020445571L;
    public static byte byFld=-71;
    public float fFld=1.487F;
    public static int iFld=156;
    public static double dFld=1.23876;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.911F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, int i6, long l3) {

        int i7=-152, i8=163, i9=70, i10=190, i11=-14, iArr[]=new int[N];
        double d=0.119738;
        boolean b=true;
        float f=-84.545F;

        FuzzerUtils.init(iArr, -3);

        for (i7 = 8; i7 < 200; i7 += 3) {
            i6 = i6;
            for (d = 1; d < 24; ++d) {
                if (b) break;
                i9 = (int)l2;
                i6 -= (int)Test.instanceCount;
            }
            f = 1;
            while (++f < 24) {
                for (i10 = 1; i10 < 1; i10++) {
                    if (true) {
                        i11 += (((i10 * l3) + i9) - Test.instanceCount);
                        l3 += i9;
                        try {
                            i6 = (i8 / 97);
                            i11 = (i6 / 1637);
                            iArr[i7 + 1] = (i8 % 46);
                        } catch (ArithmeticException a_e) {}
                        i6 *= i11;
                    } else if (b) {
                        Test.instanceCount += (long)f;
                        i9 *= i11;
                    } else if (b) {
                        i11 >>= i9;
                    } else {
                        i6 = (int)f;
                    }
                }
            }
        }
        vMeth1_check_sum += l2 + i6 + l3 + i7 + i8 + Double.doubleToLongBits(d) + i9 + (b ? 1 : 0) +
            Float.floatToIntBits(f) + i10 + i11 + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i4, long l1, int i5) {

        int i12=-6115, i13=-11, i14=-6694, i15=-9, i16=-190, i17=11, iArr1[]=new int[N];
        boolean b1=true;
        float f1=0.708F;

        FuzzerUtils.init(iArr1, -41753);

        vMeth1(l1, i5, Test.instanceCount);
        for (i12 = 10; i12 < 187; i12++) {
            i4 = i5;
            iArr1[i12 - 1] &= i12;
            i14 = i5;
            Test.instanceCount += i12;
            switch (((i12 % 4) * 5) + 43) {
            case 46:
                for (i15 = i12; i15 < 9; ++i15) {
                    i14 >>>= i4;
                    i16 &= i14;
                    i14 = i4;
                    if (b1) continue;
                    l1 = -10L;
                    Test.instanceCount *= i17;
                    f1 = 77;
                }
            case 54:
                iArr1[i12 - 1] <<= i14;
                break;
            case 57:
                i4 += i16;
                break;
            case 47:
                Test.fArrFld[i12] = i14;
                break;
            default:
                f1 += (((i12 * i5) + l1) - Test.byFld);
            }
        }
        long meth_res = i4 + l1 + i5 + i12 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        int i2=-214, i3=-5, i18=2, i19=13, iArr2[]=new int[N];
        double d1=-127.30076;
        float f2=78.539F;

        FuzzerUtils.init(iArr2, -3);

        for (i2 = 4; i2 < 237; i2++) {
            i += i1;
            lMeth(i2, -296417006432434764L, i2);
            d1 = i3;
            i += i1;
            l = i1;
            i3 = i3;
            iArr2[i2 + 1] = i;
            for (i18 = 1; i18 < 7; ++i18) {
                i1 = i19;
                i += (int)f2;
                i19 >>= 1;
                iArr2[i2] -= (int)2.7360;
            }
            d1 *= i2;
        }
        iArr2[(i >>> 1) % N] += 298;
        vMeth_check_sum += l + i + i1 + i2 + i3 + Double.doubleToLongBits(d1) + i18 + i19 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i20=-11, i21=-23, i22=7, i23=240, i24=56877, i25=0;
        boolean b2=true;

        vMeth(Test.instanceCount, i20, i20);
        for (i21 = 15; i21 < 341; ++i21) {
            fFld = Test.iFld;
            iArrFld[i21] <<= i21;
            Test.instanceCount += i21;
            Test.instanceCount += (((i21 * i21) + i21) - Test.byFld);
            i23 = 77;
            do {
                i24 = 2;
                while (--i24 > 0) {
                    try {
                        Test.iFld = (i22 / 213);
                        i20 = (iArrFld[i23 + 1] / Test.iFld);
                        i22 = (iArrFld[i24 - 1] / -142);
                    } catch (ArithmeticException a_e) {}
                    fFld += (((i24 * i20) + Test.iFld) - i23);
                    iArrFld[i23 + 1] >>= 204;
                }
                if (true) {
                    Test.instanceCount = -962888640L;
                    i20 *= (int)6L;
                } else if (b2) {
                    i20 -= i23;
                    Test.instanceCount = i24;
                    i22 -= (int)fFld;
                    i22 *= i22;
                } else {
                    i22 = (int)-96.17771;
                }
                i22 >>= i22;
                Test.iFld -= i21;
                if (b2) break;
                i25 = 2;
                while ((i25 -= 3) > 0) {
                    if (b2) continue;
                    iArrFld[i25] = (int)Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld >>= i25;
                    Test.dFld *= i23;
                    i20 *= 11783;
                    i20 >>= -67;
                }
            } while ((i23 -= 2) > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
