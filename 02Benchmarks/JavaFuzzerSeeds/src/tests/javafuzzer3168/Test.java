package tests.javafuzzer3168;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:08:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3675307435L;
    public static int iFld=156;
    public static float fFld=0.675F;
    public static volatile short sFld=29469;
    public static byte byFld=-5;
    public static double dFld=0.84445;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.lArrFld, 0L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by) {

        int i1=29, i2=38, i3=5358, i4=-6, i5=-74, i6=90, i7=-19334, i8=630, i9=65, iArr1[]=new int[N];
        double d1=-8.64907, dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(dArr1, 20.76306);

        for (i1 = 226; i1 > 14; i1 -= 3) {
            Test.instanceCount = -25908;
        }
        i3 = 1;
        while (++i3 < 166) {
            Test.iFld -= i2;
            switch (((i3 % 2) * 5) + 27) {
            case 32:
                for (i4 = 1; i4 < 10; i4++) {
                    Test.fFld -= Test.fFld;
                }
                Test.instanceCount = Test.instanceCount;
                break;
            case 31:
                Test.sFld = (short)i2;
                try {
                    Test.iFld = (i4 % 210);
                    i2 = (i3 % -264264894);
                    iArr1[i3 + 1] = (47916 % iArr1[i3 + 1]);
                } catch (ArithmeticException a_e) {}
                for (i6 = 10; i6 > 1; --i6) {
                    for (i8 = 1; i8 < 2; i8 += 3) {
                        Test.instanceCount *= (long)d1;
                        dArr1[i8] = i5;
                        iArr1 = FuzzerUtils.int1array(N, (int)25765);
                    }
                }
                break;
            default:
                i2 -= i7;
            }
        }
        vMeth1_check_sum += by + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth() {

        int i10=12, i11=11, i12=0, i13=251, i14=13, i15=-13, iArr2[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 6);

        vMeth1(Test.byFld);
        for (i10 = 11; i10 < 339; ++i10) {
            for (i12 = 1; i12 < 5; i12++) {
                Test.iArrFld[i10 - 1] <<= -8078;
                Test.iFld += (i12 * i12);
                for (i14 = 1; i14 < 2; ++i14) {
                    i15 <<= Test.iFld;
                    bArr[i12] = b;
                    b = b;
                    Test.instanceCount -= 11;
                    iArr2[i12 - 1] = i11;
                    b = false;
                    Test.fFld = (float)-1.68015;
                    Test.dFld += -4.124089;
                    i13 = (int)Test.fFld;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(float f, long l, double d) {

        int i16=-14, i17=-1, i18=30447, i19=-12;

        Test.iFld = Test.iFld;
        vMeth();
        Test.instanceCount *= Test.instanceCount;
        l = 1883842501L;
        for (i16 = 6; i16 < 319; i16++) {
            i17 -= i17;
            Test.iArrFld[i16 + 1] += (int)-1637488357126089464L;
            switch (((i16 >>> 1) % 5) + 46) {
            case 46:
                for (i18 = i16; i18 < 5; ++i18) {
                    l -= (long)Test.dFld;
                    i17 *= i19;
                    Test.instanceCount += (long)Test.dFld;
                    Test.iArrFld[i18 + 1] >>= i18;
                }
                break;
            case 47:
                Test.lArrFld = Test.lArrFld;
                Test.byFld += (byte)(((i16 * i18) + Test.instanceCount) - l);
            case 48:
                Test.iFld = i16;
                break;
            case 49:
                Test.iFld += (((i16 * l) + Test.instanceCount) - Test.fFld);
                break;
            case 50:
                i19 = i19;
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + Double.doubleToLongBits(d) + i16 + i17 + i18 + i19;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i20=-38, i21=-2, i22=-40449, i23=169, i24=-37876, i25=8976, iArr[]=new int[N];
        double d2=1.27405, dArr[][]=new double[N][N];
        boolean b1=false, bArr1[]=new boolean[N];

        FuzzerUtils.init(dArr, -52.18786);
        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(bArr1, false);

        i = i;
        i = (int)(dArr[(Test.iFld >>> 1) % N][(i >>> 1) % N]--);
        iArr[(i >>> 1) % N] -= (int)(Test.instanceCount + (Math.abs(i) * i));
        i *= (++i);
        iArr[(i >>> 1) % N] -= (int)(--Test.fFld);
        Test.iFld += (--Test.iFld);
        fMeth(2.883F, Test.instanceCount, 0.126141);
        i20 = 1;
        while (++i20 < 213) {
            Test.fFld += (i20 - i);
            Test.instanceCount = Test.iFld;
            i += (i20 | i);
            Test.iFld += (int)Test.instanceCount;
            for (d2 = i20; d2 < 118; ++d2) {
                bArr1[(int)(d2 + 1)] = b1;
                i21 = (int)7941L;
            }
            Test.sFld <<= (short)i21;
            Test.dFld *= Test.fFld;
            for (i22 = 5; 118 > i22; ++i22) {
                for (i24 = 1; 2 > i24; ++i24) {
                    Test.instanceCount = i;
                    i25 += (int)Test.instanceCount;
                    switch ((i24 % 2) + 37) {
                    case 37:
                        Test.byFld += (byte)i;
                        Test.iArrFld[i24] -= (int)Test.dFld;
                        switch (((i20 % 2) * 5) + 112) {
                        case 115:
                            i25 = i24;
                            Test.instanceCount += i24;
                            Test.sFld += (short)i25;
                            break;
                        case 117:
                        }
                        i23 = i24;
                        break;
                    case 38:
                        bArr1[i22] = false;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
