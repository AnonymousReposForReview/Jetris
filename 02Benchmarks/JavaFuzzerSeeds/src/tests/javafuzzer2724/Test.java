package tests.javafuzzer2724;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:18:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2152154794L;
    public static float fFld=0.913F;
    public static short sFld=13138;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[][]=new float[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 60872);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, 60.432F);
        FuzzerUtils.init(Test.byArrFld, (byte)92);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {

        int i5=3, i6=-5, i7=-14, i8=3804;
        double d1=1.44668;
        short s=-32055;
        boolean b=false;

        i4 += (int)Test.instanceCount;
        for (i5 = 21; i5 < 393; i5++) {
            Test.instanceCount += i5;
            for (d1 = i5; d1 < 5; ++d1) {
                i8 = 1;
                do {
                    Test.instanceCount = i4;
                    Test.instanceCount += (i8 * i8);
                    Test.instanceCount >>= 12;
                    i7 += (int)Test.instanceCount;
                    i7 |= s;
                    if (false) break;
                } while (++i8 < 1);
                Test.bArrFld[i5 - 1] = b;
                i4 += (-36485 + (d1 * d1));
                Test.fFld = Test.fFld;
                Test.fArrFld[(int)(d1)][i5 + 1] = i6;
            }
        }
        long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + s + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, double d) {

        int i3=-18586, i9=-182, i10=-62331, i11=20224, i12=106;
        short s1=12196;
        byte by=94;

        i3 = 1;
        while (++i3 < 270) {
            i2 = ((--i2) + iMeth1(i3));
        }
        for (i9 = 223; i9 > 9; i9 -= 2) {
            Test.iArrFld[i9 - 1] &= s1;
            for (i11 = 15; i11 > 1; i11--) {
                switch ((i11 % 5) + 58) {
                case 58:
                    i10 += s1;
                case 59:
                    d = Test.instanceCount;
                    Test.iArrFld[i11] -= i12;
                    i12 >>= (int)Test.instanceCount;
                    break;
                case 60:
                    i10 += (i11 | by);
                    Test.iArrFld[i11] = i9;
                    break;
                case 61:
                    i2 = i11;
                    i2 += i11;
                    i10 += (64 + (i11 * i11));
                    break;
                case 62:
                    i2 += (i11 + i2);
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i3 + i9 + i10 + s1 + i11 + i12 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i=70, i1=-3, i13=-5, i14=-3, i15=-5451, i16=31;
        double d2=-117.80245;
        boolean b1=true;
        byte by1=-57;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 49966L);

        i = 1;
        while (++i < 174) {
            i1 = 1;
            while (++i1 < 9) {
                Test.iArrFld[i] = iMeth(-20, d2);
                i13 *= Test.sFld;
            }
            switch (((i % 8) * 5) + 28) {
            case 59:
                i13 = (int)Test.fFld;
                Test.instanceCount += (-88 + (i * i));
                if (b1) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-10471);
                    lArr[i] *= i13;
                    Test.instanceCount += i;
                    for (i14 = 1; 9 > i14; i14 += 2) {
                        i13 *= (int)Test.instanceCount;
                        Test.iArrFld[i - 1] *= i16;
                        i16 += (((i14 * i13) + i14) - i1);
                    }
                } else if (b1) {
                    i16 += (i * i);
                } else if (b1) {
                    i15 -= 121;
                } else {
                    Test.instanceCount -= by1;
                }
                break;
            case 60:
                Test.iArrFld[i] = i15;
            case 55:
                Test.iArrFld[i] = i13;
                break;
            case 51:
                i15 += i;
                break;
            case 47:
                Test.instanceCount -= 136;
                break;
            case 56:
                Test.fFld *= i16;
                break;
            case 62:
                i15 += (i * i);
                break;
            case 45:
                Test.byArrFld[i - 1] = (byte)Test.fFld;
                break;
            default:
                Test.iArrFld[(i15 >>> 1) % N] -= i1;
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=6;

        vMeth();
        i17 = i17;
        Test.iArrFld[(i17 >>> 1) % N] += i17;
        i17 -= i17;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
