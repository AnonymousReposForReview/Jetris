package tests.javafuzzer2244;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:47:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public float fFld=58.874F;
    public byte byFld=55;
    public static short sFld=-18093;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-20542);
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.fArrFld, -63.106F);
    }

    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public void vMeth(int i2, int i3, short s1) {

        long l1=-3769724224L;
        int i4=15, i5=-12, i6=-14, i7=-1, iArr[][]=new int[N][N];
        double d1=1.85767;
        byte by1=35;

        FuzzerUtils.init(iArr, 14);

        Test.instanceCount += i3;
        for (l1 = 20; l1 < 389; l1++) {
            for (i5 = 1; i5 < 5; ++i5) {
                i7 = 1;
                while (++i7 < 2) {
                    switch ((int)((l1 % 9) + 57)) {
                    case 57:
                        iArr[i5][i7] *= i2;
                        break;
                    case 58:
                        iArr[i7][i5 - 1] += 0;
                        break;
                    case 59:
                        i3 = (int)fFld;
                        iArr[i5 - 1][i5] -= s1;
                        break;
                    case 60:
                        iArr[i7 - 1][(int)(l1 - 1)] >>= -40;
                    case 61:
                        d1 = Test.instanceCount;
                        s1 *= (short)i6;
                        try {
                            i2 = (-20258 / i7);
                            i3 = (-12 % i5);
                            i3 = (iArr[(int)(l1 - 1)][i5] % -5);
                        } catch (ArithmeticException a_e) {}
                        i3 >>= i5;
                    case 62:
                        by1 += (byte)(i7 * i7);
                    case 63:
                        i6 = i5;
                        break;
                    case 64:
                        byFld &= (byte)48062;
                    case 65:
                        i6 = (int)fFld;
                    default:
                        i3 = by1;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + s1 + l1 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public float fMeth(float f, long l) {

        int i8=88;

        vMeth(155, i8, (short)(-11630));
        Test.iArrFld = Test.iArrFld;
        Test.iArrFld[(i8 >>> 1) % N] -= i8;
        i8 = i8;
        long meth_res = Float.floatToIntBits(f) + l + i8;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public boolean bMeth(int i1, byte by) {

        int i9=-284, i10=-45917, i11=21576;
        double d2=33.65425, d3=71.111967;
        boolean b1=false;

        for (short s : Test.sArrFld) {
            i1 <<= (int)(((-3 - fMeth(fFld, Test.instanceCount)) * fFld) * i1);
            try {
                Test.iArrFld[(i1 >>> 1) % N] = (Test.iArrFld[(10679 >>> 1) % N] / 53697);
                i1 = (i1 / i1);
                i1 = (-37 / i1);
            } catch (ArithmeticException a_e) {}
            i9 = 1;
            while (++i9 < 4) {
                i1 *= i1;
            }
            Test.iArrFld[(i1 >>> 1) % N] = i9;
            i10 = 1;
            while (++i10 < 4) {
                Test.iArrFld[i10 - 1] = i10;
                d2 *= Test.instanceCount;
                if (i10 != 0) {
                    return ((int)(i1 + by + i9 + i10 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i11
                        + (b1 ? 1 : 0))) % 2 > 0;
                }
                Test.instanceCount &= Test.instanceCount;
                for (d3 = 1; d3 < 1; ++d3) {
                    if (b1) {
                        i1 /= (int)(i11 | 1);
                        i11 -= (int)d2;
                    } else {
                        Test.instanceCount >>= i1;
                    }
                }
            }
        }
        long meth_res = i1 + by + i9 + i10 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i11 + (b1 ? 1
            : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i12=0, i13=-138, i14=-48, i15=172;
        double d=58.113556, d4=75.128906;
        boolean b=false;

        i += (int)(i = (int)((long)(fFld * Test.instanceCount) << (long)(d + i)));
        b = bMeth(i, byFld);
        for (d4 = 2; d4 < 240; ++d4) {
            Test.iArrFld[(int)(d4 + 1)] = byFld;
            i13 = (int)-1.609F;
            for (i14 = 106; i14 > d4; i14--) {
                Test.instanceCount -= i12;
                i += i14;
                fFld += ((long)i14 ^ (long)i);
                switch ((int)(((d4 % 1) * 5) + 127)) {
                case 131:
                    i = 51369;
                    byFld = (byte)i13;
                    fFld = Test.sFld;
                    i13 *= (int)Test.instanceCount;
                    break;
                default:
                    Test.fArrFld[i14] = i13;
                }
                i += i12;
                Test.iArrFld[(int)(d4)] -= (int)Test.instanceCount;
            }
        }
        i13 <<= i13;
        Test.instanceCount += (long)d4;
        i13 += (int)Test.instanceCount;
        i15 /= (int)(i14 | 1);
        i13 = -18;
        b = b;
        i -= i14;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  fMeth ->  fMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
