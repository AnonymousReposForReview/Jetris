package tests.javafuzzer684;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:57:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-226L;
    public static int iFld=-21592;
    public static boolean bFld=false;
    public static byte byFld=-37;
    public float fFld=0.495F;
    public volatile double dFld=-109.25660;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7224L);
        FuzzerUtils.init(Test.iArrFld, 38751);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4, int i5) {

        int i6=7, i7=10, iArr[]=new int[N];
        float f1=0.355F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 839242311L);
        FuzzerUtils.init(iArr, -21680);

        for (long l3 : lArr1) {
            if (i4 != 0) {
            }
            Test.instanceCount = (long)101.114F;
            iArr[(i5 >>> 1) % N] &= (int)Test.instanceCount;
            iArr[(i5 >>> 1) % N] = Test.iFld;
            if (Test.bFld) break;
            if (Test.bFld) {
                for (i6 = 1; i6 < 4; i6++) {
                    i4 = (int)-1271054501L;
                    f1 += i6;
                    lArr1[i6] >>= i5;
                    Test.instanceCount += i6;
                }
                Test.byFld *= (byte)-46299L;
            } else {
                lArr1[(11 >>> 1) % N] += Test.instanceCount;
                Test.iFld -= (int)f1;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l1) {

        long l2=6295486400350945770L, l4=-6568288617130634462L, lArr[][]=new long[N][N];
        float f2=1.431F;
        int i8=-10, i10=64077, i11=-4, i12=29395, i13=-27595, iArr1[][]=new int[N][N], iArr2[]=new int[N];

        FuzzerUtils.init(lArr, 229L);
        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(iArr2, -57);

        l2 = 1;
        while (++l2 < 301) {
            Test.iFld += (int)(lArr[(int)(l2 - 1)][(int)(l2 + 1)] <<= (long)(Test.iFld + (32774 - fMeth(Test.iFld,
                Test.iFld))));
            iArr1[(int)(l2 + 1)][(int)(l2 - 1)] |= (int)Test.instanceCount;
            l1 ^= 13;
            iArr1[(int)(l2)][(int)(l2 + 1)] -= (int)Test.instanceCount;
            f2 += Test.instanceCount;
            l4 += (l2 - l4);
            i8 = 1;
            do {
                l1 >>= 5;
            } while (++i8 < 5);
            Test.iFld -= (int)l1;
        }
        for (i10 = 4; 235 > i10; ++i10) {
            l1 -= -11327;
            for (i12 = i10; 7 > i12; ++i12) {
                i11 -= (int)l1;
                iArr2[i12 - 1] = (int)l1;
            }
        }
        vMeth1_check_sum += l1 + l2 + Float.floatToIntBits(f2) + l4 + i8 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l) {

        int i=-234, i1=-76, i2=-9, i3=33, iArr3[][]=new int[N][N];
        float f=102.879F;
        double d=51.63403;

        FuzzerUtils.init(iArr3, 9);

        for (i = 7; i < 143; ++i) {
            i2 = 1;
            do {
                i1 += (i1++);
                i3 = 1;
                do {
                    short s=14955;
                    i1 += (((i3 * l) + i2) - f);
                    l = (long)(((-(Test.instanceCount * i1)) + (d = 2.16225)) - l);
                    i1 = (int)(((i2 - f) * Math.min(-55L, l)) + ((l * l) >>> (long)(l * f)));
                    vMeth1(l);
                    Test.iFld >>= s;
                    i1 += (i3 + i1);
                    i1 >>= i2;
                    Test.iFld &= i;
                } while (--i3 > 0);
                Test.instanceCount = Test.iFld;
            } while (++i2 < 12);
            i1 >>>= i3;
            try {
                iArr3[i][i + 1] = (i % iArr3[i][i - 1]);
                i1 = (Test.iFld % iArr3[i][i - 1]);
                Test.iFld = (i1 % i1);
            } catch (ArithmeticException a_e) {}
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i14=18689, i15=15871, i16=44416, i17=-4, i18=-3, i19=248, i20=-155;
        short s1=-9000;
        long l5=-187L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -67.103281);

        vMeth(Test.instanceCount);
        for (i14 = 13; i14 < 322; i14++) {
            Test.lArrFld[i14] <<= i15;
            Test.iFld = i14;
            if (Test.bFld) {
                if (Test.bFld) {
                    switch (((Test.iFld >>> 1) % 2) + 22) {
                    case 22:
                        for (i16 = 4; 81 > i16; ++i16) {
                            try {
                                i15 = (i16 % -255);
                                Test.iFld = (i17 / -58304);
                                i17 = (121533862 % Test.iFld);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount += (((i16 * fFld) + i14) - i15);
                            s1 = (short)Test.iFld;
                            Test.instanceCount -= i17;
                        }
                        i15 = i17;
                    case 23:
                        if (Test.bFld) break;
                        i15 |= i14;
                        Test.iArrFld[i14] += (int)fFld;
                        Test.instanceCount += i16;
                    default:
                        Test.iArrFld = Test.iArrFld;
                        for (i18 = 5; i18 < 81; i18 += 3) {
                            i19 += i16;
                            if (Test.bFld) continue;
                            i15 ^= (int)Test.instanceCount;
                            Test.instanceCount -= i16;
                            switch ((i18 % 10) + 79) {
                            case 79:
                                Test.iArrFld[i18] <<= (int)Test.instanceCount;
                                i15 -= (int)Test.instanceCount;
                                for (l5 = 1; 4 > l5; ++l5) {
                                    i19 += 0;
                                    Test.instanceCount += (l5 * i20);
                                    dArr[i18 + 1] += 15623;
                                }
                            case 80:
                                Test.byFld += (byte)fFld;
                                break;
                            case 81:
                                Test.iFld -= 8;
                                break;
                            case 82:
                                Test.iArrFld[i14 - 1] = (int)-932L;
                            case 83:
                                i19 += (int)Test.instanceCount;
                                break;
                            case 84:
                                fFld -= (float)dFld;
                                break;
                            case 85:
                                i20 += i20;
                                break;
                            case 86:
                                Test.instanceCount += i18;
                                break;
                            case 87:
                                Test.instanceCount += i18;
                            case 88:
                            }
                        }
                    }
                } else if (Test.bFld) {
                    Test.iArrFld[i14] += Test.iFld;
                } else if (Test.bFld) {
                    i19 <<= 60557;
                }
            } else {
                Test.instanceCount += (((i14 * Test.instanceCount) + s1) - Test.instanceCount);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
