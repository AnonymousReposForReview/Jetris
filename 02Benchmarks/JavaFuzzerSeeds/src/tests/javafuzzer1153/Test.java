package tests.javafuzzer1153;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:55:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2393337272153213529L;
    public boolean bFld=false;
    public short sFld=-4910;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i4) {

        int i5=-5, i6=32413, i7=-88, i8=12, i9=199;
        float f1=1.522F;
        long l=-6661L, lArr1[]=new long[N];
        short s=16546;

        FuzzerUtils.init(lArr1, -2018426390936296333L);

        for (i5 = 5; i5 < 157; i5++) {
            Test.instanceCount += (i5 - Test.instanceCount);
            i4 += (i5 * i5);
            i4 ^= i6;
            i4 += (int)Test.instanceCount;
            for (i7 = 1; 10 > i7; ++i7) {
                i8 -= i5;
                if (i6 != 0) {
                }
                i4 -= (int)Test.instanceCount;
                i4 -= (int)f1;
                i8 += (((i7 * i4) + f1) - Test.instanceCount);
                i4 = i4;
                for (l = 1; l < 2; ++l) {
                    i4 += (int)(((l * s) + s) - i7);
                    lArr1[i5 - 1] = i9;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + l + i9 + s + FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        float f=2.578F;
        int i3=15955, i10=-59212, i11=-29501, i12=-178, i13=74, i14=9;
        long l1=-3L, lArr[]=new long[N];
        short s1=-17895;
        double d=2.83679;

        FuzzerUtils.init(lArr, -4828795994070724964L);

        for (f = 18; f < 332; f++) {
            lArr[(int)(f + 1)] = (long)(lMeth1(i3) * f);
            for (l1 = 1; l1 < 5; ++l1) {
                for (i11 = 1; i11 < 2; ++i11) {
                    i12 = (int)21L;
                    Test.iArrFld[(int)(f)] = i11;
                    s1 >>>= (short)i10;
                    i10 += i11;
                    d += i12;
                    i10 += (((i11 * f) + i12) - i11);
                    i3 = (int)Test.instanceCount;
                }
                for (i13 = (int)(f); i13 < 2; ++i13) {
                    Test.instanceCount = Test.instanceCount;
                    i10 += i10;
                    i14 -= (int)f;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + l1 + i10 + i11 + i12 + s1 + Double.doubleToLongBits(d) + i13 +
            i14 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i, int i1, int i2) {


        Test.iArrFld[(i1 >>> 1) % N] = i;
        i -= (int)lMeth();
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        int i15=254, i16=-36, i17=0, i18=-59, i19=135, i20=61, i21=10920, i22=-8474, i23=22635, i24=-49;
        float f2=1.362F, fArr[]=new float[N];
        double d1=2.50798;

        FuzzerUtils.init(fArr, -2.912F);

        for (int smallinvoc=0; smallinvoc<220; smallinvoc++) vSmallMeth(i15, i15, 120);
        for (i16 = 20; i16 < 346; i16++) {
            i17 = i16;
            bFld = bFld;
        }
        i18 = 329;
        do {
            for (i19 = 2; i19 < 76; i19++) {
                Test.instanceCount += (i19 * i19);
                i20 |= i15;
                for (i21 = i19; i21 < 2; i21++) {
                    i17 = 57;
                    i20 += i21;
                    Test.instanceCount = i19;
                    Test.instanceCount &= i15;
                    try {
                        i15 = (Test.iArrFld[(i21 >>> 1) % N] / i19);
                        i15 = (-59266 / i19);
                        i23 = (31025 % i16);
                    } catch (ArithmeticException a_e) {}
                    f2 += (48940 + (i21 * i21));
                    switch (((i18 >>> 1) % 9) + 11) {
                    case 11:
                        i20 += i21;
                        i17 *= 7;
                        break;
                    case 12:
                        Test.iArrFld[i21 + 1] *= (int)178L;
                        i22 += (18032 + (i21 * i21));
                        f2 = i15;
                        fArr[i18] -= i20;
                        break;
                    case 13:
                        i15 = i21;
                        if (bFld) continue;
                        i24 <<= -17;
                        break;
                    case 14:
                        Test.iArrFld[i21] *= (int)Test.instanceCount;
                        Test.instanceCount -= i21;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-34032);
                        i22 = i19;
                    case 15:
                        i24 |= i23;
                        break;
                    case 16:
                        i22 -= sFld;
                        break;
                    case 17:
                        Test.instanceCount -= (long)d1;
                        break;
                    case 18:
                        Test.instanceCount ^= i18;
                        break;
                    case 19:
                        bFld = bFld;
                    default:
                        Test.iArrFld[i21] >>= i21;
                    }
                }
            }
        } while (--i18 > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  lMeth1 ->  lMeth1 lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
