package tests.javafuzzer2597;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:59:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-601103511734792816L;
    public static int iFld=-54696;
    public static short sFld=-18077;
    public static byte byFld=89;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 40616);
        FuzzerUtils.init(Test.sArrFld, (short)-19441);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static void vSmallMeth() {

        byte by=-32;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1278852144L);

        lArr[(24226 >>> 1) % N] = (((Test.iFld >> Test.iFld) * (Test.iFld - Test.iFld)) -
            Short.reverseBytes(Short.reverseBytes(Test.sFld)));
        Test.iFld -= (by++);
        vSmallMeth_check_sum += by + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i4, boolean b) {

        float f=-1.958F;

        Test.iFld *= (int)f;
        vMeth_check_sum += i4 + (b ? 1 : 0) + Float.floatToIntBits(f);
    }

    public static long lMeth1(byte by1, byte by2) {

        int i5=-241, i6=27530, i7=-13, iArr[][]=new int[N][N];
        float f1=-1.250F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-25282);
        FuzzerUtils.init(iArr, 13);

        for (i5 = 9; i5 < 318; i5++) {
            sArr[i5 + 1] += (short)Float.intBitsToFloat(iArr[i5 - 1][i5]++);
            Test.iFld = by2;
            Test.iFld |= ((i6++) - (--Test.iFld));
        }
        iArr[(i7 >>> 1) % N][(Test.iFld >>> 1) % N] += (++i6);
        vSmallMeth();
        f1 -= Test.sFld;
        i6 = i5;
        long meth_res = by1 + by2 + i5 + i6 + i7 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(long l) {

        double d=115.31446;
        byte by3=33;
        long l1=3L;
        int i8=36805;

        d -= lMeth1(Test.byFld, by3);
        Test.iFld += (int)Test.instanceCount;
        for (l1 = 13; l1 < 242; l1++) {
            Test.iFld = Test.iFld;
            Test.iFld += i8;
            if (Test.iFld != 0) {
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + by3 + l1 + i8;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=2, i2=41594, i3=45195, i9=-6, i10=12, i11=82, i12=0, i13=145, i14=0;
        boolean b1=true;
        float f2=34.825F, fArr[]=new float[N];
        double dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 10.4132);
        FuzzerUtils.init(fArr, 2.772F);
        FuzzerUtils.init(byArr, (byte)85);

        Test.iFld *= Test.iFld;
        for (int smallinvoc=0; smallinvoc<156; smallinvoc++) vSmallMeth();
        vSmallMeth();
        for (i = 3; i < 279; i++) {
            for (i2 = 4; i2 < 91; i2++) {
                vMeth((int)(((--Test.instanceCount) - (--i3)) - lMeth(Test.instanceCount)), b1);
                Test.iArrFld[i2] *= Test.iFld;
            }
            Test.iFld += Test.iFld;
            f2 = i;
            Test.iArrFld = Test.iArrFld;
            Test.instanceCount = i2;
            for (i9 = 5; 91 > i9; ++i9) {
                for (i11 = 1; i11 < 2; ++i11) {
                    double d1=-113.34804;
                    Test.instanceCount -= -129;
                    dArr[i] += Test.iFld;
                    Test.instanceCount += (i11 + i9);
                    lArrFld[i] -= -13;
                    Test.sArrFld[i + 1] = (short)d1;
                    d1 *= i3;
                    dArr = dArr;
                }
                Test.instanceCount *= 16909;
                i12 = (int)Test.instanceCount;
            }
        }
        i10 = (int)136L;
        i13 = 1;
        do {
            fArr[i13 + 1] *= i3;
            byArr[i13 - 1] = (byte)f2;
            Test.iArrFld[i13] += i3;
            i14 = 1;
            while (++i14 < 285) {
                i10 += (i14 ^ i3);
            }
            Test.iArrFld[i13 - 1] = Test.iFld;
        } while ((i13 += 2) < 177);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth1 lMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
