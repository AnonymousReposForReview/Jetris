package tests.javafuzzer265;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:06:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62696L;
    public int iFld=12;
    public static byte byFld=47;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 230);
        FuzzerUtils.init(Test.lArrFld, 7598L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, int i9, int i10) {

        int i11=147, i12=-56785, i13=12, i14=-39869, i15=46, i16=11923, i17=-14, iArr1[]=new int[N];
        boolean b=false;
        short s=20287;

        FuzzerUtils.init(iArr1, -40);

        i8 <<= i8;
        for (i11 = 8; i11 < 351; ++i11) {
            i13 = i13;
            for (i14 = 1; i14 < 5; ++i14) {
                if (true) continue;
                b = b;
                iArr1[i11] = (int)Test.instanceCount;
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.instanceCount *= i12;
                }
                i10 = (int)Test.instanceCount;
                i17 >>= s;
                i17 = i13;
            }
            Test.instanceCount += Test.instanceCount;
            Test.instanceCount += i11;
            i12 = i13;
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16 + i17 + s +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i2=-2, i3=6, i4=5, i5=-181, i6=98, i7=124;
        byte by=120;
        float f=87.356F;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -1931548224877499363L);
        FuzzerUtils.init(bArr, true);

        for (i2 = 6; i2 < 191; ++i2) {
            double d=-1.15235;
            Test.instanceCount *= (long)((i3 * (--Test.instanceCount)) - ((d * i2) - (i2 / ((long)(d) | 1))));
            for (i4 = i2; i4 < 9; i4++) {
                short s1=32384;
                for (i6 = 1; i6 < 1; i6++) {
                    Test.instanceCount += (i6 * i6);
                    i5 = (int)(-((25651 + (by * f)) * Math.sqrt(d)));
                    Test.instanceCount += (i6 - i7);
                    Test.instanceCount *= (long)(lMeth(i2, i6, -172) % ((long)(d) | 1));
                    lArr[i2] = i6;
                    i3 = (int)f;
                    f += Test.instanceCount;
                    Test.iArrFld[i2 + 1] -= i3;
                }
                f = i6;
                s1 += (short)i5;
                bArr[i2 - 1] = true;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + by + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vSmallMeth(int i1, long l) {


        vMeth();
        Test.instanceCount = (long)1.64470;
        vSmallMeth_check_sum += i1 + l;
    }

    public void mainTest(String[] strArr1) {

        int i=9969, i19=-249, i20=-23340, i21=102, i22=79, i23=61489, i24=18811, i25=173, iArr[][]=new int[N][N];
        double d1=2.51508;
        short s2=-18218;
        float f1=-43.799F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, 60041);
        FuzzerUtils.init(fArr, 36.829F);

        iFld -= iArr[(iFld >>> 1) % N][(i >>> 1) % N];
        for (int smallinvoc=0; smallinvoc<273; smallinvoc++) vSmallMeth(i, -107L);
        for (i19 = 11; i19 < 376; ++i19) {
            fArr[i19 - 1] -= i20;
            try {
                Test.iArrFld[i19] = (iArr[i19][i19] % Test.iArrFld[i19 - 1]);
                i20 = (-201 % i19);
                i = (i19 % i19);
            } catch (ArithmeticException a_e) {}
            i20 += (((i19 * i) + i19) - i19);
            i20 = i20;
            d1 -= 62.70729;
            iFld = (int)-7L;
            i21 = 1;
            while (++i21 < 69) {
                i *= Test.byFld;
                i -= s2;
                for (i22 = 1; i22 < 1; i22++) {
                    iFld = i19;
                    Test.instanceCount += (((i22 * i20) + f1) - i20);
                    Test.instanceCount *= Test.instanceCount;
                }
                iArr[i21][i21] = 0;
                Test.iArrFld[i21 - 1] += -3;
                Test.iArrFld[i19] = i19;
                Test.instanceCount <<= i19;
                for (i24 = 1; 1 > i24; ++i24) {
                    i23 = (int)Test.instanceCount;
                    Test.instanceCount += (((i24 * i21) + Test.byFld) - iFld);
                    Test.lArrFld[i21] = 43356;
                    switch ((((i21 >>> 1) % 7) * 5) + 119) {
                    case 148:
                        Test.instanceCount >>= Test.instanceCount;
                        sArrFld[i24 + 1] -= (short)Test.instanceCount;
                        break;
                    case 147:
                        f1 = s2;
                        break;
                    case 151:
                        i *= (int)Test.instanceCount;
                        s2 += (short)(i24 + f1);
                    case 139:
                        Test.instanceCount *= i20;
                        break;
                    case 127:
                        i23 = i22;
                        break;
                    case 137:
                        Test.instanceCount -= Test.byFld;
                        break;
                    case 149:
                        i20 <<= (int)5L;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
