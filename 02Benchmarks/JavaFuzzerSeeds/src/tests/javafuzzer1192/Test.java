package tests.javafuzzer1192;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:16:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=43972L;
    public static volatile boolean bFld=true;
    public static volatile double dFld=122.105406;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -103.270F);
        FuzzerUtils.init(Test.lArrFld, -102L);
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i6, byte by) {

        float f1=-1.674F;
        int i7=14, i8=-175, iArr[]=new int[N];
        double d=-66.100746;
        short s=8227;

        FuzzerUtils.init(iArr, 31854);

        f1 = f1;
        i6 = 95;
        for (i7 = 9; i7 < 192; i7++) {
            i8 >>= i6;
            d = 1;
            while ((d += 3) < 9) {
                Test.fArrFld[i7 - 1] += i6;
                s += (short)(d * i8);
                Test.instanceCount *= i8;
                Test.instanceCount += (long)d;
                switch ((int)((d % 2) + 83)) {
                case 83:
                    i8 = (int)Test.instanceCount;
                    iArr[i7 - 1] &= i7;
                    Test.instanceCount += (long)d;
                    break;
                case 84:
                    try {
                        i6 = (i6 / iArr[(int)(d + 1)]);
                        i6 = (i6 % i8);
                        i8 = (iArr[(int)(d - 1)] % i8);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
                i8 = (int)f1;
            }
        }
        long meth_res = i6 + by + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) + s +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(float f, int i3, long l1) {

        int i4=1520, i5=-4, i9=-31046, i10=170, i11=-96, i12=0, i13=111, iArr1[][]=new int[N][N];
        byte by1=115;
        short s1=-29495;

        FuzzerUtils.init(iArr1, 163);

        i3 *= (i3++);
        for (i4 = 4; 264 > i4; ++i4) {
            dMeth(i3, by1);
            i3 *= i4;
            l1 -= i3;
            f = Test.instanceCount;
        }
        Test.fArrFld = Test.fArrFld;
        switch (((i4 >>> 1) % 6) + 4) {
        case 4:
            for (i9 = 2; i9 < 250; ++i9) {
                for (i11 = 1; i11 < 7; ++i11) {
                    i3 *= i9;
                    s1 = (short)i13;
                    iArr1[i11 + 1][i11 + 1] = (int)l1;
                    Test.lArrFld[i11][i9] = -12924;
                    Test.fArrFld[i11] += l1;
                }
            }
            break;
        case 5:
            Test.instanceCount = i4;
            break;
        case 6:
            Test.bFld = Test.bFld;
            break;
        case 7:
            s1 = (short)Test.instanceCount;
        case 8:
            l1 <<= by1;
            break;
        case 9:
            iArr1[(i13 >>> 1) % N][(i3 >>> 1) % N] -= i4;
        default:
            i10 = i4;
        }
        long meth_res = Float.floatToIntBits(f) + i3 + l1 + i4 + i5 + by1 + i9 + i10 + i11 + i12 + s1 + i13 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i=0, i1=41955, i2=-223, i14=-187, i15=-2, iArr2[][]=new int[N][N];
        float f2=0.357F;
        short s2=5509;

        FuzzerUtils.init(iArr2, 228);

        i = 1;
        while (++i < 206) {
            for (i1 = i; i1 < 8; ++i1) {
                l += iMeth(f2, i2, Test.instanceCount);
                i14 = 1;
                while (++i14 < 1) {
                    iArr2[i14][i14 - 1] *= i2;
                }
            }
            iArr2[i - 1][i + 1] = -21952;
            iArr2[i - 1][(i >>> 1) % N] = i1;
            i15 = 1;
            do {
                Test.dFld = l;
                if (Test.bFld) break;
                i2 += (i15 | s2);
            } while (++i15 < 8);
            Test.dFld -= i1;
            l = Test.instanceCount;
            Test.instanceCount %= 78;
            Test.lArrFld[i][i] = i14;
        }
        vMeth_check_sum += l + i + i1 + i2 + Float.floatToIntBits(f2) + i14 + i15 + s2 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f3=8.838F;
        int i16=126, i17=2, i18=20073, i19=-25774, i20=14, i21=-106, i22=-27645, i23=68;
        long l2=-20575L;
        byte byArr[]=new byte[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-53);
        FuzzerUtils.init(dArr, 0.44511);

        vMeth(Test.instanceCount);
        for (byte by2 : byArr) {
            f3 = (float)-73.10277;
            Test.instanceCount += Test.instanceCount;
            i16 = i16;
            i16 = i16;
            i16 -= i16;
            for (i17 = 3; i17 < 63; i17 += 3) {
                Test.instanceCount <<= i18;
                i16 *= i16;
                try {
                    i16 = (i16 % 8285);
                    Test.iArrFld[i17 - 1] = (i16 % 48778236);
                    i16 = (Test.iArrFld[(i18 >>> 1) % N] / -213);
                } catch (ArithmeticException a_e) {}
                i19 = 1;
                while (++i19 < 4) {
                    i16 -= (int)Test.dFld;
                    i18 += i16;
                    Test.iArrFld[i19] -= (int)22446L;
                    Test.instanceCount += i19;
                    i16 = i16;
                    i16 = i16;
                    Test.bFld = true;
                    Test.instanceCount *= i18;
                }
                Test.instanceCount *= i18;
                Test.lArrFld[i17][i17 + 1] = i16;
            }
        }
        for (l2 = 11; l2 < 229; ++l2) {
            switch ((int)((l2 % 5) + 95)) {
            case 95:
                for (i21 = 1; i21 < 115; ++i21) {
                    i16 = i22;
                    Test.dFld = i17;
                    Test.instanceCount >>>= i18;
                    i22 >>= (int)l2;
                    i23 = (int)l2;
                }
                break;
            case 96:
                i16 = i22;
            case 97:
                i18 += (int)(-1.176F + (l2 * l2));
            case 98:
                i18 -= i18;
                break;
            case 99:
                byArr[(int)(l2)] = (byte)i16;
            default:
                Test.instanceCount *= Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
