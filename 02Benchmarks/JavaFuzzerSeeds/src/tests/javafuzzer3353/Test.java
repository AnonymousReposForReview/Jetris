package tests.javafuzzer3353;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:37:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-635147347L;
    public static double dFld=-1.93202;
    public static boolean bFld=true;
    public static volatile boolean bFld1=false;
    public static volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)39);
        FuzzerUtils.init(Test.iArrFld, 17948);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static boolean bMeth(long l) {

        int i3=-64;

        Test.dFld -= (--i3);
        long meth_res = l + i3;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth2(int i6) {

        int i7=24012, i8=7992, i9=8517, i10=2, i11=12, i12=-217;
        byte by1=90;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -94.364F);

        for (i7 = 3; i7 < 139; ++i7) {
            for (i9 = 1; i9 < 12; i9++) {
                Test.dFld += i8;
                for (i11 = i7; i11 < 2; i11++) {
                    float f1=0.946F;
                    Test.iArrFld[i9] = Test.iArrFld[i9 - 1];
                    i12 += (i11 * i8);
                    fArr1 = fArr1;
                    if (false) break;
                    Test.iArrFld[i9 + 1][i9] = i8;
                    switch ((i9 % 5) + 48) {
                    case 48:
                        Test.instanceCount *= by1;
                        i6 *= i7;
                        f1 %= 21372;
                        i12 |= i7;
                        break;
                    case 49:
                        Test.instanceCount += (i11 * i11);
                        break;
                    case 50:
                        f1 = f1;
                        break;
                    case 51:
                        Test.instanceCount = i6;
                    case 52:
                        i12 = i10;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(int i4, long l1) {

        float f=-26.753F, fArr[]=new float[N];
        double d=-1.28277;
        int i13=-8799, i14=-44, i15=63, iArr1[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 1.975F);
        FuzzerUtils.init(iArr1, 60);
        FuzzerUtils.init(bArr, false);

        Test.byArrFld[(-108 >>> 1) % N] <<= (byte)((Test.iArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N] = (int)(++f)) *
            (fArr[(3 >>> 1) % N]--));
        i4 >>= i4;
        for (int i5 : iArr1) {
            vMeth2(i5);
            if (b) {
                for (d = 1; d < 4; d++) {
                    for (i14 = 1; 2 > i14; i14++) {
                        i15 += i14;
                        if (b) break;
                        fArr[i14 - 1] = (float)Test.dFld;
                        i13 += (i14 * i14);
                        switch ((int)((d % 8) + 15)) {
                        case 15:
                            iArr1[(int)(d)] /= 85;
                            l1 += i14;
                            i5 = (int)f;
                            break;
                        case 16:
                            f *= i13;
                        case 17:
                            f += (((i14 * l1) + i4) - i5);
                            break;
                        case 18:
                            i15 += (i14 * i14);
                        case 19:
                            bArr[i14 - 1] = b;
                            break;
                        case 20:
                            iArr1 = iArr1;
                            break;
                        case 21:
                            try {
                                i13 = (i4 / i14);
                                iArr1[(int)(d - 1)] = (-237 / i4);
                                iArr1[i14 - 1] = (-27184 % iArr1[i14 + 1]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 22:
                            i5 += (int)-1.752F;
                        default:
                            b = b;
                        }
                    }
                }
            } else if (b) {
                iArr1 = iArr1;
            }
        }
        vMeth1_check_sum += i4 + l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i13 + i14 + i15 + (b ? 1 :
            0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i1, int i2) {

        byte by=104;
        float f2=-1.136F;
        short s=10589;
        int i16=-5, i17=2;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -2.98694);
        FuzzerUtils.init(lArr, -2243017974L);

        bMeth(Math.abs((long)(by - 0.2991)));
        vMeth1(i2, 10L);
        Test.iArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] -= i1;
        f2 = Test.instanceCount;
        dArr[(i2 >>> 1) % N] = by;
        Test.iArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] -= s;
        if (Test.bFld1) {
            for (long l2 : lArr) {
                if (Test.bFld) {
                    for (i16 = 1; i16 < 4; ++i16) {
                        Test.instanceCount += (((i16 * i17) + l2) - i17);
                        Test.instanceCount = i16;
                        if (Test.bFld) break;
                    }
                    Test.instanceCount ^= i2;
                    lArr[(61 >>> 1) % N] -= -88;
                    vMeth_check_sum += i1 + i2 + by + Float.floatToIntBits(f2) + s + i16 + i17 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
                    return;
                } else if (Test.bFld) {
                    Test.iArrFld[(i1 >>> 1) % N][(-6 >>> 1) % N] = 97;
                } else if (Test.bFld) {
                    l2 += i17;
                }
            }
        } else {
            i2 -= s;
        }
        vMeth_check_sum += i1 + i2 + by + Float.floatToIntBits(f2) + s + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-9, i19=1, i20=5, iArr[]=new int[N];
        short s1=-21179;
        float f3=2.167F;
        byte by2=20;

        FuzzerUtils.init(iArr, -78);

        for (int i : iArr) {
            vMeth(i, i);
            Test.dFld = Test.instanceCount;
            i <<= i;
            i18 = 1;
            while (++i18 < 63) {
                for (i19 = i18; i19 < 1; i19++) {
                    i -= i;
                    i20 *= i19;
                    i -= -11;
                    Test.instanceCount <<= Test.instanceCount;
                    i20 += (int)Test.instanceCount;
                }
                i *= (int)Test.instanceCount;
                Test.iArrFld[i18][i18] = i19;
                s1 = (short)Test.instanceCount;
                i20 *= i19;
                switch ((((i19 >>> 1) % 3) * 5) + 12) {
                case 19:
                    Test.instanceCount *= i;
                    i += (i18 * i18);
                case 13:
                    switch ((i18 % 4) + 22) {
                    case 22:
                        Test.instanceCount = i20;
                        break;
                    case 23:
                        Test.instanceCount += i18;
                    case 24:
                        f3 += i18;
                        i += by2;
                        switch ((i18 % 2) + 74) {
                        case 74:
                            Test.iArrFld[i18 - 1][i18 + 1] = i20;
                            f3 = i20;
                            break;
                        case 75:
                            i += (((i18 * by2) + f3) - Test.instanceCount);
                            break;
                        }
                        i20 = (int)Test.dFld;
                        break;
                    case 25:
                        i += (((i18 * Test.instanceCount) + i20) - i20);
                        i20 += (i18 * i18);
                        break;
                    }
                case 22:
                    lArrFld[i18] >>= 29466;
                    break;
                default:
                    i -= (int)Test.instanceCount;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
