package tests.javafuzzer2873;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:59:22 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-119L;
    public static int iFld=3;
    public static volatile double dFld=0.56592;
    public short sFld=17391;
    public float fFld=0.768F;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 44.734F);
        FuzzerUtils.init(Test.lArrFld, -519518014L);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i10=10981, i11=-13, i12=1, i13=22257, i14=-15248;
        short s=-12121, sArr[]=new short[N];
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)93);
        FuzzerUtils.init(sArr, (short)25865);
        FuzzerUtils.init(lArr, -1147578883880929410L);
        FuzzerUtils.init(fArr, -2.65F);

        i10 = 1;
        do {
            for (i11 = 1; 10 > i11; i11++) {
                s -= (short)i12;
                i12 -= (int)13573L;
                i12 = i10;
                for (i13 = 1; 2 > i13; i13++) {
                    byArr[i10 - 1] = (byte)i10;
                    sArr[i10] = (short)i12;
                    lArr[i10] = 184L;
                    i14 >>>= i12;
                    i12 |= i13;
                    Test.instanceCount += (i13 - i10);
                }
                i14 = (int)Test.instanceCount;
                fArr[i10 + 1] += i13;
                Test.instanceCount = i10;
            }
        } while (++i10 < 154);
        vMeth1_check_sum += i10 + i11 + i12 + s + i13 + i14 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr)
            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i9, double d1) {


        vMeth1();
        Test.iFld *= i9;
        vMeth_check_sum += i9 + Double.doubleToLongBits(d1);
    }

    public static boolean bMeth() {

        int i7=33, i8=9, i15=-12, i16=131;
        float f=102.667F;
        short s1=25765, sArr1[]=new short[N];
        byte by=-11;
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr1, (short)19116);
        FuzzerUtils.init(lArr1, -7L);

        for (i7 = 9; i7 < 260; ++i7) {
            vMeth(i8, Test.dFld);
            for (i15 = 1; 6 > i15; ++i15) {
                Test.instanceCount += i7;
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i8 += (i15 + Test.iFld);
                Test.iFld += (int)57.184F;
                i8 = (int)Test.instanceCount;
                f += i15;
                Test.instanceCount += (i15 - s1);
                Test.instanceCount -= (long)f;
                i16 *= s1;
            }
        }
        sArr1[(i7 >>> 1) % N] -= by;
        lArr1[(i7 >>> 1) % N] = Test.instanceCount;
        long meth_res = i7 + i8 + i15 + i16 + Float.floatToIntBits(f) + s1 + by + FuzzerUtils.checkSum(sArr1) +
            FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        double d=-36.115288;
        int i=13, i1=-56677, i2=-7, i3=39223, i4=-51806, i5=40, i6=198, i17=-58;
        byte by1=30;
        boolean b=false;
        long l=2864802528594661362L;

        d -= i;
        i &= (int)Test.instanceCount;
        for (i1 = 250; i1 > 4; --i1) {
            for (i3 = 102; i3 > 1; i3 -= 3) {
                for (i5 = 1; 4 > i5; i5++) {
                    switch ((i3 % 10) + 65) {
                    case 65:
                        if (bMeth()) continue;
                        Test.iFld = i1;
                        break;
                    case 66:
                        iArrFld[i3 - 1] += by1;
                        break;
                    case 67:
                        i6 += (((i5 * i) + Test.instanceCount) - i6);
                        break;
                    case 68:
                        if (b) break;
                    case 69:
                        Test.fArrFld[i1 + 1] -= Test.instanceCount;
                        i2 = i5;
                        try {
                            i2 = (i3 % Test.iFld);
                            i = (18294 / iArrFld[i5]);
                            i2 = (iArrFld[i5 - 1] % 2120067958);
                        } catch (ArithmeticException a_e) {}
                        sFld += (short)Test.instanceCount;
                        break;
                    case 70:
                        Test.instanceCount += i5;
                        sFld <<= (short)i2;
                        i2 = i6;
                        Test.instanceCount *= sFld;
                        break;
                    case 71:
                        switch ((((Test.iFld >>> 1) % 6) * 5) + 25) {
                        case 37:
                            iArrFld[i1 - 1] = -4;
                            l -= -57548;
                            break;
                        case 53:
                            switch ((i1 % 1) + 97) {
                            case 97:
                                b = b;
                                if (b) {
                                    by1 += (byte)(i5 * i6);
                                    iArrFld[i1 + 1] <<= i3;
                                    i2 += i5;
                                }
                                i += (((i5 * i1) + i3) - i1);
                                break;
                            default:
                                i2 += i5;
                            }
                            break;
                        case 40:
                            Test.instanceCount = i2;
                            break;
                        case 30:
                            sFld %= (short)(i5 | 1);
                            break;
                        case 50:
                            Test.instanceCount += 2;
                        case 51:
                            l = i17;
                            break;
                        }
                    case 72:
                        Test.lArrFld[i5 + 1] += (long)fFld;
                        break;
                    case 73:
                    case 74:
                        Test.lArrFld[i3 + 1] -= Test.iFld;
                        break;
                    default:
                        iArrFld = FuzzerUtils.int1array(N, (int)-118);
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
