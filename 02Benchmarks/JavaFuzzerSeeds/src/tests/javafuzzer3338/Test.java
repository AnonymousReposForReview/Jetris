package tests.javafuzzer3338;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 06:22:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=-148;
    public static volatile short sFld=-21297;
    public boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6011738587724038767L);
        FuzzerUtils.init(Test.iArrFld, -5194);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        short s=-7194;
        int i5=7988, i6=-88, i7=61691, i8=4, i9=13, i10=224, iArr1[]=new int[N];
        double d1=-45.113275;

        FuzzerUtils.init(iArr1, -1);

        Test.instanceCount += s;
        i5 = 1;
        while (++i5 < 310) {
            Test.iFld += (i5 * i5);
        }
        iArr1[(i5 >>> 1) % N] >>>= i5;
        Test.iFld -= -33407;
        for (i6 = 12; i6 < 350; ++i6) {
            i8 = 1;
            while (++i8 < 5) {
                boolean b=false;
                Test.lArrFld[i6] = i5;
                switch ((i8 % 7) + 22) {
                case 22:
                    if (b) {
                        Test.instanceCount += i7;
                        b = b;
                        for (i9 = 1; i9 < 1; ++i9) {
                            d1 *= i5;
                            Test.instanceCount += 119;
                        }
                    }
                    break;
                case 23:
                    Test.iFld -= 2;
                    break;
                case 24:
                    if (i10 != 0) {
                    }
                    break;
                case 25:
                    i10 += i8;
                case 26:
                    Test.lArrFld[i8 + 1] = i8;
                    break;
                case 27:
                    i7 >>>= i6;
                    break;
                case 28:
                    d1 = i7;
                    break;
                }
            }
        }
        long meth_res = s + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i2) {

        int i3=-6582, i4=-117, i11=46763, i12=-34080;
        boolean b1=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-7643);

        for (i3 = 155; i3 > 3; i3--) {
            switch ((((189 - iMeth1()) >>> 1) % 1) + 3) {
            case 3:
                if (b1) break;
                Test.iFld *= -177;
                sArr[i3] *= (short)Test.instanceCount;
                break;
            default:
                Test.iFld += (((i3 * Test.sFld) + Test.instanceCount) - i4);
                Test.instanceCount -= -4;
                d = i2;
            }
            for (i11 = 1; i11 < 10; ++i11) {
                Test.iFld -= (int)d;
                Test.iArrFld[i11 - 1] <<= Test.iFld;
                Test.instanceCount = -29;
            }
            i2 += (i3 ^ i4);
            Test.iFld = (int)Test.instanceCount;
            i12 |= -63;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + (b1 ? 1 : 0) + i11 + i12 +
            FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(float f1) {

        int i1=8, i13=-9, i14=-63598, i15=-133, i16=17540, i17=13, i18=-19, i19=-7;
        double d2=2.33045, d3=2.29127;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)8703);

        i1 = (int)Test.instanceCount;
        vMeth(d2, i1);
        i1 = Test.iFld;
        for (i13 = 10; i13 < 338; i13++) {
            Test.instanceCount += Test.instanceCount;
            i14 -= Test.iFld;
            for (i15 = 1; i15 < 5; ++i15) {
                i1 -= (int)f1;
            }
            sArr1[i13 - 1] += (short)Test.instanceCount;
            if (i13 != 0) {
            }
            for (d3 = 1; d3 < 5; d3++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    i19 = i18;
                    Test.lArrFld[i18] += i15;
                    if (i1 != 0) {
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d3) + i17 + i18 + i19 + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.900F;
        int i=-6, i20=-19632, i21=0, i22=-41973, i23=-50644, i24=-46, i25=-7, i26=8231, iArr[]=new int[N];
        double d4=-2.41056, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3434846357L);
        FuzzerUtils.init(iArr, 2275);
        FuzzerUtils.init(dArr, -35.111802);

        f += (--Test.instanceCount);
        Test.instanceCount = ((--i) + (i++));
        i += (int)((5120718844853910695L * (++i)) - ((lArr[(14 >>> 1) % N]++) - (f * i)));
        iArr[(i >>> 1) % N] = (int)((Integer.reverseBytes(i) | (Test.instanceCount + i)) - iMeth(f));
        i -= i;
        Test.iFld = Test.iFld;
        for (i20 = 7; i20 < 338; ++i20) {
            bFld = bFld;
            Test.instanceCount = 128;
            iArr[i20 + 1] += 19374;
            i21 = i21;
        }
        i21 += (int)-1.916F;
        d4 -= 0.371F;
        f += -21675;
        f = Test.instanceCount;
        for (i22 = 160; i22 > 8; i22 -= 2) {
            i23 -= i22;
            i21 = -9504;
            i24 = 1;
            while (++i24 < 329) {
                i23 += i24;
                bFld = bFld;
                for (i25 = i24; i25 < 1; i25++) {
                    switch (((i22 % 1) * 5) + 100) {
                    case 103:
                        i -= 10;
                        i26 <<= i22;
                        break;
                    default:
                        dArr[i22 + 1] = d4;
                        i23 += i25;
                        Test.instanceCount <<= i;
                        Test.instanceCount += (i25 - i26);
                    }
                }
                if (bFld) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
