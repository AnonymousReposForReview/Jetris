package tests.javafuzzer879;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:07:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static boolean bFld=false;
    public static volatile float fFld=55.554F;
    public static int iArrFld[]=new int[N];
    public short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, byte by, int i4) {

        int i5=118, i6=-5448, i7=250, i8=-24894, i9=23906, i10=9, i11=9, i12=-109, iArr[][]=new int[N][N];
        short s=-20457;
        float f=-71.600F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1401889407L);
        FuzzerUtils.init(fArr, 22.879F);
        FuzzerUtils.init(iArr, -6);

        if (Test.bFld) {
            for (i5 = 6; 186 > i5; i5++) {
                Test.instanceCount *= -62;
            }
        } else if (Test.bFld) {
            lArr[(i5 >>> 1) % N] *= i5;
            i4 -= i4;
            for (i7 = 5; i7 < 397; ++i7) {
                fArr[i7 - 1] = i5;
                for (i9 = 1; i9 < 4; ++i9) {
                    for (i11 = i9; i11 < 2; i11++) {
                        i8 = (int)107.3921;
                        i12 += (int)-17.754F;
                        Test.instanceCount = Test.instanceCount;
                        i12 += (i11 ^ s);
                    }
                    try {
                        i3 = (i7 / i12);
                        i4 = (-5882 % iArr[i9][i9 - 1]);
                        i4 = (i12 % i4);
                    } catch (ArithmeticException a_e) {}
                    f += i10;
                }
            }
        }
        vMeth_check_sum += i3 + by + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + s + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth() {

        int i13=-61921, i14=8, i15=-125, i16=-23756, i17=3, i18=25826, i19=72;
        double d=0.109251;
        float f1=58.708F;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-56);
        FuzzerUtils.init(lArr1, 14L);

        vMeth(i13, (byte)(94), -14);
        i13 *= (int)d;
        for (i14 = 1; i14 < 335; i14++) {
            byte by1=-84;
            f1 = Test.instanceCount;
            for (i16 = 1; i16 < 5; ++i16) {
                Test.instanceCount >>= i16;
                byArr[i16 + 1] -= (byte)10;
            }
            switch ((i14 % 4) + 118) {
            case 118:
                switch ((i14 % 2) + 80) {
                case 80:
                    if (true) {
                        i13 *= i14;
                        for (i18 = 1; i18 < 5; i18++) {
                            i19 += (-49885 + (i18 * i18));
                            f1 = i18;
                            i19 *= (int)f1;
                        }
                    } else if (Test.bFld) {
                        lArr1[i14 - 1] += Test.instanceCount;
                        return ((int)(i13 + Double.doubleToLongBits(d) + i14 + i15 + Float.floatToIntBits(f1) + i16 +
                            i17 + i18 + i19 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                    } else if (false) {
                        Test.iArrFld = Test.iArrFld;
                        return ((int)(i13 + Double.doubleToLongBits(d) + i14 + i15 + Float.floatToIntBits(f1) + i16 +
                            i17 + i18 + i19 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                    } else {
                        i19 += (i14 ^ i16);
                    }
                    break;
                case 81:
                    i13 = i18;
                    break;
                }
            case 119:
                Test.instanceCount += (-6L + (i14 * i14));
            case 120:
                Test.instanceCount = by1;
                break;
            case 121:
                Test.instanceCount = (long)d;
                break;
            }
        }
        long meth_res = i13 + Double.doubleToLongBits(d) + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth() {

        int i1=34030, i2=6, i20=36, i21=-10, i22=-228, i23=-5;
        long l=11L;
        byte by2=73;

        for (i1 = 9; i1 < 173; i1 += 3) {
            if (Test.bFld) continue;
            if (bMeth()) {
                i2 += (i1 - i2);
            } else {
                for (i20 = 1; i20 < 28; ++i20) {
                    if (Test.bFld) {
                        i21 %= (int)(i2 | 1);
                    } else if (Test.bFld) {
                        switch (((i21 >>> 1) % 2) + 71) {
                        case 71:
                            i2 = (int)99L;
                            break;
                        case 72:
                            i21 = i20;
                            l = i21;
                            break;
                        default:
                            i2 += (i20 + by2);
                            for (i22 = 1; i22 < 2; i22++) {
                                i2 = (int)Test.instanceCount;
                                i23 >>= -28865;
                            }
                        }
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i20 + i21 + l + by2 + i22 + i23;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i24=14, i25=-247, i26=109, i27=6, i28=-11;
        double d1=2.72941, d2=-2.12345;
        byte by3=-127;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -221L);

        i = 1;
        do {
            Test.instanceCount = (long)dMeth();
            Test.iArrFld[i + 1] = (int)Test.fFld;
            i24 += i;
            for (d1 = 10; d1 < 169; d1++) {
                for (i26 = 2; i26 > 1; i26 -= 2) {
                    i24 += (i26 | Test.instanceCount);
                    i27 += i26;
                }
                sArrFld[i + 1][(int)(d1)] &= by3;
                i27 += (int)(((d1 * i27) + i24) - i);
                Test.bFld = Test.bFld;
                Test.instanceCount = Test.instanceCount;
                lArr2[(int)(d1)] += i27;
                i24 = (int)12L;
                i28 = 1;
                do {
                    i27 -= (int)d1;
                    d2 += 13;
                    switch ((i28 % 1) + 4) {
                    case 4:
                        by3 -= (byte)i27;
                        i24 = (int)Test.fFld;
                        try {
                            i24 = (i27 % -148);
                            i24 = (Test.iArrFld[i28] % i25);
                            i25 = (140 / i);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (((i28 * i24) + Test.instanceCount) - i25);
                    }
                    Test.instanceCount >>>= -161;
                    d2 -= Test.fFld;
                    d2 -= 13;
                    i24 -= i26;
                } while (++i28 < 2);
                i24 |= i;
            }
            if (Test.bFld) {
                i24 >>>= (int)-3944901759L;
                Test.bFld = false;
            } else if (Test.bFld) {
                i24 %= (int)2L;
            } else if (Test.bFld) {
                i27 = (int)Test.instanceCount;
            }
        } while (++i < 148);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
