package tests.javafuzzer533;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:18:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6L;
    public static int iFld=47527;
    public static short sFld=963;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)12946);
        FuzzerUtils.init(Test.iArrFld, 10);
        FuzzerUtils.init(Test.fArrFld, -2.628F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, double d1) {


        Test.iFld |= (int)Test.instanceCount;
        vMeth2_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1);
    }

    public static void vMeth1() {

        double d2=45.54565, dArr[][]=new double[N][N];
        int i3=-19572, i4=-8, i5=-189, i6=14, i7=213, iArr[]=new int[N];
        short s=28612;

        FuzzerUtils.init(iArr, -9636);
        FuzzerUtils.init(dArr, 0.52974);

        Test.iFld -= (int)Test.instanceCount;
        Test.sArrFld[(Test.iFld >>> 1) % N] -= (short)Math.abs((++Test.iFld) >>> Test.iFld);
        Test.iFld = (int)(Test.iFld = (int)((122.768F - Test.iFld) + -1744368377L));
        vMeth2(d2, d2);
        for (i3 = 1; i3 < 130; i3++) {
            i5 = 1;
            while (++i5 < 12) {
                d2 += s;
                Test.instanceCount = (long)9.855F;
                i4 = (int)Test.instanceCount;
                Test.iFld += (i5 ^ s);
                for (i6 = 1; i6 < 1; i6++) {
                    switch (((-8 >>> 1) % 1) + 88) {
                    case 88:
                        iArr = iArr;
                        dArr[i6][i5] -= Test.instanceCount;
                        Test.iFld = Test.iFld;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + i3 + i4 + i5 + s + i6 + i7 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, long l) {

        int i1=11044, i2=-3, i8=6321, i9=28236, i10=-7142, i11=-45134, i12=-14, i13=6;
        float f=53.872F;
        double d3=127.84985;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -52138L);

        for (i1 = 22; i1 < 378; i1++) {
            f += (17 + (i1 * i1));
            vMeth1();
            i8 = 1;
            do {
                lArr[i8 - 1][i1] <<= i;
                i2 -= (int)d3;
                Test.iArrFld[i8 - 1] = Test.sFld;
            } while (++i8 < 5);
            for (i9 = 5; i9 > 1; --i9) {
                Test.iArrFld[i9 + 1] = 10;
                for (i11 = 1; i11 < 2; i11 += 3) {
                    i10 += -5943;
                    i12 >>= i13;
                    i12 += (int)l;
                    Test.iArrFld[i9] = -199;
                    Test.sFld += (short)i11;
                }
            }
        }
        vMeth_check_sum += i + l + i1 + i2 + Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d3) + i9 + i10 +
            i11 + i12 + i13 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-7, i15=13, i16=191, i17=150, i18=-205, i19=44, i20=10, i21=-12, i22=11, i23=4, iArr1[]=new int[N];
        float f1=82.144F;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -11L);
        FuzzerUtils.init(iArr1, 4);

        vMeth(-159, Test.instanceCount);
        for (i14 = 6; 319 > i14; i14++) {
            Test.iFld &= i15;
            i15 += -56864;
            Test.iArrFld[i14 + 1] -= i14;
            Test.iArrFld[i14 - 1] = (int)Test.instanceCount;
            for (i16 = 2; 80 > i16; i16++) {
                Test.iFld = i14;
                Test.iFld = (int)Test.instanceCount;
                i17 += (((i16 * i17) + i14) - i14);
                Test.iArrFld[i14] >>= (int)Test.instanceCount;
                Test.instanceCount <<= 0;
                f1 = i17;
            }
            Test.fArrFld = Test.fArrFld;
            for (i18 = 1; 80 > i18; ++i18) {
                b = b;
                if (b) break;
                f1 += (i18 * i19);
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount = i20;
                    Test.instanceCount = Test.iFld;
                }
                Test.sFld += (short)f1;
                for (i22 = 1; i22 < 2; ++i22) {
                    lArr1[i14] *= i17;
                    i21 -= (int)Test.instanceCount;
                    Test.instanceCount >>= Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    if (b) {
                        iArr1[i22] <<= i16;
                        Test.iFld -= i21;
                    } else {
                        i21 = (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
