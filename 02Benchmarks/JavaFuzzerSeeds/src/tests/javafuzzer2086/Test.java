package tests.javafuzzer2086;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:47:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2601199902L;
    public static int iFld=20369;
    public static volatile int iArrFld[]=new int[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 53946);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(int i1, int i2) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 10L);

        lArr[(i2 >>> 1) % N] = (--i1);
        vSmallMeth_check_sum += i1 + i2 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(int i3, int i4, int i5) {

        int i6=-2, i7=-107, i8=9, i9=8740, iArr[]=new int[N];
        boolean b=true;
        float f1=0.373F;
        double d=-1.105549;

        FuzzerUtils.init(iArr, -4);

        for (i6 = 5; 263 > i6; i6++) {
            if (b) continue;
            i5 += i6;
            vSmallMeth(i6, i3);
            Test.instanceCount = i6;
            Test.instanceCount += (i6 * Test.instanceCount);
            f1 += Test.instanceCount;
            if (b) {
                i4 += (i6 * i6);
            } else if (b) {
                d = 1;
                do {
                    for (i8 = 1; i8 < 1; ++i8) {
                        i7 = i8;
                        iArr[(int)(d + 1)] = i5;
                        i4 += i9;
                        i7 += i8;
                    }
                } while (++d < 6);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            i8 + i9 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i10=-8, i11=-90, i12=-22698, i13=194, i14=192, i15=-26515;
        float f2=53.472F, fArr[]=new float[N];
        long l=1696863391628384820L;
        boolean b1=false;
        byte by=-23;

        FuzzerUtils.init(fArr, 1.611F);

        vSmallMeth(iMeth1(i10, i10, i10), i10);
        Test.instanceCount |= Test.instanceCount;
        f2 = -5;
        i10 -= i10;
        for (i11 = 5; i11 < 129; ++i11) {
            i12 = i11;
            for (l = 13; l > 1; --l) {
                for (i14 = 1; i14 < 2; i14++) {
                    fArr = FuzzerUtils.float1array(N, (float)1.7F);
                    b1 = b1;
                    if (b1) {
                        Test.iArrFld[i14 - 1] += i14;
                        i13 += i14;
                        i15 += 2;
                    } else {
                        i10 *= by;
                    }
                }
            }
        }
        long meth_res = i10 + Float.floatToIntBits(f2) + i11 + i12 + l + i13 + i14 + i15 + (b1 ? 1 : 0) + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i16=237, i17=243, i18=-44836;
        float f=-2.528F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -123.135F);

        i >>= (Test.iArrFld[(i >>> 1) % N] /= (int)((--i) | 1));
        for (int smallinvoc=0; smallinvoc<430; smallinvoc++) vSmallMeth(++i, (int)(((--Test.iArrFld[(77 >>> 1) % N]) +
            f) * (i + (-(f - f)))));
        vSmallMeth((int)((--Test.instanceCount) * (++lArrFld[(-113 >>> 1) % N][(i >>> 1) % N])), iMeth());
        i16 = 1;
        while (++i16 < 255) {
            i = (int)241L;
            for (i17 = i16; 99 > i17; i17 += 3) {
                i18 = i18;
                i <<= 13;
                f += i18;
                fArr1[i16] += i18;
                Test.iFld += i17;
            }
            Test.iFld += (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth iMeth1
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
