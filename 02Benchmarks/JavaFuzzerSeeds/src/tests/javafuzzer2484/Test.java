package tests.javafuzzer2484;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:22:21 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5685L;
    public float fFld=6.994F;
    public static int iFld=-14;
    public static boolean bFld=false;
    public static byte byFld=-23;
    public volatile double dFld=-2.16575;
    public static int iArrFld[][]=new int[N][N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 106);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        byte by=36;
        int i2=14, i3=-25770, i4=-14, i5=-8, i6=-124, i7=4649;
        short s=23763;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.655F);

        fArr[(Test.iFld >>> 1) % N] = FuzzerUtils.float1array(N, (float)26.628F);
        by *= (byte)Test.instanceCount;
        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += (int)-205L;
        for (i2 = 15; 324 > i2; i2++) {
            double d=-2.112448;
            for (i4 = i2; 5 > i4; i4++) {
                Test.iFld |= s;
                i6 >>= (int)37554L;
                i3 ^= i5;
            }
            d += Test.instanceCount;
            if (Test.bFld) {
                Test.instanceCount <<= s;
            } else {
                i5 += i3;
                if (Test.bFld) {
                    i5 ^= i4;
                    by = (byte)i7;
                } else if (true) {
                    Test.iFld = (int)Test.instanceCount;
                } else {
                    Test.instanceCount = i2;
                }
            }
        }
        vMeth1_check_sum += by + i2 + i3 + i4 + i5 + s + i6 + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i1, long l) {

        int i8=41258, i9=-80, i10=44251, i11=13, i12=5;
        float f=-18.1006F, f1=0.337F, f2=2.233F;
        long l1=-63972L, lArr[]=new long[N];
        double d1=85.26313;

        FuzzerUtils.init(lArr, 1L);

        vMeth1();
        i8 = 1;
        do {
            f = f;
            Test.instanceCount |= 10;
            f1 += i8;
            for (f2 = 1; f2 < 5; f2++) {
                i1 = (int)Test.instanceCount;
            }
            f1 = -9;
            if (Test.bFld) continue;
            lArr[i8 - 1] -= Test.instanceCount;
            for (i10 = 1; i10 < 5; ++i10) {
                i1 += (int)-1.26167;
                for (l1 = 1; l1 < 2; ++l1) {
                    i12 = i8;
                    Test.iArrFld[i8][i10 - 1] -= (int)d1;
                }
            }
        } while (++i8 < 312);
        long meth_res = i1 + l + i8 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) +
            i9 + i10 + i11 + l1 + i12 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i=-18739, i13=11673, i14=-116, i15=173;
        double d2=0.121335;

        i -= (int)((++fFld) + iMeth(i, Test.instanceCount));
        if (Test.bFld) {
            Test.bArrFld[(i >>> 1) % N] = Test.bFld;
        }
        for (d2 = 2; d2 < 320; ++d2) {
            Test.iFld = (int)fFld;
            Test.iArrFld[(int)(d2 + 1)][(int)(d2 - 1)] = (int)Test.instanceCount;
            for (i14 = 1; i14 < 5; i14++) {
                i13 -= (int)Test.instanceCount;
            }
            Test.iArrFld[(int)(d2 - 1)][(int)(d2 + 1)] = (int)Test.instanceCount;
            i15 >>= (int)10L;
        }
        Test.byFld >>>= (byte)Test.iFld;
        i = (int)Test.instanceCount;
        i = i15;
        Test.byFld += (byte)-2.156F;
        Test.iArrFld[(52 >>> 1) % N][(i13 >>> 1) % N] ^= i15;
        vMeth_check_sum += i + Double.doubleToLongBits(d2) + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        int i16=46177, i17=-14, i18=-13854, i19=13, i20=11, i21=2915, i22=-241, i23=-82, i24=-14, i25=65415;
        short s1=-9979;

        vMeth();
        i16 = 1;
        while (++i16 < 212) {
            Test.iArrFld[i16 - 1] = FuzzerUtils.int1array(N, (int)-208);
            Test.iFld += (((i16 * Test.instanceCount) + i16) - i16);
            for (i17 = 3; i17 < 118; i17++) {
                Test.iArrFld[i17 + 1][i16 + 1] = i17;
            }
            Test.iFld = (int)-100L;
            for (i19 = 4; 118 > i19; i19++) {
                for (i21 = 1; i21 < 2; i21++) {
                    Test.iFld = 0;
                }
                i18 = i17;
                Test.iArrFld[i19 + 1][i16 - 1] = 13;
                i20 += (int)114.90767;
            }
            i20 = (int)fFld;
            s1 >>>= (short)i16;
            i18 = i21;
            for (i23 = i16; i23 < 118; i23++) {
                Test.instanceCount -= (long)fFld;
                dFld *= i19;
                Test.bFld = Test.bFld;
                i25 = 1;
                do {
                    Test.iArrFld[i23 + 1][i25] = (int)dFld;
                    Test.instanceCount = i19;
                    switch ((i16 % 2) + 12) {
                    case 12:
                    case 13:
                        Test.iFld *= (int)Test.instanceCount;
                        Test.iFld *= 31612;
                        i20 -= (int)Test.instanceCount;
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    }
                    Test.instanceCount = i23;
                    if (false) continue;
                } while (++i25 < 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
