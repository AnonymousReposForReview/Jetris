package tests.javafuzzer2094;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:04:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=64601L;
    public static volatile short sFld=32200;
    public static byte byFld=-51;
    public boolean bFld=true;
    public static int iFld=-115;
    public double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13165L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d1, double d2, float f) {

        int i7=-203, i8=-20145, i9=10, i10=-222, i11=-54, i12=236, iArr1[]=new int[N];
        byte by1=-34;

        FuzzerUtils.init(iArr1, 23770);

        for (i7 = 360; i7 > 8; i7--) {
            i8 += i8;
            for (i9 = 1; i9 < 5; i9++) {
                i10 += (((i9 * Test.instanceCount) + i7) - i10);
                d2 *= f;
                Test.sFld += (short)(i9 + i8);
                iArr1[i9] += by1;
                i10 -= i8;
                for (i11 = i7; i11 < 2; i11 += 2) {
                    i8 -= Test.sFld;
                    i12 += i12;
                    i12 = i11;
                    i10 = -31312;
                }
                d2 = i7;
                i8 = i12;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i7 + i8 +
            i9 + i10 + by1 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, int i3) {

        int i4=-42368, i5=-111, i6=-10921, i13=-175, iArr[][]=new int[N][N];
        double d=2.112819;

        FuzzerUtils.init(iArr, 169);

        for (i4 = 7; i4 < 129; ++i4) {
            for (d = 1; 13 > d; d++) {
                float f1=1.527F;
                Test.sFld += (short)d;
                Test.instanceCount += ((iArr[i4 - 1][(int)(d + 1)]--) + iMeth(d, d, f1));
                Test.instanceCount += (-23297 + (d * d));
                Test.sFld *= (short)i3;
                i13 = 1;
                while (++i13 < 2) {
                    switch ((i4 % 2) + 82) {
                    case 82:
                        iArr[(int)(d)][i4] &= Test.byFld;
                        break;
                    case 83:
                    }
                    i3 = i5;
                    i3 = 22;
                    switch ((i13 % 2) + 118) {
                    case 118:
                        i2 += i13;
                        Test.sFld *= (short)Test.instanceCount;
                        iArr[i13 + 1] = iArr[i4 + 1];
                        break;
                    case 119:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    default:
                        i2 += (i13 | i3);
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i13 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(byte by, int i1, long l) {

        int i14=49087, i15=-4, i16=11, i17=-11, i18=-43, i19=22735;
        float f2=63.786F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 125.66812);

        vMeth1(i1, i1);
        i14 = 1;
        while (++i14 < 205) {
            bFld = bFld;
            switch ((i14 % 3) + 21) {
            case 21:
                if (bFld) continue;
                break;
            case 22:
                i1 <<= 1;
                break;
            case 23:
                for (i15 = 8; i15 > i14; --i15) {
                    l = l;
                    i16 >>>= -209;
                }
            }
        }
        for (i17 = 4; i17 < 294; ++i17) {
            l += (((i17 * i18) + f2) - i14);
            dArr[i17] -= 0.29230;
            i19 = 1;
            while (++i19 < 6) {
                i18 += i16;
                Test.instanceCount *= i17;
            }
        }
        vMeth_check_sum += by + i1 + l + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=241, i20=58484, i21=-14, i22=-9, iArr2[]=new int[N];
        long l1=8067183685918513311L;
        float f3=1.586F;
        double d3=1.7514;

        FuzzerUtils.init(iArr2, 111);

        i = 1;
        while (++i < 356) {
            vMeth(Test.byFld, 41003, Test.instanceCount);
            try {
                i20 = (iArr2[i] % i);
                i20 = (iArr2[i - 1] % iArr2[i]);
                i20 = (i20 / i20);
            } catch (ArithmeticException a_e) {}
            bFld = true;
            i21 = 1;
            while (++i21 < 71) {
                Test.sFld = (short)-11;
                for (l1 = 1; 1 > l1; ++l1) {
                    iArr2[i21 - 1] = i20;
                    iArr2[i21 - 1] += (int)Test.instanceCount;
                    i20 -= (int)-56485L;
                    switch ((i21 % 7) + 69) {
                    case 69:
                        f3 = Test.iFld;
                        d3 = 41274;
                        i20 *= i22;
                        break;
                    case 70:
                        Test.byFld -= (byte)d3;
                    case 71:
                        i20 += (int)l1;
                        if (bFld) {
                            f3 -= -61.622F;
                        } else if (bFld) {
                            dArrFld[(int)(l1 + 1)] -= Test.sFld;
                            i20 += (int)(l1 + Test.instanceCount);
                            Test.byFld += (byte)(((l1 * f3) + i21) - f3);
                        } else if (bFld) {
                            if (false) continue;
                        }
                        Test.iFld ^= i;
                        break;
                    case 72:
                        Test.instanceCount &= 0;
                        if (bFld) continue;
                        break;
                    case 73:
                        Test.lArrFld = Test.lArrFld;
                        i20 *= (int)f3;
                        dArrFld[(int)(l1 + 1)] += f3;
                        if (bFld) break;
                        break;
                    case 74:
                    case 75:
                        i20 -= i20;
                    default:
                        i22 -= i21;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
