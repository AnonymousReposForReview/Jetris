package tests.javafuzzer2422;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:22:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=22L;
    public static int iFld=230;
    public static volatile double dFld=-57.11244;
    public static float fFld=0.636F;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 146L);
        FuzzerUtils.init(Test.sArrFld, (short)-2711);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l3) {

        int i10=-130, i11=-91, i12=-58499, iArr2[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr2, 177);

        l3 -= (long)Test.fFld;
        for (i10 = 1; 169 > i10; i10++) {
            Test.dFld += Test.iFld;
            i11 = i10;
            i12 = 1;
            do {
                switch (((i10 % 2) * 5) + 17) {
                case 24:
                    Test.instanceCount = i11;
                    break;
                case 27:
                    i11 *= (int)Test.instanceCount;
                    if (b) {
                        i11 = Test.iFld;
                        iArr2[i12 - 1] -= (int)195L;
                    }
                    iArr2[i10 - 1] = (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    break;
                }
                iArr2[i10 - 1] <<= i11;
                iArr2[i10 - 1] += i12;
            } while (++i12 < 9);
        }
        long meth_res = l3 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i5, long l2, byte by) {

        int i6=-155, i7=48321, i8=48768, i9=-7, iArr3[]=new int[N];
        byte by1=-63;
        boolean b1=false;

        FuzzerUtils.init(iArr3, -34443);

        switch ((((Math.abs(110) >>> 1) % 1) * 5) + 108) {
        case 110:
            i6 = 1;
            while (++i6 < 319) {
                Test.iFld *= (int)(++Test.instanceCount);
                switch (((((int)(Test.dFld - 76.100F)) >>> 1) % 5) + 110) {
                case 110:
                    for (i7 = 1; i7 < 5; i7++) {
                        i9 = 2;
                        while ((i9 -= 2) > 0) {
                            by = (byte)(((i6 + 1.22025) + iMeth1(l2)) - i8);
                            Test.dFld -= i7;
                            i8 = i8;
                            l2 = i6;
                            Test.iFld += (((i9 * Test.iFld) + by1) - i5);
                            if (false) {
                                Test.fFld += i9;
                                i8 += -10;
                                i5 += (int)-73L;
                            } else if (b1) {
                                if (i9 != 0) {
                                }
                            } else if (false) {
                                Test.fFld += (((i9 * Test.fFld) + i5) - Test.iFld);
                            }
                        }
                    }
                    break;
                case 111:
                    Test.iFld += (int)-917949546L;
                case 112:
                    i5 &= i5;
                case 113:
                    iArr3[i6 - 1] = i5;
                    break;
                case 114:
                    Test.dFld *= i8;
                    break;
                }
            }
            break;
        }
        long meth_res = i5 + l2 + by + i6 + i7 + i8 + i9 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr3);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(long l, double d1) {

        int i2=-4097, i3=15, i4=0, i13=-55364, iArr1[]=new int[N];
        long l1=-12L;
        short s=7613;
        byte by2=83;

        FuzzerUtils.init(iArr1, -111);

        for (i2 = 17; i2 < 369; ++i2) {
            for (l1 = 1; l1 < 5; l1++) {
                s = (short)(Test.instanceCount--);
                iArr1[(int)(l1 - 1)] -= (int)dMeth(i2, -7677645649981330060L, by2);
                Test.lArrFld[(int)(l1 - 1)] <<= -8;
                switch ((i2 % 4) + 76) {
                case 76:
                    Test.fFld -= l;
                    Test.iFld = -107;
                    break;
                case 77:
                    Test.fFld = i4;
                    break;
                case 78:
                    Test.iFld <<= (int)l1;
                    try {
                        Test.iFld = (i4 % -1220182032);
                        iArr1[i2 + 1] = (Test.iFld / i4);
                        i3 = (-9466 % i2);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i2] = 65229;
                case 79:
                    i13 = 1;
                    do {
                        s = s;
                        Test.fFld += i4;
                    } while (++i13 < 2);
                    break;
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d1) + i2 + i3 + l1 + i4 + s + by2 + i13 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=29390, i1=-11585, i14=-25374, i15=-87, i16=-12, i17=9, i18=25651, i19=-3, i20=1317, iArr[]=new int[N];
        double d=-16.35049;
        float f=1.324F, fArr[][]=new float[N][N];
        byte by3=34;
        long l4=8737481549631999951L;
        short s1=5383;

        FuzzerUtils.init(iArr, 249);
        FuzzerUtils.init(fArr, 2.418F);

        Test.iFld = (int)(((Test.iFld - Test.instanceCount) + (-Integer.reverseBytes(Test.iFld))) + (++Test.iFld));
        for (i = 12; i < 283; i++) {
            if (Test.bFld) {
                d += Test.instanceCount;
                f += iArr[i];
            } else if (true) {
                iArr[i - 1] *= iMeth(Test.instanceCount, Test.dFld);
                Test.fFld = i;
            } else {
                iArr = iArr;
            }
            switch (((Test.iFld >>> 1) % 9) + 36) {
            case 36:
                Test.iFld += (((i * Test.instanceCount) + i) - Test.fFld);
                for (i14 = 2; 93 > i14; ++i14) {
                    i1 *= i;
                    fArr[i - 1][i14 - 1] = 142;
                    Test.fFld *= Test.iFld;
                    Test.bFld = Test.bFld;
                }
                for (i16 = i; i16 < 93; i16++) {
                    i15 += i16;
                    for (i18 = 1; i18 < 1; i18 += 3) {
                        f = i15;
                        iArr[i18] = i1;
                        if (Test.bFld) continue;
                        by3 += (byte)(((i18 * i15) + f) - i18);
                    }
                    Test.dFld += i16;
                    Test.lArrFld[i16 + 1] -= i14;
                    switch (((i16 % 6) * 5) + 27) {
                    case 47:
                        Test.lArrFld[i] = i15;
                        i15 *= (int)Test.instanceCount;
                        i1 += Test.iFld;
                        break;
                    case 35:
                    case 56:
                        fArr[i - 1][i16 + 1] += i16;
                        Test.iFld = (int)2.657F;
                    case 42:
                        i19 <<= (int)Test.instanceCount;
                        break;
                    case 28:
                        Test.instanceCount = i18;
                    case 39:
                        Test.iFld <<= (int)Test.instanceCount;
                        break;
                    }
                }
            case 37:
                Test.sArrFld = FuzzerUtils.short1array(N, (short)31362);
                break;
            case 38:
                i17 = i1;
                break;
            case 39:
            case 40:
                l4 += i;
            case 41:
            case 42:
                s1 = (short)i20;
            case 43:
                i20 += (i ^ i1);
                break;
            case 44:
                d *= -59.895F;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
