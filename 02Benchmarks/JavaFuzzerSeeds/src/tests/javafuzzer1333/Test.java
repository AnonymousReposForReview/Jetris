package tests.javafuzzer1333;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30L;
    public static byte byFld=10;
    public static long lFld=-192L;
    public static double dFld=1.77395;
    public volatile boolean bFld=false;
    public short sFld=-14520;
    public static int iFld=8;
    public static float fArrFld[]=new float[N];
    public boolean bArrFld[]=new boolean[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -51.129F);
        FuzzerUtils.init(Test.dArrFld, 42.15069);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i12, long l) {

        int i13=58609, i14=-150, i16=6, i17=17147, i18=57092, i19=61618, iArr1[][]=new int[N][N], iArr2[]=new int[N];
        short s=-17600;

        FuzzerUtils.init(iArr1, 74);
        FuzzerUtils.init(iArr2, 4);

        for (i13 = 398; i13 > 11; --i13) {
            iArr1[i13 + 1][i13 + 1] *= (int)113.40562;
            i14 += i13;
        }
        i12 -= 1;
        if (true) {
            Test.fArrFld[(i12 >>> 1) % N] += 1.819F;
            for (int i15 : iArr2) {
                for (i16 = 4; 1 < i16; i16 -= 2) {
                    for (i18 = 1; 4 > i18; ++i18) {
                        Test.byFld += (byte)(i18 + l);
                        Test.lFld += (((i18 * s) + i16) - i17);
                        iArr1[i18][i16 - 1] = i12;
                        i15 = -43460;
                        i14 += (i18 - Test.instanceCount);
                    }
                    if (i16 != 0) {
                    }
                }
            }
        } else {
            Test.fArrFld[(-11 >>> 1) % N] -= i13;
        }
        long meth_res = i12 + l + i13 + i14 + i16 + i17 + i18 + i19 + s + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i10=-27284, i11=32740, i20=30788, i21=-250, i22=6, i23=-117, iArr3[]=new int[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 1.54F);
        FuzzerUtils.init(iArr3, -37782);

        if (bFld) {
            for (i10 = 6; i10 < 127; ++i10) {
                i11 *= (iMeth1(i10, Test.instanceCount) - 0);
                i20 = 13;
                while (--i20 > 0) {
                    i11 = 100;
                    i11 = (int)Test.lFld;
                    fArr = fArr;
                }
                i11 += i10;
            }
            Test.dFld = -10;
            i11 = -9;
        } else if (bFld) {
            i21 = 1;
            do {
                iArr3[i21] = i11;
                for (i22 = 1; i22 < 5; i22++) {
                    i23 = i22;
                    i23 += i22;
                }
            } while (++i21 < 365);
        } else if (bFld) {
            Test.lFld = 42551;
        }
        long meth_res = i10 + i11 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i3, int i4, int i5) {

        int i6=-206, i7=-248, i8=-28161, i9=-7130, i24=18708, i25=151, i26=19937, i27=-11, iArr[]=new int[N];
        double d=1.75756, dArr[]=new double[N];
        boolean b=false;
        long l1=-11L, l2=-3415400071L, lArr[]=new long[N];
        float f=-6.256F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -163);
        FuzzerUtils.init(lArr, -865404792508998207L);
        FuzzerUtils.init(sArr, (short)28898);
        FuzzerUtils.init(dArr, 0.105909);

        Test.instanceCount >>= (++iArr[(i3 >>> 1) % N]);
        for (i6 = 8; i6 < 382; i6++) {
            switch (i6 + 94) {
            case 94:
                Test.instanceCount += (i6 * i6);
                break;
            case 95:
                i8 = 1;
                while (++i8 < 5) {
                    lArr[i6] -= i5;
                    i9 = (-(i4 -= iMeth()));
                }
                Test.instanceCount += (-54 + (i6 * i6));
            case 96:
                iArr = iArr;
            case 97:
                d = 5;
                do {
                    sArr[(int)(d)] -= (short)i7;
                    for (i24 = 1; i24 < 2; i24++) {
                        sFld = (short)Test.dFld;
                        i25 <<= -98;
                        i3 += i24;
                    }
                } while ((d -= 2) > 0);
                break;
            case 98:
                i9 >>= i6;
            case 99:
                i25 += i6;
            case 100:
                Test.lFld += i6;
            case 101:
                i25 = i24;
            case 102:
                if (i24 != 0) {
                    vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i24 + i25 + (b ?
                        1 : 0) + l1 + Float.floatToIntBits(f) + l2 + i26 + i27 + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            case 103:
                i25 -= i3;
                break;
            case 104:
            case 105:
                Test.instanceCount <<= -7;
                break;
            case 106:
                i4 >>= i6;
                break;
            case 107:
                Test.instanceCount = Test.instanceCount;
                break;
            case 108:
                i5 = i3;
            case 109:
                i3 += i5;
                break;
            case 110:
                bArrFld[i6] = b;
            case 111:
                i5 = (int)Test.lFld;
                break;
            case 112:
                Test.instanceCount ^= i5;
            case 113:
                i9 += (((i6 * i4) + Test.lFld) - i7);
                break;
            case 114:
                if (bFld) break;
                break;
            case 115:
                i3 = sFld;
                break;
            case 116:
                lArr[i6] = i25;
                break;
            case 117:
                i7 <<= i24;
                break;
            case 118:
            case 119:
                dArr[i6 - 1] -= i5;
                break;
            case 120:
                if (bFld) break;
            case 121:
                try {
                    i7 = (i5 % i24);
                    i3 = (iArr[i6 + 1] % i7);
                    iArr[i6 + 1] = (i9 / i5);
                } catch (ArithmeticException a_e) {}
                break;
            case 122:
                i5 = (int)Test.lFld;
                break;
            case 123:
                l1 += (((i6 * l1) + l1) - Test.lFld);
                break;
            case 124:
                i5 = sFld;
            case 125:
            case 126:
                i9 += (((i6 * Test.instanceCount) + i6) - i25);
                break;
            case 127:
                Test.dFld = i6;
                break;
            case 128:
                i5 -= (int)1.22F;
                break;
            case 129:
                iArr[i6] -= (int)-111.23158;
                break;
            case 130:
                iArr[i6] += (int)Test.lFld;
                break;
            case 131:
                if (bFld) continue;
                break;
            case 132:
                try {
                    iArr[i6 + 1] = (484913379 / i6);
                    i7 = (i24 % iArr[i6 + 1]);
                    i5 = (i7 % i6);
                } catch (ArithmeticException a_e) {}
            case 133:
                i25 = (int)f;
                break;
            case 134:
                if (b) break;
                break;
            case 135:
                Test.fArrFld = Test.fArrFld;
                break;
            case 136:
                i9 = i5;
                break;
            case 137:
                Test.instanceCount -= l2;
            case 138:
                Test.dFld *= l1;
                break;
            case 139:
            case 140:
                f -= i9;
                break;
            case 141:
                f += (i6 * i6);
            case 142:
                i25 = -57658;
                break;
            case 143:
                i7 += (-40608 + (i6 * i6));
                break;
            case 144:
                bFld = false;
            case 145:
                i25 += i6;
                break;
            case 146:
                l1 += (((i6 * i8) + i26) - Test.lFld);
            case 147:
                i25 >>= i9;
                break;
            case 148:
                i3 = i4;
                break;
            case 149:
                f = Test.byFld;
                break;
            case 150:
                i25 = i6;
                break;
            case 151:
                iArr[i6] = i5;
                break;
            case 152:
                Test.lFld >>= i7;
                break;
            case 153:
                Test.lFld = 8276321356604613575L;
                break;
            case 154:
                i3 = 2;
            case 155:
                i26 *= (int)l1;
                break;
            case 156:
                i5 *= i27;
                break;
            case 157:
            case 158:
                Test.instanceCount = i4;
            case 159:
                Test.dFld += Test.instanceCount;
            case 160:
                bArrFld[i6] = true;
                break;
            case 161:
            case 162:
                i3 <<= i24;
                break;
            case 163:
                i26 -= (int)228L;
                break;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i24 + i25 + (b ? 1 : 0) + l1
            + Float.floatToIntBits(f) + l2 + i26 + i27 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-20207, i1=-2593, i2=-100, i28=57313, i29=12, i30=-34174, i31=-62401, iArr4[]=new int[N];
        float f1=-10.270F;

        FuzzerUtils.init(iArr4, 5);

        i = 1;
        do {
            for (i1 = 5; i1 < 121; i1++) {
                switch ((((i >>> 1) % 2) * 5) + 38) {
                case 42:
                    vMeth(i2, i1, -6);
                    i2 += (int)f1;
                    i2 <<= i2;
                    i2 += (((i1 * i1) + i1) - i2);
                    break;
                case 43:
                    Test.iFld -= -128;
                    i2 -= Test.byFld;
                    Test.dFld -= -15452L;
                    break;
                default:
                    Test.lFld = -22650;
                    Test.iFld = i2;
                    for (i28 = 2; 1 < i28; --i28) {
                        i29 *= (int)2.868F;
                        i29 -= i2;
                    }
                }
                iArr4[i1] += i1;
                i2 += (((i1 * i) + i29) - i29);
                Test.lFld |= i;
                i29 *= Test.iFld;
                Test.iFld += (int)Test.dFld;
                Test.dArrFld[i1] /= (Test.iFld | 1);
            }
            Test.iFld = (int)Test.instanceCount;
            switch (((i >>> 1) % 1) + 64) {
            case 64:
                i29 += i2;
                Test.instanceCount <<= Test.iFld;
                iArr4 = FuzzerUtils.int1array(N, (int)5713);
                for (i30 = i; 121 > i30; ++i30) {
                    f1 -= (float)Test.dFld;
                }
                break;
            default:
                Test.byFld %= (byte)(i | 1);
                iArr4[i] |= i;
            }
        } while (++i < 208);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
