package tests.javafuzzer1256;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:31:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public static int iFld=6660;
    public static float fFld=-2.703F;
    public static short sFld=30238;
    public static boolean bFld=false;
    public long lFld=9L;
    public double dArrFld[]=new double[N];
    public byte byArrFld[]=new byte[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vMeth(long l) {


        Test.fFld *= (((Test.fFld * Test.iFld) + (Test.instanceCount - Test.iFld)) - (-l));
        vMeth_check_sum += l;
    }

    public static int iMeth(int i1) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -36811L);

        vMeth(++lArr[(i1 >>> 1) % N]);
        long meth_res = i1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(short s) {

        int i4=-11472, i5=1224, i6=5780, i7=23997, i8=6;

        for (i4 = 11; i4 < 279; ++i4) {
            Test.instanceCount += i4;
            Test.iFld |= (i5++);
            Test.iFld = (int)(Test.instanceCount - ((Test.fFld * Test.instanceCount) * Test.fFld));
            vMeth(-3052239024587274708L);
            for (i6 = 1; i6 < 6; i6++) {
                Test.iFld = i7;
                Test.iFld += (i6 ^ Test.iFld);
                i7 += (i6 | i7);
                i5 += (((i6 * Test.iFld) + Test.sFld) - Test.instanceCount);
                Test.fFld -= i8;
                Test.iFld -= i8;
                Test.bFld = Test.bFld;
                Test.instanceCount -= Test.iFld;
            }
            Test.instanceCount = Test.instanceCount;
        }
        long meth_res = s + i4 + i5 + i6 + i7 + i8;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i2, int i3, double d1) {

        int i9=-85, i10=-57, i11=104, i12=-10, iArr1[]=new int[N];
        byte by=-11;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr1, 54676);
        FuzzerUtils.init(dArr, 105.13930);

        Test.bFld = bMeth((short)(21689));
        for (i9 = 18; i9 < 304; ++i9) {
            i10 += (((i9 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            i10 += i9;
            for (i11 = 1; i11 < 6; ++i11) {
                i10 += 105;
                by *= (byte)i11;
                iArr1[i11 + 1] = by;
                iArr1[i11] = (int)Test.instanceCount;
                Test.instanceCount -= i10;
                iArr1[i11] = i3;
                Test.instanceCount <<= 60648;
                Test.iFld *= by;
                dArr[i9 - 1] = dArr[i9];
            }
            iArr1[i9 - 1] *= i11;
        }
        vMeth1_check_sum += i2 + i3 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + by +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        float f=-7.963F, fArr[]=new float[N];
        double d=-2.42911, d2=0.24927;
        int i=-57493, i14=52129, i15=-1021, i16=13, i17=-9242, i18=-9, iArr[]=new int[N];
        long l1=-14L, lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 0.25F);
        FuzzerUtils.init(iArr, 120);
        FuzzerUtils.init(lArr1, -8970195875864926583L);
        FuzzerUtils.init(lArr2, -6L);

        Test.iFld = (int)(((fArr[(Test.iFld >>> 1) % N]--) + (Test.iFld++)) * (f--));
        vMeth(--Test.instanceCount);
        for (d = 8; d < 154; d++) {
            Test.iFld /= (int)((i *= Test.iFld) | 1);
            switch ((int)(((d % 3) * 5) + 33)) {
            case 46:
                vMeth(iMeth(iArr[(int)(d)]) + (Test.sFld--));
                vMeth(Test.instanceCount - (-(iArr[(int)(d)] = i)));
                if (true) {
                    vMeth1(Test.iFld, i, d);
                    i14 &= -13;
                    iArr[(int)(d)] >>= i;
                    for (i15 = (int)(d); i15 < 172; i15++) {
                        d2 *= Test.instanceCount;
                    }
                } else {
                    lArr1[(int)(d - 1)] = i16;
                    f += (float)d;
                    lArr2 = lArr2;
                }
                break;
            case 40:
                l1 = 172;
                while ((l1 -= 2) > 0) {
                    i = Test.sFld;
                    d2 = i;
                    dArrFld[(int)(d)] = 46767;
                    iArr[(int)(l1)] -= Test.iFld;
                }
                lFld = i;
                lArr2[(int)(d - 1)] = i14;
                break;
            case 38:
                f = i16;
                f -= l1;
            default:
                i16 += Test.iFld;
                byArrFld[(int)(d - 1)] = (byte)Test.instanceCount;
            }
            for (i17 = (int)(d); i17 < 172; i17++) {
                lFld -= i18;
                if (Test.bFld) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth bMeth vMeth1
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  bMeth ->  bMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
