package tests.javafuzzer3191;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:35:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static double dFld=0.103943;
    public static volatile int iFld=186;
    public static short sFld=26598;
    public static int iArrFld[]=new int[N];
    public volatile short sArrFld[]=new short[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -144);
        FuzzerUtils.init(Test.fArrFld, 83.953F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {

        int i5=10, i6=-59851, i7=212, i8=-3, i9=100, i10=-218, i11=-13, i12=-14, i13=-42644, i14=-26, iArr[]=new int[N];
        long l1=784277657L;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 27);

        for (i5 = 10; i5 < 215; i5++) {
            Test.instanceCount = i5;
            Test.instanceCount -= i6;
            for (i7 = 1; i7 < 8; i7++) {
                for (i9 = 2; i9 > i5; --i9) {
                    Test.instanceCount ^= i6;
                }
            }
            i4 -= (int)Test.dFld;
        }
        i11 = 1;
        do {
            Test.instanceCount += i11;
            for (l1 = 1; 7 > l1; l1++) {
                for (i13 = 1; i13 < 2; i13++) {
                    bArr[i13] = b1;
                    iArr[i13] *= i9;
                    i10 += (int)112.99481;
                    i4 += 1;
                }
            }
        } while (++i11 < 231);
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + l1 + i12 + i13 + i14 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, double d2, long l) {

        float f=2.672F;
        int i3=14, iArr1[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -908818141697183840L);
        FuzzerUtils.init(iArr1, 32858);

        try {
            lArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = i2;
            i2 >>= (i2 + Math.max(++i2, 137 - Math.min(-166, i2)));
            lArr = (lArr = (lArr = (lArr = lArr)));
            f = 1;
            do {
                i2 *= i2;
                i3 = 1;
                while (++i3 < 7) {
                    byte by=-5;
                    lArr[(int)(f)][(int)(f + 1)] <<= (++by);
                    i2 += (i3 * i2);
                    by -= (byte)i2;
                    Test.instanceCount <<= (iMeth1(i2) - -6);
                }
                i2 += (int)f;
                i2 <<= (int)Test.instanceCount;
                lArr[(int)(f)][(int)(f)] = i3;
                i2 -= i3;
            } while (++f < 245);
        }
        catch (NullPointerException exc1) {
            iArr1[(i2 >>> 1) % N] = i2;
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d2) + l + Float.floatToIntBits(f) + i3 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(double d1, boolean b) {

        int i15=175, i16=143, i17=-163, i18=-60185, i19=-172, i20=-63, iArr2[]=new int[N];
        byte by1=-68;
        float f1=0.28F, f2=0.1016F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(lArr1, 54135L);

        vMeth(Test.iFld, Test.dFld, Test.instanceCount);
        i15 = 1;
        while (++i15 < 317) {
            Test.instanceCount += (i15 ^ i15);
            for (i16 = 1; 5 > i16; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.instanceCount |= -86;
                    iArr2[i18] >>= -19078;
                    if (i17 != 0) {
                    }
                }
                iArr2[i16] -= by1;
                lArr1[i15] = i16;
            }
            i20 = 1;
            while (++i20 < 5) {
                f1 += (((i20 * f2) + i20) - Test.instanceCount);
                iArr2[i15] = i20;
                if (b) continue;
                iArr2[(i16 >>> 1) % N] *= i20;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + by1 + i20 +
            Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-144, i1=-3, i21=122, i22=52681, i23=4359, i24=-4, i25=-46071, i26=13, i27=-45261, iArr3[][]=new
            int[N][N];
        double d=0.17348, d3=-2.27272;
        boolean b2=false;
        byte by2=50;
        float f3=-2.942F;

        FuzzerUtils.init(iArr3, -254);

        for (i = 4; i < 299; i++) {
            d *= (i1 *= (int)Test.instanceCount);
            Test.instanceCount = (-iMeth(d, b2));
        }
        Test.instanceCount += Test.instanceCount;
        for (i21 = 5; i21 < 219; i21++) {
            Test.iFld += (((i21 * Test.sFld) + Test.instanceCount) - i22);
            by2 <<= (byte)i1;
            d3 = 1;
            while (++d3 < 117) {
                Test.instanceCount -= i21;
                try {
                    i22 = (i / -1987839027);
                    i1 = (Test.iFld % -231);
                    i1 = (45466 % i21);
                } catch (ArithmeticException a_e) {}
                i23 = 1;
                do {
                    i1 = by2;
                    Test.iArrFld = Test.iArrFld;
                    i1 += i23;
                    i1 += (i23 * i23);
                    i1 <<= -76;
                    sArrFld[i21 + 1] *= (short)i21;
                } while (++i23 < 1);
                for (i24 = i21; 1 > i24; ++i24) {
                    Test.instanceCount += (((i24 * Test.instanceCount) + i22) - i1);
                    Test.iFld = i25;
                    iArr3 = iArr3;
                    Test.fArrFld = Test.fArrFld;
                    Test.fArrFld[(int)(d3)] *= Test.iFld;
                    iArr3[(int)(d3 - 1)][i21 + 1] *= (int)Test.instanceCount;
                    Test.iFld >>= i23;
                    Test.sFld <<= (short)i1;
                    i22 += i24;
                }
                for (i26 = 1; i26 < 1; i26++) {
                    i1 -= by2;
                    f3 += Test.sFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
