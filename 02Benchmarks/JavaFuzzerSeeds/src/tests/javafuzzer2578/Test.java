package tests.javafuzzer2578;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:50:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4322292201363016594L;
    public static double dFld=0.115922;
    public static byte byFld=-118;
    public static int iFld=7;
    public static float fFld=1.826F;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, float f) {

        int i6=-234, i7=65, i8=-246, i9=1639;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -39L);

        Test.byFld >>= (byte)i5;
        f *= i5;
        Test.dFld += Test.dFld;
        for (i6 = 2; i6 < 294; ++i6) {
            i7 += i6;
            i7 += (((i6 * i6) + f) - i6);
            try {
                i7 = (i6 / 59652);
                i5 = (201 / i6);
                i5 = (-507014561 % i7);
            } catch (ArithmeticException a_e) {}
            if (i5 != 0) {
                vMeth2_check_sum += i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(lArr);
                return;
            }
            i7 += (int)Test.instanceCount;
            Test.instanceCount = i5;
            i5 = (int)Test.instanceCount;
            i7 += (int)-12.978F;
            for (i8 = 1; i8 < 6; ++i8) {
                Test.dFld += Test.instanceCount;
                lArr[i8 - 1] ^= i7;
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i3) {

        float f1=-30.966F;
        int i10=-10249, i11=-60200, i12=-6, i13=8524, i14=91, i15=-7260, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -5);

        iArr1 = (iArr1 = iArr1);
        for (int i4 : iArr1) {
            i4 |= i4;
        }
        vMeth2(i3, f1);
        i3 -= i3;
        for (i10 = 231; 9 < i10; i10 -= 2) {
            iArr1[i10] ^= i3;
            for (i12 = 1; i12 < 14; ++i12) {
                try {
                    i13 = (i12 % i11);
                    i11 = (i10 / -896055970);
                    iArr1[i12 - 1] = (Test.iFld / i11);
                } catch (ArithmeticException a_e) {}
                for (i14 = 2; i14 > 1; i14--) {
                    i3 += i14;
                    Test.instanceCount = i13;
                    i3 = Test.iFld;
                    Test.iFld >>>= i11;
                    Test.iFld += i14;
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        short s=11554;
        int i1=-126, i2=44558, i16=74, i17=31936, iArr[]=new int[N];
        double d=-80.100301;

        FuzzerUtils.init(iArr, -13);

        i -= (int)Long.reverseBytes(Test.instanceCount *= (-iArr[(41270 >>> 1) % N]));
        Test.dFld += s;
        for (i1 = 2; i1 < 244; i1++) {
            vMeth1(-34);
            for (d = 1; d < 7; d++) {
                boolean b=false;
                i += (int)d;
                switch (((i1 % 6) * 5) + 98) {
                case 119:
                    Test.instanceCount += (long)Test.fFld;
                    i17 = 1;
                    while (++i17 < 2) {
                        iArr[(int)(d)] *= i17;
                    }
                    Test.instanceCount += i16;
                    break;
                case 104:
                    if (b) break;
                    i -= (int)-2104271308L;
                    break;
                case 127:
                    i16 = (int)Test.instanceCount;
                case 113:
                    try {
                        Test.iFld = (-5084 / iArr[(int)(d + 1)]);
                        iArr[(int)(d + 1)] = (-238 % iArr[(int)(d - 1)]);
                        iArr[(int)(d + 1)] = (Test.iFld % iArr[(int)(d - 1)]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 122:
                    i16 += (int)(d - i2);
                case 116:
                    Test.instanceCount <<= i1;
                    break;
                }
            }
        }
        vMeth_check_sum += i + s + i1 + i2 + Double.doubleToLongBits(d) + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-13, i19=-132, i20=-5, i21=1, i22=-4, i23=-2481, i24=-23, i25=-171, i26=6371;
        long l=3579049301580270907L;
        short s1=855;
        double d1=-39.10044;
        boolean b1=true;

        if (b1) {
            vMeth(Test.iFld);
            for (i18 = 3; i18 < 327; ++i18) {
                Test.instanceCount *= Test.instanceCount;
                i19 = (int)l;
                i19 -= Test.iFld;
                i19 -= (int)Test.fFld;
                Test.iFld = s1;
                i19 = i19;
                Test.instanceCount = (long)Test.dFld;
                i19 += (((i18 * Test.iFld) + l) - Test.iFld);
            }
            for (i20 = 7; i20 < 198; i20++) {
                Test.byFld *= (byte)i21;
                s1 -= (short)i21;
                i19 += (i20 + i22);
                switch (((i22 >>> 1) % 2) + 11) {
                case 11:
                    i23 = 131;
                    while ((i23 -= 2) > 0) {
                        iArrFld[i23] *= (int)Test.fFld;
                        Test.byFld += (byte)(3 + (i23 * i23));
                        Test.iFld ^= i18;
                    }
                    i22 -= Test.byFld;
                    switch ((i20 % 8) + 78) {
                    case 78:
                        Test.iFld += (i20 * i20);
                        switch ((i20 % 2) + 59) {
                        case 59:
                            for (i24 = 8; i24 < 131; i24++) {
                                iArrFld[i20] = i18;
                                for (d1 = i20; d1 < 2; ++d1) {
                                    iArrFld[i24] |= s1;
                                    Test.iFld += Test.iFld;
                                }
                                i22 += (i24 - i22);
                            }
                            break;
                        case 60:
                            b1 = false;
                            break;
                        }
                        break;
                    case 79:
                        iArrFld[i20 + 1] -= i22;
                        break;
                    case 80:
                        Test.fFld -= Test.fFld;
                        break;
                    case 81:
                    case 82:
                        Test.instanceCount += (long)Test.fFld;
                        break;
                    case 83:
                        i26 = (int)2744089153L;
                        break;
                    case 84:
                        i22 >>= i26;
                        break;
                    case 85:
                        Test.dFld %= (l | 1);
                    }
                    break;
                case 12:
                    i21 += i21;
                    break;
                default:
                    s1 = (short)i24;
                }
            }
        } else if (b1) {
            iArrFld[(i25 >>> 1) % N] &= Test.iFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
