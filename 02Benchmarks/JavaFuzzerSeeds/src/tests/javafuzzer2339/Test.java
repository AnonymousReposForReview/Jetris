package tests.javafuzzer2339;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:58:47 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3860018708L;
    public static int iFld=-13579;
    public static byte byFld=-55;
    public static byte byFld1=26;
    public static long lFld=-135L;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 62298);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i4, long l1) {

        int i5=14, i6=-172, i7=14, i8=107, i9=6, i10=-60;
        boolean b=true;
        byte by=37;
        float f1=0.214F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -75.686F);

        i4 = (int)l1;
        i4 = i4;
        for (i5 = 296; i5 > 7; i5 -= 3) {
            if (b) break;
            i4 += (i5 ^ i6);
            try {
                i4 = (-60376 / i6);
                i6 = (Test.iArrFld[i5 - 1] % i4);
                i4 = (1160642762 % i5);
            } catch (ArithmeticException a_e) {}
            for (i7 = 1; i7 < 16; ++i7) {
                b = b;
                for (i9 = 1; i9 < 2; i9++) {
                    by += (byte)f1;
                    fArr[i9 + 1] -= i10;
                }
                by = (byte)i10;
                i8 *= Test.iFld;
                i4 += i4;
            }
            i4 -= (int)l1;
        }
        vMeth2_check_sum += l + i4 + l1 + i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + by + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i1, int i2, int i3) {

        short s=-30302;
        boolean b1=true;
        int i11=-31, i12=-234, iArr[]=new int[N];
        float f2=95.225F, fArr1[][]=new float[N][N];
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr1, 91.497F);
        FuzzerUtils.init(lArr, 55L);
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(byArr, (byte)-62);

        vMeth2(6902503299055293059L, 136, -284044293L);
        fArr1[(i3 >>> 1) % N][(4 >>> 1) % N] += s;
        lArr = FuzzerUtils.long1array(N, (long)-835288015L);
        i2 = i3;
        if (b1) {
            Test.instanceCount += Test.instanceCount;
        }
        switch ((((i3 >>> 1) % 2) * 5) + 64) {
        case 70:
            for (i11 = 10; i11 < 322; ++i11) {
                iArr[i11] >>= Test.iFld;
                f2 += -2.378F;
                Test.iFld >>= i1;
                i1 += (((i11 * i1) + i11) - i1);
                Test.byFld -= (byte)86;
                Test.byFld1 += (byte)i11;
                iArr[i11] = (int)f2;
            }
            break;
        case 66:
            Test.iFld |= (int)Test.instanceCount;
            break;
        }
        vMeth1_check_sum += i1 + i2 + i3 + s + (b1 ? 1 : 0) + i11 + i12 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth() {

        float f=-65.855F, f3=48.440F;
        int i=48788, i13=2, i14=-7;
        boolean b2=false;

        f += (i--);
        vMeth1(i, i, Test.iFld);
        f3 = 1;
        do {
            Test.byFld += Test.byFld;
            Test.iArrFld[(int)(f3)] -= (int)f3;
            b2 = b2;
            if (b2) {
                Test.iFld += (int)(f3 + i);
                Test.instanceCount = Test.instanceCount;
            } else {
                for (i13 = 1; i13 < 8; ++i13) {
                    Test.instanceCount -= Test.iFld;
                    Test.iFld += (i13 ^ i);
                    i14 = 85;
                    i += (i13 * i);
                    f = Test.iFld;
                }
            }
        } while (++f3 < 213);
        vMeth_check_sum += Float.floatToIntBits(f) + i + Float.floatToIntBits(f3) + (b2 ? 1 : 0) + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=2623, i16=-242, i17=-44, i18=-97, i19=25259, i20=-5, i21=-238, i22=-60074, i23=37618, i24=-11;
        short s1=-8048;
        float f4=1.585F;
        boolean b3=false;
        double d=0.34732, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.18433);

        vMeth();
        Test.iFld = (int)Test.instanceCount;
        Test.instanceCount += Test.iFld;
        Test.iFld = -104;
        switch (((Test.iFld >>> 1) % 10) + 112) {
        case 112:
            for (i15 = 2; i15 < 308; i15++) {
                for (i17 = 82; i17 > 2; i17 -= 2) {
                    i18 += s1;
                    try {
                        i18 = (i18 / i15);
                        i16 = (i15 % 4587);
                        Test.iArrFld[i17] = (26367 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                }
                try {
                    i18 = (i17 % i18);
                    Test.iArrFld[i15] = (Test.iFld % i16);
                    Test.iArrFld[i15 + 1] = (i15 % -1932783081);
                } catch (ArithmeticException a_e) {}
                for (i19 = i15; i19 < 82; ++i19) {
                    i18 -= i18;
                    Test.iArrFld[i15 + 1] += i17;
                    i20 = -36253;
                    for (i21 = i15; i21 < 1; i21++) {
                        i20 -= Test.iFld;
                        lArrFld[i15 - 1][i15 + 1] = Test.lFld;
                        i22 -= (int)Test.lFld;
                        Test.iFld <<= i16;
                        i16 = (int)Test.instanceCount;
                        i20 *= (int)f4;
                        if (b3) continue;
                        i18 += (-7 + (i21 * i21));
                    }
                    lArrFld[i15][i19] += (long)92.63019;
                }
                Test.byFld1 += (byte)(i15 * i15);
                if (b3) {
                    i18 = (int)Test.instanceCount;
                    for (i23 = 5; i23 < 82; i23++) {
                        Test.instanceCount = i19;
                        s1 &= (short)i18;
                    }
                } else if (b3) {
                    lArrFld[i15 + 1][i15] <<= i16;
                } else {
                    dArr[i15] -= i17;
                }
            }
        case 113:
            Test.iFld *= (int)Test.lFld;
        case 114:
            Test.iFld = i18;
        case 115:
            Test.iArrFld = Test.iArrFld;
            break;
        case 116:
            Test.iArrFld[(i16 >>> 1) % N] >>= i24;
            break;
        case 117:
            Test.iArrFld[(i20 >>> 1) % N] *= (int)f4;
            break;
        case 118:
            f4 = (float)d;
            break;
        case 119:
            d += i23;
        case 120:
            b3 = b3;
        case 121:
            i18 -= (int)-71.40808;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
