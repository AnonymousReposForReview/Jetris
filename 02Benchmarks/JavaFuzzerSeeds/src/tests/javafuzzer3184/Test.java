package tests.javafuzzer3184;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:29:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1987L;
    public static float fFld=1.545F;
    public static double dFld=-107.101048;
    public static byte byFld=-49;
    public static float fFld1=2.218F;
    public boolean bFld=true;
    public int iFld=-62;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1) {

        int i5=12, i6=226, i7=-40, i8=5462, i9=-36640, i10=18594;
        short s=25219;
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.35023);

        i5 = i5;
        i5 |= i5;
        i6 = 1;
        do {
            i5 *= i5;
            for (i7 = 1; i7 < 5; i7++) {
                Test.fFld = s;
                if (b) {
                    if (i6 != 0) {
                        vMeth2_check_sum += Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + s + (b ? 1 : 0) + i9 +
                            i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                } else {
                    if (b) continue;
                    Test.fFld = Test.fFld;
                    dArr[i7 + 1] -= Test.fFld;
                }
                for (i9 = 1; i9 < 2; i9++) {
                    i5 = i7;
                    Test.fFld = Test.instanceCount;
                    i8 += i9;
                }
            }
        } while (++i6 < 318);
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + s + (b ? 1 : 0) + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i3, int i4) {

        int i11=-8230, i12=-43479, i13=3, i14=-1, i15=-93;
        boolean b1=true;
        float f=2.413F;

        vMeth2(0.87993);
        Test.dFld -= 155;
        i4 += i3;
        i3 += i4;
        for (i11 = 9; i11 < 249; i11++) {
            if (b1) break;
            i3 = (int)Test.instanceCount;
        }
        for (f = 13; f < 328; ++f) {
            b1 = false;
            for (i14 = (int)(f); i14 < 5; ++i14) {
                if (b1) break;
                Test.instanceCount |= i14;
                i3 >>= (int)Test.instanceCount;
                Test.instanceCount -= i4;
                if (i13 != 0) {
                    vMeth1_check_sum += i3 + i4 + i11 + i12 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i13 + i14 + i15;
                    return;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i11 + i12 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i13 + i14 + i15;
    }

    public void vMeth(long l, int i, double d) {

        int i1=36267, i2=-14057, i16=7202, i17=62485, i18=58, i19=18, i20=36, i21=-140, iArr[]=new int[N];
        boolean b2=false;
        short s1=9855;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -93);
        FuzzerUtils.init(fArr, -1.998F);

        for (i1 = 5; i1 < 352; i1++) {
            vMeth1(i1, i2);
            for (i16 = 1; i16 < 5; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    i17 += (((i18 * i) + i19) - i);
                    i17 -= i2;
                    Test.fFld += (i18 - Test.fFld);
                    if (b2) break;
                    iArr[i18] = (int)-12L;
                    Test.instanceCount = i2;
                }
                Test.instanceCount = l;
                for (i20 = 2; i20 > i16; i20--) {
                    Test.byFld = (byte)i21;
                    fArr[i16 - 1] += s1;
                    i21 += (((i20 * i) + i21) - i21);
                }
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + i2 + i16 + i17 + i18 + i19 + (b2 ? 1 : 0) + i20 +
            i21 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=13, i23=32784, i24=-9, i25=5, i26=-231, i27=5790, i28=-11, i29=-65357, i30=109, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, 26);

        vMeth(Test.instanceCount, i22, Test.dFld);
        switch (((i22 >>> 1) % 10) + 30) {
        case 30:
            i23 = 1;
            while (++i23 < 350) {
                i22 -= (int)Test.fFld1;
                Test.fFld += Test.byFld;
                i22 -= i23;
                bFld = bFld;
                i22 -= i23;
                i22 = i22;
            }
            i22 += i23;
            break;
        case 31:
            for (i24 = 318; i24 > 6; i24 -= 3) {
                i25 = (int)Test.dFld;
                for (i26 = 13; i26 < 241; i26 += 3) {
                    for (i28 = i26; 4 > i28; ++i28) {
                        i22 = Test.byFld;
                        iFld |= i25;
                        i29 += (int)Test.fFld1;
                        i27 += i28;
                        try {
                            i30 = (51108 / iFld);
                            iArr1[i24 - 1][i28] = (i24 % -1833243589);
                            i25 = (iArr1[i28][i26 + 1] % i27);
                        } catch (ArithmeticException a_e) {}
                        iArr1[i24 + 1][i28 + 1] = i28;
                        iArr1[i26][i28] ^= i29;
                    }
                    Test.instanceCount -= iFld;
                    switch (((i24 % 4) * 5) + 90) {
                    case 95:
                        iArr1[i26 - 1] = iArr1[i26 + 1];
                        if (bFld) break;
                        break;
                    case 91:
                        i22 <<= -186;
                    case 99:
                        iArr1[i26 - 1][i26] = i29;
                        i30 += iFld;
                        bFld = bFld;
                    case 101:
                        i29 = (int)Test.fFld;
                        break;
                    default:
                        iArr1[i26][i24] -= (int)Test.instanceCount;
                    }
                }
            }
        case 32:
            iFld = 5;
            break;
        case 33:
            iArr1[(i27 >>> 1) % N][(i28 >>> 1) % N] += i27;
            break;
        case 34:
            iFld -= i24;
            break;
        case 35:
            i27 = (int)-2916453761L;
            break;
        case 36:
            i27 >>= i28;
        case 37:
            i22 += i26;
        case 38:
            iArr1[(iFld >>> 1) % N] = iArr1[(i26 >>> 1) % N];
            break;
        case 39:
            Test.byFld -= (byte)i29;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
