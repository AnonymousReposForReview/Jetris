package tests.javafuzzer3313;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:47:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static boolean bFld=true;
    public static float fFld=116.454F;
    public static int iFld=-7004;
    public static int iFld1=7;
    public static int iFld2=81;
    public int iFld3=-99;
    public byte byArrFld[][]=new byte[N][N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10) {

        byte by=-101, byArr[]=new byte[N];
        int i11=14, i12=6, i13=-35729, i14=-8, i15=0, iArr1[]=new int[N];
        short s1=6295;
        double d3=-95.7735;

        FuzzerUtils.init(byArr, (byte)26);
        FuzzerUtils.init(iArr1, -13);

        i10 += by;
        for (i11 = 4; i11 < 249; i11 += 3) {
            Test.fFld += i11;
            switch (((i10 >>> 1) % 8) + 126) {
            case 126:
                by = (byte)i11;
                break;
            case 127:
                Test.fFld += i11;
                i12 -= 27;
                i13 = 1;
                do {
                    for (i14 = 1; 1 > i14; i14++) {
                        Test.bFld = Test.bFld;
                        i10 *= i15;
                        i10 += (14 + (i14 * i14));
                    }
                } while (++i13 < 19);
                if (Test.bFld) {
                    i12 /= (int)(i13 | 1);
                } else if (Test.bFld) {
                    i15 = (int)Test.instanceCount;
                }
                break;
            case 128:
                i12 += (((i11 * i13) + s1) - Test.fFld);
                break;
            case 129:
                byArr = FuzzerUtils.byte1array(N, (byte)113);
                break;
            case 130:
                try {
                    iArr1[i11] = (i15 / Test.iFld);
                    Test.iFld = (i13 % 55885);
                    i15 = (i11 % -26324);
                } catch (ArithmeticException a_e) {}
                break;
            case 131:
                Test.instanceCount *= (long)d3;
                break;
            case 132:
            case 133:
                i12 += (int)3834652900L;
                break;
            default:
                i12 += (int)Test.instanceCount;
            }
        }
        long meth_res = i10 + by + i11 + i12 + i13 + i14 + i15 + s1 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(double d2, int i4, short s) {

        int i5=-61634, i6=-15982, i7=-9, i8=-26084, i9=-3480, i16=18023, i17=-151, i18=34652, iArr2[]=new int[N];
        float f=-109.751F;

        FuzzerUtils.init(iArr2, -61);

        for (i5 = 6; i5 < 160; i5++) {
            for (i7 = 1; 10 > i7; i7++) {
                f -= ((Test.instanceCount + (f - i9)) + Math.max(i7, (int)(Test.instanceCount * i8)));
                Test.instanceCount += (214L + (i7 * i7));
                i4 += (int)((i6 * lMeth(i5)) * f);
                i9 += (i7 * Test.instanceCount);
            }
            Test.instanceCount += (((i5 * i5) + Test.instanceCount) - i4);
            f += (((i5 * s) + i4) - i9);
            try {
                i16 = (i5 / 36490);
                Test.iFld = (-65401 / i8);
                i8 = (52 / i7);
            } catch (ArithmeticException a_e) {}
            i6 += i5;
            for (i17 = 1; i17 < 10; ++i17) {
                iArr2[i5] = 12;
                i16 = i16;
                d2 = Test.iFld1;
                f *= i5;
            }
        }
        long meth_res = Double.doubleToLongBits(d2) + i4 + s + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i16 +
            i17 + i18 + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(double d) {

        int i=-5, i1=221, i2=33581, i3=-42505, iArr[][]=new int[N][N];
        double d1=-36.97751;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr, -2070);
        FuzzerUtils.init(sArr, (short)-17732);

        i = 1;
        while (++i < 393) {
            if (Test.bFld) continue;
            for (i1 = 1; i1 < 4; ++i1) {
                iArr[i1 - 1][i] -= (int)Test.instanceCount;
                if (Test.bFld) {
                    d *= -40.36092;
                    sArr = (sArr = (sArr = (sArr = sArr)));
                    for (d1 = 2; d1 > 1; d1--) {
                        switch (((i2 >>> 1) % 1) + 68) {
                        case 68:
                            i3 *= (int)fMeth(d, Test.iFld, (short)(28390));
                            break;
                        default:
                            if (i2 != 0) {
                                vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 +
                                    Double.doubleToLongBits(d1) + i3 + FuzzerUtils.checkSum(iArr) +
                                    FuzzerUtils.checkSum(sArr);
                                return;
                            }
                        }
                        Test.iFld += (int)d1;
                        d -= -2;
                        d += Test.iFld;
                        iArr[i][i1] = (int)4151396946L;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + Double.doubleToLongBits(d1) + i3 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        double d4=54.17929, d5=-124.124021;
        int i19=4, i20=-29, i21=1, i22=-9, i23=30395;
        long l=-2359L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.919F);

        vMeth(d4);
        if (Test.bFld) {
            i19 = 1;
            while (++i19 < 356) {
                for (i20 = 1; i20 < 71; ++i20) {
                    Test.iFld <<= i19;
                }
                Test.instanceCount += (i19 * i19);
                Test.iFld += (i19 - Test.instanceCount);
                l = 1;
                do {
                    Test.instanceCount += (l + i21);
                    Test.iFld1 >>= Test.iFld;
                    i21 = Test.iFld1;
                    d4 += i19;
                    switch ((((i19 >>> 1) % 5) * 5) + 56) {
                    case 57:
                        if (Test.bFld) continue;
                        break;
                    case 81:
                        d5 = 1;
                        do {
                            Test.iFld1 = Test.iFld2;
                            Test.iFld1 >>= i19;
                            Test.iFld1 += (int)d5;
                            Test.iFld2 = i20;
                            byArrFld[(int)(d5)][i19 - 1] += (byte)Test.iFld2;
                            fArr[(int)(d5)] = i19;
                        } while (++d5 < 1);
                        Test.fFld -= Test.iFld1;
                        Test.iFld >>= i21;
                        Test.iFld2 += (int)(((l * Test.instanceCount) + i19) - iFld3);
                        break;
                    case 62:
                        Test.iFld <<= (int)l;
                        i21 *= (int)d5;
                        Test.iFld1 += (int)-2.106609;
                        for (i22 = (int)(l); 1 > i22; ++i22) {
                            Test.iFld2 -= (int)d5;
                            i23 = Test.iFld2;
                        }
                        break;
                    case 70:
                        i21 = Test.iFld2;
                    case 80:
                        iFld3 = i23;
                        break;
                    }
                } while (++l < 71);
            }
        } else if (Test.bFld) {
            i23 += -32;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
