package tests.javafuzzer877;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:07:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5189994403122715447L;
    public static float fFld=90.626F;
    public static int iFld=1;
    public static double dFld=-67.9022;
    public static volatile boolean bFld=false;
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.123345);
        FuzzerUtils.init(Test.iArrFld, -230);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-60741, iArr1[]=new int[N];
        byte by=88;
        float f1=2.795F;

        FuzzerUtils.init(iArr1, -25511);

        Test.iFld = Test.iFld;
        Test.dFld *= Test.instanceCount;
        iArr1[(Test.iFld >>> 1) % N] -= (int)Test.instanceCount;
        i7 = 1;
        do {
            Test.fFld = Test.iFld;
            if (Test.bFld) {
                Test.iFld <<= -228;
                Test.iFld -= (int)3275736678L;
                Test.iFld = i7;
            } else if (Test.bFld) {
                Test.iFld = (int)Test.fFld;
            } else if (Test.bFld) {
                iArr1[i7 + 1] -= by;
                f1 = 1;
                while (++f1 < 7) {
                    Test.fFld += (((f1 * by) + f1) - Test.iFld);
                    Test.instanceCount += Test.instanceCount;
                }
            } else {
                Test.iFld *= (int)Test.instanceCount;
            }
        } while (++i7 < 218);
        vMeth1_check_sum += i7 + by + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i4, boolean b, long l) {

        int i5=-189, i6=-51683, i8=3, i9=-5, iArr[]=new int[N];
        short s1=-26902;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, -2L);

        for (i5 = 1; i5 < 226; i5++) {
            i6 += (((i5 * i4) + i5) - Test.fFld);
            Test.fFld -= (((Test.instanceCount++) * iArr[i5 - 1]) - Test.fFld);
            vMeth1();
            l -= i5;
            i6 <<= i6;
            lArr[i5 - 1] = Test.iFld;
            s1 += (short)i5;
        }
        Test.iFld += i5;
        Test.dArrFld[(-116 >>> 1) % N] = Test.dArrFld[(i5 >>> 1) % N];
        i4 <<= Test.iFld;
        for (i8 = 11; i8 < 322; i8 += 2) {
            i6 <<= i6;
        }
        lArr = FuzzerUtils.long1array(N, (long)-30819L);
        l -= i5;
        long meth_res = i4 + (b ? 1 : 0) + l + i5 + i6 + s1 + i8 + i9 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i3=-204, i10=70, i11=0, i12=-197;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7725654344586640910L);

        i3 -= (int)lMeth(i3, Test.bFld, Test.instanceCount);
        lArr1[(Test.iFld >>> 1) % N] = i3;
        Test.instanceCount *= (long)Test.fFld;
        Test.instanceCount = (long)Test.fFld;
        Test.iFld = i3;
        i10 = 1;
        while (++i10 < 333) {
            Test.instanceCount <<= i10;
        }
        i3 <<= Test.iFld;
        for (i11 = 6; i11 < 134; i11++) {
            Test.fFld += (i11 * i11);
            if (Test.bFld) {
                Test.dFld = Test.iFld;
                Test.fFld += (i11 + i3);
            } else if (Test.bFld) {
                Test.instanceCount ^= i3;
                Test.iFld *= i10;
            } else {
                Test.bFld = Test.bFld;
            }
        }
        vMeth_check_sum += i3 + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        short s=24642;
        int i=-10680, i1=-10, i2=13940, i13=4, i14=-113, i15=-49362, i16=57, i17=-11, i18=53917, i19=13, iArr2[]=new
            int[N];
        float f=2.1006F;
        byte by1=94;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 144);
        FuzzerUtils.init(lArr2, -7600809976558829828L);

        s = (short)(Math.min((long)(i - f), i - s) + (i++));
        for (i1 = 3; 241 > i1; i1++) {
            vMeth();
            i13 = Test.iFld;
            if (Test.bFld) {
                i2 -= -6;
            }
        }
        iArr2[(i2 >>> 1) % N] = Test.iFld;
        i14 = 1;
        while (++i14 < 186) {
            i += (-3 + (i14 * i14));
            by1 += (byte)Test.instanceCount;
            i *= i14;
            i15 = 135;
            while ((i15 -= 2) > 0) {
                Test.iFld <<= -4;
                for (i16 = i14; i16 < 2; i16++) {
                    i17 += (i16 * i16);
                    i13 = i;
                    i13 = i16;
                    lArr2[i14] |= -1;
                    Test.iFld += (((i16 * i1) + i1) - Test.instanceCount);
                    Test.instanceCount |= Test.instanceCount;
                    f -= i16;
                }
                if (Test.bFld) {
                    Test.iArrFld[i14] = Test.iArrFld[i14];
                } else {
                    i2 += (((i15 * i15) + Test.fFld) - i16);
                    switch (((i14 % 1) * 5) + 107) {
                    case 111:
                        for (i18 = i14; i18 < 2; ++i18) {
                            lArr2[i15] = i19;
                            i <<= -42943;
                            Test.dFld = i14;
                            Test.instanceCount -= (long)1.541F;
                        }
                        break;
                    default:
                        Test.dFld = i16;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
