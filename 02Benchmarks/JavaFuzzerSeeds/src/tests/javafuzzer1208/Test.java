package tests.javafuzzer1208;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:34:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2750272912L;
    public static float fFld=2.584F;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2158868558L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=-22352, i9=44824, i10=79, i11=-91, i12=1, iArr2[][]=new int[N][N];
        double d1=90.21507;
        boolean b1=false;

        FuzzerUtils.init(iArr2, 28);

        i8 <<= i8;
        for (d1 = 5; d1 < 207; d1++) {
            iArr2[(int)(d1)][(i8 >>> 1) % N] -= (int)Test.fFld;
            for (i10 = 1; i10 < 8; ++i10) {
                Test.fFld -= i8;
                i12 = 1;
                do {
                    i9 = i11;
                    Test.fFld = i8;
                    iArr2[(int)(d1)][i10 - 1] += -1;
                    if (b1) break;
                    i8 = (int)Test.fFld;
                    i11 += (i12 ^ i11);
                } while (++i12 < 2);
            }
            i9 = (int)Test.instanceCount;
            iArr2[(int)(d1 - 1)][(int)(d1 - 1)] = i11;
            Test.instanceCount += (long)(d1 * Test.fFld);
        }
        long meth_res = i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i6, int i7, long l1) {

        float f2=0.100F;
        int iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -20642);
        FuzzerUtils.init(lArr1, -52L);

        i7 = (int)((Test.fFld--) + Math.max((int)(31375 + (i6 - l1)), (int)(f2 + i7)));
        i7 = (++iArr1[(i7 >>> 1) % N]);
        i7 = ((i7 * (i7 + i6)) - iMeth1());
        lArr1[(i6 >>> 1) % N] = -56667L;
        i7 >>= (int)l1;
        vMeth_check_sum += i6 + i7 + l1 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(byte by, double d) {

        int i=-205, i1=-1993, i2=199, i3=9, i4=18, i5=17173, iArr[]=new int[N];
        float f1=1.785F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 488493398L);
        FuzzerUtils.init(iArr, 100);

        for (long l : lArr) {
            float f=96.384F;
            i = i;
            f += (--i);
            for (i1 = 1; i1 < 4; ++i1) {
                for (f1 = 1; f1 < 2; f1++) {
                    try {
                        i2 = (i3 % -100520985);
                        i3 = (i2 % 1258461181);
                        iArr[(int)(f1)] = (iArr[i1] % iArr[(int)(f1)]);
                    } catch (ArithmeticException a_e) {}
                    l += (-6533525676503397638L + (f1 * f1));
                    i3 = (-(--i2));
                    i &= (int)Long.reverseBytes(--Test.instanceCount);
                    iArr[i1] += (int)(i1 - f1);
                }
                i2 = (int)(--Test.instanceCount);
            }
            if (b) continue;
            for (i4 = 1; 4 > i4; ++i4) {
                vMeth(i2, i1, Test.instanceCount);
                i3 *= i5;
            }
        }
        long meth_res = by + Double.doubleToLongBits(d) + i + i1 + i2 + Float.floatToIntBits(f1) + i3 + (b ? 1 : 0) +
            i4 + i5 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by1=33;
        double d2=-2.72132;
        int i13=-56263, i14=-247, i15=11710, i16=6, i17=63, i18=207, i19=-230, i20=-129, i21=130, i22=-211, i23=-11,
            i24=13, i25=-1, i26=-12, i27=-9, iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr3, -80);

        iMeth(by1, d2);
        i13 = 1;
        while (++i13 < 378) {
            for (i14 = 3; i14 < 67; ++i14) {
                Test.fFld = -3486;
            }
            i15 += (i13 - i15);
            i16 = 1;
            while (++i16 < 67) {
                i15 += (i16 * i16);
                Test.lArrFld[i13] = i15;
                iArr3[i16][i13 + 1] = i14;
                i15 <<= i13;
                for (i17 = 1; i17 < 1; ++i17) {
                    iArr3[i16 - 1][i13] |= i14;
                    i15 = (int)Test.instanceCount;
                    i15 = i15;
                    i18 += (int)Test.instanceCount;
                }
                i15 -= (int)Test.instanceCount;
                for (i19 = 1; i13 < i19; --i19) {
                    i18 -= i13;
                }
                for (i21 = 1; i21 < 1; i21++) {
                    i15 = i15;
                    i23 += i21;
                }
                i18 += i14;
            }
            switch (((i23 >>> 1) % 5) + 25) {
            case 25:
                Test.instanceCount |= -12977;
                for (i24 = 3; i24 < 67; i24++) {
                    Test.instanceCount >>= i25;
                    for (i26 = 1; i26 < 2; i26++) {
                        if (Test.bFld) continue;
                        d2 = i15;
                        iArr3[i24][i13 + 1] = i15;
                    }
                }
                break;
            case 26:
                iArr3[i13 - 1][i13] -= i24;
                break;
            case 27:
                i15 &= (int)Test.instanceCount;
                break;
            case 28:
                i15 >>>= i19;
                break;
            case 29:
                iArr3[i13][i13] = (int)Test.instanceCount;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
