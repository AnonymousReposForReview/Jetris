package tests.javafuzzer85;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:07:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static byte byFld=-103;
    public static int iFld=3;
    public short sFld=29412;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -170);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i) {

        boolean b=true;

        b = (!((-24 + (i + i)) == Math.max(l, Test.instanceCount)));
        vSmallMeth_check_sum += l + i + (b ? 1 : 0);
    }

    public static boolean bMeth(boolean b2) {

        int i10=-25115, i11=15296, i12=120, i13=-237, i14=14;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 52.62410);

        Test.iArrFld = Test.iArrFld;
        if (b2) {
            i10 = 134;
            while (--i10 > 0) {
                Test.iFld = i10;
                for (i11 = 1; i11 < 12; i11++) {
                    for (i13 = i11; i13 < 2; i13++) {
                        if (b2) break;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)61293);
                        try {
                            i14 = (-1198266153 / Test.iArrFld[i13 - 1]);
                            i14 = (i12 % i14);
                            i12 = (i10 / -1);
                        } catch (ArithmeticException a_e) {}
                        Test.iArrFld[i13] *= i11;
                        Test.byFld = (byte)i11;
                        Test.instanceCount = Test.byFld;
                        i14 += i13;
                        dArr[i10] = i11;
                        Test.iArrFld[i10] = (int)Test.instanceCount;
                    }
                }
            }
        } else if (b2) {
            Test.instanceCount -= i13;
        } else {
            Test.iFld = i13;
        }
        long meth_res = (b2 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth1() {

        boolean b1=false;
        int i15=8, i16=-29277, i17=-32158, i18=-13;
        long l1=-136L, l2=-2417047944L, lArr1[]=new long[N];
        double d2=-78.76064;
        float f2=-2.51F;

        FuzzerUtils.init(lArr1, -17L);

        b1 = (((Test.iFld++) != Test.iFld) & bMeth(b1));
        Test.iFld = (int)Test.instanceCount;
        for (i15 = 337; 4 < i15; i15--) {
            switch ((i15 % 9) + 108) {
            case 108:
                l1 = 1;
                while (++l1 < 5) {
                    Test.instanceCount += i16;
                    i16 += i16;
                    for (i17 = i15; i17 < 1; ++i17) {
                        lArr1[(i18 >>> 1) % N] = Test.iFld;
                        d2 += Test.iFld;
                        Test.iFld -= (int)l1;
                        Test.byFld = (byte)Test.iFld;
                    }
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-1);
                    i16 = i18;
                    Test.instanceCount += (((l1 * i16) + i17) - i16);
                }
            case 109:
                Test.iArrFld[i15 - 1] = i15;
                break;
            case 110:
                i18 = (int)l1;
                break;
            case 111:
                d2 -= l2;
                break;
            case 112:
                Test.iFld += (i15 | Test.iFld);
                break;
            case 113:
                i18 >>= i17;
            case 114:
                Test.instanceCount += (i15 * i15);
            case 115:
                f2 = f2;
                break;
            case 116:
                if (i15 != 0) {
                }
                break;
            default:
                if (b1) continue;
            }
        }
        long meth_res = (b1 ? 1 : 0) + i15 + i16 + l1 + i17 + i18 + Double.doubleToLongBits(d2) + l2 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f=2.617F, f1=-68.584F;
        int i8=9, i9=-226, i19=128, i20=27726;
        short s=4285;
        double d1=1.11260, dArr1[]=new double[N];
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, 2788055218L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr1, -119.8086);

        f = 1;
        while (++f < 325) {
            int i7=-160;
            i7 += (int)f;
        }
        if (Test.iFld < (iMeth1() + d1)) {
            f1 = (Test.iFld *= ((Test.iFld - Test.iFld) * (--Test.iFld)));
            for (i8 = 6; i8 < 144; ++i8) {
                s %= (short)(((long)((lArr[i8] + Math.sqrt(d1)) - (i9 %= (int)((Test.iFld + i8) | 1)))) | 1);
                try {
                    Test.iArrFld[i8 + 1] = (i9 / -21618);
                    i9 = (Test.iFld % 35);
                    i9 = (26454 / i8);
                } catch (ArithmeticException a_e) {}
            }
        } else {
            bArr[(Test.iFld >>> 1) % N] = false;
        }
        for (i19 = 15; i19 < 377; ++i19) {
            Test.instanceCount = (long)f;
            Test.iFld >>= -102;
            i20 += (i19 * i19);
            Test.iArrFld[i19 + 1] = i20;
            Test.instanceCount += (i19 ^ i8);
        }
        i20 = Test.iFld;
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i8 + i9 + s + Double.doubleToLongBits(d1)
            + i19 + i20 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=42434, i2=65, i3=61298, i4=1, i5=42411, i6=-132, i21=5, i22=-207, i23=24, iArr[]=new int[N];
        double d=83.34680;
        float f3=-90.970F;
        boolean b3=true;

        FuzzerUtils.init(iArr, 33);

        for (int smallinvoc=0; smallinvoc<343; smallinvoc++) vSmallMeth(Test.instanceCount++, Math.max(i1 = (i1 -
            Test.byFld), (int)((-(iArr[(i1 >>> 1) % N]--)) + -11L)));
        for (d = 277; d > 7; d--) {
            i3 = 1;
            do {
                i1 = (i1--);
                for (i4 = 1; 1 > i4; i4++) {
                    i5 = (int)(((i3 + i6) & Math.max(Test.instanceCount, 17635L)) * iMeth());
                    i6 += (i4 - f3);
                    Test.iFld |= -195;
                }
                f3 += (float)d;
                f3 += i3;
                i2 *= sFld;
                for (i21 = 1; i21 < 1; i21++) {
                    switch ((int)(((d % 3) * 5) + 91)) {
                    case 105:
                    case 95:
                        iArr[i3] += i5;
                        break;
                    case 94:
                        Test.instanceCount >>>= i1;
                        f3 += i22;
                        i1 = i5;
                        i2 *= -142;
                        break;
                    default:
                        i1 -= Test.iFld;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    iArr[(int)(d - 1)] -= (int)f3;
                    Test.iArrFld[(int)(d + 1)] += (int)-88.32349;
                    i2 += (((i21 * i21) + Test.instanceCount) - i3);
                    f3 -= (float)d;
                }
                if (true) {
                    i5 <<= (int)-42L;
                    Test.instanceCount >>= 129L;
                    iArr[(int)(d - 1)] *= i3;
                } else if (b3) {
                    i6 += (((i3 * Test.iFld) + i5) - i3);
                    Test.instanceCount *= -92;
                } else if (b3) {
                    i23 >>>= i3;
                }
            } while (++i3 < 93);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
