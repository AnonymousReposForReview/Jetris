package tests.javafuzzer1777;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:14:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4990497106310939615L;
    public static float fFld=-2.928F;
    public static byte byFld=121;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.151F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, long l2) {

        int i3=189, i4=1, i5=0, iArr1[]=new int[N];
        double d=105.102044;
        float f1=26.262F;
        boolean b=true;

        FuzzerUtils.init(iArr1, 31);

        if (false) {
            i3 = 1;
            do {
                d -= -4;
                i2 = 27404;
                f1 = 1;
                do {
                    i2 = (int)l2;
                    if (b) {
                        for (i4 = 1; i4 < 1; ++i4) {
                            l2 -= (long)f1;
                            i5 = (int)l2;
                            i5 += (int)-27.18908;
                            d += 10;
                        }
                        i5 += (int)(((f1 * l2) + Test.instanceCount) - i2);
                    } else if (b) {
                        b = b;
                        iArr1[(int)(f1 + 1)] = i4;
                    }
                } while (++f1 < 6);
            } while (++i3 < 288);
        } else if (b) {
            d = i2;
        } else {
            i5 = i4;
        }
        vMeth2_check_sum += i2 + l2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i4 + i5 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(short s1, long l1, int i1) {

        int i6=-12, i7=-8545, i8=9, iArr[][]=new int[N][N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 63315);
        FuzzerUtils.init(lArr, -4746335971169032841L);

        i1 <<= (i1 - (-(iArr[(i1 >>> 1) % N][(i1 >>> 1) % N]++)));
        vMeth2(i1, Test.instanceCount);
        if (b1) {
            i1 -= i1;
        } else if (b1) {
            i6 = 257;
            do {
                i1 -= i6;
                lArr[i6 + 1] >>>= i6;
                i1 *= (int)-122.983F;
                Test.fFld += (((i6 * i6) + i1) - l1);
                Test.fArrFld[i6 - 1][i6] -= Test.instanceCount;
                for (i7 = 1; i7 < 6; ++i7) {
                    i8 += (int)489337695L;
                    i8 -= (int)l1;
                    i8 += (((i7 * i8) + i6) - i1);
                    i1 += (((i7 * i6) + i8) - Test.fFld);
                }
            } while (--i6 > 0);
        } else {
            Test.instanceCount = i7;
        }
        vMeth1_check_sum += s1 + l1 + i1 + i6 + i7 + i8 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, long l) {

        float f=0.769F;
        short s=-19029;
        double d1=-2.94713, dArr[]=new double[N];
        int i9=-7, i10=-10, i11=-186, i12=-6, i13=-36;

        FuzzerUtils.init(dArr, 0.102184);

        i = (int)(((f * i) % (i | 1)) * s);
        vMeth1(s, 28L, i);
        Test.fArrFld[(i >>> 1) % N][(i >>> 1) % N] += i;
        dArr[(i >>> 1) % N] *= d1;
        i += (int)10L;
        for (i9 = 1; i9 < 144; i9++) {
            for (i11 = 1; 11 > i11; ++i11) {
                Test.instanceCount += Test.instanceCount;
            }
            i10 = 109;
            i12 /= (int)24.575F;
            i13 = 1;
            while (++i13 < 11) {
                i12 += (((i13 * l) + i9) - Test.fFld);
                i10 = (int)-23914L;
                f -= Test.instanceCount;
                i *= s;
            }
        }
        vMeth_check_sum += i + l + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 +
            i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i14=51161, i15=13, i16=41, i17=-19054, i18=-52, i19=-45280, i20=-19891, iArr2[]=new int[N];
        boolean b2=true;
        double d2=-37.45532;
        short s2=15034;

        FuzzerUtils.init(iArr2, 15175);

        vMeth(i14, Test.instanceCount);
        for (i15 = 15; i15 < 271; i15++) {
            i16 >>= i16;
            i14 += (i15 - i14);
            i17 = 1;
            while (++i17 < 98) {
                for (i18 = i17; 1 > i18; i18++) {
                    try {
                        i16 = (i16 % i16);
                        iArr2[i17 - 1] = (i15 % i16);
                        i14 = (-253 % iArr2[i15 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i14 += (i18 * i18);
                    Test.fFld -= Test.byFld;
                    i19 *= i19;
                    Test.fFld += (i18 * i18);
                    switch ((i17 % 5) + 84) {
                    case 84:
                        i19 += (int)Test.instanceCount;
                        try {
                            i16 = (i14 % i15);
                            i14 = (iArr2[i15] % i15);
                            i16 = (i16 / i16);
                        } catch (ArithmeticException a_e) {}
                        iArr2 = iArr2;
                        b2 = b2;
                        break;
                    case 85:
                        switch ((((i18 >>> 1) % 5) * 5) + 77) {
                        case 79:
                            Test.fFld = 136;
                        case 86:
                            Test.fFld = i16;
                            break;
                        case 81:
                            i14 += (int)(-120.282F + (i18 * i18));
                            break;
                        case 94:
                        case 78:
                            b2 = b2;
                            switch ((i17 % 1) + 93) {
                            case 93:
                                i19 -= Test.byFld;
                            default:
                                Test.byFld = (byte)i18;
                                switch (((7 >>> 1) % 10) + 65) {
                                case 65:
                                    d2 = 3498873771L;
                                    i14 += (int)1241280425642514319L;
                                case 66:
                                    Test.instanceCount %= (i14 | 1);
                                    i19 >>= i15;
                                    i19 = i16;
                                case 67:
                                    Test.instanceCount = i19;
                                    break;
                                case 68:
                                    Test.fFld = i15;
                                    break;
                                case 69:
                                    s2 += (short)i16;
                                case 70:
                                    Test.instanceCount -= (long)Test.fFld;
                                case 71:
                                    i16 += i18;
                                case 72:
                                    Test.byFld += (byte)(i18 * i18);
                                    break;
                                case 73:
                                    i16 *= (int)Test.fFld;
                                    break;
                                case 74:
                                    i14 *= 6;
                                    break;
                                }
                            }
                            break;
                        default:
                            i19 >>= -157;
                        }
                        break;
                    case 86:
                        Test.fArrFld[i18 + 1] = Test.fArrFld[i18];
                        break;
                    case 87:
                        s2 = (short)d2;
                    case 88:
                    default:
                        i14 += (i18 - i20);
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
