package tests.javafuzzer257;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=-10;
    public static boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -17);
        FuzzerUtils.init(Test.fArrFld, 14.702F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2, boolean b) {

        int i4=1, i5=165, i6=9, i7=-12, i8=11, i9=31084, i10=0, iArr[]=new int[N];
        float f1=-1.366F;
        byte by=-111;
        short s=-2674;
        double d=0.90622;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -8907804731197242141L);
        FuzzerUtils.init(iArr, 91);

        lArr1[(113 >>> 1) % N] = Test.iFld;
        i4 = 1;
        do {
            f1 *= i4;
            for (i5 = 1; i5 < 5; i5++) {
                Test.instanceCount += (((i5 * i4) + by) - Test.iFld);
                for (i7 = 2; i7 > 1; --i7) {
                    if (i4 != 0) {
                        vMeth1_check_sum += l1 + l2 + (b ? 1 : 0) + i4 + Float.floatToIntBits(f1) + i5 + i6 + by + i7 +
                            i8 + i9 + s + Double.doubleToLongBits(d) + i10 + FuzzerUtils.checkSum(lArr1) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    try {
                        i6 = (85 / i9);
                        i6 = (i5 / 301167299);
                        i9 = (i7 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld -= Test.iFld;
                    s = (short)i6;
                    Test.iFld = (int)f1;
                    i6 -= (int)d;
                }
                i10 += (i5 - Test.iFld);
                iArr[i5 - 1] = Test.iFld;
                i6 %= (int)(s | 1);
            }
        } while (++i4 < 309);
        vMeth1_check_sum += l1 + l2 + (b ? 1 : 0) + i4 + Float.floatToIntBits(f1) + i5 + i6 + by + i7 + i8 + i9 + s +
            Double.doubleToLongBits(d) + i10 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        long l3=7529609406452606932L;
        int i11=7, i12=-3, i13=-67, i14=186, i15=248;
        short s1=-13248;
        double d1=-1.61153;
        float f2=1.997F, f3=0.849F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 7.810F);

        vMeth1(l3, l3, Test.bFld);
        i11 = 1;
        do {
            Test.iFld = s1;
        } while (++i11 < 373);
        fArr = fArr;
        d1 -= Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        l3 = 4L;
        for (i12 = 2; i12 < 143; i12++) {
            Test.iArrFld[i12 - 1] = (int)d1;
            i13 += (i12 * f2);
            for (i14 = i12; i14 < 11; ++i14) {
                l3 >>>= i13;
                Test.instanceCount = 238;
                i13 += (i14 - f3);
                i15 += i15;
            }
        }
        long meth_res = l3 + i11 + s1 + Double.doubleToLongBits(d1) + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15
            + Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i2=-172, i3=103, i16=8, i17=1;
        double d2=-88.115599;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8491918014871467375L);

        for (i2 = 12; i2 < 245; ++i2) {
            lArr[i2 - 1] += lMeth();
            Test.iFld -= (int)Test.instanceCount;
        }
        Test.fArrFld = Test.fArrFld;
        Test.iFld += i2;
        f += Test.iFld;
        for (i16 = 4; i16 < 217; ++i16) {
            Test.iArrFld[i16 - 1] = i3;
            switch ((((14 >>> 1) % 3) * 5) + 99) {
            case 103:
                if (Test.bFld) break;
                break;
            case 112:
                Test.iArrFld[i16 - 1] += (int)Test.instanceCount;
                i17 *= 39766;
                d2 = -194;
                break;
            case 104:
                Test.instanceCount += i16;
                f += -12;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i2 + i3 + i16 + i17 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-15368, i1=13423;
        float f4=101.630F;

        for (i = 12; 278 > i; ++i) {
            vMeth(f4, Test.instanceCount);
            f4 += (((i * Test.instanceCount) + i) - Test.instanceCount);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
