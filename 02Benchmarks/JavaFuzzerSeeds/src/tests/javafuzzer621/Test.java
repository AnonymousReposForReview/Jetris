package tests.javafuzzer621;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:41:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7715312452748512259L;
    public static double dFld=1.5261;
    public static float fFld=-122.974F;
    public static short sArrFld[]=new short[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-24771);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, float f, int i5) {

        int i6=-3, iArr[]=new int[N];
        boolean b=false;
        byte by=0;

        FuzzerUtils.init(iArr, -84);

        i5 += i5;
        Test.instanceCount -= i5;
        i5 = (int)Test.dFld;
        i6 = 1;
        do {
            switch ((i6 % 7) + 43) {
            case 43:
                Test.dFld += i6;
                break;
            case 44:
                i5 *= -236;
                break;
            case 45:
                i5 += (int)f;
                break;
            case 46:
                if (b) {
                    i5 ^= (int)Test.instanceCount;
                    iArr[i6 + 1] <<= i6;
                    i5 += (((i6 * f) + i5) - i6);
                }
                if (b) {
                    Test.sArrFld[i6 + 1] = (short)f;
                    i5 += (i6 * i6);
                } else if (true) {
                    f += (float)Test.dFld;
                } else if (true) {
                    by -= (byte)i6;
                } else {
                    l += i6;
                }
                break;
            case 47:
            case 48:
                f += i6;
                break;
            case 49:
                i5 += i6;
                break;
            }
        } while (++i6 < 291);
        long meth_res = l + Float.floatToIntBits(f) + i5 + i6 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth() {

        int i=-7, i1=107, i2=13, i3=-37412, i4=-6611, i7=-54, i8=44817, i9=-40176, iArr1[][]=new int[N][N];
        float f1=111.28F;
        boolean b1=true;

        FuzzerUtils.init(iArr1, -57572);

        i %= 2;
        for (i1 = 11; i1 < 221; ++i1) {
            i += (i1 * i1);
            for (i3 = 8; i3 > 1; i3 -= 2) {
                i4 = (int)(lMeth(Test.instanceCount, Test.fFld, -128) + i);
            }
            i2 |= 29303;
            i4 += i;
            for (f1 = 1; f1 < 8; ++f1) {
                i ^= (int)Test.instanceCount;
                i4 <<= i1;
                b1 = b1;
                for (i8 = i1; 2 > i8; ++i8) {
                    i *= (int)Test.instanceCount;
                    Test.fFld = (float)Test.dFld;
                    iArr1[(int)(f1 - 1)][i1] *= (int)-798303777728632752L;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + i7 + (b1 ? 1 : 0) + i8 + i9 +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(short s) {

        int i10=-47709;

        fMeth();
        Test.fFld = i10;
        vMeth_check_sum += s + i10;
    }

    public void mainTest(String[] strArr1) {

        short s1=-10161;
        int i11=-8;
        boolean b2=true;

        vMeth(s1);
        Test.bArrFld[(i11 >>> 1) % N] = b2;
        i11 = i11;
        i11 %= (int)(s1 | 1);
        s1 <<= (short)i11;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
