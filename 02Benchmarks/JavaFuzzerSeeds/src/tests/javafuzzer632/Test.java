package tests.javafuzzer632;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:58:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3692297489L;
    public int iFld=-38127;
    public static int iFld1=-122;
    public static double dFld=0.5008;
    public static float fFld=-34.146F;
    public static volatile byte byFld=9;
    public static boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -64710);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(float f1) {

        short s=-32003, s1=-8043;
        int i17=-14, i18=-13, i19=-59778, i20=-60446, i21=-1;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1L);

        lArr[(Test.iFld1 >>> 1) % N] = Test.iFld1;
        Test.iFld1 -= s;
        for (i17 = 124; i17 > 3; i17--) {
            lArr[i17] = -3;
            for (i19 = 13; 1 < i19; --i19) {
                Test.instanceCount += (long)Test.dFld;
                i21 = 1;
                do {
                    if (b1) continue;
                    Test.iArrFld1[(i21 >>> 1) % N] = i18;
                    i18 <<= s1;
                    i20 += (i21 - Test.iFld1);
                    Test.iFld1 >>= -58916;
                    Test.instanceCount &= Test.iFld1;
                    Test.instanceCount = Test.iFld1;
                    i20 += i20;
                } while (++i21 < 2);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + s + i17 + i18 + i19 + i20 + i21 + (b1 ? 1 : 0) + s1 +
            FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i13=1, i14=-186, i15=-33738, i16=-42743, i22=0, i23=80, i24=51457, i25=244;
        boolean b2=false;

        Test.instanceCount = Test.iFld1;
        if (b2) {
            for (i13 = 377; i13 > 9; i13 -= 3) {
                for (i15 = 1; i15 < 13; ++i15) {
                    Test.iFld1 -= iMeth2(Test.fFld);
                    Test.instanceCount *= Test.instanceCount;
                    Test.iArrFld1[i13 + 1] = (int)Test.instanceCount;
                    i22 = 16752;
                    Test.iFld1 *= (int)64.412F;
                }
                Test.iArrFld1[i13 + 1] -= (int)6125870842015138006L;
            }
            i22 = (int)Test.instanceCount;
            for (i23 = 6; i23 < 138; i23++) {
                i25 = 1;
                do {
                    i24 = i22;
                    Test.iArrFld1[i25] = i25;
                } while (++i25 < 12);
            }
        } else if (b2) {
            i16 = i14;
        } else {
            Test.instanceCount -= Test.instanceCount;
        }
        long meth_res = i13 + i14 + i15 + i16 + i22 + i23 + i24 + i25 + (b2 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i6) {

        float f=-75.583F, fArr[]=new float[N];
        byte by=-23;
        boolean b=true;
        int i7=42755, i8=-11, i9=-28386, i10=55, i11=78, i12=8;
        double d=1.121325;

        FuzzerUtils.init(fArr, 2.350F);

        f -= (-by);
        b = (((i6 - i6) + (f - Test.instanceCount)) != (-(i6 + i7)));
        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
        for (i8 = 8; i8 < 198; ++i8) {
            for (i10 = i8; 8 > i10; ++i10) {
                iArrFld[i8 + 1] /= (int)(((i7 += iFld) - (i7++)) | 1);
                i12 = 1;
                while (--i12 > 0) {
                    d %= (iMeth1() | 1);
                    i6 = i12;
                    fArr[i12] -= i6;
                    i7 -= (int)Test.fFld;
                    f += (((i12 * i8) + Test.instanceCount) - Test.instanceCount);
                    Test.iArrFld1[i10] = 51483;
                    Test.iFld1 -= (int)Test.instanceCount;
                    i9 = (int)12L;
                }
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f) + by + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i1=50477, i2=-70, i3=2833, i4=-8, i5=-163, i26=38203;
        double d1=-42.122991;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)24);

        i = 1;
        while (++i < 311) {
            i1 = (i1 - Math.min(i | i, 62123));
            for (i2 = 5; i2 < 81; i2++) {
                for (i4 = 1; 2 > i4; ++i4) {
                    i5 = (i1++);
                    i5 = iArrFld[i4];
                    switch ((i2 % 1) + 60) {
                    case 60:
                        iArrFld[i4 - 1] -= -47543;
                        i1 += (((i4 * i2) + i1) - i1);
                        iArrFld[i2] = iMeth(iFld);
                        Test.fFld = Test.iFld1;
                        break;
                    default:
                        Test.iArrFld1[i - 1] = i4;
                        byArr[i + 1] = (byte)i1;
                    }
                    Test.fFld += Test.instanceCount;
                    iFld = Test.byFld;
                    i3 = i5;
                    if (Test.bFld) {
                        if (Test.bFld) break;
                        Test.dFld -= Test.iFld1;
                    } else if (true) {
                        try {
                            i5 = (i4 / i5);
                            iFld = (Test.iFld1 / i2);
                            Test.iFld1 = (i4 / -32185);
                        } catch (ArithmeticException a_e) {}
                        iFld = i;
                        i1 |= (int)Test.instanceCount;
                        try {
                            i3 = (iArrFld[i] % i2);
                            iArrFld[i2] = (i5 / 134930864);
                            i3 = (Test.iFld1 % i);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.bFld = Test.bFld;
                }
                iArrFld[i2] &= iFld;
                i1 -= i3;
                for (d1 = 1; d1 < 2; d1++) {
                    i5 = i1;
                    Test.instanceCount += i5;
                    if (Test.bFld) break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
