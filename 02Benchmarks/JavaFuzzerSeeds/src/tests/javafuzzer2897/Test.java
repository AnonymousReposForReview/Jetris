package tests.javafuzzer2897;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:41:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-206L;
    public static byte byFld=-78;
    public static int iFld=-10;
    public static float fFld=54.354F;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -34205);
        FuzzerUtils.init(Test.lArrFld, 182L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public void vMeth(long l1, int i1, long l2) {

        int i3=-4, i4=140, i5=40113;
        double d1=-100.18035, d2=-127.116970;
        float f1=-1.183F;

        for (int i2 : Test.iArrFld) {
            l1 += i1;
            for (i3 = 1; i3 < 4; i3++) {
                for (d1 = 1; d1 < 2; d1++) {
                    f1 += Test.byFld;
                    i5 <<= 11;
                    d2 = i1;
                    i4 += i4;
                    Test.iArrFld[i3 + 1] *= (int)l1;
                    f1 += (float)(((d1 * Test.instanceCount) + i4) - i4);
                    Test.iArrFld[(int)(d1)] = i4;
                }
                i1 += (i3 + f1);
                d2 *= f1;
                Test.iArrFld[i3] = -212;
                i4 = i4;
            }
        }
        vMeth_check_sum += l1 + i1 + l2 + i3 + i4 + Double.doubleToLongBits(d1) + i5 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d2);
    }

    public int iMeth(long l) {

        float f2=59.341F;
        int i6=64011, i7=57, i8=-1, i9=-14;
        double d3=-1.111518;
        short s1=-1236;
        long l3=2386642275L;

        vMeth(Test.instanceCount, Test.iFld, l);
        Test.iFld += Test.iFld;
        for (f2 = 137; f2 > 5; f2--) {
            d3 += i6;
            try {
                i6 = (Test.iFld % i6);
                Test.iFld = (Test.iFld % -36204);
                i6 = (35943 / i6);
            } catch (ArithmeticException a_e) {}
            l = Test.iFld;
            Test.fFld = 95;
            i7 = 1;
            do {
                Test.iArrFld[i7 - 1] = i6;
                Test.iFld = i7;
                l = s1;
                switch ((i7 % 3) + 9) {
                case 9:
                    for (i8 = 1; i8 < 1; ++i8) {
                        d3 -= l3;
                        Test.iArrFld[i7] &= Test.iFld;
                    }
                case 10:
                    l += i9;
                    break;
                case 11:
                    Test.fFld *= i6;
                    break;
                default:
                    Test.instanceCount <<= Test.byFld;
                }
            } while (++i7 < 12);
        }
        long meth_res = l + Float.floatToIntBits(f2) + i6 + Double.doubleToLongBits(d3) + i7 + s1 + i8 + i9 + l3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(float f, short s, int i) {

        float f3=-1.138F;
        int i10=-17981, i11=-20203, i12=3, i13=-39, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 12);

        iArr = (iArr = iArr);
        iMeth(Test.instanceCount);
        Test.iFld *= i;
        for (f3 = 201; f3 > 5; --f3) {
            Test.lArrFld[(int)(f3 - 1)] = Test.iFld;
        }
        Test.iFld >>>= i;
        for (i11 = 10; i11 < 288; i11++) {
            i13 = 1;
            do {
                b = b;
                Test.byFld += (byte)(33 + (i13 * i13));
                Test.iFld -= 20575;
                Test.instanceCount *= i;
                Test.iFld = (int)Test.instanceCount;
                i10 |= Test.iFld;
                s = (short)i12;
            } while (++i13 < 6);
        }
        long meth_res = Float.floatToIntBits(f) + s + i + Float.floatToIntBits(f3) + i10 + i11 + i12 + i13 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=28.62345;
        short s2=-19507;

        d = (dMeth(Test.fFld, s2, Test.iFld) - Test.iFld);
        Test.fFld += Test.iFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
