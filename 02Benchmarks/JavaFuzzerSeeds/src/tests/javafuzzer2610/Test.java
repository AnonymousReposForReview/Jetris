package tests.javafuzzer2610;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:25:31 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4L;
    public static double dFld=-20.100817;
    public static int iFld=-52;
    public static boolean bFld=true;
    public volatile double dFld1=1.75972;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 68);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l3, byte by1) {

        int i3=-140, i4=5444, i5=13, i6=166, i7=-6;
        float f=1.109F, f1=117.807F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)98);

        i3 = 1;
        while (++i3 < 152) {
            switch ((i3 % 2) + 127) {
            case 127:
                for (i4 = 1; i4 < 10; ++i4) {
                    i5 -= i5;
                }
                i5 = i4;
                switch (((i3 % 1) * 5) + 60) {
                case 65:
                    Test.iArrFld[i3] = i3;
                    break;
                default:
                    for (i6 = 1; i6 < 10; ++i6) {
                        switch ((i6 % 9) + 79) {
                        case 79:
                            i7 *= (int)l3;
                            i7 += (int)1.956F;
                            break;
                        case 80:
                            Test.dFld -= Test.instanceCount;
                        case 81:
                            f %= (l3 | 1);
                            break;
                        case 82:
                            i5 /= (int)18.39F;
                            i5 = 44612;
                        case 83:
                            try {
                                i7 = (142 / i7);
                                i7 = (71 % i7);
                                Test.iArrFld[i3] = (i4 % Test.iArrFld[i3]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 84:
                            i5 = (int)Test.dFld;
                            break;
                        case 85:
                            byArr[i3 + 1] = (byte)Test.instanceCount;
                            break;
                        case 86:
                            i7 += i5;
                            break;
                        case 87:
                            i5 = (int)l3;
                            break;
                        default:
                            i5 += (i6 ^ i4);
                        }
                    }
                }
                break;
            case 128:
                f1 += (float)-1.6321;
                break;
            default:
                i7 += i6;
            }
        }
        vMeth1_check_sum += l3 + by1 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(byte by, long l2) {

        int i1=-11, i2=52049, i8=126, i9=-110, i10=251;
        short s=21477;
        float f2=0.114F, f3=45.623F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -78.745F);

        i1 >>= (int)(((i1 + s) - (Test.dFld--)) - i1);
        i2 = 1;
        while (++i2 < 206) {
            switch ((((12 >>> 1) % 6) * 5) + 97) {
            case 122:
                vMeth1(Test.instanceCount, by);
                f2 = 1;
                do {
                    switch ((int)(((f2 % 7) * 5) + 70)) {
                    case 88:
                    case 100:
                        i1 -= (int)3486003349235538852L;
                        by = (byte)Test.instanceCount;
                    case 79:
                        i1 *= (int)126L;
                        for (i8 = 1; i8 < 1; ++i8) {
                            Test.instanceCount /= (s | 1);
                        }
                        try {
                            i9 = (Test.iArrFld[(int)(f2 + 1)] % i2);
                            Test.iFld = (i8 % -181);
                            Test.iFld = (Test.iArrFld[(int)(f2)] % i9);
                        } catch (ArithmeticException a_e) {}
                    case 73:
                        Test.iFld = i8;
                        f3 -= 46;
                        i1 += Test.iFld;
                        break;
                    case 72:
                        Test.iFld = s;
                        break;
                    case 84:
                        fArr[(int)(f2 + 1)][(int)(f2)] = (float)Test.dFld;
                    case 71:
                        i9 -= (int)f2;
                        break;
                    default:
                        i10 -= i1;
                    }
                } while (++f2 < 8);
            case 124:
                Test.dFld -= l2;
                break;
            case 116:
                Test.dFld = i2;
                break;
            case 102:
                i10 += (i2 * i2);
            case 126:
                f3 += -23656;
                break;
            case 104:
                Test.bFld = Test.bFld;
                break;
            }
        }
        long meth_res = by + l2 + i1 + s + i2 + Float.floatToIntBits(f2) + i8 + i9 + Float.floatToIntBits(f3) + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i, long l1) {

        int i11=-215, i12=-10, i13=113, i14=10, i15=-238, i16=3, i17=41369, iArr[]=new int[N];
        byte by2=-73;

        FuzzerUtils.init(iArr, 9);

        iArr[(i >>> 1) % N] = Math.abs((int)((-(2 + Math.abs(Test.instanceCount))) + (-2 / (lMeth((byte)(-50), l1) |
            1))));
        i = i;
        Test.iArrFld[(0 >>> 1) % N] = Test.iFld;
        for (i11 = 7; i11 < 220; ++i11) {
            l *= (long)Test.dFld;
            Test.iFld <<= i11;
            by2 = (byte)Test.iFld;
            for (i13 = 1; i13 < 8; i13++) {
                i += 5871;
                for (i15 = 2; i15 > 1; i15 -= 3) {
                    i12 -= -3;
                    i14 += i15;
                    i12 += (i15 ^ Test.instanceCount);
                    Test.instanceCount += i14;
                    i12 -= i17;
                }
            }
        }
        vMeth_check_sum += l + i + l1 + i11 + i12 + by2 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i19=-38, i20=-17, i21=-11, i22=-156, i23=-9;
        short s1=10194;
        float f4=0.321F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -122.985F);

        b = b;
        vMeth(Test.instanceCount, Test.iFld, Test.instanceCount);
        for (int i18 : Test.iArrFld) {
            i18 <<= Test.iFld;
            Test.instanceCount <<= Test.iFld;
            Test.dFld = -29827;
            for (i19 = 2; i19 < 63; ++i19) {
                Test.iArrFld[i19 + 1] = i20;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.iArrFld[i19] -= i21;
                    switch ((i19 % 3) + 46) {
                    case 46:
                        i22 *= s1;
                        Test.iArrFld = Test.iArrFld;
                        Test.instanceCount += (((i21 * i21) + i22) - s1);
                    case 47:
                        Test.iArrFld[i21 - 1] &= i19;
                        i22 *= i18;
                        f4 = i18;
                        break;
                    case 48:
                        Test.iFld += Test.iFld;
                        Test.iArrFld[i19] = i18;
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    default:
                        dFld1 = s1;
                    }
                    Test.iArrFld[i21] = i20;
                    i20 >>= Test.iFld;
                    i18 += (((i21 * i23) + s1) - Test.iFld);
                    Test.iArrFld[i21] -= (int)58756L;
                    try {
                        i18 = (235 / Test.iFld);
                        i23 = (202 % i23);
                        i18 = (Test.iArrFld[i19] % i20);
                    } catch (ArithmeticException a_e) {}
                    fArr1 = fArr1;
                }
                i23 += i19;
                i20 -= i18;
            }
            Test.iFld += (int)1.338F;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
