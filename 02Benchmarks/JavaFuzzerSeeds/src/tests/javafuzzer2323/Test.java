package tests.javafuzzer2323;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:21:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=122L;
    public static float fFld=-92.86F;
    public static double dFld=125.59439;
    public boolean bFld=false;
    public volatile short sFld=-3474;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 51612);
        FuzzerUtils.init(Test.dArrFld, 0.35497);
        FuzzerUtils.init(Test.iArrFld1, 15953);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i14, int i15, long l) {

        short s=23640;
        float f1=-2.784F;
        byte by=-107;
        int i16=31461, iArr[]=new int[N];
        long lArr1[][]=new long[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, 5850618450610513182L);
        FuzzerUtils.init(iArr, 53471);
        FuzzerUtils.init(bArr, false);

        Test.dFld -= s;
        Test.instanceCount = (long)Test.fFld;
        l = i14;
        try {
            lArr1[(i14 >>> 1) % N][(i14 >>> 1) % N] = l;
            f1 = 1;
            while (++f1 < 377) {
                i14 -= s;
                iArr[(int)(f1 - 1)] >>= (int)l;
                by -= (byte)61;
                i16 = 1;
                while (++i16 < 4) {
                    i14 += (232 + (i16 * i16));
                    iArr[(int)(f1 - 1)] = s;
                    l = by;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += i16;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            bArr[(i14 >>> 1) % N] = true;
        }
        long meth_res = i14 + i15 + l + s + Float.floatToIntBits(f1) + by + i16 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i5, int i6, int i7) {

        int i8=11, i9=141, i10=-23528, i11=-143, i12=2, i13=31;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -128L);

        lArr[(-2 >>> 1) % N] = (long)((Test.instanceCount * Math.abs(i7)) - (-Test.fFld));
        for (i8 = 11; i8 < 289; i8++) {
            Test.instanceCount *= i9;
            for (i10 = i8; i10 < 6; i10 += 3) {
                for (i12 = 1; 1 < i12; --i12) {
                    int i17=-11;
                    Test.fFld = (float)dMeth(i12, i9, -3185785909L);
                    Test.fFld -= Test.instanceCount;
                    i7 *= -61;
                    Test.instanceCount -= i6;
                    i5 >>= (int)Test.instanceCount;
                    i6 /= (int)(Test.instanceCount | 1);
                    b = b;
                    i17 += i6;
                    i11 -= i11;
                    try {
                        i5 = (617130995 / i5);
                        i11 = (i13 / -619182908);
                        Test.iArrFld[i8 - 1] = (-236 % i12);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f) {

        int i1=-27943, i2=134, i3=-14, i4=-4901, i18=9, i19=131, i20=22847, i21=2;
        byte by1=-97;
        short s1=-15044;

        for (i1 = 8; i1 < 199; i1 += 2) {
            for (i3 = 1; i3 < 16; ++i3) {
                i2 *= iMeth(i1, i1, i1);
                by1 += (byte)(-46740L + (i3 * i3));
                for (i18 = 1; i18 < 2; i18++) {
                    Test.iArrFld = Test.iArrFld;
                    s1 = (short)-8;
                }
                i19 += (((i3 * i19) + Test.instanceCount) - Test.instanceCount);
                Test.dArrFld[i3 + 1][i3 + 1] = i2;
                i4 += (54240 + (i3 * i3));
                for (i20 = 2; i20 > 1; i20--) {
                    i4 = i2;
                }
                i21 = 1;
                Test.iArrFld1 = Test.iArrFld1;
                i19 = (int)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + by1 + i18 + i19 + s1 + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i22=-4, i23=-184, i24=-163, i25=-9, i26=-9, i27=-3;
        byte by2=-7;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, 176L);

        i = (i++);
        Test.instanceCount = lMeth(Test.fFld);
        for (i22 = 15; i22 < 318; i22++) {
            Test.fFld = -3;
            for (i24 = 1; i24 < 83; ++i24) {
                switch (((i22 % 6) * 5) + 60) {
                case 83:
                    Test.iArrFld1[i22][i24] = (int)Test.instanceCount;
                    for (i26 = 1; i26 < 2; ++i26) {
                        i25 = i26;
                        i25 >>>= (int)4L;
                        Test.dFld *= i27;
                        i27 = -11;
                        i27 -= (int)37110L;
                        Test.fFld += i26;
                        switch (((i22 % 9) * 5) + 87) {
                        case 123:
                            switch (((i26 >>> 1) % 6) + 71) {
                            case 71:
                                i -= i22;
                                break;
                            case 72:
                                Test.fFld *= i;
                                i23 *= i;
                                i += i22;
                                i25 += i26;
                                break;
                            case 73:
                                Test.instanceCount <<= i25;
                                i23 += 7;
                                break;
                            case 74:
                                i = (int)Test.fFld;
                                i25 -= 19400;
                                break;
                            case 75:
                                Test.instanceCount -= i25;
                                i27 = (int)Test.instanceCount;
                                break;
                            case 76:
                                Test.dFld += Test.instanceCount;
                                lArr2[i26][i22 - 1] += i24;
                                if (bFld) continue;
                            }
                            break;
                        case 130:
                            i25 = sFld;
                            break;
                        case 106:
                            Test.instanceCount *= i22;
                            break;
                        case 108:
                            Test.instanceCount ^= Test.instanceCount;
                            break;
                        case 129:
                            i23 += (((i26 * by2) + Test.fFld) - Test.instanceCount);
                            break;
                        case 102:
                            Test.fFld += (((i26 * i22) + i27) - i22);
                            break;
                        case 115:
                            Test.iArrFld1[i26 - 1][i26 - 1] *= (int)Test.instanceCount;
                        case 93:
                            if (bFld) break;
                            break;
                        case 88:
                            i25 += i26;
                            break;
                        default:
                            by2 += (byte)(i26 * Test.instanceCount);
                        }
                    }
                    break;
                case 78:
                    Test.iArrFld1 = Test.iArrFld1;
                    break;
                case 79:
                    i27 += (i24 ^ Test.instanceCount);
                    break;
                case 65:
                    sFld = (short)i25;
                    break;
                case 90:
                    lArr2[i22][i22] += i27;
                case 88:
                    Test.fFld -= i22;
                    break;
                default:
                    i25 += (112 + (i24 * i24));
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
