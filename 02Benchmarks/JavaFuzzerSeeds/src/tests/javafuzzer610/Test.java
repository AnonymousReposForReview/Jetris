package tests.javafuzzer610;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:34:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static int iFld=5;
    public static volatile boolean bFld=false;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.956F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6) {

        int i7=-47032, i8=-4, i9=4, i10=-9, i11=1, i12=5158, i13=-13, iArr2[]=new int[N];
        boolean b=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr2, -242);
        FuzzerUtils.init(lArr, 229L);

        i7 = 345;
        while (--i7 > 0) {
            if (b) break;
            Test.iFld -= (int)-2.102815;
            i5 |= i7;
            iArr2 = iArr2;
            for (i8 = 1; i8 < 5; i8++) {
                i9 -= i6;
                lArr[i7 + 1][i7 + 1] = i9;
            }
            for (i10 = 5; i10 > 1; i10--) {
                i5 -= i6;
                for (i12 = 1; i12 < 2; i12++) {
                    if (b) break;
                    if (i6 != 0) {
                        vMeth1_check_sum += i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 +
                            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    iArr2[i12] >>>= (int)Test.instanceCount;
                    i5 += (i12 * i13);
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr2)
            + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        float f2=100.825F;
        double d=56.41179;
        int i14=-14, i15=7594, i17=7, i18=-50, i19=-14, i20=2, iArr1[]=new int[N];
        short s=4299;

        FuzzerUtils.init(iArr1, 0);

        Test.iFld *= ((iArr1[(Test.iFld >>> 1) % N] * (-(-45346 - Test.iFld))) - Integer.reverseBytes(--Test.iFld));
        f2 -= (float)((d--) + Test.instanceCount);
        if (Test.bFld) {
            vMeth1(50241, Test.iFld);
            for (i14 = 11; i14 < 276; i14++) {
                Test.iFld += i14;
                for (i17 = 1; i17 < 6; i17++) {
                    Test.iFld = i15;
                    Test.instanceCount -= (long)f2;
                    for (i19 = 1; i19 < 2; i19++) {
                        i20 += i19;
                        if (Test.bFld) {
                            iArr1[i14 - 1] *= i18;
                            d += 8919;
                            i15 = 11549;
                        } else {
                            f2 -= i19;
                        }
                    }
                }
            }
        } else {
            s >>= (short)i18;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i14 + i15 + i17 + i18 + i19 + i20 +
            s + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(float f1, long l, int i2) {

        int i3=-6577, i4=145, iArr[]=new int[N];
        byte by1=124;
        short s1=-21924;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -9303);
        FuzzerUtils.init(fArr, 2.758F);

        iArr[(Test.iFld >>> 1) % N] >>= iArr[(i2 >>> 1) % N];
        for (i3 = 5; i3 < 363; ++i3) {
            vMeth();
            i4 *= i4;
            fArr = fArr;
            by1 *= (byte)f1;
            i4 += i2;
            Test.iFld = -50844;
            i4 += i3;
            Test.instanceCount *= Test.instanceCount;
            i4 += (i3 | i4);
            iArr[i3] = (int)l;
        }
        for (float f3 : fArr) {
            s1 ^= (short)Test.iFld;
            Test.iFld = i4;
        }
        long meth_res = Float.floatToIntBits(f1) + l + i2 + i3 + i4 + by1 + s1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.113F, f4=100.277F, f5=-58.245F;
        int i=62214, i1=-12, i21=-18500, i22=5, i23=158, i24=-112, i25=-134, i26=116, i27=-189, i28=-55150, i29=18142,
            i30=667, iArr3[]=new int[N];
        byte by=102;
        short s2=-26116;
        double d1=1.42543;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3073L);
        FuzzerUtils.init(iArr3, -10);

        Test.instanceCount = (long)(--f);
        for (i = 9; i < 163; i++) {
            by += (byte)((iMeth(f, Test.instanceCount, 32357) - i1) * 165);
            lArr1[i - 1] += s2;
        }
        Test.instanceCount *= i1;
        for (i21 = 2; 127 > i21; i21++) {
            i22 |= i21;
        }
        d1 += Test.iFld;
        for (f4 = 8; f4 < 141; f4++) {
            iArr3[(int)(f4 + 1)] = (int)Test.instanceCount;
        }
        Test.instanceCount += Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        i24 += (int)Test.instanceCount;
        i25 = 386;
        while (--i25 > 0) {
            for (i26 = 1; i26 < 65; i26++) {
                for (i28 = 2; 1 < i28; i28 -= 3) {
                    i23 += (int)Test.instanceCount;
                    i23 = i1;
                    iArr3[i26 + 1] += i23;
                    i22 = (int)Test.instanceCount;
                    Test.instanceCount += i28;
                    lArr1[i28 - 1] ^= 14;
                }
            }
            i23 = i1;
            i29 += i25;
            Test.fArrFld[i25 + 1][i25 - 1] += 33482;
            iArr3[i25 + 1] += (int)d1;
            switch ((i25 % 7) + 27) {
            case 27:
                for (f5 = 4; 65 > f5; ++f5) {
                    i29 >>= i25;
                    f -= Test.instanceCount;
                }
            case 28:
                Test.instanceCount -= Test.iFld;
                break;
            case 29:
                Test.instanceCount <<= Test.instanceCount;
                break;
            case 30:
                i27 += (((i25 * by) + i22) - i21);
                break;
            case 31:
                i29 = i30;
                break;
            case 32:
                i23 = (int)Test.instanceCount;
                break;
            case 33:
            default:
                f = i24;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
