package tests.javafuzzer751;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:09:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5379L;
    public int iFld=-232;
    public static float fFld=96.775F;
    public static short sFld=-8250;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.50F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=0, i6=-2, i7=-33318, i8=-14871, i9=768, iArr[]=new int[N];
        float f=-5.404F;
        double d1=0.106267;

        FuzzerUtils.init(iArr, 32010);

        i5 = 149;
        i5 %= (int)(i5 | 1);
        for (f = 5; f < 124; f++) {
            for (i7 = 1; i7 < 13; ++i7) {
                i8 -= -116;
                Test.fArrFld = FuzzerUtils.float1array(N, (float)0.986F);
                Test.instanceCount += (i7 * i7);
                Test.fFld *= i8;
            }
            Test.instanceCount -= i8;
            for (d1 = 13; d1 > f; --d1) {
                i5 += (int)d1;
                i9 <<= 55334;
                iArr[(int)(d1 - 1)] = (int)-28L;
                try {
                    i5 = (i6 % -13);
                    i9 = (40063 % i9);
                    i8 = (i8 % iArr[(int)(d1)]);
                } catch (ArithmeticException a_e) {}
                i8 ^= i6;
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=-223, i3=159, i4=-13, i10=4, i11=14, iArr1[]=new int[N];
        double d=1.124013;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -25616L);
        FuzzerUtils.init(iArr1, 0);

        for (i2 = 8; 132 > i2; ++i2) {
            for (d = 1; 13 > d; d++) {
                Test.instanceCount += (iMeth1() + i3);
                Test.sFld -= (short)Test.fFld;
                lArr[(int)(d - 1)] *= i1;
                i4 += (int)d;
            }
        }
        iArr1[(-55783 >>> 1) % N] += i2;
        for (long l : lArr) {
            byte by=40;
            l += by;
            i1 -= i2;
            for (i10 = 1; i10 < 4; ++i10) {
                i1 -= i1;
            }
        }
        i1 = i3;
        vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i10 + i11 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i) {

        int i12=45092, i13=43149, i14=117, i15=4, i16=4, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 131);

        vMeth(i);
        for (i12 = 3; i12 < 299; i12++) {
            i += -84;
            iArr2[i12 - 1] >>= i12;
            for (i14 = 1; i14 < 6; i14++) {
                Test.instanceCount = i15;
                switch ((i12 % 1) + 62) {
                case 62:
                    i16 = 1;
                    do {
                        Test.instanceCount -= 59;
                        Test.sFld = (short)i14;
                    } while (++i16 < 2);
                    i13 += (int)Test.fFld;
                    i13 = (int)Test.instanceCount;
                    Test.sFld += (short)(i14 | i);
                    break;
                }
                iArr2 = iArr2;
                i15 += (((i14 * Test.fFld) + Test.fFld) - Test.instanceCount);
            }
        }
        long meth_res = i + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {


        iFld *= (int)(iMeth(iFld) - Test.instanceCount);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
