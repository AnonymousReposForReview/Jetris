package tests.javafuzzer2139;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:21:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-28891L;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 38.276F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8) {

        float f1=-34.96F, fArr[]=new float[N];
        int i9=-97, i10=-66, i11=1, i12=64013, i13=235, iArr1[]=new int[N];
        double d=104.103672;

        FuzzerUtils.init(fArr, 94.137F);
        FuzzerUtils.init(iArr1, -29699);

        i8 *= i8;
        i8 *= (int)f1;
        i9 = 1;
        do {
            i10 = 1;
            do {
                fArr[i10] = i9;
                i11 = 1;
                do {
                    i8 |= i8;
                    iArr1[i11 + 1] = i10;
                    i8 += (int)d;
                    fArr[i9] = Test.instanceCount;
                    i8 = i10;
                } while (--i11 > 0);
                for (i12 = 1; i12 < 1; i12++) {
                    Test.instanceCount += (8 + (i12 * i12));
                    i13 ^= (int)Test.instanceCount;
                    i13 <<= (int)Test.instanceCount;
                }
            } while (++i10 < 12);
        } while (++i9 < 132);
        long meth_res = i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i5=-11906, i6=-73, i7=-60766, i14=49780, i15=123, iArr[]=new int[N];
        short s=16299;
        float f=2.80F;
        boolean b=false;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, -1.11278);
        FuzzerUtils.init(iArr, 241);
        FuzzerUtils.init(lArr1, 6868289009231432248L);

        dArr[(i5 >>> 1) % N] = (i5--);
        for (i6 = 19; 350 > i6; i6 += 3) {
            iArr[i6] *= s;
            f = (float)((i5 + (-(--lArr1[i6]))) * Double.longBitsToDouble(-12L));
            lArr1[i6] = Integer.reverseBytes((218 + (i6 / (i6 | 1))) - (iArr[i6 - 1]--));
            i5 += (((i6 * s) + i5) - s);
            iMeth(i7);
            i5 = -32405;
            if (b) continue;
            iArr[i6 + 1] = (int)Test.instanceCount;
        }
        f -= 34;
        for (i14 = 8; i14 < 217; ++i14) {
            Test.instanceCount |= i5;
            Test.instanceCount += (i14 + i6);
            i15 += (i14 + Test.instanceCount);
        }
        long meth_res = i5 + i6 + i7 + s + Float.floatToIntBits(f) + (b ? 1 : 0) + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i2, int i3) {

        int i4=3, i16=-174, i17=60, i18=39693, i19=52592, iArr2[]=new int[N];
        short s1=-9604;
        boolean b1=true, bArr[]=new boolean[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 52801L);
        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(bArr, false);

        i4 = 235;
        while ((i4 -= 3) > 0) {
            lArr[i4][i4 - 1] ^= 1;
            i2 = (int)(-lMeth());
            if (b1) {
                iArr2[i4] = i4;
                for (i16 = 19; i16 > 1; i16--) {
                    i3 = (int)l;
                    for (i18 = 1; i18 < 2; i18++) {
                        iArr2 = iArr2;
                        lArr[i18 - 1][i16] = s1;
                        i17 = i19;
                        if (i19 != 0) {
                            vMeth_check_sum += l + i2 + i3 + i4 + i16 + i17 + i18 + i19 + s1 + (b1 ? 1 : 0) +
                                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
                            return;
                        }
                        iArr2[i16 - 1] &= (int)Test.instanceCount;
                    }
                    s1 = (short)80;
                    bArr[i16 - 1] = b1;
                }
            } else {
                iArr2[i4] >>= s1;
                vMeth_check_sum += l + i2 + i3 + i4 + i16 + i17 + i18 + i19 + s1 + (b1 ? 1 : 0) +
                    FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
                return;
            }
        }
        vMeth_check_sum += l + i2 + i3 + i4 + i16 + i17 + i18 + i19 + s1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=15748, i1=11, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -11);

        i = 1;
        do {
            i1 ^= (int)(Test.instanceCount--);
            vMeth(-12L, i1, i);
        } while (++i < 151);
        for (float f2 : Test.fArrFld) {
            iArr3[(i >>> 1) % N] = i;
            i1 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
