package tests.javafuzzer3127;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:27:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=68L;
    public static int iFld=210;
    public double dFld=59.15725;
    public byte byFld=29;
    public short sFld=17441;
    public boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 223L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f) {

        int i2=-40;

        Test.instanceCount = i2;
        long meth_res = Float.floatToIntBits(f) + i2;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        float f1=-5.524F, f2=0.730F, fArr[]=new float[N];
        int i3=244, i4=-2902, i5=-14, i6=-14, iArr1[][]=new int[N][N];
        double d=2.127883;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(fArr, -1.379F);
        FuzzerUtils.init(lArr, -8L);

        i1 /= (int)(((i1 + -113) * iMeth1(f1)) | 1);
        f1 %= ((long)(f2) | 1);
        Test.instanceCount = i1;
        i1 -= (int)-7404822620950678107L;
        f2 = i1;
        iArr1[(i1 >>> 1) % N][(i1 >>> 1) % N] += (int)Test.instanceCount;
        fArr[(i1 >>> 1) % N] = Test.instanceCount;
        for (i3 = 4; 167 > i3; ++i3) {
            Test.instanceCount >>= -13631;
            for (i5 = 1; i5 < 10; ++i5) {
                Test.instanceCount = i4;
                iArr1[i5 - 1][i3] *= 227;
                f2 -= (float)d;
                Test.instanceCount += (i5 * i5);
            }
            lArr[i3] = i5;
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        float f3=-119.110F, f4=37.363F;
        int i7=-2150, i8=28852, i9=-1, i10=7, i11=-216, i12=8355, i13=252, iArr[]=new int[N];
        short s=-24667;
        long l=98L;

        FuzzerUtils.init(iArr, 107);

        iArr[(24 >>> 1) % N] = iMeth(i);
        Test.lArrFld[(11 >>> 1) % N] = (long)f3;
        for (i7 = 4; i7 < 283; ++i7) {
            i8 += (int)Test.instanceCount;
            i9 = 1;
            while (++i9 < 6) {
                i8 = (int)Test.instanceCount;
                iArr[i9] += i7;
                i = i8;
            }
        }
        i8 = i7;
        for (f4 = 17; f4 < 364; ++f4) {
            for (i11 = 1; i11 < 5; i11++) {
                iArr[i11] = s;
                for (l = 2; l > 1; l--) {
                    i13 *= (int)f3;
                    s -= (short)-14.169F;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f3) + i7 + i8 + i9 + Float.floatToIntBits(f4) + i10 + i11 + i12 + s
            + l + i13 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=18854, i15=43862, i16=-224, i17=-49542;
        float f5=-53.964F;

        vMeth(Test.iFld);
        Test.lArrFld[(Test.iFld >>> 1) % N] = 3L;
        iArrFld[(Test.iFld >>> 1) % N] = iArrFld[(Test.iFld >>> 1) % N];
        i14 = 1;
        do {
            i15 = 1;
            do {
                iArrFld[i14 - 1][i14 + 1] = (int)Test.instanceCount;
                iArrFld[i14 + 1][i14] = (int)Test.instanceCount;
                iArrFld[i14][i14] += (int)dFld;
                Test.iFld >>= (int)Test.instanceCount;
                iArrFld[i14 + 1][i14] -= Test.iFld;
                for (i16 = 1; i16 < 1; i16++) {
                    f5 -= Test.iFld;
                    Test.iFld += Test.iFld;
                    switch ((i14 % 9) + 4) {
                    case 4:
                        i17 = i14;
                        i17 += (4 + (i16 * i16));
                        break;
                    case 5:
                        Test.instanceCount += (i16 + byFld);
                        Test.iFld -= (int)Test.instanceCount;
                        Test.iFld *= i14;
                    case 6:
                        byFld += (byte)Test.iFld;
                        Test.iFld = i15;
                        Test.instanceCount >>= sFld;
                        break;
                    case 7:
                    case 8:
                    case 9:
                        f5 += Test.instanceCount;
                        i17 += i15;
                        iArrFld[i15][i15] = i16;
                        break;
                    case 10:
                        f5 -= Test.instanceCount;
                        switch (((120 >>> 1) % 10) + 64) {
                        case 64:
                            iArrFld[i14 - 1][i16] -= i14;
                            Test.iFld = Test.iFld;
                            break;
                        case 65:
                            Test.iFld >>= i15;
                            break;
                        case 66:
                            Test.iFld = Test.iFld;
                            break;
                        case 67:
                            Test.iFld >>= -184;
                            break;
                        case 68:
                            f5 -= i16;
                        case 69:
                            iArrFld[i16 - 1][i14 - 1] -= sFld;
                            break;
                        case 70:
                            iArrFld[i16][i15] >>= -45;
                            break;
                        case 71:
                            if (true) continue;
                        case 72:
                            Test.iFld = byFld;
                            break;
                        case 73:
                            try {
                                i17 = (i15 / i14);
                                iArrFld[i15 + 1][i14] = (3 / i17);
                                i17 = (-69 / i15);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                        break;
                    case 11:
                        f5 *= -171;
                        break;
                    case 12:
                        i17 *= i17;
                        break;
                    default:
                        bFld = bFld;
                    }
                }
            } while (++i15 < 133);
        } while (++i14 < 189);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
