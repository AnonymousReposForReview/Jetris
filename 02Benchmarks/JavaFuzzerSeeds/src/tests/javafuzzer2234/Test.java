package tests.javafuzzer2234;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:41:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4033176015505704658L;
    public static boolean bFld=false;
    public static boolean bFld1=false;
    public static byte byArrFld[]=new byte[N];
    public static volatile float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)7);
        FuzzerUtils.init(Test.fArrFld, -85.21F);
        FuzzerUtils.init(Test.iArrFld, -51218);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4) {

        double d1=-107.14775, d2=0.62993;
        int i5=-79, i6=48535, i7=-43807, i8=48661, i9=-13, iArr[]=new int[N];
        float f1=0.55F;
        short s=-21615;
        boolean b=false;

        FuzzerUtils.init(iArr, 136);

        for (d1 = 9; d1 < 290; ++d1) {
            iArr = iArr;
            i6 = 6;
            do {
                i7 += i6;
                for (i8 = 1; i8 < 1; i8++) {
                    f1 *= Test.instanceCount;
                    Test.instanceCount = i5;
                    i7 = (int)Test.instanceCount;
                    s = (short)-195L;
                }
                switch (((i9 >>> 1) % 7) + 84) {
                case 84:
                    i4 -= i4;
                    Test.byArrFld[(int)(d1 - 1)] = (byte)i7;
                    b = b;
                case 85:
                    i7 += (i6 * i6);
                case 86:
                    i5 *= (int)Test.instanceCount;
                case 87:
                    iArr[i6] |= i5;
                case 88:
                    i5 = i9;
                    break;
                case 89:
                    d2 = i7;
                    break;
                case 90:
                    d2 %= -4433;
                    break;
                }
            } while (--i6 > 0);
        }
        long meth_res = i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s + (b ?
            1 : 0) + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2, int i3) {


        i1 *= ((i1++) - i3);
        Test.instanceCount += iMeth(65474);
        vMeth1_check_sum += i1 + i2 + i3;
    }

    public static void vMeth(float f) {

        int i=-40314, i10=27171, i11=-111, i12=5, iArr1[]=new int[N];
        double d=-35.108822;
        float f2=117.500F, fArr[]=new float[N];
        byte by=66;
        long l=-61711L;

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(fArr, 2.446F);

        i += (int)(((d * i) - (i >> -1478190481L)) - i);
        vMeth1(i, i, i);
        iArr1[(49247 >>> 1) % N] *= i;
        try {
            for (i10 = 159 + 400; 6 < i10; i10--) {
                for (f2 = 1; (4 + 400) > f2; f2++) {
                    short s1=20792;
                    i11 += by;
                    i12 -= (int)Test.instanceCount;
                    Test.instanceCount <<= i;
                    i12 += (int)(((f2 * s1) + i) - by);
                    if (i12 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i10 + i11 +
                            Float.floatToIntBits(f2) + i12 + by + l + FuzzerUtils.checkSum(iArr1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    if (Test.bFld) continue;
                    i12 += (int)(((f2 * i11) + i12) - f2);
                    Test.instanceCount += l;
                }
                d /= (l | 1);
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            fArr[(i >>> 1) % N] += f2;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i10 + i11 +
            Float.floatToIntBits(f2) + i12 + by + l + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i13=4, i14=181, i15=138, i16=-2920, i17=-38, i18=821, i19=-206, i20=227;
        float f3=27.479F;
        double d3=-15.25097, dArr[]=new double[N];
        short s2=5917;
        byte by1=8;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -109.18770);
        FuzzerUtils.init(lArr, 203L);

        vMeth(43.288F);
        for (i13 = 9; 154 > i13; ++i13) {
            for (i15 = 173; i15 > i13; i15 -= 3) {
                i16 += i13;
                if (Test.bFld1) continue;
                Test.fArrFld[i13 - 1][i13] -= -59205;
                f3 -= i16;
                i16 += (i15 * i15);
                for (i17 = i15; i17 < 1; i17++) {
                    Test.instanceCount -= Test.instanceCount;
                    i14 += (i17 + i13);
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount >>= i18;
                    dArr = dArr;
                    i14 *= i13;
                    lArr[i17 - 1] -= (long)110.397F;
                    i18 = i18;
                    i18 -= (int)d3;
                }
                for (i19 = 1; i19 < 1; ++i19) {
                    i20 += i19;
                }
                i14 += (int)1.507F;
                i16 = (int)Test.instanceCount;
                i16 = s2;
            }
            if (Test.bFld) {
                i14 = -240;
            } else if (Test.bFld) {
                Test.instanceCount += (((i13 * Test.instanceCount) + i18) - i20);
            } else if (false) {
                i18 *= 62715;
            } else {
                by1 += (byte)(((i13 * by1) + Test.instanceCount) - f3);
                i14 = i19;
            }
            by1 += (byte)f3;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
