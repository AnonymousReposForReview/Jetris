package tests.javafuzzer2738;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:41:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=567L;
    public volatile float fFld=0.349F;
    public static int iFld=-2990;
    public short sFld=-11636;
    public double dFld=44.62132;
    public static byte byFld=48;
    public boolean bFld=true;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -13.98308);
        FuzzerUtils.init(Test.lArrFld, -602899275L);
        FuzzerUtils.init(Test.iArrFld, -191);
        FuzzerUtils.init(Test.fArrFld, -103.259F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i1, short s) {


        Test.instanceCount *= (Test.iFld--);
        Test.dArrFld = (Test.dArrFld = (Test.dArrFld = (Test.dArrFld = Test.dArrFld)));
        vMeth_check_sum += i1 + s;
    }

    public static void vMeth1(int i4) {

        int i5=16, i6=-14, i7=222, i8=72, iArr[]=new int[N];
        double d=-87.78959;
        long l1=1L;
        byte by=-23;
        float f1=0.221F;

        FuzzerUtils.init(iArr, 6);

        for (i5 = 9; i5 < 185; ++i5) {
            d = 1;
            while (++d < 9) {
                iArr[(int)(d)] -= (int)Test.instanceCount;
                for (i7 = 1; 1 < i7; i7--) {
                    try {
                        i6 = (i7 / i6);
                        i4 = (Test.iFld % i5);
                        i6 = (Test.iFld / i5);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = (int)Test.instanceCount;
                    Test.instanceCount ^= i4;
                    i4 = i7;
                    i6 <<= (int)Test.instanceCount;
                    i6 -= i6;
                    l1 = by;
                }
                f1 *= (float)d;
            }
            Test.iFld = Test.iFld;
            i6 += (((i5 * Test.instanceCount) + f1) - f1);
            by += (byte)i5;
        }
        vMeth1_check_sum += i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + l1 + by + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
    }

    public short sMeth(long l, int i2, int i3) {

        byte by1=39;
        int i9=-18306, i10=-2, i11=67, i12=39922, i13=2, i14=-55985, i15=-8403, i16=-2208;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -83.128F);

        Test.lArrFld[(i2 >>> 1) % N] *= (long)fFld;
        vMeth1(Test.iFld);
        i3 -= sFld;
        i3 = by1;
        for (i9 = 13; i9 < 267; i9++) {
            fArr[i9 - 1] += i10;
            i10 += i9;
        }
        for (i11 = 7; 266 > i11; i11++) {
            for (i13 = 1; i13 < 6; i13++) {
                fFld = fFld;
                Test.instanceCount &= -2;
                l += i10;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.lArrFld[i13 + 1] ^= 165;
                    i12 = 25;
                }
            }
        }
        long meth_res = l + i2 + i3 + by1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public int iMeth(int i, float f) {

        int i17=-16738, i18=34803, i19=0, i20=-56695, i21=64662, i22=9367;
        long l2=-2061732805L;

        vMeth((int)((-(i += (int)fFld)) - ((--dFld) + (Test.iFld += i))), sMeth(Test.instanceCount, i, i));
        for (i17 = 243; i17 > 3; i17 -= 3) {
            Test.byFld += (byte)(i17 + i18);
            for (i19 = i17; i19 < 19; ++i19) {
                Test.iArrFld[i19][i19 - 1] = (int)Test.instanceCount;
                for (l2 = i17; l2 < 1; l2++) {
                    fFld *= l2;
                    i = i17;
                    fFld += -137;
                    i21 -= (int)Test.instanceCount;
                    Test.iFld = i18;
                    Test.iArrFld[i19 - 1][(int)(l2 - 1)] += (int)fFld;
                    Test.iArrFld[(Test.iFld >>> 1) % N][i17] -= (int)-247L;
                    i20 += i22;
                }
                dFld -= 46358;
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 + l2 + i21 + i22;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-87.110003;
        int i23=22, i24=8389, i25=5, i26=-3, i27=222;

        fFld = ((Test.iFld + (sFld * Test.iFld)) * iMeth(Test.iFld, fFld));
        for (d1 = 3; 198 > d1; ++d1) {
            for (i24 = (int)(d1); i24 < 129; ++i24) {
                for (i26 = 1; i26 < 1; i26++) {
                    Test.iArrFld[i26][(int)(d1 - 1)] = i26;
                    i27 = Test.byFld;
                    switch ((int)((d1 % 5) + 39)) {
                    case 39:
                        i25 = (int)Test.instanceCount;
                    case 40:
                        switch (((63 >>> 1) % 2) + 2) {
                        case 2:
                            i27 %= (int)(i26 | 1);
                            Test.iFld = i23;
                            Test.instanceCount += (((i26 * i24) + sFld) - i26);
                            i27 = (int)Test.instanceCount;
                            break;
                        case 3:
                            bFld = false;
                            Test.iFld >>= i26;
                            Test.byFld += (byte)Test.iFld;
                            break;
                        }
                        Test.fArrFld[i26] -= Test.instanceCount;
                        Test.iFld = Test.iFld;
                    case 41:
                    case 42:
                        i23 = (int)120.127198;
                        Test.iArrFld[i24 - 1][i24 - 1] >>= i27;
                        i25 *= Test.iFld;
                        dFld = Test.iFld;
                    case 43:
                        i25 = 221;
                        Test.iFld = i23;
                        break;
                    }
                    switch (((i25 >>> 1) % 10) + 77) {
                    case 77:
                        Test.byFld <<= (byte)i27;
                        i27 += (((i26 * i24) + i25) - i27);
                        i25 += i26;
                        break;
                    case 78:
                        fFld -= Test.instanceCount;
                        Test.iArrFld[i24 + 1][i26] = (int)Test.instanceCount;
                        break;
                    case 79:
                        dFld -= d1;
                        break;
                    case 80:
                        i27 -= i24;
                    case 81:
                        Test.iArrFld[i26 + 1] = Test.iArrFld[i24 + 1];
                        break;
                    case 82:
                        fFld *= i27;
                        break;
                    case 83:
                        i25 |= i26;
                        break;
                    case 84:
                        sFld = (short)39342;
                    case 85:
                        bFld = true;
                        break;
                    case 86:
                        i27 = i24;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
