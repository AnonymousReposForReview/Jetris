package tests.javafuzzer702;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:13:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4191202285L;
    public static int iFld=-171;
    public static double dFld=0.74090;
    public static boolean bFld=true;
    public float fFld=-61.859F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6316415578432721536L);
        FuzzerUtils.init(Test.iArrFld, -245);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        int i2=6, i3=42219, i4=91, i5=12, i6=-3, i7=28531, iArr[][]=new int[N][N];
        float f=-2.250F, fArr[]=new float[N];
        byte by=-66;

        FuzzerUtils.init(iArr, 245);
        FuzzerUtils.init(fArr, -2.835F);

        for (i2 = 12; i2 < 317; i2++) {
            i3 += (((i2 * i2) + f) - i2);
            for (i4 = i2; i4 < 5; i4++) {
                for (i6 = 1; i6 > 1; i6--) {
                    i3 = -115;
                    switch (((i2 % 4) * 5) + 28) {
                    case 48:
                        i5 = (int)Test.instanceCount;
                        Test.iFld = i5;
                        iArr[i4][i6] = i4;
                        break;
                    case 32:
                        Test.instanceCount += l;
                        fArr[i6] -= i4;
                    case 37:
                        Test.lArrFld[i2 - 1] = 148;
                        i7 -= 4147;
                        i3 = i5;
                        f -= i7;
                    case 31:
                        Test.instanceCount += (i6 ^ Test.instanceCount);
                    default:
                        by *= (byte)63028;
                    }
                }
            }
        }
        vMeth_check_sum += l + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + by + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i1) {

        int i8=-155, i9=-120, i10=98, i11=11841, i12=-5;
        float f1=-102.43F;

        Test.instanceCount -= ((-i1) - (Test.iFld++));
        vMeth(Test.instanceCount);
        if (Test.bFld) {
            i8 = 1;
            while (++i8 < 140) {
                for (i9 = 1; i9 < 11; ++i9) {
                    i11 *= (int)-1.95790;
                    Test.iFld -= (int)-6.630F;
                    i12 = 1;
                    do {
                        f1 += Test.iFld;
                        Test.dFld = Test.iFld;
                        if (Test.bFld) continue;
                        Test.iFld *= (int)f1;
                        Test.dFld += Test.instanceCount;
                        Test.lArrFld[i8 - 1] -= 0;
                    } while ((i12 += 2) < 2);
                    Test.dFld /= (Test.instanceCount | 1);
                }
            }
        }
        long meth_res = i1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(short s) {

        double d=-118.52794;
        int i13=1, i14=-2, i15=6, i16=-8882;
        float f2=-26.775F;

        Test.iFld += (int)((Math.min(Test.iFld, Test.iFld) - (d++)) * (--Test.iFld));
        Test.instanceCount -= (long)(((Test.instanceCount + 111.637F) * iMeth(-14)) + 10);
        for (i13 = 11; i13 < 263; ++i13) {
            for (i15 = 1; i15 < 6; i15 += 3) {
                Test.instanceCount = i13;
                Test.instanceCount -= (long)f2;
                Test.iFld += (i15 - i15);
                Test.iArrFld[i15 + 1] *= -8;
                f2 += Test.iFld;
                if (Test.bFld) continue;
                i14 *= i13;
                i14 = i15;
                Test.lArrFld[i15] += (long)Test.dFld;
            }
            d = i16;
        }
        Test.instanceCount <<= Test.instanceCount;
        long meth_res = s + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=120, i18=-46, i19=57950, i20=12, i21=-81;
        short s1=76;
        float f3=0.798F, f4=0.603F;
        long l1=8034862872454862899L;

        i &= (int)lMeth(s1);
        i >>= Test.iFld;
        Test.instanceCount = -247826403L;
        Test.iFld += (int)Test.instanceCount;
        i18 = 1;
        while (++i18 < 188) {
            Test.iFld *= i18;
            i = i18;
            Test.iArrFld[i18 - 1] -= (int)fFld;
            for (i19 = 7; i19 < 133; ++i19) {
                Test.instanceCount *= i19;
                Test.iFld += (int)(-25.864F + (i19 * i19));
                i20 *= i19;
                i = Test.iFld;
                for (f3 = 1; f3 < 2; ++f3) {
                    i20 = i18;
                    fFld = i;
                    Test.iArrFld[(-24 >>> 1) % N] -= (int)Test.instanceCount;
                    Test.iFld >>= (int)l1;
                    if (false) break;
                    fFld = i21;
                    l1 += (long)f3;
                    switch (((Test.iFld >>> 1) % 5) + 50) {
                    case 50:
                        i -= Test.iFld;
                        break;
                    case 51:
                        Test.iArrFld[i19] -= (int)Test.dFld;
                        l1 *= Test.iFld;
                        break;
                    case 52:
                        Test.iArrFld[(int)(f3)] *= i21;
                        f4 += Test.instanceCount;
                        i += i19;
                        Test.iFld = i18;
                        break;
                    case 53:
                        i20 = 0;
                    case 54:
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
