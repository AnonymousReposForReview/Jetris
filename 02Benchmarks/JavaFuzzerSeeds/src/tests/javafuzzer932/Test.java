package tests.javafuzzer932;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:50:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=130L;
    public static double dFld=0.13410;
    public static volatile boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -49656);
        FuzzerUtils.init(Test.lArrFld, 58409L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        float f1=88.102F;
        double d=41.28106;
        int i11=171, i12=35243, i13=173;
        short s=-3178;

        f1 = 1;
        while (++f1 < 368) {
            for (d = f1; d < 5; ++d) {
                i11 += (int)-47.341F;
                Test.instanceCount *= Test.instanceCount;
                Test.instanceCount >>>= Test.instanceCount;
                i11 += (int)((long)d | i11);
                for (i12 = 1; i12 < 1; i12++) {
                    Test.iArrFld[(int)(d)] = i11;
                    Test.instanceCount *= i12;
                    i13 = i11;
                    f = i13;
                    Test.instanceCount += Test.instanceCount;
                }
                i13 += i13;
                Test.instanceCount |= -6;
                Test.iArrFld[(int)(f1 - 1)] = s;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i11 + i12
            + i13 + s;
    }

    public static void vMeth(int i8, long l1, long l2) {

        int i9=-3, i10=38255, i14=-34, i15=-54, i16=-13, i17=-59577, i18=-13675, i19=-2;
        byte by=-37;
        float f2=-99.926F, fArr[]=new float[N];
        short s1=23623;

        FuzzerUtils.init(fArr, 1.335F);

        for (i9 = 19; 336 > i9; i9++) {
            vMeth1(0.21F);
            i10 = i9;
            Test.lArrFld = Test.lArrFld;
        }
        for (i14 = 4; i14 < 238; ++i14) {
            for (i16 = i14; i16 < 7; ++i16) {
                for (i18 = 1; i18 < 1; ++i18) {
                    switch (((4 >>> 1) % 5) + 72) {
                    case 72:
                        fArr[i18 - 1] += Test.instanceCount;
                        by += (byte)(((i18 * i18) + by) - Test.instanceCount);
                        Test.lArrFld[i18] -= (long)f2;
                        f2 += (((i18 * Test.instanceCount) + l2) - l1);
                        break;
                    case 73:
                        i17 %= (int)3761230800175429633L;
                        Test.instanceCount -= i19;
                        f2 += i16;
                        break;
                    case 74:
                        i15 += (i18 | l2);
                        break;
                    case 75:
                        Test.dFld = l1;
                        break;
                    case 76:
                        i15 = s1;
                        break;
                    default:
                        Test.iArrFld[i18] -= i15;
                    }
                }
            }
        }
        vMeth_check_sum += i8 + l1 + l2 + i9 + i10 + i14 + i15 + i16 + i17 + i18 + i19 + by + Float.floatToIntBits(f2)
            + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l, int i5) {

        int i6=4, i7=106, i20=58117, i21=49752, i22=9, i23=-2, i24=8;
        float f3=0.745F;
        byte by1=-112;

        for (i6 = 12; i6 < 198; ++i6) {
            vMeth(i6, 42037L, 3511497619L);
            for (i20 = i6; i20 < 9; i20++) {
                i7 += (int)f3;
                Test.iArrFld[i6 - 1] += (int)Test.dFld;
                by1 >>= (byte)Test.instanceCount;
                i7 = (int)Test.instanceCount;
                for (i22 = 1; i22 > 1; i22 -= 3) {
                    Test.lArrFld = Test.lArrFld;
                    if (i23 != 0) {
                    }
                    i23 -= i24;
                    by1 <<= (byte)i24;
                }
                l += (i20 ^ by1);
                Test.instanceCount *= l;
                i5 += i20;
            }
        }
        long meth_res = l + i5 + i6 + i7 + i20 + i21 + Float.floatToIntBits(f3) + by1 + i22 + i23 + i24;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13597, i1=3, i2=5077, i3=249, i4=15575, i25=51037, i26=7, i27=128, i28=-167, i29=-3, i30=-58237, i31=11;
        long l3=-65440L, lArr[]=new long[N];
        float f4=-17.959F;

        FuzzerUtils.init(lArr, 51695L);

        for (i = 16; i < 374; ++i) {
            lArr[i] = (++i1);
            i2 = 1;
            while (++i2 < 70) {
                for (i3 = i2; i3 < 1; i3++) {
                    lArr[i3] = Math.max((int)((Test.instanceCount * 205) + (++i1)), (i2 - i1) + (-13 + iMeth(l3, i2)));
                }
                for (i25 = 1; i25 < 1; ++i25) {
                    f4 -= i3;
                }
                Test.iArrFld[i2 + 1] ^= -15634;
                Test.dFld -= f4;
                l3 -= i1;
            }
            i1 -= i1;
            i1 += i2;
            Test.iArrFld[i + 1] = i26;
        }
        for (i27 = 14; i27 < 283; i27++) {
            i26 |= -17753;
            for (i29 = i27; i29 < 93; ++i29) {
                i31 = 1;
                while (++i31 < 1) {
                    i30 |= (int)Test.instanceCount;
                    i4 += (i31 * i31);
                    f4 += i3;
                    Test.iArrFld[i29] = i30;
                    if (Test.bFld) continue;
                }
                i30 += 66;
            }
            i4 += (int)f4;
            Test.dFld += i3;
            Test.iArrFld[i27 - 1] &= i4;
            i4 = 7;
            Test.instanceCount *= -19716;
            Test.iArrFld[i27] >>= i;
            if (Test.bFld) continue;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
