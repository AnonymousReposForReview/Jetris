package tests.javafuzzer2692;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:47:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=165L;
    public static boolean bFld=true;
    public volatile short sFld=26353;
    public static long lFld=-2250951060L;
    public static float fFld=-66.196F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2, float f) {

        int i3=18919, i4=45316, i5=-14, i6=3937, i7=-34627, iArr[]=new int[N];
        double d=84.41592, d1=0.72722;

        FuzzerUtils.init(iArr, 142);

        Test.bFld = Test.bFld;
        for (i3 = 192; 3 < i3; i3--) {
            for (i5 = 1; i5 < 8; i5++) {
                for (d = 2; d > 1; d -= 2) {
                    switch ((((i5 >>> 1) % 8) * 5) + 80) {
                    case 93:
                        Test.instanceCount -= -15825;
                        iArr[i5 + 1] = -12;
                        f += (float)d1;
                        break;
                    case 119:
                        f -= 33340L;
                        iArr[i3] += i6;
                        if (Test.bFld) break;
                        i7 %= (int)(i1 | 1);
                        break;
                    case 105:
                        i6 += (int)d;
                        Test.instanceCount += (long)(d + i3);
                        break;
                    case 95:
                        i6 += i5;
                    case 116:
                        i4 *= (int)f;
                    case 82:
                        iArr[i5 + 1] &= i6;
                        break;
                    case 104:
                        Test.instanceCount += (long)(((d * Test.instanceCount) + i5) - i7);
                    case 111:
                        if (Test.bFld) break;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i) {

        float f1=7.917F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.4769);

        dArr[(i >>> 1) % N] += ((Integer.reverseBytes(i) / -66.108450) + i);
        vMeth2(-4782, i, f1);
        vMeth1_check_sum += i + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        int i8=13, i9=-38934, i10=6, i11=177;
        byte by=-63;
        float f2=0.653F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2L);

        for (long l : lArr) {
            vMeth1(-106);
            for (i8 = 1; i8 < 4; ++i8) {
                for (i10 = 1; i10 < 2; ++i10) {
                    short s=404;
                    i11 = (int)l;
                    i9 += (((i10 * i9) + i8) - i11);
                    i11 += (i10 + i11);
                    i11 += (((i10 * by) + i8) - s);
                    i9 <<= (int)l;
                    i9 += (i10 + l);
                    f2 -= i11;
                    l += Test.instanceCount;
                    i11 += i11;
                    i11 = -5046;
                }
                Test.instanceCount <<= i8;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + by + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=19, i13=4, i14=7, i15=0, i16=10, i17=-25156, i18=29002, i19=45986;
        long l1=-152L;
        double d2=86.77451, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 1.98691);

        vMeth();
        Test.iArrFld[(i12 >>> 1) % N] = i12;
        i12 = (int)Test.instanceCount;
        try {
            for (l1 = 17; l1 < 335; ++l1) {
                i14 = 1;
                while (++i14 < 79) {
                    byte by1=13;
                    i13 += i14;
                    by1 = (byte)sFld;
                    try {
                        i12 = (-243 % i14);
                        i12 = (63 % i13);
                        i13 = (91 / i14);
                    } catch (ArithmeticException a_e) {}
                    i13 += (47608 + (i14 * i14));
                    i12 >>= (int)Test.lFld;
                    if (Test.bFld) break;
                    d2 += i13;
                    i12 += (int)(2421017194L + (i14 * i14));
                    try {
                        i13 = (Test.iArrFld[i14] % -1633880399);
                        i13 = (-36045 / i14);
                        Test.iArrFld[(int)(l1 - 1)] = (Test.iArrFld[(int)(l1)] % Test.iArrFld[i14 + 1]);
                    } catch (ArithmeticException a_e) {}
                }
                for (i15 = 1; i15 < 79; i15++) {
                    i16 = (int)45L;
                    dArr1[(int)(l1 - 1)] *= Test.instanceCount;
                    i16 += (((i15 * i15) + i13) - i15);
                    switch (((i14 >>> 1) % 1) + 97) {
                    case 97:
                        for (i17 = 1; i17 < 2; ++i17) {
                            Test.lFld += i13;
                            i12 += i17;
                            Test.fFld -= Test.lFld;
                            Test.iArrFld[i15 - 1] = i15;
                            i18 += i17;
                        }
                        i18 += (i15 + i14);
                        i19 = 1;
                        while (++i19 < 2) {
                            Test.iArrFld[i15] >>= (int)Test.instanceCount;
                            i18 = i18;
                        }
                        break;
                    default:
                        if (Test.bFld) continue;
                    }
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.iArrFld[(i14 >>> 1) % N] = i16;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
