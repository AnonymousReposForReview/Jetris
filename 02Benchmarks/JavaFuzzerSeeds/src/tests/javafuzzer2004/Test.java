package tests.javafuzzer2004;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:20:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-187L;
    public static int iFld=7;
    public static double dFld=-27.44756;
    public static int iFld1=50762;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.lArrFld, -7466325708928215240L);
        FuzzerUtils.init(Test.lArrFld1, -4L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f=1.1000F, fArr[][]=new float[N][N];
        int i3=-799, i4=-234, i5=-5, i6=-205;
        double d=80.14953, d1=116.76676, dArr[]=new double[N];
        short s=8972;
        byte by=-99;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.1014F);
        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(dArr, -1.36355);

        f += 98.474F;
        Test.instanceCount = Test.iFld;
        for (i3 = 16; i3 < 293; i3++) {
            i4 -= (int)f;
            for (d = i3; d < 6; d++) {
                fArr[(int)(d)][(int)(d - 1)] -= i4;
                switch ((int)(((d % 8) * 5) + 64)) {
                case 68:
                    Test.iFld += (int)d;
                    lArr[(int)(d + 1)] <<= Test.instanceCount;
                    i5 -= -8;
                    break;
                case 97:
                    Test.iArrFld = Test.iArrFld;
                    i5 = Test.iFld;
                    i6 = 1;
                    while (++i6 < 1) {
                        d1 *= Test.instanceCount;
                        dArr[i6 + 1] *= Test.iFld;
                    }
                case 77:
                    dArr = FuzzerUtils.double1array(N, (double)88.13945);
                    break;
                case 101:
                    i5 *= (int)-2.119F;
                    break;
                case 103:
                    i4 -= (int)f;
                case 99:
                    Test.iFld <<= (int)Test.instanceCount;
                    break;
                case 93:
                    i4 <<= i4;
                    break;
                case 82:
                    i5 += (int)(((d * s) + Test.iFld) - by);
                    break;
                default:
                    Test.instanceCount -= 50957;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 +
            Double.doubleToLongBits(d1) + s + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i7=12, i8=79, i9=3126, i10=-41309;
        float f1=-108.294F;
        short s1=-16964;

        vMeth2();
        i7 = 1;
        while (++i7 < 205) {
            Test.iFld = 11;
            Test.iFld <<= i7;
            for (i8 = 8; 1 < i8; i8 -= 3) {
                Test.instanceCount = Test.iFld;
                f1 += i7;
                i9 += (i8 - i7);
                i10 = 4;
                while (--i10 > 0) {
                    Test.iFld -= i7;
                    Test.iFld += i10;
                }
                Test.iFld = Test.iFld;
                i9 -= i8;
                s1 -= (short)i10;
                Test.iFld += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + s1;
    }

    public static void vMeth() {

        int i=1488, i1=-14, i2=-65354, i11=-8, i12=-1, i13=-104, i14=10138;
        float f2=2.172F;
        boolean b=true;

        try {
            i = i;
            for (i1 = 9; 344 > i1; ++i1) {
                vMeth1();
                if (b) {
                    Test.dFld = -100.24303;
                    Test.instanceCount = Test.iFld;
                    for (i11 = 1; i11 < 5; i11 += 2) {
                        i2 += (int)f2;
                        for (i13 = 1; i13 < 3; i13 += 3) {
                            Test.dFld *= -1.114442;
                            Test.lArrFld[i13 - 1] <<= i2;
                            f2 += Test.instanceCount;
                        }
                    }
                    i *= i;
                } else if (true) {
                    Test.iFld1 *= i2;
                } else if (b) {
                    Test.iFld1 += (i1 | i1);
                } else {
                    f2 -= Test.iFld1;
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            b = true;
        }
        vMeth_check_sum += i + i1 + i2 + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i15=77, i16=11639, i17=-6, i18=-113, i19=-62343, i20=226;
        short s2=19056;
        byte by1=70;
        boolean b1=false;
        float f3=0.757F;

        vMeth();
        for (i15 = 7; i15 < 266; i15++) {
            i16 += (i15 * i15);
            s2 += by1;
            s2 += (short)i15;
            if (b1) {
                for (i17 = i15; i17 < 97; i17++) {
                    if (b1) continue;
                    f3 -= i18;
                    i18 = Test.iFld1;
                    if (b1) continue;
                    Test.iArrFld[i15 - 1] >>= i18;
                }
                Test.iFld -= (int)f3;
                Test.instanceCount += Test.instanceCount;
                i16 += i17;
            }
            for (i19 = 6; i19 < 97; ++i19) {
                Test.iFld1 >>= i17;
                Test.instanceCount = s2;
                Test.iArrFld[i15 + 1] = i17;
            }
            if (b1) {
                i20 += (i15 ^ (long)f3);
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                Test.lArrFld1[i15] |= i16;
            } else if (b1) {
                i16 -= Test.iFld;
                i20 = i19;
                i18 *= Test.iFld;
            }
        }
        i18 >>= i20;
        Test.iFld |= (int)Test.instanceCount;
        Test.iFld1 = by1;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
