package tests.javafuzzer2415;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:21:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=253L;
    public static float fFld=0.312F;
    public static byte byFld=25;
    public static volatile boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i4, int i5) {


        Test.instanceCount = i4;
        vMeth1_check_sum += s + i4 + i5;
    }

    public static int iMeth(int i3) {

        short s1=10253;
        int i6=-188, i7=13279;
        double d1=19.36091;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 125L);
        FuzzerUtils.init(fArr, 29.453F);

        vMeth1(s1, 52911, i3);
        i6 = 1;
        do {
            Test.byFld -= (byte)Test.instanceCount;
            i3 >>>= (int)Test.instanceCount;
            i3 += (((i6 * i3) + i3) - i3);
            if (Test.bFld) break;
            i3 -= i3;
            Test.fFld = i3;
            Test.instanceCount += i6;
            d1 += Test.fFld;
            i3 += (i6 * i6);
            i7 = 5;
            do {
                i3 += (int)(-48060L + (i7 * i7));
                lArr1[i7 - 1] = -3041008251L;
                fArr[i6] = i6;
            } while ((i7 -= 3) > 0);
        } while (++i6 < 306);
        long meth_res = i3 + s1 + i6 + Double.doubleToLongBits(d1) + i7 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-1363, i2=4, i8=-16, i9=-1, i10=-20, iArr1[]=new int[N];
        double d=1.70098;
        short s2=-31243;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(lArr, -28707L);

        iArr1[(i1 >>> 1) % N] += (int)((long)((i1 * Test.instanceCount) / (((long)(-17472 + (-14 + (i1 * d)))) | 1))
            >>> (-(i1 - Test.instanceCount)));
        i2 = 225;
        do {
            lArr[i2 - 1] |= (-(i1--));
            i1 += (i2 | Test.instanceCount);
            Test.instanceCount -= iMeth(i1);
            Test.instanceCount >>>= i1;
            i1 = i1;
            i1 += (i2 ^ i2);
            s2 <<= (short)i2;
            i1 += (i2 | (long)Test.fFld);
        } while (--i2 > 0);
        for (i8 = 7; i8 < 263; ++i8) {
            long l=-58759L;
            l = i1;
            i10 = 1;
            while (++i10 < 6) {
                if (Test.bFld) continue;
                d -= -3;
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + s2 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=5, i11=-33, i12=19919, i13=8, i14=212, i15=-37135, i16=-139, i17=4, i18=7, iArr[]=new int[N];
        byte by=-105;
        double d2=0.84689;

        FuzzerUtils.init(iArr, 12);

        Test.fFld = i;
        iArr[(37644 >>> 1) % N] >>>= (int)(74.131056 * by);
        vMeth();
        for (i11 = 5; i11 < 270; i11++) {
            i13 = 1;
            while (++i13 < 95) {
                Test.instanceCount = i12;
                for (i14 = 1; 1 < i14; i14--) {
                    i15 -= (int)Test.instanceCount;
                    i15 = -250;
                    i += (i14 | Test.instanceCount);
                    i12 = (int)Test.fFld;
                    iArr[i14] -= i12;
                    Test.byFld += (byte)(i14 - Test.instanceCount);
                }
                for (d2 = 1; 1 > d2; d2++) {
                    i = i;
                    i15 *= (int)Test.instanceCount;
                    i12 = i14;
                    if (Test.bFld) continue;
                    Test.fFld += i16;
                    iArr[(int)(d2 - 1)] &= i16;
                    if (Test.bFld) {
                        Test.instanceCount += (long)(((d2 * Test.instanceCount) + i16) - i16);
                        Test.fFld -= Test.instanceCount;
                        if (Test.bFld) continue;
                        i += (int)(((d2 * i13) + i) - i14);
                    } else {
                        i12 = i13;
                    }
                }
                for (i17 = 1; i17 < 1; ++i17) {
                    iArr[i13 + 1] %= (int)(Test.instanceCount | 1);
                    if (Test.bFld) break;
                    Test.fFld += (-228 + (i17 * i17));
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
