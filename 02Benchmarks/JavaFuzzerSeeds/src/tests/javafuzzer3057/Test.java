package tests.javafuzzer3057;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:20:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=13L;
    public double dFld=2.121824;
    public int iFld=-11;
    public static double dFld1=26.110818;
    public static float fFld=35.39F;
    public byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3093L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        boolean b=false;
        int i9=-31134, i10=-164, i11=3, i12=11061, i13=18903, i14=12, iArr2[]=new int[N];
        short s1=2059;
        float f1=-1.97F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 175);
        FuzzerUtils.init(lArr, 197L);

        b = b;
        for (i9 = 6; 224 > i9; ++i9) {
            Test.instanceCount = Test.instanceCount;
            for (i11 = i9; i11 < 7; i11++) {
                i12 += i11;
                iArr2[i9] |= i9;
                iArr2[i9] >>>= 23188;
            }
            i12 -= i10;
        }
        i12 *= s1;
        i12 *= i11;
        for (i13 = 1; 318 > i13; ++i13) {
            i10 >>= -58552;
            i12 += i10;
            f1 -= -4;
            iArr2[i13 - 1] = s1;
        }
        vMeth2_check_sum += (b ? 1 : 0) + i9 + i10 + i11 + i12 + s1 + i13 + i14 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i7) {

        int i8=-6, i15=21517, i16=-4, iArr3[]=new int[N];
        byte by1=-100;

        FuzzerUtils.init(iArr3, -8);

        i8 = 1;
        do {
            vMeth2();
            Test.fFld = 185;
            Test.fFld = i8;
            i7 = (int)Test.instanceCount;
            Test.fFld = i7;
            Test.instanceCount *= i7;
            Test.fFld += i8;
            for (i15 = 1; 8 > i15; i15++) {
                i16 <<= (int)Test.instanceCount;
                i7 += i15;
            }
        } while (++i8 < 207);
        Test.dFld1 = i16;
        iArr3[(8 >>> 1) % N] -= 3161;
        by1 = by1;
        Test.lArrFld = FuzzerUtils.long1array(N, (long)3546922509L);
        vMeth1_check_sum += i7 + i8 + i15 + i16 + by1 + FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth(int i, int i1) {

        int i2=26909, i3=-9, i4=-64716, i5=6, i6=-10, i17=1, i18=-12346, i20=241, i21=14, i22=-5, i23=-44461,
            iArr1[]=new int[N];
        byte by=93;

        FuzzerUtils.init(iArr1, 12);

        for (i2 = 7; i2 < 240; i2 += 3) {
            i4 = 1;
            do {
                for (i5 = 1; 1 > i5; i5++) {
                    Test.dFld1 -= by;
                }
                iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
                vMeth1(-12);
                i1 <<= -227;
                Test.instanceCount >>= i1;
                i = i5;
            } while (++i4 < 20);
        }
        for (i17 = 5; i17 < 315; i17++) {
            Test.instanceCount *= i3;
            for (i20 = 1; i20 < 5; i20++) {
                for (i22 = 1; i22 < 2; ++i22) {
                    i18 >>= i6;
                    by += (byte)(i22 - i4);
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + by + i17 + i18 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        short s=-2054;
        float f=-2.910F;
        int i24=-100, i25=-6, i26=1677, i27=-12, i28=11, i29=-11650, iArr[][]=new int[N][N];
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(bArr, true);

        dFld *= (s++);
        f *= (-((-iFld) * iFld));
        byArrFld[(iFld >>> 1) % N] -= (byte)(dFld -= ((iArr[(59 >>> 1) % N][(iFld >>> 1) % N] =
            (int)Test.instanceCount) * (iFld * 51075)));
        vMeth(iFld, iFld);
        iArr[(iFld >>> 1) % N][(iFld >>> 1) % N] &= (int)Test.instanceCount;
        if (b1) {
            for (i24 = 1; i24 < 313; i24++) {
                iArr[i24][i24] = i25;
                dFld += i25;
                switch (((i24 % 9) * 5) + 7) {
                case 13:
                    bArr[i24] = b1;
                    for (i26 = 4; i26 < 81; i26++) {
                        iFld += (140 + (i26 * i26));
                        dFld += i27;
                        dFld = Test.fFld;
                        i25 += (i26 | (long)f);
                        Test.lArrFld = Test.lArrFld;
                        dFld -= 4899376624155672629L;
                        i27 = (int)dFld;
                        i27 = i25;
                        for (i28 = 1; i28 < 2; ++i28) {
                            f *= f;
                            i27 *= i25;
                            i29 += i28;
                            iArr[i24][i28 + 1] = i28;
                            Test.instanceCount = i29;
                            switch ((i24 % 1) + 98) {
                            case 98:
                                iFld *= i26;
                                i29 = (int)Test.instanceCount;
                                break;
                            }
                        }
                    }
                    i25 += (i24 + i28);
                    break;
                case 41:
                    i25 += (int)Test.instanceCount;
                    break;
                case 26:
                    i25 = i26;
                    break;
                case 28:
                    i29 += (int)(-206L + (i24 * i24));
                    break;
                case 8:
                    i29 += (((i24 * i29) + i26) - Test.instanceCount);
                    break;
                case 31:
                    Test.instanceCount = i26;
                    break;
                case 18:
                    i29 = (int)Test.dFld1;
                    break;
                case 50:
                    Test.lArrFld[i24] <<= i24;
                    break;
                case 15:
                    iFld += (i24 ^ s);
                    break;
                default:
                    Test.lArrFld[i24 + 1] *= i27;
                }
            }
        } else {
            iArr[(i29 >>> 1) % N][(-10 >>> 1) % N] -= 103;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
