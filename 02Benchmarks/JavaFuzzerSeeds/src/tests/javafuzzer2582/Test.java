package tests.javafuzzer2582;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:56:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7574858682142663521L;
    public static int iFld=10944;
    public static int iFld1=-19471;
    public int iFld2=-4;
    public static long lFld=2862065723L;
    public static short sFld=19429;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3290305773L);
        FuzzerUtils.init(Test.iArrFld, -95);
    }

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i2=-8, i3=-11732, i4=-7, i5=0, i6=68, i7=2482, i8=-7, iArr[]=new int[N];
        float f=0.947F, f1=2.429F;
        long l=5L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.81368);
        FuzzerUtils.init(iArr, 195);

        for (i2 = 5; 354 > i2; ++i2) {
            for (f = 5; f > 1; --f) {
                i5 = 1;
                do {
                    Test.instanceCount += (long)f;
                    Test.instanceCount += -78L;
                    i4 <<= (int)-3734941479L;
                    iArr[i5 - 1] += (int)-81.525F;
                    i3 >>= -43378;
                    f1 += (i5 * i3);
                    Test.instanceCount += Test.iFld;
                    i4 -= (int)-3278070681L;
                    i6 -= i5;
                } while (++i5 < 2);
                for (i7 = 1; i7 < 2; i7 += 2) {
                    f1 += -231;
                    l <<= -221;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + l +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth() {

        float f2=0.94F;
        int i9=0, i10=-5, i11=-174, i12=23, i13=9793, i14=-3;
        boolean b=true;

        vMeth();
        f2 += Test.iFld;
        for (i9 = 3; 143 > i9; ++i9) {
            f2 = f2;
            Test.instanceCount += (long)f2;
        }
        Test.instanceCount = -1941127342213783350L;
        for (i11 = 17; i11 < 372; i11++) {
            int i15=-31720;
            for (i13 = 1; i13 < 5; i13++) {
                Test.lArrFld[i13] = i10;
                Test.instanceCount -= i10;
                Test.instanceCount *= Test.iFld1;
                if (b) continue;
            }
            Test.instanceCount += 53859;
            Test.iFld1 = Test.iFld;
            try {
                i12 = (-43520 / i14);
                i10 = (Test.iFld1 / -138);
                Test.iFld1 = (i15 / -12864);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth(int i, int i1) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 14);

        fMeth();
        iArr1[(i1 >>> 1) % N] *= (int)Test.instanceCount;
        long meth_res = i + i1 + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-1.73686;
        int i16=13, i17=-13, i18=136, i19=10, i20=-170, i21=-9;
        float f3=-26.410F, fArr[]=new float[N];
        byte by=-45;
        boolean b1=true;

        FuzzerUtils.init(fArr, 50.205F);

        Test.iFld = (int)(((Test.iFld + Test.iFld) * (4258069017635806406L - dMeth(Test.iFld1, Test.iFld1))) * d1);
        for (i16 = 8; i16 < 218; i16++) {
            for (i18 = 7; i18 < 120; i18 += 3) {
                Test.iFld += (((i18 * iFld2) + Test.lFld) - Test.iFld);
                for (i20 = 1; i20 < 4; i20++) {
                    i17 ^= Test.iFld;
                    iFld2 += (i20 | iFld2);
                    i19 -= (int)Test.lFld;
                    Test.lFld -= i16;
                    f3 += i20;
                    switch ((i20 % 10) + 32) {
                    case 32:
                        iFld2 += (int)Test.instanceCount;
                        break;
                    case 33:
                        i17 += i16;
                        Test.iFld += -116;
                        break;
                    case 34:
                    case 35:
                        i19 = (int)f3;
                        Test.iFld -= (int)f3;
                        Test.iArrFld[i18][i18 + 1] = by;
                        b1 = b1;
                        break;
                    case 36:
                        f3 = -49;
                        Test.iFld1 += i20;
                        i21 <<= i20;
                    case 37:
                        Test.instanceCount += (i20 * i20);
                        fArr[i18 - 1] += Test.iFld;
                        i19 += (i20 ^ Test.iFld1);
                        switch (((i18 % 2) * 5) + 69) {
                        case 76:
                            Test.iFld1 = i21;
                            f3 += i20;
                            Test.iFld += (int)-32082L;
                            break;
                        case 74:
                            Test.iFld += i20;
                            d1 = Test.sFld;
                            break;
                        default:
                            Test.iFld1 = 14;
                        }
                        break;
                    case 38:
                        Test.iArrFld[i20][i18] -= (int)Test.lFld;
                        break;
                    case 39:
                        i17 = Test.iFld1;
                    case 40:
                        Test.instanceCount += (((i20 * i18) + i21) - Test.lFld);
                    case 41:
                        Test.instanceCount = 32;
                        break;
                    default:
                        Test.lFld = -43405;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
