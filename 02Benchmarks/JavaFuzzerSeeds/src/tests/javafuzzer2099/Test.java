package tests.javafuzzer2099;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:07:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=28150L;
    public static byte byFld=-119;
    public static int iFld=35;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i2=11396, i3=12, i4=-14, i5=-41023, i6=-212, i7=0;
        float f1=36.89F;
        double d1=19.40234, d2=-2.35012;
        byte by1=108;
        boolean b=true, bArr[]=new boolean[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(bArr, true);

        for (i2 = 212; i2 > 9; i2--) {
            i3 += -11782;
            i3 += i2;
            i3 = i2;
            i3 += (5 + (i2 * i2));
            f1 += (float)d1;
            lArr = lArr;
            for (i4 = 8; 1 < i4; i4--) {
                switch (((i5 >>> 1) % 6) + 58) {
                case 58:
                    if (i2 != 0) {
                        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i4 + i5 +
                            Double.doubleToLongBits(d2) + i6 + by1 + (b ? 1 : 0) + i7 + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    Test.iArrFld[i2 - 1] = i4;
                    d1 = Test.instanceCount;
                    break;
                case 59:
                    for (d2 = 1; d2 < 2; ++d2) {
                        by1 += (byte)(d2 * d2);
                        bArr[(int)(d2)] = b;
                    }
                case 60:
                    i6 = 0;
                case 61:
                    Test.instanceCount += i4;
                    break;
                case 62:
                    i5 <<= (int)49L;
                case 63:
                    d1 = i3;
                    break;
                default:
                    try {
                        i5 = (i4 % i6);
                        i5 = (i7 / 192);
                        i7 = (i2 / i2);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i4 + i5 +
            Double.doubleToLongBits(d2) + i6 + by1 + (b ? 1 : 0) + i7 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i1, byte by) {

        double d3=-2.39626;
        int i8=16, i9=-121, i10=20682, i11=-205, i12=-6, i13=194, i14=-14, i15=54413;
        float f2=2.247F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -91486976L);
        FuzzerUtils.init(fArr, 117.686F);

        vMeth();
        d3 *= Test.instanceCount;
        i8 = 1;
        while ((i8 += 3) < 189) {
            i1 = (int)Test.instanceCount;
            for (i9 = 1; i9 < 24; i9 += 3) {
                Test.instanceCount += (1 + (i9 * i9));
                lArr1[i9] = Test.instanceCount;
                try {
                    i10 = (Test.iArrFld[i8 - 1] % -1106683016);
                    i1 = (35907 % i9);
                    i10 = (i11 / i10);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i9 * i9) + Test.instanceCount) - i8);
                i1 = (int)f2;
            }
        }
        i11 &= (int)Test.instanceCount;
        for (i12 = 15; i12 < 387; ++i12) {
            for (i14 = 1; i14 < 5; i14++) {
                Test.instanceCount *= by;
                fArr[i14] = i10;
            }
        }
        long meth_res = i1 + by + Double.doubleToLongBits(d3) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 +
            i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(double d) {

        float f=-13.55F;
        int i=-1;

        f += (i = (int)(Long.reverseBytes(Test.instanceCount) - iMeth(i, Test.byFld)));
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        double d4=1.27100;

        for (int smallinvoc=0; smallinvoc<637; smallinvoc++) vSmallMeth(d4);
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount = Test.iFld;
        Test.iFld = Test.iFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
