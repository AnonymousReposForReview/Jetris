package tests.javafuzzer1096;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:25:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-102L;
    public static volatile int iFld=-208;
    public static double dFld=0.26301;
    public static byte byFld=-13;
    public boolean bFld=false;
    public int iFld1=1404;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i7) {

        long lArr[]=new long[N];
        int iArr1[]=new int[N];

        FuzzerUtils.init(lArr, 220L);
        FuzzerUtils.init(iArr1, -65);

        lArr[(1 >>> 1) % N] -= Test.iFld;
        iArr1[(Test.iFld >>> 1) % N] += 112;
        long meth_res = i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i4) {

        int i5=214, i6=-26366, i8=57263, i9=3, iArr[]=new int[N];
        boolean b=false;
        float f1=-22.1019F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -210);
        FuzzerUtils.init(fArr, 123.506F);

        for (i5 = 19; i5 < 309; ++i5) {
            Test.iFld *= (int)(Test.instanceCount - (--iArr[i5]));
            fArr[i5 + 1] -= Test.instanceCount;
            b = bMeth(Test.iFld);
            Test.instanceCount = i4;
        }
        for (i8 = 7; i8 < 137; ++i8) {
            i4 -= (int)Test.dFld;
            i4 ^= -11;
            iArr[i8 - 1] += (int)Test.dFld;
            if (b) break;
            switch (i8 % 8) {
            case 0:
                i4 /= (int)((long)(f1) | 1);
                Test.dFld -= i6;
                break;
            case 1:
                i4 >>= (int)Test.instanceCount;
                break;
            case 2:
                Test.instanceCount ^= i5;
                break;
            case 3:
                Test.instanceCount = Test.instanceCount;
                break;
            case 4:
                i4 -= (int)Test.dFld;
                break;
            case 5:
                Test.iFld <<= (int)Test.instanceCount;
                break;
            case 6:
                if (true) continue;
                break;
            case 7:
                Test.lArrFld[(i9 >>> 1) % N] -= Test.iFld;
                break;
            default:
                f1 *= -32477L;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth(int i) {

        double d=77.73629, d1=0.33410;
        int i1=22622, i2=-229, i3=10, i10=44946;
        float f=1.744F;

        for (d = 5; d < 157; d++) {
            for (i2 = 1; i2 < 10; ++i2) {
                Test.dFld = ((i3++) * f);
                vMeth(Test.iFld);
                iArrFld = iArrFld;
                i = 6;
                Test.instanceCount += i2;
                for (d1 = d; d1 < 2; ++d1) {
                    if (bFld) {
                        Test.byFld += (byte)57123;
                        fArrFld[(int)(d + 1)] = i2;
                        dArrFld[(int)(d1 + 1)][(int)(d1 - 1)] = Test.instanceCount;
                    } else if (bFld) {
                        i1 = Test.byFld;
                        iArrFld = iArrFld;
                        Test.iFld = (int)1.859F;
                    } else {
                        Test.instanceCount = Test.iFld;
                    }
                }
            }
        }
        long meth_res = i + Double.doubleToLongBits(d) + i1 + i2 + i3 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d1) + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-101.550F, f3=87.844F;
        int i11=-40988, i12=0, i13=-4, i14=179, i15=14, i16=17971, i17=105, i18=12, i19=-7, i20=18400, i21=4,
            i22=50428, i23=43;
        short s=17968;
        long l=-1L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.107155);

        Test.iFld = iMeth(Test.iFld);
        for (f2 = 13; f2 < 395; f2++) {
            f3 += f3;
        }
        for (i12 = 10; 197 > i12; ++i12) {
            for (i14 = 6; 134 > i14; ++i14) {
                Test.instanceCount += s;
                i13 -= (int)Test.instanceCount;
                for (i16 = 1; i16 < 2; i16++) {
                    i13 += (i16 - s);
                    Test.iFld += i16;
                    iFld1 -= iFld1;
                    Test.byFld *= (byte)i13;
                    iFld1 ^= s;
                    iArrFld[i14 + 1] += (int)f2;
                    Test.lArrFld[i12] = i17;
                    Test.dFld = Test.instanceCount;
                    s = (short)Test.instanceCount;
                }
                for (i18 = 1; i18 < 2; i18++) {
                    Test.byFld = (byte)s;
                    Test.dFld = iFld1;
                }
                iArrFld = FuzzerUtils.int1array(N, (int)-55909);
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.dFld -= 0.288F;
                }
                Test.lArrFld[i14] = i13;
                i21 = (int)1.33644;
                Test.iFld += (i14 * i14);
            }
            for (l = 3; 134 > l; l += 2) {
                i23 = 1;
                do {
                    i17 += (((i23 * i21) + i19) - f2);
                    i21 *= (int)Test.instanceCount;
                } while (++i23 < 3);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
