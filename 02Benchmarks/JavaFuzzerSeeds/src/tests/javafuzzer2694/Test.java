package tests.javafuzzer2694;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:47:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6078479641435982613L;
    public static int iFld=121;
    public static boolean bFld=false;
    public double dFld=83.602;
    public float fFld=-106.76F;
    public short sFld=28930;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -235);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, long l) {

        byte by=110;
        int i3=34823, i4=-56986, i5=21121, i6=5;
        double d1=0.73152;
        float f2=19.819F;
        boolean b1=false;

        Test.iFld -= by;
        for (i3 = 6; i3 < 283; ++i3) {
            Test.instanceCount = i3;
            Test.iFld >>= i4;
        }
        i5 = 1;
        do {
            if (b) {
                i6 = 1;
                while (++i6 < 5) {
                    i4 -= i5;
                    d1 = -45.687F;
                }
                Test.iFld *= i3;
                Test.iFld = i4;
            } else if (b1) {
                Test.iArrFld[i5] -= i4;
                Test.iFld += i4;
                d1 *= i3;
                i4 += (((i5 * f2) + i6) - f2);
            }
        } while (++i5 < 341);
        vMeth2_check_sum += (b ? 1 : 0) + l + by + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + (b1 ? 1 : 0);
    }

    public static void vMeth1() {

        int i1=-8754, i2=54772, i7=-113;
        float f1=-1.1004F;
        double d=-2.128183, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 113.103936);

        i1 = 306;
        while (--i1 > 0) {
            try {
                Test.iArrFld[i1 - 1] = (i1 % i1);
                Test.iFld = (-24844 % i1);
                Test.iFld = (-40027 % i1);
            } catch (ArithmeticException a_e) {}
        }
        f1 = (float)d;
        Test.iFld -= (Math.max(i2--, Integer.reverseBytes(34361)) ^ Test.iFld);
        vMeth2(Test.bFld, Test.instanceCount);
        f1 -= Test.iFld;
        Test.bFld = true;
        i7 = 1;
        do {
            i2 += i7;
            Test.iFld -= 0;
            i2 += (((i7 * i2) + Test.iFld) - Test.instanceCount);
        } while (++i7 < 343);
        i2 = 166;
        dArr[(i7 >>> 1) % N] += i1;
        Test.bFld = Test.bFld;
        Test.iArrFld = Test.iArrFld;
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i2 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        float f=-1.472F, f3=-2.921F;
        int i=59, i8=246, i9=-17824, i10=-88, iArr[]=new int[N];
        byte by1=35;

        FuzzerUtils.init(iArr, -56216);

        f = ((f * (iArr[(i >>> 1) % N]--)) % (i | 1));
        iArr[(1 >>> 1) % N] -= (int)(-(Test.instanceCount--));
        vMeth1();
        i8 = 1;
        do {
            if (true) break;
            f3 = 1;
            do {
                double d2=-1.62809;
                Test.iFld = i;
                i *= Test.iFld;
                d2 = i;
            } while (++f3 < 7);
            Test.iFld += (-13195 + (i8 * i8));
            Test.iFld = i8;
            for (i9 = 7; i9 > 1; i9--) {
                Test.iFld += (int)Test.instanceCount;
            }
        } while (++i8 < 220);
        i = i;
        i = by1;
        vMeth_check_sum += Float.floatToIntBits(f) + i + i8 + Float.floatToIntBits(f3) + i9 + i10 + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i11=-57, i12=-14, i13=13573, i14=-40842, i15=-54292, i16=-13, i17=0, i18=-18919, i19=32562;

        vMeth();
        Test.iArrFld[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
        byArrFld[(Test.iFld >>> 1) % N] >>= (byte)Test.iFld;
        Test.iFld += Test.iFld;
        Test.iFld *= Test.iFld;
        Test.instanceCount = Test.iFld;
        i11 = 1;
        while (++i11 < 292) {
            Test.iFld += (((i11 * Test.iFld) + Test.iFld) - Test.iFld);
        }
        dFld = 8;
        Test.iFld = 94;
        for (i12 = 4; i12 < 391; i12++) {
            try {
                Test.iFld = (i12 % Test.iArrFld[i12 + 1]);
                i13 = (i13 / 207);
                Test.iFld = (i11 / 1214683547);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) {
                for (i14 = 65; 4 < i14; i14--) {
                    Test.iArrFld[i14] -= (int)fFld;
                    i13 &= i11;
                    Test.bFld = false;
                    for (i16 = 1; 2 > i16; i16++) {
                        Test.iFld -= (int)Test.instanceCount;
                    }
                    i17 += Test.iFld;
                    for (i18 = i12; 2 > i18; ++i18) {
                        i17 = i18;
                        if (Test.bFld) break;
                        Test.instanceCount += (((i18 * Test.instanceCount) + Test.instanceCount) - i19);
                        Test.instanceCount += i18;
                        Test.iFld -= Test.iFld;
                        Test.iArrFld[i12] = sFld;
                    }
                    i13 <<= i17;
                    try {
                        i19 = (i13 / Test.iArrFld[i12]);
                        Test.iArrFld[i14 - 1] = (13986 / i18);
                        Test.iArrFld[i12 + 1] = (174 / Test.iArrFld[i14 + 1]);
                    } catch (ArithmeticException a_e) {}
                }
            } else {
            }
            if (Test.bFld) break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
