package tests.javafuzzer2176;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:44:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public volatile float fFld=-2.680F;
    public static float fFld1=41.317F;
    public static volatile byte byFld=-22;
    public short sFld=-20755;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7, int i8) {

        int i9=-69, i10=6, i11=-26129, i12=-42300, i13=-103, i14=49, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 57791);
        FuzzerUtils.init(fArr, -75.45F);

        Test.instanceCount |= i6;
        for (i9 = 6; i9 < 123; i9++) {
            iArr[i9] >>= i10;
            for (i11 = i9; i11 < 13; i11++) {
                i7 *= i8;
                Test.fFld1 += i9;
                for (i13 = 1; i13 > 1; --i13) {
                    i8 = i6;
                    i10 = -57783;
                    Test.fFld1 /= -78;
                    fArr[i11] -= -62;
                    i12 -= 67;
                    i8 += (((i13 * Test.instanceCount) + i12) - i10);
                    i10 = Test.byFld;
                    i6 >>>= 33;
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l) {

        int i4=162, i5=59186, i15=-4, i16=89, i17=-177, iArr1[]=new int[N];
        long l1=10L, lArr[]=new long[N];
        short s1=-10155;

        FuzzerUtils.init(iArr1, 6);
        FuzzerUtils.init(lArr, -35408L);

        for (i4 = 5; i4 < 392; ++i4) {
            vMeth2(i5, i5, i5);
            iArr1[i4 + 1] *= i5;
            i5 = i4;
            for (l1 = i4; l1 < 4; ++l1) {
                s1 += (short)(((l1 * Test.fFld1) + i15) - i4);
                Test.fFld1 = 11;
                i15 += (int)(l1 - l);
                iArr1[i4 + 1] *= s1;
                for (i16 = 1; i16 < 1; ++i16) {
                    lArr[i16 + 1] += 129;
                    iArr1[(int)(l1 - 1)] -= -41812;
                    s1 += (short)i5;
                    iArr1[(int)(l1 + 1)] -= 2;
                    Test.fFld1 += (((i16 * i4) + Test.fFld1) - i4);
                }
            }
        }
        vMeth1_check_sum += l + i4 + i5 + l1 + i15 + s1 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(short s) {

        int i=58452, i1=-69, i2=-45524, i3=-23377, i18=-13;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i = 7; 322 > i; ++i) {
            fFld = Integer.reverseBytes((int)((i1 = (int)Test.instanceCount) * (++i1)));
            for (i2 = 5; i2 > 1; i2--) {
                i1 += (-184 + (i2 * i2));
            }
            vMeth1(Test.instanceCount);
            i18 = 1;
            do {
                i3 -= i18;
                i3 /= (int)(Test.instanceCount | 1);
                i1 += (2 + (i18 * i18));
                Test.instanceCount += (2L + (i18 * i18));
                i1 += i18;
                i3 += (i18 * i18);
                try {
                    i1 = (i18 / i3);
                    i1 = (i1 % 226);
                    Test.iArrFld[i18] = (i / -38905);
                } catch (ArithmeticException a_e) {}
                i1 += (((i18 * i1) + fFld) - i2);
                bArr[i18] = b;
            } while ((i18 += 2) < 5);
        }
        vMeth_check_sum += s + i + i1 + i2 + i3 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-8114;

        vMeth(sFld);
        i19 >>= -11955;
        Test.iArrFld[(i19 >>> 1) % N] |= i19;
        i19 = i19;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
