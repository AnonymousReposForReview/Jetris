package tests.javafuzzer81;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:02:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=165L;
    public static int iFld=-200;
    public static float fFld=48.80F;
    public static int iFld1=40912;
    public static double dFld=1.109903;
    public static boolean bFld=false;
    public static boolean bFld1=true;
    public static double dArrFld[][]=new double[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public short sArrFld[]=new short[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 127.27345);
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.lArrFld, 34668L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, int i11) {

        int i12=-1, i13=-58996, i14=15155, i15=-20966;
        byte by=-81;
        double d1=32.67561;
        short s1=-6138;

        for (i12 = 191; i12 > 6; --i12) {
            Test.iFld1 -= (int)Test.instanceCount;
            Test.lArrFld[i12 - 1][i12 - 1] -= Test.instanceCount;
            Test.iFld = i12;
            Test.iFld1 = (int)Test.instanceCount;
            Test.lArrFld[i12 - 1][i12] = i12;
            Test.dArrFld[i12 - 1] = Test.dArrFld[i12 + 1];
        }
        Test.iArrFld[(i13 >>> 1) % N] *= by;
        Test.iFld1 += (int)d1;
        by = (byte)-13;
        s1 += (short)l;
        Test.iArrFld[(Test.iFld >>> 1) % N] += Test.iFld1;
        for (i14 = 5; i14 < 374; i14++) {
            l = Test.iFld;
            Test.fFld += (i14 * Test.instanceCount);
        }
        long meth_res = l + i11 + i12 + i13 + by + Double.doubleToLongBits(d1) + s1 + i14 + i15;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i10) {

        double d=-94.95996;
        int i16=55287, i17=236, i18=65189, i19=-1648;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.instanceCount = (--Test.iFld1);
        d -= ((++i10) - iMeth1(Test.instanceCount, Test.iFld1));
        for (i16 = 156; i16 > 9; --i16) {
            Test.iFld = (int)Test.fFld;
            Test.instanceCount -= Test.instanceCount;
            Test.iFld += (i16 | Test.instanceCount);
            for (i18 = i16; i18 < 11; i18++) {
                try {
                    Test.iFld = (-26962 % Test.iFld1);
                    i10 = (i10 % 694991466);
                    i10 = (Test.iArrFld[i18] / 615581588);
                } catch (ArithmeticException a_e) {}
                i10 += (i18 * i17);
                Test.instanceCount >>= i16;
                i10 = (int)Test.fFld;
                bArr[i18] = true;
                i19 -= -44516;
            }
            i19 = (int)3354265236L;
            Test.iFld *= 37570;
        }
        long meth_res = i10 + Double.doubleToLongBits(d) + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        short s=-17034;
        int i2=-11, i3=-231, i4=58, i5=-5759, i6=-179, i7=4, i8=3556, i9=-43197;
        double d2=1.96923;

        Test.dArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (s / (Math.max(-(++Test.iArrFld[(Test.iFld >>> 1)
            % N]), (int)(Test.iFld - Test.instanceCount)) | 1));
        if (true) {
            for (i2 = 9; i2 < 164; i2++) {
                for (i4 = 1; i4 < 10; i4++) {
                    Test.iFld *= (-8661 + (++i5));
                    Test.fFld += (i4 * i4);
                }
                for (i6 = i2; i6 < 10; ++i6) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        Test.fFld += (((--Test.iFld) + (126 % ((Test.instanceCount ^ i3) | 1))) * (--Test.iArrFld[i8 +
                            1]));
                        i9 += (int)(Test.fFld--);
                        Test.iArrFld[i2] += iMeth(i8);
                        try {
                            Test.iFld = (-992866933 / i7);
                            Test.iFld = (i2 / -201);
                            i5 = (Test.iArrFld[i8] / 25342);
                        } catch (ArithmeticException a_e) {}
                        d2 -= i3;
                        s += (short)(-3 + (i8 * i8));
                    }
                    Test.dFld *= i5;
                }
            }
        } else if (Test.bFld) {
            Test.iFld *= i5;
        } else {
            Test.iArrFld = Test.iArrFld;
        }
        vMeth_check_sum += s + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=-4469, i20=1, i21=-13, i22=0, i23=6, i24=-68, i25=-12, i26=-9, i27=25, i28=-141, i29=231, i30=-162;
        float f=0.42F;
        byte by1=-110;
        short s2=-9839;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, false);

        for (i = 3; i < 156; ++i) {
            vMeth();
            for (i20 = 4; i20 < 164; i20++) {
                sArrFld = FuzzerUtils.short1array(N, (short)-16977);
            }
            Test.bFld = Test.bFld;
            i22 = 1;
            do {
                sArrFld[i22] <<= (short)Test.iFld;
            } while (++i22 < 164);
        }
        Test.bFld1 = true;
        for (i23 = 16; i23 < 315; ++i23) {
            Test.bFld1 = false;
        }
        for (f = 227; f > 10; f -= 2) {
            for (i26 = 14; 232 > i26; i26++) {
                switch ((int)((f % 9) + 69)) {
                case 69:
                    for (i28 = 1; i28 < 2; i28++) {
                        i21 -= (int)Test.fFld;
                        Test.dFld = Test.instanceCount;
                        switch ((((i >>> 1) % 7) * 5) + 74) {
                        case 106:
                            i27 -= i29;
                            bArr1[i26 + 1] = true;
                        case 90:
                            Test.instanceCount >>= Test.instanceCount;
                            break;
                        case 84:
                            if (true) {
                                iArrFld1[i28 - 1] -= by1;
                                s2 -= (short)71.705F;
                                Test.fFld *= i24;
                                if (false) continue;
                            } else {
                                Test.lArrFld[(int)(f - 1)][(int)(f)] += 15;
                                iArrFld1[i26] = (int)Test.instanceCount;
                            }
                            i21 *= i;
                            try {
                                iArrFld1[(int)(f)] = (i20 / 100);
                                i27 = (87 % iArrFld1[(int)(f - 1)]);
                                i25 = (-27725 / i29);
                            } catch (ArithmeticException a_e) {}
                            i1 += (((i28 * i) + Test.instanceCount) - i26);
                            break;
                        case 79:
                            i1 += i21;
                        case 75:
                            i25 += -169;
                            break;
                        case 94:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 96:
                            iArrFld1[(int)(f)] *= i27;
                            break;
                        default:
                            i27 += (((i28 * Test.fFld) + i21) - Test.instanceCount);
                        }
                    }
                    break;
                case 70:
                    iArrFld1 = iArrFld1;
                    break;
                case 71:
                    i24 &= i;
                    break;
                case 72:
                    i30 -= (int)f;
                    break;
                case 73:
                    i24 -= s2;
                    break;
                case 74:
                    i27 -= i24;
                case 75:
                    i27 = i;
                    break;
                case 76:
                    Test.fFld = by1;
                    break;
                case 77:
                    Test.iFld1 -= Test.iFld;
                    break;
                default:
                    Test.instanceCount += (long)(93.367F + (i26 * i26));
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
