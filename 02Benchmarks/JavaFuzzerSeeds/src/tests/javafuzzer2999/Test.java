package tests.javafuzzer2999;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:43:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static short sFld=-28545;
    public static double dFld=-120.242;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        int i4=58, i5=0, i6=-6, i7=36339, iArr[]=new int[N];
        byte by=60;
        short s=-23139;
        boolean b=false;

        FuzzerUtils.init(iArr, 52655);

        i4 = 1;
        do {
            i5 = 1;
            do {
                i3 *= (int)Test.instanceCount;
                i3 += (int)Test.instanceCount;
                if (b) {
                    i3 = i5;
                } else if (b) {
                    iArr[i5 - 1] = i4;
                    i3 = by;
                    vMeth1_check_sum += i3 + i4 + i5 + by + s + (b ? 1 : 0) + i6 + i7 + FuzzerUtils.checkSum(iArr);
                    return;
                } else if (b) {
                    iArr[i5] *= i5;
                    i3 = s;
                    Test.instanceCount = i5;
                }
                i3 = i3;
                for (i6 = 1; i6 < 1; ++i6) {
                    i3 += (i6 * i6);
                    b = false;
                }
            } while (++i5 < 8);
        } while (++i4 < 202);
        vMeth1_check_sum += i3 + i4 + i5 + by + s + (b ? 1 : 0) + i6 + i7 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, int i2, long l1) {

        double d=-1.83917;
        int i8=2;

        vMeth1(i1);
        i2 >>= i2;
        i1 += i2;
        for (d = 10; 388 > d; ++d) {
            i8 += 7485;
        }
        vMeth_check_sum += i1 + i2 + l1 + Double.doubleToLongBits(d) + i8;
    }

    public static void vSmallMeth(float f, int i, long l) {


        vMeth(i, i, l);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + l;
    }

    public void mainTest(String[] strArr1) {

        float f1=1.601F, f2=0.636F;
        int i9=3, i10=-26689, i11=163, i12=-10, i13=-2, i14=-69, i15=-118, i16=248, i17=-6, i18=9, i19=17136, i20=-80,
            iArr1[][]=new int[N][N];
        boolean b1=true;
        byte by1=-77;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -2869);
        FuzzerUtils.init(lArr, 6685866032458335136L);
        FuzzerUtils.init(dArr, -1.36397);

        for (int smallinvoc=0; smallinvoc<794; smallinvoc++) vSmallMeth(f1, 10, -57456L);
        iArr1[(i9 >>> 1) % N][(i9 >>> 1) % N] -= (int)f1;
        for (i10 = 3; i10 < 332; i10++) {
            if (b1) {
            } else if (b1) {
                i9 -= -4;
                for (i12 = 4; i12 < 76; ++i12) {
                    f1 += (i12 * i14);
                    i13 -= (int)f1;
                }
                lArr[i10] |= 63310;
                Test.sFld |= (short)8;
            } else {
                Test.instanceCount += (-2819 + (i10 * i10));
                Test.instanceCount = Test.instanceCount;
                for (f2 = i10; f2 < 76; ++f2) {
                    for (i16 = 1; i16 < 1; ++i16) {
                        i11 = Test.sFld;
                    }
                    Test.instanceCount -= -6189935932622509771L;
                    iArr1[(int)(f2)][i10] = -2315;
                    dArr[i10 - 1] = Test.instanceCount;
                }
                f1 = (float)Test.dFld;
            }
        }
        b1 = b1;
        Test.instanceCount = i13;
        i11 -= i10;
        for (i18 = 15; i18 < 354; ++i18) {
            by1 += (byte)i18;
            Test.dFld *= i13;
            if (b1) {
                switch ((i18 % 2) + 119) {
                case 119:
                    i20 = 1;
                    do {
                        iArr1[i18 - 1] = iArr1[i18 + 1];
                    } while (++i20 < 74);
                    break;
                case 120:
                }
            } else {
                i17 /= -254;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
