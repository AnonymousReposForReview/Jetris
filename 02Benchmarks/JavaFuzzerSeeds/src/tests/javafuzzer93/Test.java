package tests.javafuzzer93;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:16:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3987627979L;
    public static float fFld=-2.882F;
    public static double dFld=-74.67630;
    public static boolean bFld=false;
    public static short sFld=15955;
    public static volatile double dArrFld[][]=new double[N][N];
    public static volatile int iArrFld[]=new int[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -59.64533);
        FuzzerUtils.init(Test.iArrFld, -42016);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=2, i6=12, i7=138, i8=-53517, i9=-27274;
        long l=2447040400L;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.fFld *= -55;
        for (i5 = 11; i5 < 210; i5++) {
            i6 -= (int)Test.instanceCount;
        }
        if (true) {
            i6 = i6;
            i6 -= (int)Test.dFld;
            for (i7 = 347; i7 > 7; i7--) {
                Test.fFld = i7;
                i6 += (((i7 * i9) + i6) - Test.instanceCount);
                if (false) break;
                Test.instanceCount -= Test.instanceCount;
                Test.dArrFld[i7 - 1][i7 - 1] = i6;
                i9 -= (int)1.503F;
                Test.instanceCount <<= l;
                l += (i7 | i7);
            }
        } else if (b) {
            bArr[(i6 >>> 1) % N] = b;
        } else {
            i8 -= (int)79L;
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + l + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i3=4, i4=-8, i10=-84, i11=233, i12=207, iArr[]=new int[N];
        short s=-14189;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -71);
        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(fArr, 53.134F);

        for (i3 = 1; i3 < 246; i3++) {
            Test.fFld = (((iArr[i3 - 1]++) - iMeth1()) - i3);
            i4 *= i4;
            s -= (short)i4;
            i10 = 1;
            while (++i10 < 7) {
                i4 = i10;
                iArr[i3] -= i4;
                Test.bFld = Test.bFld;
                lArr[i3] -= i10;
                for (i11 = 1; i11 < 1; i11++) {
                    i4 *= i3;
                    Test.fFld += i11;
                    fArr[i11 - 1] -= i3;
                    Test.dFld += Test.instanceCount;
                    if (Test.bFld) continue;
                }
            }
        }
        long meth_res = i3 + i4 + s + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=10, i13=179, i14=149, i15=6, i16=-63135, i17=171;
        double d=10.44435;
        short s1=-5704;
        byte by=42;
        long lArr1[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr1, 55709L);
        FuzzerUtils.init(fArr1, 0.491F);

        switch ((((((int)(Test.fFld + i2)) >>> 1) % 10) * 5) + 116) {
        case 158:
            iMeth();
            i13 = 1;
            do {
                for (d = 1; d < 4; ++d) {
                    Test.fFld += (float)(d - i14);
                    lArr1[i13 - 1] = (long)Test.dFld;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)14);
                    Test.dArrFld[(int)(d)][(int)(d - 1)] += i13;
                    i14 = (int)Test.instanceCount;
                    for (i15 = 2; i15 > i13; --i15) {
                        i14 += (i15 - s1);
                    }
                }
                i17 = 1;
                do {
                    Test.dArrFld[i13] = Test.dArrFld[i13];
                    Test.instanceCount -= (long)Test.dFld;
                    Test.iArrFld[i17 + 1] = i16;
                } while (++i17 < 4);
            } while (++i13 < 380);
            break;
        case 164:
            i14 += (int)Test.instanceCount;
        case 135:
            Test.iArrFld[(i2 >>> 1) % N] = i17;
        case 130:
            by += (byte)-89;
            break;
        case 118:
            i16 <<= i15;
            break;
        case 163:
            Test.instanceCount = i14;
            break;
        case 142:
            fArr1[(i15 >>> 1) % N] = -1;
            break;
        case 155:
            Test.iArrFld[(i16 >>> 1) % N] -= (int)Test.dFld;
        case 122:
            Test.instanceCount = s1;
            break;
        case 123:
            i2 = i16;
        default:
            i16 -= (int)Test.instanceCount;
        }
        vMeth_check_sum += i2 + i13 + Double.doubleToLongBits(d) + i14 + i15 + i16 + s1 + i17 + by +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=25889, i1=63, i18=-77, i19=-33291, i20=11, i21=-14;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 2466932727742943436L);

        if (Test.bFld) {
            for (i = 6; i < 241; ++i) {
                i1 += i;
                i1 = i;
                vMeth();
                i1 *= (int)-3629667791L;
                for (i18 = 2; i18 < 107; ++i18) {
                    for (i20 = 2; i20 > 1; --i20) {
                        if (Test.bFld) break;
                        fArrFld = FuzzerUtils.float2array(N, (float)-53.408F);
                        switch (((i % 5) * 5) + 111) {
                        case 121:
                            Test.fFld += i20;
                            Test.fFld -= i19;
                            try {
                                Test.iArrFld[i20 + 1] = (i18 % i18);
                                i21 = (i20 % 1751484926);
                                i1 = (i1 % i1);
                            } catch (ArithmeticException a_e) {}
                            i1 += i20;
                        case 130:
                            i1 += i20;
                            Test.iArrFld[i18 - 1] /= (int)((long)(Test.fFld) | 1);
                            lArr2 = lArr2;
                            Test.fFld = Test.instanceCount;
                        case 120:
                            i19 += (26999 + (i20 * i20));
                            i21 += i20;
                            i1 += i;
                            Test.iArrFld[i20 - 1] = (int)Test.dFld;
                            break;
                        case 135:
                            Test.fFld *= i18;
                            Test.fFld *= Test.fFld;
                            i21 += (((i20 * Test.fFld) + i) - Test.instanceCount);
                            fArrFld[i18 - 1][i] += i1;
                            break;
                        case 134:
                            try {
                                i1 = (i1 / 60);
                                i21 = (i21 / i20);
                                i21 = (i1 % 109);
                            } catch (ArithmeticException a_e) {}
                        default:
                            i21 += (int)-9L;
                        }
                        i21 += Test.sFld;
                    }
                }
            }
        } else {
            i19 <<= i21;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
