package tests.javafuzzer3076;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:32:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static double dFld=0.124706;
    public static boolean bFld=true;
    public byte byFld=-52;
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6) {

        int i7=28677, i8=-134, i9=-5, iArr1[]=new int[N];
        float f1=103.757F;
        short s=16938;

        FuzzerUtils.init(iArr1, -65007);

        Test.instanceCount = i6;
        for (i7 = 6; i7 < 246; i7++) {
            boolean b1=false;
            f1 -= i6;
            switch (((i8 >>> 1) % 2) + 113) {
            case 113:
            case 114:
                i8 >>>= i8;
                if (b1) {
                    i6 = (int)Test.instanceCount;
                } else if (true) {
                    i6 = i8;
                }
                i6 *= i6;
            }
            switch (((i7 % 10) * 5) + 82) {
            case 106:
                i9 = 1;
                do {
                    float f2=-47.380F;
                    i8 -= (int)f2;
                    i8 = -10;
                    i8 = i9;
                    i6 &= i9;
                } while ((i9 += 2) < 7);
                break;
            case 103:
                s = (short)i7;
                break;
            case 118:
                b1 = b1;
                break;
            case 120:
                i6 -= i7;
            case 122:
            case 113:
                iArr1 = iArr1;
            case 124:
                i6 /= (int)(Test.instanceCount | 1);
                break;
            case 89:
                iArr1[i7 - 1] <<= i7;
                break;
            case 93:
                i8 >>= i9;
                break;
            case 86:
                i8 <<= i8;
                break;
            default:
                if (b1) break;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(boolean b) {

        int i10=5, i11=51056, i12=239, i13=-17404, i14=-27296;
        byte by=89;
        float f3=2.466F, f4=-43.610F;
        long l1=8569586611332375997L;
        double dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 0.61452);
        FuzzerUtils.init(sArr, (short)-27707);

        vMeth(i10);
        i10 -= i10;
        dArr = dArr;
        i11 = 1;
        while (++i11 < 300) {
            i10 = i10;
            by *= (byte)f3;
            for (l1 = 1; l1 < 6; l1++) {
                for (i13 = 1; i13 < 2; ++i13) {
                    i12 <<= -66;
                    switch ((i13 % 2) + 40) {
                    case 40:
                        sArr = sArr;
                        break;
                    case 41:
                        Test.dFld = l1;
                        break;
                    default:
                        by = (byte)f4;
                        i14 += (i13 ^ l1);
                        if (b) break;
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i10 + i11 + by + Float.floatToIntBits(f3) + l1 + i12 + i13 + i14 +
            Float.floatToIntBits(f4) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, int i, long l) {

        int i1=14, i2=-5, i3=177, i4=-14, i5=5, iArr[]=new int[N];
        short s1=-17684;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(lArr, 8594946772377234847L);

        switch (((iArr[(i >>> 1) % N] >>> 1) % 6) + 27) {
        case 27:
            l *= (long)Math.abs(i + (-(i * 71)));
            for (i1 = 2; i1 < 387; ++i1) {
                i3 = 1;
                while (++i3 < 4) {
                    i2 += (i3 * i3);
                    i += (i3 * i3);
                    iArr[i3 + 1] = (int)(((105.338F + (f * -62)) - (Test.instanceCount--)) * (++i));
                    for (i4 = 1; 1 > i4; i4++) {
                        lArr[i1 + 1] <<= (long)(l + ((++f) * (--f)));
                        iArr[i4 - 1] = (Integer.reverseBytes(i4) << iMeth1(Test.bFld));
                        i5 += i4;
                    }
                    i2 += i3;
                    f += i;
                    Test.instanceCount -= i4;
                    i2 = i1;
                }
            }
            break;
        case 28:
            Test.dFld -= Test.dFld;
            break;
        case 29:
        case 30:
            s1 >>= (short)l;
            break;
        case 31:
            i = (int)Test.instanceCount;
            break;
        case 32:
            f += -2;
            break;
        }
        long meth_res = Float.floatToIntBits(f) + i + l + i1 + i2 + i3 + i4 + i5 + s1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=0.95692;
        float f5=-44.104F;
        int i15=-10, i16=-11, i17=-59, i18=168, i19=-42893, i20=221, i21=-5, i22=59772, i23=52, i24=30640, i25=29463,
            i26=-89, i27=25476, iArr2[]=new int[N];
        short s2=-15299;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -7156236181183161439L);
        FuzzerUtils.init(iArr2, 32079);

        d *= iMeth(f5, i15, Test.instanceCount);
        Test.instanceCount = i15;
        f5 *= i15;
        for (i16 = 126; i16 > 5; --i16) {
            switch (((i16 % 8) * 5) + 67) {
            case 103:
                for (i18 = 2; i18 < 207; ++i18) {
                    byFld = (byte)112;
                    i15 = (int)Test.instanceCount;
                    for (i20 = i18; i20 < 2; i20++) {
                        lArr1 = lArr1;
                        i17 = i17;
                        i17 -= i20;
                        if (Test.bFld) continue;
                        if (Test.bFld) continue;
                        i17 *= (int)Test.instanceCount;
                        i17 += s2;
                    }
                    i17 *= i20;
                    iArr2[i16] += i17;
                    for (i22 = 1; i22 < 2; i22++) {
                        if (true) continue;
                        iArr2[i18] = i17;
                        i21 = i20;
                        i15 = 6;
                    }
                }
                for (i24 = 9; i24 < 207; ++i24) {
                    f5 = i16;
                    fArrFld[i16] = Test.instanceCount;
                    for (i26 = 1; 2 > i26; i26++) {
                        i23 += i22;
                        iArr2[i26] = i19;
                        i27 += i26;
                    }
                }
                break;
            case 70:
                i25 <<= i21;
                break;
            case 88:
                lArr1[i16] += 13L;
                break;
            case 104:
            case 93:
                Test.instanceCount += i27;
                break;
            case 74:
                lArr1[i16] <<= i21;
            case 106:
                i27 *= i20;
                break;
            case 83:
                iArr2[i16 + 1] *= i22;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
