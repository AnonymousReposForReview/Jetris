package tests.javafuzzer1784;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:20:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5914533754637176380L;
    public static int iFld=22523;
    public static volatile long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3244895873L);
        FuzzerUtils.init(Test.sArrFld, (short)-6167);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3) {

        int i4=-230, i5=-12, i6=14, i7=27, i8=-13, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, -11);

        i4 = 1;
        while (++i4 < 162) {
            Test.instanceCount = i3;
            if (b) {
                try {
                    iArr1[i4] = (i3 / -147781077);
                    i3 = (-236 % i3);
                    i2 = (i3 / iArr1[i4]);
                } catch (ArithmeticException a_e) {}
                for (i5 = 1; i5 < 10; ++i5) {
                    for (i7 = 1; i7 < 2; i7++) {
                        i6 >>= i4;
                        Test.lArrFld[i5] = -59;
                        i3 = (int)Test.instanceCount;
                        Test.lArrFld[i4 - 1] = 0;
                        if (i8 != 0) {
                            vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) +
                                FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        i2 = (int)Test.instanceCount;
                        try {
                            iArr1[i4] = (iArr1[i7 - 1] / iArr1[i7 + 1]);
                            i8 = (-194 % i5);
                            i2 = (i2 / i6);
                        } catch (ArithmeticException a_e) {}
                    }
                    i3 <<= i5;
                    Test.instanceCount += (i5 | i7);
                }
            } else {
                b = b;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i9=153, i10=6, i11=-12, iArr2[]=new int[N];
        double d1=1.100500, d2=-17.35129;
        float f=95.136F;
        short s1=26275;

        FuzzerUtils.init(iArr2, -24899);

        vMeth1(i9, i9);
        for (d1 = 3; d1 < 299; ++d1) {
            i10 = (int)-29L;
            Test.sArrFld = Test.sArrFld;
            i11 = 1;
            do {
                f += (0.323F + (i11 * i11));
            } while (++i11 < 6);
            s1 = (short)35453L;
            s1 += (short)(((d1 * i9) + i10) - Test.instanceCount);
            i10 += (int)(((d1 * i10) + i11) - i11);
            Test.instanceCount = i9;
            d2 -= Test.instanceCount;
        }
        Test.sArrFld[(i10 >>> 1) % N] -= (short)Test.instanceCount;
        iArr2[(i10 >>> 1) % N] <<= 15717;
        i10 = 56;
        iArr2[(51701 >>> 1) % N] >>= (int)Test.instanceCount;
        vMeth_check_sum += i9 + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f) + s1 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth(byte by, int i1) {


        vMeth();
        long meth_res = by + i1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.12830;
        short s=18950;
        int i=5, i12=-248, i13=-11, i15=22, i17=2587, iArr[]=new int[N];
        byte by1=121;
        boolean b1=true;
        long l=-3L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 20);
        FuzzerUtils.init(fArr, -127.539F);

        d += (++s);
        i = 1;
        do {
            int i16=-38503;
            iArr[i] -= (int)lMeth(by1, i);
            i12 = 1;
            while (++i12 < 85) {
                i13 = 1;
                do {
                    int i14=-9;
                    if (b1) continue;
                    i14 = i;
                    i14 = (int)-3745028729L;
                    Test.lArrFld[i12 - 1] = (long)d;
                    i14 += (int)(0.445F + (i13 * i13));
                    Test.instanceCount = i14;
                    i14 += (i13 * Test.instanceCount);
                    i14 += i13;
                    i14 >>= by1;
                } while ((i13 -= 3) > 0);
                iArr[i12 + 1] = -17785;
                Test.instanceCount += Test.instanceCount;
            }
            Test.instanceCount = i;
            if (true) {
                fArr[i] = i13;
                i15 = 1;
                do {
                    iArr[i15] -= i12;
                } while (++i15 < 85);
                if (b1) continue;
            } else {
                switch ((i % 2) + 26) {
                case 26:
                    Test.iFld /= (int)(Test.instanceCount | 1);
                    break;
                case 27:
                    i16 = (int)-108.715F;
                    for (l = 1; l < 85; ++l) {
                        i17 += (int)l;
                        Test.instanceCount >>= i13;
                        d = 11652;
                        Test.iFld = i15;
                    }
                default:
                    Test.instanceCount += l;
                }
            }
        } while (++i < 297);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
