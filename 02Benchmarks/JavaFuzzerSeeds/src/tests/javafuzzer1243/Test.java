package tests.javafuzzer1243;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:07:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4129763806L;
    public byte byFld=-69;
    public static volatile short sFld=15956;
    public float fFld=16.321F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -31323);
        FuzzerUtils.init(Test.sArrFld, (short)-31936);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, float f) {

        int i6=204, i7=22044, i8=-12;
        boolean b=false;
        double d=1.12528;
        byte by=74;

        for (i6 = 366; i6 > 7; i6 -= 2) {
            b = b;
            Test.iArrFld[i6 + 1] = i6;
            switch ((((i4 >>> 1) % 4) * 5) + 108) {
            case 114:
                if (b) continue;
                try {
                    i5 = (Test.iArrFld[(i5 >>> 1) % N] / i6);
                    i7 = (i5 % Test.iArrFld[i6 + 1]);
                    i7 = (i6 % -129);
                } catch (ArithmeticException a_e) {}
                i4 = i5;
                i7 -= i5;
                break;
            case 126:
                try {
                    i4 = (i5 % i5);
                    i7 = (Test.iArrFld[i6 - 1] / i7);
                    Test.iArrFld[i6] = (i6 / 59360);
                } catch (ArithmeticException a_e) {}
                d = i8;
                break;
            case 113:
                i8 = i7;
                if (i5 != 0) {
                    vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + (b ? 1 : 0) +
                        Double.doubleToLongBits(d) + i8 + by;
                    return;
                }
                break;
            case 117:
                Test.instanceCount *= -30419;
                Test.sArrFld[i6 - 1] = (short)-154;
                Test.instanceCount >>= Test.instanceCount;
                break;
            default:
                Test.instanceCount *= by;
            }
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i8
            + by;
    }

    public static void vMeth() {

        int i3=93, i9=7056, i10=11, i11=-80;
        float f1=1.10F, f2=1.595F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 59514L);

        Test.iArrFld[(i3 >>> 1) % N] = -3;
        i3 |= Math.abs((i3 += i3) % ((i3 - i3) | 1));
        for (short s : Test.sArrFld) {
            vMeth1(i3, i3, f1);
            Test.sArrFld = Test.sArrFld;
            Test.iArrFld[(i3 >>> 1) % N] = i3;
            for (i9 = 1; 4 > i9; ++i9) {
                s <<= (short)Test.instanceCount;
                switch (((i9 >>> 1) % 1) + 12) {
                case 12:
                    for (f2 = 1; 2 > f2; ++f2) {
                        i10 >>= 8;
                        i11 += (int)f2;
                        lArr = lArr;
                        i11 += (int)((long)f2 | i3);
                        i11 += (int)(f2 * f2);
                    }
                }
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f1) + i9 + i10 + Float.floatToIntBits(f2) + i11 +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, int i1, int i2) {

        int i12=-29, i13=-192, i14=-11, i15=35289, i16=-3891, i17=-14, i18=-1, i19=2;
        boolean b1=true;
        float f3=93.901F;
        double d1=67.70114;

        vMeth();
        for (i12 = 208; i12 > 9; --i12) {
            for (i14 = 1; i14 < 8; ++i14) {
                if (b1) continue;
                for (i16 = 1; i16 < 2; ++i16) {
                    i2 += (i16 ^ Test.instanceCount);
                    i2 += i16;
                    i13 *= (int)Test.instanceCount;
                    i17 = (int)Test.instanceCount;
                    i13 = (int)Test.instanceCount;
                    f3 += i16;
                }
                for (i18 = 1; i18 < 2; i18++) {
                    i17 &= -4504;
                    Test.iArrFld[i14] += (int)d1;
                    i17 += (int)Test.instanceCount;
                }
            }
        }
        long meth_res = l + i1 + i2 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 + Float.floatToIntBits(f3) + i18
            + i19 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=74, i20=-109, i21=12, i22=-29627, i23=-24502, i24=-10, i25=-4, i26=10;
        boolean b2=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -4072378801236163425L);

        i >>>= ((byFld = (byte)(-iMeth(Test.instanceCount, i, i))) * 7);
        for (i20 = 1; i20 < 301; ++i20) {
            i22 = 1;
            do {
                i21 += i21;
                if (b2) {
                    Test.sFld = (short)-8757;
                } else {
                    i21 -= i;
                    fFld += (i22 * i22);
                    Test.instanceCount = Test.sFld;
                    i21 *= i20;
                }
                for (i23 = 1; i23 < 1; i23 += 3) {
                    i >>= Test.sFld;
                    i21 = i21;
                    switch (((i >>> 1) % 1) + 23) {
                    case 23:
                        i21 = (int)Test.instanceCount;
                        break;
                    }
                    i21 *= (int)Test.instanceCount;
                    Test.instanceCount = i22;
                }
                Test.iArrFld[i20] <<= (int)Test.instanceCount;
                dArrFld[i20 + 1] *= i23;
                i24 *= i21;
                switch (((i22 % 10) * 5) + 50) {
                case 69:
                    Test.sFld *= (short)Test.instanceCount;
                    break;
                case 71:
                    i21 -= (int)Test.instanceCount;
                    i24 &= (int)Test.instanceCount;
                    i21 >>= 1;
                    break;
                case 87:
                    Test.instanceCount = -12;
                case 98:
                    Test.iArrFld[i20] *= i21;
                    for (i25 = 1; i25 < 1; ++i25) {
                        i21 += i25;
                        Test.iArrFld[i20 + 1] = i26;
                    }
                    break;
                case 73:
                    i21 += i22;
                case 78:
                    lArr1[i20 + 1] += (long)-86.631F;
                case 89:
                    Test.instanceCount += (22 + (i22 * i22));
                    break;
                case 54:
                    i26 += i21;
                    break;
                case 51:
                    i21 |= Test.sFld;
                case 82:
                    i += byFld;
                    break;
                default:
                    Test.iArrFld[i20] *= -14;
                }
            } while (++i22 < 84);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
