package tests.javafuzzer3459;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-580516976653613209L;
    public static float fFld=0.739F;
    public static byte byFld=1;
    public static volatile short sFld=4700;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-122);
        FuzzerUtils.init(Test.iArrFld, -16182);
        FuzzerUtils.init(Test.lArrFld, -1694614117L);
        FuzzerUtils.init(Test.fArrFld, 2.493F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s1, float f2) {

        int i19=-7, i20=8, i21=121, i22=2, i23=-40959, i24=-23210;
        double d1=34.57318, d2=34.42242;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.275F);

        i19 <<= i19;
        for (i20 = 14; i20 < 242; ++i20) {
            for (d1 = 7; 1 < d1; d1 -= 2) {
                switch (((i19 >>> 1) % 8) + 67) {
                case 67:
                    Test.lArrFld[(int)(d1 + 1)] = s1;
                    Test.lArrFld[i20 + 1] = i22;
                    i19 += (-238 + (d1 * d1));
                    break;
                case 68:
                    for (i23 = 1; i23 < 3; ++i23) {
                        f2 += i23;
                        d2 += i24;
                        b = b;
                    }
                    Test.lArrFld[(int)(d1 - 1)] += -22632;
                    i21 = i21;
                case 69:
                    Test.iArrFld[(int)(d1 + 1)] = i22;
                    fArr[(int)(d1 + 1)] -= i22;
                case 70:
                    Test.instanceCount /= (Test.byFld | 1);
                    break;
                case 71:
                    f2 += i21;
                    break;
                case 72:
                    i24 -= i21;
                case 73:
                    Test.instanceCount += (long)(((d1 * Test.instanceCount) + i22) - i23);
                    break;
                case 74:
                }
            }
        }
        vMeth2_check_sum += s1 + Float.floatToIntBits(f2) + i19 + i20 + i21 + Double.doubleToLongBits(d1) + i22 + i23 +
            i24 + Double.doubleToLongBits(d2) + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i12, int i13, long l) {

        int i14=183, i15=28046, i16=14, i17=2, i18=65342, i25=-61435;
        float f1=-2.331F;
        double d=75.103982;
        long l1=-52318L;

        for (i14 = 7; i14 < 231; ++i14) {
            f1 += i14;
            for (i16 = i14; i16 < 7; i16++) {
                Test.iArrFld[i14 + 1] = (~Math.max(i14, --i15));
                for (d = 1; d > 1; --d) {
                    i17 = Math.max(i18 - (i12 + i17), (int)((++i12) + (i13 + Test.instanceCount)));
                    try {
                        i12 = (Test.iArrFld[(int)(d)] % i14);
                        i18 = (44021 / i14);
                        i15 = (Test.iArrFld[i16 + 1] % -162);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i16 - 1] -= (int)(((++i12) - (l - i14)) - i15);
                    i12 <<= (int)Test.instanceCount;
                    i15 -= (int)(Test.lArrFld[i14 - 1]++);
                }
                Test.iArrFld[i14] -= i13;
                vMeth2(Test.sFld, Test.fFld);
                for (l1 = 1; l1 < 1; l1++) {
                    Test.instanceCount = -6018632180482374392L;
                }
                i15 = (int)l;
            }
        }
        vMeth1_check_sum += i12 + i13 + l + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 +
            Double.doubleToLongBits(d) + i18 + l1 + i25;
    }

    public static void vMeth(int i7) {

        int i8=-14, i9=-9, i10=-56, i11=3675, i26=39632, i27=-7;
        double d3=0.53914;

        for (i8 = 3; 292 > i8; ++i8) {
            Test.byArrFld[i8 - 1] = (byte)(((Test.instanceCount *= (long)32.572F) * (Test.instanceCount % -16052)) +
                (--i7));
        }
        for (i10 = 2; 163 > i10; ++i10) {
            i11 = Integer.reverseBytes(i10);
            vMeth1(i8, i7, 1430970374L);
            i7 -= (int)Test.fFld;
            for (i26 = 1; i26 < 10; i26 += 3) {
                Test.iArrFld[i26] -= i26;
            }
            i11 -= (int)Test.instanceCount;
            Test.fFld -= Test.fFld;
        }
        Test.fArrFld = Test.fArrFld;
        for (long l2 : Test.lArrFld) {
            i9 <<= (int)Test.instanceCount;
            d3 *= i26;
            l2 += i10;
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i26 + i27 + Double.doubleToLongBits(d3);
    }

    public void mainTest(String[] strArr1) {

        int i=213, i1=7, i2=-58, i3=-2, i4=2, i5=-40, i6=-61917, i29=6, i30=37197, i31=44009, iArr[][]=new int[N][N];
        float f=1.516F;
        short s=-24209;
        boolean b1=true, bArr[][]=new boolean[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(dArr, 69.28620);
        FuzzerUtils.init(bArr, false);

        i &= (++i);
        for (i1 = 4; i1 < 266; ++i1) {
            try {
                iArr[i1][i1 + 1] = (i % 49);
                i = (i2 / i);
                i3 = (-202 / i1);
            } catch (ArithmeticException a_e) {}
            for (f = 4; f < 96; f++) {
                for (i5 = 1; i5 < 2; ++i5) {
                    i4 = (--s);
                    Test.fFld += (i5 - s);
                }
                vMeth(i3);
                i6 += (int)((long)f ^ Test.instanceCount);
                switch ((i1 % 2) + 87) {
                case 87:
                    i4 -= (int)Test.instanceCount;
                case 88:
                    for (i29 = i1; i29 < 2; ++i29) {
                        i2 *= i3;
                        i3 <<= -29530;
                        i30 >>= i1;
                        Test.instanceCount -= i6;
                        i2 = s;
                        iArr[i29 - 1][(int)(f + 1)] -= (int)Test.instanceCount;
                        i30 %= (int)(Test.instanceCount | 1);
                        switch (((i1 % 9) * 5) + 54) {
                        case 75:
                            dArr[(int)(f - 1)] += i3;
                            i6 += (int)(-1L + (i29 * i29));
                            i3 += (i29 - i5);
                            break;
                        case 99:
                            i2 += i29;
                            break;
                        case 83:
                            Test.instanceCount += i5;
                            break;
                        case 87:
                            i = -1;
                            Test.byFld <<= (byte)Test.instanceCount;
                            if (b1) {
                                iArr[i1][i1] += (int)Test.instanceCount;
                                Test.instanceCount >>= i29;
                            } else if (b1) {
                                Test.sFld *= (short)i30;
                            } else if (true) {
                                try {
                                    i30 = (i31 % 37829);
                                    i3 = (-673 / i4);
                                    i = (i4 % 241);
                                } catch (ArithmeticException a_e) {}
                            } else {
                                i4 *= Test.sFld;
                            }
                            break;
                        case 74:
                            iArr[(int)(f)][i1 + 1] += Test.byFld;
                            break;
                        case 60:
                            i4 += i6;
                            break;
                        case 77:
                            bArr[(int)(f - 1)][i29 + 1] = true;
                            break;
                        case 95:
                            Test.instanceCount = (long)-76.42198;
                            break;
                        case 63:
                            i4 += (((i29 * i5) + Test.instanceCount) - i31);
                            break;
                        default:
                            Test.fFld *= i29;
                        }
                    }
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
