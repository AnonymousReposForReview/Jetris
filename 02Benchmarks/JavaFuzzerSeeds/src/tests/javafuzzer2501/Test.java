package tests.javafuzzer2501;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:38:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=46927L;
    public static int iFld=14;
    public static double dFld=-111.52173;
    public static byte byFld=32;
    public volatile short sFld=-23783;
    public static float fFld=0.731F;
    public boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.180F);
        FuzzerUtils.init(Test.iArrFld, 210);
        FuzzerUtils.init(Test.lArrFld, 18604L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        long l=2131259902L;
        int i8=-117, i9=-244, i10=-28013, i11=4, i12=-40, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 7);

        l = 1;
        while (++l < 387) {
            Test.iFld = -46495;
            Test.fArrFld[(int)(l - 1)] -= Test.iFld;
            switch (((Test.iFld >>> 1) % 3) + 77) {
            case 77:
                if (Test.iFld != 0) {
                }
                for (i8 = 1; i8 < 4; i8++) {
                    i9 *= (int)14L;
                }
                i10 = 1;
                while (++i10 < 4) {
                    Test.iFld ^= Test.iFld;
                    for (i11 = 1; i11 < 1; ++i11) {
                        Test.iFld |= i11;
                        Test.instanceCount >>= l;
                        if (i9 != 0) {
                        }
                    }
                    i9 >>= (int)l;
                    iArr[i10 - 1][(int)(l + 1)] = i10;
                }
                break;
            case 78:
                i9 += (int)l;
                break;
            case 79:
                if (false) break;
                break;
            default:
                iArr[(int)(l)][(int)(l)] += (int)Test.instanceCount;
            }
        }
        long meth_res = l + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(int i6) {

        int i7=6, i13=-151, i14=-167, i15=-17580, i16=-52723;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-93);

        i7 = 385;
        do {
            lMeth1();
            Test.dFld = Test.instanceCount;
            Test.iFld = i6;
            Test.iFld *= i7;
        } while (--i7 > 0);
        Test.instanceCount >>= -2556692381L;
        byArr[(i7 >>> 1) % N] -= Test.byFld;
        i13 = 1;
        do {
            i14 = 1;
            do {
                i6 <<= sFld;
                Test.instanceCount <<= i13;
                i6 = i6;
                for (i15 = 1; 1 > i15; ++i15) {
                    i6 = i14;
                    try {
                        Test.iFld = (27952 / i14);
                        i6 = (42770 % i7);
                        i6 = (-54538 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                }
            } while (++i14 < 10);
        } while (++i13 < 166);
        long meth_res = i6 + i7 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i1) {

        int i2=-217, i3=7, i4=12, i5=115, i17=-5288;
        float f=-2.782F;
        long l1=454756157L;

        for (i2 = 18; i2 < 311; i2++) {
            for (i4 = 1; i4 < 6; ++i4) {
                i5 -= (int)lMeth(i2);
                Test.instanceCount = Test.iFld;
            }
            Test.dFld = i2;
            switch (((i2 % 1) * 5) + 87) {
            case 92:
                f += i2;
                break;
            }
            Test.instanceCount *= i1;
            i1 = Test.iFld;
            f = -12L;
            Test.iFld += (i2 * i2);
            for (l1 = 6; l1 > 1; l1--) {
                Test.iArrFld[(int)(l1)] = i17;
            }
            Test.instanceCount = 13L;
            i17 = i17;
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + l1 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=-29641, i18=6074, i19=-129, i20=6, i21=-12, i22=12, i23=11, i24=12, i25=-179, i26=2, iArr1[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(sArr, (short)-14217);

        if (bFld) {
            i *= i;
            vMeth(i);
            for (i18 = 10; i18 < 180; ++i18) {
                for (i20 = i18; i20 < 148; ++i20) {
                    for (i22 = 1; i22 > 1; i22 -= 2) {
                        Test.iFld >>= -18;
                        Test.iFld = 0;
                        i23 = i21;
                    }
                    Test.iArrFld[i18 + 1] = (int)Test.dFld;
                    i = -223;
                    Test.iFld = i;
                    i24 = 1;
                    do {
                        Test.byFld -= (byte)Test.instanceCount;
                        iArr1[i24] = (int)Test.fFld;
                    } while (++i24 < 1);
                }
                Test.fFld = i;
                i23 = -14;
                i19 += (i18 * i18);
                for (i25 = 5; i25 < 148; ++i25) {
                    iArr1[i25 - 1] *= (int)Test.fFld;
                    sArr[i25] = sFld;
                    Test.fFld += i22;
                    if (bFld) break;
                    Test.iFld += (i25 + i20);
                    Test.fFld = Test.instanceCount;
                    Test.instanceCount ^= i25;
                    Test.fFld += (((i25 * i24) + i22) - i26);
                }
                Test.lArrFld = Test.lArrFld;
                i19 -= (int)Test.fFld;
                i23 %= (int)((long)(Test.fFld) | 1);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
