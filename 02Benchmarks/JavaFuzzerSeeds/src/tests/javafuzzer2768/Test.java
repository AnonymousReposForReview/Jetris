package tests.javafuzzer2768;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:56:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-180L;
    public int iFld=-10;
    public static volatile short sFld=-30404;
    public static double dFld=-1.63714;
    public static boolean bFld=false;
    public static byte byFld=66;
    public static float fFld=51.1012F;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static float fArrFld[][]=new float[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, 2.987F);
        FuzzerUtils.init(Test.iArrFld, 59707);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b1, long l) {

        int i6=-141, i7=64201, i8=48, i9=-56, i10=2, i11=-64590;
        byte by=-35;
        float f1=107.798F;

        for (i6 = 166; i6 > 8; i6 -= 2) {
            i7 >>= 165;
            for (i8 = i6; i8 < 19; i8++) {
                by += (byte)Test.instanceCount;
                i9 += (i8 * i8);
                l += (((i8 * i8) + l) - i6);
                l += (long)2.828F;
            }
            Test.dFld = Test.dFld;
            l >>= i6;
            i10 = 1;
            do {
                i11 = 1;
                do {
                    i9 += (int)2.88F;
                    i9 = (int)f1;
                    i7 += i11;
                    if (b1) break;
                } while (++i11 < 1);
            } while (++i10 < 19);
        }
        long meth_res = (b1 ? 1 : 0) + l + i6 + i7 + i8 + i9 + by + i10 + i11 + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i5=51896, i12=5, i13=49074, i14=-82, i15=-7, i16=-14422, i17=-14686, i18=-10;
        float f2=15.434F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2457242017L);

        lArr[(i5 >>> 1) % N] = iMeth(true, Test.instanceCount);
        for (i12 = 9; i12 < 256; ++i12) {
            for (i14 = 1; i14 < 7; ++i14) {
                switch (((i14 % 1) * 5) + 25) {
                case 29:
                    for (i16 = 2; i16 > i12; i16--) {
                        switch (((i16 % 2) * 5) + 26) {
                        case 29:
                            Test.instanceCount = 31731;
                            break;
                        case 30:
                            f2 *= i14;
                            Test.instanceCount = i18;
                            break;
                        }
                        Test.bArrFld[i16][i16 + 1] = Test.bFld;
                        lArr = lArr;
                        Test.iArrFld[i16] = Test.iArrFld[i14 - 1];
                        Test.dFld *= 114.130383;
                    }
                    Test.iArrFld[i14][i12 + 1] = i14;
                    break;
                default:
                    i13 += (int)f2;
                }
            }
        }
        long meth_res = i5 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 +
            FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i4=-214, i19=-4, i20=211;
        float f=-2.882F, f3=99.941F;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-23163);

        i4 = (int)(Math.abs(i4) * ((f - i4) - (i4 * Test.dFld)));
        b = ((Test.instanceCount * Test.dFld) != (Test.iArrFld[(i4 >>> 1) % N][(49589 >>> 1) % N] - fMeth()));
        for (short s : sArr) {
            i4 = -14;
            i4 >>= i4;
            i4 = i4;
            f3 = 1;
            while (++f3 < 4) {
                Test.byFld = (byte)i4;
                i4 <<= i4;
                for (i19 = 1; i19 > 1; --i19) {
                    i20 += (i19 - i4);
                }
                Test.instanceCount += i20;
                Test.iArrFld[(int)(f3)][(int)(f3)] -= (int)5.75469;
                i4 += (int)(f3 * Test.instanceCount);
                Test.instanceCount += (long)(f3 * f3);
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + (b ? 1 : 0) + Float.floatToIntBits(f3) + i19 + i20 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=185, i2=-239, i3=64553, i21=19;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 2.63609);

        if (Test.bArrFld[((iFld / (iFld | 1)) >>> 1) % N][((26515 & (-Math.min(iFld, iFld))) >>> 1) % N]) {
            iFld = -160;
        }
        for (i = 290; i > 4; i--) {
            i1 += (int)(Test.fArrFld[(i >>> 1) % N][i] + Short.reverseBytes((short)(Test.sFld--)));
            for (i2 = 1; i2 < 88; i2++) {
                vMeth();
                iFld >>>= i2;
                iFld += (int)Test.fFld;
                Test.iArrFld[i + 1][i2] = (int)Test.fFld;
                Test.fFld = -101L;
                Test.fArrFld[i + 1][i] -= i3;
                i21 = 1;
                do {
                    if (Test.bFld) {
                        iFld >>= -21930;
                        Test.iArrFld[i2][i2 + 1] -= 53456;
                        i1 += (i21 - Test.byFld);
                        iFld -= (int)Test.instanceCount;
                    } else {
                        Test.bArrFld[i2 + 1][i2] = Test.bFld;
                        Test.instanceCount = i21;
                    }
                    Test.iArrFld[i21 - 1][i21 - 1] <<= (int)Test.instanceCount;
                    Test.dFld -= 3;
                    switch ((i % 2) + 15) {
                    case 15:
                        Test.fArrFld[i - 1][i2 + 1] -= 51.821F;
                        Test.instanceCount += (19410 + (i21 * i21));
                        iFld -= iFld;
                    case 16:
                        dArr[i][i21 - 1] -= i21;
                        Test.fArrFld[i21 - 1][i21] = Test.fFld;
                        iFld += i3;
                        break;
                    }
                    i3 >>= (int)Test.instanceCount;
                    Test.instanceCount = iFld;
                } while (++i21 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
