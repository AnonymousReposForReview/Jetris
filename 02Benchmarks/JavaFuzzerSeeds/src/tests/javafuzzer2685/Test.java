package tests.javafuzzer2685;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:41:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=765176741L;
    public volatile float fFld=-3.265F;
    public static int iFld=1;
    public double dFld=-38.123555;
    public static long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1493017885L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {


        Test.iFld = Test.iFld;
        vMeth2_check_sum += 0;
    }

    public static void vMeth1(float f, int i) {

        double d=-2.79250;
        int i1=5, i2=104, i3=11, i4=242, i5=-1, i6=50737, i7=50, iArr[][]=new int[N][N];
        byte by1=114;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -208);
        FuzzerUtils.init(fArr, 0.288F);

        for (d = 232; d > 6; d -= 3) {
            f *= by1;
            Test.iFld >>>= (int)Test.lArrFld[(int)(d)];
            i2 = 1;
            while (++i2 < 21) {
                for (i3 = 1; 1 > i3; ++i3) {
                    vMeth2();
                }
                for (i5 = 1; i5 < 1; i5++) {
                    f += (i5 * Test.iFld);
                    Test.lArrFld[i5 - 1] = Test.instanceCount;
                    i1 = i;
                    Test.instanceCount = 23649L;
                    switch (((-25970 >>> 1) % 8) + 23) {
                    case 23:
                        i6 -= -13;
                    case 24:
                        try {
                            i6 = (825653683 / iArr[i5][i5 + 1]);
                            i4 = (i4 % iArr[i2 + 1][i5 + 1]);
                            i4 = (i6 / -1023774727);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld <<= i7;
                    case 25:
                        i = (int)Test.instanceCount;
                        break;
                    case 26:
                        i = (int)-2659362458L;
                        break;
                    case 27:
                        i4 = i7;
                    case 28:
                        f += 0;
                    case 29:
                        if (b) continue;
                        break;
                    case 30:
                        fArr[(int)(d)] *= i7;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i1 + by1 + i2 + i3 + i4 + i5 +
            i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(long l, long l1, byte by) {

        long l2=3579018893L;
        int i8=9, i9=-155, i10=70;
        boolean b1=false;
        double d1=-114.45350;
        short s=3186;

        fFld += Test.iFld;
        vMeth1(57.748F, Test.iFld);
        try {
            Test.iFld = -190;
            for (l2 = 2; l2 < 262; ++l2) {
                i8 >>= Test.iFld;
                switch ((((i8 >>> 1) % 2) * 5) + 49) {
                case 52:
                case 50:
                    if (b1) break;
                    Test.iFld <<= (int)-28190L;
                    for (i9 = 1; i9 < 6; i9++) {
                        l1 -= (long)fFld;
                        l1 -= i9;
                        i8 += i9;
                        d1 *= l1;
                        s -= (short)i10;
                    }
                    break;
                default:
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            l1 += i10;
        }
        vMeth_check_sum += l + l1 + by + l2 + i8 + (b1 ? 1 : 0) + i9 + i10 + Double.doubleToLongBits(d1) + s;
    }

    public void mainTest(String[] strArr1) {

        byte by2=-47;
        int i12=-11, i13=-215, i14=-5, i15=45176, i16=-31, i17=-38927, i18=-11, i19=-135, i20=-28726;
        short s1=-27973;

        vMeth(16288L, Test.instanceCount, by2);
        iArrFld[(13 >>> 1) % N] *= 29310;
        iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        for (int i11 : iArrFld) {
            for (i12 = 2; i12 < 63; i12++) {
                Test.iFld += i11;
                fFld -= fFld;
                Test.instanceCount += (long)(53.891F + (i12 * i12));
                i11 += (i12 ^ Test.instanceCount);
                i13 += i12;
                Test.instanceCount = (long)-47.391F;
            }
            i14 = 1;
            while (++i14 < 63) {
                Test.iFld <<= -12;
                Test.iFld += (i14 + i13);
                if (true) break;
                for (i15 = 1; i15 < 1; ++i15) {
                    Test.instanceCount *= i16;
                }
                Test.lArrFld = Test.lArrFld;
                fFld -= 199;
                i17 = 1;
                while (++i17 < 1) {
                    Test.lArrFld[i17] = -620;
                }
                iArrFld[i14 + 1] *= i15;
                s1 *= (short)i15;
            }
            i18 = 1;
            while (++i18 < 63) {
                Test.iFld ^= i14;
                for (i19 = 1; i19 < 1; i19++) {
                    Test.iFld /= (int)(i19 | 1);
                    Test.lArrFld[i18 - 1] >>= Test.instanceCount;
                }
            }
            dFld += i19;
            i20 <<= i14;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
