package tests.javafuzzer2672;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:25:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8456274785009600613L;
    public static double dFld=86.89600;
    public static byte byFld=-101;
    public static int iArrFld[][]=new int[N][N];
    public short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 142);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        float f=-2.912F;
        int i6=1757, i7=-6, i8=-4, i9=-12, i10=7;
        byte by=-9;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4056961978L);

        i4 = 53;
        f += i5;
        i6 = 1;
        do {
            i3 += (i6 ^ Test.instanceCount);
            switch (((i6 % 7) * 5) + 116) {
            case 150:
                i5 -= i4;
                for (i7 = 1; 12 > i7; i7++) {
                    f *= f;
                    if (i4 != 0) {
                        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + by + i10 +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    i8 >>= i3;
                    lArr[i6 - 1] >>= Test.instanceCount;
                    Test.iArrFld[i6][i7 - 1] -= -18831;
                }
                break;
            case 134:
                i9 = 12;
                do {
                    Test.dFld += 13;
                    by -= (byte)i10;
                } while (--i9 > 0);
                break;
            case 119:
            case 146:
                i3 = i8;
            case 123:
                i5 = i9;
                break;
            case 129:
                i5 += i6;
                break;
            case 151:
                i3 -= (int)Test.dFld;
                break;
            default:
                i10 = i7;
            }
        } while (++i6 < 134);
        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + by + i10 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(double d) {

        int i1=240, i2=-90, i11=236, i12=-41376, i13=41079;
        float f1=-118.547F, f2=0.446F;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 0.37101);

        for (i1 = 6; i1 < 122; ++i1) {
            i2 += (int)d;
        }
        vMeth2(i2, i2, i11);
        for (i12 = 4; i12 < 263; i12++) {
            i13 += (((i12 * i1) + i11) - i2);
            switch (((i12 % 7) * 5) + 66) {
            case 95:
                i13 <<= i1;
                f1 = 1;
                while (++f1 < 6) {
                    Test.instanceCount += (long)(f1 - i11);
                    f2 *= Test.byFld;
                }
                Test.instanceCount = i11;
            case 86:
                i2 <<= (int)Test.instanceCount;
                i13 += i12;
                f2 -= f1;
                i2 = -15401;
                break;
            case 78:
                f2 += i12;
                break;
            case 90:
                i11 = (int)Test.instanceCount;
                break;
            case 92:
                dArr[i12] = dArr[i12 - 1];
                break;
            case 93:
                i2 -= (int)Test.instanceCount;
                break;
            case 77:
                Test.iArrFld[i12 + 1][i12] = i12;
                break;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i1 + i2 + i11 + i12 + i13 + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, long l) {

        int i14=10, i15=-47470, i16=-7, i17=170, i18=-138, i19=-204;
        float f3=-1.14F;
        boolean b=true;

        vMeth1(0.116546);
        for (i14 = 1; 148 > i14; ++i14) {
            try {
                i = (i / Test.iArrFld[i14][i14]);
                i15 = (i % i14);
                i = (-41480 % i14);
            } catch (ArithmeticException a_e) {}
            if (b) {
                for (i16 = 1; i16 < 11; i16++) {
                    Test.instanceCount += i16;
                    for (i18 = 1; i18 < 2; ++i18) {
                        Test.instanceCount >>= l;
                        i17 -= i;
                        switch (((i18 % 2) * 5) + 47) {
                        case 53:
                            i17 += i18;
                            i19 += (i18 * l);
                            i >>= -98;
                            Test.instanceCount -= (long)f3;
                        case 51:
                        default:
                            l = 18990;
                        }
                    }
                }
            } else {
                i19 /= (int)(i17 | 1);
            }
        }
        vMeth_check_sum += i + l + i14 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f3) + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i20=134, i21=5, i22=-10, i23=0, i24=6, i25=142, i26=49939, i27=-5821, i28=-50544, i29=-35, i30=6, i31=-11,
            i32=143, i33=-42919;
        boolean b1=false;
        float f4=57.169F;

        vMeth(i20, Test.instanceCount);
        i20 += i20;
        for (short s : sArrFld) {
            for (i21 = 1; i21 < 63; ++i21) {
                if (b1) {
                    try {
                        i20 = (i21 / 1017895499);
                        i20 = (i20 / i20);
                        i22 = (i22 / i22);
                    } catch (ArithmeticException a_e) {}
                    i22 = (int)Test.instanceCount;
                } else if (b1) {
                    Test.iArrFld[i21 - 1][i21] *= (int)Test.instanceCount;
                    Test.iArrFld[i21][i21 + 1] = i22;
                } else {
                    for (i23 = 2; i23 > 1; --i23) {
                        lArrFld[i21] = i23;
                        i20 = i20;
                        i25 += (int)f4;
                        i25 = (int)Test.instanceCount;
                        fArrFld = fArrFld;
                        Test.iArrFld[i21 - 1][i21 - 1] >>= -20281;
                        i24 += i25;
                    }
                }
            }
            for (i26 = 3; i26 < 63; i26++) {
                i25 -= i23;
                i22 *= (int)f4;
                Test.iArrFld[i26][i26 + 1] >>>= -47836;
            }
        }
        for (i28 = 10; i28 < 244; ++i28) {
            for (i30 = 3; i30 < 107; ++i30) {
                i20 += 16293;
                for (i32 = 1; i32 < 2; ++i32) {
                    switch ((i30 % 2) + 34) {
                    case 34:
                        Test.byFld >>= (byte)i21;
                        break;
                    case 35:
                        Test.iArrFld[i32][i32] *= (int)Test.instanceCount;
                        i25 *= (int)-976870651L;
                        Test.iArrFld[i32 - 1][i30] = i23;
                        break;
                    default:
                        f4 -= -4;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
