package tests.javafuzzer78;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:01:52 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=38600L;
    public static int iFld=-7;
    public static boolean bFld=false;
    public static byte byFld=-13;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -253704965974190151L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, int i3) {

        long l=-13L, lArr[]=new long[N];
        int i4=-44600, i5=171, i6=-167, i7=20531, i8=13;
        double d=62.60398, dArr[]=new double[N];

        FuzzerUtils.init(lArr, -59L);
        FuzzerUtils.init(dArr, 1.71028);

        Test.bFld = Test.bFld;
        lArr[(i3 >>> 1) % N] |= Test.instanceCount;
        for (l = 4; l < 152; l++) {
            i4 += (int)(((l * i3) + i4) - i3);
            i2 = 3;
            switch (((i3 >>> 1) % 1) + 122) {
            case 122:
                d = i2;
            default:
                i2 = Test.iFld;
            }
            if (i4 != 0) {
            }
            for (i5 = 11; i5 > 1; i5--) {
                for (i7 = (int)(l); i7 < 2; ++i7) {
                    i3 -= (int)Test.instanceCount;
                    dArr[(int)(l)] = i5;
                    i3 *= i8;
                    i6 += i5;
                }
            }
        }
        long meth_res = i2 + i3 + l + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(short s) {

        double d1=-122.71638;
        int i10=-43, i11=-134, iArr1[]=new int[N];
        float f1=-1.52F;

        FuzzerUtils.init(iArr1, 14);

        Test.bFld = (((Test.iFld--) != (-703866613206485654L * lMeth(Test.iFld, Test.iFld))) || true);
        for (int i9 : iArr1) {
            Test.lArrFld[(i9 >>> 1) % N] = 11L;
            d1 += Test.iFld;
            Test.lArrFld[(Test.iFld >>> 1) % N] = i9;
            for (i10 = 1; i10 < 4; i10++) {
                Test.bFld = true;
                iArr1[i10 - 1] = i9;
                iArr1[i10 + 1] = Test.iFld;
                f1 = 1;
                do {
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += s + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[i10] >>>= 46257;
                    Test.instanceCount = i10;
                    d1 -= 168;
                    i11 = Test.byFld;
                } while (++f1 < 2);
            }
        }
        vMeth1_check_sum += s + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1) {

        short s1=-27757;
        int i12=2, i13=-209, i14=-49011, i15=-59101, i16=72, i17=165, i18=102, i19=55523, i20=8, iArr2[][]=new
            int[N][N];
        float f2=-67.657F;

        FuzzerUtils.init(iArr2, 27686);

        vMeth1(s1);
        Test.iFld *= 59;
        Test.iFld = i1;
        for (i12 = 13; i12 < 268; i12++) {
            iArr2[i12][i12 + 1] -= i14;
            for (i15 = 1; i15 < 6; i15++) {
                if (Test.bFld) continue;
                s1 -= (short)Test.instanceCount;
                iArr2[i15 + 1][i12] = i14;
            }
            for (i17 = 1; i17 < 6; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 -= i14;
                    iArr2[i19][i19 - 1] = (int)Test.instanceCount;
                    f2 = i17;
                    i18 = 0;
                }
            }
        }
        vMeth_check_sum += i1 + s1 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f=1.280F, f3=23.973F;
        int i=-176, i21=-60, i22=14, i23=4, i24=-29445, i25=31232, i26=-54, iArr[]=new int[N];
        double d2=-10.8483;
        long l1=1689182283L;

        FuzzerUtils.init(iArr, -85);

        Test.iFld *= (int)Test.instanceCount;
        f = iArr[(Test.iFld >>> 1) % N];
        i = 1;
        while (++i < 325) {
            vMeth(-1);
        }
        for (d2 = 16; 267 > d2; d2++) {
            i21 *= -64588;
            i21 = i;
            i21 -= (int)-3704965212L;
            iArr = FuzzerUtils.int1array(N, (int)53374);
        }
        for (l1 = 7; l1 < 139; l1++) {
            Test.iFld = (int)Test.instanceCount;
            for (i23 = 7; 190 > i23; ++i23) {
                switch ((int)((l1 % 2) + 109)) {
                case 109:
                    i21 <<= i21;
                    break;
                case 110:
                    switch ((int)((l1 % 1) + 55)) {
                    case 55:
                        iArr[i23 + 1] = i23;
                        i22 += (57654 + (i23 * i23));
                        Test.instanceCount = Test.instanceCount;
                        break;
                    }
                    i21 -= i24;
                    Test.lArrFld[(int)(l1 + 1)] >>= Test.instanceCount;
                    if (Test.bFld) break;
                    break;
                default:
                    i21 = (int)d2;
                }
                Test.instanceCount += (i23 | i24);
                Test.iFld = (int)f3;
                for (i25 = i23; 2 > i25; ++i25) {
                    short s2=-16468;
                    i21 = i25;
                    iArr = iArr;
                    Test.iFld = (int)d2;
                    s2 -= (short)i25;
                    iArr[i25 - 1] += i22;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
