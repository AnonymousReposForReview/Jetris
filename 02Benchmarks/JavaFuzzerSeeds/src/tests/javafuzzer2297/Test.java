package tests.javafuzzer2297;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:38:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static float fFld=78.449F;
    public static short sFld=1302;
    public static byte byFld=47;
    public boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -37L);
        FuzzerUtils.init(Test.sArrFld, (short)4552);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, short s, int i7) {

        boolean b=false;
        int i8=-2329, i9=-462, i10=48414, i11=144, i12=-16, i13=-158, iArr[]=new int[N];
        byte by=19;

        FuzzerUtils.init(iArr, 65360);

        i7 >>>= i7;
        b = false;
        switch (((9 >>> 1) % 7) + 19) {
        case 19:
        case 20:
            for (i8 = 7; 155 > i8; ++i8) {
                if (b) continue;
                for (i10 = 11; i10 > 1; --i10) {
                    switch ((i8 % 1) + 53) {
                    case 53:
                        for (i12 = 2; i12 > 1; i12 -= 3) {
                            double d=-1.38170;
                            switch (((i10 >>> 1) % 2) + 42) {
                            case 42:
                                Test.instanceCount >>= s;
                                d = i9;
                                switch (((i12 % 1) * 5) + 53) {
                                case 54:
                                    Test.instanceCount += (((i12 * by) + i8) - i13);
                                    i6 ^= (int)Test.instanceCount;
                                }
                                if (b) break;
                                break;
                            case 43:
                            default:
                                iArr[i12] = i11;
                            }
                        }
                        break;
                    default:
                        i13 >>= 2;
                    }
                }
            }
            break;
        case 21:
            Test.lArrFld[(i7 >>> 1) % N] *= i13;
            break;
        case 22:
            Test.instanceCount = i6;
            break;
        case 23:
            by |= (byte)i8;
        case 24:
            Test.sArrFld = Test.sArrFld;
        case 25:
            Test.instanceCount = i9;
        }
        long meth_res = i6 + s + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, long l2) {

        int i3=54192, i4=108, i5=-203, i14=13, i15=12, iArr1[]=new int[N];
        long l3=3129654360L, lArr[]=new long[N];
        short s1=-28272;
        double d1=-91.116900;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -1L);
        FuzzerUtils.init(byArr, (byte)-85);
        FuzzerUtils.init(iArr1, 76);

        for (i3 = 2; i3 < 355; i3++) {
            for (l3 = 1; l3 < 5; l3++) {
                i4 = (int)(17458 + Test.fFld);
                Test.instanceCount ^= (lArr[i3 - 1] + (-l3));
                lArr[i3] += (byArr[(int)(l3)] -= (byte)iMeth(i5, s1, i4));
                iArr1[(int)(l3 - 1)] = 13;
                for (i14 = i3; i14 < 2; i14++) {
                    d1 = i2;
                    d1 *= i15;
                    l2 = s1;
                    Test.fFld += (i14 - i2);
                    Test.fFld -= i15;
                    i5 = i5;
                    iArr1[(int)(l3)] = (int)Test.fFld;
                }
            }
            i5 |= -38;
        }
        vMeth_check_sum += i1 + i2 + l2 + i3 + i4 + l3 + i5 + s1 + i14 + i15 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(long l, long l1) {

        int i=217;
        float f=2.124F;

        i = (int)(i + ((f + 11L) - Integer.reverseBytes(i)));
        vMeth(i, i, l);
        vSmallMeth_check_sum += l + l1 + i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i16=132, i17=41930, i18=4, i19=-16654, i20=237, i21=-212, i22=-63645, iArr2[]=new int[N];
        float f1=-2.660F;

        FuzzerUtils.init(iArr2, -135);

        for (int smallinvoc=0; smallinvoc<732; smallinvoc++) vSmallMeth(Test.instanceCount, -3933029555414158961L);
        i16 >>= Test.sFld;
        i16 ^= -800;
        i16 <<= i16;
        f1 = 1;
        do {
            i16 -= i16;
            Test.sFld >>>= (short)i16;
            if (true) {
                i16 <<= i16;
            }
            i16 = i16;
            for (i17 = 7; 162 > i17; ++i17) {
                Test.lArrFld[i17 + 1] += (long)Test.fFld;
                i18 -= i17;
                i16 = i17;
            }
            i18 += (int)f1;
            for (i19 = 4; i19 < 162; i19++) {
                iArr2[i19 - 1] = (int)Test.instanceCount;
                i18 += i16;
                Test.sFld ^= (short)i17;
                for (i21 = 2; i21 > 1; i21--) {
                    i20 += (14 + (i21 * i21));
                    Test.instanceCount /= (i18 | 1);
                    i16 = (int)95.854F;
                    Test.fFld *= i17;
                    Test.instanceCount += Test.instanceCount;
                    i18 = (int)-1425784456L;
                    iArr2[i19 - 1] -= i17;
                    i22 += (int)(5029856199226338070L + (i21 * i21));
                    Test.byFld += (byte)i18;
                }
                bFld = bFld;
            }
        } while (++f1 < 155);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
