package tests.javafuzzer1493;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:19:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48L;
    public static float fFld=-2.958F;
    public volatile short sFld=-36;
    public static double dFld=-1.79897;
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2942710823L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long bMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i12=64862, i13=-39372, i14=-154, iArr1[]=new int[N];
        long l1=-14L;
        float f=112.78F, fArr[]=new float[N];
        double d1=-31.110500;
        boolean b=true;
        byte by=-103;

        FuzzerUtils.init(iArr1, 180);
        FuzzerUtils.init(fArr, 2.881F);

        i12 = 1;
        while (++i12 < 366) {
            Test.lArrFld[i12] += l1;
            for (f = 1; f < 5; ++f) {
                i13 += (int)(f * Test.instanceCount);
                i13 <<= i13;
                i14 = 2;
                while (--i14 > 0) {
                    d1 += d1;
                    i13 = 13;
                    try {
                        i13 = (29841 / iArr1[i14 + 1]);
                        i13 = (i12 / i14);
                        i13 = (iArr1[i14] / i13);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (((i14 * Test.instanceCount) + i13) - Test.instanceCount);
                    fArr = fArr;
                    if (b) continue;
                    i13 >>>= 0;
                    by -= (byte)i13;
                    iArr1[(int)(f)] = (int)-38.156F;
                }
            }
        }
        long meth_res = i12 + l1 + Float.floatToIntBits(f) + i13 + i14 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + by
            + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public short sMeth(long l) {

        int i10=-10, i11=31, i15=23, iArr2[][]=new int[N][N];
        boolean b1=false;
        byte by1=0;

        FuzzerUtils.init(iArr2, 0);

        for (i10 = 5; i10 < 298; ++i10) {
            Test.instanceCount *= (long)fMeth();
            i11 &= (int)l;
            i15 = 1;
            while (++i15 < 6) {
                Test.instanceCount += (long)Test.fFld;
                i11 *= i11;
                switch ((((i11 >>> 1) % 9) * 5) + 85) {
                case 101:
                    Test.bArrFld[i10 + 1] = b1;
                    iArr2[i15][i15 + 1] += (int)l;
                    if (i15 != 0) {
                    }
                    i11 = i11;
                    break;
                case 112:
                    b1 = b1;
                    l += (((i15 * i15) + i10) - i11);
                    i11 += (((i15 * l) + i15) - i10);
                    break;
                case 129:
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 100:
                    i11 -= i10;
                    break;
                case 90:
                    Test.fFld = 247L;
                    break;
                case 93:
                case 92:
                    i11 <<= i11;
                    break;
                case 107:
                    by1 += (byte)(((i15 * i11) + l) - i11);
                case 98:
                    Test.dFld -= i15;
                    break;
                }
            }
        }
        long meth_res = l + i10 + i11 + i15 + (b1 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public boolean bMeth(int i5) {

        int i6=-49137, i7=180, i8=104, i9=-13, i16=77, i17=-7, iArr3[]=new int[N];
        double dArr[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, -2.125976);
        FuzzerUtils.init(iArr3, -9);
        FuzzerUtils.init(fArr1, 10.637F);

        for (double d : dArr) {
            for (i6 = 1; i6 < 4; ++i6) {
                i5 ^= (sFld--);
                for (i8 = 1; i8 < 2; ++i8) {
                    Test.instanceCount += (((i8 * Test.fFld) + i9) - i9);
                    Test.instanceCount -= (Test.lArrFld[i8 - 1] -= sMeth(Test.instanceCount));
                }
                iArr3[i6] -= i6;
                if (false) continue;
                fArr1[i6 + 1] += i7;
                sFld /= (short)(i5 | 1);
            }
            for (i16 = 1; i16 < 4; ++i16) {
                i9 -= i17;
                if (i17 != 0) {
                    return ((int)(i5 + i6 + i7 + i8 + i9 + i16 + i17 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)))) % 2 > 0;
                }
            }
            Test.instanceCount -= sFld;
            i9 *= (int)Test.fFld;
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=35025, i2=120, i3=6193, i4=46255, i18=3132, i19=11, i20=11, i21=67, i22=64, i23=-9, iArr[]=new
            int[N];
        boolean b2=false;
        double d2=-126.15233, dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 250L);
        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(dArr1, 1.36640);

        i = (int)(((++Test.instanceCount) - (i + i)) + Test.fFld);
        for (i1 = 5; i1 < 349; i1++) {
            lArr[i1 - 1] += (iArr[i1 + 1]--);
            for (i3 = i1; i3 < 73; i3 += 3) {
                i <<= 20715;
                if (bMeth(i4) & b2) continue;
                i2 = -151;
                dArr1 = dArr1;
            }
            switch (((i1 % 2) * 5) + 111) {
            case 121:
                i2 -= i4;
                break;
            case 119:
                iArr[i1] >>>= i;
                break;
            default:
                i18 = 1;
                do {
                    i4 = i4;
                    i = i2;
                    Test.fFld += i18;
                } while (++i18 < 73);
                for (d2 = 3; 73 > d2; ++d2) {
                    i2 += i2;
                    i += (int)d2;
                    try {
                        i4 = (-10 / i2);
                        i2 = (-9416 / i3);
                        i = (i4 / i18);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        i20 *= (int)d2;
        i21 = 1;
        while (++i21 < 163) {
            for (i22 = 7; i22 < 154; ++i22) {
                sFld = (short)i;
                Test.instanceCount >>= Test.instanceCount;
                i -= -982;
                switch ((i21 % 9) + 73) {
                case 73:
                    Test.instanceCount += i22;
                    i4 = i20;
                    iArr[i22 - 1] = (int)Test.instanceCount;
                    Test.dFld = Test.instanceCount;
                    break;
                case 74:
                    b2 = true;
                    break;
                case 75:
                    i4 *= (int)Test.fFld;
                case 76:
                    i = (int)Test.instanceCount;
                    break;
                case 77:
                    i2 ^= 56703;
                    break;
                case 78:
                    i19 = i3;
                case 79:
                    i23 *= i1;
                    break;
                case 80:
                    iArr = iArr;
                    break;
                case 81:
                    i += i22;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  sMeth ->  sMeth bMeth mainTest
//DEBUG  fMeth ->  fMeth sMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
