package tests.javafuzzer2512;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:50:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1177345736L;
    public double dFld=-76.121842;
    public static boolean bFld=false;
    public static int iFld=-3;
    public short sFld=20106;
    public static byte byFld=33;
    public static float fFld=49.679F;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.fArrFld, 1.723F);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=57615, i6=-49117, i7=-10, i8=9641, iArr[]=new int[N];
        float f1=-105.490F, f2=1.951F;
        double d=-2.104938;
        byte by=51;
        short s=-30998;

        FuzzerUtils.init(iArr, 60562);

        i5 = 1;
        while (++i5 < 364) {
            Test.instanceCount += (i5 * i5);
            Test.bFld = Test.bFld;
            for (f1 = 1; 5 > f1; ++f1) {
                f2 += i6;
                i6 = -23434;
            }
            iArr[i5 + 1] <<= -810;
            i6 = i6;
            switch ((((-21313 >>> 1) % 2) * 5) + 20) {
            case 26:
                if (Test.bFld) {
                    for (i7 = i5; i7 < 5; ++i7) {
                        i8 += (int)d;
                        if (Test.bFld) {
                            by -= (byte)i5;
                            iArr[i7 + 1] <<= (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            s += (short)(i7 ^ i7);
                        } else if (true) {
                            i6 += (-17472 + (i7 * i7));
                        }
                    }
                } else {
                    i6 >>>= (int)Test.instanceCount;
                    vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i6 + Float.floatToIntBits(f2) + i7 + i8 +
                        Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr);
                    return;
                }
                break;
            case 23:
                i8 >>= (int)Test.instanceCount;
                break;
            default:
            }
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i6 + Float.floatToIntBits(f2) + i7 + i8 +
            Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr);
    }

    public long lMeth1(int i2, int i3, int i4) {

        int i10=0, i11=4, i12=28790, i13=-216, i14=108, iArr1[]=new int[N];
        float f3=0.554F;

        FuzzerUtils.init(iArr1, 214);

        vMeth();
        Test.iFld = (int)Test.instanceCount;
        i4 %= (int)((long)(dFld) | 1);
        i2 -= (int)Test.instanceCount;
        i10 = 1;
        while (++i10 < 339) {
            for (i11 = 5; i11 > 1; i11--) {
                sFld = (short)-219;
                i3 += (i11 * i11);
                try {
                    iArr1[i10 + 1] = (85 / i2);
                    i3 = (192 % i4);
                    i3 = (Test.iFld / -80);
                } catch (ArithmeticException a_e) {}
                for (i13 = 2; i13 > 1; i13--) {
                    switch ((i11 % 2) + 1) {
                    case 1:
                        Test.instanceCount += (i13 * f3);
                        iArr1 = iArr1;
                        i12 += (int)Test.instanceCount;
                        break;
                    case 2:
                        Test.byFld -= (byte)f3;
                        break;
                    default:
                        iArr1[i10 - 1] = (int)Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public long lMeth(int i1) {

        float f=-2.126F;
        int i15=-13, i16=3960, i17=46, i18=-3086, i19=19965, i20=203;

        dFld -= ((Math.abs(i1) * (++i1)) - (i1 -= (int)(f * i1)));
        i1 = (int)lMeth1(Test.iFld, Test.iFld, i1);
        Test.instanceCount += Test.iFld;
        for (i15 = 10; i15 < 266; ++i15) {
            i17 = 1;
            while (++i17 < 6) {
                Test.iFld = -37368;
                sFld >>= (short)i1;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.iFld >>>= i20;
                    i16 += (0 + (i18 * i18));
                    Test.instanceCount -= Test.instanceCount;
                    i20 ^= i1;
                    if (Test.bFld) continue;
                    Test.iArrFld[i17 - 1] = i1;
                    i16 = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + i15 + i16 + i17 + i18 + i19 + i20;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-244, i21=2, i22=6, i23=4, i24=34344, i25=-8315, i26=65271, i27=1, i28=126, i29=-136, i30=-104, i31=7,
            i32=-8803, i33=3, i34=48;
        double d1=-74.90056;
        long lArr[][]=new long[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -12L);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount ^= ((i - lMeth(i)) + Test.iFld);
        for (i21 = 9; 367 > i21; ++i21) {
            lArr[i21][i21 + 1] *= Test.instanceCount;
        }
        for (i23 = 6; i23 < 233; i23++) {
            float f4=2.938F;
            f4 = Test.instanceCount;
            Test.instanceCount += (i23 | i23);
            switch (((i23 % 2) * 5) + 50) {
            case 56:
                for (i25 = 5; i25 < 111; i25++) {
                    try {
                        Test.iArrFld[i23 + 1] = (Test.iArrFld[i23] % i25);
                        Test.iArrFld[i23] = (i25 % Test.iArrFld[i25 - 1]);
                        i = (Test.iArrFld[i23 + 1] % i23);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount &= i27;
                    for (i28 = 1; i28 < 2; i28++) {
                        i24 >>= i27;
                        dFld += sFld;
                        lArr[i23][i28 - 1] += Test.iFld;
                        sFld = (short)i25;
                        lArr[i25][i23 - 1] += sFld;
                        lArr[i28 - 1][i28] += i26;
                    }
                }
                i24 >>= i24;
                Test.fArrFld[i23 - 1] -= Test.byFld;
                break;
            case 52:
                Test.iArrFld[i23 + 1] += i21;
                break;
            }
            Test.bFld = Test.bFld;
        }
        bArr[(i24 >>> 1) % N] = Test.bFld;
        for (i30 = 5; i30 < 126; ++i30) {
            Test.instanceCount = Test.instanceCount;
            lArr[i30][i30 - 1] -= Test.instanceCount;
            i *= (int)52201L;
            for (d1 = i30; 207 > d1; ++d1) {
                for (i33 = 1; i33 > 1; --i33) {
                    i26 = (int)Test.fFld;
                    Test.instanceCount += (i33 * i33);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
