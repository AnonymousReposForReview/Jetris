package tests.javafuzzer441;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:57:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=207L;
    public static short sFld=-27625;
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.90617);
        FuzzerUtils.init(Test.fArrFld, 0.248F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f=-22.241F;
        double d=-2.93341;
        int i6=-8, i7=58352, i8=57, i9=-38, iArr[]=new int[N];
        byte by=58;

        FuzzerUtils.init(iArr, 18134);

        f = f;
        for (d = 201; d > 1; --d) {
            i7 = 1;
            do {
                boolean b=false;
                i6 -= (int)Test.instanceCount;
                b = b;
                if (false) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        i9 += (i8 ^ i8);
                        i6 += (i8 + i7);
                        Test.instanceCount = 14332;
                        Test.instanceCount -= (long)1.81F;
                        if (i8 != 0) {
                            vMeth2_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 + i7 + i8 +
                                i9 + by + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        i9 >>= by;
                        Test.instanceCount -= Test.instanceCount;
                        iArr[i7 - 1] = (int)-2094603731L;
                    }
                } else if (true) {
                    by >>= (byte)i8;
                } else if (true) {
                    b = false;
                } else {
                    f += (2.42F + (i7 * i7));
                }
            } while (++i7 < 8);
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2, int i3) {

        int i4=-42, i5=9, i10=30197, i11=-4, i12=-5, iArr1[][]=new int[N][N];
        float f1=2.165F;
        double d1=2.47742, dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -128);
        FuzzerUtils.init(dArr, 2.125952);

        for (i4 = 4; i4 < 140; i4 += 3) {
            vMeth2();
            i2 += (-4684 + (i4 * i4));
        }
        if (true) {
            iArr1[(i5 >>> 1) % N][(i2 >>> 1) % N] = i4;
            iArr1[(i3 >>> 1) % N][(i2 >>> 1) % N] = i4;
            for (i10 = 1; i10 < 295; i10++) {
                i12 = 6;
                while ((i12 -= 2) > 0) {
                    i11 = i3;
                    dArr[i12 - 1] += -83.40028;
                    i5 += (int)f1;
                    iArr1[i12 + 1][i12 + 1] += i11;
                    d1 -= i10;
                    i11 += i12;
                    i3 -= (int)f1;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i1, long l) {

        int i13=38, i14=4, i15=13, i16=115, i17=-2659, i18=96, i19=10, i20=-14;
        float f2=2.386F;
        long l1=-2929847640L;
        double d2=0.102170;

        vMeth1(i1, i1);
        i13 = 1;
        do {
            for (i14 = i13; i14 < 5; i14++) {
                i15 <<= i1;
                f2 += (((i14 * i14) + i14) - i14);
            }
            i1 = (int)l;
            f2 += l1;
            for (i16 = 1; i16 < 5; i16++) {
                Test.dArrFld[i16] = -226;
            }
            i18 = 1;
            do {
                i17 += i18;
            } while (++i18 < 5);
            for (i19 = 5; 1 < i19; i19--) {
                i1 *= -42;
                f2 %= (i13 | 1);
                i20 = (int)d2;
            }
        } while (++i13 < 326);
        vMeth_check_sum += i1 + l + i13 + i14 + i15 + Float.floatToIntBits(f2) + l1 + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        int i=-143, i21=-3, i22=5, i23=-2, i24=-44521, i25=8, i26=48, i27=-52648, i28=3, i29=-3, iArr2[]=new int[N];
        float f3=1.778F, f4=-94.341F;
        boolean b1=false;
        double d3=65.60285;

        FuzzerUtils.init(iArr2, -10);

        i = (int)(((--i) / ((Test.instanceCount * i) | 1)) + (++i));
        Test.sFld -= (short)(((--Test.instanceCount) + (--i)) + (-(i % (Test.sFld | 1))));
        vMeth(i, Test.instanceCount);
        i = (int)f3;
        b1 = b1;
        Test.instanceCount += i;
        for (i21 = 7; i21 < 183; i21 += 3) {
            if (b1) continue;
            for (i23 = 15; i23 < 364; i23++) {
                f3 += (i23 * Test.instanceCount);
            }
            i = (int)Test.instanceCount;
            switch ((((45619 >>> 1) % 6) * 5) + 20) {
            case 32:
                i22 = i;
                for (i25 = 18; i25 < 380; ++i25) {
                    i += (int)Test.instanceCount;
                    i = i;
                    i24 = i;
                    i26 -= (int)f3;
                    switch (((i25 % 2) * 5) + 70) {
                    case 71:
                        i24 -= (int)Test.instanceCount;
                        try {
                            i26 = (i24 / iArr2[i21 - 1]);
                            i26 = (iArr2[i21 - 1] / 14872);
                            i24 = (-87 % i26);
                        } catch (ArithmeticException a_e) {}
                        d3 += i24;
                        Test.instanceCount -= (long)f4;
                        break;
                    case 74:
                        i27 = 1;
                        while (++i27 < 2) {
                            i22 += i23;
                        }
                        iArr2[i25 - 1] = i22;
                        Test.instanceCount = i26;
                        break;
                    default:
                        for (i28 = 2; i28 > 1; --i28) {
                            lArrFld[i28 + 1] = i21;
                            iArr2[i21] = i25;
                        }
                    }
                }
            case 43:
                i22 -= i21;
                break;
            case 49:
                Test.fArrFld[i21] -= i27;
                break;
            case 33:
                Test.instanceCount += (i21 * i21);
                break;
            case 45:
                iArr2[i21 - 1] &= i25;
                break;
            case 26:
                Test.instanceCount = i21;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
