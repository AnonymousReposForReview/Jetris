package tests.javafuzzer2114;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:09:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static double dFld=-1.78660;
    public static int iFld=56952;
    public int iFld1=-245;
    public static float fFld=1.344F;
    public static short sFld=11851;
    public boolean bFld=true;
    public static volatile byte byFld=-64;
    public static volatile int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21737);
        FuzzerUtils.init(Test.fArrFld, 0.162F);
        FuzzerUtils.init(Test.lArrFld, -5209258557830422156L);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public void vMeth() {

        int i3=-65110, i4=-11, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 43143);

        iArr[(Test.iFld >>> 1) % N] -= (int)(-(Test.dFld++));
        Test.iFld /= (int)((long)(Test.dFld) | 1);
        for (i3 = 13; i3 < 246; ++i3) {
            Test.iFld += (int)(((iFld1 + iFld1) * (i3 << i3)) + (Test.instanceCount - (Test.dFld * i4)));
        }
        vMeth_check_sum += i3 + i4 + FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth() {

        int i11=4, i12=867, i13=19485, i14=64326, i15=6, i16=-12, i17=-222;

        for (i11 = 1; 217 > i11; ++i11) {
            i12 += i11;
            if (i11 != 0) {
            }
            for (i13 = 1; i13 < 7; i13++) {
                Test.iFld <<= (int)2698606297136565771L;
                Test.iFld += (int)Test.dFld;
                Test.iArrFld[i11][i13 - 1] += (int)1.725F;
                for (i15 = 1; i15 < 2; ++i15) {
                    i12 = (int)Test.instanceCount;
                }
                Test.dFld += i12;
                i17 = 1;
                while (++i17 < 2) {
                    Test.fFld %= (i17 | 1);
                    Test.instanceCount = Test.iFld;
                    i12 -= i12;
                    i14 += i17;
                }
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i16 + i17;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static short sMeth(long l) {

        int i10=139, i18=-36013;
        boolean b1=false;
        byte by=-76;
        long l1=25138L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7100752841941686028L);

        i10 = 1;
        while (++i10 < 283) {
            b1 = b1;
        }
        Test.dFld -= (((i10 + i10) << (by + i10)) + (++Test.iFld));
        dMeth();
        lArr[(Test.iFld >>> 1) % N] += -34733;
        for (l1 = 313; l1 > 4; l1--) {
            i18 += -8424;
            Test.fArrFld[(int)(l1)] *= i18;
            i18 >>= Test.iFld;
            Test.dFld -= Test.iFld;
            l += 30401;
            i18 >>= -50804;
            lArr[(int)(l1 - 1)] = i18;
            Test.iFld -= (int)1.31F;
        }
        Test.iArrFld[(i10 >>> 1) % N][(27394 >>> 1) % N] = i10;
        long meth_res = l + i10 + (b1 ? 1 : 0) + by + l1 + i18 + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vSmallMeth(int i7, int i8, int i9) {


        Test.instanceCount += Math.max(Test.instanceCount, (--i7) + sMeth(Test.instanceCount));
        vSmallMeth_check_sum += i7 + i8 + i9;
    }

    public void mainTest(String[] strArr1) {

        int i=26, i1=12, i2=2, i5=37127, i6=-1048, i19=12, i20=-177, i21=-45420, i22=-40842, i23=-14065;
        boolean b=false, bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 6L);

        Test.dFld = (i--);
        switch (((((i ^ i) >>> 1) % 3) * 5) + 35) {
        case 38:
            for (i1 = 20; 394 > i1; i1++) {
                vMeth();
                iFld1 &= (((Test.iFld * Test.iFld) - i1) + Test.iArrFld[(1 >>> 1) % N][i1 + 1]);
                for (i5 = 2; i5 < 67; i5++) {
                    Test.fFld = 8;
                    bArr[i1] = b;
                    iFld1 += i5;
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(iFld1, iFld1, i2);
                }
                switch ((i1 % 9) + 121) {
                case 121:
                    Test.instanceCount *= 178L;
                    for (i19 = 3; i19 < 67; ++i19) {
                        for (i21 = 1; i21 < 2; i21++) {
                            Test.instanceCount -= i6;
                            if (bFld) {
                                i2 *= i19;
                                i *= Test.sFld;
                                i22 = i23;
                            } else {
                                i *= Test.sFld;
                                Test.iArrFld[i19][i1 + 1] >>= 8261;
                                Test.lArrFld[i1 + 1] &= i5;
                                i = (int)-6L;
                            }
                        }
                        i2 += i19;
                        Test.instanceCount = 17327;
                        if (bFld) break;
                        i23 = i1;
                        Test.dFld -= 2L;
                        if (true) continue;
                        i23 += (int)Test.instanceCount;
                    }
                case 122:
                    i23 -= i;
                    break;
                case 123:
                    bFld = b;
                    break;
                case 124:
                    Test.iFld -= (int)-121.811F;
                    break;
                case 125:
                    i22 |= Test.byFld;
                    break;
                case 126:
                case 127:
                    Test.iArrFld[i1 - 1][i1 - 1] -= 14;
                    break;
                case 128:
                    i23 = i20;
                    break;
                case 129:
                    Test.fArrFld[i1] = Test.fFld;
                    break;
                default:
                    lArr1[i1 - 1] >>= Test.instanceCount;
                }
            }
            break;
        case 48:
            i20 = (int)1289147329549037044L;
            break;
        case 36:
            i = iFld1;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth sMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
