package tests.javafuzzer784;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:43:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static int iFld=46366;
    public static double dFld=46.24767;
    public static float fFld=83.432F;
    public static volatile byte byFld=-62;
    public static long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -43L);
        FuzzerUtils.init(Test.byArrFld, (byte)27);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4) {

        int i6=243, i7=7, i8=-5262, i9=-18026, iArr[]=new int[N];
        short s=29464;

        FuzzerUtils.init(iArr, -7);

        Test.iFld <<= -12;
        for (int i5 : iArr) {
            i5 = -11;
            for (i6 = 1; 4 > i6; i6 += 3) {
                i4 += (i6 * i6);
                i5 += (int)(64.763F + (i6 * i6));
                for (i8 = 4; i8 > 1; --i8) {
                    Test.dFld = Test.fFld;
                    i7 = -230;
                    Test.fFld *= Test.instanceCount;
                    i7 += (int)Test.instanceCount;
                    Test.fFld += i9;
                    Test.instanceCount = -12L;
                    i4 += (((i8 * s) + i8) - Test.instanceCount);
                    Test.fFld = Test.byFld;
                }
            }
        }
        long meth_res = i4 + i6 + i7 + i8 + i9 + s + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i3) {

        int i10=123, i11=-219, i12=185, i13=129, i14=438, i15=-39193, i16=-62;
        boolean b=true;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 1.86999);

        i3 = (int)(-218 - ((-10L * (Test.iFld - -100)) * lMeth(i3)));
        i10 = 1;
        do {
            i11 = 1;
            do {
                for (i12 = 1; i12 < 1; i12 += 2) {
                    if (b) break;
                    Test.iFld = -27;
                    Test.iFld -= 0;
                }
                for (i14 = 1; i14 < 1; i14 += 2) {
                    i3 += i14;
                    Test.iFld += i14;
                    Test.fFld = i13;
                }
                i16 = 1;
                while (--i16 > 0) {
                    Test.instanceCount *= (long)-18.186F;
                }
                dArr = FuzzerUtils.double2array(N, (double)1.81719);
                Test.iFld -= (int)Test.instanceCount;
            } while (++i11 < 8);
        } while (++i10 < 198);
        vMeth_check_sum += i3 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(int i1, int i2, double d) {

        byte by=106;
        float f=42.561F;
        long l=-44185L, l1=211L;
        int i17=-2, i18=14117, i19=-15, i20=-12;
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(dArr1, 0.67772);

        i1 = i2;
        Test.iFld = (int)(((-4 * (i1 + 254L)) * (i2 * by)) / (((long)(f++)) | 1));
        vMeth(10973);
        Test.lArrFld[(i2 >>> 1) % N] = 11668;
        i1 = i2;
        Test.instanceCount = 22;
        dArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= d;
        for (l = 286; l > 11; l -= 3) {
            for (i18 = 1; i18 < 17; ++i18) {
                i2 -= i2;
                for (l1 = 1; l1 < 2; l1++) {
                    Test.iFld >>= Test.iFld;
                    Test.instanceCount = i20;
                    i20 >>= (int)l;
                    i17 = i20;
                }
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) + l + i17 + i18 + i19 + l1
            + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i21=35, i22=-2, i23=19268, i24=44, i25=2, i26=36;
        long l2=-5458536680521544157L;
        float f1=-1.514F;
        boolean b1=false;

        i = i;
        Test.instanceCount = Math.min(iMeth(61, Test.iFld, -78.18563), Test.iFld);
        for (l2 = 17; 335 > l2; l2++) {
            Test.iFld += (int)Test.instanceCount;
            for (f1 = 1; f1 < 79; f1++) {
                i21 = (int)l2;
                i += (int)(f1 * i);
                if (b1) {
                    Test.instanceCount += (long)f1;
                    i = Test.iFld;
                }
                iArrFld[(int)(f1)] -= i22;
                i21 <<= i;
            }
        }
        i21 -= -12878;
        i22 ^= i21;
        i21 *= (int)l2;
        Test.iFld += -201;
        i23 = 1;
        do {
            i += i22;
            iArrFld[i23] *= (int)l2;
            i24 = 1;
            do {
                Test.iFld -= -8;
                iArrFld[i23] = -61902;
                iArrFld[i24 - 1] += (int)Test.dFld;
                Test.byArrFld[i24 - 1] |= (byte)Test.instanceCount;
                i22 += Test.iFld;
                for (i25 = 1; i25 < 4; ++i25) {
                    Test.bArrFld[i25] = b1;
                }
                i = i23;
            } while ((i24 += 3) < 80);
            Test.byFld -= (byte)-121;
            Test.fFld += i26;
        } while (++i23 < 314);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
