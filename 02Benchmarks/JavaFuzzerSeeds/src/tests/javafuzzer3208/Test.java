package tests.javafuzzer3208;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:55:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static double dFld=1.102516;
    public int iFld=54432;
    public float fFld=29.150F;
    public boolean bFld=true;
    public static byte byFld=-108;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4067289764083908364L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l, int i4) {

        int i5=110, i6=5, i7=-2262, i8=-63405, i9=-5, iArr[]=new int[N];
        double d=2.42913;
        float f1=2.195F;
        boolean b=true;
        short s=23801;

        FuzzerUtils.init(iArr, 65204);

        i5 = 1;
        do {
            d = f1;
            i4 /= (int)(Test.instanceCount | 1);
            for (i6 = 8; i6 > 1; --i6) {
                i4 *= i4;
                i4 += (i6 - i3);
            }
            for (i8 = 8; i8 > 1; i8--) {
                i9 -= i8;
                i9 -= i4;
                iArr[i5] ^= i5;
                l += i8;
                b = b;
            }
            b = b;
            Test.lArrFld[i5 + 1] = 11;
            i4 += (((i5 * i9) + s) - i5);
        } while ((i5 += 2) < 378);
        vMeth1_check_sum += i3 + l + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i6 + i7 + i8 +
            i9 + (b ? 1 : 0) + s + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(int i2) {

        short s1=6566;
        boolean b1=true;
        int i10=73, i11=105, i12=1973, i13=7;
        float f2=0.416F;

        vMeth1(i2, Test.instanceCount, i2);
        for (long l1 : Test.lArrFld) {
            Test.lArrFld[(i2 >>> 1) % N] = s1;
            i2 -= i2;
            iArrFld[(i2 >>> 1) % N] *= (int)Test.instanceCount;
            if (b1) continue;
            i2 <<= (int)4L;
        }
        for (i10 = 355; i10 > 14; --i10) {
            for (i12 = 1; i12 < 5; i12++) {
                f2 -= -28197;
                i2 -= i12;
                i11 ^= i12;
                if (true) break;
                iArrFld[i12 + 1] = i2;
                Test.dFld -= i10;
            }
        }
        long meth_res = i2 + s1 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i1=-7, i14=-22, i15=-110, i16=17731, i17=-58127, i18=61399, i19=59658;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 1.498F);

        i1 -= (int)(iMeth(i1) << 129L);
        for (i14 = 13; i14 < 261; ++i14) {
            i1 += i14;
        }
        i1 = i1;
        Test.instanceCount = -7;
        i16 = 1;
        do {
            switch ((i16 % 5) + 103) {
            case 103:
                for (i17 = i16; 6 > i17; i17++) {
                    i1 *= (int)Test.instanceCount;
                    iFld += (-42481 + (i17 * i17));
                    i19 = 1;
                    do {
                        fFld += (((i19 * Test.instanceCount) + i18) - Test.instanceCount);
                        bFld = bFld;
                        i18 *= (int)Test.instanceCount;
                        iArrFld[i19] >>= Test.byFld;
                    } while (--i19 > 0);
                }
                break;
            case 104:
                i1 += (i16 + i1);
                break;
            case 105:
                fArr[i16 + 1][i16 + 1] += 3;
                break;
            case 106:
                Test.dFld = i1;
                break;
            case 107:
                Test.instanceCount += i15;
                break;
            }
        } while (++i16 < 274);
        vMeth_check_sum += i1 + i14 + i15 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=39230, i20=-5607, i21=-119, i22=-122, i23=38095, i24=6461, i25=-164;
        float f=69.862F, fArr1[]=new float[N];
        double d1=27.85426;

        FuzzerUtils.init(fArr1, -1.799F);

        i -= (int)(Math.abs(i - -174) + (f++));
        vMeth();
        Test.dFld -= i;
        for (i20 = 7; i20 < 129; i20++) {
            Test.instanceCount = Test.instanceCount;
            iArrFld[i20 - 1] = (int)Test.instanceCount;
            for (i22 = 4; i22 < 205; ++i22) {
                f -= 17;
                i21 >>= i;
                for (i24 = 1; i24 < 2; ++i24) {
                    switch (((i23 >>> 1) % 1) + 84) {
                    case 84:
                        try {
                            i23 = (-30711 % i25);
                            iArrFld[i20 - 1] = (i22 % i24);
                            i25 = (38 % iArrFld[i24 + 1]);
                        } catch (ArithmeticException a_e) {}
                        i23 += (112 + (i24 * i24));
                    }
                    if (bFld) continue;
                    Test.instanceCount -= Test.byFld;
                    iArrFld[i22] |= -24543;
                    Test.instanceCount = iFld;
                    iFld = (int)Test.instanceCount;
                    i25 += i22;
                    if (bFld) break;
                    Test.dFld /= (i25 | 1);
                    i <<= i25;
                }
                f = i21;
                i |= Test.byFld;
                try {
                    iArrFld[i20 + 1] = (-1766661127 / i23);
                    i23 = (60792 / i22);
                    i25 = (1605901854 / i23);
                } catch (ArithmeticException a_e) {}
                f += (((i22 * i20) + Test.instanceCount) - Test.instanceCount);
                Test.instanceCount = (long)d1;
            }
            fArr1[i20] -= 10868;
            i >>>= i;
            bFld = false;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
