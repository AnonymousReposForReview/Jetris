package tests.javafuzzer1173;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:57:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static volatile int iFld=0;
    public static float fFld=-88.167F;
    public static boolean bFld=true;
    public double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        long l1=-141L;
        int i6=-10, i7=-43, i8=154, i9=129, i10=9, iArr1[]=new int[N];
        byte by1=40;
        boolean b=true;

        FuzzerUtils.init(iArr1, -50402);

        iArr1[(Test.iFld >>> 1) % N] -= Test.iFld;
        for (l1 = 1; l1 < 194; l1 += 3) {
            for (i7 = 1; i7 < 24; i7++) {
                iArr1 = iArr1;
                i6 += (i7 | Test.instanceCount);
                if (i6 != 0) {
                    vMeth1_check_sum += l1 + i6 + i7 + i8 + i9 + i10 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.instanceCount = Test.instanceCount;
                iArr1[i7] = (int)-633736321L;
            }
            if (i8 != 0) {
                vMeth1_check_sum += l1 + i6 + i7 + i8 + i9 + i10 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            Test.fFld *= l1;
            i6 -= (int)107.522F;
        }
        iArr1[(i8 >>> 1) % N] = i6;
        for (i9 = 9; i9 < 363; i9 += 2) {
            by1 += (byte)i9;
            if (b) break;
        }
        vMeth1_check_sum += l1 + i6 + i7 + i8 + i9 + i10 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static short sMeth(int i4, long l, int i5) {

        int i11=-14, iArr2[]=new int[N], iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr2, 21436);
        FuzzerUtils.init(iArr3, 2);

        vMeth1();
        i11 = 1;
        do {
            if (i11 != 0) {
            }
            iArr3 = iArr3;
            Test.fFld += Test.fFld;
        } while (++i11 < 377);
        long meth_res = i4 + l + i5 + i11 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(byte by, int i) {

        int i1=46811, i2=-14, i3=2, i13=-117, i14=-24991, iArr[]=new int[N];
        float f=19.938F;
        short s=-18343;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -126);
        FuzzerUtils.init(lArr, 241834452L);

        for (i1 = 6; i1 < 197; i1++) {
            i = (int)(((++Test.instanceCount) + (f - i)) - (i2 &= (int)Math.abs(Test.instanceCount)));
            i3 = 1;
            do {
                iArr[i3] -= (int)((lArr[i1 - 1]--) * ((-581977175L << (8L * iArr[i1])) * sMeth(201, Test.instanceCount,
                    i1)));
                Test.instanceCount = i;
                Test.iFld -= i;
                Test.instanceCount += (i3 + Test.instanceCount);
                i = (int)Test.instanceCount;
                Test.iFld -= -1098;
                if (Test.iFld != 0) {
                    vMeth_check_sum += by + i + i1 + i2 + Float.floatToIntBits(f) + i3 + i13 + i14 + s + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                for (i13 = 1; i13 < 2; i13++) {
                    by += (byte)(i13 ^ s);
                }
                i2 = (int)Test.instanceCount;
                try {
                    Test.iFld = (i13 % -128);
                    i2 = (iArr[i3 - 1] / 211);
                    i = (i13 % i13);
                } catch (ArithmeticException a_e) {}
            } while ((i3 += 2) < 8);
            b1 = b1;
        }
        vMeth_check_sum += by + i + i1 + i2 + Float.floatToIntBits(f) + i3 + i13 + i14 + s + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by2=-49;
        int i15=43505, i16=28926, i17=7551, i18=-7, i19=37672, i20=-13, i21=17652, i22=189, iArr4[][]=new int[N][N];
        double d=2.27525;
        short s1=7512;

        FuzzerUtils.init(iArr4, 10);

        vMeth(by2, Test.iFld);
        i15 = 1;
        while (++i15 < 221) {
            d += Test.fFld;
            iArr4[i15][i15] = (int)Test.instanceCount;
            Test.fFld += Test.instanceCount;
            Test.instanceCount += (-55409L + (i15 * i15));
            s1 += (short)(i15 * i15);
            iArr4[i15 + 1][i15 + 1] += i15;
            iArr4[i15 - 1][i15] >>= i15;
            for (i16 = 7; i16 < 114; ++i16) {
                Test.iFld += (i16 | i15);
                Test.bFld = Test.bFld;
                i17 = i16;
                for (i18 = 2; i18 > 1; --i18) {
                    dArrFld[i18 + 1] += Test.instanceCount;
                    Test.fFld = Test.iFld;
                    Test.iFld += i20;
                    i19 >>>= Test.iFld;
                    lArrFld[i16] >>>= 141;
                    Test.iFld &= i17;
                    Test.fFld -= i18;
                    if (true) break;
                    i17 += (((i18 * Test.fFld) + i19) - Test.instanceCount);
                }
                for (i21 = 1; 2 > i21; i21++) {
                    by2 += (byte)(i21 * i21);
                    i22 -= (int)Test.instanceCount;
                    i22 += i18;
                    lArrFld[i16] = 123L;
                    Test.fFld += Test.instanceCount;
                    i22 += i21;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
