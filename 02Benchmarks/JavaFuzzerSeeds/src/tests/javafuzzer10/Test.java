package tests.javafuzzer10;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 20:59:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public float fFld=0.846F;
    public short sFld=13054;
    public static byte byFld=110;
    public static double dFld=-1.18957;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7L);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.byArrFld, (byte)103);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by, double d) {

        int i4=-32411, i5=-62945, i7=-26980, i8=-2, i9=-4;
        double d1=0.72164;

        for (i4 = 2; 363 > i4; i4++) {
            Test.lArrFld[i4] >>= 42187L;
            i5 >>= (int)Test.instanceCount;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)14);
            Test.byArrFld[i4 + 1] *= (byte)Test.instanceCount;
            for (i7 = 1; i7 < 5; i7 += 2) {
                Test.instanceCount += (i7 * i4);
                i5 = -97;
                if (i4 != 0) {
                }
                Test.lArrFld[i4 + 1] -= Test.instanceCount;
            }
            i8 *= -20936;
            i8 -= (int)Test.instanceCount;
            for (d1 = 1; d1 < 5; ++d1) {
                i9 = i9;
                i5 += (1 + (d1 * d1));
            }
        }
        long meth_res = by + Double.doubleToLongBits(d) + i4 + i5 + i7 + i8 + Double.doubleToLongBits(d1) + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2) {

        int i3=-2, i10=12759, i11=-77, i12=-65062, i13=-9;
        byte by1=112;
        float f=-1.914F, f1=0.196F;
        double d2=2.43284;

        i3 = 1;
        while (++i3 < 373) {
            i2 += iMeth(by1, 1.99107);
            i2 ^= i3;
            for (i10 = 1; i10 < 5; ++i10) {
                f += (float)d2;
                Test.instanceCount += (((i10 * i3) + i11) - i2);
                for (i12 = 1; i12 < 2; ++i12) {
                    Test.instanceCount |= i12;
                    by1 += (byte)(i12 * i12);
                }
                f1 = 1;
                while (++f1 < 2) {
                    i13 = i10;
                    f = Test.instanceCount;
                    f -= i11;
                    i2 = i11;
                    i2 += (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + by1 + i10 + i11 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i12 +
            i13 + Float.floatToIntBits(f1);
    }

    public void vMeth(long l, int i, int i1) {

        float f2=44.826F;
        int i14=152, i15=7, i16=-207, i17=55826;

        vMeth1(i);
        f2 = 1;
        do {
            for (i14 = 1; i14 < 7; i14++) {
                i16 = 1;
                while (++i16 < 2) {
                    i15 >>= i;
                    i1 -= i16;
                    fFld *= i14;
                    i += i;
                }
                i15 >>>= (int)Test.instanceCount;
            }
            Test.iArrFld[(int)(f2)] *= 13;
        } while (++f2 < 215);
        i17 = 1;
        do {
            Test.iArrFld[i17] <<= i15;
            Test.instanceCount >>= i15;
            fFld -= i15;
            i15 -= i15;
        } while (++i17 < 317);
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i18=24669, i19=2, i20=-91, i21=55156, i22=164, i23=-11, i24=-54641, i25=24692;
        double d3=0.50472;

        vMeth(Test.instanceCount, i18, i18);
        i18 = i18;
        Test.lArrFld[(i18 >>> 1) % N] = sFld;
        i19 = 1;
        do {
            for (i20 = 1; i20 < 74; i20++) {
                i21 += (int)fFld;
                i21 <<= (int)-3900654198410059686L;
            }
            Test.byFld = (byte)i18;
            i21 -= (int)Test.dFld;
            Test.iArrFld[i19 - 1] = (int)Test.instanceCount;
            Test.instanceCount = i21;
            for (i22 = 3; 74 > i22; ++i22) {
                switch ((i22 % 2) + 32) {
                case 32:
                    Test.dFld += Test.dFld;
                    fFld = Test.instanceCount;
                    i23 += (int)d3;
                    for (i24 = 1; i24 < 2; i24++) {
                        i18 += (((i24 * i19) + Test.instanceCount) - Test.instanceCount);
                        i25 -= -2;
                        i18 += i21;
                        sFld = (short)Test.instanceCount;
                        i23 += (((i24 * Test.instanceCount) + Test.instanceCount) - i19);
                        Test.instanceCount >>= Test.instanceCount;
                        switch ((i22 % 1) + 71) {
                        case 71:
                            i21 = (int)fFld;
                            break;
                        default:
                            d3 = Test.instanceCount;
                            Test.instanceCount += (i24 ^ i24);
                            i25 <<= i24;
                            Test.instanceCount >>= i23;
                        }
                        i25 = i22;
                    }
                case 33:
                    Test.instanceCount += i20;
                    break;
                }
            }
        } while (++i19 < 340);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
