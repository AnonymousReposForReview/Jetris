package tests.javafuzzer2503;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:39:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-31239L;
    public int iFld=-24217;
    public double dFld=105.25255;
    public static short sFld=655;
    public static double dFld1=19.70594;
    public static int iFld1=-5;
    public byte byFld=-35;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 167L);
        FuzzerUtils.init(Test.fArrFld, 0.39F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, float f1, long l) {

        int i8=32603, i9=2, i10=-10, i11=2, i12=-5, i13=10, i14=-216, i15=-55156, i16=-10, i17=10, iArr1[]=new int[N];
        byte by=-49;

        FuzzerUtils.init(iArr1, -9);

        for (i8 = 8; i8 < 316; i8++) {
            l += i8;
            try {
                i7 = (iArr1[i8] / 8482);
                i9 = (i10 % i8);
                i11 = (-60222 / i11);
            } catch (ArithmeticException a_e) {}
        }
        Test.sFld += (short)i11;
        switch (((i9 >>> 1) % 10) + 84) {
        case 84:
            for (i12 = 3; i12 < 251; i12++) {
                by += (byte)(i12 * i12);
                if (i9 != 0) {
                }
                i9 += (i12 * i12);
                i10 += i12;
            }
            for (i14 = 6; i14 < 170; ++i14) {
                for (i16 = 1; i16 < 10; i16++) {
                    f1 += f1;
                    f1 += (i16 * i16);
                    i9 <<= (int)-252L;
                }
            }
            break;
        case 85:
            i13 <<= i14;
            break;
        case 86:
            f1 += i8;
            break;
        case 87:
            Test.fArrFld[(i14 >>> 1) % N] += i13;
            break;
        case 88:
            iArr1[(i15 >>> 1) % N] += 11;
            break;
        case 89:
            Test.lArrFld[(-13 >>> 1) % N] -= -132;
            break;
        case 90:
            l -= 0;
        case 91:
            i17 += (int)Test.dFld1;
            break;
        case 92:
            Test.iFld1 = (int)l;
        case 93:
            Test.lArrFld[(i14 >>> 1) % N] = -59518;
            break;
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + l + i8 + i9 + i10 + i11 + i12 + i13 + by + i14 + i15 + i16 +
            i17 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, int i6, float f) {

        int i18=5151, i19=35094, i20=-12134, i21=-146, i22=-6, i23=51, iArr2[]=new int[N];
        double d1=-115.102434;

        FuzzerUtils.init(iArr2, 10);

        i5 += iMeth(-8, f, Test.instanceCount);
        Test.instanceCount <<= i5;
        Test.iFld1 += (int)f;
        for (i18 = 13; 214 > i18; ++i18) {
            i5 = (int)Test.dFld1;
            i6 = i19;
            for (i20 = i18; i20 < 8; ++i20) {
                Test.sFld >>>= (short)i19;
                for (d1 = 1; d1 < 1; d1++) {
                    switch (((i18 % 3) * 5) + 87) {
                    case 91:
                        i21 += (int)d1;
                    case 99:
                        i22 = i6;
                        Test.instanceCount *= i23;
                        break;
                    case 89:
                        iArr2[i18 - 1] = i22;
                        iArr2[(int)(d1)] += i19;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + Float.floatToIntBits(f) + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d1) +
            i22 + i23 + FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth() {

        double d=113.16782;
        int i=26263, i1=200, i2=-244, i3=199, i4=98, iArr[]=new int[N];
        float f2=1.531F;

        FuzzerUtils.init(iArr, 11);

        for (d = 2; d < 137; d++) {
            i += (int)(d * d);
            i = (int)((iFld = (iFld--)) - (Test.instanceCount++));
            for (i1 = 1; i1 < 12; ++i1) {
                for (i3 = 2; i3 > 1; --i3) {
                    i4 += (int)(Test.lArrFld[(iFld >>> 1) % N]++);
                    i4 += (i3 * i3);
                    iArr[i1] -= (int)Float.intBitsToFloat(i4);
                    vMeth1(i, iFld, f2);
                    byFld >>= (byte)Test.iFld1;
                    i4 |= (int)Test.instanceCount;
                    iArr[(int)(d - 1)] -= byFld;
                    Test.iFld1 = 178;
                    Test.iFld1 += (i3 - Test.iFld1);
                    i += i3;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -12L);

        b = (iFld < Math.sqrt(--dFld));
        lArr[(iFld >>> 1) % N] <<= (iFld--);
        vMeth();
        Test.iFld1 = -65058;
        iFld &= -4;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
