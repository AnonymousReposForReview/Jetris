package tests.javafuzzer2090;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:53:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=-35315;
    public static double dFld=-1.31256;
    public static float fFld=0.226F;
    public boolean bFld=true;
    public byte byFld=-4;
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)23721);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-189, i6=69, i7=7, i8=53, i9=53717, iArr[]=new int[N];
        byte by1=-93;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -39378);
        FuzzerUtils.init(lArr, -3106440106L);

        i5 = 1;
        do {
            switch ((i5 % 1) + 92) {
            case 92:
                Test.iFld = 4;
                Test.dFld = i5;
                break;
            default:
                iArr[i5] = Test.iFld;
                for (i6 = i5; i6 < 5; i6++) {
                    i7 >>= by1;
                    Test.instanceCount ^= 1;
                    for (i8 = 1; i8 < 1; i8++) {
                        Test.iFld += Test.iFld;
                        lArr[i6] = 11;
                        iArr[i5] = (int)Test.dFld;
                    }
                }
                Test.fFld = 2103496288219526886L;
                Test.dFld = Test.instanceCount;
            }
            i7 *= (int)Test.instanceCount;
        } while (++i5 < 336);
        vMeth1_check_sum += i5 + i6 + i7 + by1 + i8 + i9 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        short s1=12597;
        byte by2=-11;
        int i10=-51928, i11=-8, i12=59443, i13=-52532, i14=-4;
        boolean b1=true;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, -1.35299);
        FuzzerUtils.init(lArr1, 3234681074952596978L);

        vMeth1();
        s1 <<= by2;
        i10 = 1;
        do {
            b1 = b1;
            for (i11 = 1; i11 < 6; ++i11) {
                Test.dFld = -68;
                Test.fFld *= 10;
                dArr[i11] += s1;
                lArr1[i11 + 1] -= Test.instanceCount;
                Test.iFld -= i11;
                lArr1[i10 + 1] *= i10;
            }
            for (i13 = 1; i13 < 6; ++i13) {
                Test.instanceCount += Test.iFld;
            }
            Test.fFld -= Test.instanceCount;
            i14 = (int)Test.instanceCount;
        } while (++i10 < 289);
        vMeth_check_sum += s1 + by2 + i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(float f, int i) {

        int i1=228, i2=-1608, i3=-32081, i4=0, i15=-227, i16=-112;
        boolean b=false;
        byte by=120;
        short s2=-17236;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 65.174F);

        for (i1 = 7; 141 > i1; ++i1) {
            for (i3 = i1; i3 < 12; ++i3) {
                f = (((-2.384F + (i4 + Test.instanceCount)) + (Test.instanceCount * Test.instanceCount)) % ((--i4) |
                    1));
                i -= (-4318 - (-(++Test.iFld)));
                if (b) break;
                i2 -= (by *= (byte)Test.iFld);
                vMeth();
                switch ((((i4 >>> 1) % 2) * 5) + 8) {
                case 18:
                    Test.instanceCount += i3;
                    fArr = fArr;
                    for (i15 = i1; 1 > i15; i15++) {
                        Test.fFld -= Test.instanceCount;
                        i4 += (int)(-4222166336347638356L + (i15 * i15));
                        i16 *= s2;
                        Test.iFld <<= i3;
                    }
                    break;
                case 14:
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i + i1 + i2 + i3 + i4 + (b ? 1 : 0) + by + i15 + i16 + s2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-22361;
        int i17=-126, i18=-224, i19=3, i20=-10, i21=-9, i22=13632, i23=58506, i24=44845, i25=0, i26=-251, i27=-3,
            iArr1[]=new int[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -38.19287);
        FuzzerUtils.init(iArr1, 9551);

        s -= (short)iMeth(Test.fFld, Test.iFld);
        for (i17 = 4; i17 < 127; i17++) {
            dArr1[i17] += i19;
        }
        Test.instanceCount = Test.instanceCount;
        s -= (short)Test.dFld;
        for (short s3 : Test.sArrFld) {
            i20 = 1;
            do {
                Test.iFld -= 91;
                for (i21 = 1; i21 < 1; i21++) {
                    Test.instanceCount = i19;
                    iArr1[i21] = (int)Test.instanceCount;
                    if (bFld) break;
                    Test.instanceCount += i17;
                }
            } while (++i20 < 63);
            switch (((Test.iFld >>> 1) % 2) + 2) {
            case 2:
                switch ((((i20 >>> 1) % 2) * 5) + 70) {
                case 73:
                    for (i23 = 2; i23 < 63; ++i23) {
                        Test.fFld -= 7;
                        i18 += (((i23 * byFld) + i23) - Test.iFld);
                    }
                    if (bFld) continue;
                    break;
                case 72:
                    switch (((197 >>> 1) % 6) + 34) {
                    case 34:
                        for (i25 = 2; i25 < 63; ++i25) {
                            lArrFld[i25 - 1] = i26;
                            iArr1 = iArr1;
                            iArr1[i25 + 1] *= (int)98.108369;
                            i27 = 1;
                            do {
                                i26 = 14;
                                Test.instanceCount += i27;
                                Test.fFld += (((i27 * s3) + Test.iFld) - i21);
                                Test.fFld += (i27 - Test.instanceCount);
                                i24 += (((i27 * Test.iFld) + i26) - i24);
                            } while (++i27 < 2);
                        }
                        break;
                    case 35:
                        i24 -= i22;
                        break;
                    case 36:
                        i22 |= s3;
                    case 37:
                        i22 = -1;
                    case 38:
                        i26 = 6007;
                        break;
                    case 39:
                        try {
                            i22 = (i27 % -1677965117);
                            i22 = (i27 / iArr1[(-1 >>> 1) % N]);
                            i19 = (198 / i27);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        bFld = bFld;
                    }
                    break;
                default:
                    bFld = true;
                }
                break;
            case 3:
                try {
                    i18 = (Test.iFld % -1384367297);
                    i26 = (115 % i22);
                    iArr1[(i18 >>> 1) % N] = (i24 / i17);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                iArr1[(i23 >>> 1) % N] = Test.iFld;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
