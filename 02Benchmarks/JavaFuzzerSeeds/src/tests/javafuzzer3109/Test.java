package tests.javafuzzer3109;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:55:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-23239L;
    public static double dFld=2.93157;
    public static float fFld=80.279F;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 39.115230);
        FuzzerUtils.init(Test.iArrFld, -164);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, int i7) {

        int i8=241, i9=-3, i10=9, i11=-51344, i12=-10;
        float f1=-42.59F;

        Test.instanceCount = i7;
        for (i8 = 13; i8 < 255; i8++) {
            Test.iArrFld[i8 + 1] = i9;
            for (i10 = i8; i10 < 7; ++i10) {
                for (f1 = 1; 1 < f1; f1 -= 2) {
                    i7 = i7;
                    l *= (long)f1;
                    Test.instanceCount += -46028L;
                    l >>= Test.instanceCount;
                    Test.instanceCount -= l;
                    i11 <<= (int)l;
                }
            }
            i7 = (int)Test.dFld;
        }
        i9 -= (int)f1;
        Test.iArrFld[(-179 >>> 1) % N] = i7;
        Test.fFld += i8;
        long meth_res = l + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i4, float f) {

        int i5=11913, i6=-32865, i13=8272, i14=-8, i15=-13, i16=16585;
        byte by=22;
        short s=12421;

        for (i5 = 7; i5 < 393; ++i5) {
            Test.dArrFld[i5 + 1] = (Test.dArrFld[i5]--);
            switch ((i5 % 2) + 47) {
            case 47:
                i4 -= (int)(fMeth(Test.instanceCount, -9328) * -163);
                Test.iArrFld[i5 - 1] *= (int)Test.fFld;
                break;
            case 48:
                for (i13 = 4; i13 > 1; i13--) {
                    by -= (byte)i5;
                    switch (((i5 >>> 1) % 5) + 110) {
                    case 110:
                        try {
                            i6 = (i14 % i4);
                            i14 = (58353 % Test.iArrFld[i5]);
                            Test.iArrFld[i5 - 1] = (i6 % -789210422);
                        } catch (ArithmeticException a_e) {}
                        s = (short)i6;
                        i14 = i6;
                        for (i15 = 1; 2 > i15; ++i15) {
                            Test.instanceCount >>>= Test.instanceCount;
                            i6 += (1 + (i15 * i15));
                            Test.iArrFld[i13] = i6;
                        }
                        break;
                    case 111:
                    case 112:
                        if (i16 != 0) {
                        }
                        break;
                    case 113:
                        Test.instanceCount += (i13 * i13);
                        break;
                    case 114:
                        i14 += -50654;
                        break;
                    }
                }
            default:
                i16 += (int)f;
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f) + i5 + i6 + i13 + i14 + by + s + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=68, i3=13, i17=-134, i18=-12820, i19=-199, i20=33403;
        double d=0.105041;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -100.776F);

        for (i2 = 10; i2 < 324; i2++) {
            d *= (7605 + ((-52180 * iMeth(i3, 2.423F)) ^ Test.instanceCount));
            i17 = 1;
            do {
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount = i17;
                    i19 >>= (int)3451020993795505368L;
                    i20 >>= (int)Test.instanceCount;
                    i20 = i20;
                    fArr[i17 + 1] += i1;
                    i20 >>= -35263;
                    Test.fFld = i3;
                }
                if (Test.bFld) continue;
                i1 -= (int)Test.instanceCount;
                Test.instanceCount = i1;
                i19 += (i17 * i17);
            } while (++i17 < 5);
        }
        vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d) + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i21=230, i22=215, i23=0, i24=-5, i25=-42420, i26=1, i27=-3610, i28=8, i29=0;
        double d1=-45.105721;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 253054370L);

        Test.instanceCount = ((i++) % ((--i) | 1));
        vMeth(i);
        Test.bFld = Test.bFld;
        i += 1;
        lArr[(i >>> 1) % N] = Test.instanceCount;
        for (i21 = 10; i21 < 325; ++i21) {
            for (i23 = 80; i23 > 5; i23 -= 3) {
                if (Test.bFld) continue;
                i22 = i22;
                i24 -= i21;
                i22 += i23;
                Test.instanceCount = i;
                for (d1 = 1; d1 < 4; ++d1) {
                    Test.iArrFld[i23] -= 1873;
                    i24 = i21;
                    Test.instanceCount = 231;
                    Test.fFld = 49;
                    i22 += 1;
                    Test.iArrFld[i23] = i22;
                }
            }
            i25 += (i21 - i);
            for (i26 = i21; i26 < 80; ++i26) {
                if (false) continue;
                lArr[i21] += i22;
                for (i28 = i26; i28 < 1; ++i28) {
                    Test.instanceCount += i29;
                    i27 += i28;
                    lArr[i26 + 1] += Test.instanceCount;
                    Test.fFld *= 6;
                }
                Test.instanceCount *= i21;
            }
            if (Test.bFld) break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
