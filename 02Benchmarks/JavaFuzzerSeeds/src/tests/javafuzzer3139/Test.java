package tests.javafuzzer3139;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:34:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=45L;
    public short sFld=11105;
    public static float fFld=-66.247F;
    public static byte byFld=20;
    public static int iFld=-61687;
    public volatile double dFld=2.53310;
    public volatile int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.452F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vMeth1(int i7) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -13);

        iArr1[(i7 >>> 1) % N] -= Math.min(i7, i7);
        iArr1[(10 >>> 1) % N] += ((-(-i7)) - Test.byFld);
        Test.instanceCount += i7;
        vMeth1_check_sum += i7 + FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth(short s, int i8, int i9) {

        int i10=5486, i11=17, i12=-7, i13=-223, i14=170, i15=-1, iArr2[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr2, 10286);

        vMeth1(i9);
        i8 -= (int)Test.fFld;
        for (i10 = 6; i10 < 237; i10++) {
            if (b) {
                for (i12 = 1; i12 < 7; ++i12) {
                    i9 = (int)Test.instanceCount;
                }
                if (b) continue;
                Test.byFld = (byte)Test.instanceCount;
                i11 -= i9;
            }
            Test.byFld = (byte)Test.instanceCount;
            i9 = i11;
            for (i14 = i10; i14 < 7; ++i14) {
                iArr2[i10 + 1] = i11;
                i11 = i8;
                try {
                    i11 = (i9 / 16789);
                    iArr2[i10 + 1] = (i15 % -23567);
                    iArr2[i10 - 1] = (i12 % 81);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = s + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + i14 + i15 + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth(int i, int i1, int i2) {

        int i3=10003, i4=16, i5=-11, i6=114, i16=45;
        float f=52.1000F;
        long l=373948902L;
        boolean b1=false;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -59.47310);

        for (i3 = 7; i3 < 310; i3++) {
            double d=100.105177;
            for (i5 = 1; i5 < 5; ++i5) {
                i6 <<= ((iArrFld[(i5 >>> 1) % N][i5 + 1] * i4) + ((sFld++) - -9528));
                i = ((Math.max(i3, -2) + (i2 * i1)) - (i--));
                Test.fFld -= (float)(++dArr[i3][i5 + 1]);
            }
            vMeth1((int)(((--d) - (f - i)) + (Test.byFld * (i4 + -25663))));
            i = byMeth(sFld, i6, i2);
            for (l = 1; l < 5; l++) {
                Test.instanceCount = (long)Test.fFld;
            }
            i6 -= -7;
            iArrFld[i3 - 1][i3 + 1] -= (int)Test.instanceCount;
            if (b1) {
                Test.instanceCount = (long)-92.54260;
                i1 += (int)l;
            } else if (b1) {
                Test.fFld += (52650 + (i3 * i3));
            } else if (true) {
                i2 >>= (int)Test.instanceCount;
            } else {
                sFld >>= (short)Test.instanceCount;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + l + i16 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i17=-8, i18=11, i19=-10, i20=21, i21=-50628, i22=-198, i23=-4, iArr[][]=new int[N][N];
        float f1=0.225F;
        boolean b2=true, b3=true;

        FuzzerUtils.init(iArr, 36);

        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        i17 = 1;
        while (++i17 < 397) {
            for (i18 = i17; i18 < 63; ++i18) {
                Test.fArrFld[i18 + 1] += -29;
                for (f1 = 1; f1 < 1; ++f1) {
                    b2 = b2;
                    if (b2) break;
                    i20 += (int)f1;
                    if (b3) {
                        dFld = Test.instanceCount;
                    } else {
                        if (b2) break;
                        dFld = 84;
                    }
                    Test.byFld += (byte)(-31420 + (f1 * f1));
                }
                Test.iFld = i17;
                switch (i18 % 8) {
                case 0:
                    for (i21 = 1; i21 < 1; i21++) {
                        switch ((i17 % 10) + 22) {
                        case 22:
                            lArrFld[i21 + 1] = i20;
                            try {
                                iArrFld[i21 - 1][i18 - 1] = (-13 % i18);
                                i19 = (i18 % -15);
                                i22 = (i19 / -847037913);
                            } catch (ArithmeticException a_e) {}
                            iArrFld[i17] = iArr[i18 + 1];
                        case 23:
                            iArrFld[i17 + 1][i18 + 1] += i19;
                            iArrFld[i17][i18] = (int)Test.instanceCount;
                            dFld = Test.instanceCount;
                            break;
                        case 24:
                            i20 &= i18;
                            i19 = 186;
                            break;
                        case 25:
                            Test.iFld += (((i21 * Test.instanceCount) + Test.instanceCount) - i20);
                            i20 -= i20;
                            iArrFld[i21 - 1][i18 + 1] -= i23;
                            Test.instanceCount *= Test.instanceCount;
                            break;
                        case 26:
                            i22 >>= 0;
                            break;
                        case 27:
                            i20 = (int)Test.instanceCount;
                        case 28:
                            Test.instanceCount *= Test.instanceCount;
                            break;
                        case 29:
                            Test.fFld = sFld;
                        case 30:
                            i19 *= i23;
                            break;
                        case 31:
                            try {
                                i19 = (-23 / i21);
                                i19 = (214 % Test.iFld);
                                i20 = (i17 % 127);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                    }
                    break;
                case 1:
                    if (b3) break;
                    break;
                case 2:
                    Test.instanceCount = i20;
                    break;
                case 3:
                    i19 -= sFld;
                    break;
                case 4:
                    Test.fFld += i18;
                    break;
                case 5:
                    Test.fFld += (i18 * i18);
                    break;
                case 6:
                    Test.fFld += i18;
                    break;
                case 7:
                    i20 >>= Test.byFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest byMeth
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
