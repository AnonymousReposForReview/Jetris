package tests.javafuzzer624;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:46:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=47L;
    public static volatile int iFld=38458;
    public static boolean bFld=false;
    public static boolean bFld1=false;
    public static float fFld=117.209F;
    public static double dFld=79.85814;
    public static long lFld=52939L;
    public static byte byFld=19;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, int i1, int i2) {

        int i3=120, i4=-4, i5=-53389, i6=113, i7=-13, i8=-7;
        short s1=8446;
        float f=68.552F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-114);
        FuzzerUtils.init(fArr, -2.559F);

        for (i3 = 7; i3 < 289; ++i3) {
            Test.iArrFld[i3 + 1] = i2;
            for (i5 = i3; 6 > i5; ++i5) {
                byArr[i3] -= (byte)l;
                for (i7 = 1; i7 > 1; --i7) {
                    l += l;
                    l -= i3;
                    Test.iArrFld[i5] -= i3;
                    s1 >>= (short)l;
                    s1 += (short)-46641;
                    l = Test.instanceCount;
                    i1 = (int)Test.instanceCount;
                    Test.bFld1 = Test.bFld;
                    Test.iArrFld[i5] = s1;
                }
                fArr[i5] *= f;
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + s1 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(double d) {

        short s=-27919;
        int i9=-33861, i10=-5, i11=92, i12=-29723, i13=41, i14=-11;

        Test.iArrFld[(Test.iFld >>> 1) % N] += (Test.iFld++);
        d = Math.abs(Test.iArrFld[(Test.iFld >>> 1) % N]--);
        Test.bFld = Test.bFld;
        Test.iFld ^= (int)(((--Test.iFld) - d) * ((s + Test.iFld) - 7));
        vMeth(Test.instanceCount, Test.iFld, -5898);
        for (i9 = 2; i9 < 143; i9++) {
            if (Test.bFld1) continue;
            Test.bFld1 = Test.bFld1;
            d = Test.iFld;
            Test.iFld = (int)Test.fFld;
            Test.fFld += (-8 + (i9 * i9));
            for (i11 = i9; i11 < 11; ++i11) {
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.fFld -= Test.instanceCount;
                    i14 += i13;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + i9 + i10 + i11 + i12 + i13 + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        double d1=-68.16409;

        lMeth(d1);
        vSmallMeth_check_sum += Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i15=68, i16=-6, i17=-166, i18=-190;
        long l1=-5844711021659897465L;
        short s2=7841, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-25255);

        Test.instanceCount -= i;
        for (int smallinvoc=0; smallinvoc<509; smallinvoc++) vSmallMeth();
        Test.fFld = 0.595F;
        for (i15 = 11; i15 < 208; i15++) {
            Test.iArrFld[i15] -= (int)Test.instanceCount;
            for (l1 = 7; 127 > l1; l1++) {
                Test.instanceCount -= i;
                Test.iArrFld[i15 + 1] += i17;
                i18 = 1;
                do {
                    Test.iFld += (i18 * i18);
                    Test.iFld = Test.iFld;
                    switch ((int)(((l1 % 3) * 5) + 31)) {
                    case 41:
                        Test.dFld *= 78;
                        Test.lFld += (long)46.870F;
                        i16 = i;
                        break;
                    case 38:
                        switch ((int)(((l1 % 5) * 5) + 91)) {
                        case 96:
                            Test.iFld = i18;
                            break;
                        case 99:
                            if (Test.bFld) continue;
                            Test.iFld >>= 11;
                            Test.iFld ^= 45130;
                            Test.fFld = 2;
                            break;
                        case 105:
                            s2 += (short)i18;
                            break;
                        case 98:
                            Test.iFld += (((i18 * Test.lFld) + i18) - i);
                            sArr = FuzzerUtils.short1array(N, (short)-19248);
                            Test.byFld >>= (byte)Test.iFld;
                            break;
                        case 116:
                            Test.lFld ^= i18;
                            Test.lFld >>= 9L;
                            Test.fFld += (((i18 * i) + Test.instanceCount) - i15);
                            try {
                                i17 = (Test.iFld % 9681);
                                i16 = (Test.iFld % i);
                                Test.iFld = (-87 / Test.iArrFld[i18]);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.lFld = 141;
                        break;
                    case 34:
                        Test.iFld += i18;
                        break;
                    default:
                        Test.iFld >>= 205;
                    }
                } while (++i18 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
