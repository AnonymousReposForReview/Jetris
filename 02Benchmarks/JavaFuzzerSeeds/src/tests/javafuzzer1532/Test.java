package tests.javafuzzer1532;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:11:23 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2913941831L;
    public volatile int iFld=157;
    public static byte byFld=-65;
    public static float fFld=21.129F;
    public static short sFld=9977;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13389);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f1) {

        int i4=217, i5=-48672, i6=-11, i7=-33223, i8=-64526, iArr1[]=new int[N];
        float f2=-9.54F;

        FuzzerUtils.init(iArr1, 166);

        iArr1[(i4 >>> 1) % N] = i4;
        Test.byFld += (byte)f1;
        for (i5 = 22; i5 < 386; i5++) {
            double d2=-85.42939;
            if (true) break;
            d2 = Test.byFld;
        }
        Test.instanceCount *= i6;
        for (i7 = 5; i7 < 396; i7++) {
            iArr1[i7 - 1] += (int)f1;
            i6 += (((i7 * Test.instanceCount) + f2) - i8);
            i4 -= (int)Test.instanceCount;
            i8 += i7;
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i3) {

        double d1=1.51949;
        short s=-13945;
        int i10=26449, i11=-9, i12=-5, i13=17959, i14=43, i15=230, i16=19, iArr2[][]=new int[N][N];
        float f3=3.388F;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, -238);
        FuzzerUtils.init(bArr, false);

        d1 *= fMeth(Test.fFld);
        s -= (short)i3;
        for (i10 = 9; i10 < 316; i10++) {
            iArr2[i10 + 1] = FuzzerUtils.int1array(N, (int)-9);
            i3 += i11;
        }
        i11 -= i11;
        f3 += -2.164F;
        for (i12 = 18; i12 < 293; i12++) {
            i14 = 1;
            while (++i14 < 6) {
                for (i15 = 1; i15 > 1; --i15) {
                    bArr[i15 - 1] = b1;
                    f3 -= i14;
                    Test.fFld += -63619L;
                    s = (short)i11;
                    try {
                        i11 = (i12 % 23547);
                        iArr2[i15][i15] = (i11 / i15);
                        i11 = (-52983 / i10);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + s + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13 +
            i14 + i15 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(boolean b, int i) {

        int i1=-14, i2=3, i17=-4, i18=2, i19=8, iArr[]=new int[N];
        double d=-2.30501, d3=-72.84540;
        float f=-2.11F;

        FuzzerUtils.init(iArr, -8);

        for (i1 = 7; i1 < 130; i1 += 3) {
            d += ((++iArr[i1]) + (--Test.instanceCount));
            iFld <<= Math.abs((int)(i1 + (iFld * f)));
            vMeth1(195);
            for (d3 = 1; d3 < 37; ++d3) {
                i17 += iFld;
                i += (int)(-11153L + (d3 * d3));
                i += (int)Test.instanceCount;
                Test.instanceCount *= (long)f;
                i += (int)d3;
                switch (((i17 >>> 1) % 1) + 40) {
                case 40:
                    try {
                        iFld = (-75 / iArr[i1]);
                        iFld = (i2 / i2);
                        iArr[i1 + 1] = (i % i17);
                    } catch (ArithmeticException a_e) {}
                    for (i18 = 1; i18 < 2; i18++) {
                        Test.instanceCount -= i18;
                        i2 = i18;
                    }
                    break;
                default:
                    Test.byFld += (byte)(((d3 * Test.instanceCount) + i17) - Test.instanceCount);
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i + i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d3) + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i20=-249, i21=170, i23=-8990, i24=0, i25=-146, i26=-8889, i27=7912;

        vMeth(b2, iFld);
        for (i20 = 4; i20 < 164; i20 += 2) {
            iFld += (((i20 * iFld) + i20) - Test.instanceCount);
            i21 += i20;
            iFld = 3062;
            if (b2) break;
            i21 += i20;
            Test.instanceCount *= Test.byFld;
            Test.instanceCount += (i20 * i20);
            iFld = (int)Test.instanceCount;
            iFld = 14098;
        }
        Test.iArrFld[(i20 >>> 1) % N] = Test.sFld;
        for (int i22 : Test.iArrFld) {
            Test.instanceCount = i21;
            for (i23 = 63; i23 > 1; i23--) {
                for (i25 = 1; i25 < 2; ++i25) {
                    i26 = (int)Test.instanceCount;
                    i26 += i26;
                    i24 = i21;
                    i26 += (i25 * i25);
                    i21 += i23;
                    i26 ^= i26;
                    i26 = i25;
                    b2 = b2;
                }
                iFld *= i20;
            }
            i27 = 1;
            while (++i27 < 63) {
                i26 += (i27 * i27);
                i26 = iFld;
            }
        }
        Test.iArrFld[(iFld >>> 1) % N] += (int)Test.instanceCount;
        Test.instanceCount <<= i26;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
