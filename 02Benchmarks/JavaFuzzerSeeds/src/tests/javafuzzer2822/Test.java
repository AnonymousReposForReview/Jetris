package tests.javafuzzer2822;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:56:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static int iFld=237;
    public static short sFld=-27486;
    public static byte byFld=0;
    public static double dFld=74.1907;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, double d1, long l) {

        int i7=11, i8=241, i9=-234, i10=78, i11=-2, i12=-230, iArr[]=new int[N];
        float f=1.363F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-112);
        FuzzerUtils.init(iArr, -206);

        l *= i6;
        i6 >>>= i6;
        for (i7 = 9; i7 < 336; ++i7) {
            for (i9 = 1; i9 < 5; ++i9) {
                byArr[i7 + 1] = (byte)i6;
                for (i11 = 1; i11 < 2; ++i11) {
                    byte by=-11;
                    l = i9;
                    i6 += (((i11 * i10) + i12) - by);
                    l = i8;
                    i10 = (int)f;
                    switch ((i7 % 6) + 44) {
                    case 44:
                        i6 -= i7;
                        break;
                    case 45:
                        iArr = iArr;
                        i6 += (i11 + i12);
                        break;
                    case 46:
                        i12 = 5;
                        break;
                    case 47:
                        try {
                            i8 = (i8 / i6);
                            i6 = (i12 / i6);
                            i12 = (i6 % i9);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 48:
                        iArr[i9 + 1] ^= -224;
                    case 49:
                        Test.iFld = (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d1) + l + i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f)
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(boolean b, int i3, double d) {

        int i4=-25478, i5=-14, i13=-12, i14=6848, i15=180, iArr1[]=new int[N];
        float f1=1.329F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -109);
        FuzzerUtils.init(lArr, -2905308372L);

        i3 += (int)d;
        switch (((((int)(-1.57877 / (((long)(4058 - (-Float.intBitsToFloat(i3)))) | 1))) >>> 1) % 9) + 122) {
        case 122:
            for (i4 = 9; i4 < 187; i4++) {
                iMeth(i3, d, Test.instanceCount);
                i5 >>= 46128;
                for (i13 = 1; 9 > i13; i13++) {
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld += (((i13 * Test.iFld) + Test.sFld) - Test.instanceCount);
                    for (f1 = 2; f1 > 1; f1 -= 2) {
                        if (false) break;
                        Test.byFld >>= (byte)4010892194L;
                        iArr1[i13 + 1] = -48245;
                        i5 += (int)(((f1 * i13) + Test.sFld) - i15);
                        i5 <<= i5;
                        iArr1[(int)(f1 - 1)] = i13;
                    }
                }
            }
            break;
        case 123:
            Test.iFld += (int)f1;
            break;
        case 124:
            lArr[(i4 >>> 1) % N] = Test.iFld;
        case 125:
        case 126:
            i14 <<= i14;
        case 127:
            i5 = 23;
        case 128:
            i5 *= (int)Test.instanceCount;
            break;
        case 129:
            i5 += (int)d;
            break;
        case 130:
            i14 += 38;
        }
        vMeth1_check_sum += (b ? 1 : 0) + i3 + Double.doubleToLongBits(d) + i4 + i5 + i13 + i14 +
            Float.floatToIntBits(f1) + i15 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, int i1, int i2) {

        boolean b1=false;
        double d2=2.35618, d3=-9.63601;
        int i16=-223, i17=40, i18=252, i19=200, i20=13872, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -85);
        FuzzerUtils.init(iArr3, -4);
        FuzzerUtils.init(fArr, 47.794F);

        vMeth1(b1, i, d2);
        i16 = 1;
        while (++i16 < 375) {
            iArr2[i16 + 1] = (int)Test.instanceCount;
            i1 <<= i;
            iArr3 = iArr3;
        }
        switch (((-9 >>> 1) % 3) + 20) {
        case 20:
            Test.iFld = i;
            i2 += i1;
            if (b1) {
                i17 = 1;
                do {
                    for (d3 = 1; 11 > d3; ++d3) {
                        for (i19 = 1; i19 < 2; i19++) {
                            Test.byFld = (byte)i20;
                            Test.instanceCount <<= i18;
                            fArr[i19 + 1] = -12344;
                        }
                    }
                } while (++i17 < 138);
            } else if (b1) {
                i20 <<= i;
            }
            break;
        case 21:
            i18 -= i1;
            break;
        case 22:
            Test.instanceCount -= i1;
            break;
        }
        vMeth_check_sum += i + i1 + i2 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i16 + i17 +
            Double.doubleToLongBits(d3) + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=36675, i22=8372, i23=-6, i24=4, i25=7, i26=-50736, i27=238;
        float f2=-93.504F, fArr1[]=new float[N];
        long l1=-68198614595906153L, l2=-95L, lArr1[]=new long[N];
        boolean b3=true, b4=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, -1993106872L);
        FuzzerUtils.init(fArr1, -68.580F);

        vMeth(Test.iFld, Test.iFld, Test.iFld);
        for (i21 = 4; i21 < 232; ++i21) {
            i22 *= i22;
            f2 += i21;
            l1 = 1;
            while (++l1 < 110) {
                boolean b2=true;
                bArr[i21 - 1] = b2;
                i22 = i22;
            }
            Test.iFld += (i21 * i21);
            Test.dFld -= f2;
        }
        i22 <<= Test.iFld;
        lArr1[(i22 >>> 1) % N] += (long)f2;
        Test.iFld >>= i22;
        Test.byFld -= (byte)Test.iFld;
        for (l2 = 11; l2 < 193; l2++) {
            i23 <<= Test.iFld;
        }
        i22 *= i22;
        b3 = b3;
        i23 *= (int)f2;
        if (b3) {
            Test.instanceCount = i22;
            f2 = Test.iFld;
        } else if (b4) {
            for (i24 = 156; i24 > 4; i24--) {
                for (i26 = 165; i26 > 7; --i26) {
                    if (b3) break;
                    Test.dFld *= i26;
                }
                fArr1[i24 - 1] += i21;
                Test.iFld = i24;
                f2 = i26;
                Test.dFld += f2;
                Test.iFld = i25;
            }
        } else {
            Test.iFld = (int)-2L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
