package tests.javafuzzer1980;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public volatile boolean bFld=true;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, int i3) {

        int i4=40, i5=0, i6=41138, i7=-19005, i8=34794, iArr[]=new int[N];
        boolean b=true;
        float f2=-2.787F;
        byte by=82;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 130);
        FuzzerUtils.init(dArr, 1.129181);

        i3 = i3;
        switch (((i3 >>> 1) % 9) + 94) {
        case 94:
            i3 ^= i3;
            i3 |= (int)-23138L;
            i3 >>= i3;
            i4 = 1;
            while (++i4 < 233) {
                iArr[i4] %= -15753;
                for (i5 = 1; i5 < 7; i5++) {
                    for (i7 = 1; i7 < 2; i7 += 2) {
                        if (b) continue;
                        dArr[i4] += -118;
                        d -= i8;
                        Test.instanceCount = i6;
                        if (i3 != 0) {
                            vMeth2_check_sum += Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0)
                                + Float.floatToIntBits(f2) + by + FuzzerUtils.checkSum(iArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        i8 = (int)Test.instanceCount;
                    }
                }
            }
            break;
        case 95:
            b = b;
        case 96:
            b = b;
        case 97:
            i3 += (int)f2;
        case 98:
            i6 = i4;
        case 99:
            d -= Test.instanceCount;
        case 100:
            i8 = by;
            break;
        case 101:
            i6 = (int)f2;
            break;
        case 102:
            f2 += Test.instanceCount;
            break;
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) +
            Float.floatToIntBits(f2) + by + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(float f1, int i1) {

        int i2=13;
        double d1=0.54799;

        i2 = 1;
        while (++i2 < 323) {
            Test.instanceCount = ((Test.instanceCount++) + i2);
            vMeth2(d1, i2);
            f1 += i1;
            i1 = (int)Test.instanceCount;
            i1 = (int)f1;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i1 + i2 + Double.doubleToLongBits(d1);
    }

    public static void vMeth(float f, long l, int i) {

        double d2=-84.94637;
        boolean b1=false;
        int i9=49747, i10=1, i11=-5, i12=17665, i13=185, i14=4, iArr1[]=new int[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-25985);
        FuzzerUtils.init(iArr1, -127);

        if (b1) {
            vMeth1(f, -31589);
        } else if (b1) {
            i -= (int)d2;
            l = i;
            vMeth_check_sum += Float.floatToIntBits(f) + l + i + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i9 + i10
                + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
            return;
        } else {
            for (i9 = 267; i9 > 6; i9 -= 3) {
                sArr[i9][i9] = (short)i;
                Test.instanceCount += i10;
                iArr1[i9 + 1] += i9;
                for (i11 = 1; i11 < 18; ++i11) {
                    f -= -4;
                    Test.instanceCount += (i11 * i11);
                    switch ((i11 % 9) + 27) {
                    case 27:
                        for (i13 = 1; i13 < 2; ++i13) {
                            i12 *= (int)1469605855L;
                            i12 += (6 + (i13 * i13));
                        }
                        break;
                    case 28:
                        try {
                            i14 = (-53 % i14);
                            i = (i14 % 45949);
                            iArr1[i11] = (iArr1[i11] % i11);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 29:
                        i += (((i11 * i11) + l) - i10);
                    case 30:
                        Test.instanceCount += i11;
                        break;
                    case 31:
                        d2 = -81;
                    case 32:
                    case 33:
                    case 34:
                        i14 += (((i11 * i13) + Test.instanceCount) - i9);
                        break;
                    case 35:
                        i12 = i14;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i9 + i10 +
            i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f3=2.879F;
        int i15=-236, i16=-17985, i17=-146, i18=-59574, i19=-4, i20=-113, i21=11, i22=-117, iArr2[]=new int[N];
        short s=10973;
        double d3=31.32040;
        boolean b2=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, -10627);
        FuzzerUtils.init(byArr, (byte)-32);

        vMeth(f3, Test.instanceCount, i15);
        for (i16 = 3; i16 < 211; i16++) {
            s = (short)i15;
        }
        i17 >>= i16;
        for (i18 = 16; i18 < 308; ++i18) {
            i15 -= (int)Test.instanceCount;
            Test.instanceCount += i18;
            for (d3 = i18; d3 < 86; d3++) {
                i15 = (int)Test.instanceCount;
                i17 -= (int)Test.instanceCount;
                try {
                    i17 = (iArrFld[i18] / i20);
                    iArrFld[(int)(d3)] = (37184 / i15);
                    i19 = (i15 / i20);
                } catch (ArithmeticException a_e) {}
                f3 += i19;
                i15 &= i16;
            }
            i17 = s;
            for (i21 = 1; i21 < 86; i21++) {
                iArrFld[i21] -= (int)Test.instanceCount;
                i22 *= (int)1.121725;
                f3 -= i20;
            }
            iArrFld[i18 + 1] <<= 117;
            try {
                iArrFld[i18] = (17031 / i16);
                iArrFld[i18 - 1] = (230 / i22);
                i17 = (-28233 / i21);
            } catch (ArithmeticException a_e) {}
            i15 = s;
            try {
                i19 = (i22 / iArrFld[i18 - 1]);
                i19 = (iArrFld[i18 + 1] / i21);
                i15 = (i22 / -682670551);
            } catch (ArithmeticException a_e) {}
            f3 -= i16;
        }
        i17 >>= i22;
        iArrFld[(i22 >>> 1) % N] |= 1;
        if (b2) {
            i22 *= 11643;
            i15 -= (int)Test.instanceCount;
            iArr2[(i17 >>> 1) % N] = (int)f3;
        } else if (bFld) {
            byArr[(i17 >>> 1) % N] = (byte)i19;
        } else {
            i15 -= (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
