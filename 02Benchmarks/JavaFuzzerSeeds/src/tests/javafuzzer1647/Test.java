package tests.javafuzzer1647;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=159L;
    public static short sFld=29123;
    public byte byFld=70;
    public static double dFld=57.125895;
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-13160);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i13=1, i14=6, i15=-59727, i17=58117, i18=-2, iArr1[]=new int[N];
        float f=-2.542F;
        boolean b1=true;
        byte by=120;

        FuzzerUtils.init(iArr1, 164);

        Test.instanceCount = i13;
        Test.instanceCount = i13;
        i13 += (int)f;
        for (i14 = 199; i14 > 2; --i14) {
            i13 = (int)Test.instanceCount;
            f = i15;
            b1 = b1;
            for (i17 = i14; i17 < 8; i17++) {
                iArr1[i17 + 1] += i14;
                switch ((((i15 >>> 1) % 3) * 5) + 23) {
                case 24:
                    if (b1) {
                        if (b1) break;
                        i13 = i18;
                        Test.sArrFld[i17 - 1] = by;
                    } else {
                        i15 |= 19215;
                    }
                    break;
                case 34:
                    i18 -= i15;
                    break;
                case 27:
                    i18 += (i17 ^ i13);
                    break;
                }
            }
        }
        vMeth2_check_sum += i13 + Float.floatToIntBits(f) + i14 + i15 + (b1 ? 1 : 0) + i17 + i18 + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i5, int i6) {

        int i7=47268, i8=-55239, i9=246, i10=-251, i11=109, i12=-210, iArr[][]=new int[N][N];
        boolean b=true, bArr[]=new boolean[N];
        double d=0.95640;
        short s=-6184;
        float f1=2.309F;

        FuzzerUtils.init(iArr, -3882);
        FuzzerUtils.init(bArr, true);

        i5 = Math.min(i6, i5 * (-i6));
        for (i7 = 12; i7 < 282; ++i7) {
            try {
                i8 = (i7 / i6);
                i5 = (-1998092680 % i5);
                i6 = (iArr[i7 - 1][i7] / -186);
            } catch (ArithmeticException a_e) {}
            for (i9 = 1; i9 < 6; i9++) {
                bArr[i9 + 1] = (b = false);
                for (i11 = 1; i11 < 2; i11++) {
                    i10 += (i11 * i11);
                    vMeth2();
                    i8 = i7;
                    Test.instanceCount += (-14 + (i11 * i11));
                }
            }
            i8 += (int)d;
            switch (((i10 >>> 1) % 6) + 37) {
            case 37:
                i8 -= i11;
                i10 -= (int)121.90F;
                s -= (short)-190L;
                break;
            case 38:
                if (b) break;
                break;
            case 39:
                b = true;
                break;
            case 40:
                iArr[i7 - 1][i7 - 1] -= i11;
            case 41:
                if (i10 != 0) {
                    vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 +
                        Double.doubleToLongBits(d) + s + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(bArr);
                    return;
                }
            case 42:
                f1 += ((long)i7 | (long)i11);
            default:
                i10 *= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d) + s +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth() {

        int i=1, i1=-9, i2=-203, i3=194, i4=-12, i19=-250, iArr2[]=new int[N];
        float f2=0.892F, f3=0.641F;
        boolean b2=true;

        FuzzerUtils.init(iArr2, 5);

        i = i;
        if (b2) {
            for (i1 = 11; i1 < 183; i1++) {
                for (i3 = 1; i3 < 9; i3++) {
                    switch (((i1 % 4) * 5) + 68) {
                    case 88:
                        vMeth1(i, i1);
                        break;
                    case 78:
                        f2 -= i;
                        break;
                    case 84:
                        try {
                            i4 = (i4 % i);
                            i = (-149 % i3);
                            i4 = (iArr2[i1 + 1] / -1984063110);
                        } catch (ArithmeticException a_e) {}
                        lArrFld[i1 + 1] = 1491106701143160390L;
                        f2 *= i3;
                        break;
                    case 74:
                        for (f3 = 1; f3 < 2; f3++) {
                            Test.instanceCount <<= i3;
                            iArr2[i3 + 1] = (int)85.752F;
                            iArr2[(int)(f3)] = Test.sFld;
                            if (false) break;
                        }
                    default:
                        i4 = byFld;
                    }
                }
            }
        } else {
            i4 *= i1;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i19 + (b2 ? 1
            : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i20=217, i21=-13, i22=-160, i23=-38769, i24=-252, i25=13, i26=-12;
        float f4=-2.388F;

        vMeth();
        iArrFld[(-35022 >>> 1) % N] = iArrFld[(i20 >>> 1) % N];
        iArrFld[(2 >>> 1) % N] = FuzzerUtils.int1array(N, (int)-9);
        i20 = i20;
        for (i21 = 9; i21 < 236; ++i21) {
            iArrFld[i21][i21 - 1] = Test.sFld;
            Test.instanceCount += (-3168329879L + (i21 * i21));
            i20 = i22;
            Test.instanceCount <<= i22;
            Test.sFld = (short)i20;
        }
        i23 = 331;
        while (--i23 > 0) {
            i24 = 76;
            while (--i24 > 0) {
                i22 += i20;
                for (i25 = 1; i25 > 1; --i25) {
                    i20 += (i25 + i24);
                    i20 += -67;
                    i20 *= 33;
                    switch ((i24 % 2) + 16) {
                    case 16:
                        Test.instanceCount -= -34;
                        lArrFld[i24 - 1] *= (long)Test.dFld;
                        break;
                    case 17:
                    default:
                        Test.dFld *= i20;
                    }
                    Test.instanceCount >>= i25;
                    i22 ^= i26;
                    i22 -= (int)f4;
                }
                Test.instanceCount -= Test.instanceCount;
            }
            lArrFld = lArrFld;
            i26 *= i21;
            i22 = (int)Test.instanceCount;
            i22 *= i23;
            iArrFld[i23 + 1] = iArrFld[i23 + 1];
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
