package tests.javafuzzer90;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:13:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38L;
    public static float fFld=0.738F;
    public static double dFld=-2.94744;
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12051);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth(int i6, long l, float f) {

        boolean b=false;

        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        b = b;
        vMeth_check_sum += i6 + l + Float.floatToIntBits(f) + (b ? 1 : 0);
    }

    public static void vMeth2(int i11, int i12) {

        int i13=11, i14=62, i15=3, i16=-6, i17=163, i18=20875, i19=-216;
        byte by1=83;
        boolean b1=false;

        i13 = 1;
        do {
            for (i14 = i13; i14 < 6; ++i14) {
                for (i16 = 1; 1 > i16; ++i16) {
                    if (false) break;
                    i12 += (-5 + (i16 * i16));
                    if (b1) {
                        i11 += (((i16 * Test.instanceCount) + Test.instanceCount) - i16);
                        Test.iArrFld[i14] /= (int)(by1 | 1);
                    }
                    i11 = i11;
                    i17 |= i13;
                }
            }
            for (i18 = 1; i18 < 6; i18++) {
                i15 += i18;
                i15 -= i17;
                i15 *= i17;
            }
            Test.instanceCount -= Test.instanceCount;
        } while (++i13 < 276);
        vMeth2_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + i17 + by1 + (b1 ? 1 : 0) + i18 + i19;
    }

    public static void vMeth1(int i9, int i10) {

        int i20=220, i21=452, i22=7854, i23=57907, i24=2, i25=14, i26=-1, i27=-57, i28=3;
        boolean b2=true;

        vMeth2(i9, i10);
        for (i20 = 201; i20 > 11; i20--) {
            try {
                i10 = (i10 / i20);
                i9 = (Test.iArrFld[i20 - 1] / i9);
                i9 = (63938 / i21);
            } catch (ArithmeticException a_e) {}
            for (i22 = i20; i22 < 8; ++i22) {
                if (i23 != 0) {
                    vMeth1_check_sum += i9 + i10 + i20 + i21 + i22 + i23 + (b2 ? 1 : 0) + i24 + i25 + i26 + i27 + i28;
                    return;
                }
                if (b2) break;
                Test.dFld += -114;
                for (i24 = i22; i24 < 1; ++i24) {
                    Test.fFld /= (Test.instanceCount | 1);
                    Test.fFld -= i20;
                    if (i23 != 0) {
                        vMeth1_check_sum += i9 + i10 + i20 + i21 + i22 + i23 + (b2 ? 1 : 0) + i24 + i25 + i26 + i27 +
                            i28;
                        return;
                    }
                    Test.iArrFld[i20] = (int)Test.instanceCount;
                }
                for (i26 = 1; i26 < 1; ++i26) {
                    Test.iArrFld[i22 - 1] = i22;
                    try {
                        i9 = (i9 / i20);
                        i21 = (i26 / i9);
                        i9 = (171 % i28);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + i20 + i21 + i22 + i23 + (b2 ? 1 : 0) + i24 + i25 + i26 + i27 + i28;
    }

    public static int iMeth(int i7, float f1, int i8) {

        long l1=-3753559291L, l2=22825835L;
        int i29=-46, i30=7, i31=-34044, i32=4, i33=249, i34=-6862, i35=4;

        l1 = 1;
        while ((l1 += 2) < 183) {
            Test.instanceCount += l1;
            vMeth1(i7, i7);
            for (i29 = 1; i29 < 17; ++i29) {
                i30 = i7;
                for (l2 = 1; 2 > l2; l2++) {
                    Test.iArrFld[i29] += (int)l1;
                    i30 <<= 14;
                    i30 += (int)(((l2 * i29) + i7) - Test.instanceCount);
                }
            }
            i8 = i7;
            i32 += (int)(-52.125F + (l1 * l1));
            for (i33 = 1; i33 < 17; i33++) {
                i35 = 1;
                while ((i35 += 3) < 2) {
                    Test.dFld *= i30;
                    Test.dFld = -22868;
                }
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + i8 + l1 + i29 + i30 + l2 + i31 + i32 + i33 + i34 + i35;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-236, i1=-6698, i2=-8, i3=-19499, i4=-41871, i5=173, i36=130, i37=-420, i38=16962, iArr[]=new int[N];
        byte by=116;
        short s=-32690;
        boolean b3=false;
        long l3=5L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 21440);
        FuzzerUtils.init(lArr, 49354L);

        Test.fFld -= ((iArr[(i >>> 1) % N] >>= (i + i)) | (long)(Test.fFld + (Test.fFld + Test.instanceCount)));
        i -= i;
        i1 = 373;
        do {
            for (i2 = 5; i2 < 201; i2++) {
                iArr[i2 + 1] *= (i3--);
                for (i4 = 1; i4 < 2; ++i4) {
                    vMeth(i4, (long)(((--Test.iArrFld[i1]) - (i1 * 102.130332)) + (Test.instanceCount = (-(i3 + i5)))),
                        i5 + (i4 + (i2 + 147)));
                    by += (byte)(i4 ^ i4);
                }
                i3 = ((Test.iArrFld[i1] + (i5 - i5)) - (iMeth(i3, Test.fFld, i2) + s));
                i += i2;
                for (i36 = 1; i36 < 2; ++i36) {
                    i3 >>= i37;
                    Test.fFld += i5;
                    Test.fFld -= Test.instanceCount;
                    if (b3) continue;
                    Test.instanceCount += (i36 - l3);
                    Test.instanceCount = s;
                    i37 += (int)Test.instanceCount;
                    Test.fFld = i3;
                    i3 = i5;
                }
                Test.instanceCount *= Test.instanceCount;
                if (b3) {
                    i38 = 1;
                    while (++i38 < 2) {
                        i5 -= (int)Test.instanceCount;
                        by += (byte)Test.instanceCount;
                        i += (i38 | i5);
                        l3 += i38;
                        lArr[i2] = i4;
                        i /= (int)(s | 1);
                        if (b3) continue;
                    }
                } else if (b3) {
                    dArrFld[i2 - 1] = Test.dFld;
                } else {
                    Test.fFld += i4;
                }
            }
        } while ((i1 -= 3) > 0);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
