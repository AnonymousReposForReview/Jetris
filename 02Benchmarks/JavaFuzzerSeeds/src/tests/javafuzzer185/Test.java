package tests.javafuzzer185;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:35:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=62846L;
    public static short sFld=29104;
    public static volatile boolean bFld=true;
    public static byte byFld=82;
    public static int iFld=59807;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-23865);
        FuzzerUtils.init(Test.iArrFld, 4680);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {

        boolean b=false;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 241);

        b = (iArr[(i2 >>> 1) % N] != ((++Test.instanceCount) * (i1 -= (int)Test.instanceCount)));
        vSmallMeth_check_sum += i + i1 + i2 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(double d, byte by1) {

        int i5=-39537, i6=30068, i7=114, i8=-52160, i9=-53486;
        long l=-1071147649983891121L, lArr[]=new long[N];
        float f1=1.68F;
        boolean b1=false;

        FuzzerUtils.init(lArr, -57078L);

        for (i5 = 1; i5 < 265; ++i5) {
            for (l = i5; l < 6; l++) {
                Test.instanceCount = i6;
                lArr[i5 - 1] = i5;
                Test.sArrFld[i5 - 1] >>= (short)i6;
                for (i8 = 1; i8 > l; i8--) {
                    Test.iArrFld[i8] = (int)f1;
                    Test.instanceCount <<= i5;
                    f1 -= f1;
                }
                f1 += i7;
            }
            i9 *= i6;
            i7 = -55021;
            b1 = b1;
            f1 = i7;
        }
        i6 -= i6;
        long meth_res = Double.doubleToLongBits(d) + by1 + i5 + i6 + l + i7 + i8 + i9 + Float.floatToIntBits(f1) + (b1
            ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(byte by) {

        short s=3817;
        double d1=2.99702;
        int i10=227, i11=-12, i12=-180;
        float f2=0.686F;

        s += (short)lMeth(d1, by);
        if (Test.bFld) {
            for (i10 = 161; i10 > 4; i10 -= 2) {
                i11 <<= i11;
                if (i11 != 0) {
                }
                Test.iArrFld[i10 - 1] -= (int)10L;
                i11 += (int)(-659329883L + (i10 * i10));
                i11 += (((i10 * i11) + Test.instanceCount) - i11);
                f2 = 0.483F;
                i11 ^= (int)Test.instanceCount;
                i11 += (i10 | i10);
                i12 = 1;
                do {
                    if (Test.bFld) {
                        Test.instanceCount %= ((long)(d1) | 1);
                        i11 += (((i12 * Test.instanceCount) + i11) - i10);
                    } else {
                        i11 *= i11;
                    }
                } while (++i12 < 20);
            }
        } else if (true) {
            Test.bFld = Test.bFld;
        } else if (Test.bFld) {
            i11 = i12;
        } else {
            Test.instanceCount = Test.instanceCount;
        }
        long meth_res = by + s + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f2) + i12;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, int i4) {

        int i13=74, i14=14, i15=6823, i16=-7, i17=9, i18=13, i19=39267;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.122596);

        Test.sFld >>= (short)i4;
        vSmallMeth(i4++, iMeth1(Test.byFld), i4);
        for (i13 = 11; i13 < 183; i13++) {
            i15 = 1;
            while (++i15 < 9) {
                for (i16 = 1; 1 > i16; i16++) {
                    dArr = dArr;
                }
            }
            i14 = Test.sFld;
            i18 = 1;
            do {
                i14 >>>= 38616;
                Test.bFld = Test.bFld;
                i19 = 1;
                while (++i19 < 1) {
                    i14 += (((i19 * i15) + i17) - Test.instanceCount);
                    Test.byFld += (byte)(i19 * i19);
                    i14 = i16;
                    i17 -= i4;
                }
            } while (++i18 < 9);
        }
        long meth_res = Float.floatToIntBits(f) + i4 + i13 + i14 + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i3=51, i20=0, i21=-8, i22=-6, i23=0, i24=33706, i25=-7754, i26=-51089, i27=-71, i28=-5;
        float f3=2.1F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 4001692262L);

        for (int smallinvoc=0; smallinvoc<822; smallinvoc++) vSmallMeth(++i3, iMeth(f3, i3), i3);
        for (i20 = 3; i20 < 248; ++i20) {
            Test.iArrFld[i20 + 1] = i3;
            for (i22 = 5; i22 < 103; ++i22) {
                i3 >>>= -44458;
                for (i24 = 1; i24 < 2; ++i24) {
                    i25 >>>= i23;
                }
                if (Test.bFld) {
                    if (false) continue;
                } else if (false) {
                    Test.instanceCount += (((i22 * i3) + i24) - Test.byFld);
                } else {
                    Test.iArrFld[i22] = (int)-28.157F;
                    i21 = (int)2.831F;
                    lArr1[i20] = i24;
                    i23 *= i3;
                }
            }
            i21 += (((i20 * i3) + i3) - i24);
            switch ((((i3 >>> 1) % 2) * 5) + 110) {
            case 115:
                Test.instanceCount += i20;
                try {
                    Test.iArrFld[i20 - 1] = (197 % i22);
                    i23 = (i3 % 65406);
                    i21 = (i21 / i22);
                } catch (ArithmeticException a_e) {}
                break;
            case 117:
                i25 >>= 29;
                break;
            }
            Test.byFld = (byte)i3;
            switch ((i20 % 2) + 23) {
            case 23:
                Test.bFld = Test.bFld;
                for (i26 = 103; i26 > 6; i26--) {
                    i28 = 1;
                    while (++i28 < 2) {
                        if (false) {
                            i27 += (((i28 * i24) + Test.instanceCount) - Test.byFld);
                            Test.instanceCount += i21;
                            i25 -= i23;
                            i25 += i28;
                        }
                        i3 <<= i26;
                    }
                }
                break;
            case 24:
                Test.iFld = i3;
                break;
            default:
                lArr1[i20 - 1] -= i23;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
