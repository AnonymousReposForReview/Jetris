package tests.javafuzzer3115;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:04:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3613554604335425915L;
    public int iFld=-5235;
    public static boolean bFld=false;
    public static short sFld=22238;
    public static byte byFld=-7;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, long l, long l1) {


        Test.bFld = Test.bFld;
        long meth_res = Float.floatToIntBits(f1) + l + l1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(byte by, int i7) {

        int i8=7770, i9=0, i10=9, i11=5574, i12=-19, i13=-1, iArr[]=new int[N], iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr, -105);
        FuzzerUtils.init(iArr1, -17);

        for (i8 = 9; i8 < 282; ++i8) {
            float f=-2.649F;
            i9 *= (int)(f++);
            iArr = (iArr1[i8 + 1] = (iArr1[i8] = (iArr = FuzzerUtils.int1array(N, (int)-50620))));
            for (i10 = 1; i10 < 6; ++i10) {
                i9 &= (int)lMeth(f, Test.instanceCount, Test.instanceCount);
                i7 += (i10 - f);
                Test.bFld = Test.bFld;
                switch ((((i8 >>> 1) % 7) * 5) + 120) {
                case 139:
                    if (i9 != 0) {
                    }
                    for (i12 = i10; 2 > i12; i12++) {
                        try {
                            iArr1[i10 + 1][i12 - 1] = (i7 % -1031521707);
                            i9 = (i8 / 197);
                            i7 = (i11 % i9);
                        } catch (ArithmeticException a_e) {}
                        i9 = by;
                        Test.instanceCount += (long)f;
                        i13 = (int)f;
                    }
                case 132:
                    i13 += (i10 ^ Test.instanceCount);
                    break;
                case 125:
                    Test.instanceCount += 147;
                    break;
                case 127:
                    Test.bFld = Test.bFld;
                    break;
                case 148:
                    i7 += i10;
                case 128:
                    Test.instanceCount <<= 1;
                case 134:
                    Test.instanceCount = (long)2.5419;
                default:
                    try {
                        i11 = (109 % i8);
                        iArr1[i10 - 1][i10] = (i10 / iArr[i10 + 1]);
                        i11 = (i13 / -69);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = by + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=56662, i6=12, i14=-34258, i15=-102, i16=183, i17=-117, iArr2[]=new int[N];
        byte by1=97;
        double d=-5.71178;
        float f2=75.358F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.151F);
        FuzzerUtils.init(iArr2, -10);

        fArr[(i4 >>> 1) % N] *= Test.instanceCount;
        for (i5 = 4; i5 < 269; ++i5) {
            i6 = (int)(((i2 / (i5 | 1)) + fMeth(by1, i6)) + i4);
            iArr2 = iArr2;
            Test.bFld = true;
            for (i14 = 1; i14 < 6; i14++) {
                i6 = (int)Test.instanceCount;
                Test.instanceCount += (((i14 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                Test.instanceCount -= Test.instanceCount;
                i2 %= (int)(i3 | 1);
                for (i16 = 2; 1 < i16; --i16) {
                    Test.instanceCount ^= Test.sFld;
                    Test.instanceCount >>= i5;
                    Test.instanceCount -= i2;
                    d = f2;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + by1 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-46438, i1=-26, i18=40916, i19=12, i20=-4, i21=-63, i22=27797, i23=236, iArr3[]=new int[N];
        float f3=1.119F, fArr1[]=new float[N];
        double d1=-37.94594, d2=2.122572;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 0.414F);
        FuzzerUtils.init(iArr3, -33689);
        FuzzerUtils.init(lArr, -4282573875L);

        switch ((((203 - (--iFld)) >>> 1) % 9) + 40) {
        case 40:
            for (i = 1; i < 148; i++) {
                i1 += i;
                vMeth(iFld, i1, i);
                switch ((i % 2) + 88) {
                case 88:
                    Test.instanceCount -= 0;
                    iFld += (((i * i) + i) - f3);
                    Test.sFld += (short)d1;
                    if (Test.bFld) {
                        fArr1[i] = i;
                        for (i18 = 5; i18 < 171; i18++) {
                            Test.sFld += (short)i18;
                            iFld += i19;
                            i1 += (int)Test.instanceCount;
                            i19 += (-13 + (i18 * i18));
                        }
                        for (i20 = 2; i20 < 171; i20++) {
                            i22 = 1;
                            do {
                                switch (((i22 % 2) * 5) + 15) {
                                case 22:
                                    iFld = (int)Test.instanceCount;
                                    Test.sFld += (short)i;
                                    d2 -= i21;
                                    break;
                                case 18:
                                    Test.byFld = (byte)i21;
                                    Test.sFld -= (short)i19;
                                    break;
                                default:
                                    if (Test.bFld) continue;
                                }
                                iArr3[i20] >>>= i20;
                                f3 -= i22;
                                Test.sFld = (short)i18;
                                iFld = i22;
                                d2 = 24831L;
                                i21 = i19;
                            } while (++i22 < 2);
                        }
                    } else if (Test.bFld) {
                        if (Test.bFld) break;
                    } else if (false) {
                        Test.bFld = false;
                    } else {
                        f3 += (-21249 + (i * i));
                    }
                    break;
                case 89:
                default:
                    i19 = i19;
                }
            }
        case 41:
            Test.instanceCount *= i22;
            break;
        case 42:
            iArr3[(i21 >>> 1) % N] = (int)Test.instanceCount;
            break;
        case 43:
            iFld |= (int)Test.instanceCount;
            break;
        case 44:
            i21 = i23;
            break;
        case 45:
            iArr3[(i18 >>> 1) % N] = -2;
        case 46:
        case 47:
            lArr[(i20 >>> 1) % N] -= i19;
            break;
        case 48:
            Test.instanceCount = -47829;
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
