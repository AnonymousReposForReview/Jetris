package tests.javafuzzer2585;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:56:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2247146818667041239L;
    public float fFld=-78.598F;
    public static double dFld=0.31373;
    public static volatile float fFld1=-117.10F;
    public static short sFld=11527;
    public static volatile int iFld=-6925;
    public static int iFld1=14;
    public boolean bFld=true;
    public static volatile byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-9);
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static long lMeth() {

        int i3=-41;

        Test.instanceCount >>= Math.min(++i3, i3);
        long meth_res = i3;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, long l, int i6) {

        int i7=-10, i8=35, i9=47563, i10=-131, i11=7, i12=-35973;
        boolean b=true;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 8899L);
        FuzzerUtils.init(fArr, 0.674F);

        for (i7 = 14; i7 < 362; i7++) {
            float f=-46.266F;
            Test.dFld = f;
            for (i9 = 1; i9 < 5; i9++) {
                i6 += (((i9 * l) + i5) - Test.instanceCount);
                for (i11 = 1; i11 < 2; i11++) {
                    switch (((i9 % 2) * 5) + 103) {
                    case 107:
                        i6 -= -57;
                        i8 -= (int)f;
                        lArr[i7 - 1] -= i10;
                        if (b) continue;
                        break;
                    case 109:
                        i12 = (int)l;
                        l *= i5;
                        Test.instanceCount = l;
                        fArr[i9 + 1] *= i8;
                        break;
                    default:
                        i8 = (int)f;
                    }
                }
            }
        }
        vMeth1_check_sum += i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i4) {

        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -5L);

        vMeth1(-12438, Test.instanceCount, i4);
        Test.byArrFld[(i4 >>> 1) % N] <<= (byte)Test.instanceCount;
        lArr1[(i4 >>> 1) % N] -= i4;
        i4 -= i4;
        long meth_res = i4 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i13=101, i14=-195, i15=3, i16=-30707;
        boolean b1=false, bArr[]=new boolean[N];
        byte by=27;

        FuzzerUtils.init(bArr, true);

        Test.instanceCount += (++Test.instanceCount);
        i += (int)lMeth();
        i1 >>= (int)167L;
        Test.instanceCount -= iMeth(i);
        for (i13 = 12; i13 < 223; ++i13) {
            Test.instanceCount = -6;
            i14 += (i13 ^ i1);
            i2 = i14;
            switch ((((i2 >>> 1) % 8) * 5) + 55) {
            case 83:
                i2 += (1 + (i13 * i13));
                for (i15 = 8; 1 < i15; i15 -= 3) {
                    Test.iArrFld[i13 + 1] = (int)2536455945L;
                    bArr[i13 - 1] = b1;
                    if (i1 != 0) {
                        vMeth_check_sum += i + i1 + i2 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + by +
                            FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i2 = i13;
                }
            case 70:
                Test.iArrFld[i13 - 1] -= i16;
                break;
            case 94:
                i1 += i13;
                break;
            case 57:
                i2 += (225 + (i13 * i13));
                break;
            case 89:
                Test.instanceCount += (((i13 * i16) + i) - Test.fFld1);
                break;
            case 60:
                i2 *= i;
                break;
            case 87:
                Test.instanceCount = i14;
            case 93:
                Test.instanceCount -= by;
                break;
            default:
                i += (((i13 * by) + Test.sFld) - i15);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + by + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-55945, i19=56, i20=-13, i21=236, i22=-3081, i23=-5621, i24=3, i25=-38579;
        long l1=-293979277155503193L, l2=-1115905993L;
        byte by1=86;

        fFld -= (float)(Test.dFld--);
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        for (i18 = 4; i18 < 136; i18++) {
            if (true) continue;
            for (i20 = 9; i20 < 190; ++i20) {
                boolean b2=true;
                Test.instanceCount <<= -1124L;
                fFld += (((i20 * Test.iFld) + Test.iFld) - fFld);
                fFld = 65.88F;
                Test.iFld1 += i20;
                if (b2) {
                    Test.instanceCount += (((i20 * Test.instanceCount) + i21) - Test.iFld1);
                    l1 += i20;
                } else {
                    Test.iFld1 -= (int)-32133L;
                }
            }
        }
        l2 = 1;
        do {
            Test.instanceCount = Test.iFld1;
            for (i22 = 204; i22 > 12; i22 -= 2) {
                l1 = (long)Test.dFld;
                switch ((i22 % 8) + 7) {
                case 7:
                    for (i24 = (int)(l2); i24 < 3; ++i24) {
                        Test.iArrFld[(int)(l2)] = 8780;
                        Test.iFld1 = -33;
                        bFld = bFld;
                        Test.iFld >>= i18;
                        l1 = i25;
                        if (bFld) {
                            by1 |= (byte)Test.iFld1;
                            i19 *= (int)Test.instanceCount;
                        }
                        i21 *= i23;
                        bFld = bFld;
                        lArrFld[(Test.iFld >>> 1) % N] |= i25;
                    }
                    break;
                case 8:
                    Test.iArrFld[i22 + 1] *= (int)-37266L;
                    break;
                case 9:
                    Test.fFld1 = i18;
                    break;
                case 10:
                    i21 += (((i22 * i25) + i20) - i23);
                    break;
                case 11:
                    Test.iFld1 -= (int)27.652F;
                    break;
                case 12:
                    Test.iFld += (int)l2;
                case 13:
                    Test.iFld -= (int)7001272135904074542L;
                    break;
                case 14:
                }
            }
        } while (++l2 < 123);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
