package tests.javafuzzer2528;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:14:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2408899590649044954L;
    public short sFld=-30811;
    public static boolean bFld=false;
    public static byte byFld=-108;
    public static float fFld=-25.349F;
    public static double dFld=20.116468;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.lArrFld, -205L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10) {

        int i11=4, i12=-38026, i14=-48567, i15=8, i16=26, i17=-11519;
        double d=0.79944;
        float f2=-1.433F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.instanceCount = 13732;
        for (i11 = 1; i11 < 183; ++i11) {
            i12 -= (int)Test.instanceCount;
            switch ((i11 % 2) + 78) {
            case 78:
                i12 = i11;
                d = i12;
                i10 *= (int)Test.instanceCount;
                break;
            case 79:
                i12 = i11;
                for (i14 = 1; i14 < 9; i14++) {
                    i15 += (int)f2;
                    i12 = i12;
                    for (i16 = 1; 2 > i16; i16++) {
                        boolean b=true;
                        bArr[i16 + 1] = b;
                    }
                    f2 -= Test.instanceCount;
                    i17 = (int)d;
                }
                break;
            default:
                Test.instanceCount *= i16;
            }
        }
        vMeth1_check_sum += i10 + i11 + i12 + Double.doubleToLongBits(d) + i14 + i15 + Float.floatToIntBits(f2) + i16 +
            i17 + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(float f, float f1) {

        int i5=-35506, i6=41861, i7=14, i8=177, i9=89, i18=-61, i19=6;
        long l1=-11L;
        short s1=-8502;

        for (i5 = 9; i5 < 201; ++i5) {
            i6 += (i5 + f1);
            for (l1 = i5; l1 < 8; ++l1) {
                i7 = i6;
            }
            i7 += (int)(2L + (i5 * i5));
            for (i8 = i5; 8 > i8; i8++) {
                i9 += i8;
                Test.iArrFld[i5] = (int)(Test.instanceCount - Test.iArrFld[i8]);
                vMeth1(i9);
            }
            if (Test.bFld) {
                for (i18 = 1; i18 < 8; ++i18) {
                    Test.instanceCount -= i7;
                    i6 = i19;
                    i6 += (((i18 * Test.instanceCount) + i5) - i7);
                    Test.lArrFld[i18 - 1] = (long)-2.323F;
                }
                vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + l1 + i7 + i8 + i9 +
                    i18 + i19 + s1;
                return;
            } else {
                i19 <<= s1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + l1 + i7 + i8 + i9 + i18 + i19
            + s1;
    }

    public static int iMeth(long l, int i3, int i4) {

        short s=-19151;
        float f3=2.461F;
        int i20=0, i21=-1;

        s = (short)((Test.instanceCount--) - (--i4));
        vMeth(f3, f3);
        Test.iArrFld[(-1 >>> 1) % N] = (int)-976129428L;
        for (i20 = 1; i20 < 168; i20++) {
            switch ((i20 % 4) + 87) {
            case 87:
                i3 <<= i21;
                Test.instanceCount += i20;
                Test.instanceCount = (long)f3;
                Test.lArrFld[i20] = i20;
                break;
            case 88:
                Test.instanceCount -= i4;
                break;
            case 89:
            case 90:
                if (i20 != 0) {
                }
                break;
            }
        }
        Test.byFld &= Test.byFld;
        Test.instanceCount = i3;
        i4 = (int)f3;
        long meth_res = l + i3 + i4 + s + Float.floatToIntBits(f3) + i20 + i21;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=168, i1=24543, i2=52543, i22=2, i23=-35209, i24=-109, i25=19597, i26=7, i27=146, i28=-206, i29=9, i30=0,
            i31=12566, i32=145, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -254);
        FuzzerUtils.init(fArr, -108.267F);

        sFld = (short)4;
        i -= Math.min(i, iArr[(i >>> 1) % N]);
        for (i1 = 6; i1 < 273; i1++) {
            fArr[i1 - 1] -= (iMeth(Test.instanceCount, i, i2) * Test.instanceCount);
            iArr[i1 - 1] = (int)Test.instanceCount;
        }
        i -= i22;
        for (i23 = 3; 341 > i23; ++i23) {
            i24 = i2;
        }
        for (i25 = 260; 16 < i25; --i25) {
            i27 = 1;
            while (++i27 < 103) {
                for (i28 = 1; 1 > i28; i28++) {
                    try {
                        i22 = (Test.iArrFld[i28] / i26);
                        i2 = (i28 % -551288471);
                        Test.iArrFld[i28 + 1] = (i28 / i26);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i28;
                    i24 += -31359;
                    i29 &= i29;
                }
                Test.fFld -= i27;
                Test.fFld -= i26;
                Test.instanceCount -= i29;
                Test.lArrFld[i25] = 42965;
                Test.iArrFld[i27 - 1] = i22;
                i >>= i23;
                if (Test.bFld) {
                    i22 = (int)Test.instanceCount;
                    i29 -= i25;
                    Test.instanceCount >>= i30;
                    Test.lArrFld[i27] += i23;
                } else if (Test.bFld) {
                    for (i31 = i27; i31 < 1; i31++) {
                        i32 += i27;
                        Test.dFld = i32;
                        Test.fFld = sFld;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
