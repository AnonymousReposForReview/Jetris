package tests.javafuzzer3104;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:49:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-160L;
    public static short sFld=-2570;
    public float fFld=-27.909F;
    public static volatile byte byFld=-65;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.dArrFld, 2.24779);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l1, int i3) {

        int i4=44, i5=154, i6=17, i7=-33707, i8=-60184, iArr[]=new int[N];
        float f1=33.604F;
        double d1=-36.69307;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -71L);
        FuzzerUtils.init(iArr, -42593);

        for (i4 = 11; i4 < 264; ++i4) {
            i5 = 13;
            i6 = 1;
            do {
                Test.instanceCount *= l1;
                lArr[i4 + 1] = i5;
                i5 = i4;
                l1 <<= -62919;
                i2 = (int)f1;
                f1 *= i2;
                f1 *= Test.instanceCount;
                i2 = i6;
            } while (++i6 < 6);
            for (i7 = 1; 6 > i7; i7++) {
                i2 += i4;
                i2 += (int)d1;
                iArr[i7 + 1] += i4;
            }
        }
        vMeth1_check_sum += i2 + l1 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, float f, int i1) {

        int i9=10, i10=-30411, i11=236, iArr1[]=new int[N];
        double d2=2.6616;
        boolean b=false;

        FuzzerUtils.init(iArr1, 5);

        vMeth1(i, Test.instanceCount, i);
        i = (int)Test.instanceCount;
        iArr1[(i >>> 1) % N] = (int)f;
        if (b) {
            for (i9 = 251; 8 < i9; --i9) {
                i1 += (((i9 * Test.instanceCount) + f) - i10);
                d2 = i1;
                i11 = 7;
                do {
                    iArr1[i9 - 1] = i10;
                } while (--i11 > 0);
                f *= i1;
                iArr1[i9] = -239;
                i -= i10;
            }
            f = i11;
            i10 += i1;
            d2 -= i9;
            vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i9 + i10 + Double.doubleToLongBits(d2) + i11 + (b ? 1
                : 0) + FuzzerUtils.checkSum(iArr1);
            return;
        } else if (true) {
            f -= i1;
        } else {
            i10 += i10;
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i9 + i10 + Double.doubleToLongBits(d2) + i11 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(long l, double d) {

        int i13=76;
        float f2=38.272F;

        vMeth(i13, f2, i13);
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d) + i13 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i14=27632, i15=-37595, i16=-43281, i17=-224, i18=18788, i19=109, iArr2[]=new int[N];
        boolean b1=true;
        double d3=0.81795;

        FuzzerUtils.init(iArr2, 51);

        for (int smallinvoc=0; smallinvoc<746; smallinvoc++) vSmallMeth(Test.instanceCount, 78.35133);
        for (i14 = 5; i14 < 306; i14++) {
            Test.instanceCount *= i14;
            i15 = (int)Test.instanceCount;
            i15 += i14;
            Test.instanceCount = i14;
            Test.sFld = (short)i14;
            if (b1) break;
            Test.instanceCount -= -166;
            for (i16 = 3; 84 > i16; ++i16) {
                switch ((i16 % 4) + 5) {
                case 5:
                    Test.instanceCount &= i14;
                    break;
                case 6:
                    i15 -= i16;
                    fFld += (i16 + Test.instanceCount);
                    switch (((i16 % 5) * 5) + 47) {
                    case 64:
                        d3 += -57;
                        Test.sFld += (short)i16;
                        break;
                    case 54:
                        d3 = fFld;
                        switch ((i16 % 6) + 62) {
                        case 62:
                            fFld *= 24712;
                            if (b1) continue;
                            i15 += i15;
                            Test.lArrFld[i16 - 1] = i17;
                            break;
                        case 63:
                            for (i18 = 1; i18 < 2; ++i18) {
                                i17 = i14;
                                i15 = Test.sFld;
                                iArr2[i14 + 1] = (int)Test.instanceCount;
                                try {
                                    i17 = (iArr2[i14] / -27831);
                                    iArr2[i18 + 1] = (i17 % i18);
                                    iArr2[i18 + 1] = (i18 % 174);
                                } catch (ArithmeticException a_e) {}
                                fFld = Test.instanceCount;
                                Test.instanceCount *= Test.byFld;
                            }
                        case 64:
                            i17 *= (int)Test.instanceCount;
                            break;
                        case 65:
                            Test.dArrFld[i16] /= (i17 | 1);
                            break;
                        case 66:
                            i19 += (((i16 * Test.byFld) + i15) - Test.instanceCount);
                            break;
                        case 67:
                            i17 = i19;
                            break;
                        }
                        break;
                    case 53:
                        Test.instanceCount = i17;
                        break;
                    case 61:
                        iArr2[i16] -= 194;
                        break;
                    case 71:
                        i15 += i16;
                        break;
                    }
                    break;
                case 7:
                    fFld = -13;
                    break;
                case 8:
                    Test.byFld *= (byte)i16;
                    break;
                default:
                    i15 = (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
