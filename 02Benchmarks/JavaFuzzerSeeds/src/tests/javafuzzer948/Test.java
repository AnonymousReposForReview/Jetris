package tests.javafuzzer948;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:54:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1382632542620798284L;
    public static float fFld=-32.568F;
    public static boolean bFld=true;
    public byte byFld=54;
    public static short sFld=6579;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i4) {

        float f=48.949F, f1=-118.17F;
        int i5=2, i6=6, i7=-11, i8=-12441, i9=130, iArr[][]=new int[N][N], iArr1[]=new int[N];

        FuzzerUtils.init(iArr, 251);
        FuzzerUtils.init(iArr1, 15590);

        Test.instanceCount = (long)f;
        switch (((112 >>> 1) % 5) + 62) {
        case 62:
            iArr[(6 >>> 1) % N][(i4 >>> 1) % N] += -10386;
            break;
        case 63:
            i4 *= (int)f1;
            break;
        case 64:
            i4 = (int)f;
            i4 *= i4;
            break;
        case 65:
            i4 ^= i4;
            Test.instanceCount *= Test.instanceCount;
            for (i5 = 10; 310 > i5; ++i5) {
                Test.instanceCount += i7;
                i7 += i5;
            }
            break;
        case 66:
            i4 -= i6;
            for (i8 = 6; i8 < 129; ++i8) {
                Test.instanceCount += i8;
                iArr = FuzzerUtils.int2array(N, (int)119);
            }
            break;
        }
        long meth_res = i4 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.312F);

        i2 *= (int)(dMeth(i2) - Test.fFld);
        fArr[(i2 >>> 1) % N] *= Test.instanceCount;
        long meth_res = i2 + i3 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(double d) {

        int i1=22, i11=-63, i12=-198, i13=-3410, i14=15011, i15=-11, iArr2[]=new int[N];
        long l=-1L;

        FuzzerUtils.init(iArr2, -254);

        i1 += i1;
        i1 *= (int)lMeth(-136, i1);
        i11 = 1;
        while (++i11 < 394) {
            iArr2[i11 - 1] = i1;
            for (i12 = 1; i12 < 4; i12 += 2) {
                i1 += (i12 | i12);
                for (i14 = 1; i14 < 4; i14++) {
                    Test.instanceCount |= Test.instanceCount;
                    iArr2[i14 - 1] += 224;
                    Test.instanceCount *= i14;
                    if (Test.bFld) continue;
                    Test.bFld = Test.bFld;
                }
                i15 = i15;
                i1 -= 36500;
                d -= l;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i11 + i12 + i13 + i14 + i15 + l +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i16=-54330, i17=-11, i18=187, i19=34984, i20=180, i21=-164, i22=-13, i23=-11816, iArr3[]=new int[N];
        double d1=-2.118660, d2=0.3663;
        float f2=105.664F, fArr1[]=new float[N];
        long l1=4488148306040937208L, lArr[]=new long[N];

        FuzzerUtils.init(iArr3, -31);
        FuzzerUtils.init(lArr, -2L);
        FuzzerUtils.init(fArr1, 0.124F);

        i = 1;
        do {
            vMeth(d1);
            for (f2 = i; f2 < 93; f2++) {
                Test.fFld += i;
                byFld += (byte)f2;
                Test.fFld += Test.instanceCount;
                i16 = i16;
            }
            for (d2 = 3; d2 < 93; ++d2) {
                i17 += (int)(((d2 * f2) + f2) - i16);
                try {
                    i16 = (i17 / i);
                    i16 = (-51348 / i);
                    iArr3[i] = (i17 % i16);
                } catch (ArithmeticException a_e) {}
                i17 += (int)(((d2 * f2) + i) - i);
                byFld = (byte)-2.85242;
            }
            i17 += i;
            i16 = (int)Test.instanceCount;
            for (i18 = 3; i18 < 93; i18++) {
                i16 >>= (int)2507191087651396798L;
                i17 = i17;
            }
            i17 -= Test.sFld;
            i20 = 1;
            do {
                i16 += (int)-8L;
            } while (++i20 < 93);
            Test.instanceCount += (((i * l1) + i17) - Test.instanceCount);
            i17 += i16;
        } while (++i < 270);
        for (i21 = 1; i21 < 130; i21++) {
            Test.instanceCount |= i16;
            Test.instanceCount -= l1;
            i23 = 1;
            do {
                iArr3[i21 - 1] += (int)-9L;
                lArr[i23] ^= Test.instanceCount;
                fArr1[i23 + 1] = 1.112F;
            } while (++i23 < 194);
            iArr3[i21 + 1] %= (int)-61496L;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
