package tests.javafuzzer1745;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:59:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26L;
    public float fFld=-1.752F;
    public static double dFld=-97.49612;
    public static int iFld=-12;
    public static double dFld1=18.63828;
    public boolean bFld=true;
    public static short sFld=-13988;
    public static float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.170F);
        FuzzerUtils.init(Test.iArrFld1, -57052);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i1=6769, iArr[]=new int[N];
        byte by1=125;

        FuzzerUtils.init(iArr, -1);

        iArr[(i1 >>> 1) % N] >>>= (int)(((-(-12320 * Test.instanceCount)) + (--iArr[(-93 >>> 1) % N])) + 49.547F);
        by1 %= (byte)(((--iArr[(i1 >>> 1) % N]) + Long.reverseBytes(Test.instanceCount++)) | 1);
        vSmallMeth_check_sum += i1 + by1 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(double d, long l, double d1) {

        int i8=12, i9=7, i10=-11, i11=170, i12=-27, i13=-12, iArr2[]=new int[N];
        float f1=1.405F;
        boolean b=false;

        FuzzerUtils.init(iArr2, -31642);

        vSmallMeth();
        for (i8 = 1; i8 < 256; ++i8) {
            for (i10 = 6; i8 < i10; i10--) {
                switch (((i8 % 1) * 5) + 120) {
                case 125:
                    i11 += (((i10 * i11) + f1) - i8);
                    for (i12 = 1; 1 > i12; ++i12) {
                        if (b) {
                            iArr2[i10] += i8;
                            Test.instanceCount += Test.instanceCount;
                            i11 |= (int)-16255L;
                        } else {
                            i9 -= 175;
                        }
                        i13 += (((i12 * i11) + i8) - i12);
                        i13 <<= i9;
                        i13 = i11;
                        i9 = i11;
                    }
                    break;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 +
            Float.floatToIntBits(f1) + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3, float f) {

        int i4=-1994, i5=-154, i6=3354, i7=-19826, i14=8, i15=-28494, i16=-34141, iArr1[]=new int[N];
        short s=-960;
        float f2=-2.453F;
        byte by2=105;

        FuzzerUtils.init(iArr1, 41457);

        for (i4 = 12; i4 < 218; i4++) {
            i3 += (-5 + (i4 * i4));
            Test.instanceCount *= ((7130083946880786605L + (Test.instanceCount--)) - (s ^ (i5 + Test.instanceCount)));
            for (i6 = 1; i6 < 8; i6++) {
                iArr1[i4] = iMeth1(Test.dFld, Test.instanceCount, Test.dFld);
            }
            f += f;
            Test.fArrFld[i4 - 1][i4 - 1] -= i6;
            f2 = 1;
            do {
                Test.instanceCount *= i6;
                i7 = i6;
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.instanceCount += Test.instanceCount;
                }
                i16 >>= (int)Test.instanceCount;
                Test.iFld -= i6;
                Test.iFld = by2;
            } while (++f2 < 8);
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + s + i6 + i7 + Float.floatToIntBits(f2) + i14 +
            i15 + i16 + by2 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-33, i17=-29, i18=37832, i19=-6, i20=0, i21=-104, i22=-6, i23=49312;
        byte by=-63;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -28.8752);

        Test.fArrFld[(i >>> 1) % N][(-4 >>> 1) % N] = by;
        for (int smallinvoc=0; smallinvoc<328; smallinvoc++) vSmallMeth();
        i = (int)(((fFld - i) - iMeth(Test.iFld, Test.iFld, fFld)) - -7);
        iArrFld[(127 >>> 1) % N] = (int)Test.instanceCount;
        for (i17 = 5; i17 < 179; ++i17) {
            iArrFld[i17] <<= i17;
            i18 = (int)fFld;
            Test.iArrFld1 = iArrFld;
            switch (((i17 % 1) * 5) + 66) {
            case 69:
                Test.instanceCount += Test.instanceCount;
                for (i19 = 6; 144 > i19; i19++) {
                    Test.dFld += 11;
                    for (i21 = i17; i21 < 2; i21++) {
                        Test.instanceCount += (155L + (i21 * i21));
                        switch (((-104 >>> 1) % 8) + 124) {
                        case 124:
                            dArr[i17] *= fFld;
                            Test.iFld = i22;
                            Test.iFld -= (int)Test.dFld;
                            Test.iFld += (i21 * i21);
                            break;
                        case 125:
                            i18 = i;
                            i18 += (i21 + fFld);
                            i20 += (int)Test.instanceCount;
                            i += (-10 + (i21 * i21));
                            break;
                        case 126:
                            i20 += (i21 * i21);
                            Test.dFld1 -= Test.instanceCount;
                            break;
                        case 127:
                            if (bFld) continue;
                            if (bFld) {
                                i20 >>= 14;
                                i *= i23;
                                i20 ^= (int)Test.instanceCount;
                            }
                            break;
                        case 128:
                        case 129:
                            by *= (byte)i17;
                            break;
                        case 130:
                        case 131:
                            by += (byte)Test.sFld;
                            break;
                        default:
                            if (bFld) break;
                        }
                    }
                }
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth1 iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
