package tests.javafuzzer1735;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:43:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58102L;
    public boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[][]=new double[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -213);
        FuzzerUtils.init(Test.dArrFld, -1.90524);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, short s1) {

        int i5=0, i6=-10, i7=-12, i8=-69;
        float f=0.69F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr, -56.304F);

        for (i5 = 139; i5 > 7; i5--) {
            Test.instanceCount >>= s1;
            switch ((i5 % 7) + 34) {
            case 34:
                f -= i6;
                i6 += (0 + (i5 * i5));
                for (i7 = i5; 12 > i7; i7++) {
                    byte by=-107;
                    i4 >>= i7;
                    i4 %= (int)(i5 | 1);
                    if (b) continue;
                    s1 += (short)(i7 * i7);
                    i4 += i7;
                    Test.iArrFld[i7][i5 - 1] += i8;
                    b = b;
                    by -= (byte)i8;
                    i6 = i4;
                }
            case 35:
                Test.iArrFld = Test.iArrFld;
                break;
            case 36:
                i8 += (((i5 * Test.instanceCount) + i4) - i4);
            case 37:
                i8 += (((i5 * i6) + i6) - i6);
                break;
            case 38:
                fArr[i5] += i5;
                break;
            case 39:
                i6 ^= (int)Test.instanceCount;
                break;
            case 40:
                i4 = (int)1.55F;
                break;
            }
        }
        vMeth1_check_sum += i4 + s1 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static short sMeth(double d, short s) {

        int i9=21254;

        vMeth1(i9, s);
        long meth_res = Double.doubleToLongBits(d) + s + i9;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        int i1=-11, i2=226, i3=1, i10=-8, i11=-12, i12=41738, i13=-3;
        double d1=-91.83885;
        float f1=2.100F;
        short s3=1462;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)1);

        for (i1 = 7; i1 < 143; ++i1) {
            i3 = 1;
            do {
                short s2=24573;
                Test.instanceCount = ((sMeth(d1, s2) * Test.instanceCount) + i3);
            } while (++i3 < 12);
            i2 = i2;
            for (i10 = 1; i10 < 12; i10++) {
                f1 += (32725 + (i10 * i10));
                for (i12 = 1; i12 < 2; ++i12) {
                    i13 *= i3;
                    byArr[i12][i1 - 1] >>>= (byte)i2;
                    Test.dArrFld[i1][i12] -= i2;
                    Test.instanceCount += 216;
                }
                d1 *= Test.instanceCount;
                Test.instanceCount = s3;
                Test.instanceCount += i10;
                i13 += (i10 + f1);
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) + i12 +
            i13 + s3 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-142, i15=61951, i16=6, i17=10850, i18=-29757, i19=-227, i20=61231, i21=172, i22=7, iArr[]=new int[N];
        double d2=74.126384;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -63899L);
        FuzzerUtils.init(iArr, 0);

        lArr[(i >>> 1) % N] = Test.instanceCount;
        vMeth();
        for (float f2 : fArrFld) {
            i = 11;
            i -= i;
            if (bFld) break;
            lArr = FuzzerUtils.long1array(N, (long)156L);
            for (i15 = 2; i15 < 63; ++i15) {
                Test.instanceCount += i15;
            }
            if (bFld) continue;
            i16 = i;
            switch (((42403 >>> 1) % 4) + 104) {
            case 104:
                for (i17 = 2; i17 < 63; i17++) {
                    Test.instanceCount >>= Test.instanceCount;
                    for (i19 = 1; i19 < 2; ++i19) {
                        i16 += (int)113.794F;
                        i16 >>>= (int)Test.instanceCount;
                    }
                    f2 += (i17 * f2);
                }
                break;
            case 105:
                f2 += i17;
            case 106:
                if (bFld) {
                    i20 >>= i19;
                    Test.instanceCount *= Test.instanceCount;
                    i16 *= -112;
                } else if (bFld) {
                    for (i21 = 1; i21 < 63; i21++) {
                        lArr[i21 - 1] *= i15;
                        switch ((i21 % 2) + 56) {
                        case 56:
                            Test.instanceCount += (i21 * i21);
                            d2 -= Test.instanceCount;
                            break;
                        case 57:
                            lArr[i21] = i22;
                            d2 = Test.instanceCount;
                            break;
                        default:
                            Test.iArrFld[i21][i21] += (int)f2;
                        }
                    }
                }
                break;
            case 107:
            default:
                i16 -= (int)Test.instanceCount;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
