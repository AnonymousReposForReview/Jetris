package tests.javafuzzer2348;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:04:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-35817L;
    public static int iFld=-26;
    public static byte byFld=1;
    public static volatile float fFld=-39.990F;
    public short sFld=-17011;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f1=0.62F, fArr[]=new float[N];
        int i1=-63121, i3=15888, i4=73, i5=244, iArr1[]=new int[N];
        double d=102.2569, d1=63.117053, dArr[][]=new double[N][N];
        byte by=112;

        FuzzerUtils.init(fArr, -2.1006F);
        FuzzerUtils.init(iArr1, 6);
        FuzzerUtils.init(dArr, -1.87295);

        for (f1 = 17; f1 < 384; ++f1) {
            int i2=-8;
            fArr[(int)(f1 - 1)] = Test.instanceCount;
            switch ((int)((f1 % 4) + 4)) {
            case 4:
                i2 <<= (int)Test.instanceCount;
                for (d = 5; d > 1; d -= 3) {
                    d1 *= Test.instanceCount;
                    i1 <<= (int)Test.instanceCount;
                    iArr1[(int)(f1 + 1)] -= 155;
                    d1 = by;
                    dArr[(int)(d - 1)][(int)(d + 1)] = i1;
                }
                break;
            case 5:
                for (i4 = 1; i4 < 5; i4++) {
                    i2 = (int)f1;
                }
                Test.instanceCount += (long)((long)f1 ^ i2);
                break;
            case 6:
                i2 = i4;
                break;
            case 7:
                iArr1 = iArr1;
                break;
            default:
                i1 -= i5;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d) + i3 +
            Double.doubleToLongBits(d1) + by + i4 + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1(long l, int i) {

        int i6=-9562, i7=177, i8=34734, i9=47174, iArr2[]=new int[N];
        double d2=-104.56895, dArr1[]=new double[N];
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)49);
        FuzzerUtils.init(dArr1, -1.71829);
        FuzzerUtils.init(iArr2, -4);
        FuzzerUtils.init(lArr, 126981175863691906L);

        vMeth();
        for (i6 = 21; i6 < 353; ++i6) {
            l -= 2;
            i = (int)d2;
            for (i8 = 1; i8 < 5; ++i8) {
                Test.instanceCount += (i8 | Test.byFld);
                i9 += (-68 + (i8 * i8));
                byArr[i8] = (byte)i8;
                dArr1[i6 + 1] *= i9;
                Test.instanceCount >>= -142;
                iArr2[i6 + 1] -= i8;
                lArr[i6] = i8;
            }
            Test.iFld = i9;
            Test.iFld = i;
        }
        Test.instanceCount = i9;
        long meth_res = l + i + i6 + i7 + Double.doubleToLongBits(d2) + i8 + i9 + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f=0.435F, f2=0.229F;
        int i10=212, i11=3, i12=-200, i13=17;
        double d3=67.40819;
        boolean b=false, b1=false;

        f *= iMeth1(-1101293943L, Test.iFld);
        for (i10 = 18; 386 > i10; ++i10) {
            Test.iFld += (((i10 * i10) + f) - Test.iFld);
            i11 = Test.iFld;
            switch (((i11 >>> 1) % 1) + 1) {
            case 1:
                d3 -= d3;
            }
            if (b) {
                i11 = (int)f;
                Test.iFld = (int)Test.instanceCount;
            } else if (b1) {
                f2 = 1;
                while (++f2 < 5) {
                    i11 = (int)d3;
                    i11 += (int)Test.instanceCount;
                    for (i12 = 1; i12 < 1; ++i12) {
                        Test.iFld = i13;
                        i11 = i11;
                    }
                }
            } else {
                Test.iFld = i10;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i10 + i11 + Double.doubleToLongBits(d3) + Float.floatToIntBits(f2) +
            i12 + i13 + (b ? 1 : 0) + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-5, i15=7085, i16=245, i17=8, i18=-153, i19=-20, i20=-6, i21=-33379, i22=-64036, i23=-5318, iArr[]=new
            int[N];
        boolean b2=true, bArr[]=new boolean[N];
        long lArr1[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 6291);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, -53L);
        FuzzerUtils.init(fArr1, 30.569F);

        iArr[(Test.iFld >>> 1) % N] -= iMeth();
        Test.iFld <<= Test.iFld;
        for (i14 = 1; i14 < 391; i14 += 3) {
            for (i16 = 193; i16 > 5; i16--) {
                i15 -= (int)Test.instanceCount;
                iArr[i14 + 1] >>= 19263;
                i17 *= i16;
                for (i18 = 2; i18 > 1; --i18) {
                    switch (((i15 >>> 1) % 2) + 15) {
                    case 15:
                        iArr[i18] <<= i17;
                        Test.fFld -= Test.iFld;
                        Test.fFld += i18;
                        break;
                    case 16:
                        Test.instanceCount *= sFld;
                        i19 += (i18 * i18);
                        bArr = bArr;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    default:
                        i17 &= i19;
                        i17 *= i19;
                    }
                    i17 *= i15;
                    i19 = Test.byFld;
                    lArr1[i18 + 1] = -2756154430L;
                    Test.fFld += Test.byFld;
                    lArr1[i18 - 1] += i18;
                }
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.instanceCount += i20;
                    fArr1[i20 - 1] += Test.fFld;
                }
            }
            for (i22 = i14; i22 < 193; i22++) {
                i23 = i22;
                if (b2) break;
                Test.fFld -= i18;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
