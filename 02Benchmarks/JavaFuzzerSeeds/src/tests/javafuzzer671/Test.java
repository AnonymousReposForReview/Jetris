package tests.javafuzzer671;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:38:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1078642403266038756L;
    public int iFld=1;
    public static volatile byte byFld=9;
    public static volatile int iFld1=8;
    public volatile short sFld=28354;
    public float fFld=80.449F;
    public int iFld2=-9808;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        boolean b=false;
        double d1=-1.92052, d2=-1.93596;
        int i8=-44033, i9=53241, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -69);

        b = b;
        for (int i7 : iArr1) {
            short s=27389;
            d1 *= d1;
            switch (((i7 >>> 1) % 8) + 116) {
            case 116:
                i7 = i6;
                for (i8 = 1; 4 > i8; ++i8) {
                    d2 = 1;
                    do {
                        d1 += i8;
                        Test.instanceCount += (long)(((d2 * i9) + i9) - i9);
                        i6 += (int)d2;
                        if (b) continue;
                        Test.instanceCount += 99;
                        iArr1[(int)(d2 + 1)] <<= (int)Test.instanceCount;
                        Test.byFld = (byte)i9;
                    } while (++d2 < 2);
                    if (b) continue;
                }
            case 117:
                Test.instanceCount &= i9;
                break;
            case 118:
                if (b) continue;
                break;
            case 119:
                if (b) continue;
            case 120:
                Test.iFld1 /= (int)93937529L;
                break;
            case 121:
                Test.instanceCount += Test.instanceCount;
                break;
            case 122:
                d1 -= Test.byFld;
            case 123:
                Test.instanceCount <<= i6;
                break;
            default:
                s -= (short)i9;
            }
        }
        vMeth1_check_sum += i6 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i8 + i9 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        float f=113.629F;
        int i3=25600, i4=20, i5=151, i11=53028, i12=0, iArr2[]=new int[N];
        double d3=-108.130354;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr2, -10226);
        FuzzerUtils.init(sArr, (short)-13120);

        for (f = 8; f < 322; f++) {
            Test.instanceCount += (long)f;
            for (i4 = 1; i4 < 5; ++i4) {
                i3 += i4;
                vMeth1(i3);
                i3 = 41879;
                i3 = i5;
                Test.instanceCount += (i4 + i4);
                i3 = Test.iFld1;
                iArr2[(int)(f + 1)] += (int)d3;
            }
            sArr = FuzzerUtils.short2array(N, (short)-27698);
            for (i11 = (int)(f); i11 < 5; i11++) {
                i5 = -9;
                Test.iFld1 = i4;
                Test.iFld1 += (((i11 * Test.instanceCount) + Test.byFld) - i5);
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + Double.doubleToLongBits(d3) + i11 + i12 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i1, double d) {

        int i2=13, i13=162, i14=-13;
        float f1=-89.321F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -92.234F);

        i2 += (int)lMeth();
        f1 %= (0 | 1);
        switch (((i2 >>> 1) % 10) + 26) {
        case 26:
            for (i13 = 260; i13 > 5; i13 -= 2) {
                Test.iFld1 += (i13 * i13);
                fArr[i13 - 1] = i1;
                f1 += ((long)i13 | (long)sFld);
                if (i1 != 0) {
                    vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f1) + i13 + i14 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                i14 -= (int)-169L;
                Test.instanceCount = (long)f1;
                i2 += (i13 * i2);
                switch ((i13 % 3) + 76) {
                case 76:
                    d += i2;
                    break;
                case 77:
                    fArr[i13] = i1;
                    break;
                case 78:
                    i1 = iFld;
                    break;
                }
            }
        case 27:
            i1 >>= i14;
            break;
        case 28:
            Test.byFld >>= (byte)i13;
            break;
        case 29:
            Test.instanceCount *= sFld;
            break;
        case 30:
            i1 = iFld;
            break;
        case 31:
            f1 -= (float)d;
            break;
        case 32:
            i1 = -198;
            break;
        case 33:
            iArrFld[(Test.iFld1 >>> 1) % N] -= Test.iFld1;
        case 34:
            iFld = iFld;
            break;
        case 35:
            f1 = 60823;
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f1) + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr3) {

        int i=-141, i16=-48332, i17=12, i18=2, i19=131, i20=-60470, i21=-123, i22=-126, i23=-14, iArr[][]=new int[N][N];
        double d4=0.779;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -109);
        FuzzerUtils.init(fArr1, -1.1F);

        i = 1;
        while (++i < 128) {
            iFld = (((22538 % (iArr[i + 1][i] | 1)) * iFld) - iArr[i][i - 1]);
            vMeth(Test.iFld1, 109.24988);
            if (false) {
                Test.instanceCount += (i | (long)fFld);
                Test.iFld1 /= (int)(Test.instanceCount | 1);
            }
            for (i16 = i; i16 < 196; i16++) {
                Test.iFld1 *= i16;
                iFld += (int)(-2.585F + (i16 * i16));
                for (i18 = 1; i18 < 1; i18++) {
                    i17 -= (int)2382302415908234812L;
                    sFld += (short)153;
                    Test.byFld |= (byte)i18;
                }
                Test.iFld1 >>= -58;
                fFld = i;
            }
            for (i20 = 2; i20 < 196; i20++) {
                for (i22 = 1; i22 < 2; i22++) {
                    boolean b1=false;
                    d4 = iFld;
                    iArr[i][(-101 >>> 1) % N] %= (int)((long)(fFld) | 1);
                    b1 = b1;
                    fArr1[i] = i19;
                    Test.instanceCount += (((i22 * i17) + Test.instanceCount) - Test.instanceCount);
                    Test.instanceCount -= Test.instanceCount;
                    iFld = (int)-31308L;
                }
                Test.iFld1 -= i17;
                fFld *= (float)d4;
                iFld += (i20 ^ i18);
                iArr[i - 1][i] = iFld2;
                iFld2 += (((i20 * Test.instanceCount) + iFld) - Test.instanceCount);
            }
            Test.iFld1 *= (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
