package tests.javafuzzer1004;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:48:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-92L;
    public static int iFld=49240;
    public static byte byFld=-78;
    public static boolean bFld=false;
    public float fFld=-18.36F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14599);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, int i5, int i6) {

        double d=-2.22947, dArr[]=new double[N];
        boolean b=true;
        float f=-119.120F, f1=36.111F;
        int i7=8469;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 40.63906);
        FuzzerUtils.init(lArr, 59928L);

        if (b) {
            d -= Test.iFld;
        } else {
            dArr = dArr;
            i5 -= (int)f;
            Test.iFld = Test.iFld;
        }
        f -= Test.instanceCount;
        try {
            Test.instanceCount = i5;
            i6 += i5;
            switch (((Test.iFld >>> 1) % 5) + 96) {
            case 96:
                Test.iFld += i6;
                for (f1 = 11; (265 + 400) > f1; ++f1) {
                    Test.byFld = (byte)-61L;
                    Test.byFld = (byte)i7;
                    i7 >>= i5;
                }
                break;
            case 97:
                Test.iArrFld[(i6 >>> 1) % N] = i7;
            case 98:
                i6 *= i7;
                break;
            case 99:
                lArr[(i5 >>> 1) % N] *= i7;
                break;
            case 100:
                i5 >>= (int)l;
            default:
                Test.byFld |= (byte)-2;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-28368);
        }
        catch (ArithmeticException exc3) {
            Test.iArrFld[(Test.iFld >>> 1) % N] = (int)l;
        }
        finally {
            i5 = -8;
        }
        long meth_res = l + i5 + i6 + Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f) +
            Float.floatToIntBits(f1) + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth(int i4, short s) {

        int i8=-1, i9=82, i10=-7, i11=-174, i12=-11, i13=-57053;
        double d1=2.24748;
        long l1=-194L, lArr1[]=new long[N];
        float f2=-23.419F;

        FuzzerUtils.init(lArr1, -250L);

        Test.iFld >>= (int)lMeth(Test.instanceCount, Test.iFld, 18191);
        for (i8 = 377; i8 > 16; i8 -= 3) {
            Test.instanceCount *= Test.instanceCount;
            for (i10 = 1; i10 < 13; i10++) {
                for (i12 = 1; i12 < 2; i12++) {
                    Test.byFld = (byte)i4;
                    Test.iFld |= i8;
                }
                lArr1 = lArr1;
                Test.iFld <<= Test.iFld;
                i13 += i4;
            }
            Test.instanceCount += (long)d1;
            i13 *= -206;
            l1 = i10;
            i9 -= i10;
            i9 = (int)f2;
        }
        long meth_res = i4 + s + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + l1 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        short s1=19982;
        int i14=-13, i15=124, i16=-8, i17=-1;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 2744516748717645790L);

        i2 <<= -7973;
        i2 += (int)dMeth(Test.iFld, s1);
        lArr2[(i3 >>> 1) % N] = Test.iFld;
        i14 = 1;
        do {
            for (i15 = 1; i15 < 10; i15++) {
                double d2=-118.105663;
                i3 -= i15;
                Test.byFld = (byte)d2;
                i16 = i14;
                d2 += i3;
                i17 = 2;
                do {
                    i3 += (((i17 * Test.byFld) + Test.byFld) - i16);
                    i3 += i16;
                    i3 -= (int)Test.instanceCount;
                } while ((i17 -= 3) > 0);
                Test.iFld = i15;
                i2 += i14;
            }
        } while (++i14 < 155);
        long meth_res = i2 + i3 + s1 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-33649, i1=121, i18=132, i19=-226, i20=-37, i21=14, i22=45558, i23=14, i24=-163;
        double d3=-9.73145;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, -30L);

        Test.instanceCount = (-((Test.iFld * Test.iFld) * Test.instanceCount));
        for (i = 7; i < 249; ++i) {
            i1 *= iMeth(-153, Test.iFld);
            switch ((i % 10) + 106) {
            case 106:
                i18 = 104;
                while ((i18 -= 3) > 0) {
                    switch (((i18 % 4) * 5) + 108) {
                    case 128:
                        Test.iFld += i19;
                        Test.instanceCount <<= Test.iFld;
                        i1 += (i18 + i18);
                        break;
                    case 125:
                        for (i20 = 1; i20 < 3; i20++) {
                            short s2=-32256;
                            d3 = Test.iFld;
                            if (Test.bFld) continue;
                            i19 += (i20 + Test.instanceCount);
                            fFld += i20;
                            Test.iFld += (int)Test.instanceCount;
                            d3 += i18;
                            d3 -= s2;
                            lArr3[(i21 >>> 1) % N] = Test.instanceCount;
                            fFld += i1;
                        }
                        break;
                    case 120:
                        d3 = i22;
                        i1 >>>= i22;
                    case 124:
                        i23 -= i1;
                        d3 += i21;
                        Test.iArrFld[i] = i;
                        break;
                    }
                    i24 = 1;
                    while (++i24 < 3) {
                        Test.instanceCount *= Test.instanceCount;
                        switch (((i18 % 2) * 5) + 123) {
                        case 125:
                            Test.iFld += (int)(4503455912296901121L + (i24 * i24));
                        case 133:
                            i22 <<= i20;
                            Test.instanceCount += (((i24 * i24) + i21) - Test.iFld);
                            break;
                        }
                    }
                }
                break;
            case 107:
                Test.instanceCount *= i1;
                break;
            case 108:
                Test.byFld = (byte)i20;
            case 109:
                Test.instanceCount = -6655621265960873638L;
                break;
            case 110:
                fFld *= (float)d3;
                break;
            case 111:
                Test.instanceCount = 13;
            case 112:
                d3 -= i19;
                break;
            case 113:
                i22 = (int)Test.instanceCount;
            case 114:
                i21 += (i * i);
                break;
            case 115:
                Test.iArrFld[i + 1] ^= 53103;
                break;
            default:
                Test.instanceCount += 18040;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
