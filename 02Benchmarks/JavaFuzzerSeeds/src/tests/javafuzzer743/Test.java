package tests.javafuzzer743;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:58:38 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4977034204492591899L;
    public static int iFld=-4;
    public static double dFld=1.114645;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1) {

        int i4=-34, i5=33149, i6=11, i7=127, i8=14, i9=10950, i10=45462, iArr[]=new int[N];
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 51);
        FuzzerUtils.init(lArr, 62L);

        Test.iFld ^= Test.iFld;
        iArr[(-208 >>> 1) % N] -= i4;
        for (i5 = 6; 274 > i5; ++i5) {
            for (i7 = 6; i7 > i5; --i7) {
                for (i9 = 1; i9 < 1; ++i9) {
                    float f=1.6F;
                    switch ((i5 % 2) + 71) {
                    case 71:
                        i4 += i9;
                        b = false;
                        Test.iFld += (((i9 * Test.iFld) + i5) - Test.iFld);
                        f += i7;
                        break;
                    case 72:
                        i4 -= i10;
                        lArr = FuzzerUtils.long2array(N, (long)0L);
                        break;
                    default:
                        i6 = i10;
                    }
                    i4 += (i9 | i4);
                }
                iArr[i7 - 1] >>>= i8;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(short s, int i2, short s1) {

        int i3=-237, i11=-48314, i12=-52246, iArr1[]=new int[N];
        boolean b1=false;
        float f1=126.258F;

        FuzzerUtils.init(iArr1, 0);

        i3 = 268;
        while ((i3 -= 3) > 0) {
            vMeth1(Test.dFld);
            i2 = i3;
            iArr1[i3] = i3;
            if (b1) break;
            i11 = 1;
            while (++i11 < 17) {
                i12 += (i11 | Test.instanceCount);
                iArr1[i3] = i2;
                Test.instanceCount = -1;
                switch (((i2 >>> 1) % 2) + 113) {
                case 113:
                    i2 += i3;
                    break;
                case 114:
                    iArr1 = FuzzerUtils.int1array(N, (int)-2);
                    i2 += (((i11 * f1) + i12) - i12);
                    i12 = 28471;
                    break;
                }
            }
            Test.iFld -= i11;
        }
        long meth_res = s + i2 + s1 + i3 + (b1 ? 1 : 0) + i11 + i12 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=-139, i1=-173, i13=153, i14=-9, i15=43526, i16=-64635, iArr2[]=new int[N];
        short s2=-9462;
        float f2=-127.369F;
        boolean b2=false;
        byte by=62;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -4459864233268879099L);
        FuzzerUtils.init(iArr2, 54);

        for (i = 8; i < 344; ++i) {
            if (b2) {
                i1 = (int)(lMeth(s2, Test.iFld, s2) ^ i1);
                vMeth_check_sum += i + i1 + s2 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + (b2 ? 1 : 0) + by +
                    FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
                return;
            } else if (b2) {
                for (i13 = 1; 5 > i13; i13++) {
                    Test.iFld += (int)Test.dFld;
                    i14 -= 74;
                    Test.iFld = i;
                }
                if (b2) {
                    i14 = -34951;
                    f2 += i;
                    if (i13 != 0) {
                        vMeth_check_sum += i + i1 + s2 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + (b2 ? 1 :
                            0) + by + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i1 += (((i * Test.iFld) + i) - i1);
                } else if (b2) {
                    for (i15 = 1; i15 < 5; ++i15) {
                        iArr2[i15] &= i16;
                        if (b2) break;
                    }
                }
            } else {
                by = (byte)i;
            }
        }
        vMeth_check_sum += i + i1 + s2 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + (b2 ? 1 : 0) + by +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        double d=0.86938;
        int i17=106, i18=-12, i19=4, i20=11991, i21=-10, i22=-213, i23=1, i24=54972, i25=-48630, i26=-253, i27=65251;
        boolean b3=false;
        float f3=1.599F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 2871700071833851034L);

        d -= 62977L;
        vMeth();
        i17 = 1;
        while (++i17 < 256) {
            for (i18 = 5; i18 < 98; i18++) {
                i19 >>>= i19;
                if (true) continue;
            }
            b3 = b3;
            iArrFld[i17 - 1] ^= 3936;
            Test.iFld += i17;
            for (i20 = 5; i20 < 98; i20++) {
                for (i22 = 1; i22 < 2; ++i22) {
                    i21 -= (int)Test.dFld;
                    lArr2[i17] ^= -39906;
                    d -= f3;
                    lArr2 = lArr2;
                    f3 -= i18;
                    Test.instanceCount += i22;
                    Test.instanceCount <<= i18;
                    i23 += (i22 * Test.instanceCount);
                    iArrFld[i20 - 1] -= (int)Test.dFld;
                }
            }
            Test.instanceCount -= (long)f3;
            Test.instanceCount += i17;
            for (i24 = 6; 98 > i24; ++i24) {
                if (b3) continue;
                try {
                    i25 = (iArrFld[i24 - 1] % -19098);
                    iArrFld[i17 - 1] = (i17 % 1844015571);
                    iArrFld[i24 + 1] = (i22 / i17);
                } catch (ArithmeticException a_e) {}
                iArrFld[i24 - 1] <<= i18;
            }
            i21 = i25;
            for (i26 = i17; i26 < 98; ++i26) {
                d -= i20;
                i25 += (i26 * i26);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
