package tests.javafuzzer569;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:59:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8339315943330171718L;
    public double dFld=-82.47700;
    public int iFld=37067;
    public static int iFld1=-3;
    public boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.26776);
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.lArrFld, 43536L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(int i) {

        byte by=41;
        int i1=-129, i2=-62493, i3=210, i4=35388, i5=131, i6=-9, iArr[]=new int[N];
        float f=-114.730F, fArr[]=new float[N];
        short s1=9723;
        double d=7.4560;

        FuzzerUtils.init(iArr, -22409);
        FuzzerUtils.init(fArr, -47.31F);

        by -= (byte)iArr[(i >>> 1) % N];
        for (i1 = 2; i1 < 131; ++i1) {
            i *= (int)fArr[i1];
            Test.instanceCount = (--i);
            for (i3 = 1; i3 < 12; i3++) {
                for (i5 = i1; i5 < 2; i5++) {
                    Test.instanceCount += (i5 * i4);
                    i2 = (int)((++f) - ((--s1) - i6));
                    if ((-17.931F - (Math.min(i, i6) - (i--))) != i4) continue;
                }
                i += -2;
                switch ((i1 % 1) + 33) {
                case 33:
                    iArr[i3 + 1] *= (int)(-((i3 - i6) * (--d)));
                    i4 = s1;
                    fArr[i1 + 1] = (i2 - (i6--));
                    break;
                }
                f += (i3 * i3);
            }
        }
        long meth_res = i + by + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + s1 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i9=-9, i10=225, i11=5, i12=-55688, i13=187;
        byte by1=64;
        float f2=-69.817F;
        short s2=16817;

        for (double d1 : Test.dArrFld) {
            for (i9 = 1; i9 < 4; ++i9) {
                by1 += (byte)-166;
            }
            f2 += Test.instanceCount;
            by1 = (byte)i10;
            Test.iArrFld[(i10 >>> 1) % N] += (int)-94.243F;
            i10 >>= 96;
            i10 = (int)Test.instanceCount;
            if (i10 != 0) {
                vMeth_check_sum += i9 + i10 + by1 + Float.floatToIntBits(f2) + s2 + i11 + i12 + i13;
                return;
            }
        }
        s2 = by1;
        i11 = 1;
        do {
            for (i12 = 1; i12 < 7; ++i12) {
                i10 += (i12 - i11);
                i13 += i12;
                f2 = i12;
            }
        } while (++i11 < 239);
        vMeth_check_sum += i9 + i10 + by1 + Float.floatToIntBits(f2) + s2 + i11 + i12 + i13;
    }

    public int iMeth2(long l, int i8) {

        int i14=-19566, i15=53, i16=243, i17=6, i18=-231;
        long l1=-13L;
        byte by2=-102;
        float f3=-17.427F;
        short s3=16180;
        double d2=-2.101643;

        vMeth();
        i14 = 1;
        while (++i14 < 311) {
            i8 -= i14;
            l = i8;
        }
        for (l1 = 4; l1 < 131; ++l1) {
            by2 += (byte)l;
            for (i16 = 1; i16 < 12; ++i16) {
                f3 *= s3;
                i15 = (int)l1;
                Test.instanceCount = l1;
                for (d2 = l1; d2 < 2; ++d2) {
                    dFld = l1;
                }
                i18 += (((i16 * f3) + i8) - i8);
            }
            i18 <<= i15;
            i18 *= i16;
        }
        long meth_res = l + i8 + i14 + l1 + i15 + by2 + i16 + i17 + Float.floatToIntBits(f3) + s3 +
            Double.doubleToLongBits(d2) + i18;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth1(float f1, int i7) {

        int i19=-9, i20=167, i22=2, i23=-92;
        byte by3=100;

        iMeth2(Test.instanceCount, i7);
        Test.instanceCount = i7;
        i7 -= i7;
        for (i19 = 13; i19 < 213; ++i19) {
            Test.iArrFld = FuzzerUtils.int1array(N, (int)0);
            by3 += (byte)i19;
            Test.iArrFld[i19 + 1] -= i7;
            for (i22 = 8; i22 > 1; --i22) {
                Test.lArrFld[i19] = (long)-39.51596;
                Test.iArrFld[i22 - 1] >>= i23;
            }
            Test.iArrFld[i19 - 1] <<= i22;
            if (true) {
                f1 -= i19;
                i23 -= i20;
                i7 += (i19 * i23);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i7 + i19 + i20 + by3 + i22 + i23;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=10836, sArr[]=new short[N];
        float f4=91.788F;
        long l2=-80L;
        int i24=-246, i25=60721, i26=13808, i27=-45538, i28=-10, i29=-6, i30=10;

        FuzzerUtils.init(sArr, (short)19516);

        s = (short)(iMeth(iMeth1(f4, iFld)) - Test.instanceCount);
        fArrFld[(-11 >>> 1) % N] = iFld;
        Test.iArrFld = Test.iArrFld;
        for (l2 = 16; l2 < 300; ++l2) {
            i24 %= (int)(i24 | 1);
            i24 = -2;
            for (i25 = 3; i25 < 89; ++i25) {
                i26 = (int)Test.instanceCount;
                Test.instanceCount >>>= i24;
                i24 *= (int)dFld;
                f4 += iFld;
                Test.iArrFld[i25 + 1] += (int)l2;
                i24 = (int)l2;
                i26 <<= iFld;
            }
            for (i27 = 89; i27 > 3; i27 -= 3) {
                iFld += (i27 * i27);
                try {
                    i24 = (Test.iArrFld[(int)(l2)] % -12822);
                    i24 = (Test.iArrFld[i27] / Test.iArrFld[i27]);
                    i24 = (i25 % iArrFld1[i27 - 1]);
                } catch (ArithmeticException a_e) {}
                for (i29 = 1; i29 < 4; i29++) {
                    i26 = iFld;
                    i30 >>>= -7966;
                    switch ((i29 % 6) + 66) {
                    case 66:
                        Test.instanceCount >>= i28;
                        i24 = (int)Test.instanceCount;
                        Test.lArrFld[(int)(l2)] = 12;
                        break;
                    case 67:
                        Test.instanceCount += (((i29 * Test.iFld1) + i29) - i27);
                        break;
                    case 68:
                        iArrFld1[(int)(l2)] += -26396;
                        if (bFld) continue;
                        sArr[i27 - 1] = (short)i26;
                        iFld += (((i29 * Test.iFld1) + i27) - i30);
                    case 69:
                        Test.instanceCount = iFld;
                        break;
                    case 70:
                        i30 += i29;
                        break;
                    case 71:
                        Test.instanceCount >>= i24;
                        break;
                    default:
                        bFld = bFld;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 mainTest
//DEBUG  vMeth ->  vMeth iMeth2 iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
