package tests.javafuzzer2337;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:53:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1243584356137749888L;
    public static volatile boolean bFld=true;
    public static int iFld=3;
    public static double dFld=54.5886;
    public int iFld1=-47246;
    public static int iArrFld[]=new int[N];
    public volatile short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
        FuzzerUtils.init(Test.lArrFld, 6215L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        short s=5320, sArr[]=new short[N];
        int i3=-16612, i4=6, i5=-12, i6=-3, iArr[]=new int[N];
        float f=79.358F;

        FuzzerUtils.init(sArr, (short)-28266);
        FuzzerUtils.init(iArr, -100);

        if (Test.bFld) {
            sArr[(19 >>> 1) % N] = s;
            for (i3 = 8; i3 < 165; i3++) {
                i4 *= -55456;
                i5 /= (int)(i4 | 1);
                i4 = (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i4 = (int)Test.instanceCount;
            }
            Test.instanceCount = 0;
            i4 *= 166;
            vMeth1_check_sum += s + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(sArr) +
                FuzzerUtils.checkSum(iArr);
            return;
        }
        switch (((i4 >>> 1) % 5) + 31) {
        case 31:
            i6 = 1;
            while (++i6 < 337) {
                i4 = -65521;
                Test.iFld = (int)f;
                Test.instanceCount -= (long)1.43781;
            }
            break;
        case 32:
            i5 -= (int)8L;
            break;
        case 33:
            i5 = i3;
            break;
        case 34:
            Test.dFld += Test.iFld;
        case 35:
            Test.instanceCount -= i4;
        }
        vMeth1_check_sum += s + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i8=54, i9=-2, i10=0, i11=135, i12=-59;
        short s1=5371;
        float f1=0.607F;
        byte by=68;

        vMeth1();
        for (i8 = 169; i8 > 2; i8 -= 2) {
            if (Test.bFld) break;
            i9 = (int)Test.instanceCount;
            Test.iArrFld[i8 + 1] += i9;
            Test.iArrFld[i8] -= i9;
            i9 <<= s1;
            for (i10 = 19; i10 > i8; i10--) {
                i12 = 1;
                while (--i12 > 0) {
                    f1 = 8;
                    Test.instanceCount += (i12 + by);
                    switch (((i10 % 8) * 5) + 64) {
                    case 74:
                        Test.iFld = 197;
                        break;
                    case 84:
                        i9 <<= i8;
                        break;
                    case 79:
                        Test.iArrFld[i12] -= (int)Test.instanceCount;
                        break;
                    case 97:
                    case 98:
                        Test.iFld -= s1;
                    case 86:
                        Test.iArrFld[i10 - 1] = i11;
                        break;
                    case 89:
                        Test.iFld = 100;
                        break;
                    case 72:
                        i9 -= (int)f1;
                    }
                }
            }
        }
        long meth_res = i8 + i9 + s1 + i10 + i11 + i12 + Float.floatToIntBits(f1) + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i2=32414, i13=-23792, i14=11, i15=-52, i16=10728, i17=237;
        float f2=1.368F;
        byte by1=108;

        i2 = 1;
        do {
            lMeth();
        } while (++i2 < 218);
        Test.iFld = Test.iFld;
        for (f2 = 1; 255 > f2; f2++) {
            if (Test.bFld) {
                for (i14 = 1; i14 < 6; ++i14) {
                    i15 = i2;
                    Test.iFld = i2;
                    Test.bFld = Test.bFld;
                    for (i16 = i14; i16 < 2; ++i16) {
                        Test.iFld *= i16;
                        i17 *= by1;
                        i13 += (i16 * Test.iFld);
                    }
                }
            } else if (Test.bFld) {
                i13 -= (int)Test.instanceCount;
                Test.dFld = Test.dFld;
            } else if (Test.bFld) {
                i13 -= i16;
            } else {
                sArrFld[(int)(f2)] = (short)i13;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i=201, i1=-12, i18=-243, i19=37192, i20=-225, i21=-14, i22=11, i23=-36479, i24=6, i25=30, iArr1[]=new
            int[N];
        float f3=1.460F;
        byte by2=-51;

        FuzzerUtils.init(iArr1, 3612);

        for (i = 11; i < 192; i++) {
            vMeth();
            i1 = (int)Test.dFld;
            i1 += i;
            f3 *= Test.iFld;
            Test.instanceCount = (long)98.41449;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-160);
            switch (((i % 2) * 5) + 1) {
            case 4:
                switch ((i % 2) + 18) {
                case 18:
                    for (i18 = 4; i18 < 139; ++i18) {
                        Test.iFld = (int)-3L;
                        try {
                            Test.iArrFld[i18] = (i1 % Test.iArrFld[i18]);
                            i19 = (i % 54377);
                            Test.iFld = (21244 / Test.iArrFld[i]);
                        } catch (ArithmeticException a_e) {}
                        i19 -= (int)f3;
                        Test.bFld = Test.bFld;
                        Test.instanceCount -= i;
                        for (i20 = i18; i20 < 2; ++i20) {
                            Test.instanceCount -= iFld1;
                            Test.iArrFld[i18 + 1] -= (int)-1.467F;
                            try {
                                i1 = (-7 % Test.iArrFld[i]);
                                iFld1 = (iFld1 % iFld1);
                                Test.iArrFld[i18] = (Test.iArrFld[i20 + 1] % 227);
                            } catch (ArithmeticException a_e) {}
                            Test.lArrFld[i20 - 1] <<= -5299;
                        }
                        by2 += (byte)Test.instanceCount;
                        iFld1 |= i18;
                        for (i22 = 1; i22 < 2; i22 += 2) {
                            f3 = 23602;
                            iFld1 <<= iFld1;
                            by2 += (byte)(((i22 * i) + i18) - i20);
                        }
                    }
                    Test.iArrFld[i - 1] -= i23;
                    for (i24 = 139; i24 > 5; i24--) {
                        Test.instanceCount /= (i24 | 1);
                        iArr1 = FuzzerUtils.int1array(N, (int)45);
                    }
                    break;
                case 19:
                    Test.instanceCount += i21;
                default:
                    Test.dFld += Test.instanceCount;
                }
                break;
            case 10:
                Test.iFld += (((i * i24) + i22) - i23);
                break;
            default:
                Test.instanceCount += Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
