package tests.javafuzzer1013;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:49:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-951309500835926761L;
    public byte byFld=-102;
    public static float fFld=47.6F;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 31.183F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, int i4, float f2) {


        i3 += (int)1.39324;
        long meth_res = i3 + i4 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i5=-62852;

        iMeth(i5, 24861, 0.250F);
        i5 >>= 14;
        vMeth_check_sum += i5;
    }

    public static long lMeth(short s1, float f1) {

        int i6=-21238, i7=-82, i8=-1, i9=-14775, i10=5, i11=252, i12=0;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -11.102917);

        vMeth();
        i6 <<= i6;
        f1 -= -195;
        i7 = 1;
        while (++i7 < 190) {
            i6 = i8;
            for (i9 = 1; i9 < 8; ++i9) {
                switch (((i7 >>> 1) % 1) + 10) {
                case 10:
                    dArr[i7 + 1] -= i9;
                    i8 = i6;
                    for (i11 = 1; i11 < 2; ++i11) {
                        i12 = i9;
                        i10 >>= i12;
                        i6 = i8;
                    }
                    break;
                default:
                    f1 += (i9 + f1);
                    Test.instanceCount *= i7;
                }
            }
        }
        long meth_res = s1 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-108.820F;
        int i=110, i1=0, i2=30302, i13=-57, i14=-23750, i16=9207, i17=10, i18=10, i19=111, i20=1, iArr[]=new int[N];
        double d=38.24557;

        FuzzerUtils.init(iArr, 192);

        for (f = 2; f < 397; f++) {
            short s=22683;
            iArr[(int)(f - 1)] += (i++);
            for (i1 = 2; 64 > i1; i1++) {
                byFld = (byte)i2;
            }
            s <<= (short)(((i2 + 35078) + (i + -130L)) * ((14 * Math.abs(i2)) * (i1 * d)));
            iArr[(int)(f + 1)] = (int)(Test.instanceCount--);
            lMeth((short)(-6835), f);
            for (i13 = 64; i13 > 3; i13 -= 3) {
                i2 += i13;
                switch (((i2 >>> 1) % 1) + 1) {
                case 1:
                    i2 += i13;
                    Test.fFld = (float)d;
                    break;
                }
            }
            Test.fFld -= i;
            i16 = 1;
            while (++i16 < 64) {
                Test.fArrFld[i16] *= byFld;
                s &= (short)i14;
                Test.instanceCount += (i16 + i14);
                i ^= -10;
                i14 = i14;
                i14 *= i14;
                i2 *= -88;
            }
            iArr[(int)(f)] -= (int)Test.instanceCount;
            i14 -= i16;
        }
        for (i17 = 18; i17 < 330; i17++) {
            Test.fFld -= Test.instanceCount;
            for (i19 = 1; i19 < 81; ++i19) {
                i20 ^= i14;
                i = byFld;
                Test.fFld = Test.instanceCount;
                d = i;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
