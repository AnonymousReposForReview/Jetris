package tests.javafuzzer2758;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=71L;
    public static float fFld=25.787F;
    public static float fFld1=-57.112F;
    public static byte byFld=-51;
    public static short sFld=23801;
    public int iFld=27711;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.20815);
        FuzzerUtils.init(Test.fArrFld, 32.842F);
        FuzzerUtils.init(Test.lArrFld, -1568447877L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        float f1=2.62F;
        int i7=39, i8=-64913, i9=-71, i10=-14, i11=-234;
        double d=-38.61262;
        short s=31302;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8L);

        i6 /= (int)((long)(Test.fFld) | 1);
        f1 = 1;
        while (++f1 < 277) {
            lArr[(int)(f1)] -= -7;
        }
        Test.instanceCount *= i6;
        for (i7 = 191; 1 < i7; i7--) {
            Test.fFld -= Test.instanceCount;
            Test.instanceCount = -7;
            for (d = i7; d < 8; d += 3) {
                for (i10 = 1; i10 < 1; ++i10) {
                    i8 -= (int)Test.instanceCount;
                    i8 <<= i8;
                    s = (short)i7;
                }
                Test.fFld1 -= -212;
                i6 -= i7;
                if (b) break;
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + s +
            (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, float f, int i5) {

        int i12=18833, i13=-1, i14=3, i15=-4974;
        double d1=-121.74738;

        Test.fArrFld = (Test.fArrFld = (Test.fArrFld = (Test.fArrFld = Test.fArrFld)));
        vMeth1(i5);
        Test.fArrFld[(i5 >>> 1) % N] *= i5;
        for (i12 = 7; i12 < 263; i12++) {
            i5 += (i12 | i13);
            i13 += (i12 ^ i13);
            switch ((i12 % 9) + 31) {
            case 31:
                i5 += i5;
                Test.byFld -= (byte)Test.instanceCount;
                i13 = Test.sFld;
                break;
            case 32:
                Test.fFld = i13;
                i14 = 1;
                do {
                    i5 *= (int)-2.30F;
                    l = i14;
                    Test.fFld = (float)d1;
                } while (++i14 < 6);
                break;
            case 33:
            case 34:
                i15 = i13;
                break;
            case 35:
                l >>= Test.byFld;
                break;
            case 36:
                Test.fFld = 72;
                break;
            case 37:
                l += i12;
                break;
            case 38:
                Test.dArrFld[i12 + 1] += i5;
                break;
            case 39:
                d1 = i12;
                break;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i5 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15;
    }

    public static int iMeth() {

        int i3=41, i4=5, i16=64855, i17=-52936, iArr1[]=new int[N];
        double d2=-6.34921;

        FuzzerUtils.init(iArr1, 12);

        i3 = 1;
        while (++i3 < 255) {
            i4 += i3;
            i4 = (int)(((-(++iArr1[i3 - 1])) ^ (i4++)) * Test.fFld);
            vMeth(Test.instanceCount, Test.fFld, i4);
            i4 += (((i3 * i3) + i4) - i3);
            for (i16 = 1; i16 < 6; i16++) {
                i17 <<= i16;
                d2 -= i17;
                i17 += i3;
                Test.instanceCount = i16;
                Test.instanceCount += (i16 + Test.sFld);
                Test.lArrFld[i16] -= i17;
                i17 += i16;
                d2 -= Test.instanceCount;
                Test.instanceCount = i16;
            }
        }
        long meth_res = i3 + i4 + i16 + i17 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=48197, i1=13, i2=12523, i18=8, i19=-39126, i20=-8, i21=-235, iArr[][]=new int[N][N];
        boolean b1=true, bArr[]=new boolean[N];
        double d3=-18.106792;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-11374);
        FuzzerUtils.init(iArr, -32410);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount -= sArr[(i >>> 1) % N];
        for (i1 = 17; i1 < 295; i1++) {
            iArr[i1][i1 + 1] -= (int)((long)((Test.dArrFld[i1 - 1]--) - iMeth()) >> i1);
            i18 = 1;
            while (++i18 < 90) {
                iArr[i1 - 1][i1] -= (int)-68.118465;
                i *= i18;
                Test.instanceCount = Test.byFld;
                i += i18;
            }
            if (b1) continue;
            Test.lArrFld[i1 + 1] >>= Test.instanceCount;
            Test.instanceCount += i1;
            for (i19 = i1; i19 < 90; ++i19) {
                Test.instanceCount -= (long)d3;
                switch (((i1 % 9) * 5) + 7) {
                case 44:
                    b1 = b1;
                    i21 = 1;
                    while (++i21 < 1) {
                        i = (int)Test.instanceCount;
                        iArr[i19][i1] = i;
                        if (b1) {
                            Test.sFld += (short)i2;
                            switch (((i1 >>> 1) % 5) + 84) {
                            case 84:
                                i20 += (-31798 + (i21 * i21));
                                iArr[i21 + 1][i21] += (int)Test.fFld;
                                break;
                            case 85:
                                i2 += (i21 * i);
                                switch (((i >>> 1) % 7) + 47) {
                                case 47:
                                    i2 += (i21 ^ Test.instanceCount);
                                    i <<= i20;
                                    Test.lArrFld[i1] += -173;
                                    break;
                                case 48:
                                    Test.fArrFld[i21 - 1] *= Test.instanceCount;
                                    i = i18;
                                    break;
                                case 49:
                                    Test.instanceCount = Test.instanceCount;
                                    break;
                                case 50:
                                    i += i21;
                                case 51:
                                    bArr[i19] = false;
                                    break;
                                case 52:
                                    iArr[i21 + 1][i1 + 1] *= i2;
                                    break;
                                case 53:
                                    i2 >>= 8;
                                    break;
                                }
                            case 86:
                            case 87:
                                Test.instanceCount = i2;
                                break;
                            case 88:
                                Test.instanceCount = i20;
                                break;
                            }
                        } else if (b1) {
                            Test.fFld -= 9;
                        } else if (b1) {
                            i += (((i21 * i21) + i1) - i21);
                        } else {
                            i2 += i21;
                        }
                    }
                    break;
                case 23:
                    if (b1) continue;
                    break;
                case 47:
                    bArr[(i21 >>> 1) % N] = b1;
                case 48:
                    i20 += (((i19 * i21) + Test.fFld) - i21);
                case 49:
                    iFld = (int)Test.instanceCount;
                case 34:
                    Test.byFld = (byte)Test.fFld1;
                case 17:
                    iFld = (int)Test.instanceCount;
                    break;
                case 14:
                    Test.fFld1 -= i;
                    break;
                case 24:
                    iArr[i1 - 1][i1] >>>= i20;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
