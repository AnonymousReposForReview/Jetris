package tests.javafuzzer462;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:13:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3693702893L;
    public static volatile float fFld=-12.655F;
    public static short sFld=15071;
    public static long lArrFld[][]=new long[N][N];
    public static short sArrFld[][]=new short[N][N];
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -197L);
        FuzzerUtils.init(Test.sArrFld, (short)-15521);
        FuzzerUtils.init(Test.dArrFld, -95.112836);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i10=-166, i11=-39, i12=6, i13=2405, i14=-26170, i15=14, i16=-27, iArr[]=new int[N];
        boolean b=false, bArr[][]=new boolean[N][N];
        byte by1=18;
        double d1=13.48028;

        FuzzerUtils.init(iArr, 21300);
        FuzzerUtils.init(bArr, true);

        Test.fFld += i10;
        for (i11 = 1; i11 < 140; ++i11) {
            switch ((i11 % 7) + 127) {
            case 127:
                if (false) {
                    for (i13 = i11; i13 < 11; ++i13) {
                        for (i15 = 1; i15 < 1; ++i15) {
                            if (b) continue;
                            Test.lArrFld[i11 - 1][i11 - 1] = Test.instanceCount;
                            iArr = iArr;
                            i14 = (int)Test.instanceCount;
                            bArr[i13 - 1] = bArr[i11];
                            switch ((i11 % 3) + 3) {
                            case 3:
                                Test.instanceCount ^= i15;
                            case 4:
                                i16 = i13;
                                i14 += (((i15 * i15) + i10) - Test.fFld);
                                break;
                            case 5:
                                by1 = (byte)i11;
                            }
                        }
                    }
                } else if (b) {
                    iArr = FuzzerUtils.int1array(N, (int)-9);
                } else if (b) {
                    iArr[i11 + 1] = i14;
                }
                break;
            case 128:
                i12 += (int)d1;
            case 129:
                iArr[i11 - 1] += i13;
            case 130:
                by1 = (byte)i16;
                break;
            case 131:
                i12 += (((i11 * i13) + Test.fFld) - i15);
            case 132:
                i14 = (int)Test.instanceCount;
                break;
            case 133:
                Test.instanceCount = i14;
                break;
            }
        }
        vMeth1_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + by1 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static float fMeth(int i5, int i6, float f2) {

        int i7=-8, i8=-14581, i9=1, i17=-170, i18=-46285, iArr1[]=new int[N];
        float f3=-2.479F;
        double d3=1.68591;

        FuzzerUtils.init(iArr1, 55260);

        for (i7 = 319; i7 > 6; i7 -= 3) {
            Test.instanceCount += (long)(((i6 - -96.159F) * i8) + -117.25364);
            for (f3 = 1; 15 > f3; ++f3) {
                vMeth1();
                iArr1[(int)(f3)] = (int)Test.instanceCount;
                Test.dArrFld[i7 - 1] = 0.97406;
                Test.fFld += (61265L + (f3 * f3));
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.instanceCount -= (long)f2;
                    Test.sFld += (short)i17;
                    if (i8 != 0) {
                    }
                    f2 += i18;
                }
                Test.instanceCount += (long)(f3 - i8);
            }
            d3 += i8;
        }
        Test.lArrFld[(i6 >>> 1) % N][(i6 >>> 1) % N] = (long)Test.fFld;
        long meth_res = i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + Float.floatToIntBits(f3) + i9 + i17 + i18 +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(double d, float f) {

        float f1=-42.286F, fArr[]=new float[N];
        int i2=6, i3=7, i4=13832, i19=7829;
        byte by=-33;

        FuzzerUtils.init(fArr, 1.328F);

        for (f1 = 13; f1 < 280; f1++) {
            i3 = 1;
            do {
                i2 += (((i3 * i3) + i3) - i2);
                Test.instanceCount -= (by + Math.min((long)(d * i3), -7L));
                Test.lArrFld[i3][i3 - 1] = (long)(Test.sArrFld[(int)(f1 - 1)][i3] * (iArrFld[i3] + (i2 - d)));
                i4 = 1;
                while (++i4 < 1) {
                    try {
                        iArrFld[i4] = (iArrFld[i4 - 1] / -240);
                        i2 = (i4 % -31471);
                        i2 = (i3 % 3411);
                    } catch (ArithmeticException a_e) {}
                    i2 = (int)(((--Test.lArrFld[i4][i3 + 1]) * (i3 * -90.398F)) + (fMeth(i4, i4, Test.fFld) - d));
                    i2 = 0;
                }
                i19 = 1;
                do {
                    i2 = (int)Test.instanceCount;
                    Test.instanceCount = i4;
                    Test.instanceCount += (((i19 * Test.fFld) + i19) - i19);
                    fArr[(int)(f1)] = (float)d;
                    Test.dArrFld = Test.dArrFld;
                } while (++i19 < 1);
            } while (++i3 < 6);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 + i3 +
            by + i4 + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=1135, i1=5083, i20=35, i21=-69, i22=3, i23=209;
        double d4=2.12580;
        boolean b1=false;
        long l=-128L;

        i = 1;
        do {
            i1 += (((i * i1) + i) - i);
            vMeth(d4, Test.fFld);
            for (i20 = 3; 103 > i20; ++i20) {
                Test.instanceCount += (long)Test.fFld;
                iArrFld[i20 - 1] <<= -116;
            }
            switch ((((i >>> 1) % 3) * 5) + 47) {
            case 56:
            case 60:
                if (b1) break;
                i22 = 1;
                do {
                    i21 = (int)Test.fFld;
                    i21 += (int)Test.fFld;
                    fArrFld[i22 + 1] += i22;
                    switch ((i22 % 2) + 55) {
                    case 55:
                        i1 = i22;
                        i21 = (int)-1.91F;
                        if (b1) break;
                        i21 = i22;
                        break;
                    case 56:
                        i1 = (int)Test.instanceCount;
                        i21 += (i22 ^ i22);
                        iArrFld[i22] <<= i;
                        break;
                    default:
                        i1 += (i22 | i1);
                        Test.instanceCount = Test.instanceCount;
                        fArrFld[i] = i;
                    }
                    iArrFld[i22 + 1] = i22;
                    d4 /= (i21 | 1);
                    for (l = 1; 1 < l; l--) {
                        iArrFld[(int)(l - 1)] += (int)d4;
                        if (b1) {
                            Test.fFld -= i21;
                            i21 = (int)Test.instanceCount;
                        }
                    }
                } while (++i22 < 103);
                break;
            case 59:
                i1 *= i;
                break;
            }
        } while (++i < 243);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
