package tests.javafuzzer2766;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:56:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-122L;
    public static volatile float fFld=2.594F;
    public static double dFld=-22.61542;
    public static boolean bFld=true;
    public static short sFld=-1355;
    public byte byFld=-115;
    public int iFld=138;
    public static boolean bFld1=false;
    public static float fArrFld[][]=new float[N][N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -115.894F);
        FuzzerUtils.init(Test.lArrFld, 3377663010830474041L);
        FuzzerUtils.init(Test.dArrFld, -2.92545);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12) {

        double d=82.1265, dArr[]=new double[N];
        int i13=0, i14=13, i15=-3, i16=-13, i17=-13, iArr2[][]=new int[N][N];
        boolean b=true, bArr[]=new boolean[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr2, -1);
        FuzzerUtils.init(dArr, 53.119161);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 3656894935755024010L);

        for (d = 12; d < 205; d++) {
            if (i13 != 0) {
                vMeth1_check_sum += i12 + Double.doubleToLongBits(d) + i13 + i14 + i15 + (b ? 1 : 0) + i16 + i17 +
                    FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                    FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
                return;
            }
            for (i14 = 1; i14 < 8; i14++) {
                i13 = (int)Test.instanceCount;
                try {
                    i13 = (-137 / i15);
                    i12 = (i14 % -809133540);
                    iArr2[(int)(d)][(int)(d)] = (i12 / 106);
                } catch (ArithmeticException a_e) {}
                dArr[i14] = d;
            }
            bArr[(int)(d - 1)] = b;
            Test.fFld += 33294;
            i12 += (int)d;
        }
        lArr[(i15 >>> 1) % N][(-76 >>> 1) % N] = i13;
        i13 ^= (int)Test.instanceCount;
        Test.fFld = i13;
        for (i16 = 12; 278 > i16; ++i16) {
            i17 = (int)Test.instanceCount;
            i12 += (((i16 * i12) + i15) - i13);
        }
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d) + i13 + i14 + i15 + (b ? 1 : 0) + i16 + i17 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i11=-165, i18=-2, i19=-5, i20=1, i21=58358, i22=14581, i23=2;

        i11 -= Math.min(i11, (int)((Test.fFld + 97.831F) * (i11 - 10)));
        vMeth1(i11);
        Test.fArrFld[(i11 >>> 1) % N][(-61425 >>> 1) % N] += i18;
        i18 += (int)-87.429F;
        i19 = 1;
        do {
            i18 = (int)Test.instanceCount;
            for (i20 = 1; i20 < 7; i20++) {
                Test.lArrFld[i19 + 1] &= i20;
                i11 -= (int)Test.dFld;
                for (i22 = 1; 2 > i22; ++i22) {
                    i21 += (i22 ^ i21);
                    Test.instanceCount += (long)(0.39F + (i22 * i22));
                    i11 = i18;
                    Test.instanceCount >>>= i11;
                }
                l = -41;
            }
        } while (++i19 < 226);
        vMeth_check_sum += l + i11 + i18 + i19 + i20 + i21 + i22 + i23;
    }

    public float fMeth(int i2, int i3, int i4) {

        int i5=66, i6=-55, i7=23634, i8=224, i9=7, i10=213, i24=-160, i25=20, iArr1[]=new int[N];
        float f=-2.844F;

        FuzzerUtils.init(iArr1, -81);

        for (i5 = 13; i5 < 240; ++i5) {
            i4 -= (i4--);
            for (i7 = 1; i7 < 7; i7++) {
                for (i9 = i5; i9 < 2; i9++) {
                    try {
                        iArr1[i5] = (-167 / i6);
                        i4 = (i8 / i8);
                        i6 = (21150 / i7);
                    } catch (ArithmeticException a_e) {}
                    f -= (-(-(i4 / (Test.instanceCount | 1))));
                    i8 = (i10++);
                    vMeth(Test.instanceCount);
                    i3 += i9;
                    i4 = i8;
                }
                Test.instanceCount = 24673;
                i10 += (0 + (i7 * i7));
            }
            for (i24 = 1; 7 > i24; ++i24) {
                i4 = i10;
                if (Test.bFld) break;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i24 + i25 +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=42, i26=-16, i27=-22, i28=-102, i29=-8386, i30=-47827, i31=-14, i32=26, i33=-13, iArr[]=new int[N];
        long l1=-1L;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr, 116);
        FuzzerUtils.init(bArr1, false);

        for (i = 4; i < 218; ++i) {
            iArr[i] = (int)fMeth(i, i, i);
            if (Test.bFld) continue;
            i1 = (int)Test.instanceCount;
            switch ((i * 5) + 60) {
            case 76:
                Test.dArrFld[i] += Test.instanceCount;
                for (i26 = i; 117 > i26; i26++) {
                    iArr[i + 1] = i26;
                    for (i28 = 1; i28 < 1; i28++) {
                        Test.lArrFld[i] = i28;
                        Test.fFld += Test.instanceCount;
                        iArr[i] = 9;
                        i1 += i28;
                        Test.lArrFld[i26] = 48892L;
                    }
                    i30 = 1;
                    do {
                        try {
                            i1 = (iArr[i - 1] / 85);
                            i29 = (i30 % 255);
                            i29 = (iArr[i26 - 1] / i29);
                        } catch (ArithmeticException a_e) {}
                        i29 += i30;
                        i27 += (10 + (i30 * i30));
                        Test.fFld += Test.instanceCount;
                    } while (++i30 < 1);
                    Test.bFld = Test.bFld;
                    switch (((i26 % 7) * 5) + 68) {
                    case 91:
                        Test.instanceCount += (i26 * i26);
                        i27 = (int)Test.dFld;
                        for (i31 = 1; i31 < 1; ++i31) {
                            Test.fArrFld[i31 + 1][i31 - 1] += i32;
                            Test.instanceCount &= Test.sFld;
                            i27 = (int)Test.instanceCount;
                            Test.sFld += (short)Test.fFld;
                            Test.instanceCount += (i31 * i31);
                            i27 += (i31 * i31);
                        }
                        break;
                    case 101:
                        Test.bFld = Test.bFld;
                        break;
                    case 93:
                        i27 = (int)Test.fFld;
                        break;
                    case 92:
                        iArr[i26] -= i1;
                        break;
                    case 76:
                        i32 += Test.sFld;
                    case 77:
                        Test.fFld -= 84.912F;
                        break;
                    case 88:
                        i27 = (int)Test.instanceCount;
                        break;
                    }
                }
            case 409:
                i32 = i32;
            case 158:
                try {
                    i1 = (i31 % -108);
                    i32 = (-219 % i26);
                    i1 = (-37248 % i);
                } catch (ArithmeticException a_e) {}
                break;
            case 186:
            case 269:
                i32 += i27;
                break;
            case 280:
                iArr[i] = 0;
            case 397:
                iArr[i - 1] = -84;
                break;
            case 410:
                if (Test.bFld) continue;
            case 162:
            case 367:
                i27 += (((i * i32) + i26) - i32);
                break;
            case 181:
                iArr[i] += byFld;
            case 145:
                Test.fFld *= Test.fFld;
                break;
            case 369:
            case 257:
                Test.sFld = (short)Test.instanceCount;
            case 167:
                i32 -= i30;
                break;
            case 143:
                if (Test.bFld) continue;
            case 271:
                Test.fArrFld[i + 1][i - 1] *= i26;
                break;
            case 144:
                i29 += (i - i30);
                break;
            case 350:
                i1 += (96 + (i * i));
                break;
            case 344:
                i27 = i26;
                break;
            case 220:
                try {
                    i32 = (-59632 % i29);
                    i1 = (-1141888534 % i32);
                    iArr[i - 1] = (i31 / i31);
                } catch (ArithmeticException a_e) {}
                break;
            case 399:
                i27 &= i28;
            case 349:
                iArr[i] = i1;
                break;
            case 213:
                i29 <<= i30;
                break;
            case 390:
                Test.instanceCount &= i29;
                break;
            case 98:
                i29 = -22950;
                break;
            case 117:
                i1 -= i30;
                break;
            case 136:
                i32 += (i | i);
                break;
            case 387:
                i32 += i;
                break;
            case 364:
                Test.instanceCount ^= i32;
            case 190:
            case 375:
                i32 = i1;
                break;
            case 214:
                i27 = Test.sFld;
                break;
            case 77:
                i33 = 4;
            case 359:
            case 279:
            case 331:
                Test.fFld = i26;
            case 193:
                Test.dArrFld[i + 1] += Test.instanceCount;
                break;
            case 291:
                i32 += (i * i);
                break;
            case 231:
                i33 = i27;
                break;
            case 140:
                i29 += (i - byFld);
                break;
            case 275:
                Test.instanceCount -= -8788;
                break;
            case 90:
                Test.instanceCount -= (long)Test.fFld;
            case 264:
                i27 = (int)Test.instanceCount;
            case 346:
                bArr1[i + 1] = Test.bFld1;
            case 228:
                i33 = (int)Test.instanceCount;
            case 188:
                i33 = (int)Test.fFld;
                break;
            case 66:
                Test.fFld = i;
                break;
            case 386:
                Test.instanceCount += i28;
                break;
            case 151:
                i1 = i33;
                break;
            case 286:
                Test.fFld += (((i * i) + Test.sFld) - l1);
                break;
            case 385:
                i32 += iFld;
                break;
            case 290:
                iFld -= 0;
            case 207:
                Test.fFld *= Test.fFld;
                break;
            case 396:
                Test.dFld += l1;
            case 116:
                i33 -= i29;
            case 300:
                Test.lArrFld[i + 1] >>= i30;
                break;
            case 258:
                Test.fArrFld[i + 1][i] %= (i26 | 1);
                break;
            case 361:
                if (Test.bFld) break;
                break;
            case 371:
                Test.instanceCount += (((i * i31) + Test.instanceCount) - i26);
            case 353:
                Test.dFld = i27;
                break;
            case 226:
            case 209:
                l1 -= iFld;
                break;
            case 389:
                try {
                    iArr[i - 1] = (iArr[i - 1] / -1947946540);
                    iArr[i - 1] = (i28 % -53412);
                    iArr[i] = (i32 / 57352);
                } catch (ArithmeticException a_e) {}
                break;
            case 184:
                Test.dArrFld[i + 1] += i32;
                break;
            case 362:
                i27 = i32;
            case 293:
                i27 *= i;
                break;
            case 154:
                bArr1[i - 1] = Test.bFld1;
            case 297:
                byFld += (byte)i;
                break;
            case 155:
                iArr[i - 1] >>= -49747;
                break;
            default:
                if (Test.bFld) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
