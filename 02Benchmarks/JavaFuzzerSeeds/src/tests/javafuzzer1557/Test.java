package tests.javafuzzer1557;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:56:19 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-69L;
    public static volatile float fFld=0.469F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 54315);
        FuzzerUtils.init(Test.dArrFld, -50.5776);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f, int i14) {

        int i15=-33360, i16=-225, i17=-9, i18=111, i19=39752, iArr[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -43982);
        FuzzerUtils.init(fArr, -124.409F);

        Test.instanceCount += 10;
        for (i15 = 9; i15 < 360; i15++) {
            try {
                i16 = (Test.iArrFld[i15 + 1] / -226);
                i16 = (iArr[i15 - 1] % 55889);
                i16 = (iArr[i15 + 1] % iArr[i15 + 1]);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += Test.instanceCount;
            Test.fFld = i14;
            f = Test.instanceCount;
            fArr[i15 - 1] -= f;
            Test.fFld = -13;
            for (i17 = 1; 5 > i17; ++i17) {
                i19 = 1;
                while ((i19 += 2) < 2) {
                    if (b) break;
                    i18 += i15;
                    f += 56.413F;
                    i16 *= -12674;
                    try {
                        i18 = (iArr[i19 + 1] % 1253123570);
                        i16 = (i19 / -12633);
                        i18 = (-43187 / i14);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i7) {

        int i8=164, i9=-4, i10=19410, i11=-9, i12=31475, i13=5;
        double d=1.77458;
        byte by2=39;
        short s=-6344;

        for (i8 = 2; i8 < 390; ++i8) {
            for (i10 = 1; i10 < 4; ++i10) {
                Test.iArrFld[i8] = (int)((d * (0 - Math.min(1, i9))) * by2);
                i9 += (((i10 * i7) + Test.instanceCount) - i8);
                i9 = (int)(Test.dArrFld[i10][i8 - 1] - ((Test.instanceCount * i9) + (i11 = (int)Test.instanceCount)));
                for (i12 = 1; i12 < 2; ++i12) {
                    s += (short)(-15226L + (i12 * i12));
                    i9 = (Test.iArrFld[i8 - 1]--);
                    i13 += -34492;
                    Test.instanceCount += (i12 * i12);
                    i9 += i13;
                    lMeth(116.742F, i13);
                    if (i10 != 0) {
                        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + by2 + i12 + i13 + s;
                        return;
                    }
                    i13 += (-12474 + (i12 * i12));
                }
                Test.instanceCount += (((i10 * s) + Test.instanceCount) - i12);
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + by2 + i12 + i13 + s;
    }

    public static float fMeth(int i5, int i6) {

        byte by1=-116;
        int i20=-38940, i21=5;
        short s1=2424;

        Test.fFld *= by1;
        vMeth(i5);
        i5 = (int)Test.fFld;
        i20 = 209;
        do {
            if (i20 != 0) {
            }
            i6 *= i20;
            i5 = i20;
            i5 = i20;
            i6 <<= i20;
            i5 += i20;
            i21 = 1;
            do {
                Test.iArrFld[i20] <<= i5;
                i5 -= (int)Test.instanceCount;
                i5 = i5;
                s1 += (short)(i21 - i20);
            } while (++i21 < 8);
        } while (--i20 > 0);
        long meth_res = i5 + i6 + by1 + i20 + i21 + s1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-133, i1=144, i2=12, i3=254, i4=44221, i22=-22199, i23=-23245, i24=51877, i25=49247, i26=-207, i27=16245;
        byte by=9;
        short s2=-32010;
        double d1=-1.77216, d2=-2.97156;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 1340415038L);

        for (i = 9; i < 165; ++i) {
            for (i2 = 8; i2 < 161; i2++) {
                i1 += (((i2 * i3) + i2) - i4);
                i4 += by;
                i4 = (int)((i3 * fMeth(i, i)) + i2);
                i4 += (int)Test.fFld;
                i1 += (int)(3884114487431605032L + (i2 * i2));
            }
        }
        i1 += 13;
        for (i22 = 13; 222 > i22; ++i22) {
            s2 <<= (short)i4;
            s2 -= (short)i;
            for (i24 = 120; i24 > 3; i24--) {
                lArr[i24 - 1][i24] %= (0L | 1);
                i23 += i24;
            }
            for (d1 = 5; d1 < 120; d1++) {
                i27 = 1;
                while (++i27 < 2) {
                    i25 = i26;
                    switch ((((i3 >>> 1) % 1) * 5) + 61) {
                    case 65:
                        Test.fFld *= 30901;
                        break;
                    default:
                        switch (((i27 % 8) * 5) + 114) {
                        case 147:
                            i4 ^= (int)Test.instanceCount;
                            d2 -= s2;
                            Test.instanceCount -= (long)Test.fFld;
                            switch ((int)((d1 % 1) + 17)) {
                            case 17:
                                d2 -= Test.instanceCount;
                                break;
                            }
                            break;
                        case 153:
                            i1 += (i27 ^ Test.instanceCount);
                            switch (((i3 >>> 1) % 6) + 22) {
                            case 22:
                                i26 -= (int)-245L;
                                i1 = (int)Test.instanceCount;
                                by <<= (byte)i24;
                                break;
                            case 23:
                                Test.fFld += (((i27 * i4) + Test.instanceCount) - i);
                            case 24:
                                Test.dArrFld[i22][(int)(d1 - 1)] += i22;
                            case 25:
                                i4 += (i27 * i27);
                                break;
                            case 26:
                                Test.iArrFld[(int)(d1 + 1)] = (int)Test.instanceCount;
                                break;
                            case 27:
                                Test.instanceCount += (((i27 * i) + i23) - Test.instanceCount);
                                break;
                            }
                            break;
                        case 128:
                            Test.iArrFld[i22 - 1] = i;
                            break;
                        case 149:
                            Test.iArrFld[i27] += i22;
                            break;
                        case 115:
                            Test.instanceCount += (-4 + (i27 * i27));
                            break;
                        case 125:
                            Test.fFld = i24;
                            break;
                        case 118:
                            i4 += (((i27 * i1) + Test.instanceCount) - Test.fFld);
                            break;
                        case 137:
                            i1 += (i27 + i4);
                            break;
                        default:
                            Test.fFld += (-121 + (i27 * i27));
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
