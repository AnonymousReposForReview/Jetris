package tests.javafuzzer2704;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:51:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1089862176L;
    public static int iFld=-1273;
    public static float fFld=-2.182F;
    public static double dFld=108.12641;
    public static byte byFld=57;
    public static short sFld=-4372;
    public int iFld1=-27920;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth1() {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 16967);

        Test.fFld *= (iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] - iArr[(Test.iFld >>> 1) % N][(Test.iFld >>>
            1) % N]);
        vMeth1_check_sum += FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(int i1, int i2, int i3) {


        Test.instanceCount &= Test.instanceCount;
        long meth_res = i1 + i2 + i3;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth() {

        int i8=-77, i9=5, i10=172;
        boolean b2=true;
        long l=3868725962169166605L;

        Test.iFld = 250;
        i8 = 1;
        do {
            Test.iFld <<= i8;
            if (Test.iFld != 0) {
            }
            if (b2) break;
            Test.iFld += (((i8 * Test.iFld) + Test.instanceCount) - Test.byFld);
            l = 1;
            while (++l < 6) {
                Test.iArrFld[i8 - 1] += (int)l;
            }
            Test.iFld += i8;
            Test.instanceCount -= i8;
        } while (++i8 < 282);
        for (i9 = 224; i9 > 10; i9 -= 3) {
            if (b2) continue;
            Test.iFld = (int)l;
            i10 += 9;
            Test.iFld <<= i8;
        }
        long meth_res = i8 + (b2 ? 1 : 0) + l + i9 + i10;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        float f=-2.1006F;
        int i4=0, i5=-241, i6=-13676, i7=211, i11=-42089, i12=8, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -65193);

        for (f = 14; f < 391; f += 3) {
            i5 = 13;
            while ((i5 -= 3) > 0) {
                boolean b1=false;
                if (b1) continue;
            }
            for (i6 = 1; i6 < 13; i6++) {
                Test.iArrFld = Test.iArrFld;
                iArr1[i6 - 1][i6 + 1] = (int)((++iArr1[i6][(int)(f - 1)]) + (lMeth() * Test.dFld));
                for (i11 = 1; i11 < 2; i11 += 2) {
                    Test.iFld += (i11 * i11);
                    Test.instanceCount = Test.instanceCount;
                }
                Test.instanceCount = i5;
                i12 /= (int)(Test.byFld | 1);
                if (true) break;
                i4 = i5;
            }
            Test.instanceCount += (long)(((f * Test.instanceCount) + i12) - Test.byFld);
            Test.iFld = -53499;
        }
        long meth_res = Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        byte by=21;
        int i=52373, i13=11, i14=-39910, i15=1;
        boolean b=false;
        double d=0.76313, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -45.120100);

        by = (byte)(-((Test.instanceCount + Test.iFld) + Integer.reverseBytes(-7)));
        vMeth1();
        Test.dFld *= ((Test.iFld * (Test.fFld * Test.instanceCount)) - Test.iArrFld[(Test.iFld >>> 1) % N]);
        i = 1;
        while (++i < 291) {
            if ((b = ((Test.instanceCount > Test.fFld) | bMeth(38, Test.iFld, 10))) || (Test.instanceCount > (Test.iFld
                + (by++)))) break;
        }
        Test.instanceCount = (long)(Test.dFld *= (Test.instanceCount -= (++Test.iFld)));
        Test.iFld = (iMeth() + i);
        Test.iFld >>= 0;
        for (i13 = 7; i13 < 343; ++i13) {
            Test.iFld >>= (int)Test.instanceCount;
            Test.instanceCount = 188;
            for (d = 5; d > i13; d--) {
                Test.sFld += (short)((long)d | i15);
                Test.instanceCount += i13;
                dArr[(int)(d + 1)] += -7078;
            }
        }
        vMeth_check_sum += by + i + (b ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(d) + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=13, i17=5, i18=55714, i19=-3, i20=-33863, i21=-7, i22=6198, i23=220;
        long l1=-7868983525011137312L, lArr[]=new long[N];
        double d1=-2.128805;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -7L);

        vMeth();
        Test.instanceCount *= Test.iFld;
        for (i16 = 11; i16 < 331; i16++) {
            iFld1 += i16;
            Test.instanceCount -= -16248;
            for (i18 = 2; 79 > i18; ++i18) {
                bArr[i16 + 1] = Test.bFld;
            }
            Test.iFld *= Test.iFld;
            Test.dFld += Test.instanceCount;
            i20 = 79;
            while ((i20 -= 3) > 0) {
                i19 -= iFld1;
            }
        }
        Test.iArrFld[(-37 >>> 1) % N] ^= -6561;
        for (l1 = 13; 275 > l1; ++l1) {
            Test.iFld &= (int)Test.instanceCount;
            if (Test.bFld) break;
            lArr[(int)(l1 + 1)] -= (long)Test.fFld;
            Test.fFld += (((l1 * iFld1) + i20) - i20);
            switch ((int)(((l1 % 3) * 5) + 30)) {
            case 38:
                for (i22 = 2; i22 < 96; ++i22) {
                    Test.iArrFld[i22] += iFld1;
                    Test.iArrFld[i22 + 1] -= (int)Test.fFld;
                    lArr[i22 - 1] = Test.instanceCount;
                    i17 *= i21;
                    d1 = 1;
                    do {
                        i21 += 17290;
                        i19 *= (int)-5085486454446276983L;
                        Test.fFld -= i21;
                        Test.dFld = i17;
                        i21 -= i20;
                        i23 += (int)d1;
                    } while (++d1 < 2);
                }
                break;
            case 44:
                Test.iArrFld[(int)(l1)] += i16;
                break;
            case 39:
                Test.instanceCount += i16;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
