package tests.javafuzzer2250;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:59:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public int iFld=27525;
    public static int iFld1=3;
    public static short sFld=32252;
    public static double dFld=50.108594;
    public static float fFld=-22.7F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5894L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, int i7) {

        int i8=-170, i9=36, i10=-5, i11=-30803, i12=17775, i13=59, i14=-56, iArr1[]=new int[N];
        float f2=123.711F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(fArr, 82.921F);

        for (i8 = 2; i8 < 217; i8++) {
            i10 += (i8 | (long)f2);
            i7 *= Test.sFld;
            f2 += (2 + (i8 * i8));
            i5 += Test.iFld1;
            if (b) {
                iArr1 = FuzzerUtils.int1array(N, (int)42132);
                i7 *= Test.sFld;
                for (i11 = 1; i11 < 7; ++i11) {
                    i12 += (int)Test.instanceCount;
                }
                for (i13 = 1; i13 < 7; i13++) {
                    byte by1=-124;
                    Test.lArrFld[i13] = 224;
                    Test.instanceCount += (i13 * by1);
                    fArr[i13 + 1] = (float)Test.dFld;
                    iArr1[i8] *= i11;
                }
            } else {
                i7 /= (int)(i14 | 1);
                vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 +
                    (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(short s, float f, float f1) {

        float f3=52.341F, fArr1[]=new float[N];
        int i15=-18914, i16=11, i17=35, i18=-51085, i19=9, iArr2[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, -14);
        FuzzerUtils.init(fArr1, 26.980F);

        Test.iFld1 = (int)((s + (Test.instanceCount *= Test.instanceCount)) - ((Test.instanceCount - Test.iFld1) - f1));
        vMeth1(Test.iFld1, Test.iFld1, Test.iFld1);
        if (b1) {
            for (f3 = 8; 311 > f3; f3++) {
                iArr2 = iArr2;
            }
            for (i16 = 3; i16 < 271; i16++) {
                Test.dFld = i15;
                for (i18 = 1; i18 < 6; ++i18) {
                    Test.iFld1 *= (int)Test.instanceCount;
                    i19 -= i16;
                    Test.instanceCount += (long)f1;
                    fArr1[i18] = i19;
                    i19 = (int)f;
                }
                iArr2[i16 + 1] = i17;
                if (b1) continue;
            }
        } else {
            fArr1[(i16 >>> 1) % N] -= (float)Test.dFld;
        }
        long meth_res = s + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Float.floatToIntBits(f3) + i15 + i16 +
            i17 + i18 + i19 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l, double d) {

        byte by=-47;
        float f4=107.220F;
        int i20=12, i21=5, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -8);

        by = (byte)(Float.intBitsToFloat(iFld) * iMeth(Test.sFld, -81.438F, f4));
        for (i20 = 2; 256 > i20; ++i20) {
            Test.iFld1 += (i20 * i20);
            i21 += (-9 + (i20 * i20));
            iArr3[i20 - 1] ^= (int)Test.instanceCount;
            Test.iFld1 = (int)113L;
        }
        iFld -= 14;
        Test.iFld1 = iFld;
        Test.instanceCount *= Test.instanceCount;
        vMeth_check_sum += l + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f4) + i20 + i21 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=-57055, i1=-10, i2=188, i3=235, i4=208, i22=6, i23=14974, i24=28, i25=-5, iArr[]=new int[N], iArr4[]=new
            int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 36807);
        FuzzerUtils.init(dArr, -99.41732);
        FuzzerUtils.init(iArr4, -240);

        for (i = 11; i < 184; ++i) {
            for (i2 = i; i2 < 145; i2++) {
                i3 += (i2 * i2);
                try {
                    i3 = (i2 % -136);
                    i1 = (2835 / i3);
                    i3 = (iArr[i - 1] / 41);
                } catch (ArithmeticException a_e) {}
                i3 = i2;
                i4 = 1;
                do {
                    vMeth(11L, Test.dFld);
                    i1 -= (int)Test.instanceCount;
                    iArr[i] >>= (int)-1217963023L;
                    Test.iFld1 <<= Test.iFld1;
                    i3 *= iFld;
                    Test.iFld1 = (int)Test.dFld;
                    Test.fFld += i4;
                } while (++i4 < 1);
                dArr[i2 + 1] += i;
                for (i22 = 1; i22 < 1; i22++) {
                    Test.lArrFld[i - 1] = Test.iFld1;
                    i3 ^= (int)Test.instanceCount;
                    Test.instanceCount ^= i23;
                    try {
                        i23 = (-62081 % i1);
                        iFld = (iArr[i] % -81);
                        Test.iFld1 = (-28 % i4);
                    } catch (ArithmeticException a_e) {}
                    iFld = i2;
                    Test.instanceCount += 64042;
                }
                Test.iFld1 += i2;
                for (i24 = 1; i24 < 1; i24++) {
                    if (false) {
                        iArr4[i + 1] = i24;
                        Test.instanceCount += (i24 - i4);
                    } else if (false) {
                        Test.dFld += 12;
                        iArr[i - 1] = 40103;
                    } else {
                        Test.instanceCount += (i24 | i2);
                    }
                    try {
                        i25 = (1999095933 / i4);
                        iArr4[i2 + 1] = (iFld / 242);
                        Test.iFld1 = (i1 % -63756);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
