package tests.javafuzzer1105;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:32:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-55269L;
    public byte byFld=-101;
    public static int iFld=4786;
    public static byte byFld1=83;
    public float fFld=-1.627F;
    public static boolean bFld=false;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 66);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        byte by=-16;
        float f2=-1.48F;
        double d1=-18.86552;
        int i6=13, i7=41954, i8=0;
        boolean b=true;

        Test.iFld >>= by;
        f2 -= 11L;
        Test.iFld = Test.iFld;
        Test.iFld -= -11295;
        Test.iFld += 235;
        for (d1 = 8; 143 > d1; d1++) {
            by = (byte)Test.instanceCount;
            f2 = 84;
            if (b) {
                for (i7 = (int)(d1); 12 > i7; i7++) {
                    Test.iFld += Test.iFld;
                    i8 >>= i7;
                    i6 >>= (int)Test.instanceCount;
                    Test.instanceCount += i8;
                    Test.instanceCount += Test.iFld;
                }
            } else {
                Test.instanceCount *= Test.instanceCount;
            }
        }
        long meth_res = by + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i6 + i7 + i8 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=74, i3=100, i4=16663;
        double d=0.125670;
        float f=19.954F, f1=1.935F;

        for (i2 = 11; i2 < 300; ++i2) {
            Test.instanceCount *= (long)d;
            for (f = i2; f < 6; f += 2) {
                f1 = 1;
                while (++f1 < 1) {
                    int i5=56899;
                    Test.instanceCount -= (((i5 + i3) * (Test.iFld + Test.instanceCount)) - (Test.iArrFld[i2 +
                        1][i2]--));
                    i4 |= ((Test.iArrFld[i2 + 1][(int)(f - 1)] += i3) + (i4--));
                    i5 += (i4 *= (Test.iArrFld[(int)(f1 + 1)][(int)(f1 - 1)]++));
                    d *= iMeth1();
                    i3 &= Test.iFld;
                    i5 += (int)f1;
                    switch ((int)(((f % 2) * 5) + 63)) {
                    case 71:
                        i5 = i5;
                    case 70:
                        i4 += (int)f1;
                        break;
                    }
                    Test.iFld *= i3;
                    Test.iArrFld[(int)(f)][(int)(f)] = i3;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i4 +
            Float.floatToIntBits(f1);
    }

    public static int iMeth() {

        long l=1919041606L, lArr[]=new long[N];
        int i9=0, i10=63202, i11=-11338, i12=-211, i13=50, i14=27, iArr[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, -30960);
        FuzzerUtils.init(lArr, -4165598680L);

        Test.iFld <<= (int)Long.reverseBytes(Math.min(Test.iFld, Test.iFld) - Test.iFld);
        Test.instanceCount += iArr[(Test.iFld >>> 1) % N];
        vMeth();
        for (l = 12; l < 267; ++l) {
            i10 = 1;
            do {
                Test.iFld = Test.iFld;
            } while (++i10 < 6);
            b1 = b1;
            switch ((((Test.iFld >>> 1) % 7) * 5) + 109) {
            case 129:
                for (i11 = 1; i11 < 6; ++i11) {
                    Test.instanceCount = i10;
                    for (i13 = (int)(l); i13 < 2; i13++) {
                        b1 = b1;
                        i14 <<= i10;
                        Test.instanceCount -= Test.byFld1;
                    }
                    if (b1) continue;
                }
                break;
            case 112:
                iArr = iArr;
                break;
            case 119:
                Test.iFld <<= i13;
            case 133:
                Test.instanceCount = i13;
                break;
            case 139:
                lArr = lArr;
            case 117:
                if (b1) continue;
                break;
            case 124:
                i12 += 0;
            default:
                if (i9 != 0) {
                }
            }
        }
        long meth_res = l + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=48522, i1=-35730, i15=3, i16=-39630, i17=-5, i18=24, i19=-44269, i20=-10, i21=-5323, i22=-1;
        short s=30799;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 2.100160);
        FuzzerUtils.init(lArr1, 9L);

        if (Test.bFld) {
            for (i = 172; i > 7; i--) {
                byFld &= (byte)(-1.208F * ((i * i) * iMeth()));
                Test.instanceCount += i;
                i1 -= Test.iFld;
                i1 -= (int)24L;
                dArr[i - 1] += 9;
                Test.instanceCount += i1;
            }
        } else if (Test.bFld) {
            i15 = 1;
            while (++i15 < 273) {
                if (Test.bFld) {
                    i16 = 1;
                    do {
                        Test.iFld -= -51797;
                        i1 += (((i16 * i15) + i15) - i1);
                        fFld += i16;
                        Test.iArrFld[i15][i15 - 1] = (int)-4277557777L;
                    } while (++i16 < 92);
                    i1 -= Test.iFld;
                }
                for (i17 = 92; i17 > 5; i17 -= 2) {
                    for (i19 = 1; 3 > i19; ++i19) {
                        Test.instanceCount += (i19 - i15);
                        i18 = byFld;
                    }
                    Test.iArrFld[i17] = FuzzerUtils.int1array(N, (int)223);
                    lArr1[i15] *= i1;
                    for (i21 = 1; i21 < 3; ++i21) {
                        Test.instanceCount >>= -139;
                        i22 = i17;
                        Test.byFld1 = (byte)i21;
                        s = (short)i20;
                        try {
                            i18 = (i20 / -59295);
                            i18 = (i22 / Test.iArrFld[i15 + 1][i21]);
                            Test.iArrFld[i17 - 1][i17 - 1] = (i % -1970);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = i20;
                        Test.instanceCount = i1;
                    }
                }
            }
        } else {
            Test.iArrFld[(i22 >>> 1) % N][(i16 >>> 1) % N] = Test.iFld;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
