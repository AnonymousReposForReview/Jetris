package tests.javafuzzer1016;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:54:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=-56651;
    public static volatile short sFld=25667;
    public byte byFld=-70;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -11L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, long l, int i7) {

        int i8=-58452, i9=-170, i10=21440, i11=-344, i12=59312, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 250);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 5; ++i9) {
                iArr[i8 + 1] += i10;
                Test.sFld = (short)i10;
            }
        } while (++i8 < 339);
        i11 ^= Test.iFld;
        i12 = i10;
        i11 >>>= i7;
        l >>= i12;
        vMeth1_check_sum += i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i4=11, i5=-123, i13=-36170, i14=-8, i15=-63833, i16=104;
        short s=3265;
        byte by=61;
        double d=-2.92724;
        float f1=-2.1023F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -10.201F);

        Test.instanceCount -= Integer.reverseBytes(++Test.iFld);
        for (i4 = 11; i4 < 258; i4 += 3) {
            s = (short)Test.iFld;
            vMeth1(Test.iFld, Test.instanceCount, 5);
            Test.lArrFld[i4 + 1] -= -34641;
            switch (((i4 % 6) * 5) + 63) {
            case 69:
                Test.instanceCount = Test.instanceCount;
                for (i13 = 1; i13 < 19; i13++) {
                    by += (byte)(i13 - i4);
                    d *= 112.773F;
                }
                i14 += i4;
            case 73:
                f1 *= i14;
                for (i15 = 1; i15 < 19; i15 += 2) {
                    i16 += (((i15 * i16) + i14) - Test.iFld);
                    i14 = i16;
                }
                break;
            case 87:
                s += by;
                break;
            case 88:
                d += i15;
                break;
            case 80:
                Test.iFld += i4;
                break;
            case 84:
                fArr[i4] = fArr[i4];
                break;
            default:
                i16 += (((i4 * i15) + i16) - i16);
            }
        }
        long meth_res = i4 + i5 + s + i13 + i14 + by + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i15 +
            i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i2) {

        int i3=-206, i17=219, iArr1[]=new int[N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(iArr1, -117);
        FuzzerUtils.init(fArr1, -115.188F);

        i3 >>= iMeth();
        i3 >>>= (int)Test.instanceCount;
        i17 = 1;
        do {
            iArr1[i17] *= i2;
            switch ((((i2 >>> 1) % 1) * 5) + 41) {
            case 46:
                i3 += (i17 - i2);
                fArr1[i17 + 1][i17] -= f;
                i2 += (((i17 * i17) + Test.instanceCount) - Test.iFld);
                switch (((i17 % 2) * 5) + 31) {
                case 40:
                    if (true) continue;
                    iArr1[i17 - 1] -= i17;
                    i3 += i17;
                case 32:
                    Test.iFld >>= (int)Test.instanceCount;
                    i2 += (((i17 * Test.iFld) + i2) - Test.instanceCount);
                }
                break;
            }
            iArr1[i17 + 1] = 26521;
        } while (++i17 < 133);
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i17 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=175, i18=52268, i19=-20444, i20=-250, i21=-9, i22=-51, i23=-42509, i24=11, iArr2[]=new int[N];
        float f2=-1.626F;
        boolean b=true;
        double d1=0.82807;

        FuzzerUtils.init(iArr2, 14);

        for (i = 185; i > 3; i -= 2) {
            vMeth(f2, i1);
            for (i18 = 15; i18 < 275; i18++) {
                byFld += (byte)(-22328 + (i18 * i18));
                b = b;
                f2 = i1;
                for (i20 = 2; i20 > 1; --i20) {
                    Test.sFld = (short)i21;
                    d1 = i19;
                    f2 += i;
                    Test.instanceCount = i1;
                    Test.iFld <<= i19;
                    i21 = i;
                    i19 = i1;
                    i19 -= (int)Test.instanceCount;
                    Test.iFld += i20;
                    if (b) break;
                }
            }
            switch ((i % 3) + 3) {
            case 3:
                Test.instanceCount -= i21;
                for (i22 = 275; 2 < i22; --i22) {
                    i21 += byFld;
                    byFld <<= (byte)Test.instanceCount;
                    if (b) continue;
                    f2 += Test.instanceCount;
                    Test.instanceCount *= Test.instanceCount;
                    if (true) continue;
                    i21 = i20;
                    Test.instanceCount = 20732;
                    i1 += i18;
                }
                break;
            case 4:
                i21 = (int)Test.instanceCount;
                break;
            case 5:
                iArr2[i] += i24;
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
