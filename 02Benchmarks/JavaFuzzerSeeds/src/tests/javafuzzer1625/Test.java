package tests.javafuzzer1625;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:17:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=184L;
    public boolean bFld=true;
    public static volatile double dFld=0.55138;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -167);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10) {

        byte by=-89;
        int i12=24056, i13=-15475;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 888148025L);

        lArr[(i10 >>> 1) % N] *= -5;
        i10 ^= i10;
        for (int i11 : Test.iArrFld) {
            i11 >>= by;
            i10 *= (int)-6219785164092046233L;
            lArr[(i10 >>> 1) % N] <<= i11;
            switch ((((i11 >>> 1) % 6) * 5) + 93) {
            case 123:
                i11 = i11;
                i10 = by;
                break;
            case 110:
                Test.iArrFld[(i11 >>> 1) % N] = (int)-3429213375926331073L;
                break;
            case 104:
                for (i12 = 4; i12 > 1; i12--) {
                    i11 ^= by;
                }
                Test.instanceCount += i10;
                break;
            case 105:
                try {
                    i13 = (i11 / 59875);
                    Test.iArrFld[(35299 >>> 1) % N] = (57737 / i12);
                    Test.iArrFld[(185 >>> 1) % N] = (61845 / Test.iArrFld[(i12 >>> 1) % N]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount <<= i10;
                break;
            case 120:
                i11 = i11;
                break;
            case 122:
                Test.instanceCount <<= i10;
                break;
            }
        }
        long meth_res = i10 + by + i12 + i13 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(float f1, int i5, double d) {

        int i6=-1, i7=12015, i8=34761, i9=-3, i14=-7348, i15=3;
        short s1=-325;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -252L);

        for (i6 = 1; i6 < 208; ++i6) {
            long l=-6971483054686252862L;
            for (i8 = i6; i8 < 8; i8 += 2) {
                i9 += (int)(lMeth(8) * i5);
                i7 -= s1;
            }
            f1 %= (l | 1);
            i5 -= (int)f1;
            i9 += (i6 * i6);
        }
        d *= i5;
        lArr1[(-18 >>> 1) % N] = i6;
        i7 += -91;
        for (i14 = 1; i14 < 219; i14 += 2) {
            i9 >>>= i9;
            i5 >>>= 4;
            i15 += (i14 * i14);
            Test.instanceCount += (-13 + (i14 * i14));
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + s1 + i14 + i15
            + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        float f=2.73F, fArr[][]=new float[N][N];
        double d1=45.42606;
        int i16=5, i17=-211, i18=-5;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -3229448421818984516L);
        FuzzerUtils.init(fArr, 2.754F);

        for (int i4 : Test.iArrFld) {
            f *= ((2.528F * iMeth1(f, i3, Test.dFld)) - Test.instanceCount);
            i4 = i2;
            f = i2;
            i2 <<= i3;
            for (d1 = 1; 4 > d1; d1++) {
                i4 += i2;
                i4 >>= i3;
                for (i17 = (int)(d1); i17 < 2; ++i17) {
                    Test.iArrFld[i17 + 1] *= i18;
                    lArr2[(int)(d1 - 1)] = i17;
                    i3 = 24116;
                    i16 += i18;
                    fArr = fArr;
                    f += -92;
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=-11, i19=-33152, i20=-18331, i21=-36159;
        short s=10353;
        long l1=37113L;
        byte by1=-99;

        for (i = 380; i > 2; i -= 2) {
            s >>= (short)(i1 += (int)(i * (Test.instanceCount *= i1)));
            if (bFld) continue;
            i1 = (((i - i1) - (i * i)) - iMeth(i1, i1));
            i19 = 1;
            while (++i19 < 133) {
                i1 += (i19 * i);
                for (i20 = 1; i20 < 1; i20++) {
                    try {
                        i1 = (i19 % i20);
                        i21 = (i20 / i20);
                        i21 = (i21 % 153);
                    } catch (ArithmeticException a_e) {}
                    i1 += i20;
                    Test.iArrFld[i19] -= i21;
                    i1 |= i21;
                    i1 = (int)Test.instanceCount;
                    i21 += (i20 + Test.instanceCount);
                    Test.iArrFld[i19] -= (int)Test.instanceCount;
                    i1 += i20;
                    i21 = (int)Test.instanceCount;
                }
                i1 = i20;
                switch ((((i >>> 1) % 4) * 5) + 108) {
                case 118:
                    i21 *= i;
                    Test.instanceCount = i20;
                    Test.iArrFld[i] += -7;
                    break;
                case 124:
                    Test.instanceCount += (((i19 * i1) + i21) - i);
                    l1 *= i20;
                    break;
                case 112:
                    Test.dFld = -110;
                    i1 += i19;
                case 126:
                    i21 -= by1;
                    l1 += i;
                    break;
                default:
                    Test.dFld = i21;
                }
                s = (short)i1;
                if (false) break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
