package tests.javafuzzer218;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:17:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4738L;
    public static boolean bFld=false;
    public static float fFld=-113.854F;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 515369334L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, long l1, long l2) {

        int i8=-11580, i9=38107, i10=-5;
        float f1=1.620F;
        short s=-10902;

        i7 = i7;
        for (i8 = 371; i8 > 21; --i8) {
            i9 = i7;
            f1 -= i9;
            f1 -= f1;
            i9 += (((i8 * i8) + l1) - i9);
            l1 += (632L + (i8 * i8));
            i7 += (i8 * i8);
        }
        i10 = 1;
        do {
            i9 -= i10;
            f1 = Test.instanceCount;
            i9 = (int)l2;
        } while (++i10 < 126);
        Test.instanceCount -= (long)f1;
        i7 *= s;
        i9 += i9;
        vMeth_check_sum += i7 + l1 + l2 + i8 + i9 + Float.floatToIntBits(f1) + i10 + s;
    }

    public static int iMeth1(int i6) {

        int i11=-57398, i12=2, i13=-79, i14=-200, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 11080);

        vMeth(0, Test.instanceCount, Test.instanceCount);
        iArr1[(i6 >>> 1) % N] -= i6;
        for (i11 = 337; 1 < i11; --i11) {
            double d=-2.44819;
            Test.instanceCount += (i11 * i11);
            Test.lArrFld[i11 + 1] <<= i6;
            Test.instanceCount *= i12;
            i6 = i12;
            iArr1[i11 + 1] &= (int)Test.instanceCount;
            Test.fFld += (i11 * i11);
            Test.lArrFld[i11 - 1] = (long)d;
            if (false) {
                for (i13 = i11; i13 < 5; i13++) {
                    i6 += (int)d;
                    i12 += i13;
                    i12 += (i13 * i13);
                }
            } else if (Test.bFld) {
                iArr1[i11] = (int)Test.instanceCount;
            }
        }
        long meth_res = i6 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i2) {

        int i3=-244, i4=31750, i5=-8389, i15=-52976, iArr[]=new int[N];
        float f=0.148F;
        double d1=2.77091;

        FuzzerUtils.init(iArr, 9);

        i3 = 1;
        while (++i3 < 354) {
            i2 -= iArr[i3 - 1];
            try {
                i2 = (-129 % i2);
                i2 = (i3 % i3);
                iArr[i3 - 1] = (i3 % 37090);
            } catch (ArithmeticException a_e) {}
            i2 += (int)(Test.instanceCount >>> ((i2 * 3L) + i2));
            f = 1;
            do {
                Test.bFld = ((i2++) == (2445320942723610287L >> l));
            } while (++f < 5);
            for (i4 = 1; 5 > i4; i4 += 3) {
                Test.instanceCount >>= iMeth1(i3);
                i15 = 1;
                while (++i15 < 5) {
                    i5 += (i15 ^ i4);
                    l += (i15 * i15);
                    i2 += (i15 * i15);
                    i5 += (int)d1;
                    i5 >>>= (int)-4440753507936192714L;
                    Test.fFld += i2;
                }
            }
        }
        long meth_res = l + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i15 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=54791, i1=-2;
        double d2=-1.47939;

        for (i = 5; i < 272; i++) {
            iMeth(Test.instanceCount, i);
            i1 += i;
            d2 = -6;
            i1 *= (int)Test.fFld;
            i1 += (((i * i) + i1) - i);
            Test.instanceCount <<= i;
            i1 = 228;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
