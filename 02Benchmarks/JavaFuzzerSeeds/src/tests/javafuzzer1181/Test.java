package tests.javafuzzer1181;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:10:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1058559818L;
    public static short sFld=-1567;
    public static double dFld=95.43980;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        int i5=14, i6=-7, i7=-243, i8=2, i9=-194;
        float f=2.703F;

        Test.iArrFld[(i5 >>> 1) % N] += -22;
        i6 = 1;
        while (++i6 < 228) {
            i5 -= i5;
            i7 = 1;
            do {
                i5 -= -30439;
                Test.sFld >>= (short)-200L;
                l = i7;
                for (i8 = 1; i8 < 1; i8++) {
                    i9 += (int)f;
                    i9 = i8;
                }
                l += (i7 - i6);
                Test.instanceCount = -8794555211484642135L;
                Test.instanceCount += i7;
                i9 *= (int)l;
                Test.iArrFld[i7 - 1] >>>= i5;
            } while (++i7 < 7);
        }
        long meth_res = l + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        float f1=1.511F, f2=1.327F;
        int i10=50651;
        boolean b=true;
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(lArr, -1469728187L);
        FuzzerUtils.init(lArr1, 115L);

        Test.sFld -= (short)i4;
        iMeth(881500030L);
        for (f1 = 17; 363 > f1; f1++) {
            Test.instanceCount *= Test.instanceCount;
            try {
                i10 = (i10 % i10);
                i4 = (Test.iArrFld[(int)(f1)] / -1215347722);
                i10 = (i10 / i4);
            } catch (ArithmeticException a_e) {}
            switch ((int)(((f1 % 2) * 5) + 108)) {
            case 112:
                f2 -= -10208;
                i10 += i4;
                Test.instanceCount = i10;
                break;
            case 114:
                Test.dFld -= Test.sFld;
                if (b) continue;
                if (i10 != 0) {
                    vMeth_check_sum += i4 + Float.floatToIntBits(f1) + i10 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                break;
            }
            i4 = i4;
        }
        lArr = lArr1;
        i4 = Test.sFld;
        vMeth_check_sum += i4 + Float.floatToIntBits(f1) + i10 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(byte by) {

        int i3=190, i11=238, i12=240, i13=-41, i14=-24282, i15=3, i16=12;
        byte by1=-84;
        float f3=2.868F, fArr[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(fArr, 0.224F);

        switch ((((i3 - i3) >>> 1) % 1) + 26) {
        case 26:
            vMeth(i3);
            Test.instanceCount += 0;
            for (i11 = 9; i11 < 343; ++i11) {
                i3 = by1;
                i12 |= i3;
                for (i13 = 5; i13 > 1; --i13) {
                    if (b1) {
                        f3 += i14;
                        for (i15 = 1; i15 < 2; i15++) {
                            switch (((i13 % 1) * 5) + 87) {
                            case 89:
                                fArr[i13 + 1] -= i3;
                                i16 = i14;
                                i16 += (3 + (i15 * i15));
                                break;
                            default:
                                Test.iArrFld[i11] = i16;
                            }
                        }
                    } else {
                        by1 *= (byte)f3;
                    }
                }
            }
            break;
        default:
            Test.iArrFld[(i14 >>> 1) % N] <<= i3;
        }
        long meth_res = by + i3 + i11 + i12 + by1 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=100.102880;
        int i=48, i1=0, i2=-55535, i17=-137, i18=51068, i19=-38231, i20=-63993, i21=-4, i22=-126, i23=-12, i24=-13,
            i25=-23750, i26=4162;
        float f4=-11.895F;
        long l1=278296145980857040L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-112);

        d = (Test.sFld *= (short)(i++));
        for (i1 = 3; i1 < 233; ++i1) {
            byte by2=-10;
            Test.instanceCount = (lMeth(by2) - i2);
            i = i1;
        }
        switch ((((i >>> 1) % 1) * 5) + 93) {
        case 97:
            for (f4 = 1; f4 < 193; ++f4) {
                l1 = 1;
                do {
                    i2 *= i1;
                    i2 += (int)(((l1 * i1) + i2) - l1);
                    Test.dFld = -9L;
                    for (i18 = 1; i18 < 1; i18++) {
                        i19 = 135;
                        i19 = i17;
                        i2 += (i18 ^ (long)f4);
                        byArr[i18 + 1] >>= (byte)i;
                    }
                    for (i20 = 1; i20 > 1; --i20) {
                        i17 = 159;
                        Test.instanceCount = (long)f4;
                        i -= (int)Test.instanceCount;
                    }
                } while (++l1 < 131);
                for (i22 = 3; i22 < 131; ++i22) {
                    Test.iArrFld[(int)(f4)] = i2;
                    for (i24 = i22; i24 < 2; i24++) {
                        Test.instanceCount >>>= i24;
                        Test.instanceCount -= (long)Test.dFld;
                    }
                    Test.iArrFld[i22 + 1] += i19;
                    Test.instanceCount = i24;
                    switch ((((-1 >>> 1) % 2) * 5) + 8) {
                    case 14:
                        i26 = 1;
                        while (++i26 < 2) {
                            i23 += i26;
                            i25 += (int)l1;
                        }
                        break;
                    case 11:
                        i21 += (i22 ^ i22);
                        break;
                    default:
                        i19 -= 120;
                    }
                }
            }
            break;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
