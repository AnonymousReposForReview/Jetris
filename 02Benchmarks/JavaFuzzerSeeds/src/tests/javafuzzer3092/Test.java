package tests.javafuzzer3092;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:35:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static short sFld=15808;
    public static byte byFld=-38;
    public int iFld=-16894;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -27.32726);
        FuzzerUtils.init(Test.fArrFld, 1.619F);
        FuzzerUtils.init(Test.iArrFld, -61579);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, int i6) {

        double d1=0.59337, d2=31.98722, d3=1.56536;
        boolean b=true, bArr[]=new boolean[N];
        int i7=14903, i8=-16604, i9=-34016, i10=-29834, iArr[]=new int[N];
        float f1=-1.24F;

        FuzzerUtils.init(iArr, 61);
        FuzzerUtils.init(bArr, true);

        iArr[(i5 >>> 1) % N] %= (int)(i5 | 1);
        iArr[(i5 >>> 1) % N] = (int)d1;
        b = false;
        for (i7 = 18; i7 < 299; i7++) {
            if (b) {
                for (d2 = 1; d2 < 6; d2++) {
                    bArr[(int)(d2 + 1)] = b;
                    i8 -= i6;
                    i8 += (int)(((d2 * Test.sFld) + i8) - i5);
                    f1 *= 9;
                    i8 += (int)(d2 * d2);
                    d3 = 2;
                    while (--d3 > 0) {
                        if (b) {
                            Test.dArrFld[(int)(d2)] *= i5;
                            f1 = i8;
                        } else {
                            d1 = Test.instanceCount;
                        }
                    }
                }
            } else if (b) {
                i10 ^= i6;
            } else {
                i8 >>= i8;
            }
        }
        vMeth_check_sum += i5 + i6 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i7 + i8 + Double.doubleToLongBits(d2)
            + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + i10 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth1(int i2) {

        int i3=-144, i4=-5, i11=8, i12=-12, i13=58413, iArr1[]=new int[N];
        short s=7469;
        double d4=-19.13515;

        FuzzerUtils.init(iArr1, -9);

        for (i3 = 11; i3 < 314; i3++) {
            vMeth(i3, i2);
            i2 ^= -12;
            i11 = 1;
            while (++i11 < 5) {
                iArr1 = FuzzerUtils.int1array(N, (int)-221);
                Test.instanceCount = i11;
                s = (short)i12;
            }
            i4 += i3;
        }
        for (d4 = 8; 374 > d4; d4++) {
            i2 = i2;
            try {
                i13 = (i2 / 1184522564);
                i4 = (i11 % i12);
                i13 = (i3 / 50946);
            } catch (ArithmeticException a_e) {}
            i4 &= i12;
            iArr1 = iArr1;
            i12 <<= (int)Test.instanceCount;
            i2 /= (int)(i2 | 1);
        }
        long meth_res = i2 + i3 + i4 + i11 + s + i12 + Double.doubleToLongBits(d4) + i13 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        double d=0.32753, d5=39.85927;
        float f2=49.833F;
        int i14=-6, i15=-14195, i16=-33;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6747191778172287896L);

        d -= (((lArr[(i1 >>> 1) % N]++) * iMeth1(i1)) + -55305);
        for (f2 = 1; f2 < 141; ++f2) {
            for (d5 = 1; d5 < 11; ++d5) {
                i1 += (int)d5;
                i15 += (int)(((d5 * f2) + i14) - i15);
                i16 = 1;
                do {
                    d = i15;
                    Test.fArrFld[(int)(f2 + 1)] = i16;
                    lArr = lArr;
                    i14 <<= i1;
                    Test.instanceCount = 7;
                    Test.instanceCount <<= Test.byFld;
                    Test.iArrFld[(int)(f2)] ^= i15;
                    if (i1 != 0) {
                    }
                    i15 += i1;
                } while (++i16 < 2);
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i14 + Double.doubleToLongBits(d5)
            + i15 + i16 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=1.520F;
        int i=3, i17=-45640, i18=7, i19=-164, i20=-13, i21=15547, i22=103, i23=18441;
        short s1=22299;
        double d6=-1.52808;
        byte byArr[][]=new byte[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-3);
        FuzzerUtils.init(lArr1, 3938002699445080843L);

        for (f = 8; 132 > f; ++f) {
            i >>= (int)((++byArr[(int)(f - 1)][(int)(f)]) + ((-(i + f)) - iMeth(i)));
        }
        i17 = 1;
        while (++i17 < 248) {
            for (i18 = 6; i18 < 101; ++i18) {
                lArr1[i18] += i19;
                switch (((i18 % 3) * 5) + 54) {
                case 63:
                    Test.fArrFld[i17] = Test.instanceCount;
                    break;
                case 62:
                    i *= -19438;
                    lArr1[i18 + 1] <<= i19;
                case 66:
                    switch ((i17 % 6) + 83) {
                    case 83:
                        Test.iArrFld[i17 - 1] = i18;
                        i19 *= i;
                        lArr1[i17] -= i18;
                        for (i20 = 1; i20 < 2; ++i20) {
                            Test.instanceCount += i20;
                            i += (i20 * i20);
                            i21 += (95 + (i20 * i20));
                            i += (30758 + (i20 * i20));
                            i21 <<= (int)Test.instanceCount;
                            i21 = (int)Test.instanceCount;
                        }
                        break;
                    case 84:
                        lArr1[i17 - 1] ^= i;
                        break;
                    case 85:
                    case 86:
                        for (i22 = 1; i22 < 2; i22++) {
                            i19 -= i22;
                            i19 = (int)Test.instanceCount;
                            Test.instanceCount = i19;
                        }
                        Test.instanceCount += (i18 | Test.instanceCount);
                    case 87:
                        Test.iArrFld[i17] = (int)Test.instanceCount;
                        s1 += (short)(-7325L + (i18 * i18));
                        d6 -= i;
                        Test.iArrFld[i17 + 1] = 5;
                        break;
                    case 88:
                        i21 += (((i18 * i23) + i) - f);
                        break;
                    }
                    break;
                default:
                    iFld = (int)d6;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
