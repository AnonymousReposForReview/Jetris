package tests.javafuzzer575;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:08:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-123L;
    public static int iFld1=-161;
    public static volatile boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -63.487F);
        FuzzerUtils.init(Test.iArrFld, -251);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth(boolean b, int i2, int i3) {


        Test.instanceCount = (++i2);
        vMeth_check_sum += (b ? 1 : 0) + i2 + i3;
    }

    public static int iMeth(int i4, int i5, long l) {

        float f1=0.685F;
        int i6=63265, i7=-31, i8=10402, i9=181, i10=-8, iArr1[]=new int[N];
        short s=-1651;

        FuzzerUtils.init(iArr1, -159);

        f1 = 1;
        while (++f1 < 358) {
            i4 *= i4;
            i6 = 1;
            do {
                i5 &= i5;
            } while ((i6 += 3) < 5);
            Test.iFld1 += (int)(f1 * i4);
            l += Test.instanceCount;
            i5 <<= i7;
            i7 -= i5;
            Test.iFld1 -= (int)l;
            iArr1 = iArr1;
            for (i8 = 1; 5 > i8; i8++) {
                Test.iFld1 += -24476;
                i10 = 1;
                while (++i10 < 2) {
                    s >>= (short)i4;
                    s = (short)i6;
                }
            }
        }
        long meth_res = i4 + i5 + l + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + s +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d, boolean b1) {

        int i11=1, i12=10, i13=-53406;
        float f2=-121.792F;
        short s1=16232;
        byte by1=-93;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -150L);

        Test.instanceCount *= (long)((iMeth(Test.iFld1, Test.iFld1, -29888L) - -47) + 96.771F);
        i11 = 1;
        do {
            Test.instanceCount += (i11 - Test.iFld1);
            Test.iFld1 += (((i11 * f2) + f2) - f2);
            lArr = lArr;
            for (i12 = i11; i12 < 4; i12++) {
                Test.fArrFld[i12] = 2.171F;
                Test.iArrFld = Test.iArrFld;
                s1 <<= s1;
                Test.instanceCount = by1;
                f2 *= 127;
                f2 *= i11;
                i13 = (int)Test.instanceCount;
                Test.iFld1 = (int)Test.instanceCount;
                Test.iFld1 = Test.iFld1;
            }
        } while (++i11 < 376);
        vMeth1_check_sum += Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i11 + Float.floatToIntBits(f2) + i12 + i13 + s1
            + by1 + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(int i1) {

        byte by=-15;
        float f=1.518F, f3=0.490F, f4=-61.856F;
        double d1=-1.85456;
        boolean b2=true;
        int i14=32025, i15=141, i16=-13, i17=13;
        short s2=-23851;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 36204L);

        by -= by;
        vMeth(true, 109, (int)(f - (i1 + i1)));
        vMeth1(d1, b2);
        for (f3 = 11; f3 < 268; f3++) {
            Test.iFld1 += (int)f3;
        }
        Test.iFld1 = s2;
        lArr1[(-8 >>> 1) % N][(i14 >>> 1) % N] = (long)d1;
        for (f4 = 4; f4 < 197; ++f4) {
            for (i16 = 1; i16 < 8; ++i16) {
                i17 += (((i16 * i14) + i1) - Test.iFld1);
                i15 ^= (int)-20L;
                i1 += (int)-7.67655;
                if (Test.iFld1 != 0) {
                }
                f = i16;
                if (i17 != 0) {
                }
            }
        }
        long meth_res = i1 + by + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + (b2 ? 1 : 0) +
            Float.floatToIntBits(f3) + i14 + s2 + Float.floatToIntBits(f4) + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i18=5, i19=32, i20=-5539, i21=12, iArr[]=new int[N];
        byte by2=100;
        float f5=123.672F, fArr[]=new float[N];
        short s3=-24836;

        FuzzerUtils.init(fArr, 0.799F);
        FuzzerUtils.init(iArr, -8);

        fArr[(-29569 >>> 1) % N] += (((++Test.iFld1) + (Test.iFld1 * 14)) - (iArr[(Test.iFld1 >>> 1) % N] += (int)(7 -
            (--fArr[(Test.iFld1 >>> 1) % N]))));
        Test.iFld1 -= (int)((iArr[(Test.iFld1 >>> 1) % N] + (-237L + fMeth(Test.iFld1))) + -85);
        i18 = 1;
        while (++i18 < 184) {
            Test.iFld1 <<= Test.iFld1;
            i19 = 1;
            do {
                if (Test.bFld) break;
                Test.iFld1 += (i19 * by2);
                Test.iFld1 = i18;
                for (i20 = 1; 1 > i20; i20++) {
                    int i22=-53447;
                    i21 -= 169;
                    switch (((i21 >>> 1) % 4) + 10) {
                    case 10:
                        Test.bFld = Test.bFld;
                        Test.iArrFld[i20 - 1] = i20;
                        i21 = (int)529668031955740581L;
                        break;
                    case 11:
                        f5 -= by2;
                        break;
                    case 12:
                        i21 += Test.iFld1;
                        i21 = by2;
                        Test.bFld = Test.bFld;
                        f5 -= Test.iFld1;
                        break;
                    case 13:
                        i21 /= (int)(i21 | 1);
                    default:
                        i21 ^= 9882;
                        Test.iFld1 -= (int)Test.instanceCount;
                        i21 <<= i18;
                        i22 += (((i20 * i18) + i22) - i22);
                    }
                    Test.instanceCount *= i18;
                    if (false) break;
                    f5 -= i19;
                    i22 ^= i21;
                    Test.instanceCount = s3;
                    Test.instanceCount += i20;
                }
            } while (++i19 < 136);
        }

    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
