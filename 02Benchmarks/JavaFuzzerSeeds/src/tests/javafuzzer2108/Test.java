package tests.javafuzzer2108;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:08:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-13675L;
    public static int iFld=-198;
    public static volatile byte byFld=118;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -59298);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=39, i3=-1, i5=-47, i6=-23739;
        float f2=0.273F;
        double d=-2.100910;
        short s=-28828;

        Test.iFld |= Test.iFld;
        Test.iFld *= Test.iFld;
        for (i2 = 4; i2 < 305; ++i2) {
            Test.instanceCount += i3;
        }
        i3 = Test.byFld;
        f2 = 1;
        while (++f2 < 357) {
            i5 = 1;
            do {
                Test.iArrFld[(int)(f2 - 1)] *= i2;
                i3 += (int)f2;
                i6 = 1;
                while (++i6 < 1) {
                    i3 += (i6 * i6);
                    d -= 35914L;
                    Test.iArrFld[i6] = (int)Test.instanceCount;
                    Test.instanceCount = i3;
                    s <<= (short)28291;
                }
            } while (++i5 < 5);
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f2) + i5 + i6 + Double.doubleToLongBits(d) + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1) {

        float f1=-93.472F;
        int i7=6, i8=29964, i9=6, i10=203;
        short s1=-15640;
        double d1=1.47628;

        Test.iFld += (int)(Double.longBitsToDouble((long)(-64.896F - (Test.instanceCount + f1))) - (iMeth() +
            Test.iFld));
        for (i7 = 190; 4 < i7; --i7) {
            Test.instanceCount = (long)f1;
            Test.iFld += -37518;
            i1 += 12485;
            Test.iFld += (i7 * i7);
            s1 >>= (short)i1;
            i8 *= 3;
            Test.instanceCount += (((i7 * i7) + i8) - i1);
            for (i9 = 1; i9 < 9; ++i9) {
                Test.instanceCount += i9;
                d1 -= i9;
                if (Test.iFld != 0) {
                    vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i7 + i8 + s1 + i9 + i10 +
                        Double.doubleToLongBits(d1);
                    return;
                }
                Test.iFld += Test.iFld;
            }
            Test.iFld += (((i7 * i10) + Test.iFld) - f1);
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + i7 + i8 + s1 + i9 + i10 + Double.doubleToLongBits(d1);
    }

    public static void vMeth(int i) {

        long l=1547713780L, l1=-6L;
        int i11=1, i12=-217, i13=-30352, i14=-55, i15=-106;
        float f3=0.66F, fArr[][]=new float[N][N];
        double d2=2.26230, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 31.83385);
        FuzzerUtils.init(fArr, 71.531F);

        vMeth1(i);
        switch ((((Test.iFld >>> 1) % 6) * 5) + 9) {
        case 24:
            for (l = 140; l > 3; l -= 2) {
                Test.iArrFld = Test.iArrFld;
                i %= (int)1.698F;
                dArr = dArr;
                Test.iArrFld[(int)(l - 1)] += (int)f3;
                for (i12 = (int)(l); i12 < 23; ++i12) {
                    for (i14 = 1; i14 < 1; ++i14) {
                        i11 += (int)d2;
                        i /= (int)(l | 1);
                        i13 += (i14 * i15);
                        d2 -= i13;
                    }
                    Test.iFld += (int)Test.instanceCount;
                    fArr[(int)(l - 1)][i12 + 1] -= i15;
                }
            }
            break;
        case 25:
            i13 = (int)Test.instanceCount;
            break;
        case 13:
            i13 <<= (int)-9L;
            break;
        case 30:
            Test.byFld = (byte)i11;
        case 29:
            l1 = i15;
        case 38:
        default:
            i *= i;
        }
        vMeth_check_sum += i + l + i11 + Float.floatToIntBits(f3) + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d2)
            + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        byte by=-99, byArr[]=new byte[N];
        float f=-1.71F, fArr1[]=new float[N];
        int i17=-245, i18=8632, i19=21878, i20=31810, i21=-2, i22=-3, i23=16344, i24=-2, i25=-5, i26=-119;
        double d3=-28.64852;
        long l2=-3L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -20526L);
        FuzzerUtils.init(fArr1, -94.119F);
        FuzzerUtils.init(byArr, (byte)-101);

        Test.iFld = by;
        Test.instanceCount = (long)(f * 6);
        vMeth(-13);
        lArr[(Test.iFld >>> 1) % N] &= -12L;
        Test.iFld <<= Test.iFld;
        fArr1[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i17 = 281; i17 > 12; i17 -= 3) {
            i19 = 1;
            do {
                i18 += (i19 - Test.byFld);
            } while (++i19 < 281);
            Test.iFld -= (int)Test.instanceCount;
            d3 += i18;
            Test.instanceCount += Test.iFld;
            Test.iArrFld[i17 + 1] <<= i18;
            Test.bFld = Test.bFld;
        }
        Test.iFld = i18;
        Test.iFld = 116;
        for (i20 = 17; i20 < 282; ++i20) {
            Test.iFld += (10 + (i20 * i20));
            i18 ^= i18;
        }
        for (i22 = 7; i22 < 396; ++i22) {
            Test.iArrFld = Test.iArrFld;
            for (l2 = 65; l2 > 3; --l2) {
                if (Test.bFld) {
                    i23 += i18;
                    for (i25 = 1; i25 < 2; ++i25) {
                        i21 += (9469 + (i25 * i25));
                        f += Test.instanceCount;
                        i24 = (int)l2;
                    }
                    i26 += (-4 + (l2 * l2));
                    byArr[(int)(l2)] = (byte)f;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
