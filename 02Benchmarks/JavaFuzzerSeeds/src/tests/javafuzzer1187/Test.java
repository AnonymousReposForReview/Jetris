package tests.javafuzzer1187;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:10:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=30462L;
    public static float fFld=1.402F;
    public static double dFld=-100.106047;
    public static byte byFld=36;
    public boolean bFld=true;
    public byte byArrFld[]=new byte[N];
    public static double dArrFld[]=new double[N];
    public static volatile int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -116.93469);
        FuzzerUtils.init(Test.iArrFld, 239);
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.fArrFld, 1.989F);
    }

    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10) {

        int i11=-28984, i12=-5, i13=-73, i14=224, i15=177;
        short s=-22215;
        byte by=84;
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.558F);

        i11 = 1;
        while (++i11 < 268) {
            switch ((((i11 >>> 1) % 2) * 5) + 63) {
            case 70:
                for (i12 = 6; i12 > 1; i12--) {
                    i10 = 11;
                    for (i14 = 1; i14 < 2; i14++) {
                        switch (((i15 >>> 1) % 1) + 15) {
                        case 15:
                            i13 -= i12;
                            break;
                        default:
                            Test.fFld += (((i14 * i10) + i11) - Test.instanceCount);
                            if (b2) {
                                Test.iArrFld = Test.iArrFld;
                                i15 = s;
                            } else if (b2) {
                                Test.instanceCount *= i15;
                                Test.lArrFld[i14] = by;
                                fArr[i12] -= Test.fFld;
                            } else if (b2) {
                                Test.fFld = (float)Test.dFld;
                            } else {
                                i10 += (202 + (i14 * i14));
                            }
                        }
                    }
                }
                break;
            case 68:
                Test.dArrFld[i11] *= i12;
                break;
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + s + by + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth(int i8, int i9, boolean b1) {

        int i16=59004, i17=-205;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)1517);

        Test.fFld *= ((--i9) + Test.instanceCount);
        Test.dArrFld[(i8 >>> 1) % N] *= -156L;
        vMeth(i8);
        if (b1) {
            for (i16 = 5; i16 < 191; i16++) {
                byte by1=-74;
                switch ((i16 % 7) + 44) {
                case 44:
                case 45:
                    i17 += by1;
                    i17 += (i16 | i16);
                    Test.iArrFld[i16][i16] -= (int)11L;
                case 46:
                    if (true) {
                        i9 += i16;
                        if (i8 != 0) {
                        }
                    } else {
                        i8 += (((i16 * i17) + i8) - i16);
                        Test.instanceCount -= i9;
                    }
                    i17 += (i16 * i8);
                case 47:
                    sArr[i16 + 1] -= (short)i16;
                case 48:
                    Test.instanceCount += i17;
                    break;
                case 49:
                    Test.lArrFld[i16 - 1] *= Test.instanceCount;
                    break;
                case 50:
                    i9 += by1;
                    break;
                default:
                    Test.fArrFld[i16 - 1] = 8;
                }
            }
        } else {
            i8 = i17;
        }
        long meth_res = i8 + i9 + (b1 ? 1 : 0) + i16 + i17 + FuzzerUtils.checkSum(sArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(int i5, float f1, int i6) {

        int i7=62840, i18=-236, i19=-199, i20=7, i21=-202, i22=-46471, i23=21559;
        boolean b3=true;
        short s1=-20393;
        long l=57L, lArr[]=new long[N];
        double d1=-2.36682;

        FuzzerUtils.init(lArr, -221L);

        i5 = (int)Math.min(lArr[(i7 >>> 1) % N], byMeth(i6, 1, b3) * Test.byFld);
        for (i18 = 3; i18 < 236; ++i18) {
            if (b3) break;
            Test.byFld %= (byte)(s1 | 1);
            i5 += (((i18 * Test.byFld) + Test.byFld) - i7);
            for (l = 1; l < 7; ++l) {
                i6 += i19;
            }
            for (d1 = 1; d1 < 7; d1++) {
                Test.iArrFld[(int)(d1 + 1)][i18] = (int)90.96913;
            }
        }
        i6 = -43529;
        i21 = i18;
        i20 += (int)-1443705405L;
        for (i22 = 7; i22 < 210; ++i22) {
            if (i19 != 0) {
            }
            i21 *= (int)5084457166142512035L;
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + i6 + i7 + (b3 ? 1 : 0) + i18 + i19 + s1 + l + i20 +
            Double.doubleToLongBits(d1) + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-26579, i1=-81, i2=-2, i3=9, i4=498, i24=221, i26=2368, iArr[]=new int[N];
        float f=2.430F;
        boolean b=true;
        short s2=-19984;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -12.67287);
        FuzzerUtils.init(iArr, -3);

        i = 1;
        do {
            switch ((((++i1) >>> 1) % 6) + 65) {
            case 65:
                i1 = (int)((Math.max(i, i) + -35858) * ((i - i1) + dArr[i + 1]));
                break;
            case 66:
                for (i2 = 2; 115 > i2; i2++) {
                    double d=-2.36192;
                    i1 *= (int)(Math.max(Test.instanceCount + i4, (long)(f - f)) * byArrFld[i2]);
                    Test.instanceCount += (11138 + (i2 * i2));
                    d += i4;
                    if (b) {
                        iArr[i] ^= (i3 = (i4++));
                        if ((++iArr[i + 1]) != ((i4++) + i1)) continue;
                    } else if (bFld) {
                        if (b = (((-(-(-132 + lMeth(i1, f, i3)))) != -6) || b)) continue;
                    } else {
                        i24 = 1;
                        do {
                            f += (109.497F + (i24 * i24));
                            s2 = (short)-4;
                            sArrFld[i24 + 1] = sArrFld[i2 - 1];
                            Test.instanceCount *= i1;
                            d = i3;
                            i1 <<= i3;
                            Test.iArrFld[i] = Test.iArrFld[i2 + 1];
                            if (b) {
                                if (bFld) continue;
                            } else if (b) {
                                Test.fFld += Test.instanceCount;
                                i1 += (int)Test.instanceCount;
                                Test.instanceCount -= i24;
                                Test.iArrFld[i24 - 1][i24 + 1] -= (int)Test.instanceCount;
                            } else {
                                i1 += i24;
                            }
                        } while (++i24 < 2);
                        Test.fFld += (i2 * i);
                    }
                    i3 = i2;
                    s2 = (short)f;
                    i3 += (int)Test.fFld;
                }
                break;
            case 67:
                Test.instanceCount = -10;
                break;
            case 68:
                i3 += i2;
                break;
            case 69:
            case 70:
                i26 = i;
                break;
            }
        } while (++i < 219);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
