package tests.javafuzzer806;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:20:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7686595241561070780L;
    public static int iFld=45163;
    public float fFld=-38.847F;
    public byte byFld=100;
    public short sFld=-210;

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5) {

        int i6=94, i7=-212, i8=-55993, i9=9175, i10=-62, iArr1[]=new int[N];
        boolean b=true;
        float f2=96.550F;

        FuzzerUtils.init(iArr1, 2);

        i6 = 1;
        do {
            for (i7 = 1; i7 < 7; ++i7) {
                for (i9 = 1; i9 < 2; i9++) {
                    byte by2=123;
                    switch ((((i8 >>> 1) % 10) * 5) + 17) {
                    case 67:
                        i5 += i8;
                        i10 = i9;
                        break;
                    case 58:
                        if (b) {
                            i5 = i10;
                            iArr1[i6 + 1] -= -13416;
                            i5 -= i8;
                        }
                        Test.instanceCount >>>= 59421;
                        Test.iFld -= i6;
                        iArr1[i9 - 1] += (int)f2;
                        break;
                    case 44:
                        iArr1[i7 - 1] >>>= i6;
                        break;
                    case 60:
                        f2 = i5;
                    case 59:
                        f2 *= Test.iFld;
                        break;
                    case 21:
                        iArr1[i7 + 1] -= Test.iFld;
                        break;
                    case 41:
                        by2 = (byte)Test.instanceCount;
                        break;
                    case 49:
                        f2 = i8;
                        break;
                    case 20:
                        i8 -= i10;
                        break;
                    case 39:
                        iArr1[i6] &= i6;
                        break;
                    default:
                        i5 += Test.iFld;
                    }
                }
            }
        } while (++i6 < 242);
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static short sMeth(float f1, int i4, byte by1) {

        int i11=-249, i12=10476, i13=2, i14=-142, iArr2[]=new int[N], iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr2, -14);
        FuzzerUtils.init(iArr3, -139);

        vMeth1(31845);
        Test.iFld ^= -5663;
        Test.instanceCount <<= i4;
        Test.instanceCount ^= Test.iFld;
        iArr2[(Test.iFld >>> 1) % N] *= i4;
        for (i11 = 5; i11 < 179; ++i11) {
            Test.instanceCount *= i12;
            for (i13 = 1; i13 < 9; ++i13) {
                Test.instanceCount = i4;
                iArr2[i11 - 1] = 134;
                i14 = i13;
                iArr3 = iArr3;
                i4 = 4;
                i14 %= (int)((long)(f1) | 1);
            }
            i4 += Test.iFld;
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + by1 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(iArr3);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        short s=19231;
        float f=97.709F, f3=-100.629F;
        int i=147, i1=-4, i2=-12, i3=9805, iArr[]=new int[N];
        byte by=45;
        long l=152L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 29514L);
        FuzzerUtils.init(iArr, -1);

        Test.instanceCount += (long)(((s / (Test.iFld | 1)) + (f + Test.iFld)) * ((s + f) + (Test.iFld - Test.iFld)));
        i = 1;
        while (++i < 281) {
            lArr[i] *= (++Test.iFld);
            Test.iFld = (int)(((Test.instanceCount * by) * (Test.iFld >> -15161)) + ((i + i) + (++Test.iFld)));
            Test.iFld = Test.iFld;
            for (i1 = 6; i1 > i; --i1) {
                for (l = 1; l > 1; l--) {
                    Test.instanceCount += (l * l);
                    if ((iArr[(int)(l)] * (sMeth(-97.322F, -22507, (byte)(59)) % (i | 1))) != i2) continue;
                    iArr[i - 1] ^= 6;
                    Test.iFld += (int)l;
                    Test.instanceCount = (long)100.793F;
                    iArr[(int)(l)] -= (int)f3;
                }
                s = (short)i2;
                Test.instanceCount >>= Test.instanceCount;
            }
        }
        vMeth_check_sum += s + Float.floatToIntBits(f) + i + by + i1 + i2 + l + i3 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-2.26378;
        int i15=11, i16=-9, i17=-12, i18=7, i19=-2, i20=-234, i21=-26114, i22=15, i23=-59, i24=44, iArr4[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr4, -17494);

        vMeth();
        fFld = Test.instanceCount;
        iArr4[(Test.iFld >>> 1) % N] = Test.iFld;
        byFld *= (byte)Test.instanceCount;
        sFld -= (short)d;
        i15 = 1;
        do {
            d = 5;
            fFld -= Test.iFld;
            Test.instanceCount += Test.iFld;
            Test.iFld -= (int)-549630147565295258L;
            switch ((i15 % 2) + 85) {
            case 85:
                for (i16 = 5; i16 < 190; i16 += 2) {
                    iArr4[i16 + 1] >>>= 24210;
                }
                byFld = (byte)Test.instanceCount;
                break;
            case 86:
                iArr4[i15] = (int)Test.instanceCount;
                i17 = i15;
                Test.instanceCount = Test.instanceCount;
                Test.iFld += (i15 * i17);
                break;
            default:
                i18 = 1;
                while (++i18 < 190) {
                    Test.iFld -= -37954;
                    Test.iFld = (int)d;
                }
            }
        } while (++i15 < 132);
        Test.iFld += (int)Test.instanceCount;
        for (i19 = 15; i19 < 379; ++i19) {
            for (i21 = i19; i21 < 69; ++i21) {
                for (i23 = 1; 1 > i23; ++i23) {
                    iArr4[i21] -= -51230;
                    i22 += (-93 + (i23 * i23));
                    if (b1) continue;
                    i20 -= sFld;
                }
            }
            Test.instanceCount += (i19 ^ Test.iFld);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
