package tests.javafuzzer1751;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:00:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-689206784L;
    public static byte byFld=14;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 240);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, long l1) {

        float f=-94.1017F;
        int i5=28927, i7=6, i8=-41400, i9=59998, i10=54771, i11=3, i12=21002, i13=113, iArr[]=new int[N];
        byte by=-22;
        boolean b=true;

        FuzzerUtils.init(iArr, 59923);

        if (b) {
            f *= i5;
            for (int i6 : iArr) {
                for (i7 = 1; i7 < 4; i7++) {
                    i6 += (i7 * by);
                    Test.instanceCount -= i8;
                }
                for (i9 = 1; 4 > i9; ++i9) {
                    for (i11 = 2; i9 < i11; i11 -= 3) {
                        by |= (byte)i12;
                        if (true) continue;
                        i10 += (int)f;
                    }
                    i5 *= (int)Test.instanceCount;
                    i5 = 14652;
                    i8 *= i9;
                    i12 %= (int)(i13 | 1);
                }
            }
        } else {
            i10 >>= i10;
        }
        long meth_res = l + l1 + Float.floatToIntBits(f) + i5 + i7 + i8 + by + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0)
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4) {


        i4 *= Math.min(++i4, Math.min(i4 + i3, i4));
        iMeth(Test.instanceCount, Test.instanceCount);
        i3 += i3;
        i4 = Test.byFld;
        vMeth_check_sum += i3 + i4;
    }

    public static void vSmallMeth() {

        int i14=-231, iArr1[]=new int[N];
        float f1=-2.634F;

        FuzzerUtils.init(iArr1, -8411);

        vMeth(i14, i14);
        f1 = i14;
        vSmallMeth_check_sum += i14 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-14728, i1=-23399, i2=-17, i16=1;
        float f2=95.883F;
        double d=-1.106249;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 55898L);

        i = 1;
        while (++i < 227) {
            for (i1 = 111; i1 > 6; --i1) {
                switch (((i % 2) * 5) + 87) {
                case 90:
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                    i2 += (i1 ^ i1);
                    i16 = 1;
                    while (++i16 < 2) {
                        switch ((((-7 >>> 1) % 2) * 5) + 3) {
                        case 4:
                            i2 = (int)Test.instanceCount;
                            Test.instanceCount += i16;
                            switch ((i1 % 4) + 127) {
                            case 127:
                                Test.instanceCount *= 2871192755L;
                                try {
                                    i2 = (i16 % Test.iArrFld[i16 - 1]);
                                    i2 = (-55990 % Test.iArrFld[i]);
                                    i2 = (i2 / i2);
                                } catch (ArithmeticException a_e) {}
                                Test.instanceCount += (-66 + (i16 * i16));
                                break;
                            case 128:
                                if (Test.bFld) {
                                    i2 += i16;
                                    f2 += i16;
                                } else if (Test.bFld) {
                                    f2 += (i16 + i1);
                                    i2 += (((i16 * Test.instanceCount) + i1) - Test.instanceCount);
                                    f2 *= i1;
                                    Test.iArrFld[i - 1] = i;
                                } else if (Test.bFld) {
                                    f2 = i2;
                                    lArr[i16] <<= i;
                                    if (Test.bFld) {
                                        i2 *= (int)13.72014;
                                        Test.instanceCount -= i16;
                                    } else if (Test.bFld) {
                                        d -= -6365;
                                        Test.iArrFld[i16 + 1] = i2;
                                        bArrFld[i] = Test.bFld;
                                        f2 += i16;
                                    }
                                }
                                i2 -= (int)f2;
                                break;
                            case 129:
                                if (Test.bFld) continue;
                            case 130:
                            }
                            break;
                        case 9:
                            i2 += i16;
                        }
                    }
                    break;
                case 92:
                    try {
                        i2 = (-63083 % i);
                        Test.iArrFld[i - 1] = (21689 % Test.iArrFld[i1 - 1]);
                        i2 = (i / i);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
