package tests.javafuzzer2748;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:47:40 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6067476123880878768L;
    public static float fFld=-44.706F;
    public static boolean bFld=true;
    public volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld1[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.23945);
        FuzzerUtils.init(Test.iArrFld1, 118);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(short s, int i1, long l) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -18531L);

        i1 += (i1 |= (++i1));
        lArr[(i1 >>> 1) % N] = ((++i1) | ((i1 %= (int)(i1 | 1)) + (-i1)));
        vSmallMeth_check_sum += s + i1 + l + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i2) {

        int i3=41626, i4=-1, i5=-5, i6=4, i7=7, i8=26369, i9=44, i10=-4, i11=146, i12=186, i13=-164, iArr[]=new int[N];
        byte by=-99;
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(lArr1, -1867719243L);

        for (i3 = 362; i3 > 2; i3 -= 2) {
            i4 += (((i3 * i3) + i4) - by);
            i4 += (i3 ^ i3);
            i2 = (int)Test.instanceCount;
        }
        for (i5 = 10; i5 < 166; ++i5) {
            iArr[i5 - 1] ^= -11213;
            Test.fFld += i5;
        }
        for (i7 = 21; 342 > i7; i7++) {
            for (i9 = 1; i9 < 5; ++i9) {
                i6 &= i7;
                for (i11 = i9; i11 < 2; ++i11) {
                    b = false;
                }
                lArr1 = FuzzerUtils.long1array(N, (long)8L);
                Test.dArrFld[i7] *= Test.instanceCount;
                i13 += (i9 ^ i7);
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + by + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(float f1, long l1) {

        int i14=212, i15=1, i16=51925, i17=4, i18=-37509;
        boolean b1=true, bArr[]=new boolean[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 4978166742737556805L);
        FuzzerUtils.init(bArr, false);

        vMeth(i14);
        Test.iArrFld1[(i14 >>> 1) % N] += i14;
        for (i15 = 13; 370 > i15; i15++) {
            b1 = b1;
            lArr2[i15 - 1] = i14;
            l1 = i15;
            bArr[(i15 >>> 1) % N] = true;
            Test.fFld *= Test.fFld;
            Test.iArrFld1[i15 + 1] = i14;
        }
        if (b1) {
            i17 = 1;
            while ((i17 += 2) < 379) {
                i18 = 1;
                while (++i18 < 8) {
                    l1 ^= Test.instanceCount;
                    i16 = (int)Test.instanceCount;
                    i16 = (int)l1;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l1 + i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 +
            FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f) {


        lMeth(f, Test.instanceCount);
        long meth_res = Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i19=50010, i20=47894, i21=-62223, i22=-29857, i23=-53087, i24=8, i25=-43960, i26=67;
        double d=66.118424, d1=2.40329;
        short s1=11137;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.688F);

        switch ((((-(--iArrFld[(-11550 >>> 1) % N])) >>> 1) % 2) + 119) {
        case 119:
            iArrFld[(i >>> 1) % N] = (--i);
            for (int smallinvoc=0; smallinvoc<628; smallinvoc++) vSmallMeth((short)(((i + 49.111F) + (-(i +
                Test.instanceCount))) - iMeth(Test.fFld)), i, Test.instanceCount);
            i19 = 1;
            do {
                for (i20 = 4; i20 < 67; ++i20) {
                    i += i;
                    Test.instanceCount -= Test.instanceCount;
                }
                switch ((i19 % 2) + 106) {
                case 106:
                    for (i22 = 2; 67 > i22; ++i22) {
                        boolean b2=false;
                        Test.instanceCount = i23;
                        Test.instanceCount = 104;
                        iArrFld[i19 + 1] *= i21;
                        for (d = 1; d < 2; ++d) {
                            Test.instanceCount += (56444 + (d * d));
                            Test.iArrFld1[(int)(d)] = (int)Test.fFld;
                            Test.fFld -= Test.fFld;
                            iArrFld[(int)(d - 1)] -= i21;
                            s1 *= (short)d;
                        }
                        fArr = fArr;
                        try {
                            i21 = (i % i22);
                            i21 = (-59 % i19);
                            i21 = (iArrFld[i22] / i19);
                        } catch (ArithmeticException a_e) {}
                        d1 += 141;
                        i23 += (int)Test.instanceCount;
                        b2 = b2;
                        i >>= -1;
                    }
                    for (i25 = 1; 67 > i25; i25++) {
                        Test.fFld = 33;
                        Test.iArrFld1[i19 - 1] -= (int)175L;
                        try {
                            i23 = (i25 / iArrFld[i25 - 1]);
                            i24 = (1940639208 % i19);
                            i26 = (i19 % i19);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.fFld += Test.fFld;
                    i23 = i19;
                    break;
                case 107:
                    i21 >>= i22;
                default:
                    if (Test.bFld) break;
                }
            } while (++i19 < 375);
            break;
        case 120:
            Test.iArrFld1[(i22 >>> 1) % N] = i22;
        default:
            i26 = i20;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
