package tests.javafuzzer752;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:10:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-231746857189413671L;
    public static int iFld=0;
    public static float fFld=-68.642F;
    public static boolean bFld=false;
    public static volatile short sFld=-47;
    public byte byFld=-27;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.672F);
        FuzzerUtils.init(Test.iArrFld, 43);
        FuzzerUtils.init(Test.iArrFld1, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {

        byte by=117;
        int i5=-12, i6=-12, i7=-4444, i8=-9, i9=-47, i10=19747;
        short s=20725;
        double d1=1.86378;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9L);

        Test.instanceCount ^= by;
        for (i5 = 387; i5 > 14; i5 -= 3) {
            i4 = i4;
            i4 += (((i5 * Test.iFld) + i6) - i5);
            if (Test.bFld) {
                for (i7 = 1; i7 < 13; i7++) {
                    Test.iFld += (i7 * i7);
                    i4 += (((i7 * i7) + Test.instanceCount) - Test.instanceCount);
                    switch (((38 >>> 1) % 10) + 35) {
                    case 35:
                        for (i9 = 1; i9 < 2; i9++) {
                            boolean b=false;
                            if (b) continue;
                            i8 = 13;
                            s = (short)-7;
                            try {
                                i4 = (139 % i10);
                                i4 = (85 % i7);
                                Test.iArrFld[i7 - 1] = (Test.iArrFld[i5 - 1] / i6);
                            } catch (ArithmeticException a_e) {}
                            Test.fFld += Test.iFld;
                        }
                        break;
                    case 36:
                        Test.instanceCount = -79;
                        break;
                    case 37:
                        Test.instanceCount >>= i6;
                        break;
                    case 38:
                        if (Test.bFld) break;
                        break;
                    case 39:
                        d1 += Test.instanceCount;
                    case 40:
                        Test.iFld = i9;
                    case 41:
                        Test.iArrFld[i7 - 1] = i7;
                        break;
                    case 42:
                        i8 += (i7 * i7);
                    case 43:
                        if (Test.bFld) break;
                        break;
                    case 44:
                        by += (byte)(((i7 * Test.instanceCount) + i8) - Test.iFld);
                    default:
                        Test.fFld += i7;
                    }
                }
            } else if (true) {
                Test.instanceCount = Test.instanceCount;
            } else if (false) {
                if (Test.bFld) continue;
            } else {
                lArr[i5] <<= by;
            }
        }
        long meth_res = i4 + by + i5 + i6 + i7 + i8 + i9 + i10 + s + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i1) {

        int i2=17342, i3=39248, i11=57876, i12=23636, i13=-1;
        byte by1=-120;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.76298);

        for (i2 = 3; i2 < 303; i2++) {
            Test.instanceCount *= (iMeth1(i2) + Test.sFld);
            Test.fFld -= Test.fFld;
            i1 = i1;
            Test.fFld += i2;
            switch ((((Test.iFld >>> 1) % 5) * 5) + 71) {
            case 96:
                for (i11 = 1; i11 < 6; ++i11) {
                    i3 += (i11 * i11);
                    switch ((((i2 >>> 1) % 2) * 5) + 109) {
                    case 118:
                        i13 = 2;
                        while ((i13 -= 3) > 0) {
                            dArr[i2] += 4;
                        }
                        Test.instanceCount -= i2;
                        i12 += (42642 + (i11 * i11));
                        Test.iFld = by1;
                        break;
                    case 113:
                        Test.fFld = Test.iFld;
                        break;
                    }
                }
            case 73:
                i12 = i1;
            case 78:
                i12 = i11;
                break;
            case 77:
                i1 += (i2 | i2);
            case 80:
            }
        }
        long meth_res = i1 + i2 + i3 + i11 + i12 + i13 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(double d, float f) {

        int i14=-4, i15=-36159, i16=10, i17=-8, i18=2;

        if (bMeth(44195) && false) {
            Test.fArrFld[(Test.iFld >>> 1) % N] = ((Test.instanceCount++) % (((long)(--f)) | 1));
        } else {
            Test.iArrFld = Test.iArrFld;
            Test.sFld = (short)Test.iFld;
        }
        for (i14 = 2; i14 < 235; i14++) {
            i15 <<= i15;
            Test.iFld += i14;
            Test.sFld += (short)10954;
            i15 += i15;
            Test.instanceCount += (-46477 + (i14 * i14));
            Test.instanceCount += i14;
            for (i16 = 1; i16 < 7; ++i16) {
                Test.instanceCount += (((i16 * Test.instanceCount) + i17) - i17);
                i17 = 8919;
            }
            i18 >>= (int)Test.instanceCount;
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=59308, i19=-3, i20=2, i21=8, i22=-249, i23=12, i24=-41821, i25=0, i26=12, i27=-64129, i28=128, i29=56146;
        double d2=-110.63859;

        i /= (int)(((-(i - Test.instanceCount)) - (Long.reverseBytes(Test.instanceCount) | iMeth(d2, -1.773F))) | 1);
        for (i19 = 2; i19 < 126; i19++) {
            for (i21 = 10; 202 > i21; i21++) {
                i = i21;
                i22 += i21;
                for (i23 = 2; i23 > i21; i23--) {
                    Test.bFld = Test.bFld;
                    if (Test.bFld) break;
                    d2 -= i19;
                    Test.instanceCount += (i23 ^ Test.instanceCount);
                    Test.instanceCount <<= -12892;
                    Test.iArrFld[i19 + 1] = (int)-2.590F;
                    Test.iArrFld[i21] ^= i;
                    i24 = -3;
                    i22 = i19;
                }
                Test.sFld -= (short)i22;
                Test.fFld += (83 + (i21 * i21));
                i20 -= (int)Test.fFld;
                Test.iArrFld[i19] += i21;
                if (Test.bFld) continue;
                Test.instanceCount -= i23;
            }
            for (i25 = 1; i25 < 202; ++i25) {
                Test.instanceCount = 2L;
                i27 = 1;
                while (++i27 < 2) {
                    Test.instanceCount += i27;
                }
                for (i28 = 1; i28 < 2; i28++) {
                    Test.iArrFld1 = Test.iArrFld1;
                    byFld = (byte)Test.fFld;
                    Test.iFld += (((i28 * Test.fFld) + Test.instanceCount) - i29);
                    i &= i28;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
