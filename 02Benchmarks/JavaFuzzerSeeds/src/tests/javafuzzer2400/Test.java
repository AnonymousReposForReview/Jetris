package tests.javafuzzer2400;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:12:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2610154265L;
    public byte byFld=43;
    public static int iFld=37214;
    public static long lFld=3404229568716083813L;
    public static double dFld=-85.64364;
    public static byte byFld1=71;
    public static float fFld=-2.717F;
    public int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];
    public static float fArrFld[][]=new float[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 30.602F);
        FuzzerUtils.init(Test.iArrFld1, 6640);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        double d2=0.71542;

        d2 += Test.instanceCount;
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d2);
    }

    public static int iMeth(int i5, long l1, long l2) {

        double d1=-46.109472;
        int i6=-28978, i8=31203, i9=-148;
        float f1=-22.754F, f2=1.328F;
        short s=-8772;

        for (d1 = 11; 195 > d1; d1++) {
            vMeth1(Test.iFld);
            f1 = 13787;
            s += (short)(((d1 * i6) + l1) - i6);
            l2 += i6;
            Test.dFld *= -152;
        }
        for (f2 = 12; 201 > f2; ++f2) {
            i5 -= i6;
        }
        i5 += Test.iFld;
        i9 = 1;
        while (++i9 < 361) {
            l2 += 4;
            f1 += (i9 * i9);
            Test.fArrFld[i9][i9 - 1] += l1;
            Test.iArrFld1[i9 + 1] >>= i6;
            Test.lFld -= (long)f2;
        }
        long meth_res = i5 + l1 + l2 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f1) + s +
            Float.floatToIntBits(f2) + i8 + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i1=-56168, i2=-32730, i3=36544, i4=8, i10=3, i11=11, i12=9, iArr[]=new int[N];
        float f=34.747F;
        short s1=20681;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(byArr, (byte)-88);

        Test.iFld = Test.iFld;
        for (i1 = 8; i1 < 347; i1++) {
            Test.iFld += (int)(((i2--) - (--iArr[i1 - 1])) - (l % (((long)(f * 8684760694906628300L)) | 1)));
            switch ((i1 % 9) + 94) {
            case 94:
                for (i3 = 1; i3 < 5; i3++) {
                    Test.iFld &= (int)(((Test.iFld = (int)Test.lFld) - iMeth(i3, Test.instanceCount, -72L)) + f);
                    for (i10 = 2; i10 > 1; --i10) {
                        i11 = i11;
                        i2 <<= i3;
                        Test.iFld >>= (int)Test.lFld;
                        Test.iArrFld1[i3 + 1] -= (int)Test.dFld;
                        Test.instanceCount += i10;
                        Test.iFld += (((i10 * Test.instanceCount) + Test.instanceCount) - i2);
                        Test.byFld1 -= (byte)i3;
                        f -= Test.instanceCount;
                    }
                }
                break;
            case 95:
            case 96:
                i2 -= 6;
                break;
            case 97:
                s1 = (short)i12;
            case 98:
                i12 += i10;
            case 99:
                if (b) continue;
                break;
            case 100:
                Test.iArrFld1[i1 - 1] /= (int)(i3 | 1);
                break;
            case 101:
                byArr[i1 - 1] = (byte)l;
            case 102:
                i12 = Test.byFld1;
                break;
            }
        }
        vMeth_check_sum += l + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i10 + i11 + s1 + i12 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i14=7, i15=62696, i16=10, i17=167, i18=-13, i19=55404;
        double d=18.74630;
        short s2=-14584, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-18536);

        iArrFld[(-38192 >>> 1) % N] += byFld;
        i -= (byArrFld[(i >>> 1) % N]--);
        d = 1;
        while (++d < 319) {
            vMeth(Test.instanceCount);
            i <<= i;
            for (i14 = 2; i14 < 79; ++i14) {
                i15 -= i14;
                Test.fFld *= i;
                i = s2;
                Test.iFld -= (int)d;
                for (i16 = 1; i16 < 2; ++i16) {
                    switch ((((10 >>> 1) % 2) * 5) + 69) {
                    case 76:
                        i = (int)Test.lFld;
                        i17 += i15;
                        i17 = 36711;
                        Test.dFld += Test.iFld;
                        break;
                    case 77:
                        Test.instanceCount = (long)Test.fFld;
                        Test.iArrFld1[(int)(d + 1)] += i14;
                        try {
                            i17 = (-476580375 / i);
                            i17 = (Test.iFld / 1980);
                            i17 = (-41 % i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        Test.dFld = 1.30F;
                        Test.instanceCount <<= 53393;
                    }
                    i = i14;
                    i17 += i16;
                }
                Test.instanceCount = i15;
            }
            sArr[(int)(d)] >>= (short)183;
            for (i18 = 4; i18 < 79; i18++) {
                iArrFld[i18 - 1] += (int)Test.instanceCount;
                sArr[(int)(d + 1)] = (short)i14;
                i17 += i16;
                Test.fFld -= (float)d;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
