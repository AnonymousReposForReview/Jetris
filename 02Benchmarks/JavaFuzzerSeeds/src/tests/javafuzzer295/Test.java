package tests.javafuzzer295;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:24:30 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9879L;
    public static volatile int iFld=143;
    public static volatile short sFld=-14884;
    public static boolean bFld=true;
    public static double dFld=106.103217;
    public static float fFld=0.54F;
    public int iFld1=215;
    public static boolean bFld1=true;
    public static int iArrFld[]=new int[N];
    public volatile int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 244);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1) {

        int i=138, i1=-99, i2=29, i3=74, i4=44518, iArr[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 29294);
        FuzzerUtils.init(lArr, 33527L);

        if (Test.bFld) {
            i = 1;
            while ((i += 2) < 162) {
                Test.instanceCount *= 3640934509L;
                iArr[i] += Test.sFld;
                for (i1 = 19; i < i1; --i1) {
                    lArr[i][i - 1] /= (Test.iFld | 1);
                    for (i3 = 1; i3 > 1; i3--) {
                        lArr[i1 - 1][i1] = i;
                        Test.instanceCount -= i2;
                        if (Test.bFld) break;
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld *= i2;
                        Test.bFld = Test.bFld;
                        i2 += Test.iFld;
                        lArr[i1][i1] = (long)f1;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i + i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {

        float f2=0.289F, f3=112.734F;
        int i5=-53, i6=-9, i7=-787, i8=14, i9=12, i10=29644, i11=-151, i12=9;

        vMeth1(f2);
        for (f3 = 8; 175 > f3; ++f3) {
            Test.iArrFld[(int)(f3 - 1)] *= -32085;
        }
        Test.iFld += (int)Test.dFld;
        Test.instanceCount = 13481;
        for (i6 = 13; i6 < 349; i6++) {
            f2 -= 14;
            Test.iFld = i6;
            for (i8 = 5; i8 > 1; --i8) {
                i10 = 1;
                do {
                    i7 += (i10 | i6);
                } while (++i10 < 2);
                for (i11 = 1; i11 < 2; i11++) {
                    Test.iFld -= i12;
                    Test.instanceCount += i11;
                    f2 /= (Test.instanceCount | 1);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, long l, short s) {


        Test.iFld &= (int)(Test.iFld * (lMeth() * Test.sFld));
        vMeth_check_sum += Float.floatToIntBits(f) + l + s;
    }

    public void mainTest(String[] strArr1) {

        int i14=-13613, i15=14062, i16=-64969, i17=-174, i18=9, i19=-15637, i20=-226;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.534F);

        vMeth(2.639F, 5L, Test.sFld);
        Test.instanceCount >>= Test.iFld;
        Test.iFld -= (int)Test.fFld;
        for (int i13 : Test.iArrFld) {
            i13 += iFld1;
            i14 = 1;
            while (++i14 < 63) {
                Test.iFld = Test.iFld;
                i13 = i13;
            }
            for (i15 = 3; i15 < 63; ++i15) {
                float f4=0.254F;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.fFld += (i17 + Test.instanceCount);
                    if (Test.bFld1) continue;
                    Test.fFld = -22483;
                    Test.sFld = (short)Test.instanceCount;
                }
                iArrFld1[i15][i15 - 1] = i18;
                for (i19 = 1; i19 < 2; i19++) {
                    Test.instanceCount = i17;
                    Test.iFld /= (int)(Test.instanceCount | 1);
                    Test.iFld = i14;
                    Test.sFld += (short)i13;
                    Test.iArrFld[(i19 >>> 1) % N] = (int)Test.instanceCount;
                }
                Test.dFld = Test.fFld;
                switch ((i15 % 7) + 79) {
                case 79:
                    Test.iArrFld[i15] = (int)Test.instanceCount;
                    i18 = (int)f4;
                    Test.iFld += (i15 - i16);
                    i18 -= i17;
                case 80:
                    fArr = fArr;
                    iFld1 >>= i20;
                    break;
                case 81:
                    Test.instanceCount += (i15 | Test.instanceCount);
                case 82:
                    i13 = Test.iFld;
                    break;
                case 83:
                    iArrFld1[i15 - 1][i15] -= i18;
                case 84:
                    i16 += (int)f4;
                    break;
                case 85:
                    Test.sFld = (short)i14;
                default:
                    Test.iFld += Test.sFld;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
