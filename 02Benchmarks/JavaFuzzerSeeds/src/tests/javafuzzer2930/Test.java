package tests.javafuzzer2930;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:20:06 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=231L;
    public static float fFld=-3.436F;
    public static int iFld=129;
    public static double dFld=-1.73076;
    public static short sFld=-3641;
    public long lFld=236L;
    public static volatile int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, double d) {

        int i6=252, i7=3871;
        short s=20083;
        boolean b=false;

        i6 = 1;
        do {
            switch ((i6 % 9) + 76) {
            case 76:
            case 77:
                Test.iFld += (int)Test.instanceCount;
                break;
            case 78:
                i5 += (i6 * i6);
                Test.instanceCount += i5;
                Test.instanceCount |= Test.instanceCount;
                d = s;
                break;
            case 79:
            case 80:
                i7 = 1;
                do {
                    if (b) {
                        Test.instanceCount -= i6;
                    } else if (b) {
                        Test.iFld += i6;
                    } else {
                        Test.iFld = s;
                    }
                    Test.iFld = Test.iFld;
                    i5 += (i7 * i7);
                    Test.iArrFld[i7 + 1][i6 - 1] += s;
                } while (++i7 < 7);
                break;
            case 81:
                Test.iFld >>>= i5;
                break;
            case 82:
                Test.instanceCount = i6;
                break;
            case 83:
                i5 &= (int)Test.instanceCount;
                break;
            case 84:
            default:
                i5 = 1;
            }
        } while (++i6 < 230);
        long meth_res = i5 + Double.doubleToLongBits(d) + i6 + s + i7 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3) {

        int i4=7, i8=-8, i9=-1, i10=7, i11=224, i12=87, i13=9, i14=34;
        byte by1=-68;
        double d1=-32.26638;
        short s1=-24316;

        i3 -= (int)(-(++Test.instanceCount));
        Test.fFld *= -209;
        i3 = (int)(((i4 + i3) - (by1 - -16.3581)) - (Test.instanceCount = (8 - Test.iArrFld[(Test.iFld >>> 1) %
            N][(Test.iFld >>> 1) % N])));
        Test.instanceCount -= iMeth(i4, d1);
        d1 -= -9;
        i8 = 1;
        do {
            Test.instanceCount = (long)-74.275F;
        } while (++i8 < 315);
        s1 += (short)Test.instanceCount;
        for (i9 = 6; 206 > i9; i9++) {
            for (i11 = 1; i11 < 8; i11 += 3) {
                for (i13 = 4; i13 > 1; i13--) {
                    Test.iFld = i13;
                    i14 *= Test.iFld;
                    Test.fFld = i8;
                    i10 += (((i13 * i10) + i4) - Test.iFld);
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + by1 + Double.doubleToLongBits(d1) + i8 + s1 + i9 + i10 + i11 + i12 + i13 + i14;
    }

    public static void vMeth(byte by) {

        int i2=40797, i15=22, i16=4, i17=-10;
        double d2=1.69453;
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)-107);
        FuzzerUtils.init(lArr, -1357380584383733053L);

        Test.fFld -= Math.max(i2, ~(i2 - 221));
        vMeth1(Test.iFld);
        for (i15 = 369; i15 > 13; i15--) {
            Test.iArrFld[i15 + 1][i15 - 1] = (int)Test.dFld;
            Test.fFld += 0;
            for (d2 = 1; d2 < 5; d2++) {
                Test.iFld *= (int)Test.fFld;
                Test.iFld ^= (int)Test.instanceCount;
                i2 += i2;
                byArr[(int)(d2 - 1)] -= (byte)Test.iFld;
                i2 += (int)(d2 * d2);
            }
            by += (byte)Test.iFld;
        }
        lArr[(i16 >>> 1) % N][(i2 >>> 1) % N] += (long)Test.fFld;
        i16 = (int)Test.instanceCount;
        Test.instanceCount = i15;
        vMeth_check_sum += by + i2 + i15 + i16 + Double.doubleToLongBits(d2) + i17 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-217, i1=49, i18=-828, i19=56, i20=-5, i21=-12, i22=-45046, i23=-226, i24=28481;
        byte by2=-82, by3=87;
        double d3=-57.73918;
        boolean b1=false;
        long l=-11L;

        for (i = 9; i < 190; ++i) {
            switch ((i % 9) + 39) {
            case 39:
                vMeth(by2);
                for (d3 = 139; d3 > 1; d3 -= 3) {
                    i18 = Test.iFld;
                    Test.instanceCount <<= i1;
                    i18 += (int)(((d3 * i1) + i18) - i);
                }
                for (i19 = i; 139 > i19; i19++) {
                    Test.iFld += (((i19 * i18) + i18) - i20);
                    switch ((i19 % 6) + 39) {
                    case 39:
                        Test.iArrFld[i19][i19] = (int)Test.fFld;
                        for (i21 = 1; 1 < i21; --i21) {
                            Test.instanceCount = Test.instanceCount;
                            Test.instanceCount = (long)Test.fFld;
                            Test.sFld = (short)i21;
                            Test.iFld = i21;
                            Test.iFld += (int)Test.instanceCount;
                        }
                        break;
                    case 40:
                        Test.iFld = (int)Test.fFld;
                        for (i23 = 1; i23 > 1; --i23) {
                            i18 += i23;
                            Test.dFld = Test.fFld;
                            switch (((i23 % 8) * 5) + 13) {
                            case 44:
                            case 49:
                                Test.instanceCount += (((i23 * Test.instanceCount) + i24) - by3);
                                by2 += (byte)(i23 * i23);
                                b1 = b1;
                                Test.iFld += (i23 - Test.fFld);
                            case 37:
                                switch ((i23 % 2) + 22) {
                                case 22:
                                    i20 += i18;
                                    Test.instanceCount = by3;
                                    Test.instanceCount = Test.instanceCount;
                                    break;
                                case 23:
                                    i20 >>>= Test.iFld;
                                    break;
                                }
                                break;
                            case 36:
                                Test.instanceCount *= i21;
                            case 43:
                                Test.iFld %= (int)(by3 | 1);
                                break;
                            case 26:
                                Test.instanceCount += i18;
                                break;
                            case 39:
                                i22 = (int)Test.dFld;
                                break;
                            case 50:
                                Test.instanceCount += i23;
                            }
                        }
                        break;
                    case 41:
                        i24 += (118 + (i19 * i19));
                    case 42:
                        lArrFld[(Test.iFld >>> 1) % N] += i18;
                    case 43:
                        i20 += (i19 ^ Test.sFld);
                        break;
                    case 44:
                        Test.fFld += i19;
                        break;
                    default:
                        if (b1) break;
                    }
                }
            case 40:
                Test.instanceCount -= -6753179679287552138L;
            case 41:
                Test.fFld += (-38212 + (i * i));
                break;
            case 42:
                Test.iArrFld[i][i - 1] = i18;
            case 43:
                lFld *= (long)Test.dFld;
            case 44:
                lFld = Test.instanceCount;
                break;
            case 45:
                i1 = (int)Test.instanceCount;
                break;
            case 46:
                Test.sFld = (short)l;
            case 47:
                Test.sFld = (short)i24;
                break;
            default:
                Test.fFld += (i * i);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
