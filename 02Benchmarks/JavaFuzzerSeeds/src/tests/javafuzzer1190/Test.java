package tests.javafuzzer1190;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:15:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=479999440L;
    public static byte byFld=62;
    public boolean bFld=true;
    public static int iFld=8;
    public float fFld=1.992F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -130);
        FuzzerUtils.init(Test.lArrFld, 1043994007L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3) {

        int i4=-160, i5=-12, i6=-5, i7=-106, i8=-148, i9=4;
        byte by=-105;
        double d1=64.108292, dArr[]=new double[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -62.53946);
        FuzzerUtils.init(fArr, -2.1014F);

        Test.instanceCount = Test.instanceCount;
        i4 = 289;
        do {
            i5 = by;
        } while ((i4 -= 2) > 0);
        i3 = i4;
        by += (byte)i5;
        i3 += i4;
        Test.iArrFld[(i3 >>> 1) % N] = (int)Test.instanceCount;
        for (i6 = 8; i6 < 294; ++i6) {
            switch (((i6 % 2) * 5) + 51) {
            case 52:
                dArr[i6] = d1;
                for (i8 = 1; i8 < 6; ++i8) {
                    Test.instanceCount += (-45 + (i8 * i8));
                }
            case 61:
                if (b) {
                    i5 >>>= i8;
                    i5 <<= 22;
                } else if (b) {
                    i9 = i5;
                } else if (false) {
                    fArr[i6 + 1] += i9;
                } else {
                    i7 = 43661;
                }
                break;
            default:
                Test.instanceCount += (i6 * i6);
            }
        }
        long meth_res = i3 + i4 + i5 + by + i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=32595, i2=34104, i10=45154, i11=216, i12=41870, i13=6786, iArr[]=new int[N];
        double d=-2.74181;
        float f1=-38.496F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(byArr, (byte)39);

        for (i1 = 281; i1 > 8; i1--) {
            i2 = (int)1940318621940482057L;
            Test.instanceCount += (long)(((d + d) + iArr[i1]) * ((i2 = (int)Test.instanceCount) + (Test.instanceCount -
                i1)));
            byArr[i1 + 1] *= (byte)((-8037661814062853644L + i1) * (-67 + iMeth1(166)));
            for (i10 = 1; 6 > i10; ++i10) {
                Test.instanceCount = i11;
                Test.iArrFld[i10] <<= i1;
                Test.byFld += (byte)(i10 - i2);
                Test.instanceCount += (i10 ^ (long)f1);
                for (i12 = 1; i12 < 2; ++i12) {
                    f1 += (i12 * i10);
                    i2 -= (int)Test.instanceCount;
                    iArr[i1] = i2;
                    i11 -= i13;
                    i13 *= i1;
                }
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d) + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i) {


        iMeth();
        Test.lArrFld[(i >>> 1) % N] %= (long)47.38381;
        vMeth_check_sum += Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        int i14=124, i15=139, i16=225, i17=10, i18=-4, i19=-14084, i20=36252, i21=-48509, i22=-64463, i23=49505,
            i24=36144, i25=27708, i26=63715;
        short s=20153;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)9);

        vMeth(1.215F, i14);
        for (i15 = 8; i15 < 283; i15++) {
            Test.instanceCount = -138L;
            i17 = 1;
            while (++i17 < 91) {
                if (bFld) continue;
                for (i18 = 1; i18 > 1; i18--) {
                    i19 = 0;
                    Test.iFld -= (int)Test.instanceCount;
                }
                for (i20 = 1; i20 < 1; ++i20) {
                    byArr1 = FuzzerUtils.byte1array(N, (byte)-106);
                }
            }
            for (i22 = 1; i22 < 91; i22++) {
                i19 += (((i22 * i14) + i22) - i19);
                fFld *= i22;
                i23 += i19;
            }
            i21 = 163;
        }
        i19 = s;
        i19 = -3607;
        i24 = 1;
        while (++i24 < 271) {
            i16 <<= i18;
        }
        i16 = (int)Test.instanceCount;
        for (i25 = 10; i25 < 307; ++i25) {
            Test.instanceCount -= (long)fFld;
        }
        i16 <<= i25;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
