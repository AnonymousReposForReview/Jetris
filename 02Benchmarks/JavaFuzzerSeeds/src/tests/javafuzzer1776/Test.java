package tests.javafuzzer1776;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:14:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8342263551482025215L;
    public volatile boolean bFld=true;
    public float fFld=-5.205F;
    public double dFld=-10.96914;
    public short sFld=-1729;
    public volatile double dFld1=0.30559;
    public float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i11, int i12, boolean b) {

        float f2=-2.75F, f3=107.955F;
        int i13=143, i14=0, i15=12337, i16=-169, i17=-3, i18=9, iArr[][]=new int[N][N];
        double d2=-61.61366;

        FuzzerUtils.init(iArr, 25);

        f2 += 63;
        i13 = 1;
        do {
            i11 += (int)f2;
            Test.instanceCount = i11;
            if (b) continue;
            if (b) continue;
            i12 *= -40191;
        } while (++i13 < 280);
        for (i14 = 3; 161 > i14; i14++) {
            iArr[i14 + 1][i14 + 1] %= (int)(i11 | 1);
            for (f3 = 1; f3 < 10; f3++) {
                for (i17 = 1; i17 < 2; ++i17) {
                    if (b) break;
                    i18 = (int)Test.instanceCount;
                    i16 = 47556;
                    d2 += Test.instanceCount;
                }
            }
        }
        long meth_res = i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f2) + i13 + i14 + i15 + Float.floatToIntBits(f3)
            + i16 + i17 + i18 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i7, int i8) {

        long l=-81L, lArr[][]=new long[N][N];
        int i9=105, i10=2, i19=2, i20=-6;
        double d3=-73.86455;

        FuzzerUtils.init(lArr, -64711L);

        iArrFld[(i7 >>> 1) % N] -= (i8 - i8);
        for (l = 6; 213 > l; l++) {
            i10 = 1;
            while ((i10 += 2) < 8) {
                byte by1=-19;
                fFld = ((--i7) + ((l + i7) + lArr[(i8 >>> 1) % N][i10]));
                switch (((i10 % 10) * 5) + 32) {
                case 73:
                    i8 *= (int)-3L;
                    i7 += (int)(Math.max((long)(50.87506 * iMeth(i9, i8, bFld)), 4L) - i8);
                    i9 += (9112 + (i10 * i10));
                    for (i19 = 2; i19 > 1; --i19) {
                        Test.instanceCount += (62104 + (i19 * i19));
                        lArr[(int)(l + 1)][i19] *= i20;
                        d3 += i8;
                        if (bFld) continue;
                    }
                    break;
                case 77:
                    Test.instanceCount ^= i20;
                    iArrFld = iArrFld;
                    break;
                case 69:
                    iArrFld[(int)(l - 1)] += (int)d3;
                case 37:
                case 62:
                    i8 = by1;
                case 65:
                    fFld += i7;
                    break;
                case 68:
                case 63:
                case 72:
                    i7 += (((i10 * i19) + i8) - i19);
                    break;
                case 49:
                    Test.instanceCount >>>= Test.instanceCount;
                    break;
                default:
                    lArr[(int)(l)][i10 + 1] <<= i7;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + l + i9 + i10 + i19 + i20 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(lArr);
    }

    public long lMeth(double d, float f1, double d1) {

        int i5=1973, i6=-185, i21=-236, i22=65325, i23=-201, i24=9963;
        byte by=102;
        boolean bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, -7.72018);

        for (i5 = 10; i5 < 230; i5++) {
            bArr[i5 - 1] = bFld;
            Test.instanceCount += (i5 + i5);
            Test.instanceCount /= (((long)(((-9184471781143994090L - (++i6)) + (fArrFld[i5 - 1]--)) - (i6 = (int)(by +
                Test.instanceCount)))) | 1);
            d = (((d1 * i6) + (i6--)) + ((Test.instanceCount * 51) + i5));
            vMeth(i6, i6);
            for (i21 = 7; i21 > 1; i21 -= 3) {
                fFld = by;
                switch ((((i21 >>> 1) % 6) * 5) + 57) {
                case 68:
                    dArr[i5] += i6;
                    i22 = (int)d;
                    for (i23 = 1; i23 < 4; i23++) {
                        i24 += (((i23 * i23) + Test.instanceCount) - i6);
                        i22 |= i21;
                        iArrFld[i23 + 1] = i5;
                    }
                    break;
                case 67:
                    fFld = Test.instanceCount;
                case 87:
                    i6 += (i21 - i6);
                    break;
                case 69:
                    i6 = i5;
                    break;
                case 66:
                    i24 += i21;
                case 71:
                    fFld += i23;
                    break;
                default:
                    by += (byte)(((i21 * i24) + i23) - i5);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i5 + i6 +
            by + i21 + i22 + i23 + i24 + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-55645, i1=-41129, i2=-48594, i3=-14, i4=-182, i25=0, i26=-252, i27=-12;
        float f=-118.941F;

        for (i = 3; i < 145; i++) {
            for (i2 = 11; i2 < 177; ++i2) {
                f = 1;
                while (++f < 2) {
                    i4 /= (int)(((lMeth(dFld, f, dFld) - i) + -166) | 1);
                }
                if (bFld) {
                    fArrFld[i + 1] -= i4;
                    for (i25 = i; 2 > i25; ++i25) {
                        bFld = bFld;
                        i4 = sFld;
                        i26 -= (int)dFld;
                        Test.instanceCount -= i3;
                        i4 = i1;
                        iArrFld[i + 1] *= (int)72L;
                        Test.instanceCount -= i25;
                        iArrFld = iArrFld;
                    }
                    Test.instanceCount <<= i26;
                    i1 = i3;
                } else {
                    i4 ^= i26;
                    i26 = i1;
                }
                i3 -= (int)f;
                i4 += (((i2 * Test.instanceCount) + Test.instanceCount) - i);
                i27 = 1;
                do {
                    byte by2=-120;
                    Test.instanceCount += (long)(1.299F + (i27 * i27));
                    fArrFld = fArrFld;
                    dFld1 += i1;
                    i4 = i3;
                    i3 -= (int)Test.instanceCount;
                    dFld += by2;
                    Test.instanceCount += -130;
                    i26 >>>= (int)972832395992846638L;
                } while (++i27 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
