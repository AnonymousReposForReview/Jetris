package tests.javafuzzer3046;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:13:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3915275424728459682L;
    public static byte byFld=-41;
    public static volatile int iFld=-8;
    public static double dFld=-52.33559;
    public static float fFld=-78.29F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth() {

        int i7=101;
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(sArr1, (short)19778);

        sArr1[(i7 >>> 1) % N][(i7 >>> 1) % N] = (short)Test.instanceCount;
        i7 >>>= (++i7);
        i7 = (int)Test.instanceCount;
        long meth_res = i7 + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, float f) {

        int i1=3, i2=-5, i3=223, i4=-193, i5=-59692, i6=12, i8=24559;
        boolean b=true;
        double d=-2.68414;
        short sArr[]=new short[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-24374);
        FuzzerUtils.init(lArr, -2472198410L);

        for (i1 = 12; i1 < 268; ++i1) {
            for (i3 = 1; 6 > i3; ++i3) {
                for (i5 = 2; i5 > 1; i5 -= 3) {
                    Test.instanceCount += (((i4 * -4) + i1) * 13300L);
                    i2 -= i2;
                    sArr[i1 - 1] |= (short)(i4--);
                    if ((i++) != i8) {
                        i4 = i;
                        Test.instanceCount = (long)((f--) + iMeth());
                    } else if (b) {
                        i2 = (int)((11 + (-(--Test.instanceCount))) - ((i4++) + (++i)));
                        Test.instanceCount += (i5 * i5);
                    } else {
                        d %= (Test.instanceCount | 1);
                        Test.byFld -= (byte)(d + (lArr[i3 - 1][i1] + (Test.iArrFld[i5 + 1] -= (int)f)));
                    }
                    lArr[i1 + 1][i3 - 1] += (--i2);
                    i8 -= (int)Math.abs((long)(i6 - f) ^ (++i8));
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 + i8 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth2(int i12) {


        Test.fFld = i12;
        Test.dFld = -3528939771L;
        Test.instanceCount = Test.iFld;
        vMeth2_check_sum += i12;
    }

    public static void vMeth1(int i11, double d1, double d2) {

        int i13=189, i14=-5, i15=197, i16=2;
        byte byArr[]=new byte[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)-9);
        FuzzerUtils.init(lArr1, -2699928792L);

        vMeth2(Test.iFld);
        Test.instanceCount = (long)Test.fFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = i11;
        d1 -= Test.iFld;
        Test.iFld >>>= Test.iFld;
        byArr[(i11 >>> 1) % N] = (byte)Test.instanceCount;
        i13 = 202;
        while (--i13 > 0) {
            switch ((i13 % 2) + 38) {
            case 38:
                i14 = 1;
                do {
                    for (i15 = 1; i15 > 1; --i15) {
                        switch ((i14 % 5) + 36) {
                        case 36:
                            Test.iArrFld[i14] = i11;
                            Test.instanceCount += (i15 * i15);
                            break;
                        case 37:
                            Test.instanceCount += Test.iFld;
                            Test.iFld += i15;
                        case 38:
                            lArr1[i15 + 1][i13 + 1] += Test.iFld;
                        case 39:
                            i11 <<= -3719;
                            break;
                        case 40:
                            i16 >>>= i16;
                            break;
                        }
                    }
                } while (++i14 < 8);
                break;
            case 39:
                Test.fFld = Test.fFld;
                break;
            default:
                Test.fFld += i13;
            }
        }
        vMeth1_check_sum += i11 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth1(int i9, int i10, boolean b1) {


        Test.instanceCount = (long)(((i10 + -20) - Math.min(Test.instanceCount, Test.instanceCount)) + (Test.dFld--));
        vMeth1(Test.iFld, Test.dFld, Test.dFld);
        long meth_res = i9 + i10 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=221, i18=230, i19=-10, i20=-16901, i21=181, i22=39511, iArr[]=new int[N];
        float f1=-10.765F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -115.559F);
        FuzzerUtils.init(iArr, 9);

        vMeth((int)(Test.iFld *= (int)(fArr[(Test.iFld >>> 1) % N]--)), (iMeth() + (Test.iFld * Test.instanceCount)) -
            (iMeth1(Test.iFld, Test.iFld, false) + Test.iFld));
        Test.instanceCount *= Test.byFld;
        Test.iFld >>>= -226;
        iArr[(Test.iFld >>> 1) % N] &= Test.iFld;
        Test.instanceCount *= Test.iFld;
        i17 = 1;
        while (++i17 < 340) {
            Test.iFld = (int)Test.fFld;
        }
        for (i18 = 13; i18 < 309; i18++) {
            i20 = 1;
            while (++i20 < 85) {
                for (i21 = 1; i21 < 1; i21++) {
                    Test.iFld -= Test.iFld;
                    i19 = i19;
                    if (Test.bFld) break;
                    i22 = i19;
                    i19 <<= i21;
                    Test.instanceCount += (i21 * i21);
                    try {
                        i22 = (Test.iFld / 212);
                        Test.iArrFld[i20] = (i19 / -56686);
                        i19 = (26489 / iArr[i20 - 1]);
                    } catch (ArithmeticException a_e) {}
                    fArr[i21] = Test.iFld;
                    dArrFld[i20 + 1] -= -11;
                }
                i19 = (int)Test.instanceCount;
                switch (((i18 % 3) * 5) + 6) {
                case 14:
                    sArrFld[i20 - 1] = (short)i18;
                    i22 = (int)Test.instanceCount;
                    i22 *= i22;
                    Test.dFld += i18;
                    break;
                case 19:
                    Test.fFld = (float)Test.dFld;
                    f1 = 1;
                    do {
                        Test.fFld += f1;
                        try {
                            i19 = (i21 % Test.iFld);
                            i19 = (-39843 / i17);
                            i22 = (131 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        i22 += (int)1.830F;
                    } while (++f1 < 1);
                    break;
                case 12:
                    Test.dFld -= i18;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
