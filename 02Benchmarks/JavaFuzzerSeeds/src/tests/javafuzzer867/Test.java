package tests.javafuzzer867;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:56:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-267688056L;
    public static float fFld=-2.53F;
    public static boolean bFld=false;
    public static double dFld=-121.63439;
    public double dArrFld[]=new double[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6) {

        short s=-23704, sArr1[]=new short[N];
        byte by=127;
        int i7=-150, i8=189, iArr1[][]=new int[N][N];
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(sArr1, (short)-913);
        FuzzerUtils.init(lArr, 4L);

        switch (((i6 >>> 1) % 10) + 117) {
        case 117:
            Test.fFld = 51839;
            Test.fFld = i6;
            bArr[(7447 >>> 1) % N] = Test.bFld;
            iArr1[(i6 >>> 1) % N][(37658 >>> 1) % N] |= s;
        case 118:
            i6 = i6;
            i6 += by;
            break;
        case 119:
            iArr1[(-35580 >>> 1) % N] = iArr1[(-41 >>> 1) % N];
        case 120:
            by += (byte)-10;
            i7 = 1;
            while (++i7 < 313) {
                if (Test.bFld) continue;
                i8 = 1;
                do {
                    Test.instanceCount += (i8 * i8);
                    Test.dFld *= i6;
                    iArr1[i7] = iArr1[i7 + 1];
                } while (++i8 < 5);
            }
        case 121:
            i6 -= i7;
            break;
        case 122:
            iArr1[(i7 >>> 1) % N][(i8 >>> 1) % N] >>>= i6;
            break;
        case 123:
            sArr1[(i7 >>> 1) % N] = (short)i7;
            break;
        case 124:
            Test.instanceCount -= i6;
            break;
        case 125:
            i6 = i7;
            break;
        case 126:
            lArr[(i8 >>> 1) % N] = i6;
            break;
        }
        long meth_res = i6 + s + by + i7 + i8 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i4=4, i5=-36034, i9=-44174, i10=-13, i11=40189, iArr[]=new int[N];
        double d=1.38998;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -24300);
        FuzzerUtils.init(sArr, (short)6676);

        for (int i3 : iArr) {
            for (i4 = 1; i4 < 4; i4++) {
                i3 = (i5--);
                d = iArr[i4];
                sArr[i4 + 1] -= (short)(~iMeth1(i4));
                Test.instanceCount -= i3;
                for (i9 = 1; i9 < 2; i9++) {
                    i3 <<= i9;
                    try {
                        iArr[i9 - 1] = (13332 / i4);
                        i2 = (-24803 % i3);
                        i2 = (i10 / 101);
                    } catch (ArithmeticException a_e) {}
                }
                i3 = i4;
            }
            i10 = (int)d;
            i11 = 1;
            do {
                i3 = (int)-61.387F;
                if (Test.bFld) break;
                Test.bFld = false;
            } while (++i11 < 4);
        }
        vMeth_check_sum += i2 + i4 + i5 + Double.doubleToLongBits(d) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public int iMeth(int i, int i1, boolean b) {

        int i12=4, i13=-14, i14=124, iArr2[]=new int[N];
        float f=50.217F, fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -8836);
        FuzzerUtils.init(fArr, 105.342F);

        vMeth(i1);
        for (i12 = 162; i12 > 4; i12 -= 3) {
            i1 *= i1;
            iArr2[i12] *= (int)Test.dFld;
            Test.instanceCount *= i1;
            i -= i13;
            switch (((i12 % 2) * 5) + 78) {
            case 81:
            case 85:
                i -= i1;
                for (f = 1; f < 29; ++f) {
                    i14 = i;
                    dArrFld[(int)(f)] = Test.dFld;
                    Test.instanceCount += (long)((long)f ^ i13);
                    if (i1 != 0) {
                    }
                    Test.instanceCount += i13;
                    i13 += (int)f;
                }
                break;
            default:
                fArr[i12] -= 3230666147L;
            }
        }
        long meth_res = i + i1 + (b ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f) + i14 + FuzzerUtils.checkSum(iArr2)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-44043;

        iMeth(i15, i15, Test.bFld);
        Test.bFld = Test.bFld;
        i15 -= i15;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
