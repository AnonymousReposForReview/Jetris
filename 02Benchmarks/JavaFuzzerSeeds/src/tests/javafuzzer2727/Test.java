package tests.javafuzzer2727;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:23:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=82L;
    public static volatile boolean bFld=false;
    public static short sFld=-29860;
    public static double dFld=-2.7926;
    public static volatile int iFld=-6;
    public static float fFld=15.67F;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-12837);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, int i8, int i9) {

        int i10=1, i11=-10, i12=-220, i13=0, i14=-186, i15=-4;
        float f1=1.295F;
        byte by=-10;

        i9 >>= -15107;
        i10 = 1;
        while (++i10 < 163) {
            for (i11 = 1; i11 < 10; i11++) {
                for (i13 = 1; i13 < 2; ++i13) {
                    if (Test.bFld) continue;
                    i9 -= Test.sFld;
                    Test.dFld += i7;
                    i14 += (((i13 * i14) + i10) - f1);
                    by += (byte)(i13 * i13);
                    i15 = (int)1.68115;
                    i8 = (int)f1;
                    i12 += i13;
                }
                i15 = (int)Test.dFld;
                i15 = i14;
                Test.iFld += (int)Test.instanceCount;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + by + i15;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, int i, double d) {

        double d1=0.105544, dArr[]=new double[N];
        int i1=7, i2=44074, i3=46768, i4=45333, i5=228, i6=-40293, iArr[][]=new int[N][N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -2.96349);
        FuzzerUtils.init(iArr, -21989);
        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(fArr, -2.527F);

        for (d1 = 1; d1 < 210; d1++) {
            for (i2 = 1; i2 < 8; ++i2) {
                dArr[(int)(d1 + 1)] -= i2;
                i3 += i2;
                switch (((i2 % 3) * 5) + 105) {
                case 115:
                    Test.instanceCount += ((i4 - (i++)) - ((i4 |= i5) * 16270));
                case 113:
                    iArr = (iArr = (iArr = iArr));
                    i6 = 1;
                    while (++i6 < 2) {
                        iArr[i6][i6 - 1] = (i3 + Integer.reverseBytes((int)(i1 % (Test.instanceCount | 1))));
                        iArr[(int)(d1 - 1)][(int)(d1 + 1)] += (-i6);
                        i >>= Math.max((int)(lArr[(int)(d1 - 1)] - (Test.instanceCount + -25575)),
                            (int)(lMeth(Test.iFld, -190, i2) * i3));
                        Test.iFld = i;
                        fArr[(int)(d1 - 1)] = i6;
                        try {
                            iArr[i6 + 1][i2] = (i5 / i);
                            iArr[i2 + 1][(int)(d1)] = (i3 % 210);
                            i1 = (31 % i2);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld += (i6 * i6);
                    }
                    break;
                case 109:
                    Test.iFld += i2;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i1
            + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {


        vMeth(Test.fFld, Test.iFld, Test.dFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i16=-214, i17=23670, i18=1, i19=13, i20=-13, i21=-165, i22=-1, i23=8494, i24=-8, i25=23945, iArr1[]=new
            int[N];
        long l=3809756090680789340L;
        byte by1=-66;
        float f2=47.7F;

        FuzzerUtils.init(iArr1, 207);

        for (int smallinvoc=0; smallinvoc<396; smallinvoc++) vSmallMeth();
        for (i16 = 5; i16 < 281; ++i16) {
            if (false) {
                i17 -= (int)Test.instanceCount;
                for (i18 = 1; 91 > i18; ++i18) {
                    iArr1[i18] *= i16;
                }
            } else {
                Test.sArrFld[i16] = (short)Test.instanceCount;
            }
            iArr1 = iArr1;
        }
        i17 -= i16;
        for (i20 = 7; i20 < 126; i20++) {
            i22 = 1;
            while (++i22 < 211) {
                Test.instanceCount += i21;
            }
            if (Test.bFld) {
                try {
                    i21 = (i21 / i21);
                    i17 = (Test.iFld / 571265319);
                    iArr1[i20 + 1] = (Test.iFld / i18);
                } catch (ArithmeticException a_e) {}
            }
            i23 = 211;
            while ((i23 -= 3) > 0) {
                for (l = 3; l > 1; --l) {
                    Test.sArrFld[(int)(l - 1)] |= by1;
                    if (Test.bFld) break;
                    iArr1[i23] = (int)-37701L;
                    Test.sFld += (short)(((l * l) + by1) - Test.instanceCount);
                    Test.instanceCount = 58;
                    i19 += 0;
                    if (false) break;
                    try {
                        Test.iFld = (i22 / 102);
                        i24 = (i16 / 36737);
                        iArr1[i20 + 1] = (i16 / i17);
                    } catch (ArithmeticException a_e) {}
                }
                i19 ^= i21;
                for (f2 = 3; f2 > 1; --f2) {
                    iArr1[i23] >>>= i16;
                    i25 += (int)f2;
                    Test.iFld += (int)l;
                    i25 *= i19;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
