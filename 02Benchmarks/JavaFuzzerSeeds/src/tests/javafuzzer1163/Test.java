package tests.javafuzzer1163;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:35 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-252L;
    public int iFld=-34481;
    public static double dFld=32.99020;
    public static int iFld1=-189;
    public byte byFld=-107;
    public volatile int iFld2=-6;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.fArrFld, -60.665F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=35, i6=-55, i7=233, i8=-19, i9=-11, iArr1[]=new int[N];
        float f2=-1.777F, fArr[]=new float[N];
        long l1=-57693L, l2=29446L;
        boolean b=true;

        FuzzerUtils.init(iArr1, -41422);
        FuzzerUtils.init(fArr, 1.576F);

        i5 -= (int)Test.instanceCount;
        Test.instanceCount <<= Test.instanceCount;
        for (i6 = 4; i6 < 361; i6++) {
            i8 = 1;
            do {
                Test.instanceCount = i7;
                iArr1[i8 - 1] = (int)Test.instanceCount;
                Test.instanceCount >>= Test.instanceCount;
                f2 += i5;
                if (b) {
                    for (l1 = 1; l1 < 5; l1++) {
                        fArr[(int)(l1 - 1)] = Test.iFld1;
                        iArr1[(int)(l1)] = i7;
                    }
                }
                l2 = 1;
                do {
                    i9 = i6;
                } while (++l2 < 5);
                i5 += (int)l1;
            } while ((i8 += 3) < 5);
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + l1 + i9 + (b ? 1 : 0) + l2 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth(long l, int i4, float f1) {

        int i10=7, i11=-64887, i12=-250, i13=34807, i14=-13;
        boolean b1=false;
        short sArr[]=new short[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(sArr, (short)29877);
        FuzzerUtils.init(dArr, 0.71008);

        i4 = Math.min((--iFld) * (++iFld), (int)((l - 22914) + (f1 - i4)));
        vMeth1();
        i10 = 1;
        while (++i10 < 367) {
            for (i11 = 5; i11 > 1; i11 -= 2) {
                byFld = (byte)Test.instanceCount;
                sArr[i11] >>>= (short)Test.iFld1;
                i12 += (50376 + (i11 * i11));
            }
            sArr[i10 - 1] = (short)Test.iFld1;
            for (i13 = 1; i13 < 5; i13++) {
                Test.iArrFld = Test.iArrFld;
            }
            iFld -= (int)Test.instanceCount;
        }
        Test.dFld -= 11277;
        if (b1) {
            i14 = i11;
        }
        dArr[(i12 >>> 1) % N] -= i10;
        long meth_res = l + i4 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i1=231, i2=8303, i3=-5, i15=253, i16=117, iArr[]=new int[N];
        float f3=2.688F;
        short s=3917;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(lArr, -3L);

        i1 = 296;
        do {
            iFld = (-Integer.reverseBytes(Math.min(-186, iFld)));
            iArr[i1] &= i1;
            for (i2 = 1; i2 < 6; i2++) {
                if ((i3 - (i3 - (++lArr[i2 + 1]))) == ((Test.dFld - lMeth(32L, i3, f3)) - i2)) break;
                s ^= (short)Test.instanceCount;
                for (i15 = 2; i15 > 1; i15--) {
                    Test.iFld1 += i15;
                    Test.dFld = f3;
                    switch (((i15 % 1) * 5) + 36) {
                    case 41:
                        Test.iFld1 -= i16;
                        Test.instanceCount = i2;
                        Test.instanceCount = -49351;
                        iFld -= i16;
                        break;
                    default:
                        Test.iFld1 <<= iFld2;
                    }
                }
            }
        } while (--i1 > 0);
        vMeth_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f3) + s + i15 + i16 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-4460, i17=12, i18=-38739, i19=50636, i20=19904, i21=-3628, i22=56, i23=-4, i24=10662, i25=13225;
        float f=-52.253F;
        long lArr1[]=new long[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(lArr1, -3085455750L);
        FuzzerUtils.init(sArr1, (short)-28402);

        i <<= (int)(((f * i) + Long.reverseBytes(-7446469092119157455L)) + Test.instanceCount);
        vMeth();
        lArr1[(-26068 >>> 1) % N] += i;
        byFld = (byte)Test.instanceCount;
        i17 = 1;
        while (++i17 < 235) {
            iFld += 0;
            Test.iArrFld[i17][i17 - 1] = iFld;
            Test.iFld1 += (((i17 * Test.instanceCount) + f) - i17);
            byFld = (byte)87.2176;
            f -= Test.iFld1;
            iFld = (int)Test.instanceCount;
        }
        for (i18 = 23; i18 < 385; ++i18) {
            Test.iArrFld[i18][i18 + 1] *= (int)f;
            iFld2 = (int)Test.dFld;
            iFld &= (int)4583855631793868113L;
            for (i20 = i18; i20 < 70; i20++) {
                iFld += (int)Test.instanceCount;
            }
            i = i19;
            Test.instanceCount <<= i17;
            i19 -= (int)Test.dFld;
            sArr1[i18] *= (short)-1316904018485146616L;
            for (i22 = 2; i22 < 70; i22++) {
                i23 += (int)f;
                f *= 40858L;
                i24 *= (int)Test.dFld;
            }
        }
        i25 = 329;
        while ((i25 -= 3) > 0) {
            iFld += (i25 | i25);
            Test.iArrFld[i25 + 1][i25 + 1] = i20;
            i = (int)Test.instanceCount;
        }
        lArr1[(i23 >>> 1) % N] = Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
