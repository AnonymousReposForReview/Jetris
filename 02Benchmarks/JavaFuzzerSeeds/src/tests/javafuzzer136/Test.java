package tests.javafuzzer136;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:56:41 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-51353L;
    public int iFld=14;
    public static volatile int iFld1=-7;
    public static double dFld=78.113297;
    public float fFld=1.640F;
    public byte byFld=-20;
    public short sFld=28475;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 154);
        FuzzerUtils.init(Test.lArrFld, 445224861L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l1, long l2) {

        int i3=-172, i4=13, i5=12, i6=-18, iArr1[]=new int[N];
        float f1=-1.40F, fArr[]=new float[N];
        double d=0.49223;
        boolean b=true;

        FuzzerUtils.init(fArr, 2.344F);
        FuzzerUtils.init(iArr1, 11);

        for (i3 = 8; i3 < 169; ++i3) {
            i2 += (-13586 + (i3 * i3));
            i4 -= (int)l2;
            fArr[i3 - 1] *= i3;
            f1 = 1;
            while (++f1 < 10) {
                switch ((i3 % 1) + 27) {
                case 27:
                    i2 += (int)f1;
                    iArr1[(int)(f1 + 1)] = i4;
                    d = 1;
                    while (++d < 1) {
                        b = true;
                        l1 += (long)(((d * Test.iFld1) + Test.iFld1) - i2);
                    }
                    break;
                default:
                    for (i5 = 1; i5 < 1; ++i5) {
                        Test.instanceCount = Test.iFld1;
                    }
                    i4 /= -134;
                }
                if (false) continue;
            }
        }
        vMeth1_check_sum += i2 + l1 + l2 + i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + (b ? 1 :
            0) + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1) {

        int i7=-133, i8=-9938, i9=-13, i10=-237;
        float f2=-2.287F;
        byte by1=-121;

        vMeth1(Test.iFld1, Test.instanceCount, 11L);
        Test.iArrFld[(i1 >>> 1) % N] -= Test.iFld1;
        for (i7 = 14; i7 < 283; i7++) {
            i1 += (int)f2;
            Test.instanceCount += (((i7 * Test.iFld1) + Test.iFld1) - i7);
            Test.iFld1 *= (int)Test.dFld;
            Test.instanceCount -= Test.instanceCount;
            i8 >>= (int)Test.instanceCount;
            i9 = 1;
            do {
                i8 |= i1;
                switch (((10 >>> 1) % 6) + 96) {
                case 96:
                case 97:
                    f2 = i8;
                    i10 = 1;
                    do {
                        by1 -= (byte)i9;
                        i1 *= -30128;
                    } while (++i10 < 1);
                    break;
                case 98:
                    i1 += by1;
                    break;
                case 99:
                    if (false) continue;
                    break;
                case 100:
                    Test.lArrFld[i9 + 1] *= by1;
                    break;
                case 101:
                    Test.dFld *= i9;
                    break;
                }
            } while (++i9 < 6);
        }
        long meth_res = i1 + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        byte by=0;
        int i11=-2, i12=6, i13=-31326;
        short s=4284;

        Test.iFld1 *= (int)((++by) * (--l));
        switch ((((Test.iFld1++) >>> 1) % 1) + 122) {
        case 122:
            Test.iFld1 |= (int)(-(Test.iFld1 * Test.instanceCount));
            break;
        }
        iMeth(Test.iFld1);
        Test.iFld1 += Test.iFld1;
        Test.iFld1 = i11;
        for (i12 = 1; i12 < 124; i12++) {
            i11 += (((i12 * s) + i11) - i11);
            i11 = (int)Test.instanceCount;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + by + i11 + i12 + i13 + s;
    }

    public void mainTest(String[] strArr1) {

        int i=49781, i14=4760, i15=15486, i16=0, i17=-219, i18=6, i19=1, i20=-55109, i21=-50202, i22=-5, iArr[]=new
            int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(sArr, (short)8265);

        iFld = (iArr[(iFld >>> 1) % N]--);
        i = 208;
        while (--i > 0) {
            vMeth(fFld, Test.instanceCount);
            Test.instanceCount = -47819;
            for (i14 = 7; 121 > i14; ++i14) {
                for (i16 = 1; i16 < 2; i16++) {
                    Test.iFld1 -= byFld;
                    Test.instanceCount -= i;
                    sArr[i] = (short)2358691300L;
                    iFld += (((i16 * Test.instanceCount) + i14) - i);
                    iFld = -234;
                    i17 = i;
                    i15 *= (int)-2826043437482129209L;
                    iArr[i14 - 1] += (int)Test.instanceCount;
                    i15 = (int)-26083L;
                    try {
                        i17 = (iArr[i] % i14);
                        iArr[i14 - 1] = (93 % iArr[i14 + 1]);
                        i17 = (iFld % -1032618168);
                    } catch (ArithmeticException a_e) {}
                }
                i15 += (i14 * Test.instanceCount);
                for (i18 = 1; i18 < 2; i18++) {
                    i15 = sFld;
                    if (bFld) {
                        iFld = 0;
                        i19 = Test.iFld1;
                        i17 = (int)fFld;
                        Test.iFld1 += (((i18 * fFld) + i15) - i20);
                    }
                    bFld = bFld;
                }
                for (i21 = 1; i21 < 2; i21++) {
                    fFld = -35;
                    iFld = i18;
                    Test.iFld1 >>>= i21;
                    bArrFld[i14] = bFld;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
