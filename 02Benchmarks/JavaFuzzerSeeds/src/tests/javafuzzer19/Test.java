package tests.javafuzzer19;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:00:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=15804L;
    public static float fFld=-2.388F;
    public byte byFld=-11;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 182);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, int i4) {

        double d1=-89.37084;
        float f=0.894F, f1=-35.448F, fArr[]=new float[N];
        int i5=14, i6=200, i7=0, iArr1[][]=new int[N][N];
        byte by=68;
        short s=-19324;

        FuzzerUtils.init(fArr, -46.258F);
        FuzzerUtils.init(iArr1, -24474);

        d1 = 1;
        while (++d1 < 126) {
            Test.iArrFld[(int)(d1)] += i2;
            fArr[(int)(d1)] = f;
            for (i5 = 1; i5 < 12; i5++) {
                Test.instanceCount += i4;
                i3 *= (int)f;
                f += (((i5 * i4) + Test.instanceCount) - i2);
            }
            by += (byte)d1;
            i6 += 74;
            i4 += (int)(d1 * d1);
            i6 = s;
            for (f1 = (float)(d1); f1 < 12; f1++) {
                iArr1 = iArr1;
            }
        }
        by <<= (byte)i7;
        i6 = i6;
        vMeth1_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i5 + i6 + by + s +
            Float.floatToIntBits(f1) + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        int i8=-57, i9=4, i10=-10, i11=128, i12=-7, i13=6, i14=121, i15=-250;
        long l1=-11L;
        float f2=-2.434F;
        boolean b=true;

        vMeth1(i8, i8, 104);
        for (i9 = 4; i9 < 388; ++i9) {
            i8 = (int)l;
        }
        i10 = i8;
        for (i11 = 2; 238 > i11; ++i11) {
            i8 += -14;
            for (l1 = 1; l1 < 7; l1++) {
                f2 *= i11;
            }
            if (b) {
                Test.bArrFld = FuzzerUtils.boolean1array(N, (boolean)true);
                i13 = i13;
                i10 -= i9;
                for (i14 = 1; i14 < 7; ++i14) {
                    l = l1;
                    Test.instanceCount += l;
                }
            } else {
                l %= (i9 | 1);
            }
        }
        vMeth_check_sum += l + i8 + i9 + i10 + i11 + i12 + l1 + i13 + Float.floatToIntBits(f2) + i14 + i15 + (b ? 1 :
            0);
    }

    public static int iMeth(int i1) {

        double d=2.78521;
        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -203);

        i1 = (iArr[(i1 >>> 1) % N][(i1 >>> 1) % N]--);
        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] += (iArr[(i1 >>> 1) % N][(8656 >>> 1) % N]--);
        Test.instanceCount %= (((++iArr[(7 >>> 1) % N][(i1 >>> 1) % N]) - i1) | 1);
        Test.instanceCount *= (long)(d + i1);
        vMeth(Test.instanceCount);
        Test.instanceCount = Test.instanceCount;
        long meth_res = i1 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=40397, i16=-180, i17=-14, i18=41132, i19=11645, i20=-130, i21=1599, i22=103, i23=278, i24=-17;
        boolean b1=false;
        long l2=-149L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -90.26228);

        i = iMeth(i);
        for (i16 = 11; 221 > i16; ++i16) {
            if (true) break;
            b1 = b1;
        }
        for (i18 = 7; 320 > i18; i18++) {
            i20 = 1;
            do {
                i = i20;
            } while (++i20 < 80);
            Test.fFld += Test.instanceCount;
            Test.fFld -= Test.fFld;
            i19 += i;
            i21 = 1;
            while (++i21 < 80) {
                double d2=0.19363;
                Test.instanceCount -= l2;
                d2 -= byFld;
                for (i22 = 1; i22 < 1; i22++) {
                    Test.iArrFld[i18 + 1] += -24042;
                    i &= i19;
                    i24 *= -14176;
                    Test.iArrFld[i21] += i16;
                    i19 = (int)d2;
                    switch ((i22 % 2) + 63) {
                    case 63:
                        i = i18;
                        Test.instanceCount = i23;
                        i23 <<= 8;
                        dArr[i22 - 1] *= byFld;
                        break;
                    case 64:
                        Test.bArrFld[(i18 >>> 1) % N] = b1;
                        l2 <<= Test.instanceCount;
                        Test.bArrFld[i22 + 1] = b1;
                        i23 -= 97;
                        break;
                    }
                    try {
                        Test.iArrFld[i18] = (-10492 % i);
                        i17 = (Test.iArrFld[i22 - 1] % 1552);
                        i = (i16 / 19841);
                    } catch (ArithmeticException a_e) {}
                    l2 = (long)d2;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
