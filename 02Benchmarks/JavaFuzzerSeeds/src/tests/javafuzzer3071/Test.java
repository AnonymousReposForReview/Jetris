package tests.javafuzzer3071;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:31:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2736947173L;
    public static int iFld=-43;
    public static float fFld=54.995F;
    public byte byFld=-1;
    public static double dFld=83.40050;
    public double dFld1=0.61211;
    public static short sFld=27609;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -34447);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12, int i13) {

        int i14=-10, i15=-5, i16=64122, i17=-28;
        byte by=-68;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 83.305F);

        if (b1) {
            try {
                i14 = 1;
                do {
                    if (b1) {
                        try {
                            Test.iArrFld[i14] = (Test.iFld / i14);
                            Test.iFld = (i12 / -25);
                            i13 = (Test.iArrFld[i14] / i12);
                        } catch (ArithmeticException a_e) {}
                        for (i15 = 1; i15 < 5; ++i15) {
                            i12 = -13;
                            Test.iFld += i15;
                            i17 = 1;
                            do {
                                i12 -= i15;
                                i12 = i12;
                                by <<= (byte)i17;
                                Test.iArrFld[i15] >>>= (int)Test.instanceCount;
                                i13 <<= i16;
                                i16 = i13;
                            } while (++i17 < 2);
                        }
                        vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + by + (b1 ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    } else {
                        fArr[i14 + 1] += i12;
                    }
                } while (++i14 < 341);
            }
            catch (NegativeArraySizeException exc2) {
                Test.instanceCount -= Test.instanceCount;
            }
        } else {
            Test.iArrFld[(i12 >>> 1) % N] -= -10;
            vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + by + (b1 ? 1 : 0) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        }
        vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + by + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth(int i10) {

        int i11=-1, i18=-8, i19=-52523, i20=46323, i21=55049, i22=9, i23=8;
        byte by1=-57;
        boolean b2=false;

        i11 = 1;
        while (++i11 < 365) {
            vMeth1(Test.iFld, Test.iFld);
            i10 += (i11 - i11);
        }
        Test.fFld = Test.instanceCount;
        Test.iFld -= -34124;
        Test.dFld += i10;
        i10 = (int)Test.instanceCount;
        for (i18 = 6; i18 < 251; ++i18) {
            Test.iFld += (int)1.77880;
            Test.iFld = (int)0L;
            for (i20 = 1; i20 < 7; ++i20) {
                for (i22 = 1; i22 < 2; ++i22) {
                    by1 = (byte)i23;
                    if (b2) break;
                }
            }
        }
        i21 = -1;
        long meth_res = i10 + i11 + i18 + i19 + i20 + i21 + i22 + i23 + by1 + (b2 ? 1 : 0);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth(int i2, int i3, int i4) {

        int i5=235, i6=-163, i7=200, i8=-8, i9=-101;
        boolean b=true;
        short s=-28412;
        double dArr[][]=new double[N][N];
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, -2.61696);
        FuzzerUtils.init(lArr, 4158251181099195646L);
        FuzzerUtils.init(fArr1, 100.701F);

        for (i5 = 191; 1 < i5; i5 -= 2) {
            i7 = 1;
            while (++i7 < 16) {
                for (i8 = 1; i8 < 1; i8++) {
                    try {
                        i3 = (Test.iArrFld[i7] / 186);
                        Test.iArrFld[i5 - 1] = (-45031 / i6);
                        i3 = (i2 / 190);
                    } catch (ArithmeticException a_e) {}
                    i4 += (i8 * i8);
                    if (b) continue;
                    Test.fFld += (Test.fFld--);
                    dArr[i8][i5] += (--i9);
                    Test.iFld += (((s + i8) - (i7 * i9)) - (++i4));
                    switch (((((i8 + i5) >>> 1) % 7) * 5) + 74) {
                    case 77:
                        i2 = byMeth(Test.iFld);
                        i6 -= (int)Test.instanceCount;
                        break;
                    case 76:
                    case 75:
                        try {
                            i4 = (i3 % i2);
                            i4 = (i8 / Test.iArrFld[i8]);
                            i3 = (i8 % i6);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 85:
                        dArr[i7 - 1][i7 - 1] += i5;
                        lArr[i5] += (long)60.49236;
                        break;
                    case 82:
                        i6 |= i9;
                        break;
                    case 100:
                        fArr1[i8] -= (float)dFld1;
                        break;
                    case 104:
                        i2 |= i2;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        double d=-67.35561;
        int i=11797, i1=-3, i24=-53683, i25=-4, i26=26274, i27=12, i28=-116, i29=-254, i30=-32273, i31=-1, iArr[]=new
            int[N];
        long lArr1[]=new long[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(iArr, 13665);
        FuzzerUtils.init(lArr1, 8L);
        FuzzerUtils.init(fArr2, 123.104F);

        iArr[(Test.iFld >>> 1) % N] += (int)(((-(d--)) + Float.intBitsToFloat(Test.iFld)) + (Test.iFld + (Test.iFld /
            ((long)(Test.fFld) | 1))));
        byFld += (byte)Test.iFld;
        for (i = 11; i < 393; ++i) {
            vMeth(-206, Test.iFld, i);
            Test.iFld &= i;
            Test.iFld += (((i * Test.sFld) + Test.iFld) - Test.iFld);
            for (i24 = 1; i24 < 66; i24++) {
                Test.iFld = -12;
                Test.iFld &= -36376;
                for (i26 = 2; i26 > 1; i26--) {
                    lArr1[i24] -= Test.sFld;
                    switch ((i24 % 4) + 89) {
                    case 89:
                        i25 = 20348;
                        fArr2[i26] = Test.instanceCount;
                        iArr[i26] *= -5108;
                        break;
                    case 90:
                        iArr[i24] = i25;
                        break;
                    case 91:
                    case 92:
                        i1 ^= -251;
                        break;
                    default:
                        Test.instanceCount *= Test.instanceCount;
                        Test.instanceCount = Test.instanceCount;
                    }
                    Test.instanceCount = i25;
                    Test.bFld = Test.bFld;
                    Test.sFld += (short)(i26 ^ i);
                    i25 = i25;
                }
                if (Test.bFld) break;
                for (i28 = 1; i28 < 2; i28++) {
                    Test.fFld += -12;
                    i1 >>= i26;
                }
                for (i30 = 1; i30 < 2; i30 += 3) {
                    d *= Test.instanceCount;
                    i29 += (12 + (i30 * i30));
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
