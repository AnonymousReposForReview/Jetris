package tests.javafuzzer2459;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static boolean bFld=false;
    public static volatile byte byFld=88;
    public static short sFld=18309;
    public static volatile double dFld=2.88054;
    public static long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 207L);
        FuzzerUtils.init(Test.fArrFld, 45.779F);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.byArrFld, (byte)-51);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=-16, i8=144, i9=-4, i11=136, i12=-189, i13=-179, i14=149, iArr1[]=new int[N];
        float f1=1.751F;
        double d1=0.57418;

        FuzzerUtils.init(iArr1, 27259);

        Test.lArrFld[(i7 >>> 1) % N] >>>= Test.instanceCount;
        i7 = i7;
        Test.lArrFld[(i7 >>> 1) % N] = Test.instanceCount;
        for (i8 = 392; 3 < i8; i8 -= 2) {
            for (i11 = 1; i11 < 8; ++i11) {
                f1 = i9;
                for (i13 = 2; i13 > 1; --i13) {
                    if (Test.bFld) break;
                    Test.bFld = Test.bFld;
                    i14 -= i7;
                    i7 = (int)f1;
                    i9 = -93;
                    i12 *= (int)d1;
                }
                i12 += (49303 + (i11 * i11));
                i12 = i13;
            }
        }
        long meth_res = i7 + i8 + i9 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i6) {

        double d2=82.71715, d3=0.110852;
        int i15=-14, i16=27, i17=-30787, i18=12;

        i6 = (int)lMeth();
        Test.fArrFld[(i6 >>> 1) % N] -= -42456;
        i6 = (int)Test.instanceCount;
        i6 = i6;
        d2 = 295;
        while (--d2 > 0) {
            Test.iArrFld[(int)(d2 + 1)] = i6;
        }
        d3 += i6;
        for (i15 = 4; i15 < 172; i15++) {
            i16 = (int)9595L;
            for (i17 = 1; i17 < 9; ++i17) {
                d3 += d2;
                Test.byFld %= (byte)(Test.instanceCount | 1);
                if (Test.bFld) break;
                Test.bFld = Test.bFld;
                Test.instanceCount += i17;
            }
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i15 + i16 + i17 + i18;
    }

    public static void vMeth(float f) {

        int i2=-11, i3=0, i4=-13, i5=-2, i19=4, i20=-37, i21=216, i22=-18325, i23=-192, iArr[]=new int[N];
        double d=-57.48687;
        float f2=18.511F;

        FuzzerUtils.init(iArr, -14);

        for (i2 = 17; 357 > i2; ++i2) {
            i3 += (i2 - i3);
        }
        iArr[(i3 >>> 1) % N] >>= (Short.reverseBytes((short)(Test.instanceCount * i3)) - (++iArr[(i3 >>> 1) % N]));
        for (i4 = 340; i4 > 14; i4 -= 3) {
            Test.instanceCount += (long)d;
            vMeth1(15377);
            if (Test.bFld) break;
            if (i4 != 0) {
                vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i19 + i20
                    + Float.floatToIntBits(f2) + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr);
                return;
            }
        }
        for (i19 = 23; i19 < 369; i19++) {
            for (f2 = 1; f2 < 5; f2++) {
                Test.byArrFld[(int)(f2)] += (byte)i3;
                for (i22 = 1; i22 < 2; i22++) {
                    i20 += (i22 * i22);
                    i5 -= i3;
                    Test.byFld += (byte)(((i22 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i19 + i20 +
            Float.floatToIntBits(f2) + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-40642, i1=-9, i24=7492, i25=-177, i26=-3, i27=7336, i28=-4, i29=-65414;
        float f3=-6.499F;

        for (i = 10; i < 330; ++i) {
            switch ((((--i1) >>> 1) % 8) + 100) {
            case 100:
                i1 += (((i * i1) + i) - i1);
                break;
            case 101:
                i1 -= (-Integer.reverseBytes(i1 * i1));
                vMeth(120.253F);
                i1 = i1;
                break;
            case 102:
                Test.iArrFld[i] *= (int)Test.instanceCount;
                try {
                    i1 = (1687442225 % Test.iArrFld[i - 1]);
                    i1 = (i1 % i);
                    i1 = (i / i);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i + 1] |= (int)-34L;
                break;
            case 103:
                Test.sFld = (short)i;
                for (i24 = 2; i24 < 79; ++i24) {
                    Test.sFld += (short)i24;
                    i25 = (int)-38279L;
                    Test.lArrFld[i24 - 1] += i;
                    Test.iArrFld = Test.iArrFld;
                }
                for (i26 = i; i26 < 79; ++i26) {
                    Test.instanceCount = i26;
                    switch (((13 >>> 1) % 7) + 81) {
                    case 81:
                        i27 = (int)Test.dFld;
                        Test.instanceCount += (i26 * i26);
                        break;
                    case 82:
                        for (i28 = 1; i28 < 1; ++i28) {
                            i25 -= (int)Test.instanceCount;
                            switch ((i26 % 7) + 38) {
                            case 38:
                                Test.instanceCount = i1;
                                i25 += i24;
                                f3 += (i28 * i25);
                                i27 += i28;
                            case 39:
                                i1 *= i;
                                break;
                            case 40:
                                i29 = i25;
                                i29 <<= (int)Test.instanceCount;
                                break;
                            case 41:
                                i1 -= -4;
                                break;
                            case 42:
                                i29 += (((i28 * i27) + i24) - Test.instanceCount);
                                break;
                            case 43:
                                i1 = (int)291129544L;
                                break;
                            case 44:
                                Test.instanceCount += (i28 ^ i24);
                                break;
                            default:
                                Test.instanceCount += i28;
                            }
                        }
                    case 83:
                        i1 = (int)Test.instanceCount;
                        break;
                    case 84:
                        i29 = (int)243L;
                        break;
                    case 85:
                        try {
                            i29 = (i25 % 247);
                            i27 = (56693 / i1);
                            i1 = (-143 / i1);
                        } catch (ArithmeticException a_e) {}
                    case 86:
                        i1 -= (int)Test.dFld;
                        break;
                    case 87:
                        Test.instanceCount /= -49589;
                        break;
                    default:
                        i1 -= i;
                    }
                }
                break;
            case 104:
                i27 = i;
                break;
            case 105:
                i27 = i;
                break;
            case 106:
                i27 = (int)Test.dFld;
            case 107:
                Test.instanceCount *= i1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
