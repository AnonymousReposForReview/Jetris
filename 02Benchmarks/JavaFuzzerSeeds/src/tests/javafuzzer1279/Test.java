package tests.javafuzzer1279;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:40:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=212L;
    public static int iFld=8;
    public static boolean bFld=true;
    public static volatile short sFld=-26866;
    public double dFld=-1.57891;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[][]=new int[N][N];
    public double dArrFld[][]=new double[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)10453);
        FuzzerUtils.init(Test.iArrFld, 12103);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1) {

        long l2=-2L;
        short s1=-32139;
        float f2=-2.381F;
        int i3=-18489, i4=54765, i5=9, i6=-12;
        boolean b=true;

        l2 = Test.iFld;
        Test.sArrFld[(Test.iFld >>> 1) % N] = (short)-10;
        s1 = (short)Test.iFld;
        Test.iFld = Test.iFld;
        f2 += Test.iFld;
        for (i3 = 10; 175 > i3; ++i3) {
            i4 -= Test.iFld;
            l2 += (i3 * i3);
            f2 *= -6L;
            i4 += (i3 + i3);
            for (i5 = 1; i5 < 10; i5++) {
                i4 -= (int)l1;
            }
            f2 *= f2;
            b = true;
            l1 = i4;
        }
        long meth_res = l1 + l2 + s1 + Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s, int i1, float f1) {

        int i2=-57275, i7=-14, i8=92, i9=204, i10=-65, i11=-12, i12=9, iArr1[][]=new int[N][N];
        float f3=0.319F, fArr[]=new float[N];
        byte by=-59;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 219);
        FuzzerUtils.init(fArr, -2.432F);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(dArr, -2.12906);

        i2 = 1;
        do {
            if (false) {
                if (Test.bFld) {
                    i1 <<= (int)(((-Double.longBitsToDouble(Test.instanceCount)) * (Test.instanceCount * i1)) +
                        iMeth(-5724122297115551402L));
                    iArr1[i2][i2] <<= i1;
                }
                Test.instanceCount = Test.iFld;
                for (i7 = 1; i7 < 5; i7++) {
                    fArr[i2] *= i2;
                    Test.instanceCount *= i7;
                    iArr1[i2 + 1][i2 - 1] = (int)-119491253L;
                }
                vMeth_check_sum += s + i1 + Float.floatToIntBits(f1) + i2 + i7 + i8 + i9 + i10 +
                    Float.floatToIntBits(f3) + i11 + i12 + by + FuzzerUtils.checkSum(iArr1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            } else if (Test.bFld) {
                for (i9 = 5; i9 > 1; --i9) {
                    lArr[i9] = (long)f3;
                    for (i11 = 2; 1 < i11; --i11) {
                        dArr[i11 + 1] /= (Test.instanceCount | 1);
                    }
                    if (Test.bFld) continue;
                }
            } else {
                by += (byte)i12;
            }
        } while (++i2 < 334);
        vMeth_check_sum += s + i1 + Float.floatToIntBits(f1) + i2 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + i11
            + i12 + by + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(long l, float f) {

        int i13=-6, i14=12989, i15=-46087, i16=-11, i17=52119, i18=-11;

        vMeth(Test.sFld, Test.iFld, f);
        switch (((Test.iFld >>> 1) % 2) + 113) {
        case 113:
            Test.iFld >>>= (int)Test.instanceCount;
            break;
        case 114:
            for (i13 = 7; i13 < 203; i13++) {
                for (i15 = 1; 8 > i15; ++i15) {
                    Test.iFld += (int)Test.instanceCount;
                    Test.iArrFld[i13][i15] += -190;
                    i14 >>>= (int)1L;
                    Test.iFld = -36179;
                    f = i16;
                    for (i17 = 2; i17 > 1; i17--) {
                        Test.iArrFld[i13] = Test.iArrFld[i15 - 1];
                        i14 += (i17 ^ i18);
                        i16 = (int)6L;
                        f += i17;
                    }
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=136, i19=-163, i20=7305, i21=52266, i22=-114, i23=27, i24=-9, i25=238, i26=9, iArr[]=new int[N];
        float f4=73.534F, f5=-2.331F, f6=-102.758F;
        long l3=121L;

        FuzzerUtils.init(iArr, -57981);

        iArr[(i >>> 1) % N] += (int)(-(Double.longBitsToDouble(Test.instanceCount) * (-lMeth(Test.instanceCount, f4))));
        for (i19 = 16; 315 > i19; i19++) {
            i += (((i19 * i20) + i19) - Test.instanceCount);
            f5 = 1;
            do {
                i |= Test.iFld;
                Test.instanceCount -= (long)dFld;
                for (f6 = 1; f6 < 1; f6 += 3) {
                    dArrFld[(int)(f6)][(int)(f6 - 1)] -= i21;
                    Test.instanceCount += i;
                    i21 *= (int)dFld;
                    f4 += Test.instanceCount;
                    l3 = 229L;
                    i21 &= i19;
                    try {
                        i20 = (i19 % 245);
                        Test.iFld = (i20 / 31321);
                        i = (i21 / -60204);
                    } catch (ArithmeticException a_e) {}
                    i21 -= (int)4235151965L;
                    l3 += (long)(f6 - i21);
                    if (Test.bFld) break;
                }
                if (Test.bFld) continue;
                i += Test.iFld;
            } while (++f5 < 84);
            Test.bFld = Test.bFld;
            i22 = 1;
            do {
                Test.iFld -= i21;
                lArrFld[i22 - 1] = i;
                for (i23 = 1; i23 < 1; ++i23) {
                    Test.instanceCount -= (long)f4;
                    Test.iArrFld[i19 - 1][i19 - 1] *= Test.iFld;
                    Test.iFld += i23;
                }
                for (i25 = i22; i25 < 1; i25 += 2) {
                    Test.iFld += (i25 * i25);
                    Test.instanceCount += (i25 - f5);
                }
            } while (++i22 < 84);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
