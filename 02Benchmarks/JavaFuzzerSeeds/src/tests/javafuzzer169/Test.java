package tests.javafuzzer169;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:13:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-86L;
    public double dFld=0.84878;
    public boolean bFld=false;
    public byte byFld=54;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 32);
        FuzzerUtils.init(Test.fArrFld, 0.743F);
    }

    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i4=8820, i5=14, i6=14, i7=-227, i8=46503;
        short s=-4227;

        i4 = 1;
        do {
            i5 *= -12;
            i6 = 1;
            while (++i6 < 6) {
                if (true) break;
                i5 += i5;
                i5 = i4;
                i5 += (i6 - i5);
                i5 *= (int)1.878F;
                Test.iArrFld[i4 - 1][i6 + 1] = i6;
                i5 *= (int)-2.27674;
                for (i7 = 1; 1 > i7; i7 += 2) {
                    i8 = i4;
                }
                s -= (short)i8;
                Test.iArrFld[i4 + 1] = Test.iArrFld[i4 - 1];
            }
            i5 = (int)4.947F;
        } while (++i4 < 264);
        long meth_res = i4 + i5 + i6 + i7 + i8 + s;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth() {

        int i3=59, i9=-21474, i10=-32035, i11=-2, i12=-56839;
        short s1=30787;
        float f1=110.228F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-113);

        Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N] -= (int)(lMeth1() + Test.instanceCount);
        s1 = (short)i3;
        i3 >>= i3;
        for (i9 = 330; i9 > 16; i9--) {
            i10 <<= i10;
            switch (((i9 % 1) * 5) + 41) {
            case 44:
                i3 += (i9 * f1);
                for (i11 = i9; i11 < 5; ++i11) {
                    Test.iArrFld[i9 + 1][i9] = (int)Test.instanceCount;
                    Test.iArrFld[i9 + 1][i11 + 1] = -20;
                    f1 += (1.327F + (i11 * i11));
                    f1 += i12;
                    byArr = byArr;
                    Test.instanceCount ^= i10;
                    i10 += (i11 * Test.instanceCount);
                }
            }
        }
        long meth_res = i3 + s1 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(double d, int i) {

        int i1=31900, i2=-32507, i13=-6, i14=-11, i15=-14, i16=-56639, i17=208;
        byte by=88;
        short s2=-29571;
        float f2=1.166F;
        boolean b=true;

        i = (int)(((d / (i | 1)) - i) + (i--));
        for (i1 = 5; i1 < 329; ++i1) {
            i += (int)213682467707880661L;
        }
        by ^= (byte)(i++);
        dMeth();
        s2 <<= (short)Test.instanceCount;
        for (i13 = 16; i13 < 308; ++i13) {
            Test.instanceCount = (long)f2;
            for (i15 = 1; i15 < 6; ++i15) {
                i17 = 1;
                do {
                    Test.fArrFld = Test.fArrFld;
                    i2 = -147;
                    if (b) continue;
                    i = (int)Test.instanceCount;
                    Test.instanceCount += (i17 * i17);
                } while (++i17 < 2);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + i1 + i2 + by + s2 + i13 + i14 + Float.floatToIntBits(f2) + i15
            + i16 + i17 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.414F;
        int i18=-34773, i19=-10836, i20=-21, i21=-32117, i22=-19130, i23=-44854, i24=6, i25=-144, i26=-6, i27=-71,
            i28=-25276, i29=-157;
        short s3=-16918;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 42793L);

        dFld = (f - f);
        lMeth(dFld, i18);
        Test.iArrFld[(i18 >>> 1) % N][(i18 >>> 1) % N] += i18;
        for (i19 = 18; i19 < 315; ++i19) {
            i20 += (i19 | i18);
            lArr = lArr;
            for (i21 = 5; i21 < 85; i21++) {
                for (i23 = 1; i23 < 2; i23++) {
                    f = s3;
                    i18 = i21;
                    if (bFld) continue;
                    i20 *= i22;
                    i20 += (int)f;
                }
                for (i25 = i21; i25 < 2; i25++) {
                    f -= 1.174F;
                    i22 |= (int)Test.instanceCount;
                    s3 = (short)dFld;
                    dFld += Test.instanceCount;
                    i22 *= (int)Test.instanceCount;
                    byFld = (byte)i27;
                    Test.iArrFld[i21][i25 - 1] -= 51039;
                    Test.iArrFld[i21 - 1][i21] -= i22;
                }
                for (i28 = 1; 2 > i28; i28++) {
                    switch (((i24 >>> 1) % 9) + 74) {
                    case 74:
                        i18 = (int)-4679465008968315401L;
                        Test.iArrFld[i19] = Test.iArrFld[i28 + 1];
                    case 75:
                        i20 -= i18;
                    case 76:
                        if (bFld) break;
                        i18 += -22;
                        i27 += i26;
                    case 77:
                        i29 = (int)1.767F;
                        break;
                    case 78:
                        Test.instanceCount += (i28 * i28);
                        break;
                    case 79:
                        i20 = byFld;
                        break;
                    case 80:
                        i24 += 44;
                        break;
                    case 81:
                        i24 = i27;
                        break;
                    case 82:
                        i29 = 102;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
