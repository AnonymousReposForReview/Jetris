package tests.javafuzzer1601;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:37:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1969440241L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.865F);
        FuzzerUtils.init(Test.iArrFld, -32);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i6=-50915, i7=143, i8=-45618;
        long l=-57339L;
        double d=-114.66349;

        Test.instanceCount = i6;
        Test.instanceCount = i6;
        i6 += (int)-3096270315397434151L;
        i7 = 1;
        do {
            for (l = 1; 5 > l; l++) {
                boolean b=false;
                i8 <<= i8;
                switch ((i7 % 4) + 114) {
                case 114:
                    i8 += (35166 + (l * l));
                    if (b) continue;
                    break;
                case 115:
                    i6 |= 154;
                    i8 >>>= 69;
                    break;
                case 116:
                    i6 = i7;
                    i8 *= 24213;
                    i8 *= (int)d;
                    i8 -= (int)d;
                    break;
                case 117:
                    i6 <<= -175;
                    break;
                }
            }
        } while (++i7 < 302);
        long meth_res = i6 + i7 + l + i8 + Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i5) {

        int i9=-158, i10=-44833, i11=52453, i12=-52615, i13=47, i14=-131, iArr1[][]=new int[N][N];
        boolean b1=true;
        float f2=0.920F;
        double d1=110.47831;
        short s1=7155;

        FuzzerUtils.init(iArr1, 12);

        Test.instanceCount = (iMeth1() + Test.instanceCount);
        Test.instanceCount >>>= Test.instanceCount;
        for (i9 = 15; i9 < 390; i9++) {
            if (b1) break;
        }
        for (i11 = 11; i11 < 206; ++i11) {
            for (i13 = 1; 8 > i13; i13++) {
                switch ((i11 % 8) + 36) {
                case 36:
                    Test.iArrFld[i13] -= i14;
                    f2 *= (float)-1.47443;
                    iArr1 = iArr1;
                    i14 += (((i13 * i10) + i5) - i13);
                    break;
                case 37:
                    d1 -= d1;
                    i14 >>= -99;
                case 38:
                    if (b1) break;
                    f2 = f2;
                    break;
                case 39:
                case 40:
                    i14 = s1;
                    break;
                case 41:
                    Test.iArrFld[i13 - 1] = (int)Test.instanceCount;
                    break;
                case 42:
                    f2 += Test.instanceCount;
                case 43:
                    i10 = (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i5 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d1) + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i4, float f, float f1) {

        int i15=-24417, i16=39, i17=-52, i18=36;
        float f3=-109.931F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 171L);

        Test.instanceCount -= (Test.iArrFld[(-36473 >>> 1) % N] -= (--i4));
        switch (((iMeth(i4) >>> 1) % 2) + 42) {
        case 42:
            for (i15 = 2; i15 < 159; i15++) {
                for (f3 = i15; f3 < 10; ++f3) {
                    Test.iArrFld[(int)(f3)] += i4;
                    i16 = i16;
                    lArr = lArr;
                    i17 += i4;
                    i18 = 1;
                    do {
                        f -= i17;
                    } while (++i18 < 1);
                    i4 += (int)(((f3 * i18) + Test.instanceCount) - Test.instanceCount);
                    lArr[i15 + 1] |= i15;
                    f1 *= 5;
                    i16 += (int)(f3 + Test.instanceCount);
                }
                lArr[i15] -= 2927529933L;
            }
            break;
        case 43:
            f1 += i4;
            break;
        }
        long meth_res = i4 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i15 + i16 + Float.floatToIntBits(f3)
            + i17 + i18 + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=44203, i1=147, i2=-6, i3=14, i19=6014, i20=57, i21=-11, i22=-30110, i23=-3, i24=-10, i25=8, iArr[]=new
            int[N];
        short s=1455;
        float f4=2.484F;
        long l1=-3994616311L;
        boolean b2=false;
        double d2=-2.4175;

        FuzzerUtils.init(iArr, -18563);

        for (i = 8; i < 168; ++i) {
            i1 = (i1 = (++i1));
            iArr[i] -= iArr[i];
            for (i2 = i; i2 < 157; i2++) {
                s = (short)(s++);
                i3 += (int)Test.fArrFld[i2 + 1];
                i3 *= (iArr[i2 - 1]++);
                switch ((i2 % 1) + 47) {
                case 47:
                    if (bMeth(i1, f4, f4)) break;
                    for (i19 = i; 1 > i19; i19 += 2) {
                        i20 += i19;
                    }
                    break;
                default:
                    for (i21 = 1; 1 > i21; ++i21) {
                        i22 += i21;
                        try {
                            i1 = (i2 % -1991944043);
                            i20 = (-155 % i);
                            i22 = (i21 / i20);
                        } catch (ArithmeticException a_e) {}
                    }
                    for (l1 = 1; l1 > i2; --l1) {
                        byte by=79;
                        i23 -= (int)l1;
                        lArrFld = lArrFld;
                        iArr[i2] *= 11;
                        Test.instanceCount += Test.instanceCount;
                        i20 -= i1;
                        s += (short)(11966 + (l1 * l1));
                        by += (byte)i23;
                        if (b2) break;
                    }
                    for (i24 = 1; i24 < 1; ++i24) {
                        i22 += (int)Test.instanceCount;
                        switch (((i24 % 2) * 5) + 69) {
                        case 73:
                            s -= s;
                            i3 += (i24 * i19);
                            i1 -= i20;
                            iArr[i2 - 1] <<= (int)l1;
                            break;
                        case 77:
                            i1 += (int)d2;
                        default:
                            i1 += i24;
                        }
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
