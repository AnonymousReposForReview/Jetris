package tests.javafuzzer1621;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:17:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8181119981414781479L;
    public static volatile double dFld=-1.29834;
    public byte byFld=18;
    public static float fFld=-1.201F;
    public boolean bFld=false;
    public int iArrFld[][]=new int[N][N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1(int i6, long l) {

        int i7=-240, i8=205, i9=-7;
        boolean b=false;

        for (i7 = 20; i7 < 390; ++i7) {
            i9 = 5;
            do {
                i6 >>= byFld;
                Test.instanceCount -= i7;
                i6 -= i6;
                i6 += i8;
                i8 >>= (int)l;
                iArrFld[i9 + 1][i9 + 1] = i7;
            } while ((i9 -= 2) > 0);
            Test.instanceCount *= i6;
            i6 = byFld;
            switch (((i7 % 1) * 5) + 48) {
            case 52:
                b = b;
                i8 *= (int)l;
                break;
            default:
                i6 += (i7 - i8);
                i8 *= 30953;
            }
        }
        vMeth1_check_sum += i6 + l + i7 + i8 + i9 + (b ? 1 : 0);
    }

    public void vMeth() {

        int i4=-240, i5=31321;

        for (i4 = 8; 143 > i4; ++i4) {
            vMeth1(i4, Test.instanceCount);
            i5 += (i4 * i4);
            Test.dFld -= Test.fFld;
            i5 = i5;
            iArrFld[i4 - 1][i4] >>= i5;
            Test.fFld = i5;
            iArrFld[i4 - 1][i4 + 1] = i5;
        }
        vMeth_check_sum += i4 + i5;
    }

    public int iMeth(int i2, int i3) {


        vMeth();
        bFld = false;
        i3 += i3;
        long meth_res = i2 + i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=-32489, i10=56080, i11=10, i12=40090, i13=-246, i14=7;
        short s=23974;
        double d=87.60402;

        for (i = 15; i < 298; ++i) {
            try {
                i1 = (-59384 % i1);
                i1 = (i1 % 30754);
                i1 = (i / i1);
            } catch (ArithmeticException a_e) {}
            Test.dFld -= (iMeth(i1, i) * i);
            s |= s;
            Test.instanceCount += (((i * i) + i1) - i);
        }
        i10 = 1;
        do {
            if (bFld) {
                try {
                    iArrFld[i10 - 1][i10 + 1] = (i10 / iArrFld[i10][i10]);
                    i1 = (18925 % i10);
                    iArrFld[i10 + 1][i10 - 1] = (6 / iArrFld[i10][i10]);
                } catch (ArithmeticException a_e) {}
                if (bFld) {
                    i1 = i;
                }
                i1 *= -23165;
                i11 = 1;
                do {
                    try {
                        i1 = (iArrFld[i11 + 1][i10 - 1] % -44073);
                        i1 = (-561925131 % i1);
                        i1 = (-205 / i10);
                    } catch (ArithmeticException a_e) {}
                    i1 = (int)Test.dFld;
                } while (++i11 < 71);
            } else if (bFld) {
                iArrFld[i10 - 1][i10 + 1] = 75;
                Test.instanceCount = Test.instanceCount;
                for (i12 = 3; i12 < 71; ++i12) {
                    iArrFld[i10 - 1][i12] = i12;
                    Test.dFld = i10;
                    Test.instanceCount = -5L;
                    iArrFld[i10 - 1][i10 - 1] <<= (int)Test.instanceCount;
                    iArrFld[i10 - 1][i12] -= -9;
                }
            } else {
                Test.fFld += (i10 - i13);
                i13 += i;
            }
            i1 = 95;
            try {
                i1 = (i12 / -61713);
                i13 = (i10 / -159);
                i1 = (-33523 / i13);
            } catch (ArithmeticException a_e) {}
            i1 += (i10 | i);
        } while (++i10 < 357);
        for (d = 14; d < 233; ++d) {
            i14 <<= (int)Test.instanceCount;
            i14 = -39906;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
