package tests.javafuzzer2514;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:55:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=177L;
    public static int iFld=196;
    public short sFld=-28263;
    public static byte byFld=-43;
    public static boolean bFld=true;
    public static float fFld=-2.825F;
    public static double dFld=0.55235;
    public int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l2, int i2, short s) {

        int i3=-43417, i4=-242, i5=50992, i6=4, i7=-13900, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 230);

        i2 &= 109;
        Test.iFld += Test.iFld;
        i3 = 1;
        while (++i3 < 315) {
            float f=0.851F;
            f += -2683048077L;
            if (b) {
                for (i4 = 1; i4 < 5; ++i4) {
                    for (i6 = 1; i6 < 2; i6++) {
                        iArr[i3 + 1] = i7;
                        i2 = i2;
                        iArr[i3 + 1] = i7;
                        i5 = i6;
                        try {
                            i2 = (i7 / -33774);
                            i5 = (-43788 / Test.iFld);
                            i2 = (iArr[i4] % iArr[i3 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i7 = s;
                        Test.iFld = (int)Test.instanceCount;
                    }
                    iArr[i4 - 1] *= i5;
                }
            } else {
                Test.instanceCount >>= i7;
            }
        }
        long meth_res = l2 + i2 + s + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(long l, long l1, double d) {


        Test.iFld -= (int)lMeth(168L, 23, sFld);
        Test.iFld = sFld;
        long meth_res = l + l1 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        double d1=10.108588;
        int i8=-7, i9=-241, i10=-4295, i11=-56578, i12=63;
        boolean b2=true;

        iMeth(11675L, Test.instanceCount, d1);
        Test.instanceCount = Test.iFld;
        if (b2) {
            i8 = 1;
            while (++i8 < 159) {
                lArrFld = lArrFld;
                for (i9 = 1; i9 < 10; i9++) {
                    i10 = 9;
                    Test.instanceCount &= i9;
                    for (i11 = 1; 2 > i11; ++i11) {
                        boolean b1=true;
                        if (Test.iFld != 0) {
                            vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + (b2 ? 1 : 0);
                            return;
                        }
                        b1 = true;
                        Test.iFld *= 7;
                        if (Test.iFld != 0) {
                            vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + (b2 ? 1 : 0);
                            return;
                        }
                        b2 = b1;
                        i12 *= 5;
                    }
                }
            }
        } else if (b2) {
            Test.iFld -= sFld;
        } else {
            Test.instanceCount *= Test.iFld;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-107, i1=0, i13=-82, i14=0, i15=16, i16=-24680, i17=45540, i18=-173, i19=-10285, i20=8, i21=14;
        long l3=-63116L;

        for (i = 15; 330 > i; ++i) {
            float f1=2.530F;
            Test.instanceCount <<= iArrFld[i + 1][i - 1];
            vMeth();
            i1 >>>= Test.iFld;
            iArrFld[i + 1][i] *= (int)Test.instanceCount;
            iArrFld[(i1 >>> 1) % N][i + 1] -= i13;
            Test.byFld = (byte)i;
            i13 >>= i13;
            f1 = Test.instanceCount;
            i14 = 1;
            while (++i14 < 80) {
                Test.instanceCount -= Test.instanceCount;
                for (l3 = i14; l3 < 1; l3 += 2) {
                    if (Test.bFld) break;
                    i13 -= Test.byFld;
                }
                iArrFld[i14 - 1][i] = i14;
                iArrFld[i14 - 1] = iArrFld[i - 1];
            }
        }
        for (i16 = 4; i16 < 255; i16++) {
            i13 = i1;
            for (i18 = 6; i18 < 100; i18++) {
                dArrFld[i18 - 1] -= -35.115F;
                iArrFld[i16 + 1][i18] = (int)Test.fFld;
                i17 += (i18 - l3);
                Test.dFld += l3;
                iArrFld[i18 + 1][i18] -= i16;
                for (i20 = 1; i20 < 2; i20 += 2) {
                    Test.fFld += -103;
                    i13 -= i;
                    Test.iFld ^= 4093;
                }
                i13 = (int)Test.fFld;
                i15 += -43420;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
