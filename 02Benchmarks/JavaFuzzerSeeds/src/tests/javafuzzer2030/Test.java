package tests.javafuzzer2030;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:43:47 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-78L;
    public static boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -57959);
        FuzzerUtils.init(Test.dArrFld, 1.39028);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vMeth() {

        int i1=-226, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -87);

        i1 = (int)((Test.instanceCount++) + Test.instanceCount);
        Test.instanceCount &= (iArr[(i1 >>> 1) % N] = (--i1));
        vMeth_check_sum += i1 + FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(double d1, long l1) {

        byte by1=-40;
        int i7=-108, i8=243, i9=4977, i10=-106, i11=-62460, i12=6, i13=10, i14=-58511, i15=-7;

        by1 += (byte)i7;
        for (i8 = 4; i8 < 152; ++i8) {
            i9 -= (int)Test.instanceCount;
        }
        for (i10 = 11; i10 < 245; i10++) {
            i9 += i10;
            i7 <<= i11;
        }
        l1 += i10;
        Test.instanceCount ^= i9;
        i12 = 1;
        while (++i12 < 222) {
            i13 = (int)l1;
        }
        i11 = i13;
        if (Test.bFld) {
            for (i14 = 8; i14 < 268; ++i14) {
                i9 = i11;
                if (Test.bFld) break;
            }
        } else if (Test.bFld) {
            i7 -= -3;
            return ((int)(Double.doubleToLongBits(d1) + l1 + by1 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15)) %
                2 > 0;
        } else if (Test.bFld) {
            Test.instanceCount = i7;
            return ((int)(Double.doubleToLongBits(d1) + l1 + by1 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15)) %
                2 > 0;
        } else {
            l1 = -2;
        }
        long meth_res = Double.doubleToLongBits(d1) + l1 + by1 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth() {

        int i5=50567, i6=154, i16=-13, i17=-230;
        double d2=0.5144;
        short s1=6288;
        float f1=2.1015F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3785032269L);

        for (i5 = 8; 235 > i5; i5++) {
            Test.bFld = bMeth(d2, Test.instanceCount);
            if (Test.bFld) break;
            i6 -= -1;
            s1 <<= (short)i5;
            for (i16 = 1; i16 < 7; ++i16) {
                float f=95.441F;
                i17 = (int)Test.instanceCount;
                Test.iArrFld1 = Test.iArrFld1;
                f += (i16 * i16);
                Test.instanceCount = i6;
            }
            Test.iArrFld1[i5 + 1] = (int)-48610L;
            f1 -= i6;
            lArr = lArr;
            if (Test.bFld) break;
        }
        Test.bFld = Test.bFld;
        long meth_res = i5 + i6 + Double.doubleToLongBits(d2) + s1 + i16 + i17 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i4, double d, long l) {


        i4 += (int)lMeth();
        Test.dArrFld[(i4 >>> 1) % N] *= i4;
        vSmallMeth_check_sum += i4 + Double.doubleToLongBits(d) + l;
    }

    public void mainTest(String[] strArr1) {

        int i=-6369, i2=-12, i3=-207, i18=-133, i19=242, i20=-51943, i21=23082;
        byte by=-109;
        short s=-13574, sArr[]=new short[N];
        float f2=0.834F;
        long lArr1[]=new long[N], lArr2[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)16194);
        FuzzerUtils.init(lArr1, -5192702230446101911L);
        FuzzerUtils.init(lArr2, 36207450L);

        i = (int)((iArrFld[(53321 >>> 1) % N][(i >>> 1) % N] * (i - by)) - ((Test.instanceCount++) + (s++)));
        vMeth();
        for (i2 = 186; 7 < i2; --i2) {
            double d3=2.35028;
            vMeth();
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i, d3, Test.instanceCount);
            i = i;
            switch ((i2 % 10) + 118) {
            case 118:
                if (Test.bFld) break;
                Test.instanceCount -= Test.instanceCount;
                i = i2;
                for (i18 = 5; i18 < 140; i18++) {
                    f2 += (37072 + (i18 * i18));
                    if (Test.bFld) break;
                    i = by;
                    by >>= (byte)196;
                    for (i20 = 1; i20 < 2; i20++) {
                        sArr[i20 - 1] += by;
                        d3 *= Test.instanceCount;
                        Test.instanceCount >>>= 6;
                        f2 = i;
                        i19 += (int)d3;
                        if (true) break;
                        Test.instanceCount = -59023;
                        Test.instanceCount += (((i20 * i2) + Test.instanceCount) - Test.instanceCount);
                    }
                    by -= (byte)i19;
                    Test.instanceCount -= i19;
                    lArr1[i18 - 1] += (long)d3;
                    i19 = i19;
                }
                break;
            case 119:
                i21 += (((i2 * Test.instanceCount) + Test.instanceCount) - i18);
                break;
            case 120:
                iArrFld[i2 + 1][i2] -= (int)d3;
                break;
            case 121:
                i21 >>= (int)Test.instanceCount;
            case 122:
                Test.instanceCount *= i3;
                break;
            case 123:
                i += (-29470 + (i2 * i2));
            case 124:
                Test.instanceCount = (long)d3;
                break;
            case 125:
                i21 *= 28062;
                break;
            case 126:
                lArr2 = FuzzerUtils.long2array(N, (long)-1862359864342227431L);
            case 127:
                Test.iArrFld1 = iArrFld[i2 + 1];
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
