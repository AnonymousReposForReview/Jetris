package tests.javafuzzer1546;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:30:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2318340382714599339L;
    public static volatile int iFld=241;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3546145210L);
        FuzzerUtils.init(Test.lArrFld1, -12L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i5=-11, i6=-74, i7=52410, i8=-41339, i9=-113, i10=220, i11=12443, i12=92, iArr[]=new int[N];
        double d1=105.95520;
        float f2=-88.496F;
        byte by1=100;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(lArr, -2070929090L);

        Test.instanceCount *= Test.iFld;
        Test.iFld >>>= Test.iFld;
        for (i5 = 123; 1 < i5; i5--) {
            for (i7 = i5; i7 < 13; i7++) {
                for (i9 = 1; i9 < 1; i9++) {
                    i10 = (int)d1;
                    i10 += i5;
                    i8 *= (int)Test.instanceCount;
                }
                i10 ^= i6;
                iArr[i7 + 1] = (int)Test.instanceCount;
                f2 *= 7;
                switch ((i7 % 7) + 57) {
                case 57:
                    for (i11 = 1; i11 < 1; i11++) {
                        lArr[i11] = i7;
                    }
                    if (true) break;
                    break;
                case 58:
                    d1 = Test.iFld;
                    break;
                case 59:
                    f2 -= 129;
                    break;
                case 60:
                    i8 >>= i8;
                    break;
                case 61:
                    i6 += (int)d1;
                    break;
                case 62:
                    by1 += (byte)i6;
                    break;
                case 63:
                    i12 %= -6;
                    break;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i11 +
            i12 + by1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i4) {

        double d=1.93919;
        float f3=28.884F;
        int i13=0, i14=43352, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 122);

        Test.instanceCount *= (long)((i4--) - (i4 - d));
        lMeth();
        f3 *= i4;
        i4 *= (int)-11L;
        for (i13 = 10; i13 < 347; i13++) {
            Test.iFld *= i13;
            Test.iFld += (i13 * i13);
            iArr1[i13] = i13;
            iArr1[i13 + 1] *= Test.iFld;
            Test.iFld = i4;
            if (b) {
                i4 += i4;
            }
            i4 *= 19520;
            i14 -= i4;
        }
        f3 -= 145;
        long meth_res = i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(byte by, float f) {

        float f1=15.550F;
        int i2=-138, i3=8813;
        boolean b1=true;
        short s=13437, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-24965);

        f1 = 1;
        do {
            for (i2 = 1; 7 > i2; ++i2) {
                i3 -= i3;
                i3 *= Integer.reverseBytes(iMeth1(i2));
                Test.lArrFld[(int)(f1)] = i2;
                Test.instanceCount <<= i3;
                Test.iFld = i3;
                Test.instanceCount <<= i3;
                sArr[i2] = (short)i3;
                if (b1) {
                    i3 ^= i3;
                    Test.instanceCount += i3;
                } else {
                    Test.iFld = 7;
                    s <<= (short)i2;
                }
                i3 += (i2 + i2);
            }
        } while (++f1 < 237);
        long meth_res = by + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 + i3 + (b1 ? 1 : 0) + s +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-58977, i1=18569, i15=73, i16=8, i17=-12, i18=-29822, i19=-8115;
        boolean b2=false;
        double d2=-27.14364, dArr[]=new double[N];
        byte by2=59;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 81.783F);
        FuzzerUtils.init(dArr, 0.68915);

        for (i = 252; i > 15; i--) {
            float f4=-9.235F;
            iMeth((byte)(-53), f4);
            if (b2) {
                if (b2) break;
                Test.iFld += (int)3.16736;
            }
            if (b2) break;
            Test.iFld -= Test.iFld;
            Test.iFld = Test.iFld;
            i1 = i;
            for (i15 = 6; i15 < 106; ++i15) {
                f4 += (-71 + (i15 * i15));
                Test.instanceCount += i15;
                fArr[i15 + 1] = (float)d2;
                f4 *= i15;
                if (b2) {
                    f4 += Test.instanceCount;
                    fArr[i15 + 1] = i16;
                    Test.iFld += (int)Test.instanceCount;
                    d2 = i15;
                } else {
                    Test.iFld >>= -54;
                }
                i16 >>= i16;
                fArr[i] *= Test.instanceCount;
            }
        }
        i1 >>= by2;
        for (i17 = 2; i17 < 311; i17++) {
            i19 = 1;
            while (++i19 < 81) {
                Test.lArrFld1 = Test.lArrFld1;
                i18 -= 8467;
                dArr[i17 + 1] -= i17;
                i16 += i19;
                Test.lArrFld[i19 + 1] = 0;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
