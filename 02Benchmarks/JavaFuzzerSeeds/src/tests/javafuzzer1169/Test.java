package tests.javafuzzer1169;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:56:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static volatile int iFld=-5;
    public static byte byFld=-119;
    public boolean bFld=true;
    public static int iFld1=1;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5144459539425604289L);
        FuzzerUtils.init(Test.sArrFld, (short)32341);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3) {

        boolean b1=true;
        int i4=22526, i5=-108, i6=3, i7=81, i8=-45;
        short s2=-9573;
        float f=-2.143F;

        Test.lArrFld[(-254 >>> 1) % N] = Test.byFld;
        b1 = b1;
        for (i4 = 2; i4 < 152; i4++) {
            b1 = b1;
            s2 = (short)Test.instanceCount;
        }
        Test.instanceCount = Test.iFld;
        i5 += (int)f;
        i6 = 1;
        while (++i6 < 154) {
            i7 = 1;
            do {
                f += Test.iFld;
                i3 += (int)Test.instanceCount;
                i3 *= (int)Test.instanceCount;
                i8 = 1;
                do {
                    f *= 1;
                    i5 -= (int)Test.instanceCount;
                } while (++i8 < 1);
            } while (++i7 < 10);
        }
        long meth_res = i3 + (b1 ? 1 : 0) + i4 + i5 + s2 + Float.floatToIntBits(f) + i6 + i7 + i8;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(long l) {

        short s1=-4416;
        int i9=-19801, i10=-155, i11=-115, i12=-75, i13=1, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 199);
        FuzzerUtils.init(fArr, -2.734F);

        Test.iFld += (int)(((iArr1[(Test.iFld >>> 1) % N]--) - (Test.instanceCount - s1)) - Math.max(--Test.iFld,
            Test.iFld++));
        fArr[(Test.iFld >>> 1) % N] = (sMeth(Test.iFld) + Test.iFld);
        i9 = 1;
        do {
            Test.iFld += (i9 * i9);
        } while (++i9 < 238);
        Test.iFld = Test.iFld;
        for (i10 = 356; i10 > 18; i10 -= 3) {
            i11 = (int)l;
            iArr1[i10] *= (int)33177L;
            Test.iFld = (int)Test.instanceCount;
            l <<= i11;
            iArr1[i10 + 1] = (int)l;
            Test.iFld = i11;
            for (i12 = 14; 1 < i12; i12--) {
                float f1=-1.851F;
                i11 *= (int)f1;
            }
            iArr1[i10 + 1] = i11;
        }
        vMeth1_check_sum += l + s1 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth() {

        int i1=-42, i2=45215, iArr[]=new int[N];
        short s=-8953;
        double d=-70.93331;

        FuzzerUtils.init(iArr, 0);

        for (i1 = 10; 252 > i1; i1++) {
            i2 >>= (++iArr[i1 + 1]);
            iArr[i1 + 1] >>>= (int)(((Test.instanceCount *= Test.instanceCount) << (5494411036444805137L +
                Test.instanceCount)) + (s + (Test.instanceCount + -7L)));
            vMeth1(Test.instanceCount);
            i2 -= (int)Test.instanceCount;
            iArr[i1 + 1] >>>= Test.byFld;
            bFld = bFld;
        }
        Test.instanceCount = i1;
        Test.iFld += -251;
        i2 = Test.iFld;
        d = 1;
        do {
            Test.instanceCount += (long)(d * d);
            Test.iFld *= i1;
            Test.iFld = i2;
            Test.instanceCount >>= -3579098151L;
        } while (++d < 196);
        vMeth_check_sum += i1 + i2 + s + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-149, i14=222, i15=-10524, i16=-54010, i17=-25272, i18=221, i19=-147, i20=-8908, i21=-252, iArr2[]=new
            int[N];
        boolean b=true, bArr[]=new boolean[N];
        double d1=-1.31472;
        float f2=0.199F, fArr1[]=new float[N];
        short s3=14345;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(fArr1, 1.342F);

        bArr[(i >>> 1) % N] = (b = false);
        vMeth();
        for (i14 = 314; i14 > 13; i14--) {
            d1 *= -2;
            iArr2[i14 + 1] += i15;
            fArr1[(i14 >>> 1) % N] -= f2;
            Test.iFld >>= (int)Test.instanceCount;
            i = Test.iFld1;
            for (i16 = 2; i16 < 84; ++i16) {
                if (bFld) {
                    f2 += (((i16 * i14) + Test.iFld1) - Test.iFld);
                    dArrFld = FuzzerUtils.double1array(N, (double)1.7688);
                    if (bFld) continue;
                    Test.instanceCount = i16;
                }
                d1 *= i17;
            }
            i18 = 1;
            do {
                iArr2[(i14 >>> 1) % N] *= -19670;
                Test.instanceCount += (i18 * i18);
                i15 |= i15;
                iArr2[i18] = Test.iFld1;
                Test.sArrFld[i14 + 1] = (short)i15;
                Test.iFld += s3;
                if (bFld) {
                    for (i19 = 1; 1 > i19; ++i19) {
                        i += (i19 | Test.instanceCount);
                        i20 <<= i19;
                    }
                    Test.sArrFld[i18] += (short)-3813;
                    i21 = 1;
                    do {
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld = -33506;
                    } while (--i21 > 0);
                } else if (b) {
                    Test.instanceCount += (-50554 + (i18 * i18));
                } else {
                    Test.instanceCount = 48376;
                }
            } while (++i18 < 84);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
