package tests.javafuzzer1394;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:36:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2348200534113137443L;
    public static boolean bFld=false;
    public double dFld=10.16989;
    public volatile short sFld=27252;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7932231977048233504L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by) {

        int i1=8708, i2=52913, i3=-8, i4=4, iArr[]=new int[N];
        long l3=-125L, lArr[]=new long[N];
        double d=-74.104060;
        boolean b=true;

        FuzzerUtils.init(iArr, 17082);
        FuzzerUtils.init(lArr, 2628125155L);

        try {
            i1 -= i1;
            l3 = 168;
            do {
                i1 += (int)(((l3 * i1) + Test.instanceCount) - Test.instanceCount);
                try {
                    i1 = (-103 / iArr[(int)(l3 - 1)]);
                    i2 = (125 / i2);
                    i2 = (iArr[(int)(l3 + 1)] % i1);
                } catch (ArithmeticException a_e) {}
                i3 = 1;
                do {
                    lArr[i3] = i3;
                    i4 = 1;
                    while (++i4 < 1) {
                        iArr[i3 - 1] <<= i2;
                        Test.instanceCount >>= i3;
                        d -= i4;
                        Test.instanceCount >>= i4;
                        Test.instanceCount -= Test.instanceCount;
                        Test.instanceCount = -41654;
                    }
                    d = i1;
                } while (++i3 < 18);
            } while ((l3 -= 2) > 0);
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            b = true;
        }
        vMeth_check_sum += by + i1 + l3 + i2 + i3 + i4 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l1, long l2) {

        byte by1=-41;
        float f=-46.632F, f1=-24.901F;
        int i5=1370, i6=181, i7=-168;
        long l4=3141662924L;

        vMeth(by1);
        for (f = 15; 330 > f; ++f) {
            for (l4 = 1; l4 < 5; ++l4) {
                Test.instanceCount |= i6;
                f1 = 2;
                do {
                    i6 += (int)(((f1 * l2) + l2) - Test.instanceCount);
                    by1 += (byte)i5;
                    i5 += i6;
                    i6 |= -37796;
                    i5 = (int)l4;
                    i5 *= i5;
                    if (i6 != 0) {
                    }
                } while ((f1 -= 3) > 0);
                l2 = i5;
                i6 = i6;
                Test.instanceCount = i7;
            }
        }
        long meth_res = l1 + l2 + by1 + Float.floatToIntBits(f) + i5 + l4 + i6 + Float.floatToIntBits(f1) + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l, int i) {


        iMeth(Test.instanceCount, l);
        vSmallMeth_check_sum += l + i;
    }

    public void mainTest(String[] strArr1) {

        int i8=10, i9=-40584, i10=169, i11=118, i12=-12370, i13=14, i14=106, i15=-41641, i16=46078, iArr1[]=new int[N];
        float f2=43.903F;

        FuzzerUtils.init(iArr1, -35231);

        for (int smallinvoc=0; smallinvoc<334; smallinvoc++) vSmallMeth(Test.instanceCount, i8);
        for (i9 = 4; i9 < 182; i9++) {
            for (i11 = 141; i11 > 3; i11 -= 2) {
                for (i13 = 1; i13 < 3; i13++) {
                    i10 <<= i10;
                    try {
                        iArr1[i9] = (i11 / -29715);
                        iArr1[i13] = (-153 / i12);
                        i10 = (iArr1[i13 + 1] / i14);
                    } catch (ArithmeticException a_e) {}
                }
                for (i15 = 1; i15 < 3; ++i15) {
                    i12 += i15;
                    try {
                        iArr1[i15 + 1] = (i14 / 19454);
                        i14 = (i15 % i9);
                        i16 = (62 / iArr1[i15]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += -9L;
                    if (false) {
                        i14 = i10;
                        i8 %= (int)(i12 | 1);
                        Test.lArrFld[i9 + 1] = i11;
                        Test.instanceCount -= Test.instanceCount;
                    } else if (Test.bFld) {
                        if (Test.bFld) break;
                    } else if (Test.bFld) {
                        i12 >>>= (int)7L;
                        dFld -= i13;
                        i12 += (((i15 * Test.instanceCount) + f2) - i8);
                        i10 >>= (int)-11428L;
                    } else {
                        Test.instanceCount = i14;
                        try {
                            i16 = (-225 % i11);
                            i14 = (iArr1[i11] % i9);
                            i10 = (i11 % i14);
                        } catch (ArithmeticException a_e) {}
                        dFld += i15;
                        iArr1[i15 + 1] += i12;
                    }
                    switch ((i15 % 7) + 73) {
                    case 73:
                        i12 += (-29 + (i15 * i15));
                        iArr1[i11] += i10;
                        Test.instanceCount += i15;
                        i14 *= -51692;
                        break;
                    case 74:
                        i12 += i15;
                        break;
                    case 75:
                        i10 -= i16;
                        break;
                    case 76:
                        i10 -= i14;
                        break;
                    case 77:
                        i12 = (int)-109.692F;
                        break;
                    case 78:
                        Test.instanceCount = Test.instanceCount;
                    case 79:
                        sFld <<= (short)i8;
                        break;
                    default:
                        i14 = i12;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
