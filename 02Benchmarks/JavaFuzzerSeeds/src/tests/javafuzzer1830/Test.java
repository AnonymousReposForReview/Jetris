package tests.javafuzzer1830;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:05:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7399841236577848922L;
    public volatile float fFld=0.696F;
    public static float fFld1=-2.662F;
    public static byte byFld=106;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 211);
        FuzzerUtils.init(Test.dArrFld, -121.51968);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth() {

        int i1=-25234;

        Test.instanceCount <<= i1;
        long meth_res = i1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1) {

        int i5=-32443, i6=-41340, i7=230, i8=12, i9=21920, i10=-4;
        long l2=6L;
        byte by=44;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i5 = 5; i5 < 282; ++i5) {
            Test.fFld1 = i5;
            i6 ^= i5;
            for (l2 = 1; l2 < 6; ++l2) {
                i6 = i5;
                i6 *= i6;
                i6 += (int)(((l2 * i6) + i5) - l1);
                i6 = i7;
                i7 += by;
                for (i8 = 1; i8 < 2; ++i8) {
                    Test.iArrFld[i8 + 1] = i5;
                }
                i10 = 1;
                while (++i10 < 2) {
                    Test.fFld1 = i5;
                    by -= (byte)61465L;
                    bArr[(int)(l2 + 1)] = true;
                }
            }
        }
        vMeth1_check_sum += l1 + i5 + i6 + l2 + i7 + by + i8 + i9 + i10 + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth1(int i4, long l) {

        int i11=96, i12=-47631, i13=-2269, i14=-30357, i15=-94, i16=-6;
        double d=36.62398;

        vMeth1(l);
        switch ((((54937 >>> 1) % 2) * 5) + 44) {
        case 50:
            for (i11 = 3; 138 > i11; ++i11) {
                if (Test.bFld) {
                    i4 |= (int)-37L;
                    if (i4 != 0) {
                    }
                    for (i13 = 1; i13 < 12; i13++) {
                        i15 = 1;
                        do {
                            i12 -= i16;
                            i4 += (i15 + l);
                            i4 = (int)d;
                            i16 += i15;
                            i16 -= (int)l;
                            Test.instanceCount = (long)Test.fFld1;
                            i16 = Test.byFld;
                        } while (++i15 < 2);
                    }
                } else {
                    Test.instanceCount = i15;
                }
            }
            break;
        case 49:
            i16 = (int)Test.instanceCount;
        }
        long meth_res = i4 + l + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=-6807, i3=-14, i17=-30307;

        for (i2 = 8; i2 < 382; i2++) {
            i3 *= (int)Test.fFld1;
            i3 += i2;
            i3 += ((i3++) / ((-iMeth1(i2, Test.instanceCount)) | 1));
            i3 &= (int)-1190505448L;
            i17 = 1;
            do {
                double d1=43.109939;
                i3 -= (int)Test.instanceCount;
                Test.instanceCount = -38522;
                if (Test.bFld) {
                    if (true) {
                        i3 *= (int)d1;
                    } else if (false) {
                        i3 = i3;
                    } else if (Test.bFld) {
                        Test.fFld1 *= i2;
                    }
                    i3 >>= (int)Test.instanceCount;
                    Test.iArrFld[i2 - 1] += i2;
                }
            } while (++i17 < 5);
        }
        vMeth_check_sum += i2 + i3 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=-17, i18=27, i19=12716;
        short s=-6138;
        long l3=-13L;

        i = (int)(--fFld);
        iMeth();
        vMeth();
        Test.iArrFld[(i >>> 1) % N] = i;
        s >>= (short)Test.instanceCount;
        Test.fFld1 += 10681;
        i *= i;
        i = (int)5L;
        Test.instanceCount = 6277723047672738530L;
        Test.iArrFld[(i >>> 1) % N] = i;
        Test.iArrFld[(i >>> 1) % N] = i;
        for (l3 = 378; l3 > 18; l3--) {
            if (true) break;
            i18 = i18;
            Test.instanceCount >>= i18;
            Test.iArrFld[(int)(l3 - 1)] *= (int)Test.instanceCount;
            if (Test.bFld) break;
            i += i18;
        }
        Test.iArrFld[(i18 >>> 1) % N] *= i;
        i19 = 1;
        do {
            switch (((i >>> 1) % 2) + 18) {
            case 18:
                Test.dArrFld[i19] += i19;
                fFld -= (float)0.70449;
                Test.iArrFld[i19 - 1] = (int)Test.fFld1;
                break;
            case 19:
                i += i;
                i18 >>= i19;
                Test.bArrFld[i19] = Test.bFld;
                i *= s;
                break;
            default:
                Test.fFld1 -= l3;
                Test.instanceCount += 3L;
            }
        } while (++i19 < 127);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
