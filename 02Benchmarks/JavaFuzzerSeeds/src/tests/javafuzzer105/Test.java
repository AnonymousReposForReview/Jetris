package tests.javafuzzer105;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57369L;
    public static short sFld=13518;
    public static byte byFld=-19;
    public static float fFld=-1.713F;
    public int iFld=27;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 191);
        FuzzerUtils.init(Test.sArrFld, (short)-7420);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        int i8=91, i9=0;
        float f1=0.472F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3692410702994134814L);

        lArr[(i7 >>> 1) % N] <<= i7;
        i7 += -12;
        Test.instanceCount = -233L;
        Test.sFld = Test.byFld;
        for (long l : lArr) {
            l = i7;
            for (i8 = 4; 1 < i8; i8--) {
                l = (long)f1;
                f1 += (i8 * i8);
                switch (((i8 % 1) * 5) + 74) {
                case 78:
                    i6 = (int)Test.instanceCount;
                    i6 += (i8 ^ i9);
                    i7 <<= i9;
                    i6 += (i8 + i6);
                    break;
                default:
                    i6 = i6;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(double d1, short s) {

        int i4=49153, i5=-13, i10=220, i11=-9;
        float f=-1.50F;
        boolean b=true;
        double d2=-2.34608, dArr[][]=new double[N][N];
        long l1=164L;

        FuzzerUtils.init(dArr, -21.69157);

        Test.instanceCount += (long)(dArr[(i4 >>> 1) % N][(i4 >>> 1) % N] + Integer.reverseBytes(++i4));
        i4 ^= (int)((--f) + Test.instanceCount);
        Test.iArrFld[(10 >>> 1) % N] = (int)Math.abs((Test.instanceCount + i4) - (s - Test.instanceCount));
        i5 = 1;
        while (++i5 < 199) {
            switch (((i5 % 4) * 5) + 99) {
            case 118:
                vMeth1(i5, 111);
                i4 -= i4;
                i4 = (int)Test.instanceCount;
                for (i10 = i5; i10 < 8; ++i10) {
                    b = b;
                    Test.sFld = (short)i4;
                }
            case 116:
                switch (((i4 >>> 1) % 3) + 35) {
                case 35:
                    Test.instanceCount -= (long)d2;
                    i4 += (i5 + i4);
                    if (b) break;
                    break;
                case 36:
                    if (i11 != 0) {
                    }
                    break;
                case 37:
                    b = b;
                    break;
                default:
                    l1 = Test.instanceCount;
                }
            case 105:
            case 104:
            default:
                b = b;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + s + i4 + Float.floatToIntBits(f) + i5 + i10 + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(d2) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=-105, i12=1636, i13=-5, i14=226;
        double d=0.13986, dArr1[]=new double[N];
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2L);
        FuzzerUtils.init(dArr1, 55.96134);

        i3 = 1;
        do {
            if (b1) {
                i1 = (int)((long)((i2--) + (d * i1)) << 11L);
                i2 += (Test.iArrFld[i3 + 1] -= iMeth(d, Test.sFld));
                lArr1[i3 - 1] = -33;
            } else {
                i12 = 1;
                do {
                    dArr1[i3 + 1] *= Test.instanceCount;
                    d -= i12;
                    switch ((i12 % 2) + 105) {
                    case 105:
                        Test.fFld += (float)d;
                        i1 += (i12 | (long)Test.fFld);
                        Test.instanceCount >>= 61660;
                        break;
                    case 106:
                        for (i13 = 1; 1 > i13; i13++) {
                            i1 += i3;
                            Test.sFld *= (short)-92;
                        }
                        break;
                    default:
                        Test.sArrFld[i12] <<= (short)i;
                    }
                } while (++i12 < 7);
            }
        } while (++i3 < 217);
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i15=-7, i16=8, i17=-14, i18=-10, i19=-7110, i20=-14;
        double d3=76.102804;
        long lArr2[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr2, -12L);
        FuzzerUtils.init(bArr, true);

        vMeth(iFld, iFld, -29784);
        iFld -= iFld;
        for (i15 = 9; i15 < 300; i15++) {
            Test.fFld += 35;
            i16 += (i15 + i16);
            Test.fFld += i15;
            lArr2[i15] >>= iFld;
            d3 += Test.instanceCount;
            Test.sFld = (short)iFld;
            i16 >>= i15;
            for (i17 = 2; i17 < 86; ++i17) {
                i18 -= i18;
                Test.instanceCount >>= -35671L;
                i18 = (int)Test.instanceCount;
                iFld += (-14 + (i17 * i17));
                if (bFld) break;
                d3 *= d3;
                i18 += (int)d3;
                for (i19 = 1; i19 < 2; ++i19) {
                    switch ((i19 % 8) + 11) {
                    case 11:
                        dArrFld[i19 - 1] -= Test.instanceCount;
                        Test.instanceCount = 14;
                        Test.iArrFld[i17] = i17;
                        break;
                    case 12:
                    case 13:
                        Test.sArrFld[i19 - 1] += (short)iFld;
                        break;
                    case 14:
                        iFld += i19;
                        break;
                    case 15:
                        switch (((i17 % 1) * 5) + 32) {
                        case 34:
                            bArr[i17] = bFld;
                            Test.instanceCount <<= i17;
                            i16 += (-14417 + (i19 * i19));
                            Test.iArrFld[i17 - 1] >>= (int)Test.instanceCount;
                        default:
                            Test.sFld >>= Test.byFld;
                        }
                        break;
                    case 16:
                        i20 = 5;
                    case 17:
                        try {
                            i20 = (i17 / 30223);
                            i18 = (i16 / i19);
                            i16 = (i16 / Test.iArrFld[i19 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 18:
                        Test.iArrFld[i19 + 1] <<= i19;
                        break;
                    default:
                        i20 ^= i18;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
