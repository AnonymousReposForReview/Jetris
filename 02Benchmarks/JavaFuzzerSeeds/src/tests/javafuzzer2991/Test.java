package tests.javafuzzer2991;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:27:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=171L;
    public static boolean bFld=true;
    public static double dFld=-2.127690;

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d, int i5) {

        int i6=-12, i7=-149, i8=6748, i9=2, i10=-49, i11=-45380;
        float f1=-76.949F;

        for (i6 = 11; i6 < 275; ++i6) {
            if (Test.bFld) break;
            f1 = (float)d;
            for (i8 = i6; i8 < 6; ++i8) {
                for (i10 = 1; i10 > 1; i10--) {
                    if (i5 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 +
                            i9 + i10 + i11;
                        return;
                    }
                    switch ((i6 % 4) + 40) {
                    case 40:
                        i9 = (int)d;
                        break;
                    case 41:
                        if (false) break;
                        break;
                    case 42:
                        i11 += i10;
                        i11 += i8;
                    case 43:
                        f1 += (i10 * i10);
                        Test.instanceCount -= Test.instanceCount;
                    default:
                        i5 *= i11;
                    }
                    Test.instanceCount += i10;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11;
    }

    public static int iMeth(short s) {

        int i12=-62274, i13=95, i14=-5, i16=10, i17=148, i18=-5, i19=-9, iArr1[]=new int[N];
        float f2=0.342F;

        FuzzerUtils.init(iArr1, -15498);

        vMeth(0.65143, i12);
        f2 -= f2;
        i12 *= 3;
        for (i13 = 4; i13 < 169; i13++) {
            i14 = (int)f2;
            if (Test.bFld) break;
            i14 = i12;
        }
        for (int i15 : iArr1) {
            for (i16 = 1; i16 < 4; ++i16) {
                if (Test.bFld) {
                    for (i18 = 1; i18 < 2; ++i18) {
                        f2 = i18;
                        Test.instanceCount &= i12;
                        Test.instanceCount += (i18 ^ Test.instanceCount);
                        i14 -= 3;
                    }
                }
            }
        }
        long meth_res = s + i12 + Float.floatToIntBits(f2) + i13 + i14 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i2, int i3, int i4) {

        int i20=211, i21=-39499, i22=-2, i23=62419, i24=42339;
        long l=-197L, lArr[]=new long[N];
        double d1=1.10307, dArr[]=new double[N];
        float f3=0.175F;

        FuzzerUtils.init(lArr, 222648975L);
        FuzzerUtils.init(dArr, 81.120778);

        lArr[(i4 >>> 1) % N] <<= i3;
        dArr[(0 >>> 1) % N] += iMeth((short)(4103));
        Test.instanceCount = i4;
        i2 = 35306;
        i20 = (int)l;
        for (i21 = 2; 175 > i21; ++i21) {
            for (i23 = i21; i23 < 9; i23++) {
                i2 += -215;
                d1 -= f3;
                i20 += (i23 | (long)f3);
                if (Test.bFld) continue;
                i4 = (int)l;
                i2 = i20;
                i3 = i22;
                i2 = i22;
            }
        }
        long meth_res = i2 + i3 + i4 + i20 + l + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=118, i25=80, i26=137, i27=-11, i28=-42936, i29=5, i30=-55057, iArr[]=new int[N];
        byte by=-69;
        float f=-2.380F;
        boolean b=true;
        short s1=11696, sArr[]=new short[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(sArr, (short)-25162);

        if ((b || bMeth(i1, i, i1)) || b) {
            for (i = 3; i < 324; i++) {
                Test.instanceCount <<= (Test.instanceCount--);
                i1 += (((i * i1) + i1) - Test.instanceCount);
            }
        } else if (Test.bFld) {
            i1 *= (int)((Test.instanceCount * iArr[(46 >>> 1) % N]) - by);
            f += i;
        } else {
            i1 = i;
            for (i25 = 361; i25 > 15; --i25) {
                Test.instanceCount *= -8817828790649743636L;
                i1 = (int)Test.dFld;
                for (i27 = 4; i27 < 73; i27++) {
                    i1 += (int)-13L;
                    i29 = 1;
                    while (++i29 < 2) {
                        Test.instanceCount += (i29 | Test.instanceCount);
                        sArr[i27] += (short)Test.dFld;
                        i26 += (((i29 * i) + i1) - i1);
                        i26 = s1;
                        i1 += (i29 + i28);
                    }
                    iArr = FuzzerUtils.int1array(N, (int)-21945);
                    Test.dFld *= i;
                    i30 = 1;
                    while (++i30 < 2) {
                        i1 = -84;
                        i1 = i26;
                        Test.instanceCount -= Test.instanceCount;
                        Test.instanceCount += (i30 + i25);
                        i1 -= by;
                        if (b) continue;
                        i26 -= -74;
                        i1 -= (int)Test.dFld;
                        i28 *= (int)Test.dFld;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
