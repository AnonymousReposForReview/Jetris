package tests.javafuzzer2387;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:59:01 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public static volatile int iFld=4;
    public static double dFld=0.46135;
    public static volatile boolean bFld=true;
    public static boolean bFld1=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 34649);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        float f=-1.365F;
        boolean b=true, bArr[]=new boolean[N];
        byte by2=106;
        short s=4629;
        int iArr1[][]=new int[N][N], iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -58149);
        FuzzerUtils.init(iArr2, 1);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 110L);

        iArr1[(Test.iFld >>> 1) % N][(-7 >>> 1) % N] >>>= Test.iFld;
        for (int i5 : iArr2) {
            switch (((143 >>> 1) % 7) + 10) {
            case 10:
                Test.iFld *= (int)f;
                iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= i5;
                try {
                    Test.iFld = (Test.iFld / Test.iFld);
                    i5 = (Test.iFld / Test.iFld);
                    i5 = (-22171 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                break;
            case 11:
                i5 *= (int)-65481L;
                i5 = -5082;
                switch (((i5 >>> 1) % 4) + 98) {
                case 98:
                    iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= i5;
                    iArr2[(92 >>> 1) % N] *= 10;
                    bArr[(i5 >>> 1) % N] = b;
                    break;
                case 99:
                    i5 -= (int)l;
                case 100:
                    Test.iFld += (int)f;
                    f -= Test.instanceCount;
                case 101:
                    i5 >>= by2;
                    break;
                }
                break;
            case 12:
                lArr[(i5 >>> 1) % N] >>= s;
                break;
            case 13:
                l = -54;
            case 14:
                Test.iFld ^= i5;
                break;
            case 15:
                Test.dFld += Test.iFld;
                break;
            case 16:
                l -= i5;
                break;
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + (b ? 1 : 0) + by2 + s + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        byte by1=88;
        int i2=39422, i3=-90, i4=68, i6=5, i7=-33, i8=-13, i9=2, iArr[]=new int[N];
        double d1=1.27783;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(lArr1, 3860718983L);

        by1 = (byte)(iArr[(i2 >>> 1) % N]++);
        for (i3 = 12; 220 > i3; i3++) {
            switch (((i3 % 2) * 5) + 80) {
            case 81:
                i4 -= (by1--);
                i2 += i4;
                break;
            case 87:
                d1 += ((-Math.max(i4, i2)) - iMeth(Test.instanceCount));
                break;
            }
            i2 += -3;
            if (b1) continue;
            lArr1[i3 + 1] += 32568L;
            for (i6 = 1; i6 < 8; ++i6) {
                for (i8 = 2; i8 > 1; i8 -= 2) {
                    i4 += (-1656 + (i8 * i8));
                    iArr[i6 - 1] <<= Test.iFld;
                    Test.instanceCount = by1;
                    Test.iFld = (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += by1 + i2 + i3 + i4 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i6 + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        int i10=-70, i11=-253, i12=-8;
        float f1=-51.542F, f2=1.808F;

        vMeth1();
        for (i10 = 4; i10 < 149; i10++) {
            for (f1 = 11; f1 > 1; --f1) {
                if (Test.bFld) break;
                i12 <<= (int)Test.instanceCount;
                i12 = i10;
                i12 = -30464;
                Test.iArrFld[(-149 >>> 1) % N] = -239;
                f2 *= i10;
                Test.iArrFld[(int)(f1)] = i12;
                Test.iFld = (int)f1;
            }
            Test.instanceCount += i10;
            i11 += i10;
        }
        f2 -= i12;
        Test.bFld = Test.bFld;
        vMeth_check_sum += i10 + i11 + Float.floatToIntBits(f1) + i12 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        double d=-68.101731;
        int i=38246, i1=-48, i13=9, i14=1, i15=-6, i16=51676, i17=-189, i18=0;
        byte by=38;
        float f3=103.796F;
        short s1=-15584;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -8L);

        d = 299;
        do {
            if (Test.bFld1) {
                for (i = 3; i < 84; ++i) {
                    i1 = i;
                    i1 = (by--);
                    vMeth();
                    try {
                        i1 = (i / i);
                        i1 = (Test.iArrFld[i] / -163299923);
                        Test.iFld = (-26 / Test.iArrFld[i]);
                    } catch (ArithmeticException a_e) {}
                    i13 = 1;
                    do {
                        Test.iFld *= (int)f3;
                        Test.instanceCount -= s1;
                        lArr2[i - 1] = Test.instanceCount;
                        Test.instanceCount += i1;
                    } while ((i13 += 3) < 2);
                    lArr2[(int)(d + 1)] |= Test.instanceCount;
                }
                Test.iFld = (int)Test.instanceCount;
                i1 -= (int)Test.instanceCount;
                Test.instanceCount -= i13;
            } else if (Test.bFld) {
                for (i14 = 5; i14 < 84; ++i14) {
                    f3 -= i14;
                    for (i16 = 1; i16 < 2; ++i16) {
                        Test.dFld = i;
                        i1 %= (int)(i | 1);
                        lArr2[(int)(d)] = i13;
                        if (Test.bFld) break;
                        Test.iFld += (int)-4L;
                        f3 -= i13;
                    }
                    switch ((((i16 >>> 1) % 2) * 5) + 18) {
                    case 21:
                        i15 += (-7 + (i14 * i14));
                        break;
                    case 26:
                    default:
                        s1 = (short)8;
                        i17 += (18706 + (i14 * i14));
                        lArr2[(int)(d + 1)] = 111;
                    }
                }
            } else {
                i1 += (int)(((d * i15) + i18) - Test.instanceCount);
            }
        } while (--d > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
