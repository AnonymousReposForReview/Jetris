package tests.javafuzzer1304;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:52:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-51L;
    public static byte byFld=-93;
    public static byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-124);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(int i1) {


        Test.instanceCount -= ((++i1) - ((-2387114028L * i1) * i1));
        long meth_res = i1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i8, int i9) {

        int i10=6720, i11=-2974, i12=7, i13=78, i14=49335, i15=-5295;
        short s=-6303;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -95.81415);

        for (i10 = 8; i10 < 334; i10++) {
            i8 <<= (int)(((i8 + Test.instanceCount) + (i9 - Test.byFld)) - ((-(f + f)) + (--i11)));
            Test.instanceCount >>= (++Test.instanceCount);
            i9 += (((i10 * s) + i10) - i9);
            for (i12 = 1; 5 > i12; ++i12) {
                i11 += (i11++);
                i13 = Math.max(iMeth(i9), i14);
                Test.instanceCount <<= Test.instanceCount;
                Test.instanceCount *= i12;
                i14 *= (int)f;
                dArr = dArr;
            }
        }
        Test.instanceCount = Test.instanceCount;
        i15 = 1;
        do {
            f -= Test.instanceCount;
            i11 = (int)f;
        } while (++i15 < 264);
        vMeth_check_sum += Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + s + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public short sMeth(int i2, int i3, int i4) {

        int i5=5, i6=-37146, i7=-6709, i16=-7, iArr[][]=new int[N][N];
        double d=19.113336;
        float f1=0.863F;

        FuzzerUtils.init(iArr, 236);

        i5 = 1;
        while (++i5 < 254) {
            for (i6 = i5; i6 < 6; ++i6) {
                if (((Test.instanceCount--) != Float.intBitsToFloat((int)(i4 -= (int)-2506575329L))) && (7 ==
                    ((Test.instanceCount--) + Math.max(i2, i6)))) break;
                switch ((i6 % 1) + 107) {
                case 107:
                    vMeth(-95.986F, i5, i3);
                    if (i4 != 0) {
                    }
                    switch (((i6 % 1) * 5) + 20) {
                    case 21:
                        for (d = 1; d < 1; ++d) {
                            if (false) break;
                            f1 = f1;
                        }
                        break;
                    }
                    break;
                default:
                    Test.byArrFld[i6][i6] <<= (byte)0;
                }
                i3 >>>= i2;
                i2 = i7;
                i3 -= -4;
                iArr[i6] = iArr[i5 + 1];
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i16 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5;
        float f2=-2.556F;

        i = iMeth(-13 * (-(--i)));
        i = (int)((sMeth(i, i, i) - -10) >> Test.instanceCount);
        i *= (int)Test.instanceCount;
        f2 -= -7891828920066064963L;
        i /= (int)(i | 1);
        i &= i;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest vMeth sMeth
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
