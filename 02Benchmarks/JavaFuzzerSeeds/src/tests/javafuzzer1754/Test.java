package tests.javafuzzer1754;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:00:49 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=330979731925601554L;
    public int iFld=60580;
    public static double dFld=-2.113751;
    public static float fFld=-46.102F;
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -13297L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i9=-16606, i10=-4873, i11=10, i12=14, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 15082);

        for (int i8 : iArr) {
            Test.dFld -= i8;
            iArr[(i8 >>> 1) % N] -= (int)Test.dFld;
            Test.fFld = Test.fFld;
            Test.instanceCount = i8;
            i8 += (int)-13L;
            for (i9 = 4; i9 > 1; --i9) {
                byte by=-53;
                l1 = l1;
                i8 |= by;
            }
            Test.fFld += (float)Test.dFld;
            i11 = 1;
            do {
                i8 -= (int)Test.instanceCount;
                i8 = i12;
                l1 ^= l1;
            } while (++i11 < 4);
        }
        i12 <<= i12;
        vMeth1_check_sum += l1 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i3, int i4, int i5) {

        int i6=24184, i7=-60312, i13=-37138, i14=120, i15=-178;
        boolean b=false;

        for (i6 = 3; i6 < 180; ++i6) {
            vMeth1(Test.instanceCount);
            Test.fFld *= Test.fFld;
            if (i6 != 0) {
            }
            Test.fFld += i5;
            i7 += i7;
            i4 = (int)Test.instanceCount;
        }
        for (i13 = 15; i13 < 301; i13++) {
            i7 += 225;
            i5 = i5;
            i14 += -142;
            i15 += (-182 + (i13 * i13));
            i15 += (((i13 * i13) + Test.instanceCount) - i5);
            b = b;
            i14 += (((i13 * i4) + Test.instanceCount) - i13);
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i13 + i14 + i15 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i16=-109, i17=0, i18=7, iArr1[]=new int[N];
        byte by1=-9;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-17242);
        FuzzerUtils.init(iArr1, 31);

        i2 += (int)(Float.intBitsToFloat(i2) * iMeth(63585, i2, i16));
        i16 <<= 126;
        for (i17 = 2; i17 < 175; i17++) {
            i18 = i16;
            sArr[i17] = (short)Test.instanceCount;
            i2 = i16;
            iArr1 = FuzzerUtils.int1array(N, (int)-16695);
            i2 += (int)2.326F;
            switch (((i17 % 2) * 5) + 103) {
            case 105:
                i2 += i17;
                break;
            case 104:
                try {
                    i18 = (-222568976 % i17);
                    iArr1[i17 - 1] = (i17 % i18);
                    i18 = (i18 % iArr1[i17 + 1]);
                } catch (ArithmeticException a_e) {}
                Test.fFld *= i17;
                break;
            }
        }
        iArr1[(i2 >>> 1) % N] = i17;
        i2 <<= by1;
        i18 += i18;
        vMeth_check_sum += i2 + i16 + i17 + i18 + by1 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.182F;
        int i=-9, i1=-34398, i20=14, i21=-58610, i22=9, i23=42991;
        long l4=7L;
        boolean b1=false;
        byte by2=102;

        f *= (-(iFld--));
        iFld -= iFld;
        for (i = 14; i < 226; ++i) {
            iFld = (i1--);
            vMeth(i);
            iArrFld = iArrFld;
            iArrFld[i - 1] = i1;
            iFld = i1;
            l4 = 1;
            do {
                for (i20 = i; 2 > i20; i20++) {
                    Test.instanceCount -= i21;
                }
                i21 += (int)(l4 * i1);
                i1 = i;
                switch (((i >>> 1) % 9) + 33) {
                case 33:
                    i1 = i21;
                    iFld += (int)(((l4 * i21) + iFld) - i20);
                    break;
                case 34:
                    if (b1) break;
                    i21 = i1;
                    Test.fFld += (l4 - i);
                    iFld <<= (int)l4;
                    break;
                case 35:
                    i21 |= i20;
                    iArrFld[(int)(l4)] -= by2;
                    i21 += (int)(((l4 * Test.instanceCount) + iFld) - iFld);
                    break;
                case 36:
                    for (i22 = 1; i22 < 2; i22++) {
                        i1 = i1;
                        i21 += i22;
                        i1 = -8;
                        try {
                            i23 = (i23 / 7276);
                            i1 = (i22 % i);
                            iArrFld[i - 1] = (i / i);
                        } catch (ArithmeticException a_e) {}
                        if (b1) continue;
                    }
                    try {
                        iFld = (-109 / i);
                        i23 = (47311 % i23);
                        i23 = (7468 % i23);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 37:
                    i21 += (int)l4;
                    break;
                case 38:
                    f += i22;
                    break;
                case 39:
                case 40:
                    Test.instanceCount += l4;
                    break;
                case 41:
                    try {
                        i21 = (i22 / i);
                        i23 = (i1 / iFld);
                        i21 = (-584429995 % iArrFld[i - 1]);
                    } catch (ArithmeticException a_e) {}
                }
            } while ((l4 += 2) < 118);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
