package tests.javafuzzer558;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:42:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static float fFld=121.926F;
    public static int iFld=-12904;
    public static double dFld=-92.79273;
    public int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-123);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public int iMeth(float f, int i6, int i7) {

        byte by=-31;
        double d=-2.75867;
        int i8=-6, i9=40271, i10=-41, iArr[]=new int[N];
        long l1=176L;

        FuzzerUtils.init(iArr, -7);

        i7 /= (int)-6L;
        iArr[(-3 >>> 1) % N] <<= by;
        for (d = 10; d < 320; ++d) {
            switch ((int)(((d % 1) * 5) + 72)) {
            case 74:
                i6 %= (int)((long)(d) | 1);
                i7 *= i7;
                break;
            default:
                iArr[(int)(d)] -= (int)106.91477;
                i9 = 1;
                do {
                    switch (((i9 >>> 1) % 8) + 92) {
                    case 92:
                    case 93:
                        for (l1 = 1; l1 < 1; l1++) {
                            i10 += (int)(((l1 * i7) + f) - i8);
                            i8 += (int)d;
                            i10 = (int)Test.instanceCount;
                            if (i9 != 0) {
                            }
                            i7 <<= i9;
                        }
                        break;
                    case 94:
                        Test.instanceCount -= (long)d;
                    case 95:
                        Test.instanceCount = (long)f;
                        break;
                    case 96:
                        i8 = 9;
                        break;
                    case 97:
                        f = i8;
                        break;
                    case 98:
                        i8 ^= 741;
                        break;
                    case 99:
                        f += (((i9 * i9) + i8) - f);
                        break;
                    }
                } while (++i9 < 5);
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + by + Double.doubleToLongBits(d) + i8 + i9 + l1 + i10 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(int i4, int i5, long l) {

        float f1=-1.416F, f2=-35.926F;
        int i11=-38021, i12=123, i13=-37823, i14=-173;
        long l2=2687199331L;
        double d1=92.14206;

        i4 <<= (int)((iMeth(f1, i5, i4) * f1) - l);
        for (i11 = 11; i11 < 191; ++i11) {
            switch (((i11 >>> 1) % 1) + 27) {
            case 27:
                l2 = (long)f1;
                l2 += (5 + (i11 * i11));
                for (f2 = i11; f2 < 9; f2++) {
                    i14 = 1;
                    do {
                        i13 += (i14 * i12);
                        i5 = i12;
                        Test.instanceCount += i14;
                        i13 += (i14 + l2);
                        i13 = (int)1.86852;
                        i4 = 12;
                        i5 *= (int)d1;
                        i4 ^= i12;
                    } while ((i14 += 2) < 1);
                }
            default:
                i4 *= (int)f1;
            }
        }
        vMeth1_check_sum += i4 + i5 + l + Float.floatToIntBits(f1) + i11 + i12 + l2 + Float.floatToIntBits(f2) + i13 +
            i14 + Double.doubleToLongBits(d1);
    }

    public void vMeth(int i, int i1, int i2) {

        int i3=-204, i15=-19660, i16=-194, i17=13, i18=127;
        boolean b=true;

        i3 = 1;
        while (++i3 < 305) {
            vMeth1(i3, i, Test.instanceCount);
            i1 = i;
            i2 -= i;
        }
        if (b) {
            for (i15 = 7; 146 > i15; i15++) {
                Test.instanceCount -= i16;
                i2 = -7085;
                for (i17 = 1; i17 < 11; i17++) {
                    i1 = i2;
                    i18 -= i17;
                    try {
                        i18 = (153 / i15);
                        i16 = (i17 / 18441);
                        i = (iArrFld[i15 + 1] % i);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= i3;
                    iArrFld[i15 + 1] <<= i15;
                    i2 -= (int)Test.fFld;
                }
            }
        } else {
            iArrFld[(i18 >>> 1) % N] = (int)-875578713L;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i15 + i16 + i17 + i18 + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i19=-143, i20=9, i21=5, i22=7;
        long l3=-53L, lArr[]=new long[N];
        short s=-21911;
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(fArr, -2.909F);

        vMeth(Test.iFld, Test.iFld, Test.iFld);
        i19 = 1;
        while (++i19 < 123) {
            i20 = 1;
            while (++i20 < 204) {
                Test.iFld += (int)Test.instanceCount;
                lArr[i19 - 1] += Test.instanceCount;
                Test.iFld >>= (int)Test.instanceCount;
                Test.iFld = Test.iFld;
                Test.iFld -= (int)1.984F;
                Test.iFld += (int)7706153482432182340L;
                Test.iFld -= i20;
            }
            Test.instanceCount >>= Test.instanceCount;
            Test.instanceCount = Test.iFld;
            Test.iFld = 38865;
            Test.iFld = (int)Test.fFld;
            Test.iFld <<= Test.iFld;
            for (l3 = i19; l3 < 204; ++l3) {
                Test.iFld &= i20;
                iArrFld[i19 - 1] *= -12;
                Test.iFld += (int)l3;
                Test.dFld = i21;
                Test.instanceCount = -113;
                i22 = 1;
                do {
                    s = (short)Test.iFld;
                    i21 += (i22 + Test.iFld);
                    fArr[i19 + 1] -= i19;
                    i21 -= i19;
                    Test.dFld = i19;
                    Test.byArrFld[(int)(l3 - 1)] += (byte)i22;
                    iArrFld[i19 + 1] = 180;
                    iArrFld[i22 - 1] /= (int)(l3 | 1);
                } while (++i22 < 1);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
