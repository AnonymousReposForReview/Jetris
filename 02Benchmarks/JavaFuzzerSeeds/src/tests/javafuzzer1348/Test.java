package tests.javafuzzer1348;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:32:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static short sFld=23182;
    public static byte byFld=-44;
    public static double dFld=0.61276;
    public static int iFld=-115;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public volatile double dArrFld[]=new double[N];
    public static volatile boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 10.399F);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4) {

        float f1=-2.814F, f2=0.132F;
        double d1=2.46440;
        byte by=9;
        long l=70L;
        int i5=1607;
        short s=-8536;
        boolean b1=true;

        f1 = 1;
        do {
            i3 *= (int)f1;
            Test.fArrFld = Test.fArrFld;
            f2 *= 47249;
            Test.instanceCount = Test.instanceCount;
            i4 += (int)(f1 * f1);
            i4 *= (int)d1;
            f2 -= by;
            Test.fArrFld[(int)(f1)] = i3;
        } while (++f1 < 194);
        i4 = i3;
        for (l = 20; l < 380; l++) {
            Test.instanceCount = l;
            s >>>= s;
            if (b1) break;
            if (b1) break;
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            by + l + i5 + s + (b1 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(float f, double d) {

        int i1=8, i2=-175, i6=156, i7=-64605, i8=-10;
        boolean b=true, bArr[]=new boolean[N];
        byte by1=20;

        FuzzerUtils.init(bArr, false);

        for (i1 = 253; i1 > 13; i1--) {
            i2 -= (~(++i2));
            Test.instanceCount += (1 + (i1 * i1));
            i2 += (i1 * i1);
            b = (bArr[i1] = ((4605524448306193474L - (f -= i1)) < f));
            i2 += (int)((i2++) | lMeth(i2, -62598));
            i6 = 1;
            while (++i6 < 7) {
                for (i7 = 1; i1 < i7; i7--) {
                    Test.instanceCount *= i8;
                    Test.instanceCount &= i6;
                    switch ((i7 % 8) + 66) {
                    case 66:
                        try {
                            i8 = (i1 % i8);
                            i2 = (216 % i7);
                            i8 = (-57867 / i2);
                        } catch (ArithmeticException a_e) {}
                        i8 &= i6;
                        break;
                    case 67:
                        Test.instanceCount <<= 6;
                        break;
                    case 68:
                        b = b;
                        break;
                    case 69:
                        if (b) break;
                        break;
                    case 70:
                        by1 &= (byte)-44654;
                    case 71:
                        f += 16;
                    case 72:
                        i2 += (int)f;
                        break;
                    case 73:
                        f -= i1;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + (b ? 1 : 0) + i6 + i7 + i8
            + by1 + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i=-52804, i9=-3, i10=13, i11=-56081, iArr[]=new int[N];
        double d2=-120.88283;
        byte by2=-48;
        float f3=-56.343F;
        boolean b2=true;

        FuzzerUtils.init(iArr, -7);

        i = 1;
        do {
            vMeth1(-79.315F, d2);
            i9 += (i - by2);
            if (true) {
                i9 += (((i * i9) + i9) - Test.sFld);
                i9 = -91;
            } else if (b2) {
                i9 = by2;
                d2 *= i;
            } else if (b2) {
                f3 -= Test.instanceCount;
            }
            switch (((-11 >>> 1) % 7) + 120) {
            case 120:
                i9 ^= Test.sFld;
                break;
            case 121:
                i10 = 1;
                do {
                    i9 = i;
                    Test.instanceCount += 25308;
                    d2 = Test.instanceCount;
                } while (++i10 < 5);
            case 122:
            case 123:
                iArr[i - 1] = i11;
                break;
            case 124:
                i9 += (i - i9);
                break;
            case 125:
                i9 = i11;
                break;
            case 126:
                i11 += (int)f3;
                break;
            }
        } while (++i < 303);
        vMeth_check_sum += i + Double.doubleToLongBits(d2) + i9 + by2 + Float.floatToIntBits(f3) + (b2 ? 1 : 0) + i10 +
            i11 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=54617, i13=-11, i14=41410, i15=10, i16=72, i17=1, i18=-9, i19=173;
        float f4=-2.338F;
        double d3=-2.82671;
        boolean b3=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4420465797148483443L);

        vMeth();
        for (i12 = 5; i12 < 180; i12++) {
            i13 += i12;
            for (i14 = 6; i14 < 143; i14++) {
                for (i16 = i14; i16 < 2; ++i16) {
                    iArrFld[i16 - 1] = Test.byFld;
                    switch (((i16 % 1) * 5) + 47) {
                    case 49:
                        i13 *= i16;
                        i13 = (int)Test.instanceCount;
                    }
                    iArrFld = iArrFld;
                    i13 += (i16 - f4);
                    i17 -= (int)Test.dFld;
                    i15 = -2067;
                    Test.instanceCount -= Test.sFld;
                }
                switch (((i14 % 2) * 5) + 2) {
                case 6:
                    i18 = 2;
                    do {
                        i15 *= 11320;
                        i17 = -28747;
                        i17 += (((i18 * i18) + i13) - Test.sFld);
                    } while (--i18 > 0);
                    i19 = 1;
                    do {
                        i15 = 35376;
                        Test.instanceCount = Test.iFld;
                        Test.instanceCount -= i16;
                        dArrFld = dArrFld;
                        i17 += (((i19 * i18) + Test.iFld) - i13);
                        lArr[i14 - 1] = i19;
                    } while (++i19 < 2);
                    iArrFld[i12 + 1] += (int)f4;
                    Test.bArrFld[i12 + 1][i12] = false;
                    break;
                case 12:
                    Test.iFld = 43549;
                    iArrFld[i14] = (int)d3;
                default:
                    if (b3) break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
