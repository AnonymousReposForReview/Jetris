package tests.javafuzzer3011;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:45:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static double dFld=0.53206;
    public static short sFld=-18286;
    public static short sFld1=-20758;
    public int iFld=131;
    public volatile long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=32033, i5=-232, i6=-2, i7=-52257, i8=6080, i9=45276, i10=3, iArr[]=new int[N];
        float f=-82.981F;
        boolean b=false;

        FuzzerUtils.init(iArr, -33045);

        for (i4 = 17; i4 < 310; i4++) {
            switch ((i4 % 3) + 48) {
            case 48:
                for (i6 = 1; i6 < 6; i6++) {
                    Test.dFld = i6;
                    i8 = 1;
                    while (++i8 < 2) {
                        i5 += (i8 * i6);
                        try {
                            i7 = (i5 % i7);
                            iArr[i6 + 1] = (-45510 / iArr[i4]);
                            i5 = (-126357689 % i5);
                        } catch (ArithmeticException a_e) {}
                    }
                    i5 += (int)3294074224667797432L;
                    for (i9 = 1; i9 < 2; ++i9) {
                        Test.dFld += Test.instanceCount;
                        i5 -= Test.sFld;
                        f = i5;
                        iArr[i9] *= 5063;
                        iArr[i9 + 1] -= Test.sFld1;
                    }
                    f += (i6 + i9);
                }
                break;
            case 49:
                if (b) continue;
                break;
            case 50:
                if (true) continue;
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, int i3, short s) {

        int i11=-118, i12=-28733, i13=-1, i14=4, i15=1;
        byte by=103;
        long l=-128L;
        boolean b1=true;

        i3 = (int)(((i3 = (int)Test.instanceCount) + i3) * iMeth());
        i11 = 1;
        while (++i11 < 123) {
            Test.sFld1 = (short)i2;
            for (i12 = i11; i12 < 13; ++i12) {
                i13 -= i2;
                for (i14 = 1; i14 < 1; i14++) {
                    i13 -= i14;
                    i15 = (int)Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    switch (i14 % 1) {
                    case 0:
                        i15 >>>= 38090;
                    }
                    i2 = (int)Test.instanceCount;
                    i2 = i11;
                    by >>= (byte)l;
                    if (b1) break;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + s + i11 + i12 + i13 + i14 + i15 + by + l + (b1 ? 1 : 0);
    }

    public static void vMeth(int i1) {

        int i16=50, i17=-4, i18=12, i19=-18093;
        float f1=0.171F;
        double dArr[][]=new double[N][N];
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 119.4085);
        FuzzerUtils.init(sArr, (short)23689);
        FuzzerUtils.init(lArr, 1397382538L);

        vMeth1(i1, i1, Test.sFld1);
        for (i16 = 162; 8 < i16; --i16) {
            Test.dFld = 1;
            i1 += i16;
            Test.instanceCount /= (Test.instanceCount | 1);
            i1 += (i16 * i16);
            i1 += i16;
            f1 += f1;
        }
        dArr[(70 >>> 1) % N][(i16 >>> 1) % N] -= Test.dFld;
        i17 -= 52;
        for (i18 = 6; i18 < 210; ++i18) {
            i19 *= i19;
            if (false) break;
            sArr[i18][i18 - 1] -= (short)Test.dFld;
            lArr[i18] = i17;
        }
        vMeth_check_sum += i1 + i16 + i17 + Float.floatToIntBits(f1) + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i20=6, i21=27, i22=-245, i23=-153, i24=-246, i25=71, i26=-6958, iArr1[]=new int[N];
        double d=-9.53581, d1=68.121313;
        float f2=80.565F;
        long l1=-14L, l2=-2L;

        FuzzerUtils.init(iArr1, 46728);

        i = 1;
        do {
            vMeth(12);
            i20 = 1;
            do {
                iFld = i20;
                iArr1[i20 - 1] >>= i;
                i21 = 1;
                do {
                    Test.instanceCount += (((i21 * Test.instanceCount) + i) - i);
                } while (++i21 < 1);
                iFld = iFld;
            } while (++i20 < 66);
        } while (++i < 382);
        iFld += i;
        for (d = 11; d < 237; d += 2) {
            i22 += (int)(((d * i) + i21) - f2);
            Test.instanceCount -= i22;
        }
        for (i23 = 11; 340 > i23; i23++) {
            lArrFld[i23] -= iFld;
            lArrFld[i23 + 1] -= iFld;
            i22 += (i23 * i23);
            iFld = (int)f2;
            Test.instanceCount *= (long)f2;
            iFld *= i21;
            iArr1[i23 + 1] <<= (int)Test.instanceCount;
            i22 += (((i23 * f2) + i20) - l1);
        }
        if (false) {
            for (d1 = 8; d1 < 158; d1++) {
                if (true) continue;
                for (l2 = 5; 167 > l2; l2 += 2) {
                    switch ((int)(((d1 % 4) * 5) + 50)) {
                    case 64:
                        switch ((((-55027 >>> 1) % 6) * 5) + 97) {
                        case 120:
                        case 100:
                            iFld -= (int)1.102921;
                        case 121:
                            Test.dFld += i22;
                            i26 >>= -454;
                            break;
                        case 117:
                            Test.instanceCount = i25;
                            break;
                        case 123:
                            i25 -= Test.sFld1;
                            break;
                        case 110:
                            dArrFld[(63 >>> 1) % N] -= -9L;
                            break;
                        default:
                            iFld = 62619;
                        }
                    case 56:
                        Test.dFld -= d;
                        break;
                    case 69:
                    case 52:
                        Test.sFld += (short)l2;
                        break;
                    }
                }
            }
        } else {
            i26 ^= 13;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
