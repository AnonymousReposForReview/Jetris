package tests.javafuzzer3020;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-26L;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, -157L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        int i7=31114, i8=60551, i9=8, i10=-13, i11=-73, i12=34257, i13=219, iArr1[]=new int[N];
        byte by=-91;
        double d1=0.34902;
        float f2=-1.909F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5872516316222008355L);
        FuzzerUtils.init(iArr1, 10);

        i6 = i6;
        lArr[(i6 >>> 1) % N] = Test.instanceCount;
        switch (((-1 >>> 1) % 1) + 46) {
        case 46:
            for (i7 = 10; i7 < 286; i7++) {
                i8 = i8;
                iArr1[i7 - 1] += i9;
                Test.instanceCount += (-44192 + (i7 * i7));
                by >>= (byte)-17906L;
                i10 = 1;
                while ((i10 += 2) < 6) {
                    i9 += i7;
                    for (i11 = 1; i11 < 2; ++i11) {
                        Test.instanceCount = -2772083602L;
                        i8 = 6;
                        i9 = (int)18.185F;
                        try {
                            i12 = (i9 / i9);
                            i6 = (29062 / i10);
                            i13 = (967171671 / i9);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
            break;
        default:
            d1 *= f2;
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + by + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, double d) {

        int i2=17268, i3=23, i4=10, i5=-2, i14=237, i15=65075, i16=-61, i17=-114, iArr[]=new int[N];
        float f1=-1.327F;
        boolean b=false;
        short s=20430;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(dArr, -2.32207);

        for (i2 = 1; i2 < 168; i2++) {
            for (i4 = 1; i4 < 9; ++i4) {
                iArr[i4 - 1] += (int)(-((11003L * (++iArr[i2 - 1])) - (Test.instanceCount - i3)));
                d -= ((Test.instanceCount--) - ((-(i5 += i3)) + (i3 - 36012)));
                dArr[i2][i4] += (i2 * (f1 - (i1--)));
            }
            i5 /= (int)(((long)(Math.sqrt(d) - ((d - i1) + (i5 - i1)))) | 1);
            vMeth1(i1);
            f1 -= i5;
            for (i14 = 1; i14 < 9; i14++) {
                b = b;
                for (i16 = 1; i16 < 2; ++i16) {
                    switch (((i4 >>> 1) % 9) + 50) {
                    case 50:
                        i5 -= (int)f1;
                        d = -6;
                        Test.bArrFld[i2 - 1][i2 + 1] = b;
                        break;
                    case 51:
                        s -= (short)i4;
                    case 52:
                        i15 = i4;
                        break;
                    case 53:
                        iArr[i2 + 1] = (int)113.193F;
                        break;
                    case 54:
                        i1 = (int)48.28076;
                    case 55:
                        i3 = i5;
                        break;
                    case 56:
                        i17 -= i16;
                        break;
                    case 57:
                        i17 += i16;
                        break;
                    case 58:
                        Test.lArrFld[i16] = 112;
                        break;
                    default:
                        i1 += i16;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + i14 + i15 +
            (b ? 1 : 0) + i16 + i17 + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(float f, int i) {

        double d2=119.48983;
        short s1=9503;
        int i18=55907, i19=215, i20=13, i21=-52407, i22=133, i23=41704, i24=-64706, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 4);

        vMeth(i, d2);
        i = i;
        i *= s1;
        iArr2[(i >>> 1) % N] = i;
        i += i;
        i %= (int)(i | 1);
        for (i18 = 1; i18 < 179; i18++) {
            s1 = (short)i19;
            Test.instanceCount *= -6L;
        }
        i20 = 1;
        do {
            for (i21 = 1; i21 < 8; i21++) {
                for (i23 = 2; i23 > i21; --i23) {
                    i24 &= i18;
                    i19 += i23;
                    iArr2[i20] = i24;
                }
            }
        } while (++i20 < 204);
        long meth_res = Float.floatToIntBits(f) + i + Double.doubleToLongBits(d2) + s1 + i18 + i19 + i20 + i21 + i22 +
            i23 + i24 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f3=43.355F;
        int i25=23600, i26=-46481, i27=-10, i28=-7, i29=7, i30=-72, i31=-23812, i32=-36037, i33=4345;
        double d3=0.18081, d4=-2.55262;
        long l=-13L;
        boolean b1=true;
        short s2=-415;

        try {
            lMeth(f3, i25);
            for (i26 = 9; i26 < (201 + 400); ++i26) {
                if (b1) {
                    for (i28 = i26; i28 < (63 + 400); ++i28) {
                        i29 = (int)d3;
                    }
                } else if (false) {
                    i27 *= 150;
                    i30 = 1;
                    do {
                        for (l = 1; l < (1 + 400); l++) {
                            Test.instanceCount >>= i25;
                        }
                        if (b1) break;
                        for (d4 = 1; d4 > (1 - 400); --d4) {
                            long l1=1318538851L;
                            byte by1=-110;
                            d3 += d3;
                            i29 -= i31;
                            switch ((int)((d4 % 3) + 118)) {
                            case 118:
                                switch ((int)(((d4 % 1) * 5) + 54)) {
                                case 56:
                                    i25 += i27;
                                    switch ((i30 % 7) + 30) {
                                    case 30:
                                        i25 += (int)Test.instanceCount;
                                        break;
                                    case 31:
                                        f3 += (float)(((d4 * i30) + l1) - l);
                                        Test.instanceCount = 25814;
                                        i32 += (int)f3;
                                        break;
                                    case 32:
                                    case 33:
                                        Test.instanceCount += (long)(d4 * d4);
                                        i25 -= i27;
                                        l1 += (-30 + (d4 * d4));
                                        break;
                                    case 34:
                                        s2 -= (short)f3;
                                        try {
                                            i29 = (55589 % iArrFld[i26 - 1]);
                                            i32 = (-51 % i25);
                                            i29 = (i28 / i28);
                                        } catch (ArithmeticException a_e) {}
                                        Test.lArrFld[i30 + 1] -= i32;
                                        b1 = b1;
                                    case 35:
                                        Test.instanceCount += (long)d3;
                                        break;
                                    case 36:
                                        i32 += (int)d4;
                                    }
                                    break;
                                default:
                                    by1 += (byte)i33;
                                }
                                break;
                            case 119:
                                d3 += -4;
                                break;
                            case 120:
                                i32 *= i27;
                                break;
                            default:
                                i31 += (int)Test.instanceCount;
                            }
                        }
                    } while (++i30 < 63);
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.lArrFld[(26 >>> 1) % N] = l;
        }
        finally {
            i27 ^= i31;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
