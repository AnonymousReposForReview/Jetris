package tests.javafuzzer2854;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:27:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-56726L;
    public float fFld=33.166F;
    public static int iFld=-198;
    public static byte byFld=82;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9, int i10) {

        int i11=74, i12=30, i13=1, i14=-13, i15=-4, i16=-253, i17=-9, i18=-98, i19=5, iArr1[]=new int[N];
        float f=104.152F, f1=1.936F, fArr[]=new float[N];
        byte by=-84;
        short s=-17662;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.810F);
        FuzzerUtils.init(iArr1, -212);
        FuzzerUtils.init(lArr, -44145L);

        fArr[(i9 >>> 1) % N] -= Test.instanceCount;
        for (i11 = 20; i11 < 327; i11++) {
            for (f = 1; f < 5; f++) {
                i10 += (int)(f * f);
                i8 = i13;
                for (i14 = 1; i14 < 2; ++i14) {
                    iArr1[i14 - 1] = i15;
                    lArr[i11] = (long)1.43928;
                    i16 = (int)f;
                    i15 += i17;
                }
                for (i18 = 1; i18 < 2; i18++) {
                    f1 += (((i18 * i17) + Test.instanceCount) - i16);
                    by += (byte)(i18 ^ s);
                }
                iArr1[(-44973 >>> 1) % N] -= i9;
                i8 += (int)(f * f);
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + i18 +
            i19 + Float.floatToIntBits(f1) + by + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i4=-148, i5=29240, i6=3, i7=57, i20=-3, i21=-45, i22=379, i23=-7895, i24=-34423, i25=-2, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -3);

        for (i4 = 3; i4 < 275; i4++) {
            for (i6 = 1; i6 < 6; i6++) {
                vMeth2(i6, -50, -3);
                try {
                    i5 = (i5 % 1029795925);
                    iArr2[i6 + 1] = (i5 / 1282545390);
                    i5 = (-187 / i7);
                } catch (ArithmeticException a_e) {}
            }
        }
        for (i20 = 5; 365 > i20; ++i20) {
            i5 *= i4;
            Test.lArrFld[i20][i20] >>>= i20;
            Test.iFld >>>= i7;
            for (i22 = 5; i22 > 1; --i22) {
                Test.lArrFld[i22 - 1][i20 - 1] = i6;
            }
            Test.iFld = 11;
        }
        iArr2[(i5 >>> 1) % N] |= i21;
        for (i24 = 14; 356 > i24; i24++) {
            Test.iFld += i7;
            i21 += (-10 + (i24 * i24));
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i20 + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l, long l1, int i3) {

        int i26=66, i27=-45, i28=58939, i29=85, i30=-174, iArr[][]=new int[N][N];
        long l2=2835876959L;
        float f2=-2.721F;

        FuzzerUtils.init(iArr, 215);

        iArr[(i3 >>> 1) % N] = (iArr[(i3 >>> 1) % N] = (iArr[(i3 >>> 1) % N] = iArr[(i3 >>> 1) % N]));
        vMeth1();
        Test.iFld ^= -60381;
        i26 = 1;
        while (++i26 < 356) {
            short s1=-11661;
            s1 = (short)i3;
            Test.iFld += i26;
            l2 -= Test.iFld;
            Test.iFld = 31248;
            for (i27 = 1; i27 < 5; ++i27) {
                for (i29 = 2; i29 > 1; --i29) {
                    l1 = l2;
                    iArr[i27 - 1][i29 - 1] >>= i3;
                    iArr[i29 + 1][i26] = (int)f2;
                    i30 += (((i29 * i28) + i27) - i27);
                    l >>= i28;
                }
            }
        }
        vMeth_check_sum += l + l1 + i3 + i26 + l2 + i27 + i28 + i29 + i30 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-24, i1=-6, i2=39, i31=-8, i32=-6, i33=-4, i34=25035, i35=42754, i36=2, i37=3, i38=-51541, iArr3[]=new
            int[N];
        boolean b=false;
        short s2=-8073, sArr[]=new short[N];
        double d=89.104507;

        FuzzerUtils.init(iArr3, 9);
        FuzzerUtils.init(sArr, (short)8400);

        fFld -= i;
        for (i1 = 146; i1 > 6; i1 -= 3) {
            vMeth(Test.instanceCount, Test.instanceCount, Test.iFld);
            switch (((Test.iFld >>> 1) % 10) + 102) {
            case 102:
                if (false) {
                    switch (((i2 >>> 1) % 2) + 13) {
                    case 13:
                        Test.lArrFld[i1 - 1][i1 - 1] = i;
                        Test.instanceCount = i2;
                        i2 = i31;
                        break;
                    case 14:
                        for (i32 = 9; i32 < 181; i32++) {
                            b = b;
                            for (i34 = i1; i34 < 4; i34 += 3) {
                                iArr3[i34] *= s2;
                                sArr = FuzzerUtils.short1array(N, (short)-1876);
                                iArr3[i1] -= (int)Test.instanceCount;
                            }
                            i35 <<= Test.byFld;
                            i2 = i2;
                            iArr3[i1 + 1] = i33;
                            Test.instanceCount = i1;
                            d = 1;
                            while (++d < 4) {
                                i31 -= -8;
                                i33 += (int)(((d * fFld) + i32) - i34);
                                fFld -= i34;
                            }
                            fFld += i32;
                            Test.instanceCount += (i32 | i34);
                            switch ((i32 % 2) + 88) {
                            case 88:
                                for (i36 = i32; i36 < 4; i36++) {
                                    fFld = i34;
                                    Test.instanceCount = i34;
                                    i2 = (int)fFld;
                                }
                                break;
                            case 89:
                                i = (int)Test.instanceCount;
                                break;
                            }
                        }
                        break;
                    default:
                        fFld += fFld;
                    }
                } else if (b) {
                    Test.instanceCount = Test.byFld;
                } else if (b) {
                    Test.instanceCount = Test.instanceCount;
                } else {
                    i38 -= (int)d;
                }
            case 103:
            case 104:
            case 105:
                Test.instanceCount += i1;
                break;
            case 106:
            case 107:
                s2 = (short)Test.instanceCount;
                break;
            case 108:
            case 109:
                Test.instanceCount &= i38;
            case 110:
                Test.instanceCount = i2;
                break;
            case 111:
                i35 += (i1 ^ (long)fFld);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
