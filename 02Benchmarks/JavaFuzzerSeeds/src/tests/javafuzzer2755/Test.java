package tests.javafuzzer2755;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:49:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3L;
    public static double dFld=2.10601;
    public static boolean bFld=true;
    public static float fFld=0.122F;
    public static volatile short sFld=12743;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth1() {

        float f1=-2.195F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -633410686203571269L);

        f1 = (++lArr[(24 >>> 1) % N]);
        vMeth1_check_sum += Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth2(double d1) {

        int i9=85, i10=-60167, i11=-11, i12=-231, i13=-168, i14=26, i15=58816;
        double d2=2.76446;
        long l=-2044883024794808600L;

        i9 = i9;
        vMeth1();
        i10 = 1;
        do {
            iArrFld[(i9 >>> 1) % N] <<= (int)Test.instanceCount;
        } while (++i10 < 218);
        Test.fFld -= (float)-34.48999;
        if (true) {
            for (d2 = 256; d2 > 6; d2--) {
                i9 *= i11;
                i11 += (int)d2;
                for (i12 = 7; i12 > 1; --i12) {
                    i9 += (-28265 + (i12 * i12));
                    l += (((i12 * l) + i11) - i11);
                    for (i14 = 2; i14 > 1; i14--) {
                        i15 = i14;
                        iArrFld[i12 + 1] = i12;
                    }
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + l
            + i14 + i15;
    }

    public void vMeth(int i4, int i5) {

        double d=0.8656;
        int i6=28678, i7=3436, i8=2, i16=2, i17=-39882, iArr[]=new int[N];
        float f2=-1.934F;
        short s=26664;

        FuzzerUtils.init(iArr, 8);

        for (d = 6; d < 159; d++) {
            vMeth1();
            Test.instanceCount += (long)(((d * i5) + Test.instanceCount) - f2);
            vMeth1();
        }
        s += (short)(--f2);
        for (i7 = 5; i7 < 310; ++i7) {
            Test.instanceCount = (i8++);
            i4 += (int)(((-96 - Long.reverseBytes(Test.instanceCount)) + (-61 + (Test.dFld - Test.dFld))) *
                (-Math.min(i6, 157)));
            Test.instanceCount -= (iArr[i7 + 1]++);
            iArr = iArr;
            vMeth2(0.70888);
            for (i16 = i7; 5 > i16; ++i16) {
                i8 >>>= i17;
                i4 >>= 17342;
                i17 = (int)Test.dFld;
            }
        }
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f2) + s + i7 + i8 + i16 +
            i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-24535, i1=-105, i2=80, i3=-151, i18=-56, i19=188, i20=-8, i21=198;
        byte by=112;
        float f=-1.789F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-5930);

        Test.dFld += (sArr[(i >>> 1) % N] * ((by - i) - (Test.instanceCount * i)));
        i1 = 1;
        while (++i1 < 332) {
            i += (((i1 * i) + i) - f);
            if (Test.bFld) break;
            for (i2 = 76; 2 < i2; i2 -= 3) {
                i = i;
                vMeth(i3, i1);
                i = (int)Test.instanceCount;
                i3 = i3;
                i3 = (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i += (i2 + i2);
                i18 = 1;
                do {
                    i3 = (int)Test.instanceCount;
                    i3 += (((i18 * i) + i1) - i);
                    Test.instanceCount += (((i18 * f) + i1) - i1);
                    i >>= 12;
                    i3 >>>= i2;
                    f = Test.sFld;
                    iArrFld[i2 - 1] -= (int)-197L;
                } while (++i18 < 4);
                Test.instanceCount -= i2;
                i19 = (int)Test.instanceCount;
            }
            Test.instanceCount = Test.instanceCount;
            for (i20 = i1; 76 > i20; i20++) {
                Test.dFld = Test.instanceCount;
                iArrFld[i20 - 1] -= (int)Test.fFld;
                i21 ^= -3;
                i3 >>= (int)Test.instanceCount;
                i3 += (((i20 * by) + Test.instanceCount) - Test.instanceCount);
                if (Test.bFld) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest vMeth2
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
