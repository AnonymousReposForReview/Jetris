package tests.javafuzzer2962;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:52:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=231L;
    public static volatile short sFld=-5171;
    public static double dFld=-122.70214;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -13);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i12, long l2) {

        int i13=-12, i14=-30595, i15=144, i16=8, i17=-9, i18=128, i19=57213;
        byte by1=-51;
        boolean b=false;

        i13 = 1;
        do {
            Test.iArrFld1[i13 + 1] |= i13;
            Test.iArrFld1[i13 - 1] += (int)Test.instanceCount;
            i12 = 56049;
            l1 -= by1;
            i12 = (int)Test.instanceCount;
            for (i14 = 1; i14 < 9; ++i14) {
                if (true) break;
                i12 <<= i12;
            }
            for (i16 = 1; i16 < 9; i16 += 3) {
                if (false) break;
                for (i18 = i13; i18 < 5; ++i18) {
                    i12 += 6001;
                    b = b;
                    i12 -= i19;
                }
            }
        } while (++i13 < 187);
        vMeth_check_sum += l1 + i12 + l2 + i13 + by1 + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0);
    }

    public static int iMeth(long l, int i10) {

        float f2=19.242F;
        int i11=1, i20=-237, i21=46245;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -23118009L);

        f2 = (l *= (-Math.min(14L, l)));
        i11 = 1;
        do {
            vMeth(l, 4, l);
            Test.iArrFld1[i11 - 1] += i11;
            for (i20 = 1; i20 < 9; i20++) {
                f2 += Test.instanceCount;
            }
            i21 *= i21;
            i10 &= i11;
            i10 >>= (int)-194L;
            i21 = Test.sFld;
            Test.iArrFld1 = FuzzerUtils.int1array(N, (int)-6);
            Test.instanceCount = i21;
            Test.iArrFld1[i11] += i11;
        } while (++i11 < 179);
        lArr[(-2 >>> 1) % N] = i20;
        f2 = Test.sFld;
        long meth_res = l + i10 + Float.floatToIntBits(f2) + i11 + i20 + i21 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i2, int i3, int i4) {

        int i5=-4024, i6=-214, i7=-103, i8=1, i9=-77;
        float f1=95.610F;
        short s=15263, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)20053);

        Test.instanceCount += (Test.iArrFld1[(i3 >>> 1) % N]--);
        for (i5 = 8; 242 > i5; i5++) {
            for (f1 = i5; f1 < 7; ++f1) {
                byte by=110;
                i6 += (int)((long)f1 ^ i2);
                i3 += (int)(lArrFld[i5 + 1] *= (-by));
                switch ((int)((f1 % 4) + 32)) {
                case 32:
                    for (i8 = 1; i8 > 1; i8--) {
                        i6 += ((43635 + (++iArrFld[i8 - 1])) - (s * iMeth(Test.instanceCount, i6)));
                    }
                    switch (((i5 % 3) * 5) + 58) {
                    case 62:
                        Test.instanceCount -= i4;
                        Test.dFld *= f1;
                        i9 *= 31637;
                        iArrFld[i5 - 1] *= (int)Test.dFld;
                        break;
                    case 61:
                        sArr[(int)(f1 + 1)] ^= (short)i5;
                        break;
                    case 71:
                        i6 += (int)((long)f1 | Test.instanceCount);
                        break;
                    }
                    break;
                case 33:
                    i6 += (int)(f1 + f1);
                    break;
                case 34:
                    i9 -= i4;
                    break;
                case 35:
                    Test.instanceCount = i6;
                    break;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + s +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-116, i1=-186, i22=6, i23=-48113, i24=11879, i25=-10, i26=-137;
        double d=-2.47315, d1=-1.101312;
        float f=110.895F, f3=-2.63F;
        boolean b1=false;

        for (i = 12; i < 219; ++i) {
            byte by2=76;
            iArrFld[i] ^= (i1--);
            d += -45396L;
            if (b1) {
                Test.instanceCount += i;
            } else if (b1) {
                f += i;
            } else if (b1) {
                if (b1) {
                    i1 ^= (int)lMeth(11, i1, i);
                    f3 += by2;
                    i1 |= (int)Test.instanceCount;
                    Test.sFld += (short)22;
                } else {
                    d += i1;
                    for (d1 = 4; d1 < 121; ++d1) {
                        Test.instanceCount += i;
                        try {
                            i22 = (i22 / -139374329);
                            i22 = (-139 / i22);
                            iArrFld[(int)(d1 - 1)] = (928383533 % i22);
                        } catch (ArithmeticException a_e) {}
                        i22 = i22;
                        Test.sFld *= (short)i22;
                        i1 -= i22;
                        i1 = i1;
                    }
                    Test.instanceCount = Test.instanceCount;
                    iArrFld[i - 1] = (int)Test.dFld;
                }
                Test.dFld = Test.instanceCount;
                lArrFld[i] = Test.sFld;
            }
            i22 += (i ^ Test.instanceCount);
            if (b1) continue;
        }
        for (i23 = 12; i23 < 357; i23++) {
            i22 *= 49539;
            for (i25 = 1; i25 < 73; i25++) {
                if (b1) continue;
                iArrFld[i23 - 1] = (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
