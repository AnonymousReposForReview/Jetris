package tests.javafuzzer723;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:36:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2666325624346409272L;
    public static int iFld=-8;
    public static double dFld=-2.503;
    public byte byFld=77;
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, 7504934046376200274L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6) {

        int i7=-11, i8=12, i9=2, i10=-5363;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -32478L);

        i7 = 1;
        while (++i7 < 306) {
            i8 = 1;
            do {
                short s=-16833;
                i5 += (i8 + i8);
                for (i9 = 1; i9 < 1; ++i9) {
                    float f=13.610F;
                    i6 += i9;
                    Test.iFld -= -104;
                    f += i9;
                    Test.iFld += (int)Test.instanceCount;
                    i5 += (i9 + i6);
                    i6 += (i9 * i9);
                    i5 += i10;
                    Test.dFld += Test.instanceCount;
                }
                Test.instanceCount *= i8;
                lArr[i8] = i7;
                s = (short)Test.instanceCount;
            } while (++i8 < 5);
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i4, long l) {

        int i11=-5, i12=3, i13=-57;
        float f1=-38.843F;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth1(Test.iFld, i4);
        if (b) {
            for (i11 = 9; i11 < 153; i11++) {
                i12 += (int)f1;
                if (b) {
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount += -14;
                    Test.dFld -= i11;
                } else if (b) {
                    i12 += i12;
                    f1 = Test.iFld;
                } else {
                    Test.lArrFld1 = Test.lArrFld1;
                    i13 = 1;
                    while (++i13 < 11) {
                        Test.iFld = i12;
                        bArr[i13] = false;
                        Test.instanceCount += i13;
                    }
                }
            }
        }
        long meth_res = i4 + l + i11 + i12 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i13 + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=41, i2=-10, i3=-52828, i14=-84, i15=169, i16=5, i17=-54, i18=30, i19=224, iArr[]=new int[N];
        byte by=87, byArr[]=new byte[N];
        boolean b1=true;
        float f2=-8.72F;

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(byArr, (byte)-34);

        for (i1 = 3; i1 < 197; ++i1) {
            i3 = iMeth(i3, Test.instanceCount);
            i3 = 45918;
            iArr[i1 + 1] = Test.iFld;
            for (i14 = 1; i14 < 8; i14++) {
                for (i16 = 2; i16 > 1; --i16) {
                    byArr = byArr;
                    Test.dFld = 8;
                }
            }
            for (i18 = 1; i18 < 8; i18++) {
                Test.instanceCount *= Test.instanceCount;
                Test.lArrFld1[i1 + 1] = i17;
                Test.iFld *= by;
                if (b1) break;
                Test.iFld += (int)f2;
                i15 = i14;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i14 + i15 + i16 + i17 + i18 + i19 + by + (b1 ? 1 : 0) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=57, i21=-188, i22=-11, i23=-4, i24=4, i25=230, i26=9, i27=11775, i28=-43860, i29=5, iArr1[][]=new
            int[N][N];
        short s1=-25309;
        boolean b2=true;
        float f3=0.914F;

        FuzzerUtils.init(iArr1, 9);

        Test.iFld = (int)(((Test.iFld - 48886) - (lArrFld[(-28574 >>> 1) % N]++)) - (Test.iFld - (Test.iFld -
            Test.iFld)));
        vMeth(Test.iFld);
        for (i20 = 8; 202 > i20; i20++) {
            i21 += i20;
            Test.iFld += -11;
            Test.lArrFld1[i20] %= (Test.instanceCount | 1);
            Test.iFld += (((i20 * Test.instanceCount) + byFld) - Test.iFld);
            Test.iFld += i20;
            Test.iFld = -16290;
            Test.iFld *= (int)Test.instanceCount;
            i22 = 1;
            while ((i22 += 2) < 129) {
                i23 = 1;
                do {
                    i21 += i23;
                    i21 = (int)Test.instanceCount;
                    Test.dFld -= i22;
                    iArr1 = iArr1;
                    s1 -= (short)i21;
                    b2 = b2;
                } while (++i23 < 3);
            }
        }
        for (i24 = 13; i24 < 289; ++i24) {
            for (i26 = 4; i26 < 91; ++i26) {
                byFld = (byte)i21;
                b2 = b2;
                s1 += (short)i26;
                i21 *= i20;
                for (i28 = 2; i28 > 1; i28--) {
                    Test.instanceCount += i25;
                    i27 *= (int)Test.instanceCount;
                    i21 += (i28 * i28);
                    i29 ^= i27;
                    Test.iFld += (((i28 * i25) + f3) - i26);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
