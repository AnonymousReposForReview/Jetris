package tests.javafuzzer1616;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:11:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-159L;
    public static boolean bFld=true;
    public float fFld=110.932F;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2925398397L);
        FuzzerUtils.init(Test.iArrFld, -9866);
        FuzzerUtils.init(Test.iArrFld1, 14);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d1, int i8, int i9) {

        float f2=0.941F;
        int i10=9, i11=-64951, i12=-54113, i13=49940, i14=36277, i15=5, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 114);

        iArr1[(i9 >>> 1) % N] = (int)Test.instanceCount;
        i9 = (int)d1;
        iArr1 = iArr1;
        f2 += i9;
        for (i10 = 7; i10 < 244; i10++) {
            for (i12 = 7; i12 > 1; --i12) {
                Test.lArrFld[i10 + 1] = i11;
                i8 += (i12 * Test.instanceCount);
                for (i14 = i10; i14 < 2; ++i14) {
                    i15 += (i14 * i14);
                    if (Test.bFld) break;
                    f2 += (i14 + i11);
                    try {
                        i13 = (21053 % i14);
                        i9 = (i9 / i10);
                        i11 = (44921086 / i10);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[(i15 >>> 1) % N] *= i8;
                    i13 = i11;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i8 + i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i14
            + i15 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=40152, i6=-43048, i7=-169, iArr[]=new int[N];
        byte by=65;
        float f1=-75.651F;
        boolean b=false;
        double d2=0.92752;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 236);
        FuzzerUtils.init(sArr, (short)-12643);

        for (i5 = 9; i5 < 269; ++i5) {
            i7 = 1;
            while (++i7 < 6) {
                by = (byte)(Test.instanceCount = (42697 - i5));
                iArr[i5] ^= (i6 *= i7);
                Test.instanceCount += (((i7 * Test.instanceCount) + Test.instanceCount) - f1);
                i6 -= (int)((Test.instanceCount--) + -6408);
                if (!b) continue;
                i6 = -2;
                i6 = (int)(Math.min(Math.max(Test.instanceCount, -1967347103L), Test.instanceCount--) >>>
                    Integer.reverseBytes(i6--));
                i6 = (int)((sArr[i7 + 1] - i5) + ((Test.lArrFld[i7 - 1]--) * iMeth1(d2, i6, -143)));
                Test.iArrFld = Test.iArrFld;
            }
            switch ((((i4 >>> 1) % 4) * 5) + 78) {
            case 82:
                i4 -= i5;
                i6 += i4;
                Test.instanceCount = Test.instanceCount;
            case 98:
                if (i4 != 0) {
                    vMeth_check_sum += i4 + i5 + i6 + i7 + by + Float.floatToIntBits(f1) + (b ? 1 : 0) +
                        Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                    return;
                }
                break;
            case 93:
                i4 += (int)88L;
                break;
            case 96:
                i4 += (i5 | i4);
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + by + Float.floatToIntBits(f1) + (b ? 1 : 0) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(int i, int i1, long l) {

        int i2=-36770, i3=23081, i16=10354, i17=-248, i18=7929, i19=-90;
        float f=36.253F;

        for (i2 = 19; i2 < 331; i2++) {
            i1 -= (int)f;
            vMeth(i2);
            switch ((i2 % 2) + 43) {
            case 43:
                f += -10;
                for (i16 = i2; i16 < 5; ++i16) {
                    for (i18 = 1; i18 < 1; ++i18) {
                        i -= (int)1.28785;
                        i19 += i16;
                        f -= l;
                        l = (long)-1.85419;
                        i19 += (i18 * i18);
                        i19 += (int)l;
                        Test.iArrFld[(-2 >>> 1) % N][i16 + 1] = i18;
                        i += i19;
                    }
                }
            case 44:
                i1 += (int)Test.instanceCount;
                break;
            default:
            }
        }
        long meth_res = i + i1 + l + i2 + i3 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=123.99060, dArr[]=new double[N];
        int i20=-5, i21=-44084, i22=-240, i24=-16, i25=-3831, i26=-32, i27=51336, i28=-33465, i29=1, i30=4311;
        float f3=0.678F, fArr[]=new float[N];
        long l1=119L;

        FuzzerUtils.init(dArr, -11.47464);
        FuzzerUtils.init(fArr, -2.798F);

        d = iMeth(i20, i20, Test.instanceCount);
        for (i21 = 213; i21 > 13; --i21) {
            Test.instanceCount += (((i21 * Test.instanceCount) + Test.instanceCount) - i21);
            i20 = i22;
            i20 >>= -47;
            i22 = i20;
            i22 -= (int)fFld;
            fFld *= i20;
        }
        for (f3 = 177; f3 > 7; --f3) {
            i22 = (int)Test.instanceCount;
            for (i25 = 148; 4 < i25; i25 -= 3) {
                switch ((i25 % 9) + 105) {
                case 105:
                    fFld += (float)d;
                case 106:
                    l1 = 4;
                    while ((l1 -= 2) > 0) {
                        i20 <<= -93;
                        fFld -= i24;
                        i20 = i22;
                    }
                    Test.instanceCount *= l1;
                    for (i27 = 1; i27 < 4; i27++) {
                        Test.instanceCount = i25;
                    }
                    for (i29 = 4; i29 > 1; i29--) {
                        switch ((((i29 >>> 1) % 2) * 5) + 93) {
                        case 96:
                            i24 = i20;
                            dArr[i29 + 1] -= i28;
                            switch ((i25 % 8) + 114) {
                            case 114:
                                Test.instanceCount += (i29 - i28);
                                fFld += 3027;
                                Test.iArrFld1[(int)(f3 - 1)] *= (int)Test.instanceCount;
                                break;
                            case 115:
                                fArr[i25 - 1] += fFld;
                                Test.instanceCount *= i28;
                                break;
                            case 116:
                                i22 += (int)(1359986237L + (i29 * i29));
                            case 117:
                                i20 += (i29 | i28);
                            case 118:
                                i26 -= (int)-24L;
                                break;
                            case 119:
                                Test.instanceCount = i27;
                                break;
                            case 120:
                                if (Test.bFld) continue;
                                break;
                            case 121:
                                i30 -= (int)1.1724;
                            default:
                                i20 -= i24;
                            }
                            break;
                        case 98:
                            i28 += i29;
                            break;
                        }
                    }
                    break;
                case 107:
                    Test.lArrFld[(int)(f3 + 1)] = l1;
                    break;
                case 108:
                    i28 <<= i28;
                    break;
                case 109:
                    i26 <<= i26;
                    break;
                case 110:
                    Test.instanceCount += (i25 * i30);
                    break;
                case 111:
                    fFld -= i22;
                    break;
                case 112:
                    if (true) continue;
                    break;
                case 113:
                    Test.lArrFld[(int)(f3)] += i27;
                    break;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
