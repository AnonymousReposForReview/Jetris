package tests.javafuzzer1220;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:41:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6L;
    public float fFld=16.48F;
    public static volatile short sFld=-24844;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 119);
        FuzzerUtils.init(Test.lArrFld, -3L);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i5, double d1) {

        int i6=-10, i7=17589, i8=11, i9=-1215, i10=-63674;
        boolean b=false;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-12439);

        for (i6 = 19; i6 < 363; i6++) {
            i8 = 1;
            while (++i8 < 5) {
                i5 = i7;
                i9 = 1;
                do {
                    i5 = i8;
                    sArr1[i9] = (short)-2.115594;
                    switch ((i8 % 5) + 119) {
                    case 119:
                        i7 += i8;
                        i5 += (-130 + (i9 * i9));
                        break;
                    case 120:
                        Test.instanceCount <<= i10;
                        i7 -= i7;
                        break;
                    case 121:
                        if (b) break;
                        i10 = (int)Test.instanceCount;
                    case 122:
                        Test.instanceCount -= i9;
                        break;
                    case 123:
                        Test.instanceCount += i6;
                        break;
                    }
                } while (++i9 < 1);
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public float fMeth(int i3, int i4, float f) {

        double d2=75.52929;
        int i11=38166, i12=51, i13=52286;
        byte by1=105;

        bMeth(-11421, d2);
        Test.iArrFld[(48249 >>> 1) % N] = Test.iArrFld[(i3 >>> 1) % N];
        Test.iArrFld[(i3 >>> 1) % N][(-33837 >>> 1) % N] ^= i4;
        for (i11 = 7; i11 < 174; ++i11) {
            i3 <<= i11;
            i3 += (((i11 * i3) + i11) - Test.instanceCount);
            i3 >>= i3;
            i13 = 1;
            do {
                switch (((i11 % 2) * 5) + 100) {
                case 110:
                    i4 *= -3;
                    i3 *= by1;
                    Test.instanceCount += (((i13 * i13) + Test.instanceCount) - f);
                case 104:
                    Test.lArrFld[i11 + 1] = 14;
                    i3 -= i3;
                    d2 += i11;
                }
            } while (++i13 < 9);
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + by1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public int iMeth(int i2) {

        double d=-2.88479;
        int i14=9, i15=55, i16=-6, i17=149;
        byte by2=-48;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -61L);
        FuzzerUtils.init(sArr, (short)17432);

        lArr[(i2 >>> 1) % N] -= (long)d;
        sArr[(i2 >>> 1) % N] = (short)(i2 | (long)(fMeth(i2, -39376, 7.299F) * i2));
        i2 = i2;
        i2 *= i2;
        for (short s : sArr) {
            Test.instanceCount *= (long)d;
            for (i14 = 1; i14 < 4; i14++) {
                s += (short)(i14 * i14);
                by2 += (byte)i14;
            }
            i2 = i15;
            for (i16 = 1; i16 < 4; ++i16) {
                d -= Test.instanceCount;
                fFld *= -5639256035739626618L;
                by2 *= (byte)-54516;
                i15 -= (int)Test.instanceCount;
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i14 + i15 + by2 + i16 + i17 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=35, i1=2, i18=4, i19=46558, i20=59, i21=249, i22=-5, i23=12, i24=17691;
        byte by=52;
        boolean b1=true;
        double d3=-9.86924;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1883037590L);

        for (i = 12; i < 300; i++) {
            by -= (byte)((iMeth(i) - i1) / ((long)(fFld) | 1));
            Test.lArrFld[i - 1] += by;
            if (b1) continue;
            for (i18 = 1; i18 < 87; i18++) {
                for (i20 = 1; i20 < 2; i20 += 2) {
                    i1 *= i20;
                }
                i21 += (i18 * i1);
                i19 += (int)fFld;
                d3 = Test.instanceCount;
                by += (byte)i18;
                for (i22 = 2; i22 > 1; i22 -= 2) {
                    i21 += i22;
                    switch ((((i21 >>> 1) % 1) * 5) + 3) {
                    case 5:
                        i19 -= (int)fFld;
                        switch ((i22 % 9) + 54) {
                        case 54:
                            fFld += (i22 * i22);
                            if (b1) {
                                d3 -= Test.instanceCount;
                                i21 = (int)-7925608728216865171L;
                                i1 += (int)Test.instanceCount;
                            } else {
                                i21 += (i22 * i22);
                                i21 += (((i22 * fFld) + i22) - i23);
                            }
                            break;
                        case 55:
                            Test.iArrFld[i][i18 - 1] -= (int)fFld;
                            switch ((i % 2) + 122) {
                            case 122:
                            case 123:
                                Test.iArrFld[i][i18 - 1] = (int)Test.instanceCount;
                            default:
                                lArr1[i - 1] /= (i23 | 1);
                                i23 = i22;
                                Test.instanceCount |= i22;
                            }
                        case 56:
                            b1 = b1;
                        case 57:
                            Test.instanceCount -= by;
                        case 58:
                            fFld += (72L + (i22 * i22));
                            break;
                        case 59:
                            by = (byte)1;
                            break;
                        case 60:
                            d3 = Test.instanceCount;
                            break;
                        case 61:
                            i21 += (i22 ^ Test.instanceCount);
                            break;
                        case 62:
                            b1 = b1;
                        default:
                            i1 += (((i22 * i24) + Test.sFld) - i23);
                        }
                        break;
                    default:
                        i19 = -36;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
