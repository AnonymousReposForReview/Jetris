package tests.javafuzzer3477;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:05:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2597599760L;
    public int iFld=0;
    public static boolean bFld=false;
    public static float fFld=-29.893F;
    public static double dFld=110.115176;
    public short sFld=5954;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-5105);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth() {

        int i6=140, i7=120, i8=12, i9=-3, i10=-10, i11=-55275, i12=-2;
        short s=-26490;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i6 = i6;
        i6 += (int)Test.instanceCount;
        Test.dFld = i6;
        for (i7 = 297; i7 > 7; i7 -= 3) {
            i6 <<= i7;
            i8 = (int)2656281860L;
            for (i9 = 1; i9 < 16; i9++) {
                i8 += i9;
                i8 *= s;
                for (i11 = 1; i11 < 2; i11++) {
                    bArr[i9 + 1] = Test.bFld;
                    i12 %= (int)((long)(Test.dFld) | 1);
                    i12 += (int)(-24680L + (i11 * i11));
                }
                i12 -= (int)Test.instanceCount;
                i12 >>= 60888;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + s + i11 + i12 + FuzzerUtils.checkSum(bArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth(int i2, int i3) {

        int i4=5038, i5=-30958, i13=-199, i14=12, i15=71, i16=-5, iArr[]=new int[N];
        byte by=-125;

        FuzzerUtils.init(iArr, 178);

        for (i4 = 6; i4 < 159; i4++) {
            double d=0.109257;
            Test.instanceCount ^= iFld;
            d -= (((long)(iFld - Test.fFld) << Integer.reverseBytes(5)) * -65086);
            Test.instanceCount |= byMeth();
            try {
                iFld = (iFld % i5);
                iFld = (234 / iArr[i4 - 1]);
                i2 = (iArr[i4] / iArr[i4 + 1]);
            } catch (ArithmeticException a_e) {}
            for (i13 = 10; i13 > 1; i13--) {
                for (i15 = 1; i15 < 2; i15++) {
                    i2 = by;
                    i2 += (int)Test.instanceCount;
                    sFld = (short)i2;
                    Test.instanceCount += (i15 * Test.instanceCount);
                    iArr[i4 - 1] = i5;
                    Test.instanceCount *= Test.instanceCount;
                    Test.fFld = -58331;
                }
                iArr[i13 - 1] += (int)Test.fFld;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i13 + i14 + i15 + i16 + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        int i1=48500, i17=-7, i18=-31530, i19=-10, i20=28491, i21=13;
        long l=976091264L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -105L);

        i1 = 257;
        while ((i1 -= 3) > 0) {
            if (Test.bFld = Test.bFld) break;
            iMeth(-50333, i);
            Test.instanceCount = 13;
            i17 = 18;
            while (--i17 > 0) {
                iFld = i1;
            }
            for (i18 = 1; i18 < 18; i18++) {
                if (true) break;
                lArr[i1] -= i18;
            }
            for (l = 18; l > i1; l -= 2) {
                i20 += (int)(l * l);
                i19 *= (int)Test.instanceCount;
                i21 = 1;
                while (++i21 < 1) {
                    Test.instanceCount ^= i18;
                    i20 <<= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + i1 + i17 + i18 + i19 + l + i20 + i21 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by1=71;
        float f=2.903F;
        int i22=-64984, i23=-17911, i24=128, i25=53, i26=12560, i27=2, i28=-9, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 8);

        iFld -= (int)((++iFld) + ((iFld * Test.instanceCount) + (iFld - -63067)));
        vMeth(iFld);
        by1 >>>= (byte)Test.instanceCount;
        iFld += iFld;
        iFld += iFld;
        iFld *= iFld;
        iArr1[(iFld >>> 1) % N] %= 9;
        for (f = 17; 290 > f; ++f) {
            Test.sArrFld[(int)(f)] *= (short)i22;
            Test.sArrFld[(int)(f - 1)] ^= (short)i23;
            i23 = (int)Test.instanceCount;
            i23 += (int)(f + i24);
            for (i25 = 1; i25 < 92; i25++) {
                iArr1[(int)(f)] ^= -41594;
                i24 += (int)(33325L + (i25 * i25));
                i24 = (int)Test.dFld;
                i23 <<= i25;
                for (i27 = 1; i27 < 2; ++i27) {
                    iFld %= (int)(i26 | 1);
                    Test.fFld = i23;
                    i23 += i25;
                    iArr1[i27 + 1] = by1;
                    i24 -= (int)Test.instanceCount;
                    i23 = (int)Test.instanceCount;
                    i22 -= (int)Test.fFld;
                    i22 |= (int)Test.instanceCount;
                    Test.instanceCount ^= -70;
                }
                iFld += (int)Test.instanceCount;
                i26 += (int)(-2893017679L + (i25 * i25));
            }
            i26 += (int)(f * f);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
