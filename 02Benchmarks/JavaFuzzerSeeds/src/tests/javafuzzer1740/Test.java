package tests.javafuzzer1740;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:44:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1840685107L;
    public static double dFld=2.72163;
    public int iFld=84;
    public static int iFld1=-7;
    public volatile int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 55758);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(boolean b, float f1) {

        int i9=-63513;

        f1 = -27;
        Test.iArrFld1[(i9 >>> 1) % N] = Test.iArrFld1[(i9 >>> 1) % N];
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f1) + i9;
    }

    public static long lMeth(int i5, int i6) {

        float f=-18.775F;
        int i7=53065, i8=-41, i10=11, i11=27882, iArr[]=new int[N];
        boolean b1=false;
        short s=26102;
        byte by=-28;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(lArr, -2642353179L);

        i6 <<= (int)((f = (i5 | Test.instanceCount)) * (++i5));
        for (i7 = 13; i7 < 302; i7++) {
            iArr[i7] >>= (int)((i7 * (i7 + f)) - ((--i8) + i6));
            f += (++i5);
            vMeth(b1, f);
            i6 >>= i5;
            for (i10 = 1; i10 < 6; i10 += 3) {
                i5 += (int)Test.dFld;
                f -= i8;
                s >>= (short)239;
                by += (byte)(((i10 * Test.instanceCount) + i6) - i11);
                switch (((i10 % 4) * 5) + 30) {
                case 50:
                case 31:
                    lArr[i10 - 1] *= i6;
                    if (false) continue;
                    Test.iArrFld1[i10][i10 - 1] &= i6;
                    break;
                case 33:
                    i5 += (i10 + i6);
                    break;
                case 47:
                    i6 *= (int)f;
                }
            }
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b1 ? 1 : 0) + i10 + i11 + s + by +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i3=3, i4=3765, i12=-3, i13=156;
        double d1=-2.63811;
        byte by1=-37;
        float f2=-49.214F;
        boolean b2=true;

        Test.instanceCount -= (long)2.93F;
        for (i3 = 5; i3 < 208; ++i3) {
            i1 -= (int)(-(Test.instanceCount++));
            Test.instanceCount *= (long)(d1 += (lMeth(i3, i4) + i3));
            i1 += i3;
            switch (((i3 % 1) * 5) + 76) {
            case 81:
                for (i12 = i3; i12 < 8; i12++) {
                    by1 += (byte)(((i12 * f2) + i1) - i3);
                    b2 = b2;
                    i1 += i12;
                    Test.instanceCount >>= i12;
                    by1 += (byte)(i12 ^ i3);
                    Test.iArrFld1[i12][i3 - 1] = i13;
                }
                break;
            }
            i4 += (i3 ^ (long)f2);
            Test.iArrFld1[i3][i3] -= -14;
        }
        long meth_res = i1 + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i12 + i13 + by1 + Float.floatToIntBits(f2) +
            (b2 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=193, i14=-186, i15=10, i16=146;
        double d=-47.129128, dArr[]=new double[N];
        long l=-5L, lArr1[]=new long[N];
        float f3=2.5F;
        short s1=9988;

        FuzzerUtils.init(dArr, 44.9234);
        FuzzerUtils.init(lArr1, 13L);

        iArrFld[(i >>> 1) % N] *= (int)(d--);
        iMeth(i, i);
        for (i14 = 5; i14 < 154; i14 += 3) {
            sArrFld[i14] *= (short)8635309619866111666L;
            Test.iArrFld1[i14 + 1][i14] = 9722;
            i15 = i;
            dArr[i14 + 1] = 0;
            for (l = 197; l > i14; l -= 3) {
                boolean b3=true;
                int i17=8262;
                i16 += i15;
                Test.dFld *= i16;
                lArr1[(int)(l - 1)] >>>= i15;
                i16 += (int)Test.dFld;
                Test.instanceCount = i16;
                i15 = (int)Test.instanceCount;
                switch (((i >>> 1) % 10) + 82) {
                case 82:
                    iArrFld[(int)(l + 1)] = i16;
                    i = i14;
                    break;
                case 83:
                    i16 -= i;
                    break;
                case 84:
                    Test.instanceCount |= i14;
                    f3 -= -1.750F;
                    break;
                case 85:
                    if (true) {
                        sArrFld[i14] += (short)4;
                    } else if (b3) {
                        s1 += (short)(((l * i14) + i16) - i14);
                        d -= i;
                        iFld *= i;
                    } else {
                        f3 -= i;
                        i16 += i16;
                        Test.instanceCount += (l - l);
                    }
                    dArr[i14] -= f3;
                    Test.instanceCount -= s1;
                    break;
                case 86:
                    Test.instanceCount += (((l * f3) + iFld) - i15);
                    break;
                case 87:
                    lArr1[(int)(l)] += iFld;
                case 88:
                    Test.iFld1 += (int)Test.instanceCount;
                    break;
                case 89:
                    i15 += 7;
                case 90:
                    i17 += (int)(((l * i) + i14) - i17);
                    break;
                case 91:
                    if (b3) continue;
                    break;
                default:
                    f3 = 253;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
