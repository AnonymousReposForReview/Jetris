package tests.javafuzzer127;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:46:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=1;
    public double dFld=-2.63036;
    public static int iFld1=18620;
    public volatile byte byArrFld[][]=new byte[N][N];
    public static double dArrFld[][]=new double[N][N];
    public static volatile int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.107197);
        FuzzerUtils.init(Test.iArrFld, 14);
        FuzzerUtils.init(Test.fArrFld, -80.128F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, int i5, int i6) {

        int i7=-8, i8=38, i9=-9, i10=59771, i11=54, i12=135, i13=30391, i14=-16;
        double d=2.51107;
        long l2=25885L, lArr[]=new long[N];
        boolean b=true;
        short s=-5945;

        FuzzerUtils.init(lArr, -3445814638L);

        for (i7 = 15; i7 < 348; i7++) {
            i9 -= i6;
        }
        for (i10 = 12; i10 < 207; i10++) {
            d /= (i5 | 1);
            i9 = (int)Test.instanceCount;
            Test.fArrFld = Test.fArrFld;
            i8 = (int)f1;
            lArr[i10 - 1] = 16458;
            if (i5 != 0) {
            }
            f1 -= i8;
            for (i12 = 1; i12 < 8; i12 += 3) {
                for (l2 = i12; l2 < 4; l2++) {
                    if (b) continue;
                    i6 += (int)(((l2 * l2) + i6) - l2);
                    s *= (short)i7;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            i12 + i13 + l2 + i14 + (b ? 1 : 0) + s + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l1, float f, int i2) {

        int i3=240, i4=54586, i15=0, i16=-67, i17=2;
        double d1=-2.38614, d2=39.85194;
        byte by=-80;

        i2 *= (int)(Test.dArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N]--);
        for (i3 = 271; i3 > 14; i3 -= 3) {
            Test.iArrFld[i3][i3] /= (int)(lMeth(1.675F, i2, i2) | 1);
            Test.iArrFld[i3][i3 - 1] -= (int)f;
            i2 *= 8;
        }
        for (d1 = 17; d1 < 349; d1++) {
            i15 = (int)Test.instanceCount;
            i15 ^= i3;
            d2 *= by;
            Test.fArrFld[(int)(d1)] = l1;
            f += (float)(((d1 * l1) + Test.instanceCount) - i4);
            try {
                i2 = (i4 / Test.iArrFld[(int)(d1)][(int)(d1 + 1)]);
                Test.iArrFld[(int)(d1 + 1)][(int)(d1 + 1)] = (i3 % i2);
                Test.iArrFld[(int)(d1 - 1)][(int)(d1)] = (-2073905355 / Test.iArrFld[(int)(d1 + 1)][(int)(d1)]);
            } catch (ArithmeticException a_e) {}
            for (i16 = 1; i16 < 5; ++i16) {
                if (i16 != 0) {
                    vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i15
                        + Double.doubleToLongBits(d2) + by + i16 + i17;
                    return;
                }
            }
            i15 *= by;
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i15 +
            Double.doubleToLongBits(d2) + by + i16 + i17;
    }

    public void vMeth(long l, int i, int i1) {

        float f2=-15.329F;
        int i18=-138, i19=100, i20=26738, iArr[]=new int[N], iArr1[]=new int[N];
        double d4=-1.47375;

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(iArr1, -5);

        i = byArrFld[(i1 >>> 1) % N][(i >>> 1) % N];
        iArr = (iArr = (iArr = iArr));
        vMeth1(-196L, f2, i);
        switch (((i >>> 1) % 3) + 107) {
        case 107:
            iArr[(i >>> 1) % N] = -1;
            try {
                iArr[(i1 >>> 1) % N] <<= -11;
                i <<= (int)-3L;
                i18 = 1;
                do {
                    try {
                        i = (i % i1);
                        iArr1[i18] = (i1 % -68);
                        i = (1579901637 % i);
                    } catch (ArithmeticException a_e) {}
                } while (++i18 < 195);
                for (i19 = 15; i19 < 269; i19++) {
                    double d3=-2.116722;
                    i -= (int)-2.738F;
                    i1 += (((i19 * i19) + i) - i19);
                    i20 -= (int)d3;
                    i1 = (int)Test.instanceCount;
                }
            }
            catch (ArithmeticException exc2) {
                f2 = l;
            }
            break;
        case 108:
            lArrFld[(Test.iFld >>> 1) % N] >>>= 103;
            break;
        case 109:
            d4 += Test.instanceCount;
            break;
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f2) + i18 + i19 + i20 + Double.doubleToLongBits(d4) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i21=48168, i22=11, i23=-9, i24=-117, i25=2878, i26=-7, i27=211;
        float f4=-125.276F;
        byte by1=-44;
        short s1=7905;

        switch (((-3664 >>> 1) % 4) + 43) {
        case 43:
            vMeth(Test.instanceCount, Test.iFld, -1701);
            dFld -= Test.iFld;
            Test.instanceCount += Test.iFld;
            for (i21 = 8; 141 > i21; i21 += 2) {
                float f3=0.301F;
                Test.iFld -= (int)f3;
                i23 = 1;
                do {
                    for (i24 = 1; i24 < 1; i24++) {
                        switch ((((i23 >>> 1) % 4) * 5) + 36) {
                        case 37:
                        case 52:
                            f4 += Test.iFld;
                            Test.instanceCount += (179 + (i24 * i24));
                            if (false) {
                                Test.iArrFld[i21 - 1][i24] -= (int)dFld;
                            }
                        case 39:
                            i25 += i23;
                            break;
                        case 45:
                            Test.iFld >>>= i21;
                            by1 += (byte)(((i24 * i24) + s1) - f4);
                            break;
                        }
                        try {
                            Test.iArrFld[i21 + 1][i21 + 1] = (Test.iFld % Test.iArrFld[i24][i23]);
                            Test.iFld = (i24 / i23);
                            i22 = (-222 / Test.iArrFld[i24 + 1][i21 + 1]);
                        } catch (ArithmeticException a_e) {}
                        Test.dArrFld[i24 + 1][i24] = Test.iFld;
                        by1 = (byte)Test.instanceCount;
                        f4 *= f3;
                        Test.iFld += (i24 - f4);
                        Test.instanceCount = Test.iFld;
                        Test.instanceCount = (long)16.14824;
                    }
                    for (i26 = 1; 1 < i26; i26 -= 2) {
                        Test.instanceCount += (((i26 * Test.iFld) + i21) - Test.iFld);
                        try {
                            Test.iFld = (i22 / i26);
                            i22 = (i25 / i26);
                            i27 = (Test.iFld % i24);
                        } catch (ArithmeticException a_e) {}
                        dFld -= 6943;
                        Test.iFld1 -= (int)f4;
                    }
                    Test.iFld1 += (int)dFld;
                    Test.instanceCount += Test.iFld;
                } while (++i23 < 379);
            }
            break;
        case 44:
        case 45:
            Test.instanceCount -= i22;
            break;
        case 46:
            Test.iArrFld[(i24 >>> 1) % N][(31075 >>> 1) % N] = i23;
            break;
        default:
            i27 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
