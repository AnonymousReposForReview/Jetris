package tests.javafuzzer520;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:04:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=52241L;
    public static byte byFld=100;
    public static int iFld=7;
    public float fFld=0.749F;
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public volatile float fArrFld[]=new float[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i) {

        float f=-2.882F;

        Test.byFld |= (byte)((i++) + (-(i - i)));
        i = (int)(((i + i) - f) * i);
        vSmallMeth_check_sum += l + i + Float.floatToIntBits(f);
    }

    public static int iMeth() {

        int i3=-11, i4=-57084, i5=-4812, i6=217, i7=10, i8=12, i9=-11505, i10=63492, i11=-3613;
        double d=90.79347;
        boolean b=true;
        float f2=-1.614F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 62.408F);

        Test.instanceCount *= Math.max((Test.byFld - Test.iFld) + Test.instanceCount, --Test.instanceCount);
        vSmallMeth(Test.instanceCount, Test.iFld);
        for (i3 = 4; 261 > i3; i3++) {
            fArr1[i3 - 1] = 12;
        }
        Test.instanceCount >>= i5;
        for (i6 = 7; i6 < 313; i6++) {
            d = i3;
        }
        i8 = 152;
        do {
            for (i9 = 1; i9 < 10; ++i9) {
                i11 = 1;
                while (++i11 < 2) {
                    Test.byFld >>= (byte)i5;
                    switch (((i9 % 1) * 5) + 43) {
                    case 44:
                        i5 += -91;
                        break;
                    }
                }
                if (b) continue;
                Test.instanceCount += (long)f2;
            }
        } while (--i8 > 0);
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        float f1=2.959F, fArr[][]=new float[N][N];
        boolean b1=true;
        int i13=-219, i14=-17, i15=254, i16=5, iArr[]=new int[N];
        long l1=-2805630777410102303L, lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(fArr, -22.381F);
        FuzzerUtils.init(sArr, (short)-30143);
        FuzzerUtils.init(lArr, 7L);
        FuzzerUtils.init(iArr, 31001);

        f1 = 1;
        while (++f1 < 284) {
            fArr[(int)(f1 + 1)][(int)(f1)] *= ((sArr[(int)(f1 - 1)][(int)(f1)] * -110) + (i2++));
            vSmallMeth((i2++) - iMeth(), Test.iFld);
        }
        b1 = b1;
        lArr[(i2 >>> 1) % N] += i2;
        Test.instanceCount = i2;
        i2 = Test.iFld;
        for (int i12 : iArr) {
            Test.iFld = i2;
        }
        for (i13 = 8; 304 > i13; ++i13) {
            l1 = 1;
            do {
                i2 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 1; i15++) {
                    i14 -= i14;
                    Test.instanceCount += (((i15 * l1) + i15) - i14);
                }
            } while (++l1 < 6);
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i13 + i14 + l1 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i1=11, i17=-30148, i18=33, i19=0, i20=230, i21=-135, i22=41, i23=20887, i24=41041, i25=16905, i26=-52;
        short s=-18570;
        boolean b2=false;
        double d1=-1.112979;

        for (int smallinvoc=0; smallinvoc<531; smallinvoc++) vSmallMeth(i1 + i1, ++i1);
        vMeth(i1);
        Test.byFld = (byte)i1;
        for (i17 = 9; i17 < 194; i17++) {
            switch (((i17 >>> 1) % 3) + 41) {
            case 41:
                for (i19 = 136; i19 > 7; i19 -= 2) {
                    if (false) {
                        i18 += (int)fFld;
                        i18 += i19;
                    }
                    Test.iFld = i18;
                    i20 = i17;
                    i1 -= (int)fFld;
                    Test.instanceCount += (-9 + (i19 * i19));
                    lArrFld = lArrFld;
                    i18 -= i1;
                }
                for (i21 = 5; i21 < 136; i21++) {
                    iArrFld[i21 - 1][i17 - 1] += (int)Test.instanceCount;
                    for (i23 = 1; i23 < 2; i23++) {
                        iArrFld[i17 + 1][i23 - 1] = (int)fFld;
                        fArrFld[i21] -= fFld;
                        iArrFld[i23][i17] += s;
                        if (b2) continue;
                        Test.byFld = (byte)i24;
                        iArrFld[i23][i17 + 1] >>>= 2;
                    }
                    for (i25 = 1; i25 < 2; ++i25) {
                        Test.instanceCount = Test.instanceCount;
                        fFld += (i25 * i25);
                        fFld += i26;
                        d1 = i20;
                        i18 -= i19;
                    }
                }
                break;
            case 42:
                i18 = Test.iFld;
                break;
            case 43:
                fFld = i24;
                break;
            default:
                Test.instanceCount = -10187;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
