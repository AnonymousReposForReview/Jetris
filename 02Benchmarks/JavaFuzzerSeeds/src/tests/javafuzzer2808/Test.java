package tests.javafuzzer2808;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:40:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public byte byFld=12;
    public static double dFld=2.55243;
    public static float fFld=2.455F;
    public static boolean bFld=true;
    public static volatile int iFld=-12;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, -113.978F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i4=-2, i5=25920, i6=1, i7=-103, i8=-118, i9=33746;
        float f=97.81F;
        long l1=-1328838752L;

        Test.iArrFld[(i4 >>> 1) % N] -= i4;
        Test.iArrFld[(-14 >>> 1) % N] = -96;
        i5 = 1;
        do {
            Test.instanceCount += (long)f;
        } while (++i5 < 254);
        for (l1 = 12; l1 < 255; l1++) {
            f = i5;
            i6 = i6;
            i6 <<= i4;
            i6 += i5;
            if (false) {
                for (i7 = 1; 7 > i7; ++i7) {
                    f -= (float)Test.dFld;
                    i9 = 1;
                    do {
                        Test.dFld *= f;
                        i6 += 39032;
                    } while (++i9 < 2);
                }
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + l1 + i6 + i7 + i8 + i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(short s) {

        int i3=45963, i10=36311, i11=-8, i12=-64145, i13=7, i14=-248, i15=12, iArr[]=new int[N];
        byte by=23;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(lArr, 244L);

        iArr[(i3 >>> 1) % N] = iMeth1();
        i3 /= (int)(i3 | 1);
        i3 = (int)Test.instanceCount;
        for (i10 = 3; i10 < 122; ++i10) {
            for (i12 = 1; i12 < 13; ++i12) {
                for (i14 = 1; i14 < 2; i14++) {
                    if (Test.bFld) {
                        lArr[i10 - 1] += i10;
                        i15 >>>= by;
                        Test.instanceCount += (((i14 * Test.fFld) + i11) - Test.instanceCount);
                    }
                    Test.bArrFld[i12 - 1] = true;
                    Test.iArrFld[i10 - 1] += i10;
                    lArr[i10 - 1] = i13;
                    Test.fFld += i11;
                    Test.instanceCount += i3;
                }
            }
        }
        long meth_res = s + i3 + i10 + i11 + i12 + i13 + i14 + i15 + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        short s1=-13604;
        int i16=-4, i17=-3, i18=-6, i19=8393;
        float f1=1.731F;

        Test.instanceCount <<= Math.abs(iMeth(s1));
        Test.iFld = Test.iFld;
        for (i16 = 3; i16 < 387; i16 += 2) {
            l -= (long)-1.77960;
            i17 *= 10;
            Test.fArrFld[i16 - 1] += i16;
            i17 += (((i16 * i16) + i17) - Test.iFld);
            for (f1 = 1; f1 < 8; f1 += 2) {
                i19 = 1;
                do {
                    Test.fFld -= i19;
                    i17 = -6;
                    i17 >>= s1;
                    i17 >>= 48417;
                    if (true) continue;
                    Test.fFld += i17;
                } while (++i19 < 3);
            }
        }
        vMeth_check_sum += l + s1 + i16 + i17 + Float.floatToIntBits(f1) + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-13, i2=11, i20=-65420, i21=-12, i22=9560, i23=-23863;
        byte by1=-69;
        long l2=-10457L;

        i = (int)(i + Test.instanceCount);
        for (i1 = 5; i1 < 234; ++i1) {
            i += (((i1 * i1) + Test.instanceCount) - i);
        }
        byFld = (byte)((--i) + Test.instanceCount);
        Test.dFld = -19078L;
        i2 -= (int)Test.instanceCount;
        vMeth(Test.instanceCount);
        i = (int)Test.dFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)Test.instanceCount;
        i += (int)Test.instanceCount;
        Test.iFld -= by1;
        i2 -= (int)Test.fFld;
        for (i20 = 3; i20 < 314; i20++) {
            l2 = 1;
            while (++l2 < 81) {
                Test.fFld += ((long)l2 ^ (long)Test.instanceCount);
                Test.iArrFld[(int)(l2 - 1)] ^= Test.iFld;
                Test.instanceCount <<= -14744;
                Test.fArrFld[i20] /= 38799;
                for (i22 = 1; 1 > i22; i22 += 3) {
                    i21 += i22;
                    Test.iFld -= (int)Test.instanceCount;
                    i23 += (((i22 * l2) + i22) - i1);
                    Test.iArrFld[i22 - 1] = 7;
                    Test.dFld += Test.fFld;
                    i21 *= i23;
                    Test.iArrFld[i20] = (int)784607464L;
                    Test.fFld -= -1.628F;
                    i2 >>= i21;
                    i2 += (((i22 * Test.fFld) + i1) - i22);
                }
                Test.fFld = i1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
