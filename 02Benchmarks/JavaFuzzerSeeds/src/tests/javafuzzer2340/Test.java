package tests.javafuzzer2340;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:58:49 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=82L;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -249);
        FuzzerUtils.init(Test.byArrFld, (byte)100);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2) {

        int i7=42569, i8=8, i9=-4, i10=-36634, i11=23242;
        float f=8.560F;
        byte by=-12;
        boolean b=false;

        for (i7 = 2; 231 > i7; ++i7) {
            i8 += i7;
            i8 += (int)l1;
            i8 = (int)2323795299L;
            for (i9 = i7; i9 < 7; ++i9) {
                i10 += (((i9 * i10) + i8) - Test.instanceCount);
            }
            Test.instanceCount = i10;
            f *= by;
            i8 -= i10;
            i8 += i7;
        }
        switch ((((i9 >>> 1) % 6) * 5) + 122) {
        case 140:
            i11 = 1;
            while ((i11 += 2) < 142) {
                by += (byte)(i11 * i11);
                Test.instanceCount += i11;
                Test.iArrFld[i11 - 1] = i11;
            }
            break;
        case 141:
            by -= (byte)i11;
        case 143:
            by -= (byte)Test.instanceCount;
            break;
        case 146:
            i8 = (int)l1;
            break;
        case 130:
            l2 += i10;
        case 131:
            b = b;
            break;
        default:
            Test.iArrFld[(i11 >>> 1) % N] = (int)l1;
        }
        vMeth1_check_sum += l1 + l2 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + by + i11 + (b ? 1 : 0);
    }

    public static int iMeth() {

        int i12=-112, i13=41399, i14=47441;
        float f1=0.159F, f2=1.960F;
        long l3=2556989148L;
        boolean b1=false;

        vMeth1(Test.instanceCount, Test.instanceCount);
        i12 = i12;
        f1 += Test.instanceCount;
        for (f2 = 14; f2 < 393; ++f2) {
            i13 += (-126 + (f2 * f2));
            Test.instanceCount = i12;
            Test.instanceCount = i13;
        }
        i14 = 275;
        do {
            l3 += (i14 + l3);
            i12 -= i14;
            i12 += (-30922 + (i14 * i14));
            if (b1) {
                i12 = i12;
                f1 = i12;
                if (false) continue;
            } else if (b1) {
                Test.byArrFld[i14] = (byte)l3;
            } else {
                i13 >>= (int)Test.instanceCount;
            }
        } while ((i14 -= 3) > 0);
        long meth_res = i12 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i13 + i14 + l3 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l) {

        int i3=14, i4=194, i5=-60959, i6=9, i15=-222, i16=-10;
        double d=-1.98922;
        long l4=2654921030L;
        boolean b2=true;

        for (i3 = 7; i3 < 274; i3++) {
            for (i5 = i3; i5 < 6; ++i5) {
                Test.instanceCount -= (long)(((-(i4++)) / ((long)(d) | 1)) + iMeth());
                if (false) break;
                switch ((i5 % 1) + 100) {
                case 100:
                    i4 = (int)l4;
                    i6 >>= i3;
                    i2 *= i4;
                    i2 += (int)-69.230F;
                }
                i4 = 6;
                for (i15 = 1; i15 < 1; i15++) {
                    b2 = b2;
                    i2 ^= i2;
                    i2 -= i4;
                    i6 = (int)-64.14114;
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + l4 + i15 + i16 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-46260, i1=27704, i17=250, i18=-41969, i19=-9, i20=59637, i21=48210, i22=-40, i23=22926, iArr[]=new
            int[N];
        byte by1=-48;
        float f3=1.404F;
        boolean b3=false;
        long l5=-15615L;
        short s=14078;

        FuzzerUtils.init(iArr, 237);

        for (i = 7; i < 372; i += 3) {
            iArr[i] += (int)(Math.min(--i1, -(--i1)) - ((-(--iArr[i])) + Test.instanceCount));
            Test.instanceCount += (i * i);
        }
        vMeth(i17, Test.instanceCount);
        for (i18 = 192; i18 > 5; i18--) {
            switch ((i18 % 9) + 39) {
            case 39:
                i19 <<= i18;
                Test.instanceCount += by1;
                i17 += (i18 | (long)f3);
                break;
            case 40:
                Test.iArrFld[i18 - 1] = (int)Test.instanceCount;
                i19 = i1;
                if (b3) break;
                break;
            case 41:
            case 42:
            case 43:
                i19 -= i1;
                break;
            case 44:
                l5 += l5;
            case 45:
                switch (((i18 % 2) * 5) + 37) {
                case 46:
                    by1 += (byte)i1;
                    break;
                case 43:
                    i17 += (int)(0.748F + (i18 * i18));
                    l5 += (i18 * i17);
                    break;
                }
                for (i20 = 4; i20 < 134; i20++) {
                    for (i22 = 1; i22 < 2; ++i22) {
                        switch (((i21 >>> 1) % 8) + 114) {
                        case 114:
                            switch ((i22 % 1) + 43) {
                            case 43:
                                i1 *= (int)l5;
                                break;
                            }
                            Test.instanceCount &= l5;
                            Test.byArrFld[i18 + 1] = (byte)i;
                            i23 >>= by1;
                            break;
                        case 115:
                        case 116:
                        case 117:
                            i23 += (32184 + (i22 * i22));
                            break;
                        case 118:
                            i19 += (-43529 + (i22 * i22));
                            i17 = i19;
                            break;
                        case 119:
                            i19 -= i;
                            break;
                        case 120:
                            i21 *= -2;
                            break;
                        case 121:
                            i21 += (int)f3;
                        }
                    }
                }
                break;
            case 46:
                i21 += (int)f3;
                break;
            case 47:
                i23 *= s;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
