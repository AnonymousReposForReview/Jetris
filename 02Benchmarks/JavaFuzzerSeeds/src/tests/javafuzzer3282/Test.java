package tests.javafuzzer3282;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:38:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-196L;
    public static boolean bFld=true;
    public static volatile double dFld=-2.35470;
    public static float fFld=0.668F;
    public int iFld=-24;
    public static byte byFld=13;
    public boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=-12, i9=62178, i10=8, i11=-100;
        float f=2.30F;
        byte by=-9;
        long l1=45341L, lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -230L);
        FuzzerUtils.init(bArr, false);

        Test.instanceCount = i7;
        for (int i8 : Test.iArrFld) {
            Test.iArrFld[(i8 >>> 1) % N] = i7;
            Test.iArrFld[(i7 >>> 1) % N] = (int)Test.instanceCount;
            switch ((((-68 >>> 1) % 10) * 5) + 107) {
            case 134:
            case 138:
                for (i9 = 1; i9 < 4; i9++) {
                    i8 += i9;
                }
                lArr[(i10 >>> 1) % N] += i9;
                break;
            case 115:
            case 118:
                for (f = 1; f < 4; f++) {
                    i7 >>= by;
                    Test.instanceCount += (long)f;
                    i8 >>>= i9;
                    i11 += (int)(f + Test.instanceCount);
                    i8 = i10;
                    l1 -= i9;
                }
            case 144:
                i11 *= (int)Test.instanceCount;
                break;
            case 109:
                i7 = i9;
                break;
            case 133:
                bArr[(i7 >>> 1) % N] = Test.bFld;
                break;
            case 117:
                Test.iArrFld[(i9 >>> 1) % N] += i7;
            case 156:
                Test.iArrFld[(i10 >>> 1) % N] = (int)Test.instanceCount;
            case 141:
                try {
                    i8 = (i9 / i8);
                    i11 = (i9 % i9);
                    Test.iArrFld[(i11 >>> 1) % N] = (i11 / 522288712);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                i7 *= i8;
            }
        }
        long meth_res = i7 + i9 + i10 + Float.floatToIntBits(f) + i11 + by + l1 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3) {

        int i4=11, i5=11, i6=-129, i12=2, i13=-7;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.770F);

        for (i4 = 12; i4 < 376; i4++) {
            i3 += (((i4 * i3) + i4) - Test.instanceCount);
        }
        if (Test.bFld) {
            i6 = 1;
            while (++i6 < 133) {
                i5 += (Test.iArrFld[i6 - 1]--);
                lMeth();
                i3 *= i3;
                Test.instanceCount += i3;
            }
            i3 = 14;
            Test.iArrFld[(i6 >>> 1) % N] >>>= i3;
            fArr[(-45374 >>> 1) % N] *= i6;
        }
        for (i12 = 15; i12 < 388; i12++) {
            short s=-7818;
            Test.instanceCount %= -3;
            i3 ^= s;
        }
        i5 <<= i4;
        long meth_res = i3 + i4 + i5 + i6 + i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l) {

        int i15=57191, i16=-106, i17=-1;
        long l2=1L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)47);

        Test.iArrFld[(i2 >>> 1) % N] *= iMeth(i2);
        i15 = 233;
        do {
            for (l2 = 7; l2 > 1; --l2) {
                Test.instanceCount += i15;
                l += i15;
                i17 = 2;
                do {
                    switch (((i17 >>> 1) % 2) + 32) {
                    case 32:
                        byArr[i15] = (byte)i17;
                        Test.iArrFld[i15 + 1] *= (int)1.322F;
                    case 33:
                        Test.dFld *= i2;
                        i16 = i15;
                        break;
                    default:
                        Test.iArrFld = Test.iArrFld;
                        i2 *= i16;
                        i16 ^= (int)l2;
                        Test.iArrFld[i15] = i16;
                    }
                } while (--i17 > 0);
            }
        } while (--i15 > 0);
        vMeth_check_sum += i2 + l + i15 + l2 + i16 + i17 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=30151, i18=-64374, i19=5, i20=-7, i21=-82, i22=-44824;
        byte by1=-40;
        float fArr1[][]=new float[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, -67.910F);
        FuzzerUtils.init(lArr1, 3776717933L);

        for (i = 4; i < 147; i++) {
            bArrFld[i - 1] = false;
        }
        switch (((((-(--i1)) >>> 1) % 3) * 5) + 32) {
        case 47:
        case 43:
            Test.instanceCount = Test.iArrFld[(150 >>> 1) % N];
            vMeth(i, Test.instanceCount);
            break;
        case 38:
            for (i18 = 3; i18 < 177; ++i18) {
                i1 = by1;
                for (i20 = 1; i20 < 144; ++i20) {
                    i1 += by1;
                    Test.fFld = i;
                    i21 += (i20 ^ i18);
                    try {
                        iFld = (iFld % i21);
                        Test.iArrFld[i18 + 1] = (iFld / i1);
                        i21 = (i21 % -39222);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i20 | i20);
                    i22 = 1;
                    do {
                        i21 += (((i22 * i18) + i) - Test.fFld);
                        switch ((i18 % 10) + 113) {
                        case 113:
                            i1 >>= 3686;
                            break;
                        case 114:
                            Test.instanceCount &= i21;
                            iFld = (int)Test.instanceCount;
                            Test.fFld += ((long)i22 ^ (long)iFld);
                            i19 = i21;
                            break;
                        case 115:
                            Test.instanceCount = i18;
                            Test.byFld += (byte)i20;
                            Test.fFld += i22;
                            i21 >>= i1;
                            break;
                        case 116:
                            Test.iArrFld[i18 - 1] += iFld;
                            switch ((((iFld >>> 1) % 2) * 5) + 31) {
                            case 32:
                                Test.fFld = 226;
                                Test.fFld = (float)Test.dFld;
                                Test.iArrFld[i18] = -8;
                                break;
                            case 35:
                                Test.instanceCount += (i22 * i22);
                                break;
                            }
                        case 117:
                            Test.dFld += Test.dFld;
                            break;
                        case 118:
                            Test.fFld = -6;
                            break;
                        case 119:
                            fArr1 = fArr1;
                            break;
                        case 120:
                            Test.iArrFld[i18 - 1] *= iFld;
                        case 121:
                            lArr1[i18 - 1] *= Test.instanceCount;
                            break;
                        case 122:
                            lArr1 = lArrFld;
                            break;
                        default:
                            Test.iArrFld = Test.iArrFld;
                        }
                    } while (++i22 < 2);
                }
            }
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
