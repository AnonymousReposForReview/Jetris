package tests.javafuzzer26;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:17:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=13L;
    public int iFld=2;
    public static short sFld=-30012;
    public static boolean bFld=false;
    public byte byFld=112;
    public static volatile float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -43.847F);
        FuzzerUtils.init(Test.iArrFld, -34263);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s, long l2, long l3) {

        int i1=-66, i3=-2, i4=-239, i5=0, iArr[]=new int[N];
        boolean b=false;
        float f=-2.743F;
        double d=2.44357;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(lArr, -122L);

        iArr[(i1 >>> 1) % N] = -48366;
        for (int i2 : iArr) {
            lArr[(i1 >>> 1) % N] *= -6L;
            i1 -= i2;
            b = b;
            f -= l2;
            i3 = 1;
            while (++i3 < 4) {
                i4 = 1;
                while (++i4 < 1) {
                    i1 += (i4 | i2);
                }
                l3 = i2;
                for (d = 1; d < 1; d += 2) {
                    Test.instanceCount -= (long)f;
                    Test.fArrFld[i3] -= i2;
                    Test.instanceCount -= i2;
                    iArr[i3 + 1] = (int)l2;
                }
            }
        }
        vMeth2_check_sum += s + l2 + l3 + i1 + (b ? 1 : 0) + Float.floatToIntBits(f) + i3 + i4 +
            Double.doubleToLongBits(d) + i5 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l1) {

        int i6=-3362, i7=-46655, i8=22998, i9=13, i10=-29055, iArr1[]=new int[N];
        float f1=1.884F;
        byte by=22;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)11867);
        FuzzerUtils.init(iArr1, 24037);

        vMeth2(Test.sFld, l1, Test.instanceCount);
        for (short s1 : sArr) {
            switch (((i6 >>> 1) % 10) + 63) {
            case 63:
                for (i7 = 1; 4 > i7; ++i7) {
                    iArr1[i7] %= (int)(i6 | 1);
                    i6 -= (int)l1;
                    iArr1[i7] += i7;
                    i6 -= (int)f1;
                    iArr1[i7] -= i6;
                    for (i9 = 1; 2 > i9; ++i9) {
                        i10 += (i9 * i9);
                        l1 = i9;
                        l1 = i7;
                        i10 ^= i9;
                        iArr1[i7] <<= by;
                    }
                }
            case 64:
                Test.instanceCount ^= i8;
                break;
            case 65:
                i8 <<= i10;
                break;
            case 66:
                by -= (byte)i8;
                break;
            case 67:
                i6 -= i7;
                break;
            case 68:
            case 69:
                Test.fArrFld[(i8 >>> 1) % N] -= Test.instanceCount;
                break;
            case 70:
                iArr1[(i6 >>> 1) % N] *= (int)l1;
                break;
            case 71:
                Test.sFld += (short)-125;
                break;
            case 72:
                f1 = i6;
                break;
            }
        }
        vMeth1_check_sum += l1 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + by + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i) {

        int i11=-2, i12=-12, i13=-19221, i14=-1, i15=13, iArr2[][]=new int[N][N];
        double d1=0.58778;

        FuzzerUtils.init(iArr2, 12);

        l = Test.sFld;
        vMeth1(l);
        iArr2[(i >>> 1) % N][(i >>> 1) % N] <<= (int)8374575459882908081L;
        Test.instanceCount -= i;
        i11 = 1;
        do {
            int i16=8;
            for (i12 = 1; i12 < 9; ++i12) {
                d1 = 26572;
                i >>= i;
                if (Test.bFld) continue;
                Test.bFld = Test.bFld;
            }
            for (i14 = 1; i14 < 9; i14++) {
                i15 += i12;
            }
            if (Test.bFld) continue;
            i13 = -44375;
            i16 >>= i14;
        } while (++i11 < 167);
        vMeth_check_sum += l + i + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i17=-35475, i18=8, i19=0, i20=90, i21=-50502, i22=26231, i23=-5, i24=-80, i25=8499, i26=11, iArr3[][]=new
            int[N][N];
        float f2=-122.382F;
        long l5=1L;

        FuzzerUtils.init(iArr3, -1);

        iFld -= (int)(((iFld++) + (iFld | Test.instanceCount)) * iFld);
        vMeth(Test.instanceCount, iFld);
        for (i17 = 285; i17 > 6; i17 -= 3) {
            Test.sFld *= (short)-21242;
        }
        i18 -= -30642;
        Test.instanceCount -= Test.instanceCount;
        Test.fArrFld[(i18 >>> 1) % N] += iFld;
        for (long l4 : lArrFld) {
            Test.fArrFld[(4 >>> 1) % N] += iFld;
            for (i19 = 2; i19 < 63; i19++) {
                i20 += (((i19 * byFld) + f2) - l4);
            }
            Test.iArrFld[(i18 >>> 1) % N] |= -9031;
            byFld *= (byte)1.25490;
            i21 = 1;
            do {
                Test.instanceCount <<= iFld;
                iFld >>= i19;
                iArr3 = FuzzerUtils.int2array(N, (int)73);
                Test.iArrFld[i21] *= i20;
                i20 += (i21 ^ i17);
                i18 = iFld;
            } while (++i21 < 63);
            l4 -= i17;
        }
        for (i22 = 10; i22 < 214; i22++) {
            try {
                Test.iArrFld[i22] = (iFld / -14);
                i18 = (Test.iArrFld[i22 + 1] / 2105597898);
                i18 = (iArr3[i22 - 1][i22] / -156);
            } catch (ArithmeticException a_e) {}
            i18 += (((i22 * Test.instanceCount) + f2) - f2);
            iFld |= i22;
            iArr3[i22 - 1][i22] >>>= (int)Test.instanceCount;
            for (i24 = 2; 123 > i24; i24++) {
                for (l5 = 2; 1 < l5; --l5) {
                    Test.iArrFld[i24 - 1] *= (int)139L;
                    i26 += i18;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
