package tests.javafuzzer1877;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:12:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-164L;
    public static volatile boolean bFld=false;
    public static int iFld=140;
    public static float fFld=1.4F;
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6640825655028005076L);
        FuzzerUtils.init(Test.fArrFld, 0.83F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, int i3, int i4) {

        int i5=74, i6=-21467, i7=-249, i8=-8, iArr2[]=new int[N];
        double d=34.122811, dArr[]=new double[N];
        float f=-95.844F;
        boolean b=true;
        byte by=54;

        FuzzerUtils.init(dArr, -2.119121);
        FuzzerUtils.init(iArr2, 7572);

        for (i5 = 9; i5 < 321; i5++) {
            switch ((i5 % 10) + 47) {
            case 47:
                i4 += i5;
            case 48:
                i3 >>>= i6;
                dArr[i5 - 1] = d;
                f -= -13;
                break;
            case 49:
                Test.instanceCount += (((i5 * Test.instanceCount) + i5) - i2);
                break;
            case 50:
                i6 += (-92 + (i5 * i5));
                break;
            case 51:
                i4 >>>= (int)Test.instanceCount;
                break;
            case 52:
                for (i7 = 1; i7 < 5; ++i7) {
                    Test.lArrFld[i7] = Test.lArrFld[i5 - 1];
                    iArr2[i7] += i4;
                    f += (107 + (i7 * i7));
                    iArr2[i5 + 1] += i6;
                    b = b;
                }
                break;
            case 53:
                Test.fArrFld[i5] = f;
                break;
            case 54:
                d = 3L;
                break;
            case 55:
                if (i6 != 0) {
                    vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
                        i7 + i8 + (b ? 1 : 0) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                break;
            case 56:
                i8 -= (int)Test.instanceCount;
                break;
            default:
                i8 = by;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i7 + i8 +
            (b ? 1 : 0) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i, long l) {

        long l1=-204L;
        int i1=60706, i9=208, iArr1[][]=new int[N][N];
        float f1=-124.238F;

        FuzzerUtils.init(iArr1, 60987);

        i = (--i);
        for (l1 = 2; l1 < 309; l1++) {
            if (i1 != 0) {
                vMeth_check_sum += i + l + l1 + i1 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            iArr1[(int)(l1)][(int)(l1 + 1)] = (--i1);
            vMeth1(i1, i1, i1);
            i9 = 1;
            do {
                i1 <<= i;
                i += i9;
                i1 = (int)f1;
                i = 19257;
                i1 += (12 + (i9 * i9));
                if (Test.bFld) continue;
                Test.instanceCount += i9;
                i += (i9 - l);
                i1 += i;
            } while (++i9 < 5);
        }
        vMeth_check_sum += i + l + l1 + i1 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {


        vMeth(Test.iFld, Test.instanceCount);
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i10=6, i11=27165, i12=-44675, i13=127, i14=7, iArr[]=new int[N];
        byte by1=26;
        double d1=-79.71647;

        FuzzerUtils.init(iArr, 54449);

        iArr[(10 >>> 1) % N] += (int)((lMeth() + -1.95793) - Test.iFld);
        for (i10 = 16; i10 < 396; ++i10) {
            Test.iFld += i11;
            i12 = 66;
            do {
                Test.iFld = (int)Test.instanceCount;
                by1 += (byte)Test.iFld;
                for (i13 = 1; 2 > i13; i13++) {
                    if (Test.bFld) continue;
                    i14 += -2;
                    Test.iFld = Test.iFld;
                    switch (((i12 % 10) * 5) + 42) {
                    case 92:
                    case 61:
                        Test.lArrFld[i13][i12 - 1] <<= i11;
                        break;
                    case 53:
                        iArr[i13 - 1] = (int)d1;
                        Test.lArrFld[i13][i10] -= i12;
                        break;
                    case 52:
                        i11 <<= i12;
                        i14 -= i12;
                        break;
                    case 75:
                        i14 >>= (int)Test.instanceCount;
                        Test.fFld += Test.instanceCount;
                        Test.lArrFld[i12 + 1] = FuzzerUtils.long1array(N, (long)-5L);
                        break;
                    case 66:
                        Test.fFld /= ((long)(Test.fFld) | 1);
                        break;
                    case 45:
                        i11 = 54871;
                        i14 = Test.iFld;
                        i11 &= (int)Test.instanceCount;
                        break;
                    case 60:
                        d1 = i11;
                        Test.instanceCount = -202;
                        break;
                    case 84:
                        Test.instanceCount = Test.instanceCount;
                        Test.lArrFld[i13][i12] = i11;
                    case 65:
                    }
                    by1 += (byte)(((i13 * Test.iFld) + i14) - i12);
                    Test.iFld += Test.iFld;
                }
                i14 -= (int)-2.615F;
            } while ((i12 -= 2) > 0);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
