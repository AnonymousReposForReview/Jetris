package tests.javafuzzer3149;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:46:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static double dFld=67.285;
    public static byte byFld=-9;
    public static volatile float fFld=119.536F;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4L);
        FuzzerUtils.init(Test.sArrFld, (short)-22289);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(int i, float f) {


        i *= (++i);
        Test.dFld -= (i >> (long)(f * i));
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public static long lMeth(int i8, int i9, int i10) {

        int i11=64805, i12=14, i13=121, i14=-111, iArr1[][]=new int[N][N];
        boolean b=false;
        float f3=-92.789F, fArr[]=new float[N];
        double d=-73.105819, d1=-1.22183;

        FuzzerUtils.init(fArr, 12.895F);
        FuzzerUtils.init(iArr1, 122);

        for (i11 = 7; 221 > i11; i11++) {
            i10 = Test.byFld;
            i9 = i8;
            try {
                i8 = (i9 / i9);
                i12 = (i9 / i8);
                i12 = (i9 / i12);
            } catch (ArithmeticException a_e) {}
            Test.lArrFld[i11] *= Test.instanceCount;
            if (b) continue;
            f3 -= i8;
        }
        d = 1;
        while (++d < 181) {
            fArr[(int)(d + 1)] %= (i10 | 1);
            i8 *= i10;
            for (i13 = (int)(d); 9 > i13; ++i13) {
                iArr1[(int)(d - 1)][(int)(d + 1)] *= i12;
                i12 += i13;
                i10 = -59;
                d1 = f3;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d)
            + i13 + i14 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i6) {

        float f1=-37.991F, f2=0.117F;
        int i7=-61, i15=0, i16=28112, iArr[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, 60);

        Test.instanceCount >>= Math.max(--i6, i6);
        i6 -= (int)f1;
        i7 = 126;
        do {
            iArr[i7] = (int)(((f1 * i6) + (i7 - i6)) + ((i6 * f2) % (lMeth(i6, i7, i6) | 1)));
            Test.instanceCount = -3170489093990206861L;
            f1 *= 39030;
            for (i15 = 2; i15 < 36; i15++) {
                int i17=4;
                i16 %= (int)(i6 | 1);
                Test.byFld -= (byte)i15;
                i16 += i15;
                i17 -= i7;
            }
            switch (((i7 % 1) * 5) + 51) {
            case 53:
            default:
                i16 <<= (int)Test.instanceCount;
                Test.dFld += 193;
                b1 = b1;
            }
        } while ((i7 -= 3) > 0);
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + Float.floatToIntBits(f2) + i15 + i16 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i4, int i5) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.110665);

        Test.instanceCount += Test.sArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N];
        dArr[(i4 >>> 1) % N] *= (iMeth(i4) + i5);
        long meth_res = i4 + i5 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=13, i2=146, i3=-4417, i18=64, i19=14729, i20=206, i21=-51560, i22=137, i23=2, i24=0, i25=9, i26=-233,
            iArr2[][]=new int[N][N];
        byte by=-7;
        short s=8501;

        FuzzerUtils.init(iArr2, 21109);

        for (int smallinvoc=0; smallinvoc<377; smallinvoc++) vSmallMeth((int)(((Test.instanceCount * i1) + (46209 -
            (Test.instanceCount * i1))) + ((++Test.instanceCount) - (-(++i1)))), ((-(by - Test.instanceCount)) -
            (--Test.instanceCount)) % ((s * Integer.reverseBytes(i1)) | 1));
        for (i2 = 21; i2 < 385; ++i2) {
            Test.lArrFld[i2 - 1] = (long)dMeth(i1, i3);
            i3 += (i2 - by);
            s += (short)(i2 ^ i3);
        }
        Test.instanceCount += Test.instanceCount;
        Test.fFld = (float)Test.dFld;
        Test.fFld = i1;
        for (i18 = 18; i18 < 372; ++i18) {
            for (i20 = 1; i20 < 71; ++i20) {
                switch (((6 >>> 1) % 1) + 90) {
                case 90:
                    i21 += i20;
                    for (i22 = 1; i22 < 2; i22++) {
                        s += (short)(((i22 * Test.byFld) + i21) - i18);
                        s >>= Test.byFld;
                        Test.fFld = i21;
                        i21 = -7;
                        Test.instanceCount += (7 + (i22 * i22));
                        Test.instanceCount += i22;
                        by = (byte)i2;
                    }
                    break;
                }
            }
            i3 = i18;
            i3 += (i18 * i18);
            i19 += (((i18 * Test.instanceCount) + i20) - i22);
            i3 += (int)Test.fFld;
            iArr2[i18][(i21 >>> 1) % N] = s;
            iArr2[i18 + 1][i18 + 1] *= (int)Test.fFld;
            for (i24 = 71; i24 > i18; i24 -= 2) {
                i26 = 1;
                while (++i26 < 1) {
                    i25 = (int)Test.fFld;
                    Test.instanceCount -= -14L;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
