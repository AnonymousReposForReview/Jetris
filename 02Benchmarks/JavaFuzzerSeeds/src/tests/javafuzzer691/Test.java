package tests.javafuzzer691;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:03:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3527687295L;
    public static int iFld=-3;
    public static double dFld=-115.39888;
    public static long lFld=8L;
    public static byte byFld=-117;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -177);
        FuzzerUtils.init(Test.lArrFld, 3403793551755315847L);
        FuzzerUtils.init(Test.fArrFld, 0.330F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=-11, i7=13, i8=-9587, i9=11, i10=63, i11=33780;
        float f1=119.411F;
        short s=26208;
        boolean b=false;

        Test.iFld += Test.iFld;
        i6 = 1;
        while ((i6 += 2) < 293) {
            if (false) {
                Test.lArrFld[i6 + 1][i6 - 1] += (long)f1;
                for (i7 = 1; i7 < 11; i7++) {
                    Test.dFld -= i8;
                }
                i9 = 1;
                do {
                    for (i10 = 1; i10 < 1; ++i10) {
                        Test.iFld = (int)Test.instanceCount;
                        s >>= (short)Test.instanceCount;
                        Test.iFld += (((i10 * Test.instanceCount) + f1) - s);
                        Test.iFld += (i10 | (long)f1);
                        if (b) {
                            Test.iFld += Test.iFld;
                            if (b) continue;
                        } else if (b) {
                            Test.instanceCount = i6;
                        } else if (b) {
                            f1 += (-1 + (i10 * i10));
                        } else {
                            b = true;
                        }
                    }
                } while (++i9 < 11);
            } else {
                f1 += (i6 + Test.lFld);
                vMeth1_check_sum += i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0);
                return;
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + s + (b ? 1 : 0);
    }

    public static void vMeth() {

        int i5=-10, i12=-151, i13=-15, i14=-168;

        i5 += (int)(Test.iArrFld[(i5 >>> 1) % N] = (int)(Test.instanceCount++));
        vMeth1();
        i12 = 1;
        while (++i12 < 383) {
            i13 = 1;
            do {
                float f2=17.647F;
                Test.fArrFld[i13][i12] = Test.iFld;
                i5 = i5;
                i5 -= (int)f2;
                try {
                    Test.iArrFld[i12 + 1] = (Test.iArrFld[i12 - 1] / Test.iArrFld[i12 - 1]);
                    Test.iFld = (i13 / Test.iFld);
                    Test.iArrFld[i13 + 1] = (29575 / i13);
                } catch (ArithmeticException a_e) {}
                i5 += i13;
                Test.iFld += i12;
            } while (++i13 < 4);
            Test.iFld <<= i5;
            Test.iFld += (i12 * i12);
            i14 = 1;
            do {
                Test.lArrFld[i12 - 1][i14 - 1] = (long)Test.dFld;
                if (Test.iFld != 0) {
                    vMeth_check_sum += i5 + i12 + i13 + i14;
                    return;
                }
            } while (++i14 < 4);
        }
        vMeth_check_sum += i5 + i12 + i13 + i14;
    }

    public static int iMeth(int i4) {

        float f3=1.1018F;
        int i15=79, i16=4, i17=9, i18=12, i19=-193, i20=-2;
        byte by=-115;

        vMeth();
        for (f3 = 2; 209 > f3; f3++) {
            i16 = 8;
            do {
                Test.instanceCount <<= -11L;
                i15 = i4;
                i4 += (i16 ^ Test.lFld);
                Test.lFld = by;
                i4 += (int)Test.lFld;
                Test.fArrFld[i16][i16 - 1] += i16;
                Test.instanceCount = i16;
                Test.iFld += i16;
            } while (--i16 > 0);
            for (i17 = 1; i17 < 8; ++i17) {
                for (i19 = 1; i19 < 2; i19++) {
                    i20 = -12217;
                    i18 -= by;
                }
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f3) + i15 + i16 + by + i17 + i18 + i19 + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-28283, i2=181, i3=-56180, i21=-30407, i22=143, i23=4, i24=-10561;
        float f=96.590F, f4=35.231F;
        boolean b1=false;

        i = (++i);
        for (int i1 : Test.iArrFld) {
            for (i2 = 3; i2 < 63; ++i2) {
                f = i3;
                i3 = iMeth(i2);
                i >>>= i1;
                for (f4 = 1; 2 > f4; ++f4) {
                    Test.instanceCount += (long)(((f4 * i21) + i) - i);
                    i1 = Test.iFld;
                    Test.instanceCount += (long)(f4 + Test.iFld);
                    Test.iArrFld[i2 - 1] -= (int)Test.instanceCount;
                }
                Test.instanceCount = i21;
                Test.lArrFld[i2][i2 + 1] = 78;
                i22 = 1;
                do {
                    i = Test.byFld;
                } while (++i22 < 2);
                if (b1) continue;
            }
            Test.instanceCount = Test.instanceCount;
            Test.dFld *= i22;
            i -= (int)f;
            Test.iFld *= (int)3119556931L;
            i3 = i;
            Test.lArrFld[(i2 >>> 1) % N][(i21 >>> 1) % N] = Test.lFld;
            Test.dFld *= -29613;
            if (b1) break;
        }
        Test.iFld -= i21;
        Test.instanceCount = i3;
        for (i23 = 7; i23 < 196; ++i23) {
            Test.iArrFld[i23 + 1] += 2;
            Test.iArrFld[i23 + 1] = 34894;
            i3 += i21;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
