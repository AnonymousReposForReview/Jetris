package tests.javafuzzer92;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:15:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static double dFld=10.74186;
    public static byte byFld=-56;
    public static int iFld=-175;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
        FuzzerUtils.init(Test.fArrFld, -28.881F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by) {

        long l=-149L, l1=-60392L, lArr[]=new long[N];
        int i4=19535, i5=-2, i6=20603, i7=17691, i8=0;
        float f=-49.612F;
        double d1=2.70030;
        boolean b=true;

        FuzzerUtils.init(lArr, -1501059569541388693L);

        l = -4693;
        l1 = 1;
        while (++l1 < 390) {
            i4 *= (int)f;
            lArr[(int)(l1)] |= i4;
        }
        for (i5 = 16; i5 < 333; ++i5) {
            try {
                Test.iArrFld[i5] = (i4 / -34651);
                Test.iArrFld[i5] = (i4 / 184044919);
                i4 = (i6 / i4);
            } catch (ArithmeticException a_e) {}
            switch (((i5 % 6) * 5) + 42) {
            case 56:
                i6 *= (int)-10L;
                i7 = 1;
                while (++i7 < 5) {
                    i4 *= i5;
                    f += -1950185181257822669L;
                    Test.dFld += i8;
                    i8 *= (int)d1;
                }
                break;
            case 69:
                if (b) continue;
                l -= l1;
                break;
            case 53:
                i4 += i5;
                break;
            case 67:
            case 65:
            case 44:
                i4 |= -201;
                break;
            default:
                l += (((i5 * f) + i4) - i5);
            }
        }
        vMeth_check_sum += by + l + l1 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1)
            + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {


        vMeth(Test.byFld);
        Test.iFld = Test.iFld;
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i2=112, i3=207, i9=-196, i10=-46971, i11=2, i12=-7, i13=55855, i14=193;
        double d=-57.37732;
        float f1=-2.819F;
        boolean b1=true;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -11L);

        for (i2 = 7; i2 < 285; i2++) {
            d *= (-((-16 - iMeth()) ^ Test.iFld));
            Test.iFld += (((i2 * Test.iFld) + Test.instanceCount) - i2);
            for (i9 = 6; i9 > 1; i9 -= 2) {
                Test.instanceCount = -197;
                lArr1[i2 - 1][i9 + 1] = (long)f1;
                Test.iFld = -170;
                try {
                    i3 = (41557 / i9);
                    Test.iFld = (-220 / i2);
                    i10 = (-1245982426 % Test.iArrFld[i2 - 1]);
                } catch (ArithmeticException a_e) {}
                i11 = 1;
                do {
                    Test.iFld += i9;
                } while (++i11 < 3);
                for (i12 = 1; i12 < 3; ++i12) {
                    switch (((i3 >>> 1) % 1) + 15) {
                    case 15:
                        i13 -= (int)Test.instanceCount;
                        Test.instanceCount += i12;
                        i14 += i12;
                    default:
                        if (b1) break;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 +
            i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-51, i1=5, i15=1, i16=247, i18=-55348, i19=-11, i20=-11, i21=7, i22=-4, i23=253;
        float f2=1.73F;

        for (i = 10; i < 251; i++) {
            Test.instanceCount += (i ^ i1);
            Test.iArrFld[i] >>= (int)lMeth();
        }
        Test.instanceCount -= -13L;
        for (i15 = 16; i15 < 371; i15++) {
            Test.instanceCount = (long)Test.dFld;
            i1 -= (int)Test.instanceCount;
            switch (((i15 % 2) * 5) + 124) {
            case 126:
                Test.dFld += i;
                byArrFld[i15] += (byte)i;
                break;
            case 130:
                for (i18 = 71; 2 < i18; --i18) {
                    Test.instanceCount += (i18 * i18);
                }
                i1 >>= i19;
                break;
            default:
                Test.fArrFld = FuzzerUtils.float1array(N, (float)-109.144F);
                Test.iArrFld[i15 + 1] = Test.iFld;
                Test.iFld = Test.iFld;
            }
            for (i20 = 1; i20 < 71; ++i20) {
                if (bFld) break;
                Test.dFld -= 12;
                i1 <<= i19;
                switch ((i20 % 6) + 13) {
                case 13:
                    for (i22 = 1; 2 > i22; ++i22) {
                        i21 *= 152;
                        i21 -= -77;
                        i1 = i15;
                        i19 -= i19;
                        i21 += (i22 * i22);
                        i1 -= (int)f2;
                    }
                    i19 += (int)Test.instanceCount;
                    break;
                case 14:
                    bFld = false;
                case 15:
                    i23 = i1;
                    break;
                case 16:
                    f2 = Test.iFld;
                case 17:
                    i21 += 151;
                case 18:
                    Test.iArrFld[i20 - 1] -= 56;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
