package tests.javafuzzer184;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:35:32 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4070416546L;
    public static float fFld=1.324F;
    public double dFld=0.47165;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -155);
        FuzzerUtils.init(Test.fArrFld, 0.1019F);
        FuzzerUtils.init(Test.dArrFld, 2.59149);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, int i8) {

        double d1=-56.66415;
        int i9=-193, i10=14, i11=138, i12=-6, i13=-12, i14=94;
        short s=18999, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)9916);

        Test.fFld += -2L;
        d1 += Test.fFld;
        for (i9 = 7; i9 < 187; i9 += 2) {
            i10 = (int)Test.instanceCount;
            sArr[i9] += (short)Test.instanceCount;
            i8 ^= 22984;
            i8 = i8;
            s = (short)Test.instanceCount;
            Test.iArrFld[i9 + 1] >>>= i10;
            for (i11 = 1; 17 > i11; ++i11) {
                i10 -= i10;
                for (i13 = 2; i13 > 1; i13--) {
                    i12 += i13;
                    if (i13 != 0) {
                    }
                    i7 += (i13 + i7);
                }
            }
        }
        long meth_res = i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + s + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i5=-11, i6=62526, i15=-152, i16=30465, i17=-202, iArr[]=new int[N];
        double d=33.87251;
        byte by=51;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -123);
        FuzzerUtils.init(bArr, false);

        i5 += iArr[(i5 >>> 1) % N];
        d = 1;
        while (++d < 208) {
            i6 = 1;
            do {
                i5 = (int)(Test.instanceCount * lMeth(i5, i5));
                switch ((i6 % 6) + 99) {
                case 99:
                    i15 = 1;
                    while (++i15 < 1) {
                        Test.fArrFld[i15 - 1] = i6;
                    }
                case 100:
                    i5 = i5;
                    Test.instanceCount = Test.instanceCount;
                    for (i16 = 1; i16 < 1; i16++) {
                        try {
                            i17 = (i5 / i15);
                            i17 = (i15 / -14);
                            i17 = (-127 / i6);
                        } catch (ArithmeticException a_e) {}
                    }
                    i5 = 65;
                    break;
                case 101:
                    if (b) {
                        i5 = -14;
                        by = (byte)3;
                    } else {
                        if (false) continue;
                    }
                    break;
                case 102:
                    Test.iArrFld[i6 - 1] *= i17;
                    break;
                case 103:
                    Test.fFld -= i16;
                    break;
                case 104:
                    bArr[(int)(d)] = b;
                    break;
                default:
                    Test.instanceCount += (i6 * i6);
                }
            } while (++i6 < 8);
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + i6 + i15 + i16 + i17 + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=195, i1=13, i2=5124, i3=93, i4=4;
        boolean b1=true;
        double d2=-17.114297;

        i = 1;
        while (++i < 231) {
            for (i1 = i; 7 > i1; i1++) {
                for (i3 = 1; i3 < 1; i3++) {
                    i4 -= (iMeth() * i3);
                    switch (((i3 % 1) * 5) + 111) {
                    case 113:
                        if (i1 != 0) {
                            vMeth_check_sum += i + i1 + i2 + i3 + i4 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2);
                            return;
                        }
                        Test.iArrFld[i1] >>= i2;
                        b1 = b1;
                        if (b1) {
                            Test.instanceCount = i;
                            switch (((i3 % 8) * 5) + 2) {
                            case 41:
                                i4 <<= i;
                                Test.iArrFld[i] += (int)Test.fFld;
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 6:
                                i4 -= (int)Test.instanceCount;
                            case 8:
                                i4 += i3;
                            case 4:
                                i4 += (((i3 * Test.fFld) + Test.instanceCount) - i4);
                            case 19:
                                i2 -= i4;
                                break;
                            case 33:
                                Test.instanceCount += i3;
                                break;
                            case 34:
                                Test.instanceCount += (i3 * Test.fFld);
                                break;
                            case 20:
                                i2 = i4;
                                break;
                            default:
                                i2 = i2;
                            }
                        } else {
                            Test.dArrFld[i3] *= d2;
                        }
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        int i18=-11, i19=-30519, i20=-10, i21=-13, i22=1, i23=6309, i24=128, i25=44308;
        byte by1=-49;

        vMeth();
        for (i18 = 3; i18 < 363; i18++) {
            i20 = 1;
            while (++i20 < 70) {
                if (true) break;
                i19 += (i20 | i19);
                i19 = i20;
                i21 -= -121;
                switch ((((i19 >>> 1) % 2) * 5) + 24) {
                case 26:
                    for (i22 = 1; i22 < 1; i22++) {
                        Test.instanceCount = i21;
                    }
                    i19 = i20;
                    break;
                case 31:
                    i19 += i18;
                    i21 -= by1;
                    Test.instanceCount <<= i23;
                    if (false) break;
                    break;
                default:
                    Test.fFld -= i22;
                    Test.instanceCount -= (long)dFld;
                    lArrFld = lArrFld;
                    Test.instanceCount -= Test.instanceCount;
                }
                for (i24 = 1; i24 < 1; ++i24) {
                    by1 *= (byte)26.10732;
                    Test.fFld += i24;
                    i19 -= (int)Test.instanceCount;
                }
                i19 = (int)Test.instanceCount;
                if (true) break;
                bFld = bFld;
                switch ((i18 % 1) + 117) {
                case 117:
                    lArrFld[i20 + 1] = lArrFld[i20 + 1];
                    dFld += i23;
                    break;
                }
            }
            i21 -= (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
