package tests.javafuzzer3435;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:16:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9207630183232776866L;
    public static int iFld=0;
    public static boolean bFld=false;
    public static byte byFld=72;
    public static double dFld=-2.107202;
    public static short sFld=-23178;
    public static volatile float fFld=14.592F;
    public short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i3, int i4) {

        int i5=-12725, i6=-1, i7=-183, i8=-91, i9=32, i10=-6448;
        float f1=-65.461F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5723883752050222225L);

        i5 = 1;
        do {
            Test.iFld = i3;
            for (i6 = 1; i6 < 5; i6++) {
                lArr[i5] -= Test.instanceCount;
                i4 -= -8;
                i7 += (i6 * i6);
            }
            Test.iFld = Test.iFld;
            if (Test.bFld) break;
        } while (++i5 < 360);
        for (i8 = 4; i8 < 376; ++i8) {
            i3 += (i8 * i8);
            switch (((i7 >>> 1) % 1) + 33) {
            case 33:
                for (f1 = 5; 1 < f1; f1--) {
                    i10 += i9;
                    i7 >>= (int)l;
                }
                Test.instanceCount = Test.iFld;
                break;
            default:
                Test.byFld += (byte)i7;
            }
        }
        long meth_res = l + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, byte by) {

        int i11=-43982, i12=10, i13=0, i14=-8;
        long l1=-9209275882655492262L;

        Test.instanceCount >>>= (Test.iFld - (Test.iArrFld[(Test.iFld >>> 1) % N] += (int)(Test.iFld *
            Test.instanceCount)));
        iMeth(Test.instanceCount, 12839, Test.iFld);
        f = Test.iFld;
        Test.dFld -= Test.iFld;
        for (i11 = 9; i11 < 387; i11 += 3) {
            i12 *= Test.iFld;
            if (Test.bFld) {
                Test.bFld = Test.bFld;
            } else if (Test.bFld) {
                i12 += Test.iFld;
            } else {
                Test.iArrFld[i11 + 1] += Test.iFld;
            }
            Test.iFld = (int)Test.instanceCount;
            Test.sFld += (short)l1;
            i13 = 1;
            do {
                l1 += i13;
                i14 = i11;
            } while (++i13 < 12);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + by + i11 + i12 + l1 + i13 + i14;
    }

    public static void vMeth(int i1, boolean b, int i2) {

        float f2=-84.180F;
        int i15=6533, i16=-10;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 116L);

        vMeth1(f2, Test.byFld);
        Test.instanceCount += Test.instanceCount;
        lArr1[(216 >>> 1) % N] = -38635;
        i2 = (int)Test.instanceCount;
        i2 <<= i1;
        Test.instanceCount = 197;
        i1 = Test.byFld;
        for (i15 = 1; i15 < 283; i15 += 2) {
            Test.instanceCount = Test.instanceCount;
            i2 += (i15 + i1);
            Test.iFld = i16;
            Test.instanceCount += (i15 - i15);
            i1 = Test.sFld;
            i16 += (i15 * i15);
            Test.iArrFld[i15 + 1] = i2;
        }
        vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + Float.floatToIntBits(f2) + i15 + i16 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-103.121584, d1=-46.51120;
        int i=-11, i17=-8, i18=-52454, i19=0, i20=-9, i21=59792, i22=-161, iArr[]=new int[N];
        byte byArr[][]=new byte[N][N];
        float fArr[]=new float[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(byArr, (byte)36);
        FuzzerUtils.init(fArr, -20.102F);
        FuzzerUtils.init(lArr2, -39049L);

        Test.instanceCount >>= (long)((d - Integer.reverseBytes(Test.iFld)) + (-(i - d)));
        sArrFld[(i >>> 1) % N] += (short)iArr[(Test.iFld >>> 1) % N];
        vMeth(i, Test.bFld, Test.iFld);
        i17 *= i17;
        i18 = 1;
        do {
            iArr[i18] <<= 12608;
            byArr[(-3 >>> 1) % N][i18 - 1] >>= (byte)i17;
            fArr[i18] = i;
            Test.sFld = (short)i18;
            for (i19 = i18; 84 > i19; i19++) {
                if (Test.bFld) continue;
                if (Test.bFld) continue;
                for (d1 = 1; d1 < 1; ++d1) {
                    Test.iArrFld[i18 - 1] = i21;
                    i20 += (int)Test.instanceCount;
                    Test.instanceCount <<= -5;
                    Test.instanceCount = i19;
                    Test.iFld <<= Test.iFld;
                    Test.iFld -= Test.iFld;
                    Test.iArrFld[i18 + 1] = Test.byFld;
                }
                Test.instanceCount += (i19 + Test.instanceCount);
                i20 = (int)Test.instanceCount;
                i20 += (0 + (i19 * i19));
                Test.instanceCount += i19;
                i22 = 1;
                do {
                    Test.iFld += (((i22 * Test.instanceCount) + Test.fFld) - i21);
                    i20 *= i20;
                    if (false) {
                        lArr2[i22 - 1] = i18;
                        lArr2[i22] *= i17;
                    } else {
                        Test.instanceCount = 0L;
                    }
                } while (++i22 < 1);
            }
        } while (++i18 < 298);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
