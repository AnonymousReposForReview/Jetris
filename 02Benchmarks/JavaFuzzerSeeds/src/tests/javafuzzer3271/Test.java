package tests.javafuzzer3271;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:31:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4853558383414007515L;
    public static byte byFld=112;
    public static short sFld=21025;
    public static volatile int iFld=3;
    public static boolean bFld=true;
    public float fFld=0.159F;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9531);
        FuzzerUtils.init(Test.lArrFld, 10L);
        FuzzerUtils.init(Test.fArrFld, -97.71F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1) {

        float f=-104.197F, f1=95.797F;
        boolean b1=false;
        int i2=122;

        i1 += i1;
        if (b1) {
            Test.iArrFld[(i1 >>> 1) % N] -= (int)f;
            Test.iArrFld[(i1 >>> 1) % N] = i1;
        }
        for (f1 = 1; f1 < 301; ++f1) {
            try {
                i1 = (i2 % 878500961);
                i2 = (i2 / -31045);
                i2 = (Test.iArrFld[(int)(f1 - 1)] % -51912);
            } catch (ArithmeticException a_e) {}
            i2 = Test.byFld;
            i2 += (int)f1;
            Test.instanceCount -= i1;
            f -= i1;
        }
        i1 = Test.sFld;
        vMeth2_check_sum += i1 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i2;
    }

    public static void vMeth1() {

        long l=1228664369304923620L;
        int i=9, i3=5099, i4=162, i5=179, i6=36404, i7=-56395;
        float f3=0.501F;
        boolean b2=false;

        for (l = 5; l < 170; l++) {
            float f2=-24.847F;
            vMeth2(147);
            f2 += (-50050 + (l * l));
        }
        for (i3 = 8; i3 < 145; i3++) {
            Test.iArrFld[i3 - 1] -= (int)f3;
            i5 = 1;
            do {
                i = Test.sFld;
                i4 = i3;
                for (i6 = 1; 1 < i6; --i6) {
                    if (b2) continue;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)16733);
                    Test.iFld >>= -57;
                    Test.iArrFld = Test.iArrFld;
                }
                i /= (int)(i6 | 1);
                Test.iArrFld[i3] = i7;
            } while (++i5 < 11);
        }
        vMeth1_check_sum += l + i + i3 + i4 + Float.floatToIntBits(f3) + i5 + i6 + i7 + (b2 ? 1 : 0);
    }

    public static void vMeth() {

        boolean b=true;
        int i8=-36, i9=13, i10=-26558, i11=53844, i12=-2;
        float f4=0.762F;
        byte byArr[][]=new byte[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-82);
        FuzzerUtils.init(dArr, 22.3478);

        b = (b = b);
        vMeth1();
        for (i8 = 14; 324 > i8; ++i8) {
            byArr[i8 - 1][i8 + 1] += (byte)224;
            Test.iFld = Test.byFld;
            i10 = 1;
            while (++i10 < 5) {
                i9 += 145;
                dArr[i8 - 1] = i11;
                i12 = 1;
                while (++i12 < 1) {
                    Test.iFld = (int)f4;
                    Test.instanceCount = i12;
                    Test.iArrFld[i8 + 1] *= (int)Test.instanceCount;
                    f4 *= Test.byFld;
                    Test.iFld += (225 + (i12 * i12));
                    Test.instanceCount = i11;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f4) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        double d=-88.114896, dArr1[]=new double[N];
        int i13=48126, i14=-59459, i15=24258, i16=27, i17=5321, i18=243, i19=-42453, i20=3, i21=-9, i22=-741;

        FuzzerUtils.init(dArr1, 0.14534);

        vMeth();
        Test.iFld >>>= -708;
        Test.iArrFld[(Test.iFld >>> 1) % N] += (int)d;
        for (i13 = 9; 325 > i13; i13++) {
            Test.iFld = i13;
        }
        i14 &= (int)Test.instanceCount;
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        i15 = 1;
        while ((i15 += 2) < 122) {
            i16 += (int)(60.914F + (i15 * i15));
            for (i17 = 8; i17 < 133; ++i17) {
                Test.byFld = Test.byFld;
                for (i19 = 4; i19 > 1; i19--) {
                    if (Test.bFld) continue;
                    Test.iFld = i13;
                    Test.iArrFld[i19 + 1] |= (int)-10L;
                    dArr1[i17 - 1] /= (Test.instanceCount | 1);
                    Test.bFld = Test.bFld;
                    Test.instanceCount += (((i19 * fFld) + i20) - Test.iFld);
                    dArr1[i17] = i13;
                    Test.iFld += (int)Test.instanceCount;
                    Test.instanceCount = (long)fFld;
                }
                i18 += (i17 ^ Test.byFld);
                fFld *= i13;
                Test.iFld -= Test.sFld;
                Test.bFld = true;
                i18 = (int)Test.instanceCount;
                for (i21 = 1; i21 < 4; i21++) {
                    Test.lArrFld = Test.lArrFld;
                    Test.fArrFld = Test.fArrFld;
                }
                i18 = i22;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
