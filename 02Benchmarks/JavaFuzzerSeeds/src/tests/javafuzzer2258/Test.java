package tests.javafuzzer2258;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:00:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4293199755L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8) {


        i7 ^= (int)Test.instanceCount;
        long meth_res = i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, double d) {

        int i3=0, i4=22955, i5=-66, i6=4, i9=-42914, i10=13561, i11=-34763;
        byte by=17;
        float f=82.764F;
        boolean b=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        i2 = (i2 = Test.iArrFld[(i2 >>> 1) % N]);
        for (i3 = 10; i3 < 219; i3++) {
            for (i5 = 1; 8 > i5; ++i5) {
                Test.iArrFld[i3 + 1] -= i6;
            }
            i6 += (int)(((--Test.instanceCount) + by) + ((d + i4) + (Test.instanceCount * d)));
            i2 += iMeth(i2, i6);
            switch ((((i9 >>> 1) % 5) * 5) + 18) {
            case 25:
                Test.iArrFld = Test.iArrFld;
                break;
            case 23:
                f -= f;
                break;
            case 24:
                i6 -= i4;
                Test.iArrFld[i3] = i4;
                break;
            case 28:
                switch ((i3 % 2) + 43) {
                case 43:
                    i2 = i10;
                    break;
                case 44:
                    if (i11 != 0) {
                        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + by + i9 +
                            Float.floatToIntBits(f) + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    if (b) continue;
                    break;
                default:
                    Test.instanceCount ^= -48502L;
                }
                break;
            case 37:
                bArr[i3 + 1][i3 + 1] = b;
                break;
            default:
                Test.iArrFld = Test.iArrFld;
            }
        }
        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + by + i9 + Float.floatToIntBits(f) +
            i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i1) {

        double d1=-86.118048;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.647F);

        i1 = (-((-(i1--)) + Test.iArrFld[(i1 >>> 1) % N]));
        vMeth1(i1, d1);
        fArr[(i1 >>> 1) % N] = i1;
        d1 = i1;
        vMeth_check_sum += i1 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        short s=29566;
        int i12=-59195, i13=-19938, i14=253, i15=3, i16=7, iArr[]=new int[N], iArr1[]=new int[N], iArr2[][]=new
            int[N][N];
        float f1=0.599F;
        double d2=2.19088;
        boolean b1=true;

        FuzzerUtils.init(iArr, -65448);
        FuzzerUtils.init(iArr1, 35146);
        FuzzerUtils.init(iArr2, -92);

        for (int i : iArr) {
            byte by1=-43;
            vMeth(i);
            by1 >>= (byte)i;
            i = s;
            for (i12 = 3; i12 < 63; i12++) {
                switch ((i12 % 3) + 21) {
                case 21:
                    for (i14 = 2; i14 > i12; --i14) {
                        f1 += (i14 * i14);
                        switch ((i12 % 10) + 42) {
                        case 42:
                            i13 += (i14 * i14);
                            i16 += (int)d2;
                            i15 >>= -38750;
                            break;
                        case 43:
                            Test.instanceCount &= i15;
                            break;
                        case 44:
                            Test.instanceCount >>>= i;
                            Test.instanceCount = (long)126.42117;
                            break;
                        case 45:
                            d2 += f1;
                            d2 = i13;
                            iArr1[i12] = i;
                            Test.instanceCount = i15;
                        case 46:
                            i15 += (i14 | Test.instanceCount);
                            switch (((i14 >>> 1) % 2) + 110) {
                            case 110:
                                i15 ^= i13;
                                f1 *= i13;
                                b1 = false;
                            case 111:
                                d2 += Test.instanceCount;
                                i += i14;
                                f1 += Test.instanceCount;
                                i15 += (i14 * i14);
                                break;
                            }
                            i16 = i;
                            break;
                        case 47:
                            Test.instanceCount = i12;
                        case 48:
                            i13 = i13;
                        case 49:
                            i += (i14 * i14);
                            break;
                        case 50:
                            Test.instanceCount = i12;
                        case 51:
                            iArr[i14] = (int)Test.instanceCount;
                        default:
                            by1 = (byte)i12;
                        }
                    }
                    break;
                case 22:
                    iArr[i12 - 1] >>= i;
                    break;
                case 23:
                    i13 = i12;
                    break;
                default:
                    iArr2 = iArr2;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
