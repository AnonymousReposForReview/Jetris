package tests.javafuzzer246;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:54:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5100L;
    public static volatile boolean bFld=true;
    public static double dFld=0.99825;
    public static int iFld=15130;
    public static short sFld=-15030;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 165);
        FuzzerUtils.init(Test.lArrFld, -3043175335386477143L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        int i9=-64957, i10=-250, i11=-52941, i12=122, i13=246;
        double d=-68.25323;
        float f1=0.538F;
        short s=32026;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -95L);

        for (i9 = 17; i9 < 327; i9 += 3) {
            int i14=1962;
            switch (((i9 % 3) * 5) + 41) {
            case 43:
                for (d = 1; d < 15; ++d) {
                    i11 ^= i11;
                    for (i12 = 1; 2 > i12; i12++) {
                        lArr[i9 - 1] = i13;
                        Test.iArrFld[i12] = (int)f1;
                        Test.bFld = Test.bFld;
                        i10 += 121;
                        Test.dFld = f1;
                        try {
                            i13 = (i8 % 742092771);
                            i8 = (i11 % i7);
                            i10 = (i13 % i13);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = i9;
                        Test.iArrFld = Test.iArrFld;
                        Test.iArrFld[i12] = (int)Test.instanceCount;
                        i13 |= -9;
                    }
                }
                break;
            case 44:
                f1 -= s;
                break;
            case 55:
                Test.iArrFld[i9 - 1] -= (int)-251L;
                break;
            default:
                i8 = i14;
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 +
            Float.floatToIntBits(f1) + s + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i2, int i3, int i4) {

        float f=1.17F, f2=0.392F;
        int i5=13, i6=-70, i15=-53346, i16=-9, i17=-47113;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -59.38254);

        f = (Test.iArrFld[(i4 >>> 1) % N]++);
        i3 <<= (int)(-(i3 * (i4 << Test.instanceCount)));
        for (i5 = 2; i5 < 184; ++i5) {
            vMeth1(-1, i3);
            Test.iFld += (i5 ^ i4);
            i2 = i6;
            Test.instanceCount = 3059339525L;
            for (i15 = 1; 9 > i15; i15++) {
                Test.iArrFld[i15 - 1] = i4;
                Test.instanceCount += i15;
            }
            if (false) continue;
            Test.lArrFld[i5 + 1] += (long)f;
            for (f2 = 1; f2 < 9; f2++) {
                if (Test.bFld) continue;
            }
            dArr[i5] += Test.instanceCount;
        }
        vMeth_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i15 + i16 + Float.floatToIntBits(f2) +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i, int i1) {

        int i18=-2, i19=-1;
        float f3=2.123F, f4=-118.211F, f5=93.304F;
        byte by=-44, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(byArr, (byte)-6);
        FuzzerUtils.init(bArr, true);

        if (Test.bFld) {
            vMeth(Test.iFld, -210, i);
            i -= (int)Test.dFld;
            if (Test.bFld) {
                i18 = 1;
                while (++i18 < 187) {
                    f3 = f3;
                    i19 = 1;
                    do {
                        by += (byte)(-27146 + (i19 * i19));
                        try {
                            Test.iFld = (Test.iArrFld[i18] / Test.iArrFld[i18 - 1]);
                            Test.iFld = (Test.iFld % -1200081664);
                            i1 = (113 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        byArr[i18] = (byte)Test.dFld;
                        f4 = 1;
                        while (++f4 < 1) {
                            try {
                                Test.iFld = (Test.iArrFld[i19 - 1] % 190);
                                Test.iFld = (-16332 % Test.iFld);
                                i = (i / -58294721);
                            } catch (ArithmeticException a_e) {}
                            Test.iFld += (int)(f4 * f4);
                            Test.iArrFld[i19] |= i1;
                            i1 -= (int)-21.64520;
                        }
                    } while (++i19 < 9);
                }
            } else if (false) {
                f5 *= -12;
            } else {
                Test.dFld = Test.instanceCount;
            }
        } else {
            bArr = FuzzerUtils.boolean1array(N, (boolean)false);
        }
        long meth_res = i + i1 + i18 + Float.floatToIntBits(f3) + i19 + by + Float.floatToIntBits(f4) +
            Float.floatToIntBits(f5) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {


        iMeth(-29846, Test.iFld);
        Test.iFld >>>= Test.sFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
