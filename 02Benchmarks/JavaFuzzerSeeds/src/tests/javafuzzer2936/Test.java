package tests.javafuzzer2936;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:20:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=19L;
    public static int iFld=-165;
    public static volatile byte byFld=19;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -124);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i, long l) {

        int i1=4, i2=-253, i3=19655, i4=24222;
        float f1=-1.505F;
        short s1=-6570;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4117041172L);

        i = 225;
        i1 = 1;
        while (++i1 < 219) {
            Test.iFld >>>= i;
            l = i1;
            for (i2 = 1; i2 < 7; ++i2) {
                switch (((Test.iFld >>> 1) % 1) + 31) {
                case 31:
                    Test.iArrFld[i2] = 4;
                    lArr[i1] += -20525L;
                    i4 = 2;
                    do {
                        i >>= i;
                        Test.instanceCount = i2;
                        f1 = i1;
                    } while (--i4 > 0);
                }
                Test.iFld += (i2 * i4);
                s1 += (short)(49 + (i2 * i2));
                Test.instanceCount -= -12;
            }
        }
        vMeth1_check_sum += i + l + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + s1 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        short s=7624;
        long l1=1554362207L;
        int i5=49346, i6=-6, i7=0, i8=-39230, i9=13;
        double d1=-2.121273;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.304F);

        Test.iFld >>>= s;
        vMeth1(4, Test.instanceCount);
        for (l1 = 4; 334 > l1; ++l1) {
            Test.instanceCount += i5;
            fArr = fArr;
            Test.byFld += (byte)Test.iFld;
            i5 -= Test.byFld;
        }
        for (i6 = 12; i6 < 262; ++i6) {
            if (i6 != 0) {
                vMeth_check_sum += s + l1 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
            for (i8 = i6; 7 > i8; ++i8) {
                float f2=94.935F;
                i7 = (int)l1;
                try {
                    i7 = (Test.iArrFld[i8] % Test.iFld);
                    i7 = (230 / i6);
                    i5 = (-58447 / i5);
                } catch (ArithmeticException a_e) {}
                d1 /= (Test.iFld | 1);
                i5 += (((i8 * s) + i9) - f2);
            }
            Test.iArrFld[i6] = i7;
        }
        vMeth_check_sum += s + l1 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(double d, float f) {


        vMeth();
        Test.instanceCount >>= Test.iFld;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        double d2=2.120305, dArr[]=new double[N];
        float f3=-37.35F, fArr1[]=new float[N];
        int i11=-44496, i12=-18087, i13=117, i14=128, i15=-50, i16=-43203;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -4782415153802635173L);
        FuzzerUtils.init(fArr1, -2.465F);
        FuzzerUtils.init(dArr, -90.108789);

        for (int smallinvoc=0; smallinvoc<715; smallinvoc++) vSmallMeth(d2, f3);
        for (int i10 : Test.iArrFld) {
            for (i11 = 2; i11 < 63; ++i11) {
                lArr1[i11] >>= Test.instanceCount;
                if (Test.bFld) break;
                lArr1 = lArr1;
            }
            fArr1[(i10 >>> 1) % N] = i10;
            Test.iArrFld[(i12 >>> 1) % N] = i11;
            i12 *= -59948;
            Test.iArrFld[(-26797 >>> 1) % N] *= (int)f3;
            dArr[(-14 >>> 1) % N] += 58498;
            Test.iArrFld[(i10 >>> 1) % N] = i11;
            i10 = i12;
            Test.iArrFld[(i10 >>> 1) % N] = i11;
            i10 = Test.iFld;
        }
        for (i13 = 4; 182 > i13; ++i13) {
            Test.iFld += i11;
            Test.iArrFld[i13] = i14;
            switch (((i13 % 5) * 5) + 98) {
            case 108:
                Test.byFld -= (byte)f3;
                i14 += (-30376 + (i13 * i13));
                break;
            case 122:
                i12 = (int)-6371631454821014443L;
            case 115:
                byArrFld[i13 + 1] |= (byte)Test.iFld;
                Test.instanceCount = Test.iFld;
                break;
            case 119:
                d2 *= d2;
                for (i15 = 6; 141 > i15; ++i15) {
                    Test.iArrFld[i15] &= i15;
                }
                break;
            case 109:
                if (Test.bFld) {
                    i14 = i14;
                } else if (Test.bFld) {
                    i14 -= (int)d2;
                } else {
                    Test.iArrFld[i13 + 1] = i16;
                }
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
