package tests.javafuzzer2289;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:34:24 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4159461134L;
    public static volatile int iFld=-14;
    public static double dFld=-75.46533;
    public byte byFld=-77;
    public static float fFld=-2.893F;
    public static boolean bFld=true;
    public static int iFld1=-17408;
    public byte byArrFld[][]=new byte[N][N];
    public static boolean bArrFld[]=new boolean[N];
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public float fArrFld[][]=new float[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 6L);
        FuzzerUtils.init(Test.dArrFld, 0.59794);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -179);

        Test.iFld = (int)(Test.instanceCount + (-(iArr[(Test.iFld >>> 1) % N]--)));
        Test.instanceCount -= (205L + ((Test.instanceCount + Test.instanceCount) + (Test.iFld++)));
        vMeth1_check_sum += Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i7) {

        int i8=-14, i9=-13, i10=39, i11=322, i12=-173, iArr2[]=new int[N];
        boolean b=false;
        float f2=-14.195F;
        byte by=-25;

        FuzzerUtils.init(iArr2, -12);

        i8 = 1;
        do {
            Test.iFld += Test.iFld;
            if (b) break;
            Test.iFld += (((i8 * i8) + i8) - Test.iFld);
        } while (++i8 < 172);
        for (i9 = 6; i9 < 216; i9++) {
            Test.iFld += (int)Test.instanceCount;
            b = b;
            for (i11 = 1; i11 < 8; ++i11) {
                iArr2[i9 - 1] = i8;
                i12 += (i11 | (long)f2);
                i10 >>= 12;
                Test.instanceCount *= (long)Test.dFld;
            }
            i10 += i9;
            Test.iFld += (i9 * i9);
            i12 = by;
        }
        long meth_res = i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + by +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i5, int i6) {

        double d=98.105098, dArr[]=new double[N];
        int i14=-62248, i15=-7, i16=-13, iArr1[]=new int[N];
        short s1=-29766;

        FuzzerUtils.init(iArr1, 10922);
        FuzzerUtils.init(dArr, -45.94858);

        switch (((((Test.iFld - Test.iFld) >>> 1) % 7) * 5) + 13) {
        case 20:
            i6 += i6;
            iArr1 = (iArr1 = (iArr1 = iArr1));
            iMeth1(Test.iFld);
            break;
        case 19:
            byArrFld[(i6 >>> 1) % N][(i5 >>> 1) % N] = (byte)Test.instanceCount;
            break;
        case 33:
            for (int i13 : iArr1) {
                for (d = 1; 4 > d; d++) {
                    for (i15 = 1; 2 > i15; i15++) {
                        i5 += (int)3828344819L;
                        Test.iFld = i15;
                        dArr[(int)(d)] = s1;
                        i13 = i5;
                        Test.dFld -= Test.fFld;
                    }
                    i16 = i14;
                    Test.iFld += (-10 + (d * d));
                }
            }
        case 37:
            Test.instanceCount = 56819;
            break;
        case 30:
            Test.bFld = Test.bFld;
            break;
        case 45:
            iArr1 = iArr1;
            break;
        case 17:
            Test.bArrFld[(i5 >>> 1) % N] = Test.bFld;
            break;
        }
        long meth_res = i5 + i6 + Double.doubleToLongBits(d) + i14 + i15 + i16 + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        short s=20182;
        float f1=-37.164F;
        int i1=-51693, i2=137, i3=-181, i4=104;

        vMeth1(i + s);
        vMeth1(f1);
        Test.iFld = (int)((--Test.dFld) + ((byFld - Test.dFld) - Test.dFld));
        for (i1 = 12; i1 < 256; ++i1) {
            for (i3 = 1; i3 < 7; i3++) {
                switch ((i3 % 10) + 63) {
                case 63:
                    Test.iFld -= (int)(Test.instanceCount - (f1 += (-Test.iFld)));
                    break;
                case 64:
                    byFld -= (byte)(iMeth(i1, i) << Test.instanceCount);
                    i += (((i3 * i1) + i1) - i1);
                    Test.instanceCount += (((i3 * i) + i) - i3);
                    if (Test.bFld) continue;
                    break;
                case 65:
                    Test.instanceCount <<= i4;
                    Test.lArrFld[i3 + 1] <<= -13;
                    i2 >>>= Test.iFld;
                    iArrFld = iArrFld;
                    break;
                case 66:
                    try {
                        iArrFld[i3 - 1][i3 - 1] = (585494384 / iArrFld[i1 - 1][i3 - 1]);
                        Test.iFld = (Test.iFld / iArrFld[i3 + 1][i1 + 1]);
                        Test.iFld = (-189 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                case 67:
                    Test.instanceCount /= 56007;
                case 68:
                    Test.iFld += (((i3 * Test.fFld) + Test.instanceCount) - i4);
                    break;
                case 69:
                    Test.fFld -= Test.instanceCount;
                    break;
                case 70:
                    iArrFld[i3 + 1] = iArrFld[i1 + 1];
                    break;
                case 71:
                    byArrFld[i1 - 1][i3] *= (byte)f1;
                    break;
                case 72:
                    fArrFld[i3][i3] += Test.fFld;
                    break;
                default:
                    Test.bFld = Test.bFld;
                }
            }
        }
        vMeth_check_sum += i + s + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4;
    }

    public void mainTest(String[] strArr1) {

        int i17=120, i18=-161, i19=-24812, i20=42, i21=4, i22=-9, i23=-36729;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)9377);

        vMeth(Test.iFld);
        for (i17 = 213; i17 > 4; i17 -= 2) {
            for (i19 = 2; i19 < 241; i19++) {
                Test.iFld += i19;
                Test.fFld += (i19 * i19);
                i21 = 1;
                while (++i21 < 2) {
                    if (false) continue;
                    i18 -= (int)47157L;
                    Test.dArrFld[i21 - 1] = byFld;
                    fArrFld[i19][i17] -= -2639L;
                }
                Test.bFld = Test.bFld;
                for (i22 = i19; i22 < 2; ++i22) {
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    if (Test.bFld) break;
                    switch ((i17 % 7) + 92) {
                    case 92:
                        Test.instanceCount = Test.instanceCount;
                        i18 += i17;
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld -= Test.iFld;
                        break;
                    case 93:
                    case 94:
                        i20 += (((i22 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 95:
                        Test.lArrFld[i19 + 1] -= i21;
                    case 96:
                        byFld += (byte)(45599 + (i22 * i22));
                        break;
                    case 97:
                        switch (((i22 % 9) * 5) + 62) {
                        case 82:
                            Test.dFld = i18;
                            Test.instanceCount += (i22 ^ i21);
                            Test.iFld >>= i21;
                        case 65:
                            if (true) {
                                Test.iFld <<= i21;
                            }
                            i23 += i22;
                            break;
                        case 86:
                            iArrFld[i17][i22 - 1] /= (int)(i17 | 1);
                        case 94:
                            fArrFld[i22 - 1][i17] = Test.instanceCount;
                            break;
                        case 104:
                            sArr[i19] <<= (short)Test.instanceCount;
                            break;
                        case 64:
                            Test.iFld += (i22 | Test.instanceCount);
                            break;
                        case 78:
                        case 75:
                            i18 >>>= i17;
                            break;
                        case 69:
                            Test.iFld = i21;
                            break;
                        default:
                            Test.iFld1 = (int)Test.fFld;
                        }
                        break;
                    case 98:
                        if (Test.bFld) break;
                        break;
                    default:
                        if (Test.bFld) break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
