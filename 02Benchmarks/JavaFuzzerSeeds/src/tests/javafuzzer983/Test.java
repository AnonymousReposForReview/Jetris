package tests.javafuzzer983;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:23:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7654827426335761368L;
    public static int iFld=-153;
    public static volatile short sFld=28429;
    public static boolean bFld=true;
    public static double dFld=0.110139;
    public static volatile float fFld=-2.563F;
    public volatile byte byFld=-14;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i1=52031, i2=84;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1752891799L);

        Test.iFld |= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld = Test.iFld;
        lArr[(Test.iFld >>> 1) % N] *= Test.instanceCount;
        for (i1 = 21; i1 < 390; ++i1) {
            Test.sFld <<= (short)Test.iFld;
            if (b) {
                b = b;
            } else if (b) {
                Test.instanceCount *= Test.sFld;
            } else if (b) {
                i2 += i1;
                Test.instanceCount += (((i1 * Test.iFld) + i1) - i1);
                i2 += (i1 * Test.iFld);
                i2 = (int)Test.instanceCount;
            } else {
                Test.iFld += (i1 ^ i1);
                Test.iFld += (56351 + (i1 * i1));
            }
        }
        long meth_res = i1 + i2 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i3=49, i4=204, i5=-10, i6=209, i7=-9, i8=23218;
        double d=108.112847;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-125);
        FuzzerUtils.init(lArr1, -144L);

        Test.iArrFld[(Test.iFld >>> 1) % N] = iMeth1();
        for (i3 = 8; i3 < 219; ++i3) {
            Test.iFld >>>= i;
        }
        Test.bFld = Test.bFld;
        byArr[(i >>> 1) % N] >>= (byte)Test.iFld;
        lArr1[(i >>> 1) % N] ^= i;
        for (i5 = 7; i5 < 180; ++i5) {
            Test.iArrFld[i5] = i3;
            for (i7 = i5; i7 < 9; ++i7) {
                Test.instanceCount ^= Test.sFld;
                if (i5 != 0) {
                }
                i8 = i7;
                Test.instanceCount += (43860 + (i7 * i7));
                Test.instanceCount -= Test.instanceCount;
                i8 -= (int)d;
            }
        }
        long meth_res = i + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i9=56, i10=-38142;
        float f=96.421F;
        double d1=84.94896;

        Test.iFld = iMeth(Test.iFld);
        Test.iFld -= Test.iFld;
        Test.sFld = (short)Test.instanceCount;
        i9 = 1;
        while (++i9 < 185) {
            Test.iFld = 22714;
            for (f = i9; f < 9; ++f) {
                Test.dFld *= Test.iFld;
                Test.iArrFld[i9] >>= i9;
                Test.fFld = i10;
                d1 = 1;
                do {
                    Test.instanceCount += (long)(((d1 * Test.fFld) + Test.fFld) - i10);
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-12);
                    Test.iFld = Test.iFld;
                    Test.iArrFld[(i9 >>> 1) % N] = 5;
                    Test.iFld += Test.iFld;
                } while (++d1 < 1);
            }
        }
        vMeth_check_sum += i9 + Float.floatToIntBits(f) + i10 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i11=7149, i12=-12, i13=2282, i14=-4, i15=-115, i16=14, i17=-173, i18=30, i19=-13, i20=17788, i21=-60762,
            i22=-22009, i23=29;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -71.198F);

        vMeth();
        Test.sFld = Test.sFld;
        Test.iFld >>= Test.iFld;
        for (i11 = 9; i11 < 235; ++i11) {
            for (i13 = i11; i13 < 111; i13++) {
                Test.instanceCount *= Test.instanceCount;
                Test.iArrFld[i13] = i11;
                Test.iArrFld[i13 + 1] = (int)Test.instanceCount;
                fArr[i13 - 1][i11] = i13;
                Test.dFld *= i14;
            }
            for (i15 = i11; i15 < 111; i15++) {
                Test.iFld = i14;
                for (i17 = 1; i17 < 1; i17++) {
                    i14 -= i14;
                    Test.dFld += i11;
                    Test.instanceCount += (((i17 * i18) + i12) - i14);
                    i19 = i14;
                    Test.iArrFld[i11] = (int)Test.instanceCount;
                }
                i14 = byFld;
            }
            Test.dFld *= -2229624385660931199L;
        }
        i20 &= (int)Test.instanceCount;
        Test.iArrFld = Test.iArrFld;
        for (i21 = 15; i21 < 305; ++i21) {
            i16 += (i21 * Test.instanceCount);
            if (Test.bFld) {
                i22 = byFld;
                switch (((i21 % 5) * 5) + 21) {
                case 41:
                    i18 = (int)Test.instanceCount;
                    i18 -= 97;
                    Test.instanceCount += (i21 * i21);
                    break;
                case 24:
                    Test.instanceCount >>= Test.instanceCount;
                    break;
                case 26:
                    Test.iArrFld[i21 + 1] = i14;
                    break;
                case 32:
                    i12 <<= i19;
                    break;
                case 38:
                    Test.instanceCount = i12;
                    break;
                default:
                    Test.fFld += i21;
                }
            } else if (Test.bFld) {
                Test.iArrFld[i21 + 1] <<= -83;
            } else {
                i23 = (int)Test.instanceCount;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
