package tests.javafuzzer3239;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:23:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=100L;
    public static float fFld=-2.799F;
    public static byte byFld=-65;
    public static int iFld=-11;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 21L);
        FuzzerUtils.init(Test.iArrFld, 61072);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=28869, i4=1, i5=133, i6=-5039, i7=63407, i8=-49, iArr[]=new int[N];
        byte by=-95;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(fArr, -2.302F);

        for (i3 = 9; i3 < 146; i3++) {
            double d1=83.120035;
            d1 = Test.fFld;
            for (i5 = i3; i5 < 11; i5++) {
                Test.instanceCount += (((i5 * i3) + by) - i3);
                iArr = FuzzerUtils.int1array(N, (int)-20439);
                i4 = i3;
                if (b) {
                    if (true) continue;
                    d1 = d1;
                    d1 = Test.instanceCount;
                    for (i7 = 1; i7 < 1; i7 += 3) {
                        short s=-27677;
                        iArr = FuzzerUtils.int1array(N, (int)59613);
                        s += (short)-74.120825;
                    }
                } else {
                    Test.fFld += (((i5 * Test.instanceCount) + i7) - i4);
                    fArr[i3] -= i4;
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + by + i7 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {

        int i=-241, i1=50805, i2=-7902, i9=216, i10=-50913, iArr1[]=new int[N];
        boolean b1=true, b2=true;
        byte byArr[]=new byte[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-103);
        FuzzerUtils.init(dArr, 110.100138);
        FuzzerUtils.init(iArr1, 3);

        i = 1;
        while (++i < 387) {
            if (i != 0) {
                vMeth1_check_sum += i + i1 + i2 + i9 + i10 + (b1 ? 1 : 0) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(byArr)
                    + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (i1 = 4; i1 > i; i1--) {
                vMeth2();
                for (i9 = 1; i9 < 1; i9++) {
                    i2 = (int)Test.fFld;
                    switch ((((i >>> 1) % 8) * 5) + 83) {
                    case 101:
                        switch (((i % 4) * 5) + 54) {
                        case 61:
                            if (b1) continue;
                            i10 += i;
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        case 72:
                            Test.byFld += (byte)(i9 ^ i1);
                            i10 = i9;
                            break;
                        case 66:
                            Test.instanceCount = i;
                            byArr[i9 - 1] -= Test.byFld;
                            break;
                        case 55:
                            dArr[i] -= Test.fFld;
                            break;
                        }
                        break;
                    case 111:
                        Test.lArrFld[i9 - 1] = i2;
                        break;
                    case 108:
                    case 86:
                        i2 += (((i9 * Test.byFld) + Test.fFld) - Test.fFld);
                        break;
                    case 123:
                        if (b2) continue;
                        break;
                    case 117:
                        iArr1[i1] -= -9026;
                        break;
                    case 118:
                        Test.byFld = (byte)Test.instanceCount;
                        break;
                    case 92:
                        i10 += (((i9 * Test.instanceCount) + i) - i);
                    default:
                        i10 += (int)(-214L + (i9 * i9));
                    }
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i9 + i10 + (b1 ? 1 : 0) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(double d, long l) {

        int i11=71, i12=-15120, i13=150, i14=9, i15=23619, i16=9268;
        float fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr1, 0.610F);
        FuzzerUtils.init(bArr, false);

        vMeth1();
        i11 = 1;
        while (++i11 < 127) {
            Test.fFld += i12;
            fArr1[i11 + 1] += i11;
            Test.lArrFld[i11 - 1] <<= -27047;
            i12 ^= (int)l;
            Test.fFld += i12;
            for (i13 = 1; i13 < 12; i13++) {
                for (i15 = 2; i15 > 1; i15--) {
                    short s1=-27592;
                    i14 += i15;
                    i14 = (int)l;
                    switch (((i15 % 8) * 5) + 90) {
                    case 105:
                        s1 -= Test.byFld;
                        if (i13 != 0) {
                            vMeth_check_sum += Double.doubleToLongBits(d) + l + i11 + i12 + i13 + i14 + i15 + i16 +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(bArr);
                            return;
                        }
                        break;
                    case 92:
                        Test.instanceCount -= i16;
                    case 113:
                        try {
                            i14 = (40432057 % i14);
                            i14 = (i11 % -45005721);
                            i14 = (-2128141312 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                    case 123:
                        i16 = -124;
                        break;
                    case 110:
                        i16 += i13;
                        break;
                    case 128:
                        bArr[i15] = Test.bFld;
                        break;
                    case 97:
                        i12 += i15;
                        break;
                    case 94:
                        Test.iArrFld[i13] *= (int)Test.fFld;
                        break;
                    default:
                        Test.iFld >>= (int)l;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=0.50984, d3=-13.112460;
        int i17=9962, i18=-20886, i19=-13, i20=-33, i21=140, i22=-214, i23=6523, i24=-4962, i25=-14681, i26=11;
        short s2=213, sArr[]=new short[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(fArr2, 1.581F);
        FuzzerUtils.init(sArr, (short)5606);

        vMeth(110.130991, -622400530701272058L);
        for (d2 = 14; d2 < 341; ++d2) {
            Test.iFld += 190;
            Test.iFld += (int)(d2 * d2);
            Test.instanceCount += (long)d2;
        }
        i17 += 120;
        for (i18 = 7; i18 < 243; ++i18) {
            for (i20 = 4; i20 < 106; i20 += 2) {
                float f=22.185F;
                Test.iArrFld[i20 + 1] = -11;
                i21 >>= -16104;
                f += i18;
                if (Test.bFld) continue;
                for (i22 = 1; i22 < 3; ++i22) {
                    i17 <<= i19;
                    Test.instanceCount = s2;
                    s2 *= (short)Test.iFld;
                    i19 += s2;
                    Test.instanceCount = -5126529301552630605L;
                    Test.iArrFld[i18 + 1] -= s2;
                    i23 += (i22 | i22);
                    d3 -= i17;
                    fArr2 = fArr2;
                    try {
                        i19 = (i22 % -45891);
                        i21 = (40 / i20);
                        i23 = (0 / i17);
                    } catch (ArithmeticException a_e) {}
                }
                Test.fFld = i17;
                for (i24 = 3; i24 > 1; --i24) {
                    sArr[i24 + 1] += (short)i26;
                    i26 = (int)1.893F;
                    i17 += i24;
                    Test.iFld = (int)Test.instanceCount;
                    d3 = d2;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
