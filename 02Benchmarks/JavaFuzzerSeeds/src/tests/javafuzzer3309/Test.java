package tests.javafuzzer3309;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:46:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=34897L;
    public byte byFld=70;
    public volatile short sFld=-10566;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i16=-142, i17=0, i18=11, i19=28917, i20=-229, i21=5, i22=-23;
        double d=0.105922;
        short s1=16189;
        long lArr1[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr1, -24L);
        FuzzerUtils.init(fArr1, 0.260F);

        i16 = 152;
        while (--i16 > 0) {
            for (i17 = 1; i17 < 10; i17++) {
                for (i19 = 1; i19 < 2; ++i19) {
                    i18 = i18;
                    i20 += i19;
                    lArr1 = lArr1;
                }
                switch ((i16 % 2) + 97) {
                case 97:
                    i18 += i17;
                    Test.iArrFld[i17 - 1] *= (int)1.82228;
                    break;
                case 98:
                    for (i21 = 1; i21 < 2; ++i21) {
                        i22 += i16;
                        switch ((i16 % 4) + 52) {
                        case 52:
                            i20 = (int)d;
                            fArr1[i17 + 1] *= i16;
                            break;
                        case 53:
                            s1 ^= s1;
                        case 54:
                            Test.instanceCount = -26702;
                            break;
                        case 55:
                            i18 += i21;
                        default:
                            Test.instanceCount = i19;
                        }
                    }
                    break;
                }
            }
        }
        long meth_res = i16 + i17 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d) + s1 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i6, float f1, int i7) {

        int i8=203, i9=2, i10=-84, i11=-17890, i12=-63322, i13=-133, i14=-9, i15=103;
        short s2=22872;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -107.577F);

        i6 -= (-(190 - Test.iArrFld[(37347 >>> 1) % N]));
        for (i8 = 1; i8 < 138; i8++) {
            fArr[i8 + 1] += i6;
            f1 += (i8 * i8);
            i9 = i6;
        }
        for (i10 = 15; i10 < 397; ++i10) {
            Test.iArrFld[i10] = (++i6);
            switch (((i10 % 1) * 5) + 121) {
            case 126:
                for (i12 = 1; i12 < 4; ++i12) {
                    for (i14 = 1; 2 > i14; i14++) {
                        i7 <<= ((iMeth() - s2) * i11);
                        i15 -= i9;
                        Test.instanceCount += (((i14 * i15) + Test.instanceCount) - i13);
                        Test.instanceCount = i8;
                    }
                    i7 &= i10;
                }
            default:
                i13 += i8;
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(long l, int i, float f) {

        int i1=-7, i2=-18995, i3=-251, i4=12, i5=-8;
        boolean b=true, bArr[]=new boolean[N];
        short s=6219;
        float f2=-89.100F;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 187L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 0.93745);

        i1 = 1;
        do {
            for (i2 = 1; 5 > i2; ++i2) {
                switch (((i2 % 10) * 5) + 44) {
                case 68:
                    i4 = (int)Long.reverseBytes(++Test.instanceCount);
                    l = (lArr[i2]++);
                    bArr[i2 - 1] = b;
                case 50:
                    i3 -= (int)l;
                    break;
                case 60:
                case 52:
                    i4 = (-1 + i1);
                    l = (((i3 + s) * (i3--)) - 9L);
                    break;
                case 61:
                    byFld += (byte)(i2 * i2);
                    switch ((i2 % 8) + 59) {
                    case 59:
                        i5 = 1;
                        do {
                            i3 = (int)(f = -39243L);
                            i3 += (((i5 * Test.instanceCount) + i5) - l);
                            Test.iArrFld[i1 + 1] += (int)lMeth(i5, f, i4);
                        } while (++i5 < 2);
                    case 60:
                        if (i1 != 0) {
                            vMeth_check_sum += l + i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + (b ? 1 : 0) + s +
                                i5 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr)
                                + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        break;
                    case 61:
                        l += (-188 + (i2 * i2));
                    case 62:
                        Test.iArrFld = Test.iArrFld;
                    case 63:
                        dArr[i2 + 1] = f;
                        break;
                    case 64:
                        i4 = i;
                        break;
                    case 65:
                        lArr[i2] <<= i1;
                        break;
                    case 66:
                        s -= (short)i1;
                        break;
                    default:
                        f2 += (((i2 * i1) + i5) - i4);
                    }
                case 57:
                    i += (i2 + f2);
                    break;
                case 82:
                    i3 += (i2 ^ i4);
                    break;
                case 56:
                    byFld += (byte)i1;
                    break;
                case 64:
                    lArr[i2] += (long)f;
                    break;
                case 77:
                    i3 = (int)-99L;
                    break;
                }
            }
        } while (++i1 < 365);
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + (b ? 1 : 0) + s + i5 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i23=-35, i24=-93, i25=10, i26=130, i27=0, i28=-13347, i29=-62, i30=21823, i31=-6;
        double d1=-1.103736;
        boolean b1=true;
        long lArr2[]=new long[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(lArr2, -4165348003L);
        FuzzerUtils.init(fArr2, -6.131F);

        vMeth(Test.instanceCount, i23, -2.177F);
        lArr2[(i23 >>> 1) % N] += -5502;
        for (i24 = 10; i24 < 197; ++i24) {
            Test.iArrFld[i24 - 1] = -10;
            Test.instanceCount = 5L;
            i25 *= -49;
            Test.instanceCount <<= Test.instanceCount;
            Test.instanceCount = byFld;
            Test.instanceCount <<= i24;
            for (i26 = 8; i26 < 134; i26++) {
                i27 -= i26;
            }
            for (i28 = 2; i28 < 134; ++i28) {
                for (d1 = 1; d1 < 2; ++d1) {
                    lArr2 = lArr2;
                    Test.instanceCount <<= i26;
                    fArr2 = FuzzerUtils.float1array(N, (float)-2.961F);
                    i27 += (int)(((d1 * i28) + sFld) - i25);
                    b1 = b1;
                    i29 -= i28;
                    byFld += (byte)i25;
                    i29 += (int)(d1 - Test.instanceCount);
                    switch ((int)((d1 % 2) + 72)) {
                    case 72:
                        b1 = b1;
                        i29 <<= (int)Test.instanceCount;
                        i27 += (int)(d1 * d1);
                        i23 += i27;
                        break;
                    case 73:
                        Test.iArrFld[i24] *= i31;
                        i30 = (int)5509633616295520169L;
                        i27 ^= i29;
                        i25 >>= (int)-25630L;
                        break;
                    default:
                        i25 = i30;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
