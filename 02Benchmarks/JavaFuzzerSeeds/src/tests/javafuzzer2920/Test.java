package tests.javafuzzer2920;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:04:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3098925527L;
    public static float fFld=-71.266F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, long l4) {

        int i8=-8766, i9=54850, i10=13909, i11=-180, i12=3, iArr1[]=new int[N];
        float f1=2.482F;
        boolean b1=false;
        double d=8.40260;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -156);
        FuzzerUtils.init(lArr, 188668641328096422L);

        for (i8 = 4; i8 < 383; i8++) {
            i10 = 4;
            do {
                try {
                    i9 = (-225 % i10);
                    i7 = (i10 / 197);
                    i7 = (-135 / i8);
                } catch (ArithmeticException a_e) {}
                for (i11 = 1; i11 < 2; ++i11) {
                    f1 += i11;
                    iArr1[i8] = i11;
                    lArr[i11 + 1] = i10;
                    if (b1) continue;
                    switch (((i8 % 10) * 5) + 32) {
                    case 63:
                        i7 = i9;
                        i9 <<= 0;
                        d -= 29705;
                        break;
                    case 46:
                        b1 = b1;
                        break;
                    case 37:
                        i12 &= i12;
                        Test.instanceCount += i11;
                    case 66:
                        lArr = lArr;
                        break;
                    case 55:
                        Test.instanceCount -= Test.instanceCount;
                    case 40:
                        if (i7 != 0) {
                            vMeth2_check_sum += i7 + l4 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + (b1 ?
                                1 : 0) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
                                FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        break;
                    case 82:
                        lArr[i10 + 1] = i7;
                        break;
                    case 80:
                        i12 += (34881 + (i11 * i11));
                    case 60:
                        l4 = 7;
                        break;
                    case 67:
                        lArr[i11 - 1] += i10;
                    default:
                        i7 ^= i12;
                    }
                }
            } while ((i10 -= 2) > 0);
        }
        vMeth2_check_sum += i7 + l4 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l2, long l3, boolean b) {

        int i1=-153, i2=206, i3=-55852, i4=-247, i5=0, i6=-23587, i13=0, i14=-116, iArr[]=new int[N];
        short s=4804;
        float f=0.452F;

        FuzzerUtils.init(iArr, 45700);

        l2 >>>= iArr[(i1 >>> 1) % N];
        i2 = 1;
        while (++i2 < 259) {
            i1 >>= (int)(Integer.reverseBytes((int)(1.107541 * iArr[i2])) - ((i1 + s) + (f -= i1)));
            i1 = (iArr[i2] -= i1);
        }
        for (i3 = 10; i3 < 276; ++i3) {
            for (i5 = 1; i5 < 6; i5++) {
                vMeth2(i3, l3);
                i6 += i6;
                i6 += (int)l3;
                f += i2;
                iArr[i5 + 1] -= i6;
                i6 += i3;
            }
            for (i13 = 1; i13 < 6; i13++) {
                s += (short)i1;
                iArr[i3 + 1] >>= i14;
            }
        }
        vMeth1_check_sum += l2 + l3 + (b ? 1 : 0) + i1 + i2 + s + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i13 +
            i14 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i, long l1) {

        boolean b2=true;
        int i15=-12, i16=56296, i17=-50392, i18=229, i19=-10, i20=8, iArr2[][]=new int[N][N];
        float f2=0.71F;
        byte by=-62;

        FuzzerUtils.init(iArr2, -13);

        i &= (-i);
        vMeth1(l1, l1, b2);
        for (i15 = 3; i15 < 338; i15++) {
            for (i17 = i15; 5 > i17; i17++) {
                switch ((i17 % 8) + 58) {
                case 58:
                    for (i19 = 1; i19 < 1; ++i19) {
                        i18 = (int)Test.instanceCount;
                        l1 = 165L;
                        iArr2[i19 + 1][i17 + 1] = i;
                        i <<= i16;
                        f2 += ((long)i19 ^ (long)by);
                    }
                    i += i17;
                    break;
                case 59:
                    i20 = (int)l;
                    i18 -= i20;
                    break;
                case 60:
                    f2 = 78;
                    break;
                case 61:
                    f2 += 14L;
                    break;
                case 62:
                    i18 += i17;
                    break;
                case 63:
                    Test.instanceCount <<= i20;
                    break;
                case 64:
                    f2 = i17;
                    break;
                case 65:
                    i16 += i17;
                    break;
                }
            }
        }
        vMeth_check_sum += l + i + l1 + (b2 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
            by + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i21=81, i22=69, i23=-4, i24=13, i25=3100, i26=-214, i27=13, i28=14, i29=-5;
        byte by1=-25;
        double d1=0.130946;
        short s1=25474;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -34L);

        vMeth(Test.instanceCount, i21, Test.instanceCount);
        for (i22 = 10; i22 < 251; i22++) {
            for (i24 = 2; 104 > i24; i24++) {
                i25 >>= i21;
                for (i26 = 1; 2 > i26; i26++) {
                    by1 += by1;
                    Test.instanceCount = by1;
                    Test.instanceCount = by1;
                    i23 = (int)Test.instanceCount;
                    by1 += (byte)i26;
                    by1 += (byte)(-10 + (i26 * i26));
                    i23 = i23;
                }
                i28 = 1;
                do {
                    boolean b3=true;
                    i23 += (i28 * i26);
                    if (b3) {
                        i27 = (int)4886785573890558377L;
                        Test.instanceCount <<= i25;
                        i27 += (i28 * i28);
                    }
                    if (b3) {
                        d1 -= d1;
                        Test.instanceCount -= (long)-35.14701;
                        i25 += (i28 * i28);
                        i23 += (((i28 * Test.instanceCount) + i22) - s1);
                    }
                    i29 = (int)d1;
                    i25 -= (int)Test.instanceCount;
                } while (++i28 < 2);
                Test.instanceCount += i24;
            }
            lArr1[i22 + 1] = i21;
            Test.fFld -= Test.fFld;
        }
        lArr1[(-245 >>> 1) % N] &= Test.instanceCount;
        i27 = i26;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
