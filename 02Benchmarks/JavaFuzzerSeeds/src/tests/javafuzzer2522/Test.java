package tests.javafuzzer2522;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:13:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=170L;
    public static int iFld=29821;
    public static short sFld=8528;
    public byte byFld=-51;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 313850546L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i=63739, i1=33500, i2=-7, i3=99, i4=10207, iArr[]=new int[N];
        float f1=-34.461F;
        byte by=62;
        boolean b=false;

        FuzzerUtils.init(iArr, -51);

        for (i = 7; i < 271; ++i) {
            if (b) {
                i2 = 1;
                while (++i2 < 6) {
                    Test.sFld += (short)i2;
                    iArr[i + 1] += i1;
                    for (i3 = i; i3 < 1; ++i3) {
                        i1 *= i;
                        switch (((i % 2) * 5) + 45) {
                        case 53:
                            Test.iFld = 18491;
                            Test.instanceCount %= (i1 | 1);
                        case 51:
                        default:
                            f1 *= i2;
                            i1 += 5;
                            i4 -= i;
                        }
                        i4 ^= i1;
                        by += (byte)1;
                    }
                }
            } else if (b) {
                if (i4 != 0) {
                    vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + by + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + by + (b ? 1 : 0) +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        int i5=6, i6=-6, i7=-189, i8=103, i9=17, iArr1[]=new int[N];
        boolean b1=true, bArr[]=new boolean[N];
        double d=112.123475;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -196);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 89L);

        vMeth();
        for (i5 = 3; i5 < 174; ++i5) {
            iArr1[i5 - 1] += (int)Test.instanceCount;
            for (i7 = 9; i7 > i5; i7--) {
                if (b1) {
                    bArr[i7 + 1] = b1;
                    Test.instanceCount += (-5700 + (i7 * i7));
                    i9 += (i7 * i7);
                    lArr[i5 - 1] *= i9;
                } else {
                    i9 += (((i7 * i5) + Test.instanceCount) - i9);
                    iArr1[i5 + 1] &= (int)Test.instanceCount;
                    d += -3L;
                    i6 += (i7 | Test.iFld);
                }
                if (Test.iFld != 0) {
                }
                Test.instanceCount += (i7 ^ i5);
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + (b1 ? 1 : 0) + i9 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f) {

        int i10=47, i11=-248, iArr2[]=new int[N];
        boolean b2=true;

        FuzzerUtils.init(iArr2, 49834);

        f += (iMeth1() + Test.iFld);
        for (long l : Test.lArrFld) {
            Test.iFld = Test.iFld;
            Test.instanceCount -= (long)f;
            switch ((((Test.iFld >>> 1) % 2) * 5) + 14) {
            case 20:
                i10 = 1;
                while (++i10 < 4) {
                    Test.instanceCount >>= Test.iFld;
                    i11 = 1;
                    while (++i11 < 1) {
                        byte by1=-122;
                        Test.iFld += 69;
                        if (b2) break;
                        try {
                            Test.iFld = (-77 % iArr2[(i10 >>> 1) % N]);
                            Test.iFld = (iArr2[(Test.iFld >>> 1) % N] % i11);
                            Test.iFld = (22298380 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        b2 = true;
                        f = by1;
                        Test.iFld = Test.iFld;
                        Test.iFld += (int)Test.instanceCount;
                    }
                }
                break;
            case 18:
                Test.sFld = (short)i10;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i10 + i11 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-25.746F, f3=1.396F;
        int i12=-11, i13=-13, i14=-13, i15=-6, i16=-8, i17=-62703, iArr3[]=new int[N];
        double d1=39.70846;
        boolean b3=true;

        FuzzerUtils.init(iArr3, 14);

        Test.instanceCount = ((Test.iFld--) * iMeth(f2));
        i12 = 1;
        while (++i12 < 230) {
            for (i13 = 109; i13 > i12; i13 -= 2) {
                iArr3[i13 + 1] = (int)f2;
                d1 = -2892970300245315182L;
                for (i15 = 1; i15 < 1; i15++) {
                    Test.lArrFld[i13 + 1] -= i12;
                    i16 += (int)Test.instanceCount;
                    iArr3[i12] -= (int)Test.instanceCount;
                    Test.iFld >>>= (int)Test.instanceCount;
                    Test.iFld = (int)f2;
                    switch ((i15 % 2) + 73) {
                    case 73:
                        Test.sFld = (short)i14;
                        break;
                    case 74:
                        i14 = i13;
                        Test.sFld = (short)66.93167;
                    }
                    i14 *= i12;
                }
                iArr3[i12] = byFld;
                switch (((i15 >>> 1) % 9) + 114) {
                case 114:
                    switch ((i12 % 2) + 78) {
                    case 78:
                        f2 += i13;
                        break;
                    case 79:
                        if (b3) continue;
                        break;
                    default:
                        f2 += i13;
                        if (false) continue;
                    }
                    if (b3) continue;
                    break;
                case 115:
                    i16 *= i14;
                    iArr3[i13] >>= 1;
                    Test.iFld = i16;
                    break;
                case 116:
                    for (f3 = 1; f3 > 1; f3--) {
                        iArr3[i12 + 1] += i17;
                        Test.instanceCount += i16;
                    }
                    break;
                case 117:
                    Test.lArrFld[i12 + 1] = (long)f2;
                    break;
                case 118:
                    f2 = Test.instanceCount;
                case 119:
                    f2 = i14;
                case 120:
                    Test.instanceCount = i13;
                    break;
                case 121:
                    if (true) break;
                case 122:
                    i17 += (((i13 * Test.sFld) + f3) - f2);
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
