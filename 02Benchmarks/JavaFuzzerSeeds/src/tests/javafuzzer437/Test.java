package tests.javafuzzer437;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:51:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-629666894L;
    public static boolean bFld=true;
    public static float fFld=-2.305F;
    public int iFld=-3;
    public double dFld=0.29408;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f2) {

        short s=31381;
        int i8=188, i9=-125, i10=2764, i11=-6, i12=38, i13=-172;

        s *= (short)f2;
        for (i8 = 6; i8 < 161; ++i8) {
            for (i10 = 1; i10 < 10; ++i10) {
                s += (short)(i10 - Test.instanceCount);
                i12 = 1;
                while (++i12 < 2) {
                    i11 = (int)1.680F;
                    Test.instanceCount += -37;
                    i9 = i9;
                    Test.instanceCount += (((i12 * f2) + f2) - i10);
                    Test.iArrFld[i12 - 1] = i10;
                    i11 += (i12 - Test.instanceCount);
                    i11 *= (int)2.671F;
                    i13 += i10;
                    if (true) break;
                    Test.iArrFld[i8 + 1] += i8;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + s + i8 + i9 + i10 + i11 + i12 + i13;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i3=-8034, i4=-241, i5=128, i6=-50347, i7=-45842;
        float f1=-2.501F;
        byte by1=38;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-3421);

        for (i3 = 165; 1 < i3; --i3) {
            i4 = -13;
            Test.instanceCount += (i3 * Test.instanceCount);
            for (i5 = 1; i5 < 10; ++i5) {
                i7 = 1;
                while (++i7 < 2) {
                    f1 += (((i7 * i6) + by1) - Test.instanceCount);
                    i6 = (int)(((f1 % (Test.instanceCount | 1)) + -15033) - fMeth(f1));
                    i4 += (((i7 * i6) + i7) - i7);
                    i6 = i3;
                    Test.iArrFld = Test.iArrFld;
                    f1 += (-4191722733194198722L + (i7 * i7));
                }
                Test.instanceCount = Test.instanceCount;
                sArr[i3 - 1] = (short)17430;
                i4 <<= i7;
                Test.bArrFld[i3 + 1] = Test.bFld;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + by1 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l, long l1, boolean b) {

        int i1=-57527, i2=1, i14=53390, i15=81, i16=59399, i17=-169;
        float f=2.836F, fArr[]=new float[N];
        double d=82.118915;

        FuzzerUtils.init(fArr, -2.100F);

        lArrFld[(-8 >>> 1) % N] = (--i1);
        for (f = 2; f < 335; f++) {
            Test.instanceCount = ((--i2) + (iMeth() + i1));
            for (i14 = 1; i14 < 5; ++i14) {
                d = l;
                l = i14;
                Test.instanceCount = i15;
            }
            l1 >>= -7;
            if (b) break;
        }
        for (i16 = 8; 195 > i16; ++i16) {
            d += l;
            i17 -= i15;
            fArr[i16 + 1] = -5;
            i15 = (int)l;
            i2 = i17;
        }
        vMeth_check_sum += l + l1 + (b ? 1 : 0) + i1 + Float.floatToIntBits(f) + i2 + i14 + i15 +
            Double.doubleToLongBits(d) + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        byte by=-88, byArr[]=new byte[N];
        int i=65, i18=65, i19=-13666, i20=4478, i21=95, i22=8563, i23=3;
        double d1=123.83352;
        short s1=-21145;

        FuzzerUtils.init(byArr, (byte)-99);

        by |= (byte)((++i) * (++Test.instanceCount));
        vMeth(Test.instanceCount, -2L, false);
        Test.iArrFld[(i >>> 1) % N] = i;
        i = i;
        for (d1 = 334; d1 > 9; --d1) {
            i18 *= (int)Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
            Test.fFld = Test.fFld;
            i18 += (int)(((d1 * iFld) + i18) - iFld);
            Test.iArrFld[(int)(d1 + 1)] += iFld;
            for (i19 = (int)(d1); i19 < 77; ++i19) {
                Test.fFld += i19;
                Test.instanceCount += (((i19 * i) + Test.instanceCount) - Test.instanceCount);
            }
            switch (((-5 >>> 1) % 8) + 12) {
            case 12:
            case 13:
                Test.instanceCount += (long)(((d1 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                iFld += (int)d1;
                switch ((((iFld >>> 1) % 2) * 5) + 48) {
                case 53:
                case 58:
                    i21 = 1;
                    do {
                        Test.instanceCount *= i21;
                        Test.instanceCount |= Test.instanceCount;
                        for (i22 = 1; i22 < 1; ++i22) {
                            switch ((int)(((d1 % 3) * 5) + 108)) {
                            case 122:
                                i -= i22;
                                i -= (int)Test.instanceCount;
                                s1 = (short)i18;
                                i20 += (i22 * i20);
                                break;
                            case 117:
                                i23 += (i22 * i22);
                            case 111:
                                s1 *= (short)Test.instanceCount;
                            }
                            Test.instanceCount |= i19;
                            Test.fFld -= i;
                        }
                    } while (++i21 < 77);
                }
                break;
            case 14:
                iFld = -12;
                break;
            case 15:
                Test.instanceCount *= i;
                break;
            case 16:
                byArr[(int)(d1)] <<= (byte)i20;
                break;
            case 17:
                dFld /= (i19 | 1);
                break;
            case 18:
                dFld = 59330;
                break;
            case 19:
                Test.fFld += by;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
