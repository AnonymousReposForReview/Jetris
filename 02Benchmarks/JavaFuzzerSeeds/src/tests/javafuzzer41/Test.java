package tests.javafuzzer41;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:26:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-244L;
    public static float fFld=65.456F;
    public static int iFld=-49740;
    public double dFld=-28.10313;
    public static byte byFld=-91;
    public static volatile short sFld=-4601;
    public float fFld1=-43.814F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, byte by, long l) {

        int i3=-6, i4=-71;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4153009335139661812L);

        for (i3 = 17; i3 < 301; ++i3) {
            lArr = FuzzerUtils.long1array(N, (long)30202L);
            Test.iArrFld[i3 + 1] -= (int)-111.877F;
            i4 = -5;
            Test.iArrFld[i3 - 1] ^= i4;
            i2 = 43169;
            i4 += (((i3 * i4) + i2) - Test.instanceCount);
            i4 |= i3;
            i4 -= by;
        }
        i2 = (int)Test.instanceCount;
        long meth_res = i2 + by + l + i3 + i4 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, short s) {

        byte by1=-25;
        int i5=171, i6=0, i7=5, i8=1, i9=13, i10=0;
        boolean b=false;

        if (b) {
            iMeth(i1, by1, Test.instanceCount);
            for (i5 = 1; i5 < 374; i5++) {
                Test.fFld += (i5 * i5);
                Test.iArrFld[i5] += (int)2352261431L;
                i1 += i1;
                for (i7 = 1; 5 > i7; i7++) {
                    i8 *= (int)Test.instanceCount;
                    i6 += (i7 | Test.instanceCount);
                    for (i9 = i7; 2 > i9; i9++) {
                        i1 += 41829;
                        i10 = i7;
                        i8 = (int)Test.instanceCount;
                        i6 -= (int)Test.fFld;
                        Test.fFld = i8;
                    }
                }
            }
        } else {
            b = b;
        }
        vMeth1_check_sum += i1 + s + by1 + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0);
    }

    public static void vMeth() {

        short s1=22004;
        double d=-1.109217;
        int i11=-59884, i12=-10, iArr[]=new int[N];
        byte by2=-20;

        FuzzerUtils.init(iArr, -113);

        for (int i : iArr) {
            Test.instanceCount -= ((i * (++i)) - Math.abs(i));
            vMeth1(i, s1);
            i <<= i;
            d = d;
        }
        Test.iFld = -197;
        Test.iFld = (int)d;
        for (i11 = 2; i11 < 256; i11++) {
            Test.iFld += (int)Test.fFld;
            by2 <<= (byte)i11;
            Test.fFld *= Test.instanceCount;
            i12 <<= Test.iFld;
            try {
                Test.iFld = (i11 / Test.iArrFld[i11]);
                i12 = (Test.iFld / 147);
                i12 = (Test.iFld / -195);
            } catch (ArithmeticException a_e) {}
            i12 |= i12;
            d = i12;
        }
        vMeth_check_sum += s1 + Double.doubleToLongBits(d) + i11 + i12 + by2 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=-10, i14=107, i15=41173, i16=-13, i17=8, i18=-130, i19=-60605, i20=171, i21=231;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth();
        Test.iFld |= Test.iFld;
        for (i13 = 275; i13 > 3; i13 -= 3) {
            Test.iFld = 5;
            Test.instanceCount = i13;
            dFld -= Test.byFld;
        }
        Test.fFld += 2.933F;
        Test.iFld = i14;
        if (b1) {
            try {
                Test.iFld -= -11;
            }
            catch (NegativeArraySizeException exc2) {
                for (i15 = 2; i15 < 338; i15++) {
                    for (i17 = 2; i17 < 75; ++i17) {
                        Test.iFld &= Test.byFld;
                        for (i19 = 1; i19 < 2; i19++) {
                            i21 += i19;
                            Test.fFld -= Test.instanceCount;
                            i20 -= i14;
                            Test.iArrFld[i17 + 1] = i18;
                            i16 = (int)0L;
                            i20 += (((i19 * i19) + Test.fFld) - i18);
                            lArrFld[i15] *= Test.sFld;
                        }
                        i18 += (i17 * Test.iFld);
                        i20 += (int)fFld1;
                        bArr[i17] = true;
                        Test.iFld |= i18;
                        b1 = b1;
                        i18 ^= (int)-1L;
                    }
                    Test.iArrFld[i15] *= Test.iFld;
                    i21 += 208;
                }
            }
        } else if (b1) {
            lArrFld[(i19 >>> 1) % N] = i19;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
