package tests.javafuzzer3106;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:49:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2352894805L;
    public static short sFld=4197;
    public float fFld=-2.500F;
    public static boolean bFld=false;
    public double dFld=1.117437;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -28437);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i5=-2, i6=30110, i7=-1, i8=2, i9=-190;
        float f1=2.634F;
        boolean b=false;

        for (i5 = 5; i5 < 312; i5++) {
            i6 += (int)Test.instanceCount;
            switch ((((i6 >>> 1) % 5) * 5) + 61) {
            case 86:
                Test.iArrFld[i5 + 1] *= i5;
                for (i7 = 1; i7 < 5; i7++) {
                    i8 -= (int)Test.instanceCount;
                    i8 >>= i5;
                    f1 -= 56849L;
                    Test.instanceCount >>= Test.instanceCount;
                    Test.sFld = (short)i8;
                }
                if (b) break;
                break;
            case 71:
                Test.iArrFld[i5] = -85;
                i6 += (i5 ^ (long)f1);
                break;
            case 78:
                i6 = -4626;
                Test.instanceCount = Test.sFld;
                break;
            case 66:
                i6 /= (int)(i9 | 1);
                break;
            case 79:
                f1 += (i5 * i5);
            default:
                i9 -= i6;
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i9;
    }

    public void vMeth1() {


        vMeth2();
        vMeth1_check_sum += 0;
    }

    public void vMeth(int i1, int i2) {

        int i3=-244, i4=-49527, i10=5, i11=6, i12=-48112;
        float f2=0.252F;
        byte by=12;

        for (i3 = 1; i3 < 139; i3++) {
            i1 += (i3 - i1);
            vMeth1();
            for (f2 = 1; f2 < 11; ++f2) {
                fFld = i1;
                i4 = (int)f2;
                Test.iArrFld[i3 - 1] += i2;
            }
            if (false) {
                for (i11 = 11; i11 > 1; i11 -= 3) {
                    switch ((i3 % 2) + 42) {
                    case 42:
                        if (Test.bFld) {
                            i1 = Test.sFld;
                            Test.iArrFld[i11 + 1] *= (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            i2 += 6;
                            Test.instanceCount = Test.instanceCount;
                            vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + i10 + i11 + i12 + by;
                            return;
                        } else if (Test.bFld) {
                            fFld = Test.instanceCount;
                        } else {
                            i2 += i11;
                        }
                    case 43:
                        Test.instanceCount += by;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + i10 + i11 + i12 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i13=30521, i14=-8, i15=1, i16=98;
        float f=-54.199F;
        double d=-94.46238;

        i = 308;
        while (--i > 0) {
            f += i;
            vMeth(i, i);
            for (i13 = 1; i13 < 82; ++i13) {
                Test.instanceCount = i14;
                Test.bFld = true;
                d = 2;
                do {
                    i14 += (int)(d * i13);
                    i14 *= (int)Test.instanceCount;
                    i14 += (int)(((d * i14) + i13) - i14);
                    i14 -= i;
                    Test.iArrFld[i + 1] += i14;
                } while (--d > 0);
                if (Test.bFld) continue;
                for (i15 = 1; i15 < 2; i15++) {
                    Test.instanceCount += Test.instanceCount;
                    i16 >>= (int)-3384854619178115745L;
                    switch ((i15 % 10) + 56) {
                    case 56:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 57:
                        i16 += i15;
                        f += 13;
                        break;
                    case 58:
                        i16 += (i15 * i15);
                        break;
                    case 59:
                        i16 -= i15;
                        i14 -= i14;
                        break;
                    case 60:
                        if (Test.bFld) {
                            dFld -= d;
                        } else {
                            if (Test.bFld) break;
                            i14 += i15;
                        }
                        break;
                    case 61:
                        f += (i15 - i);
                        break;
                    case 62:
                    case 63:
                        i14 += (i15 * i15);
                        Test.instanceCount += (i15 * i15);
                    case 64:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 65:
                        i16 -= (int)8L;
                        break;
                    default:
                        if (Test.bFld) continue;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
