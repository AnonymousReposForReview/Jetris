package tests.javafuzzer121;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:45:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public double dFld=-1.78525;
    public static double dFld1=-2.65492;
    public static short sFld=750;
    public static int iFld=-241;
    public volatile int iFld1=7;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, long l2) {

        float f1=0.141F;
        int i4=-101, i5=-14, i6=-6, i7=-13749, i8=-1, i9=5, i10=11, i11=26, i12=-22428;

        for (f1 = 10; f1 < 201; f1++) {
            Test.dFld1 *= l1;
            i4 = i4;
            l1 = l1;
            i4 = 14;
            Test.iArrFld[(int)(f1 + 1)] += 62701;
            for (i5 = 1; i5 < 8; ++i5) {
                i4 %= (int)11.911F;
            }
            i4 += (int)f1;
        }
        for (i7 = 23; 392 > i7; ++i7) {
            i8 *= (int)l2;
            for (i9 = 1; i9 < 5; i9++) {
                for (i11 = 1; i11 < 2; i11++) {
                    Test.sFld = (short)Test.instanceCount;
                    Test.iArrFld[i9 + 1] = i12;
                }
            }
        }
        vMeth2_check_sum += l1 + l2 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12;
    }

    public static void vMeth1(int i3) {

        float f2=-51.136F;
        int i13=31014;

        vMeth2(Test.instanceCount, Test.instanceCount);
        for (f2 = 11; f2 < 201; f2++) {
            i13 += (int)(f2 * f2);
            i13 >>= (int)Test.instanceCount;
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f2) + i13;
    }

    public void vMeth(long l, boolean b, float f) {


        l = (long)dFld;
        vMeth1(Test.iFld);
        vMeth_check_sum += l + (b ? 1 : 0) + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=40806, i1=-46331, i2=46730, i14=-34283, i15=-9, i16=48928, i17=85, i18=78, i19=60857, i20=55081, i21=51,
            i22=251, iArr[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        float f3=-2.503F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(fArr, 2.598F);
        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(bArr, false);

        i += (int)Math.max(i ^ Math.min(Test.instanceCount, Test.instanceCount), (--i) - Test.instanceCount);
        for (i1 = 9; i1 < 379; i1++) {
            try {
                i = (i1 % iArr[i1 + 1]);
                iArr[i1 + 1] = (Test.iArrFld[i1 + 1] / i1);
                i = (-505597361 / Test.iArrFld[i1]);
            } catch (ArithmeticException a_e) {}
            i *= 2;
            i = i2;
            vMeth(Test.instanceCount, b1, -1.73F);
            f3 -= Test.instanceCount;
            Test.iFld = i1;
            Test.iArrFld[i1] = i1;
            Test.iFld += i1;
            i14 = 1;
            do {
                i = i2;
                b1 = b1;
                for (i15 = 1; i15 < 1; ++i15) {
                    if (b1) break;
                    dFld *= i15;
                    i -= iFld1;
                    fArr = fArr;
                    lArr[i1 + 1] = i16;
                }
            } while (++i14 < 68);
            i2 *= i15;
        }
        for (i17 = 136; 7 < i17; i17--) {
            for (i19 = 1; i19 < 194; i19++) {
                i += (10996 + (i19 * i19));
                i18 += (int)dFld;
                Test.sFld = (short)Test.instanceCount;
                for (i21 = 1; 2 > i21; ++i21) {
                    Test.sFld ^= (short)i2;
                    Test.iFld -= (int)Test.dFld1;
                    bArr[i21] = b1;
                }
                fArr[i19 - 1] = Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
