package tests.javafuzzer2776;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:57:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3258536564L;
    public static float fFld=0.766F;
    public static int iFld=-63692;
    public byte byFld=24;
    public double dFld=-1.3772;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -34905);
        FuzzerUtils.init(Test.lArrFld, 35486L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, double d, int i8) {

        int i9=2, i10=-204, i11=54643, i12=-63350, i13=-228, i14=13, iArr1[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -19378);
        FuzzerUtils.init(fArr, 27.229F);

        iArr1[(i7 >>> 1) % N] -= i7;
        for (i9 = 6; i9 < 146; i9++) {
            Test.instanceCount >>>= Test.instanceCount;
            i7 = i7;
            for (i11 = 1; i11 < 11; i11++) {
                i12 >>= i10;
                i7 = 0;
                i8 = i7;
                Test.instanceCount >>= i8;
                for (i13 = 1; 2 > i13; i13++) {
                    if (b) break;
                    fArr[i11] -= Test.instanceCount;
                    Test.instanceCount = i9;
                    Test.instanceCount *= Test.instanceCount;
                }
                Test.fFld /= (i11 | 1);
            }
        }
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=52486, i4=-16449, i5=-19826, i6=59813, i15=-3, i16=-8, i17=40885, i18=65, iArr[][]=new int[N][N];
        short s=-16399;

        FuzzerUtils.init(iArr, -847);

        iArr = (iArr = (iArr = (iArr = iArr)));
        for (i3 = 6; i3 < 176; i3 += 2) {
            for (i5 = 1; i5 < 18; i5 += 2) {
                i1 ^= i2;
            }
            i2 = (int)(Test.instanceCount++);
            i4 = (i1++);
            vMeth1(-223, 79.26890, i2);
            for (i15 = 1; i15 < 18; i15++) {
                for (i17 = i3; 2 > i17; i17 += 3) {
                    byte by=113;
                    Test.fFld += (((i17 * i2) + i4) - i6);
                    Test.instanceCount <<= i16;
                    switch ((i17 % 5) + 11) {
                    case 11:
                        Test.instanceCount += (i17 ^ by);
                        break;
                    case 12:
                        Test.instanceCount += (6765 + (i17 * i17));
                        break;
                    case 13:
                        i2 /= (int)(s | 1);
                        break;
                    case 14:
                        i16 += i17;
                        break;
                    case 15:
                        i *= -59;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i15 + i16 + i17 + i18 + s + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(float f) {

        short s1=18336;
        int i19=-16350, i20=26029, i21=10;
        double d1=0.114011;

        vMeth(Test.iFld, -62588, Test.iFld);
        Test.iFld = s1;
        for (i19 = 162; 7 < i19; --i19) {
            byte by1=-77;
            switch ((i19 % 1) + 10) {
            case 10:
                i20 -= Test.iFld;
                d1 -= Test.instanceCount;
                break;
            }
            i20 += i19;
            Test.iArrFld[i19 - 1] ^= by1;
            i20 ^= (int)Test.instanceCount;
        }
        Test.iFld *= i20;
        d1 *= i19;
        i21 = 1;
        while (++i21 < 222) {
            i20 += i21;
            i20 += i21;
            i20 -= i20;
        }
        long meth_res = Float.floatToIntBits(f) + s1 + i19 + i20 + Double.doubleToLongBits(d1) + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i22=-2, i23=1, i24=94, i25=-49525, i26=2, i27=43322, i28=-13, i29=14984, i30=-27603, i31=-11, i32=0;
        long l=22463L, l1=-11L;

        lMeth(Test.fFld);
        for (i22 = 10; i22 < 297; ++i22) {
            for (l = 2; l < 88; ++l) {
                Test.iFld += (10 + (l * l));
                i23 -= (int)Test.fFld;
                Test.instanceCount = byFld;
                Test.instanceCount += (-14 + (l * l));
                Test.iFld += (int)(l | i23);
                dFld *= 52748;
                Test.iFld = i23;
                Test.iFld -= (int)Test.instanceCount;
            }
            i23 += i22;
            i25 = 1;
            while (++i25 < 88) {
                i26 += byFld;
                i23 = i23;
                Test.iArrFld[i22] -= i25;
            }
        }
        for (i27 = 16; i27 < 317; ++i27) {
            i28 -= (int)Test.instanceCount;
            for (i29 = 2; i29 < 84; ++i29) {
                Test.instanceCount = i26;
                i28 >>= i22;
                i26 += (i29 ^ i27);
            }
            Test.fFld = 47830;
            Test.lArrFld[i27] += l;
            for (l1 = i27; l1 < 84; ++l1) {
                dFld = Test.fFld;
            }
            i32 = 1;
            while (++i32 < 84) {
                Test.iFld >>= 9;
                Test.iFld += -49344;
                Test.iFld *= i30;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
