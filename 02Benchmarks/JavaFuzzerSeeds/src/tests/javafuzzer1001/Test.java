package tests.javafuzzer1001;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:48:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=233L;
    public static boolean bFld=false;
    public static float fFld=-87.54F;
    public static byte byFld=45;
    public double dFld=0.102969;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, 11735);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l2, long l3, float f) {

        int i2=-89, i3=-229, i4=42198, i5=189, iArr[][]=new int[N][N];
        double d1=-18.82031;
        short s1=19250;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(iArr, 13);

        for (i2 = 301; i2 > 7; --i2) {
            f -= l3;
            for (d1 = 1; d1 < 6; ++d1) {
                i4 *= i4;
                f = Test.instanceCount;
                i5 = 2;
                do {
                    Test.bArrFld = Test.bArrFld;
                    i4 /= (int)(i3 | 1);
                    i4 *= i4;
                    l3 = i4;
                    l2 *= i2;
                    s1 = (short)i4;
                } while (--i5 > 0);
            }
            lArr[i2] = i5;
            if (i2 != 0) {
            }
            iArr[i2][i2 - 1] *= (int)l2;
        }
        long meth_res = l2 + l3 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d1) + i4 + i5 + s1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l1, int i1) {

        float f1=-1.885F;
        int i6=-65275, i7=-16724, i8=195, i9=191, iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 113.7599);
        FuzzerUtils.init(iArr1, 8);

        dMeth(l1, l1, f1);
        i6 = 1;
        do {
            i7 = 5;
            while (--i7 > 0) {
                f1 += (((i7 * i7) + i1) - Test.instanceCount);
                Test.instanceCount *= i7;
                for (i8 = i7; 1 > i8; ++i8) {
                    double d2=2.120585;
                    i1 = -2;
                    i9 %= (int)(i9 | 1);
                    dArr[i6 - 1] %= ((long)(d2) | 1);
                    i1 += i8;
                    switch ((i8 % 10) + 38) {
                    case 38:
                        Test.instanceCount = l1;
                    case 39:
                        Test.instanceCount &= -1;
                        iArr1 = iArr1;
                        i9 <<= i7;
                        break;
                    case 40:
                        if (Test.bFld) break;
                        break;
                    case 41:
                        Test.instanceCount = i8;
                        break;
                    case 42:
                        iArr1[i7 + 1] *= i7;
                        break;
                    case 43:
                        i9 *= i7;
                        break;
                    case 44:
                        iArr1[i8] -= i8;
                    case 45:
                        Test.bFld = Test.bFld;
                        break;
                    case 46:
                        Test.bFld = Test.bFld;
                        break;
                    case 47:
                        Test.bArrFld[i7 - 1][i8 - 1] = Test.bFld;
                    default:
                        i1 <<= i7;
                    }
                }
            }
        } while (++i6 < 354);
        vMeth1_check_sum += l1 + i1 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        double d=-1.35126;
        int i=81, i10=55, i11=-1755, i12=-61088, i13=13, i14=14131;
        short s=5318;
        byte by=27;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -45687L);

        for (d = 1; d < 146; d++) {
            i *= (s++);
            switch ((int)((d % 6) + 20)) {
            case 20:
                vMeth1(Test.instanceCount, i);
                i += (int)d;
                i = -12;
                break;
            case 21:
                l -= (long)Test.fFld;
                i *= by;
                for (i10 = 11; i10 > d; i10--) {
                    i11 = i;
                }
                lArr1[(int)(d + 1)] = i11;
                break;
            case 22:
                i11 -= (int)Test.fFld;
            case 23:
                for (i12 = 1; i12 < 11; i12++) {
                    i14 = i10;
                    i = s;
                }
                break;
            case 24:
                Test.fFld += (float)(d * d);
                break;
            case 25:
                s += (short)(d * i13);
                break;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i + s + by + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i15=4, i16=-13, i17=-43127, i18=0, i19=18, i20=-30020, i21=-3;
        short s2=2992;

        vMeth(Test.instanceCount);
        Test.iArrFld[(i15 >>> 1) % N] -= (int)Test.fFld;
        Test.instanceCount %= 206;
        for (i16 = 14; i16 < 346; i16++) {
            for (i18 = 4; i18 < 76; i18 += 2) {
                s2 = (short)i18;
                i19 >>= Test.byFld;
                switch ((i18 % 8) + 51) {
                case 51:
                    i20 = 1;
                    while (++i20 < 3) {
                        i15 = (int)dFld;
                        Test.fFld -= -11;
                        try {
                            i15 = (i18 / i18);
                            i17 = (i18 / -68);
                            Test.iArrFld[i18 - 1] = (i16 / i20);
                        } catch (ArithmeticException a_e) {}
                        i15 += i16;
                    }
                    i21 = 1;
                    while (++i21 < 3) {
                        switch ((i21 % 2) + 84) {
                        case 84:
                            i17 -= (int)-239L;
                            i15 += i21;
                            break;
                        case 85:
                            if (Test.bFld) continue;
                            i17 -= Test.byFld;
                            Test.instanceCount *= (long)dFld;
                            break;
                        default:
                            i17 += i21;
                            Test.bFld = Test.bFld;
                        }
                        Test.iArrFld[i21] *= (int)Test.fFld;
                        Test.iArrFld[i21 - 1] = (int)Test.fFld;
                        i15 = (int)-56.127324;
                        dFld = Test.fFld;
                        i19 += (30 + (i21 * i21));
                        i17 += i21;
                        i19 *= i19;
                        s2 *= (short)2612;
                    }
                    break;
                case 52:
                    Test.instanceCount += (i18 ^ i21);
                    break;
                case 53:
                    i19 <<= i20;
                    break;
                case 54:
                    i19 ^= i19;
                case 55:
                    i19 += i16;
                    break;
                case 56:
                    i15 -= (int)Test.instanceCount;
                case 57:
                case 58:
                    Test.instanceCount /= (i17 | 1);
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
