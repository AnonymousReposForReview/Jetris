package tests.javafuzzer856;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:55:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=40566L;
    public static byte byFld=9;
    public static boolean bFld=true;
    public int iFld1=2;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=53133, i7=184, i8=-161, i9=-20782, i10=-11, i11=-5531, i12=13, iArr[]=new int[N];
        short s1=-25584;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -14932);
        FuzzerUtils.init(lArr1, 9L);

        i6 = i6;
        i7 = 1;
        while (++i7 < 357) {
            i6 = s1;
            iArr[i7 - 1] -= (int)-6513L;
            switch ((i7 % 1) + 6) {
            case 6:
                Test.instanceCount -= Test.byFld;
                break;
            default:
                for (i8 = 1; 5 > i8; ++i8) {
                    try {
                        i10 = (-1202174729 % i8);
                        i10 = (-21 / i9);
                        i6 = (i6 % 37331);
                    } catch (ArithmeticException a_e) {}
                    for (i11 = 1; i11 < 2; ++i11) {
                        i9 <<= s1;
                        lArr1[i8] -= (long)-1.1011F;
                        i9 *= (int)-106L;
                        Test.instanceCount -= Test.instanceCount;
                        iArr[i7] -= i9;
                        if (Test.bFld) continue;
                    }
                }
            }
        }
        long meth_res = i6 + i7 + s1 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, double d2, long l2) {

        int i4=4, i5=-64907, i13=-8, i14=33179, i15=-14, i16=-19733;
        short s=24756;
        float f=1.13F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3611486653408134191L);

        for (i4 = 16; 271 > i4; i4++) {
            s >>>= (short)(iMeth() * i5);
            for (i13 = 1; i13 < 6; ++i13) {
                for (i15 = 1; i15 < 2; i15++) {
                    i5 = (int)Test.instanceCount;
                    d2 += f;
                    l2 += (long)f;
                    i16 += (i15 * i15);
                    switch ((i13 % 2) + 92) {
                    case 92:
                        d2 = d2;
                        Test.byFld += (byte)i13;
                        break;
                    case 93:
                        i14 = i14;
                        i14 = -179;
                        i5 -= i4;
                        lArr2[i4 - 1] >>= 7;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += l1 + Double.doubleToLongBits(d2) + l2 + i4 + i5 + s + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(int i2, double d1, int i3) {

        int i17=189, i18=-47211, i19=3, i20=12, i21=134;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.65971);

        vMeth1(-1492475026638437477L, d1, Test.instanceCount);
        i2 += -6;
        for (i17 = 8; i17 < 202; i17++) {
            i19 = 1;
            while (++i19 < 8) {
                i2 += (((i19 * i18) + i19) - Test.instanceCount);
                i3 = (int)Test.instanceCount;
                i3 += (i19 ^ i3);
                dArr[i19 + 1] = Test.instanceCount;
                Test.bFld = Test.bFld;
                for (i20 = i17; i20 < 1; i20++) {
                    d1 -= 13L;
                    i18 += (((i20 * Test.instanceCount) + i2) - i21);
                    i2 >>>= (int)Test.instanceCount;
                    i2 += (int)d1;
                    i3 += Test.byFld;
                }
            }
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d1) + i3 + i17 + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr3) {

        double d3=-31.36785, dArr1[]=new double[N];
        int i22=-13, i23=-1, i24=62, i25=12, i26=-44, i27=-99, i28=12836, i29=-157, i30=144, iArr1[][]=new int[N][N];
        long l3=-10L;
        float f1=1.974F;

        FuzzerUtils.init(dArr1, -2.34704);
        FuzzerUtils.init(iArr1, 53);

        vMeth(iFld1, d3, iFld1);
        d3 -= iFld1;
        for (i22 = 1; i22 < 134; i22++) {
            for (l3 = 9; l3 < 188; ++l3) {
                d3 = i24;
                iFld1 = i23;
            }
        }
        for (i25 = 297; i25 > 16; --i25) {
            i27 = 89;
            while ((i27 -= 3) > 0) {
                f1 += Test.instanceCount;
                for (i28 = 1; i28 < 3; i28++) {
                    short s2=11477;
                    dArr1 = dArr1;
                    iFld1 += i30;
                    i24 += i28;
                    i24 += (int)(1.1022F + (i28 * i28));
                    if (Test.bFld) {
                        dArr1 = dArr1;
                        switch ((i28 % 2) + 10) {
                        case 10:
                            switch ((i25 % 2) + 71) {
                            case 71:
                                i24 *= i23;
                                Test.instanceCount -= 16790;
                                iArr1[i28][i27 - 1] = i23;
                                break;
                            case 72:
                                i29 += (((i28 * i23) + i27) - i23);
                                i30 *= i23;
                                iArr1[i27 + 1][i27] = -5;
                                s2 = (short)i22;
                                break;
                            default:
                                Test.instanceCount += (i28 * i28);
                                i26 -= i30;
                            }
                            break;
                        case 11:
                            i26 = iFld1;
                            break;
                        }
                    } else {
                        Test.instanceCount += (i28 * i28);
                    }
                }
                i30 += (i27 | Test.byFld);
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
