package tests.javafuzzer2586;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:56:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1359462854261885923L;
    public static short sFld=-7780;
    public static double dFld=-8.96409;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l2) {

        int i5=-5, i6=-20, i7=8382, i8=217, iArr[]=new int[N];
        byte by=97;
        boolean b=true;
        double d2=-125.116705, dArr[]=new double[N];
        long l3=1996711270L;
        float f1=-63.95F;

        FuzzerUtils.init(dArr, -108.66254);
        FuzzerUtils.init(iArr, -3);

        for (i5 = 12; i5 < 329; i5++) {
            i6 <<= by;
            l2 *= i5;
            b = b;
            Test.instanceCount -= i6;
            d2 -= i6;
            i7 += i5;
            if (b) {
                if (i7 != 0) {
                }
                l2 *= 8;
            } else {
                i6 *= i7;
            }
        }
        for (l3 = 11; l3 < 239; l3++) {
            i7 = i6;
            i7 += (int)(l3 | (long)f1);
            iArr = iArr;
        }
        long meth_res = l2 + i5 + i6 + by + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i7 + l3 + i8 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(short s, long l1) {

        float f=10.705F;
        int i1=-48, i2=200, i3=10, i4=10, i9=22608, i10=10;
        double d=2.100841;

        f -= (--f);
        for (i1 = 7; i1 < 147; i1++) {
            for (i3 = 1; i3 < 11; ++i3) {
                i2 += i3;
            }
            i2 *= (-24282 + (i4++));
            d *= (((i2 + i1) - (--Test.instanceCount)) * (d + Math.max(-61210, i2)));
            i4 >>= ((i4 - Math.min(9880, i4)) - ((i4++) + Math.min(i2, i4)));
            iMeth1(l1);
            for (i9 = 1; i9 < 11; i9++) {
                i4 -= -93;
            }
            i4 = (int)-112.982F;
            switch ((i1 % 3) + 94) {
            case 94:
                l1 = 10384;
                i4 -= (int)61L;
                break;
            case 95:
                Test.iArrFld[i1] >>= i1;
            case 96:
                i4 += i1;
                break;
            }
        }
        long meth_res = s + l1 + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i9 + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i=7;

        i -= iMeth(Test.sFld, l);
        vMeth_check_sum += l + i;
    }

    public void mainTest(String[] strArr1) {

        int i11=10;

        vMeth(Test.instanceCount);
        Test.dFld = i11;
        Test.dFld = i11;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
