package tests.javafuzzer3452;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:36:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3026054767L;
    public double dFld=2.112402;
    public short sFld=-2625;
    public static int iFld=-140;
    public static double dFld1=-2.65803;
    public boolean bFld=true;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, long l) {

        int i6=-17213, i7=-1, i8=-59960, i9=1, i10=5, i11=25283, iArr1[]=new int[N];
        float f4=24.760F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -6673);
        FuzzerUtils.init(sArr, (short)14214);

        l *= Test.iFld;
        switch (((Test.iFld >>> 1) % 4) + 92) {
        case 92:
            Test.instanceCount = Test.iFld;
            for (i6 = 4; i6 < 162; ++i6) {
                Test.iFld |= (int)l;
            }
            Test.iFld <<= (int)l;
            Test.iFld >>= (int)l;
        case 93:
            for (i8 = 1; i8 < 296; ++i8) {
                i10 = 1;
                while (++i10 < 6) {
                    i11 = 1;
                    do {
                        iArr1[i10] -= i9;
                        sArr[(Test.iFld >>> 1) % N] -= (short)i9;
                        f4 += i11;
                        i7 += (i11 * i11);
                        l = i6;
                    } while (++i11 < 1);
                }
            }
        case 94:
            iArr1[(Test.iFld >>> 1) % N] = (int)-6L;
            break;
        case 95:
            l = Test.iFld;
            break;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + l + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f4) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth() {

        int i4=-11, i5=-54, i12=43734, i13=0, i14=167, i15=54841, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4128371463834443717L);
        FuzzerUtils.init(iArr2, -184);

        Test.iFld |= 55351;
        Test.iFld += (Test.iFld++);
        for (i4 = 2; 149 > i4; i4++) {
            vMeth1(61.12471, 45261L);
            Test.dFld1 -= Test.iFld;
            for (i12 = 1; i12 < 11; i12++) {
                float f5=-1.410F;
                lArr[i12 - 1] = Test.instanceCount;
                try {
                    iArr2[i12 + 1] = (251 % iArr2[i12]);
                    Test.iFld = (i12 % -23167);
                    i13 = (i13 / 1744143304);
                } catch (ArithmeticException a_e) {}
                f5 += (((i12 * Test.instanceCount) + i4) - Test.instanceCount);
                for (i14 = 1; i14 < 2; ++i14) {
                    i5 -= (int)f5;
                    Test.dFld1 += -8787;
                    f5 = i12;
                    lArr[i4] >>= i14;
                }
                i15 -= (int)1.180F;
            }
        }
        long meth_res = i4 + i5 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f2) {

        int i3=-5, i16=11, i17=33792, i18=31662, i19=-48, i20=-12, iArr[]=new int[N];
        float f3=2.591F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(byArr, (byte)15);

        iArr[(i3 >>> 1) % N] *= (int)f3;
        i3 += iMeth();
        i16 = 317;
        while (--i16 > 0) {
            Test.iFld >>= i3;
            i3 += (i16 + Test.instanceCount);
            iArr[i16 + 1] |= (int)7805L;
            for (i17 = 1; i17 < 5; i17++) {
                Test.instanceCount *= Test.iFld;
                for (i19 = 1; 2 > i19; i19 += 3) {
                    byArr[i19 + 1] += (byte)f2;
                    iArr[i17 + 1] = 201;
                    i18 = (int)Test.instanceCount;
                    Test.dFld1 -= Test.instanceCount;
                    Test.instanceCount += (27178 + (i19 * i19));
                }
            }
            iArr[(i3 >>> 1) % N] >>= -133;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i3 + Float.floatToIntBits(f3) + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i1=11, i2=-2810, i21=175, i22=-168, i24=-48100, i25=9, i26=-34412, i27=19994, i28=-48, i29=7;
        float f=3.44F, f1=-106.412F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 9L);
        FuzzerUtils.init(fArr, -81.563F);

        for (i = 16; i < 357; i++) {
            i1 += (i | i);
            i1 += (137 + (i * i));
            i1 = i1;
        }
        for (f = 12; f < 233; ++f) {
            switch ((int)((f % 2) + 27)) {
            case 27:
                i1 += (int)dFld;
            case 28:
                f1 += sFld;
                break;
            default:
                Test.instanceCount += (-Test.instanceCount);
            }
            vMeth(1.532F);
            Test.iFld *= i1;
            i1 = i1;
            Test.instanceCount %= ((long)(f) | 1);
            iArrFld[(int)(f + 1)] += (int)Test.instanceCount;
            for (i21 = 114; i21 > 6; i21 -= 2) {
                iArrFld[i21 + 1] -= (int)Test.instanceCount;
                i22 += i21;
                i1 -= i21;
            }
            i2 += (158 + (f * f));
            Test.dFld1 = Test.instanceCount;
        }
        switch (((57973 >>> 1) % 9) + 70) {
        case 70:
            for (i24 = 5; i24 < 211; i24++) {
                i1 += (int)Test.instanceCount;
                switch ((i24 % 2) + 36) {
                case 36:
                    iArrFld[i24 + 1] >>= -3;
                    switch ((i24 % 6) + 83) {
                    case 83:
                        for (i26 = 7; i26 < 122; ++i26) {
                            for (i28 = 1; 2 > i28; i28++) {
                                i22 -= i25;
                                i2 |= (int)Test.instanceCount;
                            }
                        }
                        break;
                    case 84:
                        i2 += (int)Test.dFld1;
                        break;
                    case 85:
                        i27 >>= i1;
                        break;
                    case 86:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 87:
                        bFld = bFld;
                    case 88:
                        iArrFld[i24] -= (int)f;
                        break;
                    }
                    break;
                case 37:
                    Test.instanceCount = 2;
                }
            }
        case 71:
            i22 = 106;
        case 72:
            i2 = (int)Test.instanceCount;
            break;
        case 73:
            Test.instanceCount *= Test.instanceCount;
            break;
        case 74:
            iArrFld[(i25 >>> 1) % N] *= -12;
            break;
        case 75:
            dFld -= Test.instanceCount;
            break;
        case 76:
            iArrFld[(i25 >>> 1) % N] += i22;
            break;
        case 77:
            fArr[(i27 >>> 1) % N] = Test.instanceCount;
            break;
        case 78:
            bFld = bFld;
            break;
        default:
            lArr1[(Test.iFld >>> 1) % N] = Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
