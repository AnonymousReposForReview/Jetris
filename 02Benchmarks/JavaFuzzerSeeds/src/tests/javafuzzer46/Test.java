package tests.javafuzzer46;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:32:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-19843L;
    public float fFld=2.260F;
    public static double dFld=-89.123052;
    public static short sFld=-6298;
    public static byte byFld=-6;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.fArrFld, -98.51F);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, float f1, byte by) {

        short s=1379;
        int i9=80, i10=-18960, i11=-85, i12=7, i13=-55, i14=-136, i15=-22808, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5);

        f1 *= -122;
        Test.dFld += Test.instanceCount;
        s = (short)i8;
        for (i9 = 14; i9 < 227; i9++) {
            f1 = i10;
            for (i11 = 8; 1 < i11; --i11) {
                by += (byte)Test.instanceCount;
                iArr[i9 + 1] = i12;
                s += (short)(((i11 * i12) + i10) - i11);
                Test.instanceCount -= Test.instanceCount;
                for (i13 = 1; i13 < 2; i13++) {
                    iArr[i13] = -11;
                    try {
                        i14 = (i12 % i14);
                        i14 = (iArr[i9] % -383709639);
                        iArr[i13] = (i13 % 9867);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i8;
                }
                i15 *= i10;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + by + s + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth1(int i6, float f, int i7) {

        double d=83.67477;
        float f2=-67.964F;
        int i16=151, i17=-13, i18=5;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, 2554918830L);

        d = 1;
        while (++d < 134) {
            i7 = (int)(-(f++));
            i7 += (int)d;
            try {
                i6 = (132 % i6);
                i7 = (i6 / -1625813069);
                i6 = (217 % i6);
            } catch (ArithmeticException a_e) {}
            switch (((iMeth(0, f, (byte)(93)) >>> 1) % 6) + 66) {
            case 66:
                i6 += (int)(((d * f2) + i7) - i6);
                Test.iArrFld[(int)(d - 1)] <<= i6;
                switch ((int)(((d % 1) * 5) + 125)) {
                case 128:
                    i16 = 1;
                    do {
                        for (i17 = 1; i17 < 1; ++i17) {
                            i7 = i7;
                            i7 += (((i17 * Test.instanceCount) + i6) - i7);
                            Test.sFld += (short)(i17 - i6);
                            i18 *= (int)Test.instanceCount;
                            Test.fArrFld[(int)(d + 1)] += 73L;
                        }
                    } while (++i16 < 12);
                    break;
                default:
                    i18 *= (int)Test.instanceCount;
                }
                break;
            case 67:
                i7 += (int)(d * d);
                break;
            case 68:
                i18 = (int)Test.instanceCount;
                break;
            case 69:
                lArr2[(int)(d + 1)][(int)(d)] >>>= 14;
            case 70:
                i7 = i16;
                break;
            case 71:
                Test.byFld <<= (byte)i7;
                break;
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i16
            + i17 + i18 + FuzzerUtils.checkSum(lArr2);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i5=-114, i19=135, i20=3, i21=52855, i22=62;
        float f3=2.192F, f4=-42.832F, fArr[]=new float[N];
        double d1=-1.61705;
        long l1=695185414L, lArr1[]=new long[N];
        boolean b=true;

        FuzzerUtils.init(fArr, 32.578F);
        FuzzerUtils.init(lArr1, 0L);

        fArr[(i5 >>> 1) % N] -= ((++lArr1[(i5 >>> 1) % N]) * (Test.instanceCount - lMeth1(i5, f3, i5)));
        f3 = i5;
        for (d1 = 385; 8 < d1; --d1) {
            f3 = f4;
            for (i20 = 4; i20 > 1; --i20) {
                i21 -= i5;
                Test.instanceCount = 64946;
                i19 -= i21;
                i21 += (int)8L;
                lArr1[i20 + 1] = i5;
                f4 = i19;
                i22 = 1;
                while (++i22 < 2) {
                    if (true) {
                        i21 += (((i22 * i5) + i5) - l1);
                    } else if (b) {
                        f4 += -1;
                    }
                }
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + i19 + Float.floatToIntBits(f4) +
            i20 + i21 + i22 + l1 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=14456, i2=-196, i3=167, i4=-8, i23=80, i24=6, i25=-55025, i26=-26054, i27=0, i28=20, i29=-4,
            i30=23387;
        long l=11L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2616696459L);

        for (i = 4; i < 198; i++) {
            i1 += (((i * Test.instanceCount) + fFld) - i);
            for (i2 = i; i2 < 129; i2++) {
                for (l = 1; l < 1; ++l) {
                    lArr[i2] += ((--i4) - Math.max(l, Test.instanceCount));
                    i1 >>= (i4 * ((i4 * i1) + -189));
                    i3 += (int)((++i4) - lMeth());
                    Test.iArrFld[i2 + 1] += Test.sFld;
                    i4 >>>= i1;
                    Test.instanceCount >>= Test.instanceCount;
                    Test.iArrFld[i2 - 1] |= (int)l;
                    Test.iArrFld = Test.iArrFld;
                    i3 *= (int)Test.dFld;
                    i1 *= (int)Test.instanceCount;
                }
                for (i23 = 1; i23 < 1; i23++) {
                    fFld = Test.sFld;
                }
                try {
                    Test.iArrFld[i2] = (i23 % i4);
                    i1 = (49 / i2);
                    i4 = (-57 % i3);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld = Test.iArrFld;
                dArrFld[i + 1] += i2;
            }
            Test.instanceCount ^= 42967;
            i4 += i1;
            for (i25 = 6; i25 < 129; ++i25) {
                i4 = Test.sFld;
                for (i27 = 1; 2 > i27; i27++) {
                    Test.dFld -= 64566;
                    i3 = (int)-1.53718;
                }
                Test.dFld += i26;
                for (i29 = 1; 2 > i29; i29++) {
                    i1 *= (int)l;
                    Test.dFld = i27;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
