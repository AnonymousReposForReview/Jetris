package tests.javafuzzer2502;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:38:51 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12798L;
    public volatile byte byFld=46;
    public static double dFld=-124.96166;
    public int iFld=-32403;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -108);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1(int i7, int i8) {

        int i10=61, i11=-55031, i12=-14;
        boolean b=true;

        for (int i9 : Test.iArrFld) {
            Test.iArrFld[(i9 >>> 1) % N] = -77;
            i7 *= (int)Test.instanceCount;
            i9 = (int)2L;
            i10 = 1;
            while (++i10 < 4) {
                b = b;
                Test.instanceCount = i7;
                for (i11 = 1; i11 < 1; i11++) {
                    i12 -= byFld;
                    Test.iArrFld[i10 + 1] += i9;
                    if (b) break;
                    i8 += i8;
                    Test.instanceCount <<= -128;
                    i8 += (0 + (i11 * i11));
                }
                Test.instanceCount += (i10 + i8);
            }
        }
        vMeth1_check_sum += i7 + i8 + i10 + (b ? 1 : 0) + i11 + i12;
    }

    public int iMeth(double d1, long l, int i4) {

        int i5=-56297, i6=27574, i13=-52, i15=236, i16=5, i17=-6, i18=30656, i19=-21725;
        float f1=-86.695F;
        short s=-11075;
        boolean b1=true;

        for (i5 = 7; i5 < 218; ++i5) {
            Test.iArrFld[i5 + 1] *= (++i6);
            l += (((l++) - (i4 + 3617537830L)) - (i4 = (i5 - i4)));
            vMeth1(i13, i4);
        }
        for (int i14 : Test.iArrFld) {
            i15 += -8;
            i16 += 59086;
            i14 += (int)f1;
            for (i17 = 4; 1 < i17; --i17) {
                i19 = 1;
                do {
                    l += (i19 * s);
                    switch (((i6 >>> 1) % 8) + 123) {
                    case 123:
                        Test.iArrFld = Test.iArrFld;
                        d1 = i6;
                        if (b1) break;
                        break;
                    case 124:
                        l += i6;
                        break;
                    case 125:
                        i16 += (i19 | i14);
                        break;
                    case 126:
                        Test.iArrFld[i19 - 1] = (int)d1;
                        break;
                    case 127:
                        i13 = i17;
                        break;
                    case 128:
                        l >>= 16L;
                        break;
                    case 129:
                        if (b1) continue;
                        break;
                    case 130:
                        Test.iArrFld[i17 - 1] += 10;
                        break;
                    }
                } while (++i19 < 2);
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + l + i4 + i5 + i6 + i13 + i15 + i16 + Float.floatToIntBits(f1) +
            i17 + i18 + i19 + s + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(double d, int i, int i1) {

        int i2=-109, i3=-169;
        float f=0.757F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3273971279L);

        i2 = 333;
        do {
            i3 = 1;
            do {
                f += (float)Double.longBitsToDouble(lArr[i2 + 1]);
                i *= (int)(f - (++Test.iArrFld[i2]));
                Test.iArrFld[i2] += Math.abs((int)((i3 % ((long)(f) | 1)) - Math.min(i1, i2)));
                iMeth(d, Test.instanceCount, -151);
                Test.instanceCount = -233;
                i >>= i;
                if (b2) continue;
                if (i3 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + Float.floatToIntBits(f) + (b2 ?
                        1 : 0) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i1 *= (int)-32.66F;
            } while (++i3 < 5);
            if (false) continue;
            i1 = (int)-62.94801;
            f = i;
            i1 = 18286;
        } while (--i2 > 0);
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + Float.floatToIntBits(f) + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.dFld, iFld, iFld);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
