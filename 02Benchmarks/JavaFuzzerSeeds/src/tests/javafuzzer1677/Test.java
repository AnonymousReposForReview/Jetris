package tests.javafuzzer1677;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public static double dFld=36.87709;
    public static byte byFld=-104;
    public volatile long lFld=6L;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.byArrFld, (byte)-105);
        FuzzerUtils.init(Test.lArrFld, -218L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i7, double d) {

        long l1=-30L;
        int i8=-36342, i9=8046, i10=4, i11=-53662, i12=-3, i13=-115, i14=8;
        double d1=-119.67891;
        byte by1=-2;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 13.216F);

        for (l1 = 386; l1 > 10; l1 -= 2) {
            i8 *= i8;
            for (d1 = 1; 8 > d1; d1++) {
                float f=-1.908F;
                for (i10 = 1; i10 < 2; i10 += 3) {
                    fArr = fArr;
                    by1 += (byte)(26933 + (i10 * i10));
                }
                i9 <<= i8;
                for (i12 = 1; i12 < 2; ++i12) {
                    d = i7;
                }
                f += i8;
                Test.instanceCount = i10;
                i14 = 1;
                while (++i14 < 2) {
                    i8 = i9;
                    Test.iArrFld[i14 - 1] <<= (int)Test.instanceCount;
                    i13 = i12;
                }
            }
        }
        long meth_res = l + i7 + Double.doubleToLongBits(d) + l1 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 +
            by1 + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3, int i4, byte by) {

        int i5=-9, i6=246, i15=-6, i16=7, i17=-2, i18=20319;
        double d2=0.53091;
        float f1=32.788F;
        long l2=-64400L, lArr[]=new long[N];
        boolean b=true;

        FuzzerUtils.init(lArr, 9L);

        for (i5 = 8; i5 < 215; ++i5) {
            i3 = (iMeth(Test.instanceCount, 7, d2) - i15);
            i15 -= -8;
            for (i16 = 8; i16 > 1; --i16) {
                lArr[i5 - 1] += i16;
                i4 *= (int)f1;
                switch ((((i16 >>> 1) % 4) * 5) + 9) {
                case 15:
                    i4 = (int)d2;
                    f1 += i15;
                case 24:
                    i3 += (-32377 + (i16 * i16));
                    break;
                case 14:
                    switch ((i5 % 2) + 56) {
                    case 56:
                        i17 += (i16 ^ Test.instanceCount);
                        for (l2 = 2; 1 < l2; l2 -= 2) {
                            if (b) break;
                            try {
                                i3 = (-57494 / i4);
                                Test.iArrFld[i16 + 1] = (i4 % 194);
                                i3 = (-28252 / Test.iArrFld[i5]);
                            } catch (ArithmeticException a_e) {}
                        }
                    case 57:
                        if (i4 != 0) {
                            vMeth1_check_sum += i3 + i4 + by + i5 + i6 + Double.doubleToLongBits(d2) + i15 + i16 + i17
                                + Float.floatToIntBits(f1) + l2 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    default:
                        i4 = i4;
                    }
                    break;
                case 26:
                    Test.iArrFld[i16 + 1] &= (int)l2;
                    break;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + by + i5 + i6 + Double.doubleToLongBits(d2) + i15 + i16 + i17 +
            Float.floatToIntBits(f1) + l2 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, short s) {

        int i1=1, i2=2, i19=-95, i20=50556, i21=-6257, i22=9;
        byte by2=120;
        float f2=2.204F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 27.89653);

        i -= Test.iArrFld[(-13 >>> 1) % N];
        for (i1 = 12; i1 < 356; ++i1) {
            vMeth1(i2, -18, by2);
            dArr[i1 - 1] -= f2;
            f2 = s;
            i2 >>>= i;
            i += (int)Test.dFld;
            for (i19 = 1; i19 < 5; ++i19) {
                i2 -= (int)f2;
                i = i19;
                Test.iArrFld = Test.iArrFld;
                i20 <<= i1;
                for (i21 = i19; 2 > i21; i21++) {
                    Test.byArrFld[i19 - 1] = (byte)-23.81408;
                    by2 += (byte)(i21 * i21);
                }
            }
        }
        vMeth_check_sum += i + s + i1 + i2 + by2 + Float.floatToIntBits(f2) + i19 + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i23=-225, i24=-91, i25=10, i26=146, i27=-229, i28=44665, i29=-8, i30=130;
        short s1=-24671;
        float f3=95.172F;
        boolean b1=false;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -1.6749);

        vMeth(i23, s1);
        i24 = 252;
        do {
            for (i25 = i24; i25 < 100; ++i25) {
                i23 -= 0;
                i27 = 1;
                while (++i27 < 1) {
                    i23 *= (int)Test.dFld;
                    if (b1) {
                        i23 += (((i27 * i23) + f3) - i24);
                    } else if (b1) {
                        f3 -= -8;
                        Test.byFld = (byte)i24;
                    } else if (b1) {
                        Test.instanceCount -= -41793;
                        i23 = (int)Test.instanceCount;
                        dArr1[i24 - 1] += Test.dFld;
                    } else {
                        i23 = i25;
                    }
                    i23 = i26;
                    dArr1[i25] += i23;
                    if (b1) {
                        Test.lArrFld[i27 + 1] *= Test.instanceCount;
                        Test.instanceCount = (long)-2.317F;
                        if (b1) break;
                        i26 *= i23;
                    }
                    Test.iArrFld[i25 + 1] += i23;
                }
                i26 += i25;
            }
            i28 = 100;
            do {
                for (i29 = i24; i29 < 1; i29++) {
                    lFld >>= i30;
                    lFld -= Test.byFld;
                    Test.dFld -= Test.dFld;
                    i23 += (((i29 * i30) + i29) - i25);
                    f3 -= f3;
                }
            } while (--i28 > 0);
        } while (--i24 > 0);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
