package tests.javafuzzer1151;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:54:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=978763327L;
    public static float fFld=-17.43F;
    public static short sFld=-1824;
    public static volatile int iFld=82;
    public double dFld=-73.7186;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=-40, i5=197, i6=13, i7=3, i8=18644, i9=-12, i10=45723, i11=136;

        for (i4 = 5; i4 < 159; i4++) {
            i5 |= -88;
            i5 = i4;
            i5 = 6;
        }
        for (i6 = 5; i6 < 233; ++i6) {
            i7 += 130;
            i7 -= i4;
            Test.sFld = (short)-24612;
            Test.instanceCount += i6;
        }
        for (i8 = 19; i8 < 327; ++i8) {
            Test.fFld = 222;
            for (i10 = 5; i10 > i8; i10 -= 2) {
                i9 += (((i10 * i4) + i11) - i8);
            }
            Test.sFld -= (short)Test.fFld;
            i5 -= (int)Test.instanceCount;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i, long l) {

        int i1=2, i2=207, i3=-5, i12=5, iArr[][]=new int[N][N];
        boolean b=false;
        byte by=102;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 199L);
        FuzzerUtils.init(iArr, -16);

        for (i1 = 217; i1 > 2; --i1) {
            Test.instanceCount += i1;
            i3 = 1;
            while (++i3 < 7) {
                Test.fFld -= (Test.fFld + (lMeth() ^ i1));
                if (b) break;
                i += (((i3 * i2) + i) - i1);
                i2 |= i1;
                by -= (byte)Test.instanceCount;
                lArr[i3 - 1] = i12;
                l >>= i12;
            }
            lArr = lArr;
            l ^= i2;
        }
        iArr[(i2 >>> 1) % N][(i12 >>> 1) % N] >>>= 59307;
        b = b;
        i12 = (int)Test.fFld;
        vMeth1_check_sum += i + l + i1 + i2 + i3 + (b ? 1 : 0) + by + i12 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d) {

        int i13=10, i14=115, i15=3516, i16=152, i17=-29684, i18=-98, i19=76, i20=52083, i21=-38991, iArr1[][]=new
            int[N][N];
        float f=0.235F;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 0);

        vMeth1(i13, Test.instanceCount);
        i14 = 1;
        do {
            Test.instanceCount += (-4695 + (i14 * i14));
        } while (++i14 < 386);
        for (f = 4; f < 256; ++f) {
            Test.fFld *= -6L;
        }
        for (i16 = 8; i16 < 280; i16++) {
            for (i18 = 1; 6 > i18; i18++) {
                for (i20 = 1; i20 < 2; i20++) {
                    try {
                        iArr1[i18 - 1][i20] = (i16 / i14);
                        i15 = (i15 % i15);
                        i19 = (-23137 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    switch ((i20 % 9) + 50) {
                    case 50:
                        Test.iFld &= -12;
                        if (b1) break;
                        break;
                    case 51:
                        i19 *= i18;
                        i17 = (int)d;
                        break;
                    case 52:
                        i21 >>>= i15;
                        break;
                    case 53:
                        if (b1) continue;
                    case 54:
                        d = -11;
                        break;
                    case 55:
                        i21 <<= i13;
                        break;
                    case 56:
                        Test.instanceCount = i15;
                        break;
                    case 57:
                        b1 = b1;
                        break;
                    case 58:
                        Test.fFld *= i19;
                    default:
                        i15 -= (int)d;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i13 + i14 + Float.floatToIntBits(f) + i15 + i16 + i17 + i18 +
            i19 + i20 + i21 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f1=-123.256F;
        int i22=-98, i23=-53, i24=695, i25=3, i26=14, i27=-12, i28=-3, i29=-14915, i30=-95;
        byte by1=-81;
        boolean b2=true;

        Test.instanceCount += 75;
        vMeth(dFld);
        Test.iFld *= (int)Test.instanceCount;
        Test.iFld = -222;
        f1 = 1;
        while (++f1 < 189) {
            i22 = 1;
            while (++i22 < 133) {
                for (i23 = 1; i23 > 1; i23 -= 2) {
                    i24 += (i23 - Test.instanceCount);
                    if (b2) {
                        Test.iFld += i22;
                        by1 = (byte)i22;
                        i24 += (((i23 * Test.instanceCount) + Test.iFld) - i22);
                        i24 = i24;
                    } else if (true) {
                        Test.instanceCount >>>= i22;
                        Test.instanceCount += (i23 | i23);
                        Test.instanceCount = (long)Test.fFld;
                        i24 = i23;
                    }
                    i24 += (int)dFld;
                    Test.instanceCount |= i22;
                }
                iArrFld[(int)(f1 - 1)] = i24;
                for (i25 = 1; i25 < 1; ++i25) {
                    i26 += (i25 - Test.fFld);
                }
                for (i27 = (int)(f1); i27 < 1; ++i27) {
                    i28 = 10833;
                    Test.instanceCount += i27;
                    iArrFld[i27 - 1] *= i27;
                    Test.iFld = i22;
                }
            }
            for (i29 = 133; i29 > 4; i29--) {
                Test.iFld -= i24;
                i28 = by1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
