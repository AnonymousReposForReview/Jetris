package tests.javafuzzer1223;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:42:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static short sFld=4195;
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 35363L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i9, int i10, int i11) {

        byte by1=-105;

        i10 = by1;
        long meth_res = i9 + i10 + i11 + by1;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(boolean b, byte by, int i6) {

        int i7=-4, i8=6, i12=10, i13=42156, i14=-10, iArr[]=new int[N];
        double d=-22.123929, dArr[]=new double[N];
        short s=-21498;
        float f1=2.355F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 12108L);
        FuzzerUtils.init(dArr, 27.62476);
        FuzzerUtils.init(iArr, -40893);

        for (long l : lArr) {
            for (i7 = 1; i7 < 4; i7++) {
                d -= (--i6);
                b = true;
                i8 >>= Math.min((int)((76 + (i7 + l)) * (lArr[i7] *= i8)), i8 *= i6);
                l = sMeth(i8, i7, i7);
                Test.instanceCount += s;
            }
            if (true) break;
            dArr[(5194 >>> 1) % N] -= i7;
            l >>= 110L;
            i12 = 1;
            while (++i12 < 4) {
                for (i13 = 1; i13 < 1; i13++) {
                    iArr[i12 - 1] <<= i7;
                    i14 += (i13 * i13);
                    f1 += i6;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + by + i6 + i7 + i8 + Double.doubleToLongBits(d) + s + i12 + i13 + i14 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i2, int i3) {

        int i4=-5, i5=-9, i15=-6, i16=-89, i17=51, i18=-36172, i19=71, i20=11;
        boolean b1=false, bArr[]=new boolean[N];
        byte by2=-73, byArr[]=new byte[N];
        long l1=1921606148L;
        double d1=119.15891, dArr1[]=new double[N];
        short s1=-17717;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr1, -16.57130);
        FuzzerUtils.init(byArr, (byte)54);

        for (i4 = 233; i4 > 1; i4--) {
            iMeth(b1, by2, i4);
        }
        bArr[(i3 >>> 1) % N] = b1;
        dArr1[(i5 >>> 1) % N] = 79555863L;
        for (i15 = 4; i15 < 276; i15++) {
            i3 -= i15;
            i5 = i5;
            for (i17 = 6; i17 > 1; i17--) {
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.lArrFld[i15 + 1] = l1;
                    switch (((i18 >>> 1) % 5) + 36) {
                    case 36:
                        i3 += (((i19 * i19) + i5) - by2);
                        break;
                    case 37:
                        i16 -= -36017;
                        i20 = (int)f;
                        d1 -= i20;
                        break;
                    case 38:
                        i20 -= s1;
                        break;
                    case 39:
                        byArr = byArr;
                    case 40:
                        i3 -= (int)l1;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + by2 + i15 + i16 + i17 + i18 +
            i19 + i20 + l1 + Double.doubleToLongBits(d1) + s1 + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-37, i1=-56433, i21=-11, i22=-59640, i23=27437, i24=-40561, i25=65221, i26=-11, i27=-161, i28=-11633,
            i29=99, i30=11, i31=55078, iArr1[]=new int[N];
        float f2=-7.479F;
        byte by3=-20;
        boolean b2=false;
        double dArr2[]=new double[N];

        FuzzerUtils.init(iArr1, 76);
        FuzzerUtils.init(dArr2, -2.5571);

        for (i = 13; 276 > i; ++i) {
            vMeth(f2, i1, i);
        }
        for (i21 = 11; i21 < 377; ++i21) {
            iArr1[i21] = (int)121.654F;
        }
        dArr2[(60 >>> 1) % N] = i22;
        for (i23 = 18; i23 < 360; ++i23) {
            for (i25 = 2; 74 > i25; ++i25) {
                by3 += (byte)(i25 + i22);
                Test.instanceCount += i;
            }
            i27 = 1;
            while (++i27 < 74) {
                i28 = 1;
                do {
                    if (b2) break;
                    i22 <<= i29;
                    if (b2) {
                        if (b2) continue;
                    } else if (false) {
                        by3 = (byte)Test.instanceCount;
                        i1 = by3;
                    } else if (false) {
                        Test.instanceCount = i21;
                    }
                    if (b2) continue;
                    i1 = (int)f2;
                    i1 = (int)Test.instanceCount;
                } while (++i28 < 1);
            }
            if (b2) continue;
            i29 = 3;
            i24 = (int)Test.instanceCount;
            for (i30 = 74; i30 > 4; i30 -= 2) {
                i1 += (-55916 + (i30 * i30));
            }
            bArrFld[i23 - 1] = true;
            i24 = (int)Test.instanceCount;
            i24 = Test.sFld;
            try {
                i22 = (456096154 % iArr1[i23 - 1]);
                i22 = (i30 % 25353);
                i31 = (-102 % i25);
            } catch (ArithmeticException a_e) {}
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
