package tests.javafuzzer542;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:26:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5107904716865489236L;
    public int iFld=42363;
    public static float fFld=-2.153F;
    public static volatile boolean bFld=false;
    public static volatile short sFld=10482;
    public static byte byFld=108;
    public static double dFld=55.125465;
    public double dArrFld[]=new double[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2, long l1) {

        int i3=9578, i4=50239, i5=230, i6=-7, i7=-11975, i8=-50462, i9=-35448, i10=4, iArr[]=new int[N];
        double d=-1.63492;
        float f1=1.709F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -235L);
        FuzzerUtils.init(iArr, -110);

        i3 = 1;
        do {
            lArr[i3 - 1] *= -87;
            for (i4 = 1; i4 < 6; ++i4) {
                lArr[(i5 >>> 1) % N] *= i2;
                d += f1;
            }
            for (i6 = 1; 6 > i6; ++i6) {
                i7 &= -8;
                i2 += (i6 * i6);
            }
            i2 ^= (int)l1;
            switch (((i3 >>> 1) % 3) + 21) {
            case 21:
                for (i8 = 1; i8 < 6; ++i8) {
                    i10 = 1;
                    do {
                        i9 += (((i10 * i4) + i8) - i5);
                        i7 = i7;
                        i2 += (-35388 + (i10 * i10));
                    } while (++i10 < 2);
                }
                break;
            case 22:
                iArr[i3] ^= i7;
                break;
            case 23:
                i5 += (int)l;
                break;
            }
        } while (++i3 < 284);
        vMeth1_check_sum += l + i2 + l1 + i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i6 +
            i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1) {

        int i11=-9, i12=45, i13=458, i14=14;
        double d1=14.106237;
        short s1=-3099;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 3L);

        vMeth1(Test.instanceCount, i1, Test.instanceCount);
        i1 = (int)Test.instanceCount;
        i1 = 14113;
        for (long l2 : lArr1) {
            for (i11 = 1; i11 < 4; i11++) {
                Test.instanceCount -= 3;
                i1 += i11;
                for (i13 = 1; i13 < 2; i13++) {
                    boolean b=false;
                    d1 -= i13;
                    i14 = i13;
                    Test.fFld *= (float)82.130367;
                    i12 = (int)121.345F;
                    s1 += (short)i13;
                    i14 += i13;
                    if (b) continue;
                }
            }
        }
        vMeth_check_sum += i1 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + s1 + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth() {

        float f=41.176F;
        int i=-174, i15=-11, i16=-60561, i17=227, i18=0, i19=-1, i20=-4;
        short s=18005;
        boolean b1=false;
        double d2=0.31568;

        f += (f++);
        i = (int)(((i + i) + (~(s * Test.instanceCount))) * ((i + i) + (i++)));
        switch ((((i * i) >>> 1) % 2) + 60) {
        case 60:
            vMeth(i);
            b1 = true;
            Test.instanceCount /= 20591;
            break;
        case 61:
            for (i15 = 125; 4 < i15; i15 -= 3) {
                i >>= i;
                for (i17 = 2; i17 < 38; i17 += 2) {
                    Test.instanceCount = s;
                    i19 = 1;
                    while ((i19 += 3) < 3) {
                        d2 += i20;
                        Test.instanceCount += (i19 * i19);
                        i16 = i19;
                        if (i16 != 0) {
                        }
                    }
                }
            }
            break;
        }
        long meth_res = Float.floatToIntBits(f) + i + s + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d2) + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=1, i22=-8323, i23=2, i24=-2, i26=8104, i27=31246, iArr1[]=new int[N];
        byte by=-92, byArr[]=new byte[N];
        long l3=5470261555790810278L, lArr2[]=new long[N];
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(byArr, (byte)-74);
        FuzzerUtils.init(iArr1, -49);
        FuzzerUtils.init(fArr, 124.168F);
        FuzzerUtils.init(lArr2, 8136991885502377701L);
        FuzzerUtils.init(sArr, (short)-5988);

        iFld *= (int)Math.min(Test.instanceCount, Math.min(0 + iMeth(), Test.instanceCount));
        iFld &= iFld;
        for (i21 = 9; i21 < 223; i21 += 2) {
            int i28=-45659;
            switch (((i21 % 10) * 5) + 39) {
            case 77:
                if (Test.bFld) break;
                Test.fFld -= Test.instanceCount;
                i22 += i21;
                switch (((i21 % 8) * 5) + 125) {
                case 136:
                    iFld *= i22;
                    for (i23 = i21; 234 > i23; i23++) {
                        Test.instanceCount = i21;
                        Test.instanceCount = (long)Test.fFld;
                        iFld ^= (int)-4163583710L;
                        i24 |= Test.sFld;
                        by >>= (byte)Test.instanceCount;
                        byArr[i23 - 1] -= (byte)i22;
                    }
                    break;
                case 155:
                    Test.instanceCount = iFld;
                    break;
                case 162:
                    Test.bFld = true;
                case 145:
                    iArr1[i21 + 1] = i22;
                    break;
                case 138:
                    i24 += (i21 * Test.instanceCount);
                    i24 += Test.byFld;
                case 164:
                    switch (((i22 >>> 1) % 3) + 112) {
                    case 112:
                        for (i26 = i21; i26 < 234; i26++) {
                            fArr[i21] += i26;
                            Test.fFld += i23;
                            i27 += (((i26 * Test.instanceCount) + Test.fFld) - i23);
                            Test.instanceCount |= i27;
                        }
                        Test.instanceCount = (long)Test.fFld;
                        l3 = 1;
                    case 113:
                        Test.byFld += (byte)i21;
                    case 114:
                    default:
                        i22 += (147 + (i21 * i21));
                    }
                    break;
                case 151:
                    lArr2[i21 - 1] >>= i27;
                    break;
                case 143:
                    Test.fFld *= i28;
                    break;
                }
                break;
            case 88:
                iFld += (-4 + (i21 * i21));
                break;
            case 81:
                sArr[i21] -= (short)222;
                break;
            case 86:
                dArrFld = dArrFld;
            case 76:
                Test.dFld = Test.fFld;
                break;
            case 64:
                i28 -= i21;
                break;
            case 40:
            case 82:
                sArr[i21] = (short)i21;
                break;
            case 84:
                i27 -= (int)Test.instanceCount;
            case 73:
            default:
                Test.instanceCount += (i21 * i21);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
