package tests.javafuzzer2383;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:58:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6699592733847720854L;
    public static int iFld=-7;
    public static boolean bFld=true;
    public static volatile double dFld=0.107333;
    public static volatile byte byFld=49;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 46222);
        FuzzerUtils.init(Test.lArrFld, 4L);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4, boolean b) {

        int i5=109, i6=11432, i7=52969;
        float f=-2.967F;

        for (i5 = 11; i5 < 308; ++i5) {
            if (true) continue;
            f -= Test.instanceCount;
            if (b) {
                i3 += Test.iFld;
            } else {
                Test.instanceCount += (i5 * Test.iFld);
            }
            if (b) break;
            switch (((i6 >>> 1) % 5) + 12) {
            case 12:
                Test.iFld -= (int)f;
                i4 += (int)(-2.963F + (i5 * i5));
                break;
            case 13:
                Test.iFld -= (int)f;
                i7 = 1;
                do {
                    i4 <<= i6;
                    i6 += (((i7 * i5) + f) - i4);
                    i4 >>= i5;
                } while (++i7 < 6);
            case 14:
                f += (((i5 * i3) + i7) - i4);
                break;
            case 15:
                Test.bFld = b;
                break;
            case 16:
                i3 -= -54;
                break;
            default:
                i6 -= i3;
            }
        }
        vMeth_check_sum += i3 + i4 + (b ? 1 : 0) + i5 + i6 + Float.floatToIntBits(f) + i7;
    }

    public static long lMeth1() {

        double d=-1.119838;
        byte by=-19;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5492192060537300956L);

        d *= by;
        Test.iFld = (int)lArr[(Test.iFld >>> 1) % N];
        vMeth(Test.iFld, Test.iFld, Test.bFld);
        long meth_res = Double.doubleToLongBits(d) + by + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i1, int i2) {

        int i9=-97, i10=161;
        float f1=2.605F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -43.57540);

        dArr[(47463 >>> 1) % N] -= (lMeth1() * i2);
        i2 -= (int)Test.dFld;
        for (int i8 : Test.iArrFld) {
            if (Test.bFld) continue;
            i9 = 1;
            do {
                i10 = 1;
                do {
                    f1 = Test.instanceCount;
                    switch (((i10 >>> 1) % 2) + 112) {
                    case 112:
                        f1 = i9;
                        f1 -= 11;
                        Test.instanceCount >>= Test.iFld;
                        i2 *= i9;
                        break;
                    case 113:
                        Test.lArrFld[i10 + 1] = i1;
                    default:
                        i8 *= (int)f1;
                        Test.instanceCount -= i2;
                    }
                } while (++i10 < 1);
            } while (++i9 < 4);
        }
        long meth_res = i1 + i2 + i9 + i10 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i11=-7, i12=56, i13=-83, i14=-11, i15=-14, i16=-90, i17=236, i18=-9;
        float f2=-32.945F;
        boolean b1=false;
        short s=15229;

        if (Test.bFld) {
            i = (int)(Math.max(Test.instanceCount, Test.instanceCount) * (--i));
            i += (int)((lMeth(Test.iFld, i) % (Test.iFld | 1)) + f2);
        }
        for (i11 = 8; 223 > i11; ++i11) {
            for (i13 = 2; 117 > i13; i13++) {
                Test.iFld += (int)f2;
                Test.iArrFld[(i11 >>> 1) % N] = i13;
                i14 += (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.bFld = b1;
                    i -= i12;
                    i -= (int)-2.496F;
                    Test.lArrFld[i13] += i;
                }
                s <<= s;
                i16 += (((i13 * i15) + i) - Test.instanceCount);
                Test.instanceCount += (i13 ^ i);
                i14 = 1;
            }
            for (i17 = i11; i17 < 117; i17++) {
                i12 += i17;
                i += (i17 | Test.instanceCount);
                Test.iArrFld[i17 + 1] <<= i14;
                Test.instanceCount *= -13;
                Test.instanceCount += (i17 * i17);
            }
            i18 = -76;
            Test.instanceCount = i14;
            Test.iFld += (((i11 * Test.byFld) + i14) - f2);
            switch ((i11 % 1) + 119) {
            case 119:
                i12 += (int)Test.dFld;
                if (b1) break;
                break;
            default:
                byArrFld[i11 - 1] = (byte)9;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
