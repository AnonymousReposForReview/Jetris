package tests.javafuzzer3028;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:59:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-115L;
    public static int iFld=156;
    public static double dFld=-125.91273;
    public static byte byFld=74;
    public static boolean bFld=true;
    public static float fFld=-73.701F;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        int i2=103, i3=-27022, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -19314);
        FuzzerUtils.init(lArr, -33870L);

        l += Test.iFld;
        for (i2 = 6; 349 > i2; i2++) {
            Test.dFld += Test.dFld;
            Test.instanceCount = -254;
            if (Test.bFld) {
                Test.byFld *= (byte)-148;
                Test.instanceCount += (((i2 * Test.instanceCount) + i3) - i3);
                if (false) {
                    iArr1[i2] &= (int)l;
                    Test.bFld = Test.bFld;
                } else if (Test.bFld) {
                    Test.iFld -= (int)l;
                    lArr[i2 - 1] = l;
                    i3 += (int)Test.dFld;
                    Test.dFld += Test.iFld;
                } else if (false) {
                    i3 -= (int)Test.instanceCount;
                } else {
                    iArr1[i2] -= (int)Test.instanceCount;
                }
            } else if (Test.bFld) {
                Test.dFld -= l;
            }
        }
        vMeth1_check_sum += l + i2 + i3 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        double d=0.77950;
        int i1=-9, i4=60060, i5=62386, i6=-1, iArr2[][]=new int[N][N];
        short s=8031;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr2, -2);
        FuzzerUtils.init(bArr1, true);

        for (d = 4; 143 > d; ++d) {
            i1 += Test.iFld;
            vMeth1(Test.instanceCount);
            switch (((i1 >>> 1) % 3) + 46) {
            case 46:
                i4 = 1;
                do {
                    iArr2[i4 - 1][i4 - 1] ^= (int)-4876L;
                    for (i5 = i4; i5 < 1; ++i5) {
                        Test.dFld = Test.instanceCount;
                        Test.instanceCount <<= 5;
                        iArr2[(int)(d)][i4] &= Test.iFld;
                        i1 += i5;
                        Test.iFld >>>= Test.byFld;
                        s = (short)i4;
                        i1 += i5;
                        bArr1[i5 - 1] = Test.bFld;
                    }
                } while (++i4 < 11);
                break;
            case 47:
                Test.instanceCount += i6;
                break;
            case 48:
                Test.instanceCount = i1;
                break;
            default:
                Test.iFld += 12;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i4 + i5 + i6 + s + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(bArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f=4.802F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        bArr[(Test.iFld >>> 1) % N] = (((1.950F - (Test.iFld * Test.instanceCount)) + (++Test.iFld)) != iMeth());
        Test.iFld = (int)43L;
        Test.iFld <<= 226;
        f -= Test.instanceCount;
        vMeth_check_sum += Float.floatToIntBits(f) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=219, i7=15481, i8=-198, i9=-11, i10=-8, i11=-11, i12=177, i13=-10, i14=-8, iArr[]=new int[N],
            iArr3[][]=new int[N][N];
        short s1=-10544;
        long l2=-5201234043163016722L;

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(iArr3, 241);

        Test.iFld *= Test.iFld;
        i = 1;
        while (++i < 208) {
            iArr = (iArr = (iArr = (iArr = iArr)));
            vMeth();
        }
        for (i7 = 16; 315 > i7; i7++) {
            for (i9 = 2; i9 < 84; i9++) {
                long l1=-10L;
                l1 += (long)Test.dFld;
                Test.iFld -= Test.iFld;
                try {
                    Test.iFld = (Test.iFld / i9);
                    iArr[i9 + 1] = (51955 / i9);
                    iArr[i9] = (12653 % iArr[i9 - 1]);
                } catch (ArithmeticException a_e) {}
                try {
                    i8 = (-10 % iArr[i7]);
                    Test.iFld = (Test.iFld / -114);
                    Test.iFld = (-53 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                for (i11 = 1; i11 < 2; i11++) {
                    i12 += (i11 * i11);
                    i10 -= s1;
                    l1 += i11;
                    i10 &= i11;
                    iArr3 = iArr3;
                    i8 %= (int)(Test.instanceCount | 1);
                    i10 -= i9;
                    l1 &= 33722;
                    i10 += i12;
                }
                Test.fFld += Test.fFld;
                for (i13 = 1; 2 > i13; i13++) {
                    i8 &= i;
                    i12 += (((i13 * i) + i12) - i7);
                    l1 >>= Test.instanceCount;
                    i10 -= i8;
                    l2 *= Test.iFld;
                    iArr[i13] += (int)Test.dFld;
                    if (Test.bFld) continue;
                }
            }
            iArr[i7] = (int)l2;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
