package tests.javafuzzer940;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:50:30 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3516673343L;
    public static int iFld=7;
    public float fFld=0.610F;
    public static float fFld1=57.18F;
    public static volatile double dFld=121.85635;
    public static byte byFld=-29;
    public boolean bFld=true;
    public long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld1[]=new long[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
        FuzzerUtils.init(Test.lArrFld1, 3625549813L);
        FuzzerUtils.init(Test.fArrFld, 2.923F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5, long l, int i6) {

        int i7=-8, i8=-123, i9=12358, i10=-101, i11=-40619, i12=-63902, i13=-6503, i14=-22327, i15=-12;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-56);

        Test.instanceCount = -44308;
        for (i7 = 1; i7 < 270; ++i7) {
            boolean b=false;
            byArr[i7] /= (byte)4;
            if (b) break;
            i9 += (i7 | i7);
        }
        for (i10 = 1; i10 < 196; i10++) {
            Test.iArrFld[i10][i10] -= (int)Test.fFld1;
            l >>= Test.iFld;
            if (b1) continue;
            for (i12 = 1; i12 < 8; i12 += 2) {
                for (i14 = 1; i14 < 3; ++i14) {
                    i8 += i14;
                    Test.iArrFld[i10] = Test.iArrFld[i10];
                    Test.instanceCount = (long)Test.fFld1;
                    i9 = (int)l;
                }
            }
        }
        long meth_res = i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i3=-38412, i4=7, i16=-10, i17=-11;
        short sArr[][]=new short[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(sArr, (short)92);
        FuzzerUtils.init(dArr, 39.120985);

        i3 = 1;
        do {
            i4 = 1;
            do {
                Test.iFld = (int)((Test.iFld += (int)(Test.dFld - Test.dFld)) - (sArr[i3 + 1][i4] * Test.iFld));
                dArr[i4] *= (++Test.iFld);
                Test.iFld = (-i3);
                Test.iFld /= 213;
                Test.iFld *= Test.iFld;
                Test.iFld &= iMeth1(Test.iFld, Test.instanceCount, i3);
                for (i16 = i3; i16 < 1; i16++) {
                    if (true) {
                        if (i3 != 0) {
                            vMeth_check_sum += i3 + i4 + i16 + i17 + FuzzerUtils.checkSum(sArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        Test.instanceCount = i17;
                    } else {
                        Test.instanceCount += (((i16 * Test.fFld1) + Test.instanceCount) - Test.instanceCount);
                        i17 += i16;
                        Test.fFld1 += i3;
                    }
                }
            } while (++i4 < 13);
        } while (++i3 < 122);
        vMeth_check_sum += i3 + i4 + i16 + i17 + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        int i1=-26692, i2=56, i18=1274, i19=-5, i20=-13, iArr[]=new int[N];
        short s=25922;
        boolean b2=true;

        FuzzerUtils.init(iArr, -46478);

        for (i1 = 11; i1 < 192; ++i1) {
            if (false) continue;
            s >>= (short)(iArr[i1] -= (int)((Test.fFld1--) * (Test.dFld + i1)));
            vMeth();
            for (i18 = 1; i18 < 9; i18 += 3) {
                Test.iFld += (i18 + i19);
                i19 = (int)Test.instanceCount;
                i20 = 1;
                do {
                    if (b2) continue;
                    Test.byFld += (byte)i20;
                    Test.lArrFld1[i20 - 1] += i18;
                    try {
                        Test.iFld = (i19 / i1);
                        i2 = (i18 / 2);
                        i19 = (i1 % i2);
                    } catch (ArithmeticException a_e) {}
                    Test.byFld += (byte)(i20 * i20);
                    Test.dFld += -1L;
                    iArr[i1 - 1] = -135;
                } while (++i20 < 5);
            }
        }
        long meth_res = i1 + i2 + s + i18 + i19 + i20 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=193, i21=221, i22=39, i23=-141, i24=-22490, i25=173;
        float f=0.850F;
        long l1=1842480205L;
        short s1=7511;

        i = 1;
        while (++i < 276) {
            Test.iFld = (int)(Math.min(i, (int)(Test.iFld / ((long)(fFld) | 1))) + (-lArrFld[i - 1]));
            Test.iFld = (int)((Test.iFld--) + ((Test.instanceCount = i) + iMeth()));
            Test.fFld1 += i;
            if (bFld) {
                for (i21 = 91; i21 > 3; --i21) {
                    for (f = 1; f < 2; ++f) {
                        i23 -= (int)fFld;
                        Test.dFld = i23;
                        Test.byFld |= (byte)Test.instanceCount;
                        i23 -= i;
                        Test.iFld = Test.iFld;
                    }
                    Test.dFld /= ((long)(fFld) | 1);
                    Test.iFld *= (int)fFld;
                    i24 = 1;
                    while (++i24 < 2) {
                        Test.iFld = 9;
                        Test.fArrFld[i - 1] = i23;
                        Test.iArrFld[i24][i21 - 1] = i;
                    }
                    Test.instanceCount >>= i;
                    i23 = (int)l1;
                    Test.fFld1 += 29;
                    s1 -= (short)i24;
                    Test.iArrFld[i - 1][i21 + 1] += Test.byFld;
                }
                i22 += (((i * Test.iFld) + i24) - i25);
            } else {
                i23 = i23;
                Test.iArrFld[i + 1][i] += (int)f;
                i23 -= i;
            }
            if (bFld) break;
            i23 += (i + i22);
        }
        i22 = (int)l1;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
