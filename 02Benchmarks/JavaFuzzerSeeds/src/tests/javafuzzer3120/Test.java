package tests.javafuzzer3120;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:11:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static byte byFld=-83;
    public float fFld=0.368F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -121);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by) {

        int i3=3, i7=20968, i8=23443, iArr[]=new int[N];
        boolean b=true;
        float f=73.84F;
        double d=0.28853;

        FuzzerUtils.init(iArr, -47357);

        i3 = 1;
        while (++i3 < 252) {
            int i4=7;
            i4 = i3;
            Test.instanceCount = i4;
            if (b) break;
        }
        for (int i5 : iArr) {
            Test.instanceCount += i3;
            f = Test.instanceCount;
            i5 -= (int)d;
            d -= i5;
            i7 = 1;
            do {
                i8 = 1;
                while (++i8 < 1) {
                    iArr[i8 - 1] = i7;
                    Test.instanceCount >>= i3;
                    i5 += 152;
                    i5 >>= i8;
                }
            } while (++i7 < 4);
        }
        vMeth_check_sum += by + i3 + (b ? 1 : 0) + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i2) {

        float f1=-1.1016F;
        int i9=1, i10=-1, i11=12919, i12=33, i13=49493, i14=199, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 3);

        vMeth(Test.byFld);
        i2 = (int)f1;
        for (i9 = 9; i9 < 171; ++i9) {
            boolean b1=true;
            iArr1[i9 - 1] = i10;
            if (b1) continue;
            i10 += (int)105.1929;
            f1 -= i10;
            for (i11 = 10; i11 > i9; i11 -= 3) {
                try {
                    i10 = (i9 % -52399);
                    i10 = (i10 / -339016253);
                    i2 = (i10 % -60462);
                } catch (ArithmeticException a_e) {}
                try {
                    i2 = (i9 / iArr1[i9]);
                    i12 = (i12 % i10);
                    i10 = (i12 % i11);
                } catch (ArithmeticException a_e) {}
                i10 = (int)Test.instanceCount;
            }
        }
        Test.instanceCount &= 58362L;
        for (i13 = 5; i13 < 178; i13++) {
            iArr1[i13] += i12;
            i2 ^= i12;
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-6995, i15=35090, i16=5, i17=-29605, i18=3, i19=13, i20=13, iArr2[]=new int[N];
        double d1=0.39545, d2=0.389;
        float f2=0.372F;

        FuzzerUtils.init(iArr2, -204);

        i1 >>= iMeth1(241);
        iArr2[(i1 >>> 1) % N] += i1;
        Test.instanceCount *= i1;
        d1 *= i1;
        Test.byFld = (byte)i1;
        for (d2 = 323; d2 > 5; d2--) {
            Test.instanceCount -= -30703;
            for (i16 = 1; i16 < 5; i16++) {
                i15 += (1 + (i16 * i16));
                Test.instanceCount += i16;
                i1 = i17;
                for (i18 = 1; 2 > i18; i18++) {
                    f2 = i18;
                    i20 += i16;
                    i15 += (i18 - Test.instanceCount);
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + i19 +
            Float.floatToIntBits(f2) + i20 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-44448, i21=6, i22=-75, i23=-8, i24=14, i25=38363, i26=-30638, i27=4188, i28=3;
        short s=-25569;
        double d3=-1.93975;

        Test.instanceCount <<= ((i + iMeth()) - s);
        Test.instanceCount = i;
        Test.instanceCount -= i;
        fFld = i;
        i = i;
        i -= (int)Test.instanceCount;
        i21 = 1;
        while (++i21 < 139) {
            try {
                i = (i % -1060699242);
                i = (i21 % 162);
                Test.iArrFld[(i >>> 1) % N] = (i21 / 47225);
            } catch (ArithmeticException a_e) {}
            fFld -= i21;
            i >>= i;
            i22 = 1;
            while (++i22 < 180) {
                for (i23 = i21; i23 < 1; ++i23) {
                    d3 /= -19082;
                    Test.instanceCount += i23;
                    i += i23;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount = Test.instanceCount;
                    Test.iArrFld[i23] += i;
                    i24 >>>= Test.byFld;
                    i24 -= (int)d3;
                    Test.instanceCount += 21205;
                }
                i24 <<= (int)-3635748337404787649L;
                for (i25 = 1; 1 > i25; ++i25) {
                    fFld = Test.instanceCount;
                    Test.instanceCount |= i24;
                }
                i += (i22 * i22);
                for (i27 = 1; i27 < 1; i27++) {
                    i28 = 30286;
                    try {
                        Test.iArrFld[i21] = (Test.iArrFld[i27 + 1] % i27);
                        i = (-115 / i22);
                        i = (i26 % Test.iArrFld[i22 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i28 *= Test.byFld;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
