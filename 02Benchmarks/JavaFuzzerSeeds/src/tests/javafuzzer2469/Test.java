package tests.javafuzzer2469;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:07:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=194L;
    public short sFld=19210;
    public static byte byFld=59;
    public static volatile short sFld1=20798;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.811F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2) {

        int i3=-12, i4=-227;
        float f2=41.149F;

        i1 = Test.byFld;
        for (i3 = 314; i3 > 9; i3--) {
            f2 += (((i3 * i1) + i3) - f2);
            i4 %= (int)(i2 | 1);
        }
        vMeth2_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f2);
    }

    public static void vMeth1() {

        int i5=249, i6=-5251, i7=-55160, i8=60630, i9=-11, i10=-14, i11=8;
        double d=-1.6833;

        vMeth2(i5, i6);
        i6 += i5;
        for (i7 = 22; i7 < 376; ++i7) {
            i9 = 1;
            while (++i9 < 5) {
                i5 += i7;
                for (i10 = 1; i10 < 1; i10 += 2) {
                    i6 = (int)Test.instanceCount;
                    d += Test.instanceCount;
                    i5 >>= i6;
                    switch (((i9 % 1) * 5) + 100) {
                    case 105:
                        i8 ^= i7;
                        i5 *= i9;
                        break;
                    }
                    i8 = i6;
                    d -= i6;
                }
                i5 += (int)(-23.603F + (i9 * i9));
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d);
    }

    public static void vMeth(float f1, long l, long l1) {

        int i12=62, i13=33621, i14=-211, i15=-30526, i16=24923, iArr[]=new int[N];
        long l2=-32944L;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -63633);
        FuzzerUtils.init(fArr, -74.456F);

        vMeth1();
        i12 = 1;
        do {
            l1 *= i12;
            iArr[i12] >>= -3;
            l2 = i12;
            i13 = i12;
            i14 = 1;
            do {
                f1 = i13;
                for (i15 = 1; i15 > 1; --i15) {
                    i16 += i14;
                    i16 += (((i15 * i15) + i14) - i13);
                    i16 += (int)l2;
                    fArr[i12 - 1] -= Test.byFld;
                    b = b;
                    l += Test.sFld1;
                }
            } while (++i14 < 11);
        } while (++i12 < 150);
        vMeth_check_sum += Float.floatToIntBits(f1) + l + l1 + i12 + l2 + i13 + i14 + i15 + i16 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-132, i17=17166, i18=0, i19=213, i20=-160, i21=-1, i22=132, i23=-29660, i24=0, iArr1[]=new int[N];
        float f=0.511F, fArr1[]=new float[N];
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(lArr, 5267L);
        FuzzerUtils.init(fArr1, 2.450F);

        i = (((-Math.min(i, i)) * (sFld - i)) + (-(--i)));
        f += -106;
        vMeth(f, Test.instanceCount, Test.instanceCount);
        iArr1[(i >>> 1) % N] >>= (int)Test.instanceCount;
        i ^= i;
        i += sFld;
        Test.byFld += (byte)sFld;
        for (i17 = 20; i17 < 380; i17++) {
            sFld = (short)-13904;
            i -= i18;
            for (i19 = 70; i19 > 4; i19 -= 3) {
                if (true) break;
                switch (((i19 % 8) * 5) + 85) {
                case 113:
                    Test.byFld += (byte)i19;
                    iArr1[i17] += -6;
                    for (i21 = 1; i21 < 4; ++i21) {
                        i20 += (int)f;
                        i22 = i20;
                        if (b1) break;
                        Test.sFld1 += (short)(((i21 * i18) + Test.instanceCount) - Test.instanceCount);
                        Test.instanceCount = -10;
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount += (((i21 * Test.instanceCount) + Test.instanceCount) - i19);
                    }
                    for (i23 = 1; 4 > i23; ++i23) {
                        i += (i23 * i23);
                        Test.fArrFld[i23 + 1] -= i24;
                        lArr = lArr;
                        i22 += Test.byFld;
                        Test.instanceCount = Test.sFld1;
                        fArr1[i19 - 1] = i17;
                    }
                    break;
                case 106:
                case 95:
                    Test.instanceCount += i19;
                case 99:
                    Test.instanceCount -= i22;
                    break;
                case 86:
                    if (b1) break;
                    break;
                case 88:
                    i22 = (int)Test.instanceCount;
                    break;
                case 108:
                    i20 += i22;
                    break;
                case 114:
                    i20 += (int)Test.instanceCount;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
