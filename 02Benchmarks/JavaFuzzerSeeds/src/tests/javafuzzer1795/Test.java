package tests.javafuzzer1795;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:23:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1020960105181413394L;
    public static volatile short sFld=-25326;
    public static double dFld=0.75032;
    public int iFld=110;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by) {

        int i2=-10, i3=-210, i4=0, i5=-9, i6=-20320, i7=1, i8=-177, i9=-211, iArr1[]=new int[N];
        double d=0.117874, dArr[]=new double[N];
        boolean b=true;
        float f1=1.864F;
        long l1=38733L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 365580223L);
        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(dArr, -1.5258);

        lArr[(152 >>> 1) % N] = i2;
        for (i3 = 10; i3 < 170; i3++) {
            i2 *= i3;
        }
        for (i5 = 3; i5 < 187; ++i5) {
            for (i7 = 1; i7 < 9; ++i7) {
                for (d = 2; d > 1; d--) {
                    iArr1[(int)(d - 1)] = Test.sFld;
                    if (b) continue;
                    i2 += (int)(d * d);
                    switch ((i5 % 7) + 58) {
                    case 58:
                        i6 += (int)Test.instanceCount;
                        b = b;
                        i9 += i8;
                        break;
                    case 59:
                    case 60:
                        i6 += (int)(d * d);
                        f1 += (float)(((d * i3) + Test.instanceCount) - i8);
                        break;
                    case 61:
                        f1 = Test.sFld;
                        break;
                    case 62:
                        f1 -= i9;
                        break;
                    case 63:
                        Test.instanceCount <<= i6;
                        break;
                    case 64:
                        dArr[i7 - 1] -= l1;
                    }
                }
            }
        }
        long meth_res = by + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + l1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i, int i1) {

        byte by1=-72;
        int i10=61289, i11=-6, iArr[][]=new int[N][N];
        float f2=-1.595F;
        long lArr1[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr, -136);
        FuzzerUtils.init(lArr1, 1938612193L);
        FuzzerUtils.init(dArr1, -95.52708);

        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] -= (int)((-(--i1)) - (--Test.instanceCount));
        Test.instanceCount >>= (long)(i *= (int)((-1.29217 * (-(Test.instanceCount << i))) + iMeth(by1)));
        i = (int)Test.instanceCount;
        lArr1[(14 >>> 1) % N] -= Test.sFld;
        Test.dFld -= i1;
        for (i10 = 6; i10 < 159; i10++) {
            i = -2;
            try {
                i = (i % i11);
                iArr[i10][i10] = (-53 / iArr[i10 + 1][i10]);
                i = (i / i11);
            } catch (ArithmeticException a_e) {}
            f2 += i10;
            switch ((((i10 >>> 1) % 6) * 5) + 40) {
            case 54:
                i1 -= (int)Test.instanceCount;
                iArr[i10][i10] = i;
                break;
            case 53:
                dArr1[i10 - 1] = i10;
                break;
            case 70:
                i11 += i11;
                break;
            case 67:
                iArr[i10] = iArr[i10 - 1];
            case 65:
                Test.instanceCount -= i10;
                break;
            case 64:
                if (i1 != 0) {
                    vMeth1_check_sum += i + i1 + by1 + i10 + i11 + Float.floatToIntBits(f2) +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                    return;
                }
                break;
            }
        }
        vMeth1_check_sum += i + i1 + by1 + i10 + i11 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void vMeth(float f, long l) {

        int i12=58674, i13=11, i14=107, i15=97, i16=12, i17=-4, iArr2[]=new int[N];
        byte by2=119;

        FuzzerUtils.init(iArr2, 1);

        vMeth1(i12, i12);
        f -= f;
        i12 -= i12;
        iArr2[(i12 >>> 1) % N] &= by2;
        for (i13 = 11; i13 < 335; i13++) {
            by2 = (byte)i12;
            Test.instanceCount &= l;
            f += (i13 - Test.instanceCount);
            by2 += (byte)-5;
        }
        i15 = 327;
        while (--i15 > 0) {
            if (false) break;
            if (true) {
                for (i16 = 1; i16 < 5; i16++) {
                    i14 <<= -24;
                    try {
                        iArr2[i15] = (i12 / 12852);
                        i17 = (-1368444844 % i15);
                        i17 = (iArr2[i15 + 1] / 30348);
                    } catch (ArithmeticException a_e) {}
                }
            } else {
                i17 -= i17;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i12 + by2 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f3=125.931F, f4=36.403F, fArr[]=new float[N];
        int i18=-6669, i19=46674, i20=93, i21=-60, i22=-2, i23=44346, i24=-11;
        boolean b1=true;

        FuzzerUtils.init(fArr, 1.509F);

        vMeth(f3, Test.instanceCount);
        for (f4 = 4; f4 < 312; f4 += 2) {
            Test.instanceCount += i18;
            f3 += f4;
        }
        f3 += Test.instanceCount;
        i19 = 1;
        while (++i19 < 271) {
            Test.dFld = 4;
            i18 = 9;
        }
        for (i20 = 7; 165 > i20; i20++) {
            Test.dFld -= f3;
            Test.dFld -= i19;
            i18 += (5 + (i20 * i20));
            Test.iArrFld[i20 - 1] = i21;
            i21 += iFld;
            for (i22 = i20; i22 < 159; ++i22) {
                Test.instanceCount -= i22;
                i24 = 1;
                do {
                    Test.iArrFld[i20] = i23;
                    b1 = b1;
                    i18 = (int)Test.instanceCount;
                    Test.iArrFld[i22] = i18;
                    Test.sFld += (short)f3;
                    fArr[i22] *= iFld;
                    if (true) continue;
                    i18 = i24;
                } while (++i24 < 1);
                Test.dFld -= i23;
                Test.iArrFld[i20] %= (int)(Test.instanceCount | 1);
                iFld = i24;
            }
            i23 >>= iFld;
            Test.instanceCount = i22;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
