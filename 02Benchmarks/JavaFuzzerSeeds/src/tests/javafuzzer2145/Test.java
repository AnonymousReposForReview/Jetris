package tests.javafuzzer2145;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:22:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public int iFld=196;
    public static double dFld=-26.56151;
    public static volatile short sFld=4100;
    public byte byArrFld[]=new byte[N];
    public float fArrFld[]=new float[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(long l, int i) {


        Test.instanceCount -= i;
        vSmallMeth_check_sum += l + i;
    }

    public static int iMeth1(int i9, short s1) {

        int i10=-13116, i11=-54271, i12=17104, i13=-25096, i14=0, iArr1[]=new int[N];
        long l2=-43L;
        double d2=64.13939;
        float f2=-51.25F;

        FuzzerUtils.init(iArr1, -54984);

        for (i10 = 226; i10 > 8; i10 -= 3) {
            i9 = i10;
            i11 += i9;
            for (i12 = 1; i12 < 21; i12++) {
                i13 -= i13;
                l2 = 1;
                do {
                    Test.instanceCount = i10;
                    i9 -= (int)d2;
                } while ((l2 += 3) < 2);
                i9 -= i13;
                i9 = s1;
            }
            iArr1[i10 - 1] += (int)f2;
            i14 = 1;
            do {
                i13 >>= i11;
                iArr1[i10] += i11;
                i13 = (int)d2;
            } while (++i14 < 21);
        }
        long meth_res = i9 + s1 + i10 + i11 + i12 + i13 + l2 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) +
            i14 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(boolean b, int i5, int i6) {

        int i7=211, i8=-4, i15=11, i16=-784, i17=-135, iArr2[]=new int[N];
        short s2=-13855;
        float f3=-2.118F;
        double d3=-117.121571;

        FuzzerUtils.init(iArr2, 60951);

        for (i7 = 10; i7 < 305; i7++) {
            iMeth1(i8, s2);
            i5 += (i7 * i7);
            i6 = i6;
            i6 >>= 105;
            for (i15 = 1; 6 > i15; ++i15) {
                i17 = 2;
                while (--i17 > 0) {
                    byte by1=111;
                    i6 += (int)Test.instanceCount;
                    i16 += (((i17 * Test.instanceCount) + f3) - Test.instanceCount);
                    iArr2[i17] >>= i6;
                    switch ((i7 % 10) + 1) {
                    case 1:
                        i5 += -18480;
                        Test.instanceCount >>= i8;
                        i6 += (i17 * i17);
                        break;
                    case 2:
                        Test.instanceCount = i17;
                        break;
                    case 3:
                        if (true) continue;
                        break;
                    case 4:
                        i5 = i16;
                    case 5:
                        Test.instanceCount -= (long)d3;
                        break;
                    case 6:
                        iArr2[i17] = (int)d3;
                    case 7:
                    case 8:
                        i6 += by1;
                        break;
                    case 9:
                        i5 >>= 3082;
                        break;
                    case 10:
                        if (b) continue;
                        break;
                    default:
                        try {
                            i16 = (i16 / i8);
                            i16 = (5272 / iArr2[i15]);
                            i5 = (i17 % -254);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i5 + i6 + i7 + i8 + s2 + i15 + i16 + i17 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3, double d) {

        double d1=123.15585, d4=49.22849;
        float f1=42.814F;
        long l1=-3863207165L, l3=10L, lArr1[]=new long[N];
        int i4=37879, iArr[]=new int[N];
        byte by=8;
        short s=17989;
        boolean b1=true;

        FuzzerUtils.init(iArr, 207);
        FuzzerUtils.init(lArr1, 8621689543491851842L);

        d1 = 1;
        while (++d1 < 136) {
            i3 *= (int)(((f1++) + (f1 - i3)) + (--f1));
            iArr[(int)(d1 + 1)] = (int)1.975F;
            for (l1 = 1; l1 < 12; l1 += 2) {
                if (b1) {
                    i3 = (((by = (byte)i4) + s) - i3);
                } else if (b1) {
                    Test.instanceCount = (++i4);
                    lArr1[(int)(d1 - 1)] >>= (lMeth(b1, -228, i3) / (i3 | 1));
                    l3 = 1;
                    while (++l3 < 3) {
                        i4 += (int)(((l3 * l1) + i4) - f1);
                        i4 += (int)-3L;
                    }
                    if (i3 != 0) {
                    }
                }
                Test.instanceCount *= i4;
                f1 += (l1 * l1);
                d4 *= d4;
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l1 +
            i4 + by + s + (b1 ? 1 : 0) + l3 + Double.doubleToLongBits(d4) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-65.811F;
        int i1=139, i2=6, i18=-7, i19=8, i21=204, i22=210, i23=8, i24=3, i25=0, i26=0, i27=55, i28=68, iArr3[]=new
            int[N];
        long l4=-188L, lArr[]=new long[N];
        boolean b2=true;

        FuzzerUtils.init(lArr, -4654499639115155646L);
        FuzzerUtils.init(iArr3, -3);

        for (int smallinvoc=0; smallinvoc<715; smallinvoc++) vSmallMeth(Long.reverseBytes(lArr[(iFld >>> 1) % N]),
            (int)((-3651 / ((iFld - iFld) | 1)) + (f + iFld)));
        for (i1 = 1; 279 > i1; ++i1) {
            i2 *= iMeth(iFld, Test.dFld);
            Test.instanceCount ^= Test.instanceCount;
            iArr3[i1] = iFld;
            iArr3[i1 + 1] -= Test.sFld;
            Test.instanceCount -= (long)Test.dFld;
            f += i1;
            byArrFld = byArrFld;
        }
        Test.instanceCount = i2;
        for (i18 = 342; 8 < i18; --i18) {
            iArr3[i18] *= (int)f;
            for (i21 = 1; i21 < 75; i21++) {
                fArrFld = FuzzerUtils.float1array(N, (float)1.679F);
                iFld >>>= (int)Test.instanceCount;
            }
            Test.dFld += Test.instanceCount;
            for (i23 = 1; i23 < 75; i23++) {
                for (l4 = 1; 2 > l4; ++l4) {
                    if (b2) continue;
                }
                for (i26 = i18; i26 < 2; i26++) {
                    Test.instanceCount += (long)Test.dFld;
                    i2 = i23;
                    i24 <<= i27;
                    i27 = (int)Test.instanceCount;
                    Test.instanceCount += (i26 + i27);
                    i25 -= i26;
                    i24 = (int)Test.instanceCount;
                    f += i26;
                    i24 -= i28;
                    iArr3[i26] >>>= -12;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
