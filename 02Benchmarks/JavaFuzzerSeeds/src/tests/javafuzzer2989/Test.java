package tests.javafuzzer2989;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:27:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=155L;
    public static double dFld=1.113479;
    public boolean bFld=false;
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 57503L);
        FuzzerUtils.init(Test.fArrFld, -6.928F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l1) {

        int i8=35420, i9=0, i10=-21274, i11=227, iArr1[]=new int[N];
        short s=30006;
        byte by=38;
        boolean b1=false;
        double d=-55.36046, d1=-75.76934;

        FuzzerUtils.init(iArr1, -228);

        l1 -= i8;
        for (i9 = 4; i9 < 186; i9++) {
            Test.lArrFld[i9 + 1][i9 + 1] = i9;
            iArr1[i9] = (int)l1;
            i10 += (((i9 * i8) + s) - i8);
            i8 -= by;
        }
        if (b1) {
            Test.fArrFld[(i10 >>> 1) % N] += i9;
        } else {
            d *= 1;
            for (d1 = 13; d1 < 347; d1++) {
                i11 = -172;
                Test.instanceCount += (long)(((d1 * i10) + Test.instanceCount) - i11);
                iArr1[(int)(d1)] = -193;
                i10 >>= i8;
                i11 -= -184;
            }
        }
        long meth_res = l1 + i8 + i9 + i10 + s + by + (b1 ? 1 : 0) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + i11 + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(long l, int i6, int i7) {

        boolean b=false;
        int i12=-30371, i13=0, i14=-6, i15=-22345, i16=-43425, i17=-26517, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -178);

        b = ((b = bMeth(Test.instanceCount)) || b);
        for (i12 = 10; i12 < 293; ++i12) {
            iArr2[(i6 >>> 1) % N] = (int)Test.instanceCount;
            switch (((i12 % 7) * 5) + 32) {
            case 55:
                for (i14 = 1; 6 > i14; ++i14) {
                    Test.fArrFld[i14] += -1.703F;
                }
            case 64:
                i15 += (i12 * i12);
                i15 -= (int)-2L;
                i15 += i12;
                i13 -= i14;
                break;
            case 49:
                i15 -= i12;
                break;
            case 54:
                l += (i12 * i12);
                for (i16 = i12; i16 < 6; ++i16) {
                    int i18=41784;
                    i18 *= i17;
                    if (false) continue;
                }
                break;
            case 62:
                i6 += (int)l;
                break;
            case 67:
                Test.instanceCount = i14;
                break;
            case 53:
                i6 = i15;
                break;
            default:
                Test.lArrFld[i12][i12 - 1] = (long)1.35473;
            }
        }
        long meth_res = l + i6 + i7 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=40608, i3=12, i4=40948, i5=4, i20=-60924, i21=51316, iArr[]=new int[N];
        float f=69.466F;
        boolean b2=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(sArr, (short)7935);

        for (i2 = 16; i2 < 390; ++i2) {
            for (i4 = 1; i4 < 5; i4 += 2) {
                iArr = (iArr = (iArr = iArr));
            }
            f += (Long.reverseBytes(-8 + (i3 * i5)) / (iMeth(Test.instanceCount, i3, i2) | 1));
            i3 += (i2 * i2);
            i3 >>= (int)Test.instanceCount;
            if (false) continue;
            i3 = (int)Test.instanceCount;
            i3 <<= 42515;
            if (b2) {
                Test.fArrFld[i2 - 1] = (float)Test.dFld;
                i1 += (i2 * i5);
                for (i20 = 1; i20 < 5; i20++) {
                    sArr[i2] = (short)i1;
                    Test.fArrFld = FuzzerUtils.float1array(N, (float)-14.369F);
                }
            } else {
                i3 = i1;
                vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i20 + i21 + (b2 ? 1 : 0) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                return;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i20 + i21 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-216, i22=-11, i23=-42099, i24=-14, i25=185, i26=7, i27=-99, iArr3[]=new int[N];
        byte by1=-111;
        short s1=9182;
        float f2=98.68F;
        long lArr[][]=new long[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -4583256910534217454L);
        FuzzerUtils.init(iArr3, 11);
        FuzzerUtils.init(dArr, 1.4533);

        lArr[(i >>> 1) % N][(i >>> 1) % N] += i;
        vMeth(i);
        if (bFld) {
            i += (int)Test.instanceCount;
            for (i22 = 166; i22 > 6; i22--) {
                by1 = (byte)Test.instanceCount;
                Test.instanceCount >>= i23;
                for (i24 = 157; i24 > 3; --i24) {
                    for (i26 = 1; i26 < 2; i26++) {
                        switch (((i24 % 10) * 5) + 49) {
                        case 66:
                            iArr3 = iArr3;
                            i27 = i27;
                            Test.instanceCount = i22;
                            Test.dFld *= i27;
                            break;
                        case 67:
                            i25 -= (int)Test.instanceCount;
                            Test.instanceCount = i25;
                            iArr3[i22 - 1] += (int)Test.instanceCount;
                            break;
                        case 84:
                            byArrFld[i26 + 1] *= (byte)i22;
                            i = i26;
                            i25 >>>= (int)Test.instanceCount;
                            break;
                        case 79:
                            dArr[i22 + 1] += s1;
                            try {
                                i27 = (-34829 % i23);
                                i25 = (i / i27);
                                i27 = (iArr3[i22 - 1] % iArr3[i26 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i25 += (((i26 * Test.instanceCount) + s1) - i24);
                            break;
                        case 70:
                            Test.fArrFld = FuzzerUtils.float1array(N, (float)61.217F);
                            break;
                        case 99:
                            i += (i26 * i26);
                        case 63:
                            Test.instanceCount += (long)Test.dFld;
                            i27 += (i26 * i26);
                            break;
                        case 82:
                            f2 -= i22;
                            f2 *= f2;
                            Test.instanceCount -= i22;
                        case 92:
                            i23 >>= i26;
                            break;
                        case 98:
                            Test.instanceCount += i26;
                            break;
                        default:
                            i >>= i27;
                        }
                    }
                }
            }
        } else if (bFld) {
            lArr[(i24 >>> 1) % N][(i27 >>> 1) % N] >>>= i27;
        } else if (bFld) {
            i -= i23;
        } else {
            f2 += i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
