package tests.javafuzzer255;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:01:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2675326404L;
    public static volatile byte byFld=-2;
    public static boolean bFld=true;
    public static float fFld=-1.1008F;
    public boolean bFld1=true;
    public int iFld=-12;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -190L);
        FuzzerUtils.init(Test.iArrFld, 58569);
        FuzzerUtils.init(Test.sArrFld, (short)27826);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        float f1=101.372F;
        int i6=7570, i7=234, i8=-4, i9=31, i10=61919, iArr1[]=new int[N];
        long l1=-3967326656L, l2=0L;

        FuzzerUtils.init(iArr1, 3);

        f1 += i6;
        iArr1 = iArr1;
        for (l1 = 8; 189 > l1; l1++) {
            for (l2 = 1; 9 > l2; l2++) {
                i8 >>>= 207;
                f1 += f1;
                i8 = i6;
                i7 += (int)(((l2 * i7) + i7) - i7);
                try {
                    i7 = (i6 / i7);
                    i6 = (i8 % 1556485845);
                    i8 = (i7 / iArr1[(int)(l2 + 1)]);
                } catch (ArithmeticException a_e) {}
                i7 += (int)(2.521F + (l2 * l2));
            }
            f1 = i8;
            Test.instanceCount = i8;
            for (i9 = 1; i9 < 9; i9++) {
                Test.lArrFld[(i6 >>> 1) % N] <<= i10;
                i6 %= -19079;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + l1 + i7 + l2 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=-29872, i11=-20728, i12=98, iArr[]=new int[N];
        float f2=52.76F;
        double d=-29.17905;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(byArr, (byte)-125);

        switch (((i4 >>> 1) % 10) + 15) {
        case 15:
            i5 = 1;
            while (++i5 < 332) {
                float f=57.809F;
                i4 |= i4;
                iArr[i5] += (int)(Long.reverseBytes(Test.instanceCount) - ((i5 + f) - (-(i3 * 4))));
                f -= (Test.lArrFld[i5 - 1]--);
                i4 = (int)Test.instanceCount;
                iArr[i5 + 1] += (int)lMeth();
                for (i11 = 1; i11 < 5; ++i11) {
                    byArr[i11] -= (byte)Test.instanceCount;
                    i3 += Test.byFld;
                    i12 = i4;
                    Test.instanceCount = (long)f;
                    i4 += (i11 - i3);
                    i3 = (int)Test.instanceCount;
                    Test.instanceCount += (154 + (i11 * i11));
                }
            }
            break;
        case 16:
            Test.bFld = Test.bFld;
            break;
        case 17:
            i3 = i4;
            break;
        case 18:
            i4 /= (int)(Test.instanceCount | 1);
            break;
        case 19:
            f2 = (float)d;
        case 20:
            Test.instanceCount >>= i12;
            break;
        case 21:
            Test.instanceCount -= (long)d;
        case 22:
        case 23:
            Test.instanceCount <<= i12;
        case 24:
            iArr = FuzzerUtils.int1array(N, (int)-3);
            break;
        default:
            iArr[(i3 >>> 1) % N] -= (int)Test.instanceCount;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i11 + i12 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(int i2, long l) {

        int i13=-55, i14=-161, i15=5230, i16=-127;
        short s=29161;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.314F);

        vMeth1(i2, i2);
        i13 = 1;
        do {
            i2 += (i13 * i13);
            i14 = 1;
            do {
                fArr[i14] += i2;
            } while (++i14 < 5);
            if (Test.bFld) {
                for (i15 = i13; i15 < 5; ++i15) {
                    Test.lArrFld[i13] *= i14;
                    i2 *= s;
                    Test.bFld = Test.bFld;
                    l = l;
                    i16 *= (int)Test.fFld;
                }
                i2 += (((i13 * l) + i15) - i15);
                i16 -= i14;
            } else if (bFld1) {
                l += (long)(2.461F + (i13 * i13));
            }
        } while (++i13 < 348);
        vMeth_check_sum += i2 + l + i13 + i14 + i15 + i16 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=75, i1=13, i18=-89, i19=-171, i20=7523, i21=6, i22=-3754, i23=-1, i24=-8, i25=3, i26=36855, i27=61;
        float f3=-53.98F;
        double d1=83.113996, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -64.122048);

        for (i = 9; i < 202; ++i) {
            i1 += (i + i);
            vMeth(226, Test.instanceCount);
            i1 >>>= Test.byFld;
            i18 = 1;
            while (++i18 < 130) {
                i1 += i18;
            }
            i19 = 1;
            do {
                Test.iArrFld[i19 - 1] += i1;
            } while (++i19 < 130);
            f3 = 1;
            do {
                Test.instanceCount = Test.byFld;
                Test.byFld += (byte)12;
                i1 >>>= i;
            } while (++f3 < 130);
            dArr[i] -= Test.fFld;
            Test.instanceCount &= 8;
            i1 >>= i20;
            i20 <<= -144;
        }
        for (i21 = 1; i21 < 145; ++i21) {
            i23 = 1;
            do {
                i22 |= 1;
                for (i24 = 1; i24 < 1; ++i24) {
                    i25 *= (int)-1.590F;
                    i22 *= iFld;
                    d1 *= Test.instanceCount;
                    Test.sArrFld[i23] *= (short)i;
                }
                Test.fFld = iFld;
                for (i26 = 1; i26 < 1; ++i26) {
                    Test.instanceCount >>= i24;
                    i20 = (int)Test.instanceCount;
                    i27 = i21;
                    d1 = Test.fFld;
                }
            } while (++i23 < 174);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
