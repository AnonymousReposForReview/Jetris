package tests.javafuzzer3138;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:34:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public int iFld=-69;
    public static float fFld=2.141F;
    public static short sFld=21660;
    public static byte byFld=0;
    public int iArrFld[][]=new int[N][N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)0);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth() {

        int i=141, i1=-46454, iArr[]=new int[N];
        float f=1.217F;

        FuzzerUtils.init(iArr, 8);

        for (i = 9; i < 144; i++) {
            try {
                i1 = (i1 % 60730);
                iArr[i - 1] = (i % -39569);
                i1 = (34855 / iArr[i]);
            } catch (ArithmeticException a_e) {}
            f %= (iArr[i - 1] | 1);
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l1, long l2) {

        int i2=-2, i3=-9303, i4=57728, i5=55935, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -3);
        FuzzerUtils.init(lArr1, 42547L);

        vMeth();
        i2 = 1;
        while (++i2 < 133) {
            i3 += (10 + (i2 * i2));
            Test.sFld <<= (short)2L;
            l2 = i3;
            Test.sFld = (short)i2;
        }
        i3 = Test.sFld;
        for (i4 = 12; i4 < 372; i4++) {
            i5 >>>= -106;
            i3 += (((i4 * Test.fFld) + i4) - i3);
            i5 = i4;
        }
        i5 -= 6;
        i3 -= (int)Test.fFld;
        i5 = 147;
        lArr1[(i3 >>> 1) % N] |= i2;
        vMeth1_check_sum += l1 + l2 + i2 + i3 + i4 + i5 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(long l) {

        int i7=-14, i8=14, i9=228, i10=53, iArr3[]=new int[N];
        double d=64.9334;
        long l3=-586878802L, lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, -236);
        FuzzerUtils.init(lArr2, -63888L);

        vMeth1(Test.instanceCount, Test.instanceCount);
        i7 -= (int)d;
        for (i8 = 3; 237 > i8; ++i8) {
            iArr3[i8] -= (int)l;
            i9 <<= i7;
            i7 += 2;
            i9 += (i8 + i9);
            switch ((i8 % 2) + 70) {
            case 70:
                i7 = i8;
                lArr2[i8 - 1] += i7;
                break;
            case 71:
                i10 = 1;
                while (++i10 < 7) {
                    i9 = 43216;
                    Test.instanceCount += 3;
                    i9 = (int)l;
                    l3 -= 10032;
                }
            }
        }
        long meth_res = l + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + l3 + FuzzerUtils.checkSum(iArr3) +
            FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l4=-66L, lArr[]=new long[N];
        int i11=11, i12=-133, i13=-3, i14=175, i15=-248, i16=-169, i17=-32669, iArr1[]=new int[N];

        FuzzerUtils.init(lArr, -4624960385517434716L);
        FuzzerUtils.init(iArr1, -10);

        vMeth();
        iFld >>>= (int)(--lArr[(8585 >>> 1) % N]);
        vMeth();
        Test.fFld /= (((Test.sFld &= (short)iFld) + (Test.byFld - (iFld += Test.sFld))) | 1);
        Test.instanceCount += (((iArr1[(iFld >>> 1) % N] = iFld) - lMeth(l4)) * l4);
        iArr1[(iFld >>> 1) % N] = iFld;
        for (i11 = 5; 177 > i11; ++i11) {
            Test.instanceCount = i12;
            iFld = i12;
            i12 += iFld;
            Test.instanceCount -= -176;
            Test.sFld += (short)(i11 + i13);
            i13 = i11;
            i13 -= i12;
        }
        iArr1[(i12 >>> 1) % N] += i12;
        for (i14 = 7; i14 < 174; i14++) {
            boolean b=true;
            if (b) {
                Test.fFld *= iFld;
                i12 += (i14 * i14);
                Test.instanceCount += (i14 * i14);
                iArrFld = iArrFld;
            } else {
                for (i16 = 3; i16 < 150; i16++) {
                    i17 /= (int)(i12 | 1);
                    lArr[i16 + 1] = i13;
                    i13 += i11;
                    i12 = i14;
                    Test.fFld -= Test.fFld;
                }
            }
            l4 >>= l4;
            Test.byArrFld[i14 - 1] -= (byte)1077840907L;
            iArrFld[i14][i14] *= iFld;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vMeth1 lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
