package tests.javafuzzer3055;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:20:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2238589566456984440L;
    public static int iFld=-31858;
    public static byte byFld=33;
    public volatile double dFld=110.81879;
    public float fFld=0.695F;
    public static short sFld=23564;
    public boolean bArrFld[][]=new boolean[N][N];
    public float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public double dArrFld[][]=new double[N][N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s, float f) {

        long l=7L;
        int i4=37, i5=-106, i6=6, i7=159, i8=11, iArr[]=new int[N];
        byte by=-16;
        double d=97.89051;

        FuzzerUtils.init(iArr, 28255);

        for (l = 1; l < 170; l++) {
            i4 *= i4;
            Test.iFld >>>= by;
            i5 = 1;
            do {
                Test.instanceCount -= l;
                for (i6 = 1; i6 < 1; ++i6) {
                    Test.instanceCount >>= 5602821848590969405L;
                    i4 <<= i6;
                }
                Test.iFld *= -116;
                Test.iFld >>= (int)-59776L;
            } while (++i5 < 9);
            f -= Test.iFld;
            i8 = 1;
            do {
                d = 1;
                while (++d < 1) {
                    f += i8;
                }
                iArr[(int)(l)] = Test.iFld;
            } while (++i8 < 9);
        }
        long meth_res = s + Float.floatToIntBits(f) + l + i4 + by + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        float f1=-8.389F;
        int i9=-2, i10=-14, i11=11, i12=-34811, i13=51291, i14=64569, iArr1[]=new int[N];
        short s1=7715;

        FuzzerUtils.init(iArr1, 87);

        Test.iFld += (-((Test.iFld--) * (-iMeth((short)(-21214), f1))));
        i9 += s1;
        Test.instanceCount <<= Test.instanceCount;
        i10 = 1;
        do {
            try {
                i9 = (i9 % -1272350655);
                i9 = (i9 / 15453);
                i9 = (i11 / 215);
            } catch (ArithmeticException a_e) {}
            i12 = 12;
            while (--i12 > 0) {
                i9 += (((i12 * Test.iFld) + Test.iFld) - i12);
                f1 = Test.instanceCount;
                i11 = i11;
                i11 += (i12 ^ i10);
                i9 -= (int)Test.instanceCount;
            }
            for (i13 = 1; i13 < 12; ++i13) {
                i9 = -91;
                iArr1[i13 - 1] = i13;
                f1 += (-11 + (i13 * i13));
            }
        } while (++i10 < 130);
        long meth_res = Float.floatToIntBits(f1) + i9 + s1 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i, int i1) {

        int i2=9, i3=-14, i15=52048;
        boolean b=false;
        double d1=-2.84899;

        Test.instanceCount <<= (Test.instanceCount++);
        for (i2 = 20; 323 > i2; ++i2) {
            Test.instanceCount *= (Integer.reverseBytes(++i) - (-lMeth()));
            Test.iFld <<= i3;
            i += i2;
            i15 = 1;
            do {
                i -= i3;
                Test.iFld += (int)-67.604F;
                Test.instanceCount = Test.byFld;
                bArrFld[i15 + 1][i2] = b;
                d1 = i1;
                Test.byFld = (byte)i1;
                d1 += 0.8097;
                fArrFld[i15 + 1] += i;
                i -= (int)Test.instanceCount;
            } while (++i15 < 5);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i15 + (b ? 1 : 0) + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i16=-61928, i17=5, i18=38, i19=-54997, i20=-8, i21=125, i22=52339, i23=-8, iArr2[]=new int[N], iArr3[]=new
            int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 49507);
        FuzzerUtils.init(iArr3, 0);

        vMeth(27155, Test.iFld);
        for (i16 = 10; i16 < 280; i16++) {
            i17 *= i16;
            for (i18 = 4; i18 < 93; i18++) {
                switch ((i16 % 9) + 30) {
                case 30:
                    iArr2[i16] *= i18;
                    break;
                case 31:
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount += (long)dFld;
                    switch (((i19 >>> 1) % 3) + 121) {
                    case 121:
                        Test.iFld *= Test.iFld;
                        for (i20 = 1; i20 < 2; i20 += 2) {
                            i19 >>= i21;
                            Test.instanceCount += (i20 * i20);
                            Test.byFld -= (byte)-3830;
                            iArr2[i16] += i19;
                            try {
                                i19 = (i18 % -42125);
                                iArr3[i18] = (-363042468 / Test.iFld);
                                i17 = (Test.iFld % 29);
                            } catch (ArithmeticException a_e) {}
                            fFld = i17;
                            fArrFld[i20] = i19;
                            b1 = b1;
                        }
                        i21 += i18;
                    case 122:
                        i17 += (i18 | i21);
                    case 123:
                        for (i22 = 1; i22 < 2; i22++) {
                            lArrFld[i22 + 1] = i21;
                            switch ((((i22 >>> 1) % 10) * 5) + 52) {
                            case 85:
                                fFld += 6305;
                                i21 += (((i22 * i16) + i21) - i19);
                            case 96:
                            case 67:
                                Test.instanceCount = -52868L;
                                break;
                            case 98:
                                Test.instanceCount += i17;
                                i19 = (int)Test.instanceCount;
                                break;
                            case 86:
                                Test.instanceCount = i21;
                                break;
                            case 80:
                                i21 -= i22;
                                break;
                            case 71:
                                i21 *= 0;
                            case 78:
                                Test.iFld *= (int)dFld;
                                break;
                            case 76:
                                i19 <<= i19;
                                break;
                            case 65:
                                Test.byFld += (byte)(((i22 * i22) + Test.instanceCount) - fFld);
                            default:
                                iArr3[i18 - 1] = i18;
                            }
                        }
                        break;
                    default:
                        iArr3 = iArr3;
                    }
                    break;
                case 32:
                    fFld += i18;
                    break;
                case 33:
                    dArrFld[i18][i16] -= Test.iFld;
                    break;
                case 34:
                    i23 <<= i19;
                case 35:
                    if (b1) continue;
                    break;
                case 36:
                    Test.sFld -= (short)i21;
                    break;
                case 37:
                    Test.instanceCount &= Test.iFld;
                case 38:
                    Test.iFld -= i22;
                    break;
                default:
                    i19 += (i18 + Test.instanceCount);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
