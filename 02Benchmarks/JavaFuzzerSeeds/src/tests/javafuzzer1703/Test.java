package tests.javafuzzer1703;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:07:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1849723184L;
    public static int iFld=52285;
    public static boolean bFld=false;
    public static volatile int iFld1=-42802;
    public static short sFld=-4832;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -31065);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, long l2, long l3) {

        long l4=99L, lArr[]=new long[N];
        int i8=187, i9=14, i10=49851, i11=248, i12=134;
        double d1=125.44977;
        byte by=114;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, 4L);
        FuzzerUtils.init(bArr1, true);

        i7 = (int)l3;
        i7 += i7;
        for (l4 = 4; l4 < 227; l4++) {
            lArr[(int)(l4)] = (long)d1;
            for (i9 = 1; i9 < 7; ++i9) {
                Test.iFld = Test.iFld;
                switch ((int)(((l4 % 3) * 5) + 73)) {
                case 87:
                    Test.iArrFld[i9] *= i7;
                    i10 <<= (int)-13L;
                    break;
                case 77:
                    i11 = 1;
                    do {
                        i12 = by;
                        i12 += i9;
                        Test.iArrFld[i9] *= i8;
                        bArr1[i9 - 1] = Test.bFld;
                    } while (++i11 < 2);
                    break;
                case 88:
                    i10 += (int)-7157470138109289521L;
                    break;
                default:
                    i8 -= i10;
                }
            }
        }
        long meth_res = i7 + l2 + l3 + l4 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(float f1, int i3) {

        int i4=112, i5=-231, i6=-28308, iArr1[]=new int[N];
        double d=0.39801;
        short s=-20314;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 5765);
        FuzzerUtils.init(fArr, -10.809F);

        for (i4 = 1; i4 < 127; i4++) {
            Test.instanceCount *= (long)((d - (-i3)) + i5);
            i6 = 1;
            while (++i6 < 12) {
                Test.iFld = (i3++);
                switch (((i4 % 5) * 5) + 112) {
                case 115:
                    switch ((i4 % 6) + 58) {
                    case 58:
                    case 59:
                        f1 = (iArr1[i6]++);
                        i3 += (((i6 * Test.instanceCount) + f1) - i3);
                        i3 += (((i6 * Test.instanceCount) + i4) - i5);
                        break;
                    case 60:
                        d -= lMeth(i5, Test.instanceCount, 44633L);
                        i5 = (int)f1;
                        i5 += -18440;
                        i3 ^= Test.iFld1;
                        break;
                    case 61:
                        Test.iFld1 += (((i6 * f1) + Test.iFld) - Test.iFld1);
                        if (Test.iFld != 0) {
                            vMeth1_check_sum += Float.floatToIntBits(f1) + i3 + i4 + i5 + Double.doubleToLongBits(d) +
                                i6 + s + FuzzerUtils.checkSum(iArr1) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                    case 62:
                        iArr1[i6] <<= (int)Test.instanceCount;
                        break;
                    case 63:
                        fArr[i4 - 1] += -13;
                        break;
                    default:
                        Test.iArrFld[i4] = s;
                    }
                    break;
                case 120:
                    Test.iFld += (((i6 * Test.instanceCount) + f1) - i4);
                case 131:
                    i5 += (int)d;
                    break;
                case 118:
                    Test.instanceCount += (i6 - Test.instanceCount);
                case 128:
                    Test.instanceCount >>= Test.iFld;
                    break;
                default:
                    try {
                        i5 = (Test.iFld1 / Test.iFld);
                        iArr1[i4] = (i4 / -6188);
                        i3 = (Test.iArrFld[i4] / 400127323);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + s +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, long l1, int i) {

        int i1=-124, i2=13, i13=13, i14=12, i15=64538, iArr[]=new int[N];
        float f=123.387F, f2=-17.1020F;
        byte by1=48, by2=23;
        long l5=-188L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -13017);

        for (i1 = 10; 227 > i1; i1++) {
            if (bArr[i1]) continue;
            iArr[i1] = Short.reverseBytes((short)((Test.iFld * i2) * (l1 += 253)));
            Test.iFld = (int)(-f);
            vMeth1(f, i);
            Test.iFld &= by1;
            by2 = (byte)i2;
            for (l5 = 1; 7 > l5; ++l5) {
                for (f2 = 1; f2 < 2; ++f2) {
                    Test.iFld1 = (int)Test.instanceCount;
                    i <<= i13;
                    i15 -= Test.sFld;
                    if (Test.bFld) continue;
                    i15 *= (int)127L;
                    Test.iArrFld[(int)(f2 - 1)] -= (int)f2;
                }
            }
        }
        vMeth_check_sum += l + l1 + i + i1 + i2 + Float.floatToIntBits(f) + by1 + by2 + l5 + i13 +
            Float.floatToIntBits(f2) + i14 + i15 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=2, i17=-6, i18=258, i19=93, i20=7, i21=-11219, i22=-14737, i23=62;
        float f3=-96.972F;
        double d2=-43.115467;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-27);

        vMeth(Test.instanceCount, Test.instanceCount, Test.iFld1);
        byArr = byArr;
        Test.iArrFld = Test.iArrFld;
        for (i16 = 6; 198 > i16; i16++) {
            Test.instanceCount *= Test.iFld1;
            f3 += ((long)i16 ^ (long)Test.iFld);
            Test.iArrFld[i16] *= (int)d2;
            i17 = (int)Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
            Test.instanceCount >>>= 26;
            Test.iFld += i16;
            Test.iFld1 = i16;
            Test.iFld &= Test.sFld;
        }
        for (i18 = 190; i18 > 8; --i18) {
            for (i20 = 1; i20 < 138; i20++) {
                lArrFld[i20 + 1] += Test.instanceCount;
                i22 = 1;
                while (++i22 < 2) {
                    Test.instanceCount |= i22;
                    Test.iFld1 /= (int)(i17 | 1);
                    Test.iArrFld[i20 + 1] = 57;
                    f3 = i17;
                }
                i23 -= (int)Test.instanceCount;
                Test.iFld1 = i20;
                i17 = i22;
            }
            i21 -= 59328;
            switch ((((i18 >>> 1) % 1) * 5) + 36) {
            case 41:
                switch ((i18 % 2) + 18) {
                case 18:
                    Test.instanceCount += (i18 * i18);
                    if (Test.bFld) break;
                    i23 += (-27 + (i18 * i18));
                    break;
                case 19:
                    Test.iArrFld = Test.iArrFld;
                    break;
                }
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
