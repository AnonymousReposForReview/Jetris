package tests.javafuzzer1303;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:51:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3721847378L;
    public static byte byFld=27;
    public static double dFld=-1.30818;
    public static boolean bFld=true;
    public volatile short sFld=-22947;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i12=-12, i13=9, i14=-214, i15=-12, i16=-15648, i17=-8, i18=10;
        float f1=0.818F, fArr1[]=new float[N];
        short s1=-16451;

        FuzzerUtils.init(fArr1, 67.909F);

        i12 -= -3;
        i12 = i12;
        for (i13 = 12; i13 < 194; ++i13) {
            Test.instanceCount -= Test.byFld;
            f1 += (i13 * i14);
            Test.instanceCount = s1;
            for (i15 = 9; 1 < i15; --i15) {
                if (true) {
                    for (i17 = 2; i17 > 1; --i17) {
                        i18 *= i12;
                        Test.iArrFld[i17 - 1] += i14;
                        fArr1 = fArr1;
                        fArr1[i13] -= s1;
                        i12 *= (int)Test.instanceCount;
                        i16 = -39669;
                    }
                }
            }
        }
        vMeth2_check_sum += i12 + i13 + i14 + Float.floatToIntBits(f1) + s1 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(double d) {

        int i19=-805, i20=242, i21=-20311, i22=-48723, i23=5649, i24=-14, i25=12;
        float f2=-96.497F, fArr2[][]=new float[N][N];
        short s2=9380;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr2, 96.396F);
        FuzzerUtils.init(lArr1, -48758L);

        vMeth2();
        Test.iArrFld[(i19 >>> 1) % N] >>>= -57778;
        i20 = 1;
        do {
            i19 -= (int)d;
            fArr2 = fArr2;
            for (i21 = 1; 6 > i21; ++i21) {
                for (i23 = 1; i23 < 2; ++i23) {
                    if (Test.bFld) continue;
                    lArr1[i23] = FuzzerUtils.long1array(N, (long)-35901L);
                    i24 += (int)f2;
                    Test.iArrFld[i20] += 63;
                }
                i25 = 1;
                while (++i25 < 2) {
                    Test.dFld = Test.instanceCount;
                    i24 = s2;
                }
                i22 += (((i21 * i19) + Test.instanceCount) - Test.instanceCount);
            }
        } while (++i20 < 272);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i19 + i20 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f2) +
            i25 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(boolean b, int i2, int i3) {

        int i4=11352, i5=95, i6=-210, i7=104, i8=-5, i9=-64330, i10=-8, i11=189;
        float f=127.167F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-107);
        FuzzerUtils.init(fArr, 1.968F);

        switch (((((int)(Test.dFld - i3)) >>> 1) % 2) + 8) {
        case 8:
            for (i4 = 11; i4 < 324; i4++) {
                byArr[i4] = (byte)(((++fArr[i4]) + (--Test.instanceCount)) + (Math.abs(i4) / ((12 + Math.max(i4, i4)) |
                    1)));
            }
            i6 = 1;
            while ((i6 += 3) < 371) {
                short s=1756;
                i3 <<= i3;
                i3 += (i6 | s);
                i5 += (7 + (i6 * i6));
                for (f = i6; f < 13; f++) {
                    if (i5 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 +
                            i9 + i10 + i11 + FuzzerUtils.checkSum(byArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
                for (i8 = 1; i8 < 13; i8 += 3) {
                    if ((Test.iArrFld[i6 - 1] - (--Test.instanceCount)) != (((++i3) % ((-i7) | 1)) +
                        Integer.reverseBytes(i2))) break;
                    Test.instanceCount += i8;
                    for (i10 = 1; i10 < 4; ++i10) {
                        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = FuzzerUtils.int1array(N, (int)-9)));
                        i2 >>>= (int)Test.instanceCount;
                    }
                }
            }
            break;
        case 9:
            vMeth1(Test.dFld);
            break;
        default:
            i7 |= i7;
        }
        vMeth_check_sum += (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=48177, i26=-81, i27=103, i28=-10463, i29=0, i30=7;
        long l=-11630L, lArr[]=new long[N];
        float f3=-2.659F;

        FuzzerUtils.init(lArr, -5759503826123642102L);

        Test.byFld ^= (byte)(Test.iArrFld[(i >>> 1) % N]--);
        i1 = 1;
        do {
            i += (-1 + (i1 * i1));
            i += i;
            i = (int)(((--i) + (++dArrFld[i1])) + ((i1 - 1523621488449444716L) - -5L));
            dArrFld[i1 + 1] += lArr[i1];
            vMeth(Test.bFld, i, i1);
            for (i26 = 2; 67 > i26; ++i26) {
                l = 1;
                do {
                    i += (11 + (l * l));
                    i27 <<= i27;
                    Test.instanceCount += l;
                    Test.instanceCount = i26;
                    Test.iArrFld[(int)(l - 1)] = i1;
                    lArr[(int)(l + 1)] -= 3;
                    try {
                        i = (i26 / i);
                        i = (i / i1);
                        i27 = (i26 % 116);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i27;
                    f3 *= (float)Test.dFld;
                    f3 -= i26;
                } while (++l < 2);
                i28 = 1;
                while ((i28 += 2) < 2) {
                    i27 >>= i;
                    Test.instanceCount &= -16359;
                    i = Test.byFld;
                    Test.instanceCount = Test.instanceCount;
                    i *= sFld;
                    i27 >>>= i27;
                }
                fArrFld[i26 - 1] = i26;
                for (i29 = 1; i29 < 2; ++i29) {
                    i27 = -44629;
                    Test.dFld = i27;
                }
            }
        } while (++i1 < 375);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
