package tests.javafuzzer2136;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:20:37 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-16047L;
    public static long lFld=-36L;
    public static float fFld=76.909F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 11L);
        FuzzerUtils.init(Test.iArrFld, 72);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i2) {

        int i3=26484, i4=-14, i5=-74, i6=-3, i7=-37947;
        boolean b=false;
        double d=0.3623;
        long l=-93L;

        for (i3 = 6; i3 < 122; ++i3) {
            if (b) continue;
            i4 += (((i3 * i3) + i4) - Test.instanceCount);
            for (i5 = 1; i5 < 13; i5++) {
                f1 -= (float)d;
                f1 = f1;
                Test.lArrFld = Test.lArrFld;
                i6 *= i3;
                for (l = 1; l < 2; l++) {
                    Test.instanceCount *= (long)d;
                    if (b) {
                        Test.lArrFld[i3] &= i4;
                        Test.lArrFld[(int)(l + 1)] -= i5;
                        Test.instanceCount ^= i7;
                    } else {
                        i6 += (int)(((l * l) + i7) - Test.lFld);
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d) +
            l + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(short s, float f, int i1) {

        int i8=-29698, i9=11, i10=12, i11=-44059;
        double d1=2.85363;
        byte by=-99;

        i1 *= (int)((iMeth(f, i1) - Test.fFld) + 760646053079634298L);
        for (i8 = 314; i8 > 4; --i8) {
            f += (-2.636F + (i8 * i8));
            i10 = 5;
            while ((i10 -= 3) > 0) {
                i9 ^= (int)Test.lFld;
                s += (short)(i10 * Test.fFld);
                for (d1 = 1; d1 < 3; d1++) {
                    i11 = (int)Test.instanceCount;
                    if (true) break;
                    Test.lFld = i9;
                    i9 = i10;
                    by = (byte)6112906853329160523L;
                    i9 >>= (int)Test.instanceCount;
                }
                i1 -= (int)Test.instanceCount;
                Test.lFld += i10;
            }
        }
        vMeth1_check_sum += s + Float.floatToIntBits(f) + i1 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + by;
    }

    public static void vMeth(int i) {

        short s1=-18633;
        int i12=-6, i13=-2, i14=79, i15=-61662, i16=-13, i17=-21981, iArr[][]=new int[N][N];
        byte by1=28;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -36.383F);
        FuzzerUtils.init(iArr, -8);

        vMeth1(s1, Test.fFld, i);
        for (long l1 : Test.lArrFld) {
            Test.lFld <<= i;
            for (i12 = 1; i12 < 4; i12++) {
                double d2=21.129433;
                d2 -= 12;
                i13 += (int)Test.instanceCount;
                i13 *= by1;
                for (i14 = 1; i14 < 2; i14 += 2) {
                    fArr[i14 - 1] = Test.instanceCount;
                }
                for (i16 = i12; i16 < 2; ++i16) {
                    Test.lFld >>>= Test.lFld;
                    i13 -= i12;
                    Test.fFld -= Test.fFld;
                    d2 = 228;
                    iArr[i12 - 1][i16] *= i14;
                }
            }
        }
        vMeth_check_sum += i + s1 + i12 + i13 + by1 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-93, i19=-9, i20=145, i21=211, i22=14, i23=-32, i24=-11322, i25=-13, i26=-10, i27=-1432, i28=-5, i29=3;
        byte by2=-69;
        double d3=2.25105;
        boolean b1=true;

        vMeth(10);
        for (i18 = 10; i18 < 181; i18++) {
            for (i20 = 2; i20 < 147; i20++) {
                for (i22 = 1; i22 < 2; i22++) {
                    i21 |= 11;
                    by2 = (byte)i18;
                    i19 += (int)d3;
                    i19 = 40;
                    i23 += (int)5L;
                    i21 ^= -2960;
                    d3 *= i23;
                    Test.lFld += i22;
                }
                i21 = i20;
                for (i24 = 1; i24 < 2; ++i24) {
                    short s2=7670;
                    s2 += (short)Test.lFld;
                    Test.fFld += (i24 * i24);
                    i25 = i18;
                    Test.lFld -= i18;
                }
                i21 += i20;
                i21 -= i20;
                switch (((i18 % 6) * 5) + 90) {
                case 98:
                    for (i26 = i20; i26 < 2; i26++) {
                        Test.iArrFld[i18 - 1] -= 17751;
                        b1 = true;
                        i25 &= (int)1852553436751180568L;
                    }
                    break;
                case 91:
                case 101:
                    i23 += i23;
                    for (i28 = i18; 2 > i28; ++i28) {
                        Test.lFld -= i25;
                        i19 -= i26;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-13);
                    }
                    break;
                case 94:
                case 114:
                    Test.instanceCount ^= by2;
                    break;
                case 97:
                    by2 += (byte)Test.instanceCount;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
