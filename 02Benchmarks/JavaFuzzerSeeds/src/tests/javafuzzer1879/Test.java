package tests.javafuzzer1879;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:12:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=36999L;
    public static float fFld=0.410F;
    public short sFld=-12373;
    public static volatile short sFld1=2537;
    public static volatile boolean bFld=true;
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public static volatile int iArrFld1[][]=new int[N][N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 105L);
        FuzzerUtils.init(Test.iArrFld1, 10);
        FuzzerUtils.init(Test.fArrFld, -127.312F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i5, double d, int i6) {

        int i7=86, i8=232, i9=8, iArr[]=new int[N];
        byte by=70;
        double d1=-1.99260, dArr[]=new double[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -51.118514);
        FuzzerUtils.init(fArr, -2.653F);
        FuzzerUtils.init(iArr, 215);

        Test.lArrFld[(-1 >>> 1) % N] = -3031342814822378650L;
        for (i7 = 1; i7 < 179; ++i7) {
            i8 = (int)Test.fFld;
            dArr[i7 - 1] *= by;
            i9 = 1;
            while (++i9 < 9) {
                i6 += i8;
                Test.instanceCount = i9;
                d1 = 1;
                do {
                    Test.fFld = 23703;
                    fArr[i9] *= Test.instanceCount;
                    iArr[i9 - 1] = i7;
                    i8 -= (int)d1;
                } while ((d1 += 2) < 1);
                i6 += i9;
                Test.sFld1 += (short)Test.instanceCount;
                b = b;
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + by + i9 + Double.doubleToLongBits(d1) + (b ? 1
            : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i2) {

        int i3=229, i4=238, i10=-4, i11=-70;
        double d2=0.6598;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        try {
            Test.iArrFld1[(i2 >>> 1) % N][(i2 >>> 1) % N] -= (int)(++Test.fFld);
            for (i3 = 7; i3 < (130 + 400); ++i3) {
                bArr[i3 + 1] = (!bMeth(i2, d2, i4));
                i2 = (int)Test.instanceCount;
                Test.iArrFld1[i3][i3] += (int)Test.instanceCount;
                for (i10 = 1 - 400; 4 > i10; i10++) {
                    i4 += i10;
                    Test.lArrFld[i3 + 1] = -12090;
                    if (b1) break;
                    Test.fArrFld = Test.fArrFld;
                    Test.instanceCount = i4;
                    Test.instanceCount -= i10;
                    i2 += (i10 | Test.instanceCount);
                    i2 <<= i3;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            Test.instanceCount *= i4;
        }
        catch (UserDefinedExceptionTest exc3) {
            d2 *= -90;
        }
        finally {
            Test.lArrFld[(i11 >>> 1) % N] = -36;
        }
        long meth_res = i2 + i3 + i4 + Double.doubleToLongBits(d2) + i10 + i11 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i1) {


        i1 -= (Math.max(i1 - i1, i1 + -7) - ((i1 * i1) + iMeth(i1)));
        Test.bFld = Test.bFld;
        vSmallMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        int i=-36887, i12=29121, i13=-54130, i15=-61019, i16=31, i17=-148, i18=-2, iArr1[]=new int[N];
        double d3=42.30556, d4=-5.84096;
        float f=84.310F;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr1, 24989);
        FuzzerUtils.init(sArr, (short)-6413);

        Test.fFld = (Test.instanceCount & Test.lArrFld[(i >>> 1) % N]);
        switch ((((i - i) >>> 1) % 9) + 126) {
        case 126:
            iArrFld[(-105 >>> 1) % N][(i >>> 1) % N] >>>= (int)(sFld - (i += (int)(++Test.fFld)));
        case 127:
            for (int smallinvoc=0; smallinvoc<850; smallinvoc++) vSmallMeth(i);
            break;
        case 128:
            for (d3 = 7; d3 < 125; d3 += 3) {
                try {
                    i12 = (150 / i);
                    i12 = (2541 / iArrFld[(int)(d3)][(int)(d3)]);
                    i12 = (i12 % 33093);
                } catch (ArithmeticException a_e) {}
                i += (int)Test.instanceCount;
            }
            for (f = 6; f < 343; ++f) {
                i12 += (int)f;
            }
            i = i;
            i12 |= i;
            break;
        case 129:
            Test.instanceCount = i13;
            break;
        case 130:
            i13 <<= (int)Test.instanceCount;
            break;
        case 131:
            if (Test.bFld) {
                Test.iArrFld1[(i13 >>> 1) % N][(i13 >>> 1) % N] += i13;
            } else if (false) {
                Test.fFld = (float)d3;
                for (int i14 : iArr1) {
                    d4 += i12;
                    Test.fFld *= i12;
                    Test.instanceCount += (long)f;
                    for (i15 = 3; i15 < 63; i15++) {
                        i = Test.sFld1;
                        Test.fFld -= i14;
                        i14 = i16;
                        iArrFld[i15][i15 + 1] += i12;
                        Test.fFld += 57966;
                        for (i17 = 2; i17 > 1; --i17) {
                            sArr[i15 + 1][i17 - 1] -= (short)35888;
                            if (Test.bFld) continue;
                            Test.sFld1 >>= (short)Test.instanceCount;
                        }
                    }
                }
            }
            break;
        case 132:
            i13 ^= (int)Test.instanceCount;
            break;
        case 133:
            i16 = i13;
            break;
        case 134:
            i = (int)Test.instanceCount;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
