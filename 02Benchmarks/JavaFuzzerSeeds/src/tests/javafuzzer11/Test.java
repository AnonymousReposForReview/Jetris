package tests.javafuzzer11;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 20:59:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3240281068923913488L;
    public float fFld=52.590F;
    public static int iFld=2;
    public static boolean bFld=true;
    public double dFld=-1.113433;
    public volatile short sFld=-7307;
    public byte byFld=81;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.285F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, long l1, int i2) {

        double d=-76.26292;
        int i3=1, i4=241, i5=4661, i6=1, i7=-40488, i8=5, iArr[]=new int[N];
        byte by=46;

        FuzzerUtils.init(iArr, -162);

        d = -4L;
        i1 >>= i2;
        for (i3 = 7; i3 < 309; ++i3) {
            Test.iFld <<= (int)Test.instanceCount;
            iArr[i3 + 1] >>= i2;
            i4 = i1;
            i4 += by;
            for (i5 = 5; i5 > i3; --i5) {
                Test.iFld /= (int)(i4 | 1);
                i4 -= i2;
                if (Test.bFld) break;
                if (Test.bFld) continue;
                for (i7 = 1; i7 > 1; i7 -= 2) {
                    i2 += i7;
                    l1 += i7;
                }
            }
        }
        long meth_res = i1 + l1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + by + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1() {

        long l=-1059746427554380879L, lArr[][]=new long[N][N];
        int i=10, i9=-227, i10=161, i11=-8;
        byte by1=-69;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)7235);
        FuzzerUtils.init(lArr, -410758088L);

        Test.instanceCount = (long)(Test.instanceCount = (long)fFld);
        for (l = 5; l < 195; l++) {
            i = (int)(Test.instanceCount--);
            iMeth(Test.iFld, l, i);
            Test.iFld = (int)Test.instanceCount;
            dFld -= -17;
            if (Test.bFld) break;
            for (i9 = 1; i9 < 8; ++i9) {
                Test.instanceCount -= i10;
                iArrFld[(int)(l - 1)] &= 9;
                switch ((i9 % 9) + 117) {
                case 117:
                    by1 *= (byte)-61890;
                    Test.iFld += (i9 + i10);
                    Test.iFld = i10;
                    fFld = i;
                    break;
                case 118:
                    if (i10 != 0) {
                        vMeth1_check_sum += l + i + i9 + i10 + by1 + i11 + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                case 119:
                    i11 = sFld;
                    break;
                case 120:
                    i10 = i10;
                    break;
                case 121:
                    sArr[i9 - 1] *= (short)-17735;
                case 122:
                    lArr[(int)(l)][(int)(l)] = -60351;
                    break;
                case 123:
                case 124:
                    Test.instanceCount += i9;
                    break;
                case 125:
                    if (i10 != 0) {
                        vMeth1_check_sum += l + i + i9 + i10 + by1 + i11 + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                }
            }
        }
        vMeth1_check_sum += l + i + i9 + i10 + by1 + i11 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {

        int i12=-12, i13=-133, i14=134, i15=12;

        Test.instanceCount = (long)Test.fArrFld[(-28157 >>> 1) % N];
        vMeth1();
        i12 = 1;
        do {
            Test.instanceCount += (((i12 * i12) + Test.iFld) - byFld);
            for (i13 = 1; i13 < 5; i13 += 3) {
                if (i12 != 0) {
                    vMeth_check_sum += i12 + i13 + i14 + i15;
                    return;
                }
                i14 = (int)-23669L;
                switch ((((Test.iFld >>> 1) % 9) * 5) + 67) {
                case 68:
                    sFld = (short)dFld;
                    i15 = 1;
                    do {
                        fFld = i12;
                    } while (++i15 < 5);
                    break;
                case 80:
                    i14 /= (int)-8641967796043576124L;
                    Test.iFld = (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                case 88:
                    fFld = byFld;
                case 86:
                    Test.iFld += (-8 + (i13 * i13));
                    break;
                case 92:
                    Test.iFld += Test.iFld;
                    break;
                case 112:
                    Test.instanceCount >>>= i13;
                    break;
                case 72:
                    Test.iFld = Test.iFld;
                    break;
                case 106:
                    byFld = (byte)Test.instanceCount;
                case 73:
                    Test.instanceCount -= Test.instanceCount;
                    break;
                }
            }
        } while (++i12 < 331);
        vMeth_check_sum += i12 + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {


        vMeth();
        iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld >>= (int)Test.instanceCount;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
