package tests.javafuzzer796;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:06:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public volatile byte byFld=115;
    public static volatile double dFld=-1.1384;
    public static short sFld=-23488;
    public static boolean bFld=true;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, 3259888279L);
        FuzzerUtils.init(Test.iArrFld1, -8553);
        FuzzerUtils.init(Test.fArrFld, 1.37F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        float f1=-10.828F, f2=1.445F, fArr[]=new float[N];
        boolean b=true;
        int i9=-6;
        byte by1=-25;
        short s=-29402;

        FuzzerUtils.init(fArr, -20.980F);

        for (int i8 : Test.iArrFld1) {
            i8 >>>= i8;
            switch ((((50 >>> 1) % 7) * 5) + 43) {
            case 64:
                f1 = i8;
                fArr[(i8 >>> 1) % N] *= i8;
                if (b) continue;
                switch (((i8 >>> 1) % 2) + 45) {
                case 45:
                    f1 += i8;
                    for (f2 = 1; 4 > f2; f2++) {
                        i8 = i9;
                        i8 = by1;
                        i9 += (int)(f2 * f2);
                        i9 = (int)Test.instanceCount;
                        by1 = (byte)Test.dFld;
                        i8 += (int)(f2 * f2);
                    }
                    break;
                case 46:
                    s = (short)Test.dFld;
                    break;
                }
                break;
            case 47:
                Test.instanceCount *= Test.instanceCount;
            case 60:
                i9 *= (int)Test.instanceCount;
            case 58:
                Test.instanceCount -= i8;
                break;
            case 53:
                Test.instanceCount = 52692;
                break;
            case 62:
                f1 *= 232;
                break;
            case 76:
                i8 = (int)-249L;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + (b ? 1 : 0) + Float.floatToIntBits(f2) + i9 + by1 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i5=-27939, i6=-12, i7=-68, i10=41, iArr[]=new int[N];
        float f=1.907F, f3=1.585F;

        FuzzerUtils.init(iArr, -23249);

        for (int i4 : iArr) {
            byte by=74;
            i4 = (by--);
            for (i5 = 1; i5 < 4; ++i5) {
                i4 = -12904;
                Test.instanceCount >>= (++i6);
                iArr[i5] *= (int)(Test.dFld++);
                f = (float)(((Test.lArrFld1[i5]++) - Test.dFld) + i6);
                switch ((i5 % 5) + 119) {
                case 119:
                    i4 = (int)((i7 + i4) - (Test.instanceCount = iMeth1()));
                    i10 = 1;
                    do {
                        f -= Test.instanceCount;
                        i6 -= i7;
                        Test.dFld += f;
                    } while (++i10 < 2);
                    i4 -= (int)f3;
                case 120:
                case 121:
                    Test.iArrFld1[i5] -= i4;
                case 122:
                    Test.sFld += (short)(-8 + (i5 * i5));
                    break;
                case 123:
                    i4 += i4;
                    break;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f) + i7 + i10 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr);
    }

    public int iMeth() {

        int i11=-3, i12=-36107, i13=-213, i14=62579, i15=34600, i16=-157, i17=-26, i18=0;

        vMeth();
        i11 = i11;
        for (i12 = 12; i12 < 260; i12++) {
            for (i14 = 1; i14 < 7; i14++) {
                Test.fArrFld[i14 - 1] = Test.instanceCount;
                i11 += i15;
                i13 = i13;
                i15 >>= i13;
                Test.instanceCount = Test.instanceCount;
                if (i11 != 0) {
                }
                Test.fArrFld[i14] = i12;
                i16 = (int)-2853344112L;
                for (i17 = 2; i12 < i17; i17--) {
                    i15 = 12;
                    if (i12 != 0) {
                    }
                }
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=20756, i1=25365, i2=-12, i3=0, i19=-36029, i20=7, iArr1[]=new int[N];
        float f4=0.707F;
        long l=-60314L;

        FuzzerUtils.init(iArr1, -138);

        byFld = (byte)i;
        i1 = 1;
        while ((i1 += 3) < 314) {
            for (i2 = 14; 241 > i2; ++i2) {
                i3 *= (i2 ^ (-12012 - iArrFld[i1]));
                if ((++i) == (((i3--) * (--i)) - lArrFld[i1])) continue;
                i3 += (1 + (i2 * i2));
                i3 >>= iMeth();
                switch ((i1 % 2) + 117) {
                case 117:
                    Test.instanceCount += (((i2 * Test.instanceCount) + byFld) - Test.instanceCount);
                    Test.iArrFld1[i1 + 1] >>= (int)-3906038083325450403L;
                    break;
                case 118:
                    i19 = 1;
                    while (++i19 < 2) {
                        i3 = Test.sFld;
                        i += Test.sFld;
                        Test.dFld = i1;
                        if (Test.bFld) break;
                        f4 += (float)0.85261;
                    }
                    i += (5 + (i2 * i2));
                    Test.instanceCount = Test.instanceCount;
                    break;
                default:
                    i3 += 159;
                    Test.instanceCount += i2;
                    switch ((i2 % 7) + 6) {
                    case 6:
                        if (Test.bFld) continue;
                        i3 >>= i3;
                        break;
                    case 7:
                        f4 *= i19;
                        f4 += (((i2 * i2) + i) - i1);
                        Test.instanceCount = i3;
                        break;
                    case 8:
                        for (l = i2; l < 2; l++) {
                            Test.iArrFld1 = iArr1;
                            i = i20;
                        }
                        break;
                    case 9:
                        try {
                            iArr1[i1] = (-409459211 % i1);
                            i20 = (124411412 / i3);
                            i3 = (1208455710 / i19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 10:
                        f4 -= i3;
                        break;
                    case 11:
                        i3 += i2;
                        break;
                    case 12:
                        iArrFld[i1] = i20;
                        break;
                    default:
                        Test.instanceCount += i2;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
