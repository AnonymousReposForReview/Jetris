package tests.javafuzzer2074;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:37:20 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=9L;
    public static int iFld=-47063;
    public static volatile boolean bFld=true;
    public short sFld=-4433;
    public double dFld=0.79895;
    public static short sArrFld[]=new short[N];
    public static volatile float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)2967);
        FuzzerUtils.init(Test.fArrFld, -120.608F);
        FuzzerUtils.init(Test.lArrFld, -6663595250517406909L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static void vMeth() {


        Test.iFld >>= Test.iFld;
        vMeth_check_sum += 0;
    }

    public static short sMeth(int i14, float f1, int i15) {

        int i16=120, i17=-25474, i18=-3078, i19=-4511, i20=-222, i21=145, iArr2[]=new int[N];
        short s=5317;
        byte by=111;

        FuzzerUtils.init(iArr2, 0);

        for (i16 = 15; i16 < 320; i16++) {
            for (i18 = i16; 5 > i18; ++i18) {
                Test.instanceCount = Test.instanceCount;
            }
            switch ((i16 % 10) + 63) {
            case 63:
                Test.instanceCount = i20;
                s <<= (short)i15;
                break;
            case 64:
                Test.instanceCount += i16;
                iArr2[i16] = by;
                Test.instanceCount += (i16 - Test.instanceCount);
                break;
            case 65:
                if (Test.bFld) {
                    i21 = 5;
                    do {
                        iArr2[i16 - 1] -= i14;
                        Test.instanceCount = 23202;
                        i20 += i21;
                        by += (byte)i14;
                    } while (--i21 > 0);
                } else {
                    Test.sArrFld[i16 - 1] = (short)-8;
                }
                break;
            case 66:
                i17 -= i14;
                break;
            case 67:
                Test.fArrFld[i16] += i19;
                break;
            case 68:
                Test.instanceCount &= i14;
                break;
            case 69:
                iArr2[i16 - 1] -= (int)Test.instanceCount;
                break;
            case 70:
            case 71:
                i17 -= i16;
                break;
            case 72:
                i14 = -8;
            }
        }
        long meth_res = i14 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + i19 + i20 + s + by + i21 +
            FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i8) {

        int i9=8, i10=62626, i11=61586, i12=41, i13=22731, i23=151, i24=-6, i25=4314, iArr1[][]=new int[N][N];
        float f2=12.11F;
        double d1=0.19387;

        FuzzerUtils.init(iArr1, 63923);

        for (i9 = 8; i9 < 128; i9++) {
            for (i11 = 1; i11 < 13; i11 += 3) {
                i13 = 1;
                while (++i13 < 4) {
                    try {
                        iArr1[i13][i11] = (i8 % i11);
                        i10 = (41297 / i13);
                        iArr1[i13][i13 + 1] = (i10 % 66);
                    } catch (ArithmeticException a_e) {}
                }
                switch (((((int)(27.587F + sMeth(i13, f2, i11))) >>> 1) % 1) + 54) {
                case 54:
                    Test.iFld += (-246 + (i11 * i11));
                    Test.sArrFld[i11 - 1] |= (short)20;
                    Test.iFld *= i9;
                    for (i23 = 4; 1 < i23; --i23) {
                        Test.iFld *= (int)d1;
                        i24 = (int)Test.instanceCount;
                    }
                    break;
                }
                Test.lArrFld[i11 + 1][i9] *= Test.instanceCount;
                i25 >>= i12;
                if (i11 != 0) {
                }
                iArr1[i11 - 1][i11] *= (int)f2;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i23 + i24 +
            Double.doubleToLongBits(d1) + i25 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i3=113, i4=14, i5=-12, i6=3501, i7=-3, i26=6, i27=11, i28=12124, i29=-119, iArr[]=new int[N];
        float f=-1.582F, fArr[]=new float[N];
        double d=-2.49413, d2=0.125874;

        FuzzerUtils.init(fArr, -83.463F);
        FuzzerUtils.init(iArr, 11);

        vMeth();
        for (i3 = 11; i3 < 393; i3++) {
            f *= (++fArr[i3 + 1]);
            i5 = (int)(d++);
            Test.instanceCount += (i1++);
            for (i6 = i3; i6 < 4; ++i6) {
                iArr[i3 - 1] -= iMeth1(i6);
                Test.instanceCount >>= Test.iFld;
            }
        }
        for (d2 = 8; d2 < 288; ++d2) {
            i1 *= i4;
            Test.sArrFld[(int)(d2 + 1)] -= (short)i2;
            i1 -= i7;
            for (i27 = 1; 6 > i27; i27++) {
                i29 = 109;
                Test.iFld -= i4;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + i6 + i7 +
            Double.doubleToLongBits(d2) + i26 + i27 + i28 + i29 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5477, i30=42, i31=-23742, i32=37320, i33=-28162, i34=-13, i35=13, i36=142, i37=-6, i38=45638, i39=-14654,
            i40=0, i41=-4, i42=-161, i43=-237, i44=39958, iArr3[]=new int[N];
        byte by1=106;
        float f3=-2.776F;

        FuzzerUtils.init(iArr3, 14);

        i = iMeth(i, i);
        for (i30 = 15; i30 < 261; ++i30) {
            by1 |= (byte)-7853;
            iArrFld[i30 - 1] = -238;
        }
        for (i32 = 8; i32 < 131; i32++) {
            for (i34 = 9; i34 < 204; ++i34) {
                for (i36 = 1; i36 < 2; i36++) {
                    i37 -= i33;
                    i += (i36 - i35);
                    i33 = 30;
                    try {
                        i = (i35 % 68);
                        i33 = (i34 % i32);
                        Test.iFld = (i30 / i34);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (((i36 * Test.iFld) + i32) - i35);
                    i = i31;
                    i33 = i32;
                    i33 += (-11 + (i36 * i36));
                    if (Test.bFld) break;
                    Test.iFld += (((i36 * i31) + f3) - sFld);
                }
                i31 += i34;
                i31 = i35;
                iArrFld[i34 - 1] &= (int)Test.instanceCount;
                i33 = i33;
                by1 -= (byte)Test.iFld;
            }
        }
        i38 = 1;
        while (++i38 < 180) {
            i += (int)Test.instanceCount;
        }
        for (i39 = 1; i39 < 393; i39++) {
            for (i41 = 4; i41 < 64; i41++) {
                i33 += i41;
                for (i43 = i39; i43 < 2; ++i43) {
                    dFld = i40;
                    iArr3 = iArrFld;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
