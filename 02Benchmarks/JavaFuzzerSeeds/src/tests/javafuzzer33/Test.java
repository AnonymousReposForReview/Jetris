package tests.javafuzzer33;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:25:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11445L;
    public static boolean bFld=true;
    public static volatile float fFld=91.805F;
    public static short sFld=21939;
    public static double dFld=1.75523;
    public int iFld=3;
    public static int iFld1=48306;
    public static volatile long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13L);
    }

    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4) {

        int i5=-92, i6=-3, i7=-184, i8=-19, i9=11, i10=-6, i11=-54;
        float f=-2.906F, f1=-1.623F, fArr[]=new float[N];
        byte by=-56;
        double d=0.127107;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 0.858F);
        FuzzerUtils.init(bArr, false);

        i5 = 275;
        do {
            i4 *= (int)f;
        } while ((i5 -= 3) > 0);
        f1 = 1;
        while (++f1 < 128) {
            Test.lArrFld[(int)(f1 - 1)][(int)(f1 - 1)] -= 11;
            f -= i5;
            Test.instanceCount += Test.instanceCount;
            for (i6 = (int)(f1); i6 < 12; i6++) {
                Test.instanceCount -= i7;
                for (i8 = 1; 1 > i8; ++i8) {
                    if (Test.bFld) continue;
                }
            }
        }
        Test.instanceCount += by;
        i10 = 371;
        while (--i10 > 0) {
            i11 = 1;
            do {
                bArr[i10 - 1] = Test.bFld;
                d *= -141;
            } while (++i11 < 5);
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + by + i10
            + i11 + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(bArr);
    }

    public static boolean bMeth(int i1) {

        int i2=166, i3=86, i12=10, i13=-125, i14=-4, iArr[]=new int[N];
        long l1=-14L;
        byte by1=-5;
        float f3=-1.699F;
        short s=3343;

        FuzzerUtils.init(iArr, 7);

        for (i2 = 323; 4 < i2; --i2) {
            vMeth(i1);
            if (true) {
                for (l1 = 1; l1 < 5; l1++) {
                    i12 = (int)Test.instanceCount;
                    i3 >>>= i1;
                    by1 -= (byte)i1;
                    Test.instanceCount = i12;
                    for (i13 = 2; i13 > 1; i13--) {
                        i3 = i13;
                        by1 += (byte)(i13 ^ i1);
                        switch ((int)(((l1 % 7) * 5) + 1)) {
                        case 34:
                            Test.lArrFld[i13][i2 - 1] -= l1;
                            if (i1 != 0) {
                                return ((int)(i1 + i2 + i3 + l1 + i12 + by1 + i13 + i14 + Float.floatToIntBits(f3) + s
                                    + FuzzerUtils.checkSum(iArr))) % 2 > 0;
                            }
                            break;
                        case 19:
                            iArr[(int)(l1 + 1)] -= (int)Test.instanceCount;
                            break;
                        case 22:
                            i14 = (int)f3;
                        case 16:
                            i12 = (int)Test.instanceCount;
                            break;
                        case 12:
                            Test.instanceCount += (((i13 * f3) + i13) - i13);
                            break;
                        case 8:
                            i12 += (i13 | s);
                            break;
                        case 18:
                            i1 += i13;
                        default:
                            Test.instanceCount -= i12;
                        }
                    }
                }
                return ((int)(i1 + i2 + i3 + l1 + i12 + by1 + i13 + i14 + Float.floatToIntBits(f3) + s +
                    FuzzerUtils.checkSum(iArr))) % 2 > 0;
            }
        }
        long meth_res = i1 + i2 + i3 + l1 + i12 + by1 + i13 + i14 + Float.floatToIntBits(f3) + s +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth() {

        float f4=-112.52F;
        int i15=-167, i16=-27186, i17=-235, i18=0;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 718120502L);

        for (long l : lArr) {
            if (bMeth(-15453)) continue;
            for (f4 = 1; f4 < 4; f4++) {
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.instanceCount = 200L;
                    Test.fFld -= i16;
                    i15 |= i15;
                    i15 <<= i15;
                    Test.fFld -= -92;
                    Test.sFld = (short)47;
                    i17 -= (int)l;
                    i17 += (i16 * i16);
                }
                Test.instanceCount -= i16;
                i17 += (int)(-3501762024L + (f4 * f4));
                i17 = i18;
            }
        }
        long meth_res = Float.floatToIntBits(f4) + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-21615, i19=8, i20=12, i21=-161, i22=-141, i23=53276, i24=-57359, i25=7, iArr1[][]=new int[N][N];
        long l2=2927624648832802960L;
        byte by2=-92;
        float fArr1[]=new float[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(fArr1, 0.159F);
        FuzzerUtils.init(iArr1, -48924);
        FuzzerUtils.init(bArr1, false);

        i -= (int)((lMeth() * Test.fFld) + -16477L);
        i <<= -14;
        i += (int)Test.instanceCount;
        for (l2 = 4; l2 < 297; l2++) {
            for (i20 = 1; i20 < 86; i20++) {
                i += (i20 - by2);
                for (i22 = 1; i22 < 2; i22++) {
                    Test.fFld *= -7;
                    Test.fFld += l2;
                    fArr1[i22] = i23;
                    i21 += i22;
                    i21 *= i;
                    if (Test.bFld) continue;
                    Test.sFld <<= (short)Test.instanceCount;
                    i19 = i23;
                    iArrFld[i20] *= i21;
                    iArr1 = FuzzerUtils.int2array(N, (int)-64124);
                }
                i23 += -7155;
                i *= i19;
                Test.dFld += -44886;
                Test.lArrFld[(int)(l2 + 1)][i20 + 1] += i;
                for (i24 = (int)(l2); 2 > i24; i24++) {
                    iArr1[(int)(l2 - 1)][i20] %= (int)(i24 | 1);
                    iFld += (int)1.14276;
                    bArr1[i24 - 1] = Test.bFld;
                    i19 += (i24 * i24);
                    i19 <<= iFld;
                    Test.instanceCount -= Test.iFld1;
                }
                Test.instanceCount = (long)Test.fFld;
                Test.fFld += (i20 * i24);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
