package tests.javafuzzer2901;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:43:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=9180574326394239981L;
    public static int iFld=-34429;
    public static volatile float fFld=1.230F;
    public static volatile boolean bFld=true;
    public static short sFld=6160;
    public static byte byFld=-119;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.112F);
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.sArrFld, (short)30844);
    }

    public static long fMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-14, i6=-21717, i7=9, i8=6, i9=12, i10=26490, iArr[]=new int[N];
        double d1=83.77188;

        FuzzerUtils.init(iArr, 202);

        for (i5 = 10; i5 < 322; ++i5) {
            for (i7 = i5; 5 > i7; i7++) {
                Test.instanceCount = (long)2.339F;
                iArr[i7 - 1] += (int)Test.instanceCount;
                i6 = Test.iFld;
                for (i9 = 1; i9 < 1; ++i9) {
                    i8 *= (int)Test.fFld;
                    Test.fFld = -20054;
                    Test.fFld = i10;
                    iArr[i7 + 1] *= -11;
                    d1 += -66.383F;
                    if (i8 != 0) {
                        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i8 ^= -13;
                    if (Test.bFld) break;
                    i6 += i9;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static short sMeth(int i1, double d, int i2) {

        float f=-96.271F;
        int i3=2, i4=-50898, i11=166, i12=87, i13=208, i14=13, i15=-9, i16=-20162, iArr1[]=new int[N];
        byte by1=71;

        FuzzerUtils.init(iArr1, -177);

        Test.instanceCount *= (long)(((Test.instanceCount + f) - (--i2)) + (i2--));
        Test.instanceCount += (i2 += Integer.reverseBytes((int)(-(Test.instanceCount + Test.iFld))));
        for (i3 = 9; i3 < 290; i3++) {
            vMeth();
        }
        for (i11 = 349; i11 > 16; i11 -= 3) {
            Test.iFld += (i11 - Test.instanceCount);
            for (i13 = 1; 14 > i13; ++i13) {
                i2 += (i13 * i13);
                i2 = (int)Test.fFld;
                iArr1[i13 - 1] += (int)d;
                i14 += i13;
                for (i15 = i13; i15 < 2; i15 += 2) {
                    i12 -= 0;
                    i12 >>= i3;
                    by1 = (byte)i15;
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f) + i3 + i4 + i11 + i12 + i13 +
            i14 + i15 + i16 + by1 + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static float fMeth() {

        byte by=68;
        double d2=-119.124362;
        int i17=10206, i18=-29278, i19=-13767, i20=-44659, i21=49529, i22=50329;

        Test.iFld &= (((Test.iFld * Test.iFld) + (Test.iFld ^= Test.iFld)) - ((Test.iFld++) + (Test.iFld * by)));
        sMeth(Test.iFld, d2, Test.iFld);
        for (i17 = 19; i17 < 395; ++i17) {
            Test.instanceCount += (i17 + i17);
            Test.iFld += (int)d2;
        }
        i19 = 1;
        do {
            i20 = 1;
            while (++i20 < 4) {
                for (i21 = 1; 1 > i21; ++i21) {
                    Test.instanceCount *= i22;
                    Test.fArrFld[i21 + 1] *= Test.fFld;
                    i22 -= -9;
                    if (true) break;
                    Test.fFld -= 9L;
                    Test.iArrFld[i19 - 1] = i21;
                    Test.iArrFld[i20 - 1] *= (int)Test.instanceCount;
                }
            }
        } while (++i19 < 379);
        long meth_res = by + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20 + i21 + i22;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i23=-26784, i24=51746, i25=-33401, i26=-45527, i27=-4, i28=9;
        float f1=1.364F, fArr[][]=new float[N][N];
        double d3=-85.40462;

        FuzzerUtils.init(fArr, 0.169F);

        i = (int)(fMeth() + i);
        Test.fFld += i;
        Test.iFld = Test.iFld;
        i23 = 383;
        while ((i23 -= 2) > 0) {
            Test.iArrFld[i23 - 1] -= Test.sFld;
            for (f1 = 2; f1 < 131; f1++) {
                Test.instanceCount += (long)(((f1 * i24) + Test.iFld) - i24);
                i -= (int)d3;
                for (i25 = i23; i25 < 2; i25++) {
                    Test.sArrFld[(int)(f1)] = (short)i23;
                    i *= i25;
                    Test.iFld += i25;
                    Test.iFld += (((i25 * Test.instanceCount) + i25) - i25);
                    Test.byFld = (byte)i;
                    i *= (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    if (Test.bFld) break;
                    Test.fFld = i26;
                    i24 = (int)Test.instanceCount;
                }
                Test.fArrFld[(i23 >>> 1) % N] -= Test.iFld;
                fArr = fArr;
                for (i27 = 1; i27 < 2; ++i27) {
                    if (Test.bFld) break;
                    Test.iFld += (((i27 * Test.instanceCount) + Test.iFld) - i24);
                    Test.iFld -= (int)Test.instanceCount;
                    Test.instanceCount += (5 + (i27 * i27));
                    i24 >>= i;
                }
                Test.iArrFld[i23 - 1] *= (int)Test.instanceCount;
                i26 += (int)(((f1 * Test.byFld) + i24) - Test.instanceCount);
                i24 += (int)f1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  sMeth ->  sMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
