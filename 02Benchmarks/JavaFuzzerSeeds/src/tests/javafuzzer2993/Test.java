package tests.javafuzzer2993;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:27:37 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=46748L;
    public static boolean bFld=false;
    public static short sFld=-11139;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.861F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10) {

        float f1=-2.700F, fArr[]=new float[N];
        double d=-2.18971, dArr[]=new double[N];
        int i11=4, i12=10, i13=-64;

        FuzzerUtils.init(dArr, 57.56942);
        FuzzerUtils.init(fArr, 8.394F);

        f1 = i10;
        d -= i10;
        for (i11 = 222; i11 > 9; i11 -= 3) {
            f1 += ((long)i11 | (long)i12);
            i12 += (i11 | i10);
            dArr[i11 + 1] = Test.instanceCount;
            i12 = i10;
            i13 = 1;
            while (++i13 < 22) {
                d -= i13;
                fArr[i11 + 1] *= i10;
                Test.instanceCount <<= -1L;
                if (Test.bFld) break;
                Test.instanceCount *= i10;
                Test.instanceCount += i13;
                if (Test.bFld) continue;
            }
        }
        vMeth1_check_sum += i10 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(float f, long l, byte by) {

        int i8=194, i9=-55139, i14=-82, i15=135, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(iArr1, -30284);

        for (i8 = 357; i8 > 10; --i8) {
            i9 = ((++i9) + (Math.abs(i9) - i9));
            vMeth1(i8);
            lArr1[i8] &= i8;
            try {
                iArr1[i8] = (i8 % i8);
                i9 = (i9 % -40210);
                i9 = (i9 % i9);
            } catch (ArithmeticException a_e) {}
            by -= (byte)Test.sFld;
            if (false) continue;
            i9 += i8;
            if (Test.bFld) {
                Test.instanceCount >>= Test.instanceCount;
                by = (byte)l;
                i9 += by;
                for (i14 = 1; 5 > i14; i14++) {
                    Test.fArrFld[i14 + 1][i8] %= (Test.instanceCount | 1);
                    lArr1[i8] += i14;
                }
            } else if (Test.bFld) {
                i15 += (i8 * i8);
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + by + i8 + i9 + i14 + i15 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=37, i2=-9, i4=-4, i5=0, i6=3456, i7=-25624, iArr[]=new int[N];
        float f2=69.867F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(lArr, 10L);

        for (i1 = 347; 3 < i1; i1 -= 2) {
            for (i4 = 1; i4 < 9; i4++) {
                i -= (iArr[i1 - 1]++);
                switch ((i4 % 2) + 3) {
                case 3:
                    i5 += (i4 * i4);
                    i5 += (-9616 + (i4 * i4));
                    break;
                case 4:
                    lArr[i4] += i1;
                    i2 -= Integer.reverseBytes(i4);
                    i += i4;
                    i5 += (((i4 * Test.instanceCount) + i5) - i4);
                default:
                    for (i6 = 1; i6 < 2; i6++) {
                        double d1=1.49608;
                        lArr[i6 - 1] = (Math.min(i1 - 11617, (int)(i * Test.instanceCount)) - ((i6 - i7) + iMeth(f2,
                            Test.instanceCount, (byte)(-9))));
                        i5 = 191;
                        d1 -= i;
                        i >>= i2;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=13, i17=-212, i18=3, i19=-79, i20=86, i21=-2, i22=-43114, iArr2[]=new int[N];
        byte by1=-110;
        double d2=-86.101369;
        float f3=-69.39F, f4=-3.1000F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -61L);
        FuzzerUtils.init(iArr2, 5340);

        vMeth(i16);
        lArr2[(i16 >>> 1) % N] <<= Test.instanceCount;
        i16 %= 69;
        iArr2[(-14 >>> 1) % N] += (int)2141218800L;
        i17 = 1;
        do {
            iArr2 = iArr2;
            for (i18 = 1; i18 < 70; i18++) {
                Test.instanceCount += i18;
                by1 += (byte)(-228L + (i18 * i18));
                i19 = (int)Test.instanceCount;
                i16 = (int)d2;
            }
            f3 += i19;
        } while (++i17 < 361);
        lArr2[(i18 >>> 1) % N] >>>= Test.sFld;
        i16 *= i18;
        i20 = 1;
        do {
            Test.instanceCount = by1;
            i16 >>>= Test.sFld;
            d2 = 64830;
            i16 ^= i17;
            i16 += i20;
            f4 = 1;
            while (++f4 < 183) {
                i19 += 169;
                lArr2[(int)(f4 - 1)] *= i16;
                i19 += (int)(1.0F + (f4 * f4));
                switch ((int)((f4 % 2) + 40)) {
                case 40:
                    lArr2[i20 - 1] = (long)d2;
                    i19 = i20;
                    for (i21 = 1; 1 < i21; i21 -= 3) {
                        Test.instanceCount -= i21;
                        d2 += i22;
                    }
                    break;
                case 41:
                    i19 += (int)(((f4 * f3) + i22) - i18);
                    break;
                default:
                    by1 = (byte)f3;
                }
            }
        } while (++i20 < 137);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
