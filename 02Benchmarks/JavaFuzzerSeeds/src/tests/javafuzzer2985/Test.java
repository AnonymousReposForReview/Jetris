package tests.javafuzzer2985;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:26:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=217L;
    public static int iFld=-87;
    public static int iFld1=4;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth1(long l, int i2) {

        int i4=-218, iArr[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(bArr, true);

        for (int i3 : iArr) {
            if (b = bArr[(i2 >>> 1) % N]) {
                Test.instanceCount = (long)((6 + (i3--)) + ((Test.instanceCount * -117.500F) + (i4 |
                    Test.instanceCount)));
            }
            iArr[(i3 >>> 1) % N] >>>= (-Integer.reverseBytes(i3--));
            i4 -= (--i4);
        }
        vMeth1_check_sum += l + i2 + i4 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth() {

        short s=-8339;
        int i5=-10, i6=-145, i7=-5, i8=-35;
        float f=0.798F, fArr[]=new float[N];
        boolean b1=true;
        double d=-89.98270;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6975001291031240410L);
        FuzzerUtils.init(fArr, 0.724F);

        vMeth1(Test.instanceCount, Test.iFld);
        if (true) {
            Test.iFld -= s;
            for (i5 = 188; i5 > 1; i5 -= 2) {
                i6 *= (int)Test.instanceCount;
                i6 = Test.iFld;
                i6 ^= (int)Test.instanceCount;
                for (i7 = 1; i7 < 17; i7++) {
                    i6 <<= i7;
                    lArr[i7 - 1] = -160;
                    if (b1) {
                        switch ((i5 % 5) + 5) {
                        case 5:
                            Test.iFld1 <<= -13;
                            f *= Test.iFld;
                            break;
                        case 6:
                            if (Test.iFld1 != 0) {
                            }
                        case 7:
                            Test.iFld = (int)Test.instanceCount;
                        case 8:
                            s += (short)63762;
                        case 9:
                            i6 |= i7;
                        default:
                            Test.iFld1 <<= i7;
                        }
                    } else if (b1) {
                        Test.iFld1 <<= s;
                    } else if (b1) {
                        fArr[i7 + 1] /= (Test.instanceCount | 1);
                    } else {
                        Test.iFld %= 28;
                    }
                }
            }
        } else {
            d += i8;
        }
        long meth_res = s + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=20752, i1=1, i9=6, i10=-41645, i11=-32089, i12=-107;
        float f1=-84.615F;
        boolean b2=false, bArr1[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 14L);
        FuzzerUtils.init(bArr1, true);

        for (i = 9; i < 257; i++) {
            vMeth1(Test.instanceCount, i);
            vMeth1(-((-i1) + Test.instanceCount), i1--);
            Test.instanceCount = lMeth();
            for (f1 = 7; 1 < f1; f1 -= 2) {
                i10 = 1;
                do {
                    i9 += i9;
                    lArr1[i10 - 1] = i;
                } while (++i10 < 3);
                Test.iFld += (int)f1;
                Test.iArrFld[i - 1] >>= i;
                for (i11 = 1; i11 < 3; ++i11) {
                    Test.iFld1 += Test.iFld;
                    Test.instanceCount = Test.iFld1;
                    i9 *= -10;
                    bArr1[i + 1] = b2;
                }
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr1);
    }

    public void mainTest(String[] strArr1) {

        double d1=0.6218;
        int i13=-59162, i14=46147, i15=9, i16=-7, i17=-25, i18=-61, i19=-213, i20=-155, i21=-24276;
        float f2=2.422F;
        byte by=-126, byArr[][]=new byte[N][N];
        boolean b3=true;
        short s1=-8532;

        FuzzerUtils.init(byArr, (byte)41);

        vMeth();
        for (d1 = 12; d1 < 327; ++d1) {
            Test.iArrFld[(int)(d1)] >>= 2;
            if (false) continue;
            for (i14 = 5; i14 < 80; i14 += 3) {
                Test.iFld = i15;
                Test.instanceCount -= i15;
                Test.iArrFld[(int)(d1 - 1)] -= 8;
                i13 = (int)f2;
            }
            Test.instanceCount = -10;
            Test.iFld1 *= Test.iFld1;
            for (i16 = 4; 80 > i16; i16++) {
                i17 -= 205;
                byArr[i16 + 1][i16 - 1] = (byte)i17;
                by <<= (byte)Test.instanceCount;
                Test.iFld1 -= Test.iFld;
                Test.instanceCount = Test.iFld;
                switch ((int)((d1 % 2) + 9)) {
                case 9:
                    if (b3) break;
                    Test.iFld1 = 18533;
                case 10:
                    for (i18 = 2; 1 < i18; i18 -= 3) {
                        i15 += (249 + (i18 * i18));
                        Test.iArrFld[i16] *= Test.iFld;
                    }
                    by /= (byte)(s1 | 1);
                    break;
                default:
                    for (i20 = 2; 1 < i20; i20--) {
                        Test.iArrFld[i20 + 1] -= (int)Test.instanceCount;
                        i15 = s1;
                        Test.instanceCount = i18;
                        Test.instanceCount += (((i20 * Test.instanceCount) + i18) - Test.iFld1);
                        Test.instanceCount *= i19;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest lMeth
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
