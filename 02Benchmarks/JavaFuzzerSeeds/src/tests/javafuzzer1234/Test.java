package tests.javafuzzer1234;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:53:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-36621L;
    public static int iFld=-62;
    public static float fFld=-54.638F;
    public short sFld=-26474;
    public static double dFld=101.35819;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2542094387L);

        Test.iFld = Test.iFld;
        lArr[(Test.iFld >>> 1) % N] ^= Test.iFld;
        Test.instanceCount += -568997175L;
        Test.iFld -= -99;
        Test.instanceCount = Test.iFld;
        vMeth1_check_sum += (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i6, int i7) {

        int i8=12, i9=-31640, i10=186, i11=-180, i12=-60, iArr1[][]=new int[N][N];
        boolean b1=false;
        float f1=-7.882F;
        double d=1.28254;
        byte by1=68;

        FuzzerUtils.init(iArr1, 214);

        iArr1[(i8 >>> 1) % N][(8 >>> 1) % N] <<= (-i6);
        i9 = 1;
        do {
            vMeth1(b1);
            for (f1 = 1; f1 < 7; ++f1) {
                Test.instanceCount = Test.instanceCount;
                for (i11 = 2; i11 > 1; i11 -= 3) {
                    i6 *= (int)d;
                    i6 += (i11 * i11);
                    d *= i10;
                    i10 <<= i12;
                    try {
                        iArr1[i11 + 1][i9 + 1] = (35756 / i7);
                        i6 = (-46 % i10);
                        i12 = (i10 % i6);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld += (int)Test.instanceCount;
                    Test.iFld += (i11 + Test.instanceCount);
                }
            }
            d = i10;
            i7 -= by1;
        } while (++i9 < 215);
        vMeth_check_sum += i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i10 + i11 + i12 +
            Double.doubleToLongBits(d) + by1 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l1, int i5, long l2) {

        int i13=-9, i14=-35, i15=0, i16=-8, i17=21884, i18=32953, iArr2[]=new int[N];
        short s=15537;
        boolean b2=false, bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 166);
        FuzzerUtils.init(lArr1, -110L);
        FuzzerUtils.init(bArr, false);

        vMeth(-123, -10);
        for (i13 = 11; i13 < 203; i13++) {
            double d1=30.49107;
            iArr2[i13 + 1] /= (int)((long)(Test.fFld) | 1);
            i14 += (i13 * i13);
            d1 = l2;
            for (i15 = 1; 8 > i15; i15++) {
                lArr1[i13 - 1] -= s;
                i5 ^= 39839;
                bArr[i13 + 1] = b2;
                if (b2) break;
                for (i17 = 1; 2 > i17; i17++) {
                    i5 += 57924;
                    Test.fFld += i18;
                    i18 += (-20052 + (i17 * i17));
                    if (b2) break;
                }
            }
        }
        long meth_res = l1 + i5 + l2 + i13 + i14 + i15 + i16 + s + (b2 ? 1 : 0) + i17 + i18 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2970, i1=24188, i2=9, i3=224, i4=-11, i19=-5617, i20=-1, i21=26280, i22=6, iArr[]=new int[N];
        long l=-2397363686L;
        float f=-2.933F;
        byte by=113;
        boolean b3=false;

        FuzzerUtils.init(iArr, 0);

        i = 1;
        while (++i < 396) {
            i1 -= (int)Test.instanceCount;
            for (i2 = 4; i2 < 64; i2++) {
                for (l = 1; 2 > l; ++l) {
                    f += l;
                    switch (((i % 2) * 5) + 61) {
                    case 70:
                        f += (l + i);
                        Test.instanceCount += l;
                        by += (byte)(by - iArr[i - 1]);
                    case 67:
                        if (Short.reverseBytes((short)(-iMeth(l, Test.iFld, l))) < l) break;
                        i3 += (int)(((l * i1) + i2) - i4);
                        i1 += (int)(l + sFld);
                        Test.instanceCount = -7L;
                    }
                }
                Test.fFld += i3;
            }
            if (b3) break;
            Test.iFld ^= i4;
            for (i19 = 1; i19 < 64; i19 += 3) {
                i3 = i19;
                Test.instanceCount += (i19 * i19);
                b3 = b3;
                for (i21 = i19; i21 < 4; ++i21) {
                    Test.dFld = 13;
                    iArr[i21 - 1] += i4;
                    i20 |= i2;
                    Test.instanceCount = sFld;
                    Test.instanceCount += (-8 + (i21 * i21));
                }
            }
            Test.instanceCount = (long)-77.430F;
            Test.iFld -= i22;
            by -= (byte)i1;
            Test.fFld += -33401;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
