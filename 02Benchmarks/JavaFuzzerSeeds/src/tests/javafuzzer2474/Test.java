package tests.javafuzzer2474;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:16:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=158L;
    public static float fFld=0.425F;
    public static short sFld=-10123;
    public static int iFld=0;
    public static boolean bFld=false;
    public static byte byFld=-39;
    public double dFld=0.73160;
    public static volatile int iFld1=-2;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21462);
        FuzzerUtils.init(Test.iArrFld1, -166);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i7) {

        int i8=0, i9=7, i10=203, i11=-2, i12=-11, i13=19580, i14=14, iArr1[]=new int[N];
        double d1=0.12648;

        FuzzerUtils.init(iArr1, 36993);

        i7 += i7;
        i7 -= 125;
        i7 += i7;
        iArr1 = iArr1;
        i8 = 1;
        do {
            i9 = (int)d1;
            Test.instanceCount += i9;
            for (i10 = 1; i10 < 12; ++i10) {
                Test.sFld += (short)i10;
                i12 = 1;
                do {
                    Test.instanceCount |= i8;
                    i7 = (int)l1;
                } while (++i12 < 2);
                for (i13 = 1; i13 < 2; i13++) {
                    iArr1[i8 - 1] <<= (int)Test.instanceCount;
                    iArr1[i13 + 1] += i13;
                }
            }
        } while (++i8 < 131);
        vMeth2_check_sum += l1 + i7 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(float f, short s, float f1) {

        int i3=7, i5=-5, i6=-243, i15=22842, iArr2[]=new int[N];
        boolean b=true;
        float f2=2.298F;

        FuzzerUtils.init(iArr2, 251);

        i3 = 1;
        do {
            int i4=4;
            i4 += (((i3 * f1) + Test.instanceCount) - Test.instanceCount);
            for (i5 = 1; 11 > i5; i5++) {
                if (b) break;
                vMeth2(-1L, -69);
                i6 += (int)Test.instanceCount;
                i15 = 1;
                while (++i15 < 2) {
                    i4 += i4;
                    Test.instanceCount += i3;
                    Test.instanceCount -= i6;
                    Test.instanceCount += (long)Test.fFld;
                    i4 *= (int)f2;
                    Test.instanceCount += (((i15 * i6) + i15) - i6);
                }
                iArr2[i3] += (int)Test.instanceCount;
                Test.instanceCount = 161L;
            }
        } while (++i3 < 144);
        vMeth1_check_sum += Float.floatToIntBits(f) + s + Float.floatToIntBits(f1) + i3 + i5 + i6 + (b ? 1 : 0) + i15 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l, byte by, int i) {

        double d=1.53535;
        int i1=-6, i2=-194, i16=5, i17=-60015, iArr[]=new int[N];
        byte byArr[]=new byte[N];
        short sArr[][]=new short[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(byArr, (byte)-104);
        FuzzerUtils.init(sArr, (short)15428);
        FuzzerUtils.init(fArr, -1.875F);

        for (d = 3; d < 130; d++) {
            iArr[(int)(d)] ^= (int)(((++i) * iArr[(int)(d - 1)]) * Test.fFld);
        }
        byArr[(i1 >>> 1) % N] = (byte)((Test.fFld *= (i + i)) - (Test.fFld++));
        i2 = 1;
        while (++i2 < 254) {
            vMeth1(Test.fFld, Test.sFld, Test.fFld);
            sArr[i2 - 1][i2 + 1] -= (short)i;
            i -= (int)d;
            switch (((-4 >>> 1) % 8) + 86) {
            case 86:
                l = i2;
                for (i16 = 1; 6 > i16; ++i16) {
                    i1 += (int)l;
                    if (true) continue;
                    i -= i;
                    fArr[i2 - 1] = i1;
                    iArr = iArr;
                }
                break;
            case 87:
                Test.iFld <<= i16;
                break;
            case 88:
                Test.bFld = Test.bFld;
                break;
            case 89:
                Test.fFld += (i2 * i2);
                break;
            case 90:
                Test.iFld += (-36147 + (i2 * i2));
                break;
            case 91:
                i1 += i2;
            case 92:
                Test.fFld = -61780L;
                break;
            case 93:
                Test.iFld = (int)l;
            default:
                Test.iFld -= (int)l;
            }
        }
        vMeth_check_sum += l + by + i + Double.doubleToLongBits(d) + i1 + i2 + i16 + i17 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=197, i19=7, i20=56302, i21=-22593, i22=-121, i23=60076, i24=200, i25=-126, i26=-10458, i27=7;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -84.753F);

        vMeth(Test.instanceCount, Test.byFld, Test.iFld);
        for (i18 = 7; i18 < 348; ++i18) {
            Test.instanceCount >>= i19;
            fArr1[i18] += i19;
            Test.instanceCount ^= Test.instanceCount;
            for (i20 = 2; i20 < 74; i20++) {
                Test.iArrFld[i18] = i20;
            }
            Test.sFld <<= (short)i18;
            i22 = 1;
            do {
                i21 += (((i22 * Test.byFld) + i22) - Test.byFld);
                Test.iFld += i22;
                for (i23 = 1; 1 > i23; i23++) {
                    Test.iFld >>= Test.byFld;
                    Test.iArrFld[i22 + 1] = i19;
                    Test.byFld >>>= (byte)14;
                    dFld *= i19;
                    dFld -= i22;
                    Test.iFld = i24;
                    Test.iArrFld1[i22 - 1] *= (int)4128611479L;
                    i21 += (((i23 * Test.sFld) + Test.fFld) - i25);
                    Test.iFld1 = i18;
                }
                i25 *= i21;
                for (i26 = 1; i26 < 1; i26 += 3) {
                    Test.bFld = true;
                    i19 = Test.iFld;
                    if (true) break;
                    Test.instanceCount = Test.instanceCount;
                    lArrFld[i22 + 1] -= -134;
                    i19 = i18;
                    i25 *= (int)Test.fFld;
                }
            } while (++i22 < 74);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
