package tests.javafuzzer222;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:18:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=61L;
    public static volatile float fFld=0.444F;
    public static double dFld=-2.144;
    public static int iFld=10;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(int i4, int i5) {

        int i6=145, i7=-54277, i8=71, i9=7, i10=49324;
        byte by1=-65;
        short s=-8180;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -32652L);

        i6 = 1;
        do {
            Test.fFld += Test.instanceCount;
            i5 *= i5;
            i4 += (i6 * i6);
            i7 = 1;
            do {
                Test.instanceCount += i5;
                i8 = 1;
                while (++i8 < 1) {
                    Test.instanceCount += Test.instanceCount;
                    i5 ^= i5;
                }
                i4 = i6;
                i4 += by1;
                for (i9 = 1; i9 < 1; i9++) {
                    lArr[i7 - 1] = -254;
                    i5 = i4;
                    s = (short)i5;
                }
            } while (++i7 < 8);
        } while (++i6 < 205);
        long meth_res = i4 + i5 + i6 + i7 + i8 + by1 + i9 + i10 + s + FuzzerUtils.checkSum(lArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l) {

        byte by=-59;
        int i3=4390, i11=8, i12=-108, i13=-4, i14=3361, i15=-34996, iArr[]=new int[N];
        float f=-1.1015F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -29924);
        FuzzerUtils.init(fArr, 28.652F);

        by <<= (byte)(((Test.fFld + i3) * (i3 * i3)) - (f + (i3 + i3)));
        fMeth1(i3, i3);
        i11 = 1;
        do {
            i3 += (i11 * i11);
            for (i12 = 8; i12 > 1; i12--) {
                i3 = i3;
                iArr[i12 - 1] = i13;
                for (i14 = 1; i14 < 2; i14++) {
                    l += (-11 + (i14 * i14));
                    if (b) continue;
                    Test.dFld *= i14;
                    iArr[i14 - 1] &= i14;
                    i13 = i12;
                }
            }
            Test.fFld += i13;
            Test.dFld -= Test.dFld;
        } while (++i11 < 204);
        vMeth_check_sum += l + by + i3 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth() {

        int i16=-46378, i17=3, i18=-14, i19=-10, i20=18760, i21=-32;
        byte by2=73;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 14L);

        vMeth(1999L);
        lArr1[(i16 >>> 1) % N] = -16906;
        for (i17 = 4; i17 < 225; ++i17) {
            by2 %= (byte)(i16 | 1);
            if (b1) {
                lArr1[i17] >>= 8;
                i19 = 1;
                do {
                    i18 += (((i19 * i19) + i19) - Test.fFld);
                    i18 = (int)Test.instanceCount;
                    for (i20 = 1; i20 < 1; i20++) {
                        i21 = -8700;
                        i16 = -8;
                        Test.iFld -= (int)Test.instanceCount;
                        Test.instanceCount = i21;
                        if (b1) continue;
                    }
                } while (++i19 < 7);
            } else {
                i16 = i17;
            }
        }
        long meth_res = i16 + i17 + i18 + by2 + i19 + i20 + i21 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=7, i1=151, i2=-5757, i22=57, i23=-45040, i24=55, i25=60362, i26=0, i27=-9, i28=-181;
        boolean b2=true, bArr[]=new boolean[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr2, -7463454675382005532L);

        for (i = 2; i < 203; ++i) {
            i2 = 125;
            while (--i2 > 0) {
                i1 *= ((i1++) ^ (i1--));
                Test.instanceCount = (long)(((-9185733358430610312L - i1) - (i1++)) * fMeth());
                i22 ^= i23;
                i23 += (int)2.416F;
                Test.fFld = i23;
                Test.fFld += ((long)i2 ^ (long)i);
                Test.instanceCount += i2;
                if (b2) continue;
                if (b2) {
                    Test.iFld -= i23;
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.iFld <<= (int)14L;
                        bArr[i2] = b2;
                        Test.fFld = Test.instanceCount;
                        Test.fFld += (((i24 * i25) + Test.instanceCount) - Test.instanceCount);
                        lArr2 = Test.lArrFld;
                        i23 += (int)(121.1007F + (i24 * i24));
                        Test.dFld += Test.iFld;
                        Test.instanceCount %= 160;
                        i1 <<= i24;
                    }
                    for (i26 = 1; i26 < 1; i26++) {
                        i1 += (i26 | Test.instanceCount);
                        i25 >>= (int)Test.instanceCount;
                        Test.instanceCount <<= i27;
                    }
                } else {
                    Test.iFld += i2;
                    i28 = 1;
                    do {
                        i22 += (i28 ^ i2);
                        i25 += (i28 * i24);
                    } while (++i28 < 1);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
