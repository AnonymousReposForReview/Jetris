package tests.javafuzzer2996;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:36:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static int iFld=-38709;
    public static volatile float fFld=-16.298F;
    public static double dFld=-46.85989;
    public static int iFld1=182;
    public static byte byFld=-16;
    public short sFld=27921;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -44080);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {

        float f1=-83.1007F;
        int i7=-115, i8=-1, i9=-14, i10=-215, i11=61503, i12=-103;
        byte by=-55;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6142784007051790048L);

        lArr = FuzzerUtils.long1array(N, (long)-234L);
        Test.iArrFld = Test.iArrFld;
        for (f1 = 6; f1 < 384; ++f1) {
            i7 += (int)((long)f1 ^ by);
            for (i8 = 1; i8 < 4; ++i8) {
                Test.iFld += (((i8 * i7) + Test.iFld) - i8);
                for (i10 = 1; i10 < 2; ++i10) {
                    Test.fFld -= -3;
                }
                i12 = 1;
                do {
                    short s=-22352;
                    i9 += s;
                    Test.fFld += (i12 + by);
                    Test.fFld += (((i12 * Test.fFld) + i9) - i10);
                    i7 = i8;
                    i9 >>= i7;
                    i11 = i10;
                } while ((i12 += 3) < 2);
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f1) + i7 + by + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, int i2, int i3) {

        int i4=-185, i5=-8, i6=4, i13=1, i14=-232;
        short s1=-7329;
        boolean b=true;

        i4 = 1;
        while (++i4 < 367) {
            for (i5 = 1; i5 < 5; i5++) {
                vMeth1(Test.instanceCount);
                for (i13 = 2; i13 > 1; i13 -= 3) {
                    f = s1;
                    f += i13;
                    Test.dFld *= i14;
                    i14 += i2;
                    i3 = (int)Test.dFld;
                    i2 += i13;
                    i3 = (int)Test.instanceCount;
                    switch ((i13 % 10) + 47) {
                    case 47:
                        i6 += i13;
                        i3 = i13;
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 48:
                        if (Test.iFld != 0) {
                            vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i6 + i13 + i14 + s1 + (b ?
                                1 : 0);
                            return;
                        }
                        break;
                    case 49:
                        i14 += (-15501 + (i13 * i13));
                        break;
                    case 50:
                        Test.instanceCount -= Test.instanceCount;
                    case 51:
                        i3 |= i13;
                    case 52:
                        Test.iArrFld[i4] = i4;
                    case 53:
                        i3 = i2;
                        break;
                    case 54:
                        Test.iFld1 *= Test.byFld;
                        break;
                    case 55:
                        i3 = i13;
                    case 56:
                        i14 /= (int)(Test.iFld1 | 1);
                    default:
                        if (b) break;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i6 + i13 + i14 + s1 + (b ? 1 : 0);
    }

    public static long lMeth() {


        vMeth(Test.fFld, -123, -188);
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=136, i1=18722, i15=-79, i16=34990, i17=14, i18=241;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 95.50562);

        for (i = 13; i < 212; i++) {
            i1 = (int)(Double.longBitsToDouble(lMeth()) - Test.dFld);
            Test.iArrFld[i] -= Test.iFld;
            for (i15 = 5; i15 < 126; i15++) {
                switch ((i % 2) + 81) {
                case 81:
                    Test.fFld = Test.iFld;
                    for (i17 = 2; 1 < i17; i17 -= 3) {
                        i16 = (int)-123.86341;
                        Test.instanceCount = Test.byFld;
                        dArr[(Test.iFld >>> 1) % N] *= Test.instanceCount;
                        i16 = i15;
                        i1 = i;
                        Test.iFld |= i;
                        i16 >>>= (int)Test.instanceCount;
                        Test.iFld += (((i17 * Test.iFld1) + Test.byFld) - i17);
                        Test.iFld1 += (1 + (i17 * i17));
                    }
                    break;
                case 82:
                    Test.iFld *= (int)Test.instanceCount;
                    i16 = (int)1.33946;
                    Test.instanceCount += i15;
                    i1 += (i15 * i15);
                default:
                    Test.instanceCount -= i16;
                    sFld ^= Test.byFld;
                }
                Test.instanceCount -= i16;
                i1 >>= 10;
                Test.iFld1 = i15;
                i18 *= Test.iFld;
                Test.byFld *= (byte)Test.iFld;
                i1 >>= -1507;
                sFld += (short)(i15 | Test.iFld);
                Test.iFld = i15;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
