package tests.javafuzzer415;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:20:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2457833819L;
    public static short sFld=663;
    public static boolean bFld=false;
    public int iFld=-508;
    public byte byFld=-51;
    public float fFld=0.488F;
    public static double dFld=-32.14011;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1, int i2) {

        int i3=29762, i4=-19923, i5=13, i6=-98, i7=28518, iArr[]=new int[N];
        float f1=2.705F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -20551);
        FuzzerUtils.init(lArr, 15108L);

        for (i3 = 3; 140 > i3; i3++) {
            for (i5 = i3; i5 < 11; i5++) {
                boolean b=true;
                switch (((i3 % 2) * 5) + 63) {
                case 65:
                    for (f1 = 1; 1 > f1; f1++) {
                        Test.sFld += (short)f1;
                        Test.instanceCount <<= i7;
                        i2 += (int)(-25.235F + (f1 * f1));
                        l1 -= i5;
                        try {
                            i7 = (1111692647 % i3);
                            iArr[i3 - 1] = (i7 % 1118569487);
                            i7 = (43152 % i3);
                        } catch (ArithmeticException a_e) {}
                        i6 += (int)(f1 * f1);
                    }
                    lArr[i5 - 1][i3] -= Test.instanceCount;
                    try {
                        i4 = (i2 / 70);
                        i4 = (-37 / i6);
                        iArr[(i3 >>> 1) % N] = (i6 % -205);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 72:
                    i4 -= (int)f1;
                    i2 += -12;
                    i7 += i5;
                    break;
                default:
                    b = b;
                }
            }
        }
        long meth_res = l1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1) {

        float f=-1.476F;
        byte by=18;
        int i8=56757, i9=-13521, i10=13, i11=53110, i12=183, iArr1[]=new int[N];
        double d=28.14610, dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 2.122573);
        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(lArr1, -1L);

        i1 += (int)(((Test.sFld * f) * (--Test.instanceCount)) * (by -= (byte)7));
        i1 = (int)(((-41606 + i1) + (dArr[(i1 >>> 1) % N]++)) - (lMeth(Test.instanceCount, i1) + i1));
        Test.instanceCount = 1556844252561866835L;
        for (i8 = 8; i8 < 324; i8++) {
            d += f;
            try {
                i1 = (i8 / iArr1[i8]);
                i9 = (44781 % i1);
                i9 = (i9 / 5962);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) break;
            i1 = i9;
            switch (((i1 >>> 1) % 6) + 65) {
            case 65:
                if (Test.bFld) {
                    Test.bFld = Test.bFld;
                }
                for (i10 = 1; i10 < 5; ++i10) {
                    lArr1[i10 - 1] += i12;
                    i9 = (int)Test.instanceCount;
                }
                Test.instanceCount -= 49;
                break;
            case 66:
                Test.sFld = (short)i10;
                break;
            case 67:
                Test.instanceCount = (long)-2.140F;
                break;
            case 68:
                Test.bFld = Test.bFld;
            case 69:
                i12 += i8;
                break;
            case 70:
                i1 >>= 17396;
                break;
            default:
                i9 |= i1;
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + by + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, long l) {


        iMeth(i);
        i /= (int)(i | 1);
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        int i13=108, i14=51, i15=13, i16=10;
        long l2=-2L, lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -8593487402492142635L);

        for (int smallinvoc=0; smallinvoc<679; smallinvoc++) vSmallMeth(iFld, Test.instanceCount);
        iFld = (int)Test.instanceCount;
        Test.iArrFld[(4 >>> 1) % N] >>>= byFld;
        iFld += (int)Test.instanceCount;
        Test.bFld = Test.bFld;
        i13 = 1;
        do {
            for (l2 = 8; l2 < 156; ++l2) {
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.iArrFld = Test.iArrFld;
                    fFld = l2;
                    i16 = (int)fFld;
                    i16 = byFld;
                    iFld = i15;
                    switch ((int)((l2 % 10) + 20)) {
                    case 20:
                        switch ((i15 % 4) + 112) {
                        case 112:
                            fFld = i13;
                            Test.iArrFld[i15 - 1] -= (int)l2;
                            Test.dFld -= Test.dFld;
                            break;
                        case 113:
                        case 114:
                        case 115:
                            i16 <<= (int)Test.instanceCount;
                            iFld = (int)l2;
                            Test.instanceCount += i15;
                            break;
                        }
                        lArr2[i15] = l2;
                        iFld += i15;
                        i14 += (int)l2;
                    case 21:
                        Test.dFld = Test.instanceCount;
                        byFld *= (byte)i13;
                    case 22:
                        Test.iArrFld[(int)(l2 - 1)] = 95;
                        i16 = (int)53130L;
                        if (Test.bFld) break;
                        Test.instanceCount += (i15 - iFld);
                        break;
                    case 23:
                        i14 <<= byFld;
                        break;
                    case 24:
                        i16 = (int)1860317898428679646L;
                    case 25:
                        fFld -= i15;
                        break;
                    case 26:
                        Test.instanceCount = i13;
                        break;
                    case 27:
                        i14 *= i15;
                    case 28:
                        Test.iArrFld[(int)(l2)] = (int)fFld;
                        break;
                    case 29:
                        fFld -= i14;
                        break;
                    }
                }
            }
        } while (++i13 < 161);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
