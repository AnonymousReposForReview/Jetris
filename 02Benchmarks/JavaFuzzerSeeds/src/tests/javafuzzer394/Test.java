package tests.javafuzzer394;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:16:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=-28941;
    public static float fFld=-75.30F;
    public static double dFld=84.130781;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.4564);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i1=11, i2=49730, i3=-10, i4=244, i5=213, i6=-5, i7=51761;
        short s=-32083;
        boolean b=false;
        double d=66.26501;

        for (i1 = 4; i1 < 222; i1++) {
            i2 /= (int)(i2 | 1);
            switch (((i1 % 4) * 5) + 63) {
            case 66:
                for (i3 = i1; i3 < 7; i3++) {
                    i2 <<= i3;
                    i5 = 1;
                    while (++i5 < 1) {
                        s -= (short)Test.instanceCount;
                        f += i4;
                    }
                    b = b;
                    i4 += i3;
                    Test.instanceCount -= i1;
                    Test.iFld &= Test.iFld;
                }
            case 72:
            case 78:
                for (i6 = 1; i6 < 7; i6++) {
                    i4 += (((i6 * s) + Test.instanceCount) - i5);
                    i2 += (i6 + f);
                }
            case 82:
                if (b) break;
                break;
            default:
                d = Test.instanceCount;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + s + (b ? 1 : 0) + i6 + i7 +
            Double.doubleToLongBits(d);
    }

    public static void vMeth(long l, int i) {

        int i8=-92, i9=-122, i10=25935, i11=-5, i12=183, i13=-7564, i14=10, i15=-6990;
        float f1=96.634F, fArr[]=new float[N];
        short s1=-13038;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 960928151765967906L);
        FuzzerUtils.init(fArr, 2.967F);

        vMeth1(1.784F);
        for (i8 = 2; i8 < 272; ++i8) {
            i -= i;
            for (i10 = 6; i10 > 1; i10 -= 3) {
                i += (i10 | i11);
                f1 += (((i10 * i10) + f1) - i11);
            }
            Test.iFld = i9;
            i += i8;
            for (i12 = i8; i12 < 6; i12++) {
                for (i14 = 1; i14 > 1; --i14) {
                    lArr[i12] = l;
                    s1 -= (short)-40506;
                    Test.instanceCount += i13;
                    i11 += (int)f1;
                }
                fArr[i8 + 1] = Test.iFld;
            }
        }
        vMeth_check_sum += l + i + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + s1 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {


        vMeth(Test.instanceCount, Test.iFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i16=-1, i17=-52860, i18=-143, i19=-223, i20=-131;
        boolean b1=false;

        for (int smallinvoc=0; smallinvoc<521; smallinvoc++) vSmallMeth();
        iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i16 = 310; 7 < i16; i16 -= 3) {
            byte by=-26;
            by -= (byte)i17;
            Test.iFld += (((i16 * i17) + i17) - Test.instanceCount);
            switch (((i16 % 2) * 5) + 17) {
            case 22:
                Test.iFld *= Test.iFld;
                i17 *= (int)Test.instanceCount;
                break;
            case 25:
                Test.fFld += -32.573F;
            default:
                for (i18 = 11; i18 < 248; ++i18) {
                    i20 = 2;
                    do {
                        iArrFld[i16 - 1] += i16;
                        i19 += Test.iFld;
                        iArrFld[i18 - 1] -= (int)Test.fFld;
                        iArrFld[i16] <<= (int)Test.instanceCount;
                        switch (((i18 % 2) * 5) + 74) {
                        case 82:
                            i19 -= i20;
                            b1 = b1;
                            break;
                        case 77:
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        }
                        i19 |= i16;
                        iArrFld[i16 - 1] = (int)Test.dFld;
                        i17 = (int)-116.97617;
                        if (b1) {
                            if (b1) continue;
                            if (b1) break;
                            b1 = b1;
                        } else if (b1) {
                            if (false) break;
                            i19 -= i16;
                            Test.dArrFld[i18 - 1] *= i18;
                        } else if (b1) {
                            i19 = Test.iFld;
                        }
                    } while ((i20 -= 3) > 0);
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
