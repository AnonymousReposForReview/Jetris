package tests.javafuzzer3018;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:46:36 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-93L;
    public static int iFld=-23631;
    public static float fFld=-1.298F;
    public static volatile double dFld=-1.73766;
    public static int iFld1=-49;
    public static volatile short sFld=-27561;
    public static int iFld2=22030;

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1) {

        int i2=-115, i3=-48312, i4=-8, iArr[]=new int[N];
        double d=0.37151;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 2441010627L);

        iArr[(Test.iFld >>> 1) % N] = i1;
        Test.fFld = -8293L;
        for (i2 = 10; 374 > i2; ++i2) {
            i4 = 1;
            while (++i4 < 5) {
                short s=-18184;
                boolean b=false;
                i3 = 249;
                Test.instanceCount -= i4;
                iArr[i4] = (int)Test.instanceCount;
                i3 = s;
                switch (((i2 % 1) * 5) + 24) {
                case 28:
                    bArr[i4] = b;
                    iArr[i4 + 1] = i3;
                    i1 ^= i4;
                default:
                    iArr[i4 + 1] += (int)d;
                    Test.fFld += i4;
                    lArr[i4 + 1] -= Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(int i) {

        int i5=7, i6=-42551, i7=14, i8=95, i9=65112, i10=-91, i11=11, i12=-9, iArr1[]=new int[N];
        byte by=33;

        FuzzerUtils.init(iArr1, -60);

        vMeth(-3);
        i *= (int)Test.instanceCount;
        Test.iFld += -29444;
        for (i5 = 15; 294 > i5; ++i5) {
            for (i7 = 1; i7 < 6; ++i7) {
                for (i9 = 1; i9 < 2; i9++) {
                    by *= (byte)Test.instanceCount;
                    i8 -= i9;
                    i10 = i9;
                    Test.instanceCount *= i8;
                }
            }
            i = i10;
            iArr1[i5] = i;
        }
        for (i11 = 4; i11 < 365; i11++) {
            i6 -= i12;
            iArr1[i11 + 1] %= (int)32.731F;
        }
        long meth_res = i + i5 + i6 + i7 + i8 + i9 + i10 + by + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth() {

        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)28);

        Test.iFld *= (int)(--Test.instanceCount);
        byArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= (byte)fMeth(137);
        vSmallMeth_check_sum += FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=-161, i14=-5, i15=-17641, i16=29004, i17=182, iArr2[][]=new int[N][N];
        boolean b1=false;
        byte byArr1[][]=new byte[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(byArr1, (byte)48);
        FuzzerUtils.init(lArr1, -6272162771509730789L);

        for (int smallinvoc=0; smallinvoc<430; smallinvoc++) vSmallMeth();
        iArr2[(230 >>> 1) % N][(Test.iFld >>> 1) % N] -= Test.iFld;
        Test.iFld = -40032;
        Test.iFld = Test.iFld;
        Test.iFld -= Test.iFld;
        for (i13 = 7; i13 < 319; ++i13) {
            Test.dFld -= i13;
            Test.instanceCount += i14;
            i15 = 1;
            do {
                switch ((i13 % 8) + 3) {
                case 3:
                    if (true) {
                        try {
                            iArr2[i15 - 1][i13 + 1] = (i14 / iArr2[i13][i13]);
                            Test.iFld = (i13 / -114);
                            Test.iFld = (i15 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount *= 213;
                    } else {
                        i14 += (i15 | i14);
                        Test.iFld += i15;
                    }
                case 4:
                    i14 >>= (int)-2963552375257198267L;
                    switch ((i13 % 6) + 104) {
                    case 104:
                        Test.iFld = i13;
                        break;
                    case 105:
                        for (i16 = 1; i16 < 1; ++i16) {
                            byArr1[i15 + 1][i15] >>= (byte)i16;
                            iArr2[i15 + 1] = iArr2[i16 - 1];
                            if (b1) {
                                i17 -= i17;
                                Test.iFld *= i14;
                                i14 *= (int)Test.fFld;
                            }
                            if (b1) break;
                            Test.iFld *= i16;
                            Test.iFld <<= Test.iFld;
                            byArr1[i16 - 1][i16] -= (byte)i13;
                            Test.iFld1 = Test.sFld;
                        }
                    case 106:
                        if (b1) continue;
                        break;
                    case 107:
                        if (true) continue;
                        break;
                    case 108:
                        Test.fFld += i15;
                    case 109:
                        Test.instanceCount += i15;
                        break;
                    }
                    break;
                case 5:
                    Test.instanceCount <<= Test.instanceCount;
                    break;
                case 6:
                    i14 += (-7376 + (i15 * i15));
                    break;
                case 7:
                    Test.iFld1 /= (int)(Test.iFld1 | 1);
                    break;
                case 8:
                    lArr1 = lArr1;
                    break;
                case 9:
                    Test.iFld1 -= i14;
                    break;
                case 10:
                    i17 = Test.iFld2;
                    break;
                }
            } while (++i15 < 81);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
