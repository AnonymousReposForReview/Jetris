package tests.javafuzzer53;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:37:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8197880273359405523L;
    public static int iFld=-9;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i6=37, i7=12, i8=-30488, i9=-4, i10=-8, i11=14, i12=-200;
        byte by=-43;
        double d=0.21087;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -4.244F);

        i6 <<= i6;
        i6 = i6;
        i6 = by;
        i6 = (int)-3929645071L;
        for (i7 = 11; 229 > i7; ++i7) {
            fArr[i7 - 1] = -14;
            for (i9 = 1; i9 < 7; i9++) {
                Test.instanceCount = i10;
                i8 <<= i9;
                i10 = i8;
                if (b) {
                    for (i11 = 1; 2 > i11; ++i11) {
                        i12 <<= by;
                    }
                } else if (b) {
                    d = i10;
                } else if (true) {
                    Test.instanceCount += i12;
                } else {
                    Test.iArrFld[i9] = i10;
                }
            }
        }
        long meth_res = i6 + by + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1) {

        float f=117.767F;
        int i13=5205, i14=0, i15=-29316, i16=153, i17=158;
        long l2=-9028252065846769714L;

        f -= (Integer.reverseBytes(iMeth1()) + Test.instanceCount);
        f -= 0;
        i13 = 1;
        while (++i13 < 148) {
            for (i14 = 11; i14 > i13; i14--) {
                for (i16 = 1; 1 < i16; --i16) {
                    double d1=2.42118;
                    switch ((i16 % 1) + 10) {
                    case 10:
                        i15 -= (int)l;
                        i17 -= i13;
                        break;
                    }
                    Test.iArrFld[i14] = (int)d1;
                    l2 -= i17;
                    l1 <<= Test.iFld;
                    if (i16 != 0) {
                        vMeth_check_sum += l + l1 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + l2;
                        return;
                    }
                    i17 = (int)l2;
                    i17 <<= i13;
                    Test.iArrFld[i13] -= Test.iFld;
                }
            }
        }
        vMeth_check_sum += l + l1 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + l2;
    }

    public int iMeth(int i4, int i5) {

        int i18=-244, i19=-8757, i20=14, i21=-14, i22=-33356, iArr[]=new int[N];
        float f1=-1.4F;
        double d2=2.50302;
        byte by1=-33;

        FuzzerUtils.init(iArr, 33001);

        iArr[(i4 >>> 1) % N] = i4;
        vMeth(Test.instanceCount, Test.instanceCount);
        i5 = i5;
        for (i18 = 13; i18 < 248; i18++) {
            f1 += (i18 - i4);
            i20 = 1;
            while (++i20 < 7) {
                i19 *= -1;
                for (i21 = 1; i21 > 1; i21 -= 3) {
                    iArr[i20 - 1] -= i19;
                    i5 >>= -4;
                    Test.instanceCount += (long)f1;
                    f1 += (((i21 * i21) + i20) - i20);
                }
                d2 -= i18;
                by1 += (byte)(((i20 * i22) + i21) - Test.instanceCount);
            }
            try {
                i19 = (45068 % i20);
                i5 = (-26748 % i19);
                Test.iFld = (-25834 % i19);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = i4 + i5 + i18 + i19 + Float.floatToIntBits(f1) + i20 + i21 + i22 + Double.doubleToLongBits(d2)
            + by1 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=-38945, i2=66, i3=13, i23=1, i24=-162, i25=20843, i26=-4, i27=-5, i28=-29, i29=158, i30=21111;
        double d3=-54.6917;
        byte by2=-27;
        float f2=2.218F;

        i = 1;
        do {
            for (i1 = 136; i1 > 3; --i1) {
                if ((((31490568L - (i3 + -8L)) - iMeth(i1, i3)) + i2) != i3) break;
                Test.iFld <<= i2;
                if (bFld) {
                    Test.iFld *= i1;
                    for (i23 = 1; i23 < 2; i23++) {
                        Test.instanceCount += i23;
                        if (bFld) continue;
                    }
                    d3 -= Test.iFld;
                } else if (bFld) {
                    lArrFld[i + 1] += -48888;
                } else if (true) {
                    by2 = (byte)Test.instanceCount;
                    if (bFld) break;
                    f2 *= i24;
                    Test.instanceCount -= 4161;
                }
                i3 >>= by2;
                f2 = Test.instanceCount;
                f2 = Test.instanceCount;
                i2 -= i23;
                f2 += i1;
            }
            for (i25 = 3; i25 < 136; i25++) {
                i26 += (int)(84.483F + (i25 * i25));
                for (i27 = 1; 2 > i27; ++i27) {
                    Test.iArrFld[i - 1] += 2;
                }
            }
        } while ((i += 2) < 370);
        Test.iFld = (int)Test.instanceCount;
        for (i29 = 17; i29 < 297; i29++) {
            i3 = (int)f2;
            i3 = i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
