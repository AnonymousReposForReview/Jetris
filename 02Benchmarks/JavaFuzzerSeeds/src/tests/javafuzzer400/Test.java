package tests.javafuzzer400;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 03:16:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17L;
    public byte byFld=-5;
    public static volatile boolean bFld=true;

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, int i2, long l1) {

        int i3=-60, i4=-14, i5=-178, i6=-14794, i7=-51892, i8=-52469, i9=-56;

        f2 -= i2;
        i3 = 1;
        while ((i3 += 2) < 257) {
            l1 += i2;
            for (i4 = i3; i4 < 12; i4++) {
                i5 >>>= i2;
                i2 = -3;
                i5 = i3;
                try {
                    i5 = (300184319 % i2);
                    i2 = (i4 % -909606193);
                    i2 = (i4 / i5);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
                f2 += (((i4 * i5) + i5) - Test.instanceCount);
            }
            for (i6 = i3; 12 > i6; ++i6) {
                for (i8 = 1; i8 < 1; i8 += 3) {
                    Test.instanceCount += (((i8 * i4) + i7) - i5);
                }
                i5 -= i4;
                i9 = (int)l1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9;
    }

    public static int iMeth(float f1) {

        int i10=-6;

        vMeth(f1, i10, Test.instanceCount);
        long meth_res = Float.floatToIntBits(f1) + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f, int i1, long l) {

        int i11=24435, i12=-39740, i13=0, i14=-5656, i15=168, iArr[]=new int[N];
        byte by=12;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(fArr, 78.77F);

        i1 = (++i1);
        Test.instanceCount -= iMeth(f);
        i1 = (int)Test.instanceCount;
        i1 *= i1;
        i1 = (int)-2689921044L;
        for (i11 = 180; i11 > 4; i11--) {
            for (i13 = 1; 9 > i13; ++i13) {
                i15 = 1;
                while (++i15 < 2) {
                    f /= (by | 1);
                    i1 -= i1;
                    i12 >>= i1;
                    f -= l;
                    iArr[i11 - 1] = (int)Test.instanceCount;
                    fArr[i15 + 1] += Test.instanceCount;
                    i1 = -8;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + l + i11 + i12 + i13 + i14 + i15 + by +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i16=33, i17=-58093, i18=-245, i19=220, i20=-113, i21=4, i22=222, iArr1[]=new int[N];
        double d=-26.79372;
        float f3=102.51F, fArr1[]=new float[N];
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, 4L);
        FuzzerUtils.init(sArr, (short)19973);
        FuzzerUtils.init(iArr1, -28065);
        FuzzerUtils.init(fArr1, 0.387F);

        switch ((((i >>> 1) % 2) * 5) + 105) {
        case 107:
            lArr[(i >>> 1) % N] = (++lArr[(i >>> 1) % N]);
            lArr[(11944 >>> 1) % N] >>>= (i * i);
            break;
        case 113:
        }
        i += (int)lArr[(i >>> 1) % N];
        i >>= (int)((d - i) + sArr[(i >>> 1) % N][(i >>> 1) % N]);
        i = (int)(Math.max(Math.min(Test.instanceCount, Test.instanceCount), 55704 + (++Test.instanceCount)) +
            lMeth(f3, i, -97L));
        i = i;
        i -= (int)d;
        for (i16 = 5; i16 < 306; i16++) {
            iArr1 = iArr1;
            i = i16;
        }
        for (i18 = 8; 148 > i18; i18++) {
            i *= i16;
        }
        for (float f4 : fArr1) {
            if (Test.bFld) {
                i20 = 63;
                while ((i20 -= 2) > 0) {
                    for (i21 = 1; i21 < 2; ++i21) {
                        Test.instanceCount = 198;
                        switch (((-3 >>> 1) % 8) + 46) {
                        case 46:
                            d *= i16;
                            break;
                        case 47:
                            i22 >>= i20;
                            i19 = (int)d;
                            f4 /= ((long)(d) | 1);
                        case 48:
                            i22 = (int)Test.instanceCount;
                            iArr1[i21 - 1] ^= i21;
                            Test.instanceCount += (long)1.76338;
                            i = byFld;
                        case 49:
                            iArr1[i21 - 1] += -38367;
                            i19 += (((i21 * Test.instanceCount) + i19) - i22);
                            d = byFld;
                            break;
                        case 50:
                        case 51:
                            i17 += (int)f4;
                        case 52:
                            Test.bFld = Test.bFld;
                            break;
                        case 53:
                            i22 *= i18;
                            break;
                        }
                    }
                }
            } else if (Test.bFld) {
                f3 = (float)-2.11199;
            } else {
                i19 *= i17;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
