package tests.javafuzzer1640;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:39:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3215757599L;
    public static byte byFld=76;
    public static short sFld=26709;
    public static boolean bFld=false;
    public float fFld=0.579F;
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10639);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i10, int i11) {

        int i12=2, i13=-14, i14=124, i15=64998, i16=236, i17=26179;
        float f2=0.713F;
        short s=22278;

        for (i12 = 16; i12 < 384; ++i12) {
            boolean b=false;
            b = b;
        }
        for (i14 = 1; i14 < 322; i14++) {
            for (i16 = 1; 5 > i16; i16++) {
                l = i13;
                Test.iArrFld[i16 - 1] += -12338;
                i11 = (int)2775L;
                switch (((i15 >>> 1) % 6) + 48) {
                case 48:
                case 49:
                    f2 *= Test.instanceCount;
                    i10 = i11;
                    Test.byFld *= (byte)f2;
                case 50:
                case 51:
                    l -= -32731;
                case 52:
                    Test.instanceCount += i16;
                    Test.iArrFld[i16 + 1] = i11;
                    break;
                case 53:
                    i13 = s;
                    break;
                }
            }
        }
        long meth_res = l + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(byte by) {

        int i4=-149, i5=-27004, i6=-35328, i7=-25826, i8=3041, i9=1, iArr[]=new int[N];
        double d=-1.46858, dArr[][]=new double[N][N];
        float f1=58.577F, fArr[][]=new float[N][N];
        long l1=42134L;

        FuzzerUtils.init(dArr, 1.70442);
        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr, -2.18F);

        for (i4 = 17; 349 > i4; i4++) {
            for (i6 = 1; i6 < 5; i6 += 3) {
                i5 = (int)dArr[i6 + 1][i6];
                for (i8 = 5; i8 > 1; i8 -= 3) {
                    Test.instanceCount = Math.min((int)((i9 + Test.instanceCount) * (++d)), (int)(-f1));
                    switch (((-13 >>> 1) % 10) + 77) {
                    case 77:
                        try {
                            iArr[i6] = (i4 % -80);
                            i7 = (i6 / -1897325694);
                            i7 = (14 % iArr[i8 - 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 78:
                        i5 = (int)(((12L * iMeth(Test.instanceCount, i5, -44834)) + i9) * i8);
                    case 79:
                        switch ((i6 % 10) + 5) {
                        case 5:
                            if (i4 != 0) {
                                vMeth1_check_sum += by + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) +
                                    Float.floatToIntBits(f1) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
                                    + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                        case 6:
                            i9 += i9;
                            if (i6 != 0) {
                                vMeth1_check_sum += by + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) +
                                    Float.floatToIntBits(f1) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
                                    + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            break;
                        case 7:
                        case 8:
                            i9 >>>= i4;
                            i7 += i8;
                            l1 += (-8 + (i8 * i8));
                            break;
                        case 9:
                        case 10:
                            fArr[i6 - 1][i6 + 1] *= i4;
                            break;
                        case 11:
                            i7 = (int)Test.instanceCount;
                            break;
                        case 12:
                            i7 += (-14 + (i8 * i8));
                        case 13:
                            Test.iArrFld[i4 - 1] ^= (int)-3362215874L;
                            break;
                        case 14:
                            fArr[(i7 >>> 1) % N][i4 - 1] += i6;
                        default:
                            f1 -= f1;
                        }
                        break;
                    case 80:
                        i9 += (int)d;
                        break;
                    case 81:
                        i9 |= i8;
                        break;
                    case 82:
                        Test.iArrFld[i4 - 1] = Test.sFld;
                        break;
                    case 83:
                        i5 += i9;
                        break;
                    case 84:
                        i5 >>= i7;
                    case 85:
                        if (i6 != 0) {
                            vMeth1_check_sum += by + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) +
                                Float.floatToIntBits(f1) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                                FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        break;
                    case 86:
                        i5 *= (int)l1;
                    }
                }
            }
        }
        vMeth1_check_sum += by + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
            l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, float f, int i1) {

        int i2=-64919, i3=-130, i18=-33289, i19=-130, i20=64488, i21=150, i22=25401, i23=-34524;
        double d1=-58.102909;

        for (i2 = 4; i2 < 232; ++i2) {
            vMeth1((byte)(-125));
            if (Test.bFld) break;
            i = 5;
            i3 = i3;
            for (i18 = i2; i18 < 7; i18++) {
                for (i20 = 1; i20 > 1; i20 -= 2) {
                    i21 = i3;
                }
                for (i22 = 1; i22 < 1; ++i22) {
                    try {
                        Test.iArrFld[i22 - 1] = (i / -103);
                        i19 = (i23 / i22);
                        i = (i23 / i);
                    } catch (ArithmeticException a_e) {}
                    i23 = 227;
                    i19 += i20;
                }
                f -= Test.instanceCount;
                i19 += (i18 * i18);
                d1 += 194L;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i18 + i19 + i20 + i21 + i22 + i23 +
            Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i24=-29141, i25=-254, i26=-2, i27=5, i28=122, i29=18, i30=-23202, i31=97, i32=235, i33=-28368, i34=37012,
            i35=82, i36=-57, i37=133, i38=-220;
        double d2=-81.128935;
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, -6981456414824956706L);
        FuzzerUtils.init(fArr1, 2.11F);

        vMeth(-23720, fFld, 7);
        i24 = Test.byFld;
        fFld = Test.instanceCount;
        Test.instanceCount *= -46339;
        for (i25 = 10; i25 < 373; i25++) {
            i26 += (int)Test.instanceCount;
            for (i27 = 69; i27 > 3; i27 -= 2) {
                i26 += (int)(0.845F + (i27 * i27));
                i24 -= -10;
                Test.instanceCount |= i27;
                d2 = Test.instanceCount;
            }
            for (i29 = 3; i29 < 69; i29++) {
                i30 = Test.byFld;
            }
            switch ((i25 % 6) + 35) {
            case 35:
                for (i31 = 3; i31 < 69; i31++) {
                    for (i33 = 2; i33 > 1; i33--) {
                        i34 *= Test.byFld;
                        i24 -= (int)fFld;
                    }
                    Test.iArrFld[i25 - 1] = (int)Test.instanceCount;
                    Test.instanceCount += -11;
                    i34 = i28;
                    for (i35 = 1; 2 > i35; i35++) {
                        if (Test.bFld) continue;
                    }
                    for (i37 = 1; i37 < 2; i37++) {
                        Test.instanceCount += (long)51.95699;
                        fFld += i36;
                        Test.byFld ^= (byte)123L;
                        if (Test.bFld) {
                            i38 >>= i38;
                            i32 >>= i32;
                        } else if (Test.bFld) {
                            lArr[i25 + 1] *= i26;
                        } else if (false) {
                            i24 += i35;
                        }
                    }
                }
            case 36:
                Test.iArrFld[(i35 >>> 1) % N] += (int)d2;
                break;
            case 37:
                Test.instanceCount -= Test.instanceCount;
                break;
            case 38:
                fFld -= Test.sFld;
                break;
            case 39:
            case 40:
                fArr1 = fArr1;
                break;
            default:
                lArrFld = FuzzerUtils.long2array(N, (long)3900675416L);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
