package tests.javafuzzer1034;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 13:01:18 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1747764052L;
    public static float fFld=2.73F;
    public static volatile double dFld=6.67745;
    public static double dFld1=-1.86468;
    public int iFld=-26739;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 24);
        FuzzerUtils.init(Test.lArrFld, 53657274L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i10=0, i11=13, i12=-46;
        boolean b=true;
        float fArr[][]=new float[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -65.971F);
        FuzzerUtils.init(byArr, (byte)88);

        for (i10 = 15; i10 < 286; i10++) {
            i11 = 186;
            switch (((i10 % 1) * 5) + 88) {
            case 90:
                Test.iArrFld[i10] = (int)Test.instanceCount;
                fArr[i10 + 1][i10] *= i10;
                fArr[i10][i10 - 1] += i11;
                Test.lArrFld[i10 + 1] = i10;
                break;
            default:
                if (b) continue;
                switch ((i10 % 4) + 77) {
                case 77:
                    i11 ^= (int)Test.instanceCount;
                    Test.instanceCount += i10;
                    byArr[i10] |= (byte)i12;
                    break;
                case 78:
                    i11 += (((i10 * Test.instanceCount) + i12) - i11);
                    Test.instanceCount *= -11;
                    i11 |= i10;
                case 79:
                    i12 -= i12;
                    break;
                case 80:
                    b = b;
                default:
                    if (b) break;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i10 + i11 + (b ? 1 : 0) + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i7, int i8, int i9) {

        int i13=-13, i14=13265, i15=-243, i16=-213, i17=-126, i18=-11;
        byte by=-7;

        vMeth1(Test.fFld);
        i7 = i8;
        for (i13 = 6; i13 < 289; ++i13) {
            for (i15 = 1; 6 > i15; i15++) {
                by *= (byte)i13;
                Test.iArrFld[i15] = (int)Test.instanceCount;
                i16 -= i8;
                by += (byte)i15;
                Test.iArrFld = Test.iArrFld;
                Test.instanceCount += i15;
            }
            i7 += i13;
            Test.instanceCount = Test.instanceCount;
            for (i17 = 1; i17 < 6; i17++) {
                short s=14283;
                i7 -= i15;
                s = (short)i17;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i13 + i14 + i15 + i16 + by + i17 + i18;
    }

    public static int iMeth(int i3, int i4) {

        int i5=10235, i6=11, i19=55536, i20=-251, i21=79, i22=-32510, i23=38;
        short s1=-3199;

        i4 |= i4;
        for (i5 = 6; i5 < 293; ++i5) {
            vMeth(i3, i3, i5);
        }
        i3 >>>= i6;
        for (i19 = 3; i19 < 174; ++i19) {
            i4 *= 3;
        }
        i3 = 6;
        Test.fFld += s1;
        switch (((i19 >>> 1) % 1) + 68) {
        case 68:
            s1 |= (short)i3;
            i21 = 1;
            while (++i21 < 297) {
                for (i22 = 1; i22 < 6; i22++) {
                    i23 = -30828;
                    i6 += i6;
                    i20 -= (int)-7266948954001798064L;
                }
            }
            break;
        }
        long meth_res = i3 + i4 + i5 + i6 + i19 + i20 + s1 + i21 + i22 + i23;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=0.3011;
        int i=2, i1=9, i2=-41236, i24=34103, i25=-190, i26=106, i27=-103;
        float f1=1.185F;
        byte by1=56, byArr1[]=new byte[N];
        short s2=1802;

        FuzzerUtils.init(byArr1, (byte)-25);

        d = 148;
        while (--d > 0) {
            boolean b1=true;
            i = 1;
            do {
                for (i1 = 1; i1 > 1; i1 -= 3) {
                    i2 += (i1 - i2);
                    i2 -= (int)(iMeth(0, i) - d);
                    i2 &= i;
                    Test.iArrFld[(int)(d)] += -46007;
                    i2 += i2;
                }
                i2 &= i2;
                f1 = 1;
                do {
                    i2 -= (int)Test.instanceCount;
                    i2 += 147;
                    by1 = (byte)i2;
                    i2 = s2;
                } while (++f1 < 1);
                i2 *= i;
            } while (++i < 169);
            b1 = b1;
            Test.instanceCount = Test.instanceCount;
            Test.dFld *= 59315;
            i2 += (int)Test.fFld;
        }
        i24 = 1;
        while (++i24 < 264) {
            Test.instanceCount *= (long)Test.dFld1;
            if (Test.bFld) {
                i25 = 1;
                do {
                    for (i26 = 1; i26 < 1; ++i26) {
                        Test.fFld = i26;
                        i27 += i26;
                        Test.dFld1 += f1;
                        byArr1[i25 - 1] = (byte)Test.instanceCount;
                        iFld = iFld;
                    }
                    iFld += (((i25 * by1) + i26) - i1);
                } while (++i25 < 95);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
