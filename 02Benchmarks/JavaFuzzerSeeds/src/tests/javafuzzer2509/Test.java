package tests.javafuzzer2509;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:44:55 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static float fFld=20.678F;
    public static int iFld=-123;
    public static byte byFld=67;
    public double dFld=-114.89140;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.byArrFld, (byte)-99);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2, short s) {

        int i3=13798, i4=62, i5=36, i6=-29337;
        byte by=75;

        i2 >>= (int)Test.instanceCount;
        Test.instanceCount <<= i1;
        i2 += i1;
        i3 = 225;
        while (--i3 > 0) {
            s >>= (short)15789;
            i2 += (((i3 * i1) + i3) - i1);
            i4 = 1;
            do {
                i2 -= i3;
                for (i5 = i4; i5 < 1; ++i5) {
                    Test.fFld += (-129 + (i5 * i5));
                    Test.instanceCount *= i6;
                    switch (((i4 % 2) * 5) + 74) {
                    case 79:
                        Test.instanceCount >>= i6;
                    case 75:
                        i1 = by;
                        Test.fFld = i3;
                        break;
                    }
                }
            } while (++i4 < 7);
        }
        vMeth2_check_sum += i1 + i2 + s + i3 + i4 + i5 + i6 + by;
    }

    public static void vMeth1() {

        int i7=6, i8=4, i9=-13, i10=29419, i11=-59, i12=-40470;
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr, 4074272459L);
        FuzzerUtils.init(dArr, 37.106005);

        vMeth2(Test.iFld, Test.iFld, (short)(20767));
        Test.instanceCount &= Test.iFld;
        try {
            if (b) {
                Test.instanceCount = Test.iFld;
                for (i7 = 10; i7 < 260; i7++) {
                    lArr[i7 + 1] *= 12895L;
                    for (i9 = 7; i9 > 1; i9 -= 2) {
                        for (i11 = 3 + 400; 1 < i11; --i11) {
                            Test.iArrFld[i11 + 1] *= i8;
                            Test.fFld = Test.instanceCount;
                            Test.instanceCount = i10;
                            Test.iArrFld[i7 - 1] -= (int)65.875F;
                            dArr[i11 - 1][i9 - 1] -= Test.fFld;
                            i10 = i8;
                        }
                    }
                }
            } else {
                Test.instanceCount = 150;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.byArrFld[(i10 >>> 1) % N] <<= (byte)-52L;
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(long l, long l1) {

        int i=82;
        float f=1.555F;

        Test.instanceCount = (long)((i - l1) - ((f--) * (i - f)));
        vMeth1();
        l1 = Test.instanceCount;
        f += i;
        Test.byFld = (byte)i;
        Test.iArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        vMeth_check_sum += l + l1 + i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        boolean b1=true;
        int i13=-58, i14=-239, i15=69, i16=-18779;
        short s1=-6165, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-19280);

        vMeth(-71L, Test.instanceCount);
        for (float f1 : fArrFld) {
            Test.iFld = (int)f1;
            if (b1) break;
            Test.iArrFld = Test.iArrFld;
            Test.iArrFld[(9446 >>> 1) % N] *= 25240;
            switch ((((Test.iFld >>> 1) % 3) * 5) + 13) {
            case 19:
                Test.iFld &= Test.iFld;
                Test.iFld = (int)Test.instanceCount;
            case 21:
                Test.iFld = 63159;
                for (i13 = 2; i13 < 63; i13++) {
                    for (i15 = 1; i15 < 2; ++i15) {
                        Test.iFld = i13;
                        dFld += i14;
                        s1 += (short)(i15 * i15);
                        Test.instanceCount = Test.instanceCount;
                        f1 = i15;
                        i14 += (i15 * i15);
                        Test.iArrFld[i15] = s1;
                        Test.iFld += i16;
                        sArr[i13 - 1] *= (short)-30201;
                        Test.instanceCount = Test.instanceCount;
                    }
                    i16 = i15;
                }
                Test.iFld = i15;
                i16 = Test.iFld;
                break;
            case 20:
                i14 += -29332;
                break;
            }
            if (false) {
                Test.instanceCount -= i13;
                Test.instanceCount = Test.iFld;
                Test.iFld = Test.byFld;
            } else {
                i16 = Test.iFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
