package tests.javafuzzer2411;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 14:21:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-246L;
    public double dFld=1.23678;
    public static short sFld=6180;
    public static volatile boolean bFld=true;
    public static float fFld=-2.253F;
    public int iFld=-63248;
    public static int iFld1=216;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.2031);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d1, int i9, float f2) {

        int i10=127, i11=-513, i12=29728, i13=-164, i14=-38008, iArr1[]=new int[N];
        boolean b=true;
        float fArr1[]=new float[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr1, 56.207F);
        FuzzerUtils.init(lArr2, -21036L);
        FuzzerUtils.init(iArr1, -22);

        for (i10 = 18; 354 > i10; ++i10) {
            switch (((i10 % 9) * 5) + 87) {
            case 102:
                i9 = i11;
                Test.instanceCount |= Test.sFld;
                i11 ^= (int)Test.instanceCount;
                break;
            case 123:
                i11 += i9;
                for (i12 = 1; 5 > i12; ++i12) {
                    Test.instanceCount += i13;
                    if (true) break;
                }
                i9 = 11;
                break;
            case 125:
                f2 = i12;
                i9 = i10;
                break;
            case 90:
                fArr1[i10 - 1] -= 2500842668312928122L;
                fArr1[i10 - 1] = i9;
                lArr2 = lArr2;
                break;
            case 100:
                if (b) break;
            case 124:
                try {
                    i11 = (i11 % i14);
                    i11 = (i14 / iArr1[i10 + 1]);
                    i14 = (iArr1[i10] % -32);
                } catch (ArithmeticException a_e) {}
                break;
            case 126:
                i9 *= i13;
                break;
            case 115:
                lArr2[i10] >>= -141;
                break;
            case 117:
                iArr1[i10 + 1] = (int)115.973F;
                break;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + (b ? 1 :
            0) + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, double d, float f1) {

        short s=26452;
        int i5=-9407, i6=12, i7=76, i8=113, iArr[]=new int[N];
        byte by=102;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 14.206F);
        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(iArr, -27);

        Test.instanceCount -= ((-i4) - s);
        i5 = 1;
        while (++i5 < 374) {
            i6 = 5;
            do {
                fArr[i6] += ((Test.instanceCount--) + (lArr1[i5]++));
            } while (--i6 > 0);
            i7 = 1;
            while (++i7 < 5) {
                Test.instanceCount += i7;
                Test.instanceCount >>= (long)(((d - i6) + (--by)) - (++Test.instanceCount));
                iArr[i5 - 1] *= (int)f1;
                i8 = 1;
                while (++i8 < 1) {
                    i4 = Math.abs(iMeth(d, i6, f1));
                    if (Test.bFld) {
                        Test.instanceCount += i8;
                        lArr1[i8] += (long)f1;
                        Test.instanceCount += i7;
                        i4 += i8;
                    } else if (Test.bFld) {
                        i4 = i6;
                    } else {
                        i4 = (int)1.285F;
                    }
                }
            }
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s + i5 + i6 + i7 + by + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public long lMeth(int i2, int i3, long l) {

        float f3=-1.144F;
        byte by1=20;
        int i15=-216, i16=-19602;
        double d2=0.122882;

        Test.instanceCount = (i3--);
        vMeth(i2, dFld, -56.124F);
        f3 *= i3;
        l >>>= by1;
        i2 -= i3;
        i15 = 1;
        do {
            if (Test.bFld) break;
            for (d2 = 1; d2 < 8; d2++) {
                i3 -= i15;
                switch ((i15 % 2) + 46) {
                case 46:
                    f3 = i3;
                    iArrFld[i15 + 1] *= (int)d2;
                    i16 >>= i15;
                    i3 += (int)(d2 * d2);
                case 47:
                    dFld *= i16;
                    break;
                default:
                    if (Test.bFld) break;
                }
            }
        } while (++i15 < 190);
        long meth_res = i2 + i3 + l + Float.floatToIntBits(f3) + by1 + i15 + Double.doubleToLongBits(d2) + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i17=42, i18=-14, i19=-205, i20=41207, i21=9, i22=170, i23=-44841, i24=3, i25=-2;
        double d3=0.24164;
        byte by2=93;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, -9L);

        dFld *= lMeth(i17, i17, 1L);
        d3 = 1;
        while (++d3 < 362) {
            Test.instanceCount += (long)(d3 * d3);
            for (i18 = 70; i18 > 3; --i18) {
                for (i20 = (int)(d3); 2 > i20; i20++) {
                    i19 += i17;
                    i21 -= i19;
                    iArrFld[i18 - 1] += (int)-4L;
                    i19 += i17;
                    i21 += (i20 * Test.instanceCount);
                    Test.fFld -= -3;
                    Test.instanceCount *= 35464;
                    i17 = i20;
                    Test.fFld += i17;
                }
                iFld += Test.iFld1;
            }
            for (i22 = (int)(d3); i22 < 70; i22++) {
                lArr3[(int)(d3 + 1)] = 0;
                i23 &= i22;
                Test.instanceCount = i20;
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount = by2;
                dFld *= Test.instanceCount;
                Test.fFld += Test.instanceCount;
                iArrFld = iArrFld;
                Test.dArrFld[(i21 >>> 1) % N] = -7798L;
            }
            iFld += (int)d3;
        }
        for (i24 = 3; i24 < 121; i24++) {
            i25 += i22;
            iFld *= 20;
            Test.iFld1 += i17;
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
