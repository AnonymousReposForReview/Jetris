package tests.javafuzzer1271;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:34:29 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static boolean bFld=true;
    public static int iFld=5;
    public static int iFld1=-62270;
    public static double dFld=-1.24136;
    public byte byFld=0;
    public static float fFld=-83.223F;
    public static float fFld1=0.91F;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.310F);
        FuzzerUtils.init(Test.lArrFld, 5146602808852923498L);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b, boolean b1) {

        int i2=64, i3=-13, i4=-9, i5=93, i6=-33959, i7=1, i8=7565, iArr[]=new int[N];
        float f=-51.256F;
        short s=-31962;
        double dArr[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, 0.66483);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -7);

        dArr[(i2 >>> 1) % N] += f;
        for (i3 = 3; 135 > i3; ++i3) {
            for (i5 = 1; 12 > i5; i5++) {
                for (i7 = 2; 1 < i7; i7--) {
                    switch (((i6 >>> 1) % 3) + 35) {
                    case 35:
                        if (b) continue;
                        i8 /= (int)(Test.instanceCount | 1);
                        i8 = i4;
                        i8 = (int)f;
                    case 36:
                        i6 += s;
                        break;
                    case 37:
                        i8 = i2;
                        bArr[i5 - 1] = b;
                        if (i3 != 0) {
                            vMeth1_check_sum += (b ? 1 : 0) + (b1 ? 1 : 0) + i2 + Float.floatToIntBits(f) + i3 + i4 +
                                i5 + i6 + i7 + i8 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                                FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    }
                    i4 = i5;
                    iArr[i3] -= (int)f;
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + (b1 ? 1 : 0) + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + s
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, long l) {

        byte by=45;
        int i9=-2, i10=-13368, i11=-132;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);

        if (Test.bFld) {
            i1 *= (int)((by * (by++)) * ((i1 + -2435041480L) + (i1--)));
            i1 += (i1++);
            vMeth1(Test.bFld, Test.bFld);
            i9 = 1;
            while (++i9 < 182) {
                i1 = Test.iFld;
                Test.instanceCount -= l;
                if (Test.bFld) continue;
            }
        } else {
            lArr[(i9 >>> 1) % N] = Test.iFld;
        }
        Test.instanceCount <<= l;
        i1 <<= Test.iFld1;
        Test.iFld *= (int)Test.dFld;
        for (i10 = 12; 302 > i10; ++i10) {
            Test.fArrFld[i10] *= i9;
            Test.instanceCount = i9;
        }
        vMeth_check_sum += i1 + l + by + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth() {

        float f1=91.414F, f2=0.341F;
        int i12=-17721, i13=0, i14=-59148, i15=-27597, i16=-53942, i17=-5, i18=1381, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 21511);

        vMeth(Test.iFld1, Test.instanceCount);
        Test.iFld = (int)Test.instanceCount;
        Test.fArrFld[(Test.iFld1 >>> 1) % N] -= Test.iFld1;
        for (f1 = 343; f1 > 17; f1 -= 3) {
            for (i13 = 1; i13 < 14; ++i13) {
                Test.instanceCount <<= byFld;
            }
            Test.instanceCount <<= Test.iFld1;
            if (Test.bFld) {
                for (i15 = 1; i15 < 14; ++i15) {
                    for (i17 = 2; i17 > 1; i17--) {
                        switch (((Test.iFld1 >>> 1) % 5) + 13) {
                        case 13:
                            Test.dFld = f1;
                            f2 += (i17 * i17);
                            try {
                                Test.iFld1 = (-201 % i17);
                                i16 = (iArr1[i15 + 1] % i16);
                                Test.iFld1 = (-55 / Test.iFld1);
                            } catch (ArithmeticException a_e) {}
                        case 14:
                            i16 += (i17 * i17);
                            break;
                        case 15:
                            i16 += i13;
                            break;
                        case 16:
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        case 17:
                            Test.iFld1 -= i13;
                            break;
                        default:
                            Test.lArrFld[i15 + 1] *= -143L;
                        }
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-81, i19=10593, i20=-11, i21=17411, i22=8, i23=9, i24=-16446, i25=18057, i26=12;
        short s1=23405;
        long l1=1383895732L;

        switch ((((i * i) >>> 1) % 8) + 93) {
        case 93:
            i += iMeth();
            Test.instanceCount -= i;
            for (i19 = 4; i19 < 121; i19 += 3) {
                i -= s1;
                if (Test.bFld) break;
            }
            Test.fFld += Test.iFld;
        case 94:
            for (l1 = 13; 265 > l1; l1++) {
                for (i22 = (int)(l1); i22 < 100; i22++) {
                    Test.iArrFld[(int)(l1)] = (int)Test.dFld;
                    Test.iFld = i21;
                    i24 = 1;
                    while (--i24 > 0) {
                        Test.iFld *= (int)l1;
                        i21 = Test.iFld;
                        i23 >>= -12;
                        i21 += i24;
                        Test.instanceCount <<= i24;
                        i21 >>= (int)l1;
                        if (Test.bFld) continue;
                    }
                    Test.iFld1 += (i22 + Test.fFld);
                }
                byFld += (byte)Test.fFld;
                for (i25 = 1; i25 < 100; i25 += 2) {
                    Test.bFld = Test.bFld;
                    s1 >>>= (short)-7;
                    i20 = Test.iFld;
                }
                if (Test.bFld) {
                    switch ((int)(((l1 % 2) * 5) + 114)) {
                    case 121:
                        Test.iFld -= i25;
                        Test.instanceCount = i24;
                        Test.fFld1 *= Test.fFld1;
                        break;
                    case 115:
                        Test.iFld >>= byFld;
                        break;
                    }
                } else if (Test.bFld) {
                    i21 *= Test.iFld;
                } else {
                    i21 -= (int)l1;
                }
            }
        case 95:
            Test.lArrFld = FuzzerUtils.long1array(N, (long)5656412655465496253L);
            break;
        case 96:
            i21 = s1;
            break;
        case 97:
        case 98:
            Test.dFld -= Test.instanceCount;
        case 99:
            Test.instanceCount += i21;
        case 100:
            Test.iFld1 *= 153;
            break;
        default:
            i20 <<= i24;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
