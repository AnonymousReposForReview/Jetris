package tests.javafuzzer2374;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:47:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=90L;
    public short sFld=-7367;
    public static byte byFld=36;
    public static volatile boolean bFld=true;
    public static int iFld=7;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -63650);
        FuzzerUtils.init(Test.fArrFld, 1.742F);
        FuzzerUtils.init(Test.lArrFld, -32685L);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.sArrFld, (short)-12429);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static double dMeth(short s, int i1) {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 2541);

        i1 >>= (iArr[(i1 >>> 1) % N][(i1 >>> 1) % N]--);
        long meth_res = s + i1 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth2() {

        int i14=11, i15=52651, i16=-201, i17=228, i18=8, i19=190, i20=-12;
        short s1=-16119;
        boolean b=false;

        for (i14 = 20; i14 < 356; ++i14) {
            for (i16 = 1; 5 > i16; ++i16) {
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.iArrFld[i18 - 1] >>>= s1;
                }
                i20 = 1;
                do {
                    Test.instanceCount = 51;
                    Test.instanceCount += (((i20 * s1) + i15) - i19);
                    if (b) {
                        Test.iArrFld[i20] = i20;
                        Test.instanceCount /= (long)4.42296;
                        Test.instanceCount ^= Test.instanceCount;
                        vMeth2_check_sum += i14 + i15 + i16 + i17 + i18 + i19 + s1 + i20 + (b ? 1 : 0);
                        return;
                    } else {
                        i19 += (-62854 + (i20 * i20));
                        i15 >>>= (int)Test.instanceCount;
                        i17 -= (int)1.846F;
                    }
                    i19 = Test.byFld;
                } while (++i20 < 2);
            }
        }
        vMeth2_check_sum += i14 + i15 + i16 + i17 + i18 + i19 + s1 + i20 + (b ? 1 : 0);
    }

    public static void vMeth1() {

        int i9=-38351, i10=12, i11=-13, i12=1, i13=32413, i21=-15, i22=-41;
        float f1=-34.305F;
        double d=-1.592;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(bArr, true);

        switch (((i9 >>> 1) % 5) + 102) {
        case 102:
            for (i10 = 369; 19 < i10; i10 -= 2) {
                for (i12 = 1; i12 < 9; i12++) {
                    vMeth2();
                    i9 *= (int)Test.instanceCount;
                    Test.instanceCount -= -7;
                    i11 -= (int)Test.instanceCount;
                    for (i21 = 1; i21 < 2; ++i21) {
                        boolean b1=false;
                        Test.iArrFld[i12] -= i11;
                        f1 += i10;
                        lArr[i10 - 1] += -16;
                        bArr[i10 - 1] = b1;
                        i11 = i9;
                        i22 = (int)f1;
                        i11 += (i21 ^ i22);
                    }
                }
            }
            break;
        case 103:
            Test.iArrFld[(i12 >>> 1) % N] /= (int)(Test.instanceCount | 1);
            break;
        case 104:
            i22 *= (int)d;
        case 105:
            f1 += i13;
            break;
        case 106:
            i9 >>= (int)Test.instanceCount;
            break;
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i21 + i22 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i2, int i3) {

        int i4=-4, i5=206, i6=-13421, i7=-187, i8=-50753, i23=41319, i24=-36;
        float f=-91.573F;

        i4 = 1;
        while (++i4 < 334) {
            for (i5 = i4; i5 < 5; i5 += 3) {
                i3 += (((i5 * i3) + i3) - f);
            }
            for (i7 = 1; i7 < 5; i7 += 2) {
                vMeth1();
                Test.instanceCount += Test.instanceCount;
                for (i23 = 1; 3 > i23; i23++) {
                    Test.fArrFld[i4 + 1] -= -23.683F;
                    Test.fArrFld[i4 + 1] *= -2742618335L;
                    i8 *= (int)f;
                    Test.iArrFld[i7 - 1] = 166;
                    Test.lArrFld[i23] = Test.instanceCount;
                    Test.instanceCount = (long)f;
                    Test.lArrFld[i23] |= Test.instanceCount;
                    Test.bFld = false;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + i23 + i24;
    }

    public void mainTest(String[] strArr1) {

        int i=-162, i25=-189, i26=-198, i27=-34565, i28=5;
        double d1=103.109495, d2=0.123665, d3=86.2964;
        long l=1082976839L;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-7292);

        Test.instanceCount = ((-i) + i);
        i = (int)(((Test.instanceCount + i) - (i * sFld)) + (dMeth(sFld, i) - (-2L - (i * Test.instanceCount))));
        vMeth(i, 15800);
        i25 = 1;
        while (++i25 < 223) {
            float f2=-111.821F;
            f2 += i;
            d1 += Test.instanceCount;
            d1 *= i25;
            d2 = 1;
            do {
                i = i25;
                Test.instanceCount >>>= i25;
                Test.iArrFld[i25] = (int)f2;
            } while (++d2 < 113);
            for (i26 = 2; i26 < 113; ++i26) {
                d1 *= i27;
                for (d3 = 1; 2 > d3; d3++) {
                    switch (((i25 >>> 1) % 10) + 37) {
                    case 37:
                        i27 += (int)(-110.871F + (d3 * d3));
                        i = 48031;
                        break;
                    case 38:
                        i <<= sFld;
                        i28 += (int)d3;
                        i27 += (int)(((d3 * f2) + i26) - i27);
                        Test.instanceCount += (125 + (d3 * d3));
                        break;
                    case 39:
                        switch ((i25 % 10) + 79) {
                        case 79:
                            i27 += i26;
                            Test.instanceCount += Test.byFld;
                            break;
                        case 80:
                            Test.byFld = (byte)i25;
                            i27 = i28;
                            Test.bArrFld[i26] = Test.bArrFld[i25];
                            Test.instanceCount = l;
                            break;
                        case 81:
                            i28 = sFld;
                            f2 *= i27;
                        case 82:
                            i += (int)d3;
                            break;
                        case 83:
                            sArr[(int)(d3 - 1)] = Test.sArrFld;
                        case 84:
                            try {
                                i = (Test.iArrFld[i25] % i26);
                                Test.iArrFld[i26] = (i25 % 60164);
                                i27 = (i28 / i);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 85:
                            i28 >>= i28;
                        case 86:
                            Test.sArrFld[i26 - 1] *= (short)d1;
                        case 87:
                            i28 += (int)(((d3 * i26) + Test.iFld) - f2);
                        case 88:
                            i27 = i;
                            break;
                        default:
                            d1 *= i26;
                        }
                        break;
                    case 40:
                        f2 = i;
                        break;
                    case 41:
                        f2 -= i25;
                        break;
                    case 42:
                        Test.iFld += (int)f2;
                        break;
                    case 43:
                        Test.iFld += (int)d3;
                        break;
                    case 44:
                        Test.lArrFld[i25] = i25;
                        break;
                    case 45:
                        l |= -43752;
                        break;
                    case 46:
                        Test.iFld /= (int)((long)(d1) | 1);
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
