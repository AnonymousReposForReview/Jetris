package tests.javafuzzer2471;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:15:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-65L;
    public static int iFld=-243;
    public static short sFld=30815;
    public static int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61754);
        FuzzerUtils.init(Test.byArrFld, (byte)2);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth(boolean b, float f) {

        int i1=41480;

        sArrFld[(i1 >>> 1) % N] = (short)(i1 - i1);
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + i1;
    }

    public static void vMeth2() {

        int i2=-254, i3=2, i4=10, i5=-1801, i6=-13;
        boolean b2=false;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-9493);

        sArr1 = sArr1;
        i2 = 1;
        do {
            Test.iFld *= (int)1.876F;
            Test.instanceCount = i2;
            i3 = 1;
            do {
                Test.byArrFld = Test.byArrFld;
                Test.iArrFld[i2] += i3;
                switch (((i3 % 1) * 5) + 77) {
                case 81:
                    i4 = 1;
                    do {
                        Test.iArrFld[i2 - 1] = i3;
                    } while (++i4 < 1);
                    for (i5 = 1; 1 > i5; i5++) {
                        b2 = b2;
                        if (i3 != 0) {
                            vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(sArr1);
                            return;
                        }
                        Test.instanceCount += Test.instanceCount;
                        Test.instanceCount = Test.iFld;
                    }
                }
            } while (++i3 < 6);
        } while (++i2 < 279);
        vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(sArr1);
    }

    public static void vMeth1(long l) {

        long l1=3092036649L, lArr[]=new long[N];
        double d2=-2.15970;
        int i7=14, i8=-7;
        boolean b3=false;

        FuzzerUtils.init(lArr, 46L);

        l1 = 1;
        while (++l1 < 122) {
            Test.iFld >>= (int)lArr[(int)(l1 - 1)];
            vMeth2();
            Test.iFld *= Test.iFld;
            Test.iFld = Test.iFld;
            Test.iFld += (int)(l1 * Test.iFld);
            d2 = 1;
            do {
                for (i7 = 1; i7 < 1; i7++) {
                    try {
                        Test.iArrFld[(int)(l1 - 1)] = (i7 % 27992);
                        Test.iArrFld[(int)(d2)] = (i7 % Test.iFld);
                        i8 = (i7 % i8);
                    } catch (ArithmeticException a_e) {}
                    l += (i7 ^ l);
                    Test.iFld += (50322 + (i7 * i7));
                    i8 += (i7 * i7);
                    i8 += (int)-1.113F;
                    Test.iFld = (int)Test.instanceCount;
                    b3 = b3;
                }
            } while (++d2 < 13);
        }
        vMeth1_check_sum += l + l1 + Double.doubleToLongBits(d2) + i7 + i8 + (b3 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(float f2) {

        float f3=0.731F;
        int i9=12, i10=-1, i11=-215, i12=26390, i13=0, i14=-85, i15=12;
        short s=-30278;
        double d3=0.104250;
        boolean b4=false;

        vMeth1(Test.instanceCount);
        for (f3 = 179; f3 > 1; --f3) {
            s |= (short)i9;
        }
        d3 = 1;
        while (++d3 < 392) {
            for (i10 = 1; 4 > i10; i10++) {
                if (b4) break;
                i11 = i9;
                if (b4) continue;
                for (i12 = 1; i12 < 2; ++i12) {
                    Test.iArrFld[i12 + 1] -= i9;
                    Test.iFld = 83;
                }
                for (i14 = 1; i14 < 2; i14++) {
                    i9 = 132;
                    Test.byArrFld[(int)(d3)] += (byte)i14;
                    Test.iArrFld[i14] >>= (int)18700L;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i9 + s + Double.doubleToLongBits(d3) +
            i10 + i11 + (b4 ? 1 : 0) + i12 + i13 + i14 + i15;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-76.4254, d1=101.88440, d4=-2.73809;
        int i=7, i16=-11186, i17=-9, i18=11, i19=176, i20=-91, i21=-29772, i22=-3283, i23=-24246;
        boolean b1=false, bArr[]=new boolean[N];
        float f1=-65.894F;
        short sArr[]=new short[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-29671);
        FuzzerUtils.init(lArr1, -3728309018699929812L);
        FuzzerUtils.init(bArr, true);

        for (d = 7; d < 145; d++) {
            sArr[(int)(d - 1)] = (short)((Test.iArrFld[(int)(d)] = (i * i)) + (--d1));
            vMeth(b1, ((Test.instanceCount * f1) * lMeth(f1)) + f1);
            Test.iArrFld[(int)(d)] = (int)2872662959L;
            switch ((((i >>> 1) % 5) * 5) + 5) {
            case 17:
                Test.instanceCount &= i;
                i += (int)(((d * i16) + Test.instanceCount) - Test.iFld);
                for (i17 = 9; 182 > i17; ++i17) {
                    i18 = 56;
                }
                i16 *= (int)d4;
                break;
            case 15:
                Test.instanceCount += -9;
                d1 -= i;
                i16 >>= 206;
                Test.instanceCount = i16;
                break;
            case 12:
                Test.instanceCount += i17;
                Test.sFld <<= Test.sFld;
                for (i19 = 2; i19 < 182; i19++) {
                    i18 -= i19;
                }
                i = (int)-93L;
                break;
            case 23:
                if (b1) {
                    for (i21 = 10; i21 < 182; i21++) {
                        i = i16;
                        Test.instanceCount += i21;
                        switch (((i21 % 10) * 5) + 92) {
                        case 126:
                            if (b1) break;
                        case 122:
                            i18 &= i19;
                            i16 -= i20;
                            i23 = 1;
                            do {
                                i = i20;
                            } while (++i23 < 2);
                        case 103:
                            i20 = i17;
                            break;
                        case 129:
                            lArr1[(int)(d)][i21] &= i20;
                            break;
                        case 111:
                            i += i21;
                            break;
                        case 123:
                            f1 -= Test.sFld;
                            break;
                        case 137:
                            bArr = bArr;
                            break;
                        case 124:
                            i22 = (int)Test.instanceCount;
                            break;
                        case 133:
                            i += (int)d4;
                            break;
                        case 99:
                            i16 = (int)Test.instanceCount;
                            break;
                        }
                    }
                }
                break;
            case 26:
                f1 *= i22;
                break;
            default:
                f1 += i16;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
