package tests.javafuzzer2973;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 00:16:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3758822591L;
    public static boolean bFld=false;
    public static double dFld=-10.99648;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.8F);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f=-1.946F;
        int i11=-24588, i12=6206, i13=-5, i14=-80, i15=-3622, i16=12150, i17=-9;
        short s=15948;
        byte by1=-48;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 109L);

        if (false) {
            f *= Test.instanceCount;
            i11 += (int)Test.instanceCount;
            for (i12 = 1; i12 < 203; i12++) {
                s = (short)Test.instanceCount;
                i13 += i12;
                i11 >>= i12;
                i11 <<= -12752;
                if (Test.bFld) continue;
                if (false) {
                    for (i14 = 8; i14 > i12; --i14) {
                        for (i16 = 1; i16 > 1; i16--) {
                            i13 -= i11;
                            by1 += (byte)(i16 | Test.instanceCount);
                            f += i16;
                        }
                    }
                } else {
                    i13 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + s + i14 + i15 + i16 + i17 + by1 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i8=-27399, i9=-136, i10=-49369;
        byte by=9;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 85.48576);
        FuzzerUtils.init(lArr1, -3L);

        i8 *= (i8 - (-(i8 * by)));
        for (i9 = 7; i9 < 126; ++i9) {
            int i18=-3;
            switch (((i9 % 2) * 5) + 104) {
            case 105:
                Test.instanceCount *= (i10--);
                break;
            case 111:
                dArr = dArr;
                vMeth1();
                break;
            }
            if (true) {
                i10 += (((i9 * i9) + i10) - l);
                if (Test.bFld) continue;
                lArr1[i9 + 1] -= Test.instanceCount;
                vMeth_check_sum += l + i8 + by + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                    FuzzerUtils.checkSum(lArr1);
                return;
            } else {
                i10 = i18;
                if (i8 != 0) {
                    vMeth_check_sum += l + i8 + by + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                        FuzzerUtils.checkSum(lArr1);
                    return;
                }
            }
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-11);
            i18 >>= (int)Test.instanceCount;
            i10 += i9;
        }
        vMeth_check_sum += l + i8 + by + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public long lMeth(int i5, int i6, int i7) {

        int i19=18330, i20=-77, i21=51611, i22=49066;
        float f1=86.590F;
        byte by2=-83;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)24274);

        vMeth(180L);
        i19 = 234;
        while (--i19 > 0) {
            i20 = 1;
            do {
                i7 += (int)f1;
            } while (++i20 < 7);
            i5 += by2;
            sArr[i19] += (short)i19;
            Test.instanceCount += i21;
            Test.iArrFld[i19 - 1] >>= (int)-29732L;
            i21 = 1766;
            if (Test.bFld) continue;
            Test.fArrFld = Test.fArrFld;
        }
        i7 *= (int)f1;
        i22 = 1;
        while (++i22 < 355) {
            i6 += (((i22 * i22) + f1) - i5);
            Test.dFld += Test.dFld;
        }
        long meth_res = i5 + i6 + i7 + i19 + i20 + Float.floatToIntBits(f1) + by2 + i21 + i22 +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-178, i1=-2, i2=5, i3=-26811, i4=-29237, i23=204, i24=14256, i25=6, i26=7432, i27=38168, i28=-44786;
        float f2=0.799F, f3=-83.263F;

        i >>= (--i);
        i = i1;
        i1 = (i++);
        for (i2 = 6; i2 < 212; i2++) {
            Test.fArrFld[i2] = i4;
            i -= (Test.iArrFld[i2]++);
        }
        lMeth(-50437, 146, i1);
        for (i23 = 4; i23 < 384; i23++) {
            i1 = i4;
        }
        Test.instanceCount -= Test.instanceCount;
        for (i25 = 152; i25 > 8; --i25) {
            f2 += (i25 - f2);
            f2 %= (i23 | 1);
            Test.iArrFld[i25 + 1] -= (int)Test.instanceCount;
            if (Test.bFld) {
                i1 -= i24;
                for (i27 = 5; i27 < 174; ++i27) {
                    Test.instanceCount += Test.instanceCount;
                    f3 = 1;
                    do {
                        i += (int)Test.instanceCount;
                        i26 += (int)(((f3 * Test.instanceCount) + i2) - Test.instanceCount);
                        Test.fArrFld[(int)(f3)] = Test.instanceCount;
                    } while (++f3 < 2);
                    Test.iArrFld[i27] -= i2;
                    f2 -= i26;
                    if (Test.bFld) continue;
                    i28 += i1;
                    Test.iArrFld[i25] = 2;
                    i26 *= (int)Test.instanceCount;
                    Test.instanceCount >>>= Test.instanceCount;
                    i1 += (int)Test.instanceCount;
                }
            } else {
                i24 -= -2301;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
