package tests.javafuzzer214;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:17:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=55163L;
    public static boolean bFld=true;
    public static byte byFld=106;
    public static double dFld=0.111638;
    public static float fFld=25.610F;
    public static int iFld=20688;
    public short sFld=-10717;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2765260119L);
        FuzzerUtils.init(Test.iArrFld, 236);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i6=-6, i7=-13, i8=-47, i9=-6, iArr1[]=new int[N];
        short s1=-31883;
        float f1=65.461F;

        FuzzerUtils.init(iArr1, 136);

        for (int i5 : iArr1) {
            i5 = i5;
            Test.bFld = false;
            i6 = 127;
        }
        i7 = 1;
        do {
            Test.byFld = (byte)s1;
            i8 = 1;
            while (++i8 < 5) {
                int i10=-17768;
                f1 = i8;
                switch ((i7 % 2) + 111) {
                case 111:
                    switch (((i8 % 4) * 5) + 71) {
                    case 74:
                        iArr1[i7] = Test.byFld;
                        Test.lArrFld[i7 + 1] >>>= s1;
                    case 82:
                    case 81:
                        i9 = 1;
                        while (--i9 > 0) {
                            s1 += (short)i9;
                            i4 = i4;
                        }
                    case 80:
                        i10 = (int)Test.instanceCount;
                        break;
                    }
                    break;
                case 112:
                    try {
                        i6 = (i7 % 1724736086);
                        iArr1[i8 + 1] = (i8 % 1898);
                        i6 = (i6 % 143);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        } while (++i7 < 366);
        vMeth2_check_sum += i4 + i6 + i7 + s1 + i8 + Float.floatToIntBits(f1) + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i3) {

        float f=0.523F, f2=0.629F;
        byte by1=94;
        int i11=-4, i12=140, i13=58, i14=52354, iArr[]=new int[N];
        short s2=-25121;

        FuzzerUtils.init(iArr, -45788);

        iArr[(-65248 >>> 1) % N] &= 222;
        f = 352;
        do {
            short s=-25023;
            i3 += (int)(((f * s) + i3) - Test.instanceCount);
            i3 += (int)(f * f);
        } while (--f > 0);
        i3 -= (int)Test.instanceCount;
        iArr[(i3 >>> 1) % N] *= (++by1);
        vMeth2(i3);
        for (i11 = 13; i11 < 249; ++i11) {
            Test.instanceCount >>= -13;
            try {
                i13 = (i11 % i13);
                i12 = (i12 % -65);
                i3 = (i13 % -54422);
            } catch (ArithmeticException a_e) {}
            i14 -= s2;
            f2 += Test.byFld;
            iArr[i11 - 1] = (int)Test.dFld;
            f2 -= i13;
            if (Test.bFld) continue;
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + by1 + i11 + i12 + i13 + i14 + s2 + Float.floatToIntBits(f2)
            + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(byte by, int i, double d) {

        long l=-10L;
        int i1=57210, i2=186, iArr2[]=new int[N];
        short s3=-24035;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.731F);
        FuzzerUtils.init(iArr2, 22527);

        for (l = 367; l > 9; l -= 3) {
            i2 = 1;
            while (++i2 < 13) {
                switch ((i2 % 4) + 126) {
                case 126:
                    vMeth1(i1);
                    fArr[(int)(l + 1)] += Test.instanceCount;
                    iArr2[(int)(l + 1)] = s3;
                    break;
                case 127:
                    if (i != 0) {
                        vMeth_check_sum += by + i + Double.doubleToLongBits(d) + l + i1 + i2 + s3 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    fArr[i2 + 1] = -2729497618L;
                    Test.fFld = i1;
                    Test.fFld = by;
                    break;
                case 128:
                    Test.fFld += (((i2 * Test.fFld) + i) - Test.iFld);
                    iArr2[i2 - 1] = Test.iFld;
                    s3 += (short)(17.285F + (i2 * i2));
                    break;
                case 129:
                    Test.iFld = i2;
                    i -= Test.iFld;
                    break;
                }
            }
        }
        vMeth_check_sum += by + i + Double.doubleToLongBits(d) + l + i1 + i2 + s3 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i15=0, i16=-10, i17=19800, i18=-5, i19=-42922, i20=56, i21=104, i22=-3298;

        vMeth(Test.byFld, Test.iFld, -1.29714);
        sFld -= Test.byFld;
        for (i15 = 14; i15 < 387; i15++) {
            for (i17 = 4; i17 < 68; ++i17) {
                i16 = (int)Test.instanceCount;
                for (i19 = 1; 2 > i19; i19++) {
                    Test.instanceCount = -26;
                    Test.dFld += Test.fFld;
                    Test.instanceCount <<= -12;
                    i16 += i19;
                    if (Test.bFld) break;
                    i18 = (int)8L;
                    Test.instanceCount = i16;
                }
                Test.instanceCount += (((i17 * Test.instanceCount) + Test.fFld) - i18);
                Test.iArrFld[i17] -= (int)Test.instanceCount;
                i20 <<= i18;
                i20 -= (int)Test.instanceCount;
                i18 = i17;
            }
            Test.bFld = Test.bFld;
            Test.iFld += (i15 * i15);
            i20 = (int)120.385F;
            i20 += i18;
            Test.iFld += (i15 | i15);
            Test.instanceCount = -15;
            Test.iFld += i15;
        }
        i16 |= i17;
        Test.lArrFld[(i15 >>> 1) % N] = (long)Test.fFld;
        for (i21 = 378; i21 > 14; i21 -= 3) {
            Test.dFld *= i16;
            i16 <<= i17;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
