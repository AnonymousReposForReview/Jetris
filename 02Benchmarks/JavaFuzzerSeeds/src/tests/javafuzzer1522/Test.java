package tests.javafuzzer1522;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:05:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1714710171823481584L;
    public static volatile int iFld=57;
    public static volatile byte byFld=-95;
    public static float fFld=24.150F;
    public static long lFld=-91606255L;
    public static short sArrFld[]=new short[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)6229);
    }

    public static long lMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, int i7) {

        short s1=24667;
        int i8=-37029, i9=-99, i10=-47460, i11=-147, i12=-109, i13=-58891, i14=-12;
        double d1=12.3672;
        boolean b=false;

        Test.iFld = i7;
        Test.fFld -= s1;
        for (i8 = 145; i8 > 9; --i8) {
            Test.iFld = i8;
        }
        for (i10 = 1; i10 < 216; ++i10) {
            i12 += i10;
            if (b) {
                for (i13 = 1; i13 < 7; i13++) {
                    Test.instanceCount += (long)(0.201F + (i13 * i13));
                    d1 = Test.fFld;
                    i9 = Test.byFld;
                    d1 += i13;
                    i9 += (int)Test.instanceCount;
                    Test.byFld <<= (byte)179;
                }
                i11 = (int)Test.instanceCount;
            } else if (b) {
                Test.instanceCount += 5653594539836563316L;
            }
        }
        vMeth_check_sum += i6 + i7 + s1 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + (b ? 1
            : 0);
    }

    public static short sMeth() {

        short s2=-22535;
        boolean b1=false;
        double d2=2.114856;
        int i16=34, i17=3, i18=8928, i19=3, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -24097);

        vMeth(Test.iFld, Test.iFld);
        iArr1[(Test.iFld >>> 1) % N] = s2;
        switch (((Test.iFld >>> 1) % 2) + 121) {
        case 121:
            b1 = b1;
            for (int i15 : iArr1) {
                switch (((Test.iFld >>> 1) % 1) + 26) {
                case 26:
                    d2 /= (i15 | 1);
                    Test.iFld += (int)Test.instanceCount;
                    for (i16 = 1; 4 > i16; i16++) {
                        for (i18 = i16; i18 < 2; ++i18) {
                            Test.fFld = Test.instanceCount;
                            Test.iFld = i19;
                            Test.iFld = i17;
                            Test.instanceCount += (((i18 * Test.iFld) + i15) - Test.fFld);
                            Test.iFld += (int)Test.instanceCount;
                        }
                    }
                    break;
                default:
                    try {
                        iArr1[(Test.iFld >>> 1) % N] = (-238 / i15);
                        i17 = (Test.iFld / i17);
                        iArr1[(i19 >>> 1) % N] = (111 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                }
            }
        case 122:
            s2 <<= (short)i17;
        default:
            d2 += -6782;
        }
        long meth_res = s2 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth(float f) {

        short s=-29213;
        int i=-194, i1=222, i2=-47986, i3=59, i4=60820, i5=-27256, iArr[]=new int[N];
        boolean b2=false;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -1.48F);
        FuzzerUtils.init(iArr, -4);

        Test.iFld = (int)((fArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]--) - Math.abs(Test.iFld));
        s = (short)(((f--) - (Test.iFld * Test.iFld)) + ((Test.iFld++) - Test.iFld));
        for (i = 6; i < 183; i++) {
            for (i2 = 1; i2 < 9; ++i2) {
                Test.instanceCount += ((Short.reverseBytes(s) + Test.byFld) - i2);
                for (i4 = i2; 2 > i4; ++i4) {
                    iArr[i2 + 1] *= (int)(i3 - (sMeth() + f));
                    Test.iFld &= (int)Test.instanceCount;
                    Test.sArrFld[i4 - 1] <<= (short)-6346258747173402916L;
                    Test.instanceCount *= (long)f;
                    if (b2) continue;
                    i3 = (int)Test.lFld;
                    Test.byFld -= (byte)Test.iFld;
                    Test.instanceCount = i4;
                    Test.iFld *= s;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + s + i + i1 + i2 + i3 + i4 + i5 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=4.7429, dArr[]=new double[N];
        int i20=-9089, i21=-218, i22=231, i23=6, i24=-17, i25=-3;
        long l=-1957369210L, lArr[][]=new long[N][N];
        boolean b3=false;
        short s3=-21810;

        FuzzerUtils.init(dArr, 1.99871);
        FuzzerUtils.init(lArr, 3498727335L);

        d += (Math.max(lMeth(Test.fFld), Test.lFld) - Test.iFld);
        Test.instanceCount = Test.byFld;
        Test.iFld ^= (int)Test.lFld;
        i20 = 1;
        while (++i20 < 224) {
            Test.iFld += i20;
            dArr = dArr;
            Test.iFld = (int)-37.323F;
        }
        for (l = 156; l > 3; l -= 2) {
            if (b3) {
                if (b3) {
                    i22 = 1;
                    while (++i22 < 329) {
                        if (b3) {
                            dArr[i22 - 1] *= l;
                        } else {
                            s3 += (short)i22;
                        }
                    }
                    s3 -= (short)i22;
                }
            }
            i23 = 329;
            while (--i23 > 0) {
                for (i24 = 1; i24 < 1; i24++) {
                    Test.iFld = i21;
                    i21 %= (int)(Test.lFld | 1);
                    lArr[i23][(int)(l + 1)] = i20;
                    Test.byFld = (byte)Test.instanceCount;
                    if (b3) break;
                    Test.fFld = s3;
                    Test.lFld -= i23;
                    i25 += (i24 * i24);
                }
                d += l;
                i21 = Test.byFld;
                iArrFld[i23][(int)(l)] <<= 48775;
                Test.fFld += i23;
                Test.fFld = i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
