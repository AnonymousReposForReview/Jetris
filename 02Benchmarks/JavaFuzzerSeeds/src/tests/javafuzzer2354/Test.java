package tests.javafuzzer2354;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 13:07:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2946795458L;
    public int iFld=-51499;
    public volatile double dFld=-53.92567;
    public static int iFld1=-155;
    public float fFld=122.519F;
    public byte byFld=-125;
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13437L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i2, int i3, double d) {

        int i4=121, i5=1, i6=3, i7=61, i8=178, i9=-49771, iArr[]=new int[N];
        short s=-30454;

        FuzzerUtils.init(iArr, 32942);

        for (i4 = 9; i4 < 217; ++i4) {
            try {
                i5 = (i2 % -1709371577);
                i5 = (i5 / Test.iFld1);
                iArr[i4 - 1] = (iArr[i4 + 1] / i6);
            } catch (ArithmeticException a_e) {}
            for (i7 = i4; i7 < 8; i7++) {
                try {
                    Test.iFld1 = (iArr[i7 - 1] % i3);
                    i2 = (i2 % iArr[i7]);
                    iArr[i4] = (866059253 % i6);
                } catch (ArithmeticException a_e) {}
                i2 >>= i6;
                d += 48528;
                switch ((((i8 >>> 1) % 4) * 5) + 64) {
                case 72:
                    i5 -= i3;
                    i9 -= i2;
                    break;
                case 69:
                    iArr[i4] -= (int)-87.59944;
                    i6 += i7;
                    break;
                case 79:
                    i8 += i7;
                    i5 += (i7 + Test.instanceCount);
                    iArr[i4 + 1] >>= -12;
                    iArr[i4] += s;
                    break;
                case 80:
                    i6 += (int)59590L;
                }
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + s +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        double d1=-79.67871;
        int i10=2, i11=7, i12=-15989, i13=-8, i14=10, iArr1[]=new int[N];
        short s1=-27579;
        float f1=-107.912F;
        byte by=-105;

        FuzzerUtils.init(iArr1, 12);

        iMeth1(Test.iFld1, 45347, d1);
        Test.iFld1 -= (int)Test.instanceCount;
        for (i10 = 3; i10 < 179; i10++) {
            Test.iFld1 += s1;
            i11 -= i10;
            f1 -= Test.instanceCount;
            iArr1[i10 - 1] = 22392;
            for (i12 = 1; i12 < 9; ++i12) {
                i11 -= Test.iFld1;
                switch ((i10 % 5) + 6) {
                case 6:
                    i13 -= (int)Test.instanceCount;
                    i14 = 1;
                    while ((i14 += 3) < 2) {
                        f1 += ((long)i14 | (long)i12);
                        s1 -= (short)Test.instanceCount;
                        Test.instanceCount += (((i14 * i14) + f1) - i13);
                    }
                    break;
                case 7:
                    i11 *= (int)d1;
                case 8:
                    i11 = 13;
                    break;
                case 9:
                    i11 = by;
                    break;
                case 10:
                    Test.instanceCount = (long)1.388F;
                default:
                    i13 += i12;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i10 + i11 + s1 + Float.floatToIntBits(f1) + i12 + i13 + i14 +
            by + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth() {

        int i=-222, i1=33725, i15=59657, i16=-5638, i17=-42042, i18=2;
        short s2=-1508;
        double d2=84.25799;

        Test.lArrFld[(iFld >>> 1) % N] = (long)dFld;
        i = 248;
        while ((i -= 3) > 0) {
            i1 = 1;
            do {
                vMeth();
                i15 = 1;
                do {
                    iFld -= (int)Test.instanceCount;
                } while (--i15 > 0);
                iFld *= 12;
                for (i16 = 1; i16 > i1; --i16) {
                    iArrFld[i + 1] %= (int)(Test.instanceCount | 1);
                }
            } while (++i1 < 19);
            i18 = 1;
            while ((i18 += 3) < 19) {
                float f2=2.526F;
                f2 *= s2;
                Test.instanceCount += (long)d2;
                Test.instanceCount += (i18 * iFld);
            }
            iArrFld[i - 1] += (int)fFld;
            d2 *= -6.65347;
        }
        long meth_res = i + i1 + i15 + i16 + i17 + i18 + s2 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.858F, f3=0.809F;
        int i19=9, i20=-42408, i21=12, i22=10, i23=11, i24=-203, i25=6084, i26=-40465;
        long l=-62088L;
        short s3=-10586;
        double d3=121.31069;

        iFld += (int)(f++);
        f *= Math.max(iMeth(), iFld);
        for (i19 = 2; i19 < 398; ++i19) {
            f = Test.instanceCount;
            for (i21 = 4; i21 < 64; i21 += 2) {
                i20 += iFld;
                i22 += i21;
                i23 = 3;
                do {
                    i22 -= (int)Test.instanceCount;
                    try {
                        iArrFld[i19] = (-2101770662 % iFld);
                        i22 = (106 / iArrFld[i23]);
                        Test.iFld1 = (-15496 % iArrFld[i21]);
                    } catch (ArithmeticException a_e) {}
                    i22 |= 56;
                    i20 += iFld;
                    Test.instanceCount += (long)(-29.116F + (i23 * i23));
                    fFld %= (i23 | 1);
                } while ((i23 -= 2) > 0);
                i20 |= (int)2952617391399651266L;
                i22 += (i21 | i19);
                fFld += (i21 * i21);
                i22 = i20;
                for (l = 1; l < 3; l++) {
                    iArrFld = iArrFld;
                    i24 = i21;
                    s3 = (short)-8545601000012918005L;
                    Test.instanceCount -= i20;
                }
                Test.instanceCount += byFld;
                dFld *= dFld;
            }
            for (f3 = i19; f3 < 64; f3++) {
                byFld *= (byte)17801;
                for (d3 = 1; 1 > d3; ++d3) {
                    i22 += (int)((long)d3 ^ byFld);
                    i24 *= i24;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
