package tests.javafuzzer2816;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:50:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-31520L;
    public static volatile byte byFld=113;
    public static volatile float fFld=0.268F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4920);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i9, int i10) {

        int i11=45821, i12=-10, i13=2, i14=-5930, i15=-159, i16=-29059, i17=3, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 233);
        FuzzerUtils.init(lArr1, 80419243L);

        i11 = i9;
        for (i12 = 12; 221 > i12; i12++) {
            i13 += i12;
            for (i14 = 8; 1 < i14; i14--) {
                switch ((i12 % 2) + 27) {
                case 27:
                    i10 = -157;
                case 28:
                    Test.byFld >>= (byte)i11;
                    i13 &= i13;
                    for (i16 = 1; 2 > i16; ++i16) {
                        i15 += (-216 + (i16 * i16));
                        iArr1[i16] = 14095;
                        switch ((i14 % 5) + 83) {
                        case 83:
                            Test.fFld += -32389;
                            break;
                        case 84:
                            iArr1[i16 - 1] -= i10;
                            lArr1[i16 - 1] += Test.instanceCount;
                            break;
                        case 85:
                            iArr1[i14 + 1] = (int)Test.instanceCount;
                            break;
                        case 86:
                        case 87:
                            if (i17 != 0) {
                            }
                            break;
                        default:
                            i10 *= i13;
                        }
                    }
                    break;
                default:
                    i9 = i14;
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(int i5, int i6) {

        int i7=-1, i18=7, i19=30691, i20=207, i21=11, iArr[]=new int[N];
        float f2=-88.463F, fArr1[]=new float[N];
        short s=-27464;

        FuzzerUtils.init(iArr, 51);
        FuzzerUtils.init(fArr1, 0.874F);

        i7 = 1;
        while (++i7 < 339) {
            i5 += (i7 + f2);
        }
        for (int i8 : iArr) {
            boolean b=true;
            i8 = (int)(((i7 - Test.instanceCount) / ((246 - iArr[(i5 >>> 1) % N]) | 1)) + (lMeth1(i6, i7) + i8));
            b = b;
            for (i18 = 1; i18 < 4; ++i18) {
                fArr1[i18] += i19;
                Test.instanceCount *= i18;
                for (i20 = 1; i20 < 2; ++i20) {
                    i8 -= -59;
                    s = (short)i6;
                    i6 &= i7;
                    i6 -= (int)-3127600963942020167L;
                    i19 = i8;
                    b = b;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f2) + i18 + i19 + i20 + i21 + s +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i1, int i2) {

        float f=0.240F, f1=-63.791F, fArr[]=new float[N];
        int i3=19, i4=-180, i22=-14486, i23=-2;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 112.9F);
        FuzzerUtils.init(lArr, -6238L);

        f = 1;
        while (++f < 124) {
            i1 += (int)(((f * f) + Test.instanceCount) - Test.byFld);
            f1 = i1;
            for (i3 = 1; i3 < 13; ++i3) {
                if (i3 == i3) break;
                fArr[i3] -= (Test.instanceCount - Math.max(lArr[(int)(f - 1)]++, (long)(f1 + i3)));
                Test.byFld *= (byte)(fMeth(i4, i2) - i3);
                Test.iArrFld[i3] = (int)Test.instanceCount;
            }
            fArr[(int)(f - 1)] -= i1;
            Test.instanceCount = -177L;
            for (i22 = 13; i22 > 1; i22 -= 2) {
                Test.fFld = i2;
                Test.iArrFld[(int)(f)] += 4;
            }
        }
        i2 = i3;
        long meth_res = i1 + i2 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i4 + i22 + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=110, i24=1, i25=126, i26=-5, i27=21219, i28=-9, i29=125, i30=7;
        boolean b1=true, bArr[][]=new boolean[N][N];
        double d=110.102283;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 23705L);
        FuzzerUtils.init(bArr, true);

        i -= (int)lMeth(i, i);
        i24 = 1;
        do {
            Test.fFld = i24;
            for (i25 = 144; i25 > 4; i25 -= 3) {
                i26 = i24;
                i26 += i26;
                i27 = 1;
                do {
                    i26 += (int)Test.fFld;
                    Test.fFld -= i26;
                    i26 <<= i;
                    b1 = b1;
                    Test.iArrFld[i24 - 1] -= (int)Test.instanceCount;
                    i26 += (-125 + (i27 * i27));
                    lArr2 = FuzzerUtils.long1array(N, (long)6L);
                } while (++i27 < 4);
                Test.instanceCount <<= i24;
                Test.instanceCount += i25;
                for (i28 = i24; 4 > i28; i28++) {
                    i26 += i28;
                    i29 = i27;
                    i *= (int)Test.fFld;
                    i = i;
                    i30 -= i24;
                    switch ((i28 % 1) + 21) {
                    case 21:
                        i29 = (int)2.43F;
                        i26 += i28;
                        i26 += (i28 | i);
                        Test.fFld += Test.fFld;
                        break;
                    default:
                        d = Test.fFld;
                        bArr[i24 + 1][i28 - 1] = b1;
                        Test.instanceCount = (long)d;
                    }
                }
            }
        } while (++i24 < 174);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
