package tests.javafuzzer1146;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:48:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=46046L;
    public static double dFld=-1.68886;
    public float fFld=1.267F;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-18914);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l, int i8) {

        int i9=58, i10=-190, i11=-13, i12=13, i13=182;
        float f2=-100.523F;
        byte by=-2, byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-72);
        FuzzerUtils.init(lArr1, 50L);

        byArr[(i8 >>> 1) % N] = (byte)Test.instanceCount;
        for (i9 = 6; 189 > i9; i9++) {
            for (i11 = 1; i11 < 9; ++i11) {
                i12 += i13;
                i10 /= (int)(i11 | 1);
                lArr1[i11] |= i13;
                i13 = i8;
                i10 = (int)Test.instanceCount;
                Test.iArrFld[i9 - 1] = (int)4206461565L;
                switch (((i9 % 3) * 5) + 111) {
                case 113:
                    i12 = i10;
                    Test.dFld = f2;
                    i8 += i13;
                    l += by;
                    break;
                case 114:
                    Test.iArrFld[i11] -= i9;
                    break;
                case 124:
                }
            }
        }
        long meth_res = l + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + by +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(int i3) {

        int i4=20169, i5=-12, i6=-26787, i7=-55460, i14=-5, i15=216;
        float f1=5.274F;
        double d=1.78844;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 213L);

        lArr[(i3 >>> 1) % N] = (--lArr[(i3 >>> 1) % N]);
        for (i4 = 14; i4 < 241; ++i4) {
            i5 <<= (--i3);
            for (i6 = 1; i6 < 7; ++i6) {
                i5 -= i3;
                Test.dFld = ((--i5) * ((i7 - f1) + i4));
                lArr[i4] -= (-((i4 + i7) * Test.sArrFld[i6]));
                i7 = (int)((lArr[i6]--) + (Test.iArrFld[i4] - (i3 - 28583)));
                i5 += (13744 + (i6 * i6));
            }
            d = 1;
            do {
                Test.instanceCount >>= (long)(dMeth(Test.instanceCount, i7) + i5);
                i5 = i5;
                for (i14 = 1; i14 < 1; i14++) {
                    Test.instanceCount += Test.instanceCount;
                    Test.iArrFld[(int)(d)] *= -13;
                }
            } while (++d < 7);
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i14 + i15
            + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i) {

        int i1=5775, i2=162, iArr[]=new int[N];
        float f=-1.735F;

        FuzzerUtils.init(iArr, 187);

        for (i1 = 13; i1 < 233; i1++) {
            f += (((i1 * f) + Test.instanceCount) - i1);
            i = (int)((f++) - ((--f) - (Test.instanceCount * i1)));
            i2 >>= (iArr[i1 + 1] & Integer.reverseBytes((int)(i * Test.instanceCount)));
            vMeth1(i2);
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=210, i17=235, i18=-63404, i19=-110, i20=-57847;
        boolean b=true;
        float f3=-112.927F;
        short s=-27002;

        vMeth(59980);
        i16 <<= (int)Test.instanceCount;
        i17 = 1;
        while (++i17 < 278) {
            i16 = i18;
            i16 = i18;
            fFld -= 7;
            i18 += i17;
            i18 <<= i16;
            if (b) continue;
            Test.instanceCount >>= i18;
            if (false) {
                f3 = 1;
                while (++f3 < 90) {
                    fFld += f3;
                    i16 = i18;
                    Test.dFld /= (Test.instanceCount | 1);
                    switch ((int)(((f3 % 3) * 5) + 67)) {
                    case 81:
                        Test.iArrFld[(int)(f3 + 1)] += (int)fFld;
                        i18 += (int)(f3 * i16);
                        Test.iArrFld[(int)(f3 + 1)] = (int)Test.dFld;
                        break;
                    case 68:
                        i16 *= -7;
                        s += (short)(((f3 * i17) + i16) - i18);
                        Test.iArrFld[(-201 >>> 1) % N] *= (int)Test.dFld;
                        break;
                    case 78:
                        i16 += (int)Test.instanceCount;
                        Test.iArrFld[(i16 >>> 1) % N] *= i16;
                        for (i19 = 1; i19 > 1; i19 -= 3) {
                            i20 += (((i19 * Test.instanceCount) + i20) - i18);
                            i20 += i19;
                            i16 += (((i19 * i20) + i19) - i18);
                            Test.iArrFld[i19] *= s;
                        }
                        i18 += (int)(f3 * f3);
                        break;
                    }
                }
            } else {
                dArrFld[i17 + 1] *= i20;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
