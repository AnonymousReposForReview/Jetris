package tests.javafuzzer514;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:58:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=961210500762176795L;
    public static int iFld=1737;
    public static int iFld1=-78;
    public byte byFld=18;
    public static volatile long lArrFld[]=new long[N];
    public volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -505L);
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s, int i5) {

        long l3=8L;
        int i6=-164, i7=68, i8=-247, i9=11, i10=-39274, i11=0, i12=-230, i13=-55, i14=-20860, iArr[]=new int[N];
        boolean b=true;
        float f=-74.542F;

        FuzzerUtils.init(iArr, -11);

        l3 = 1;
        do {
            for (i6 = 1; 7 > i6; i6++) {
                if (b) break;
            }
            s += (short)i7;
            f = i6;
        } while (++l3 < 244);
        for (i8 = 14; 320 > i8; i8++) {
            Test.instanceCount = i6;
            iArr[i8 + 1] += Test.iFld;
            i5 += i10;
            for (i11 = 5; i11 > i8; --i11) {
                Test.instanceCount -= i9;
                for (i13 = 1; i13 > 1; --i13) {
                    i14 ^= (int)l3;
                    Test.iFld -= i9;
                    iArr = iArr;
                }
            }
        }
        vMeth2_check_sum += s + i5 + l3 + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 +
            i13 + i14 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i) {

        int i1=229, i2=1, i3=0, i4=-54127, iArr1[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        double d1=63.66707, dArr[][]=new double[N][N];
        byte by=89;
        float f1=-23.826F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, 14L);
        FuzzerUtils.init(dArr, -1.116027);
        FuzzerUtils.init(fArr, 84.660F);
        FuzzerUtils.init(iArr1, -50731);

        for (i1 = 308; i1 > 3; i1--) {
            for (i3 = 5; 1 < i3; i3--) {
                Test.iFld -= (int)Test.instanceCount;
                vMeth2((short)(22505), 6);
                bArr[i3] = b1;
                lArr1 = lArr1;
                i2 *= Test.iFld;
                d1 = by;
                dArr[i1 + 1] = dArr[i1 + 1];
                fArr[i3 + 1] += Test.iFld;
                Test.instanceCount <<= Test.iFld1;
            }
        }
        iArr1[(10 >>> 1) % N] = i1;
        f1 -= Test.iFld;
        Test.iFld += i4;
        lArr1[(i1 >>> 1) % N] <<= Test.instanceCount;
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + by +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l1, long l2) {

        int i15=127, i16=102, i17=14513, i18=-19384, i19=4274, iArr2[]=new int[N];
        short s1=6392;
        byte by1=-38;
        float f2=0.883F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, -9);
        FuzzerUtils.init(fArr1, -38.1023F);

        vMeth1(Test.iFld);
        for (i15 = 15; 282 > i15; ++i15) {
            iArr2[i15 - 1] -= Test.iFld;
            i16 += (int)Test.instanceCount;
        }
        switch ((((i15 >>> 1) % 6) * 5) + 92) {
        case 95:
            s1 = (short)l2;
            Test.lArrFld[(i15 >>> 1) % N] -= Test.iFld;
            break;
        case 106:
            l1 -= Test.instanceCount;
            i17 = 327;
            do {
                for (i18 = 10; i18 > 1; i18 -= 3) {
                    Test.iFld = i18;
                    i19 += (i18 | i19);
                    iArr2[i17 - 1] = (int)l2;
                    Test.lArrFld[i18 - 1] += by1;
                    Test.iFld += (((i18 * Test.instanceCount) + f2) - i18);
                }
            } while ((i17 -= 2) > 0);
            break;
        case 99:
            Test.iFld1 = (int)72.732F;
        case 110:
            fArr1[(i15 >>> 1) % N] -= f2;
            break;
        case 102:
            f2 *= -3;
        case 108:
            s1 = (short)5;
            break;
        }
        vMeth_check_sum += l1 + l2 + i15 + i16 + s1 + i17 + i18 + i19 + by1 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        double d=-1.41552;
        int i20=-2, i21=66, i22=145, i23=-5, i24=50391, i25=-213, i26=63363, i27=-230, i28=-169;
        short s2=-27849;
        float f3=-2.86F, f4=0.283F;
        long lArr[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, -188L);
        FuzzerUtils.init(bArr1, false);

        for (long l : lArr) {
            Test.iFld = (int)(d++);
            vMeth(Test.instanceCount, l);
            Test.iFld1 = Test.iFld1;
        }
        i20 = 1;
        do {
            for (i21 = 205; i21 > 4; i21--) {
                for (i23 = 2; i23 > 1; --i23) {
                    Test.iFld += i23;
                    Test.instanceCount = Test.iFld1;
                    Test.iFld1 /= (int)(i24 | 1);
                    s2 += (short)(i23 | i21);
                    byFld += (byte)i23;
                    s2 = (short)44;
                }
            }
            i25 = 1;
            do {
                dArrFld = dArrFld;
                for (i26 = i25; i26 < 1; ++i26) {
                    f3 = i25;
                    i27 += (int)Test.instanceCount;
                    dArrFld[i20 + 1] = Test.instanceCount;
                    i22 -= (int)3597508495462293208L;
                    Test.iArrFld[i26] = i21;
                }
                lArr[i25 + 1] = -12L;
                Test.iFld1 *= (int)Test.instanceCount;
                i27 = (int)Test.instanceCount;
                Test.iArrFld[i25] *= (int)f3;
                bArr1[i25] = true;
            } while (++i25 < 205);
        } while (++i20 < 122);
        Test.iFld1 *= i22;
        for (f4 = 16; 276 > f4; ++f4) {
            i24 += Test.iFld1;
            Test.iFld1 = i20;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
