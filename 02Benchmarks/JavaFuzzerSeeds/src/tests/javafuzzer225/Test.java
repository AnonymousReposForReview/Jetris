package tests.javafuzzer225;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:23:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1513801115030733319L;
    public int iFld=-22;
    public static short sFld=5173;
    public static float fFld=-2.263F;
    public static volatile byte byFld=0;
    public static int iFld1=-147;
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -70.14487);
        FuzzerUtils.init(Test.sArrFld, (short)9717);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth() {

        int i=143, iArr[]=new int[N];
        byte by=5;

        FuzzerUtils.init(iArr, -10);

        iArr[(i >>> 1) % N] += (int)(((i / -18877L) % ((++Test.instanceCount) | 1)) - (by &= (byte)(i * i)));
        vMeth_check_sum += i + by + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l1) {

        int i4=-172, i5=-18623, i6=72, i7=-1, i8=73, i9=-47189, iArr1[]=new int[N];
        double d=84.60951;

        FuzzerUtils.init(iArr1, -21406);

        i4 = 1;
        do {
            l1 *= i4;
            try {
                i5 = (i4 % 247);
                i5 = (i5 / i4);
                i5 = (i4 % -57);
            } catch (ArithmeticException a_e) {}
            Test.dArrFld[i4] -= i4;
            if (i4 != 0) {
            }
            l1 += i4;
            for (i6 = 1; i6 < 5; ++i6) {
                Test.sFld = (short)i7;
            }
            i5 = i7;
            i7 += i4;
            if (true) break;
        } while (++i4 < 366);
        for (i8 = 14; 287 > i8; i8++) {
            i9 -= i8;
            i5 -= i5;
            iArr1[i8 + 1] *= (int)d;
        }
        long meth_res = l1 + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l) {

        int i2=-145, i3=0, i10=196, iArr2[]=new int[N];
        byte by2=-72;
        double d1=82.126255, d2=0.22724;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -13792);
        FuzzerUtils.init(sArr, (short)-26056);

        for (i2 = 4; i2 < 126; ++i2) {
            boolean b=false;
            lMeth(Test.instanceCount);
            b = b;
            iArr2[i2 - 1] -= by2;
            sArr[i2] = (short)i2;
            i3 -= (int)l;
            if (b) {
                i3 -= (int)d1;
                i3 = i3;
                i3 >>= i2;
            }
            for (d2 = 1; d2 < 13; d2++) {
                i3 *= i3;
                i3 = (int)Test.fFld;
                i10 = (int)d2;
                l += (long)(d2 - i2);
            }
        }
        long meth_res = l + i2 + i3 + by2 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i10 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(byte by1, float f1, int i1) {

        int i11=61179, i12=-109, i13=39, i14=-2222, i15=14870, i16=4, iArr3[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 9.31254);
        FuzzerUtils.init(iArr3, -156);
        FuzzerUtils.init(lArr, 4280660489L);

        dArr[(i1 >>> 1) % N] = iMeth(Test.instanceCount);
        for (i11 = 12; i11 < 299; ++i11) {
            double d3=-2.58988;
            i12 >>= -37;
            iArr3 = iArr3;
            d3 -= i1;
            for (i13 = 6; i13 > 1; i13--) {
                i14 += (((i13 * i13) + i12) - i11);
                i14 = i12;
                for (i15 = 2; i15 > 1; i15 -= 3) {
                    Test.instanceCount ^= i1;
                    i1 += (i15 * i15);
                    iArr3[i13 - 1] *= (int)-338277772L;
                    i1 += (((i15 * i12) + Test.instanceCount) - i15);
                    lArr[i15 + 1] = i12;
                    i1 = -154;
                }
            }
        }
        vMeth1_check_sum += by1 + Float.floatToIntBits(f1) + i1 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-125.68F;
        int i17=236, i18=-136, i19=-15420, i20=181, i21=162, i22=-11176, i23=28221, i24=8, i25=-81, i26=-65, i27=-162,
            i28=167, i29=79, iArr4[][]=new int[N][N];
        long l2=-2463784746L;

        FuzzerUtils.init(iArr4, 43095);

        vMeth();
        f += (((Test.instanceCount * -60) - (-(-Math.abs(-61430)))) * (iFld--));
        vMeth1(Test.byFld, -51.235F, iFld);
        for (i17 = 22; i17 < 378; ++i17) {
            Test.fFld += i17;
            i18 = i17;
            i18 >>>= (int)0L;
            switch ((i17 % 1) + 111) {
            case 111:
                for (i19 = 1; i19 < 71; i19++) {
                    for (i21 = 2; 1 < i21; --i21) {
                        i20 &= i22;
                        lArrFld[i21 - 1] /= (i20 | 1);
                        i23 *= (int)Test.fFld;
                        iFld -= i21;
                    }
                    i18 = Test.iFld1;
                    for (l2 = 1; l2 < 2; l2++) {
                        iArr4 = iArr4;
                        Test.instanceCount >>>= i17;
                    }
                    for (i25 = 2; i25 > i19; i25 -= 3) {
                        i18 = (int)Test.fFld;
                        i20 <<= i23;
                    }
                    i27 = 1;
                    do {
                        double d4=64.44971;
                        iFld = (int)d4;
                    } while (++i27 < 2);
                    for (i28 = 2; i28 > 1; i28 -= 2) {
                        switch ((i17 % 9) + 81) {
                        case 81:
                        case 82:
                            i23 *= (int)-1.676F;
                            Test.iFld1 += (((i28 * i21) + i23) - i22);
                            i26 >>= -7;
                            i26 += Test.sFld;
                            break;
                        case 83:
                            Test.iFld1 += (i28 * i27);
                            break;
                        case 84:
                            i26 *= Test.sFld;
                            break;
                        case 85:
                            iArr4[i19 - 1][i19 + 1] = i23;
                            break;
                        case 86:
                            Test.sArrFld = FuzzerUtils.short1array(N, (short)-8814);
                            break;
                        case 87:
                            iArr4[i28][i17 + 1] = i27;
                            break;
                        case 88:
                            i18 = Test.iFld1;
                            break;
                        case 89:
                            i26 -= i26;
                            break;
                        default:
                            i18 = (int)f;
                        }
                    }
                }
                break;
            default:
                i18 *= (int)f;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth1 mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
