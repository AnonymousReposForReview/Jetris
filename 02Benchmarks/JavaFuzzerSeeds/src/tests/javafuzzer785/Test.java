package tests.javafuzzer785;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 09:43:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2021383494L;
    public static short sFld=-2191;
    public static boolean bFld=false;
    public static int iFld=-204;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2498363114L);
        FuzzerUtils.init(Test.fArrFld, 106.647F);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d2, float f2, short s) {

        int i9=31, i10=-14;

        Test.bFld = Test.bFld;
        for (i9 = 12; i9 < 285; ++i9) {
            i10 = i9;
        }
        i10 -= i10;
        vMeth_check_sum += Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + s + i9 + i10;
    }

    public static int iMeth(int i7, long l1) {

        double d3=23.9617;
        float f3=1.611F;
        int i11=-1, i12=-140, i13=-248, i14=120, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -116);

        for (int i8 : iArr1) {
            switch ((((i8++) >>> 1) % 6) + 33) {
            case 33:
                vMeth(d3, -2.855F, Test.sFld);
                break;
            case 34:
                i8 = i7;
                switch (((i8 >>> 1) % 6) + 30) {
                case 30:
                    i7 %= (int)(i7 | 1);
                    try {
                        i7 = (i7 / i8);
                        i7 = (iArr1[(0 >>> 1) % N] / i7);
                        iArr1[(i7 >>> 1) % N] = (i8 / -99);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[(i7 >>> 1) % N] -= (long)f3;
                case 31:
                    for (i11 = 1; 4 > i11; i11++) {
                        for (i13 = i11; i13 < 2; ++i13) {
                            i7 += i13;
                            i8 = i12;
                            i12 *= i13;
                            i12 -= (int)l1;
                            iArr1 = FuzzerUtils.int1array(N, (int)-27);
                        }
                    }
                    break;
                case 32:
                    i14 = Test.iFld;
                    break;
                case 33:
                case 34:
                    i14 = -242;
                    break;
                case 35:
                    i8 -= i13;
                    break;
                default:
                    i8 = i13;
                }
                break;
            case 35:
                Test.fArrFld[(i7 >>> 1) % N] *= -9721;
                break;
            case 36:
                i8 = i13;
            case 37:
                i12 += (int)Test.instanceCount;
            case 38:
                Test.bFld = Test.bFld;
                break;
            }
        }
        long meth_res = i7 + l1 + Double.doubleToLongBits(d3) + Float.floatToIntBits(f3) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(float f1, int i2) {

        int i3=234, i4=110, i5=-59589, i6=6, iArr[]=new int[N];
        byte by=63;
        double d1=-2.70220;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 54.652F);
        FuzzerUtils.init(iArr, 10);

        for (long l : Test.lArrFld) {
            for (i3 = 1; i3 < 4; i3++) {
                l -= (-i3);
                i5 = 1;
                do {
                    f1 += (((i5 * i2) + i3) - l);
                } while (++i5 < 2);
                i2 -= (-i2);
                l >>>= (long)(4955L * ((by + f1) * (--fArr1[i3])));
                i4 += 44148;
                iArr[i3 - 1] = (int)(((5951217436604729568L + (d1 * d1)) + f1) + ((l + i5) - Test.sFld));
                if (Test.bFld || (i6 < ((28079 * (i6 + i2)) - Math.max(1737498385L, -12L)))) {
                    i4 = (--Test.sFld);
                    l = (Test.instanceCount--);
                } else if (iMeth(Test.iFld, Test.instanceCount) >= l) {
                    Test.instanceCount *= (long)((l * (f1 * i5)) + Math.min(-Math.abs(i6), Test.lArrFld[i3]));
                    f1 *= 132L;
                } else if (Test.bFld) {
                    Test.lArrFld[i3] += (long)((f1 += (i2 - by)) * ((i5 * l) * (--i6)));
                } else {
                    Test.iFld += (((i3 * f1) + i6) - f1);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + i5 + by + Double.doubleToLongBits(d1) + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-10965, i16=-87, i17=-12, i18=-1310, i20=-181;
        double d=55.45830;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.575F);

        i >>= i;
        for (float f : fArr) {
            i = (int)((Test.instanceCount - (d - 3)) * ((i1 - -59.90F) - fMeth(f, i1)));
            for (i16 = 1; i16 < 63; i16++) {
                i += (i16 ^ i17);
                bArrFld[i16 + 1] = Test.bFld;
                i18 = 1;
                do {
                    int i19=61;
                    Test.iFld -= (int)-217L;
                    iArrFld = FuzzerUtils.int1array(N, (int)-79);
                    i -= (int)Test.instanceCount;
                    i1 = (int)Test.instanceCount;
                    iArrFld = iArrFld;
                    switch (((Test.iFld >>> 1) % 7) + 72) {
                    case 72:
                        i += i18;
                        iArrFld[i18 + 1] = i1;
                        f += 9;
                        break;
                    case 73:
                        i17 = i19;
                    case 74:
                        iArrFld[i16] += i16;
                        break;
                    case 75:
                        Test.iFld += 7;
                        break;
                    case 76:
                        Test.lArrFld[(Test.iFld >>> 1) % N] = i17;
                        Test.bFld = Test.bFld;
                        Test.iFld *= 0;
                        bArrFld[i16 + 1] = true;
                        break;
                    case 77:
                        Test.iFld += i1;
                        Test.instanceCount = i19;
                        try {
                            Test.iFld = (i / i18);
                            i1 = (iArrFld[i18] % i16);
                            Test.iFld = (-121 % i);
                        } catch (ArithmeticException a_e) {}
                        i1 = i1;
                    case 78:
                        i -= (int)7259443337178134364L;
                        d -= i19;
                        break;
                    }
                    try {
                        i19 = (-16222 / i);
                        iArrFld[i18] = (i20 / -52173);
                        i = (i20 % 107718570);
                    } catch (ArithmeticException a_e) {}
                } while (++i18 < 2);
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
