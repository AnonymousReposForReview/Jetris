package tests.javafuzzer1652;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 00:47:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=110L;
    public static float fFld=-46.329F;
    public static volatile double dFld=26.25214;
    public static volatile float fFld1=2.899F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 195L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        int i2=220, i3=-150, iArr[]=new int[N];
        long l1=-3L;
        boolean b=true;
        float f2=32.328F, f3=1.1000F;
        short s=-9263;

        FuzzerUtils.init(iArr, 147);

        if (false) {
            Test.lArrFld[(i2 >>> 1) % N] += i2;
            iArr[(i2 >>> 1) % N] *= (int)140L;
        } else if (false) {
            l1 = 136;
            while (--l1 > 0) {
                b = false;
                b = true;
                i2 += (int)(((l1 * i2) + i2) - Test.fFld);
            }
            f2 = 1;
            do {
                i2 += (int)(f2 + i2);
                Test.instanceCount = i2;
                for (f3 = 5; f3 > f2; f3 -= 3) {
                    i2 >>= -13;
                    i2 = i3;
                    s >>= (short)i2;
                    try {
                        i3 = (iArr[(int)(f3)] / 1535985606);
                        iArr[(int)(f3)] = (i3 / -52580);
                        i3 = (iArr[(int)(f2 - 1)] / 39598);
                    } catch (ArithmeticException a_e) {}
                }
            } while (++f2 < 303);
        }
        long meth_res = i2 + l1 + (b ? 1 : 0) + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i3 + s +
            FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth1() {

        int i1=-23303, i4=3144, i5=-6, i6=27787, i7=-12, i8=40910, i9=40664, i10=1, i11=0, i12=12, iArr1[]=new int[N];
        byte by=122;

        FuzzerUtils.init(iArr1, 7);

        i1 <<= (-iMeth2());
        i1 = (int)Test.dFld;
        Test.fFld += i1;
        for (i4 = 2; i4 < 241; i4++) {
            i1 = i4;
            for (i6 = 1; i6 < 7; i6++) {
                for (i8 = i6; 2 > i8; i8++) {
                    i9 -= (int)Test.fFld1;
                }
                i9 += i6;
            }
            for (i10 = 7; i10 > 1; --i10) {
                switch (((i4 % 6) * 5) + 120) {
                case 135:
                    Test.instanceCount += (((i10 * i6) + i11) - i6);
                    i11 += i5;
                    break;
                case 132:
                    i7 = i12;
                    iArr1 = iArr1;
                case 148:
                    i11 = (int)1.94575;
                    break;
                case 144:
                    iArr1[i10 - 1] &= by;
                    break;
                case 145:
                    i12 -= (int)-741886785402511838L;
                    break;
                case 121:
                    Test.instanceCount = Test.instanceCount;
                    break;
                default:
                    i12 += (i10 | i6);
                }
            }
        }
        long meth_res = i1 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + by + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i, float f, float f1) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 13542);

        for (long l : Test.lArrFld) {
            Test.lArrFld[(i >>> 1) % N] = iMeth1();
        }
        iArr2[(i >>> 1) % N] <<= i;
        long meth_res = i + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=8;

        iMeth(i13, Test.fFld, Test.fFld1);
        Test.dFld -= i13;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
