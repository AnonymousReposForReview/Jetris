package tests.javafuzzer1903;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:28:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=35L;
    public static byte byFld=0;
    public int iFld=12150;
    public volatile boolean bFld=true;
    public static short sFld=-7116;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -253);
        FuzzerUtils.init(Test.byArrFld, (byte)-48);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by, long l1) {

        float f=-2.955F, f1=1.920F;
        int i4=13337, i5=-7, i6=60, i7=-64982, i8=16751, i9=-61096;
        short s1=7626;
        boolean b=false;

        f -= f;
        Test.instanceCount -= Test.instanceCount;
        i4 = i4;
        Test.iArrFld[(i4 >>> 1) % N] *= i4;
        Test.byArrFld[(i4 >>> 1) % N] -= (byte)-24297;
        for (i5 = 246; i5 > 11; --i5) {
            Test.instanceCount += s1;
            for (f1 = 1; f1 < 7; f1++) {
                i4 += (10 + (f1 * f1));
                if (b) {
                    i7 -= (int)Test.instanceCount;
                    for (i8 = 1; 2 > i8; ++i8) {
                        i7 += (((i8 * i8) + i9) - i9);
                        i4 = 8;
                        by ^= (byte)i9;
                    }
                } else {
                    i6 += -3;
                }
            }
        }
        long meth_res = by + l1 + Float.floatToIntBits(f) + i4 + i5 + i6 + s1 + Float.floatToIntBits(f1) + i7 + i8 + i9
            + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i2, short s) {

        int i10=49909, i11=-9, i12=-174, i13=10, i14=48957, i15=2;
        float f2=-2.425F;
        boolean b1=false;
        double d=-62.57285;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2458987141L);

        for (int i3 : Test.iArrFld) {
            i2 -= iMeth(Test.byFld, Test.instanceCount);
            i2 <<= i2;
        }
        for (i10 = 2; i10 < 217; i10++) {
            for (i12 = 7; i12 > 1; i12--) {
                i11 <<= 44078;
                for (i14 = 1; 2 > i14; ++i14) {
                    i2 -= (int)f2;
                    if (b1) continue;
                    s *= (short)i15;
                    lArr = lArr;
                    s = (short)f2;
                    i11 *= -134;
                }
                d += Test.instanceCount;
                f2 += (i12 * i13);
            }
        }
        long meth_res = i2 + s + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth(int i, long l, int i1) {

        short s2=-10084;

        fMeth(i1, s2);
        vSmallMeth_check_sum += i + l + i1 + s2;
    }

    public void mainTest(String[] strArr1) {

        int i16=-152, i17=-14, i18=-8, i19=139, i20=5, i21=189;
        double d1=-33.126319;
        float f3=0.231F, f4=0.371F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 10L);

        for (int smallinvoc=0; smallinvoc<206; smallinvoc++) vSmallMeth(iFld, Test.instanceCount, iFld);
        iFld += iFld;
        if (bFld) {
            iFld -= (int)Test.instanceCount;
            i16 = 1;
            do {
                if (bFld) {
                    iFld = (int)-128L;
                    iFld -= (int)d1;
                } else {
                    Test.instanceCount -= -95;
                }
                for (i17 = 3; i17 < 191; ++i17) {
                    for (i19 = 2; 1 < i19; --i19) {
                        Test.iArrFld[i16 + 1] += i17;
                        iFld = (int)Test.instanceCount;
                        i18 *= (int)f3;
                        f3 += (((i19 * Test.instanceCount) + Test.instanceCount) - i17);
                        i20 *= -5792;
                        f3 += i19;
                        i18 += i20;
                        f3 *= f3;
                        iFld += (i19 + i17);
                        f3 = Test.instanceCount;
                    }
                    if (true) continue;
                    for (f4 = 1; f4 < 2; f4 += 3) {
                        switch ((int)(((f4 % 9) * 5) + 2)) {
                        case 13:
                        case 29:
                            d1 = i20;
                            Test.instanceCount = i17;
                            Test.instanceCount += (long)(((f4 * iFld) + i18) - Test.instanceCount);
                            lArr1[(int)(f4 + 1)][i16] += (long)f4;
                            break;
                        case 47:
                            i21 += i20;
                            i21 += (1461 + (f4 * f4));
                            break;
                        case 43:
                            i20 -= (int)d1;
                        case 21:
                            Test.instanceCount = Test.sFld;
                            break;
                        case 9:
                            i18 += (int)1.103689;
                            break;
                        case 34:
                            Test.sFld = (short)Test.instanceCount;
                            break;
                        case 45:
                            f3 += f3;
                            break;
                        case 46:
                            lArr1[i16][(int)(f4)] -= -10;
                            break;
                        default:
                            iFld = i21;
                        }
                    }
                }
            } while (++i16 < 131);
        } else if (bFld) {
            i20 -= (int)81.534F;
        } else {
            i21 *= i16;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
