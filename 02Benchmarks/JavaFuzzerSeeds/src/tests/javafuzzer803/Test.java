package tests.javafuzzer803;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:17:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static byte byFld=65;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i3=2181, i4=-14, i5=10, i6=-1, i7=-5945, i8=-12, iArr[]=new int[N];
        float f1=1.679F;
        boolean b=true;
        double d=-1.117352;
        byte by=-8;
        short s=-4459;

        FuzzerUtils.init(iArr, 202);

        for (i3 = 272; 2 < i3; --i3) {
            for (i5 = 1; i5 < 6; i5++) {
                if (b) {
                    iArr[i5] -= (int)f1;
                    i6 = i4;
                    switch (((i3 % 8) * 5) + 119) {
                    case 133:
                    case 158:
                        i4 = (int)Test.instanceCount;
                        b = false;
                        f1 %= ((long)(f1) | 1);
                        break;
                    case 154:
                        f1 += (4198151631155897140L + (i5 * i5));
                        i6 = i3;
                        for (i7 = 1; i7 < 2; ++i7) {
                            d -= f1;
                            d *= by;
                            d -= i5;
                        }
                        break;
                    case 138:
                        Test.instanceCount = i4;
                        break;
                    case 153:
                        i4 += 0;
                        break;
                    case 128:
                        i4 = i5;
                        break;
                    case 151:
                        i8 += -53676;
                        break;
                    case 139:
                        Test.instanceCount += i5;
                        break;
                    }
                } else {
                    s += (short)(i5 + i5);
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i7 + i8 +
            Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i1, float f, int i2) {

        int i9=2, i10=34212, i11=-6, i12=-63, iArr1[]=new int[N];
        double d1=-7.91338;
        short s1=18304;
        float f2=0.387F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 622754064L);
        FuzzerUtils.init(iArr1, 14);

        vMeth();
        for (i9 = 9; i9 < 264; i9++) {
            i1 += (-8 + (i9 * i9));
            d1 = Test.instanceCount;
            for (i11 = 1; 6 > i11; ++i11) {
                Test.instanceCount = Test.instanceCount;
                i2 += (int)Test.instanceCount;
            }
            Test.instanceCount += (i9 | s1);
            Test.instanceCount += (i9 - i1);
        }
        Test.instanceCount *= Test.instanceCount;
        f2 = 1;
        do {
            lArr[(int)(f2 - 1)] = i2;
            if (b1) {
                i1 >>>= i10;
                Test.instanceCount = i10;
            } else {
                iArr1[(int)(f2)] = i12;
            }
        } while (++f2 < 298);
        long meth_res = i1 + Float.floatToIntBits(f) + i2 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + s1 +
            Float.floatToIntBits(f2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        float f3=2.386F;

        i -= iMeth(i, f3, 69);
        i <<= i;
        vSmallMeth_check_sum += i + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        int i13=-19550, i14=4, i15=-3399, i16=6, i17=-45484, i18=3, iArr2[]=new int[N];
        float f4=-57.560F, fArr[]=new float[N];
        short s2=20774;
        boolean b2=false;
        double d2=64.89610;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 96);
        FuzzerUtils.init(lArr1, 3782664162591118087L);
        FuzzerUtils.init(fArr, 0.750F);

        for (int smallinvoc=0; smallinvoc<719; smallinvoc++) vSmallMeth(i13);
        i13 = (int)Test.instanceCount;
        Test.instanceCount = i13;
        try {
            for (i14 = 2; i14 < 157; i14++) {
                i15 >>= i13;
                for (i16 = i14; i16 < 162; ++i16) {
                    Test.instanceCount += (-108 + (i16 * i16));
                    Test.instanceCount = 4;
                    i18 = 1;
                    do {
                        iArr2[i16] = (int)Test.instanceCount;
                        Test.byFld ^= (byte)i18;
                        lArr1[i16] += Test.instanceCount;
                        f4 += (i18 + i16);
                        if (b2) {
                            f4 *= s2;
                            fArr = fArr;
                            iArr2[i14 + 1] -= (int)Test.instanceCount;
                        }
                        i17 -= -118;
                        i15 -= i14;
                    } while ((i18 -= 2) > 0);
                }
                iArr2[i14 - 1] ^= (int)Test.instanceCount;
                b2 = b2;
            }
        }
        catch (NegativeArraySizeException exc1) {
            i15 -= i14;
            iArr2[(i18 >>> 1) % N] <<= i15;
            i13 >>= (int)Test.instanceCount;
        }
        finally {
            i17 -= -8;
            i17 *= 94;
            d2 = -60012;
        }
        iArr2 = iArr2;
        f4 = Test.instanceCount;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
