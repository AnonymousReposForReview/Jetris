package tests.javafuzzer3485;

import utils.FuzzerUtils;

// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:21:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4044582983577098739L;
    public double dFld=-57.104487;
    public static float fFld=-1.277F;
    public volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -69.701F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i6=-136, i7=10945, i8=-9, i9=-106, i10=3, i11=-12, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 37060);

        for (i6 = 12; i6 < 232; i6++) {
            for (i8 = 7; 1 < i8; --i8) {
                Test.fFld = -41946;
                try {
                    i9 = (i7 / i8);
                    i7 = (i7 / i7);
                    i9 = (i7 % 2144056268);
                } catch (ArithmeticException a_e) {}
                switch ((i6 % 3) + 48) {
                case 48:
                    i9 = i7;
                case 49:
                    switch ((i6 % 4) + 70) {
                    case 70:
                        i10 = 1;
                        do {
                            i7 += (((i10 * i9) + i9) - i9);
                            Test.instanceCount = i7;
                            switch ((((i11 >>> 1) % 1) * 5) + 2) {
                            case 5:
                                i7 -= i10;
                                iArr[i6 - 1] = i8;
                                i7 >>= (int)10920L;
                                Test.instanceCount += i7;
                                break;
                            }
                        } while (++i10 < 2);
                        break;
                    case 71:
                    case 72:
                        Test.fFld += (((i8 * i10) + i8) - i11);
                        break;
                    case 73:
                        i7 = i9;
                        break;
                    }
                    break;
                case 50:
                    i9 -= 12;
                    break;
                default:
                    i7 += (i8 * i8);
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i12=-10;

        Test.instanceCount = (lMeth() - i12);
        long meth_res = i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s, int i2) {

        int i3=46136, i4=15, i5=-6, i13=254, i14=-31342, i15=121, i16=18006, i17=185;
        float f=-24.722F;
        byte by=-73;
        long l=-15L;

        i3 = 1;
        do {
            for (i4 = 1; i4 < 7; i4++) {
                f = (-(i2++));
            }
            i5 *= (i2--);
        } while (++i3 < 217);
        by >>= (byte)((iMeth() - Test.instanceCount) - Test.fFld);
        for (i13 = 9; i13 < 215; ++i13) {
            for (l = i13; 8 > l; l++) {
                for (i16 = 1; i16 > 1; i16 -= 2) {
                    switch (((i2 >>> 1) % 2) + 26) {
                    case 26:
                        i2 ^= -7;
                    case 27:
                        i2 ^= i14;
                        i2 -= i14;
                        Test.instanceCount -= (long)-45.762F;
                        break;
                    }
                    i15 |= i4;
                    i17 -= (int)1.52F;
                }
            }
        }
        vMeth_check_sum += s + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + by + i13 + i14 + l + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=163, i18=-16535, i19=217, i20=-16163, i21=37890, i22=-27143, i23=84, i24=208, i25=13, i26=-21492,
            i27=11;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.17940);

        for (i = 9; i < 195; ++i) {
            dFld -= iArrFld[i + 1];
            iArrFld[i - 1] /= (int)((--i1) | 1);
            dFld -= 15805;
            vMeth((short)(-12671), i1);
            Test.instanceCount *= i;
        }
        Test.fFld *= i1;
        Test.instanceCount %= ((long)(Test.fFld) | 1);
        for (i18 = 1; 374 > i18; i18++) {
            i19 ^= (int)Test.instanceCount;
            i1 = (int)2.77115;
            for (i20 = 4; i20 < 68; i20 += 2) {
                i19 *= (int)-2.43752;
            }
            i19 = (int)Test.instanceCount;
            for (i22 = 1; i22 < 68; i22++) {
                i23 += i22;
                i23 = i19;
                dArr[i22 + 1] += 8L;
                i23 += (i22 * i22);
                if (b) {
                    for (i24 = i22; i24 < 2; i24 += 2) {
                        if (b) break;
                        dArr[i18] += i25;
                        i19 += (((i24 * i20) + i23) - i24);
                        try {
                            i19 = (iArrFld[i18 - 1] / i25);
                            i23 = (i25 % 18535);
                            i23 = (44747 / i23);
                        } catch (ArithmeticException a_e) {}
                        i19 = i19;
                    }
                } else {
                    for (i26 = 1; 2 > i26; i26++) {
                        i23 >>= i26;
                        Test.fFld *= Test.instanceCount;
                        Test.fArrFld[i26 - 1] = Test.fFld;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
