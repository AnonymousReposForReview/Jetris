package tests.javafuzzer1720;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:30:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-38153L;
    public static int iFld=193;
    public static short sFld=23481;
    public boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.731F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, double d1, long l) {

        float f1=20.248F, f2=0.320F;
        int i2=-190, i3=61915, i4=66, i5=-30308, i6=-224, i7=0, i8=11, i9=35807, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -12);

        for (f1 = 23; f1 < 391; f1++) {
            i1 *= (int)l;
        }
        i1 *= Test.sFld;
        for (f2 = 11; f2 < 361; f2++) {
            for (i4 = 5; i4 > f2; i4--) {
                iArr1[(int)(f2 + 1)] = -5;
            }
            Test.iFld += (int)f2;
            Test.instanceCount = 63;
            for (i6 = 1; i6 < 5; i6++) {
                for (i8 = 2; i8 > 1; i8 -= 3) {
                    i1 >>= i3;
                    iArr1[i8 - 1] *= i7;
                    i5 -= i8;
                    iArr1[(int)(f2 + 1)] = i1;
                    i7 *= (int)l;
                }
            }
        }
        vMeth2_check_sum += i1 + Double.doubleToLongBits(d1) + l + Float.floatToIntBits(f1) + i2 +
            Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(boolean b, boolean b1, byte by) {

        double d2=110.49753;
        int i10=-17583, i11=-22839, i12=142;

        vMeth2(Test.iFld, d2, Test.instanceCount);
        i10 = 1;
        do {
            i11 = 1;
            while (++i11 < 5) {
                d2 *= i10;
                Test.iFld -= Test.sFld;
                if (b) break;
                i12 = 1;
                do {
                    Test.instanceCount |= Test.instanceCount;
                    switch (((i11 >>> 1) % 1) + 48) {
                    case 48:
                        Test.instanceCount += (((i12 * i10) + i11) - i12);
                        break;
                    default:
                        if (true) break;
                        if (b1) continue;
                        Test.iFld += (i12 * Test.iFld);
                    }
                    d2 *= i11;
                    Test.iFld += (i12 * i12);
                } while (++i12 < 1);
            }
        } while (++i10 < 317);
        vMeth1_check_sum += (b ? 1 : 0) + (b1 ? 1 : 0) + by + Double.doubleToLongBits(d2) + i10 + i11 + i12;
    }

    public static void vMeth(int i) {

        boolean b2=false;
        byte by1=-121;
        int i13=-40, i14=-7, i15=-13, i16=18881;
        double d3=-126.120833;

        Test.iFld -= (int)(i = (int)(i + (Test.instanceCount + i)));
        vMeth1(b2, false, by1);
        i <<= 26261;
        i = (int)Test.instanceCount;
        i -= (int)Test.instanceCount;
        i -= Test.iFld;
        for (i13 = 361; i13 > 10; --i13) {
            i += i13;
            i14 *= (int)d3;
            Test.fArrFld[i13 + 1] += i;
            if (true) {
                i += (((i13 * i14) + i) - Test.sFld);
                for (i15 = 5; i15 > i13; i15 -= 3) {
                    i = -13;
                    i14 += i;
                }
            } else {
                Test.instanceCount >>= i14;
            }
        }
        vMeth_check_sum += i + (b2 ? 1 : 0) + by1 + i13 + i14 + Double.doubleToLongBits(d3) + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        float f=24.498F;
        int i17=-167, i18=-10, i19=4, i20=-6247, i21=226, i22=3, i23=59, i24=-3012, iArr[]=new int[N];
        short s=-23541;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 67);
        FuzzerUtils.init(dArr, 3.91048);

        f += (iArr[(Test.iFld >>> 1) % N]--);
        for (double d : dArr) {
            vMeth(Test.iFld);
            for (i17 = 63; i17 > 1; i17--) {
                Test.iFld -= (int)Test.instanceCount;
            }
            lArrFld[(Test.iFld >>> 1) % N] -= -8735831203970227660L;
            for (i19 = 1; i19 < 63; i19++) {
                Test.sFld = (short)f;
                i18 += (int)d;
                Test.iFld += i20;
                i18 += i19;
                lArrFld[i19 + 1] = Test.instanceCount;
            }
            Test.iFld -= (int)Test.instanceCount;
        }
        for (i21 = 11; i21 < 279; ++i21) {
            i18 >>>= i18;
            Test.iFld -= (int)-1889338185L;
            i20 = (int)Test.instanceCount;
            if (bFld) continue;
            i23 = 1;
            do {
                lArrFld[i21 + 1] = i23;
                switch (((i21 % 8) * 5) + 1) {
                case 40:
                    f = f;
                    Test.instanceCount -= Test.instanceCount;
                    i24 = 1;
                    while (++i24 < 1) {
                        Test.iFld = i22;
                        if (bFld) {
                            s = (short)12;
                            i22 += (i24 ^ i18);
                            i20 -= i22;
                            f = i19;
                        }
                    }
                case 36:
                    Test.instanceCount = i24;
                    break;
                case 34:
                    i20 -= (int)Test.instanceCount;
                    break;
                case 2:
                    Test.instanceCount += i17;
                case 10:
                    Test.iFld -= i23;
                    break;
                case 3:
                    bFld = bFld;
                    break;
                case 20:
                    i18 -= (int)f;
                    break;
                case 19:
                    iArr[i23 + 1] = i24;
                    break;
                default:
                    lArrFld[i21] = Test.iFld;
                }
            } while (++i23 < 94);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
