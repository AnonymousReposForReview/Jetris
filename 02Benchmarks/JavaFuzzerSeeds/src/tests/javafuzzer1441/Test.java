package tests.javafuzzer1441;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:44:06 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=152L;
    public static byte byFld=-54;
    public static float fFld=70.927F;
    public static short sFld=-5196;
    public static boolean bFld=false;
    public static double dFld=0.42519;
    public boolean bArrFld[]=new boolean[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.25569);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6) {

        int i7=-252, i8=53390, i9=199, i10=7, i11=-234, i12=-6, i13=9, i14=4, i15=152, i16=-1;
        double d1=-107.15246;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1606469621707118320L);

        for (i7 = 1; 308 > i7; ++i7) {
            for (i9 = 1; i9 < 5; ++i9) {
                i6 += (int)(2.497F + (i9 * i9));
                i8 = (int)-108.38213;
                Test.byFld += (byte)(((i9 * Test.fFld) + i8) - i6);
                i6 = (int)Test.instanceCount;
                try {
                    i8 = (-27 % i9);
                    i10 = (-57927 % i10);
                    i6 = (-854822458 / i7);
                } catch (ArithmeticException a_e) {}
            }
            i8 -= i6;
        }
        lArr1[(i6 >>> 1) % N] -= (long)d1;
        for (i11 = 9; 201 > i11; ++i11) {
            i10 ^= i12;
            for (i13 = 1; 8 > i13; i13++) {
                for (i15 = 2; i15 > 1; i15--) {
                    lArr1[i11 - 1] += Test.sFld;
                    b = b;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + i15 + i16 + (b
            ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, byte by, int i2) {

        int i3=2, i4=34249, i5=-60813, i17=133, i18=-2, iArr[]=new int[N];
        double d=-109.39073, dArr[]=new double[N];
        float f=2.757F, fArr[]=new float[N];
        short s=-22424;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 121.89188);
        FuzzerUtils.init(lArr, -503781291566910969L);
        FuzzerUtils.init(fArr, 55.129F);
        FuzzerUtils.init(iArr, 14);

        i3 = 1;
        do {
            i1 = (int)((Math.min(i2, i1) + (i2 - -30L)) + i2);
        } while (++i3 < 245);
        for (i4 = 3; i4 < 225; i4 += 3) {
            d -= (dArr[i4 - 1] + Test.instanceCount);
            f += (Test.instanceCount--);
            lArr[i4 + 1] -= (long)(f--);
            f = Test.instanceCount;
            switch (((i4 % 4) * 5) + 48) {
            case 58:
                i2 -= Math.max(Test.byFld * i3, Math.min(s - i3, (int)(Test.instanceCount ^ Test.instanceCount)));
                break;
            case 60:
                fArr[i4] -= Math.max(Test.instanceCount ^= (Test.instanceCount * Test.instanceCount), i4 - lMeth(-5));
                for (i17 = 1; 21 > i17; ++i17) {
                    iArr[i17 - 1] = i5;
                    if (Test.bFld) {
                        d += Test.instanceCount;
                        i5 = (int)75L;
                    }
                }
                break;
            case 62:
            case 51:
                i5 += i2;
                break;
            default:
                lArr[i4 + 1] >>= Test.instanceCount;
            }
        }
        long meth_res = i1 + by + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + s + i17 +
            i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i=-5;

        i &= Math.min(iMeth(-12, (byte)(-29), 11), i);
        vMeth_check_sum += l + l1 + i;
    }

    public void mainTest(String[] strArr1) {

        int i19=206, i20=-56077, i21=40368, i22=229, i23=154, i24=-61, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 92);

        Test.instanceCount += (-(Test.instanceCount++));
        vMeth(Test.instanceCount, Test.instanceCount);
        i19 = (int)-27.481F;
        i19 = i19;
        iArr1 = iArr1;
        Test.dFld *= -22336;
        Test.sFld = (short)i19;
        i19 = (int)Test.instanceCount;
        for (i20 = 236; i20 > 4; i20 -= 3) {
            Test.instanceCount += i20;
            if (Test.bFld) {
                if (true) break;
            } else {
                i21 += (int)Test.dFld;
                bArrFld = bArrFld;
                Test.dFld = -40;
                i21 >>= i21;
            }
            Test.instanceCount -= 199L;
            i19 *= 1;
            Test.instanceCount += (((i20 * i19) + i20) - i20);
            Test.dFld -= 27822;
            i19 += (-158 + (i20 * i20));
            Test.instanceCount >>= Test.byFld;
            i22 = 1;
            do {
                Test.dArrFld = Test.dArrFld;
            } while (++i22 < 325);
            iArr1[i20 - 1] -= (int)Test.dFld;
        }
        for (i23 = 18; i23 < 305; ++i23) {
            i24 = i21;
            i21 = i22;
            i19 += i19;
            Test.instanceCount = 33L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
