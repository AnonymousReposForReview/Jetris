package tests.javafuzzer3215;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:06:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static int iFld=2;
    public byte byFld=0;
    public static short sFld=-7027;
    public int iFld1=14;
    public boolean bFld=false;
    public float fFld=-2.224F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -45149);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(int i5, int i6, long l1) {

        int i7=37, i8=-26436, i9=24840, i10=43, i11=17;
        double d=0.89768;
        boolean b=true;
        float f2=67.992F;

        i7 = 1;
        while (++i7 < 365) {
            Test.iFld = (int)Test.instanceCount;
            d *= 83L;
            for (i8 = 1; 5 > i8; i8++) {
                l1 -= i5;
            }
            for (i10 = 5; i10 > 1; --i10) {
                Test.instanceCount = i5;
                b = b;
                i9 >>= i5;
                switch (((i7 % 2) * 5) + 116) {
                case 122:
                    Test.instanceCount = l1;
                    Test.sFld &= (short)Test.instanceCount;
                    Test.sFld = (short)4;
                    byFld += (byte)(((i10 * i8) + f2) - Test.instanceCount);
                    break;
                case 118:
                    Test.iFld = Test.iFld;
                    break;
                default:
                    i11 = i5;
                }
            }
        }
        long meth_res = i5 + i6 + l1 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
            Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1(long l, float f, float f1) {

        int i3=6, i4=13, i12=-3, i13=5, i14=17423, i15=194;
        double d1=-1.77170;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-30062);
        FuzzerUtils.init(lArr, -615162158L);

        sArr[(Test.iFld >>> 1) % N] = (short)(((Test.iFld + -104) * (--Test.iFld)) + ((Test.iFld++) *
            (-Math.abs(-10))));
        Test.iArrFld[(Test.iFld >>> 1) % N] *= (int)(((Test.iFld - byFld) - (lArr[(Test.iFld >>> 1) % N]--)) *
            ((++Test.iFld) + (i3 * i3)));
        i4 = 1;
        do {
            lMeth(Test.iFld, i4, l);
            Test.iFld -= i4;
            i3 += (int)d1;
        } while (++i4 < 272);
        for (i12 = 2; i12 < 127; ++i12) {
            try {
                i13 = (1427839573 % i12);
                i3 = (i4 / -21);
                Test.iArrFld[i12 - 1] = (166 % Test.iArrFld[i12 - 1]);
            } catch (ArithmeticException a_e) {}
            for (i14 = 1; i14 < 13; i14++) {
                switch ((i12 % 5) + 25) {
                case 25:
                    i15 += (-218 + (i14 * i14));
                    if (i4 != 0) {
                        vMeth1_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i4 +
                            Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                case 26:
                    i13 |= i13;
                    Test.iArrFld[i12] = i3;
                    break;
                case 27:
                    iFld1 = i4;
                case 28:
                    lArr[i12 + 1] >>= i12;
                case 29:
                    i15 += (i14 * i14);
                    break;
                default:
                    Test.iFld += (((i14 * l) + byFld) - i13);
                }
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i4 +
            Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {

        float f3=-34.506F;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 68);

        Test.iFld >>= (Test.iFld + ((Test.iFld--) + iArr1[(Test.iFld >>> 1) % N]));
        vMeth1(Test.instanceCount, f3, f3);
        vMeth_check_sum += Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-12392, i1=-8129, i16=-21152, i17=-252, i18=0, i19=-159, i20=-14, i21=1, iArr[]=new int[N];
        short s=14687;
        double dArr[]=new double[N];
        float fArr[][]=new float[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -2359);
        FuzzerUtils.init(dArr, 0.42958);
        FuzzerUtils.init(fArr, -124.753F);
        FuzzerUtils.init(lArr1, -1389283183L);

        for (i = 16; i < 265; i++) {
            iArr[i - 1] = Math.min((i >> i) - i1, (int)((i - Test.instanceCount) + (-8618 ^ Math.min(189, i))));
        }
        for (int i2 : iArr) {
            dArr[(i1 >>> 1) % N] *= (((++s) + (1.744F - Math.abs(Test.instanceCount))) - i);
            if (((++fArr[(i2 >>> 1) % N][(i1 >>> 1) % N]) - (i2++)) != (i1 + (-i1))) continue;
            i1 |= i;
            vMeth();
            i16 = 1;
            do {
                if (bFld) break;
                s += (short)Test.instanceCount;
                i2 = iFld1;
                Test.iArrFld[i16] = i;
                Test.instanceCount -= (long)fFld;
                Test.iArrFld[i16 + 1] += (int)-68L;
                Test.iFld += i16;
                i1 += (((i16 * Test.instanceCount) + iFld1) - Test.instanceCount);
                s += (short)(i16 * i16);
                fFld -= i16;
            } while (++i16 < 63);
            iArr[(i2 >>> 1) % N] = Test.iFld;
            for (i17 = 2; i17 < 63; ++i17) {
                fFld = s;
                Test.instanceCount += (i17 * Test.instanceCount);
            }
            i19 = 1;
            while (++i19 < 63) {
                fFld += (i19 * i19);
                for (i20 = 1; 1 > i20; i20++) {
                    lArr1[i19] *= Test.instanceCount;
                    fFld += i18;
                }
                Test.instanceCount += i19;
                i1 = i18;
                if (bFld) break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
