package tests.javafuzzer2531;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:19:54 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=48L;
    public static boolean bFld=false;
    public static float fFld=2.68F;
    public static double dFld=-53.107472;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -49817);
        FuzzerUtils.init(Test.lArrFld, 1301830088L);
        FuzzerUtils.init(Test.byArrFld, (byte)72);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(byte by) {

        int i6=-1;

        Test.bFld = (((9 - i6) - (-(Test.instanceCount % (Test.instanceCount | 1)))) != ((Test.iArrFld[(i6 >>> 1) %
            N]--) * (++Test.lArrFld[(i6 >>> 1) % N])));
        i6 -= i6;
        long meth_res = by + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(float f2) {

        int i10=247, i12=-3, i13=-3, i14=17, i15=110, i16=52;
        float f3=-1.240F;
        byte by2=-93, byArr[]=new byte[N];
        double dArr[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, -1.85699);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)91);

        f2 = i10;
        for (int i11 : Test.iArrFld) {
            for (i12 = 1; 4 > i12; i12 += 2) {
                dArr[i12 + 1] = i13;
                i11 += i12;
                i10 <<= i13;
                for (i14 = i12; 4 > i14; i14++) {
                    Test.instanceCount *= i11;
                    bArr[i12 - 1] = Test.bFld;
                    i13 += i10;
                }
                Test.bFld = Test.bFld;
                for (f3 = 1; f3 < 4; ++f3) {
                    by2 >>= (byte)9;
                    Test.byArrFld[i12] = byArr;
                    Test.instanceCount = 1615582321L;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + i10 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f3) + i16 +
            by2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1() {

        long l=-120L;
        int i9=-79, i17=-45922, i18=-38841, i19=14, i20=1, i21=-1, i22=-84;
        float f4=-76.548F;

        for (l = 8; l < 311; ++l) {
            vMeth2(f4);
            for (i17 = 1; i17 < 5; ++i17) {
                i18 += i17;
                i19 = 1;
                do {
                    Test.lArrFld = Test.lArrFld;
                    i18 = i19;
                    f4 += (i19 * i19);
                } while (++i19 < 2);
                for (i20 = 1; i20 < 2; i20++) {
                    i18 <<= i22;
                    try {
                        i22 = (41100 % i9);
                        i22 = (i18 / Test.iArrFld[i20 + 1]);
                        i18 = (Test.iArrFld[i17 - 1] % 1064);
                    } catch (ArithmeticException a_e) {}
                    if (i9 != 0) {
                        vMeth1_check_sum += l + i9 + Float.floatToIntBits(f4) + i17 + i18 + i19 + i20 + i21 + i22;
                        return;
                    }
                    i9 = 7;
                    i9 = 194;
                    i21 >>= (int)176L;
                }
            }
        }
        vMeth1_check_sum += l + i9 + Float.floatToIntBits(f4) + i17 + i18 + i19 + i20 + i21 + i22;
    }

    public static void vMeth(int i2) {

        int i3=12, i4=8, i5=32585, i7=7, i8=-170;
        byte by1=37;
        float f=0.937F, f1=0.622F, fArr[]=new float[N];
        short s=-10515;

        FuzzerUtils.init(fArr, -2.702F);

        for (i3 = 13; i3 < 302; i3 += 3) {
            i5 = 1;
            while (++i5 < 16) {
                Test.iArrFld[i5 - 1] -= (int)((-Test.instanceCount) * iMeth(by1));
                try {
                    i2 = (i4 % i3);
                    Test.iArrFld[i3 - 1] = (i3 % 38081);
                    i4 = (-145 % i4);
                } catch (ArithmeticException a_e) {}
            }
            for (f = 1; f < 16; f += 2) {
                f1 += (f * i7);
                i8 = 3;
                do {
                    Test.instanceCount += (i8 * i8);
                    vMeth1();
                    Test.iArrFld[i3] *= (int)Test.instanceCount;
                    i4 += (((i8 * s) + Test.instanceCount) - i3);
                    if (Test.bFld) {
                        i2 = 23628;
                        fArr[i8 + 1] += 77.571F;
                        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f) + i7 +
                            Float.floatToIntBits(f1) + i8 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    } else if (Test.bFld) {
                        f1 -= Test.fFld;
                    }
                } while (--i8 > 0);
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f) + i7 + Float.floatToIntBits(f1) + i8 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=46, i1=119, i23=-4, i24=14, i25=-100, i26=13160, i27=-13590, i28=137, i29=15730, i30=10;
        short s1=22272;
        float f5=43.1020F;
        byte by3=6;

        for (i = 6; i < 121; i++) {
            vMeth(i1);
            Test.instanceCount = i1;
            i1 += (((i * s1) + Test.fFld) - i23);
            Test.iArrFld = Test.iArrFld;
            i23 >>= (int)Test.instanceCount;
            Test.dFld += s1;
            for (f5 = 11; f5 < 218; ++f5) {
                Test.instanceCount = (long)Test.fFld;
                i24 += (int)f5;
                switch (((i % 2) * 5) + 45) {
                case 55:
                    Test.lArrFld[(int)(f5)] -= i1;
                    break;
                case 54:
                    i24 -= (int)Test.dFld;
                    Test.instanceCount = by3;
                    break;
                }
                Test.fFld = i23;
            }
        }
        Test.iArrFld[(-11 >>> 1) % N] = (int)Test.instanceCount;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)244);
        Test.iArrFld[(i24 >>> 1) % N] >>= i;
        for (i25 = 5; i25 < 147; i25++) {
            i26 = 8;
            for (i27 = 6; i27 < 177; ++i27) {
                for (i29 = 2; i27 < i29; i29 -= 3) {
                    i24 += (int)-2.117910;
                    i24 >>= (int)Test.instanceCount;
                    Test.dFld *= 1.665F;
                    Test.instanceCount >>= i1;
                    try {
                        Test.iArrFld[i25] = (i28 / 170);
                        i30 = (i30 % 34288);
                        i23 = (i24 / 2);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[i29] *= i27;
                    Test.fFld = 36227;
                    if (false) continue;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
