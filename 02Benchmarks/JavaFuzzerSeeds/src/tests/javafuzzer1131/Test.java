package tests.javafuzzer1131;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:11:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4916L;
    public static int iFld=-14;
    public static volatile float fFld=-89.434F;
    public volatile boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, int i10) {

        int i11=-11, i12=-108, i13=-65451, i14=-3, i15=4, i16=141, i17=-60900, iArr1[]=new int[N];
        byte by=75;
        boolean b=true, bArr[]=new boolean[N];
        float f1=-17.92F;
        double d2=-46.62140;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -21413);

        for (i11 = 4; i11 < 147; i11++) {
            by = (byte)i12;
            Test.fFld *= -7212397708287557327L;
        }
        b = true;
        bArr[(i12 >>> 1) % N] = b;
        Test.instanceCount = -10750L;
        for (i13 = 173; i13 > 9; --i13) {
            for (i15 = 1; 10 > i15; ++i15) {
                for (f1 = 1; f1 < 2; f1++) {
                    d2 += Test.instanceCount;
                    iArr1 = iArr1;
                    Test.instanceCount *= i10;
                    if (b) break;
                }
                i10 = i13;
            }
        }
        iArr1[(-12 >>> 1) % N] += (int)62061L;
        long meth_res = i9 + i10 + i11 + i12 + by + (b ? 1 : 0) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) +
            i17 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, long l1, long l2) {

        int i7=-10, i8=7, i18=-213, i19=89, iArr[]=new int[N];
        boolean b1=false;
        long l3=-180L, lArr[]=new long[N];
        short s=-4125;

        FuzzerUtils.init(iArr, -39814);
        FuzzerUtils.init(lArr, -9L);

        Test.iFld = iArr[(Test.iFld >>> 1) % N];
        for (i7 = 7; i7 < 161; i7++) {
            iMeth(Test.iFld, Test.iFld);
            iArr[i7] = i8;
            if (b1) continue;
        }
        if (false) {
            l3 = 1;
            do {
                lArr[(int)(l3 - 1)] = s;
            } while (++l3 < 362);
            for (i18 = 11; 178 > i18; i18++) {
                lArr[i18 - 1] = i7;
                i19 *= (int)f;
                Test.instanceCount += (i18 - i7);
                Test.iFld += i8;
                iArr[i18] |= (int)l1;
                i19 += (i18 - Test.iFld);
            }
        } else if (b1) {
            i19 = i7;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + l2 + i7 + i8 + (b1 ? 1 : 0) + l3 + s + i18 + i19 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l) {

        int i1=-67, i2=-188, i3=3, i4=-233, i5=6, i6=-6;
        double d1=-1.103203, d3=0.20437, dArr[][]=new double[N][N];
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 99.39185);
        FuzzerUtils.init(fArr, -2.87F);

        for (i1 = 12; 337 > i1; i1++) {
            dArr[i1 + 1] = (dArr[i1 + 1] = (dArr[i1 + 1] = (dArr[i1] = dArr[i1 + 1])));
        }
        for (i3 = 4; i3 < 128; ++i3) {
            d1 = 1;
            do {
                for (i5 = 1; i5 < 1; i5++) {
                    vMeth1(Test.fFld, l, Test.instanceCount);
                    i6 = (int)Test.fFld;
                    fArr[i5 - 1] += Test.fFld;
                    d3 = i4;
                    if (b2) {
                        i6 += (i5 | i3);
                    } else {
                        b2 = b2;
                        i6 += (((i5 * i2) + i1) - i5);
                        l <<= i1;
                        i4 *= 8496;
                    }
                }
            } while (++d1 < 13);
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + Double.doubleToLongBits(d3)
            + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        double d=-9.126015, d4=0.53693;
        int i=-166, i20=-46550, i21=-157, i22=58424, i23=55855, i24=202, i25=7, i26=9, iArr2[]=new int[N];
        float f2=89.13F, fArr1[][]=new float[N][N];
        short s1=847;

        FuzzerUtils.init(iArr2, 11731);
        FuzzerUtils.init(fArr1, 2.394F);

        for (d = 15; d < 244; ++d) {
            vMeth(Test.instanceCount);
            if (bFld) break;
            i20 = 1;
            do {
                i21 += i20;
                i21 |= i21;
                switch (((i20 % 8) * 5) + 43) {
                case 77:
                    try {
                        iArr2[i20 - 1] = (iArr2[(int)(d)] / -42);
                        iArr2[i20 + 1] = (i20 % -1766718932);
                        i = (38123 % i);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 57:
                    for (i22 = 1; i22 < 1; ++i22) {
                        try {
                            i = (iArr2[i22] / -34523);
                            i = (39609 % i22);
                            Test.iFld = (iArr2[i22 + 1] % i);
                        } catch (ArithmeticException a_e) {}
                        i21 = i20;
                        i23 -= i23;
                        i23 += i;
                        i21 *= (int)Test.instanceCount;
                    }
                    for (f2 = 1; f2 < 1; ++f2) {
                        d4 += -6651L;
                        i <<= -118;
                        fArr1[(int)(f2)][i20 + 1] -= i;
                        try {
                            i23 = (Test.iFld % 17182);
                            i = (-1288430954 % iArr2[(Test.iFld >>> 1) % N]);
                            Test.iFld = (Test.iFld / i20);
                        } catch (ArithmeticException a_e) {}
                        iArr2[(int)(d)] -= (int)d4;
                        Test.iFld += (-248 + (f2 * f2));
                    }
                case 48:
                    Test.iFld -= (int)Test.instanceCount;
                    d4 += Test.instanceCount;
                    Test.fFld += (i20 * i20);
                    break;
                case 71:
                    for (i25 = 1; 1 > i25; ++i25) {
                        byte by1=-62;
                        Test.instanceCount -= Test.iFld;
                        switch (((i20 % 1) * 5) + 47) {
                        case 52:
                            s1 += (short)(i25 - i20);
                            i21 -= Test.iFld;
                            i23 -= (int)Test.instanceCount;
                            break;
                        default:
                            by1 = (byte)f2;
                        }
                    }
                case 68:
                    d4 -= i;
                    break;
                case 45:
                    Test.instanceCount = i25;
                case 56:
                    i21 ^= i24;
                    break;
                case 66:
                    Test.instanceCount >>= Test.instanceCount;
                default:
                    i24 <<= i23;
                }
            } while (++i20 < 110);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
