package tests.javafuzzer134;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:51:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public byte byFld=-106;
    public static short sFld=5460;
    public static float fFld1=39.345F;
    public static double dFld=92.62958;

    public static long vMeth1_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth1() {

        int i14=3;

        i14 = (int)-28988L;
        vMeth1_check_sum += i14;
    }

    public static double dMeth(int i22) {

        int i23=0, i24=-223, i25=-34898, i26=13809, i27=-136, i28=5415, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -19);

        for (i23 = 4; i23 < 155; i23++) {
            i24 += (((i23 * i24) + i23) - i22);
            Test.instanceCount /= -5936120393222023460L;
            for (i25 = 1; i25 < 10; ++i25) {
                Test.sFld += (short)i23;
                i22 *= i22;
                i24 *= i25;
                Test.instanceCount += -185L;
                for (i27 = 1; i27 < 2; i27 += 2) {
                    i26 = i24;
                    i24 = i26;
                    i28 += (int)(934217148L + (i27 * i27));
                }
                Test.instanceCount = 11;
                i22 = i27;
            }
            iArr3[i23] >>>= i26;
        }
        long meth_res = i22 + i23 + i24 + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(iArr3);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth2(float f2) {

        int i21=-60643, i29=-202, i30=5, i31=-183, i32=3, i33=-3, iArr4[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        byte by2=86;
        long lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, -4L);
        FuzzerUtils.init(lArr2, 5681L);
        FuzzerUtils.init(iArr4, 14);

        i21 >>= (int)(((i21 / (i21 | 1)) + dMeth(i21)) % (i21 | 1));
        i29 = 335;
        while (--i29 > 0) {
            for (i30 = 1; i30 < 5; ++i30) {
                bArr[i30 - 1] = b;
                for (i32 = 1; i32 < 2; i32++) {
                    i31 -= i29;
                    by2 = (byte)1.318F;
                    switch (((i29 % 1) * 5) + 27) {
                    case 30:
                        i31 ^= i32;
                        lArr1 = lArr2;
                        i21 += i32;
                    default:
                        i33 -= i33;
                        i33 = Test.sFld;
                        iArr4[i30] *= 224;
                    }
                    i31 >>= i32;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + i21 + i29 + i30 + i31 + (b ? 1 : 0) + i32 + i33 + by2 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr4);
    }

    public static long lMeth1(long l1) {

        int i19=22692, i20=-110, i34=-49893, i35=4, i36=6, i37=-46316, i38=35764, i39=-131;
        byte by1=-92;
        boolean b1=true;

        vMeth1();
        i19 -= i19;
        Test.instanceCount = (--i20);
        i20 = (-(-by1));
        vMeth2(Test.fFld1);
        if (b1) {
            i19 = i20;
            for (i34 = 176; i34 > 11; i34 -= 2) {
                if (b1) break;
                for (i36 = 1; i36 < 19; ++i36) {
                    for (i38 = 2; i38 > 1; i38 -= 2) {
                        Test.dFld += l1;
                        b1 = false;
                        i37 += (i38 ^ i34);
                        i19 *= i35;
                    }
                }
            }
        }
        long meth_res = l1 + i19 + i20 + by1 + i34 + i35 + (b1 ? 1 : 0) + i36 + i37 + i38 + i39;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        float f=1.10F, f1=-16.15F, fArr[]=new float[N];
        int i7=-14, i8=-7, i9=-48414, i10=0, i11=178, i12=-162, i13=-208, i15=0, i16=-26229, i17=14, i18=8, iArr2[]=new
            int[N];
        short s=-22803, sArr[]=new short[N];
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -85L);
        FuzzerUtils.init(iArr2, 11);
        FuzzerUtils.init(byArr, (byte)29);
        FuzzerUtils.init(sArr, (short)-30064);
        FuzzerUtils.init(fArr, 1.934F);

        for (f = 1; 217 > f; ++f) {
            switch ((int)((f % 2) + 4)) {
            case 4:
                i7 += (int)f;
            case 5:
                Test.instanceCount >>= (--i7);
                for (i8 = 7; i8 < 116; i8++) {
                    i7 += (-118 + (i8 * i8));
                    lArr[(int)(f)] %= ((s - iArr2[i8 + 1]) | 1);
                    for (i10 = 1; i10 < 2; i10++) {
                        i11 = (int)173L;
                    }
                    for (i12 = 1; i12 < 2; ++i12) {
                        vMeth1();
                        if (false) continue;
                        i13 >>= (int)(((i8 + f) + (i12 - i8)) * 125L);
                        Test.instanceCount = (i12 - (Integer.reverseBytes(i8) - i7));
                    }
                    f1 = 2;
                    while (--f1 > 0) {
                        i9 = iArr2[i8];
                        i13 += ((byArr[(int)(f)]++) + (++iArr2[(int)(f)]));
                    }
                    for (i15 = 1; i15 < 2; i15++) {
                        i9 += (((i15 * i11) + f1) - i12);
                        i7 >>= (int)(Test.instanceCount - ((i15 + Test.instanceCount) * (sArr[(int)(f + 1)] =
                            (short)-3)));
                        byFld = (byte)(((i7 + i12) + (i9 * i11)) / (iArr2[i8 + 1] | 1));
                        i7 += (int)(2.191F + (i15 * i15));
                    }
                    for (i17 = 1; i17 < 2; ++i17) {
                        i9 *= (int)((-(f + -158)) * (byFld++));
                        iArr2[i8 + 1] = (int)(((i16 - i7) + i15) * (lMeth1(Test.instanceCount) - f1));
                        i11 >>>= i13;
                        fArr[(int)(f)] -= i15;
                        i11 ^= i8;
                        try {
                            i13 = (i15 % -410322379);
                            iArr2[(int)(f)] = (-610849667 % i11);
                            i18 = (1474605986 % i10);
                        } catch (ArithmeticException a_e) {}
                        i11 /= (int)(Test.instanceCount | 1);
                    }
                }
            default:
                i16 = i13;
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest lMeth1
//DEBUG  lMeth1 ->  lMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 lMeth1 mainTest
//DEBUG  dMeth ->  dMeth vMeth2 lMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
