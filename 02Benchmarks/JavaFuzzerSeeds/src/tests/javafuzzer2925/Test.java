package tests.javafuzzer2925;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:05:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public volatile float fFld=0.155F;
    public int iFld=100;
    public volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.sArrFld, (short)23023);
        FuzzerUtils.init(Test.byArrFld, (byte)15);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i4) {

        int i5=-61332, i6=60331, i7=206, i8=9, i9=86, i10=-14017, i11=2735, iArr[]=new int[N];
        short s=-20228, sArr[]=new short[N];
        boolean b=false;
        double d=-49.38388;

        FuzzerUtils.init(iArr, -45362);
        FuzzerUtils.init(sArr, (short)-15324);

        for (i5 = 2; i5 < 187; ++i5) {
            i7 = 1;
            do {
                i6 >>= (int)Test.instanceCount;
                for (i8 = i5; i8 < 1; i8++) {
                    i4 = i9;
                    if (i4 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + (b
                            ? 1 : 0) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(sArr);
                        return;
                    }
                    s += (short)i8;
                }
                iArr[i7] *= (int)f1;
                for (i10 = 1; 1 > i10; ++i10) {
                    i11 &= i4;
                    i9 += (((i10 * i9) + i8) - i4);
                    b = b;
                }
            } while (++i7 < 9);
            sArr[i5] = (short)f1;
            Test.instanceCount <<= Test.instanceCount;
            d = 59.252F;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public float fMeth() {

        int i12=-40, i13=11, i14=9, i15=80, i16=2, i17=22834;
        short s1=4183;
        long l=-253L;

        vMeth1(fFld, iFld);
        for (i12 = 12; i12 < 393; ++i12) {
            Test.instanceCount += i12;
            if (bFld) {
                i13 *= (int)1.4F;
                for (i14 = 4; i14 > 1; i14--) {
                    Test.instanceCount = i13;
                    for (i16 = 1; i16 < 2; i16++) {
                        i13 = i16;
                        s1 *= (short)fFld;
                        fFld += (i16 * fFld);
                        Test.iArrFld[i12] *= (int)1.393F;
                    }
                    i17 += (int)(78.615F + (i14 * i14));
                    l = i16;
                    i13 -= (int)l;
                }
            } else {
                try {
                    iFld = (i15 / i16);
                    Test.iArrFld[i12] = (Test.iArrFld[i12] % 19282);
                    i13 = (45190 / i17);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + s1 + l;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(float f, int i2, int i3) {

        long l1=81L;
        int i18=7;
        byte by=-61;

        Test.instanceCount -= (long)fMeth();
        for (l1 = 15; 297 > l1; l1++) {
            fFld /= (i3 | 1);
        }
        by %= (byte)(i18 | 1);
        i2 += i3;
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + l1 + i18 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-15240, i19=-10, i20=-77, i21=18697, i22=-21;
        double d1=0.74491, d2=2.8798;
        byte by1=-103;
        short s2=-26719;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 46.608F);

        fArr = (fArr = (fArr = (fArr = fArr)));
        for (i = 16; 344 > i; ++i) {
            vMeth(fFld, 156, iFld);
            Test.instanceCount += iFld;
            i1 += i;
            i19 = 1;
            do {
                i1 = (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                switch (((i19 >>> 1) % 8) + 54) {
                case 54:
                    i1 = iFld;
                    Test.instanceCount += -3212733804L;
                    break;
                case 55:
                    Test.sArrFld[i + 1] -= (short)i1;
                case 56:
                    iFld += (i19 ^ i19);
                    Test.iArrFld[i19] = iFld;
                    for (d1 = 1; d1 < 1; ++d1) {
                        iFld = iFld;
                    }
                case 57:
                    Test.instanceCount = iFld;
                    Test.iArrFld[i19 - 1] += i1;
                    Test.instanceCount -= i;
                    if (bFld) continue;
                case 58:
                    by1 = (byte)134;
                    for (i21 = 1; i21 < 1; ++i21) {
                        fArr[i21] = i19;
                        d2 *= -44042;
                        Test.iArrFld[i + 1] = i19;
                        fFld = fFld;
                        Test.instanceCount -= -40;
                        Test.byArrFld[i - 1] = (byte)Test.instanceCount;
                    }
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 59:
                    s2 /= (short)(i20 | 1);
                    break;
                case 60:
                    fArr[i] += (float)-113.42742;
                case 61:
                    iFld -= i21;
                    break;
                }
            } while (++i19 < 77);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
