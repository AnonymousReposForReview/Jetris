package tests.javafuzzer1756;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:01:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11658L;
    public int iFld=-190;
    public static short sFld=15164;
    public float fFld=0.780F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public long lArrFld1[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3L);
        FuzzerUtils.init(Test.iArrFld, 7159);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(short s) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.40466);

        dArr = dArr;
        long meth_res = s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i4=89, i5=14, i6=-6, i7=-26, i8=-56395, i9=-34049, iArr1[]=new int[N];
        boolean b=false;
        byte by=111;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(fArr, 17.994F);

        for (i4 = 169; i4 > 7; --i4) {
            b = (b = (Test.instanceCount == iArr1[i4]));
            by &= (byte)iMeth2(Test.sFld);
            i5 >>= i5;
            for (i6 = 1; 10 > i6; i6++) {
                by = (byte)i7;
                fArr = fArr;
                i7 += i6;
                Test.instanceCount *= i4;
                i7 += (((i6 * i5) + i6) - i4);
                for (i8 = 2; i8 > 1; i8 -= 3) {
                    if (true) break;
                    b = b;
                    i9 = i8;
                    iArr1 = iArr1;
                }
            }
        }
        long meth_res = i4 + i5 + (b ? 1 : 0) + by + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i=0, i1=-8, i2=-166, i3=17, i10=216, i11=-46837, i12=-253, i13=3, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8);

        for (i = 18; i < 346; ++i) {
            i1 = ((i1++) - ((i + i1) + i1));
            i1 += Math.max(Integer.reverseBytes(i1++), i);
            for (i2 = 1; i2 < 5; ++i2) {
                i1 >>>= i1;
                iArr[i2 + 1] >>= (iMeth1() * i3);
            }
            for (i10 = 5; i < i10; i10--) {
                i11 >>= i;
                iArr[i10 + 1] <<= i10;
                iArr = iArr;
                l += (i10 * i10);
            }
            i3 += (i ^ i10);
            for (i12 = 1; i12 < 5; i12++) {
                i1 *= i2;
            }
        }
        Test.lArrFld[(i10 >>> 1) % N] -= -2994265792L;
        long meth_res = l + i + i1 + i2 + i3 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-87.107619, d1=43.110881;
        int i14=-162, i15=-240, i16=-7, i17=-39863, i18=195, i19=-12003;
        byte by1=76;

        Test.lArrFld[(iFld >>> 1) % N] -= Integer.reverseBytes(iMeth(-4233073480L));
        d *= d;
        Test.instanceCount = iFld;
        Test.lArrFld[(iFld >>> 1) % N] = iFld;
        Test.iArrFld = Test.iArrFld;
        fArrFld[(iFld >>> 1) % N] -= -46999L;
        iFld = iFld;
        iFld -= iFld;
        for (i14 = 291; i14 > 1; --i14) {
            Test.iArrFld[i14 - 1] += (int)Test.instanceCount;
            for (d1 = 1; d1 < 87; d1++) {
                i16 = 142;
                try {
                    i15 = (97 % i16);
                    i15 = (Test.iArrFld[(int)(d1 - 1)] / i17);
                    i17 = (-424016100 % Test.iArrFld[i14 + 1]);
                } catch (ArithmeticException a_e) {}
                for (i18 = 2; 1 < i18; --i18) {
                    d -= by1;
                    Test.iArrFld[i14] = i15;
                    Test.instanceCount ^= Test.instanceCount;
                    Test.iArrFld[i18 + 1] = 14;
                    switch ((i18 % 7) + 59) {
                    case 59:
                        switch ((((iFld >>> 1) % 2) * 5) + 52) {
                        case 57:
                            Test.iArrFld[i18] -= (int)fFld;
                            iFld ^= 177;
                            break;
                        case 59:
                            d += Test.instanceCount;
                        }
                        Test.iArrFld[(int)(d1)] -= i17;
                        fFld += i19;
                        break;
                    case 60:
                        i19 = i15;
                        i19 = (int)Test.instanceCount;
                        lArrFld1 = lArrFld1;
                        lArrFld1[(int)(d1)][i18 + 1] -= 133;
                        break;
                    case 61:
                        Test.lArrFld[(int)(d1 - 1)] = i18;
                        break;
                    case 62:
                        iFld = (int)Test.instanceCount;
                        break;
                    case 63:
                    case 64:
                        Test.iArrFld[(int)(d1 - 1)] -= (int)Test.instanceCount;
                    case 65:
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-2671);
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
