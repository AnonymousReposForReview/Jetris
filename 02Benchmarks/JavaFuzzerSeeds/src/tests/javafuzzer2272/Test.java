package tests.javafuzzer2272;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:13:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=253565252754813248L;
    public static int iFld=-40;
    public static float fFld=1.259F;
    public static byte byFld=-51;
    public static volatile double dFld=22.60772;
    public short sFld=-12178;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i12=18668, i13=132, i14=52188, i15=-3, i16=-1534, i17=-42171, iArr1[][]=new int[N][N];
        float f1=4.963F;
        short s=28218;
        double d1=-12.47660;
        byte by=49;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3837325429L);
        FuzzerUtils.init(iArr1, 32335);

        lArr[(13 >>> 1) % N] = Test.iFld;
        i12 = 1;
        do {
            Test.iFld += (i12 + i12);
            for (f1 = 5; f1 > 1; --f1) {
                for (i14 = 1; i14 < 2; ++i14) {
                    if (i14 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15
                            + s + i16 + i17 + Double.doubleToLongBits(d1) + by + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                }
                s *= (short)i15;
                s -= (short)147;
                for (i16 = 1; 2 > i16; i16 += 3) {
                    d1 *= Test.instanceCount;
                    lArr[i12] = Test.instanceCount;
                    iArr1 = iArr1;
                }
                by -= (byte)i12;
            }
            if (false) break;
            iArr1[i12 + 1] = iArr1[i12];
        } while (++i12 < 308);
        vMeth1_check_sum += Float.floatToIntBits(f) + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + s + i16 + i17
            + Double.doubleToLongBits(d1) + by + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(long l) {

        int i11=-45, i18=241, i19=-241, i20=4;
        double d2=-1.74763;
        short s1=10188;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, -12L);
        FuzzerUtils.init(fArr, 1.797F);

        i11 = 1;
        while (++i11 < 195) {
            vMeth1(Test.fFld);
            switch (((i11 >>> 1) % 7) + 72) {
            case 72:
                try {
                    Test.iFld = (Test.iFld % i11);
                    Test.iArrFld[i11] = (i11 / Test.iArrFld[i11 + 1]);
                    Test.iArrFld[i11] = (i11 % 13871);
                } catch (ArithmeticException a_e) {}
                lArr1[i11 - 1] <<= i11;
                break;
            case 73:
                i18 = 8;
                do {
                    Test.fFld = i18;
                    Test.iFld += i11;
                    for (i19 = 1; i19 < 1; ++i19) {
                        Test.iFld = (int)Test.instanceCount;
                    }
                    Test.byFld += (byte)i18;
                    Test.iFld = i11;
                    d2 = Test.instanceCount;
                } while (--i18 > 0);
                d2 = -199;
                Test.iFld <<= (int)l;
                break;
            case 74:
                lArr1[i11] = i11;
            case 75:
                Test.iFld <<= Test.iFld;
                break;
            case 76:
                s1 |= (short)i11;
                break;
            case 77:
                Test.iFld -= i18;
                break;
            case 78:
                fArr[i11] = i19;
                break;
            default:
                i20 += (i11 * i11);
            }
        }
        long meth_res = l + i11 + i18 + i19 + i20 + Double.doubleToLongBits(d2) + s1 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=-15549, i5=-4341, i6=-247, i7=10, i8=-144, i9=-10, i10=-13817, iArr[]=new int[N];
        double d=-2.93782;

        FuzzerUtils.init(iArr, 4535);

        for (i4 = 14; 298 > i4; i4++) {
            for (d = 1; 6 > d; ++d) {
                for (i7 = 1; i7 < 2; i7++) {
                    i3 = i3;
                }
                switch ((int)(((d % 1) * 5) + 49)) {
                case 51:
                    iArr[i4 - 1] *= (int)(--Test.fFld);
                }
            }
            i9 = 6;
            do {
                iArr[i4] -= (int)Test.instanceCount;
                i5 += (i9 | i6);
            } while (--i9 > 0);
            Test.instanceCount &= (i5--);
            i10 = 1;
            do {
                switch (((i4 % 2) * 5) + 2) {
                case 5:
                    Test.iFld = (int)Test.fFld;
                    i8 -= i8;
                    Test.instanceCount -= -62995;
                case 11:
                    Test.instanceCount -= lMeth(Test.instanceCount);
                    break;
                default:
                    if (i5 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
            } while (++i10 < 6);
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=38280, i1=46, i21=14, i22=-214, i23=-58748, i24=-7954, i25=-54519;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 483516601L);

        Test.iFld = (int)((++Test.instanceCount) * (Math.max(Test.iFld, Test.iFld) % (Test.instanceCount | 1)));
        for (i = 20; i < 398; i++) {
            vMeth(26, 5);
            i1 = (int)Test.instanceCount;
            for (i21 = 67; i21 > 2; --i21) {
                Test.iArrFld[i + 1] = 55717;
                Test.fFld += i21;
            }
            i23 = 1;
            do {
                Test.dFld += i;
                Test.fFld += (((i23 * Test.iFld) + Test.iFld) - i);
                Test.iFld = i;
                switch ((i % 1) + 23) {
                case 23:
                    Test.iArrFld[i] = (int)-49916L;
                    sFld += (short)(i23 * Test.iFld);
                    break;
                default:
                    i1 <<= 45482;
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.dFld = i24;
                        i22 &= i24;
                        lArr2[i24] = i23;
                        Test.instanceCount += i24;
                        i22 = i22;
                        i22 *= (int)Test.instanceCount;
                        i1 *= (int)Test.instanceCount;
                        i22 = (int)Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                    }
                    i22 >>= i1;
                }
                Test.iArrFld[i23] = i;
                i1 += (-100 + (i23 * i23));
            } while (++i23 < 67);
        }
        i1 -= i22;
        i1 <<= i25;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
