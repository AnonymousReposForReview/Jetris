package tests.javafuzzer2870;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:54:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2607881362879534813L;
    public static int iFld=0;
    public static float fFld=103.166F;
    public static boolean bFld=true;
    public static short sFld=5889;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 143);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4, int i5, long l2) {

        int i6=129, i7=-18086, i9=9, i10=45385, iArr2[]=new int[N];
        byte by=53;
        double d1=0.1535;
        short s=27527;
        boolean b=false;

        FuzzerUtils.init(iArr2, 64253);

        for (i6 = 24; i6 < 390; i6++) {
            by = (byte)i5;
            i5 += (i6 * i6);
            l2 = -95;
            for (i9 = 1; i9 < 5; i9++) {
                d1 = i5;
                i4 &= (int)Test.instanceCount;
                try {
                    i5 = (i6 / Test.iFld);
                    i5 = (i9 % 54268);
                    Test.iFld = (i6 / 927295371);
                } catch (ArithmeticException a_e) {}
                if (b) {
                    switch (((i7 >>> 1) % 6) + 2) {
                    case 2:
                        i7 = i10;
                        break;
                    case 3:
                        Test.instanceCount = i5;
                        i4 >>= (int)l2;
                        i4 -= (int)Test.fFld;
                        i7 = 36965;
                        break;
                    case 4:
                    case 5:
                        l2 = l2;
                        break;
                    case 6:
                        i4 = -29149;
                        break;
                    case 7:
                        i7 += (((i9 * i6) + s) - l2);
                        break;
                    default:
                        Test.fFld += (((i9 * i9) + by) - Test.instanceCount);
                    }
                } else if (b) {
                    iArr2[i6] *= -43977;
                }
            }
        }
        long meth_res = i4 + i5 + l2 + i6 + i7 + by + i9 + i10 + Double.doubleToLongBits(d1) + s + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(float f, long l1) {

        int i2=7663, i3=-57585, i11=0, iArr1[]=new int[N];
        double d2=-2.4815;
        byte by1=-66;

        FuzzerUtils.init(iArr1, 5);

        f -= ((iArr1[(Test.iFld >>> 1) % N]++) * Test.iFld);
        for (i2 = 202; i2 > 12; i2 -= 2) {
            fMeth(i3, Test.iFld, l1);
            d2 = 1;
            do {
                i11 = 1;
                do {
                    f *= i2;
                    try {
                        Test.iFld = (iArr1[i2 + 1] / -294370178);
                        Test.iFld = (i11 / 61163);
                        i3 = (-7230 / iArr1[(int)(d2 - 1)]);
                    } catch (ArithmeticException a_e) {}
                    i3 += i11;
                    i3 += (int)d2;
                    Test.bFld = false;
                    l1 -= i3;
                    i3 += (i11 ^ i3);
                    i3 += (((i11 * l1) + i2) - by1);
                    if (Test.bFld) continue;
                } while (--i11 > 0);
                Test.iFld += (int)(d2 * d2);
            } while (++d2 < 16);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + i2 + i3 + Double.doubleToLongBits(d2) + i11 + by1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        int i=137, i1=-49649, i12=165, i13=-92, i14=14, i15=25973, iArr[]=new int[N];
        double d=1.75153;
        byte by2=126;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 76);
        FuzzerUtils.init(fArr, 13.395F);

        iArr[(i >>> 1) % N] = (int)(i = (int)((d * i) * i));
        i = iArr[(i >>> 1) % N];
        i1 = 1;
        while (++i1 < 167) {
            switch ((i1 % 7) + 127) {
            case 127:
                i += i1;
            case 128:
                vMeth1(Test.fFld, l);
                Test.fFld += i1;
                by2 = (byte)-107;
            case 129:
            case 130:
                for (i12 = 9; i12 > 1; --i12) {
                    i13 &= Test.iFld;
                    Test.sFld = (short)Test.instanceCount;
                    i13 += i12;
                    for (i14 = 1; i14 < 2; i14 += 3) {
                        fArr[i14] *= 96.901F;
                        Test.fFld = by2;
                    }
                }
                break;
            case 131:
                Test.iFld += (int)(2.607F + (i1 * i1));
                break;
            case 132:
                Test.instanceCount *= i1;
                break;
            case 133:
                Test.fFld -= l;
                break;
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + by2 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=59200, i17=-47613, i18=-29289, i19=-4, i20=14, iArr3[]=new int[N];
        long l3=-90L;
        byte by3=101, by4=101;
        double dArr[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, 19.11019);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr3, -58183);

        vMeth(-32598L);
        Test.iFld >>= (int)Test.instanceCount;
        for (i16 = 19; i16 < 361; i16++) {
            Test.iFld *= (int)Test.instanceCount;
        }
        for (double d3 : dArr) {
            i17 = (int)d3;
            Test.fFld *= Test.iFld;
            for (l3 = 2; l3 < 63; ++l3) {
                bArr[(int)(l3 - 1)] = Test.bFld;
                i18 += (int)(1.539F + (l3 * l3));
                Test.fFld *= i16;
                for (i19 = (int)(l3); i19 < 2; i19 += 2) {
                    Test.sFld = by3;
                    bArr[i19 + 1] = Test.bFld;
                    d3 /= (i17 | 1);
                    switch ((i19 % 5) + 10) {
                    case 10:
                        switch ((int)((l3 % 1) + 70)) {
                        case 70:
                            Test.bFld = Test.bFld;
                            break;
                        }
                    case 11:
                        Test.fFld = i18;
                        break;
                    case 12:
                        i17 *= by3;
                        Test.iArrFld[i19] += (int)Test.instanceCount;
                        try {
                            iArr3[(int)(l3 + 1)] = (i16 % 8884);
                            i17 = (i19 / i17);
                            i20 = (iArr3[(int)(l3)] % i19);
                        } catch (ArithmeticException a_e) {}
                        Test.sFld >>= by3;
                        break;
                    case 13:
                        Test.instanceCount = by4;
                        i17 += i16;
                        Test.instanceCount += i19;
                        d3 *= l3;
                        break;
                    case 14:
                        Test.instanceCount -= -65L;
                        d3 += l3;
                        i18 >>>= i17;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
