package tests.javafuzzer1535;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:11:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static boolean bFld=true;
    public byte byFld=5;
    public volatile float fFld=-11.702F;
    public volatile short sFld=3623;
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.96787);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=-9, i7=-2, i8=-39614, i9=-25319, i10=13, i11=-33677, i12=-5;
        byte by1=102;
        float f=-5.550F, f1=2.143F;
        double d1=1.28007;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-17340);

        i6 = -25911;
        Test.instanceCount -= by1;
        for (i7 = 128; i7 > 6; --i7) {
            f -= i8;
            for (i9 = 1; 13 > i9; ++i9) {
                for (f1 = i9; f1 < 2; ++f1) {
                    i8 += i8;
                }
                f %= -56L;
                i6 += i8;
                Test.dArrFld[i9 - 1] = Test.dArrFld[i7 + 1];
                Test.instanceCount += i6;
                Test.instanceCount += (i9 + i11);
                for (d1 = 1; d1 < 2; d1++) {
                    Test.instanceCount += (long)(d1 * d1);
                }
                sArr[i7] = (short)i10;
            }
        }
        vMeth_check_sum += i6 + by1 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + Float.floatToIntBits(f1) + i11 +
            Double.doubleToLongBits(d1) + i12 + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth1(int i3, int i4, int i5) {

        byte by=-109;
        short s=-20837;
        int i13=-49430, i14=0, iArr[]=new int[N];
        float f2=-86.66F;

        FuzzerUtils.init(iArr, 37129);

        i5 &= (int)(Test.instanceCount = (Test.instanceCount + by));
        Test.dArrFld[(i5 >>> 1) % N][(i4 >>> 1) % N] %= (((Integer.reverseBytes(-30177) + (-8 + Test.instanceCount)) -
            57455) | 1);
        vMeth();
        i3 = i3;
        s = (short)42141;
        i13 = 1;
        do {
            for (f2 = 1; f2 < 4; f2 += 3) {
                if (Test.bFld) continue;
                i14 += i5;
                i14 += (int)(((f2 * i13) + Test.instanceCount) - i5);
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount = i4;
                iArr[i13 - 1] *= i13;
                i14 -= i3;
                iArr[(int)(f2 - 1)] = (int)Test.instanceCount;
            }
        } while (++i13 < 393);
        long meth_res = i3 + i4 + i5 + by + s + i13 + Float.floatToIntBits(f2) + i14 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {


        Test.instanceCount <<= iMeth1(-6, i1, i2);
        long meth_res = i1 + i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=59548, i15=-56484, i16=27951, i17=-11, i18=-4, i19=115, i20=-13, i21=17381, i22=11, i23=-29157,
            i24=-26673, iArr1[]=new int[N];
        double d=0.71471;
        long l=0L;
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(sArr1, (short)9701);

        Test.instanceCount = ((long)((--i) + (--d)) >> (iMeth(i, 0) - i));
        iArr1[(i >>> 1) % N] = i;
        for (i15 = 12; i15 < 391; ++i15) {
            Test.instanceCount >>>= i16;
            try {
                i16 = (-47414 % i);
                i = (i16 % i17);
                i16 = (i / iArr1[i15]);
            } catch (ArithmeticException a_e) {}
            i17 += (int)d;
            switch ((((31899 >>> 1) % 9) * 5) + 19) {
            case 37:
                Test.instanceCount = i;
                for (i18 = i15; i18 < 66; i18++) {
                    iArr1[i15 - 1] = i19;
                    byFld -= (byte)i19;
                    for (i20 = 1; i20 < 1; i20++) {
                        i16 = i18;
                        fFld = fFld;
                        iArr1[i15] -= (int)Test.instanceCount;
                        if (Test.bFld) continue;
                        i22 += (i20 * i20);
                        Test.instanceCount += (((i20 * Test.instanceCount) + i) - i21);
                    }
                    i17 += (int)Test.instanceCount;
                    sArr1[i15][i15] = (short)i17;
                    d = fFld;
                    i22 *= i16;
                    i23 = 1;
                    do {
                        switch (((i18 % 2) * 5) + 34) {
                        case 42:
                            iArr1[i18] = 206;
                            break;
                        case 43:
                            i17 += i23;
                            sArr1[i23 - 1][i23 - 1] *= (short)35.24333;
                            break;
                        }
                    } while (++i23 < 1);
                    i22 = i18;
                    iArr1[i18] = sFld;
                }
                iArr1[i15 - 1] = (int)fFld;
                break;
            case 31:
                i19 -= (int)Test.instanceCount;
                break;
            case 46:
                Test.instanceCount = i24;
                break;
            case 62:
            case 64:
                l |= -183020154L;
            case 35:
                Test.instanceCount *= 57630;
            case 54:
                l = byFld;
                break;
            case 29:
                byFld *= (byte)29;
            case 63:
                i += (((i15 * i15) + Test.instanceCount) - i17);
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
