package tests.javafuzzer1978;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:59:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6156684457102817182L;
    public static short sFld=-23436;
    public static byte byFld=104;
    public static float fArrFld[]=new float[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -30.420F);
        FuzzerUtils.init(Test.byArrFld, (byte)6);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, short s, int i7) {

        int i8=32420, i9=-221, i10=-38731, i11=10, i12=-64333, i13=10, iArr2[]=new int[N];
        double d1=27.105129;

        FuzzerUtils.init(iArr2, 60924);

        i8 = 18597;
        i7 += (int)d1;
        i8 = (int)Test.instanceCount;
        i8 *= (int)Test.instanceCount;
        i9 = 1;
        do {
            for (i10 = 1; i10 < 9; i10++) {
                iArr2[i10 - 1] *= -45622;
                Test.byFld -= Test.byFld;
                i6 -= (int)Test.instanceCount;
                Test.instanceCount -= i10;
                for (i12 = 2; i12 > 1; --i12) {
                    i13 <<= i12;
                    i8 >>>= i13;
                    i8 += (int)Test.instanceCount;
                    i7 = -226;
                }
            }
        } while (++i9 < 171);
        vMeth_check_sum += i6 + s + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(long l1, int i3) {

        int i4=-17160, i5=-11, i14=-111, i15=-217, i16=-3, i17=-34733, iArr1[][]=new int[N][N];
        byte by=-69;
        float f1=-2.355F;

        FuzzerUtils.init(iArr1, 1);

        i3 -= (int)((++i3) * ((l1 - i3) * (-4L & (i3 = i3))));
        for (i4 = 4; i4 < 170; i4 += 2) {
            Test.fArrFld[i4 - 1] += (((57873 * (i3 - by)) * (by * 2)) + (iArr1[i4][i4 - 1]++));
            vMeth(i3, Test.sFld, i4);
            i3 = (int)Test.instanceCount;
            if (i5 != 0) {
            }
            Test.instanceCount = (long)f1;
            for (i14 = 1; i14 < 19; i14++) {
                f1 = i14;
                i5 -= i3;
                Test.instanceCount += i15;
                l1 += i14;
                for (i16 = 1; i16 < 2; i16++) {
                    i17 = i3;
                }
                i5 &= (int)l1;
            }
        }
        long meth_res = l1 + i3 + i4 + i5 + by + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(long l, double d, int i) {

        int i1=113, i2=-169, i19=167, iArr[]=new int[N];
        float f=96.196F;
        boolean b=true;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(dArr, 37.81381);
        FuzzerUtils.init(lArr, 8L);

        for (i1 = 7; i1 < 382; ++i1) {
            i2 >>= (int)Test.instanceCount;
            switch ((((i >>> 1) % 1) * 5) + 75) {
            case 76:
                Test.sFld += (short)(((i1 - f) * l) - ((Test.sFld + l) - d));
                i2 -= iArr[i1 + 1];
                iArr[i1 + 1] = (int)fMeth(Test.instanceCount, i2);
                i *= (int)118L;
                break;
            default:
                switch (((i1 % 4) * 5) + 23) {
                case 33:
                    i2 += (((i1 * f) + i1) - i2);
                    Test.instanceCount = i2;
                    b = b;
                    i19 = 1;
                    do {
                        l = i2;
                    } while (++i19 < 5);
                case 25:
                    dArr[i1 + 1] += 13;
                    i <<= 68;
                    break;
                case 42:
                    lArr[i1] -= i19;
                    break;
                case 31:
                    Test.instanceCount = i;
                    break;
                default:
                    i *= (int)f;
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i + i1 + i2 + Float.floatToIntBits(f) + (b ? 1 : 0) + i19 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=0.52433, dArr1[]=new double[N];
        int i20=7, i21=-61105, i22=141, i23=-2, i24=-156, i25=31, i26=32443, i27=17610, i28=4, iArr3[]=new int[N];
        float f2=2.821F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -479550395L);
        FuzzerUtils.init(dArr1, 27.18558);
        FuzzerUtils.init(iArr3, -37866);

        iMeth(Test.instanceCount, d2, i20);
        try {
            i20 = i20;
            i20 -= i20;
            for (long l2 : lArr1) {
                lArr1[(i20 >>> 1) % N] >>>= Test.sFld;
                i20 >>= i20;
                l2 += 715904257863539887L;
                i20 |= -155;
                for (i21 = 3; i21 < 63; ++i21) {
                    dArr1[i21 + 1] += i22;
                    i22 = i22;
                    iArr3[i21 - 1] += -9;
                }
                for (i23 = 2; i23 < 63; i23++) {
                    i22 += (i23 ^ i21);
                    for (i25 = i23; i25 < 2; i25++) {
                        d2 = Test.instanceCount;
                    }
                    iArr3[i23 - 1] -= 37651;
                    i24 &= -61872;
                    for (i27 = 2; i27 > 1; i27--) {
                        i24 += (-60087 + (i27 * i27));
                        Test.instanceCount += i27;
                        i28 += (((i27 * i24) + i24) - Test.instanceCount);
                        i20 = (int)10L;
                        i20 += (((i27 * i23) + i26) - Test.sFld);
                        f2 -= l2;
                    }
                    i22 = i24;
                    i26 = i24;
                    Test.byArrFld[i23 - 1] ^= (byte)i28;
                    lArr1[i23] = l2;
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            i22 += (int)Test.instanceCount;
        }
        finally {
            iArr3[(i26 >>> 1) % N] = (int)f2;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
