package tests.javafuzzer2165;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:42:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=128L;
    public static int iFld=98;
    public static volatile boolean bFld=false;
    public static volatile double dFld=-60.110285;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i3=101, i4=-7, i5=131;
        float f1=109.411F;
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(dArr1, -63.3155);

        for (i3 = 370; i3 > 22; --i3) {
            boolean b1=true;
            Test.iFld -= (int)l1;
            Test.iFld += (((i3 * i3) + l1) - f1);
            i5 = i3;
            if (b1) break;
            i5 = i4;
            dArr1[i3 + 1][i3 - 1] += l1;
        }
        vMeth1_check_sum += l1 + i3 + i4 + Float.floatToIntBits(f1) + i5 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static long lMeth(int i) {

        float f=-2.241F, fArr[]=new float[N];
        short s=32528;
        int i1=-5, i2=-21259, iArr[]=new int[N];
        byte by=113;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 15506);
        FuzzerUtils.init(lArr, -88L);
        FuzzerUtils.init(dArr, -1.4854);
        FuzzerUtils.init(fArr, 45.328F);

        try {
            iArr[(i >>> 1) % N] += (int)((iArr[(i >>> 1) % N] = (int)(i + f)) - ((f + Test.instanceCount) +
                (-Test.iFld)));
            lArr[(-226 >>> 1) % N] += ((Test.iFld += (i - s)) * (++Test.iFld));
            iArr[(i >>> 1) % N] *= Test.iFld;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (double d1 : dArr) {
                for (i1 = 4; i1 > 1; i1 -= 2) {
                    fArr[i1] += (float)((iArr[i1 - 1] + (d1 + s)) + i);
                    vMeth1(Test.instanceCount);
                    Test.instanceCount += (long)f;
                    Test.bFld = Test.bFld;
                    f = -7.980F;
                    Test.bFld = Test.bFld;
                    by -= (byte)-114;
                    f -= f;
                }
                Test.iFld >>= i1;
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + s + i1 + i2 + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(boolean b, long l, double d) {

        float f2=33.984F;

        Test.iFld &= (int)lMeth(Test.iFld);
        f2 *= 208;
        Test.iFld += (int)121L;
        vMeth_check_sum += (b ? 1 : 0) + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.bFld, Test.instanceCount, Test.dFld);
        Test.instanceCount *= Test.iFld;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
