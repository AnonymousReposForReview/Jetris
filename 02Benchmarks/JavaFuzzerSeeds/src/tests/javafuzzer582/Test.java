package tests.javafuzzer582;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 06:14:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=47079L;
    public static short sFld=21852;
    public static int iFld=-18596;
    public static boolean bFld=true;
    public int iFld1=-5;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 44463);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=23251, i6=-13055, i7=-14, i8=-13, i9=-26, iArr[]=new int[N];
        byte by=-100;
        float f=-61.787F;
        double d=0.113613, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.77045);
        FuzzerUtils.init(iArr, -7);

        switch (((i5 >>> 1) % 5) + 55) {
        case 55:
            for (i6 = 3; i6 < 125; i6++) {
                i5 >>= i6;
                dArr[i6] = by;
                i7 ^= i5;
                i5 += 6;
                i5 = i6;
                f /= (Test.instanceCount | 1);
                i5 -= i7;
            }
            i5 += (int)Test.instanceCount;
            i5 >>= i5;
        case 56:
            for (i8 = 15; 371 > i8; i8++) {
                i9 += i8;
            }
            iArr[(i7 >>> 1) % N] = (int)Test.instanceCount;
            break;
        case 57:
            i9 >>>= i8;
            break;
        case 58:
        case 59:
            i5 -= (int)d;
            break;
        }
        vMeth1_check_sum += i5 + i6 + i7 + by + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        int i3=229, i4=9, i10=-11, i11=64206, i12=-32630, i13=19, i14=7, iArr1[]=new int[N];
        byte by1=-92, by2=99;
        float f1=-2.1021F, fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -1.366F);
        FuzzerUtils.init(iArr1, -152);
        FuzzerUtils.init(sArr, (short)-27544);

        for (i3 = 5; i3 < 319; ++i3) {
            vMeth1();
            i10 = 1;
            do {
                fArr[i3] -= by1;
                iArr1[i3 + 1] = (int)Test.instanceCount;
                i4 |= i4;
                i2 = i3;
            } while (++i10 < 5);
            i4 = i3;
            sArr[i3] -= (short)f1;
        }
        for (i11 = 19; i11 < 346; i11++) {
            i2 *= by2;
            for (i13 = 1; i13 < 5; i13++) {
                f1 = i4;
                i14 *= Test.sFld;
                i2 >>= i2;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i10 + by1 + Float.floatToIntBits(f1) + i11 + i12 + by2 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr);
    }

    public static double dMeth(int i, short s, int i1) {

        float f2=-126.352F, f3=-1.439F;
        int i15=-192, i16=1, i17=29426, iArr2[]=new int[N];
        boolean b=false;
        double d1=117.3043;
        long l=-42744L, lArr[]=new long[N];
        byte by3=-48;

        FuzzerUtils.init(lArr, -3666258740L);
        FuzzerUtils.init(iArr2, 5);

        vMeth(-5);
        i1 = (int)Test.instanceCount;
        lArr[(35180 >>> 1) % N] -= i1;
        for (f2 = 3; f2 < 165; f2++) {
            iArr2[(int)(f2 + 1)] ^= i15;
            i1 *= (int)Test.instanceCount;
        }
        f3 = 259;
        while ((f3 -= 2) > 0) {
            switch ((int)((f3 % 9) + 88)) {
            case 88:
                for (i16 = 1; 12 > i16; ++i16) {
                    if (b) {
                        Test.instanceCount = -12L;
                        switch (((i16 % 2) * 5) + 30) {
                        case 34:
                        case 37:
                            i -= i1;
                            i17 *= (int)Test.instanceCount;
                            i17 = -2;
                            break;
                        default:
                            i15 += (int)f3;
                        }
                    }
                }
                break;
            case 89:
                Test.iArrFld = iArr2;
                break;
            case 90:
                Test.sFld += (short)(f3 * f3);
                break;
            case 91:
                Test.instanceCount <<= i;
            case 92:
                i1 = i15;
                break;
            case 93:
                d1 = i17;
            case 94:
                Test.instanceCount >>= l;
                break;
            case 95:
                i = i16;
                break;
            case 96:
                by3 = (byte)i1;
                break;
            }
        }
        long meth_res = i + s + i1 + Float.floatToIntBits(f2) + i15 + Float.floatToIntBits(f3) + i16 + i17 + (b ? 1 :
            0) + Double.doubleToLongBits(d1) + l + by3 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=0.126433;
        int i18=-9, i19=-21515, i20=-56670, i21=29064, i22=-219, i23=-49258, i24=-3, i25=13;
        long l2=-8038674426743259896L, l3=1473893140L;
        float f5=2.534F;

        dMeth(Test.iFld, (short)(28467), Test.iFld);
        d2 *= Test.iFld;
        for (long l1 : lArrFld) {
            for (i18 = 2; 63 > i18; ++i18) {
                Test.iArrFld[i18] *= i19;
                if (Test.bFld) continue;
                iFld1 &= iFld1;
                Test.iFld += i18;
                i20 = 1;
                do {
                    float f4=-6.50F;
                    lArrFld[i18 + 1] += 52640;
                    iFld1 += (int)-2L;
                    Test.instanceCount += (long)f4;
                    i19 *= (int)f4;
                    switch (((i20 % 2) * 5) + 116) {
                    case 121:
                        Test.iFld += (i20 ^ i20);
                        Test.iFld += i20;
                        break;
                    case 125:
                        i19 += (i20 ^ i20);
                    default:
                        Test.iArrFld[i18] += (int)d2;
                        Test.iFld += (i20 - Test.iFld);
                        l2 += -46414;
                        iFld1 += (((i20 * iFld1) + f4) - i20);
                    }
                } while (++i20 < 2);
            }
            Test.iFld = 10;
        }
        for (l3 = 241; l3 > 5; l3 -= 2) {
            for (i22 = (int)(l3); i22 < 212; ++i22) {
                switch ((((i21 >>> 1) % 8) * 5) + 14) {
                case 49:
                case 28:
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.iFld >>= Test.sFld;
                        try {
                            i19 = (67 % i21);
                            iFld1 = (Test.iArrFld[i24 + 1] / -116);
                            Test.iFld = (188 % i23);
                        } catch (ArithmeticException a_e) {}
                        Test.iArrFld = Test.iArrFld;
                        i19 += i23;
                    }
                    break;
                case 37:
                    try {
                        Test.iArrFld[(int)(l3 + 1)] = (i23 / i19);
                        Test.iArrFld[(int)(l3)] = (i25 % Test.iArrFld[(int)(l3)]);
                        i23 = (-5440 / i21);
                    } catch (ArithmeticException a_e) {}
                case 50:
                    i25 &= Test.iFld;
                    break;
                case 40:
                    Test.iArrFld[(int)(l3 - 1)] = (int)l2;
                    break;
                case 51:
                    f5 = 6536548554538570255L;
                case 18:
                    i21 = i25;
                    break;
                case 32:
                    i23 *= (int)d2;
                    break;
                default:
                    i25 <<= -36;
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
