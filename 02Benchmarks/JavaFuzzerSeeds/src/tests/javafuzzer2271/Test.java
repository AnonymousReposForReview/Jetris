package tests.javafuzzer2271;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:12:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2832217851L;
    public static double dFld=-73.16674;
    public static int iFld=-253;
    public static float fFld=123.453F;
    public static int iFld1=142;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, 4236636898L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        int i6=-38738, i7=0, i8=-13, i9=5, i10=-219, i11=7;
        boolean b1=false;
        short s=-27937;

        for (i6 = 1; 396 > i6; i6++) {
            i7 = i7;
            b1 = b1;
            i7 *= (int)Test.dFld;
            Test.dFld += -1.327F;
            switch (((i6 >>> 1) % 7) + 103) {
            case 103:
                i7 += i6;
                for (i8 = i6; i8 < 4; ++i8) {
                    for (i10 = i8; i10 < 1; i10++) {
                        Test.instanceCount *= 17276;
                        Test.iArrFld[i8 - 1] *= (int)Test.dFld;
                        i7 = i9;
                        Test.dFld *= i9;
                        i11 -= i11;
                        i7 <<= (int)Test.instanceCount;
                    }
                }
                break;
            case 104:
                i7 &= (int)Test.instanceCount;
            case 105:
                Test.dFld += i9;
                break;
            case 106:
            case 107:
                i11 += (i6 * s);
                break;
            case 108:
                Test.iArrFld[i6] = 37393;
                break;
            case 109:
                Test.instanceCount -= i6;
                break;
            default:
                Test.instanceCount = i7;
            }
        }
        long meth_res = i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + i10 + i11 + s;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(float f1, float f2) {

        long l=-21L;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        l = 1;
        while (++l < 380) {
            if (bArr[(int)(l - 1)] = (b = bMeth())) continue;
            f2 -= Test.iFld;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + l + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(float f, int i, int i1) {

        int i2=103, i3=-140, i4=76, i5=64788, i12=-31, i13=-20230, i14=-98;
        double d=-125.95349;

        for (i2 = 9; 175 > i2; i2++) {
            for (i4 = 1; i4 < 10; ++i4) {
                i5 += (-191 + (i4 * i4));
                i3 += (i4 - i3);
                vMeth1(f, f);
                i -= (int)Test.instanceCount;
                Test.instanceCount += (-172 + (i4 * i4));
                Test.instanceCount = 6;
                Test.iFld <<= i4;
            }
        }
        for (d = 288; d > 10; d--) {
            for (i13 = 6; 1 < i13; i13 -= 3) {
                i1 = (int)Test.instanceCount;
                i14 += (((i13 * f) + Test.instanceCount) - i4);
                Test.lArrFld[(int)(d + 1)] = i14;
                i1 += (int)-13L;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i12 +
            i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=-6, i16=-52815, i17=-143, i18=10, i19=28429, i20=-28973, i21=-26, i22=14, i23=-62;
        boolean b2=false;
        byte by=10;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.86081);

        vMeth(Test.fFld, Test.iFld, 52);
        Test.iFld = Test.iFld;
        for (i15 = 10; i15 < 182; ++i15) {
            Test.instanceCount += (((i15 * i16) + i16) - Test.instanceCount);
        }
        try {
            i16 += (int)7L;
            for (i17 = 1; i17 < 153; ++i17) {
                Test.iArrFld[i17] = i16;
                Test.lArrFld[i17] *= i18;
                i18 = i18;
                i16 -= i18;
                if (b2) {
                    i19 += (int)(-3559773567044805614L + (i17 * i17));
                    Test.lArrFld[i17 - 1] >>= i18;
                } else {
                    try {
                        i19 = (Test.iArrFld[i17] % Test.iFld);
                        Test.iFld = (52468 / i19);
                        i16 = (7530 % i15);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i17 - 1] -= i15;
                    Test.iFld1 += (i17 | i18);
                }
                if (true) {
                    switch (((i17 % 8) * 5) + 23) {
                    case 26:
                    case 43:
                    case 39:
                        i19 /= (int)(i16 | 1);
                        i18 = i16;
                        for (i20 = 165; i20 > 6; i20 -= 2) {
                            for (i22 = 1; i22 < 3; ++i22) {
                                Test.fFld += i22;
                                by -= (byte)Test.iFld;
                                dArr[i17 - 1] -= Test.iFld;
                                Test.instanceCount -= (long)Test.fFld;
                                Test.dFld = Test.fFld;
                                Test.instanceCount *= i21;
                                by = (byte)i17;
                            }
                        }
                        break;
                    case 36:
                        Test.dFld += i21;
                        break;
                    case 30:
                        Test.dFld -= i22;
                    case 49:
                        Test.iArrFld[i17] = 7;
                    case 48:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 61:
                    default:
                        i16 >>= i16;
                    }
                } else if (true) {
                    Test.instanceCount = (long)Test.fFld;
                } else if (b2) {
                    i18 <<= (int)Test.instanceCount;
                } else {
                    Test.iFld1 <<= -87;
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            i16 += -144;
        }
        finally {
            Test.iArrFld = Test.iArrFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
