package tests.javafuzzer2298;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:39:25 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5L;
    public static int iFld=224;
    public short sFld=11952;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -159);
        FuzzerUtils.init(Test.sArrFld, (short)-14711);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(boolean b1, float f1) {


        f1 /= (Test.instanceCount | 1);
        Test.iFld = (int)f1;
        vMeth_check_sum += (b1 ? 1 : 0) + Float.floatToIntBits(f1);
    }

    public static int iMeth1(double d, int i3, int i4) {

        boolean b2=true, bArr[][]=new boolean[N][N];
        float f2=78.60F;
        int i5=-184, i6=0, i7=66, i8=-47553;

        FuzzerUtils.init(bArr, true);

        vMeth(b2, f2);
        f2 += (float)d;
        i5 = 1;
        while (++i5 < 315) {
            for (i6 = 1; i6 < 5; ++i6) {
                f2 += (i6 * i7);
                Test.instanceCount -= (long)d;
                bArr = bArr;
                Test.iArrFld[i5] = (int)1745736476L;
                i8 = 1;
                do {
                    switch ((((i4 >>> 1) % 1) * 5) + 1) {
                    case 4:
                        i7 += i8;
                        i4 += i5;
                        i4 = i7;
                        i3 += i8;
                        break;
                    }
                    Test.iArrFld[i8] = i7;
                } while (++i8 < 2);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i4 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + i5 + i6 + i7 +
            i8 + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b) {

        int i2=-9, i9=20745, i10=37443, i11=13, i12=-17339, i13=-9314, i14=35370;
        double d1=-48.64781;
        float f3=0.258F;

        Test.iArrFld[(i2 >>> 1) % N] = (int)((iMeth1(d1, i2, -39192) + Test.iFld) - Test.instanceCount);
        Test.instanceCount += Test.instanceCount;
        for (i9 = 3; i9 < 282; ++i9) {
            if (b) break;
            for (i11 = 1; i11 < 6; ++i11) {
                long l=-9L;
                i10 += (i11 * i11);
                l *= i12;
                l <<= 14;
                if (Test.iFld != 0) {
                }
                i12 += (int)l;
                for (i13 = 1; i13 < 2; ++i13) {
                    short s=-11993;
                    i2 += (i13 * i13);
                    i14 += (i13 + i14);
                    s += (short)(((i13 * f3) + s) - Test.instanceCount);
                    f3 -= Test.iFld;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i2 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.546F, f4=-13.255F;
        int i=94, i1=-217, i15=136, i16=0, i17=64586, i18=-6, i19=-54513, i20=-235, iArr[][]=new int[N][N];
        byte by=-31, by1=-76;
        double d2=0.47434;
        boolean b4=false;

        FuzzerUtils.init(iArr, 104);

        f = 1;
        do {
            for (i = 3; i < 126; i++) {
                boolean b3=true;
                long l1=-18086L;
                by -= (byte)((iArr[i + 1][(int)(f)] = iMeth(b3)) - f);
                i1 *= Test.iFld;
                l1 = (long)d2;
                b3 = b3;
                Test.iArrFld[(int)(f + 1)] = (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; i15++) {
                    i16 *= (int)f;
                    i1 <<= -13446;
                    iArr[i + 1][i + 1] = (int)l1;
                    b3 = b3;
                    Test.iFld = i;
                    i16 += i;
                    i16 += i15;
                }
                Test.sArrFld[i + 1] <<= by;
                Test.iFld = i16;
            }
            by1 = (byte)Test.iFld;
        } while (++f < 200);
        for (i17 = 285; i17 > 2; i17--) {
            d2 -= Test.instanceCount;
            for (i19 = 3; i19 < 89; i19++) {
                d2 -= Test.instanceCount;
                f4 = i;
            }
            Test.sArrFld[i17] = (short)f4;
            sFld >>>= (short)Test.instanceCount;
            f4 = i18;
            Test.iFld += Test.iFld;
        }
        if (b4) {
            Test.iFld = (int)Test.instanceCount;
            Test.iFld = (int)Test.instanceCount;
        } else if (b4) {
            d2 *= -23045L;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
