package tests.javafuzzer1029;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:55:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2901394075L;
    public static volatile int iFld=31648;
    public static boolean bArrFld[]=new boolean[N];
    public static volatile float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 127.330F);
        FuzzerUtils.init(Test.iArrFld, -240);
        FuzzerUtils.init(Test.lArrFld, 128055886L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, int i6) {

        int i7=13, i8=-2, i9=11, i10=44911, i11=107;
        float f=52.931F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.109257);

        i5 &= i5;
        i5 <<= (int)Test.instanceCount;
        for (i7 = 223; i7 > 12; i7--) {
            i9 = 1;
            do {
                byte by=-113;
                i8 = by;
                Test.instanceCount = i9;
                dArr[i9 - 1] = f;
                Test.iArrFld[i9] -= (int)-2.475F;
                i5 = Test.iFld;
                i8 -= (int)Test.instanceCount;
                Test.lArrFld = Test.lArrFld;
                switch ((i7 % 4) + 123) {
                case 123:
                    for (i10 = 1; 1 > i10; i10++) {
                        Test.lArrFld[i9] %= -59;
                        i8 = i8;
                    }
                    break;
                case 124:
                    i5 -= 191;
                    break;
                case 125:
                    i4 = Test.iFld;
                case 126:
                    Test.iArrFld[i9 + 1] >>= (int)Test.instanceCount;
                    break;
                default:
                    Test.instanceCount = i10;
                }
            } while (++i9 < 8);
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth1(int i3, double d1, long l) {

        double d2=-2.100829;

        d2 = 316;
        do {
            vMeth2(i3, -54, Test.iFld);
        } while (--d2 > 0);
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + l + Double.doubleToLongBits(d2);
    }

    public void vMeth() {

        int i=15486, i1=12, i2=13, i12=-9004, i13=-254, i14=-64375, iArr1[]=new int[N];
        double d=125.40136;
        float f1=-2.634F;

        FuzzerUtils.init(iArr1, 8);

        for (i = 12; 348 > i; i++) {
            i2 = 1;
            do {
                Test.iFld = 4;
                i1 += (i2 - i2);
                iArr1[i2] |= (int)Test.instanceCount;
                Test.bArrFld[i] = (Math.abs(Test.fArrFld[i + 1] = i2) >= Integer.reverseBytes(++i1));
            } while (++i2 < 5);
            d *= (++iArr1[i + 1]);
            vMeth1(Test.iFld, d, Test.instanceCount);
            Test.instanceCount = i;
        }
        for (f1 = 3; f1 < 288; f1++) {
            Test.iFld = i;
            d = f1;
            for (i13 = 1; i13 < 6; ++i13) {
                i1 = i;
                iArr1[i13] = i13;
            }
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f2=1.736F;
        int i15=-58182, i16=-102, i17=45764, i18=-5945, i19=85, i20=8655, i21=56, iArr[]=new int[N];
        double d3=-2.31756;
        byte by1=106;
        short s=-7407;
        boolean b=false;
        long l1=-1004374420722050644L;

        FuzzerUtils.init(iArr, 135);

        Test.iFld = (int)((Test.instanceCount++) << (iArr[(Test.iFld >>> 1) % N]++));
        Test.instanceCount *= (--iArr[(-35813 >>> 1) % N]);
        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth();
        if (b) {
            f2 -= Test.iFld;
        } else if (b) {
            i15 = 1;
            do {
                d3 *= i15;
                if (b) {
                    for (i16 = 5; i16 < 93; i16++) {
                        Test.iFld += (i16 ^ Test.instanceCount);
                        for (i18 = 1; 2 > i18; ++i18) {
                            Test.iFld += Test.iFld;
                            iArr[(48 >>> 1) % N] |= Test.iFld;
                            by1 >>= by1;
                            i19 <<= i19;
                            Test.instanceCount >>= i17;
                            i17 = i15;
                            iArr[i16 + 1] = (int)Test.instanceCount;
                            try {
                                i17 = (i18 / Test.iArrFld[i15 - 1]);
                                Test.iFld = (i17 % i18);
                                i19 = (iArr[i15 - 1] / -38014);
                            } catch (ArithmeticException a_e) {}
                            s += (short)(((i18 * Test.iFld) + i15) - i19);
                        }
                    }
                    for (i20 = 1; i20 < 93; ++i20) {
                        Test.iArrFld[i20] += (int)Test.instanceCount;
                        f2 += (((i20 * i18) + Test.instanceCount) - s);
                        s += (short)(i20 * i20);
                        by1 = (byte)i17;
                        i17 -= i17;
                        i21 = i19;
                        i17 = i20;
                    }
                    if (b) break;
                } else {
                    l1 = Test.iFld;
                }
            } while (++i15 < 269);
        } else {
            d3 += d3;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
