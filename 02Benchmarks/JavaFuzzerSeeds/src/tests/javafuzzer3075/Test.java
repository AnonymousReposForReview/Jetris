package tests.javafuzzer3075;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 01:32:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=52L;
    public static int iFld=1;
    public static float fFld=-57.233F;
    public static short sFld=-26675;
    public static byte byFld=53;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i5) {

        int i6=-2257, i7=62, i8=62339, i9=-247, i10=-2, i11=-1;

        for (i6 = 8; i6 < 197; ++i6) {
            for (i8 = 1; i8 < 8; i8++) {
                i9 += 14993;
                Test.sFld >>>= (short)Test.instanceCount;
                i7 += i8;
                Test.iFld = (int)227L;
                i7 /= (int)(i6 | 1);
                i9 += (((i8 * i8) + i7) - Test.byFld);
            }
            Test.fFld += i9;
            for (i10 = 1; i10 < 8; i10++) {
                i9 += (i10 * i10);
                i5 >>= i9;
                Test.sFld += (short)(i10 * i10);
                i7 += (int)Test.fFld;
                i9 &= i5;
            }
        }
        vMeth2_check_sum += l + i5 + i6 + i7 + i8 + i9 + i10 + i11;
    }

    public static void vMeth1() {

        int i3=36790, i4=3, i12=-19942, i13=158, iArr1[]=new int[N];
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -4);
        FuzzerUtils.init(lArr, 7197661088048128217L);
        FuzzerUtils.init(dArr, 43.86415);

        for (i3 = 1; 270 > i3; i3 += 3) {
            i4 -= (int)(Test.fFld--);
            switch ((i3 % 6) + 102) {
            case 102:
                i4 += (i3 - Test.iFld);
                vMeth2(40790L, Test.iFld);
                Test.byFld += (byte)(i3 - Test.iFld);
                i4 += (int)Test.fFld;
                break;
            case 103:
                iArr1[i3 + 1] += (int)-41565L;
                break;
            case 104:
                for (i12 = 17; i12 > 1; --i12) {
                    i4 <<= -42323;
                    lArr[i3] = i12;
                    Test.byFld = Test.byFld;
                    i13 >>= (int)Test.instanceCount;
                    dArr[i3 + 1] = i12;
                    Test.fFld = i13;
                }
                break;
            case 105:
                if (b) continue;
                break;
            case 106:
                i13 -= i12;
                break;
            case 107:
                try {
                    iArr1[i3] = (54 / i3);
                    i13 = (i12 / i4);
                    iArr1[i3 - 1] = (47543 % iArr1[i3]);
                } catch (ArithmeticException a_e) {}
            default:
                i13 += i3;
            }
        }
        vMeth1_check_sum += i3 + i4 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, int i1, int i2) {

        int i14=-40175, iArr2[]=new int[N];
        double d=-1.119322;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr2, -63129);
        FuzzerUtils.init(fArr, 0.9F);

        vMeth1();
        Test.instanceCount += i1;
        i2 = 17466;
        i14 = 1;
        while (++i14 < 234) {
            i1 += i14;
        }
        for (int i15 : iArr2) {
            Test.instanceCount %= (Test.instanceCount | 1);
            Test.iFld *= (int)Test.instanceCount;
            Test.instanceCount -= (long)Test.fFld;
        }
        d -= Test.iFld;
        fArr[(i14 >>> 1) % N][(i2 >>> 1) % N] += Test.sFld;
        i -= i1;
        i1 -= (int)11L;
        Test.instanceCount *= Test.iFld;
        iArr2 = iArr2;
        vMeth_check_sum += i + i1 + i2 + i14 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=-1, i17=-6768, i18=-33482, i19=-9, iArr[]=new int[N];
        double d1=-82.130581;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 59603);
        FuzzerUtils.init(lArr1, -83L);

        Test.iFld *= (-(iArr[(Test.iFld >>> 1) % N] + Integer.reverseBytes(-12)));
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        for (long l1 : lArr1) {
            for (i16 = 1; i16 < 63; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    switch (((i16 % 8) * 5) + 109) {
                    case 111:
                        i19 *= -113;
                        l1 = i18;
                    case 121:
                        i19 += (61915 + (i18 * i18));
                        Test.iFld = 43564;
                        Test.iFld -= i19;
                        Test.iFld = i16;
                        break;
                    case 118:
                        iArr = iArr;
                        i19 = i19;
                        break;
                    case 135:
                        d1 -= i19;
                        break;
                    case 128:
                        Test.instanceCount /= ((long)(d1) | 1);
                        Test.iFld += i18;
                    case 115:
                        i19 *= (int)14L;
                        Test.iFld = i19;
                        switch ((i16 % 1) + 4) {
                        case 4:
                            switch ((i16 % 2) + 115) {
                            case 115:
                                i17 += (-5 + (i18 * i18));
                                i19 += (i18 * i18);
                                break;
                            case 116:
                                iArr[i16 - 1] = i18;
                                break;
                            default:
                                Test.fFld -= i17;
                                i19 *= (int)Test.fFld;
                                i17 += (i18 * i18);
                                iArr[i18 - 1] <<= Test.iFld;
                            }
                            iArr = iArr;
                            d1 *= Test.iFld;
                        }
                    case 133:
                        Test.iFld -= i18;
                        break;
                    case 142:
                        d1 += Test.instanceCount;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
