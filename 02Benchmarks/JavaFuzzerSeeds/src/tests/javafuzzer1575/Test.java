package tests.javafuzzer1575;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 23:13:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26522L;
    public static int iFld=-81;
    public static float fFld=0.135F;
    public static double dFld=-34.99123;
    public static volatile byte byFld=-20;
    public static short sFld=31720;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2, short s) {

        int i3=253, i4=2, i5=22494, i6=104, i7=-13951, iArr[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N], lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, -8451562221350537993L);
        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(dArr, -1.115315);
        FuzzerUtils.init(lArr1, 8L);

        i3 = 1;
        while (++i3 < 359) {
            for (i4 = 1; i4 < 5; i4++) {
                i5 /= 143;
                lArr[i3] >>= -3591725492L;
                for (i6 = 2; i6 > 1; i6 -= 3) {
                    if (b) {
                        s -= (short)Test.instanceCount;
                        iArr[i6 - 1] = i7;
                    } else if (b) {
                        Test.instanceCount += (((i6 * Test.fFld) + Test.iFld) - i5);
                    } else {
                        Test.fFld = i7;
                        dArr[i4] /= (Test.iFld | 1);
                    }
                    Test.instanceCount -= 97;
                    l += (i6 ^ (long)Test.fFld);
                    if (i2 != 0) {
                        vMeth1_check_sum += l + i2 + s + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                }
                lArr1[i3 + 1] *= -14;
            }
        }
        vMeth1_check_sum += l + i2 + s + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(double d, int i, int i1) {

        int i8=92, i9=91, iArr1[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 139L);
        FuzzerUtils.init(iArr1, 9);

        vMeth1(Test.instanceCount, -5, (short)(9089));
        i8 = 1;
        do {
            lArr2[i8 - 1] <<= 64387;
            if (true) break;
            i9 <<= -33;
            iArr1[i8 + 1] -= i9;
        } while (++i8 < 205);
        Test.instanceCount -= (long)Test.fFld;
        i += 62687;
        iArr1[(i >>> 1) % N] += i9;
        Test.instanceCount -= Test.instanceCount;
        i9 <<= (int)Test.instanceCount;
        Test.fFld = -200;
        Test.fFld = i8;
        i1 = (int)-11L;
        Test.iFld = (int)Test.fFld;
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i8 + i9 + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth() {

        int i10=1, i11=-11825, i12=-48252, i13=14, i14=15241;
        byte by=-98;
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(dArr1, 91.21491);

        Test.iFld ^= (int)(((Test.instanceCount - Test.fFld) * (--Test.dFld)) + 18403);
        vMeth(-34.39274, Test.iFld, Test.iFld);
        for (i10 = 15; i10 < 310; i10++) {
            Test.iFld = by;
            i11 -= (int)-61.87883;
            Test.iFld &= i10;
            if (i11 != 0) {
            }
            for (i12 = 1; i12 < 6; ++i12) {
                switch ((((i10 >>> 1) % 2) * 5) + 46) {
                case 49:
                    Test.instanceCount = i12;
                    Test.fFld = i10;
                    i14 = 1;
                    do {
                        i13 <<= (int)6L;
                    } while (++i14 < 2);
                    break;
                case 53:
                    dArr1[i10][i10 - 1] += i13;
                    Test.instanceCount = i14;
                    break;
                }
            }
        }
        long meth_res = i10 + i11 + by + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-162, i16=-35371, i18=-12, i19=-4, i20=249, i21=118, i22=-53017;
        float f=-124.762F;
        boolean b1=true;
        long lArr3[]=new long[N];
        double dArr2[][]=new double[N][N];

        FuzzerUtils.init(lArr3, -130L);
        FuzzerUtils.init(dArr2, -1.3992);

        Test.instanceCount = (byMeth() + -8L);
        for (i15 = 3; i15 < 190; i15++) {
            Test.byFld -= (byte)Test.fFld;
        }
        Test.iFld += Test.iFld;
        Test.iFld -= (int)-8.1000F;
        Test.iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        i16 >>>= (int)Test.instanceCount;
        for (i18 = 19; i18 < 346; ++i18) {
            Test.iFld += (((i18 * i19) + i15) - i15);
            for (i20 = 4; i20 < 77; i20++) {
                Test.iArrFld[i18 - 1] += (int)Test.fFld;
                lArr3 = lArr3;
                for (f = 1; f < 2; ++f) {
                    dArr2[(int)(f + 1)][i20 - 1] = i21;
                    lArr3[(int)(f)] -= Test.iFld;
                    i22 = Test.iFld;
                    switch (((5 >>> 1) % 6) + 38) {
                    case 38:
                        Test.instanceCount += (long)(((f * i16) + i21) - i22);
                        Test.fFld -= -214;
                        switch ((i18 % 7) + 52) {
                        case 52:
                            Test.dFld = i22;
                            Test.iFld -= i16;
                            if (b1) break;
                            i22 = i22;
                            break;
                        case 53:
                            Test.sFld = (short)i21;
                            break;
                        case 54:
                            i22 = Test.iFld;
                            if (b1) {
                                Test.instanceCount += (long)Test.dFld;
                                i21 += (int)Test.fFld;
                                i19 += i16;
                            } else {
                                Test.sFld *= (short)i22;
                            }
                            break;
                        case 55:
                            i16 *= i20;
                        case 56:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 57:
                            i22 += (int)f;
                            break;
                        case 58:
                            Test.dFld += i15;
                        default:
                            Test.fFld = f;
                        }
                        break;
                    case 39:
                        b1 = b1;
                    case 40:
                        i19 = (int)Test.instanceCount;
                        break;
                    case 41:
                        i19 = i16;
                        break;
                    case 42:
                        Test.instanceCount = i20;
                        break;
                    case 43:
                        b1 = true;
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
