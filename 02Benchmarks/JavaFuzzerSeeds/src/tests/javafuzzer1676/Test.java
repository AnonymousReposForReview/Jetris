package tests.javafuzzer1676;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1814L;
    public static int iFld=-151;
    public volatile double dFld=0.97257;
    public byte byFld=-104;
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {


        i8 -= i8;
        vMeth1_check_sum += i8;
    }

    public static long lMeth(int i4) {

        int i5=-19937, i6=-29015, i7=10, i9=-58, i10=-149, i11=19254, i12=48, iArr[][]=new int[N][N];
        float f=2.101F, fArr[]=new float[N];
        byte by=-36;
        double d2=77.60388;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, 12038L);
        FuzzerUtils.init(fArr, 83.638F);

        iArr[(i4 >>> 1) % N] = (iArr[(i4 >>> 1) % N] = (iArr[(i5 >>> 1) % N] = (iArr[(i4 >>> 1) % N] = iArr[(i5 >>> 1)
            % N])));
        for (i6 = 9; i6 < 164; ++i6) {
            Test.instanceCount = lArr[i6][i6 - 1];
            Test.instanceCount = ((Test.instanceCount += (191 - (i4 * -13L))) * iArr[i6 - 1][i6]);
            i7 = (int)(((-254L - (24.50056 + fArr[i6])) / ((i4 - i4) | 1)) * Test.instanceCount);
        }
        vMeth1(i6);
        f += i6;
        for (i9 = 186; i9 > 3; i9 -= 3) {
            by *= (byte)i10;
            if (i5 != 0) {
            }
            Test.instanceCount = 7671;
            d2 += d2;
            for (i11 = i9; i11 < 25; i11++) {
                f = i11;
                Test.instanceCount += (i11 * i11);
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i9 + i10 + by + Double.doubleToLongBits(d2) + i11
            + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(boolean b, double d, long l) {

        int i=-11, i1=29174, i2=-41, i3=-62978, i13=31, i14=-123, iArr1[]=new int[N];
        double d1=-117.95806;

        FuzzerUtils.init(iArr1, 57092);

        i ^= i;
        for (d1 = 9; d1 < 262; ++d1) {
            for (i2 = (int)(d1); i2 < 6; ++i2) {
                if (Math.max((int)(lMeth(-1364) - l), i3) < i1) break;
                Test.instanceCount = i2;
                iArr1[(int)(d1 + 1)] = Test.iFld;
                if (true) continue;
                iArr1[i2 + 1] = (int)-98.55196;
                i3 += (int)Test.instanceCount;
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.instanceCount >>= 22435;
                    lArrFld[i13] = (long)d;
                    if (b) {
                        Test.iFld += (i13 * i13);
                        l = Test.instanceCount;
                    } else {
                        if (b) continue;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + l + i + Double.doubleToLongBits(d1) + i1 + i2 +
            i3 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        boolean b1=true;
        double d3=2.8210;
        short s=-27130;
        float f1=71.435F, fArr1[]=new float[N];
        int i15=30, i16=-9, i17=-245, i18=64934, i19=60811, i20=10, i21=57170, i22=-42348, i23=168;

        FuzzerUtils.init(fArr1, -2.1F);

        vMeth(b1, dFld, Test.instanceCount);
        d3 = 1;
        do {
            Test.iFld >>= s;
            dFld = Test.iFld;
            Test.iFld = (int)f1;
            for (i15 = 4; i15 < 80; i15++) {
                Test.instanceCount += byFld;
                Test.iFld |= (int)Test.instanceCount;
                Test.iFld += (((i15 * Test.instanceCount) + i16) - Test.iFld);
                i17 = 1;
                while (++i17 < 2) {
                    i16 += (i17 * i17);
                    i16 += Test.iFld;
                    iArrFld[(int)(d3 + 1)] *= i17;
                }
                for (i18 = 1; i18 < 2; i18++) {
                    fArr1 = fArr1;
                }
                f1 += Test.instanceCount;
                iArrFld[(int)(d3 - 1)] >>>= (int)Test.instanceCount;
                byFld += (byte)i18;
            }
            for (i20 = 1; 80 > i20; i20++) {
                i22 = 1;
                do {
                    s = (short)f1;
                    iArrFld[i22] *= i19;
                    Test.instanceCount += (((i22 * i17) + i20) - i21);
                    if (b1) break;
                    f1 -= 121;
                } while (++i22 < 2);
                i21 = i22;
                Test.instanceCount += (i20 * i20);
                i23 = 2;
                while ((i23 -= 2) > 0) {
                    i19 <<= i20;
                    i21 = i15;
                }
            }
        } while (++d3 < 313);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
