package tests.javafuzzer300;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 01:29:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-37009L;
    public static volatile double dFld=27.27457;
    public static int iFld=-11689;
    public volatile float fFld=-2.779F;
    public static float fFld1=-36.961F;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[][]=new byte[N][N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 199);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        float f2=-105.1018F;
        long l2=152L, l3=-2911962729L;
        int i6=51637, i7=13, i8=231, i9=10, i10=6415, i11=-11;
        short s1=-1725;

        f2 = Test.iFld;
        for (l2 = 12; l2 < 225; l2++) {
            f2 = Test.iFld;
            switch ((((i6 >>> 1) % 4) * 5) + 120) {
            case 140:
                i6 += (int)(l2 | Test.iFld);
                for (l3 = 1; 8 > l3; ++l3) {
                    i5 += (int)(l3 - i5);
                    Test.instanceCount += (((l3 * Test.iFld) + i7) - i6);
                    try {
                        Test.iArrFld[(int)(l3 - 1)] = (Test.iFld % 530270700);
                        i7 = (-17308 % Test.iArrFld[(int)(l3)]);
                        Test.iArrFld[(int)(l3 + 1)] = (Test.iFld / -32378);
                    } catch (ArithmeticException a_e) {}
                    for (i8 = 1; i8 < 2; ++i8) {
                        i6 = i7;
                    }
                }
                i9 *= (int)f2;
            case 130:
                for (i10 = 1; i10 < 8; i10 += 3) {
                    i7 = (int)Test.instanceCount;
                    i11 -= 3103;
                }
                break;
            case 132:
                i9 += i9;
                break;
            case 133:
                s1 = (short)-5;
                break;
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f2) + l2 + i6 + l3 + i7 + i8 + i9 + i10 + i11 + s1;
    }

    public static void vMeth1(long l, short s) {

        float f1=2.960F, f3=88.207F;
        int i12=248, i13=-37448;
        byte by=33;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5L);

        for (long l1 : lArr) {
            Test.dFld *= ((Test.iFld++) ^ s);
            f1 -= Test.iFld;
            vMeth2(Test.iFld);
            Test.iFld = Test.iFld;
            Test.instanceCount = 58;
            Test.iFld ^= Test.iFld;
        }
        f3 = 1;
        while (++f3 < 296) {
            Test.iFld = Test.iFld;
            Test.instanceCount += (long)f3;
            for (i12 = 1; i12 < 6; i12 += 2) {
                Test.dFld -= i12;
                l &= i13;
                i13 -= s;
                i13 += (((i12 * l) + i13) - by);
            }
        }
        vMeth1_check_sum += l + s + Float.floatToIntBits(f1) + Float.floatToIntBits(f3) + i12 + i13 + by +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i) {

        int i1=-47, i2=1, i3=-5, i4=14, i14=8;
        float f=16.646F;
        short s2=26972;

        i >>= (int)(Test.instanceCount++);
        for (i1 = 8; i1 < 155; ++i1) {
            double d=1.77056;
            d -= (f * ((Test.instanceCount - -2) - (i2 - f)));
            for (i3 = 1; i3 < 11; i3++) {
                vMeth1(Test.instanceCount, (short)(-7504));
                Test.instanceCount = i14;
                try {
                    Test.iArrFld[i1 - 1] = (i3 % 5);
                    i14 = (i1 % Test.iArrFld[i3]);
                    Test.iArrFld[i3 - 1] = (Test.iFld / -10334);
                } catch (ArithmeticException a_e) {}
                i += (((i3 * i) + s2) - Test.instanceCount);
                i <<= 12344;
                Test.iArrFld[i3 - 1] = i1;
                i4 = 31271;
                Test.instanceCount += (((i3 * Test.iFld) + i) - Test.instanceCount);
            }
            i14 += i1;
            Test.iArrFld[i1 + 1] >>= i3;
            i += i1;
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i14 + s2;
    }

    public void mainTest(String[] strArr1) {

        int i15=51604, i16=-206, i17=196, i18=3568, i19=11, i20=-4;
        boolean b=false;

        vMeth(Test.iFld);
        Test.iFld ^= Test.iFld;
        Test.iFld -= -12768;
        Test.iFld = (int)fFld;
        byArrFld[(Test.iFld >>> 1) % N][(182 >>> 1) % N] *= (byte)fFld;
        lArrFld[(Test.iFld >>> 1) % N] += -197;
        i15 = 1;
        while (++i15 < 162) {
            Test.iFld -= i15;
            if (false) continue;
            Test.instanceCount -= -8;
        }
        Test.iArrFld[(-106 >>> 1) % N] += (int)Test.instanceCount;
        for (i16 = 1; 125 > i16; i16 += 2) {
            for (i18 = i16; i18 < 146; i18++) {
                Test.iFld += (i18 ^ i16);
                b = true;
                i20 = 1;
                do {
                    Test.iFld |= (int)-149598202L;
                    Test.instanceCount += i20;
                    if (b) continue;
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld >>= i17;
                } while (++i20 < 2);
                try {
                    i17 = (-118 % i17);
                    i17 = (i16 / i18);
                    Test.iFld = (i17 % -56312);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = (long)Test.dFld;
                try {
                    i19 = (Test.iFld / 32);
                    Test.iFld = (Test.iArrFld[i18] / Test.iFld);
                    Test.iArrFld[i18 - 1] = (i18 % i18);
                } catch (ArithmeticException a_e) {}
                fFld += i15;
                Test.iFld += (int)Test.fFld1;
                if (true) break;
            }
            Test.dFld -= Test.instanceCount;
            Test.iFld = i15;
            i19 += 4373;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
