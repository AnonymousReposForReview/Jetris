package tests.javafuzzer1683;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-11L;
    public int iFld=-39624;
    public volatile int iFld1=-167;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2279);
        FuzzerUtils.init(Test.lArrFld, -22451L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b) {

        int i10=-5797, i11=-55950, i12=45416, i13=-6, i14=11, i15=-3;
        float f=-119.893F;
        byte by=-17;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -10022L);

        Test.instanceCount = i10;
        Test.iArrFld[(i10 >>> 1) % N][(i10 >>> 1) % N] *= i10;
        i10 = i10;
        i10 <<= i10;
        i10 -= (int)f;
        for (i11 = 17; i11 < 349; ++i11) {
            Test.instanceCount = Test.instanceCount;
            i13 = 1;
            do {
                for (i14 = i11; i14 < 1; ++i14) {
                    lArr[i11 + 1][i14 + 1] = i15;
                }
                if (i13 != 0) {
                }
                Test.iArrFld[i13][i13 + 1] &= -20660;
                by <<= (byte)Test.instanceCount;
                b = b;
                i10 += (((i13 * i13) + i12) - i14);
            } while (++i13 < 5);
        }
        long meth_res = (b ? 1 : 0) + i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + by +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(long l1) {

        int i8=91, i9=31074, i16=217, i17=-42096, i18=-11, i19=188, iArr[]=new int[N];
        double d1=0.39561;
        boolean b1=true;
        byte by1=-120;

        FuzzerUtils.init(iArr, 13);

        for (i8 = 2; i8 < 265; i8++) {
            i9 = (int)(i9 = (int)((-(i9 - d1)) - Math.min(10L, Test.instanceCount)));
            if (i9 != 0) {
            }
            i9 += (i8 * i8);
            l1 |= l1;
            iArr[(i9 >>> 1) % N] = (int)(Test.instanceCount - (iMeth(b1) * -92.431F));
            Test.instanceCount = l1;
            i9 /= (int)(by1 | 1);
            l1 *= i8;
            Test.lArrFld[i8] = l1;
        }
        for (i16 = 7; i16 < 354; i16++) {
            for (i18 = 1; 5 > i18; i18++) {
                i17 += by1;
                Test.iArrFld[i16 - 1][i16] *= (int)Test.instanceCount;
                i9 += (i18 + i19);
            }
        }
        long meth_res = l1 + i8 + i9 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + by1 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i, long l, int i1) {

        int i2=-53924, i3=233, i4=99, i5=58, i6=31747, i7=-218;
        double d=-2.1862;

        for (i2 = 1; 128 > i2; i2++) {
            for (i4 = i2; i4 < 12; i4++) {
                boolean b2=false;
                i5 -= i2;
                for (i6 = 1; 1 > i6; i6++) {
                    i3 += (i6 * i6);
                    d += dMeth(Test.instanceCount);
                    i7 -= i7;
                    l /= -7885;
                    i5 = (int)Test.instanceCount;
                }
                i = i2;
                i3 -= -149;
                if (false) {
                    i3 = 24503;
                    i5 -= (int)Test.instanceCount;
                    i3 |= i1;
                } else if (b2) {
                    l <<= -14493;
                } else if (b2) {
                    i5 += (((i4 * Test.instanceCount) + l) - i7);
                }
            }
        }
        vMeth_check_sum += i + l + i1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i20=103, i21=-228, i22=104, i23=83;
        double d2=88.99297;
        float f1=-1.351F;
        short s=-22971, sArr[]=new short[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr, (short)28530);

        vMeth(iFld, 8429844459621407836L, 20550);
        for (i20 = 2; i20 < 321; ++i20) {
            i21 = (int)-8.87959;
            i21 -= i21;
            i22 = 79;
            do {
                Test.instanceCount += i22;
                Test.iArrFld[i22 + 1][i20] = iFld;
                Test.iArrFld[i20 - 1][i20 - 1] = i22;
                d2 = i20;
                Test.iArrFld[i20][i22 - 1] += (int)Test.instanceCount;
                iFld += i22;
                d2 += Test.instanceCount;
                switch ((i20 % 10) + 5) {
                case 5:
                    iFld -= (int)Test.instanceCount;
                    iFld = iFld;
                    iFld = 14;
                    break;
                case 6:
                    i23 = 1;
                    while (++i23 < 2) {
                        bArr = bArr;
                        Test.instanceCount = iFld;
                        d2 += iFld1;
                        iFld1 = (int)-9013766941839734460L;
                        iFld -= (int)-13L;
                        i21 *= i22;
                        Test.instanceCount += (((i23 * Test.instanceCount) + i22) - i20);
                        Test.instanceCount = Test.instanceCount;
                        Test.iArrFld[i20 - 1][i20] += i23;
                    }
                    sArr[i20 + 1] += (short)i21;
                    d2 = i22;
                    break;
                case 7:
                    i21 -= (int)-29037L;
                    iFld <<= (int)77192337L;
                    break;
                case 8:
                    d2 += 37;
                    break;
                case 9:
                    iFld += (i22 * i22);
                case 10:
                    Test.instanceCount += (i22 + i23);
                    break;
                case 11:
                    iFld *= (int)f1;
                    break;
                case 12:
                    s = (short)i21;
                    break;
                case 13:
                    Test.instanceCount += i20;
                    break;
                case 14:
                    f1 = i20;
                    break;
                default:
                    d2 *= i23;
                }
            } while ((i22 -= 2) > 0);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
