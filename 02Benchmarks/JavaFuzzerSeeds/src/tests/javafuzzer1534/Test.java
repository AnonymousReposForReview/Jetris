package tests.javafuzzer1534;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:11:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3603845296490108292L;
    public int iFld=27748;
    public static boolean bFld=true;
    public static long lFld=3185362194005512287L;
    public static long lFld1=-6L;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-3);
        FuzzerUtils.init(Test.iArrFld, -91);
        FuzzerUtils.init(Test.dArrFld, 1.79615);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, int i7) {

        long l=-25960L;
        double d=126.75359, d1=-28.68421;
        int i8=-7, i9=27340, i10=26666, i11=206, i12=-22645, i13=-15485;
        boolean b=true;

        l = (long)d;
        i8 = 1;
        while (++i8 < 128) {
            l = i5;
            b = b;
            if (b) break;
            if (i7 != 0) {
                vMeth1_check_sum += i5 + i6 + i7 + l + Double.doubleToLongBits(d) + i8 + (b ? 1 : 0) +
                    Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13;
                return;
            }
        }
        for (d1 = 8; d1 < 356; d1++) {
            for (i10 = 1; i10 < 5; ++i10) {
                Test.byArrFld[i10 - 1] = (byte)Test.instanceCount;
                i12 = 1;
                while ((i12 += 2) < 2) {
                    Test.iArrFld = Test.iArrFld;
                    i6 = (int)d1;
                    Test.iArrFld[(int)(d1 + 1)] = Test.iArrFld[i12];
                    i9 += i13;
                    Test.iArrFld[i10][i10] = (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + l + Double.doubleToLongBits(d) + i8 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13;
    }

    public static void vMeth() {

        int i4=51426, i14=10822, i15=9;
        float f1=-1.706F;
        short s=3369;
        double d2=2.13169;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2809851846L);

        i4 = 1;
        do {
            f1 += (((i4 * f1) + Test.instanceCount) - i4);
            vMeth1(i4, 203, i4);
            for (i14 = 1; i14 < 9; i14++) {
                int i16=14;
                i15 >>= i15;
                lArr1[i14 - 1] -= i4;
                Test.instanceCount += i14;
                Test.bFld = true;
                i15 = (int)Test.instanceCount;
                s += (short)(((i14 * Test.instanceCount) + i4) - Test.instanceCount);
                try {
                    i15 = (i4 % i16);
                    i15 = (i14 % i16);
                    i16 = (-20121 / i14);
                } catch (ArithmeticException a_e) {}
            }
            i15 = i14;
            f1 = (float)d2;
            i15 += (-6095 + (i4 * i4));
        } while (++i4 < 182);
        i15 -= (int)d2;
        vMeth_check_sum += i4 + Float.floatToIntBits(f1) + i14 + i15 + s + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(float f, int i2, int i3) {


        vMeth();
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i2 + i3;
    }

    public void mainTest(String[] strArr3) {

        int i=44313, i1=102, i17=10, i18=6, i19=39, i20=-14, i21=17593, i22=59684, i23=-4;
        byte by=14;
        float f2=2.680F, fArr1[]=new float[N];
        short s1=3840;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -23128L);
        FuzzerUtils.init(fArr1, 0.123F);

        lArr[(iFld >>> 1) % N] -= (long)47.845F;
        for (i = 222; i > 13; i--) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(-2.43F, -44883, i1);
            iFld = (int)3510183800024349667L;
            if (Test.bFld) break;
        }
        by >>>= (byte)i;
        by = (byte)i;
        f2 -= -37;
        try {
            Test.instanceCount -= -15450;
        }
        catch (UserDefinedExceptionTest exc1) {
            iFld >>= (int)-6850L;
            for (i17 = 8; i17 < 254; i17++) {
                try {
                    i1 = (55897 % i1);
                    i1 = (i1 % i18);
                    i18 = (i1 / i);
                } catch (ArithmeticException a_e) {}
                iFld += (i17 | i18);
            }
            fArr1[(i >>> 1) % N] *= Test.instanceCount;
        }
        finally {
            i18 *= i18;
            for (i19 = 11; 181 > i19; i19 += 2) {
                switch (((i19 % 2) * 5) + 37) {
                case 42:
                    fArr1[i19] -= by;
                    Test.lFld = iFld;
                    for (i21 = 295; i21 > 6; i21 -= 3) {
                        i20 += i21;
                    }
                    i18 >>>= s1;
                    break;
                case 40:
                    Test.dArrFld[i19 - 1] = by;
                    break;
                }
                i23 = 1;
                while (++i23 < 295) {
                    Test.instanceCount = -3;
                    f2 += i21;
                    by = (byte)f2;
                    Test.lFld1 += 7;
                    fArr1[i23 - 1] += i22;
                }
            }
        }

    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
