package tests.javafuzzer3478;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 09:05:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=46497L;
    public static volatile int iFld=16;
    public static double dFld=2.66373;
    public float fFld=-2.478F;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=20390, i7=-1433, i8=5, i9=-15615, iArr[][]=new int[N][N];
        float f1=94.515F, f2=1.297F;

        FuzzerUtils.init(iArr, -87);

        i6 = 1;
        do {
            Test.iFld += (i6 * i6);
            Test.iFld -= Test.iFld;
            iArr[i6 + 1][i6] >>= 2;
        } while (++i6 < 225);
        Test.iFld = Test.iFld;
        Test.dFld = Test.instanceCount;
        Test.iFld = -122;
        f1 += i6;
        for (f2 = 3; f2 < 262; ++f2) {
            Test.iFld *= (int)Test.instanceCount;
            i7 += (int)(-60267L + (f2 * f2));
            for (i8 = 1; 6 > i8; ++i8) {
                Test.iFld <<= i9;
                iArr[(int)(f2)][(int)(f2)] *= (int)f1;
                Test.iFld += (i8 * f2);
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(byte by, int i5, float f) {

        int i10=79, i11=2, i12=49614, i13=47160, i14=-40;
        boolean b=false, bArr[]=new boolean[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)-111);

        Test.iFld -= (int)(f++);
        Test.iFld = ((--i5) + Test.iFld);
        vMeth1();
        for (i10 = 19; i10 < 371; ++i10) {
            i11 += (int)Test.instanceCount;
            i11 = (int)Test.instanceCount;
            i12 = 1;
            while (++i12 < 5) {
                i5 = (int)Test.instanceCount;
                Test.instanceCount += (long)Test.dFld;
                bArr[i12 - 1] = b;
                Test.instanceCount = i10;
                for (i13 = 1; 1 > i13; i13++) {
                    f = i11;
                    if (b) break;
                    byArr[i10 + 1] >>= (byte)i13;
                }
            }
        }
        vMeth_check_sum += by + i5 + Float.floatToIntBits(f) + i10 + i11 + i12 + (b ? 1 : 0) + i13 + i14 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
    }

    public int iMeth() {

        int i=110, i1=-254, i2=-8, i3=21037, i4=13, i15=-225, i16=-34307, iArr1[]=new int[N];
        byte by1=-33;
        long l=-36408L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(fArr, 0.837F);

        for (i = 3; 329 > i; i++) {
            i2 += i1;
            for (i3 = i; i3 < 5; i3++) {
                vMeth(by1, i3, fFld);
                i2 = i1;
                Test.iFld |= (int)Test.instanceCount;
                iArr1[i + 1] = (int)l;
                fArr[i3] -= -2367;
                i15 = 1;
                do {
                    l = i15;
                    i4 += (int)l;
                    i1 = i2;
                    i16 += i3;
                    i2 = i4;
                    iArr1 = iArr1;
                } while (--i15 > 0);
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + by1 + l + i15 + i16 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.83042;
        int i17=-5, i18=-12, i19=-22, i20=7, i21=100, i22=-39, i23=-16449, i24=10949, i25=244, iArr2[]=new int[N];
        byte by2=79;
        short s=-2074;
        boolean b2=true;

        FuzzerUtils.init(iArr2, -145);

        Test.iFld = (int)((Test.iFld + (d++)) + (iMeth() + -14971));
        iArr2[(Test.iFld >>> 1) % N] -= (int)Test.instanceCount;
        iArr2 = iArr2;
        Test.iFld = (int)Test.instanceCount;
        for (i17 = 14; 263 > i17; i17++) {
            i18 = (int)fFld;
            Test.iFld <<= i18;
        }
        try {
            Test.iFld = by2;
        }
        catch (UserDefinedExceptionTest exc1) {
            i18 *= -9;
        }
        finally {
            for (i19 = 8; i19 < 169; i19++) {
                fFld += Test.instanceCount;
                i21 = 1;
                while (++i21 < 156) {
                    Test.iFld *= Test.iFld;
                    i20 = (int)Test.instanceCount;
                    d *= -7;
                    i20 >>= i19;
                    d = fFld;
                    i18 = (int)Test.instanceCount;
                }
                i20 >>= i21;
                try {
                    i18 = (71 / i21);
                    i20 = (i17 / 28981);
                    iArr2[i19 + 1] = (i17 / i21);
                } catch (ArithmeticException a_e) {}
                for (i22 = 4; i22 < 156; ++i22) {
                    boolean b1=true;
                    switch ((i22 % 6) + 98) {
                    case 98:
                        switch ((((i20 >>> 1) % 1) * 5) + 18) {
                        case 22:
                        default:
                            fFld = i22;
                            for (i24 = i22; i24 < 2; i24++) {
                                fFld = s;
                                Test.dFld = i21;
                                Test.instanceCount *= Test.iFld;
                                i20 += -25884;
                            }
                        }
                        break;
                    case 99:
                        Test.instanceCount = 65133L;
                    case 100:
                        Test.instanceCount >>= -455;
                        break;
                    case 101:
                        i18 = i23;
                        break;
                    case 102:
                        i20 *= (int)-90.70F;
                    case 103:
                        b1 = b2;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
