package tests.javafuzzer2230;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:33:30 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3L;
    public static float fFld=0.688F;
    public volatile boolean bFld=false;
    public static byte byFld=47;
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.23428);
        FuzzerUtils.init(Test.byArrFld, (byte)-121);
        FuzzerUtils.init(Test.lArrFld, -61474L);
        FuzzerUtils.init(Test.iArrFld, -198);
        FuzzerUtils.init(Test.lArrFld1, -2033164695L);
    }

    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1) {

        int i8=-180, i9=-25085, i10=47, i11=18428, iArr[]=new int[N];
        long l=8L, l1=-3234928378L;
        double d=79.105884;
        short s=-14622;

        FuzzerUtils.init(iArr, 93);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 6; ++i9) {
                Test.instanceCount = i10;
                for (l = 1; l < 2; l++) {
                    boolean b=true;
                    iArr[(int)(l - 1)] >>= (int)Test.instanceCount;
                    d -= l;
                    Test.lArrFld[i9 + 1][i8 + 1] = i10;
                    if (b) break;
                    iArr[i9 + 1] = s;
                    l1 -= 4819L;
                    s = (short)i11;
                    iArr[i9] &= (int)l;
                }
                i10 = i10;
                i11 += i9;
                i11 += (((i9 * l1) + f1) - Test.instanceCount);
            }
        } while (++i8 < 287);
        vMeth_check_sum += Float.floatToIntBits(f1) + i8 + i9 + i10 + l + i11 + Double.doubleToLongBits(d) + s + l1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth() {

        int i4=-16939, i5=-124, i6=-12, i7=-14262, i12=-7, i13=170, i14=48877;
        byte by=-103;

        for (i4 = 1; i4 < 127; i4++) {
            for (i6 = 1; i6 < 12; i6++) {
                vMeth(Test.fFld);
                Test.instanceCount <<= Test.instanceCount;
            }
            i7 <<= (int)Test.instanceCount;
            i12 = 1;
            do {
                Test.lArrFld[i12][i12] /= (i7 | 1);
                i5 = i6;
                for (i13 = 1; i13 < 1; ++i13) {
                    by -= (byte)Test.fFld;
                    i5 += i12;
                    Test.instanceCount >>= Test.instanceCount;
                    i7 |= i12;
                    Test.instanceCount -= i14;
                    i7 += (i13 * i4);
                }
            } while (++i12 < 12);
        }
        long meth_res = i4 + i5 + i6 + i7 + i12 + i13 + i14 + by;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth(int i2, int i3, float f) {

        boolean b1=false, bArr[]=new boolean[N];
        int i15=-4, i16=59, i17=170, i18=-2, i19=-77, i20=2784, i21=79, i22=-12;
        long l2=-6619104772353219152L;
        byte by1=90;

        FuzzerUtils.init(bArr, false);

        Test.dArrFld[(i3 >>> 1) % N] *= Test.byArrFld[(i3 >>> 1) % N];
        bArr[(i2 >>> 1) % N] = ((bMeth() != b1) ^ b1);
        i15 = 1;
        do {
            for (i16 = 7; i16 > 1; i16 -= 2) {
                i2 = i17;
            }
            try {
                i2 = (Test.iArrFld[i15 + 1] % Test.iArrFld[i15]);
                i3 = (129 / i16);
                Test.iArrFld[i15 - 1] = (i15 % i17);
            } catch (ArithmeticException a_e) {}
        } while (++i15 < 219);
        for (i18 = 5; i18 < 255; i18++) {
            Test.byArrFld[i18] >>= (byte)Test.instanceCount;
            i2 = 41547;
            for (l2 = i18; l2 < 7; ++l2) {
                Test.lArrFld1[i18 - 1] += (long)Test.fFld;
                i19 = (int)l2;
                for (i21 = 1; i21 < 1; i21++) {
                    by1 += (byte)(35409 + (i21 * i21));
                }
            }
        }
        i20 += i20;
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + l2 + i20 + i21
            + i22 + by1 + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=237, i1=62830, i23=57, i24=123, i25=251, i26=72, i27=10, i28=3, i29=-213, i30=8537, i31=11;
        double d1=1.84319;
        short s1=-16567;

        for (i = 1; i < 301; i++) {
            i1 *= (int)dMeth(i1, i, Test.fFld);
            if (bFld) {
                for (d1 = 2; d1 < 84; ++d1) {
                    i23 -= i;
                    if (bFld) break;
                }
                for (i24 = 84; 5 < i24; --i24) {
                    i23 *= (int)Test.fFld;
                }
            } else {
                Test.instanceCount = i24;
                i23 = i23;
            }
            for (i26 = 2; 84 > i26; ++i26) {
                for (i28 = 2; i28 > i; --i28) {
                    Test.instanceCount = i23;
                    s1 *= (short)Test.fFld;
                    Test.byFld >>>= (byte)i;
                    i23 = -2;
                    Test.fFld -= i24;
                }
                for (i30 = 1; 2 > i30; ++i30) {
                    i23 >>= i31;
                    i25 += (int)-3.103724;
                    switch (((i30 % 2) * 5) + 4) {
                    case 9:
                        Test.instanceCount = i24;
                        break;
                    case 11:
                        if (bFld) break;
                        break;
                    default:
                        i25 *= Test.byFld;
                    }
                    Test.lArrFld1[i - 1] <<= i25;
                    Test.iArrFld[i26] = i1;
                    Test.iArrFld[i] += i24;
                }
                Test.instanceCount += i26;
                Test.fFld -= i31;
                Test.instanceCount += i26;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
