package tests.javafuzzer2763;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:51:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3537453033L;
    public static byte byFld=-107;
    public static short sFld=-31115;
    public static long lFld=138L;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -41);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        long l=315637268L, l1=-7361462202554256620L;
        int i5=-45188, i6=5, i7=-42403, i8=-31034, iArr[][]=new int[N][N], iArr1[]=new int[N];
        float f=-71.990F;
        boolean b=false;

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(iArr1, 6);

        iArr[(i4 >>> 1) % N][(i4 >>> 1) % N] = i4;
        for (l = 15; l < 264; ++l) {
            f += i4;
            for (i6 = 7; i6 > 1; i6--) {
                f = i7;
                b = b;
                l1 = 1;
                while (++l1 < 2) {
                    i5 = (int)l;
                    if (b) {
                        iArr[(int)(l + 1)][(int)(l)] = 209;
                        f -= i4;
                        i7 += Test.byFld;
                        i4 = (int)Test.instanceCount;
                    } else {
                        Test.byFld *= (byte)l1;
                        try {
                            i8 = (i6 % -3894);
                            iArr[i6][(int)(l1 - 1)] = (i6 % 5526);
                            iArr1[i6] = (iArr[(int)(l1)][i6] / 5);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + l + i5 + Float.floatToIntBits(f) + i6 + i7 + (b ? 1 : 0) + l1 + i8 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i1=61413, i2=-15632, i3=12, i9=-48875, i10=9, i11=-64022, i12=2, i13=-9, iArr2[]=new int[N];
        boolean b1=false, bArr[][]=new boolean[N][N];
        double d=38.108618;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 4);

        i1 += (int)2.920F;
        for (i2 = 1; i2 < 224; i2++) {
            vMeth1(i3);
            for (i9 = 7; i9 > i2; i9--) {
                bArr[i2 - 1][i2] = b1;
            }
            Test.instanceCount += (long)d;
            Test.instanceCount >>>= -29119;
        }
        for (i11 = 1; i11 < 130; i11++) {
            i3 = i11;
            i13 = 1;
            do {
                i1 = i3;
                iArr2[i13] = i11;
                b1 = b1;
                i10 <<= i3;
                Test.instanceCount -= i11;
            } while (++i13 < 12);
        }
        vMeth_check_sum += i1 + i2 + i3 + i9 + i10 + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        int i14=0, i15=-2307, i16=85, i17=-8, i18=11, i19=37933, i20=46179, i21=44151;
        double d1=-50.31061;
        float f1=-2.467F;

        vMeth();
        i14 = 1;
        do {
            for (i15 = 1; i15 < 6; ++i15) {
                d1 *= i16;
            }
            for (i17 = 1; 6 > i17; ++i17) {
                Test.instanceCount -= i16;
                Test.iArrFld = Test.iArrFld;
                for (i19 = i17; i19 < 2; ++i19) {
                    Test.sFld = (short)f1;
                    if (i18 != 0) {
                    }
                    f1 += i19;
                    f1 += (i19 + i21);
                    i16 = (int)f1;
                    f1 = Test.instanceCount;
                }
                i16 += (i17 * i17);
            }
        } while (++i14 < 274);
        long meth_res = i14 + i15 + i16 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + i20 +
            Float.floatToIntBits(f1) + i21;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=116, i22=-6648, i23=-10, i24=-14, i25=61, i26=0, i27=-21844, i28=418, i29=-6, i30=64156, i31=-2, i32=-119;
        float f2=-31.415F;
        boolean b2=true;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(sArr, (short)-19427);

        i += (int)((-iMeth()) * -151L);
        f2 = Test.lFld;
        i22 = 1;
        do {
            Test.sFld += (short)i22;
            i -= 15463;
            for (i23 = 83; 1 < i23; i23--) {
                if (b2) continue;
                for (i25 = 1; i25 < 2; i25++) {
                    i += (i25 - i24);
                    i &= i24;
                    i = (int)Test.instanceCount;
                    try {
                        i24 = (i25 % i27);
                        i27 = (i % -51567);
                        i = (i23 % -229);
                    } catch (ArithmeticException a_e) {}
                }
                for (i28 = 1; i28 < 2; i28 += 3) {
                    i24 += (int)Test.lFld;
                    i29 = i26;
                    lArr = FuzzerUtils.long1array(N, (long)223L);
                    i24 ^= i22;
                    sArr[i23 - 1] -= (short)i28;
                }
                for (i30 = 1; i30 < 2; i30++) {
                    i24 += (i30 ^ i24);
                    Test.lFld += (i30 * i27);
                    lArr[i23 - 1] = i25;
                    i = (int)-2611703438297223314L;
                }
            }
            i26 |= 12;
            i27 += (17 + (i22 * i22));
        } while (++i22 < 302);
        if (b2) {
            i31 >>= i28;
            i /= (int)(i22 | 1);
            lArr[(i32 >>> 1) % N] += i;
            i31 = i31;
        } else {
            i24 = i23;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
