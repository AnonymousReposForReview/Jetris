package tests.javafuzzer3416;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:50:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-358814221448956855L;
    public static int iFld=65052;
    public static double dFld=0.19821;
    public static boolean bFld=true;
    public int iFld1=-117;
    public static int iArrFld[]=new int[N];
    public static float fArrFld1[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.fArrFld1, -107.164F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, float f2) {

        double d=2.37055;
        int i5=13797, i6=-41976, i7=6;
        short s=-9541;

        Test.iFld <<= i4;
        d *= -5;
        i5 = 1;
        do {
            i4 = (int)Test.instanceCount;
            d -= f2;
            Test.iFld -= 46827;
            for (i6 = i5; i6 < 9; i6++) {
                s += (short)(i6 + s);
                Test.instanceCount += (i6 * i6);
                if (Test.iFld != 0) {
                    vMeth_check_sum += i4 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i5 + i6 + i7 + s;
                    return;
                }
                if (false) continue;
            }
            f2 += i5;
            s += (short)i5;
            Test.instanceCount += i4;
        } while (++i5 < 186);
        i7 += (int)Test.instanceCount;
        vMeth_check_sum += i4 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i5 + i6 + i7 + s;
    }

    public static int iMeth1(float f1, int i2, int i3) {

        double d1=0.30058;
        int i8=-141, i9=114, i10=-247, i11=-6, i12=10, i13=12;
        boolean b=true;

        vMeth(Test.iFld, f1);
        i2 = i3;
        i3 = Test.iFld;
        i2 = (int)d1;
        for (i8 = 4; i8 < 339; ++i8) {
            if (b) {
                if (i8 != 0) {
                }
            } else if (b) {
                Test.iArrFld[i8 + 1] = (int)Test.instanceCount;
            }
            for (i10 = 1; 5 > i10; i10++) {
                if (i2 != 0) {
                }
            }
            i2 = (int)Test.instanceCount;
            for (i12 = i8; i12 < 5; ++i12) {
                i11 = i8;
                i13 += (-6 + (i12 * i12));
                d1 = i9;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0) + i10
            + i11 + i12 + i13;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=61498, i14=-63352, i15=9600;
        float f3=-1.829F, f4=-2.933F, f5=1.156F;

        i1 = 1;
        do {
            Test.instanceCount += (Test.instanceCount - 135);
            Test.instanceCount = 28507;
            Test.iFld ^= iMeth1(f3, Test.iFld, 51862);
            Test.iFld >>= Test.iFld;
            Test.iFld = 63875;
            f4 = 1;
            while (++f4 < 15) {
                Test.iFld = i1;
            }
            for (f5 = i1; f5 < 15; f5++) {
                i15 = 1;
                do {
                    i14 = -1;
                    i14 += i15;
                    i14 += (i15 * i15);
                    Test.instanceCount += (i15 ^ i14);
                    i14 += i1;
                } while (++i15 < 1);
            }
        } while ((i1 += 2) < 214);
        long meth_res = i1 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + Float.floatToIntBits(f5) + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        float f=-29.327F;
        int i16=0, i17=10, i18=45722, i19=-230, i20=-114, i21=63, i22=4, i23=-12;
        short s1=-2342;
        byte by=-109;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        f -= (iMeth() * -4639669034524604844L);
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld -= Test.iFld;
        Test.iFld = Test.iFld;
        Test.iFld -= Test.iFld;
        Test.dFld -= Test.iFld;
        Test.bFld = Test.bFld;
        for (i16 = 4; i16 < 254; ++i16) {
            i17 += s1;
            i17 += (-71 + (i16 * i16));
            for (i18 = 6; i18 < 101; ++i18) {
                i20 = 1;
                while (++i20 < 2) {
                    Test.fArrFld1[i16] *= s1;
                    i17 -= i18;
                    by = (byte)Test.instanceCount;
                    if (Test.bFld) break;
                    i19 = i17;
                    Test.instanceCount -= Test.iFld;
                }
                switch ((i16 % 7) + 72) {
                case 72:
                    s1 *= (short)f;
                    break;
                case 73:
                    for (i21 = i16; i21 < 2; ++i21) {
                        i22 ^= (int)Test.instanceCount;
                        i22 = (int)Test.dFld;
                        by *= (byte)i21;
                        i19 += i21;
                        by = (byte)i19;
                        switch ((i16 % 5) + 69) {
                        case 69:
                            bArr[i16] = true;
                            break;
                        case 70:
                            Test.iArrFld = Test.iArrFld;
                            i17 = i17;
                            break;
                        case 71:
                            i22 = Test.iFld;
                        case 72:
                            Test.dFld -= i18;
                        case 73:
                            i19 -= i21;
                            break;
                        }
                    }
                case 74:
                    i19 += (i18 + f);
                case 75:
                    Test.fArrFld1[i16 - 1] /= ((long)(f) | 1);
                    break;
                case 76:
                    i19 = iFld1;
                case 77:
                    i23 -= 52533;
                    break;
                case 78:
                    Test.iArrFld[i16 + 1] ^= (int)Test.instanceCount;
                    break;
                }
            }
        }



    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
