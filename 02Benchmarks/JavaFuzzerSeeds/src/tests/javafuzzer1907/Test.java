package tests.javafuzzer1907;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:33:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4059470772L;
    public static float fFld=-109.464F;
    public static volatile short sFld=-23838;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.38F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth1(int i5) {

        int i6=128;

        i6 >>= (int)Test.instanceCount;
        vMeth1_check_sum += i5 + i6;
    }

    public double dMeth(int i7, long l1) {

        int i8=-4, i9=-29586, i11=42876, i12=-10, i13=8, i14=54373, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -155);

        vMeth1(i7);
        for (i8 = 7; i8 < 128; ++i8) {
            Test.fFld = i7;
            i7 -= (int)l1;
            i9 -= i9;
        }
        for (int i10 : iArr) {
            for (i11 = 4; 1 < i11; --i11) {
                for (i13 = 1; i13 < 2; ++i13) {
                    i9 -= (int)Test.instanceCount;
                    Test.instanceCount -= i9;
                    Test.fFld *= Test.sFld;
                    iArr[i11 - 1] = (int)l1;
                    Test.instanceCount >>= i11;
                    l1 = (long)Test.fFld;
                    i9 += (((i13 * i7) + i14) - i11);
                }
            }
        }
        long meth_res = i7 + l1 + i8 + i9 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth(long l, int i2) {

        int i3=-6659, i4=13, i15=-24759, i16=-55996, iArr1[]=new int[N];
        byte by=-5;
        double d=1.22707;
        float f=70.781F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4L);
        FuzzerUtils.init(iArr1, 14873);

        for (i3 = 15; i3 < 257; ++i3) {
            vMeth1(Math.min((int)(dMeth(i3, l) - Test.fFld), i2));
            Test.instanceCount += i2;
            lArr[i3 - 1] += Test.instanceCount;
            iArr1[i3 + 1] += (int)Test.instanceCount;
            i2 |= 20984;
            for (i15 = i3; i15 < 7; ++i15) {
                Test.instanceCount <<= -106;
                switch (((i15 % 2) * 5) + 29) {
                case 38:
                    i16 += (i15 ^ by);
                    i16 = (int)l;
                    lArr[i15] += l;
                    break;
                case 34:
                    d += Test.fFld;
                    break;
                default:
                    i4 = 7;
                    iArr1[i3] *= (int)f;
                }
            }
        }
        vMeth_check_sum += l + i2 + i3 + i4 + i15 + i16 + by + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-58, i1=196, i17=9, i18=-6, i19=215, i20=12358, i21=-67, i22=11, i23=59289, i24=-239, i25=-7, i26=2,
            i27=8856, i29=227;
        double d1=75.127629;
        byte by1=92;

        for (i = 19; i < 341; ++i) {
            vMeth(Test.instanceCount, i);
            i1 -= (int)-25L;
            Test.instanceCount = (long)Test.fFld;
        }
        iArrFld[(i >>> 1) % N] = i1;
        i1 += -168;
        for (i17 = 5; i17 < 213; ++i17) {
            d1 -= Test.instanceCount;
            i18 += (((i17 * by1) + i) - i17);
            i1 += (int)Test.instanceCount;
            i18 += (i17 * i17);
            for (i19 = i17; i19 < 121; ++i19) {
                i18 += (((i19 * i1) + i18) - Test.instanceCount);
            }
            Test.instanceCount *= 38;
            for (i21 = 6; i21 < 121; ++i21) {
                Test.instanceCount += (i21 * i21);
                iArrFld[i17 + 1] = (int)-2815905656L;
                d1 -= i17;
            }
        }
        Test.fArrFld = Test.fArrFld;
        i20 = i17;
        iArrFld[(i20 >>> 1) % N] = 14;
        for (i23 = 7; i23 < 131; i23++) {
            i18 >>= (int)Test.instanceCount;
            i25 = 1;
            do {
                i24 += (2 + (i25 * i25));
                for (i26 = 1; i26 > i23; i26--) {
                    int i28=1502;
                    Test.fFld = i;
                    i1 -= i28;
                    i24 += (int)d1;
                    i29 += i26;
                }
            } while (++i25 < 202);
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest dMeth
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
