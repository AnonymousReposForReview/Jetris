package tests.javafuzzer1678;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 01:22:12 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=36279L;
    public short sFld=32446;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.1732);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i10=-7, i11=7, i12=0, i13=2, i14=-1266, i15=88;
        float f2=-106.515F;
        double d=0.47669;

        for (i10 = 4; i10 < 122; i10++) {
            Test.instanceCount *= i10;
            Test.instanceCount = 12;
            Test.instanceCount += (long)f2;
            i11 >>= i11;
            i11 = (int)Test.instanceCount;
            for (i12 = i10; i12 < 13; i12++) {
                for (i14 = 1; i14 < 1; ++i14) {
                    i15 = (int)-8067L;
                    f2 *= 6;
                    i13 += (i14 * i14);
                    i11 *= i14;
                    i13 -= (int)Test.instanceCount;
                    f2 -= (float)d;
                }
                i11 <<= -57434;
            }
        }
        long meth_res = i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth1(int i2, int i3, int i4) {

        float f1=1.23F;
        int i5=5, i6=-11, i7=6, i8=63194, i9=-11, iArr[]=new int[N];
        double d1=-2.69706;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(bArr, false);

        f1 = Math.abs(1832201149560867230L + (iArr[(i4 >>> 1) % N]++));
        for (i5 = 4; i5 < 252; ++i5) {
            i4 += i5;
            i6 *= (int)(((-73.208F - (f1 * 0.359F)) + Math.min(i6, i3)) - i5);
            i7 = 1;
            while (++i7 < 7) {
                f1 -= Math.max(i6, --i6);
                for (i8 = 1; i8 < 1; ++i8) {
                    i3 = (int)Test.instanceCount;
                    i2 += ((++i3) * Math.max((int)(-12 * f1), i5 + -223));
                    iMeth();
                }
                d1 = i9;
                Test.instanceCount += (i7 - i2);
                if (i7 != 0) {
                }
                bArr[i7] = true;
                f1 += (((i7 * i3) + i5) - Test.instanceCount);
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(long l, int i1, float f) {

        int i16=-24806, i17=-102, i18=-27247, i19=10, i20=58679, i21=5, i22=-56, i23=-131, iArr1[]=new int[N];
        short s=-1237;
        boolean b=true;
        double d2=-2.84046;
        byte by=120;

        FuzzerUtils.init(iArr1, -230);

        i1 >>= (int)((-(l + i1)) + (-1.100330 + lMeth1(19, i1, i1)));
        i1 -= i1;
        for (i16 = 2; 258 > i16; ++i16) {
            i17 <<= i18;
            s += (short)i16;
            iArr1[i16] ^= (int)l;
        }
        for (i19 = 252; i19 > 6; i19--) {
            s += (short)(i19 * i19);
            iArr1[i19 + 1] = i19;
            for (i21 = 7; i21 > 1; i21--) {
                if (b) continue;
            }
        }
        i23 = 1;
        while (++i23 < 184) {
            d2 = l;
            by *= (byte)i16;
            if (i23 != 0) {
            }
        }
        long meth_res = l + i1 + Float.floatToIntBits(f) + i16 + i17 + i18 + s + i19 + i20 + i21 + i22 + (b ? 1 : 0) +
            i23 + Double.doubleToLongBits(d2) + by + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=9, i24=-41425, i25=180, i26=40946, i27=56838, i28=-12, i29=228, i30=243, i31=3, iArr2[]=new int[N];
        float f3=-2.251F, f4=47.616F, f5=0.218F;
        long l1=3880465983573685074L, lArr[][]=new long[N][N];
        double d3=-53.123687;
        boolean b1=true;

        FuzzerUtils.init(iArr2, -21272);
        FuzzerUtils.init(lArr, -1170957345L);

        i -= (int)lMeth(3973339222275857933L, i, f3);
        for (l1 = 8; l1 < 270; l1++) {
            i24 *= i24;
            for (f4 = 5; f4 < 96; ++f4) {
                iArr2 = iArr2;
            }
            i -= (int)f4;
            i24 >>= i;
            Test.dArrFld[(int)(l1 - 1)] += -15.825F;
            switch ((((i >>> 1) % 4) * 5) + 78) {
            case 88:
                f3 = f4;
                i25 -= i25;
                iArr2[(int)(l1)] = 41142;
            case 90:
                i26 = 1;
                while (++i26 < 96) {
                    Test.instanceCount += (-154 + (i26 * i26));
                    i24 = i25;
                    sFld += (short)i26;
                    i24 += i26;
                    for (i27 = 1; 1 < i27; i27 -= 2) {
                        i *= (int)l1;
                        Test.instanceCount = (long)d3;
                        lArr = lArr;
                    }
                    Test.instanceCount += i26;
                    for (i29 = 1; i29 < 1; ++i29) {
                        iArr2[i29 + 1] += (int)f3;
                        i24 += i30;
                    }
                    iArr2[(i27 >>> 1) % N] = 16961;
                    if (b1) break;
                }
            case 85:
                i24 += (int)l1;
                iArr2[(int)(l1 - 1)] %= -19537;
                try {
                    i28 = (iArr2[(int)(l1 - 1)] % i28);
                    i24 = (i26 % -1275399004);
                    i31 = (-223 / i25);
                } catch (ArithmeticException a_e) {}
            case 93:
                f5 += -180;
                break;
            default:
                Test.instanceCount -= (long)f3;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
