package tests.javafuzzer1353;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:38:30 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=9201567046237840108L;
    public static volatile double dFld=-1.82135;
    public static float fFld=0.471F;
    public static byte byFld=-103;
    public boolean bFld=false;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, long l) {

        int i5=176, i6=10, i7=-8, i8=0, i9=-221, i10=-63717, iArr[]=new int[N];
        float f=90.553F;
        short s=2485;

        FuzzerUtils.init(iArr, 24268);

        for (i5 = 6; 393 > i5; i5++) {
            for (i7 = 1; i7 < 4; ++i7) {
                for (i9 = 1; i9 < 2; i9++) {
                    iArr[i7 - 1] = i9;
                    i10 += (i9 - i10);
                    i4 = i4;
                    switch ((i7 % 2) + 26) {
                    case 26:
                        f *= -15736;
                        i10 -= (int)Test.instanceCount;
                        f += i9;
                        break;
                    case 27:
                        s |= (short)i4;
                        i3 += (((i9 * l) + i9) - f);
                        f /= (i10 | 1);
                        break;
                    }
                }
                i3 = (int)Test.instanceCount;
                try {
                    iArr[i5 - 1] = (i3 / 2007791271);
                    i4 = (i9 / i10);
                    i8 = (52884 / i4);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i3 + i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + s +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i11=2, i12=3, i13=13001, i14=40, i15=-232, iArr1[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-10756);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -159);

        vMeth1(i11, -115, 45448L);
        for (short s1 : sArr) {
            i11 -= (int)Test.instanceCount;
            for (i12 = 1; 4 > i12; i12++) {
                i13 += i12;
                i11 -= (int)Test.instanceCount;
                i13 += (i12 + Test.fFld);
                switch ((i12 % 9) + 80) {
                case 80:
                case 81:
                    i11 *= (int)Test.fFld;
                    break;
                case 82:
                    for (i14 = 1; 2 > i14; ++i14) {
                        i15 >>= i12;
                        bArr[i14 + 1] = b;
                    }
                    i13 *= -3;
                    break;
                case 83:
                    iArr1[i12 + 1] += i14;
                    iArr1[i12] = 204;
                case 84:
                    i15 *= (int)Test.dFld;
                    break;
                case 85:
                    Test.byFld -= (byte)i15;
                    break;
                case 86:
                    i13 = i12;
                    break;
                case 87:
                    Test.instanceCount += (i12 ^ i13);
                    break;
                case 88:
                    i15 += (int)Test.dFld;
                    break;
                default:
                    Test.fFld += (((i12 * i11) + Test.instanceCount) - i11);
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i1, int i2) {

        float f1=-1.218F;
        double d=-111.61087;
        long l1=157L;
        int i16=-109, iArr2[]=new int[N];
        short s2=-11276;

        FuzzerUtils.init(iArr2, -5);

        vMeth();
        i1 = i1;
        i2 += i2;
        f1 = 1;
        do {
            switch ((int)((f1 % 1) + 29)) {
            case 29:
                d = 1;
                do {
                    iArr2[(int)(d - 1)] = i2;
                } while (++d < 7);
                if (bFld) continue;
                for (l1 = 1; l1 < 7; l1++) {
                    i1 = i2;
                    i2 -= 203;
                    Test.instanceCount += l1;
                    Test.byFld = (byte)l1;
                    Test.instanceCount += (((l1 * l1) + s2) - i2);
                    i16 = (int)Test.instanceCount;
                }
            default:
                bFld = bFld;
            }
        } while (++f1 < 234);
        long meth_res = i1 + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + l1 + i16 + s2 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-102, i17=-91, i18=9414, i19=-12333, i20=-4, i21=246, i22=-10, i23=62744, i24=-20148, iArr3[]=new int[N];
        double d1=-2.2222;
        short s3=-5480;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -351946560891004081L);
        FuzzerUtils.init(iArr3, -153);

        Test.dFld += (lArr[(i >>> 1) % N] / (i | 1));
        iMeth(i, i);
        for (i17 = 7; i17 < 149; i17++) {
            i19 = 1;
            while (++i19 < 177) {
                i18 <<= (int)Test.instanceCount;
            }
            i18 = i19;
            for (d1 = 5; 177 > d1; d1++) {
                switch ((i17 % 9) + 86) {
                case 86:
                    for (i21 = 2; i21 > 1; i21 -= 2) {
                        lArr = lArr;
                        if (bFld) {
                            i22 += (i21 * i);
                            i += i21;
                            i18 += i21;
                            Test.instanceCount += (((i21 * Test.instanceCount) + Test.instanceCount) - i22);
                        } else {
                            i = i18;
                            lArr[i21 + 1] |= i21;
                        }
                        Test.instanceCount ^= i;
                        i = (int)Test.instanceCount;
                        i20 += i21;
                        iArr3[i21 - 1] = i17;
                    }
                case 87:
                    lArr[i17 + 1] -= Test.instanceCount;
                    lArr[i17] = i18;
                    Test.instanceCount += 181;
                    break;
                case 88:
                    i = -9;
                    for (i23 = 2; i23 > 1; i23--) {
                        Test.instanceCount += i23;
                        s3 = (short)132;
                        iArr3[(int)(d1 + 1)] <<= i18;
                        i >>= i18;
                    }
                    break;
                case 89:
                    Test.dFld -= -48838;
                    break;
                case 90:
                    Test.instanceCount = i;
                    break;
                case 91:
                    i18 += i23;
                case 92:
                    iArr3[i17] -= -7;
                    break;
                case 93:
                case 94:
                default:
                    i18 += (int)(((d1 * Test.instanceCount) + i23) - i23);
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
