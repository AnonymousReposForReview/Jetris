package tests.javafuzzer891;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:19:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static int iFld=62212;
    public static double dFld=-32.59470;
    public static float fFld=0.168F;
    public static byte byFld=73;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=6498, i3=-162, i4=46886, i5=-41, i6=-7, i7=-13, i8=-9, i9=-8, iArr1[]=new int[N];
        boolean b=false;
        short s=-11976;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(dArr, 0.78691);

        iArr1[(150 >>> 1) % N] = (int)Test.instanceCount;
        for (i2 = 8; 164 > i2; i2++) {
            i3 += i2;
            for (i4 = 1; i4 < 10; ++i4) {
                i5 = i2;
                i5 -= i3;
            }
            i3 += (i2 * i2);
            switch (((i2 % 1) * 5) + 74) {
            case 75:
                switch ((((i2 >>> 1) % 8) * 5) + 11) {
                case 35:
                    for (i6 = i2; i6 < 10; i6++) {
                        for (i8 = i6; i8 < 1; i8++) {
                            try {
                                iArr1[i2] = (i3 % -60707);
                                i7 = (i9 % -63992);
                                i9 = (-90 / i6);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = Test.instanceCount;
                            dArr[i8 - 1] *= Test.instanceCount;
                            b = false;
                        }
                    }
                case 49:
                    i5 -= Test.iFld;
                    break;
                case 26:
                    Test.iFld -= (int)Test.dFld;
                    break;
                case 12:
                    i3 = i3;
                    break;
                case 18:
                    iArr1[i2 + 1] = 1;
                    break;
                case 20:
                    Test.instanceCount *= -31465;
                    break;
                case 33:
                    Test.fFld = s;
                case 14:
                default:
                    Test.fFld = -78;
                }
                break;
            default:
                Test.dFld = i8;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + s + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i10=-144, i11=10, i12=2321, i13=-5, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -2);

        Test.iFld = Test.iFld;
        Test.iFld |= (--iArr[(Test.iFld >>> 1) % N][(-137 >>> 1) % N]);
        Test.iFld = (int)((--Test.iFld) - ((Test.iFld - Test.instanceCount) - -64772));
        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] ^= iMeth();
        i10 = 1;
        do {
            boolean b1=false;
            switch (((i10 % 2) * 5) + 12) {
            case 14:
                if (i10 != 0) {
                    vMeth1_check_sum += i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                break;
            case 15:
                Test.iFld >>= i10;
                Test.iFld += (i10 - Test.iFld);
                if (b1) {
                    i11 = 1;
                    do {
                        Test.iFld = (int)Test.instanceCount;
                        for (i12 = 1; i12 < 1; i12 += 2) {
                            Test.iFld = 61787;
                        }
                        i13 += -9;
                    } while (++i11 < 11);
                } else if (b1) {
                    i13 >>= (int)Test.instanceCount;
                } else if (b1) {
                    Test.byFld >>>= (byte)i13;
                    vMeth1_check_sum += i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
                    return;
                } else {
                    i13 = 48244;
                }
                break;
            default:
                Test.iFld += i12;
            }
        } while (++i10 < 139);
        vMeth1_check_sum += i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d) {

        int i=238, i1=6, i14=-12, i15=13, i16=14, i17=54;
        short s1=24885;
        double d1=-1.124134;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 0.680F);
        FuzzerUtils.init(lArr, 109L);

        for (i = 5; i < 229; i++) {
            vMeth1();
            s1 += (short)(i | (long)Test.fFld);
            i1 = s1;
            for (d1 = 1; d1 < 7; d1++) {
                d -= Test.fFld;
                Test.instanceCount -= Test.instanceCount;
                Test.instanceCount += (long)(d1 * d1);
                fArr[i - 1] %= (i1 | 1);
            }
            for (i15 = 1; i15 < 7; ++i15) {
                i17 = 1;
                do {
                    lArr[i17 + 1][i15] <<= i1;
                    i14 += (i17 | i16);
                    i14 += (i17 ^ i);
                    i1 += (11 + (i17 * i17));
                } while (++i17 < 2);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + s1 + Double.doubleToLongBits(d1) + i14 + i15 + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=57, i19=9;
        short s2=-26332;

        vMeth(Test.dFld);
        Test.iFld = Test.iFld;
        for (i18 = 9; i18 < 292; i18++) {
            s2 >>= (short)i18;
            Test.iFld -= s2;
            Test.fFld -= 19108;
            Test.iFld /= (int)(i19 | 1);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
