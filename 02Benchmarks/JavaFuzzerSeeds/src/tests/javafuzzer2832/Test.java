package tests.javafuzzer2832;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:04:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=600301242L;
    public static double dFld=0.106923;
    public static int iFld=2;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 184);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        float f1=13.184F;
        int i5=101, i6=-82, i7=-39663, i8=-12;
        double d1=-79.91515;
        short s=24733;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-116);

        f1 = i5;
        for (i6 = 3; 152 > i6; i6++) {
            i5 = i6;
            i7 += (int)d1;
            i7 *= (int)d1;
            i5 <<= i5;
            i7 = (int)Test.instanceCount;
            i7 *= i5;
            byArr[i6] = (byte)s;
            i5 += (((i6 * Test.instanceCount) + f1) - Test.instanceCount);
        }
        i8 = 1;
        while (++i8 < 159) {
            s = (short)2.20339;
            i5 += (i8 * i8);
            i5 += i8;
        }
        Test.instanceCount *= i7;
        long meth_res = Float.floatToIntBits(f1) + i5 + i6 + i7 + Double.doubleToLongBits(d1) + s + i8 +
            FuzzerUtils.checkSum(byArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth() {

        int i4=68, i9=2, i10=-10, i11=-12, i12=57635;
        float f=-76.864F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 153L);

        Test.iArrFld[(-1616 >>> 1) % N] = (Test.iArrFld[(6739 >>> 1) % N] = Test.iArrFld[(i4 >>> 1) % N]);
        f *= (--i4);
        f -= (Test.iArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N]--);
        if (bMeth()) {
            f *= i4;
        }
        lArr[(i4 >>> 1) % N] = i4;
        Test.iArrFld[(i4 >>> 1) % N][(-21655 >>> 1) % N] += i4;
        Test.iArrFld[(i4 >>> 1) % N][(-9486 >>> 1) % N] = i4;
        i4 += (int)f;
        i9 = 150;
        while (--i9 > 0) {
            Test.iArrFld[i9][i9] -= i4;
            for (i10 = 1; i10 < 11; i10++) {
                i12 = 2;
                do {
                    i11 += i11;
                    i4 += i12;
                } while (--i12 > 0);
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i2=-16478, i3=-52522, i13=-5;
        double d=1.122028;
        float f2=-2.90F;
        byte by=-98;
        short s1=11017;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 740949827899502064L);

        for (i2 = 137; i2 > 2; --i2) {
            d -= (i3 + iMeth());
            i3 += (((i2 * i2) + i3) - f2);
            Test.iArrFld[i2 - 1][i2 + 1] -= (int)f2;
            i13 = 1;
            while (++i13 < 12) {
                Test.iArrFld[i13 + 1][i2 - 1] -= by;
                i3 %= (int)(i2 | 1);
                i3 -= s1;
                Test.instanceCount += (-36011 + (i13 * i13));
                i3 <<= -2455;
                lArr1[i13 + 1] += i3;
                i3 >>>= i2;
                Test.iArrFld[i2 - 1][i2 - 1] <<= i2;
                i3 -= (int)Test.instanceCount;
            }
            Test.iArrFld[i2 - 1][i2 + 1] = (int)l;
        }
        vMeth_check_sum += l + i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i13 + by + s1 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=57764, i1=6, i14=-134, i15=10, i16=-186, i17=-8, i18=-37805, i19=66;
        boolean b=false, bArr[]=new boolean[N];
        float f3=1.316F;

        FuzzerUtils.init(bArr, false);

        i = 1;
        do {
            i1 = 1;
            while (++i1 < 82) {
                switch (((i % 2) * 5) + 79) {
                case 83:
                    if (b = bArr[i1]) break;
                    break;
                case 85:
                    vMeth(Test.instanceCount);
                    break;
                default:
                    f3 += i1;
                    f3 = Test.instanceCount;
                    Test.iArrFld[i][i] <<= i1;
                }
                Test.iArrFld[i1 + 1][i1 + 1] += -90;
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.instanceCount >>= i15;
                    if (b) continue;
                }
                i15 -= (int)Test.instanceCount;
                i15 = i14;
                Test.instanceCount -= i15;
            }
            try {
                i15 = (i1 / -61561);
                Test.iArrFld[i - 1][i + 1] = (i15 / i1);
                i15 = (i1 / i);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += (-10 + (i * i));
            for (i16 = 2; 82 > i16; i16++) {
                byte by1=-68;
                Test.instanceCount *= by1;
                i17 *= i14;
                for (i18 = 1; 2 > i18; i18++) {
                    Test.dFld = i14;
                    Test.instanceCount += (i18 ^ i16);
                    try {
                        Test.iArrFld[i16][i18] = (Test.iFld / 1600181977);
                        i15 = (i18 % -50134);
                        Test.iArrFld[i18 + 1][i] = (i15 % -33);
                    } catch (ArithmeticException a_e) {}
                    i19 += (i18 ^ Test.instanceCount);
                    Test.dFld = f3;
                    Test.dFld *= -19320L;
                }
                Test.instanceCount = i1;
            }
            Test.instanceCount -= i1;
        } while (++i < 308);
        i19 <<= (int)Test.instanceCount;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
