package tests.javafuzzer115;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:33:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=27384L;
    public short sFld=-6698;
    public static byte byFld=58;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -39L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i11=-43353, i12=12003, i13=54075, i14=-9321, i15=-49712, iArr2[]=new int[N];
        float f2=17.490F;

        FuzzerUtils.init(iArr2, -13);

        for (i11 = 11; 303 > i11; ++i11) {
            i13 = 1;
            do {
                i12 >>= i11;
                Test.instanceCount += -39;
                i12 = i11;
                i12 = (int)f2;
                for (i14 = i13; 1 > i14; ++i14) {
                    if (i15 != 0) {
                    }
                    try {
                        i12 = (i15 % i11);
                        iArr2[i14 - 1] = (-124 / i11);
                        iArr2[i11 + 1] = (i12 % i13);
                    } catch (ArithmeticException a_e) {}
                    i15 -= i12;
                    i15 = -112;
                    i12 += (-7 + (i14 * i14));
                    i15 = i12;
                    f2 += (((i14 * Test.instanceCount) + f2) - i13);
                    i15 = (int)f2;
                }
            } while (++i13 < 6);
        }
        long meth_res = i11 + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i9, long l3, int i10) {

        float f1=1.306F;
        int i16=3, i17=16, i18=-5, i19=-39294, iArr1[]=new int[N];
        short s=-358;
        double d=18.75447;

        FuzzerUtils.init(iArr1, 10);

        i10 = (int)(((i9 % (i9 | 1)) + (10 - Math.sqrt(2.28471))) - (i9 >>>= (-i10)));
        l3 *= ((l3 % (i9 | 1)) + (iArr1[(i9 >>> 1) % N]++));
        Test.lArrFld[(i9 >>> 1) % N] = (long)(((f1 * 110) - 0.86249) + iMeth());
        for (i16 = 10; i16 < 308; ++i16) {
            iArr1[i16] -= (int)104.734F;
            for (i18 = 1; i18 < 6; i18++) {
                i10 += (-57386 + (i18 * i18));
                Test.instanceCount += (((i18 * l3) + i9) - i16);
                iArr1[i16 + 1] ^= i19;
                i10 >>= s;
                d -= i18;
                iArr1 = iArr1;
                iArr1[i16] = i19;
                i17 += (((i18 * i19) + i10) - i19);
            }
        }
        iArr1[(i17 >>> 1) % N] = (int)80.57332;
        long meth_res = i9 + l3 + i10 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + s +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l1, int i4, long l2) {

        float f=0.62F, fArr[]=new float[N];
        int i5=14, i6=9, i7=-1013, i8=-138, i20=-41, i21=-148, i22=4, i23=43207, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -245);
        FuzzerUtils.init(fArr, -1.361F);

        f *= ((i4 + (-22340 * (l2 - f))) + (l1--));
        i4 = (--i4);
        iArr[(i4 >>> 1) % N] += (int)fArr[(39147 >>> 1) % N];
        for (i5 = 286; 13 < i5; i5 -= 2) {
            if (i6 != 0) {
                vMeth_check_sum += l1 + i4 + l2 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i20 + i21 + i22 + i23 +
                    FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
            for (i7 = 1; i7 < 12; ++i7) {
                i6 += (int)(i4 = (int)(i6 = (int)lMeth(56, l2, -120)));
            }
            i6 -= i8;
            iArr[i5] = i7;
            for (i20 = 1; i20 < 12; ++i20) {
                for (i22 = 1; 2 > i22; i22++) {
                    i8 = -128;
                    i4 += 29141;
                    l2 *= -197;
                    l1 = i20;
                }
            }
        }
        vMeth_check_sum += l1 + i4 + l2 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-25632, i1=50391, i2=-2479, i3=-6, i24=3, i25=-8, i26=-98, i27=3;
        double d1=94.42037;
        float f4=-17.716F;
        boolean b=true;

        for (i = 15; 343 > i; ++i) {
            try {
                i1 = (iArrFld[i] / i1);
                i1 = (iArrFld[i] % iArrFld[i + 1]);
                i1 = (iArrFld[i - 1] / iArrFld[i + 1]);
            } catch (ArithmeticException a_e) {}
            i1 <<= (int)(((i + Test.instanceCount) + (10 - (i - Test.instanceCount))) - (i1++));
            for (i2 = 2; i2 < 77; ++i2) {
                i3 += (i2 + Test.instanceCount);
                switch ((i % 2) + 54) {
                case 54:
                    i3 <<= iArrFld[i + 1];
                case 55:
                    vMeth(Test.instanceCount, 202, Test.instanceCount);
                    for (i24 = 2; i24 > 1; --i24) {
                        float f3=-107.212F;
                        i25 += (((i24 * sFld) + i1) - f3);
                        f3 = i2;
                        Test.instanceCount = 111;
                        try {
                            i3 = (i25 / i3);
                            i3 = (i24 / i25);
                            i25 = (iArrFld[i] % -13005);
                        } catch (ArithmeticException a_e) {}
                        sFld = (short)i2;
                        d1 *= i2;
                        Test.instanceCount += (((i24 * Test.instanceCount) + i3) - i25);
                        iArrFld[i - 1] = i2;
                    }
                }
                f4 = Test.byFld;
                b = b;
            }
            f4 += (((i * i1) + i) - i1);
            Test.instanceCount = i;
        }
        sFld &= (short)i24;
        i26 *= -30512;
        Test.lArrFld[(-51255 >>> 1) % N] -= (long)d1;
        i27 = 1;
        do {
            iArrFld[i27 + 1] -= (int)2.437F;
            Test.instanceCount ^= 5047;
            i3 <<= i2;
            i3 = i3;
            sFld -= (short)f4;
        } while (++i27 < 298);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
