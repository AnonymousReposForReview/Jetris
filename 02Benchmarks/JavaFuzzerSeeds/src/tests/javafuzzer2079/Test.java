package tests.javafuzzer2079;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 08:41:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4L;
    public static boolean bFld=true;
    public static volatile byte byFld=-9;
    public static float fFld=0.679F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -196);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        int i9=-43699, i10=-14, i11=-4, i12=194, i13=46672, i14=8, iArr[]=new int[N];
        double d2=12.60660, d3=-64.21597, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -168819280800520611L);
        FuzzerUtils.init(iArr, 23463);
        FuzzerUtils.init(dArr, 69.26663);

        for (i9 = 10; 252 > i9; i9++) {
            for (i11 = 1; i11 < 7; i11++) {
                if (Test.bFld) continue;
                try {
                    i10 = (33 / i10);
                    i10 = (i8 % i8);
                    i10 = (147 / i9);
                } catch (ArithmeticException a_e) {}
                d2 = -35636;
                lArr[(i9 >>> 1) % N] = i10;
                if (i8 != 0) {
                    vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) +
                        Double.doubleToLongBits(d3) + i13 + i14 + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                i8 += -57269;
            }
            try {
                i8 = (i11 / i11);
                iArr[i9] = (i9 % i10);
                i8 = (i9 % 24151);
            } catch (ArithmeticException a_e) {}
            d3 -= i11;
            for (i13 = 1; 7 > i13; i13++) {
                i12 += -52501;
            }
            dArr[i9] = -45;
            i8 = Test.byFld;
            d3 *= Test.instanceCount;
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i13
            + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i6, int i7) {

        int i15=-14, i16=0, i17=7, i18=-7, i19=-13, i20=-4;
        float f1=0.248F;

        vMeth1(i6);
        for (i15 = 11; i15 < 383; ++i15) {
            for (i17 = i15; i17 < 5; i17++) {
                for (i19 = 1; i19 < 1; i19 += 3) {
                    Test.iArrFld[i19 + 1] = i6;
                    Test.iArrFld = Test.iArrFld;
                    Test.iArrFld[i19 - 1] += (int)Test.instanceCount;
                    if (Test.bFld) continue;
                    Test.instanceCount += (i19 | Test.instanceCount);
                    f1 *= i17;
                    if (Test.bFld) break;
                    if (Test.bFld) break;
                    Test.instanceCount -= (long)f1;
                }
            }
            if (Test.bFld) continue;
            if (i6 != 0) {
                vMeth_check_sum += i6 + i7 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1);
                return;
            }
        }
        vMeth_check_sum += i6 + i7 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1);
    }

    public int iMeth(float f, int i4, int i5) {

        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -4L);

        vMeth(i5, i5);
        Test.iArrFld[(i5 >>> 1) % N] >>>= i4;
        lArr1 = lArr1;
        long meth_res = Float.floatToIntBits(f) + i4 + i5 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.11485, d1=-118.126069;
        int i=13, i1=-17303, i2=0, i3=41772, i22=-57729, i23=-26893, i24=1, i25=-9, i26=-29999, i27=0, i28=-9,
            i29=-110, i30=25, i31=-202;
        byte byArr[][]=new byte[N][N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-65);
        FuzzerUtils.init(lArr2, -4L);

        for (d = 6; d < 196; d++) {
            for (i1 = 5; i1 < 132; i1++) {
                i3 = 1;
                while (++i3 < 2) {
                    int i21=-9372;
                    d1 += (iMeth(Test.fFld, i3, -9574) - i2);
                    switch (((i3 >>> 1) % 1) + 110) {
                    case 110:
                        i21 += i1;
                        Test.iArrFld[i3] = (int)Test.instanceCount;
                        break;
                    default:
                        i = i3;
                        Test.iArrFld[(int)(d)] += 30;
                    }
                    Test.iArrFld[i1 + 1] -= (int)-2.52306;
                    i21 = (int)2.109622;
                    i21 %= (int)((long)(Test.fFld) | 1);
                }
            }
            for (i22 = 2; i22 < 132; i22++) {
                byArr[i22 + 1][i22 - 1] += (byte)Test.fFld;
                i2 = i22;
            }
            for (i24 = 132; i24 > d; i24 -= 2) {
                Test.instanceCount += (((i24 * i25) + i3) - Test.byFld);
            }
            d1 += -253L;
            i2 >>= i2;
            Test.bFld = Test.bFld;
            for (i26 = 4; i26 < 132; ++i26) {
                for (i28 = 1; i28 < 2; ++i28) {
                    i -= i26;
                    i25 += (i28 * i28);
                }
                for (i30 = 1; i30 < 2; ++i30) {
                    i2 = i23;
                    lArr2[(int)(d - 1)] = (long)Test.fFld;
                    Test.instanceCount *= Test.instanceCount;
                    i29 %= (int)(Test.instanceCount | 1);
                    i25 += (i30 * i30);
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
