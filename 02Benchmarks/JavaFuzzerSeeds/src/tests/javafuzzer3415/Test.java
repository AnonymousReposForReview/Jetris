package tests.javafuzzer3415;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 07:50:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1327855266L;
    public static boolean bFld=true;
    public static double dFld=0.93653;
    public static int iFld=-14;
    public static short sFld=-18783;
    public static volatile int iFld1=89;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -233);
        FuzzerUtils.init(Test.lArrFld, 61049L);
        FuzzerUtils.init(Test.dArrFld, 0.15567);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8, int i9) {

        int i10=146, i11=-64328;
        long l2=4725L;
        float f2=-111.264F, fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, 41.962F);

        bArr[(i7 >>> 1) % N] = Test.bFld;
        Test.iArrFld[(i8 >>> 1) % N] ^= i9;
        i8 <<= i9;
        Test.instanceCount = i7;
        switch (((i8 >>> 1) % 8) * 5) {
        case 26:
            i9 <<= -99;
            break;
        case 19:
            for (i10 = 18; i10 < 381; i10++) {
                Test.instanceCount += i8;
                i8 -= i9;
                i11 *= (int)Test.instanceCount;
                Test.instanceCount *= -35853;
                i11 *= (int)l2;
                f2 = f2;
            }
            fArr1[(i10 >>> 1) % N] -= l2;
        case 8:
            i7 -= (int)15341L;
            break;
        case 23:
            Test.iArrFld[(i11 >>> 1) % N] += (int)99L;
            break;
        case 27:
            Test.iArrFld[(i10 >>> 1) % N] = i8;
        case 7:
            fArr1[(i7 >>> 1) % N] = (float)Test.dFld;
            break;
        case 18:
            f2 += 4760;
            break;
        case 33:
            i7 -= Test.iFld;
            break;
        default:
            Test.iArrFld[(45934 >>> 1) % N] *= (int)Test.instanceCount;
        }
        vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + l2 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(long l, int i3, float f) {

        long l1=4048369403L;
        int i4=7782, i5=0, i6=41795, i12=-8, i13=61;
        byte by=-49, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-19);
        FuzzerUtils.init(fArr, -2.774F);

        for (l1 = 314; l1 > 11; l1 -= 2) {
            byArr[(int)(l1)] = (byte)(-228L + Integer.reverseBytes(i4));
            if (Test.bFld) break;
            for (i5 = 1; i5 < 10; i5++) {
                vMeth2(i5, i4, i6);
                l = i6;
                switch ((i5 % 6) + 117) {
                case 117:
                    for (i12 = 1; i12 < 2; i12++) {
                        Test.iFld += i12;
                        if (Test.bFld) break;
                        i4 += (i12 * i12);
                        i13 -= i13;
                        l *= Test.iFld;
                        Test.dFld = i6;
                        i4 += (i12 * i12);
                    }
                case 118:
                    f *= i3;
                    break;
                case 119:
                    Test.iArrFld[i5] += Test.iFld;
                    break;
                case 120:
                    i13 += (((i5 * i3) + i6) - by);
                    break;
                case 121:
                    i3 += (i5 + i6);
                    break;
                case 122:
                    Test.instanceCount *= -13;
                    break;
                default:
                    i4 += i5;
                }
            }
        }
        vMeth1_check_sum += l + i3 + Float.floatToIntBits(f) + l1 + i4 + i5 + i6 + i12 + i13 + by +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i2) {

        float f3=16.385F;
        int i14=7, i15=-36, i16=-42269, i17=32025, i18=26148;

        vMeth1(Test.instanceCount, i2, f3);
        i2 = i2;
        Test.iFld += Test.iFld;
        for (i14 = 9; i14 < 295; i14++) {
            Test.sFld = (short)Test.iFld1;
            for (i16 = 1; i16 < 6; ++i16) {
                i17 = Test.sFld;
                Test.iFld1 = i14;
                i17 |= Test.iFld1;
            }
            Test.instanceCount -= i2;
            i17 = i2;
            Test.iFld1 >>= i2;
        }
        i2 -= (int)Test.instanceCount;
        i2 = i16;
        Test.iFld -= i18;
        vMeth_check_sum += i2 + Float.floatToIntBits(f3) + i14 + i15 + i16 + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=160, i19=-148, i20=-109, i21=-2, i22=97, i23=-12;
        byte by1=-20;
        float f4=48.789F, fArr2[][]=new float[N][N];

        FuzzerUtils.init(fArr2, 0.155F);

        for (i = 20; i < 349; i++) {
            vMeth(Test.iFld);
        }
        i19 = 1;
        while (++i19 < 288) {
            i20 = 1;
            do {
                Test.lArrFld[i20] = Test.instanceCount;
                Test.iArrFld = Test.iArrFld;
                Test.dFld = by1;
                for (i21 = 1; i21 < 1; i21 += 3) {
                    i1 = -55042;
                    i22 += i21;
                    fArr2 = FuzzerUtils.float2array(N, (float)2.405F);
                    i22 <<= i;
                    f4 *= Test.instanceCount;
                    f4 = i;
                    Test.dArrFld[i19 + 1] = Test.instanceCount;
                }
            } while (++i20 < 87);
            Test.iFld -= (int)Test.instanceCount;
            Test.iArrFld[i19 + 1] *= i22;
            by1 -= (byte)Test.instanceCount;
            i1 = (int)31.137F;
            Test.iFld += (53313 + (i19 * i19));
            switch (((i19 % 9) * 5) + 60) {
            case 91:
                Test.iFld += (8 + (i19 * i19));
                Test.instanceCount = i;
                Test.instanceCount *= i20;
                Test.iFld += (i19 * i19);
                break;
            case 96:
                Test.iFld -= -70;
                if (Test.bFld) break;
                i23 = 1;
                while (++i23 < 87) {
                    Test.dFld = i22;
                    i22 <<= i1;
                }
                break;
            case 103:
                Test.iArrFld[i19 + 1] += (int)Test.instanceCount;
                break;
            case 62:
            case 102:
                Test.instanceCount = i20;
                break;
            case 71:
                fArr2[i19 - 1][i19] -= i22;
                break;
            case 64:
                i22 >>= i20;
                break;
            case 85:
                i1 = i20;
            case 100:
                Test.iFld -= by1;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
