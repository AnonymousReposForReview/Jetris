package tests.javafuzzer3224;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 04:17:19 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static int iFld=89;
    public boolean bFld=false;
    public static double dFld=5.94842;
    public byte byFld=-95;
    public static int iFld1=-14;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.lArrFld, -155L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f3) {

        double d=-1.87553, d1=2.68349, d2=1.2737;
        int i4=24991, i5=-13, i6=6, i7=-28316;
        boolean b=false, bArr[][]=new boolean[N][N];
        byte by=-112;

        FuzzerUtils.init(bArr, false);

        d += Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)f3;
        for (i4 = 13; i4 < 371; ++i4) {
            Test.instanceCount -= -7;
        }
        if (b) {
            bArr[(Test.iFld >>> 1) % N][(-6280 >>> 1) % N] = b;
            Test.iFld -= Test.iFld;
            i6 = 1;
            while (++i6 < 173) {
                d1 = 1;
                while (++d1 < 9) {
                    for (d2 = 1; 1 > d2; ++d2) {
                        i7 >>= i4;
                        d -= i5;
                        Test.iArrFld[(int)(d2)] = (int)d;
                        i7 += i4;
                        i5 -= (int)-15798L;
                    }
                }
            }
        } else {
            by = (byte)Test.iFld;
        }
        vMeth2_check_sum += Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + i4 + i5 + (b ? 1 : 0) + i6 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i7 + by + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth1(float f2, int i2, int i3) {

        int i8=-2, i9=110, i10=-161, i11=3, i12=31511;
        float f4=86.274F;

        vMeth2(2.636F);
        for (i8 = 23; 371 > i8; ++i8) {
            for (i10 = 1; 5 > i10; i10++) {
                Test.iArrFld[i8] <<= i2;
                Test.instanceCount = i8;
                for (f4 = 1; 2 > f4; f4++) {
                    if (bFld) break;
                    i11 -= i3;
                    i2 *= i9;
                    if (bFld) break;
                }
            }
            f2 -= i8;
            i2 = Test.iFld;
            i3 += (int)Test.dFld;
            try {
                Test.iArrFld[i8 + 1] = (126 / i3);
                Test.iArrFld[i8 + 1] = (235 % Test.iArrFld[i8]);
                Test.iArrFld[i8 + 1] = (Test.iFld / i8);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount /= (Test.instanceCount | 1);
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i2 + i3 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f4) + i12;
    }

    public void vMeth(int i, long l, int i1) {

        float f1=0.370F;
        double d3=79.122970;
        int i13=6, i14=29180, i15=-36, i16=85, i17=144;
        short s=-20984;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)102);

        Test.iArrFld[(7453 >>> 1) % N] -= (int)f1;
        Test.iFld = (int)Math.abs(l);
        vMeth1(1.900F, Test.iFld, i1);
        Test.lArrFld[(197 >>> 1) % N] *= i1;
        byFld = (byte)i1;
        for (d3 = 3; d3 < 186; d3++) {
            byArr[(int)(d3)] <<= (byte)10L;
            i13 -= (int)Test.instanceCount;
            i13 += (int)(d3 - i);
            Test.instanceCount += (long)(((d3 * i) + i1) - i1);
            for (i14 = 1; i14 < 9; i14++) {
                for (i16 = 1; i16 < 2; ++i16) {
                    s &= (short)Test.instanceCount;
                    Test.dFld = f1;
                    i17 += (i16 * i16);
                }
            }
        }
        vMeth_check_sum += i + l + i1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + i13 + i14 + i15 + i16
            + i17 + s + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-94.1F, fArr[]=new float[N];
        int i18=-13, i19=-4, i20=4, i21=40863, i22=34272, i23=-21155, i24=-64384, i25=-8;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(fArr, 2.600F);
        FuzzerUtils.init(bArr1, false);

        f *= Test.iFld;
        vMeth(Test.iFld, -7089475773557950473L, 11);
        for (i18 = 10; i18 < 318; i18++) {
            Test.iArrFld[i18 + 1] &= (int)Test.instanceCount;
            for (i20 = 82; 3 < i20; i20--) {
                Test.iArrFld[i20] *= i18;
                if (bFld) {
                    Test.iFld = (int)f;
                    i19 *= i20;
                }
                if (bFld) break;
                i19 = i19;
                byFld -= (byte)Test.instanceCount;
                for (i22 = i18; i22 < 2; i22++) {
                    switch ((i20 % 2) + 105) {
                    case 105:
                        i19 |= (int)Test.instanceCount;
                        Test.instanceCount = (long)f;
                        break;
                    case 106:
                        i21 = byFld;
                        f = i20;
                        Test.dFld += i20;
                        break;
                    default:
                        fArr[i20 + 1] = i18;
                    }
                    Test.iFld += (-5 + (i22 * i22));
                    f = 1L;
                    f = byFld;
                }
                for (i24 = 1; i24 < 2; ++i24) {
                    boolean b1=false;
                    b1 = b1;
                    i19 += (((i24 * i22) + Test.instanceCount) - i19);
                    Test.dFld += Test.iFld;
                    bArr1[i18] = bFld;
                    try {
                        i23 = (i21 % 229);
                        Test.iFld = (1593755785 % i24);
                        Test.iArrFld[i18] = (i21 / -1829957261);
                    } catch (ArithmeticException a_e) {}
                    try {
                        Test.iArrFld[i20 + 1] = (179 / Test.iArrFld[i18 - 1]);
                        i25 = (Test.iArrFld[i18] % i22);
                        Test.iFld = (Test.iArrFld[i24 - 1] / Test.iFld1);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
