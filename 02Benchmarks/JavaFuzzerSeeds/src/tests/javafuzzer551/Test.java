package tests.javafuzzer551;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:32:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static boolean bFld=true;
    public static int iFld=55296;
    public static byte byFld=35;
    public static double dFld=-1.98664;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)110);
        FuzzerUtils.init(Test.iArrFld, -59);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        int i7=-6, i8=-59794, iArr1[]=new int[N];
        float f4=-2.865F;
        long l1=-54050L, lArr1[]=new long[N];
        double d=-40.43208;

        FuzzerUtils.init(iArr1, 19073);
        FuzzerUtils.init(lArr1, 89L);

        if (false) {
            i7 = 1;
            while (++i7 < 366) {
                short s=-3063;
                Test.iFld += (((i7 * Test.iFld) + s) - i7);
                try {
                    Test.iFld = (i7 / -36553);
                    iArr1[i7] = (iArr1[i7] % iArr1[i7 - 1]);
                    i8 = (-40751 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                f4 += i7;
                switch (((i7 % 10) * 5) + 87) {
                case 110:
                    i8 += (-58726 + (i7 * i7));
                    Test.instanceCount += i7;
                    Test.iFld ^= (int)l1;
                    Test.byArrFld = Test.byArrFld;
                    break;
                case 111:
                    switch ((i7 % 3) + 53) {
                    case 53:
                        d -= 13;
                        break;
                    case 54:
                        i8 <<= Test.iFld;
                        lArr1[i7 - 1] *= (long)-44.962F;
                        break;
                    case 55:
                        if (false) break;
                        break;
                    default:
                        Test.instanceCount = -24102;
                    }
                    break;
                case 88:
                    Test.iFld -= 14;
                case 131:
                case 104:
                    i8 >>= i7;
                case 109:
                    f4 /= (s | 1);
                case 106:
                    f4 += (135 + (i7 * i7));
                    break;
                case 128:
                    i8 <<= i7;
                    break;
                case 126:
                    Test.iFld <<= Test.iFld;
                    break;
                case 120:
                    i8 *= Test.iFld;
                    break;
                default:
                    i8 += (((i7 * s) + Test.iFld) - f4);
                }
            }
        } else if (Test.bFld) {
            i8 -= 145;
        }
        long meth_res = i7 + i8 + Float.floatToIntBits(f4) + l1 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l, float f2, float f3) {

        int i9=4612, i10=-12, i11=43877, i12=34;
        long l2=5L;
        double d1=-23.82601;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -98.270F);

        Test.iFld *= Math.max(iMeth2(), Test.iFld);
        i9 = 1;
        while (++i9 < 374) {
            l2 = 1;
            do {
                Test.iFld = (int)Test.instanceCount;
                try {
                    i10 = (i9 % 182);
                    i10 = (i10 / Test.iArrFld[(int)(l2 - 1)][(int)(l2)]);
                    Test.iFld = (-1444482799 % Test.iArrFld[i9][i9 - 1]);
                } catch (ArithmeticException a_e) {}
                d1 *= i9;
                i10 = Test.iFld;
                f2 *= -125.875F;
                i10 = Test.iFld;
                Test.iFld -= i9;
                Test.iFld = Test.byFld;
            } while (++l2 < 5);
            i10 = (int)Test.instanceCount;
            for (i11 = 5; i11 > 1; i11--) {
                i10 += (-203 + (i11 * i11));
                l |= 55138;
            }
        }
        long meth_res = l + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i9 + l2 + i10 +
            Double.doubleToLongBits(d1) + i11 + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i2=125, i3=6, i4=125, i5=139, i6=4512;
        float f1=99.501F, fArr[][]=new float[N][N];
        double d2=38.100697;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8860128810161729L);
        FuzzerUtils.init(fArr, -76.323F);

        i2 = 1;
        while (++i2 < 315) {
            Test.iFld = (int)(((Test.instanceCount / (i3 | 1)) + (i3 - f1)) + ((-(++lArr[i2])) + (++Test.iFld)));
            fArr[i2][i2] = i2;
            Test.iFld += (int)Test.instanceCount;
            i4 = 1;
            while (++i4 < 5) {
                i3 &= 78;
                Test.iFld -= (int)f1;
                for (i5 = 1; i5 < 1; ++i5) {
                    i6 -= (int)f1;
                    Test.instanceCount -= iMeth1(Test.instanceCount, 0.635F, 0.331F);
                    switch (((i3 >>> 1) % 1) + 69) {
                    case 69:
                        d2 += d2;
                        Test.instanceCount += (i5 | i3);
                    }
                    Test.iArrFld[i2][i2] = 193;
                    try {
                        Test.iFld = (1851 % Test.iArrFld[i2][i2]);
                        i6 = (i2 % Test.iArrFld[i5 - 1][i2 - 1]);
                        i6 = (i2 % 245);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.209F;
        byte by=18;
        int i13=-61832, i14=13, i15=241, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5);

        for (int i : iArr) {
            i = (int)((i * Long.reverseBytes(Test.instanceCount)) - ((-i) + (iArr[(i >>> 1) % N]--)));
            i = (int)f;
            Test.bFld = (Test.bFld = ((Test.instanceCount != by) ^ (i <= i)));
            i = (int)(-(iMeth() - f));
            for (i13 = 3; i13 < 63; ++i13) {
                i14 = (int)Test.instanceCount;
                Test.iFld /= 46;
                i15 = 1;
                do {
                    i14 = i15;
                    if (Test.bFld) break;
                    iArr = iArr;
                    i += Test.iFld;
                    if (Test.bFld) break;
                    Test.dFld = f;
                    Test.instanceCount >>= i14;
                } while (++i15 < 2);
            }
            i = (int)Test.instanceCount;
            Test.iFld >>= Test.iFld;
            if (false) break;
            i14 = -244;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
