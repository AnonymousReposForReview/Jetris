package tests.javafuzzer2921;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:04:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1312072875490570743L;
    public static float fFld=110.547F;
    public static volatile long lFld=1078409529032704731L;
    public short sFld=0;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.dArrFld, 115.39144);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {

        boolean b=false;

        b = (b = b);
        i >>>= (--Test.iArrFld[(i2 >>> 1) % N][(218 >>> 1) % N]);
        vSmallMeth_check_sum += i + i1 + i2 + (b ? 1 : 0);
    }

    public static void vMeth(long l2) {

        int i8=-10, i9=-52005, i10=-88, i11=2, i12=-8222, i13=-13, i14=-7;
        double d2=2.29349;

        i8 = 1;
        while (++i8 < 186) {
            l2 *= (long)Test.fFld;
            for (i9 = 1; i9 < 9; i9++) {
                Test.instanceCount += (i9 | i8);
                d2 += Test.lFld;
                i10 <<= i8;
                i10 -= i10;
                i10 += i9;
            }
            for (i11 = 9; i11 > 1; i11 -= 3) {
                i10 += (193 + (i11 * i11));
            }
            for (i13 = 1; i13 < 9; ++i13) {
                i14 += (int)l2;
                Test.iArrFld[i13 - 1][i13] -= (int)Test.fFld;
                i12 = i14;
                i10 = 8;
            }
        }
        vMeth_check_sum += l2 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14;
    }

    public static long lMeth(int i7, long l1) {

        float f2=78.609F;
        int i15=23903, i16=9, i17=-5, i18=27686, i20=850, i21=-38943, iArr[]=new int[N];
        boolean b1=true;
        double d3=93.56820;

        FuzzerUtils.init(iArr, 4);

        f2 -= (--i7);
        vMeth(l1);
        for (i15 = 7; 206 > i15; i15++) {
            i16 = 8;
            i7 += (int)f2;
            if (b1) break;
            Test.iArrFld[i15 + 1][i15] += i7;
            i7 *= (int)l1;
            Test.iArrFld[i15 - 1][i15 + 1] <<= i7;
            for (i17 = 1; 8 > i17; ++i17) {
                d3 /= (i18 | 1);
            }
            for (i20 = 1; i20 < 8; i20++) {
                Test.dArrFld[i15 - 1] -= i15;
                i7 = i15;
                i7 = (int)-2.283F;
            }
        }
        long meth_res = i7 + l1 + Float.floatToIntBits(f2) + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 +
            Double.doubleToLongBits(d3) + i20 + i21 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i4, float f1, long l) {

        int i5=44448, i6=-10;
        double d1=93.28100;
        short s=28991;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9098012837125597549L);

        for (i5 = 6; i5 < 387; ++i5) {
            vSmallMeth((int)(f1 / ((i6++) | 1)), i4, Test.iArrFld[i5 + 1][i5 - 1]++);
        }
        d1 = 1;
        while (++d1 < 379) {
            lArr[(int)(d1 - 1)] += (lMeth(i6, l) - s);
            Test.iArrFld[(int)(d1 + 1)][(int)(d1)] -= -57;
        }
        long meth_res = i4 + Float.floatToIntBits(f1) + l + i5 + i6 + Double.doubleToLongBits(d1) + s +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=106.87326;
        float f=125.97F, fArr[]=new float[N];
        int i3=-2, i22=-11, i23=-50535, i24=2, i25=-12992, i26=1, i27=-22727;
        boolean b2=false;
        byte by=-25;
        long lArr1[][]=new long[N][N], lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 20.681F);
        FuzzerUtils.init(lArr1, 47540L);
        FuzzerUtils.init(lArr2, -37098L);

        for (int smallinvoc=0; smallinvoc<521; smallinvoc++) vSmallMeth((int)(-((d++) * f)), (int)(3 - (Math.abs(i3) -
            (fArr[(215 >>> 1) % N]++))), (int)((-(2.925F * iMeth(i3, f, Test.instanceCount))) - 1.274F));
        for (i22 = 12; i22 < 259; ++i22) {
            i3 <<= 0;
            i23 *= (int)Test.lFld;
            if (b2) {
                if (b2) {
                    f = Test.instanceCount;
                    i23 -= i23;
                    i23 &= i22;
                } else {
                    lArr1[i22 - 1][i22 - 1] = 9;
                }
                i3 += (i22 * i22);
                Test.dArrFld[i22 - 1] += 4L;
            } else {
                i3 = sFld;
                i3 >>= i23;
            }
            b2 = b2;
            Test.lFld = i22;
            i3 = -5;
            Test.iArrFld[i22 - 1][i22] <<= i22;
            i23 = 1;
        }
        i23 = (int)d;
        for (i24 = 11; i24 < 226; i24++) {
            for (i26 = i24; 117 > i26; i26 += 3) {
                lArr1[i24 - 1][i24 - 1] = i23;
                d -= -4;
                i23 = 92;
                by >>= (byte)i27;
            }
            i23 = i26;
            if (b2) break;
            i27 = by;
        }
        sFld = (short)Test.fFld;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
