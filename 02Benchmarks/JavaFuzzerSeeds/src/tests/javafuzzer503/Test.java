package tests.javafuzzer503;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:46:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-191L;
    public static int iFld=8316;
    public static byte byFld=-121;
    public volatile double dFld=2.67605;
    public static volatile short sFld=23307;
    public float fFld=47.697F;
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -91L);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        byte by=40;
        double d1=-116.34251;
        int i4=-3, i5=-54;
        boolean b=false;
        short s2=26184;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.86F);

        by *= (byte)Test.instanceCount;
        Test.instanceCount -= (long)-1.231F;
        i3 -= (int)d1;
        i3 -= (int)-84.364F;
        i4 = 1;
        while (++i4 < 213) {
            i3 = 161;
            d1 = d1;
            fArr[(Test.iFld >>> 1) % N] *= (float)d1;
            Test.iFld -= (int)d1;
            i3 += 6;
            i3 += i4;
            Test.instanceCount = i3;
            i5 = 1;
            do {
                if (b) continue;
                Test.instanceCount = s2;
            } while (++i5 < 8);
        }
        vMeth_check_sum += i3 + by + Double.doubleToLongBits(d1) + i4 + i5 + (b ? 1 : 0) + s2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth(long l) {

        int i1=48806, i2=-64465, i6=13, i7=-46629, i8=142, i9=6, i10=10, i11=0, iArr1[]=new int[N];
        double d2=113.97403;
        boolean b1=false;

        FuzzerUtils.init(iArr1, -46303);

        for (i1 = 16; i1 < 303; i1++) {
            if (b1) {
                vMeth(i1);
            } else if (b1) {
                for (i6 = 6; i1 < i6; --i6) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        d2 = Test.byFld;
                        Test.instanceCount += (i8 | i7);
                        i2 += i8;
                        Test.lArrFld = Test.lArrFld;
                        iArr1[i6] <<= i6;
                        i9 = 28;
                        Test.lArrFld[i6 + 1][i8] = Test.byFld;
                    }
                    for (i10 = 1; 1 < i10; --i10) {
                        Test.iFld <<= -222;
                        try {
                            Test.iFld = (i10 / iArr1[i10]);
                            iArr1[i10 + 1] = (i8 / -36218);
                            i7 = (-1522199984 % i11);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            } else if (b1) {
                Test.instanceCount += Test.instanceCount;
            }
        }
        long meth_res = l + i1 + i2 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth(double d, short s, short s1) {

        int i=-6, i12=3, i13=160, i14=-207, i15=4, i16=-27800;
        boolean b2=false;
        float f=1.744F;

        i = byMeth(Test.instanceCount);
        b2 = b2;
        i12 = 329;
        while ((i12 -= 3) > 0) {
            for (i13 = i12; 14 > i13; ++i13) {
                f *= Test.instanceCount;
                for (i15 = 1; i15 < 1; ++i15) {
                    if (b2) break;
                    f = i15;
                    i16 *= (int)f;
                    if (b2) continue;
                    f = 11;
                    fArrFld[i13] += i12;
                    if (true) break;
                    i16 <<= i15;
                }
                Test.lArrFld[i12 - 1][i12 + 1] = i13;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + s1 + i + (b2 ? 1 : 0) + i12 + i13 + i14 +
            Float.floatToIntBits(f) + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l1=63151L, l2=-4L, l3=-1345997693L;
        int i17=8, i18=-9, i19=-222, i20=-6, i21=-7, i22=-46681, i23=-39056, i24=11, i25=1, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 11);

        iArr[(35324 >>> 1) % N] = iMeth(dFld, Test.sFld, Test.sFld);
        for (l1 = 4; 205 > l1; l1++) {
            for (l2 = 4; 125 > l2; l2++) {
                iArr[(int)(l2)] = (int)l2;
                i18 -= (int)fFld;
                Test.instanceCount += (l2 * l2);
            }
            Test.iFld += i18;
            i17 = (int)Test.instanceCount;
            Test.lArrFld[(int)(l1 + 1)][(int)(l1 + 1)] <<= l2;
            for (i19 = 1; i19 < 125; i19++) {
                Test.lArrFld[i19][i19] <<= i19;
                Test.byFld = (byte)i17;
                iArr = FuzzerUtils.int1array(N, (int)5);
                l3 += (i19 * i17);
                Test.byFld = (byte)3;
                Test.iFld += (int)-2466390889862305109L;
                i20 = i17;
            }
        }
        i21 = 1;
        do {
            for (i22 = 8; i22 < 143; i22 += 3) {
                for (i24 = i21; i24 < 4; i24++) {
                    Test.instanceCount <<= l1;
                    Test.instanceCount = i23;
                    Test.iFld += i24;
                    Test.instanceCount -= (long)fFld;
                    if (false) continue;
                    i25 = Test.iFld;
                    switch (((i22 % 1) * 5) + 127) {
                    case 128:
                        try {
                            i17 = (i18 % Test.iFld);
                            i20 = (471456518 / i21);
                            i25 = (i22 % 61);
                        } catch (ArithmeticException a_e) {}
                        fFld *= i23;
                        break;
                    }
                    i17 -= i23;
                }
            }
        } while (++i21 < 176);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
