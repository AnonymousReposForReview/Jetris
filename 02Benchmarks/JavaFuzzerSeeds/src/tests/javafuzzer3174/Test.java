package tests.javafuzzer3174;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:14:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=27510L;
    public static float fFld=114.531F;
    public static int iFld=-32584;
    public static boolean bFld=false;
    public static int iFld1=127;
    public static double dFld=36.56071;

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4, long l, int i5) {

        int i6=-210, i7=-2, i8=-40, i9=37430, iArr1[][]=new int[N][N];
        long l1=8L;

        FuzzerUtils.init(iArr1, -64359);

        i4 = (int)Test.instanceCount;
        Test.iFld = 10;
        Test.instanceCount >>= 1;
        i6 = 1;
        while (++i6 < 138) {
            for (i7 = 1; i7 < 11; ++i7) {
                i4 += (((i7 * i7) + Test.fFld) - l);
                Test.iFld += i7;
                iArr1[i6 + 1][i6] = i9;
                Test.instanceCount = l1;
                i4 = i6;
                if (Test.bFld) break;
            }
            i5 += (int)(7L + (i6 * i6));
            l1 %= (i7 | 1);
            i4 = i7;
            i4 = (int)l;
        }
        long meth_res = i4 + l + i5 + i6 + i7 + i8 + i9 + l1 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        double d=0.90831;
        int i11=3844, i12=5, i13=74, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -35133);
        FuzzerUtils.init(lArr, 29212L);

        Test.fFld -= Math.max((long)((d + Test.iFld) - fMeth(195, -826982902L, Test.iFld)), Test.instanceCount);
        for (int i10 : iArr2) {
            Test.fFld = i10;
            iArr2[(i10 >>> 1) % N] = Test.iFld;
            i10 += (int)Test.instanceCount;
            i11 = 1;
            do {
                Test.instanceCount += (i11 * i11);
            } while (++i11 < 4);
            iArr2[(i10 >>> 1) % N] = (int)Test.instanceCount;
            i12 = 1;
            do {
                byte by=-14;
                lArr[i12] >>= by;
                i13 = 1;
                while (++i13 < 1) {
                    Test.iFld += i13;
                    i10 += (i13 | i10);
                }
                if (Test.bFld) continue;
                d += d;
            } while (++i12 < 4);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
    }

    public static byte byMeth() {

        double d1=0.53838;

        vMeth();
        Test.instanceCount -= (long)d1;
        Test.iFld = 49824;
        Test.iFld *= Test.iFld;
        Test.iFld %= (int)((long)(Test.fFld) | 1);
        long meth_res = Double.doubleToLongBits(d1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=-6, i2=55412, i3=75, i14=-35116, i15=13510, i16=-112, i17=50176, i18=-4, i19=-148, i20=-13,
            i21=17759, i22=-13, iArr[]=new int[N];
        byte by1=-76, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -200);
        FuzzerUtils.init(byArr, (byte)-34);
        FuzzerUtils.init(bArr, false);

        i -= (int)(Test.instanceCount - Test.instanceCount);
        for (i1 = 1; i1 < 176; ++i1) {
            iArr[i1] -= byArr[i1 + 1];
            i3 = (i >>= byMeth());
            Test.iFld >>= Test.iFld1;
        }
        if (Test.bFld) {
            for (i14 = 23; i14 < 369; ++i14) {
                switch ((i14 % 6) + 77) {
                case 77:
                    for (i16 = 1; i16 < 73; ++i16) {
                        for (i18 = 1; 2 > i18; ++i18) {
                            i2 += (int)Test.dFld;
                            i19 += (i18 * i18);
                            i3 = 13;
                            Test.fFld += (((i18 * Test.fFld) + i19) - Test.iFld);
                            switch ((((5 >>> 1) % 2) * 5) + 119) {
                            case 127:
                                if (Test.bFld) continue;
                                byArr[i16] *= (byte)-6759;
                                break;
                            case 123:
                                bArr[i14 - 1] = Test.bFld;
                                i17 -= i;
                                Test.iFld1 = i15;
                                break;
                            }
                            by1 = (byte)9;
                        }
                        i = (int)33373L;
                        i3 += (((i16 * i2) + Test.iFld) - i);
                        Test.fFld -= Test.iFld;
                        iArr[i14 - 1] |= i;
                        for (i20 = 1; i20 < 2; i20++) {
                            if (Test.bFld) continue;
                            Test.instanceCount -= (long)Test.dFld;
                            i22 -= (int)-53085L;
                            i2 += (((i20 * i22) + Test.instanceCount) - Test.fFld);
                        }
                    }
                    break;
                case 78:
                    if (Test.bFld) break;
                    break;
                case 79:
                    Test.instanceCount = -6982;
                    break;
                case 80:
                    i3 += i19;
                case 81:
                    i17 -= i18;
                    break;
                case 82:
                    i17 = (int)Test.instanceCount;
                    break;
                }
            }
        } else {
            i19 = (int)Test.instanceCount;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
