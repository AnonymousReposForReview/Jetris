package tests.javafuzzer1934;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 06:17:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7682197510047340212L;
    public static float fFld=13.538F;
    public static byte byFld=-34;
    public int iFld=-23099;
    public static volatile boolean bFld=true;
    public short sFld=27793;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 236);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, boolean b, int i7) {

        int i8=-214, i9=7648, i10=-2, i11=-233;
        short s=20675;

        i6 += i7;
        for (i8 = 149; i8 > 8; i8--) {
            i9 *= 124;
            if (b) continue;
            i6 *= -241;
            Test.instanceCount <<= i8;
            for (i10 = 1; i10 < 11; i10++) {
                if (i8 != 0) {
                }
                Test.instanceCount = s;
                i7 = (int)Test.instanceCount;
                i7 = i10;
                i7 = (int)Test.fFld;
                i11 |= i7;
            }
            Test.iArrFld[i8] -= (int)Test.instanceCount;
            if (i9 != 0) {
            }
        }
        long meth_res = i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=109, i12=-204, i13=14, i14=-10662, i15=7, i16=44814;
        boolean b1=true;
        double d=0.21809;

        i5 = 1;
        do {
            Test.iArrFld[i5 - 1] += (int)Test.instanceCount;
            i4 >>>= (int)((Math.abs(Test.instanceCount) + i5) - iMeth(i4, b1, i5));
            switch ((i5 % 1) + 42) {
            case 42:
                i4 += i5;
                i3 = -50065;
                for (i12 = i5; i12 < 9; ++i12) {
                    i4 = i3;
                }
                break;
            }
            for (d = 1; d < 9; d++) {
                i14 *= i13;
                i3 *= i4;
            }
        } while (++i5 < 169);
        i4 += (int)10391995461544163L;
        for (i15 = 126; i15 > 6; i15--) {
            Test.instanceCount -= (long)Test.fFld;
            i16 += (int)(-3L + (i15 * i15));
        }
        vMeth1_check_sum += i3 + i4 + i5 + (b1 ? 1 : 0) + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + i16;
    }

    public void vMeth(int i, int i1, int i2) {

        int i17=-56585, i18=-60435, i19=-5, i20=-98;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2559944727L);

        for (long l : lArr) {
            i1 = (Test.iArrFld[(i1 >>> 1) % N]--);
            vMeth1(i2, i2);
            i <<= Test.byFld;
            Test.byFld = (byte)i2;
            i1 = Test.byFld;
            switch ((((i >>> 1) % 2) * 5) + 66) {
            case 76:
                for (i17 = 1; i17 < 4; i17 += 3) {
                    Test.fFld += (i17 * i17);
                    for (i19 = 1; 4 > i19; i19++) {
                        i = i20;
                        i18 += (int)66.771F;
                        lArr[i17 - 1] -= (long)Test.fFld;
                        Test.instanceCount -= (long)Test.fFld;
                        Test.instanceCount += (((i19 * i1) + i17) - l);
                    }
                }
                break;
            case 74:
                if (false) continue;
                break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=3045, i22=-8, i23=-41631, i24=-216, i25=47647;
        double d1=46.91453, dArr[]=new double[N];
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 2.115746);
        FuzzerUtils.init(byArr, (byte)-52);
        FuzzerUtils.init(fArr, 0.122F);

        vMeth(iFld, iFld, iFld);
        bArrFld[(0 >>> 1) % N] = Test.bFld;
        for (i21 = 15; i21 < 328; ++i21) {
            if (Test.bFld) continue;
            dArr[i21 - 1] = sFld;
            sFld -= (short)d1;
            Test.fFld += i21;
            iFld = 12;
            Test.iArrFld[i21] *= (int)Test.instanceCount;
            i22 /= (int)((long)(Test.fFld) | 1);
            Test.iArrFld[i21] *= i21;
            sFld *= (short)-51.114F;
            for (i23 = i21; i23 < 80; i23++) {
                Test.fFld += (((i23 * iFld) + i22) - i22);
                Test.iArrFld[i21 - 1] = 13263;
                i25 = 1;
                do {
                    if (Test.bFld) {
                        i22 |= i21;
                        i24 = (int)Test.instanceCount;
                        byArr[i25 - 1] += (byte)i21;
                    } else if (Test.bFld) {
                        fArr[i23 - 1] += i25;
                    }
                    Test.iArrFld[i25] = (int)Test.fFld;
                    i22 += (int)(0.295F + (i25 * i25));
                    iFld += (i25 | i25);
                    switch ((i23 % 6) + 127) {
                    case 127:
                        Test.fFld += i25;
                        Test.instanceCount += (49358 + (i25 * i25));
                        i24 *= (int)30.96247;
                        iFld = i23;
                        break;
                    case 128:
                    case 129:
                        Test.bFld = Test.bFld;
                        break;
                    case 130:
                        sFld = (short)1.106256;
                    case 131:
                        d1 -= Test.instanceCount;
                        break;
                    case 132:
                    default:
                        iFld <<= iFld;
                    }
                } while (++i25 < 1);
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
