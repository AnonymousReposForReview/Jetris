package tests.javafuzzer2002;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:15:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1597665310L;
    public static double dFld=-1.56819;
    public static float fFld=-13.731F;
    public volatile byte byFld=98;
    public volatile short sFld=11786;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.dArrFld, -126.70543);
        FuzzerUtils.init(Test.lArrFld, -2L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=34061;

        i6 *= (int)-1.70235;
        long meth_res = i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, int i5) {

        boolean b=true;
        int i7=11, i8=-5, i9=-229, i10=-10;
        short s1=23989, sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)10473);

        i4 -= iMeth();
        for (short s : sArr1) {
            i4 -= 62298;
            if (b) break;
            i5 >>>= (int)0L;
            Test.iArrFld[(i5 >>> 1) % N][(i4 >>> 1) % N] %= (int)((long)(Test.fFld) | 1);
        }
        for (i7 = 12; 238 > i7; ++i7) {
            s1 = (short)i8;
            for (i9 = 1; i9 < 7; i9++) {
                switch ((i9 % 1) + 20) {
                case 20:
                    i5 -= i7;
                    Test.fFld -= i8;
                    i8 = i7;
                    break;
                }
                i5 *= (int)Test.instanceCount;
                Test.fFld -= i9;
            }
        }
        long meth_res = i4 + i5 + (b ? 1 : 0) + i7 + i8 + s1 + i9 + i10 + FuzzerUtils.checkSum(sArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(double d, int i1) {

        int i2=1, i3=8171, i11=-14, i12=135, i13=45699, i14=-12, i15=3933, i16=-23, i17=5, i18=-3;

        i1 = (int)-1053474355L;
        for (i2 = 9; i2 < 172; i2++) {
            lMeth(i3, i3);
        }
        i3 = i2;
        i3 = (int)Test.fFld;
        Test.dArrFld[(i1 >>> 1) % N] *= i2;
        for (i11 = 18; i11 < 311; i11++) {
            for (i13 = 6; i13 > 1; --i13) {
                for (i15 = 2; 1 < i15; i15 -= 2) {
                    Test.lArrFld[i15 - 1] -= (long)Test.dFld;
                }
                Test.instanceCount = i2;
                Test.instanceCount *= (long)Test.fFld;
                for (i17 = 1; i17 < 2; ++i17) {
                    i16 *= (int)-36903L;
                    d *= Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + i3 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i19=-28627, i20=50, i21=197, i22=-30647, i23=15867, i24=-157, i25=-107;
        boolean b1=true;
        double d1=2.72347;
        long l=-7276417756683172824L;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)17623);
        FuzzerUtils.init(fArr, -65.378F);

        sArr[(-43031 >>> 1) % N] = (short)((i + Math.max(i, i)) - Test.dFld);
        vMeth(Test.dFld, i);
        Test.instanceCount *= i;
        if (true) {
            Test.dFld += -21638;
            if (true) {
                i19 = 1;
                while (++i19 < 192) {
                    b1 = b1;
                    if (b1) {
                        for (i20 = 3; i20 < 131; ++i20) {
                            i22 = 1;
                            while ((i22 += 2) < 2) {
                                i21 += (-52581 + (i22 * i22));
                                i %= (int)(Test.instanceCount | 1);
                                i21 = (int)Test.instanceCount;
                                Test.instanceCount = i20;
                            }
                        }
                        for (d1 = 131; 8 < d1; --d1) {
                            Test.fFld += (float)(d1 - Test.fFld);
                            switch ((int)(((d1 % 7) * 5) + 105)) {
                            case 117:
                                byFld = (byte)Test.dFld;
                                break;
                            case 129:
                                switch ((int)((d1 % 6) + 14)) {
                                case 14:
                                    Test.fFld += (float)d1;
                                    i = i19;
                                    break;
                                case 15:
                                    Test.instanceCount = i19;
                                    switch ((int)((d1 % 10) + 90)) {
                                    case 90:
                                        i += (int)(((d1 * Test.instanceCount) + byFld) - i20);
                                        sFld += (short)(d1 * d1);
                                        sFld += (short)(d1 * d1);
                                        for (i24 = 2; 1 < i24; i24 -= 3) {
                                            i <<= 0;
                                            Test.iArrFld[i19][(int)(d1)] >>= i19;
                                        }
                                        break;
                                    case 91:
                                        i23 *= i25;
                                        break;
                                    case 92:
                                        try {
                                            i21 = (Test.iArrFld[(i21 >>> 1) % N][i19 + 1] % i21);
                                            i25 = (i22 / i21);
                                            Test.iArrFld[i19][(int)(d1 - 1)] = (i23 % i24);
                                        } catch (ArithmeticException a_e) {}
                                        break;
                                    case 93:
                                        Test.instanceCount -= i25;
                                        break;
                                    case 94:
                                        i25 += (int)Test.instanceCount;
                                        break;
                                    case 95:
                                        i25 >>= i22;
                                        break;
                                    case 96:
                                        Test.instanceCount += (long)((long)d1 | i25);
                                        break;
                                    case 97:
                                        fArr[(int)(d1)] = -14;
                                    case 98:
                                        Test.lArrFld[i19] = 1155404181L;
                                        break;
                                    case 99:
                                        Test.lArrFld[(int)(d1 - 1)] = Test.instanceCount;
                                        break;
                                    default:
                                        i <<= (int)Test.instanceCount;
                                    }
                                case 16:
                                    i25 += (int)(((d1 * i) + Test.instanceCount) - Test.fFld);
                                    break;
                                case 17:
                                    i -= i24;
                                    break;
                                case 18:
                                    Test.fFld *= Test.fFld;
                                    break;
                                case 19:
                                }
                                break;
                            case 120:
                                i25 += (int)(((d1 * Test.fFld) + l) - i20);
                            case 108:
                                i25 >>= i23;
                                break;
                            case 116:
                                i25 <<= sFld;
                            case 128:
                                if (b1) break;
                                break;
                            case 122:
                            }
                        }
                    } else {
                        i23 = i23;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
