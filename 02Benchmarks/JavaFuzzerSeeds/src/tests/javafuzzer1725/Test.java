package tests.javafuzzer1725;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 02:32:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8716617590495162059L;
    public static boolean bFld=true;
    public static byte byFld=102;
    public static int iFld=217;
    public static float fFld=1.498F;
    public static short sFld=30927;
    public long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];
    public static byte byArrFld1[]=new byte[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-101);
        FuzzerUtils.init(Test.byArrFld1, (byte)78);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, short s) {

        int i9=104, i10=-2, i11=6133, i12=28691, i13=1085, i14=-57991, iArr1[]=new int[N];
        double d=1.85491;
        float f=20.383F;
        long l2=-6217844264322904626L, lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(lArr, 3956291517L);

        for (i9 = 4; i9 < 123; ++i9) {
            d *= Test.instanceCount;
            for (i11 = 1; i11 < 13; ++i11) {
                i8 += i11;
                f -= Test.byFld;
                i8 = i9;
                for (i13 = 2; i13 > 1; i13--) {
                    Test.byArrFld[i11] += (byte)i8;
                }
                l2 = 2;
                do {
                    Test.byArrFld1[i11 - 1] = (byte)i12;
                    i14 >>= i14;
                } while ((l2 -= 3) > 0);
                switch (((i11 % 3) * 5) + 109) {
                case 111:
                    iArr1[i9] /= (int)(i12 | 1);
                    break;
                case 112:
                    lArr = lArr;
                    i14 += (i11 - i10);
                    break;
                case 121:
                    if (Test.bFld) break;
                    break;
                default:
                    Test.instanceCount = l2;
                }
            }
        }
        vMeth1_check_sum += i8 + s + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + Float.floatToIntBits(f) + i13
            + i14 + l2 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l1, int i7) {

        int i15=-12, i16=8, i17=14, i18=-13, i19=25129, iArr2[]=new int[N];
        float f1=0.996F;
        short s1=23266, sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)5042);
        FuzzerUtils.init(iArr2, 117);

        Test.instanceCount = (sArr[(i7 >>> 1) % N][(i7 >>> 1) % N] - 7);
        vMeth1(i7, (short)(25392));
        for (i15 = 219; i15 > 9; i15--) {
            for (f1 = 8; f1 > 1; --f1) {
                i16 = (int)Test.instanceCount;
            }
            iArr2[i15 - 1] -= i17;
            i7 -= s1;
            l1 += (i15 * i15);
        }
        try {
            for (i18 = 7; 346 > i18; ++i18) {
                if (i7 != 0) {
                    vMeth_check_sum += l1 + i7 + i15 + i16 + Float.floatToIntBits(f1) + i17 + s1 + i18 + i19 +
                        FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                i17 = 45587;
                i17 += (-12 + (i18 * i18));
                i17 <<= i15;
                iArr2[i18] = i17;
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            l1 = 8;
        }
        vMeth_check_sum += l1 + i7 + i15 + i16 + Float.floatToIntBits(f1) + i17 + s1 + i18 + i19 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth(int i, long l) {

        int i1=-27409, i2=38, i3=79, i4=-12, i5=230, i6=-1, iArr[]=new int[N];
        short s2=31983;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr, 115.43F);

        for (i1 = 3; i1 < 210; ++i1) {
            if ((Test.bFld = ((Test.bFld = Test.bFld) && (127 != i))) != Test.bFld) continue;
            for (i3 = 1; i3 < 8; i3 += 3) {
                switch ((i1 % 8) + 22) {
                case 22:
                    lArrFld[i3 + 1] >>= (++i4);
                    for (i5 = 1; i5 < 4; ++i5) {
                        try {
                            i = (47453 % i1);
                            i = (i1 / iArr[i5]);
                            iArr[i5] = (iArr[i5] / 162);
                        } catch (ArithmeticException a_e) {}
                    }
                    lArrFld[i1] = 40031;
                    break;
                case 23:
                    vMeth(Test.instanceCount, i6);
                    break;
                case 24:
                    switch (((i3 % 9) * 5) + 127) {
                    case 149:
                        i2 += i6;
                        i4 *= i1;
                        i6 -= i;
                        break;
                    case 139:
                        i6 -= i1;
                        i *= i5;
                        break;
                    case 166:
                        fArr[i1] *= i3;
                        break;
                    case 161:
                        i4 *= (int)Test.instanceCount;
                    case 151:
                        try {
                            i4 = (i % i4);
                            i6 = (-24364 % i1);
                            i6 = (-34533 / i3);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 146:
                        i *= -205;
                        break;
                    case 131:
                        iArr[i3] = i6;
                    case 156:
                        i4 *= (int)Test.instanceCount;
                    case 165:
                        i2 += (3321 + (i3 * i3));
                        break;
                    default:
                        i6 = i6;
                    }
                case 25:
                    i6 += i3;
                    break;
                case 26:
                    s2 -= (short)l;
                    break;
                case 27:
                    lArrFld[i3 - 1] += l;
                    break;
                case 28:
                    s2 >>= (short)Test.instanceCount;
                case 29:
                    i2 += (((i3 * i2) + i5) - i5);
                default:
                    i6 = i6;
                }
            }
        }
        long meth_res = i + l + i1 + i2 + i3 + i4 + i5 + i6 + s2 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-166, i21=13, i22=217, i23=8, i24=9341, i25=0, i26=-12;
        double d1=-94.37642;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        iMeth(Test.iFld, Test.instanceCount);
        for (i20 = 11; i20 < 312; i20++) {
            iArrFld[i20 - 1] = i20;
            Test.instanceCount <<= 48252;
            Test.iFld = i21;
            Test.bFld = Test.bFld;
            Test.iFld = Test.iFld;
        }
        i21 -= i20;
        Test.fFld += Test.instanceCount;
        Test.instanceCount = Test.sFld;
        for (i22 = 17; i22 < 295; ++i22) {
            switch ((((i23 >>> 1) % 3) * 5) + 97) {
            case 98:
                Test.iFld += (i22 + i21);
                bArr[i22 - 1] = Test.bFld;
                break;
            case 100:
                i24 = 1;
                while (++i24 < 90) {
                    for (i25 = 1; 1 > i25; i25++) {
                        switch (((i24 % 6) * 5) + 67) {
                        case 87:
                        case 80:
                        case 77:
                            Test.sFld += (short)(i25 * i25);
                            Test.instanceCount = -5;
                            Test.fFld += i20;
                            break;
                        case 90:
                            Test.fFld = i21;
                            i26 &= (int)Test.instanceCount;
                            switch (((i25 % 6) * 5) + 80) {
                            case 109:
                                switch (((i22 % 2) * 5) + 4) {
                                case 11:
                                    Test.fFld += (-243 + (i25 * i25));
                                    i21 = (int)d1;
                                    Test.fFld = i22;
                                case 6:
                                    Test.instanceCount += (i25 + Test.fFld);
                                    lArrFld[i25] *= (long)Test.fFld;
                                    Test.fFld -= i26;
                                    break;
                                }
                                break;
                            case 104:
                                i21 += (((i25 * i21) + i20) - Test.instanceCount);
                                break;
                            case 81:
                                iArrFld[i25] &= (int)Test.instanceCount;
                            case 102:
                                i26 += (((i25 * Test.instanceCount) + i24) - i25);
                                break;
                            case 97:
                            case 88:
                                i21 = Test.iFld;
                                break;
                            default:
                                iArrFld = iArrFld;
                            }
                            break;
                        case 83:
                            i23 -= -21626;
                            break;
                        case 74:
                            d1 -= i25;
                            break;
                        }
                    }
                }
            case 101:
                Test.iFld <<= i24;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
