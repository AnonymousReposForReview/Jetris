package tests.javafuzzer3123;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:22:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3722720592L;
    public static volatile float fFld=0.188F;
    public static short sFld=-1428;
    public static short sFld1=-17181;
    public static long lFld=-55L;
    public long lFld1=-459729417362102071L;
    public volatile byte byFld=-54;
    public int iFld=38222;
    public static volatile byte byArrFld[][]=new byte[N][N];
    public static volatile double dArrFld[]=new double[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)63);
        FuzzerUtils.init(Test.dArrFld, 0.39833);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-248, i8=62439, i9=-3, i10=12, i11=-82, i12=-182, i13=3, i14=57520, i15=-8, iArr1[]=new int[N];
        long l1=10646L;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 2);

        i7 *= (int)Test.fFld;
        if (b1) {
            i8 = 268;
            do {
                Test.sFld = (short)i8;
            } while (--i8 > 0);
            Test.fFld += i7;
            for (i9 = 4; 128 > i9; ++i9) {
                for (i11 = 1; i11 < 13; i11++) {
                    i12 >>= -31613;
                }
                i10 -= (int)Test.instanceCount;
                i12 += i10;
                for (l1 = 1; 13 > l1; ++l1) {
                    iArr1 = FuzzerUtils.int1array(N, (int)-6);
                }
                for (i14 = i9; i14 < 13; ++i14) {
                    iArr1[i14] += i7;
                    if (b1) break;
                }
            }
        } else if (b1) {
            Test.sFld1 ^= (short)l1;
        } else {
            Test.instanceCount >>= i11;
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + l1 + i13 + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l) {

        int i4=215, i5=-53556, i6=10, i16=59098, i17=-5830;
        float f1=17.657F;
        byte by=-51;
        double d2=-120.67915;

        i4 = 1;
        while (++i4 < 131) {
            for (i5 = 1; i5 < 12; i5++) {
                boolean b2=true;
                i6 = (i6--);
                f1 += (((i5 * i5) + f1) - l);
                vMeth1();
                if (b2) break;
                i6 = i4;
            }
            for (i16 = 12; i16 > 1; i16--) {
                i17 = Test.sFld1;
                by = (byte)Test.instanceCount;
                if (i5 != 0) {
                    vMeth_check_sum += l + i4 + i5 + i6 + Float.floatToIntBits(f1) + i16 + i17 + by +
                        Double.doubleToLongBits(d2);
                    return;
                }
                Test.instanceCount &= i4;
                i6 -= -145;
                d2 *= i4;
            }
            i6 += (i4 + Test.sFld);
        }
        vMeth_check_sum += l + i4 + i5 + i6 + Float.floatToIntBits(f1) + i16 + i17 + by + Double.doubleToLongBits(d2);
    }

    public static long lMeth() {

        int i1=-56, i2=186, i3=-100, i18=32, i19=11, iArr[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        float f=-6.999F, fArr[]=new float[N];
        double d3=-8.13924, dArr[][]=new double[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 4.90570);
        FuzzerUtils.init(iArr, 63926);
        FuzzerUtils.init(fArr, 58.32F);

        for (i1 = 11; i1 < 266; i1++) {
            i3 = 6;
            do {
                bArr[i1 + 1] = (b && ((i2 += i2) < (57230L * (++dArr[i3 - 1][i1 - 1]))));
                i2 += (int)(i2 += (int)((Test.instanceCount + f) - Math.abs(i3)));
                f += iArr[i3 + 1];
            } while (--i3 > 0);
            iArr[i1] /= (int)(((Test.instanceCount + Test.instanceCount) * ((i3 << 9976) - (i1 + i2))) | 1);
            vMeth(Test.instanceCount);
            Test.instanceCount += (i1 * i1);
            Test.instanceCount += Test.instanceCount;
            try {
                iArr[i1 + 1] = (i2 % 19488);
                i2 = (60 / i2);
                i2 = (160 / iArr[i1]);
            } catch (ArithmeticException a_e) {}
            Test.lFld -= Test.lFld;
            for (i18 = 1; i18 < 6; ++i18) {
                i2 = 6;
                fArr[i1 - 1] -= i18;
                d3 = i19;
            }
        }
        long meth_res = i1 + i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f) + i18 + i19 + Double.doubleToLongBits(d3)
            + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-97, i20=12, i21=-15, i22=59954, i23=1, i24=0, i25=-9;
        double d=0.20506;
        float f2=0.437F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3641760377426975708L);

        try {
            Test.byArrFld[(i >>> 1) % N][(i >>> 1) % N] = (byte)(((i + d) + lMeth()) - d);
            Test.byArrFld[(i >>> 1) % N][(6 >>> 1) % N] *= (byte)6;
            lArr = lArr;
            for (i20 = 2; i20 < 381; ++i20) {
                f2 = 1;
                do {
                    d -= d;
                    iArrFld = iArrFld;
                    if (true) continue;
                    iArrFld[i20][i20 - 1] = 52;
                    for (i22 = 1; i22 < 1; i22++) {
                        i = (int)Test.instanceCount;
                        i = (int)Test.instanceCount;
                        i21 = (int)58943L;
                        Test.instanceCount -= Test.instanceCount;
                        Test.fFld = f2;
                        i21 = (int)Test.lFld;
                        Test.instanceCount += (long)f2;
                    }
                    for (i24 = 1; i24 < 1; i24++) {
                        iArrFld[i24][(int)(f2)] = i22;
                        iArrFld[i24 + 1][i24 + 1] = 14;
                        lFld1 += (i24 * i24);
                        i21 = i24;
                        Test.fFld *= i23;
                        i23 += (i24 - byFld);
                    }
                    iFld = i25;
                    iArrFld[i20 + 1][i20 - 1] = i22;
                } while (++f2 < 66);
                byFld += (byte)(((i20 * Test.lFld) + i24) - Test.sFld);
                lFld1 /= (i24 | 1);
                Test.fFld += lFld1;
            }
        }
        catch (UserDefinedExceptionTest exc2) {
            i23 = i25;
        }
        catch (NegativeArraySizeException exc3) {
            iArrFld[(i >>> 1) % N][(25312 >>> 1) % N] = i25;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
