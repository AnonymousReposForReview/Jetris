package tests.javafuzzer2001;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:15:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=34655L;
    public static int iFld=8;
    public static volatile float fFld=-64.922F;
    public short sFld=1883;
    public static byte byFld=99;
    public volatile long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=-6, i3=-63294, i4=5, iArr[]=new int[N];
        float f=100.802F;
        double d=1.111111;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -14644);
        FuzzerUtils.init(lArr, -3L);

        iArr[(23980 >>> 1) % N] -= Test.iFld;
        Test.iFld += Test.iFld;
        for (i2 = 4; i2 < 267; ++i2) {
            Test.iFld -= 5156;
            iArr[i2 - 1] = Test.iFld;
            f -= Test.instanceCount;
            lArr[i2] >>>= i2;
        }
        i3 -= i3;
        for (d = 10; d < 249; ++d) {
            f *= -118.660F;
            i3 &= (int)Test.instanceCount;
            Test.instanceCount += (long)((long)d | i3);
            if (b) {
                i3 -= Test.iFld;
                Test.instanceCount += (long)d;
            } else {
                f += Test.instanceCount;
            }
        }
        vMeth2_check_sum += i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        int i5=116, i6=-11, i7=55149, i8=224, iArr1[]=new int[N];
        short s=32207;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 38);

        vMeth2();
        i5 = 1;
        do {
            s >>= (short)Test.iFld;
            Test.instanceCount += (-134 + (i5 * i5));
            Test.instanceCount += (long)30.89213;
            if (b1) {
                Test.instanceCount += (i5 ^ Test.instanceCount);
                iArr1[i5 + 1] += (int)Test.instanceCount;
                Test.iFld <<= Test.iFld;
                Test.iFld += (i5 - i5);
                vMeth1_check_sum += i5 + s + (b1 ? 1 : 0) + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (i6 = 1; i6 < 11; i6++) {
                if (Test.iFld != 0) {
                    vMeth1_check_sum += i5 + s + (b1 ? 1 : 0) + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                try {
                    iArr1[i5 - 1] = (iArr1[i5 + 1] / -62231);
                    i8 = (i7 % 109);
                    Test.iFld = (i6 / 179);
                } catch (ArithmeticException a_e) {}
                i8 += 216;
                if (b1) break;
            }
        } while (++i5 < 145);
        vMeth1_check_sum += i5 + s + (b1 ? 1 : 0) + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i, int i1) {

        float f1=-2.978F;
        int i9=93, i10=-65, i11=3, i12=13230, i13=233, iArr2[]=new int[N];
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 49542);
        FuzzerUtils.init(bArr, true);

        vMeth1();
        Test.fFld -= l;
        for (f1 = 12; f1 < 292; f1++) {
            for (i10 = 1; i10 < 6; ++i10) {
                Test.instanceCount >>= i1;
                if (false) {
                    iArr2[(int)(f1 + 1)] = Test.iFld;
                    if (b2) break;
                    i9 += (int)4265894420L;
                    for (i12 = 1; i12 < 2; i12++) {
                        bArr[i10] = b2;
                        i11 += (int)l;
                        Test.instanceCount += (((i12 * Test.iFld) + i11) - i1);
                        Test.instanceCount = -7;
                        i9 += (int)l;
                    }
                } else {
                    Test.instanceCount += i1;
                }
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f1) + i9 + i10 + i11 + (b2 ? 1 : 0) + i12 + i13 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=2, i15=158, i16=35388, i17=-106, i18=-4, i19=-193, iArr3[]=new int[N];
        double d1=-2.124313;
        byte by=99;
        long l1=-116L;

        FuzzerUtils.init(iArr3, 9);

        vMeth(-1250877256L, -245, Test.iFld);
        iArr3[(-3 >>> 1) % N] = 2008;
        i14 = 1;
        while (++i14 < 382) {
            sFld += (short)(i14 - Test.instanceCount);
        }
        for (i15 = 7; i15 < 204; i15++) {
            lArrFld = lArrFld;
            i17 = 127;
            while (--i17 > 0) {
                try {
                    Test.iFld = (1551340021 / i17);
                    Test.iFld = (Test.iFld / i15);
                    iArr3[i17 - 1] = (921638554 % i16);
                } catch (ArithmeticException a_e) {}
                iArr3[i15] <<= i15;
                d1 -= Test.fFld;
                Test.iFld = Test.iFld;
                Test.iFld ^= i17;
                for (i18 = 1; i18 < 1; i18 += 2) {
                    boolean b3=true;
                    switch (((i16 >>> 1) % 1) + 13) {
                    case 13:
                        i16 = i16;
                        break;
                    }
                    switch ((i18 % 8) + 12) {
                    case 12:
                        Test.instanceCount -= i18;
                        i16 += (((i18 * i19) + i19) - i19);
                        Test.instanceCount = i14;
                        i19 -= sFld;
                        break;
                    case 13:
                        iArr3[i18 - 1] = i16;
                        Test.iFld = Test.iFld;
                        i16 += i18;
                        break;
                    case 14:
                        sFld *= (short)177;
                        by = (byte)Test.fFld;
                        break;
                    case 15:
                        l1 += (i18 ^ i16);
                        switch (((Test.iFld >>> 1) % 7) + 65) {
                        case 65:
                            i16 = (int)Test.fFld;
                            i16 += (((i18 * l1) + i18) - i16);
                            break;
                        case 66:
                            i16 = (int)l1;
                            break;
                        case 67:
                            i19 += (i18 * i18);
                        case 68:
                            Test.iFld -= (int)Test.fFld;
                            break;
                        case 69:
                            l1 = Test.byFld;
                            break;
                        case 70:
                            Test.instanceCount += (-14 + (i18 * i18));
                            break;
                        case 71:
                            by += (byte)i15;
                            break;
                        default:
                            i16 -= Test.iFld;
                        }
                    case 16:
                        d1 = -39.740F;
                        break;
                    case 17:
                    case 18:
                        if (b3) continue;
                        break;
                    case 19:
                        i19 = (int)Test.fFld;
                        break;
                    default:
                        l1 = (long)Test.fFld;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
