package tests.javafuzzer2188;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:53:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2431909821580033817L;
    public static double dFld=19.71861;
    public static volatile int iFld=-4;
    public static float fFld=0.673F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.lArrFld, -1888408179344704817L);
        FuzzerUtils.init(Test.dArrFld, 2.38669);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, float f1, int i5) {

        int i6=-118, i7=-44932, i8=-8051, i9=56513, i10=2, i11=-224, i12=-43, i13=222, i14=6012;
        short s1=-16387;

        for (i6 = 13; i6 < 303; i6++) {
            try {
                i7 = (i6 % i4);
                i5 = (Test.iArrFld[i6] / i4);
                i5 = (i6 % 15);
            } catch (ArithmeticException a_e) {}
            f1 += (((i6 * f1) + i5) - Test.instanceCount);
            i7 += (i6 ^ i4);
            i5 = (int)Test.instanceCount;
        }
        Test.lArrFld[(i4 >>> 1) % N] *= i6;
        for (i8 = 4; 220 > i8; i8++) {
            Test.lArrFld[i8] = i6;
            i5 += i6;
            for (i10 = 1; 7 > i10; ++i10) {
                i11 = i4;
                for (i12 = 2; i12 > 1; i12 -= 2) {
                    f1 = i6;
                    i13 *= s1;
                    i14 += (int)f1;
                }
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + s1 + i14;
    }

    public static void vMeth(float f, long l, int i3) {

        int i15=-192, i16=37, i17=30, i18=-70, i19=-15457, i20=-18, i21=-39133;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);

        vMeth1(i3, f, i3);
        Test.dFld *= i3;
        try {
            i3 = i3;
            Test.lArrFld = lArr;
        }
        catch (UserDefinedExceptionTest exc1) {
            i3 = 10;
            for (i15 = 23; i15 < 386; i15++) {
                i16 += i16;
                for (i17 = 1; i17 < 5; i17 += 2) {
                    Test.lArrFld = lArr;
                    f = -41495;
                    i16 += -54101;
                    for (i19 = 1; i19 < 3; ++i19) {
                        i20 = i18;
                        i21 += (i19 * i19);
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i3 + i15 + i16 + i17 + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(short s) {

        float f2=99.72F;
        int i22=7, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -33);

        vMeth(f2, Test.instanceCount, i22);
        i22 *= (int)Test.instanceCount;
        vSmallMeth_check_sum += s + Float.floatToIntBits(f2) + i22 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-64710, i1=-61408, i23=195, i24=-46175, i25=-12, i26=19882, i27=0, i28=0, i29=150;
        short s2=11900;
        float f3=12.992F;
        byte by=122;

        for (i = 6; i < 381; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(s2);
        }
        i1 >>= i1;
        for (i23 = 1; i23 < 351; i23++) {
            i1 *= i;
            i1 += (int)Test.instanceCount;
            for (f3 = 72; f3 > i23; f3--) {
                i1 = (int)Test.instanceCount;
                by += (byte)f3;
            }
            if (Test.bFld) {
                i26 = 72;
                while (--i26 > 0) {
                    by += (byte)(i26 - i1);
                    Test.instanceCount += (((i26 * i1) + i24) - i25);
                    Test.iArrFld[i23] >>= 10;
                }
                switch ((((i >>> 1) % 5) * 5) + 39) {
                case 45:
                    i24 += (int)Test.instanceCount;
                    break;
                case 47:
                case 56:
                    i25 += (((i23 * i24) + Test.instanceCount) - Test.instanceCount);
                    break;
                case 60:
                    switch ((i23 % 9) + 96) {
                    case 96:
                        for (i27 = 2; i27 < 72; i27++) {
                            boolean b=true;
                            i1 = i23;
                            Test.instanceCount += i27;
                            b = b;
                            i29 = 1;
                            while (++i29 < 2) {
                                by += (byte)(i29 * i29);
                                b = b;
                                i28 = i28;
                                if (b) break;
                                Test.iArrFld[i29 - 1] = i24;
                                b = b;
                                i28 = (int)Test.instanceCount;
                            }
                        }
                        break;
                    case 97:
                        Test.dFld *= Test.instanceCount;
                        break;
                    case 98:
                        Test.dFld *= 51400;
                    case 99:
                        i24 -= Test.iFld;
                        break;
                    case 100:
                        i24 += i23;
                        break;
                    case 101:
                    case 102:
                        i25 += (((i23 * Test.instanceCount) + i23) - by);
                        break;
                    case 103:
                        i24 *= i28;
                        break;
                    case 104:
                        Test.iFld += (int)Test.instanceCount;
                        break;
                    }
                    break;
                case 52:
                    Test.fFld *= i23;
                    break;
                }
            } else {
                i24 -= (int)Test.fFld;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
