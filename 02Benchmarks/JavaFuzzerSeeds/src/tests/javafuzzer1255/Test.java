package tests.javafuzzer1255;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:31:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2556998801L;
    public static double dFld=-110.24794;
    public static short sFld=26428;
    public static byte byFld=-88;
    public static boolean bFld=false;
    public static int iFld=-125;
    public static int iFld1=4;
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 84L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b1, int i5) {

        int i6=50837, i7=-1, i8=-9628, i9=-9, i10=37, iArr1[]=new int[N];
        float f=-2.426F;
        long l1=5977296119631871781L;

        FuzzerUtils.init(iArr1, -126);

        i5 = i5;
        for (i6 = 9; i6 < 341; ++i6) {
            i8 = 1;
            do {
                i7 -= (int)-3972214767345433584L;
                i5 = -174;
                i5 += (i8 ^ (long)f);
                Test.dFld = 115;
            } while (++i8 < 5);
            iArr1[i6] *= Test.sFld;
            b1 = true;
        }
        for (i9 = 220; i9 > 13; --i9) {
            l1 *= -46L;
            i5 -= i10;
            i7 >>>= -14;
            i5 += (i9 - Test.instanceCount);
            Test.byFld += (byte)i9;
        }
        vMeth1_check_sum += (b1 ? 1 : 0) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i4, boolean b) {

        double d=-46.119875;
        int i11=105, i12=60118, i13=-208, i14=9;
        float f1=0.594F;

        vMeth1(Test.bFld, i4);
        for (d = 8; d < 155; ++d) {
            i11 >>>= 24337;
            Test.instanceCount = Test.instanceCount;
            i12 = 1;
            do {
                for (i13 = 1; 1 > i13; i13++) {
                    i11 = i13;
                    Test.instanceCount = i11;
                    if (b) {
                        i11 += i13;
                        if (i13 != 0) {
                        }
                        Test.lArrFld[i13][i13] = i4;
                    } else if (false) {
                        Test.sFld = (short)Test.instanceCount;
                        i11 += (i13 ^ i14);
                        i14 += (i13 * i13);
                    } else {
                        f1 += i14;
                    }
                }
            } while (++i12 < 11);
        }
        long meth_res = i4 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i2) {

        long l=58L;
        int i3=-48, iArr2[]=new int[N];
        float f2=120.477F;

        FuzzerUtils.init(iArr2, 32);

        for (l = 14; l < 376; l++) {
            i3 = (int)(fMeth(i2, true) + i2);
            i2 -= (int)Test.instanceCount;
            i3 += (int)(l * l);
            i3 = Test.byFld;
        }
        i3 += i2;
        for (int i15 : iArr2) {
            Test.instanceCount += Test.instanceCount;
            i2 += i3;
            try {
                i15 = (i15 / 232);
                iArr2[(i15 >>> 1) % N] = (iArr2[(i3 >>> 1) % N] % 44);
                i2 = (iArr2[(i2 >>> 1) % N] / i15);
            } catch (ArithmeticException a_e) {}
            try {
                i2 = (-23956 / i2);
                iArr2[(i2 >>> 1) % N] = (39 % i3);
                i15 = (i2 / iArr2[(i15 >>> 1) % N]);
            } catch (ArithmeticException a_e) {}
            try {
                i15 = (Test.iFld / i15);
                Test.iFld = (35854 % i3);
                i15 = (i3 % i15);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount = i3;
            f2 = i3;
            Test.instanceCount -= i15;
        }
        vMeth_check_sum += i2 + l + i3 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=-51444, i17=-455, iArr[]=new int[N];
        double d1=-2.21522, d2=1.66389, dArr[]=new double[N];
        float f3=120.299F;
        short s=29695;
        long l2=-53533L;

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(dArr, 2.97474);

        for (i = 18; i < 383; ++i) {
            Test.instanceCount *= (iArr[i]--);
            vMeth(i1);
            d1 = 1;
            do {
                iArr[(int)(d1)] ^= i1;
                switch ((int)(((d1 % 9) * 5) + 43)) {
                case 84:
                case 88:
                    Test.iFld = Test.iFld1;
                    f3 -= i;
                    break;
                case 63:
                    Test.sFld -= (short)i1;
                    Test.lArrFld[(int)(d1 - 1)][i] = 181;
                    break;
                case 52:
                    Test.dFld += i1;
                    dArr = dArr;
                    f3 += Test.iFld1;
                    break;
                case 82:
                case 74:
                    switch (((Test.iFld1 >>> 1) % 1) + 26) {
                    case 26:
                        Test.iFld -= Test.iFld;
                        try {
                            iArr[i - 1] = (i1 / -237);
                            iArr[(int)(d1)] = (-24827 % Test.iFld1);
                            Test.iFld1 = (Test.iFld1 / iArr[(int)(d1 - 1)]);
                        } catch (ArithmeticException a_e) {}
                    default:
                        iArr = iArr;
                        Test.iFld = s;
                        Test.iFld1 += (int)(d1 * d1);
                    }
                    for (d2 = 1; d2 > 1; --d2) {
                        i17 += (int)((long)d2 | l2);
                        Test.instanceCount += (long)d2;
                        f3 += (float)(d2 * d2);
                        iArr[(int)(d2)] = (int)f3;
                        s = (short)3625;
                        Test.instanceCount += (long)d2;
                        i17 = (int)Test.instanceCount;
                        iArr[i] += (int)Test.dFld;
                        Test.instanceCount -= i17;
                    }
                    break;
                case 75:
                    i17 += (int)(((d1 * i1) + i1) - l2);
                    break;
                case 68:
                    i17 = (int)Test.instanceCount;
                    break;
                case 54:
                    f3 *= 3536692499L;
                    break;
                default:
                    if (Test.bFld) continue;
                }
            } while (++d1 < 69);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
