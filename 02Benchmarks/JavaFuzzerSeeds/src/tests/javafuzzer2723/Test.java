package tests.javafuzzer2723;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 19:18:26 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=41489L;
    public float fFld=-119.594F;
    public static int iFld=-228;
    public static volatile int iFld1=-10;
    public static byte byFld=-98;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, int i2) {

        float f=0.765F;
        int i3=23001, i4=-2, i5=-59654, i6=-37816, i7=-6, iArr[]=new int[N];
        double d=75.39546;
        byte by=-28;
        boolean b=true, bArr[]=new boolean[N];
        short s1=23105;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -10);

        switch (((79 >>> 1) % 8) + 64) {
        case 64:
            f += 14;
            for (i3 = 9; i3 < 169; ++i3) {
                for (i5 = 1; 10 > i5; i5 += 3) {
                    Test.instanceCount = Test.instanceCount;
                    switch ((((i1 >>> 1) % 5) * 5) + 103) {
                    case 127:
                        Test.instanceCount = 10L;
                        i2 += 12;
                        i7 = 4;
                        while (--i7 > 0) {
                            d -= i2;
                            Test.instanceCount *= Test.instanceCount;
                            i1 += (i7 * i7);
                            lArr[i7 - 1] -= Test.instanceCount;
                        }
                        i2 += by;
                    case 115:
                        i4 = (int)Test.instanceCount;
                    case 106:
                    case 120:
                        bArr[i3] = b;
                        break;
                    case 118:
                        i1 += (((i5 * i4) + i3) - i3);
                    default:
                        i1 += (i5 ^ i2);
                    }
                }
            }
            break;
        case 65:
            iArr[(i5 >>> 1) % N] *= 0;
            break;
        case 66:
            b = b;
        case 67:
            Test.instanceCount = i6;
            break;
        case 68:
            f += -9;
            break;
        case 69:
            f = i3;
        case 70:
            s1 -= (short)Test.instanceCount;
        case 71:
            i6 = i2;
        }
        vMeth1_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            by + (b ? 1 : 0) + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i8=-28, i9=208, i10=24894, i11=-4, i12=-10, i13=-55712, i14=-46817;
        short s2=-13724, sArr[][]=new short[N][N];
        byte by1=2, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)58);
        FuzzerUtils.init(sArr, (short)-22510);
        FuzzerUtils.init(fArr, 15.226F);

        vMeth1(209, Test.iFld);
        for (i8 = 341; i8 > 18; i8--) {
            Test.iArrFld[i8] += s2;
            i10 = 9;
            try {
                Test.iFld = (i9 % 11621);
                Test.iFld = (Test.iFld % -208);
                Test.iFld = (-120 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            for (i11 = 1; i11 < 5; i11++) {
                Test.instanceCount >>= 9;
                switch (((i8 % 7) * 5) + 74) {
                case 85:
                    for (i13 = i11; i13 < 2; i13++) {
                        byArr[i13] -= (byte)Test.iFld1;
                        sArr[i11][i8 - 1] -= by1;
                        switch (((2 >>> 1) % 1) + 69) {
                        case 69:
                            i9 = (int)Test.instanceCount;
                            Test.iArrFld[i8 - 1] = (int)Test.instanceCount;
                            fArr[i13 - 1] += -14;
                            break;
                        }
                    }
                    break;
                case 78:
                    i14 <<= -102;
                    break;
                case 108:
                    s2 += (short)-2.106F;
                    break;
                case 107:
                    Test.iArrFld = Test.iArrFld;
                case 100:
                    Test.iArrFld[i8] = 82;
                    break;
                case 105:
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 98:
                    Test.iFld1 = i12;
                    break;
                default:
                    fArr[i11] = Test.instanceCount;
                }
            }
        }
        long meth_res = i8 + i9 + s2 + i10 + i11 + i12 + i13 + i14 + by1 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, short s) {

        int i15=-7, i16=-8, i17=-41534;
        byte by2=90;
        boolean b1=true;

        i += (int)((fFld - (i + i)) - iMeth());
        Test.iFld = Test.iFld1;
        if (b1) {
            Test.instanceCount >>>= Test.instanceCount;
            fFld = fFld;
            Test.instanceCount >>= -17L;
            i15 = 1;
            do {
                by2 += (byte)(((i15 * i15) + Test.iFld1) - Test.instanceCount);
                i16 = 1;
                do {
                    i17 = 1;
                    do {
                        b1 = false;
                        i <<= Test.iFld;
                        Test.iFld -= (int)fFld;
                        i += (((i17 * Test.instanceCount) + i15) - Test.instanceCount);
                        Test.instanceCount = i;
                    } while (--i17 > 0);
                } while (++i16 < 7);
            } while (++i15 < 238);
        } else if (b1) {
            s = (short)Test.instanceCount;
        }
        vMeth_check_sum += i + s + i15 + by2 + i16 + i17 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int iArr1[]=new int[N], iArr2[]=new int[N];

        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(iArr2, 28121);

        vMeth(201, (short)(-3197));
        Test.byFld *= (byte)Test.iFld1;
        iArr1[(Test.iFld1 >>> 1) % N] >>= Test.iFld1;
        Test.iArrFld[(Test.iFld >>> 1) % N] ^= Test.iFld1;
        iArr2[(Test.iFld1 >>> 1) % N] <<= Test.iFld1;
        Test.instanceCount = 2;


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
