package tests.javafuzzer2460;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:45 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=18494L;
    public static short sFld=8285;
    public static boolean bFld=true;
    public int iFld=-46437;
    public static float fFld=-30.699F;
    public static double dFld=12.66597;
    public static volatile int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -248);
        FuzzerUtils.init(Test.sArrFld, (short)-28891);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=30, i5=44014, i6=10, i7=-218, i8=159, i9=27, i10=14, i11=10, i12=10990;
        float f=0.51F;
        double d3=1.34102;

        i4 &= Test.sFld;
        Test.instanceCount += i4;
        for (i5 = 5; i5 < 229; i5++) {
            if (i6 != 0) {
                vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + i12 +
                    Double.doubleToLongBits(d3);
                return;
            }
            i6 *= (int)1.24F;
            Test.iArrFld[i5] >>= -12657;
            Test.instanceCount <<= Test.instanceCount;
            Test.iArrFld[i5 + 1] *= i5;
        }
        for (i7 = 11; i7 < 295; ++i7) {
            for (i9 = 6; i7 < i9; --i9) {
                Test.instanceCount += i7;
                f += i10;
                for (i11 = 1; 1 > i11; ++i11) {
                    d3 -= f;
                    Test.instanceCount = Test.sFld;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + i12 +
            Double.doubleToLongBits(d3);
    }

    public static int iMeth(double d1, double d2, int i2) {

        int i13=-14, i14=-55, i15=-25841, i16=-41262, i17=177;
        byte by1=83;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2211588013579921220L);

        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
        for (int i3 : Test.iArrFld) {
            vMeth1();
            i13 = 1;
            do {
                byte by=117;
                Test.instanceCount += (((i13 * i13) + i13) - i2);
                i3 *= 61017;
                lArr[i13] = by;
            } while (++i13 < 4);
        }
        for (i14 = 23; 389 > i14; ++i14) {
            for (i16 = 1; i16 < 5; i16++) {
                i15 += (i16 - i17);
                Test.bFld = false;
                i15 += (((i16 * Test.sFld) + i13) - by1);
                Test.bFld = Test.bFld;
                i17 += i16;
                i2 += i16;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i2 + i13 + i14 + i15 + i16 + i17 +
            by1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        double d=0.86561;
        int i18=11, i19=0, i20=4, i21=-7140;
        float f1=0.776F;
        byte by2=67;

        i1 = Math.max(i, (i1 + i1) + (i + i));
        d -= iMeth(d, d, i);
        i += -16968;
        for (i18 = 202; i18 > 10; i18 -= 3) {
            for (i20 = 24; i18 < i20; i20 -= 2) {
                Test.iArrFld[i20] -= (int)f1;
                i21 = (int)l;
            }
            by2 >>= (byte)i21;
            f1 -= i20;
            if (i1 != 0) {
                vMeth_check_sum += l + i + i1 + Double.doubleToLongBits(d) + i18 + i19 + i20 + i21 +
                    Float.floatToIntBits(f1) + by2;
                return;
            }
            i += (3 + (i18 * i18));
            i = i21;
            Test.instanceCount += i20;
        }
        Test.instanceCount <<= i21;
        i21 <<= i21;
        vMeth_check_sum += l + i + i1 + Double.doubleToLongBits(d) + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) +
            by2;
    }

    public void mainTest(String[] strArr1) {

        int i22=12, i23=87, i24=37305, i25=-43378, i26=-10, i27=9, i28=-2, i29=-51;

        vMeth(Test.instanceCount, iFld, iFld);
        for (i22 = 221; i22 > 12; --i22) {
            byte by3=-112;
            by3 += (byte)(240 + (i22 * i22));
            Test.instanceCount = i22;
            Test.iArrFld[i22] ^= (int)Test.instanceCount;
            Test.sArrFld[i22] = Test.sFld;
            for (i24 = 4; i24 < 120; ++i24) {
                for (i26 = 1; i26 < 2; ++i26) {
                    i23 = (int)Test.fFld;
                    if (Test.bFld) {
                        Test.fFld += (((i26 * i23) + i23) - Test.fFld);
                        i23 = i27;
                        i27 = (int)-5025151550205516372L;
                        i25 += (((i26 * Test.instanceCount) + by3) - Test.instanceCount);
                    } else if (Test.bFld) {
                        Test.instanceCount <<= i22;
                        i23 >>= i25;
                    }
                }
                i27 = -18590;
                Test.iArrFld[i24] -= (int)Test.dFld;
                i23 += (i24 * i24);
                i23 += iFld;
                i25 <<= (int)Test.instanceCount;
                for (i28 = 1; i28 < 2; ++i28) {
                    i29 -= i25;
                    if (Test.bFld) continue;
                    Test.iArrFld[i22] = i24;
                    Test.fFld = Test.instanceCount;
                    i29 = (int)159L;
                }
                Test.iArrFld[i22 - 1] = 7;
                i29 -= i26;
            }
            i23 -= i26;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
