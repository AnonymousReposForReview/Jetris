package tests.javafuzzer205;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:09:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=223L;
    public static double dFld=-117.72944;
    public static volatile byte byFld=-50;
    public static boolean bFld=false;
    public int iFld=38036;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8) {

        int i9=-53948, i10=7, i11=15234, i12=13, i13=234, iArr[][]=new int[N][N];
        float f1=0.116F;
        short s=-18218;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 254);
        FuzzerUtils.init(dArr, 10.67105);

        for (i9 = 11; i9 < 367; ++i9) {
            for (i11 = 1; i11 < 5; i11++) {
                i12 <<= i12;
                i12 -= -5;
                iArr[i11][i9] >>= (int)Test.instanceCount;
                if (i12 != 0) {
                    vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + s +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                i13 = 1;
                while (++i13 < 2) {
                    f1 -= Test.byFld;
                    Test.byFld -= (byte)s;
                    Test.lArrFld[i11 - 1] *= s;
                    try {
                        i12 = (4649 / i8);
                        i12 = (-63905 / iArr[i9][(i8 >>> 1) % N]);
                        i8 = (i11 / iArr[i11][i13 - 1]);
                    } catch (ArithmeticException a_e) {}
                    f1 *= i10;
                    dArr[i13] *= i12;
                    iArr[i11 - 1][i11 + 1] = i10;
                    i8 += (((i13 * i12) + Test.instanceCount) - i8);
                }
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + s + FuzzerUtils.checkSum(iArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(long l1) {

        int i14=-51073, i15=10, i16=-51, i17=14, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -153);

        vMeth2(i14);
        Test.instanceCount >>>= Test.instanceCount;
        i14 <<= (int)88L;
        i15 = 1;
        do {
            float f2=-27.751F;
            Test.dFld /= ((long)(f2) | 1);
            Test.byFld >>= (byte)i15;
            if (Test.bFld) {
                Test.instanceCount *= -60353;
            } else if (Test.bFld) {
                iArr1[i15 - 1] += i15;
                i14 = i15;
                i14 %= 1388;
                for (i16 = 1; 5 > i16; i16++) {
                    iArr1[i15 + 1] *= i17;
                    f2 -= Test.instanceCount;
                    Test.instanceCount += l1;
                }
                vMeth1_check_sum += l1 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
                return;
            }
        } while (++i15 < 344);
        vMeth1_check_sum += l1 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, long l, int i1) {

        int i2=8, i3=-44981, i4=31647, i5=209, i6=-16078, i7=4;
        byte by=-90;
        float f=0.862F;
        long l2=1020145492L;
        double d=-102.81791;

        for (i2 = 10; 240 > i2; i2++) {
            for (i4 = 1; i4 < 7; i4++) {
                by <<= (byte)(l += (long)Test.dFld);
                i5 += (i4 ^ i2);
                for (i6 = 1; 2 > i6; i6++) {
                    i5 <<= (i7 = (i1--));
                    i -= (int)(((i3 - f) - f) * i3);
                    Test.dFld = 84;
                }
                i5 *= (((i1++) + i5) - (i + (i2 - i5)));
                i1 = i4;
                switch ((i2 % 7) + 76) {
                case 76:
                case 77:
                    vMeth1(l);
                    break;
                case 78:
                    i1 = i2;
                    l2 = l;
                    i7 <<= i5;
                    break;
                case 79:
                    if (false) continue;
                    break;
                case 80:
                    if (Test.bFld) break;
                    break;
                case 81:
                    d *= Test.instanceCount;
                    break;
                case 82:
                    i5 += i4;
                    break;
                }
            }
        }
        vMeth_check_sum += i + l + i1 + i2 + i3 + i4 + i5 + by + i6 + i7 + Float.floatToIntBits(f) + l2 +
            Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i18=-1, i19=-220, i20=-6152, i21=-55, i22=14, i23=51834, i24=-12, i25=-22, i26=-41955, iArr2[]=new int[N];
        long l3=-67L, lArr[]=new long[N], lArr1[]=new long[N];
        short s1=-14565;
        float f3=-50.170F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr2, 208);
        FuzzerUtils.init(lArr, 1957865607L);
        FuzzerUtils.init(dArr1, -39.56364);
        FuzzerUtils.init(lArr1, 33753L);

        vMeth(i18, l3, i18);
        if (Test.bFld) {
            i19 = 1;
            while (++i19 < 173) {
                switch ((i19 % 10) + 5) {
                case 5:
                    l3 = l3;
                    i18 = i19;
                    if (Test.bFld) {
                        try {
                            i18 = (i19 % 166);
                            i18 = (i18 / 28502);
                            i18 = (-214 % i19);
                        } catch (ArithmeticException a_e) {}
                    } else if (Test.bFld) {
                        i18 = s1;
                        i18 += (((i19 * f3) + l3) - i19);
                    } else {
                        Test.dFld += i19;
                    }
                    for (i20 = 8; i20 < 145; ++i20) {
                        for (i22 = i20; 2 > i22; i22++) {
                            f3 += (112.88F + (i22 * i22));
                            s1 -= (short)i20;
                        }
                        iArr2[i20] *= i18;
                        for (i24 = 1; i24 < 2; ++i24) {
                            i23 -= (int)-113L;
                            i18 -= i20;
                            Test.bFld = Test.bFld;
                            i18 = (int)Test.instanceCount;
                            i21 += i20;
                            switch (((i24 % 3) * 5) + 51) {
                            case 59:
                                lArr[i19] *= -61558;
                                iArr2[i19] = i22;
                                dArr1[i20 + 1] += i24;
                                switch ((((-140 >>> 1) % 9) * 5) + 27) {
                                case 44:
                                    i18 <<= i25;
                                    try {
                                        i25 = (23218 % iArr2[i19]);
                                        i23 = (i22 / 572029657);
                                        i23 = (i20 % 42382);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 31:
                                    f3 -= -23;
                                    break;
                                case 65:
                                    f3 -= l3;
                                    break;
                                case 61:
                                    Test.dFld -= Test.dFld;
                                    break;
                                case 28:
                                    i23 += (-12 + (i24 * i24));
                                    break;
                                case 53:
                                    i26 += (int)Test.dFld;
                                    break;
                                case 55:
                                case 37:
                                    i26 += (((i24 * i22) + i22) - i23);
                                case 43:
                                    i23 += (i24 | i18);
                                    break;
                                default:
                                    i26 >>= (int)Test.instanceCount;
                                }
                                break;
                            case 53:
                                Test.instanceCount += (long)-69.473F;
                            case 65:
                                i18 >>= (int)Test.instanceCount;
                                break;
                            }
                        }
                    }
                    break;
                case 6:
                    iArr2[i19] <<= (int)Test.instanceCount;
                    break;
                case 7:
                    i25 *= iFld;
                case 8:
                    lArr1 = lArr;
                    break;
                case 9:
                    iFld += (((i19 * Test.byFld) + i20) - i19);
                    break;
                case 10:
                    i21 += s1;
                    break;
                case 11:
                    Test.byFld -= (byte)i19;
                    break;
                case 12:
                    if (Test.bFld) break;
                    break;
                case 13:
                    i25 += (((i19 * i21) + i21) - f3);
                    break;
                case 14:
                    i21 += (i19 * l3);
                    break;
                }
            }
        } else if (Test.bFld) {
            i23 = i25;
        } else {
            Test.instanceCount = i25;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
