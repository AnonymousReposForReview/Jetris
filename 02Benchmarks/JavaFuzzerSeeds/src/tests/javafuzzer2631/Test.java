package tests.javafuzzer2631;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:37:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8045551462257423057L;
    public static double dFld=-8.59991;
    public volatile boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3612219815L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {

        byte by1=105;
        int i7=2, i8=24180, i9=18934, i10=-198, i11=10136, iArr[]=new int[N];
        float f1=23.196F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr, 11L);

        iArr[(i6 >>> 1) % N] -= by1;
        for (i7 = 5; i7 < 356; ++i7) {
            Test.instanceCount -= i7;
            f1 *= i9;
            i8 >>>= i9;
            i6 <<= (int)Test.instanceCount;
            iArr[i7 + 1] *= i7;
            i9 <<= (int)Test.instanceCount;
        }
        i8 = -227;
        i8 >>= (int)Test.instanceCount;
        for (i10 = 245; 3 < i10; i10--) {
            lArr[i10] = 54L;
            Test.instanceCount += i10;
        }
        f1 = Test.instanceCount;
        Test.instanceCount -= 2;
        long meth_res = i6 + by1 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i4, int i5) {

        float f=51.354F;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -2732);

        f = iMeth(i4);
        iArr1 = iArr1;
        i4 = i4;
        f *= i4;
        vMeth1_check_sum += l + i4 + i5 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(byte by, int i1) {

        int i2=93, i3=-64743, i13=1, i14=-20727, i15=227, i16=-110, i17=57622, i18=5393, iArr2[]=new int[N];
        float f2=-1.235F, f3=-77.748F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 22248);
        FuzzerUtils.init(lArr1, -2L);

        for (i2 = 17; i2 < 383; i2 += 3) {
            vMeth1(Test.instanceCount, i3, i1);
        }
        for (f2 = 3; 188 > f2; f2++) {
            i14 = 9;
            do {
                i3 <<= 37880;
                by *= (byte)i13;
                iArr2[i14] >>>= i13;
            } while (--i14 > 0);
        }
        for (i15 = 225; 12 < i15; i15 -= 3) {
            lArr1[i15 + 1] *= by;
            for (i17 = 1; i17 < 22; ++i17) {
                iArr2[i17 + 1] *= 29720;
            }
            switch ((((i17 >>> 1) % 7) * 5) + 32) {
            case 67:
                iArr2[i15 + 1] = i14;
                break;
            case 41:
                i3 = (int)Test.instanceCount;
                f3 %= (i14 | 1);
                break;
            case 66:
                i18 = i1;
                break;
            case 37:
                i1 += i3;
                break;
            case 33:
                Test.instanceCount -= i17;
                break;
            case 48:
                iArr2[i15] *= (int)Test.instanceCount;
            case 62:
                f3 = i3;
                break;
            }
        }
        vMeth_check_sum += by + i1 + i2 + i3 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + i18 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i19=-7, i20=4, i21=4, i22=-12, i23=99, i24=-11, i25=42897;
        short s=-4936;
        byte by2=-32;
        double d=84.25693;
        float f4=0.1008F;
        boolean b=true;

        i -= (i++);
        vMeth((byte)(-34), i);
        i += i;
        Test.instanceCount = i;
        iArrFld[(i >>> 1) % N] = i;
        iArrFld[(i >>> 1) % N] |= i;
        s = (short)Test.instanceCount;
        Test.instanceCount <<= by2;
        d = 1;
        do {
            for (i19 = (int)(d); i19 < 115; ++i19) {
                Test.dFld += 14;
            }
            if (bFld) {
                for (i21 = 6; i21 < 115; ++i21) {
                    i20 += (-7 + (i21 * i21));
                    i23 = 1;
                    do {
                        try {
                            i20 = (i20 % i21);
                            i = (iArrFld[(int)(d)] % i23);
                            i20 = (iArrFld[i23 + 1] % 47753);
                        } catch (ArithmeticException a_e) {}
                        i22 += (int)-4072102120L;
                    } while (++i23 < 2);
                    Test.lArrFld[i21] = Test.instanceCount;
                    for (i24 = 1; i24 < 2; i24 += 3) {
                        if (bFld) break;
                        i20 = i24;
                        Test.lArrFld[(int)(d)] = 222;
                        f4 -= (float)d;
                        f4 = i20;
                        i22 >>= i21;
                    }
                    switch (((i >>> 1) % 6) + 117) {
                    case 117:
                    case 118:
                        Test.dFld += i19;
                        i -= -8;
                        break;
                    case 119:
                        s = (short)i21;
                        break;
                    case 120:
                        Test.instanceCount = i20;
                    case 121:
                        if (true) break;
                        break;
                    case 122:
                        s |= (short)9;
                        break;
                    }
                }
            } else if (b) {
                i22 += i;
            } else {
                Test.instanceCount += (long)d;
            }
        } while (++d < 218);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
