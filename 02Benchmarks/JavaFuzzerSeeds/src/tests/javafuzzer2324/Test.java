package tests.javafuzzer2324;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:21:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static volatile int iFld=18729;
    public float fFld=-36.355F;
    public static double dFld=-1.4711;
    public static byte byFld=116;
    public static short sFld=31263;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4L);
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, short s, int i4) {

        int i5=-44672, i6=-167, i7=30225, i8=-2, i9=-225, i10=-3, i11=129, iArr[]=new int[N];
        long l=674552543L;

        FuzzerUtils.init(iArr, 24295);

        for (i5 = 5; i5 < 245; ++i5) {
            for (i7 = 1; i7 < 7; ++i7) {
                Test.instanceCount += i6;
                for (i9 = 1; i9 < 2; ++i9) {
                    try {
                        iArr[i5] = (iArr[i7] / 211);
                        iArr[i9 - 1] = (-7494 / iArr[i7 + 1]);
                        Test.iFld = (i4 / -999);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.iFld;
                }
                if (false) continue;
                Test.instanceCount = i6;
            }
            Test.instanceCount += i5;
            for (l = 7; l > i5; l--) {
                float f1=-77.1001F;
                i10 -= (int)f1;
                switch ((i5 % 2) + 54) {
                case 54:
                    if (i5 != 0) {
                        vMeth_check_sum += i3 + s + i4 + i5 + i6 + i7 + i8 + i9 + i10 + l + i11 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                case 55:
                    iArr[i5] = i10;
                    Test.instanceCount -= Test.instanceCount;
                    break;
                default:
                    Test.lArrFld[(int)(l)] += (long)Test.dFld;
                }
            }
        }
        vMeth_check_sum += i3 + s + i4 + i5 + i6 + i7 + i8 + i9 + i10 + l + i11 + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth(double d) {

        int i=30858, i1=43675, i2=-119;
        boolean b1=false;
        short s1=-16818;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 116.17258);

        i = 1;
        while (++i < 303) {
            Test.instanceCount *= (Test.iFld--);
            i1 = 5;
            do {
                i2 = 1;
                do {
                    Test.instanceCount -= 78;
                    Test.iFld += (int)(fFld--);
                    if (b1) continue;
                    vMeth(i, s1, i1);
                    Test.iFld += (int)Test.instanceCount;
                    dArr[i1 + 1] += i;
                    Test.iFld -= i1;
                } while (++i2 < 3);
                if (b1) continue;
                Test.iFld >>= (int)-130L;
                Test.iFld = 48590;
                Test.byFld *= (byte)Test.instanceCount;
            } while ((i1 -= 3) > 0);
        }
        long meth_res = Double.doubleToLongBits(d) + i + i1 + i2 + (b1 ? 1 : 0) + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(float f) {

        int i12=153, i13=-12, i14=0, i15=-6, i16=19963, i17=52;
        short s2=-22616;

        Test.iFld *= Math.min(Test.iFld++, iMeth(Test.dFld));
        for (i12 = 152; i12 > 3; i12 -= 2) {
            Test.instanceCount = 2685924953L;
            i13 += (int)(26385L + (i12 * i12));
            i13 = (int)-2053170286624433810L;
            Test.instanceCount += (i12 * i12);
            Test.lArrFld[i12 - 1] *= Test.iFld;
            Test.instanceCount += (i12 ^ i13);
            for (i14 = 1; i14 < 21; ++i14) {
                i15 %= (int)(i15 | 1);
                Test.instanceCount += s2;
            }
            i13 = i15;
            for (i16 = 1; i16 < 21; i16 += 2) {
                Test.instanceCount += (i16 * i16);
                f += i16;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + s2 + i16 + i17;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i18=33154, i19=253, i20=-23720, i21=-4, i22=-184, i23=237, i24=-5, i25=-57, i26=-4;
        double d1=-1.54555, dArr1[]=new double[N];
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -8.861F);
        FuzzerUtils.init(dArr1, 0.96711);
        FuzzerUtils.init(byArr, (byte)-92);

        b = (b = (dMeth(fFld) != fFld));
        for (i18 = 16; i18 < 309; ++i18) {
            i20 = 1;
            while (++i20 < 86) {
                fArr[i20] /= ((long)(fFld) | 1);
                i21 += (i20 * i20);
                dArr1[i18] = i18;
                for (i22 = 1; 1 > i22; i22++) {
                    fFld = i20;
                }
            }
            switch (((i18 % 8) * 5) + 46) {
            case 76:
                i21 = Test.iFld;
                for (i24 = 4; i24 < 86; i24++) {
                    for (d1 = 2; d1 > 1; d1--) {
                        if (b) continue;
                        i21 -= -246;
                        fFld += (float)d1;
                        Test.instanceCount ^= 54;
                        i19 += (int)((long)d1 | i26);
                        i21 = (int)d1;
                        i26 = i24;
                        switch ((int)((d1 % 6) + 17)) {
                        case 17:
                            Test.iFld -= (int)Test.instanceCount;
                            break;
                        case 18:
                            i19 += 1;
                            Test.iFld += (int)(-233L + (d1 * d1));
                            i26 -= 26508;
                            i19 += (int)(d1 + Test.byFld);
                            break;
                        case 19:
                        case 20:
                            Test.iArrFld = Test.iArrFld;
                            Test.lArrFld[(int)(d1)] *= i19;
                            Test.lArrFld[(int)(d1 + 1)] += Test.sFld;
                            i23 = i22;
                            break;
                        case 21:
                            Test.iFld += i18;
                            break;
                        case 22:
                            Test.iFld += (int)d1;
                        }
                    }
                }
            case 74:
                Test.dFld = Test.instanceCount;
                break;
            case 64:
                fFld *= 46434;
                break;
            case 77:
                Test.instanceCount *= Test.instanceCount;
                break;
            case 65:
                i26 += (i18 * i20);
                break;
            case 80:
                i19 = i18;
                break;
            case 52:
                Test.sFld |= (short)-161L;
                break;
            case 83:
                fFld *= i19;
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
