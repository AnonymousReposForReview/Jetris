package tests.javafuzzer3199;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:48:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3554405995394153890L;
    public float fFld=0.578F;
    public short sFld=-7539;
    public boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f) {

        int i3=-7, i4=-50234, i5=-34116, iArr[]=new int[N];
        short s=6554;
        boolean b=true;
        long l1=62324L, lArr[]=new long[N];
        double d=-1.41139;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)99);
        FuzzerUtils.init(iArr, -37);
        FuzzerUtils.init(lArr, -1027765012L);

        for (i3 = 4; 330 > i3; ++i3) {
            i5 = 1;
            do {
                byArr[i3] >>>= (byte)i4;
                i4 = s;
                if (i5 != 0) {
                }
                f += Test.instanceCount;
                b = b;
            } while (++i5 < 5);
            i4 = (int)Test.instanceCount;
            i4 -= i3;
            switch ((i3 % 8) + 71) {
            case 71:
                switch (((i3 % 6) * 5) + 108) {
                case 126:
                    if (b) {
                        b = b;
                        f += (((i3 * l1) + f) - i3);
                    } else {
                        iArr[i3 - 1] *= 1;
                    }
                case 120:
                    i4 >>= i5;
                    break;
                case 113:
                case 109:
                    l1 -= i4;
                    break;
                case 129:
                    i4 = (int)-42.157F;
                    break;
                case 122:
                    i4 += (i3 + l1);
                    break;
                default:
                    lArr[i3 - 1] = -8677973546304056787L;
                }
                break;
            case 72:
            case 73:
                i4 += (i3 * i5);
                break;
            case 74:
                l1 = s;
                break;
            case 75:
                i4 >>>= i5;
                break;
            case 76:
                i4 += (int)l1;
                break;
            case 77:
                i4 >>= i5;
                break;
            case 78:
                d *= i3;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + s + (b ? 1 : 0) + l1 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i=-213, i1=-22406, i2=63326, i6=112, i7=-1, i8=39645, iArr1[]=new int[N];
        boolean b1=true;
        float f1=-78.54F;
        short s1=18585;

        FuzzerUtils.init(iArr1, 38601);

        for (i = 196; i > 12; i--) {
            i2 = 1;
            while (++i2 < 9) {
                i1 = iMeth1(2.343F);
                if (b1) break;
                i1 = (int)f1;
                i6 += (-27600 + (i2 * i2));
                for (i7 = 1; i7 < 1; ++i7) {
                    i8 -= s1;
                    i8 = i6;
                    i1 += (i7 * i7);
                    l += i8;
                    f1 = -88;
                }
                s1 += (short)(((i2 * i6) + Test.instanceCount) - i1);
                iArr1 = iArr1;
            }
            i1 += (i * i);
        }
        long meth_res = l + i + i1 + i2 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i6 + i7 + i8 + s1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        boolean b2=false;
        int i9=110, i10=44862, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 12L);
        FuzzerUtils.init(iArr2, 49048);

        iMeth(-52007L);
        b2 = b2;
        i9 = 1;
        do {
            i10 = -4;
            lArr1[i9 + 1] = i9;
            i10 -= i10;
            try {
                i10 = (i9 % 67);
                iArr2[i9 - 1] = (-10889 % i9);
                i10 = (iArr2[i9] / i10);
            } catch (ArithmeticException a_e) {}
        } while (++i9 < 305);
        iArr2[(i10 >>> 1) % N] >>= (int)Test.instanceCount;
        vMeth_check_sum += (b2 ? 1 : 0) + i9 + i10 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i11=157, i12=-212, i13=-17689, i14=220, i15=-31632, i16=201, i17=104;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.10884);

        vMeth();
        for (i11 = 2; i11 < 227; ++i11) {
            i12 *= i11;
            i12 = (int)Test.instanceCount;
            i12 *= (int)fFld;
            switch (((i11 % 4) * 5) + 55) {
            case 72:
                Test.lArrFld[i11] %= -83;
            case 74:
                i12 += i12;
                fFld += (i11 * fFld);
                for (i13 = i11; 112 > i13; ++i13) {
                    i14 *= i11;
                    Test.lArrFld[i13 - 1] >>= 36;
                    iArrFld[i11 - 1] = sFld;
                    try {
                        i14 = (i13 % -20080);
                        i12 = (i12 % 121);
                        iArrFld[i11] = (i14 / i14);
                    } catch (ArithmeticException a_e) {}
                }
                break;
            case 70:
                for (i15 = 5; i15 < 112; ++i15) {
                    fFld -= -4015;
                    switch (((i15 % 1) * 5) + 19) {
                    case 22:
                        i16 = sFld;
                        i16 >>= i13;
                        switch (((i15 % 1) * 5) + 14) {
                        case 18:
                            i17 = 1;
                            do {
                                if (bFld) break;
                                Test.lArrFld = Test.lArrFld;
                                switch ((i15 % 8) + 114) {
                                case 114:
                                    Test.instanceCount = -4;
                                case 115:
                                    switch (((i13 >>> 1) % 1) + 53) {
                                    case 53:
                                    }
                                    fFld -= i16;
                                    i12 += (((i17 * i15) + i14) - i11);
                                    break;
                                case 116:
                                    i14 = i12;
                                    iArrFld[i17 + 1] -= i15;
                                case 117:
                                    i14 = i12;
                                    break;
                                case 118:
                                    if (bFld) continue;
                                    break;
                                case 119:
                                    Test.instanceCount -= i11;
                                    break;
                                case 120:
                                    i16 &= (int)Test.instanceCount;
                                    break;
                                case 121:
                                    dArr = dArr;
                                default:
                                    bFld = bFld;
                                }
                            } while (++i17 < 2);
                        default:
                            Test.instanceCount -= i16;
                        }
                    }
                }
                break;
            case 60:
                i14 *= (int)Test.instanceCount;
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
