package tests.javafuzzer1265;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:32:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1L;
    public volatile byte byFld=93;
    public static int iFld=56288;
    public static byte byArrFld[]=new byte[N];
    public static volatile double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-33);
        FuzzerUtils.init(Test.dArrFld, -2.100514);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l3) {

        short s1=-7597;
        int i6=18418, i7=-32242, i8=5202, i9=5, i10=1, i11=224, iArr1[]=new int[N];
        float f1=-86.652F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -221);
        FuzzerUtils.init(fArr, -7.88F);

        Test.iFld ^= s1;
        Test.instanceCount = Test.instanceCount;
        for (i6 = 6; i6 < 360; ++i6) {
            for (i8 = 5; i8 > 1; --i8) {
                i9 *= i8;
                for (i10 = 1; 2 > i10; ++i10) {
                    iArr1[i6 - 1] *= i11;
                    i9 = (int)f1;
                    iArr1[i8] = (int)Test.instanceCount;
                    Test.instanceCount += (((i10 * Test.iFld) + l3) - i11);
                    f1 += (-3L + (i10 * i10));
                    i7 = (int)Test.instanceCount;
                    i7 >>= (int)-11L;
                    fArr[i10] = -5521;
                }
            }
            l3 = (long)f1;
        }
        long meth_res = l3 + s1 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, int i5, long l2) {

        short s=-23881;
        int i12=-16, i13=13, i14=225, i15=58, i16=-56162, iArr[]=new int[N];
        float f2=80.230F;

        FuzzerUtils.init(iArr, 7);

        i5 = (int)(((i5 * s) + 121.168F) * ((iArr[(i5 >>> 1) % N]++) - (Test.instanceCount * i5)));
        i5 = iMeth(l1);
        for (i12 = 13; i12 < 239; i12++) {
            l1 = (long)f2;
            i13 *= i5;
            Test.byArrFld[i12 + 1] = (byte)i5;
            i14 = 1;
            while (++i14 < 7) {
                i5 = Test.iFld;
                for (i15 = 1; 1 < i15; i15--) {
                    i13 = i16;
                    l2 >>>= -7107;
                    iArr[i15] >>= i14;
                    l1 = i12;
                }
                Test.iFld = (int)f2;
            }
            i13 = i15;
        }
        vMeth1_check_sum += l1 + i5 + l2 + s + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i4) {

        long l4=21556L;
        int i17=-5, i18=54, i19=1, i20=-37793, i21=143;
        float f3=39.502F, fArr1[]=new float[N];
        double d1=0.120247;
        byte by=-78;

        FuzzerUtils.init(fArr1, 2.892F);

        vMeth1(l, i4, Test.instanceCount);
        for (l4 = 1; 291 > l4; ++l4) {
            i4 -= Test.iFld;
            fArr1[(int)(l4)] = l4;
            i18 = 1;
            do {
                Test.iFld += (i18 | (long)f3);
                for (d1 = 1; d1 < 1; ++d1) {
                    short s2=20037;
                    s2 -= (short)-37350;
                    Test.iFld = (int)l;
                    s2 = (short)115;
                    i4 += (int)((long)d1 ^ Test.iFld);
                }
            } while (++i18 < 6);
            if (i19 != 0) {
                vMeth_check_sum += l + i4 + l4 + i17 + i18 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) +
                    i19 + i20 + i21 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                return;
            }
            for (i20 = 1; i20 < 6; ++i20) {
                by *= (byte)l;
                i21 *= (int)d1;
            }
        }
        vMeth_check_sum += l + i4 + l4 + i17 + i18 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + i19 + i20
            + i21 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr3) {

        int i1=13, i2=64918, i3=-38023, i22=-53567, i23=-4, i24=-49339, i25=21509, i26=-11, iArr2[]=new int[N];
        double d=-2.115484;
        float f=-51.311F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -18796);
        FuzzerUtils.init(lArr, -57778L);

        i1 = 1;
        while (++i1 < 295) {
            for (i2 = 4; i2 < 85; i2++) {
                i3 += (i2 * i2);
                d -= f;
                i3 += byFld;
                vMeth(-33776L, 81);
                Test.instanceCount += (i2 * i2);
                Test.dArrFld[i1 + 1] = Test.dArrFld[i1 - 1];
                Test.iFld >>= -36;
            }
            iArr2[i1 - 1] = i3;
            switch ((i1 % 6) + 62) {
            case 62:
                Test.dArrFld[i1][i1 - 1] += Test.instanceCount;
                Test.instanceCount -= (long)f;
                for (i22 = 4; i22 < 85; i22++) {
                    i3 *= (int)Test.instanceCount;
                    if (b) {
                        try {
                            i3 = (41623 % i1);
                            Test.iFld = (i3 / i2);
                            Test.iFld = (iArr2[i22 - 1] % -23);
                        } catch (ArithmeticException a_e) {}
                        if (b) break;
                    } else {
                        i23 *= (int)f;
                        if (b) {
                            for (i24 = 1; i24 < 2; i24++) {
                                Test.byArrFld = FuzzerUtils.byte1array(N, (byte)84);
                                lArr[i22 - 1] = i25;
                                i3 += (int)(107L + (i24 * i24));
                                i3 *= byFld;
                                Test.instanceCount <<= Test.instanceCount;
                                if (false) break;
                            }
                            i26 = 1;
                            while (++i26 < 2) {
                                i25 += (i26 * i22);
                                Test.iFld *= i22;
                            }
                        } else {
                            i3 /= 18066;
                        }
                    }
                }
                break;
            case 63:
                i25 += (int)(-10L + (i1 * i1));
                break;
            case 64:
                iArr2[i1 - 1] /= (int)(i26 | 1);
            case 65:
                Test.dArrFld[i1 - 1][i1 - 1] += 56748;
                break;
            case 66:
                i25 = (int)-3565124835L;
                break;
            case 67:
                i23 >>= (int)Test.instanceCount;
                break;
            default:
                i23 <<= 118;
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
