package tests.javafuzzer101;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:21:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public int iFld=-13;
    public static double dFld=0.79387;
    public static boolean bFld=false;
    public float fFld=100.156F;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -89.855F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vSmallMeth(boolean b, boolean b1, int i) {


        i = ((i--) + ((++i) * i));
        i = (((i * i) - i) | i);
        vSmallMeth_check_sum += (b ? 1 : 0) + (b1 ? 1 : 0) + i;
    }

    public static short sMeth(short s1, int i3, int i4) {


        i4 *= (i3++);
        long meth_res = s1 + i3 + i4;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static byte byMeth(long l2, int i5, long l3) {

        float f1=-1.307F;
        byte by=-118;
        int i6=38172, i7=44851, i8=213, i9=8, iArr1[][]=new int[N][N];
        boolean b2=true;
        short s2=1888;

        FuzzerUtils.init(iArr1, -11647);

        iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
        f1 = 1;
        while (++f1 < 360) {
            l3 *= i5;
            i5 += (int)((long)f1 ^ by);
            for (i6 = 1; i6 < 5; i6++) {
                i5 += (i6 - i5);
                i7 >>>= (int)((Test.dFld += (iArr1[i6 + 1][(int)(f1)]++)) + ((i5 - 197) * (4654 + (-12 -
                    (iArr1[i6][(int)(f1 - 1)] += i6)))));
                vSmallMeth(true, b2, i7);
                i7 = (int)f1;
                s2 += (short)i6;
                for (i8 = 1; i8 < 2; ++i8) {
                    i5 += i7;
                    i7 += i8;
                    Test.instanceCount += (((i8 * l3) + l2) - i9);
                    i5 = i8;
                }
            }
        }
        long meth_res = l2 + i5 + l3 + Float.floatToIntBits(f1) + by + i6 + i7 + (b2 ? 1 : 0) + s2 + i8 + i9 +
            FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i1, float f, long l) {

        double d=-49.85685;
        short s=-18623, sArr[]=new short[N];
        int i2=5, i10=52243, i11=104, i12=-101, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(iArr, -9884);
        FuzzerUtils.init(sArr, (short)-16843);

        for (long l1 : lArr) {
            iArr[(i1 >>> 1) % N] += (int)d;
            i1 -= 1;
            f -= (((l + i1) * Test.instanceCount) + i1);
            s += (short)i1;
            switch (((((int)(i1 + Test.instanceCount)) >>> 1) % 10) + 75) {
            case 75:
            case 76:
                i2 -= (--i2);
                vSmallMeth(((f * d) - (i2++)) == (sMeth(s, -3, i1) - 3), ((++i1) - (l1 + i2)) !=
                    (byMeth(Test.instanceCount, i1, Test.instanceCount) - i2), i2);
                break;
            case 77:
                i10 = 1;
                while (++i10 < 4) {
                    for (i11 = 1; i11 > 1; i11--) {
                        f += i2;
                        i12 -= i1;
                        if (false) {
                            i12 += i11;
                            i1 -= i11;
                        } else {
                            Test.instanceCount -= i11;
                        }
                    }
                }
                break;
            case 78:
                sArr[(152 >>> 1) % N] = (short)2150375547L;
                break;
            case 79:
                iArr[(i11 >>> 1) % N] = (int)f;
                break;
            case 80:
            case 81:
                if (Test.bFld) break;
                break;
            case 82:
                i2 += i11;
                break;
            case 83:
                i2 = -12;
                break;
            case 84:
                s -= (short)-2.267F;
                break;
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d) + s + i2 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=-7, i14=168, i15=17394, i16=3, i17=-6175, i18=234, iArr2[]=new int[N];
        short s3=12694;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, -14);

        bArr[(iFld >>> 1) % N] = (29148 != (-(Test.instanceCount - -3L)));
        for (int smallinvoc=0; smallinvoc<306; smallinvoc++) vSmallMeth((-(iFld++)) > (iMeth(205, fFld,
            2627986951832447176L) + -8699), Test.bFld, iFld);
        iArr2[(iFld >>> 1) % N] >>= iFld;
        Test.dFld -= iFld;
        fFld += Test.instanceCount;
        for (i13 = 4; i13 < 219; i13++) {
            iFld = i14;
            i14 += i14;
            i14 <<= i13;
            Test.fArrFld[i13 - 1] *= Test.instanceCount;
            iFld += (((i13 * i14) + iFld) - iFld);
            switch ((i13 % 6) + 47) {
            case 47:
                Test.instanceCount = i14;
                Test.instanceCount = -165;
                break;
            case 48:
                i14 -= (int)Test.instanceCount;
                iFld = i13;
                for (i15 = 7; i15 < 117; i15++) {
                    i16 -= iFld;
                    i14 += (-106 + (i15 * i15));
                    i14 += (-60709 + (i15 * i15));
                    for (i17 = 1; i17 < 2; i17++) {
                        i16 <<= s3;
                        Test.dFld -= fFld;
                        fFld += iFld;
                        i16 -= (int)Test.instanceCount;
                        Test.instanceCount -= i18;
                        iArr2[i15 + 1] = (int)Test.instanceCount;
                        i14 = (int)Test.instanceCount;
                        i18 += (i17 - i18);
                        Test.dFld += 114;
                    }
                }
                break;
            case 49:
            case 50:
                i18 %= (int)((long)(fFld) | 1);
            case 51:
                iFld += (((i13 * i18) + i18) - Test.instanceCount);
                break;
            case 52:
                Test.instanceCount += (((i13 * i17) + i17) - iFld);
                break;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth byMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
