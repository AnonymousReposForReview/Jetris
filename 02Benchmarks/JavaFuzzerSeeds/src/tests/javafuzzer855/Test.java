package tests.javafuzzer855;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:55:16 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=75L;
    public static float fFld=-82.747F;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        int i4=100, i5=164, i6=1, i7=-55643, i8=59, iArr1[][]=new int[N][N];
        float f=0.970F;
        boolean b=false;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(sArr, (short)-31778);
        FuzzerUtils.init(lArr, 6856249351225403697L);

        for (i4 = 13; i4 < 219; ++i4) {
            i6 = 1;
            while (++i6 < 8) {
                i5 -= (int)f;
                iArr1[i6 - 1][i6] = 44666;
                sArr[i6] += (short)i4;
                Test.instanceCount = i5;
                iArr1[i4 + 1][i6 - 1] |= -173;
            }
            for (i7 = 1; i7 < 8; ++i7) {
                i8 >>= i3;
                b = b;
                lArr[i7] *= i3;
                lArr[i4 + 1] -= i5;
                i8 += 12032;
                i3 >>= i6;
                i8 = i3;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i2=8;

        i2 = iMeth(i2);
        long meth_res = i2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        int i9=84, iArr[]=new int[N];
        float f1=0.782F, f2=2.31F;
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr, 72);
        FuzzerUtils.init(sArr1, (short)-18299);

        for (int i1 : iArr) {
            i1 *= (int)lMeth();
            i9 = 1;
            while (++i9 < 4) {
                Test.instanceCount += i9;
            }
            i1 <<= i1;
            switch (((i >>> 1) % 3) + 100) {
            case 100:
                f1 -= 51;
                f2 = 4;
                do {
                    double d=0.87147;
                    Test.instanceCount += 0;
                    i -= (int)d;
                    d *= i1;
                    iArr[(int)(f2)] += (int)Test.instanceCount;
                    i = 48;
                    if (i9 != 0) {
                        vMeth_check_sum += i + i9 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) +
                            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr1);
                        return;
                    }
                } while (--f2 > 0);
                i -= i9;
            case 101:
                i1 += (int)Test.instanceCount;
                break;
            case 102:
                sArr1[(i >>> 1) % N] <<= (short)i1;
                break;
            }
        }
        vMeth_check_sum += i + i9 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        int i11=0, i12=-56, i13=16, i14=1, i15=-235, i16=-232, i17=-5, iArr2[]=new int[N];
        boolean b1=true, bArr[]=new boolean[N];
        double d1=2.119393, dArr[]=new double[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -60587);
        FuzzerUtils.init(dArr, -1.56697);

        vMeth(-1);
        bArr[(i11 >>> 1) % N] = b1;
        d1 -= -51790;
        iArr2[(i11 >>> 1) % N] = (int)Test.instanceCount;
        for (i12 = 1; i12 < 131; i12++) {
            i13 = 4;
            i11 *= i12;
            for (i14 = i12; i14 < 193; ++i14) {
                for (i16 = 1; i16 < 1; ++i16) {
                    i13 &= i11;
                    Test.instanceCount += (long)Test.fFld;
                    i17 = (int)Test.fFld;
                    iArr2[i12] *= 12;
                    switch (((i16 % 7) * 5) + 23) {
                    case 39:
                        iArr2 = iArr2;
                        iArr2[i12] = i12;
                        break;
                    case 29:
                        i13 &= i12;
                        i11 -= i14;
                        dArr[i16 + 1] *= -6;
                        i15 -= 9;
                        break;
                    case 45:
                        Test.instanceCount = 10L;
                        break;
                    case 41:
                        i15 += (((i16 * i16) + i17) - Test.instanceCount);
                        break;
                    case 56:
                        Test.fFld = Test.instanceCount;
                        iArr2 = iArr2;
                        iArr2[i14 - 1] *= (int)d1;
                        i13 += (((i16 * i12) + i16) - i14);
                        break;
                    case 48:
                        Test.instanceCount += (((i16 * i17) + Test.instanceCount) - i11);
                        i13 = (int)d1;
                        break;
                    case 36:
                        iArr2[i12 + 1] <<= i12;
                        d1 += i15;
                        break;
                    default:
                        i11 *= i15;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
