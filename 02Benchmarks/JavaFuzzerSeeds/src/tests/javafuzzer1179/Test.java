package tests.javafuzzer1179;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:02:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-221L;
    public static int iFld=-5;
    public static short sFld=13179;
    public static double dFld=-1.64915;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.407F);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, int i1) {

        int i2=12, i3=-12, i4=-3, i5=40813, iArr[]=new int[N];
        double d=1.109331;
        float f=109.1015F;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -30906);
        FuzzerUtils.init(lArr, -45666L);

        for (i2 = 383; i2 > 1; i2 -= 2) {
            long l3=3284423678170706840L;
            Test.fArrFld = Test.fArrFld;
            d = i2;
            d -= f;
            i1 <<= i1;
            i1 += (((i2 * i2) + i3) - l3);
            switch ((((i1 >>> 1) % 10) * 5) + 40) {
            case 79:
            case 43:
                l3 *= i2;
                for (i4 = 1; 8 > i4; i4++) {
                    iArr[i4 - 1] = i5;
                }
                i1 >>= Test.iFld;
                break;
            case 87:
                Test.instanceCount += (-14 + (i2 * i2));
                lArr[i2] <<= i1;
                i3 *= (int)f;
                break;
            case 80:
                if (true) continue;
            case 45:
                Test.iFld <<= i3;
            case 72:
                if (b) continue;
                break;
            case 44:
                i1 &= 65405;
                break;
            case 57:
            case 62:
                Test.sFld += (short)Test.iFld;
                break;
            case 73:
                Test.iFld = i3;
            }
        }
        vMeth1_check_sum += l2 + i1 + i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i4 + i5 + (b ? 1
            : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(long l, int i, long l1) {


        vMeth1(Test.instanceCount, Test.iFld);
        long meth_res = l + i + l1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i6=-5999;

        fMeth(Test.instanceCount, Test.iFld, 5557665932486808477L);
        i6 += Test.sFld;
        vMeth_check_sum += i6;
    }

    public void mainTest(String[] strArr1) {

        int i7=69, i8=-8256, i9=13, i10=-2, i11=57827, i12=-222, i13=-8, i14=-3, iArr1[]=new int[N];
        float f1=2.521F;
        long l4=-7262180419419355965L, lArr1[]=new long[N];
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr1, -9L);
        FuzzerUtils.init(byArr, (byte)112);
        FuzzerUtils.init(sArr, (short)-22827);
        FuzzerUtils.init(iArr1, -9061);

        vMeth();
        for (i7 = 2; i7 < 267; i7++) {
            Test.instanceCount += (((i7 * Test.instanceCount) + Test.instanceCount) - i8);
            i9 = 1;
            while (++i9 < 95) {
                lArr1[i7] = Test.instanceCount;
                for (i10 = 1; i10 < 1; ++i10) {
                    double d1=-98.119929;
                    byArr[i9 - 1] ^= (byte)i11;
                    f1 -= Test.iFld;
                    i11 += Test.sFld;
                    sArr[i10 - 1] += (short)Test.instanceCount;
                    Test.instanceCount *= i10;
                    d1 -= Test.iFld;
                }
            }
        }
        for (l4 = 6; l4 < 248; l4 += 2) {
            Test.iFld = -196;
            Test.instanceCount -= (long)83.49520;
            i11 += (int)(l4 * l4);
        }
        lArr1[(i12 >>> 1) % N] *= (long)f1;
        Test.dFld = Test.dFld;
        for (i13 = 251; i13 > 12; i13 -= 2) {
            i14 -= 207;
            i8 -= 215;
            sArr[i13] -= (short)i11;
            i8 = i10;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
