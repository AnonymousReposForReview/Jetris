package tests.javafuzzer2131;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 09:15:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63578L;
    public static int iFld=-47931;
    public static double dFld=-2.83672;
    public static volatile byte byFld=9;
    public short sFld=1234;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 32);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, long l1, byte by1) {

        int i2=13, i3=31453, i4=-167, iArr[][]=new int[N][N];
        float f2=0.625F;
        boolean b=true;

        FuzzerUtils.init(iArr, 4);

        i2 = 1;
        while (++i2 < 394) {
            for (i3 = 1; i3 < 4; i3++) {
                i4 += (58322 + (i3 * i3));
                i1 = i3;
                by1 -= (byte)i4;
                i4 = (int)-41613L;
                switch ((i2 % 8) + 53) {
                case 53:
                    f2 *= i4;
                    iArr[i3 - 1][i2] <<= (int)-16234L;
                    i4 = Test.iFld;
                    Test.iFld += (int)Test.instanceCount;
                case 54:
                    if (b) {
                        i4 -= Test.iFld;
                        vMeth_check_sum += i1 + l1 + by1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    } else if (b) {
                        Test.instanceCount += i1;
                        try {
                            i4 = (58059 / iArr[i2][i3 + 1]);
                            iArr[i3 - 1][(i3 >>> 1) % N] = (31629 % i1);
                            iArr[i2 + 1][i3 - 1] = (i1 / -53);
                        } catch (ArithmeticException a_e) {}
                    } else if (b) {
                        if (b) continue;
                    } else {
                        Test.instanceCount += (i3 * i3);
                    }
                    break;
                case 55:
                    Test.dFld += Test.dFld;
                    break;
                case 56:
                    Test.instanceCount += (((i3 * f2) + i2) - i2);
                    break;
                case 57:
                case 58:
                    Test.iFld = Test.iFld;
                    break;
                case 59:
                case 60:
                    i1 *= (int)Test.dFld;
                    break;
                }
            }
        }
        vMeth_check_sum += i1 + l1 + by1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(byte by, long l) {

        int i5=171, i6=-14, i7=13, i8=87;
        boolean b1=false;

        Test.iFld += Test.iFld;
        vMeth(Test.iFld, Test.instanceCount, by);
        for (i5 = 6; 354 > i5; i5++) {
            Test.iFld <<= i6;
            for (i7 = 5; 1 < i7; i7--) {
                Test.instanceCount = Test.instanceCount;
                i6 += (i7 * i7);
                Test.iFld = i6;
                Test.iFld &= i8;
                i6 += (i7 - i8);
                if (b1) continue;
                by = (byte)i5;
                i6 -= i7;
                Test.iArrFld1[i5] -= i7;
                Test.instanceCount += i5;
            }
        }
        long meth_res = by + l + i5 + i6 + i7 + i8 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f1=-92.495F;
        int i9=5, i10=207, i11=1, i12=-3, i13=253, i14=-47029, i15=12, i16=-7;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.84451);

        Test.iFld = (int)(((Test.instanceCount - f1) - Test.instanceCount) * ((Test.iFld * f1) - iMeth1(Test.byFld,
            26693L)));
        for (i9 = 7; i9 < 290; i9 += 2) {
            for (i11 = 11; i11 > 1; i11 -= 3) {
                dArr[i9 + 1] = i10;
                Test.iFld += i11;
                Test.iFld *= i10;
                Test.instanceCount = Test.instanceCount;
                i12 += (i11 * i11);
            }
            for (i13 = i9; i13 < 11; ++i13) {
                for (i15 = i9; 1 > i15; ++i15) {
                    i10 = i10;
                }
                Test.instanceCount *= i11;
                i10 *= (int)Test.instanceCount;
                Test.instanceCount = i16;
                i12 = (int)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=57.621F, f4=23.772F, fArr[]=new float[N];
        int i=27319, i17=-16654, i18=-9, i19=13, i20=-14047, i21=1, i22=-7, i23=-181, i24=-6;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1101428649L);
        FuzzerUtils.init(fArr, 124.1001F);

        Test.iFld += (-(Test.iFld--));
        for (f = 1; 179 > f; ++f) {
            iArrFld[(int)(f + 1)] -= (--iArrFld[(int)(f - 1)]);
            i = iMeth();
            Test.byFld >>>= Test.byFld;
            lArr[(int)(f + 1)] >>>= Test.instanceCount;
            for (i17 = 2; i17 < 141; ++i17) {
                sFld <<= (short)i17;
                Test.dFld = f;
                b2 = false;
                i18 *= i19;
            }
            i19 += (int)((long)f | i);
        }
        i20 = 1;
        while (++i20 < 175) {
            if (b2) continue;
            for (i21 = 2; i21 < 143; i21++) {
                if (b2) {
                    try {
                        Test.iFld = (Test.iArrFld1[i21] % -23064);
                        Test.iArrFld1[i20] = (i / -1953189545);
                        i18 = (i17 / i19);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i21;
                    f4 += (i21 * i20);
                    fArr = fArr;
                } else if (b2) {
                    for (i23 = 1; i23 < 2; ++i23) {
                        i22 = -181;
                        i24 += (i23 * i23);
                        b2 = true;
                        f4 -= Test.instanceCount;
                        i19 /= (int)(Test.iFld | 1);
                        Test.instanceCount = 229;
                        i18 >>= 42599;
                    }
                } else if (false) {
                    Test.byFld += (byte)(((i21 * i21) + Test.iFld) - f4);
                    i22 >>= sFld;
                } else {
                    Test.instanceCount += i21;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
