package tests.javafuzzer699;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:13:32 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8018029404634733914L;
    public static volatile byte byFld=-71;
    public static volatile int iFld=-228;
    public static boolean bFld=true;
    public static double dFld=1.115408;
    public static short sFld=22532;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.498F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2, int i4) {

        int i5=-11, i6=4, i7=19401, i8=-52844, i9=-4, iArr[]=new int[N];
        short s=-16292;
        long l1=1L;
        float f3=1.881F;
        boolean b=true;

        FuzzerUtils.init(iArr, -107);

        for (i5 = 18; i5 < 295; i5++) {
            s += (short)13;
            switch (((i6 >>> 1) % 2) + 74) {
            case 74:
                iArr[i5 + 1] += (int)l1;
                if (i6 != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f2) + i4 + i5 + i6 + s + l1 + Float.floatToIntBits(f3) +
                        i7 + (b ? 1 : 0) + i8 + i9 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (f3 = 6; f3 > 1; f3--) {
                    b = b;
                    for (i8 = 1; i8 < 2; i8++) {
                        f2 = i7;
                        Test.instanceCount += (((i8 * Test.byFld) + Test.instanceCount) - i7);
                    }
                    if (b) continue;
                    Test.instanceCount += s;
                    f2 += f3;
                    Test.byFld += (byte)f3;
                    i9 += (int)f3;
                }
                break;
            case 75:
                i6 = i7;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i4 + i5 + i6 + s + l1 + Float.floatToIntBits(f3) + i7 + (b ? 1 :
            0) + i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, int i3, float f1) {

        int i10=-229, i11=-20082, i12=9, i13=-45757, i14=-31333, iArr1[][]=new int[N][N];
        short s1=20286;
        boolean b1=false;

        FuzzerUtils.init(iArr1, -24784);

        vMeth1(f1, i3);
        i10 = 1;
        while (++i10 < 183) {
            if (b1) {
                Test.iFld = s1;
                for (i11 = 9; i11 > 1; i11 -= 3) {
                    Test.iFld = (int)d;
                    i13 = 5;
                    while ((i13 -= 3) > 0) {
                        iArr1[(i11 >>> 1) % N][i13 + 1] += 93;
                    }
                    iArr1[i11][i10 + 1] += (int)Test.instanceCount;
                    i12 ^= (int)Test.instanceCount;
                    if (i13 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f1) + i10 + s1 + i11
                            + i12 + i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i3 += (int)f1;
                    i14 = 1;
                    while (++i14 < 5) {
                        i3 += (((i14 * i12) + Test.instanceCount) - Test.instanceCount);
                    }
                    i3 = i13;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f1) + i10 + s1 + i11 + i12 + i13 +
            i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(float f, long l, int i) {

        int i1=-47302, i2=3, i15=47636, i16=202, i17=0, i18=-35, i19=94;
        double d1=81.85403;
        short s2=-2103;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 69.809F);

        i = i;
        for (i1 = 2; i1 < 162; i1 += 3) {
            i >>= (int)((-fArr[i1 - 1]) % ((i--) | 1));
        }
        vMeth(d1, i, f);
        i2 -= (int)f;
        i2 *= i1;
        l = i2;
        i2 -= (int)1.833F;
        for (i15 = 297; 6 < i15; --i15) {
            Test.byFld -= (byte)-6;
            for (i17 = i15; i17 < 6; i17++) {
                i19 = 1;
                while (++i19 < 1) {
                    s2 += (short)(((i19 * f) + i19) - i17);
                    i18 >>= i19;
                    fArr[i17] += 0.945F;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + i + i1 + i2 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18
            + i19 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f4=1.976F;
        int i20=8571, i21=-3, i22=11, i23=-45991, i24=47834, i25=13284, i26=-58317, i27=-32230, i28=8, i29=-123,
            i30=-27, i31=-8, i32=-2, i33=4, i34=13, i35=166, iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5L);
        FuzzerUtils.init(iArr2, 69);

        Test.instanceCount = ((iMeth(f4, Test.instanceCount, Test.iFld) + 7872) + Test.iFld);
        for (i20 = 3; i20 < 197; i20++) {
            if (Test.bFld) break;
            if (Test.bFld) continue;
            i21 = (int)Test.dFld;
            Test.sFld += (short)Test.instanceCount;
        }
        for (i22 = 4; 288 > i22; ++i22) {
            Test.dFld += i23;
            lArr[i22] = i22;
            for (i24 = 2; i24 < 89; i24++) {
                Test.iFld = i20;
            }
            i23 -= i20;
            switch ((i22 % 1) + 57) {
            case 57:
                Test.dFld = i24;
                for (i26 = 2; 89 > i26; i26 += 3) {
                    f4 = i26;
                    for (i28 = i26; 4 > i28; i28++) {
                        i21 += (i28 * i28);
                    }
                    Test.sFld -= (short)i27;
                }
                switch ((i22 % 10) + 60) {
                case 60:
                case 61:
                    for (i30 = 89; 2 < i30; i30--) {
                        i31 = i31;
                        for (i32 = i30; i32 < 2; i32++) {
                            iArr2[i22] = (int)Test.instanceCount;
                            i25 += (i32 * i32);
                            iArr2[i30 + 1] = (int)f4;
                            Test.instanceCount += i30;
                        }
                        for (i34 = 1; i34 < 2; ++i34) {
                            Test.dFld *= f4;
                            i21 += i32;
                        }
                    }
                    break;
                case 62:
                case 63:
                    Test.iFld += (((i22 * i27) + i35) - i32);
                    break;
                case 64:
                    Test.fArrFld[(14 >>> 1) % N] = i23;
                case 65:
                    Test.bFld = Test.bFld;
                    break;
                case 66:
                    i21 = i32;
                    break;
                case 67:
                case 68:
                    Test.iFld >>= i23;
                    break;
                case 69:
                    Test.iFld = i22;
                }
                break;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
