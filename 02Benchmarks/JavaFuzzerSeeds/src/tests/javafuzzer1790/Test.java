package tests.javafuzzer1790;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:20:31 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2086227660L;
    public static int iFld=62835;
    public static float fFld=-55.30F;
    public static short sFld=-19869;
    public long lFld=11L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -30538);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, int i7) {

        double d=83.115218;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4L);

        Test.fFld += i7;
        Test.instanceCount >>>= 12;
        Test.iFld = 3131;
        i6 = (int)202L;
        d = i6;
        lArr[(i6 >>> 1) % N] >>= i7;
        i6 *= Test.iFld;
        Test.iFld = 235;
        i7 >>= (int)Test.instanceCount;
        i7 |= -11;
        i6 *= -2;
        i6 = Test.iFld;
        d = Test.fFld;
        vMeth_check_sum += i6 + i7 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static byte byMeth(int i5, float f) {

        int i8=27220, i9=61040, i10=5, i11=-7, i12=32840, i13=-7, iArr[]=new int[N];
        double d1=-2.33104;

        FuzzerUtils.init(iArr, 0);

        i5 = (iArr[(-179 >>> 1) % N] + iArr[(Test.iFld >>> 1) % N]);
        vMeth(i5, Test.iFld);
        for (i8 = 319; i8 > 6; i8--) {
            d1 = -57161;
            for (i10 = 1; i10 < 5; ++i10) {
                iArr[i10 - 1] = i5;
                i9 += i10;
                i5 >>>= Test.sFld;
                i9 %= (int)(Test.iFld | 1);
                Test.iFld = i9;
                Test.iFld += (-185 + (i10 * i10));
                iArr[i8 - 1] &= (int)Test.instanceCount;
            }
        }
        for (i12 = 12; i12 < 319; ++i12) {
            Test.instanceCount = -205;
            Test.instanceCount *= (long)f;
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vSmallMeth(int i4, long l) {


        i4 = byMeth(i4, Test.fFld);
        vSmallMeth_check_sum += i4 + l;
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i1=17413, i2=7, i3=-9, i14=-25, i15=-14, i16=8, i17=-4, i18=-229, i19=-15, i20=-25190, iArr1[]=new
            int[N];
        byte by=-76;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(lArr1, 56773L);

        Test.iFld = ((-(Test.iFld >> Test.iFld)) * Math.abs((int)(Test.fFld + -8441951978816718825L)));
        for (i = 2; 208 > i; ++i) {
            for (i2 = 122; i2 > i; --i2) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(i, 16955L);
                i1 += i2;
                Test.iFld += (int)53.345F;
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.iFld *= 10;
                    Test.instanceCount = (long)Test.fFld;
                    Test.instanceCount += (10011 + (i14 * i14));
                    i3 *= (int)Test.instanceCount;
                    Test.iArrFld[i + 1] >>= i2;
                    iArr1 = Test.iArrFld;
                }
            }
            i1 += i;
            for (i16 = 2; i16 < 122; i16++) {
                Test.iArrFld[i16] += (int)Test.instanceCount;
                Test.iFld += (((i16 * by) + i15) - Test.instanceCount);
                i17 += (i16 * i16);
                i3 += (i16 - i1);
                i3 += i15;
                Test.instanceCount >>= 5;
            }
            switch ((i % 10) + 21) {
            case 21:
                switch ((i % 2) + 20) {
                case 20:
                    i17 += i18;
                    Test.instanceCount += (long)Test.fFld;
                    break;
                case 21:
                    Test.fFld -= Test.instanceCount;
                    Test.fFld = Test.instanceCount;
                default:
                    for (i19 = 1; i19 < 122; i19++) {
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld >>>= (int)lFld;
                    }
                }
                break;
            case 22:
                Test.instanceCount += (i + Test.sFld);
                break;
            case 23:
                lArr1[i - 1] <<= i20;
            case 24:
                i15 += (i + i18);
                break;
            case 25:
                i15 += (i | (long)Test.fFld);
                break;
            case 26:
                Test.iFld = i2;
                break;
            case 27:
                Test.iArrFld[i] -= (int)lFld;
                break;
            case 28:
                i17 <<= i3;
            case 29:
                i20 -= -98;
            case 30:
                by += (byte)(51 + (i * i));
                break;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth byMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
