package tests.javafuzzer2287;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:34:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8063978954334613932L;
    public float fFld=-72.809F;
    public static float fFld1=0.116F;
    public static double dFld=1.61459;
    public static boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i13, double d1) {

        double d2=-2.34676;
        int i14=57727, i15=-12, i16=29689;
        short s1=2909, sArr1[]=new short[N];
        boolean b=true;

        FuzzerUtils.init(sArr1, (short)-30131);

        for (d2 = 1; d2 < 121; ++d2) {
            Test.instanceCount += i14;
            i15 = 1;
            while ((i15 += 2) < 13) {
                i14 += i13;
                s1 = (short)8L;
                i13 -= (int)Test.instanceCount;
                i16 = 1;
                do {
                    i14 += (int)-9125303182433489275L;
                    sArr1[i16 + 1] >>>= s1;
                    Test.instanceCount += (i16 - i16);
                    b = b;
                    Test.fFld1 = -55;
                } while (++i16 < 3);
                Test.fFld1 += (((i15 * s1) + Test.fFld1) - i16);
                i14 *= (int)Test.fFld1;
                i14 -= s1;
            }
        }
        long meth_res = i13 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i14 + i15 + s1 + i16 + (b ? 1
            : 0) + FuzzerUtils.checkSum(sArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i10=-8, i11=-213, i12=-84, i17=-1376, i18=-5, i19=11, i20=13, i21=-172, iArr[]=new int[N];
        byte by1=16;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 107.715F);
        FuzzerUtils.init(iArr, -51909);

        Test.instanceCount += (i10--);
        i10 = i10;
        for (i11 = 312; i11 > 5; i11--) {
            Test.instanceCount /= (i11 | 1);
            switch ((i11 % 10) + 8) {
            case 8:
                i12 = (int)lMeth1(i10, -97.126136);
                Test.dFld -= i11;
                i12 -= (int)Test.fFld1;
                for (i17 = 5; i17 > 1; --i17) {
                    fArr[i11 + 1] += i10;
                    iArr[i17 + 1] = (int)Test.dFld;
                    for (i19 = i17; i19 < 2; i19++) {
                        i18 -= (int)79.37819;
                        i18 = i20;
                        i12 <<= by1;
                    }
                }
                break;
            case 9:
                i18 ^= i20;
                break;
            case 10:
                Test.fFld1 += (i11 - i17);
            case 11:
                i20 = i20;
                break;
            case 12:
                b1 = b1;
                break;
            case 13:
                i20 += i11;
                break;
            case 14:
                i18 += (i11 ^ i12);
            case 15:
                try {
                    i10 = (51432834 % iArr[i11]);
                    iArr[i11 + 1] = (i21 % i20);
                    i12 = (-49550 / i20);
                } catch (ArithmeticException a_e) {}
            case 16:
                iArr[i11 - 1] >>= -62;
                break;
            case 17:
                if (i17 != 0) {
                }
                break;
            }
        }
        long meth_res = i10 + i11 + i12 + i17 + i18 + i19 + i20 + by1 + (b1 ? 1 : 0) + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=45869, i5=-49486, i6=246, i7=8, i8=13, i9=-30, i22=-39151;
        short s=2720, sArr[]=new short[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-21137);
        FuzzerUtils.init(lArr, -2929772274838989539L);

        for (i4 = 11; i4 < 332; ++i4) {
            i3 -= (int)-115L;
        }
        i5 = (int)(i3 - (-1.6913 + (Test.fFld1 * i3)));
        i2 += (i5 * i3);
        for (i6 = 13; 260 > i6; ++i6) {
            Test.instanceCount += i6;
            for (i8 = 1; i8 < 7; ++i8) {
                sArr[i8 - 1] = (short)(i5++);
                Test.instanceCount += (((i8 * i7) + i9) - s);
                Test.fFld1 = lMeth();
                Test.instanceCount += (i8 * i8);
                Test.instanceCount |= i8;
                i22 = 1;
                while (++i22 < 2) {
                    i7 += i5;
                    lArr[i22 - 1][i22 + 1] -= i3;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + s + i22 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=-58;
        int i=1, i1=41177, i23=-13542, i24=-41137, i25=-51, i26=-41088, i27=-63667, i28=54, iArr1[][]=new int[N][N];
        double d=115.48049;
        float f=0.531F, f1=-2.102F;
        short s3=6083;

        FuzzerUtils.init(iArr1, -56);

        by += (byte)(Math.max(i++, (int)(d * Test.instanceCount)) * (i *= (int)(i - fFld)));
        i1 = 1;
        while (++i1 < 317) {
            fFld += (i1 * i1);
        }
        switch ((((-(i1 & -28158)) >>> 1) % 8) + 87) {
        case 87:
            i >>= 8;
            vMeth(10, i1);
            Test.instanceCount = i1;
            for (i23 = 10; i23 < 324; i23 += 2) {
                for (f = 160; f > 6; --f) {
                    for (f1 = 1; f1 < 2; ++f1) {
                        short s2=-12763;
                        Test.instanceCount >>= i27;
                        Test.fFld1 += (((f1 * by) + i24) - i23);
                        i24 >>>= -14;
                        iArr1 = iArr1;
                        s2 = (short)i;
                        i26 >>= i25;
                        Test.instanceCount = i26;
                        Test.instanceCount += 77;
                        i += (int)f1;
                    }
                    if (Test.bFld) continue;
                    Test.fFld1 += (f - i24);
                    Test.instanceCount = i27;
                    Test.fFld1 += (float)Test.dFld;
                }
                i28 = 1;
                do {
                    i25 += i28;
                    try {
                        iArr1[i23 + 1][i23 - 1] = (iArr1[i28][i23 + 1] % -100);
                        i25 = (-21362 / i25);
                        iArr1[i23 + 1][i28] = (i27 / i26);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i23 - 1] = iArr1[i23 + 1];
                    i27 ^= (int)Test.instanceCount;
                    i24 -= s3;
                    Test.instanceCount += i23;
                } while (++i28 < 160);
            }
            break;
        case 88:
            i += (int)Test.instanceCount;
        case 89:
            i27 *= i23;
            break;
        case 90:
            fFld *= i;
            break;
        case 91:
            Test.instanceCount = (long)Test.fFld1;
        case 92:
            Test.dFld -= d;
        case 93:
            d = 230;
            break;
        case 94:
            by = (byte)Test.instanceCount;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
