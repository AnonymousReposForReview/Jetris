package tests.javafuzzer1882;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:16:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6449L;
    public static int iFld=-59955;
    public static byte byFld=-66;
    public short sFld=28460;
    public static volatile float fFld=0.969F;
    public static int iFld1=47991;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long fMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static float fMeth(float f1, float f2) {

        double d=-1.30826;

        d = (Test.instanceCount + (Test.iFld++));
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + Double.doubleToLongBits(d);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth() {

        short s=-1949;
        boolean b=true;

        Test.instanceCount <<= (s--);
        b = ((Test.instanceCount++) >= Math.max(48872L, Test.iFld >>> Test.byFld));
        vSmallMeth_check_sum += s + (b ? 1 : 0);
    }

    public static int iMeth(int i10) {

        float f4=-28.312F;
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(dArr1, 0.21832);

        f4 += Math.min(Test.instanceCount, (long)((++dArr1[(i10 >>> 1) % N][(940 >>> 1) % N]) - (Test.instanceCount -
            i10)));
        Test.iArrFld = Test.iArrFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= (int)((i10 - Long.reverseBytes(Test.instanceCount)) +
            ((Test.instanceCount - Test.iFld) - (i10 *= 12)));
        long meth_res = i10 + Float.floatToIntBits(f4) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i12=3, i13=218, i14=-11;
        double d2=56.67383;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2385L);

        for (long l1 : lArr1) {
            Test.iFld <<= (int)(l1++);
            i12 = 1;
            while (++i12 < 4) {
                Test.instanceCount += (i12 * i12);
                try {
                    Test.iArrFld[i12] = (8122 % i13);
                    i13 = (i13 % Test.iFld);
                    Test.iFld = (i13 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.iFld *= (--Test.iArrFld[i12 - 1]);
                Test.iFld += i12;
                i13 = (int)(fMeth(Test.fFld, Test.fFld) * i12);
                try {
                    i13 = (Test.iFld / Test.iArrFld[i12 - 1]);
                    Test.iFld = (-220 / i12);
                    Test.iArrFld[i12] = (55132 / i12);
                } catch (ArithmeticException a_e) {}
            }
            switch ((((4 >>> 1) % 3) * 5) + 48) {
            case 54:
                Test.iArrFld[(Test.iFld >>> 1) % N] -= i13;
                d2 += 251;
                break;
            case 59:
                i14 = 1;
                while (++i14 < 4) {
                    short s2=-10842;
                    s2 %= (short)(i13 | 1);
                    d2 = Test.iFld;
                }
                break;
            case 49:
                Test.iArrFld[(i14 >>> 1) % N] -= Test.byFld;
                break;
            default:
                Test.iFld = Test.iFld;
            }
        }
        vMeth_check_sum += i12 + i13 + Double.doubleToLongBits(d2) + i14 + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(int i7, long l) {

        int i8=11, i9=9, i11=4, i15=65036, i16=0, i17=-40456, i18=-56, i19=4;
        short s1=13523;
        double d3=-6.1528, d4=2.20347;

        for (i8 = 391; i8 > 13; i8--) {
            l <<= (++s1);
            vSmallMeth();
            i9 += Math.min((-i8) * iMeth(i8), (int)((long)(Test.fFld + i9) ^ (--Test.iFld)));
        }
        i11 = 295;
        do {
            vMeth();
        } while (--i11 > 0);
        for (i15 = 18; i15 < 349; ++i15) {
            for (d3 = 5; d3 > 1; d3--) {
                Test.fFld += (-56902 + (d3 * d3));
                Test.fFld *= -6;
                for (i18 = i15; i18 < 2; ++i18) {
                    Test.iFld -= i11;
                    i19 = (int)Test.fFld;
                    Test.byFld -= (byte)Test.fFld;
                    d4 = 17.938F;
                }
            }
        }
        long meth_res = i7 + l + i8 + i9 + s1 + i11 + i15 + i16 + Double.doubleToLongBits(d3) + i17 + i18 + i19 +
            Double.doubleToLongBits(d4);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-41114, i1=165, i2=38750, i3=6, i4=-8, i5=-132, i6=35303;
        float f=0.93F, f3=0.584F, fArr[]=new float[N];
        double d1=-1.38996, dArr[]=new double[N];
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2984322575L);
        FuzzerUtils.init(fArr, -2.38F);
        FuzzerUtils.init(dArr, 0.14877);

        i = (int)(Math.sqrt(f + i) + -57);
        i /= (int)(((long)(fMeth(f * Test.instanceCount, Test.iFld - Test.iFld) - (++Test.iArrFld[(Test.iFld >>> 1) %
            N]))) | 1);
        Test.iFld = (Math.max(Test.iFld + Test.byFld, -(Test.iFld - Test.iFld)) + (--i));
        for (int smallinvoc=0; smallinvoc<589; smallinvoc++) vSmallMeth();
        if (Test.bFld) {
            for (i1 = 8; i1 < 356; i1++) {
                Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = FuzzerUtils.int1array(N, (int)10))));
                vSmallMeth();
            }
            for (i3 = 6; i3 < 140; i3++) {
                i2 -= (int)Test.instanceCount;
                d1 *= (Math.max((int)(Test.instanceCount * Test.iFld), (int)(-161L + (Test.iArrFld[i3]++))) + (sFld &=
                    (short)(-(i++))));
                lArr[(-4 >>> 1) % N] = (i1 + 7724L);
            }
            try {
                i2 -= ((-(++i2)) * (--Test.iArrFld[(i3 >>> 1) % N]));
            }
            catch (UserDefinedExceptionTest exc2) {
                if (false) {
                    i = 53;
                } else if (b1) {
                    i = ((-i) * (-(-13 - (-i3))));
                    fMeth(fMeth(f3 -= (--fArr[(i2 >>> 1) % N]), fArr[(i4 >>> 1) % N]), f3);
                } else if (b1) {
                    for (i5 = 3; i5 < 362; ++i5) {
                        dArr[(i2 >>> 1) % N] -= (((i + d1) + (i--)) + (lMeth(Test.iFld1, Test.instanceCount) + sFld));
                        i += i5;
                        f += i1;
                        i <<= i2;
                        i4 += (i5 + Test.iFld1);
                        d1 += i5;
                        Test.instanceCount += 228;
                        Test.iArrFld[i5 - 1] <<= Test.iFld1;
                        f += 74;
                        Test.byFld -= (byte)i;
                    }
                } else {
                    Test.iArrFld[(i5 >>> 1) % N] = 30000;
                }
            }
        } else if (b1) {
            i >>= (int)4L;
        } else if (Test.bFld) {
            i2 = 15280;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest vMeth lMeth
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
