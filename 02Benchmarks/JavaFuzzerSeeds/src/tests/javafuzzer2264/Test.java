package tests.javafuzzer2264;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:06:35 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=678422402L;
    public static volatile float fFld=0.146F;
    public static double dFld=56.90641;
    public static short sFld=-32160;
    public static boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.950F);
        FuzzerUtils.init(Test.iArrFld, -49316);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7) {

        int i8=-8, i9=33987, i10=219, iArr[]=new int[N];
        float f1=-1.856F;
        byte by=-85;
        double d1=3.74203;

        FuzzerUtils.init(iArr, -20);

        for (i8 = 11; i8 < 374; i8++) {
            i7 = i8;
            for (f1 = 5; f1 > 1; --f1) {
                i10 = i10;
                iArr = iArr;
                iArr = iArr;
                Test.fArrFld[i8 + 1] -= i7;
            }
        }
        i10 = i8;
        Test.instanceCount += i10;
        i7 -= i7;
        Test.fFld = Test.instanceCount;
        Test.fFld -= by;
        i10 <<= i7;
        d1 -= i10;
        i10 |= i9;
        vMeth2_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + by + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2, int i3, int i4) {

        float f=108.101F;
        int i5=-101, i6=-227, i11=33481, i12=234, i13=-32029, iArr1[]=new int[N];
        double d=17.119699;
        byte by1=39;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(iArr1, -7);

        for (f = 1; f < 164; ++f) {
            for (d = 1; d < 10; d++) {
                vMeth2(i4);
                for (i11 = 1; i11 < 2; ++i11) {
                    Test.instanceCount = i6;
                    i3 = i13;
                    lArr[i11] *= i4;
                    i6 += (((i11 * by1) + Test.fFld) - i2);
                    i5 *= (int)d;
                    Test.dFld -= Test.sFld;
                }
                Test.dFld = 217;
                Test.instanceCount *= i12;
                if (Test.bFld) {
                    i6 *= 58942;
                    iArr1[(int)(d)] = i5;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + i6 + i11 + i12 +
            i13 + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i14=2, i15=12, i16=4, i17=0, i18=5, i19=50, i20=-61787;
        long l=7984500338555653609L;
        float f2=-63.795F;

        vMeth1(i14, -59145, i14);
        i14 &= i14;
        i14 = i14;
        if (Test.bFld) {
            for (i15 = 8; i15 < 396; ++i15) {
                i17 = 1;
                do {
                    l -= Test.sFld;
                    if (Test.bFld) break;
                    i18 = i18;
                    i19 -= i15;
                    i19 = (int)l;
                    for (f2 = i15; 1 > f2; ++f2) {
                        i16 = (int)47L;
                        i20 += (int)(f2 - Test.instanceCount);
                        i14 = i18;
                    }
                } while (++i17 < 4);
            }
        } else if (Test.bFld) {
            Test.fFld = i15;
        } else {
            Test.iArrFld[(-38301 >>> 1) % N] = (int)l;
        }
        vMeth_check_sum += i14 + i15 + i16 + i17 + l + i18 + i19 + Float.floatToIntBits(f2) + i20;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=14, i21=-10, i22=131, i23=30657, i24=-216;
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)7712);
        FuzzerUtils.init(lArr1, 33734L);

        for (i = 9; i < 149; ++i) {
            vMeth();
            for (i21 = 179; i21 > 5; --i21) {
                i23 = 1;
                do {
                    switch ((((i >>> 1) % 8) * 5) + 99) {
                    case 109:
                    case 107:
                        i22 += i23;
                        if (Test.bFld) {
                            i1 += (((i23 * i21) + i) - i);
                        }
                        break;
                    case 136:
                        i1 = i23;
                        i1 += (((i23 * Test.fFld) + Test.fFld) - i1);
                        i22 += (int)2599691629088712950L;
                        Test.instanceCount &= Test.sFld;
                        break;
                    case 121:
                        Test.instanceCount = Test.instanceCount;
                        i1 <<= i;
                        break;
                    case 125:
                        try {
                            Test.iArrFld[i21 - 1] = (-17904 % i1);
                            i22 = (Test.iArrFld[i21] % -1215793963);
                            i22 = (1451469976 % i22);
                        } catch (ArithmeticException a_e) {}
                        i24 = i22;
                        i1 -= (int)Test.fFld;
                        i24 >>= 0;
                        break;
                    case 114:
                    case 101:
                        Test.instanceCount += (i23 + i24);
                        i24 = i23;
                        if (Test.bFld) break;
                        sArr[i] += (short)Test.instanceCount;
                        break;
                    case 129:
                        switch (((i21 >>> 1) % 3) + 76) {
                        case 76:
                            Test.fFld += i21;
                            switch ((i23 % 2) + 89) {
                            case 89:
                                i1 = i22;
                                i22 -= (int)Test.fFld;
                                Test.iArrFld[i21] *= (int)Test.dFld;
                                break;
                            case 90:
                                if (Test.bFld) break;
                                i24 += i22;
                                break;
                            }
                            break;
                        case 77:
                            i1 += (i23 ^ Test.instanceCount);
                            break;
                        case 78:
                            i1 = -11708;
                        default:
                            lArr1[i21 - 1] -= (long)Test.fFld;
                        }
                    }
                } while (++i23 < 2);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
