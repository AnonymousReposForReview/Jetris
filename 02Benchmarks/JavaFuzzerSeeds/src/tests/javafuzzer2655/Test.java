package tests.javafuzzer2655;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:05:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4201021221L;
    public static int iFld=25;
    public static float fFld=1.329F;
    public volatile byte byFld=-17;
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public int iMeth(int i, int i1) {

        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-6934);

        i1 |= (sArr[(i1 >>> 1) % N]--);
        long meth_res = i + i1 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1) {

        int i4=-37081, i5=216;
        short s1=9477;
        byte by=61;
        double d=10.38069;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -61.125F);

        for (i4 = 9; i4 < 159; i4++) {
            Test.instanceCount -= -57391;
            fArr[i4] += l1;
            s1 >>>= (short)i5;
        }
        by = (byte)i5;
        Test.iFld += (int)d;
        vMeth1_check_sum += l1 + i4 + i5 + s1 + by + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        float f=38.434F;
        int i2=-11, i3=-108, i6=-20881, i7=9, i8=9, i9=87, i10=8568;
        long l2=1297838523L, lArr[]=new long[N];
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 3072378669L);
        FuzzerUtils.init(dArr, -127.92965);

        f = Test.iFld;
        for (i2 = 4; i2 < 193; ++i2) {
            vMeth1(Test.instanceCount);
        }
        f *= 4698806101113539120L;
        i3 = 7;
        for (l2 = 2; l2 < 325; ++l2) {
            f += (-44 + (l2 * l2));
            for (i7 = 1; i7 < 5; ++i7) {
                for (i9 = 1; i9 < 2; i9++) {
                    Test.instanceCount += Test.instanceCount;
                }
                lArr[i7] &= i3;
                i6 += i7;
                b = b;
                f = Test.instanceCount;
                dArr[i7 + 1] *= i2;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + l2 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth1(long l, short s) {

        int i11=0, i12=-35, i13=131, i14=-28645;

        vMeth();
        Test.instanceCount >>= Test.iFld;
        for (i11 = 6; i11 < 319; i11++) {
            switch (((i11 % 2) * 5) + 64) {
            case 72:
                i12 += Test.iFld;
                Test.iFld += (((i11 * Test.iFld) + i12) - i12);
                iArrFld = iArrFld;
                for (i13 = i11; i13 < 5; ++i13) {
                    i12 += (i13 + i12);
                    Test.fFld = i12;
                    Test.iFld += (((i13 * l) + l) - byFld);
                    Test.iFld = i12;
                    i14 >>= 52;
                    iArrFld[i11] >>= i12;
                    i12 = Test.iFld;
                }
                break;
            case 67:
                Test.iFld += (int)Test.instanceCount;
                break;
            default:
                i14 += (int)l;
            }
        }
        long meth_res = l + s + i11 + i12 + i13 + i14;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-62413, i16=-46843, i17=-20550, i18=1, i19=8;
        double d1=-41.9162;
        short s2=-15374;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.iFld = (Test.iFld <<= iArrFld[(Test.iFld >>> 1) % N]);
        Test.iFld += iMeth(Test.iFld++, Math.max(iMeth1(Test.instanceCount, (short)(18200)), -185));
        i15 = 1;
        do {
            Test.instanceCount += i15;
            d1 -= 45044;
            s2 <<= (short)Test.iFld;
            b1 = false;
            for (i16 = 5; i16 < 186; i16++) {
                Test.iFld += (((i16 * i15) + i15) - Test.iFld);
                try {
                    iArrFld[i16 - 1] = (i15 % i16);
                    Test.iFld = (-44157 % i17);
                    i17 = (225 % i17);
                } catch (ArithmeticException a_e) {}
                for (i18 = 2; i18 > 1; i18--) {
                    i17 -= 164;
                    switch (((i18 >>> 1) % 5) + 68) {
                    case 68:
                        if (b1) continue;
                        i17 += (-58152 + (i18 * i18));
                        Test.iFld |= (int)-7L;
                        i19 += i18;
                        break;
                    case 69:
                        Test.instanceCount += i18;
                        i19 *= (int)Test.instanceCount;
                        break;
                    case 70:
                        s2 = (short)i15;
                    case 71:
                        if (b1) {
                            i19 += (((i18 * Test.fFld) + i17) - i17);
                            i19 -= (int)-1.495F;
                        }
                        Test.instanceCount = -7;
                        i19 *= i15;
                        break;
                    case 72:
                        s2 = (short)Test.iFld;
                        break;
                    default:
                        Test.fFld -= i19;
                        bArr[i15 + 1] = true;
                        i17 >>= s2;
                        s2 = (short)Test.fFld;
                    }
                }
            }
        } while (++i15 < 135);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  vMeth ->  vMeth iMeth1 mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
