package tests.javafuzzer44;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 21:32:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=236L;
    public static byte byFld=102;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.lArrFld, -44047L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l1, int i4) {

        int i5=1, i6=-14961;
        short s1=-18876;
        float f=104.685F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -48927L);

        for (i5 = 24; i5 < 388; i5++) {
            s1 = Test.byFld;
            Test.iArrFld[i5] >>>= (int)Test.instanceCount;
            i3 = (int)Test.instanceCount;
            i4 = i3;
            f -= i6;
            if (Test.bFld) continue;
            f += 14L;
            switch ((i5 % 6) + 13) {
            case 13:
                i4 |= i5;
                Test.iArrFld[(i4 >>> 1) % N] = (int)l1;
                if (Test.bFld) continue;
            case 14:
                l1 = Test.byFld;
                Test.instanceCount += i3;
                Test.instanceCount += (144 + (i5 * i5));
            case 15:
                f -= i3;
                break;
            case 16:
                i6 += (int)-2.501F;
            case 17:
                lArr[i5] /= (i3 | 1);
                break;
            case 18:
                i3 = i3;
                break;
            default:
                Test.iArrFld[i5 - 1] -= (int)f;
            }
        }
        vMeth1_check_sum += i3 + l1 + i4 + i5 + i6 + s1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(double d, int i2, double d1) {

        short s=14124;
        int i7=156, i8=202, i9=99, i10=183;
        float f1=0.997F;

        i2 >>>= (int)(-(Test.instanceCount--));
        s -= (short)(-((i2 - Test.instanceCount) * (27774 + (7906154276271066217L - (42919 >>> (i2--))))));
        vMeth1(i2, -448231903L, i2);
        i2 -= i2;
        switch (((i2 >>> 1) % 2) + 63) {
        case 63:
            for (i7 = 12; i7 < 271; i7++) {
                if (Test.bFld) {
                    for (i9 = 1; i9 < 6; i9++) {
                        Test.instanceCount += (((i9 * i9) + i8) - s);
                        Test.instanceCount += i9;
                        switch ((i9 % 1) + 82) {
                        case 82:
                            f1 = i8;
                            i8 += (i9 | i9);
                            break;
                        default:
                            i10 = i9;
                        }
                        i2 <<= i2;
                    }
                } else if (Test.bFld) {
                    Test.byFld += (byte)(((i7 * f1) + Test.instanceCount) - f1);
                } else {
                    f1 -= s;
                }
            }
            break;
        case 64:
            s = (short)Test.instanceCount;
            break;
        default:
            i2 = i10;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + Double.doubleToLongBits(d1) + s + i7 + i8 + i9 + i10 +
            Float.floatToIntBits(f1);
    }

    public static long lMeth(long l, int i, int i1) {

        double d2=-105.17533;
        int i11=44525, i12=-41865, i13=-52660, i14=57704, i15=-55169, i16=10548;
        float f2=0.107F;

        vMeth(d2, i, d2);
        for (i11 = 12; 395 > i11; ++i11) {
            for (i13 = 1; i13 < 4; i13++) {
                i = -13952;
                Test.lArrFld[i11 - 1] = -13;
                i *= i11;
                Test.iArrFld[i11] -= i12;
            }
            Test.iArrFld[i11] -= i12;
            for (i15 = 1; i15 < 4; ++i15) {
                i12 += (int)f2;
                l = (long)f2;
                i12 += (i15 * i15);
                i += (-172 + (i15 * i15));
                i1 += (int)Test.instanceCount;
                i12 |= (int)-216L;
            }
        }
        long meth_res = l + i + i1 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=-23249, i18=-1, i19=-44, i20=-10, i21=192, i22=238, i23=8, i24=178, i25=201, i26=-42331;
        double d3=46.116154, d4=47.36465, dArr[]=new double[N];
        float f3=-1.527F;
        short s2=-27392;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 0.503);
        FuzzerUtils.init(byArr, (byte)-95);

        Test.instanceCount = (long)(lMeth(Test.instanceCount, i17, i17) - d3);
        for (d4 = 233; d4 > 9; d4--) {
            i17 += i17;
            for (i19 = 4; i19 < 112; ++i19) {
                Test.instanceCount |= i19;
                i18 *= i20;
                i18 = i18;
                Test.lArrFld = FuzzerUtils.long1array(N, (long)129L);
            }
            Test.instanceCount += (long)(d4 * f3);
            for (i21 = 7; i21 < 112; ++i21) {
                for (i23 = 1; i23 < 2; i23++) {
                    f3 = i22;
                    switch ((int)(((d4 % 2) * 5) + 19)) {
                    case 28:
                        Test.iArrFld[i21 + 1] -= -185;
                        i24 += (7 + (i23 * i23));
                        break;
                    case 26:
                        dArr[i21 - 1] = -65102;
                        i17 /= (int)(Test.instanceCount | 1);
                        i24 = Test.byFld;
                        break;
                    default:
                        i18 -= i17;
                        i22 += i24;
                        d3 = i23;
                    }
                    s2 = (short)-6;
                    i17 >>= i24;
                    Test.instanceCount = i22;
                    i22 ^= i24;
                }
            }
            for (i25 = 3; i25 < 112; i25++) {
                i18 = (int)Test.instanceCount;
                Test.instanceCount *= Test.instanceCount;
                byArr[(int)(d4 + 1)] -= (byte)i24;
                i18 = i22;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
