package tests.javafuzzer97;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:21:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1256480434896066593L;
    public static int iFld=-3;
    public float fFld=-1.708F;
    public static volatile long lFld=977285200L;
    public int iFld1=-4;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=5, i6=0, i7=23, i8=141, i9=12;
        boolean b=true;
        float f=0.462F, f1=1.265F;

        if (b) {
            i5 += -13;
        } else {
            i5 ^= i5;
            f *= i5;
            for (f1 = 22; f1 < 388; f1++) {
                for (i7 = 1; i7 < 5; i7++) {
                    i9 = 1;
                    while (++i9 < 2) {
                        i6 += (i9 * i9);
                        Test.iArrFld[(int)(f1 + 1)] = i9;
                        Test.instanceCount += (i9 * i9);
                        Test.instanceCount += i9;
                        i6 -= i9;
                        i8 += (int)Test.instanceCount;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    if (true) break;
                }
            }
        }
        vMeth1_check_sum += i5 + (b ? 1 : 0) + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9;
    }

    public static void vMeth(long l, int i3, int i4) {

        int i10=10, i11=453, i12=-10, i13=92, i14=1;
        boolean b1=false;
        byte by=-24;
        float f2=-38.497F;

        vMeth1();
        i10 = 1;
        while ((i10 += 3) < 167) {
            b1 = b1;
            for (i11 = i10; i11 < 28; ++i11) {
                by += (byte)(-8 + (i11 * i11));
                i12 *= (int)3L;
                i3 = -129;
                l += i11;
                Test.instanceCount *= Test.iFld;
                for (i13 = i10; i13 < 1; ++i13) {
                    Test.iFld *= 48337;
                    f2 += (((i13 * by) + i12) - i3);
                    i12 += (((i13 * i3) + i11) - i12);
                    Test.iArrFld[i13 + 1] <<= i13;
                    l += (i13 + i12);
                }
            }
        }
        vMeth_check_sum += l + i3 + i4 + i10 + (b1 ? 1 : 0) + i11 + i12 + by + i13 + i14 + Float.floatToIntBits(f2);
    }

    public static int iMeth(int i2) {

        long l1=3783271395179986309L;
        int i15=-4, i16=3, i17=-89, i18=-13593, i19=-81;
        float f3=-2.602F;
        double d1=22.100995;

        vMeth(Test.instanceCount, Test.iFld, 12);
        for (l1 = 3; l1 < 212; ++l1) {
            Test.iFld += (int)(((l1 * i2) + i2) - l1);
        }
        for (i16 = 4; i16 < 189; ++i16) {
            i18 = 1;
            while (++i18 < 9) {
                if (true) break;
                i2 = (int)21754L;
                switch (((i18 % 6) * 5) + 126) {
                case 135:
                    Test.iArrFld[i16] <<= i15;
                    f3 -= Test.instanceCount;
                    i19 = 1;
                    do {
                        Test.instanceCount -= i17;
                        d1 -= l1;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-2);
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)10436);
                    } while (++i19 < 1);
                    break;
                case 149:
                    Test.iArrFld[i18 - 1] += (int)l1;
                    break;
                case 131:
                    i17 += i16;
                    break;
                case 143:
                    f3 = i15;
                    break;
                case 141:
                    Test.instanceCount += (long)f3;
                    break;
                case 129:
                    Test.iFld += Test.iFld;
                    break;
                }
            }
        }
        long meth_res = i2 + l1 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f3) + i19 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=190, i1=235, i20=62490, i21=10, i22=4, i23=169, i24=-9, i25=-11953;
        short s=28575, sArr[]=new short[N];
        double d=1.37545;
        byte by1=-1;

        FuzzerUtils.init(sArr, (short)25052);

        for (i = 14; i < 287; ++i) {
            s >>= (short)(sArr[(i >>> 1) % N]++);
            d -= (((43488 | iMeth(-41027)) - i1) * Test.instanceCount);
            i1 = i1;
            i1 += (i * i);
            i20 = 1;
            while (++i20 < 92) {
                Test.instanceCount -= i1;
                Test.iFld += (i20 ^ i);
                for (i21 = 1; i21 < 1; ++i21) {
                    fFld *= i23;
                    i1 = i20;
                }
                switch ((i20 % 1) + 27) {
                case 27:
                    Test.instanceCount >>= -14;
                    i1 *= i1;
                    break;
                }
                Test.iArrFld[i20] -= by1;
                Test.lFld *= (long)1.441F;
                if (false) break;
                try {
                    i22 = (i21 % i20);
                    i23 = (Test.iFld % -1949693675);
                    i1 = (i23 % i22);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i + 1] -= (int)fFld;
                for (i24 = 1; i24 < 1; ++i24) {
                    Test.iArrFld[i20] = i23;
                    Test.iArrFld[i20] <<= i25;
                    Test.lFld %= (i22 | 1);
                    i23 = Test.iFld;
                    Test.instanceCount <<= i22;
                    switch (((220 >>> 1) % 2) + 52) {
                    case 52:
                        Test.lFld -= iFld1;
                        Test.iArrFld[i24 - 1] += -81;
                        Test.iFld -= Test.iFld;
                        break;
                    case 53:
                        try {
                            i22 = (i21 % 25872);
                            i22 = (i21 % -143);
                            Test.iArrFld[i20] = (163 % i21);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
