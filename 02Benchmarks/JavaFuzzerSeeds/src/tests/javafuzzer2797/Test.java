package tests.javafuzzer2797;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:19:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-226L;
    public static int iFld=-7;
    public double dFld=0.33270;
    public float fFld=1.398F;
    public static short sFld=18649;
    public static float fFld1=3.700F;
    public static boolean bFld=true;
    public static long lFld=-9593L;
    public static int iFld1=15258;
    public volatile long lFld1=-6712335260954503816L;
    public static double dArrFld[]=new double[N];
    public static volatile short sArrFld[]=new short[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 23.10601);
        FuzzerUtils.init(Test.sArrFld, (short)-9114);
        FuzzerUtils.init(Test.fArrFld, 89.169F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5) {

        double d=-109.51762;
        int i6=65, i7=-244, i8=-12627, i9=-5402, i10=-13, i11=-214;
        byte by=-99;

        for (d = 11; d < 364; ++d) {
            for (i7 = (int)(d); i7 < 5; ++i7) {
                i6 = Test.iFld;
                Test.instanceCount += i7;
                i6 -= Test.iFld;
                i6 = (int)Test.fFld1;
                for (i9 = 1; 1 > i9; i9++) {
                    switch ((i7 % 5) + 51) {
                    case 51:
                        i8 <<= i11;
                        break;
                    case 52:
                        if (Test.bFld) continue;
                    case 53:
                        Test.lFld = (long)Test.fFld1;
                        break;
                    case 54:
                        i11 += (((i9 * Test.fFld1) + Test.fFld1) - by);
                        i8 <<= (int)-46L;
                        Test.iFld += (int)Test.instanceCount;
                        i11 += (((i9 * Test.instanceCount) + Test.sFld) - by);
                        break;
                    case 55:
                        if (i5 != 0) {
                            vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + i11 + by;
                            return;
                        }
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + i11 + by;
    }

    public int iMeth() {

        int i12=16872, i13=-34, i14=-11, i15=-14, i16=7, i17=-6, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 5582);

        iArr = (iArr = iArr);
        vMeth1(Test.iFld);
        for (i12 = 9; i12 < 199; i12++) {
            Test.iFld += (i12 | Test.lFld);
            if (i12 != 0) {
            }
            for (i14 = i12; i14 < 8; ++i14) {
                i13 += (((i14 * Test.fFld1) + i15) - Test.iFld);
                Test.iFld = i12;
                Test.iFld += i14;
                iArr[i12 + 1][i12] = i14;
            }
            fFld = 0;
            for (i16 = i12; 8 > i16; i16++) {
                if (Test.bFld) {
                    i17 = 29020;
                    try {
                        iArr[(i15 >>> 1) % N][i12 - 1] = (298 / i15);
                        i13 = (Test.iFld / -24210);
                        Test.iFld1 = (iArr[i12][i12 + 1] % 12497);
                    } catch (ArithmeticException a_e) {}
                } else if (Test.bFld) {
                    Test.dArrFld[i12 + 1] += -54L;
                } else {
                    Test.iFld = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i1=204, i2=1, i3=-211, i4=-55366, i18=-21033, i19=-9, i20=23218, iArr1[]=new int[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 227L);
        FuzzerUtils.init(dArr, 68.94514);
        FuzzerUtils.init(iArr1, 45526);
        FuzzerUtils.init(fArr, -101.262F);

        dFld = ((Test.iFld - Test.instanceCount) + ((Test.instanceCount - Test.iFld) - (Test.iFld * Test.iFld)));
        lArr[(Test.iFld >>> 1) % N] -= (((Test.iFld * Test.iFld) / ((Test.instanceCount + Test.instanceCount) | 1)) -
            Test.iFld);
        fFld = Test.iFld;
        for (i1 = 7; 222 > i1; i1++) {
            Test.iFld *= (int)(dArr[i1] - ((Test.instanceCount + fFld) - (Test.sFld + dFld)));
            for (i3 = 1; i3 < 7; i3 += 2) {
                switch (((i3 % 1) * 5) + 47) {
                case 52:
                    Test.iFld -= Math.abs((i3 * Test.sFld) * iMeth());
                    for (i18 = 1; i18 < 3; i18++) {
                        Test.sArrFld[i1] *= (short)94L;
                        try {
                            Test.iFld = (209 % i20);
                            i20 = (i19 % iArr1[(i19 >>> 1) % N]);
                            i4 = (i2 % -386);
                        } catch (ArithmeticException a_e) {}
                        i20 >>= (int)lFld1;
                        lFld1 += (((i18 * Test.instanceCount) + i18) - i19);
                        Test.instanceCount -= -32112;
                        fArr[i3] = i1;
                    }
                default:
                    Test.iFld1 ^= -26418;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i18 + i19 + i20 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i21=-4, i22=-34953, i23=8, i24=45687, i25=57, i26=-29212, i27=28, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 253);

        Test.instanceCount = Test.iFld;
        i = 1;
        while (++i < 233) {
            vMeth();
        }
        for (i21 = 11; i21 < 304; i21++) {
            try {
                i22 = (Test.iFld1 / i22);
                Test.iFld = (iArr2[i21] % Test.iFld1);
                i22 = (-32206 / i);
            } catch (ArithmeticException a_e) {}
            i23 = 1;
            do {
                iArr2[i21] = -58922;
                for (i24 = 1; i24 < 1; ++i24) {
                    if (Test.bFld) continue;
                    lFld1 += Test.instanceCount;
                    i25 = i22;
                    Test.iFld = 74;
                    lFld1 *= i25;
                    Test.iFld = i25;
                    i22 += (int)1.804F;
                    dFld += -45261;
                    if (Test.bFld) {
                        Test.fArrFld[i24 + 1] = i;
                        Test.iFld = i22;
                        Test.iFld = (int)Test.instanceCount;
                    } else {
                        Test.lFld += (i24 - i);
                        Test.instanceCount += Test.iFld;
                        Test.iFld += (i24 * i24);
                        if (Test.bFld) break;
                    }
                }
                for (i26 = 1; i26 < 1; ++i26) {
                    iArr2[i21] = (int)Test.instanceCount;
                }
            } while (++i23 < 86);
            iArr2[i21 - 1] -= i22;
            if (Test.bFld) continue;
        }
        i22 *= Test.sFld;
        i22 *= i23;



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
