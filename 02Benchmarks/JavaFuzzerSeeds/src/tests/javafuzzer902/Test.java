package tests.javafuzzer902;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:25:10 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-157L;
    public static int iFld=-7;
    public static byte byFld=35;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, long l) {

        byte by=30;

        l -= by;
        i8 <<= i8;
        Test.instanceCount = Test.iFld;
        long meth_res = i8 + l + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i4, double d) {

        int i5=-127, i6=112, i7=-55145, i9=5, i10=-78, iArr1[]=new int[N];
        short s=-23828, sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(sArr, (short)23457);

        Test.instanceCount >>>= (Test.instanceCount--);
        for (i5 = 256; i5 > 1; --i5) {
            iArr1[i5] -= (int)((i7 - (i5 * i6)) - (d - Test.iFld));
            i6 -= i6;
            i4 &= (--i4);
            iArr1[i5] = (int)lMeth(i4, Test.instanceCount);
            i7 += i4;
            Test.instanceCount = Test.instanceCount;
            switch (((Test.iFld >>> 1) % 4) + 21) {
            case 21:
                for (i9 = i5; i9 < 6; i9 += 3) {
                    Test.instanceCount >>= -174;
                    i6 += (int)Test.instanceCount;
                    Test.iFld = (int)46973L;
                    iArr1[i5 + 1] = i4;
                    Test.iFld >>= Test.iFld;
                }
            case 22:
                sArr[i5] = (short)Test.instanceCount;
                break;
            case 23:
                Test.byFld += (byte)Test.instanceCount;
                break;
            case 24:
                s <<= (short)Test.instanceCount;
                break;
            default:
                i6 >>= 33;
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + i9 + i10 + s + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i1) {

        int i2=5044, i3=-81, i11=50068, i12=10300, i13=-56394;
        double d1=116.104527, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5736967030922697219L);
        FuzzerUtils.init(dArr, 1.26720);

        for (i2 = 270; i2 > 16; --i2) {
            i3 = (int)Test.instanceCount;
            vMeth1(-22783, -2.26056);
            for (i11 = 6; i11 > 1; --i11) {
                d1 = Test.instanceCount;
                i13 = 1;
                do {
                    lArr[i11] += i11;
                    lArr[i13 - 1] <<= i11;
                    dArr[i2 - 1] = Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    i3 = (int)Test.instanceCount;
                    i12 <<= (int)Test.instanceCount;
                    Test.iFld /= (int)(i11 | 1);
                } while (++i13 < 2);
                d1 += i12;
                Test.iFld += (int)d1;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i11 + i12 + Double.doubleToLongBits(d1) + i13 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i14=59200, i15=5, i16=3, i17=138, i18=-238, i19=-179, i20=42, i21=22200, i22=11, i23=-18154,
            iArr[]=new int[N];
        boolean b=true;
        double d2=-60.102930, d3=0.69459;

        FuzzerUtils.init(iArr, 62400);

        iArr[(Test.iFld >>> 1) % N] <<= (int)(((Test.iFld += (int)Test.instanceCount) + (-36 + (Test.instanceCount -
            Test.iFld))) + (++Test.iFld));
        if (b) {
            i = 269;
            do {
                vMeth(-109);
                Test.iFld += (i * i);
                Test.iFld = -150;
                if (b) continue;
                Test.byFld += (byte)(((i * i) + Test.instanceCount) - Test.iFld);
                for (i14 = 2; i14 < 93; i14++) {
                    Test.iFld *= 220;
                    try {
                        Test.iFld = (-198 % i14);
                        iArr[i14 + 1] = (-85 / i);
                        i15 = (64752 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                }
            } while (--i > 0);
            i16 = 1;
            do {
                Test.iFld += i16;
                for (i17 = 199; i17 > 5; i17--) {
                    for (i19 = 1; 2 > i19; i19++) {
                        try {
                            i15 = (92 / i20);
                            iArr[i19 - 1] = (-60 % i20);
                            i20 = (i % iArr[i16]);
                        } catch (ArithmeticException a_e) {}
                        iArr[(35564 >>> 1) % N] -= (int)Test.instanceCount;
                    }
                    i15 = i18;
                    i15 = (int)1131176696486312255L;
                    Test.iFld = i19;
                }
                Test.iFld = Test.byFld;
                for (d2 = 199; d2 > 2; d2 -= 3) {
                    for (i22 = 1; 4 > i22; ++i22) {
                        i15 = (int)Test.instanceCount;
                        i15 += (i22 * i22);
                        d3 -= Test.instanceCount;
                        switch (((i17 >>> 1) % 2) + 126) {
                        case 126:
                            i18 *= (int)d3;
                            break;
                        case 127:
                            i20 *= i21;
                            iArr = iArr;
                        default:
                            i20 += (int)(-1291570416L + (i22 * i22));
                        }
                    }
                }
            } while (++i16 < 126);
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
