package tests.javafuzzer2013;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 07:26:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static byte byFld=-34;
    public static float fFld=117.698F;
    public boolean bFld=true;
    public static double dFld=-16.30005;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.14303);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8, int i9) {

        int i10=9, i11=-3, i12=-91, i13=55279, i14=5, i15=-20087, i16=-64844;
        double d2=28.82334, d3=-2.78884;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 623949160L);

        for (i10 = 9; i10 < 349; i10++) {
            i7 += (i10 * i10);
            for (d2 = 1; d2 < 5; d2++) {
                for (i13 = 1; 2 > i13; i13++) {
                    i14 += (((i13 * i13) + i12) - i15);
                }
                d3 -= Test.instanceCount;
                Test.instanceCount = i12;
                if (b) {
                    i14 >>= i14;
                } else if (true) {
                    i9 = i12;
                    Test.dArrFld[i10 - 1] = i15;
                }
                i16 = 1;
                while (++i16 < 2) {
                    i14 += (int)Test.instanceCount;
                    lArr[i16] = i9;
                    i8 ^= i15;
                }
            }
        }
        vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d2) + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d3) + (b ? 1 : 0) + i16 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(short s1, int i6, float f1) {

        int i17=237, i18=102, i19=-12, i20=-107, i21=-140, i22=-8, i23=1, i24=-150;
        boolean b1=true;

        vMeth2(i6, i6, i6);
        if (b1) {
            f1 *= Test.byFld;
            i6 *= i6;
            for (i17 = 9; i17 < 221; i17++) {
                i18 += (((i17 * i17) + Test.instanceCount) - i17);
            }
            i6 = i6;
        } else {
            for (i19 = 1; i19 < 131; ++i19) {
                for (i21 = 1; 12 > i21; i21++) {
                    Test.instanceCount += (i21 * i21);
                    for (i23 = 1; 2 > i23; i23++) {
                        i18 -= (int)Test.instanceCount;
                        i22 += (int)Test.instanceCount;
                        i24 -= i21;
                        i20 = i21;
                    }
                }
            }
        }
        vMeth1_check_sum += s1 + i6 + Float.floatToIntBits(f1) + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23
            + i24;
    }

    public static void vMeth(int i2, int i3) {

        double d=1.22826, d1=-126.122595;
        float f=0.707F;
        int i4=49, i5=23989, iArr[]=new int[N];
        short s=27642;

        FuzzerUtils.init(iArr, 14);

        iArr[(i2 >>> 1) % N] *= (int)d;
        i2 -= (int)(i2 + (f * i3));
        iArr[(i3 >>> 1) % N] = (int)Long.reverseBytes((i3 - i2) * (--i2));
        d -= (i3++);
        i4 = 1;
        do {
            iArr[i4] *= (Test.byFld = (byte)i2);
            i3 *= (i4 + i2);
            i2 >>>= (Math.abs((int)(f - Test.instanceCount)) + Math.abs((int)(Test.instanceCount - i3)));
            Test.instanceCount = (Test.byFld = (byte)((84 * (i4 + Test.instanceCount)) + (i3++)));
            for (d1 = 5; d1 > 1; d1 -= 3) {
                Test.dArrFld[(int)(d1 + 1)] += (i5 - (-32 + (i5 + s)));
                i3 += (int)d1;
                vMeth1(s, i4, f);
                Test.instanceCount >>= 10;
                i3 <<= i3;
            }
        } while (++i4 < 304);
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i4 +
            Double.doubleToLongBits(d1) + i5 + s + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=57473, i1=7, i25=-46, i26=-45392, i27=23513, i28=-1008, i29=233, i30=-46, iArr1[]=new int[N];
        short s2=-32065;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 70);
        FuzzerUtils.init(fArr, 2.402F);

        for (i = 4; i < 122; i++) {
            vMeth(-7, i1);
            for (i25 = 3; i25 < 212; ++i25) {
                Test.fFld *= i26;
                bFld = bFld;
                Test.instanceCount &= i26;
                s2 >>>= (short)i26;
                iArr1[i25] -= -25305;
                i1 += (i25 * i25);
                for (i27 = 2; 1 < i27; i27--) {
                    i26 |= i26;
                    iArr1 = FuzzerUtils.int1array(N, (int)-5);
                    if (bFld) break;
                    switch ((i27 % 1) + 112) {
                    case 112:
                        Test.byFld *= (byte)i25;
                        Test.dFld += i27;
                        i1 -= (int)Test.dFld;
                        fArr[i] += i;
                        break;
                    }
                    i29 = i28;
                    Test.fFld -= Test.instanceCount;
                    Test.dFld -= i25;
                }
                i29 += (i25 * i25);
                i26 += i27;
            }
        }
        Test.fFld = -41;
        i30 = 1;
        while (++i30 < 358) {
            i1 += (((i30 * Test.instanceCount) + i27) - i25);
            try {
                i26 = (iArr1[i30 - 1] % iArr1[i30 + 1]);
                i28 = (i28 / i29);
                iArr1[i30] = (140 % i27);
            } catch (ArithmeticException a_e) {}
            s2 *= (short)Test.instanceCount;
            iArr1[i30] >>= (int)Test.instanceCount;
            iArr1 = iArr1;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
