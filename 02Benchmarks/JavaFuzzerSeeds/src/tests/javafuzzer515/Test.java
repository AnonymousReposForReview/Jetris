package tests.javafuzzer515;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:58:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=63334L;
    public static int iFld=-2;
    public static byte byFld=-100;
    public volatile float fFld=28.262F;
    public double dFld=-1.110534;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 29969);
        FuzzerUtils.init(Test.sArrFld, (short)-1384);
    }

    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, boolean b, long l1) {

        int i2=202, i3=180;
        float f=-32.572F, fArr1[]=new float[N];
        double d=-1.38567, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, 0.935F);
        FuzzerUtils.init(dArr, -2.119585);
        FuzzerUtils.init(lArr, 149L);

        Test.iFld <<= (int)Test.instanceCount;
        fArr1[(Test.iFld >>> 1) % N] -= 13;
        Test.iFld *= Test.iFld;
        i2 = 1;
        do {
            if (b) {
                switch (((i2 % 2) * 5) + 82) {
                case 91:
                    i3 = 1;
                    while (++i3 < 11) {
                        dArr[i3 + 1] *= f;
                        switch (((i3 >>> 1) % 1) + 24) {
                        case 24:
                            Test.iFld += (int)l;
                            break;
                        default:
                            d *= Test.instanceCount;
                        }
                        Test.iFld = (int)f;
                        f += -3;
                        Test.iFld *= i3;
                        Test.iFld = i2;
                    }
                    break;
                case 89:
                    lArr[i2 + 1] += Test.iFld;
                    break;
                }
            }
        } while (++i2 < 144);
        long meth_res = l + (b ? 1 : 0) + l1 + i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth() {

        boolean b1=true, bArr[]=new boolean[N];
        int i4=7, i5=4044;
        long lArr1[]=new long[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr2, 101.176F);

        Test.iArrFld[(171 >>> 1) % N] = (++Test.iArrFld[(Test.iFld >>> 1) % N]);
        Test.iFld = (--Test.iFld);
        Test.iFld = (int)((-(Test.iFld - Test.iFld)) + ((Test.iArrFld[(-13 >>> 1) % N]--) * fMeth(Test.instanceCount,
            b1, -24481L)));
        lArr1[(200 >>> 1) % N] = Test.iFld;
        for (i4 = 3; i4 < 174; ++i4) {
            double d1=-2.62344;
            bArr[i4 + 1] = b1;
            Test.iFld <<= (int)Test.instanceCount;
            i5 += i4;
            lArr1[i4] = i5;
            fArr2[i4] = i5;
            Test.instanceCount *= -97;
            Test.iFld -= -11925;
            i5 += (int)d1;
            Test.byFld = (byte)i4;
            Test.iFld <<= i4;
        }
        long meth_res = (b1 ? 1 : 0) + i4 + i5 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static short sMeth() {

        int i1=109, i6=-64771, i7=18583;
        long l2=-34749L;
        double d2=2.7127;
        short s=-22191;
        float f1=-115.387F;
        boolean b2=false;

        i1 = 1;
        while (++i1 < 287) {
            Test.iFld *= (Test.iArrFld[i1 - 1]++);
            Test.instanceCount += (lMeth() - l2);
            if (b2) {
                for (d2 = 6; 1 < d2; --d2) {
                    Test.iArrFld[i1 + 1] *= s;
                    Test.instanceCount = i1;
                    i6 += (int)(d2 + i7);
                    i7 += (int)(d2 - f1);
                    Test.sArrFld[(int)(d2 + 1)] = (short)Test.iFld;
                    Test.iFld = Test.iFld;
                }
                f1 = 31;
            } else {
                Test.iArrFld[i1 + 1] = i1;
            }
            Test.instanceCount &= Test.iFld;
            Test.iFld += (int)-98.114902;
        }
        long meth_res = i1 + l2 + Double.doubleToLongBits(d2) + i6 + s + i7 + Float.floatToIntBits(f1) + (b2 ? 1 : 0);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-41, i8=-7, i9=-152, i10=-54, i11=-52728, i12=45, i13=-17, i14=-6, i15=0, i16=130, i17=-161, i18=-63626,
            i19=3;
        boolean b3=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.608F);

        i <<= Test.iArrFld[(i >>> 1) % N];
        Test.instanceCount -= (long)((fArr[(i >>> 1) % N]++) - (sMeth() + i));
        Test.instanceCount -= Test.instanceCount;
        for (i8 = 9; i8 < 226; ++i8) {
            i *= i;
            Test.instanceCount = -23;
            for (i10 = 7; i10 < 116; i10++) {
                Test.iFld -= Test.iFld;
            }
            for (i12 = 3; 116 > i12; i12++) {
                Test.instanceCount = Test.instanceCount;
                for (i14 = 2; i14 > i8; --i14) {
                    Test.instanceCount += i14;
                }
                fFld = fFld;
                dFld *= -127;
                i11 = i14;
                Test.iFld += (int)dFld;
                fFld += (((i12 * i9) + Test.instanceCount) - i14);
                b3 = b3;
                if (true) continue;
                dFld *= Test.instanceCount;
            }
            i9 = (int)dFld;
            switch ((i8 % 6) + 96) {
            case 96:
            case 97:
                for (i16 = 4; 116 > i16; i16++) {
                    Test.iArrFld[i16] -= i9;
                }
                b3 = false;
                fFld += (((i8 * Test.byFld) + i10) - Test.iFld);
                break;
            case 98:
                Test.instanceCount += i8;
            case 99:
                for (i18 = i8; i18 < 116; i18++) {
                    Test.iArrFld[i8 - 1] *= -10;
                    Test.instanceCount ^= i17;
                }
            case 100:
                i9 = i8;
                break;
            case 101:
                i <<= (int)-32L;
                break;
            default:
                i *= i15;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
