package tests.javafuzzer994;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:43:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-120L;
    public static short sFld=18140;
    public static int iFld=-5;
    public static double dArrFld[]=new double[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.87576);
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i14=1, i15=1874, i16=104, i17=132, i18=1043, i19=-5, i20=35682, iArr1[][]=new int[N][N];
        float f1=-120.23F;
        double d1=0.84784;
        byte by1=27;

        FuzzerUtils.init(iArr1, 34714);

        i14 = 274;
        while (--i14 > 0) {
            i15 += i14;
            i15 += (-3 + (i14 * i14));
            i15 += 31252;
            switch ((i14 % 4) + 103) {
            case 103:
                i15 ^= i15;
                break;
            case 104:
                i16 = 1;
                while (++i16 < 6) {
                    f1 += ((long)i16 | (long)Test.sFld);
                    for (i17 = 1; i17 < 1; ++i17) {
                        d1 *= i18;
                        i18 += (i17 - i17);
                    }
                    Test.dArrFld[i14 - 1] += by1;
                    for (i19 = 1; i19 < 1; i19++) {
                        i18 = i17;
                        i20 *= (int)f1;
                    }
                }
            case 105:
                iArr1[i14 + 1][i14 + 1] *= (int)f1;
                break;
            case 106:
                f1 += (i14 * i17);
            }
        }
        vMeth2_check_sum += i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + Double.doubleToLongBits(d1) + by1
            + i19 + i20 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i9, int i10, int i11) {

        int i12=165, i13=9975, i21=-8, i22=4, i23=2, i24=14, i25=74, i26=159;
        float f2=-27.289F;
        byte by2=98;
        double d2=-10.24548;

        Test.instanceCount >>= -14;
        for (i12 = 19; i12 < 334; ++i12) {
            vMeth2();
        }
        for (i21 = 10; 204 > i21; ++i21) {
            for (i23 = 1; i23 < 8; i23++) {
                Test.instanceCount = i13;
                i10 = (int)-9132411166228025864L;
                for (i25 = 2; 1 < i25; --i25) {
                    Test.instanceCount = Test.sFld;
                }
                i11 += (((i23 * Test.instanceCount) + f2) - i21);
                Test.instanceCount = by2;
                i11 = (int)d2;
            }
            d2 += d2;
            i10 -= 73;
            Test.instanceCount = 29;
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13 + i21 + i22 + i23 + i24 + i25 + i26 + Float.floatToIntBits(f2) +
            by2 + Double.doubleToLongBits(d2);
    }

    public static void vMeth(int i6, int i7, int i8) {

        int i27=-14, i28=56023, i29=63, i30=-145, i31=155;
        float f3=-36.820F;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth1(i6, i8, -9);
        Test.instanceCount = Test.instanceCount;
        i27 = 1;
        do {
            for (i28 = 1; i28 < 7; ++i28) {
                for (i30 = 1; i30 < 2; ++i30) {
                    i6 += (((i30 * i7) + i27) - f3);
                    i31 += i6;
                    f3 += i30;
                    Test.instanceCount -= Test.instanceCount;
                    Test.sFld *= (short)19254L;
                    if (true) {
                        try {
                            i31 = (Test.iArrFld[i27] / i7);
                            Test.iFld = (2087114384 / Test.iArrFld[i28]);
                            Test.iFld = (i7 / 49607);
                        } catch (ArithmeticException a_e) {}
                        f3 -= f3;
                        f3 *= f3;
                        bArr[i27] = b;
                        vMeth_check_sum += i6 + i7 + i8 + i27 + i28 + i29 + i30 + i31 + Float.floatToIntBits(f3) + (b ?
                            1 : 0) + FuzzerUtils.checkSum(bArr);
                        return;
                    } else {
                        if (false) break;
                    }
                }
            }
        } while (++i27 < 232);
        vMeth_check_sum += i6 + i7 + i8 + i27 + i28 + i29 + i30 + i31 + Float.floatToIntBits(f3) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-40529, i1=-139, i2=91, i3=-139, i4=-54, i5=33, i32=13, i33=13, iArr[]=new int[N];
        byte by=80;
        double d=1.51681, d3=-7.56767;
        float f=0.709F;

        FuzzerUtils.init(iArr, 17);

        for (i = 1; i < 347; ++i) {
            i2 = 1;
            while (++i2 < 73) {
                i1 += (((i2 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                i3 = 1;
                while (++i3 < 1) {
                    i1 -= -8361;
                    i1 >>>= (i1--);
                    i1 = iArr[i - 1];
                    by *= (byte)((++d) + f);
                }
                for (i4 = 1; i4 > 1; i4--) {
                    vMeth(i4, i3, i5);
                }
                d3 = Test.iFld;
                Test.instanceCount = (long)-1.668F;
                for (i32 = 1; i32 > 1; i32 -= 3) {
                    i5 = i3;
                    by = (byte)i1;
                    i1 = i2;
                    Test.iFld >>= i2;
                }
                i1 = (int)f;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
