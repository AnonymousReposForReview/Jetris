package tests.javafuzzer200;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:08:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-56L;
    public static byte byFld=126;
    public static float fFld=0.228F;
    public static volatile boolean bFld=false;
    public short sFld=-5662;
    public int iFld=169;
    public long lFld=-12L;
    public double dFld=-54.106091;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i1=14, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 1);

        iArr[(i1 >>> 1) % N] = (int)(((i1 + 50.41801) + (i1 ^ i1)) / 1);
        vSmallMeth_check_sum += i1 + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1(int i7, int i8, float f) {

        int i9=-32665, i10=37738, i11=-9, i12=-2, i13=57, i14=13338, i15=-14, i16=-178;
        double d=2.102046;

        if (Test.bFld) {
            Test.fFld = 107.14F;
            for (i9 = 4; i9 < 173; i9++) {
                Test.bFld = Test.bFld;
                i10 += i9;
                i10 >>= i7;
            }
            Test.bFld = Test.bFld;
        } else {
            d -= Test.instanceCount;
            for (i11 = 10; i11 < 196; i11++) {
                for (i13 = 9; 1 < i13; --i13) {
                    for (i15 = 1; i15 < 2; i15++) {
                        i12 += i7;
                        i7 += (((i15 * Test.instanceCount) + f) - Test.byFld);
                        i14 += (((i15 * f) + Test.instanceCount) - f);
                        f = 191;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13
            + i14 + i15 + i16;
    }

    public int iMeth() {

        int i5=61724, i6=-6, i17=185, i18=-32;
        boolean b=true, bArr[]=new boolean[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(sArr, (short)-25942);

        for (i5 = 10; i5 < 170; ++i5) {
            i6 -= (int)(++Test.fFld);
            if (b) continue;
            vMeth1(i5, 7, Test.fFld);
            i6 += (int)Test.instanceCount;
            Test.instanceCount = sFld;
        }
        for (i17 = 385; i17 > 21; --i17) {
            bArr[i17 + 1] = Test.bFld;
            i18 = (int)Test.instanceCount;
            iArrFld = iArrFld;
            sArr[i17] = (short)-76;
            i18 *= i6;
            iArrFld = iArrFld;
            sFld += (short)i18;
            Test.instanceCount = (long)Test.fFld;
        }
        long meth_res = i5 + i6 + (b ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i2, int i3, long l) {

        int i4=-1, i19=10, i20=19014, i21=-44868, i22=28659, i23=7;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 113L);

        iArrFld[(i3 >>> 1) % N] -= -13;
        i4 -= (int)((i2++) * (-14 * (Test.byFld * Test.instanceCount)));
        i4 = iMeth();
        i19 = 1;
        do {
            Test.byFld -= (byte)i4;
            iFld = iFld;
        } while (++i19 < 222);
        for (i20 = 12; i20 < 329; i20++) {
            i2 = i3;
            i22 = 1;
            while (++i22 < 5) {
                iFld *= (int)Test.instanceCount;
                i23 = 1;
                do {
                    lArr[i23] >>= i22;
                    i2 >>= i23;
                    sFld >>= (short)i21;
                    iFld = i4;
                } while (++i23 < 1);
            }
        }
        vMeth_check_sum += i2 + i3 + l + i4 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-27675, i24=112, i25=-11, i26=61461, i27=-46, i28=-47679, i29=-215, i30=-8794;
        byte by=-84;
        double d1=0.25146;
        long l1=36648L;

        iArrFld[(i >>> 1) % N] -= (int)(i - Math.abs(-15L + i));
        for (int smallinvoc=0; smallinvoc<780; smallinvoc++) vSmallMeth();
        vMeth(i, iFld, Test.instanceCount);
        iFld = sFld;
        for (i24 = 271; 4 < i24; i24 -= 3) {
            Test.instanceCount >>= i25;
            by = (byte)i25;
            switch (((i24 % 7) * 5) + 57) {
            case 62:
                i25 = i25;
            case 76:
                iFld *= (int)3000044970087811178L;
            case 70:
                for (i26 = 6; i26 < 281; ++i26) {
                    i28 = 2;
                    do {
                        d1 *= i26;
                        lFld += (i28 * i28);
                        i29 /= (int)(i28 | 1);
                        switch (((i25 >>> 1) % 2) + 62) {
                        case 62:
                            iFld >>= i27;
                            break;
                        case 63:
                            i25 += i28;
                            Test.fFld += by;
                        }
                        i25 *= (int)lFld;
                        Test.fFld += (((i28 * sFld) + l1) - i29);
                        i += (64579 + (i28 * i28));
                        iFld <<= i26;
                        iArrFld[i26 + 1] = i;
                    } while ((i28 -= 2) > 0);
                    i -= (int)103L;
                    i30 = 2;
                    do {
                        i27 *= i30;
                        i <<= 11;
                        dFld = i24;
                        Test.bFld = Test.bFld;
                    } while (--i30 > 0);
                }
                break;
            case 90:
                i27 -= (int)lFld;
                break;
            case 68:
                i25 <<= i29;
                break;
            case 60:
                i29 >>>= i;
                break;
            case 79:
                i29 *= i30;
                break;
            default:
                try {
                    i27 = (i30 / i30);
                    i27 = (i29 / 716709522);
                    i29 = (i29 / -62220);
                } catch (ArithmeticException a_e) {}
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
