package tests.javafuzzer864;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 10:56:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static short sFld=-12510;
    public static volatile float fFld=-123.665F;
    public byte byFld=34;
    public boolean bFld=false;
    public static boolean bFld1=false;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
        FuzzerUtils.init(Test.iArrFld1, -51008);
        FuzzerUtils.init(Test.lArrFld, -4876585306691023406L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        int i=5, i1=1, i3=-9, i4=-10, i5=1, i6=-1;
        byte by1=-4;
        double d=0.38433, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 3.5138);

        for (i = 366; i > 6; --i) {
            int i2=57;
            i1 += (((i * i) + by1) - i);
            i2 += (((i * i) + i1) - i1);
            Test.iArrFld[i] = (int)4043L;
            by1 *= (byte)0L;
            for (i3 = i; i3 < 5; ++i3) {
                float f=1.927F;
                f -= by1;
                i1 += (i3 * i3);
                dArr[i3] = Test.instanceCount;
                Test.iArrFld[i3 - 1] *= (int)Test.instanceCount;
                for (i5 = 1; i5 < 1; ++i5) {
                    d = Test.instanceCount;
                    Test.sFld *= (short)187;
                    Test.instanceCount *= i6;
                    Test.iArrFld[i - 1] = (int)-4987L;
                }
            }
        }
        long meth_res = i + i1 + by1 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1() {

        int i7=33588, i8=157, i9=12, i10=-4512, i11=13, i12=-14;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 83.308F);

        bMeth();
        for (i7 = 11; i7 < 178; i7++) {
            fArr[i7 + 1] += -7;
            Test.instanceCount = i7;
            Test.fFld += i8;
            Test.instanceCount = -8;
            for (i9 = 1; 9 > i9; ++i9) {
                Test.iArrFld1[i7] = Test.sFld;
                Test.instanceCount += (i9 * i9);
                if (b) break;
                for (i11 = 1; 2 > i11; i11++) {
                    i12 += (int)Test.instanceCount;
                    i12 += i11;
                    Test.instanceCount = i10;
                    Test.lArrFld = Test.lArrFld;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i13=-8, i14=-75, i15=177, i16=12, i17=-4, i18=-1, i19=6;
        byte by2=-113;

        vMeth1();
        i13 = 184;
        while (--i13 > 0) {
            for (i14 = 1; i14 < 9; ++i14) {
                boolean b1=true;
                if (b1) continue;
                for (i16 = 1; i16 < 2; ++i16) {
                    i15 = i17;
                    if (i17 != 0) {
                        vMeth_check_sum += i13 + i14 + i15 + i16 + i17 + by2 + i18 + i19;
                        return;
                    }
                    Test.iArrFld1 = Test.iArrFld1;
                    by2 += (byte)(i16 * i16);
                }
                for (i18 = 2; i18 > 1; i18 -= 3) {
                    i17 += (i18 + Test.sFld);
                    i15 = i16;
                    Test.fFld = Test.fFld;
                }
                i19 |= i18;
                Test.instanceCount += 0;
            }
        }
        vMeth_check_sum += i13 + i14 + i15 + i16 + i17 + by2 + i18 + i19;
    }

    public void mainTest(String[] strArr3) {

        int i20=-13, i21=-8, i22=-10, i23=-10, i24=-98, i25=-4;
        double d1=0.115838;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)12851);

        vMeth();
        for (i20 = 9; i20 < 298; i20++) {
            i21 >>= -23585;
            for (i22 = 4; i22 < 87; i22++) {
                switch ((((i21 >>> 1) % 2) * 5) + 40) {
                case 43:
                    Test.instanceCount >>= i21;
                    Test.instanceCount /= (i20 | 1);
                    switch ((i20 % 2) + 57) {
                    case 57:
                        for (i24 = i20; i24 < 2; ++i24) {
                            Test.instanceCount = i21;
                            Test.iArrFld[i24] <<= i23;
                            i23 += i23;
                            byFld = (byte)Test.instanceCount;
                            Test.iArrFld[i22] = -87;
                            i23 += (((i24 * Test.instanceCount) + i21) - i21);
                            switch ((i20 % 8) + 57) {
                            case 57:
                                Test.iArrFld1[i24 + 1] >>= (int)Test.instanceCount;
                            case 58:
                                Test.fFld -= 6986;
                                break;
                            case 59:
                                try {
                                    Test.iArrFld[i20 + 1] = (i22 % 34);
                                    i23 = (i22 / i24);
                                    i23 = (i20 % 1118358312);
                                } catch (ArithmeticException a_e) {}
                                i25 = i24;
                                if (bFld) {
                                    Test.instanceCount = i24;
                                    Test.instanceCount = i24;
                                } else if (bFld) {
                                    if (bFld) break;
                                    Test.iArrFld1[i24 - 1] = i20;
                                    if (bFld) break;
                                    Test.instanceCount &= byFld;
                                } else if (Test.bFld1) {
                                    if (bFld) continue;
                                    Test.instanceCount = i20;
                                    if (bFld) break;
                                }
                            case 60:
                                i21 += (i24 * i24);
                            case 61:
                                i25 += i20;
                                break;
                            case 62:
                                i25 += i23;
                                break;
                            case 63:
                            case 64:
                                Test.fFld += (float)d1;
                                break;
                            default:
                                Test.instanceCount += (((i24 * i23) + i24) - i21);
                            }
                        }
                        break;
                    case 58:
                        i25 = i25;
                        break;
                    default:
                        sArr[i20 - 1] *= (short)Test.fFld;
                    }
                    break;
                case 42:
                    Test.iArrFld1 = FuzzerUtils.int1array(N, (int)-10);
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
