package tests.javafuzzer3179;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:21:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=176L;
    public float fFld=-60.668F;
    public static short sFld=1445;
    public static byte byFld=7;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)8226);
        FuzzerUtils.init(Test.iArrFld, -30922);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, short s1, float f3) {

        double d2=93.74377;
        int i11=23546, i12=-9, i13=-93, i14=11, i15=-11, iArr1[][]=new int[N][N];
        byte by=-122;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1694581170L);
        FuzzerUtils.init(iArr1, -10);

        d2 -= d2;
        i10 = (int)f3;
        i11 = 1;
        while (++i11 < 330) {
            lArr1[i11 - 1] = i11;
            iArr1[i11 + 1][i11] = 2;
            i12 = 5;
            while (--i12 > 0) {
                i10 += (i12 * f3);
                for (i13 = 1; i13 < 1; ++i13) {
                    by += (byte)(((i13 * i14) + i12) - Test.instanceCount);
                    if (true) {
                        if (b) {
                            i10 |= i10;
                        }
                        i14 += -87;
                        lArr1[i11 + 1] = i15;
                        Test.instanceCount = i15;
                    } else {
                        b = b;
                    }
                }
            }
        }
        vMeth1_check_sum += i10 + s1 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 +
            by + (b ? 1 : 0) + i15 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i3, int i4, long l1) {

        int i6=-127, i7=-27549, i8=35757, i9=59831, iArr[]=new int[N];
        float f2=-1.401F;

        FuzzerUtils.init(iArr, 54);

        for (int i5 : iArr) {
            l1 = (long)Double.longBitsToDouble(-10L);
            iArr[(i5 >>> 1) % N] *= (iArr[(i4 >>> 1) % N] = (i4++));
            for (i6 = 1; 4 > i6; i6++) {
                i7 |= (int)(++l1);
                switch ((i6 % 7) + 59) {
                case 59:
                    for (i8 = 1; 2 > i8; i8++) {
                        f2 += (-481866242L + (i8 * i8));
                        vMeth1(i8, Test.sFld, f2);
                        i5 = i7;
                        i3 += (int)(188L + (i8 * i8));
                        f2 = -24564;
                        l1 = i8;
                    }
                    break;
                case 60:
                    i7 += i6;
                    Test.sArrFld = Test.sArrFld;
                    break;
                case 61:
                    i5 *= i4;
                case 62:
                    f2 *= f2;
                    break;
                case 63:
                    iArr = iArr;
                    break;
                case 64:
                    try {
                        i9 = (-21 % i5);
                        i7 = (1754705014 / i6);
                        i5 = (i3 / i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 65:
                    l1 -= Test.instanceCount;
                    break;
                default:
                    i5 = i8;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(short s, float f1, long l) {

        double d1=59.31896, d3=-112.127543;
        int i2=-179, i16=33546, i17=118;
        boolean b1=true;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 12177L);

        for (d1 = 8; 353 > d1; d1++) {
            vMeth(i2, i2, Test.instanceCount);
            f1 += i2;
            lArr2[(int)(d1 + 1)] = (long)d1;
            i2 = -3;
            if (true) {
                f1 = Test.instanceCount;
                Test.byFld *= (byte)d1;
            } else {
                d3 = i2;
                b1 = b1;
            }
            i2 = (int)-76.170F;
        }
        i2 = -12;
        for (i16 = 7; 133 > i16; ++i16) {
            i2 += (int)1.42601;
            i17 |= (int)-47131L;
        }
        long meth_res = s + Float.floatToIntBits(f1) + l + Double.doubleToLongBits(d1) + i2 +
            Double.doubleToLongBits(d3) + (b1 ? 1 : 0) + i16 + i17 + FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=23604, i1=104, i18=-147, i19=230, i20=10, i21=13, i22=-30495;
        float f=121.107F, f5=6.927F, fArr[]=new float[N];
        double d=0.84852, dArr[]=new double[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 804255471L);
        FuzzerUtils.init(fArr, -92.943F);
        FuzzerUtils.init(dArr, 2.53705);

        i -= (int)(-(--fFld));
        for (f = 7; f < 324; ++f) {
            i ^= (int)Test.instanceCount;
            d = (lArr[(int)(f + 1)]--);
            Test.instanceCount >>>= ((i1 * (i1 * Test.instanceCount)) * lMeth(Test.sFld, fFld, Test.instanceCount));
        }
        i -= (int)Test.instanceCount;
        if (b2) {
            i1 <<= Test.sFld;
        } else {
            Test.instanceCount >>>= i1;
            Test.instanceCount -= (long)d;
        }
        for (float f4 : fArr) {
            Test.instanceCount = i1;
            if (b2) {
                switch (((202 >>> 1) % 1) + 13) {
                case 13:
                    i18 = 1;
                    do {
                        try {
                            i1 = (Test.iArrFld[i18 - 1] % 60372);
                            i1 = (Test.iArrFld[i18 - 1] / Test.iArrFld[i18]);
                            i1 = (i / i);
                        } catch (ArithmeticException a_e) {}
                        d -= -17862;
                        if (b2) break;
                        for (i19 = 1; i19 < 1; ++i19) {
                            i = (int)Test.instanceCount;
                        }
                    } while (++i18 < 63);
                    switch (((i19 >>> 1) % 1) + 40) {
                    case 40:
                        i20 += -13;
                        for (f5 = 1; f5 < 63; f5++) {
                            dArr[(int)(f5 - 1)] = f;
                            i20 *= i1;
                            i22 += (int)(((f5 * Test.instanceCount) + i) - i22);
                            Test.instanceCount ^= Test.instanceCount;
                            i21 = i18;
                            dArr[(int)(f5 - 1)] += i21;
                            i22 &= i22;
                        }
                        break;
                    default:
                        i22 -= (int)d;
                    }
                    break;
                }
            } else {
                i22 = i;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
