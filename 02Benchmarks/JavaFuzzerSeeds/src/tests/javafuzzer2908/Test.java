package tests.javafuzzer2908;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 22:48:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=41L;
    public int iFld=-34044;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i7) {

        int i8=1, i9=23510, i10=146, i11=-94, i12=-4, i13=13, iArr1[]=new int[N];
        byte by=-72;

        FuzzerUtils.init(iArr1, -55574);

        i7 += i7;
        i7 = (int)Test.instanceCount;
        l ^= Test.instanceCount;
        for (i8 = 24; i8 < 397; i8++) {
            by = (byte)i7;
            if (true) continue;
            Test.iArrFld[i8] = 23355;
            by = (byte)1637174648L;
            for (i10 = i8; i10 < 5; i10++) {
                i11 += i10;
            }
            i7 ^= i10;
            try {
                Test.iArrFld[i8 + 1] = (20614 % iArr1[i8 - 1]);
                i7 = (48136 % i11);
                i11 = (i7 % -32754);
            } catch (ArithmeticException a_e) {}
            for (i12 = 1; 5 > i12; i12++) {
                i7 *= i9;
                Test.instanceCount >>= -73;
            }
        }
        long meth_res = l + i7 + i8 + i9 + by + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1, int i5, int i6) {

        int i14=40567, i15=-9, i16=12862, i17=19776;
        boolean b=true;
        float f=1.250F;

        d1 = (Math.abs(-1) + Math.max(i5 - i5, iMeth(Test.instanceCount, i6)));
        i14 = 1;
        while (++i14 < 188) {
            i6 = i5;
            for (i15 = 1; i15 < 8; ++i15) {
                Test.iArrFld[i14] += (int)-27L;
                Test.instanceCount = i15;
                b = b;
            }
            i17 = 1;
            do {
                d1 -= i15;
                switch ((i17 % 2) + 21) {
                case 21:
                    d1 = f;
                    Test.instanceCount += i6;
                    i6 = i6;
                    break;
                case 22:
                    if (b) break;
                    break;
                default:
                    i16 = i5;
                }
            } while (++i17 < 8);
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i5 + i6 + i14 + i15 + i16 + (b ? 1 : 0) + i17 +
            Float.floatToIntBits(f);
    }

    public static long lMeth(int i3, int i4) {

        double d=21.105560;
        float f1=0.360F;
        boolean b1=false;
        byte by1=30;
        int i18=36, i19=-29243, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 5);

        iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-99)));
        d = 1;
        do {
            vMeth(d, i3, i4);
            i3 <<= i3;
            i3 >>>= 13;
            f1 = i3;
            i3 += i3;
            i3 &= i4;
            if (b1) break;
        } while (++d < 216);
        i4 += by1;
        i4 += (int)f1;
        for (i18 = 5; i18 < 339; i18++) {
            i4 -= i4;
            b1 = false;
            i4 += (i18 - f1);
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + by1 + i18 +
            i19 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8, i1=-224, i2=132, i20=-21941, i21=-1, i22=237, i23=13, i24=26181;
        double d2=-1.108966;
        float f2=0.125F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i = 1; 263 > i; i++) {
            i2 = 1;
            while (++i2 < 96) {
                Test.instanceCount -= lMeth(i1, i);
                i1 ^= (int)-46900L;
                Test.instanceCount = i2;
                i1 += i2;
                Test.iArrFld[i + 1] <<= iFld;
                d2 = 1;
                while (++d2 < 1) {
                    i1 = iFld;
                    i1 += iFld;
                    i1 = (int)-5206414545088601152L;
                    if (bFld) break;
                    i1 *= i2;
                    Test.instanceCount = iFld;
                    iFld += (int)Test.instanceCount;
                    f2 += (float)d2;
                    if (bFld) break;
                }
                i1 = (int)-7L;
                iFld += (i2 * i2);
                i20 = 1;
                do {
                    iFld <<= i;
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount ^= Test.instanceCount;
                    bArr[i + 1] = bFld;
                } while (++i20 < 1);
            }
            fArrFld[i] += i20;
            f2 += (float)101.90142;
            for (i21 = 6; i21 < 96; ++i21) {
                for (i23 = 2; i23 > 1; i23 -= 3) {
                    Test.iArrFld[i23] = i20;
                    i22 += i24;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
