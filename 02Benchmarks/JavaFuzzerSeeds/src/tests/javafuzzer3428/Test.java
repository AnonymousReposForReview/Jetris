package tests.javafuzzer3428;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:10:48 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=104L;
    public long lFld=2177331491L;
    public static int iFld=-10;
    public static float fFld=61.427F;
    public static byte byFld=-46;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 51.686F);
        FuzzerUtils.init(Test.lArrFld, 32573L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {


        Test.iFld *= (int)Test.instanceCount;
        vMeth1_check_sum += 0;
    }

    public static void vMeth(double d) {


        vMeth1();
        vMeth_check_sum += Double.doubleToLongBits(d);
    }

    public int iMeth(int i, int i1, int i2) {

        double d1=-32.9706;
        int i3=119, i4=59, i5=-37254, i6=39, i7=-61765, iArr[]=new int[N];
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2715317924L);
        FuzzerUtils.init(iArr, 9);

        vMeth(d1);
        for (i3 = 332; i3 > 20; i3 -= 2) {
            lArr[i3 + 1] ^= lFld;
        }
        d1 += i1;
        Test.fArrFld[(-8 >>> 1) % N] += Test.fFld;
        for (i5 = 6; i5 < 331; i5++) {
            i4 += (((i5 * Test.instanceCount) + Test.fFld) - Test.iFld);
            i += i5;
            i7 = 1;
            while (++i7 < 5) {
                b = false;
                i4 = i4;
                iArr = iArr;
                i2 += i7;
                i *= (int)-70.18559;
                if (b) break;
            }
        }
        long meth_res = i + i1 + i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i8=13, i9=14, i10=-148, i11=10, i12=25184, i13=187, i14=14, iArr1[]=new int[N];
        float f=0.56F;
        double d2=0.81597;
        boolean b1=true;
        long l=2459740622263126154L;
        short s1=-15136;

        FuzzerUtils.init(iArr1, 22);

        lFld = (iMeth(Test.iFld, Test.iFld, Test.iFld) - Test.instanceCount);
        Test.iFld = Test.iFld;
        Test.iFld |= Test.iFld;
        Test.iFld = (int)Test.instanceCount;
        i8 = 188;
        do {
            short s=23003;
            Test.lArrFld[i8 + 1][i8 - 1] -= Test.iFld;
            Test.lArrFld[i8][i8] |= lFld;
            Test.instanceCount += (((i8 * Test.iFld) + lFld) - s);
            for (i9 = 4; i9 < 133; i9++) {
                iArr1[i8] = 9;
                for (f = 1; f < 2; ++f) {
                    Test.byFld = (byte)11;
                    lFld = lFld;
                    Test.iFld = (int)d2;
                    Test.fFld += (float)d2;
                }
                i11 += Test.iFld;
            }
            b1 = b1;
        } while (--i8 > 0);
        l = 329;
        do {
            i12 = 1;
            do {
                i11 >>= i10;
                i10 = (int)lFld;
                iArr1[(int)(l + 1)] = i9;
                try {
                    i10 = (-2788 % i8);
                    i10 = (996018912 / i10);
                    Test.iFld = (i8 / -30723);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; i13 < 1; ++i13) {
                    i14 = (int)Test.instanceCount;
                    Test.instanceCount += i13;
                    s1 += (short)-7;
                    lFld += (i13 * l);
                    lFld = i13;
                    Test.fFld += (float)d2;
                }
            } while (++i12 < 76);
        } while (--l > 0);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
