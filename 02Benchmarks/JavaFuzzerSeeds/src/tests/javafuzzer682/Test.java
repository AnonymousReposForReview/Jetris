package tests.javafuzzer682;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 07:52:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-500575082593008465L;
    public static float fFld=18.371F;
    public static double dFld=2.119903;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
        FuzzerUtils.init(Test.sArrFld, (short)-17332);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i=-10, i1=-142, i2=-5, i3=41, i4=-90, i5=-45106;
        float f=-93.684F;
        boolean b=true;
        short s1=25860;
        byte by=-7;

        for (i = 10; 301 > i; i++) {
            i1 = -2;
            i1 <<= i;
            for (i2 = 6; i2 > 1; --i2) {
                Test.iArrFld[i] -= i;
                switch ((((i2 >>> 1) % 8) * 5) + 126) {
                case 143:
                    i1 -= i3;
                    Test.iArrFld[i] -= (int)f;
                    break;
                case 154:
                    for (i4 = 2; 1 < i4; i4--) {
                        f += Test.instanceCount;
                        b = b;
                        Test.sArrFld = Test.sArrFld;
                        Test.iArrFld[i + 1] -= (int)644505804L;
                        i3 = (int)Test.instanceCount;
                        Test.instanceCount *= i1;
                    }
                    break;
                case 151:
                    s1 -= (short)i5;
                    break;
                case 140:
                    Test.instanceCount <<= s1;
                case 131:
                    i1 += (i2 * Test.instanceCount);
                case 155:
                    i3 = i4;
                    break;
                case 146:
                    i3 |= by;
                case 153:
                    Test.instanceCount = 9;
                    break;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + s1 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i6=-12471, i7=-56, i8=55653, i9=-173, i10=16, i11=21;
        boolean b1=false;

        Test.instanceCount += (iMeth() * i6);
        Test.iArrFld[(56210 >>> 1) % N] = (int)6L;
        i6 += i6;
        i7 = 140;
        while (--i7 > 0) {
            Test.fFld = (float)Test.dFld;
            b1 = b1;
            for (i8 = 11; 1 < i8; i8--) {
                Test.instanceCount -= i9;
                for (i10 = 1; i10 < 2; i10 += 2) {
                    Test.fFld /= (i11 | 1);
                    i11 -= i7;
                    i6 -= i11;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-204);
                    Test.fFld -= i8;
                    i6 -= -119;
                }
            }
        }
        vMeth_check_sum += i6 + i7 + (b1 ? 1 : 0) + i8 + i9 + i10 + i11;
    }

    public static void vSmallMeth(short s) {

        int i12=-191;

        vMeth();
        i12 = i12;
        vSmallMeth_check_sum += s + i12;
    }

    public void mainTest(String[] strArr1) {

        float f1=10.717F, fArr[][]=new float[N][N];
        int i13=-53, i14=37, i15=-149, i16=2209;
        byte by1=-100;

        FuzzerUtils.init(fArr, 0.629F);

        for (int smallinvoc=0; smallinvoc<298; smallinvoc++) vSmallMeth((short)(-3051));
        f1 = 1;
        do {
            short s2=-22453;
            Test.iArrFld[(int)(f1)] = i13;
            Test.iArrFld[(int)(f1)] -= i13;
            i13 += (int)f1;
            s2 += (short)(((f1 * i13) + Test.instanceCount) - i13);
            i14 = 1;
            while (++i14 < 91) {
                Test.dFld += i14;
                Test.iArrFld[(i14 >>> 1) % N] *= i13;
                i13 >>= i13;
                Test.bFld = Test.bFld;
                for (i15 = 1; i15 < 1; ++i15) {
                    i16 = 36473;
                    switch (((i13 >>> 1) % 3) + 86) {
                    case 86:
                        fArr[(i16 >>> 1) % N][i15 + 1] = i13;
                        switch ((((14 >>> 1) % 9) * 5) + 1) {
                        case 37:
                            i16 += (i15 * i15);
                        case 3:
                        case 2:
                            Test.iArrFld = Test.iArrFld;
                            Test.fFld += i15;
                            break;
                        case 17:
                            i16 += (((i15 * Test.instanceCount) + i16) - i13);
                            Test.iArrFld[(int)(f1)] = i16;
                            i13 >>>= i16;
                            break;
                        case 4:
                            Test.instanceCount = i16;
                            Test.instanceCount = Test.instanceCount;
                            i16 -= -22616;
                        case 33:
                            Test.instanceCount = i16;
                            by1 += (byte)Test.dFld;
                            i16 = (int)Test.dFld;
                        case 41:
                            i16 -= -100;
                            break;
                        case 9:
                            i16 = i16;
                            break;
                        case 22:
                            i16 *= (int)Test.instanceCount;
                            break;
                        }
                        break;
                    case 87:
                        Test.bFld = false;
                        break;
                    case 88:
                        Test.fFld += i13;
                        break;
                    default:
                        if (Test.bFld) break;
                    }
                }
            }
        } while (++f1 < 277);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
