package tests.javafuzzer1529;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 22:10:42 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=769726035850889290L;
    public static int iFld=-65143;
    public static volatile double dFld=-38.80524;
    public static volatile float fFld=0.404F;
    public short sFld=-9043;
    public boolean bFld=true;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)35);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i2=145, i3=36948, i4=13640, i5=157, i6=158, i7=-9, iArr[][]=new int[N][N];
        boolean b=false;
        byte by=-4;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -64L);
        FuzzerUtils.init(iArr, -36);

        Test.iFld = (int)Test.dFld;
        i2 = 1;
        do {
            lArr[i2 - 1] = 42836;
            for (i3 = 1; i3 < 12; i3++) {
                i5 = 1;
                do {
                    Test.instanceCount += (i5 - i4);
                    try {
                        i4 = (119 / iArr[i5 + 1][i3 + 1]);
                        iArr[i2][i2 - 1] = (Test.iFld % iArr[i2 - 1][i2 - 1]);
                        iArr[i5][i2 - 1] = (iArr[i2 - 1][i2 - 1] / i3);
                    } catch (ArithmeticException a_e) {}
                    if (b) break;
                    Test.fFld = -2755;
                    Test.iFld *= 100;
                } while (++i5 < 2);
                iArr[i2 + 1][i2 + 1] >>>= -21913;
                for (i6 = 1; i6 < 2; ++i6) {
                    i4 -= by;
                    if (i7 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + by + FuzzerUtils.checkSum(lArr)
                            + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i7 ^= 14;
                }
            }
        } while (++i2 < 133);
        vMeth_check_sum += i2 + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + by + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        float f1=-1.713F;
        int i9=-54070, i10=164, i11=-15, i12=-12, iArr1[]=new int[N];
        boolean b1=false;
        byte by1=-63;

        FuzzerUtils.init(iArr1, -1);

        if (false) {
            vMeth();
            Test.iFld = Test.iFld;
            Test.iFld -= (int)-1799585867L;
        } else {
            Test.iFld >>>= Test.iFld;
            Test.byArrFld[(Test.iFld >>> 1) % N] = (byte)Test.instanceCount;
        }
        Test.iFld = -7047;
        Test.iFld += Test.iFld;
        Test.iFld -= Test.iFld;
        for (int i8 : iArr1) {
            for (f1 = 1; f1 < 4; ++f1) {
                for (i10 = 1; i10 < 2; i10++) {
                    if (b1) continue;
                    i12 >>= by1;
                    if (b1) break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + by1 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(double d) {

        int i=-14, i1=-13667, iArr2[]=new int[N];
        float f=0.434F, fArr[]=new float[N];
        short s=26036;

        FuzzerUtils.init(fArr, 2.459F);
        FuzzerUtils.init(iArr2, -30244);

        i = 1;
        while (++i < 186) {
            for (f = 1; f < 9; f++) {
                fArr[i - 1] = lMeth();
                Test.iFld = (int)d;
                Test.iFld -= -146;
                iArr2 = FuzzerUtils.int1array(N, (int)14);
                Test.iFld ^= s;
                i1 = (int)Test.instanceCount;
                switch (((-15315 >>> 1) % 10) + 64) {
                case 64:
                    i1 += Test.iFld;
                    break;
                case 65:
                    i1 = (int)Test.instanceCount;
                    Test.iFld = 127;
                    Test.iFld = i;
                    Test.iFld = (int)f;
                    break;
                case 66:
                case 67:
                    iArr2[(int)(f - 1)] &= i1;
                    break;
                case 68:
                    i1 -= i;
                    break;
                case 69:
                    Test.iFld = i1;
                    break;
                case 70:
                    Test.iFld += i;
                case 71:
                    Test.iFld >>= -10;
                case 72:
                    Test.instanceCount += i1;
                case 73:
                    i1 = s;
                default:
                    i1 += Test.iFld;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i1 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=7, i14=4, i15=-49, i16=-11, i17=191, i18=-13, iArr3[]=new int[N];
        long l=28023602L, l1=-7421L;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(iArr3, 6730);
        FuzzerUtils.init(fArr1, -2.363F);

        Test.iFld = (int)(iMeth(Test.dFld) - 83.2F);
        sFld -= (short)213;
        Test.iFld = (int)-8814390004847712888L;
        Test.iFld = Test.iFld;
        i13 = 1;
        do {
            Test.dFld -= Test.iFld;
        } while (++i13 < 386);
        for (i14 = 12; i14 < 201; i14++) {
            for (i16 = i14; 133 > i16; i16++) {
                l = 1;
                do {
                    Test.iFld += (int)l;
                    Test.iFld += (int)(l - i15);
                    Test.fFld += (l - l);
                } while (++l < 1);
                try {
                    i17 = (i16 / i16);
                    i15 = (i17 % 196);
                    iArr3[i14] = (156 % Test.iFld);
                } catch (ArithmeticException a_e) {}
            }
            fArr1[i14][i14 - 1] *= i13;
            i15 |= i13;
            l1 = 1;
            while (++l1 < 133) {
                Test.iFld += (11677 + (l1 * l1));
                iArr3[i14 - 1] *= (int)l;
                Test.fFld -= i15;
                Test.instanceCount += (217 + (l1 * l1));
                if (bFld) {
                    Test.iFld += Test.iFld;
                    i17 += (int)(((l1 * i16) + Test.fFld) - i13);
                    if (bFld) {
                        Test.dFld *= l1;
                    } else if (bFld) {
                        if (bFld) continue;
                        Test.instanceCount = i14;
                    } else if (bFld) {
                        i17 <<= i16;
                        Test.dFld *= 53663;
                        i18 += (int)(l1 * i18);
                    } else {
                        i18 += (int)l1;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
