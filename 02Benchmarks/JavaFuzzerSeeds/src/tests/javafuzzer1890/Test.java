package tests.javafuzzer1890;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 05:27:25 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static boolean bFld=true;
    public volatile int iFld=-201;
    public double dFld=1.70400;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l) {

        int i3=135, i4=10722;

        for (i3 = 7; i3 < 246; i3++) {
            Test.instanceCount += i3;
        }
        long meth_res = l + i3 + i4;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(double d) {

        int i2=122, i5=-14, i6=-11401, i7=20874, iArr[]=new int[N];
        float f=-57.492F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 27);
        FuzzerUtils.init(lArr, -14339L);

        i2 = (--i2);
        i2 *= (int)(Math.min(i2, i2 + i2) + ((-(i2 - Test.instanceCount)) - (-8 - lMeth(Test.instanceCount))));
        iArr = iArr;
        iArr[(5942 >>> 1) % N] *= i2;
        if (b1) {
            i2 *= i2;
            Test.instanceCount = Test.instanceCount;
        } else if (Test.bFld) {
            lArr[(i2 >>> 1) % N] += i2;
            for (i5 = 13; i5 < 361; i5++) {
                f -= i2;
                Test.instanceCount -= (long)d;
                i7 = 1;
                do {
                    i2 = (int)f;
                    iArr[i5] -= i5;
                    Test.instanceCount -= i7;
                } while (++i7 < 5);
            }
        } else if (false) {
            iArr[(i2 >>> 1) % N] *= (int)-1.107055;
        } else {
            i2 -= i7;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i5 + i6 + Float.floatToIntBits(f) + i7 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i, int i1, boolean b) {

        double d1=0.76077;
        int i8=-10, i9=219, i10=-22478, i11=-14, iArr1[][]=new int[N][N];
        float f1=-2.431F;

        FuzzerUtils.init(iArr1, -73);

        Test.instanceCount = (i--);
        vMeth1(d1);
        d1 -= i;
        i1 -= (int)Test.instanceCount;
        for (i8 = 1; i8 < 236; i8 += 2) {
            f1 += i8;
            i9 = i1;
            Test.instanceCount += (i8 * i8);
            i9 += (((i8 * i1) + i8) - i8);
            i -= -8;
            for (i10 = 1; i10 < 13; ++i10) {
                iArr1 = iArr1;
                i11 += i10;
                i11 = (int)Test.instanceCount;
            }
        }
        Test.instanceCount += i10;
        vMeth_check_sum += i + i1 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i8 + i9 + Float.floatToIntBits(f1) +
            i10 + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i12=41504, i13=241, i14=59952, i15=37103, i16=63953, i17=47939, i18=-14, i19=0, iArr2[][]=new int[N][N];
        byte by=-112;
        float f2=-1.663F;

        FuzzerUtils.init(iArr2, 44032);

        vMeth(iFld, iFld, true);
        for (i12 = 6; i12 < 191; i12++) {
            for (i14 = 7; i14 < 136; ++i14) {
                dFld += 708512726L;
                by -= (byte)dFld;
                Test.instanceCount = Test.instanceCount;
                for (i16 = i12; 2 > i16; i16++) {
                    Test.instanceCount *= i15;
                    if (Test.bFld) break;
                    dFld -= dFld;
                    i17 += (int)(-11.48F + (i16 * i16));
                    i13 <<= -5;
                    dFld *= 235;
                    iFld = 31;
                }
                for (i18 = 1; i18 < 2; ++i18) {
                    switch (((i12 % 8) * 5) + 59) {
                    case 89:
                        try {
                            iFld = (-2087959849 % i13);
                            iArr2[i14][i12 - 1] = (i15 / i14);
                            i17 = (85 / iFld);
                        } catch (ArithmeticException a_e) {}
                        f2 += i18;
                        try {
                            i19 = (iArr2[i18 - 1][i12] / iFld);
                            iArr2[i14 + 1][i18] = (1589022799 % i15);
                            i15 = (iArr2[i14][(i13 >>> 1) % N] / i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 98:
                        i15 += i18;
                        Test.instanceCount += (long)dFld;
                    case 86:
                        i15 *= i14;
                        break;
                    case 82:
                        i19 += (i18 * i19);
                        Test.bFld = Test.bFld;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 74:
                        f2 += (i18 + Test.instanceCount);
                        break;
                    case 62:
                        i15 -= i13;
                        break;
                    case 60:
                        Test.instanceCount += (((i18 * i12) + Test.instanceCount) - i18);
                        by += (byte)Test.instanceCount;
                        if (Test.bFld) continue;
                        break;
                    case 91:
                        i15 = (int)Test.instanceCount;
                        break;
                    default:
                        iArr2[i12 + 1][i18] &= i14;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
