package tests.javafuzzer1225;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 16:43:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=730996859L;
    public static float fFld=83.36F;
    public static double dFld=29.83710;
    public static short sFld=18417;
    public boolean bFld=false;
    public int iFld=60979;
    public static boolean bArrFld[]=new boolean[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, long l1) {

        int i7=-136, i8=-61, i9=8, iArr[]=new int[N];
        float f1=-2.1010F;
        short s=19421;
        long l2=-6L, l3=32511L;
        byte by=59;

        FuzzerUtils.init(iArr, -14608);

        for (i7 = 5; i7 < 292; i7++) {
            f1 = 6;
            do {
                i6 >>>= s;
                try {
                    iArr[i7] = (i6 % iArr[(int)(f1 + 1)]);
                    i8 = (i6 % i6);
                    i8 = (-175 % i8);
                } catch (ArithmeticException a_e) {}
                i8 = (int)1.111F;
                l1 = l2;
                i6 *= (int)l1;
            } while (--f1 > 0);
        }
        for (l3 = 16; l3 < 306; ++l3) {
            i8 = by;
            l2 -= by;
            i9 >>= i9;
            i9 = i8;
            i8 *= (int)-3929269796000635038L;
            i6 += (int)(((l3 * i9) + f1) - i8);
            iArr[(int)(l3 + 1)] *= i9;
        }
        vMeth_check_sum += i6 + l1 + i7 + i8 + Float.floatToIntBits(f1) + s + l2 + l3 + i9 + by +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(float f, long l) {

        int i10=18910, i11=22, i12=-21866, i13=153, i14=4, i15=0, iArr1[]=new int[N];
        float f2=1.193F;
        boolean b1=true;

        FuzzerUtils.init(iArr1, -36230);

        vMeth(i10, l);
        for (i11 = 9; i11 < 381; i11++) {
            Test.instanceCount += Test.instanceCount;
            for (f2 = 1; f2 < 5; f2++) {
                i10 <<= (int)l;
                i12 += (int)(-14L + (f2 * f2));
                i13 -= i12;
                for (i14 = 1; i14 < 2; i14++) {
                    iArr1[(i12 >>> 1) % N] += (int)l;
                    i10 -= i13;
                    i15 >>= i11;
                    iArr1[i14 + 1] *= 24668;
                }
                Test.bArrFld[(int)(f2)] = b1;
            }
            i10 += 9;
            i15 += (i11 * i11);
        }
        long meth_res = Float.floatToIntBits(f) + l + i10 + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b, int i5) {

        byte by1=-46;
        float f3=25.754F;
        int i16=0, i17=62375, iArr2[]=new int[N];
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -67L);
        FuzzerUtils.init(iArr2, 9188);
        FuzzerUtils.init(dArr1, 2.27677);

        i5 >>= (int)((Test.fFld--) * (iMeth1(Test.fFld, 531366053245780549L) + i5));
        lArr[(i5 >>> 1) % N] -= i5;
        Test.dFld = -1.21139;
        Test.instanceCount = by1;
        f3 = 1;
        do {
            Test.fFld += Test.sFld;
            iArr2[(int)(f3)] = i5;
            i5 -= (int)-88.5109;
            dArr1[(40144 >>> 1) % N] = 7;
            for (i16 = 5; 1 < i16; --i16) {
                Test.fFld = Test.instanceCount;
                Test.instanceCount += i5;
                lArr[i16 - 1] += 59568;
                try {
                    iArr2[(int)(f3 + 1)] = (iArr2[(int)(f3)] / i5);
                    i5 = (-608245422 / i17);
                    i17 = (-14 / i5);
                } catch (ArithmeticException a_e) {}
                Test.sFld *= (short)Test.instanceCount;
            }
        } while (++f3 < 346);
        long meth_res = (b ? 1 : 0) + i5 + by1 + Float.floatToIntBits(f3) + i16 + i17 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-51, i1=-8, i2=93, i3=22111, i4=-131, i18=246, i19=-193, i20=61554, i21=-63;
        double d=-124.80515, d1=-69.42449, dArr[]=new double[N];
        byte by2=-61;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(dArr, 114.128524);
        FuzzerUtils.init(fArr, 37.34F);

        for (i = 12; i < 240; ++i) {
            for (d = 2; d < 110; ++d) {
                for (i3 = (int)(d); 2 > i3; i3++) {
                    dArr[(int)(d - 1)] = iMeth(bFld, i1);
                    fArr[i3 + 1][(int)(d + 1)] = i;
                    iArrFld[i - 1] -= (int)71L;
                    i4 = i3;
                    Test.instanceCount += i4;
                    i2 += (int)Test.instanceCount;
                    Test.dFld += Test.dFld;
                }
                i2 = i1;
                for (i18 = 1; i18 < 2; ++i18) {
                    switch ((int)((d % 4) + 63)) {
                    case 63:
                        iArrFld[(int)(d - 1)] |= by2;
                        break;
                    case 64:
                        i19 |= i18;
                        break;
                    case 65:
                        i19 >>= (int)Test.instanceCount;
                        fArr[(int)(d)][i18] = Test.instanceCount;
                        Test.instanceCount += (20504 + (i18 * i18));
                        break;
                    case 66:
                        iArrFld[i18] = i3;
                        break;
                    default:
                        Test.sFld += (short)Test.fFld;
                    }
                    iArrFld[i18] = -2;
                    Test.sFld = (short)Test.fFld;
                    Test.fFld += i4;
                }
                Test.instanceCount &= i;
                for (i20 = (int)(d); i20 < 2; i20++) {
                    try {
                        iArrFld[(int)(d + 1)] = (iArrFld[(int)(d - 1)] / -19140);
                        iArrFld[i] = (iArrFld[i - 1] % i);
                        iArrFld[(int)(d + 1)] = (i3 % i3);
                    } catch (ArithmeticException a_e) {}
                }
                i2 += i20;
                iFld = (int)Test.dFld;
                i1 = i2;
                d1 += -70;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
