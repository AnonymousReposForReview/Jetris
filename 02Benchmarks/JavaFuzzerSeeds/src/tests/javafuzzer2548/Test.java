package tests.javafuzzer2548;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:27:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static int iFld=10;
    public boolean bFld=true;
    public volatile short sFld=-15992;
    public static double dFld=122.85954;
    public static float fFld=39.275F;
    public static boolean bFld1=true;
    public static byte byFld=98;
    public short sArrFld[]=new short[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -54.854F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth1(int i6, float f, int i7) {

        int i8=-11, i9=56;

        Test.iFld = sFld;
        for (i8 = 9; 377 > i8; ++i8) {
            Test.instanceCount += (i8 | Test.iFld);
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f) + i7 + i8 + i9;
    }

    public static void vMeth2(int i10) {

        int i11=12301, i12=130, i13=4, i14=-206, iArr2[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 29191);
        FuzzerUtils.init(byArr, (byte)-88);

        Test.instanceCount += Test.iFld;
        for (i11 = 5; i11 < 182; ++i11) {
            if (Test.bFld1) {
                Test.iFld = i11;
                i12 = (int)-1.14040;
                i12 -= i10;
                if (i12 != 0) {
                    vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
            } else {
                i12 -= i11;
                iArr2[i11 + 1] = (int)Test.dFld;
                for (i13 = 1; i13 < 9; ++i13) {
                    iArr2[i11] = i10;
                    i12 *= i13;
                }
                Test.dFld *= i14;
            }
            iArr2 = FuzzerUtils.int1array(N, (int)6);
            byArr[(i10 >>> 1) % N] = (byte)134;
        }
        vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
    }

    public int iMeth(long l2, long l3, short s) {


        vMeth2(Test.iFld);
        Test.instanceCount = Test.byFld;
        Test.iFld *= Test.iFld;
        Test.iFld = Test.iFld;
        long meth_res = l2 + l3 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l) {

        int i1=24665, i2=-511, i3=-7, i4=-10740, i5=-8, iArr1[][]=new int[N][N];
        long l1=-2L;

        FuzzerUtils.init(iArr1, -206);

        for (i1 = 6; i1 < 325; i1++) {
            for (i3 = 1; i3 < 5; i3++) {
                for (l1 = 1; l1 < 2; l1++) {
                    i2 = (--iArr1[i1 - 1][i1]);
                    sArrFld[(int)(l1 + 1)] *= (short)(++Test.iFld);
                    try {
                        Test.iFld = (i2 % i2);
                        iArr1[i3 - 1][(int)(l1 - 1)] = (iArr1[(int)(l1)][(int)(l1 - 1)] % i4);
                        iArr1[i3 + 1][(int)(l1)] = (-20733 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    bFld = (bFld = (bFld & (i3 > Test.iFld)));
                    if (iMeth(l1, l, sFld) <= i3) {
                        vMeth1(i1, Math.abs((--iArr1[(int)(l1)][i1 + 1]) + -32206), Math.min(i5 -= (sFld + -6),
                            Integer.reverseBytes(i4++)));
                        iArr1[(int)(l1 - 1)][i3] -= (int)((long)((-(8810L - (Test.dFld++))) - (Test.instanceCount =
                            i2)) >>> i3);
                        iArr1[i1 - 1] = (iArr1[(int)(l1)] = (iArr1[(int)(l1 + 1)] = (iArr1[i3] = iArr1[(int)(l1 +
                            1)])));
                    } else if (bFld) {
                        i2 += (int)(((l1 * Test.fFld) + i4) - Test.fFld);
                    }
                    i4 += (int)l1;
                }
                Test.iFld = Test.byFld;
                Test.instanceCount *= -55211L;
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + l1 + i5 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-140, i15=35604, i16=-3, i17=-200, i18=46, i19=4028, i20=-14, iArr[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 220);
        FuzzerUtils.init(lArr, 6257362403480634762L);

        Test.iFld |= (int)Test.instanceCount;
        i = 1;
        while (++i < 185) {
            iArr[i - 1][i] *= (--Test.iFld);
            vMeth(Test.instanceCount);
            for (i15 = i; i15 < 136; i15++) {
                iArr[i15] = iArr[i15 - 1];
            }
            for (i17 = 8; i17 < 136; i17++) {
                long l4=50L;
                Test.iFld += (int)(3L + (i17 * i17));
                iArr[i - 1][i17] -= 0;
                Test.iFld |= sFld;
                iArr[i17 - 1][i - 1] -= Test.iFld;
                Test.iFld = (int)l4;
                Test.fFld += Test.fFld;
                lArr = lArr;
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.iFld += (i19 * i19);
                    Test.fArrFld[i19 - 1] -= Test.iFld;
                    i16 += i19;
                    iArr[i][i + 1] = 7;
                    if (Test.bFld1) {
                        Test.instanceCount = Test.iFld;
                        i20 += (int)Test.dFld;
                        sArrFld[i17 + 1] -= (short)l4;
                    }
                    sArrFld[i17 - 1] *= (short)i20;
                    Test.dFld = sFld;
                    i16 -= i20;
                    iArr[i17 + 1][i17 - 1] = (int)110.104097;
                    sFld = (short)Test.instanceCount;
                }
            }
            lArr[i + 1] ^= i19;
            sFld = (short)i;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
