package tests.javafuzzer2292;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 11:34:44 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2400398334L;
    public static double dFld=106.114506;
    public static boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, long l, long l1) {

        int i5=18485, i6=6721, i7=-9903, i8=-63815, i9=-2, i10=11, i11=51972, i12=-4, iArr1[]=new int[N];
        float f1=98.958F;
        short s=-18044;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1223367147L);
        FuzzerUtils.init(iArr1, 53441);

        i4 >>>= 14;
        for (i5 = 4; i5 < 335; ++i5) {
            for (i7 = 1; i7 < 5; ++i7) {
                f1 += i7;
                lArr[i5 + 1] = i5;
                for (i9 = i7; 2 > i9; i9++) {
                    iArr1[i5 + 1] = (int)l;
                }
                i6 ^= i7;
                iArr1[i7 + 1] >>= i10;
                Test.instanceCount ^= s;
                Test.instanceCount += i7;
                i10 = s;
                for (i11 = 1; 2 > i11; i11 += 2) {
                    i12 >>>= i7;
                    if (b) continue;
                }
            }
        }
        long meth_res = i4 + l + l1 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + s + i11 + i12 + (b ? 1
            : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        int i3=15879, i13=5, i14=21710, i15=-2, i16=-46748, iArr[]=new int[N];
        double d=70.75212;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -31823);
        FuzzerUtils.init(lArr1, 3807340L);

        i3 = 1;
        while (++i3 < 130) {
            float f=-2.632F;
            byte by=-15;
            d += ((f * Math.abs(Test.instanceCount)) + Test.instanceCount);
            iArr[i3 - 1] += (((i3 + i2) + (i2 << i2)) / (iMeth1(i2, Test.instanceCount, Test.instanceCount) | 1));
            try {
                i2 = (i3 / i3);
                iArr[i3] = (iArr[i3 - 1] % 31615);
                i2 = (iArr[i3 - 1] % -326823838);
            } catch (ArithmeticException a_e) {}
            i2 += i3;
            by += (byte)9394L;
            for (i13 = 1; i13 < 12; ++i13) {
                if (b1) {
                    for (i15 = i3; i15 < 2; i15++) {
                        iArr[i13 - 1] >>= i13;
                        i2 = i13;
                        f = i2;
                    }
                } else if (b1) {
                    if (b1) {
                        lArr1[i3] -= -4050L;
                        b1 = b1;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i17=7245, i18=-24138;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -12.28F);

        Test.instanceCount /= (iMeth(i17) | 1);
        i18 = 1;
        do {
            fArr[i18 - 1][i18] -= -7;
        } while (++i18 < 281);
        vMeth_check_sum += i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=62292, i1=26684, i20=13, i21=-18263, i22=47617, i23=23842, i24=2, iArr2[]=new int[N];
        short s1=-21285;
        float f2=-60.332F;
        double dArr[]=new double[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 5);
        FuzzerUtils.init(dArr, -14.88321);
        FuzzerUtils.init(lArr2, 3126487391L);

        for (i = 2; i < 236; i++) {
            vMeth();
            if (false) {
                i1 = i1;
                i1 >>>= i;
                Test.dFld -= s1;
                if (Test.bFld) {
                    iArr2[i] -= (int)f2;
                } else {
                    dArr = dArr;
                    Test.instanceCount = i1;
                    for (i20 = i; i20 < 107; i20++) {
                        i21 *= i20;
                        i22 *= i20;
                        f2 += (i20 * i20);
                        for (i23 = 1; i23 > i; i23--) {
                            i22 -= -59481;
                            f2 += i24;
                            i21 += (i23 * i23);
                            i21 = i22;
                            i22 = i23;
                            Test.instanceCount += (long)(-2.725F + (i23 * i23));
                        }
                        lArr2[i + 1] = Test.instanceCount;
                        i21 += i20;
                        Test.dFld = i;
                        f2 -= i1;
                        iArr2[i20] &= (int)Test.instanceCount;
                        i24 += (((i20 * i) + f2) - s1);
                    }
                }
            } else if (Test.bFld) {
                i22 = (int)Test.instanceCount;
                i1 = i21;
                i22 = (int)Test.instanceCount;
            } else {
                i1 = i21;
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
