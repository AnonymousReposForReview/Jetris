package tests.javafuzzer2463;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 15:01:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1267459036688351777L;
    public static byte byFld=68;
    public static double dFld=-1.125742;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile byte byArrFld[][]=new byte[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 16483);
        FuzzerUtils.init(Test.byArrFld, (byte)-76);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth(int i1) {


        Test.instanceCount = (((Test.byFld - i1) + i1) % (i1 | 1));
        vMeth_check_sum += i1;
    }

    public static long lMeth(int i5, int i6) {

        int i7=-41634, i8=-6, i9=-184, i10=65, i11=-11, i12=-44;
        float f2=-64.212F;

        for (i7 = 19; i7 < 372; i7++) {
            Test.iArrFld[i7 - 1] = (int)Test.instanceCount;
            i6 <<= (int)Test.instanceCount;
            Test.byArrFld[i7][i7 + 1] <<= (byte)Test.instanceCount;
            if (i7 != 0) {
            }
            i6 += (i7 ^ (long)f2);
            i6 += (((i7 * i8) + i6) - i6);
        }
        for (i9 = 344; i9 > 7; i9--) {
            for (i11 = 1; i11 < 5; ++i11) {
                i6 += i11;
                Test.iArrFld[i11] *= 2;
                i10 = i10;
                Test.instanceCount = i10;
                f2 += (i11 * i9);
                i12 = -10;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f1, long l, boolean b) {

        int i2=-4, i3=-52057, i4=203, i13=13420, i14=14, i15=9, i16=-244;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        i2 = (int)Test.instanceCount;
        i2 = (int)((i2 *= -17597) % (((long)(Test.iArrFld[(i2 >>> 1) % N] /= (int)((long)(Test.dFld) | 1))) | 1));
        Test.instanceCount += (-l);
        for (i3 = 149; i3 > 9; i3--) {
            if (b) {
                bArr[i3 + 1] = b;
                i4 = (int)lMeth(i2, -253);
                i2 = (int)l;
                i4 += (int)(-1.219F + (i3 * i3));
            } else if (b) {
                for (i13 = 1; i13 < 11; i13++) {
                    Test.byFld = (byte)f1;
                }
                if (b) {
                    for (i15 = i3; i15 < 11; ++i15) {
                        i2 = i16;
                        try {
                            i16 = (i2 / 1305266763);
                            i2 = (Test.iArrFld[i3 + 1] % -27866);
                            i16 = (Test.iArrFld[(i2 >>> 1) % N] / 27839);
                        } catch (ArithmeticException a_e) {}
                    }
                } else {
                    f1 %= (l | 1);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + (b ? 1 : 0) + i2 + i3 + i4 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, float f) {


        Test.instanceCount -= i;
        vMeth(iMeth(f, Test.instanceCount, Test.bFld) + -62);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        float f3=0.931F;
        int i17=0, i18=1, i19=-64654, i20=-100, i21=12568, i22=-36, i23=2352, i24=13;
        short s=25016;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -13L);

        for (int smallinvoc=0; smallinvoc<775; smallinvoc++) vSmallMeth(11, f3);
        if (true) {
            for (i17 = 13; 371 > i17; ++i17) {
                fArrFld[i17] -= i17;
                for (i19 = i17; i19 < 70; i19++) {
                    i20 = 35;
                    i20 = i17;
                    for (i21 = 1; i21 < 1; i21++) {
                        f3 *= 2349;
                    }
                    for (i23 = 1; i23 < 1; i23++) {
                        Test.byArrFld[i17 + 1][i19] &= (byte)i18;
                        Test.instanceCount += i18;
                        lArr[i17 - 1] += i21;
                        switch ((i17 % 8) + 122) {
                        case 122:
                        case 123:
                            Test.byFld <<= (byte)i21;
                            break;
                        case 124:
                            switch ((i17 % 10) + 75) {
                            case 75:
                                Test.iArrFld = Test.iArrFld;
                                break;
                            case 76:
                                f3 += i22;
                                if (Test.bFld) break;
                                i20 = (int)Test.instanceCount;
                                break;
                            case 77:
                                i18 *= i17;
                                i22 -= i17;
                                break;
                            case 78:
                                Test.iArrFld[i17] -= i18;
                                fArrFld[i19 + 1] *= i19;
                                i22 = i24;
                            case 79:
                                i18 += Test.byFld;
                                i24 += (int)-141666856L;
                                Test.iArrFld[i19 + 1] <<= (int)Test.instanceCount;
                                break;
                            case 80:
                                i24 = i17;
                                i18 -= i22;
                                break;
                            case 81:
                                i22 = 2080;
                            case 82:
                                Test.byFld = (byte)i20;
                                break;
                            case 83:
                            case 84:
                                Test.iArrFld[i19 + 1] += i19;
                                break;
                            default:
                                Test.instanceCount = i18;
                            }
                            break;
                        case 125:
                            i20 &= i24;
                            break;
                        case 126:
                            i20 = i20;
                        case 127:
                            i24 = (int)Test.instanceCount;
                            break;
                        case 128:
                            Test.byFld -= (byte)s;
                            break;
                        case 129:
                            s = (short)i22;
                        default:
                            lArr[i17 - 1] -= i18;
                        }
                    }
                }
            }
        } else {
            lArr[(i21 >>> 1) % N] -= Test.instanceCount;
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
