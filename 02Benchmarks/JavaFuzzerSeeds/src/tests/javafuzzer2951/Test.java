package tests.javafuzzer2951;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 23:41:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static int iFld=0;
    public static float fFld=65.700F;
    public double dFld=-24.40879;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 63246);
        FuzzerUtils.init(Test.lArrFld1, -2017446741L);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3, long l1) {

        int i4=217, i5=6, i6=-144, i7=195;
        double d2=34.28207;
        short s=16995;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1996122885L);

        i3 += Test.iFld;
        for (i4 = 396; i4 > 17; i4--) {
            i6 = 1;
            do {
                i7 = 1;
                do {
                    byte by=8;
                    Test.fFld += (-5 + (i7 * i7));
                    by -= (byte)d2;
                    Test.instanceCount += Test.iFld;
                    s <<= (short)-112;
                    switch ((i7 % 4) + 46) {
                    case 46:
                        if (b1) break;
                        l1 >>= i7;
                        break;
                    case 47:
                    case 48:
                        lArr[i4] <<= i7;
                        i5 += i6;
                        Test.instanceCount = (long)Test.fFld;
                        i3 += Test.iFld;
                        break;
                    case 49:
                        Test.iFld = (int)d2;
                        break;
                    }
                } while (++i7 < 1);
            } while (++i6 < 4);
        }
        long meth_res = i3 + l1 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2) + s + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(double d1, int i2, long l) {


        i2 >>= (int)(Test.iArrFld[(i2 >>> 1) % N] - ((Test.instanceCount * i2) - (-iMeth(i2, l))));
        long meth_res = Double.doubleToLongBits(d1) + i2 + l;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(double d) {

        int i8=1, i9=-24, i10=-2, i11=-49557, i12=14;
        float f1=0.157F;
        byte by1=101;

        byMeth(d, Test.iFld, Test.instanceCount);
        Test.iFld = Test.iFld;
        Test.iFld -= Test.iFld;
        Test.iFld = 26377;
        for (i8 = 1; i8 < 193; i8++) {
            for (f1 = 1; f1 < 8; ++f1) {
                Test.instanceCount = i9;
                Test.iArrFld[i8 + 1] += by1;
                for (i11 = 1; i11 < 2; i11++) {
                    Test.fFld = i8;
                    Test.instanceCount += i11;
                    i10 = i11;
                    i12 = i10;
                    i12 = i9;
                    i10 = i9;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f1) + i10 + by1 + i11 + i12;
    }

    public void mainTest(String[] strArr1) {

        float f=1.654F, f2=12.315F;
        int i=-3867, i1=-8, i13=13, i14=205, i15=-2;
        boolean b=false;
        double d4=-70.42162;

        f = 1;
        do {
            Test.iFld ^= (--Test.iFld);
            switch ((int)(((f % 8) * 5) + 27)) {
            case 38:
                i = 190;
                while ((i -= 3) > 0) {
                    i1 = 1;
                    do {
                        double d3=2.116862;
                        b = (-24387 != ((f * -43362) + i1));
                        vMeth(d3);
                    } while (++i1 < 3);
                    Test.iFld += -29619;
                    for (i13 = 3; i13 > 1; i13 -= 2) {
                        i14 = i;
                        Test.iFld += i1;
                        Test.iFld -= (int)-11.816F;
                        Test.iFld += (i13 * i1);
                        Test.fFld += (((i13 * i1) + i) - i1);
                        Test.iFld += (int)2424254021L;
                        lArrFld[(i1 >>> 1) % N] <<= 1269555124L;
                    }
                    Test.iFld = i13;
                    i14 += -113;
                    dFld = Test.instanceCount;
                }
                for (d4 = 190; d4 > f; d4--) {
                    Test.iFld -= i;
                    b = b;
                    Test.iFld >>= -16563;
                    Test.fFld -= Test.iFld;
                }
                break;
            case 31:
                f2 = 1;
                while (++f2 < 190) {
                    Test.lArrFld1[(int)(f + 1)] += (long)1.869F;
                    Test.iArrFld[(int)(f2 - 1)] += i14;
                    i14 >>>= i15;
                    i15 = -65;
                    Test.iFld <<= i1;
                }
                break;
            case 54:
                Test.iArrFld[(int)(f)] = (int)Test.instanceCount;
                break;
            case 36:
            case 33:
                Test.iArrFld[(int)(f - 1)] <<= Test.iFld;
                break;
            case 29:
                Test.fFld -= (float)-1.116156;
                break;
            case 55:
                i14 -= i1;
                break;
            case 62:
                i14 += (int)f;
                break;
            }
        } while (++f < 132);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
