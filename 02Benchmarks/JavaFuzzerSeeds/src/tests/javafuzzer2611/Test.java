package tests.javafuzzer2611;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 17:25:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2005040013L;
    public double dFld=-2.75039;
    public static int iFld=14929;
    public static boolean bFld=true;
    public volatile short sFld=-154;
    public float fFld=-49.791F;
    public byte byFld=-3;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.220F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, long l1) {

        int i4=-196, i5=14, i6=7, i7=-90, i8=51631, iArr1[]=new int[N];
        float f1=2.916F;
        double d=1.27094;
        byte by=71;

        FuzzerUtils.init(iArr1, -5);

        i4 = 1;
        while (++i4 < 385) {
            i3 = i3;
            Test.fArrFld = Test.fArrFld;
            for (i5 = 1; 4 > i5; i5++) {
                f1 += i6;
                for (i7 = 2; 1 < i7; i7 -= 2) {
                    i3 = (int)-7.111808;
                    i8 -= 182;
                    i8 = (int)-4339L;
                    iArr1[i5 + 1] = (int)d;
                    l1 += l1;
                    Test.iFld += (((i7 * i7) + i3) - i7);
                    l1 -= i8;
                }
                by = (byte)96.259F;
                Test.iFld |= i7;
            }
        }
        vMeth2_check_sum += i3 + l1 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d) +
            by + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i9=-52867, i10=-1, i11=205, i12=1, i13=-115;
        float f2=-33.122F;

        vMeth2(-4, 5429420525082294017L);
        i9 = 1;
        while (++i9 < 304) {
            f2 += (((i9 * Test.instanceCount) + Test.instanceCount) - i9);
            for (i10 = i9; i10 < 5; ++i10) {
                for (i12 = 1; i12 > 1; i12 -= 3) {
                    Test.instanceCount *= 1;
                    if (Test.bFld) break;
                    if (Test.bFld) break;
                    Test.iFld += (i12 * f2);
                    if (Test.bFld) continue;
                    i13 >>= (int)Test.instanceCount;
                }
                if (Test.bFld) continue;
                i11 = (int)f2;
                Test.iFld += (i10 * i10);
                Test.iFld = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13;
    }

    public void vMeth(long l, int i) {

        int i1=-142, i2=27, i14=-11, i15=-11, i16=-129, i17=-6, i19=63965, iArr[]=new int[N];
        float f=-94.354F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(lArr, -11967L);

        Test.instanceCount = (i -= Integer.reverseBytes((int)(2 * (167 * (dFld--)))));
        for (i1 = 5; 377 > i1; i1++) {
            switch (((i1 % 8) * 5) + 94) {
            case 134:
                l += i1;
                l >>= Test.instanceCount;
                i = i;
                i2 = Integer.reverseBytes((int)(f + i1));
            case 112:
                iArr[i1 - 1] += (--i);
                lArr = (lArr = lArr);
                break;
            case 110:
                vMeth1();
                break;
            case 129:
                for (i14 = 1; i14 < 5; i14++) {
                    for (i16 = 1; i16 < 2; i16++) {
                        int i18=11;
                        if (false) break;
                        f += i16;
                        i18 = (int)f;
                    }
                }
            case 125:
                i2 += (((i1 * i) + l) - sFld);
                break;
            case 114:
                Test.iFld = i19;
            case 116:
                i19 += (int)l;
                break;
            case 127:
            default:
                dFld = i16;
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i19 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=68, i21=14, i22=-14, i23=-6, i24=26298, i25=-2, i26=7, iArr2[][]=new int[N][N];
        float f3=-80.196F;

        FuzzerUtils.init(iArr2, 222);

        vMeth(Test.instanceCount, Test.iFld);
        for (i20 = 7; i20 < 317; ++i20) {
            i22 = 1;
            while (++i22 < 81) {
                i21 += i21;
                Test.iFld = (int)Test.instanceCount;
                for (i23 = 1; i23 < 1; i23++) {
                    i21 += (i23 * i23);
                    Test.bFld = true;
                    Test.iFld += i23;
                    sFld -= (short)1147452519L;
                    iArr2[i20][i23] = (int)Test.instanceCount;
                    Test.instanceCount += i23;
                    i21 += i23;
                    Test.instanceCount += Test.instanceCount;
                    i24 += (((i23 * Test.instanceCount) + sFld) - i23);
                    Test.bFld = false;
                }
                if (Test.bFld) break;
                i21 += (((i22 * i21) + i22) - fFld);
                switch ((((i24 >>> 1) % 6) * 5) + 7) {
                case 11:
                    i24 = i24;
                    i24 >>= -11757;
                    break;
                case 26:
                    switch ((i20 % 4) + 59) {
                    case 59:
                        dFld += i21;
                        Test.instanceCount += sFld;
                        for (i25 = 1; i25 < 1; ++i25) {
                            i21 += i25;
                            fFld += i25;
                            try {
                                iArr2[i25][i22 + 1] = (i25 / iArr2[i25 - 1][i22 + 1]);
                                Test.iFld = (i22 / iArr2[i22 - 1][i25]);
                                i21 = (i25 / i25);
                            } catch (ArithmeticException a_e) {}
                            i26 *= (int)Test.instanceCount;
                            Test.bFld = Test.bFld;
                        }
                        break;
                    case 60:
                        i24 += (((i22 * i22) + f3) - i23);
                        break;
                    case 61:
                    case 62:
                        Test.iFld *= Test.iFld;
                        break;
                    }
                    break;
                case 36:
                    i24 += (((i22 * Test.instanceCount) + i26) - i24);
                    break;
                case 34:
                    if (Test.bFld) continue;
                    break;
                case 37:
                    i21 += (((i22 * Test.iFld) + i26) - byFld);
                    break;
                case 35:
                    dFld += 2;
                default:
                    iArr2[i22 - 1][i20 + 1] -= (int)Test.instanceCount;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
