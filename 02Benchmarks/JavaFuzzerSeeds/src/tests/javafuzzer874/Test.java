package tests.javafuzzer874;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:07:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5816556218486840723L;
    public static double dFld=-2.72415;
    public int iFld=-193;
    public static boolean bFld=false;
    public float fFld=-96.155F;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, long l2) {

        int i5=-165, i6=9, i7=-6, i8=39422, i9=-10, i10=-31876, i11=225, i12=-61, i13=92, iArr[]=new int[N];
        boolean b=true;
        float f=126.355F;

        FuzzerUtils.init(iArr, -58528);

        i4 >>>= i4;
        for (i5 = 7; 217 > i5; i5++) {
            for (i7 = 1; i7 < 8; i7++) {
                l2 += l2;
                for (i9 = 1; 2 > i9; ++i9) {
                    if (b) {
                        b = false;
                    }
                    i10 <<= (int)Test.instanceCount;
                    l2 >>= i8;
                }
                b = b;
                for (i11 = 1; i11 < 2; i11++) {
                    i12 += i4;
                }
                i13 = 1;
                do {
                    f -= f;
                    iArr = iArr;
                } while (++i13 < 2);
            }
        }
        vMeth1_check_sum += i4 + l2 + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + i13 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l1, int i2, int i3) {

        int i14=-48997, i15=1, i16=-12, i17=38422, iArr1[]=new int[N];
        float f1=-1.817F, fArr[]=new float[N];
        double d=3.21347;
        long l3=-18810L, lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -2);
        FuzzerUtils.init(fArr, -78.525F);
        FuzzerUtils.init(lArr1, 51701L);

        vMeth1(i3, l1);
        iArr1[(i14 >>> 1) % N] *= (int)Test.instanceCount;
        f1 -= l1;
        iArr1[(i14 >>> 1) % N] += i14;
        fArr[(i2 >>> 1) % N] = i14;
        for (i15 = 203; i15 > 10; i15--) {
            i14 -= i2;
            d += i14;
            d *= i14;
        }
        i17 = 1;
        do {
            l3 = 1;
            while (++l3 < 21) {
                iArr1[i17] -= (int)d;
                i16 &= (int)l1;
                iArr1 = iArr1;
                lArr1[i17][(int)(l3 - 1)] >>= i3;
            }
        } while ((i17 += 2) < 149);
        long meth_res = l1 + i2 + i3 + i14 + Float.floatToIntBits(f1) + i15 + i16 + Double.doubleToLongBits(d) + i17 +
            l3 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, long l) {

        float f2=-45.472F, f3=-2.1019F;
        int i18=7, i19=-18485, i20=64176, i21=-19796, i22=232, iArr2[]=new int[N];
        byte by=124;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(iArr2, -241);

        lArr[(i1 >>> 1) % N] <<= iMeth(l, i1, i);
        Test.dFld -= 212;
        for (f2 = 7; f2 < 254; ++f2) {
            for (i19 = 1; i19 < 7; ++i19) {
                iArr2[(int)(f2)] -= (int)-30989L;
                l = i18;
                f3 += (-114L + (i19 * i19));
                Test.dFld *= i18;
                if (i != 0) {
                    vMeth_check_sum += i + i1 + l + Float.floatToIntBits(f2) + i18 + i19 + i20 +
                        Float.floatToIntBits(f3) + by + i21 + i22 + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(iArr2);
                    return;
                }
                Test.dFld = i;
            }
            if (i != 0) {
                vMeth_check_sum += i + i1 + l + Float.floatToIntBits(f2) + i18 + i19 + i20 + Float.floatToIntBits(f3) +
                    by + i21 + i22 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
                return;
            }
            i18 += (int)(((f2 * by) + Test.instanceCount) - i1);
            for (i21 = 1; 7 > i21; ++i21) {
                i22 <<= 13956;
            }
            iArr2[(int)(f2 - 1)] ^= (int)l;
        }
        vMeth_check_sum += i + i1 + l + Float.floatToIntBits(f2) + i18 + i19 + i20 + Float.floatToIntBits(f3) + by +
            i21 + i22 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f4=0.194F;
        int i23=-8, i24=-216, i25=-60, i26=-40, i27=-48119, i28=12, i29=-4, i30=-97, i31=-32;
        byte by1=-93;
        short s=-31442;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -112L);

        if (Test.bFld) {
            vMeth(iFld, iFld, Test.instanceCount);
            Test.instanceCount = iFld;
        } else {
            for (f4 = 6; f4 < 314; ++f4) {
                iFld += (58766 + (f4 * f4));
                for (i24 = (int)(f4); i24 < 82; i24++) {
                    i23 <<= -53957;
                    by1 = (byte)i24;
                    for (i26 = 1; 1 > i26; ++i26) {
                        i27 = (int)-13063L;
                        Test.dFld += i27;
                    }
                    for (i28 = 1; i28 < 1; i28++) {
                        Test.instanceCount += (i28 * i28);
                        Test.instanceCount = Test.instanceCount;
                        i25 -= (int)Test.instanceCount;
                        s += (short)(((i28 * i25) + i28) - iFld);
                        if (Test.bFld) continue;
                        iFld += (-104 + (i28 * i28));
                        i23 *= (int)Test.instanceCount;
                        Test.instanceCount += (i28 - Test.instanceCount);
                        i29 |= i23;
                    }
                }
                i25 += (int)f4;
                i27 = (int)Test.instanceCount;
                for (i30 = 4; i30 < 82; ++i30) {
                    lArr2 = lArr2;
                    switch (((i30 % 4) * 5) + 18) {
                    case 29:
                        i31 *= (int)f4;
                        if (Test.bFld) break;
                        i25 &= i30;
                        break;
                    case 19:
                        Test.bFld = true;
                        break;
                    case 32:
                        Test.instanceCount += (((i30 * Test.instanceCount) + i24) - i30);
                        break;
                    case 27:
                        i31 += (i30 * i28);
                        break;
                    default:
                        fFld += (i30 * i30);
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
