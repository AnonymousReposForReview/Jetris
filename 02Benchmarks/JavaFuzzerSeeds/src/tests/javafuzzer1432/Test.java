package tests.javafuzzer1432;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:24:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static double dFld=51.76603;
    public short sFld=7753;
    public static boolean bFld=false;
    public static float fFld=1.369F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -20565);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, double d) {

        int i2=-35, i3=-149, i5=0, i6=55, i7=0, i8=51470, i9=3370, i10=5;
        double d1=-11.5804;

        for (i2 = 208; i2 > 5; i2--) {
            boolean b1=false;
            if (b1) break;
        }
        i3 = i3;
        for (i5 = 9; 264 > i5; i5++) {
            f = Test.instanceCount;
            i6 = i5;
            Test.instanceCount += (((i5 * Test.instanceCount) + i5) - i2);
            for (i7 = 1; i7 < 6; i7++) {
                switch ((i7 % 7) + 43) {
                case 43:
                    for (d1 = i7; 2 > d1; ++d1) {
                        short s=9728;
                        Test.instanceCount >>= s;
                        i3 *= i6;
                        f *= Test.instanceCount;
                        i10 -= i9;
                        i3 ^= i7;
                    }
                    break;
                case 44:
                case 45:
                    d += 241;
                    break;
                case 46:
                    d = i2;
                    break;
                case 47:
                    i3 -= (int)f;
                    break;
                case 48:
                    Test.instanceCount = i8;
                    break;
                case 49:
                    f -= i6;
                    break;
                default:
                    i6 >>>= i5;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + i3 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d1) + i9 + i10;
    }

    public static boolean bMeth() {

        int i=-38668, i1=214, i11=-40396, i12=0, i13=10, i14=210, i15=4;
        float f1=24.915F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4519814499227461159L);

        for (i = 16; i < 360; i++) {
            vMeth1(f1, Test.dFld);
            f1 += i;
            for (i11 = 1; 5 > i11; i11++) {
                i12 = i1;
                i12 *= (int)Test.dFld;
                i13 = 1;
                while (++i13 < 2) {
                    lArr[i] = i12;
                    i1 = i13;
                    i12 += (i13 * i13);
                }
            }
            Test.iArrFld[i - 1] = i11;
            lArr[i] += i12;
            for (i14 = 1; i14 < 5; i14++) {
                i12 = (int)Test.instanceCount;
                Test.iArrFld[i + 1] -= -37;
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        boolean b=false;
        int i16=-13, i17=108, i18=-208, i19=-237, i20=-4, i21=214, i22=-4;
        byte by=-109;

        b = bMeth();
        i16 = 24;
        Test.iArrFld[(i16 >>> 1) % N] = by;
        for (i17 = 8; i17 < 171; i17++) {
            i18 *= (int)Test.instanceCount;
            i16 = i16;
            i19 = 1;
            do {
                i16 <<= (int)Test.instanceCount;
                Test.instanceCount -= i17;
                i20 += (((i19 * i17) + Test.instanceCount) - i19);
                i20 = (int)Test.instanceCount;
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.iArrFld[i19] += -4;
                    i20 *= i19;
                    b = b;
                }
            } while (++i19 < 10);
        }
        vMeth_check_sum += (b ? 1 : 0) + i16 + by + i17 + i18 + i19 + i20 + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        int i23=-18313, i24=-10, i25=-89, i26=-27584, i27=116, i28=190, i29=140, i30=25680;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 239L);

        vMeth();
        for (i23 = 1; i23 < 351; i23++) {
            sFld *= (short)i23;
            for (i25 = 3; i25 < 72; i25++) {
                lArr1[i25 - 1][i23 + 1] = i26;
            }
            i26 += 98;
            if (Test.bFld) {
                Test.instanceCount ^= i25;
                Test.instanceCount *= (long)Test.dFld;
                for (i27 = 3; 72 > i27; i27++) {
                    Test.instanceCount = 27070;
                    for (i29 = 1; i29 < 2; i29++) {
                        switch ((i27 % 8) + 111) {
                        case 111:
                            if (false) continue;
                            switch ((i27 % 5) + 59) {
                            case 59:
                                i26 += (((i29 * i28) + i26) - i23);
                                i26 = i27;
                                Test.instanceCount += (i29 * i29);
                                break;
                            case 60:
                                try {
                                    i26 = (Test.iArrFld[i27] / -222);
                                    i26 = (i23 / -9);
                                    i24 = (-45999 / i30);
                                } catch (ArithmeticException a_e) {}
                                Test.dFld = i26;
                                break;
                            case 61:
                                i28 += i29;
                                break;
                            case 62:
                                try {
                                    i24 = (-58143 % Test.iArrFld[i29 - 1]);
                                    i28 = (-10724 % i23);
                                    i26 = (i26 % 1370402144);
                                } catch (ArithmeticException a_e) {}
                                Test.instanceCount += (((i29 * i26) + i26) - i27);
                                if (Test.bFld) break;
                                Test.iArrFld[i29 - 1] -= i25;
                                break;
                            case 63:
                                i26 *= (int)Test.fFld;
                                i28 <<= (int)Test.instanceCount;
                                break;
                            }
                            break;
                        case 112:
                            i30 -= i24;
                            break;
                        case 113:
                            i26 += i30;
                        case 114:
                            i28 *= i25;
                        case 115:
                            i26 = i25;
                            break;
                        case 116:
                            Test.fFld = Test.instanceCount;
                            break;
                        case 117:
                            i24 += sFld;
                            break;
                        case 118:
                            sFld += (short)i29;
                        }
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
