package tests.javafuzzer336;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:06:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11220L;
    public volatile double dFld=-72.100703;
    public static volatile short sFld=15916;
    public boolean bFld=false;
    public byte byFld=89;
    public static volatile long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -110L);
        FuzzerUtils.init(Test.dArrFld, 0.39836);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth(int i3, boolean b, int i4) {


        i3 = (++i4);
        vMeth_check_sum += i3 + (b ? 1 : 0) + i4;
    }

    public static void vMeth2(int i8) {

        int i9=-37162;

        Test.lArrFld[(37309 >>> 1) % N] -= -8L;
        i8 = i9;
        vMeth2_check_sum += i8 + i9;
    }

    public static void vMeth1(int i5) {

        int i6=-41236, i7=5, i10=-12, i11=-45002, i12=-4, i13=-105, iArr[]=new int[N];
        byte by=-112;
        short s=5802;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -127);
        FuzzerUtils.init(fArr, 39.283F);

        for (i6 = 4; i6 < 272; ++i6) {
            try {
                iArr[i6 + 1] = (i5 / 124);
                i5 = (i7 % i7);
                i7 = (iArr[i6 + 1] / iArr[i6 - 1]);
            } catch (ArithmeticException a_e) {}
            vMeth2(i5);
            fArr[i6 + 1] = by;
            for (i10 = 1; i10 < 6; i10++) {
                switch ((i10 % 1) + 58) {
                case 58:
                    i11 += 48792;
                    s += (short)(((i10 * Test.instanceCount) + i10) - i10);
                    i7 = -98;
                    break;
                default:
                    iArr[i6] = 46;
                    for (i12 = i10; i12 < 2; i12++) {
                        i5 += i7;
                        fArr = fArr;
                        i5 = i6;
                        i5 >>= (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + by + i10 + i11 + s + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static boolean bMeth() {

        int i14=13547, i15=9905, i16=-14, i17=10, i18=81;
        float f=-2.415F;
        short s1=-12413;
        boolean b1=false;

        vMeth1(i14);
        for (i15 = 2; i15 < 265; ++i15) {
            i16 = i16;
            i16 += (((i15 * f) + s1) - i14);
            if (b1) {
                for (i17 = 6; 1 < i17; i17--) {
                    i14 = i14;
                    i16 += (-101 + (i17 * i17));
                    i16 = i18;
                    i16 >>>= i17;
                    i16 -= -62;
                    Test.dArrFld[i17] = i14;
                }
                Test.instanceCount -= s1;
                s1 = (short)-14;
                f = -4332856828960759754L;
            }
        }
        long meth_res = i14 + i15 + i16 + Float.floatToIntBits(f) + s1 + i17 + i18 + (b1 ? 1 : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=33471, i1=-7, i2=-53, i19=-58036, i20=3, i21=-1, i22=187, i23=34843;
        float f1=6.589F;
        double d=-116.67262;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i = 21; i < 382; i++) {
            i2 = 1;
            do {
                vMeth(-Integer.reverseBytes((int)(dFld - i2)), bMeth(), i);
            } while (++i2 < 70);
            iArrFld[i + 1] = Test.sFld;
            for (f1 = 3; f1 < 70; f1++) {
                if (bFld) {
                    Test.instanceCount += (long)(f1 * f1);
                    Test.instanceCount = (long)f1;
                    for (d = 1; d < 2; d++) {
                        i1 += (int)131L;
                        i1 = i20;
                        dFld -= i19;
                        i19 -= i20;
                        i20 %= -23333;
                    }
                } else if (bFld) {
                    for (i21 = 2; i21 > f1; --i21) {
                        Test.instanceCount += i21;
                        i22 <<= (int)Test.instanceCount;
                        i1 += (i21 * i21);
                        bArr[i] = bFld;
                        Test.instanceCount = 19615;
                        byFld += (byte)i22;
                    }
                    Test.instanceCount *= i;
                    i23 = 1;
                    while (++i23 < 2) {
                        Test.instanceCount -= (long)dFld;
                        bFld = bFld;
                        i20 = byFld;
                    }
                    i20 = i;
                }
                i22 += i20;
                if (bFld) continue;
                i22 *= -20290;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
