package tests.javafuzzer557;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:42:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public volatile short sFld=17864;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11634);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=-13295, i9=-222, i11=-45077, i12=99, iArr[]=new int[N];
        double d1=-127.29153;
        float f=21.924F;
        byte by=107;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -194L);
        FuzzerUtils.init(iArr, -102);

        i8 = (int)Test.instanceCount;
        for (d1 = 7; d1 < 144; d1++) {
            i8 = (int)Test.instanceCount;
            i8 *= (int)Test.instanceCount;
            Test.instanceCount -= (long)f;
            lArr1[(int)(d1 - 1)] >>= i8;
        }
        i9 += i8;
        try {
            for (int i10 : iArr) {
                for (i11 = 1; i11 < 4; ++i11) {
                    Test.instanceCount += (long)d1;
                }
                Test.instanceCount = -326171275329261349L;
            }
            i9 = 249;
            f -= -27532;
            Test.instanceCount &= by;
        }
        catch (NullPointerException exc1) {
            iArr[(i11 >>> 1) % N] *= i11;
        }
        vMeth1_check_sum += i8 + Double.doubleToLongBits(d1) + i9 + Float.floatToIntBits(f) + i11 + i12 + by +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i6, long l) {

        int i7=0, i13=12687, i14=-30233;
        double d2=56.62548;
        short s=30934;
        float f1=0.336F;
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -3811370594L);

        i7 = 1;
        do {
            vMeth1();
            i6 = (int)l;
            d2 *= -134;
            switch (((i7 % 2) * 5) + 93) {
            case 95:
                if (b) {
                    lArr2[i7 + 1] += -2;
                } else if (b) {
                    i6 -= (int)Test.instanceCount;
                    Test.iArrFld[i7] *= (int)-2.116132;
                    i6 = i7;
                    for (i13 = 5; i13 > 1; --i13) {
                        l += (((i13 * s) + f1) - i14);
                        i14 <<= i14;
                        i6 = (int)Test.instanceCount;
                        i6 += (i13 + l);
                    }
                } else if (b) {
                    try {
                        Test.iArrFld[i7] = (i7 % i7);
                        i6 = (i14 / -158);
                        i14 = (i7 % i14);
                    } catch (ArithmeticException a_e) {}
                } else {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-58323);
                }
            case 97:
                i14 -= i6;
                break;
            default:
                i6 = i13;
            }
        } while (++i7 < 315);
        vMeth_check_sum += i6 + l + i7 + Double.doubleToLongBits(d2) + i13 + i14 + s + Float.floatToIntBits(f1) + (b ?
            1 : 0) + FuzzerUtils.checkSum(lArr2);
    }

    public static double dMeth(int i5) {

        int i15=-4, i16=-12, i17=-49317, i18=-96, i19=25, i20=-13, i21=-24128;
        short s1=9129;
        boolean b1=true;

        vMeth(-1, Test.instanceCount);
        i5 *= i5;
        for (i15 = 12; i15 < 249; ++i15) {
            i16 += (i15 * i15);
        }
        for (i17 = 9; i17 < 160; i17++) {
            i19 = 1;
            while (++i19 < 10) {
                s1 = (short)Test.instanceCount;
                s1 >>= (short)Test.instanceCount;
                for (i20 = 1; 1 > i20; i20++) {
                    if (i18 != 0) {
                    }
                    b1 = b1;
                    if (b1) continue;
                }
            }
            i16 = -29065;
            if (i18 != 0) {
            }
            Test.instanceCount += i17;
        }
        long meth_res = i5 + i15 + i16 + i17 + i18 + i19 + s1 + i20 + i21 + (b1 ? 1 : 0);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-112, i1=-59486, i2=13, i3=54, i4=-16416, i22=-147, i23=162, i24=-215, i25=194, i26=10, i27=-30,
            i28=-2186, i29=-7;
        double d=2.3692, dArr[]=new double[N];
        float f2=110.340F, fArr[]=new float[N];
        byte by1=-110;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 108L);
        FuzzerUtils.init(fArr, 2.370F);
        FuzzerUtils.init(dArr, 0.72687);

        lArr[(i >>> 1) % N] += (long)(Test.instanceCount - (i - (d - i)));
        for (i1 = 6; i1 < 245; i1++) {
            sFld += (short)(i1 + i1);
            for (i3 = i1; 105 > i3; ++i3) {
                fArr[i3 + 1] -= (++Test.instanceCount);
            }
            sFld *= (short)(-(dMeth(i4) + i3));
            i2 -= (int)Test.instanceCount;
            f2 -= -19744;
            for (i22 = i1; 105 > i22; i22++) {
                by1 += (byte)(((i22 * by1) + Test.instanceCount) - Test.instanceCount);
                if (b2) {
                    for (i24 = i1; 1 > i24; i24++) {
                        i2 += i24;
                        f2 = i23;
                        try {
                            i2 = (i23 / -2067280021);
                            Test.iArrFld[i1 - 1] = (211 % i25);
                            i = (i22 % i3);
                        } catch (ArithmeticException a_e) {}
                        dArr[i1 - 1] *= i4;
                        dArr[i24] = i1;
                        i23 += i;
                        i25 *= (int)2.16875;
                    }
                    i2 += i3;
                } else if (b2) {
                    i <<= i24;
                    Test.iArrFld[i1 + 1] += (int)Test.instanceCount;
                }
                for (i26 = 1; i26 < 1; ++i26) {
                    i27 += (int)d;
                }
                Test.iArrFld[i22 - 1] <<= i3;
            }
            for (i28 = 5; 105 > i28; i28++) {
                d *= i25;
            }
            if (b2) continue;
        }
        lArr[(140 >>> 1) % N] -= i3;
        i27 &= by1;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
