package tests.javafuzzer3128;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 02:27:23 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3643276458L;
    public double dFld=-2.75101;
    public static short sFld=11855;
    public static float fFld=0.203F;
    public double dFld1=-101.47383;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5199);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i11, int i12, byte by1) {

        int i13=-63401, i14=-45781, i15=-56940, i16=-4, i17=-2, i18=12, iArr[][]=new int[N][N];
        double d2=1.60451;
        boolean b1=false;

        FuzzerUtils.init(iArr, 53944);

        for (i13 = 12; i13 < 256; i13++) {
            for (i15 = 1; i15 < 7; ++i15) {
                i11 += (i15 * i11);
                Test.fFld += (i15 * i15);
                Test.iArrFld[i15 + 1] = i13;
                for (i17 = 1; i17 < 2; i17++) {
                    Test.instanceCount -= (long)d2;
                    iArr = iArr;
                    if (false) continue;
                    iArr[i17 - 1][i15] = -90;
                    Test.iArrFld[i17 - 1] *= i17;
                    Test.instanceCount += (i17 * i17);
                    if (b1) break;
                    Test.instanceCount = i15;
                }
                by1 >>>= (byte)Test.sFld;
            }
        }
        vMeth2_check_sum += i11 + i12 + by1 + i13 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d2) + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i9) {

        float f2=-101.216F;
        double d1=-1.68480;
        int i10=106, i19=2, i20=-18, i21=32091, i22=42075, i23=-98, i24=197;

        f2 += ((i9--) * Test.instanceCount);
        for (d1 = 10; d1 < 225; ++d1) {
            byte by=111;
            Test.sFld = by;
            vMeth2(i10, i10, by);
        }
        Test.instanceCount <<= i9;
        for (i19 = 17; i19 < 367; i19++) {
            Test.iArrFld[i19 + 1] = (int)1.225F;
            Test.fFld += (((i19 * Test.instanceCount) + Test.instanceCount) - i19);
        }
        Test.instanceCount = i10;
        for (i21 = 11; i21 < 197; ++i21) {
            byte by2=37;
            by2 *= (byte)Test.fFld;
            for (i23 = i21; i23 < 9; i23++) {
                i9 |= i21;
                Test.instanceCount = i19;
            }
            i22 += (int)Test.fFld;
        }
        vMeth1_check_sum += i9 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i10 + i19 + i20 + i21 + i22 +
            i23 + i24;
    }

    public static void vMeth(int i6, double d) {

        int i7=14, i8=-4, i25=250, i26=-9;
        float f1=0.701F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-16990);

        for (i7 = 13; i7 < 357; ++i7) {
            f1 += ((long)i7 | (long)Test.instanceCount);
            Test.instanceCount += (long)f1;
            i8 -= (int)((Test.instanceCount ^= Test.instanceCount) - Test.instanceCount);
            Test.iArrFld[i7] = (int)(d + (--i8));
            i8 -= (int)((long)((i7 + d) + (i6--)) << i8);
            vMeth1(i7);
            for (i25 = 1; i25 < 5; ++i25) {
                Test.instanceCount = i8;
                d = d;
                Test.fFld = i8;
                i6 += (9 + (i25 * i25));
                sArr[i25 - 1] += (short)i8;
                i8 >>>= i6;
                d = i8;
            }
        }
        vMeth_check_sum += i6 + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f1) + i25 + i26 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-13739, i1=-33122, i2=3, i3=-135, i4=219, i5=-54286, i27=38, i28=29803, i29=57824, i30=-60;
        boolean b=true;
        float f=1.47F, fArr[]=new float[N];
        short s=2062;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(fArr, -1.6F);

        for (i = 1; i < 371; i += 2) {
            for (i2 = 8; i2 < 136; ++i2) {
                lArr[i2 - 1] = ((i2 + i) - (-Test.instanceCount));
                i1 = 64648;
                if (b = ((7 == (i2 - Test.instanceCount)) && (dFld == i2))) break;
                for (i4 = i2; i4 < 2; i4++) {
                    fArr[i - 1] = (-(-(i3++)));
                    f += (((i4 * Test.instanceCount) + s) - f);
                    vMeth(i3, dFld);
                }
                try {
                    Test.iArrFld[i] = (i2 / i);
                    i1 = (i % -130);
                    i1 = (Test.iArrFld[i - 1] / i1);
                } catch (ArithmeticException a_e) {}
                i5 += (i2 * i2);
                Test.iArrFld = Test.iArrFld;
                lArr[i] = i1;
                switch ((((i >>> 1) % 1) * 5) + 122) {
                case 127:
                    Test.instanceCount <<= 6;
                    break;
                }
                lArr[i2] = -104;
            }
            i5 >>= 251;
            i1 -= (int)Test.instanceCount;
            Test.fFld = i1;
            for (i27 = i; i27 < 136; i27++) {
                s -= (short)i28;
                dFld1 -= -3852483043L;
                for (i29 = i; i29 < 1; ++i29) {
                    switch (((i >>> 1) % 2) + 112) {
                    case 112:
                        i3 = -10;
                        s += (short)i29;
                        Test.instanceCount = i28;
                        break;
                    case 113:
                        Test.fFld = -3;
                        i5 |= i3;
                        Test.iArrFld[i27 + 1] |= i1;
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
