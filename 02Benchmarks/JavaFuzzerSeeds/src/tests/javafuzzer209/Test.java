package tests.javafuzzer209;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 00:09:26 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2867642873L;
    public static int iFld=-46490;
    public static volatile double dFld=-68.4251;
    public static byte byFld=-113;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.34F);
        FuzzerUtils.init(Test.lArrFld, -1382467477L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f=97.293F, f1=-73.817F;
        int i6=-39, i7=-51889, i8=-50;
        boolean b=false;
        short s=3143;
        double d=-27.71111;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)0);

        for (f = 5; f < 362; f++) {
            i6 >>= (int)Test.instanceCount;
            if (b) {
                if (b) continue;
                Test.dFld += s;
            }
            for (i7 = 1; i7 < 5; ++i7) {
                Test.iFld -= Test.iFld;
                f1 -= f;
                byArr[i7] = (byte)-204L;
                Test.fArrFld[(int)(f)] += (float)48.104845;
                d = 1;
                while (++d < 2) {
                    f1 -= 57L;
                    Test.instanceCount += (long)(d + i6);
                    f1 += (float)(((d * Test.instanceCount) + Test.iFld) - i8);
                    i8 += (int)((long)d | s);
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i6 + (b ? 1 : 0) + s + i7 + i8 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i9=44088, i10=-8, i11=-646, i12=-3, i15=171, i16=7, i17=58240, i18=-7, i19=-11, iArr[]=new int[N];
        float f2=31.923F;
        short s1=-21776;
        byte by=91;
        double d1=91.113805;

        FuzzerUtils.init(iArr, -2);

        vMeth1();
        for (i9 = 9; 346 > i9; ++i9) {
            for (i11 = 5; 1 < i11; --i11) {
                i10 = (int)f2;
            }
            i10 *= s1;
            s1 += (short)i9;
            i12 %= (int)(by | 1);
            for (i15 = 1; i15 < 5; ++i15) {
                if (true) break;
            }
            i10 <<= -11;
            for (i17 = 1; i17 < 5; ++i17) {
                i10 += i16;
                for (d1 = 1; d1 < 2; ++d1) {
                    i16 -= (int)f2;
                    Test.lArrFld[(int)(d1)] &= i11;
                }
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + s1 + by + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d1) + i19 + FuzzerUtils.checkSum(iArr);
    }

    public long lMeth(int i, long l, int i1) {

        int i2=41, i3=13, i4=177, i5=0, i20=-119, i21=-142, i22=-54454;
        float f3=59.519F, f4=2.634F;
        short s2=9956;
        byte by1=-110;

        for (i2 = 12; i2 < 206; ++i2) {
            Test.iFld += (i2 ^ i);
            for (i4 = i2; i4 < 8; ++i4) {
                vMeth();
                i = i;
                for (f3 = 1; i4 < f3; --f3) {
                    s2 *= (short)Test.iFld;
                    i = i3;
                    Test.instanceCount = -54529L;
                    i -= i4;
                    Test.instanceCount += i20;
                }
                f4 = l;
                for (i21 = i4; i21 < 1; i21++) {
                    by1 += (byte)64795L;
                    f4 += i21;
                }
            }
        }
        long meth_res = i + l + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f3) + i20 + s2 + Float.floatToIntBits(f4)
            + i21 + i22 + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l1=5509025059722829802L;
        int i23=-10, i24=5, i25=-54095, i26=-8, i27=-7253, iArr1[]=new int[N];
        boolean b1=true;
        float f5=-2.151F, f6=-6.513F;
        double dArr[]=new double[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr1, 39296);
        FuzzerUtils.init(dArr, 1.81013);
        FuzzerUtils.init(byArr1, (byte)-95);

        Test.iFld = (int)lMeth(Test.iFld, Test.instanceCount, Test.iFld);
        for (l1 = 9; l1 < 207; l1++) {
            try {
                Test.iFld = (-47 / i23);
                Test.iFld = (i23 % Test.iFld);
                Test.iFld = (Test.iFld % iArr1[(int)(l1)]);
            } catch (ArithmeticException a_e) {}
            iArr1[(int)(l1)] <<= (int)Test.instanceCount;
            Test.iFld += (int)(l1 + Test.iFld);
            i23 = 57100;
        }
        iArr1[(i23 >>> 1) % N] &= i23;
        for (short s3 : sArrFld) {
            Test.iFld = 5256;
            for (i24 = 3; i24 < 63; ++i24) {
                b1 = false;
                dArr[i24 + 1] -= Test.iFld;
                Test.iFld = Test.iFld;
                Test.instanceCount -= l1;
                byArr1[i24] = (byte)Test.iFld;
                for (i26 = 1; i26 < 2; i26++) {
                    f5 -= Test.iFld;
                    i23 += (((i26 * i23) + Test.iFld) - i23);
                    Test.instanceCount = Test.instanceCount;
                    if (b1) break;
                    b1 = b1;
                    switch (((i24 % 7) * 5) + 17) {
                    case 42:
                        iArr1[i26] = i25;
                        i23 += (i26 - i26);
                    case 29:
                        try {
                            i23 = (iArr1[i24] % iArr1[i24 + 1]);
                            i25 = (iArr1[i26] / i26);
                            i23 = (663077966 % i26);
                        } catch (ArithmeticException a_e) {}
                        i23 *= Test.byFld;
                        Test.fArrFld[i24] *= f5;
                        break;
                    case 28:
                        f6 = i23;
                        i27 >>= i25;
                        if (b1) continue;
                        break;
                    case 36:
                        Test.instanceCount -= i24;
                        break;
                    case 40:
                        i25 += (i26 | l1);
                        break;
                    case 26:
                        i25 = 0;
                        break;
                    case 25:
                        iArr1 = iArr1;
                    default:
                        i27 = -2;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
