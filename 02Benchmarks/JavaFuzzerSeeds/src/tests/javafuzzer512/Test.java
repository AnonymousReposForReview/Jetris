package tests.javafuzzer512;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 04:57:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1471806422785962205L;
    public static short sFld=-494;
    public static byte byFld=-69;
    public float fFld=106.628F;
    public boolean bFld=false;
    public double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-80);
        FuzzerUtils.init(Test.iArrFld, -58787);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, long l1, int i10) {

        int i11=-24492, i12=-49052, i13=-204, i14=7363, i15=-28, iArr1[][]=new int[N][N];
        long l2=-23014L;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 13);

        i9 >>= i10;
        i9 = (int)1750637124551495056L;
        switch ((((i10 >>> 1) % 6) * 5) + 10) {
        case 35:
            if (b1) {
                for (i11 = 1; i11 < 268; ++i11) {
                    i9 = (int)Test.instanceCount;
                    for (i13 = i11; i13 < 6; ++i13) {
                        i10 -= (int)-11622L;
                        i10 *= i11;
                        for (l2 = 1; l2 < 1; l2++) {
                            Test.byArrFld[i13 - 1] = (byte)i11;
                            Test.iArrFld[i13] <<= -2640;
                        }
                        Test.byFld -= (byte)i14;
                        i9 = i15;
                        Test.instanceCount *= i15;
                    }
                }
            }
            break;
        case 16:
            i14 >>= -10;
            break;
        case 14:
            l1 = i14;
            break;
        case 30:
            i14 += -11;
            break;
        case 39:
            Test.byFld <<= (byte)i11;
        case 29:
            iArr1 = iArr1;
            break;
        default:
            i15 <<= Test.byFld;
        }
        vMeth1_check_sum += i9 + l1 + i10 + i11 + i12 + i13 + i14 + l2 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth(long l, int i5) {

        int i6=0, i7=-96, i8=210, i17=15327, i18=118;
        double d1=1.113536;
        long l3=3L;
        float f1=0.167F;

        for (i6 = 2; i6 < 177; ++i6) {
            i8 = 1;
            do {
                i5 += (i8 * i8);
                vMeth1(i5, l, i6);
                for (i17 = i8; i17 < 1; ++i17) {
                    d1 *= 4631;
                    i18 += i7;
                    Test.iArrFld[i6 + 1] -= (int)Test.instanceCount;
                    switch (((i8 % 6) * 5) + 117) {
                    case 146:
                        l3 *= (long)f1;
                        i5 += i17;
                        Test.iArrFld[i8] -= Test.sFld;
                    case 135:
                        l <<= -44338;
                        i5 += (i17 * i17);
                        break;
                    case 140:
                    case 136:
                        i7 >>= (int)l3;
                        break;
                    case 125:
                        i7 -= (int)l;
                        break;
                    case 139:
                        Test.iArrFld[i6 + 1] <<= i5;
                        break;
                    }
                }
            } while (++i8 < 9);
        }
        long meth_res = l + i5 + i6 + i7 + i8 + i17 + i18 + Double.doubleToLongBits(d1) + l3 + Float.floatToIntBits(f1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(float f, boolean b) {

        int i1=0, i2=-28024, i3=0, i4=-7, i19=-195, i20=-12084, iArr[]=new int[N];
        double d=2.48960;
        float fArr[][]=new float[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 38775);
        FuzzerUtils.init(fArr, 91.470F);
        FuzzerUtils.init(sArr, (short)-12891);

        for (i1 = 358; i1 > 11; --i1) {
            Test.instanceCount += (i1 * i1);
            i2 += i1;
            f = (float)(i2 -= (int)(d += (++iArr[i1])));
            i2 += (57 + (i1 * i1));
            for (i3 = 5; i1 < i3; i3--) {
                fArr[i3 - 1][i1 + 1] -= (++i2);
                Test.instanceCount = (Test.sFld++);
                i2 += byMeth(Test.instanceCount, i4);
                Test.instanceCount = -54563;
            }
            Test.instanceCount >>= i2;
            for (i19 = 1; i19 < 5; ++i19) {
                if (b) {
                    Test.byFld ^= (byte)Test.instanceCount;
                    i20 = (int)f;
                } else if (b) {
                    sArr[i1] = (short)f;
                    vMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + i1 + i2 + Double.doubleToLongBits(d) +
                        i3 + i4 + i19 + i20 + FuzzerUtils.checkSum(iArr) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
                    return;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i19
            + i20 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i21=-4990, i22=-95, i23=-13, i24=-8, i25=52440, i26=4, i27=-18557, i28=25958;
        long l4=-8858322810010546086L, lArr[]=new long[N];
        double d2=11.44904;

        FuzzerUtils.init(lArr, 7589047876346315225L);

        dArrFld[(i >>> 1) % N] += -54460;
        vMeth(fFld, bFld);
        for (i21 = 11; 266 > i21; i21++) {
            l4 = l4;
            i22 = -5;
            i += -59426;
            switch ((i21 % 10) + 91) {
            case 91:
                for (i23 = 4; i23 < 99; ++i23) {
                    i24 *= i;
                    i22 *= 6280;
                    i25 = 1;
                    while (++i25 < 2) {
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-247);
                    }
                    i24 += i23;
                }
                l4 *= (long)d2;
                i22 -= i23;
                break;
            case 92:
                i26 = 1;
                while (++i26 < 99) {
                    for (i27 = 1; i27 < 1; ++i27) {
                        Test.instanceCount += (i27 * i27);
                        d2 -= fFld;
                        i28 = 31074;
                        i22 = 200;
                        if (false) {
                            fFld += fFld;
                        } else {
                            i24 += i27;
                        }
                        i22 += i;
                        Test.iArrFld[i21 + 1] = -30561;
                        i28 += i27;
                        i = (int)l4;
                        Test.iArrFld[i21] |= i21;
                    }
                    i += (i26 ^ i23);
                }
                break;
            case 93:
                Test.iArrFld[i21 - 1] >>>= -40135;
            case 94:
                lArr[i21 - 1] = i22;
                break;
            case 95:
                l4 = i26;
                break;
            case 96:
                i22 = (int)d2;
                break;
            case 97:
            case 98:
                d2 = Test.instanceCount;
                break;
            case 99:
                i28 += i21;
                break;
            case 100:
                i >>= i27;
                break;
            default:
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
