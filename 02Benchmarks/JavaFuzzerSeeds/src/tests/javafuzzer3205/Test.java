package tests.javafuzzer3205;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 03:54:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2122341032489923210L;
    public static volatile short sFld=-19128;
    public byte byFld=-43;
    public long lFld=-25495L;
    public float fFld=-13.764F;
    public double dFld=-68.34513;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)2024);
        FuzzerUtils.init(Test.iArrFld, 60258);
        FuzzerUtils.init(Test.fArrFld, 2.1010F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, double d1, int i3) {


        Test.instanceCount = i2;
        vMeth2_check_sum += i2 + Double.doubleToLongBits(d1) + i3;
    }

    public static void vMeth1(long l1, float f) {

        double d=39.11041, dArr[]=new double[N];
        int i1=35710, i4=-23185, i5=204, i6=31164, i7=-2, i8=-15425, i9=-26, iArr[]=new int[N];
        byte by=17;
        boolean b=false;

        FuzzerUtils.init(dArr, -52.9571);
        FuzzerUtils.init(iArr, 193);

        for (d = 1; 165 > d; ++d) {
            vMeth2(0, -115.62100, i1);
            Test.instanceCount += i1;
            Test.sFld *= (short)l1;
        }
        i1 += i1;
        for (i4 = 5; i4 < 154; ++i4) {
            i5 = i5;
            for (i6 = 1; i6 < 11; i6++) {
                for (i8 = 2; i8 > 1; --i8) {
                    l1 += (i8 * i8);
                    i5 += (int)f;
                    dArr[i8 - 1] -= i5;
                    iArr[i4 - 1] += (int)l1;
                }
                by -= (byte)f;
                if (b) break;
            }
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i4 + i5 + i6 + i7 + i8 +
            i9 + by + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(long l) {

        float f1=0.605F;
        int i10=29818, i11=-14, i12=4457, i13=149, i14=7, i15=-39032, i16=199, i17=-177;
        boolean b1=true;

        vMeth1(Test.instanceCount, f1);
        for (i10 = 12; i10 < 338; i10++) {
            for (i12 = 1; i12 < 5; ++i12) {
                for (i14 = 1; i14 < 2; i14 += 2) {
                    i11 += (int)Test.instanceCount;
                    byFld <<= (byte)i15;
                    i13 -= i14;
                }
                switch (((i12 % 2) * 5) + 106) {
                case 109:
                    switch ((i12 % 2) + 58) {
                    case 58:
                        Test.instanceCount >>= i15;
                        break;
                    case 59:
                        i15 >>>= i13;
                        for (i16 = 1; i16 < 2; ++i16) {
                            i13 = i16;
                            i13 = -13;
                            if (b1) break;
                        }
                        break;
                    default:
                        i17 >>= i10;
                    }
                    break;
                case 116:
                    i11 = (int)Test.instanceCount;
                    break;
                default:
                    Test.sArrFld[i12 + 1] = (short)4505;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i18=-3646, i19=-83, i20=-2, i21=132, i22=14;
        float f2=-123.137F, f3=-61.956F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7L);

        Test.instanceCount += lArr[(i >>> 1) % N];
        vMeth(lFld);
        for (i18 = 1; i18 < 327; i18++) {
            for (i20 = 4; 77 > i20; i20++) {
                boolean b2=true;
                i19 <<= (int)Test.instanceCount;
                i += i20;
                if (b2) continue;
                f2 = 1;
                while (++f2 < 2) {
                    i21 += (int)(((f2 * f2) + Test.sFld) - i);
                    Test.instanceCount += -10017;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)27745);
                    fFld += Test.sFld;
                }
                i21 -= 220;
                i21 -= i20;
                Test.iArrFld[i18] += 52401;
                i19 %= (int)(i | 1);
                Test.iArrFld[i18 + 1] <<= i19;
                Test.instanceCount += i20;
            }
            lFld += (i18 ^ (long)f2);
            try {
                i = (Test.iArrFld[i18 - 1] / -214);
                i19 = (46 % i20);
                i = (i18 / i20);
            } catch (ArithmeticException a_e) {}
        }
        f3 = 1;
        do {
            i22 = 1;
            do {
                fFld *= i22;
                i21 -= 11;
                Test.iArrFld[i22 + 1] >>= i19;
                Test.iArrFld[i22 - 1] %= (int)(i22 | 1);
                Test.fArrFld[(int)(f3 + 1)] = lFld;
                i21 -= i20;
            } while (++i22 < 118);
            dFld /= 9;
            fFld = i20;
        } while (++f3 < 213);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
