package tests.javafuzzer1175;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 15:57:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1663527344L;
    public int iFld=-14;
    public static byte byFld=121;
    public static float fFld=23.323F;
    public static int iFld1=33180;
    public static volatile short sFld=-24331;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3970684465L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, long l1) {

        int i8=8, i9=11, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 4892);

        Test.instanceCount = (long)-2.211F;
        for (int i7 : iArr) {
            for (i8 = 1; 4 > i8; ++i8) {
                i9 -= i7;
                switch ((i8 % 9) + 97) {
                case 97:
                    iArr[i8] = -65396;
                    i9 = i6;
                    if (true) continue;
                    break;
                case 98:
                    iArr[i8 + 1] = (int)Test.instanceCount;
                    iArr[i8] = i7;
                    i6 -= i8;
                    i6 = i8;
                case 99:
                    if (b) continue;
                    break;
                case 100:
                    Test.byFld >>= (byte)7;
                    if (i8 != 0) {
                        vMeth2_check_sum += i6 + l1 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                case 101:
                case 102:
                    if (i9 != 0) {
                        vMeth2_check_sum += i6 + l1 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                case 103:
                    i7 |= i6;
                case 104:
                    try {
                        i6 = (iArr[i8 + 1] % -20144);
                        i9 = (iArr[i8 - 1] % iArr[i8 - 1]);
                        i9 = (iArr[i8] % iArr[i8]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 105:
                    i7 += (i8 ^ i8);
                default:
                    i9 -= i8;
                }
            }
        }
        vMeth2_check_sum += i6 + l1 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, int i2) {

        int i3=10839, i4=-36324, i5=161, iArr1[]=new int[N];
        float f=0.851F;
        short s=27149;
        double d=-2.34940;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -218L);
        FuzzerUtils.init(iArr1, 31433);

        i3 = 1;
        do {
            for (i4 = i3; i4 < 7; ++i4) {
                lArr = (lArr = (lArr = (lArr = lArr)));
                vMeth2(i4, l);
                f = 1;
                do {
                    l <<= i2;
                    i2 -= i3;
                    iArr1[i3 + 1] += i5;
                    if (i4 != 0) {
                        vMeth1_check_sum += l + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + s +
                            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    Test.fFld = s;
                    i2 *= 29357;
                    l = Test.instanceCount;
                    d -= 1221;
                    i2 += (int)f;
                    i2 -= i4;
                } while (++f < 1);
            }
        } while (++i3 < 248);
        vMeth1_check_sum += l + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i10=0, i11=33807, i12=-65, i13=63, i14=-28380, i15=-1, i16=-11365, i17=51, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -12);

        vMeth1(Test.instanceCount, Test.iFld1);
        try {
            for (i10 = 8; 247 > i10; ++i10) {
                for (i12 = 7 + 400; 1 < i12; i12 -= 2) {
                    for (i14 = 1; (1 + 400) > i14; i14++) {
                        try {
                            iArr2[i12 + 1] = (iArr2[i14 + 1] % 167);
                            iArr2[i10] = (i12 / i11);
                            i11 = (i10 % i15);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount <<= i12;
                    }
                    i11 = i11;
                    for (i16 = 1; (1 + 400) > i16; ++i16) {
                        Test.byFld += (byte)i14;
                        i15 = (int)Test.instanceCount;
                        if (Test.bFld) {
                            Test.lArrFld[i12 + 1] = i10;
                            i17 -= i11;
                            Test.iFld1 = Test.sFld;
                        } else if (Test.bFld) {
                            i15 ^= i11;
                        }
                    }
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.fFld -= Test.fFld;
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=140, i1=-8, i19=-44153, i20=36453, i22=5, i23=149, i24=-45142, i25=-14, i26=-186, i27=887, iArr3[]=new
            int[N], iArr4[]=new int[N];
        double d1=2.18925;
        short s1=-27878;

        FuzzerUtils.init(iArr3, -164);
        FuzzerUtils.init(iArr4, 44719);

        iFld >>= (int)(Test.instanceCount++);
        for (i = 21; i < 339; ++i) {
            vMeth();
            iArr3 = iArr3;
            Test.iFld1 -= (int)d1;
        }
        Test.instanceCount &= Test.iFld1;
        for (int i18 : iArr3) {
            i18 = (int)Test.instanceCount;
            for (i19 = 2; i19 < 63; i19++) {
                int i21=-10559;
                Test.instanceCount += Test.byFld;
                iArr3 = iArr3;
                iArr3[i19 - 1] += i19;
                Test.sFld = (short)iFld;
                iArr3[i19] >>= (int)Test.instanceCount;
                i20 += (i19 + i21);
                Test.sFld = (short)Test.iFld1;
                i18 -= i20;
                Test.byFld = (byte)i21;
            }
            Test.fFld = Test.instanceCount;
        }
        Test.bArrFld[(i20 >>> 1) % N] = true;
        for (i22 = 7; 298 > i22; i22++) {
            for (i24 = 2; 86 > i24; i24++) {
                for (i26 = 1; i26 < 2; ++i26) {
                    Test.instanceCount &= 204;
                    d1 = i19;
                    Test.fFld /= (i27 | 1);
                    s1 = (short)-7428879757573221490L;
                    iArr4[i22 + 1] -= (int)Test.instanceCount;
                    Test.byFld = (byte)i24;
                    Test.iFld1 = i23;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
