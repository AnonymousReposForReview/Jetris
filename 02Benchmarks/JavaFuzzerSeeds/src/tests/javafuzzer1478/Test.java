package tests.javafuzzer1478;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:17:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3374461341L;
    public static boolean bFld=false;
    public static double dFld=52.73758;
    public static byte byFld=23;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i9) {

        int i10=-56608, i11=5, i12=-10;

        i9 *= i9;
        i9 += (int)-41.330F;
        if (Test.bFld) {
            Test.instanceCount = -13571;
            for (i10 = 6; i10 < 240; i10++) {
                i9 -= (int)-20.547F;
                if (true) continue;
                i12 = 1;
                while (++i12 < 7) {
                    i11 -= (int)Test.dFld;
                    Test.iArrFld[i12] = i10;
                    i11 = i10;
                    Test.iArrFld = Test.iArrFld;
                    i11 = i11;
                }
                Test.instanceCount *= Test.instanceCount;
                i11 = (int)Test.instanceCount;
            }
        }
        long meth_res = i9 + i10 + i11 + i12;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static short sMeth(int i5, long l, long l1) {

        float f=-8.469F;
        short s=17481;
        int i6=-205, i7=-123, i8=0, i13=-8716, i14=-6725;
        byte by1=-59;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i5 *= (int)(((-53.837F - Test.iArrFld[(i5 >>> 1) % N]) % (((long)(f + s)) | 1)) + (Test.instanceCount << (i5 <<
            i5)));
        i5 -= (i5--);
        i5 -= (int)(Test.instanceCount--);
        i6 = 1;
        while (++i6 < 234) {
            for (i7 = 1; 7 > i7; ++i7) {
                Test.instanceCount = ((l1++) - ((-Math.max(i8, -1)) * (i5 + i8)));
                Test.bFld = (!(bArr[i6 + 1] = (53013 != (f + i5))));
                if (bMeth(i6)) break;
                l = l1;
                for (i13 = 1; i13 < 2; i13++) {
                    try {
                        i8 = (Test.iArrFld[i6] % -42011);
                        i8 = (-52055 / i13);
                        Test.iArrFld[i6 + 1] = (i14 / -57215);
                    } catch (ArithmeticException a_e) {}
                    i8 >>= (int)l1;
                }
                s += by1;
                i14 += (i7 - l1);
                Test.iArrFld[i6] += (int)Test.instanceCount;
            }
        }
        long meth_res = i5 + l + l1 + Float.floatToIntBits(f) + s + i6 + i7 + i8 + i13 + i14 + by1 +
            FuzzerUtils.checkSum(bArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void vMeth(byte by) {

        int i2=31098, i3=37565, i4=-1, iArr[][]=new int[N][N];
        float f1=32.150F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 31976);
        FuzzerUtils.init(lArr, -7335270569097852842L);

        iArr[(i2 >>> 1) % N] = (iArr[(i2 >>> 1) % N] = iArr[(14 >>> 1) % N]);
        for (i3 = 1; i3 < 207; i3++) {
            Test.instanceCount += i3;
            i4 = (Math.min(i3, i4 + i2) - sMeth(i3, Test.instanceCount, Test.instanceCount));
        }
        for (int i15 : Test.iArrFld) {
            if (Test.bFld) break;
            switch (((i4 >>> 1) % 8) + 94) {
            case 94:
                if (Test.bFld) {
                    lArr[(-48 >>> 1) % N] -= -51694L;
                    Test.dFld -= by;
                    by += (byte)Test.instanceCount;
                    if (Test.bFld) break;
                } else if (Test.bFld) {
                    iArr[(i15 >>> 1) % N][(i2 >>> 1) % N] &= by;
                }
                Test.instanceCount = (long)-61.855F;
                i4 -= (int)Test.dFld;
                break;
            case 95:
                Test.instanceCount *= i4;
                break;
            case 96:
                i2 += by;
                break;
            case 97:
            case 98:
                by >>>= (byte)i4;
                break;
            case 99:
                Test.instanceCount *= (long)f1;
                break;
            case 100:
                f1 += Test.instanceCount;
            case 101:
                Test.dFld = i4;
                break;
            default:
                i4 &= -61573;
            }
        }
        vMeth_check_sum += by + i2 + i3 + i4 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-17, i1=0, i16=-253, i17=13, i18=-13, i19=11127, i20=-39, i21=-7, i22=-2;
        float f2=44.70F;
        double d=78.123870;
        short s1=-9349;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7374072622481631249L);

        for (i = 5; i < 333; i++) {
            vMeth(Test.byFld);
        }
        Test.instanceCount += Test.instanceCount;
        for (i16 = 6; i16 < 225; i16++) {
            lArr1[i16] ^= -20188;
            f2 += ((long)i16 | (long)Test.instanceCount);
        }
        i1 += (int)Test.instanceCount;
        switch ((((i >>> 1) % 2) * 5) + 3) {
        case 9:
            i17 ^= (int)Test.instanceCount;
            if (true) {
                fArrFld = FuzzerUtils.float1array(N, (float)0.491F);
                i18 = 1;
                while (++i18 < 175) {
                    f2 = Test.byFld;
                    for (i19 = i18; 143 > i19; i19++) {
                        i20 = i1;
                        switch ((i19 % 1) + 102) {
                        case 102:
                            i1 += i19;
                            Test.instanceCount *= i18;
                            break;
                        }
                        i17 = i18;
                        i1 *= (int)Test.instanceCount;
                        i1 *= i20;
                        for (d = 1; d > 1; --d) {
                            Test.iArrFld[i18 - 1] >>= (int)Test.instanceCount;
                            Test.iArrFld = Test.iArrFld;
                            Test.bFld = Test.bFld;
                            Test.dFld += 65447L;
                            Test.iArrFld[i19] = s1;
                            i20 += 7488;
                            i20 += (int)(d + i19);
                        }
                        Test.iArrFld[i19 + 1] *= i1;
                    }
                }
            } else {
                Test.iArrFld[(i1 >>> 1) % N] += i22;
            }
            break;
        case 5:
            Test.instanceCount *= i20;
            break;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
