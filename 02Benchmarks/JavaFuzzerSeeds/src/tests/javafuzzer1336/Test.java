package tests.javafuzzer1336;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 18:29:34 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-60745L;
    public static volatile byte byFld=70;
    public static float fFld=108.999F;
    public static int iFld=-8;
    public static volatile int iFld1=-252;
    public static double dFld=82.68569;
    public static volatile boolean bFld=true;
    public static short sFld=-4536;
    public static int iFld2=11;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-30962);
        FuzzerUtils.init(Test.lArrFld, 11L);
        FuzzerUtils.init(Test.fArrFld, -1.961F);
        FuzzerUtils.init(Test.iArrFld, 53685);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=7937, i8=-55, i9=0, i10=22991, iArr1[]=new int[N];
        float f=-22.284F;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 10774);
        FuzzerUtils.init(bArr, true);

        for (i7 = 2; i7 < 175; i7++) {
            switch ((((i7 >>> 1) % 9) * 5) + 69) {
            case 88:
                i8 >>= 115;
                Test.sArrFld[i7 - 1] -= (short)i8;
            case 114:
            case 70:
                i9 = 1;
                do {
                    iArr1[i7 - 1] = (int)Test.instanceCount;
                    Test.instanceCount = (long)-125.486F;
                    i8 = i9;
                    i8 = (int)Test.instanceCount;
                    i8 >>= i9;
                    i8 += i9;
                    f = 1;
                    do {
                        i8 = i9;
                        Test.lArrFld = FuzzerUtils.long1array(N, (long)-6617838670481898661L);
                        i8 >>= 193;
                    } while (++f < 1);
                } while (++i9 < 9);
            case 95:
                Test.instanceCount >>>= i7;
            case 80:
                Test.instanceCount = i7;
                break;
            case 72:
            case 73:
                i8 += (int)f;
            case 74:
                iArr1[(i7 >>> 1) % N] = i10;
                break;
            case 83:
                bArr[i7 - 1] = b1;
                break;
            }
        }
        long meth_res = i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i3=-62731, i4=-4, i5=8, i6=13939, i11=-8833, i12=37555, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 0);

        Test.instanceCount >>>= iArr[(i3 >>> 1) % N];
        i4 = 1;
        while (++i4 < 191) {
            if (b) continue;
            for (i5 = 1; i5 < 8; ++i5) {
                Test.byFld = (byte)(iMeth() + Test.fFld);
                i3 -= i3;
                for (i11 = 1; 2 > i11; ++i11) {
                    i12 /= (int)(Test.instanceCount | 1);
                    try {
                        i3 = (i11 / i3);
                        Test.iFld = (i6 / i11);
                        Test.iFld = (i3 / 7048);
                    } catch (ArithmeticException a_e) {}
                    Test.fArrFld[i4][i5] = -1519153492L;
                    i3 += (i11 * i11);
                    if (true) continue;
                    i6 += (i11 + Test.iFld);
                    iArr = iArr;
                }
                i6 = 212;
            }
        }
        vMeth1_check_sum += i3 + i4 + (b ? 1 : 0) + i5 + i6 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1, double d) {

        int i2=9604, i13=4, i14=-45116, i15=-63500, i16=54659, iArr2[]=new int[N];
        long l=6197333275592546278L;
        boolean b2=true;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)94);
        FuzzerUtils.init(iArr2, -8);

        i2 = 129;
        do {
            Test.instanceCount *= (long)Double.longBitsToDouble((Test.instanceCount + i2) * byArr[i2][i2]);
        } while (--i2 > 0);
        vMeth1();
        iArr2 = iArr2;
        iArr2[(i >>> 1) % N] <<= i2;
        if (b2) {
            for (l = 4; l < 163; ++l) {
                Test.lArrFld[(int)(l)] += l;
            }
        } else if (b2) {
            i -= (int)d;
            for (i14 = 7; i14 < 340; i14++) {
                i16 = 1;
                while (++i16 < 5) {
                    Test.fFld *= i16;
                    if (Test.iFld1 != 0) {
                        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + l + i13 + i14 + i15 + i16 + (b2 ?
                            1 : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i1 = i1;
                }
                Test.instanceCount += (i14 - Test.instanceCount);
            }
            vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + l + i13 + i14 + i15 + i16 + (b2 ? 1 : 0) +
                FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
            return;
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + l + i13 + i14 + i15 + i16 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i17=-38933, i18=62, i19=-113, i20=3, i21=17238, i22=43529;
        long l1=8L;

        vMeth(Test.iFld, Test.iFld, 2.47423);
        Test.dFld -= Test.instanceCount;
        for (i17 = 4; 366 > i17; ++i17) {
            i18 >>>= i17;
            i18 = -20119;
            if (Test.bFld) continue;
            for (i19 = 70; i19 > 1; --i19) {
                Test.instanceCount += i17;
                Test.iFld1 = (int)Test.instanceCount;
                for (l1 = 1; l1 < 2; ++l1) {
                    i21 -= 6738;
                    Test.iArrFld[(int)(l1 + 1)] <<= Test.iFld;
                    i21 -= (int)Test.fFld;
                    if (true) {
                        Test.iFld1 = Test.sFld;
                        Test.iFld = i20;
                        Test.iFld >>>= i21;
                    } else {
                        Test.fFld += (float)Test.dFld;
                        Test.iFld1 = i22;
                    }
                    Test.fFld = i17;
                    if (Test.bFld) continue;
                    switch (((i19 % 10) * 5) + 109) {
                    case 121:
                    case 111:
                        Test.instanceCount += (((l1 * i21) + i19) - i19);
                        switch ((((Test.iFld >>> 1) % 7) * 5) + 3) {
                        case 34:
                            try {
                                i21 = (i19 / Test.iFld2);
                                Test.iArrFld[i17 + 1] = (i19 / i18);
                                Test.iFld2 = (i17 % i20);
                            } catch (ArithmeticException a_e) {}
                            i18 = 162;
                            break;
                        case 8:
                            Test.bFld = Test.bFld;
                            Test.lArrFld[i17 + 1] *= i20;
                            break;
                        case 20:
                            i20 = Test.iFld2;
                            break;
                        case 4:
                            Test.instanceCount <<= Test.iFld2;
                        case 9:
                        case 12:
                            i21 = i17;
                            break;
                        case 7:
                            Test.instanceCount -= i17;
                            break;
                        default:
                            i18 >>>= (int)l1;
                        }
                        break;
                    case 137:
                        i20 += (int)l1;
                        break;
                    case 133:
                    case 144:
                        Test.iFld2 -= Test.iFld2;
                        break;
                    case 124:
                        Test.instanceCount = (long)Test.fFld;
                        break;
                    case 154:
                        if (Test.bFld) break;
                        break;
                    case 155:
                        Test.iFld1 += (int)(((l1 * l1) + Test.iFld1) - Test.fFld);
                        break;
                    case 136:
                        Test.iArrFld[(int)(l1 + 1)] = (int)-365175644840672018L;
                    case 146:
                        if (Test.bFld) continue;
                        break;
                    }
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
