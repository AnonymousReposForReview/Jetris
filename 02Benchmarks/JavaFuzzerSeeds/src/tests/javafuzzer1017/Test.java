package tests.javafuzzer1017;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 12:55:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2961824980L;
    public static float fFld=3.648F;
    public static double dFld=2.53057;
    public static byte byFld=31;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.dArrFld, -2.90963);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l2, int i3, long l3) {

        int i4=6, i5=3, i6=57915, i7=10, i8=-36137;
        float f=2.547F;
        boolean b1=false;

        if (b1) {
            Test.fFld -= (float)Test.dFld;
            if (b1) {
                i3 += (int)l2;
                for (i4 = 1; i4 < 221; i4++) {
                    i6 = 1;
                    do {
                        for (f = 1; f < 1; ++f) {
                            l2 = 6;
                            i3 -= (int)l2;
                        }
                        i3 -= i5;
                        switch (((i4 >>> 1) % 2) + 93) {
                        case 93:
                            i5 = (int)Test.instanceCount;
                            Test.dArrFld[i4 - 1] = Test.dArrFld[i4 - 1];
                            i5 += i6;
                            i5 = (int)l3;
                            break;
                        case 94:
                            Test.byFld = (byte)i8;
                        default:
                            i3 += i3;
                        }
                    } while (++i6 < 7);
                }
            } else {
                Test.dFld = i6;
            }
        } else {
            i8 = i4;
        }
        vMeth2_check_sum += l2 + i3 + l3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + (b1 ? 1 : 0);
    }

    public static void vMeth1(boolean b) {

        int i10=-1, i11=-2, i12=-20610, i13=5, i14=14, i15=109;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)127);

        vMeth2(Test.instanceCount, -77, 6L);
        for (i10 = 9; i10 < 380; i10++) {
            i11 -= -9;
            i11 >>= (int)Test.instanceCount;
            byArr[i10][i10 - 1] = (byte)25751;
            Test.iArrFld[i10 - 1] += (int)Test.fFld;
            if (false) continue;
            if (i11 != 0) {
                vMeth1_check_sum += (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(byArr);
                return;
            }
        }
        for (i12 = 14; i12 < 321; i12++) {
            for (i14 = 1; i14 < 5; ++i14) {
                i11 = (int)Test.dFld;
                Test.instanceCount += (((i14 * i10) + Test.instanceCount) - i11);
                i11 = 62;
                i15 >>= -44543;
                Test.instanceCount += (((i14 * i12) + i10) - Test.fFld);
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(double d, long l1) {

        short s=-31506;
        int i2=119, i16=-218, i17=-138, i18=2, i19=63;

        s *= (short)(i2 + (-(0.761F - (++Test.iArrFld[(i2 >>> 1) % N]))));
        if (bFld) {
            i2 = (i2--);
            vMeth1(bFld);
            for (i16 = 7; i16 < 267; ++i16) {
                i17 = -7012;
                for (i18 = 1; i18 < 6; ++i18) {
                    i17 -= (int)l1;
                    s = (short)i19;
                    i19 = Test.byFld;
                    i19 += -22052;
                    i2 -= i2;
                    i17 = i16;
                    s %= (short)((long)(Test.dFld) | 1);
                    if (bFld) break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l1 + s + i2 + i16 + i17 + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        long l=52465L, lArr[]=new long[N];
        int i=39699, i1=45366, i20=52, i21=-203, i22=-96, i23=685, i24=-1;
        short s1=-29716;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 6986720687268860915L);

        for (l = 8; l < 329; l++) {
            i1 = 1;
            while (++i1 < 78) {
                vMeth(Test.dFld, l);
                i += (i1 | (long)Test.fFld);
                i += i1;
                for (i20 = 1; i20 > 1; i20 -= 2) {
                    i *= i20;
                }
                Test.instanceCount -= 134L;
            }
            Test.iArrFld[(int)(l + 1)] -= (int)Test.fFld;
            Test.instanceCount %= (long)1.19125;
            for (i22 = 1; i22 < 78; i22 += 2) {
                i24 = 3;
                do {
                    bArr[i24 - 1] = bFld;
                    i23 += (int)l;
                    Test.fFld += Test.instanceCount;
                    Test.instanceCount += (i24 * i24);
                    Test.byFld >>= (byte)i20;
                    switch ((i24 % 3) + 40) {
                    case 40:
                        Test.dFld += 11.392F;
                        break;
                    case 41:
                        Test.dFld -= i23;
                        s1 = (short)Test.fFld;
                        i21 += i24;
                        i = i21;
                        break;
                    case 42:
                    }
                    Test.fFld += (((i24 * l) + i20) - i1);
                    fArrFld[(int)(l)] += Test.instanceCount;
                    i23 += (((i24 * s1) + i1) - i22);
                    i >>= i22;
                } while (--i24 > 0);
                lArr[(int)(l + 1)] = 207;
                i23 &= (int)l;
                Test.instanceCount = i23;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
