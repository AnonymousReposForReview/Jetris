package tests.javafuzzer1391;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:35:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=127L;
    public static long lFld=-3446302738650451127L;
    public static int iFld=-160;
    public static float fFld=-27.425F;
    public byte byFld=-121;
    public volatile double dFld=-1.52894;
    public boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
        FuzzerUtils.init(Test.fArrFld, 37.758F);
        FuzzerUtils.init(Test.dArrFld, 1.18226);
        FuzzerUtils.init(Test.lArrFld, -3234093066L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        int i6=230, i7=-7, i8=153, i9=-2, i10=-3, i11=190, i12=97, i13=3;
        float f1=-46.385F, fArr[]=new float[N];
        double d1=-1.18670;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-88);
        FuzzerUtils.init(fArr, 0.790F);

        for (i6 = 4; 246 > i6; ++i6) {
            Test.instanceCount += (i6 * f1);
        }
        for (i8 = 4; i8 < 226; i8++) {
            switch (((i5 >>> 1) % 8) + 67) {
            case 67:
                byArr[i8 + 1] += (byte)Test.instanceCount;
                i9 = (int)Test.instanceCount;
                i10 = 1;
                while (++i10 < 7) {
                    f1 = i10;
                    f1 -= 74.806F;
                    for (i11 = 1; i11 > 1; --i11) {
                        try {
                            i13 = (i13 / i6);
                            i12 = (Test.iArrFld[i10] / 47956);
                            i9 = (-159 / Test.iArrFld[i10]);
                        } catch (ArithmeticException a_e) {}
                        d1 -= -15447;
                        Test.instanceCount = -2;
                        i5 |= (int)Test.instanceCount;
                        fArr[i11] -= i9;
                    }
                }
            case 68:
                i7 = (int)Test.instanceCount;
            case 69:
                if (b) break;
            case 70:
                i13 -= (int)1.111353;
            case 71:
                Test.instanceCount += (i8 ^ i9);
                break;
            case 72:
                i5 = i9;
                break;
            case 73:
                Test.instanceCount = Test.instanceCount;
            case 74:
                i12 += i10;
                break;
            default:
                b = b;
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d1) + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l, int i4, double d) {

        float f2=2.151F, f3=-18.1011F;
        int i14=-1, i15=10, i16=-1, i17=-7793, i18=162, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 7);

        vMeth2(i4);
        i4 = i4;
        f2 = f2;
        for (i14 = 8; i14 < 259; i14++) {
            for (i16 = 1; i16 < 6; ++i16) {
                i17 -= i14;
                for (f3 = 1; f3 < 2; f3++) {
                    Test.fArrFld[i16 + 1] = Test.fArrFld[i16 - 1];
                    i4 -= i15;
                    Test.dArrFld[i16] += f2;
                    try {
                        i18 = (157 % i18);
                        i18 = (i14 / 8526);
                        i18 = (i14 % i14);
                    } catch (ArithmeticException a_e) {}
                    i15 -= (int)Test.instanceCount;
                    iArr[i16 + 1] >>>= i17;
                    Test.lArrFld[i14] -= -206;
                    if (i18 != 0) {
                        vMeth1_check_sum += l + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i14 + i15
                            + i16 + i17 + Float.floatToIntBits(f3) + i18 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += l + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17 +
            Float.floatToIntBits(f3) + i18 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1, float f) {

        int i2=-143, i3=2, i19=-188, i20=10710;
        double d2=-93.91933;
        byte by=-46;
        short s=-28960;
        boolean b1=false;

        for (i2 = 10; i2 < 268; i2 += 2) {
            vMeth1(Test.instanceCount, i3, d2);
            for (i19 = 1; 12 > i19; ++i19) {
                i3 += (((i19 * i20) + i3) - i2);
            }
            Test.instanceCount &= 58471;
            i1 = i20;
            switch ((i2 % 5) + 125) {
            case 125:
                by += (byte)Test.lFld;
                if (b1) {
                    if (i19 != 0) {
                        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d2) +
                            i19 + i20 + by + s + (b1 ? 1 : 0);
                        return;
                    }
                    i3 = (int)-72.90F;
                    s *= (short)i19;
                    Test.lFld *= i3;
                } else {
                }
            case 126:
            case 127:
                i3 = -26855;
                i1 += (((i2 * Test.lFld) + i1) - i19);
                break;
            case 128:
                Test.iArrFld = Test.iArrFld;
                break;
            case 129:
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d2) + i19 + i20 + by +
            s + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i21=8991, i22=-90, i23=-2863, i24=-57096, i25=31854, i26=-43285;
        short s1=-22186;
        float f4=-6.605F;

        vMeth(Test.iFld, Test.iFld, Test.fFld);
        Test.fFld += Test.iFld;
        Test.iFld = Test.iFld;
        for (i21 = 4; i21 < 251; i21++) {
            Test.iFld >>= i22;
            Test.iArrFld[i21 + 1] += s1;
            for (f4 = 4; f4 < 102; ++f4) {
                Test.lFld = i23;
                for (i24 = 2; 1 < i24; i24 -= 3) {
                    Test.lFld &= 24460;
                    Test.iFld |= i22;
                    Test.instanceCount += (-5772 + (i24 * i24));
                    i23 += i24;
                }
                if (false) {
                    byFld = (byte)s1;
                    Test.lFld = 34278;
                    Test.iFld &= -8;
                } else {
                    Test.iFld = byFld;
                    Test.lFld *= 14;
                }
                Test.iArrFld[(int)(f4 + 1)] *= i22;
                Test.iFld -= i24;
                i25 += (int)((long)f4 | Test.instanceCount);
                Test.iFld = (int)dFld;
                switch ((int)((f4 % 1) + 43)) {
                case 43:
                    i26 = 1;
                    do {
                        Test.fFld -= i24;
                        bFld = bFld;
                        i22 = Test.iFld;
                        dFld *= -9L;
                        Test.lArrFld[i21 - 1] <<= byFld;
                    } while (++i26 < 2);
                    break;
                default:
                    Test.iArrFld[(int)(f4)] = (int)Test.instanceCount;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
