package tests.javafuzzer2652;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:05:45 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1509539487L;
    public static float fFld=1.37F;
    public static int iFld=6;
    public short sFld=23197;
    public static double dFld=-93.48848;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -26.7669);
        FuzzerUtils.init(Test.iArrFld, -107);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, int i4) {

        double d=-96.43011, d1=-88.71629;
        int i5=-5, i6=100, i7=-30687, i8=-627, iArr[]=new int[N];
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -31633);
        FuzzerUtils.init(fArr, 108.379F);

        iArr[(-7 >>> 1) % N] = (int)d;
        i4 = (int)l2;
        for (i5 = 341; 12 < i5; i5 -= 2) {
            i6 *= (int)Test.fFld;
            Test.dArrFld = Test.dArrFld;
            switch (((i5 % 4) * 5) + 59) {
            case 77:
                Test.fFld += (((i5 * i4) + i5) - i5);
                break;
            case 76:
                switch ((i5 % 2) + 32) {
                case 32:
                case 33:
                    i4 += (i5 ^ (long)Test.fFld);
                    for (d1 = 1; d1 < 10; ++d1) {
                        Test.fFld *= i7;
                    }
                    fArr[i5 - 1] = Test.fFld;
                    break;
                }
            case 75:
                i8 = 1;
                while (++i8 < 10) {
                    d += -71;
                    i7 %= -57737;
                }
                break;
            case 71:
                i6 = (int)l2;
                break;
            default:
                if (b1) break;
            }
        }
        vMeth1_check_sum += l2 + i4 + Double.doubleToLongBits(d) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(long l1) {

        int i2=-65342, i3=64;
        boolean b2=false;

        for (i2 = 167; i2 > 3; i2--) {
            vMeth1(Test.instanceCount, i3);
            i3 = 5;
        }
        i3 *= Test.iFld;
        b2 = true;
        Test.iFld >>>= sFld;
        i3 = Test.iFld;
        vMeth_check_sum += l1 + i2 + i3 + (b2 ? 1 : 0);
    }

    public int iMeth(long l, int i1, boolean b) {

        int i9=-7, i10=-152, i11=11;
        float f=-105.33F;
        byte by=-50;

        l %= ((i1++) | 1);
        i1 -= (i1++);
        i1 = (int)((--Test.instanceCount) * ((i1 - i1) + (i1 - 9971)));
        vMeth(1123466600354969725L);
        for (i9 = 154; i9 > 1; i9--) {
            Test.fFld = Test.instanceCount;
            f = 1;
            do {
                i1 = i10;
                by /= (byte)(i10 | 1);
                i10 -= (int)Test.dFld;
                if (true) break;
                i11 = 1;
                do {
                    Test.iArrFld[i9 - 1] >>= i1;
                    i10 = (int)-2.710F;
                    if (i1 != 0) {
                    }
                } while (--i11 > 0);
            } while (++f < 10);
        }
        long meth_res = l + i1 + (b ? 1 : 0) + i9 + i10 + Float.floatToIntBits(f) + by + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-21973, i12=-227, i13=-115, i14=5, i15=-1, i16=14, i17=-64597, i18=-4406, i19=9, i20=-39045;
        double d2=2.37135;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 49646L);

        i = 11;
        i += iMeth(Test.instanceCount, i, Test.bFld);
        i12 = 1;
        while (++i12 < 142) {
            i += (((i12 * i) + sFld) - Test.instanceCount);
            Test.iFld %= (int)(Test.iFld | 1);
            i += (i12 ^ i12);
        }
        for (i13 = 5; i13 < 155; ++i13) {
            for (i15 = 4; i15 < 167; ++i15) {
                i16 = i16;
                i14 <<= Test.iFld;
                if (Test.bFld) break;
                i = (int)15L;
                i14 = i14;
                Test.iFld -= i13;
                Test.dFld -= 6;
                for (i17 = 1; i17 < 2; i17++) {
                    i = (int)1.577F;
                    Test.instanceCount >>= -6L;
                    Test.dFld = 52922;
                    Test.iArrFld[i13 + 1] += i18;
                    Test.instanceCount += i17;
                    if (Test.bFld) break;
                    Test.dFld *= Test.instanceCount;
                }
                Test.fFld -= 50.106F;
                i = (int)Test.instanceCount;
            }
            for (d2 = 167; d2 > 2; --d2) {
                Test.instanceCount = i20;
                Test.bFld = Test.bFld;
            }
            Test.iFld = i12;
            lArr[i13 - 1] = 5L;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
