package tests.javafuzzer1084;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:15:41 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static boolean bFld=true;
    public byte byFld=126;
    public static volatile long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -164L);
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, byte by, float f) {

        int i7=-25, i8=-30879, i9=-8, i10=-30395;
        short s1=18928;
        double d1=1.44542;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -57.41F);

        for (long l2 : Test.lArrFld) {
            i6 += 25;
            if (true) continue;
            Test.instanceCount <<= i6;
            for (i7 = 1; i7 < 4; ++i7) {
                i6 += i7;
                for (i9 = 1; i9 < 2; ++i9) {
                    fArr = fArr;
                    s1 += (short)(-7622 + (i9 * i9));
                    Test.bFld = Test.bFld;
                    Test.iArrFld[i7] += i7;
                    by <<= (byte)i8;
                }
            }
            if (Test.bFld) continue;
            i8 |= 25672;
            d1 -= by;
        }
        long meth_res = i6 + by + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + s1 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, int i2, int i3) {

        int i4=8, i5=53293, i11=253;
        short s=22436;
        float f1=-2.844F, fArr1[]=new float[N];
        double d2=-48.15098;

        FuzzerUtils.init(fArr1, 47.151F);

        for (long l1 : Test.lArrFld) {
            l1 ^= ((i2 = (i3++)) + (i1++));
            for (i4 = 1; i4 < 4; ++i4) {
                i1 += i4;
                s >>= (short)7800262173393253292L;
                i1 *= Math.min(Math.abs(i4), iMeth(i2, (byte)(-123), f1));
                if (Test.bFld) {
                    i11 = 1;
                    do {
                        d2 = i4;
                    } while (++i11 < 2);
                    fArr1 = fArr1;
                } else if (Test.bFld) {
                    f1 *= (float)d2;
                    Test.iArrFld[i4 + 1] /= (int)(i2 | 1);
                    l1 = (long)f1;
                } else {
                    Test.bFld = Test.bFld;
                    f1 = f1;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + s + Float.floatToIntBits(f1) + i11 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void vMeth(double d) {

        long l=-759016387L, l4=3L;
        int i=-58510, i12=127, i13=-235, i14=-254;
        short s2=-30565, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-29056);

        for (l = 14; l < 310; l++) {
            vMeth1(46, 242, i);
            for (l4 = 1; l4 < 6; l4++) {
                for (i13 = 1; 2 > i13; i13++) {
                    s2 *= s2;
                    i14 = i13;
                    if (Test.bFld) {
                        i12 = i14;
                    } else if (true) {
                        sArr[(int)(l)] <<= byFld;
                    } else {
                        d /= (l | 1);
                        Test.instanceCount += (i13 ^ i14);
                        Test.instanceCount *= (long)1.164F;
                        Test.instanceCount *= l4;
                    }
                }
                Test.iArrFld[(int)(l + 1)] = i13;
                i14 = byFld;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i + l4 + i12 + i13 + i14 + s2 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        double d3=0.10985;
        int i15=16, i16=13, i17=-5, i18=222, i19=14;
        float f2=-63.370F;
        short s3=-21294;

        vMeth(d3);
        i15 = 1;
        do {
            f2 *= i15;
            for (i16 = 138; 8 < i16; i16 -= 3) {
                i18 = 4;
                while (--i18 > 0) {
                    f2 = i16;
                    Test.iArrFld[i18 + 1] *= (int)f2;
                    Test.iArrFld[(i18 >>> 1) % N] = i15;
                    Test.instanceCount ^= s3;
                    switch ((((i15 >>> 1) % 9) * 5) + 105) {
                    case 134:
                        i17 = i15;
                        i17 -= 164;
                        dArrFld[i16] -= 18.155F;
                        dArrFld[i15 - 1] *= 58231;
                        break;
                    case 117:
                        i17 += 8;
                        Test.instanceCount = Test.instanceCount;
                        Test.iArrFld[i16] = (int)Test.instanceCount;
                        i17 += i18;
                        break;
                    case 113:
                        i17 += (((i18 * i17) + f2) - Test.instanceCount);
                        byFld &= (byte)i15;
                        i17 += i18;
                        Test.iArrFld[i15 + 1] = i16;
                        break;
                    case 110:
                        i17 >>>= -44700;
                        s3 += (short)(i18 * i16);
                    case 111:
                        i17 *= 6466;
                    case 139:
                        Test.instanceCount = i17;
                    case 124:
                        i19 >>= (int)1L;
                        break;
                    case 135:
                        fArrFld[i15 - 1] += i18;
                        f2 += (((i18 * Test.instanceCount) + Test.instanceCount) - i18);
                        i19 += i18;
                        break;
                    case 150:
                        Test.instanceCount += i18;
                        break;
                    default:
                        i19 *= (int)d3;
                    }
                }
            }
        } while (++i15 < 182);



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
