package tests.javafuzzer3440;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 08:22:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-51187L;
    public static int iFld=-63;
    public static double dFld=0.124059;
    public static boolean bFld=false;
    public static byte byFld=-69;
    public double dFld1=113.62054;
    public static double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.101557);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 9L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i5=40291, i6=-213, i7=197, i8=0, i9=-218, i10=19766, iArr1[]=new int[N];
        double d1=15.99038, d2=-14.17030;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.518F);
        FuzzerUtils.init(iArr1, -132);

        Test.dArrFld[(Test.iFld >>> 1) % N] *= Test.instanceCount;
        for (i5 = 8; i5 < 138; ++i5) {
            Test.iFld |= (int)Test.instanceCount;
        }
        for (float f1 : fArr) {
            d1 -= Test.instanceCount;
            for (i7 = 1; 4 > i7; i7++) {
                iArr1 = iArr1;
                i8 += i6;
            }
            for (i9 = 1; 4 > i9; ++i9) {
                fArr[i9] += (float)-2.12393;
                Test.iFld *= (int)d1;
                d2 = 1;
                do {
                    Test.iFld = (int)Test.instanceCount;
                    d1 = i10;
                    b = b;
                } while (++d2 < 2);
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d2) + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        float f2=0.161F;
        int i11=-176, i12=-74, i13=13, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -63);

        iArr[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        for (double d : Test.dArrFld) {
            Test.dArrFld[(Test.iFld >>> 1) % N] += (d--);
            if (Test.bArrFld[(((int)(Test.instanceCount + Test.iFld)) >>> 1) % N]) break;
        }
        vMeth2(f2);
        for (i11 = 11; 254 > i11; ++i11) {
            switch ((i11 % 2) + 55) {
            case 55:
                i12 += (((i11 * i11) + Test.instanceCount) - Test.instanceCount);
                Test.instanceCount -= (long)f2;
                Test.dFld = Test.iFld;
                break;
            case 56:
                i13 = 1;
                while (++i13 < 7) {
                    i12 -= (int)Test.dFld;
                    Test.dFld += i11;
                    i12 = Test.iFld;
                    Test.iFld = Test.iFld;
                }
            default:
                Test.instanceCount -= i12;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i2) {

        byte by=-127;
        int i3=-44702, i4=142, i14=-224;
        long lArr[]=new long[N], lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr, 5L);
        FuzzerUtils.init(lArr1, -2800083223L);

        by <<= (byte)i2;
        for (i3 = 18; i3 < 300; i3++) {
            vMeth1();
            i14 = 1;
            do {
                l += (i14 ^ i14);
                i4 += (i14 * i14);
                lArr[i3] >>>= l;
                i2 = 10;
                Test.bFld = Test.bFld;
                Test.instanceCount = i2;
            } while (++i14 < 6);
            Test.iFld -= i2;
        }
        l -= -6346;
        i2 = -164;
        lArr1 = lArr1;
        l ^= i3;
        vMeth_check_sum += l + i2 + by + i3 + i4 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=6922, i1=-8640, i15=-11, i16=27127, i17=-6, i18=12651, i19=-60130, i20=37, iArr2[]=new int[N];
        float f3=2.850F, f4=0.41F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(sArr, (short)22953);

        for (i = 9; i < 146; i++) {
            vMeth(Test.instanceCount, Test.iFld);
            for (i15 = 183; i15 > 6; i15--) {
                try {
                    i1 = (iArr2[i] / -37776);
                    i1 = (i1 % -55091);
                    i16 = (i / i1);
                } catch (ArithmeticException a_e) {}
                sArr = sArr;
                i1 += (((i15 * Test.instanceCount) + i16) - Test.iFld);
                iArr2[i + 1] += i;
                i16 -= (int)Test.instanceCount;
                iArr2[i + 1] = (int)Test.instanceCount;
                i16 = (int)Test.instanceCount;
            }
            Test.iFld += (i | (long)f3);
            Test.dFld = Test.byFld;
        }
        for (f4 = 16; 335 > f4; f4++) {
            for (i18 = 2; i18 < 79; ++i18) {
                Test.lArrFld = Test.lArrFld;
                i19 += i18;
                i19 += i18;
                dFld1 -= -13983L;
            }
            i1 += (int)(f4 * i17);
            Test.iFld *= (int)1.255F;
            try {
                Test.iFld = (i1 / -58609);
                i19 = (i18 % Test.iFld);
                i1 = (111 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            Test.iFld = (int)-7490029655558784005L;
            f3 += 0.324F;
        }
        dFld1 -= Test.iFld;
        iArr2[(i17 >>> 1) % N] += i15;
        i19 = (int)13128L;
        i20 = 1;
        do {
            i16 += (i20 + f3);
            iArr2[i20 + 1] -= i15;
            i1 *= Test.iFld;
        } while (++i20 < 157);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
