package tests.javafuzzer1473;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 21:11:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static float fFld=24.215F;
    public static int iFld=8;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -56);
        FuzzerUtils.init(Test.lArrFld, -7L);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by, long l2, int i6) {

        int i7=-12, i8=-6944, i9=47746, i10=101;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 26.704F);
        FuzzerUtils.init(lArr1, -7761123051797861132L);

        i6 = (int)-2.640F;
        i6 = i6;
        Test.iArrFld[(i6 >>> 1) % N] = i6;
        for (i7 = 3; 223 > i7; i7 += 2) {
            for (i9 = 1; i9 < 14; ++i9) {
                by += (byte)(58.579F + (i9 * i9));
                i6 = i9;
                fArr[(i7 >>> 1) % N] += -2.383F;
                Test.instanceCount = i8;
                i8 *= i8;
            }
            i8 += (i7 - l2);
            Test.fFld %= 5;
            i8 *= (int)Test.fFld;
            i10 = i8;
            lArr1[i7] += -127;
        }
        long meth_res = by + l2 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3, long l) {

        int i4=7, i5=-74, i11=-82;
        float f=-1.886F;
        long l1=-14L;
        double d1=21.116870, d2=40.30988;
        boolean b=true;

        for (i4 = 11; i4 < 316; ++i4) {
            f += ((long)i4 ^ (long)i2);
            l1 = 1;
            do {
                byte by1=-6;
                i3 = iMeth(by1, l1, i4);
                Test.iArrFld[(int)(l1 - 1)] &= i5;
                for (d1 = 1; d1 < 1; d1++) {
                    i3 -= i2;
                    d2 -= i2;
                    by1 += (byte)(((d1 * l) + Test.fFld) - i3);
                    Test.lArrFld[(int)(l1 - 1)] += -97;
                    i5 = by1;
                }
                i11 += (int)l1;
                i11 += (int)(-1565579715L + (l1 * l1));
                b = b;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-32773);
            } while (++l1 < 5);
        }
        vMeth_check_sum += i2 + i3 + l + i4 + i5 + Float.floatToIntBits(f) + l1 + Double.doubleToLongBits(d1) + i11 +
            Double.doubleToLongBits(d2) + (b ? 1 : 0);
    }

    public static short sMeth(double d, int i, int i1) {

        int i12=-2, i13=180, i14=14, i15=-11, i16=217;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.104538);

        vMeth(i1, i1, Test.instanceCount);
        i12 = 1;
        do {
            d += Test.instanceCount;
            Test.instanceCount = (long)1.594F;
            i = (int)Test.instanceCount;
            for (i13 = 1; i13 < 4; ++i13) {
                i = i;
                for (i15 = 1; i15 < 2; i15 += 3) {
                    i16 = i1;
                    i1 = 14;
                    d += i13;
                    i16 -= (int)Test.instanceCount;
                }
                i16 -= i13;
                i1 += (int)(192L + (i13 * i13));
                dArr[i13] = Test.fFld;
            }
        } while (++i12 < 388);
        long meth_res = Double.doubleToLongBits(d) + i + i1 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=0, i18=-230, i19=-64881, i20=0, i21=-1, i22=9739, i23=-194, i24=11, i25=85, i26=-16946, i27=31580;
        short s=-32192;
        double d3=0.74720, dArr1[]=new double[N];
        boolean b1=false;
        long lArr[]=new long[N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(dArr1, 57.97146);
        FuzzerUtils.init(fArr1, -115.509F);

        lArr[(-2 >>> 1) % N] -= sMeth(122.96833, i17, i17);
        s = (short)Test.fFld;
        if (b1) {
            for (i18 = 7; i18 < 308; i18++) {
                i19 = (int)-2.254F;
                Test.iArrFld[i18] -= i18;
                Test.instanceCount -= (long)-2.6797;
                Test.iFld += (i18 * i18);
                i20 = 1;
                while (++i20 < 84) {
                    Test.instanceCount += (i20 * i20);
                    for (i21 = 1; 1 > i21; i21 += 3) {
                        Test.instanceCount = i22;
                        dArr1[i20 - 1] -= -7386793868554500790L;
                        Test.instanceCount = i19;
                        fArr1[i20] = fArr1[i20];
                        Test.iArrFld[i21 - 1] = i17;
                        Test.iFld += i19;
                    }
                    for (d3 = 1; d3 < 1; d3++) {
                        Test.instanceCount = Test.instanceCount;
                    }
                }
                i19 >>>= Test.iFld;
                i17 = i20;
                i19 += (i18 ^ s);
            }
            i17 += i18;
        } else {
            for (i24 = 2; i24 < 158; i24++) {
                i22 += (i24 * i24);
                i19 += (((i24 * i20) + i20) - i17);
                Test.instanceCount &= i22;
                for (i26 = 9; i26 < 161; i26++) {
                    fArr1[i26 + 1] = fArr1[i24];
                    i19 += (int)Test.instanceCount;
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
