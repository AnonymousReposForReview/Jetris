package tests.javafuzzer179;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 23:25:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4475956649526104751L;
    public static boolean bFld=false;
    public int iFld=-14;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -219);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, long l1, long l2) {

        double d1=-2.35420;
        int i2=43539, i3=150, i4=-12, i6=49008, i7=7276, i8=42570, i9=-26040;
        byte by=-121;
        float f2=0.797F;

        i1 -= i1;
        for (d1 = 2; d1 < 158; ++d1) {
            for (i3 = (int)(d1); i3 < 10; i3++) {
                float f1=1.549F;
                l2 = (long)f1;
                f1 -= i1;
                l2 = l1;
                i2 = i1;
                Test.iArrFld[i3 + 1] += (int)f1;
            }
            by = (byte)f2;
            Test.instanceCount = i2;
            Test.instanceCount = (long)55.327F;
            for (i6 = 1; i6 < 10; ++i6) {
                for (i8 = i6; i8 < 2; i8++) {
                    i1 = i1;
                    i2 = by;
                }
            }
        }
        vMeth_check_sum += i1 + l1 + l2 + Double.doubleToLongBits(d1) + i2 + i3 + i4 + by + Float.floatToIntBits(f2) +
            i6 + i7 + i8 + i9;
    }

    public static int iMeth() {

        float f=0.874F;
        int i=-20410;
        byte by1=36;

        if (Test.bFld) {
            for (f = 13; f < 242; ++f) {
                vMeth(i, Test.instanceCount, Test.instanceCount);
            }
            i -= (int)Test.instanceCount;
            i -= i;
        }
        by1 *= (byte)i;
        long meth_res = Float.floatToIntBits(f) + i + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l) {

        double d=-85.52355;

        d += iMeth();
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i10=-160, i11=-13, i12=51059, i13=-115, i14=24433, i15=26, i16=-43771, i17=233, i18=14, i19=183;
        float f3=-2.891F;
        byte by2=96, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)95);

        for (int smallinvoc=0; smallinvoc<844; smallinvoc++) vSmallMeth(Test.instanceCount);
        for (i10 = 7; i10 < 279; i10++) {
            i11 += (int)Test.instanceCount;
            i12 = 1;
            while (++i12 < 92) {
                if (Test.bFld) break;
                switch ((i12 % 3) + 15) {
                case 15:
                    iFld ^= i12;
                    for (i13 = 1; i13 > 1; i13--) {
                        f3 += (((i13 * f3) + f3) - f3);
                    }
                    Test.iArrFld[i10 - 1] ^= i13;
                    for (i15 = 1; i15 < 1; i15++) {
                        i14 = i15;
                        Test.instanceCount -= 6772300095147810651L;
                        i11 = (int)Test.instanceCount;
                        Test.iArrFld[i15 - 1] -= i16;
                        Test.bFld = Test.bFld;
                    }
                    break;
                case 16:
                case 17:
                    switch ((i10 % 4) + 20) {
                    case 20:
                        try {
                            i11 = (17210 / i11);
                            iFld = (i10 % i13);
                            Test.iArrFld[i12 - 1] = (32056 % iFld);
                        } catch (ArithmeticException a_e) {}
                        if (Test.bFld) break;
                        Test.instanceCount = iFld;
                        i14 += (i12 * i14);
                        break;
                    case 21:
                        i11 += i16;
                        i17 = 1;
                        while (++i17 < 1) {
                            Test.instanceCount += (i17 * i17);
                        }
                        for (i18 = 1; 1 > i18; i18++) {
                            Test.instanceCount = i15;
                            if (Test.bFld) continue;
                            Test.iArrFld[i12 + 1] += i15;
                            by2 |= (byte)180;
                            iFld -= i16;
                        }
                    case 22:
                        Test.instanceCount >>= Test.instanceCount;
                        break;
                    case 23:
                        byArr[i10 - 1] += (byte)i12;
                        break;
                    default:
                        try {
                            iFld = (i16 % i13);
                            i14 = (Test.iArrFld[i12] % i11);
                            Test.iArrFld[i10] = (-204 % i15);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                default:
                    try {
                        i11 = (Test.iArrFld[i12 + 1] / i10);
                        Test.iArrFld[i10] = (iFld % -707036352);
                        Test.iArrFld[i10 - 1] = (198 / i15);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
