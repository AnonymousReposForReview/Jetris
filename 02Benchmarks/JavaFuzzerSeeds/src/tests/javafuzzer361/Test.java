package tests.javafuzzer361;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 02:50:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-186L;
    public static int iFld=106;
    public static double dFld=-47.8871;
    public static long lFld=-2302633693L;
    public static byte byFld=71;
    public boolean bFld=false;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 11);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static long lMeth() {

        short s=31736;
        float f=0.38F;
        int i=-119, i1=-6, i2=-100, i3=-9, i4=-1, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -6);

        Test.iFld *= (int)Test.instanceCount;
        Test.instanceCount = (long)((-(Test.instanceCount + Test.dFld)) + ((s - Test.instanceCount) * (f * Test.iFld)));
        Test.instanceCount *= Test.instanceCount;
        Test.iFld /= (int)(((5331982295655061346L + (Test.iFld - Test.iFld)) * (Test.instanceCount++)) | 1);
        iArr = iArr;
        for (i = 2; i < 121; ++i) {
            i2 = 1;
            while (++i2 < 13) {
                f = Test.instanceCount;
                Test.instanceCount += (long)(-(i1 = (int)(Test.instanceCount * f)));
                Test.instanceCount += (i2 + Test.iFld);
                i1 >>= iArr[i2 - 1];
                if (i != 0) {
                }
                for (i3 = 1; i3 < 1; ++i3) {
                    Test.iFld *= iArr[i2];
                    Test.instanceCount -= (long)(++Test.dFld);
                }
            }
        }
        long meth_res = s + Float.floatToIntBits(f) + i + i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i9=210, i10=51, i11=-83, i12=8, i13=13;
        float f2=49.922F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 60866L);

        lMeth();
        for (int i7 : Test.iArrFld1) {
            float f1=0.743F;
            Test.lFld -= (long)f1;
        }
        Test.byFld = (byte)214L;
        for (int i8 : Test.iArrFld1) {
            Test.iFld += i8;
            i8 -= Test.byFld;
            i9 = 1;
            while (++i9 < 4) {
                for (i10 = 1; i10 < 1; ++i10) {
                    i12 ^= i13;
                    i13 -= i12;
                    lArr1[i9] &= i11;
                    Test.iArrFld1[i9 - 1] >>= (int)Test.lFld;
                    f2 -= i8;
                    i8 = (int)f2;
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i14=-112, i15=-2, i16=-117, i17=250;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.93862);

        Test.instanceCount = (iMeth() + Test.instanceCount);
        for (i14 = 7; i14 < 197; ++i14) {
            i16 = 1;
            while (++i16 < 8) {
                if (b) {
                    i15 = 4;
                    if (b) continue;
                    dArr[i14] *= Test.iFld;
                } else if (false) {
                    Test.dFld -= -3L;
                    i15 >>= (int)Test.lFld;
                    i17 = 1;
                    while (--i17 > 0) {
                        Test.instanceCount += (((i17 * i15) + i17) - i16);
                        Test.iFld = i17;
                        i15 >>= Test.byFld;
                        Test.iFld += i17;
                        Test.byFld += (byte)Test.lFld;
                    }
                }
            }
        }
        vMeth_check_sum += i14 + i15 + i16 + (b ? 1 : 0) + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        double d=0.70485;
        int i5=1, i6=3, i18=-42745, i20=33504, i21=36772;
        float f3=2.701F;
        short s1=6806;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 10L);

        lMeth();
        for (d = 7; d < 217; d++) {
            i6 = 1;
            while (++i6 < 120) {
                int i19=176;
                i5 *= (Math.max(Test.iFld, i5++) - (--Test.iFld));
                iArrFld[(int)(d + 1)] += (int)lArr[(int)(d - 1)];
                fArrFld[(int)(d + 1)] = (-i5);
                Test.iFld += (int)(76L + (i6 * i6));
                vMeth();
                Test.iArrFld1 = Test.iArrFld1;
                Test.byFld += (byte)i5;
                switch (((Test.iFld >>> 1) % 1) + 47) {
                case 47:
                    i18 = 1;
                    do {
                        i5 += (((i18 * f3) + i6) - i18);
                        if (bFld) {
                            f3 += Test.lFld;
                        } else {
                            Test.iFld += -32826;
                        }
                        Test.byFld += (byte)i6;
                        s1 += (short)(((i18 * Test.byFld) + i5) - i5);
                    } while (--i18 > 0);
                    i5 -= Test.iFld;
                    Test.iFld -= (int)9153444079452508898L;
                    break;
                }
                switch ((int)((d % 6) + 38)) {
                case 38:
                    Test.iFld <<= i19;
                    for (i20 = 1; 1 > i20; i20++) {
                        if (false) break;
                        i5 *= Test.byFld;
                        i5 += i5;
                        iArrFld[i6 + 1] &= i21;
                        i19 ^= -55317;
                        i21 -= i5;
                        Test.dFld = i21;
                    }
                    break;
                case 39:
                    i5 += (((i6 * i18) + f3) - Test.lFld);
                case 40:
                    i19 |= Test.byFld;
                    break;
                case 41:
                    i21 = (int)Test.instanceCount;
                    break;
                case 42:
                    Test.iArrFld1[i6 + 1] <<= Test.iFld;
                case 43:
                    i19 += (((i6 * Test.lFld) + Test.instanceCount) - Test.iFld);
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest iMeth vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
