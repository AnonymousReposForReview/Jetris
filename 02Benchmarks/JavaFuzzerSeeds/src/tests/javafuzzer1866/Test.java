package tests.javafuzzer1866;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:57:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-20576L;
    public static double dFld=33.58176;
    public static byte byFld=105;
    public static boolean bFld=true;
    public static int iFld=0;
    public static short sFld=-569;
    public float fFld=-90.584F;
    public static volatile short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)17419);
        FuzzerUtils.init(Test.iArrFld, -128);
        FuzzerUtils.init(Test.dArrFld, -2.86901);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, int i5) {

        int i6=-184, i7=-11, i8=7, iArr1[]=new int[N];
        short s1=-18424;
        float f1=2.487F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(lArr, 14L);

        i6 = 1;
        do {
            if (Test.bFld) {
                i4 += i6;
                Test.instanceCount *= i5;
            } else if (Test.bFld) {
                if (Test.bFld) {
                    s1 += (short)i6;
                    i5 <<= i6;
                    if (Test.bFld) {
                        iArr1[i6 - 1] <<= (int)Test.instanceCount;
                        if (i4 != 0) {
                        }
                        for (i7 = i6; i7 < 5; ++i7) {
                            f1 = 1;
                            while (++f1 < 1) {
                                lArr[i6] = Test.byFld;
                                lArr[i6] -= (long)f1;
                                i4 = 20223;
                            }
                        }
                    }
                } else {
                    Test.dFld += i6;
                }
            } else {
                iArr1[(i5 >>> 1) % N] = (int)Test.instanceCount;
            }
        } while (++i6 < 339);
        long meth_res = i4 + i5 + i6 + s1 + i7 + i8 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f) {

        int i9=54113, i10=14, i11=-45665, i12=114;
        float f2=-2.137F;

        for (short s : Test.sArrFld) {
            switch (((iMeth1(-13, Test.iFld) >>> 1) % 2) + 26) {
            case 26:
                Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
                Test.dArrFld[(Test.iFld >>> 1) % N] -= -1246;
                for (i9 = 1; i9 < 4; i9++) {
                    i11 = 1;
                    do {
                        Test.instanceCount *= (long)Test.dFld;
                        Test.dFld += f;
                        if (i9 != 0) {
                        }
                    } while (++i11 < 2);
                    Test.dFld *= Test.instanceCount;
                    Test.instanceCount = -124;
                    i10 >>>= Test.iFld;
                    Test.iArrFld[i9] /= (int)(Test.instanceCount | 1);
                    Test.instanceCount -= (long)f2;
                    i12 += i9;
                }
                break;
            case 27:
            }
        }
        long meth_res = Float.floatToIntBits(f) + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        int i2=-14, i3=-227, i13=-211, i14=123, iArr[]=new int[N];
        float f3=-27.420F;

        FuzzerUtils.init(iArr, 47984);

        l *= i1;
        iArr[(i >>> 1) % N] -= (int)(Test.instanceCount++);
        for (i2 = 1; i2 < 151; ++i2) {
            i += (++iArr[i2]);
            Test.dFld *= ((i1++) - iMeth(-2.193F));
            Test.byFld = (byte)-108;
            Test.iFld = (int)f3;
            Test.iFld = (int)f3;
            Test.dArrFld[i2 - 1] -= Test.dFld;
            Test.sArrFld = Test.sArrFld;
            i1 -= i1;
            Test.sFld >>>= (short)-63791;
        }
        for (i13 = 4; i13 < 313; ++i13) {
            i1 >>= i3;
            Test.iFld -= i2;
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + Float.floatToIntBits(f3) + i13 + i14 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=-46182, i16=-58385, i17=14;
        double d=62.113366, d1=30.75297;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 0.209F);
        FuzzerUtils.init(lArr1, -5684372728096391744L);

        vMeth(-469574995L, -229, Test.iFld);
        fArr[(64 >>> 1) % N] += Test.iFld;
        for (i15 = 6; 128 > i15; i15++) {
            Test.bFld = Test.bFld;
            lArr1[i15 + 1] >>= Test.instanceCount;
            switch (((Test.iFld >>> 1) % 10) + 70) {
            case 70:
                Test.dFld = -9986;
                break;
            case 71:
                i16 = i15;
                Test.bFld = Test.bFld;
                break;
            case 72:
                i17 = 1;
                do {
                    if (Test.bFld) {
                        Test.iFld >>= Test.iFld;
                        d = 1;
                        while ((d += 3) < 1) {
                            Test.iFld = i15;
                            Test.iFld -= Test.sFld;
                            Test.byFld += (byte)(d * d);
                            i16 = i16;
                            Test.iFld += (int)(d * d);
                        }
                    } else if (false) {
                        i16 -= i16;
                        Test.iArrFld[i17] = i17;
                        Test.iFld += (int)Test.instanceCount;
                    } else {
                        d1 = 1;
                        do {
                            i16 = i15;
                            Test.iFld >>>= i15;
                            Test.instanceCount += (long)d1;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)49503);
                            Test.iArrFld[i15] -= Test.byFld;
                            fFld += (float)(d1 * i17);
                            Test.iFld = -30448;
                        } while (++d1 < 1);
                    }
                    i16 ^= (int)Test.instanceCount;
                } while (++i17 < 205);
            case 73:
                Test.dFld = i15;
            case 74:
                lArr1 = lArr1;
            case 75:
                Test.iFld += (((i15 * i15) + i16) - Test.instanceCount);
                break;
            case 76:
                Test.iArrFld[i15] -= (int)2.400F;
            case 77:
                fFld = 48049;
            case 78:
                Test.sFld <<= (short)i15;
                break;
            case 79:
                fArr[i15 - 1] *= Test.iFld;
                break;
            default:
                i16 += (((i15 * i16) + i16) - Test.instanceCount);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
