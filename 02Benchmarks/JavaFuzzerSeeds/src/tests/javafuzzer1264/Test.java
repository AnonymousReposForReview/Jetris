package tests.javafuzzer1264;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 17:32:02 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1L;
    public static int iFld=9;
    public static double dFld=0.27432;
    public static float fFld=-95.932F;
    public static boolean bFld=false;
    public byte byFld=-20;
    public volatile short sFld=32250;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -88.38123);
        FuzzerUtils.init(Test.iArrFld, -1);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 1.23F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, float f, int i5) {

        int i6=253, i7=-6, i8=-3, i9=-9, i10=4, i11=31542;
        boolean b=true;
        byte by1=54, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)57);
        FuzzerUtils.init(fArr, 2.845F);

        for (i6 = 2; i6 < 304; ++i6) {
            Test.instanceCount += (((i6 * Test.iFld) + i7) - i4);
            b = b;
            f += -49680;
            for (i8 = 1; i8 < 5; ++i8) {
                Test.instanceCount += (long)f;
                switch (((i9 >>> 1) % 10) + 27) {
                case 27:
                    for (i10 = 1; 2 > i10; i10++) {
                        if (b) continue;
                    }
                    break;
                case 28:
                    i11 += i7;
                    break;
                case 29:
                    if (b) {
                        byArr[i8 + 1] -= (byte)i8;
                        fArr[i8 - 1] += f;
                        by1 = (byte)4455483991966840042L;
                    } else {
                        Test.bArrFld[i6 - 1] = false;
                    }
                    break;
                case 30:
                    i4 >>>= Test.iFld;
                    break;
                case 31:
                    Test.dArrFld[i8 + 1] -= by1;
                    break;
                case 32:
                    Test.instanceCount -= (long)f;
                    break;
                case 33:
                    Test.iFld += (i8 * i11);
                case 34:
                    i11 = (int)Test.instanceCount;
                case 35:
                    Test.iFld = (int)Test.dFld;
                    break;
                case 36:
                    Test.instanceCount += (i8 ^ i8);
                    break;
                default:
                    if (i10 != 0) {
                        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 +
                            i11 + by1 + FuzzerUtils.checkSum(byArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + by1 +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1) {

        int i2=-4, i3=12, i12=42925, i13=-145;
        float f1=14.57F;
        boolean b1=false;
        byte by2=25;
        short s=-3289;

        for (i2 = 5; i2 < 315; i2++) {
            Test.iArrFld[i2] = -56;
            Test.iFld -= Test.iFld;
            switch ((i2 % 3) + 23) {
            case 23:
                vMeth1(Test.iFld, f1, i2);
                break;
            case 24:
                b1 = b1;
                Test.iArrFld = Test.iArrFld;
                break;
            case 25:
                switch (((10447 >>> 1) % 10) + 99) {
                case 99:
                    i = i1;
                case 100:
                    Test.instanceCount += Test.iFld;
                    break;
                case 101:
                    Test.instanceCount += (((i2 * Test.iFld) + i1) - i);
                case 102:
                    Test.dFld -= by2;
                    for (i12 = 1; 5 > i12; ++i12) {
                        i13 |= (int)Test.instanceCount;
                        by2 += (byte)f1;
                    }
                    break;
                case 103:
                    i13 = (int)Test.instanceCount;
                    break;
                case 104:
                    Test.iFld += (((i2 * by2) + i3) - i12);
                case 105:
                    Test.iFld *= i13;
                    break;
                case 106:
                    Test.iArrFld[i2 - 1] >>= i13;
                    break;
                case 107:
                    s += (short)(i2 * i2);
                    break;
                case 108:
                    i13 += i2;
                    break;
                }
                break;
            default:
                i3 += (((i2 * i) + i3) - i13);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + by2 + i12 + i13 + s;
    }

    public static long lMeth(byte by, long l) {

        int i14=8163, i15=-10;
        float fArr1[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr1, -113.298F);
        FuzzerUtils.init(lArr, -4189L);

        vMeth(Test.iFld, Test.iFld);
        if (Test.bFld) {
            Test.iFld *= Test.iFld;
            for (i14 = 10; i14 < 315; ++i14) {
                i15 += (int)(-2.680F + (i14 * i14));
                fArr1[i14] = i14;
                l += Test.iFld;
                switch ((i14 % 7) + 19) {
                case 19:
                    i15 <<= Test.iFld;
                    Test.iFld <<= -12;
                    Test.iArrFld[i14] &= Test.iFld;
                    Test.iArrFld[i14] = 20408;
                    break;
                case 20:
                    Test.iFld += (i14 - Test.instanceCount);
                    Test.iFld = Test.iFld;
                    Test.iFld >>>= i14;
                    break;
                case 21:
                    Test.instanceCount >>= i14;
                case 22:
                    i15 = i15;
                case 23:
                    Test.dFld = Test.fFld;
                    break;
                case 24:
                    if (false) break;
                    break;
                case 25:
                    lArr[i14 + 1][i14 - 1] = i14;
                }
            }
        } else {
            Test.iArrFld[(i15 >>> 1) % N] = i15;
        }
        long meth_res = by + l + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=2, i18=41, i19=-224, i20=-34455, i21=-52944, i22=71, i23=45419, i24=-5, i25=9;
        long l1=3872354798L, lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 5064655396128691738L);

        bArr = bArr;
        Test.dArrFld[(Test.iFld >>> 1) % N] = ((Test.iFld * Test.iFld) - (Test.iFld * lMeth(byFld,
            Test.instanceCount)));
        Test.iArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        try {
            for (i17 = 289; 15 < i17; --i17) {
                for (i19 = 5; i19 < 92; ++i19) {
                    Test.iArrFld[i19 - 1] += sFld;
                    for (i21 = 1; i21 < 2; ++i21) {
                        i20 += i21;
                        i18 = (int)Test.fFld;
                        Test.fFld += (0 + (i21 * i21));
                        Test.iArrFld[i17 + 1] |= Test.iFld;
                        Test.fArrFld[i21] += Test.iFld;
                        i20 += i21;
                        i18 -= i23;
                        i23 += (((i21 * Test.fFld) + i21) - Test.instanceCount);
                        if (Test.bFld) continue;
                    }
                    switch (((i17 % 4) * 5) + 127) {
                    case 136:
                        Test.dArrFld[i19] -= Test.iFld;
                        break;
                    case 145:
                    case 129:
                        Test.iFld += i19;
                        for (i24 = i17; 2 > i24; ++i24) {
                            Test.instanceCount >>= -11L;
                            if (true) continue;
                            Test.instanceCount += sFld;
                        }
                        i25 |= -27948;
                    case 140:
                        i23 >>>= i21;
                        switch (((i23 >>> 1) % 5) + 100) {
                        case 100:
                        case 101:
                            lArr1[i19 - 1] *= i23;
                            l1 = i18;
                            Test.fFld -= i24;
                            break;
                        case 102:
                            l1 <<= i21;
                        case 103:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 104:
                            l1 = 0;
                            break;
                        }
                        break;
                    default:
                        Test.fFld -= i22;
                    }
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            i23 = i22;
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
