package tests.javafuzzer2811;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 20:45:44 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-11L;
    public static int iFld=-70;
    public static byte byFld=-127;
    public static boolean bFld=false;
    public static double dFld=-61.83844;

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {


        Test.iFld = Test.iFld;
        long meth_res = l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i3=-60, i4=-87, i5=178, i6=-5, i7=57727, i8=-55181, iArr[]=new int[N];
        float f=1.354F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 2549);
        FuzzerUtils.init(dArr, -80.17310);

        Test.iFld >>= iMeth(Test.instanceCount);
        Test.instanceCount >>>= 6997;
        for (i3 = 18; 394 > i3; ++i3) {
            for (i5 = 1; 4 > i5; i5++) {
                switch ((((i5 >>> 1) % 8) * 5) + 87) {
                case 105:
                    for (i7 = 1; i7 < 2; i7++) {
                        Test.instanceCount *= Test.byFld;
                        Test.bFld = Test.bFld;
                        iArr = iArr;
                        switch ((i3 % 8) + 55) {
                        case 55:
                            i4 += (i7 - i6);
                            i6 *= (int)Test.dFld;
                            dArr[i5 + 1] %= -5.410F;
                            break;
                        case 56:
                            iArr[i3] += i7;
                            break;
                        case 57:
                            Test.instanceCount += (i7 ^ i3);
                            break;
                        case 58:
                            i6 += (int)Test.instanceCount;
                        case 59:
                            Test.byFld = (byte)Test.iFld;
                        case 60:
                            i6 += i7;
                            break;
                        case 61:
                            i6 += (((i7 * f) + Test.iFld) - Test.iFld);
                            break;
                        case 62:
                            if (Test.bFld) continue;
                            break;
                        }
                    }
                case 97:
                case 119:
                    i8 -= Test.iFld;
                    break;
                case 91:
                case 95:
                    Test.instanceCount = Test.iFld;
                    break;
                case 103:
                    try {
                        Test.iFld = (i4 / iArr[i3]);
                        i4 = (iArr[i3 - 1] % -2058);
                        Test.iFld = (i4 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                case 117:
                    i6 += (i5 - Test.iFld);
                    break;
                case 118:
                    iArr[i5 + 1] /= (int)((long)(Test.dFld) | 1);
                    break;
                default:
                    Test.iFld -= (int)-66.268F;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(int i, int i1, int i2) {

        int i9=9, i10=29508, i11=0, iArr1[]=new int[N];
        short s=25812;
        float f1=-66.960F;
        long l1=-14L;

        FuzzerUtils.init(iArr1, -59850);

        vMeth();
        i2 *= (int)1.562F;
        i2 *= (int)Test.dFld;
        for (i9 = 9; i9 < 294; ++i9) {
            Test.instanceCount += (((i9 * i10) + i9) - i9);
            Test.iFld += (((i9 * i1) + Test.byFld) - Test.iFld);
            switch (((i9 % 9) * 5) + 78) {
            case 114:
            case 110:
                if (i != 0) {
                }
            case 94:
                iArr1[i9 - 1] -= s;
                i10 = -2151;
                for (f1 = 1; f1 < 6; ++f1) {
                    l1 = 1;
                    while (++l1 < 2) {
                        Test.instanceCount = i9;
                        Test.instanceCount += (((l1 * i11) + i10) - l1);
                        Test.instanceCount = l1;
                    }
                }
                break;
            case 85:
                Test.instanceCount -= (long)2.899F;
                break;
            case 102:
                i1 -= (int)Test.instanceCount;
                break;
            case 97:
                i1 = (int)l1;
                break;
            case 98:
                i += i1;
                break;
            case 113:
                Test.iFld += (((i9 * i9) + s) - i);
                break;
            case 89:
                Test.dFld = l1;
                break;
            default:
                if (i1 != 0) {
                }
            }
        }
        long meth_res = i + i1 + i2 + i9 + i10 + s + Float.floatToIntBits(f1) + i11 + l1 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=63.810F;
        int i12=-26801, i13=-32389, i14=-159, i15=4, i16=-90, i17=-61764, i18=-178, iArr2[]=new int[N];
        long l2=1290084590L;

        FuzzerUtils.init(iArr2, -9);

        Test.iFld *= (int)((lMeth(Test.iFld, Test.iFld, Test.iFld) ^ Test.iFld) - f2);
        Test.iFld -= Test.iFld;
        i12 = 1;
        do {
            Test.iFld -= (int)Test.instanceCount;
            iArr2[i12] -= (int)-5273027354124845833L;
            for (l2 = 5; 85 > l2; l2++) {
                i13 -= i12;
                i13 = Test.iFld;
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount += (long)f2;
                    i15 -= i12;
                }
            }
            i16 = 85;
            while (--i16 > 0) {
                switch (((i16 % 10) * 5) + 59) {
                case 61:
                    f2 = l2;
                    Test.iFld += 162;
                    Test.instanceCount = i14;
                case 97:
                    for (i17 = 1; i17 < 1; ++i17) {
                        Test.instanceCount = l2;
                        i13 += i17;
                        i13 += Test.byFld;
                        i13 *= (int)Test.instanceCount;
                        i15 = -14;
                        if (false) {
                            f2 -= i13;
                        } else {
                            i13 = Test.iFld;
                            iArr2[i12 + 1] = i14;
                        }
                        Test.byFld += (byte)(((i17 * i14) + Test.byFld) - f2);
                        i13 = (int)Test.dFld;
                    }
                    iArr2[i16 - 1] *= i12;
                    i15 *= (int)-87.302F;
                    break;
                case 80:
                    i18 += (i16 * i16);
                    break;
                case 77:
                    Test.instanceCount -= (long)45.742F;
                    break;
                case 102:
                    i18 *= Test.iFld;
                    break;
                case 88:
                    i15 /= (int)1.41260;
                case 105:
                    i15 += (i16 * l2);
                    break;
                case 65:
                    Test.byFld += (byte)(8622 + (i16 * i16));
                case 71:
                    i18 = i13;
                case 106:
                    Test.instanceCount += i16;
                default:
                    Test.instanceCount += i15;
                }
            }
        } while (++i12 < 297);


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
