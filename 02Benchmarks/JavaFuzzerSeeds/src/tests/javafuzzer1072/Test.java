package tests.javafuzzer1072;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 14:04:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62454L;
    public static float fFld=-2.991F;
    public static long lFld=-14L;
    public short sFld=-30178;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=203, i4=17644, i5=-9, i6=60110, i7=242, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 97.678F);
        FuzzerUtils.init(iArr, 5982);

        for (i3 = 3; i3 < 353; i3++) {
            i5 = 1;
            while (++i5 < 5) {
                i4 = i3;
                i4 = i3;
            }
            i4 |= i5;
            for (i6 = 1; i6 < 5; ++i6) {
                Test.instanceCount *= i7;
            }
            i7 = i6;
            Test.instanceCount += (((i3 * Test.fFld) + i4) - Test.instanceCount);
        }
        iArr[(i4 >>> 1) % N] = (int)Test.fFld;
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i8=36871, i9=41894, i10=60734, i11=46956, i12=98, i13=-6;
        short s=23923;
        double d=1.83606;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2125507716083588023L);

        i1 = iMeth();
        i1 = i2;
        for (i8 = 8; i8 < 164; i8++) {
            i2 = i9;
            for (i10 = 1; 10 > i10; i10++) {
                i11 += (i10 * i11);
                switch (((i11 >>> 1) % 2) + 26) {
                case 26:
                    for (i12 = 1; i12 < 2; i12++) {
                        byte by=120;
                        s >>>= (short)Test.instanceCount;
                        by += (byte)d;
                        by += (byte)(i12 ^ i1);
                        Test.fFld += i11;
                        Test.instanceCount <<= i8;
                        i11 >>>= i1;
                    }
                    if (i10 != 0) {
                        vMeth_check_sum += i1 + i2 + i8 + i9 + i10 + i11 + i12 + i13 + s + Double.doubleToLongBits(d) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                case 27:
                    lArr[i8 + 1] = Test.lFld;
                    break;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i8 + i9 + i10 + i11 + i12 + i13 + s + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i) {


        vMeth(i, i);
        Test.lFld >>= 8208148137160514081L;
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i14=-34336, i15=-61041, i16=-224, i17=-222, i18=-106, i19=9, i20=-24997, i21=3511, i22=-13, i23=49784,
            i24=0, i25=-25328;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 104.134F);

        for (int smallinvoc=0; smallinvoc<536; smallinvoc++) vSmallMeth(i14);
        i14 = (int)Test.lFld;
        i14 >>= (int)-63L;
        for (i15 = 1; i15 < 335; i15 += 3) {
            for (i17 = 1; 226 > i17; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    double d1=-76.6667;
                    fArr1[i17 - 1] -= i14;
                    i18 >>>= i18;
                    i20 *= (int)d1;
                    i14 += (int)Test.instanceCount;
                    i18 = i17;
                    i16 += (((i19 * i16) + i18) - i20);
                    Test.instanceCount -= i15;
                }
            }
            sFld += (short)i15;
            i20 += (i15 * Test.lFld);
            i14 = i19;
            i21 = 226;
            do {
                i18 = (int)Test.lFld;
                for (i22 = i21; 1 > i22; ++i22) {
                    i20 = -7;
                    iArrFld[i15] += i17;
                }
                for (i24 = 1; i24 < 1; ++i24) {
                    Test.fFld += Test.instanceCount;
                    i25 <<= i20;
                    i14 += (i24 | (long)Test.fFld);
                    try {
                        i16 = (iArrFld[i15 + 1] % 32870);
                        i23 = (i23 / i15);
                        i18 = (-212 / i15);
                    } catch (ArithmeticException a_e) {}
                    i18 <<= i23;
                    i14 += (((i24 * i22) + Test.fFld) - i17);
                    i25 -= i15;
                    i18 *= i24;
                }
            } while (--i21 > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
