package tests.javafuzzer2238;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 10:46:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-41183L;
    public static boolean bFld=false;
    public static short sFld=-31613;
    public static volatile boolean bFld1=true;
    public float fFld=-53.94F;
    public static volatile byte byFld=-59;
    public int iFld=-22;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 106);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, short s, int i9) {

        int i10=-64, i11=-50395, i12=9, i13=-5, i14=146;
        double d=-48.85862;
        float f=1.124F;

        i10 = 268;
        do {
            for (i11 = i10; i11 < 6; i11 += 2) {
                d *= i11;
                i9 = i12;
                i8 = -231;
                for (i13 = i10; 1 > i13; ++i13) {
                    Test.instanceCount += (((i13 * i12) + Test.instanceCount) - Test.instanceCount);
                    if (Test.bFld) break;
                    s ^= (short)i8;
                    i9 = (int)f;
                    i9 += -127;
                    Test.instanceCount *= i13;
                    i12 = (int)Test.instanceCount;
                    i12 += (((i13 * i14) + i11) - i13);
                    i9 = (int)Test.instanceCount;
                }
            }
        } while (--i10 > 0);
        vMeth1_check_sum += i8 + s + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 +
            Float.floatToIntBits(f);
    }

    public static long lMeth(boolean b, int i5, int i6) {

        int i7=7, i15=59813, i16=113, i17=-2, i18=2743, i19=-35425, i20=-52, iArr[]=new int[N];
        float f1=70.143F;
        double d1=78.114491;

        FuzzerUtils.init(iArr, -35810);

        Test.instanceCount += i6;
        i7 = 1;
        do {
            long l=2L;
            vMeth1(i7, Test.sFld, -6);
            i5 = (int)l;
            i6 = i5;
            for (i15 = 1; i15 < 11; i15++) {
                i5 = (int)l;
            }
            for (i17 = 11; i17 > 1; i17--) {
                i16 = i7;
            }
            i6 -= (int)f1;
            for (i19 = 1; 11 > i19; i19++) {
                iArr[i19] -= (int)d1;
                i16 += (int)l;
                l -= 45;
            }
            i18 >>= (int)Test.instanceCount;
        } while (++i7 < 149);
        long meth_res = (b ? 1 : 0) + i5 + i6 + i7 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) + i19 + i20 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=-100, i4=69, i21=-14, i22=-114, i23=-14, i24=23615, i25=-209, iArr1[][]=new int[N][N], iArr2[]=new
            int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2009124333L);
        FuzzerUtils.init(iArr1, 31);
        FuzzerUtils.init(iArr2, 3);

        for (i3 = 11; 348 > i3; ++i3) {
            lArr[i3 + 1] ^= lMeth(Test.bFld1, i3, i21);
            iArr1[i3 - 1][i3] = Test.sFld;
            i4 += (int)-53899L;
            for (i22 = i3; 5 > i22; i22++) {
                Test.instanceCount <<= i4;
                Test.instanceCount >>= i3;
                Test.instanceCount = Test.sFld;
                for (i24 = 1; i24 > 1; i24--) {
                    i25 >>= (int)Test.instanceCount;
                    i21 += i25;
                    i21 &= i4;
                    i2 += (i24 | i21);
                    try {
                        i4 = (i3 % -118);
                        i4 = (23 / i22);
                        iArr2[i24 - 1] = (i3 % i25);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = 11;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-20, i1=-3, i26=47150, i27=13, i28=33444, i29=-68, i30=13, i31=2, i32=33, i33=13;
        double d2=1.56241, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-25);
        FuzzerUtils.init(dArr, -119.87058);

        for (i = 14; 372 > i; i++) {
            vMeth(i);
            Test.iArrFld[i - 1] <<= i;
            i1 <<= i1;
        }
        fFld += -8.415F;
        Test.iArrFld[(i1 >>> 1) % N] -= i1;
        if (Test.bFld1) {
            i1 = (int)257030959L;
        } else {
            i1 >>= i1;
            i26 = 1;
            do {
                for (i27 = 7; i27 < 128; i27++) {
                    i1 -= i26;
                    fFld -= -2099567130670280301L;
                    i1 += (i27 * i27);
                    Test.instanceCount >>= i28;
                    for (i29 = 1; i29 < 2; ++i29) {
                        Test.instanceCount = i27;
                        i30 = i30;
                        i31 -= (int)fFld;
                        Test.iArrFld[i29 + 1] = (int)Test.instanceCount;
                        Test.instanceCount += i29;
                        byArr[i29] = (byte)fFld;
                        Test.iArrFld[i27 - 1] = (int)Test.instanceCount;
                        Test.instanceCount = 12;
                        dArr[i26] *= Test.byFld;
                    }
                    iFld <<= (int)Test.instanceCount;
                    for (i32 = 1; i32 < 2; i32 += 3) {
                        Test.instanceCount -= i27;
                    }
                    i33 /= -226;
                    d2 = i27;
                }
            } while (++i26 < 196);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
