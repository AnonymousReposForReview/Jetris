package tests.javafuzzer2330;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:38:38 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-214L;
    public static float fFld=-25.255F;
    public static boolean bFld=true;
    public int iFld=149;
    public static double dFld=0.125433;
    public static long lFld=29466L;
    public static volatile int iFld1=4;
    public int iFld2=-71;
    public static short sArrFld[][]=new short[N][N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)13787);
        FuzzerUtils.init(Test.iArrFld, 134);
        FuzzerUtils.init(Test.fArrFld, 1.946F);
        FuzzerUtils.init(Test.dArrFld, -1.1421);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        int i6=-165, i7=-13493, i8=52602, i9=11, i10=-15860;
        short s=29527;
        boolean b=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 2.274F);

        switch (((i3 >>> 1) % 1) + 88) {
        case 88:
            i6 = 1;
            while (++i6 < 215) {
                Test.sArrFld[i6][i6] = (short)i3;
                for (i7 = 1; i7 < 7; i7++) {
                    i4 += (int)Test.instanceCount;
                    fArr1[i7 - 1] += Test.instanceCount;
                    for (i9 = i7; 2 > i9; i9++) {
                        Test.instanceCount += i7;
                        i3 = s;
                    }
                    Test.instanceCount <<= i8;
                    i8 &= 14159;
                    if (i5 != 0) {
                        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + s + (b ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                    Test.iArrFld[i6] -= i8;
                    b = b;
                    if (i4 != 0) {
                        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + s + (b ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                }
            }
        default:
            i3 -= i6;
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + s + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(long l, long l1, long l2) {

        int i11=-3, i12=-132, i13=56305, i14=14, i15=-174, i16=3, i17=5833;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -94.14235);

        vMeth2(13, i11, i11);
        for (i12 = 13; i12 < 309; i12++) {
            dArr[i12 - 1] *= i13;
            for (i14 = 1; i14 < 6; ++i14) {
                short s1=14643;
                if (b1) {
                    i15 *= 2;
                    s1 += (short)l;
                    if (b1) {
                        for (i16 = 1; 2 > i16; ++i16) {
                            i15 &= -134;
                            i13 += (i16 * i16);
                            l += (i16 * i16);
                            i13 = i17;
                            i11 = (int)l1;
                            l1 = i17;
                        }
                    }
                    vMeth1_check_sum += l + l1 + l2 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            }
        }
        vMeth1_check_sum += l + l1 + l2 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i, int i1, double d) {

        int i2=65260, i18=-3, i19=-24693, i20=-1;
        byte by=105;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 3761916830L);
        FuzzerUtils.init(fArr, -85.211F);

        lArr[(i >>> 1) % N] = i1;
        fArr[(i1 >>> 1) % N] -= Integer.reverseBytes(++i1);
        i2 = 1;
        do {
            d /= ((++i1) | 1);
            i = (int)(Math.max((long)(-(d - i)), Test.instanceCount++) * (++i));
            switch ((i2 % 5) + 36) {
            case 36:
                vMeth1(Test.instanceCount, Test.instanceCount, -1L);
                for (i18 = 4; 1 < i18; i18 -= 3) {
                    Test.fFld -= i;
                    i += (((i18 * i18) + i19) - i2);
                    i20 = 1;
                    while (++i20 < 4) {
                        by += (byte)i18;
                        if (Test.bFld) {
                            by += (byte)(i20 * i20);
                            Test.iArrFld[i20] += (int)Test.instanceCount;
                        } else if (Test.bFld) {
                            Test.instanceCount -= (long)d;
                        } else {
                            by *= (byte)i19;
                        }
                    }
                }
                break;
            case 37:
                if (i18 != 0) {
                    vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i18 + i19 + i20 + by +
                        FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            case 38:
                Test.fFld += (((i2 * i1) + i19) - Test.instanceCount);
            case 39:
                i19 = i;
                break;
            case 40:
                i *= -200;
                break;
            default:
                by += (byte)(((i2 * by) + i) - i2);
            }
        } while (++i2 < 383);
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i18 + i19 + i20 + by + FuzzerUtils.checkSum(lArr)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=8223, i22=-50597, i23=202, i24=-1, i25=-15730;
        byte by1=127, byArr[]=new byte[N];
        short s2=27691;

        FuzzerUtils.init(byArr, (byte)89);

        vMeth(iFld, i21, Test.dFld);
        Test.dFld *= iFld;
        for (i22 = 6; i22 < 173; i22++) {
            Test.fFld *= Test.instanceCount;
            iFld = (int)Test.instanceCount;
            Test.iArrFld[i22] += (int)Test.lFld;
            iFld -= i21;
            Test.fArrFld[i22 - 1] -= i22;
            Test.fFld += i21;
            Test.instanceCount *= by1;
            Test.fFld %= ((long)(Test.dFld) | 1);
        }
        Test.dFld = Test.fFld;
        Test.iArrFld[(11 >>> 1) % N] = 7;
        i21 = (int)Test.lFld;
        Test.iArrFld[(Test.iFld1 >>> 1) % N] = (int)Test.fFld;
        Test.dFld *= Test.lFld;
        Test.fFld = i23;
        for (i24 = 9; i24 < 227; ++i24) {
            iFld += by1;
            switch ((((iFld >>> 1) % 10) * 5) + 58) {
            case 85:
                by1 += (byte)i24;
                lArrFld[i24 + 1] |= i22;
                break;
            case 98:
                i23 += i24;
                Test.iFld1 *= s2;
                i23 >>= i23;
                i21 = -62142;
                break;
            case 92:
                i23 = iFld2;
                iFld2 *= (int)Test.lFld;
                break;
            case 69:
                Test.dArrFld[i24 + 1] += Test.lFld;
                Test.lFld ^= Test.lFld;
                break;
            case 79:
                try {
                    Test.iArrFld[i24] = (iFld2 % Test.iFld1);
                    iFld2 = (Test.iArrFld[i24 - 1] % Test.iArrFld[i24 + 1]);
                    iFld = (i24 / 1809545198);
                } catch (ArithmeticException a_e) {}
                break;
            case 62:
                Test.iArrFld[i24 - 1] = Test.iFld1;
            case 83:
                byArr[i24] &= (byte)Test.lFld;
                break;
            case 104:
                Test.instanceCount *= -4;
                break;
            case 90:
                by1 += (byte)(i24 * i24);
            case 96:
                Test.iFld1 += (int)Test.fFld;
            default:
                lArrFld[i24 - 1] = by1;
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
