package tests.javafuzzer1451;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 20:50:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1050913857L;
    public static int iFld=-111;
    public static boolean bFld=true;
    public float fFld=2.376F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=10, i8=52434, i9=-4, i10=-11, i11=-37476;
        float f=124.764F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(fArr, 2.122F);

        for (i7 = 145; 9 < i7; i7--) {
            if (b) {
                i9 = 1;
                while (++i9 < 12) {
                    for (i10 = 1; i10 < 1; ++i10) {
                        short s=-9739;
                        i11 += (120 + (i10 * i10));
                        f -= 29806;
                        i8 += 13;
                        Test.instanceCount *= Test.instanceCount;
                        Test.iFld += s;
                        if (b) break;
                        Test.instanceCount <<= Test.iFld;
                        Test.instanceCount = 10;
                        Test.iArrFld[i9 - 1] &= i11;
                        fArr[i7 - 1] = i10;
                    }
                }
            } else if (b) {
                Test.instanceCount -= (long)82.371F;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, byte by, int i3) {

        int i4=8, i5=-41972, i6=-219, i14=48, i15=13, i16=193, i17=-224, i18=-61901, i19=26396;
        double d1=120.13846;

        for (i4 = 339; 6 < i4; i4 -= 3) {
            Test.instanceCount -= (++i3);
            i6 = 1;
            do {
                d1 += ((--i2) + Test.iFld);
            } while (++i6 < 14);
            i5 = iMeth();
            for (i14 = i4; 14 > i14; i14 += 3) {
                if (Test.bFld) break;
                for (i16 = i14; i16 < 1; i16++) {
                    Test.instanceCount = Test.iFld;
                    try {
                        i17 = (i4 % Test.iArrFld[i14]);
                        Test.iArrFld[i4 - 1] = (Test.iArrFld[i14 + 1] / Test.iArrFld[i14 + 1]);
                        i3 = (i3 / i6);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = by;
                    i3 *= Test.iFld;
                }
                for (i18 = 1; i18 < 1; ++i18) {
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += i2 + by + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i14 + i15 + i16
                            + i17 + i18 + i19;
                        return;
                    }
                    i2 /= 7;
                }
            }
        }
        vMeth1_check_sum += i2 + by + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + i18 +
            i19;
    }

    public static void vMeth() {

        byte by1=16;
        int i20=198;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -92.266F);

        vMeth1(Test.iFld, by1, Test.iFld);
        i20 = 1;
        do {
            Test.iFld %= (int)(Test.instanceCount | 1);
            Test.iFld >>= i20;
            Test.instanceCount += i20;
            fArr1[i20] += i20;
        } while (++i20 < 126);
        Test.iFld = (int)-2351395739074285045L;
        vMeth_check_sum += by1 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        double d=2.119472, dArr[]=new double[N];
        int i=-58181, i1=7974, i21=13, i22=3, i23=805, i24=-100, i25=17205, i26=-7, i27=56, i28=-7;
        short s1=6449;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 2.2582);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -1L);

        d = 1;
        do {
            Test.iFld |= Test.iArrFld[(int)(d - 1)];
            Test.iFld += (int)d;
            Test.iFld = (int)(++Test.instanceCount);
            for (i = 3; i < 99; ++i) {
                vMeth();
                i1 *= (int)d;
                fFld += i;
                Test.iArrFld[i - 1] += (int)Test.instanceCount;
                Test.iArrFld[i - 1] <<= 6;
                i1 >>= (int)Test.instanceCount;
                dArr[(int)(d + 1)] -= Test.instanceCount;
                bArr[i] = Test.bFld;
            }
            for (i21 = 1; i21 < 99; ++i21) {
                i22 = i1;
                for (i23 = i21; 2 > i23; ++i23) {
                    Test.iFld += 59719;
                    i1 += s1;
                }
            }
            s1 &= (short)13L;
            Test.instanceCount |= i21;
            for (i25 = 4; 99 > i25; i25++) {
                for (i27 = 1; i27 < 2; i27++) {
                    if (Test.bFld) continue;
                    if (Test.bFld) continue;
                    i26 += i;
                    lArr[(int)(d + 1)] = i24;
                    fFld -= i25;
                    i1 += (((i27 * i) + i26) - i27);
                    i22 *= 11;
                }
                i26 >>= -8;
            }
        } while (++d < 255);

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
