package tests.javafuzzer3293;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Sep  1 05:40:12 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2L;
    public static int iFld=46634;
    public float fFld=-2.10F;
    public static int iFld1=10;
    public short sFld=4328;
    public volatile byte byFld=126;
    public int iFld2=-27620;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 126.584F);
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.dArrFld, -117.77838);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by, int i4, int i5) {

        int i6=-66, i7=0, i8=-48156, i9=-6, i10=-4, i11=14, iArr[]=new int[N];
        float f1=-2.369F;
        boolean b=false;
        short s=-8180, sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(sArr, (short)-29570);
        FuzzerUtils.init(lArr1, -23581L);

        for (i6 = 7; 159 > i6; i6++) {
            iArr[i6] -= i4;
            f1 = (float)-1.111722;
            for (i8 = 10; i6 < i8; i8 -= 2) {
                for (i10 = i6; i10 < 1; i10 += 3) {
                    f1 = by;
                    if (b) continue;
                }
                switch (((i11 >>> 1) % 9) + 72) {
                case 72:
                    i4 -= i7;
                    break;
                case 73:
                    sArr[i6] = (short)i7;
                    if (i7 != 0) {
                        vMeth2_check_sum += by + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 +
                            (b ? 1 : 0) + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    break;
                case 74:
                    if (b) break;
                    lArr1[i6] = i6;
                    break;
                case 75:
                    Test.instanceCount >>= -21;
                    i9 += s;
                case 76:
                    iArr[i6] = (int)244L;
                case 77:
                    Test.instanceCount *= Test.instanceCount;
                    break;
                case 78:
                    i4 = i4;
                    break;
                case 79:
                    i4 = (int)Test.instanceCount;
                    break;
                case 80:
                    f1 -= i10;
                }
            }
        }
        vMeth2_check_sum += by + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + (b ? 1 : 0) + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(int i1, int i2, int i3) {

        byte by1=116;
        short s1=-15099;
        int i12=-37758, i13=-39048, i14=50, i15=-5722, i16=124, i17=232;
        double d=0.83333;

        vMeth2(by1, i1, i2);
        Test.fArrFld[(i1 >>> 1) % N] += Test.instanceCount;
        i2 = s1;
        i1 -= i3;
        for (i12 = 1; 153 > i12; i12++) {
            Test.instanceCount += (i12 - Test.instanceCount);
        }
        for (i14 = 376; i14 > 23; --i14) {
            float f2=-92.250F;
            Test.iArrFld[i14 + 1] = i2;
            f2 += (((i14 * Test.instanceCount) + s1) - Test.instanceCount);
            for (i16 = 1; 5 > i16; i16++) {
                i15 = i15;
                i15 >>= i16;
                f2 = i15;
                Test.fArrFld[i16] = (float)d;
            }
            Test.dArrFld[i14 - 1] += d;
        }
        vMeth1_check_sum += i1 + i2 + i3 + by1 + s1 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d);
    }

    public static void vMeth(int i, float f) {

        int i18=-227, i19=72, i20=0, i21=-10244;
        byte by2=127, by3=120;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 37792L);

        i += (int)(-11 + (lArr[(4 >>> 1) % N][(-14140 >>> 1) % N] & (Test.instanceCount >>> Test.instanceCount)));
        Test.instanceCount = -6;
        vMeth1(i, i, -254);
        i += (int)121.441F;
        i += i;
        Test.fArrFld[(i >>> 1) % N] -= Test.instanceCount;
        for (i18 = 5; 202 > i18; i18++) {
            lArr[i18 - 1][i18 + 1] -= 8L;
            Test.iArrFld = Test.iArrFld;
            for (i20 = 1; i20 < 8; i20++) {
                i21 *= by2;
                Test.instanceCount = i18;
                i21 += i20;
                i21 = i19;
                Test.instanceCount = by3;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i18 + i19 + i20 + i21 + by2 + by3 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i22=49335, i23=-60134, i24=-1, i25=64317, i26=-11, i27=-8, i28=-106, i29=7, i30=-49448;

        vMeth(Test.iFld, fFld);
        fFld *= -55;
        Test.instanceCount += Test.iFld;
        for (i22 = 15; i22 < 258; ++i22) {
            Test.iArrFld[i22] = Test.iFld1;
            switch (((-1 >>> 1) % 2) + 115) {
            case 115:
                Test.iFld1 += (((i22 * Test.instanceCount) + Test.instanceCount) - sFld);
                Test.iFld1 += (i22 - Test.iFld);
                break;
            case 116:
                Test.iFld1 = (int)3816044241914394976L;
                Test.iFld += (int)Test.instanceCount;
                Test.iFld1 += i22;
                i24 ^= Test.iFld1;
                break;
            }
            Test.iFld1 *= Test.iFld;
            i23 += (7 + (i22 * i22));
            Test.iArrFld = Test.iArrFld;
            for (i25 = 4; i25 < 103; i25++) {
                sFld -= byFld;
                for (i27 = i22; i27 < 2; i27++) {
                    Test.iArrFld[i25 + 1] = i24;
                }
                i28 += i25;
                i28 <<= i27;
                for (i29 = 1; 2 > i29; i29++) {
                    switch ((i25 % 7) + 60) {
                    case 60:
                    case 61:
                        iFld2 = 11;
                        i28 <<= Test.iFld;
                    case 62:
                        sArrFld[i22 + 1] = (short)i22;
                    case 63:
                        Test.iArrFld[i29 + 1] += i30;
                        break;
                    case 64:
                        if (true) break;
                        Test.instanceCount *= (long)-118.274F;
                    case 65:
                        try {
                            iFld2 = (i28 % i28);
                            Test.iFld = (-290503355 % i25);
                            Test.iFld = (-165 % i27);
                        } catch (ArithmeticException a_e) {}
                    case 66:
                        i28 += (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
