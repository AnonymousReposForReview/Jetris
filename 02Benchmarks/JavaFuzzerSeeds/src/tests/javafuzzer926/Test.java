package tests.javafuzzer926;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 11:49:53 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7771L;
    public static boolean bFld=false;
    public static float fFld=91.1002F;
    public static short sFld=16548;
    public double dFld=75.455;
    public static double dArrFld[][]=new double[N][N];
    public static short sArrFld[]=new short[N];
    public volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -61.114512);
        FuzzerUtils.init(Test.sArrFld, (short)6050);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, long l, long l1) {

        byte by=-78;
        float f=-35.838F;
        long l2=209L, lArr[]=new long[N];
        int i8=51085, i9=-96, iArr1[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 120L);
        FuzzerUtils.init(iArr1, 2);

        by -= (byte)62434;
        f += l;
        for (l2 = 5; l2 < 199; l2++) {
            i9 = 1;
            do {
                switch ((int)((l2 % 7) + 101)) {
                case 101:
                    i8 -= i8;
                    break;
                case 102:
                    i8 += (i9 * i9);
                    break;
                case 103:
                    i8 *= i8;
                    by = (byte)i8;
                    switch (((i9 % 5) * 5) + 41) {
                    case 62:
                        i8 -= i9;
                        f = i9;
                        f = f;
                        break;
                    case 42:
                        f += 134;
                        bArr[(i9 >>> 1) % N] = b;
                        break;
                    case 60:
                        by <<= (byte)i9;
                        break;
                    case 65:
                        i8 >>>= i8;
                    case 56:
                        bArr[(int)(l2 - 1)] = b;
                        break;
                    }
                    break;
                case 104:
                case 105:
                    l1 *= i8;
                    break;
                case 106:
                    if (b) continue;
                    break;
                case 107:
                    lArr[i9] >>= 4;
                    break;
                default:
                    iArr1[(int)(l2 - 1)] = (int)Test.instanceCount;
                }
            } while (++i9 < 8);
        }
        vMeth2_check_sum += (b ? 1 : 0) + l + l1 + by + Float.floatToIntBits(f) + l2 + i8 + i9 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i4=40091, i5=5, i6=-9, i7=-231, i10=-15, i11=5, i12=27248, i13=-17463;
        boolean b1=false;
        double d=-1.9848;
        float f1=-64.638F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 13L);

        for (i4 = 15; i4 < 353; ++i4) {
            if (false) {
                for (i6 = 1; i6 < 5; ++i6) {
                    vMeth2(b1, -224L, Test.instanceCount);
                    Test.instanceCount += i6;
                }
            } else {
                i7 = (int)1010816951L;
                for (i10 = 1; 5 > i10; i10++) {
                    if (b1) continue;
                    if (true) continue;
                    d = i5;
                    lArr1 = lArr1;
                }
                for (i12 = 5; i12 > 1; i12 -= 2) {
                    if (i6 != 0) {
                        vMeth1_check_sum += i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + i10 + i11 + Double.doubleToLongBits(d) +
                            i12 + i13 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    if (Test.bFld) continue;
                    f1 -= i13;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i2, int i3) {

        int i14=90, i15=107, i16=-23, iArr[]=new int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(lArr2, -156392648379378589L);

        iArr[(-83 >>> 1) % N] = (int)(--Test.instanceCount);
        vMeth1();
        Test.dArrFld[(i2 >>> 1) % N][(i3 >>> 1) % N] = Test.fFld;
        for (long l3 : lArr2) {
            for (i14 = 4; i14 > 1; i14 -= 2) {
                i16 = 1;
                while (++i16 < 4) {
                    switch (((i14 % 6) * 5) + 82) {
                    case 95:
                        i15 -= i16;
                        Test.fFld += (i16 - Test.sFld);
                        i2 += (((i16 * i14) + i14) - l3);
                        i3 = i2;
                        break;
                    case 83:
                        Test.fFld = i3;
                        break;
                    case 102:
                        Test.fFld = i3;
                        Test.sArrFld[i14 - 1] = Test.sFld;
                        if (Test.bFld) break;
                        break;
                    case 104:
                        i3 += i2;
                        break;
                    case 85:
                        Test.fFld = i14;
                    case 108:
                        Test.instanceCount -= i14;
                        break;
                    default:
                        if (true) continue;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-4200, i1=92, i17=-27048, i18=5, i19=247, i20=18713, i21=-39747, i22=-9, i23=1;
        float f2=-96.564F;
        byte by1=-125;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, -1060009750L);

        for (i = 6; i < 334; i += 3) {
            vMeth(i1, i1);
            i1 += (i ^ i);
            for (f2 = 12; 230 > f2; ++f2) {
                iArrFld[(int)(f2)][(int)(f2 + 1)] = i;
                try {
                    iArrFld[i + 1][i + 1] = (32023 % i);
                    i1 = (i1 / iArrFld[(int)(f2)][(int)(f2 + 1)]);
                    i17 = (iArrFld[(int)(f2 - 1)][(int)(f2 - 1)] / -15133);
                } catch (ArithmeticException a_e) {}
                i1 -= i17;
            }
            Test.sFld += (short)(((i * i) + Test.instanceCount) - i17);
            i1 += -7;
            switch (((i % 4) * 5) + 97) {
            case 116:
                for (i18 = i; i18 < 230; ++i18) {
                    switch (((i % 9) * 5) + 111) {
                    case 138:
                        for (i20 = 1; i20 < 1; i20++) {
                            i17 |= i18;
                            Test.instanceCount <<= i20;
                            if (Test.bFld) continue;
                            Test.sFld += (short)(((i20 * i) + Test.instanceCount) - Test.fFld);
                            Test.instanceCount = 14;
                            dFld -= i17;
                            iArrFld[i20 + 1][i - 1] -= i;
                            iArrFld[i + 1][i] -= i20;
                            i17 &= i17;
                            Test.instanceCount += (i20 + i20);
                        }
                        break;
                    case 117:
                        for (i22 = i18; i22 < 1; i22++) {
                            switch (((i18 % 8) * 5) + 24) {
                            case 30:
                                i1 *= (int)Test.fFld;
                                i21 -= (int)Test.instanceCount;
                                by1 += (byte)(((i22 * i17) + Test.instanceCount) - i22);
                            case 27:
                                i1 = i;
                                Test.instanceCount = i18;
                                break;
                            case 42:
                                i17 -= by1;
                            case 47:
                                Test.fFld = Test.instanceCount;
                                break;
                            case 28:
                                iArrFld[i22][i22 - 1] += i;
                                break;
                            case 37:
                                i21 >>= i20;
                            case 36:
                                iArrFld[i18][i18 + 1] = i18;
                                break;
                            case 25:
                                dFld *= i23;
                                break;
                            default:
                                Test.instanceCount *= i22;
                            }
                        }
                        break;
                    case 118:
                        i23 += i18;
                        break;
                    case 137:
                        i17 = 7103;
                        break;
                    case 124:
                        try {
                            i23 = (61 % i18);
                            i23 = (-10 / i18);
                            iArrFld[i18][i18 - 1] = (243 / i);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 154:
                        lArr3[i + 1] >>= i19;
                    case 121:
                        dFld -= Test.instanceCount;
                        break;
                    case 120:
                    case 130:
                        dFld += Test.instanceCount;
                        break;
                    }
                }
            case 108:
                i19 /= (int)(i20 | 1);
                break;
            case 109:
            case 98:
                Test.instanceCount += (-5 + (i * i));
                break;
            default:
                Test.sFld >>= (short)i1;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
