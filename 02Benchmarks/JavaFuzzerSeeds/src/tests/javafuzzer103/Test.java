package tests.javafuzzer103;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 29 22:26:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static double dFld=0.87019;
    public static float fFld=-18.254F;
    public long lArrFld[]=new long[N];
    public double dArrFld[][]=new double[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i9=3, i10=35259, i11=49898, i12=-51072;
        byte by1=-98;
        float f=-93.458F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.67561);

        i9 += by1;
        for (f = 5; 325 > f; f++) {
            i9 *= (int)f;
            i11 = 1;
            do {
                if (true) continue;
                i12 = 1;
                do {
                    Test.instanceCount = 2582;
                    if (i10 != 0) {
                    }
                    dArr[(int)(f)] *= Test.instanceCount;
                    i9 += (9 + (i12 * i12));
                    i10 += (i12 ^ (long)f);
                    Test.instanceCount += (36031 + (i12 * i12));
                    b = false;
                    i9 += i10;
                } while (++i12 < 1);
                i10 -= i12;
            } while (++i11 < 5);
        }
        long meth_res = i9 + by1 + Float.floatToIntBits(f) + i10 + i11 + i12 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i8, byte by) {

        int i13=-4, i14=13, i15=8, i16=146, i17=-110;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 209L);

        Test.instanceCount *= lMeth();
        lArr[(-13 >>> 1) % N] += i8;
        for (i13 = 8; i13 < 214; i13++) {
            i15 = 1;
            while (++i15 < 8) {
                i8 -= (int)Test.dFld;
                i8 >>= i15;
                Test.instanceCount = i14;
                Test.fFld += i14;
                for (i16 = i13; 1 > i16; ++i16) {
                    i8 += (-32543 + (i16 * i16));
                    i8 *= i16;
                    i17 -= i16;
                    Test.instanceCount >>>= i14;
                    i8 >>= i8;
                    Test.instanceCount >>= -110;
                }
            }
        }
        vMeth1_check_sum += i8 + by + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, int i1) {

        int i2=-125, i3=-242, i4=53311, i5=98, i6=37, i7=-11, i18=-106, i19=-33960, i20=-193;
        short s=-18726;

        for (i2 = 1; i2 < 127; i2 += 3) {
            for (i4 = 36; i4 > 2; i4--) {
                for (i6 = i4; i6 < 2; ++i6) {
                    vMeth1(46019, (byte)(119));
                    Test.instanceCount = i6;
                    i3 %= (int)((long)(Test.fFld) | 1);
                    i3 >>= i;
                }
                for (i18 = 2; i18 > 1; --i18) {
                    if (true) break;
                    i5 += i6;
                    s = (short)i20;
                    i1 = i20;
                }
                i1 -= (int)Test.fFld;
                Test.fFld += (((i4 * i4) + Test.instanceCount) - i4);
                i20 += (12 + (i4 * i4));
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i18 + i19 + s + i20;
    }

    public void mainTest(String[] strArr1) {

        int i21=217, i22=12, i23=193, i24=80, i25=-23, i26=-1126, i27=14, i28=-13, i29=59354, i30=159, i31=4,
            iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -157);
        FuzzerUtils.init(fArr, -1.157F);

        vMeth(-34, 7);
        Test.fFld = i21;
        for (long l : lArrFld) {
            i21 = 5;
            for (i22 = 1; i22 < 63; ++i22) {
                i21 >>= i23;
                i23 += i22;
                for (i24 = i22; i24 < 2; ++i24) {
                    dArrFld = FuzzerUtils.double2array(N, (double)21.5273);
                    i21 = (int)Test.instanceCount;
                    l |= l;
                    try {
                        iArr[i24 + 1] = (i24 / i25);
                        i21 = (i24 / i25);
                        i23 = (-44927 % i21);
                    } catch (ArithmeticException a_e) {}
                    i23 = (int)Test.instanceCount;
                    i25 *= (int)Test.instanceCount;
                    iArr = FuzzerUtils.int1array(N, (int)-7);
                    i25 >>= 11;
                    iArr[i22] = i24;
                    l = -21;
                }
                fArr[i22] += Test.fFld;
                Test.fFld = -1L;
                Test.instanceCount += 38264L;
                for (i26 = 1; i26 < 2; ++i26) {
                    i23 = -54201;
                    Test.fFld += i26;
                }
                i23 += (i22 ^ l);
                iArr[i22 + 1] += i23;
            }
        }
        for (i28 = 9; i28 < 278; ++i28) {
            for (i30 = i28; i30 < 93; i30++) {
                Test.instanceCount -= Test.instanceCount;
                i27 = (int)Test.instanceCount;
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
