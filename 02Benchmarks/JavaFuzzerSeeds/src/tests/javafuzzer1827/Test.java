package tests.javafuzzer1827;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 04:05:39 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-375297837L;
    public static volatile short sFld=11228;
    public static byte byFld=72;
    public static double dFld=0.34744;
    public static volatile boolean bFld=false;
    public int iFld=-11;
    public int iArrFld[][]=new int[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-50711, i4=13492, i5=-49304, i6=-42423, i7=0, i8=177, iArr[]=new int[N];
        double d=-1.7305, d1=0.37491;
        float f=-101.565F, f1=-24.28F;

        FuzzerUtils.init(iArr, -10);

        i3 ^= i3;
        i3 = (int)Test.instanceCount;
        i4 = 1;
        do {
            d = i3;
        } while (++i4 < 228);
        i3 = (int)f;
        Test.instanceCount *= i3;
        d1 = 328;
        while ((d1 -= 2) > 0) {
            f += (float)(((d1 * i3) + Test.sFld) - Test.byFld);
            iArr[(int)(d1 - 1)] = 0;
            f = 3;
            for (i5 = 1; i5 < 10; i5++) {
                for (i7 = 2; i7 > 1; i7 -= 2) {
                    Test.byFld *= (byte)-165;
                    i6 *= (int)f1;
                    Test.instanceCount += (i7 * i7);
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l) {

        int i2=0, i9=-39, i10=-194, i11=-129, iArr1[]=new int[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-6939);
        FuzzerUtils.init(lArr, 1780692368L);
        FuzzerUtils.init(iArr1, -6938);

        i2 = 1;
        do {
            vMeth2();
            i9 = (int)Test.dFld;
            for (i10 = 1; 8 > i10; ++i10) {
                sArr[i10 - 1] = (short)-280;
                if (i10 != 0) {
                    vMeth1_check_sum += l + i2 + i9 + i10 + i11 + FuzzerUtils.checkSum(sArr) +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.instanceCount -= -20167;
                l = i9;
                lArr[i10 - 1] *= Test.instanceCount;
                i9 += Test.sFld;
            }
            i11 -= i2;
            i9 = i11;
            iArr1[i2 + 1] = (int)2.522F;
        } while (++i2 < 203);
        vMeth1_check_sum += l + i2 + i9 + i10 + i11 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(byte by) {

        int i12=-145, i13=5, i14=-7, i15=27066, i16=14, i17=-211, i18=1, i19=46259, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -118);
        FuzzerUtils.init(lArr1, 37532L);

        vMeth1(Test.instanceCount);
        for (i12 = 11; i12 < 334; i12++) {
            iArr2[i12] = i12;
            for (i14 = 1; 5 > i14; ++i14) {
                for (i16 = 1; i16 < 2; ++i16) {
                    i15 = (int)Test.instanceCount;
                    Test.instanceCount += (i16 * i16);
                    if (Test.bFld) break;
                    i13 *= i16;
                }
                if (i13 != 0) {
                    vMeth_check_sum += by + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr2)
                        + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                lArr1[i14] = (long)Test.dFld;
                i17 += (int)Test.instanceCount;
            }
        }
        for (i18 = 7; i18 < 392; i18++) {
            i13 = i15;
            iArr2[(5481 >>> 1) % N] -= i16;
        }
        vMeth_check_sum += by + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-24, i1=11, i20=-69, i21=193, i22=20060, i23=102, i24=-33076, i25=-197, i26=47872, i27=10;
        float f2=96.137F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 2863798300749294751L);

        for (i = 18; i < 319; ++i) {
            vMeth((byte)(-60));
            for (i20 = i; i20 < 84; i20++) {
                i1 = (int)f2;
                iArrFld[i + 1][i - 1] >>= i1;
                Test.instanceCount >>= i1;
                i21 /= (int)((long)(f2) | 1);
                lArr2[i] = Test.sFld;
                iArrFld = iArrFld;
                Test.sFld >>= (short)i20;
                i1 = i;
                i21 = -1;
            }
            if (Test.bFld) break;
            for (i22 = 1; i22 < 84; i22++) {
                i1 -= (int)f2;
                Test.instanceCount *= Test.instanceCount;
                i21 += i22;
            }
            i1 -= (int)Test.instanceCount;
            Test.bFld = Test.bFld;
            Test.dFld = i23;
            i1 += -374;
        }
        iFld += Test.sFld;
        for (i24 = 12; i24 < 265; ++i24) {
            i26 = 99;
            do {
                i27 = 1;
                do {
                    i23 += (i27 ^ i22);
                    i1 = Test.sFld;
                    Test.instanceCount = i27;
                    iFld = -121;
                    iFld -= 30941;
                } while (++i27 < 3);
            } while ((i26 -= 3) > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
