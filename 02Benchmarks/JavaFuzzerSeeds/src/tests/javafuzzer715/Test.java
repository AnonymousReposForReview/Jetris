package tests.javafuzzer715;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:22:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static boolean bFld=true;
    public static byte byFld=44;
    public static int iFld=0;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -46544);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7) {

        int i8=-13, i9=-14, i10=12, i11=138, i12=-7664, i13=58984;
        double d=-2.74997, dArr[]=new double[N];
        float f=-81.384F;
        byte by=119;

        FuzzerUtils.init(dArr, 75.81497);

        for (i8 = 7; i8 < 134; i8++) {
            for (i10 = i8; i10 < 12; ++i10) {
                switch ((i10 % 7) + 115) {
                case 115:
                    Test.instanceCount = i11;
                    for (i12 = i10; i12 < 1; ++i12) {
                        i11 *= -56320;
                        d *= Test.instanceCount;
                        if (Test.bFld) {
                            i9 >>= i10;
                            i7 <<= -175;
                            i7 = i7;
                        } else {
                            i11 += i12;
                            i7 <<= i9;
                            vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
                                Float.floatToIntBits(f) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                    }
                    i13 = 2;
                    f = 107;
                    break;
                case 116:
                    i11 -= (int)Test.instanceCount;
                    break;
                case 117:
                    i13 = i12;
                    break;
                case 118:
                    by += (byte)Test.instanceCount;
                    break;
                case 119:
                    d = i10;
                    break;
                case 120:
                    Test.instanceCount -= (long)d;
                    break;
                case 121:
                    dArr[i10 - 1] -= Test.instanceCount;
                default:
                    Test.instanceCount = (long)-2.381F;
                }
            }
        }
        vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + Float.floatToIntBits(f)
            + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i2=-21, i3=20930, i4=-11, i5=-9, i6=99, i14=32385, i15=254;
        boolean b=true;
        float f1=0.385F, fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 87L);
        FuzzerUtils.init(fArr, 2.908F);

        for (i2 = 8; i2 < 348; ++i2) {
            i3 += (i4++);
            for (i5 = 1; i5 < 5; i5++) {
                lArr = (lArr = lArr);
                b = (((i6 + Test.instanceCount) + i5) > Test.instanceCount);
                vMeth2(i4);
                i4 >>= i6;
                for (i14 = 2; i14 > 1; --i14) {
                    b = b;
                    Test.byFld = (byte)i4;
                    Test.instanceCount = 2;
                    if (b) {
                        if (b) continue;
                        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + i14 + i15 + Float.floatToIntBits(f1)
                            + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    fArr[i5 + 1] *= Test.instanceCount;
                    f1 -= f1;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + i14 + i15 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        float f2=1.63F;

        vMeth1();
        f2 *= Test.iFld;
        Test.iFld = Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] >>= -51471;
        vMeth_check_sum += Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i=-30, i1=-2, i16=4, i17=3452, i18=-201, i19=54603, i20=3, i21=9;
        float f3=-2.830F, fArr1[]=new float[N];
        short s=762;

        FuzzerUtils.init(fArr1, -2.710F);

        for (i = 287; 6 < i; i--) {
            try {
                i1 = (i / 13793);
                i1 = (i1 % i);
                i1 = (37 / i);
            } catch (ArithmeticException a_e) {}
            i1 += i;
            vMeth();
            i1 >>= Test.byFld;
        }
        for (i16 = 5; i16 < 195; i16++) {
            i1 += (i16 | (long)f3);
            i18 = 132;
            do {
                Test.iFld += (i18 * i18);
                for (i19 = 1; i19 < 1; i19++) {
                    switch ((((i >>> 1) % 4) * 5) + 114) {
                    case 118:
                        f3 += (-17185 + (i19 * i19));
                        Test.iFld = i1;
                        switch (((Test.iFld >>> 1) % 9) + 88) {
                        case 88:
                            if (Test.bFld) {
                                i17 = i18;
                                Test.byFld += (byte)(((i19 * Test.iFld) + Test.byFld) - Test.instanceCount);
                                Test.instanceCount += (i19 ^ i19);
                                i21 = s;
                            }
                            break;
                        case 89:
                            i21 += i19;
                            break;
                        case 90:
                            Test.iFld %= (int)(i16 | 1);
                            Test.instanceCount <<= Test.iFld;
                            break;
                        case 91:
                            if (Test.bFld) break;
                            i21 = i1;
                            f3 += (i19 + i1);
                        case 92:
                            i21 *= i16;
                            i17 -= (int)Test.instanceCount;
                            break;
                        case 93:
                            Test.iArrFld[i16 - 1] = i18;
                            Test.iFld += (int)Test.instanceCount;
                            f3 += ((long)i19 ^ (long)Test.instanceCount);
                            break;
                        case 94:
                            f3 += (-219L + (i19 * i19));
                            break;
                        case 95:
                            i20 += i19;
                            break;
                        case 96:
                            Test.instanceCount += (long)f3;
                            break;
                        default:
                            i1 += (i19 * i19);
                        }
                        break;
                    case 131:
                        s = (short)Test.instanceCount;
                        break;
                    case 127:
                        Test.iFld -= i1;
                        break;
                    case 120:
                        fArr1[i16 - 1] += f3;
                        break;
                    default:
                        i21 = Test.iFld;
                    }
                }
            } while (--i18 > 0);
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
