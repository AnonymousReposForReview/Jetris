package tests.javafuzzer706;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 08:14:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4013744681L;
    public static int iFld=116;
    public static double dFld=2.46316;
    public float fFld=-125.194F;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 11L);
        FuzzerUtils.init(Test.fArrFld, 1.422F);
        FuzzerUtils.init(Test.iArrFld, -11);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f=-97.130F, f1=58.932F;
        byte by1=-114;
        double d=1.15197;
        int i8=-172, i9=161;

        Test.iFld -= Test.iFld;
        f += by1;
        Test.iFld >>= (int)Test.instanceCount;
        try {
            Test.instanceCount ^= -122077583L;
            Test.lArrFld[(Test.iFld >>> 1) % N] += (long)d;
            try {
                Test.iFld = Test.iFld;
            }
            catch (ArrayIndexOutOfBoundsException exc4) {
                for (f1 = 5; f1 < 160; ++f1) {
                    Test.iFld *= i8;
                    i8 = i8;
                    i9 = 1;
                    while (++i9 < 10) {
                        i8 *= -39999;
                    }
                    i8 += (int)(((f1 * i9) + Test.instanceCount) - i8);
                    i8 *= (int)Test.instanceCount;
                }
            }
            finally {
                Test.instanceCount &= Test.instanceCount;
            }
        }
        catch (NegativeArraySizeException exc5) {
            i8 ^= i8;
        }
        catch (NullPointerException exc6) {
            Test.lArrFld[(i8 >>> 1) % N] += (long)91.384F;
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + by1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i8
            + i9;
    }

    public void vMeth1(int i3, int i4, int i5) {

        int i6=-11, i7=0, i10=-137, i11=9, i12=-6, i13=237, iArr[]=new int[N];
        short s=21727;

        FuzzerUtils.init(iArr, 25368);

        for (i6 = 1; 282 > i6; i6++) {
            vMeth2();
        }
        switch ((((0 >>> 1) % 6) * 5) + 38) {
        case 60:
            for (i10 = 14; 300 > i10; i10++) {
                i4 = i3;
                for (i12 = 1; i12 < 6; i12++) {
                    Test.fArrFld[i10 - 1] -= Test.iFld;
                    Test.lArrFld[i12] = i4;
                    i4 += i12;
                    iArr[i10 - 1] <<= 0;
                }
            }
        case 50:
            iArr[(i10 >>> 1) % N] >>>= i4;
            switch ((((i5 >>> 1) % 2) * 5) + 27) {
            case 36:
                i3 = (int)Test.instanceCount;
                Test.dFld = i5;
                i5 >>= i6;
            case 33:
                i3 *= s;
                break;
            default:
                s += (short)i7;
            }
            break;
        case 67:
            Test.fArrFld[(i5 >>> 1) % N] += i4;
        case 62:
            Test.instanceCount = i10;
            break;
        case 57:
            i7 += (int)fFld;
            break;
        case 66:
            Test.lArrFld[(i7 >>> 1) % N] = i6;
            break;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i10 + i11 + i12 + i13 + s + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i, int i1, int i2) {


        vMeth1(i, 49, i1);
        vMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        byte by=45;
        int i14=27075, i15=-117, i16=-24979, i17=50915, i18=-10;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -40.89916);

        switch ((((by & Test.iFld) >>> 1) % 2) + 82) {
        case 82:
            vMeth(Test.iFld, Test.iFld, Test.iFld);
            break;
        case 83:
            i14 = 1;
            while (++i14 < 164) {
                Test.iFld += Test.iFld;
                for (i15 = 5; i15 < 153; i15 += 3) {
                    for (i17 = 1; i17 < 4; i17++) {
                        i18 += (((i17 * i18) + fFld) - i18);
                        switch ((i15 % 6) + 89) {
                        case 89:
                            Test.lArrFld[i17 - 1] = i17;
                            Test.iFld = Test.iFld;
                            i18 *= -7;
                            i16 += (int)Test.dFld;
                            break;
                        case 90:
                            i16 = (int)-8L;
                            break;
                        case 91:
                            if (true) continue;
                            Test.iFld += (i17 * i17);
                            i16 += (-11 + (i17 * i17));
                            Test.instanceCount *= (long)-2.104296;
                            break;
                        case 92:
                            Test.iFld = (int)Test.instanceCount;
                            i18 = Test.iFld;
                            Test.iArrFld = Test.iArrFld;
                            Test.iFld += i17;
                            break;
                        case 93:
                            fFld += fFld;
                            if (Test.bFld) {
                                dArr = FuzzerUtils.double1array(N, (double)-1.39007);
                            } else {
                                i16 = i14;
                            }
                            fFld -= Test.iFld;
                            break;
                        case 94:
                            Test.iFld += i18;
                            i16 = i14;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)2);
                        }
                        Test.lArrFld[i14 - 1] -= 134;
                    }
                }
            }
            break;
        default:
            i18 = i14;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
