package tests.javafuzzer1750;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 03:00:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1188255590L;
    public static short sFld=-4167;
    public static int iFld=-180;
    public boolean bFld=true;
    public static double dFld=0.123917;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -202);
        FuzzerUtils.init(Test.lArrFld, 13L);
        FuzzerUtils.init(Test.dArrFld, 24.56692);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f, int i8) {

        int i9=-1, i10=179, i11=12, i12=65261, iArr[]=new int[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(dArr, 126.108672);

        iArr[(-13805 >>> 1) % N] += i8;
        i9 = 1;
        while (++i9 < 200) {
            Test.instanceCount -= i9;
            try {
                i8 = (i8 % i9);
                i8 = (i9 % i9);
                i8 = (245 % iArr[i9 + 1]);
            } catch (ArithmeticException a_e) {}
            iArr[i9] <<= i8;
        }
        i8 *= (int)Test.instanceCount;
        i8 = (int)f;
        for (i10 = 9; i10 < 358; i10 += 3) {
            i11 >>= i8;
            i12 = 1;
            while (++i12 < 13) {
                i11 -= (int)Test.instanceCount;
                switch ((i12 % 7) + 95) {
                case 95:
                    i11 = i8;
                    i11 ^= i10;
                    i8 = (int)Test.instanceCount;
                    break;
                case 96:
                case 97:
                    try {
                        iArr[i12 - 1] = (i11 / 58);
                        i8 = (12087 % i12);
                        i8 = (119 % i11);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 98:
                case 99:
                    Test.instanceCount = i9;
                case 100:
                    dArr = dArr;
                    break;
                case 101:
                    if (true) break;
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3) {

        int i4=-10, i5=146, i6=-44571, i7=-10, i13=2, i14=-184, i15=-4, i16=-5;
        double d=1.20237;
        float f1=-17.653F;

        for (i4 = 14; i4 < 310; i4++) {
            for (i6 = 6; i4 < i6; i6 -= 3) {
                i5 = (int)(iMeth1(-2.974F, -3) + d);
                i13 = 1;
                do {
                    Test.iArrFld[i4 + 1] >>>= -18600;
                } while (--i13 > 0);
                i7 += i6;
                for (i14 = i6; i14 < 1; ++i14) {
                    i15 = (int)f1;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)9L);
                    Test.instanceCount >>= Test.instanceCount;
                    i15 = i15;
                    try {
                        i15 = (i6 % i6);
                        i5 = (Test.iArrFld[i14 - 1] / i5);
                        Test.iArrFld[i4] = (i16 / -14197);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(i14 >>> 1) % N] >>= i5;
                    Test.sFld >>= (short)i15;
                    i16 = (int)f1;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i13 + i14 + i15 +
            Float.floatToIntBits(f1) + i16;
    }

    public static int iMeth(int i2) {

        int i17=91, i18=-5, i19=18777, i20=-54, i21=-59038;
        long l=-3941355427700268351L;
        float f2=2.223F;
        byte by=25;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -42.96913);

        vMeth(i2);
        i2 = (int)Test.instanceCount;
        Test.instanceCount |= i2;
        i17 = 1;
        while (++i17 < 237) {
            dArr1[i17] *= -246;
            i2 *= Test.sFld;
        }
        for (l = 8; l < 213; ++l) {
            Test.iArrFld[(int)(l)] += (int)l;
            i19 = 1;
            do {
                i18 = i2;
                i2 <<= i17;
                for (i20 = 1; i20 < 1; ++i20) {
                    Test.instanceCount = i21;
                }
                f2 -= i21;
                Test.iArrFld[i19] -= by;
            } while (++i19 < 8);
        }
        long meth_res = i2 + i17 + l + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2) + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-7, i22=35708, i23=81, i24=190, i25=55589;
        float f3=2.495F, fArr[]=new float[N];
        byte by1=-49;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-9082);
        FuzzerUtils.init(lArr, -5162721871050033024L);
        FuzzerUtils.init(fArr, 0.702F);

        for (i = 4; i < 311; ++i) {
            Test.sFld += (short)Integer.reverseBytes(iMeth(Test.iFld));
            for (i22 = 3; i22 < 82; i22++) {
                for (i24 = 1; i24 < 2; ++i24) {
                    if (bFld) {
                        try {
                            i1 = (-202527666 % Test.iArrFld[i24 - 1]);
                            i23 = (Test.iArrFld[i24] % 57006);
                            i25 = (46937 % Test.iArrFld[i24]);
                        } catch (ArithmeticException a_e) {}
                        if (bFld) break;
                        Test.instanceCount = Test.instanceCount;
                    } else {
                        if (bFld) break;
                        f3 = -14;
                        i25 = (int)Test.dFld;
                        sArr[i - 1] -= (short)Test.iFld;
                    }
                    i25 = i;
                    switch (((i24 % 2) * 5) + 9) {
                    case 17:
                        Test.iArrFld[i + 1] -= (int)Test.instanceCount;
                        i25 += (((i24 * i1) + i) - f3);
                        Test.dArrFld[i][i24 - 1] += i;
                        Test.sFld *= (short)i;
                        break;
                    case 18:
                        if (bFld) {
                            Test.instanceCount = i22;
                            try {
                                i25 = (-40642 / i25);
                                i25 = (i % 1477461083);
                                Test.iFld = (-106 % i22);
                            } catch (ArithmeticException a_e) {}
                            i1 += Test.iFld;
                        } else if (bFld) {
                            i1 -= (int)4L;
                            switch ((i % 2) + 15) {
                            case 15:
                                Test.instanceCount -= i1;
                                i1 += i24;
                                Test.dFld = 60.259F;
                                break;
                            case 16:
                                i1 += (i24 * f3);
                                by1 = (byte)Test.iFld;
                                lArr = FuzzerUtils.long1array(N, (long)-182L);
                                break;
                            }
                        } else if (true) {
                            fArr[i + 1] += i;
                        } else {
                            i25 -= Test.iFld;
                        }
                        break;
                    }
                }
            }
        }

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
