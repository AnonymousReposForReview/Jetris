package tests.javafuzzer2559;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 16:39:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2467525795L;
    public static float fFld=-69.233F;
    public static volatile long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7163167549633479796L);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 2.795F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i6, double d1) {

        int i7=167, i8=36121, i9=-2, i10=73, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -39671);

        d1 += i6;
        iArr1[(i6 >>> 1) % N] >>>= (int)Test.instanceCount;
        for (i7 = 4; i7 < 167; ++i7) {
            i9 = 1;
            do {
                try {
                    i8 = (698703129 / i6);
                    i6 = (2385 % iArr1[i9 + 1]);
                    i6 = (i9 % i7);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = i9;
                i10 = 1;
                while (++i10 < 1) {
                    i8 += i7;
                    if (i6 != 0) {
                    }
                    i6 += (((i10 * i7) + Test.instanceCount) - i8);
                    iArr1[i7 + 1] = i7;
                    switch (((i7 % 2) * 5) + 28) {
                    case 32:
                        i6 = (int)Test.instanceCount;
                    case 38:
                        i6 += (-106 + (i10 * i10));
                        i6 &= i9;
                        break;
                    }
                }
            } while (++i9 < 10);
        }
        long meth_res = i6 + Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i11=46058, i12=224, i13=-1, i14=3, i15=10, i16=0, i17=-213, iArr2[]=new int[N];
        double d2=0.1730;
        boolean b=true;
        byte by1=52;

        FuzzerUtils.init(iArr2, -47603);

        Test.instanceCount += (long)(fMeth(i11, d2) - i11);
        for (i12 = 3; i12 < 328; ++i12) {
            Test.fFld *= (float)d2;
            iArr2[i12 - 1] -= (int)d2;
            Test.lArrFld[i12 - 1] = 2;
            for (i14 = 1; i14 < 5; i14++) {
                short s=10368;
                i15 = s;
                i11 += (((i14 * Test.fFld) + Test.fFld) - i15);
                i11 += (i14 | i14);
                if (b) break;
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.lArrFld[i16] >>= by1;
                    i15 *= i12;
                    i15 += (((i16 * i13) + Test.instanceCount) - i14);
                    i15 -= 103;
                }
            }
        }
        long meth_res = i11 + Double.doubleToLongBits(d2) + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16 + i17 + by1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, float f) {

        int i3=-6, i4=-228, i5=9, i18=-28515, iArr[]=new int[N];
        short s1=26769;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -17104);
        FuzzerUtils.init(byArr, (byte)126);

        for (i3 = 4; i3 < 327; i3++) {
            iArr = (iArr = (iArr = (iArr = iArr)));
            i4 += (((i3 * Test.instanceCount) + Test.instanceCount) - i3);
            i5 = 1;
            while (++i5 < 5) {
                i4 >>= (i4++);
                switch ((i5 % 5) + 27) {
                case 27:
                    i4 += (int)(iArr[i3 + 1] - (iMeth() * Test.instanceCount));
                    Test.fFld *= Test.instanceCount;
                    i18 = 1;
                    while (++i18 < 1) {
                        boolean b1=false;
                        i4 = -30596;
                        iArr[i18] = i5;
                        b1 = b1;
                        byArr[i5 + 1] = (byte)i3;
                        Test.instanceCount += (i18 ^ Test.instanceCount);
                        s1 += (short)i4;
                    }
                case 28:
                    i4 >>= 4;
                    break;
                case 29:
                    Test.lArrFld[i3 + 1] *= Test.instanceCount;
                    break;
                case 30:
                    try {
                        i4 = (-57257 / i5);
                        i4 = (i3 / 63);
                        iArr[i3 - 1] = (iArr[i3 + 1] % iArr[i3 + 1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 31:
                    i4 <<= i3;
                    break;
                default:
                    i4 -= (int)2542869824L;
                }
            }
        }
        vMeth_check_sum += by + Float.floatToIntBits(f) + i3 + i4 + i5 + i18 + s1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        double d=4.26383;
        int i=-4, i1=-8, i2=6, i19=212, i20=-23180, i21=-111, iArr3[]=new int[N];
        short s2=-29712;
        boolean b2=true;
        byte by2=33;

        FuzzerUtils.init(iArr3, -44921);

        d = (i--);
        for (i1 = 16; 283 > i1; i1++) {
            vMeth((byte)(113), Test.fFld);
            i19 = 1;
            while (++i19 < 94) {
                switch ((((i1 >>> 1) % 2) * 5) + 40) {
                case 44:
                    i2 += i;
                    break;
                case 47:
                    Test.fFld += Test.instanceCount;
                }
                for (i20 = 1; i20 < 1; i20++) {
                    switch ((i19 % 10) + 58) {
                    case 58:
                        Test.fFld += i2;
                        break;
                    case 59:
                        i2 *= i1;
                        Test.instanceCount += (((i20 * i19) + i19) - i);
                        i2 -= (int)Test.instanceCount;
                        s2 = (short)i;
                        break;
                    case 60:
                        switch ((i19 % 9) + 63) {
                        case 63:
                            i += (((i20 * i21) + i21) - i19);
                        case 64:
                            b2 = b2;
                            Test.instanceCount += (((i20 * i) + Test.instanceCount) - Test.instanceCount);
                            Test.instanceCount *= by2;
                            switch ((i20 % 6) + 101) {
                            case 101:
                                b2 = b2;
                                Test.bArrFld[i1 - 1] = b2;
                                if (b2) {
                                    if (b2) continue;
                                    i21 += (-102 + (i20 * i20));
                                }
                                break;
                            case 102:
                            case 103:
                                b2 = b2;
                                Test.fArrFld = Test.fArrFld;
                                i21 <<= i2;
                                i += (i20 * Test.instanceCount);
                                break;
                            case 104:
                                iArr3[i19] = (int)Test.instanceCount;
                                break;
                            case 105:
                                i2 += (((i20 * Test.instanceCount) + i20) - i19);
                                break;
                            case 106:
                                iArr3[i19] -= (int)Test.instanceCount;
                                break;
                            }
                            break;
                        case 65:
                            Test.bArrFld[i20 - 1] = b2;
                            break;
                        case 66:
                            i2 += (int)2.535F;
                            break;
                        case 67:
                            Test.instanceCount *= i20;
                            break;
                        case 68:
                            i += (int)(-48687L + (i20 * i20));
                        case 69:
                            i21 += (int)d;
                        case 70:
                            iArr3 = iArr3;
                            break;
                        case 71:
                            i21 *= i;
                        default:
                            d += Test.instanceCount;
                        }
                        break;
                    case 61:
                        i21 += (i20 * i21);
                        break;
                    case 62:
                        d += -7;
                        break;
                    case 63:
                        Test.instanceCount += (((i20 * i) + i19) - Test.instanceCount);
                    case 64:
                        i21 += (i20 * i20);
                    case 65:
                        i2 = i;
                        break;
                    case 66:
                        Test.instanceCount += Test.instanceCount;
                    case 67:
                        Test.fArrFld[i19 - 1] = -9671;
                        break;
                    default:
                        i21 = (int)Test.instanceCount;
                    }
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
