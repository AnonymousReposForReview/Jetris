package tests.javafuzzer532;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 05:18:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48L;
    public static double dFld=-25.79787;
    public static short sFld=23728;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];
    public static volatile short sArrFld[]=new short[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 191);
        FuzzerUtils.init(Test.dArrFld, 0.35583);
        FuzzerUtils.init(Test.sArrFld, (short)31352);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i11=-239, i12=-245;
        float f=-52.11F;

        i11 = 1;
        do {
            Test.instanceCount = i11;
            i12 += (int)f;
            f += (i11 * i11);
            Test.instanceCount = i12;
            Test.iArrFld[i11 + 1] = i12;
            i12 &= Test.sFld;
            Test.sFld |= (short)-70;
        } while (++i11 < 250);
        Test.iArrFld = Test.iArrFld;
        Test.instanceCount ^= 3;
        long meth_res = i11 + i12 + Float.floatToIntBits(f);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i9, byte by, int i10) {

        float f1=0.360F;
        int i13=-8;
        boolean b=false;

        Test.sArrFld[(i9 >>> 1) % N] = (short)Long.reverseBytes(--Test.instanceCount);
        Test.dFld = ((--i10) - iMeth());
        f1 = Test.instanceCount;
        Test.instanceCount <<= i10;
        if (b) {
            i10 = -60546;
            if (b) {
                i13 = 1;
                do {
                    i9 += (i13 | i10);
                    i10 = (int)Test.instanceCount;
                    b = b;
                    try {
                        i9 = (i9 % i10);
                        i10 = (-209 % Test.iArrFld[i13]);
                        Test.iArrFld[i13] = (Test.iArrFld[i13] % i9);
                    } catch (ArithmeticException a_e) {}
                } while (++i13 < 332);
                i10 = i10;
            } else {
                i10 *= (int)f1;
                Test.instanceCount = i13;
            }
        }
        vMeth1_check_sum += i9 + by + i10 + Float.floatToIntBits(f1) + i13 + (b ? 1 : 0);
    }

    public static void vMeth(int i6, int i7, int i8) {

        byte by1=72, byArr[]=new byte[N];
        int i14=-196, i15=7, i16=121, i17=169;
        float f2=-20.122F, f3=-72.1004F;

        FuzzerUtils.init(byArr, (byte)-57);

        vMeth1(-4, by1, i6);
        for (i14 = 14; i14 < 393; i14++) {
            i7 = (int)Test.instanceCount;
            f2 = 1;
            while (++f2 < 4) {
                switch ((((-39681 >>> 1) % 2) * 5) + 7) {
                case 11:
                    i6 = i7;
                    f3 *= -23616;
                    Test.sFld += (short)f2;
                    i8 += (int)(f2 + i8);
                    break;
                case 14:
                    for (i16 = 1; i16 > 1; i16 -= 3) {
                        Test.instanceCount = i7;
                        byArr[i14 - 1] = (byte)i7;
                    }
                    i7 -= 11;
                    Test.iArrFld[i14 + 1] -= (int)Test.instanceCount;
                    break;
                default:
                    by1 += (byte)(-56230 + (f2 * f2));
                }
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + by1 + i14 + i15 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i16 +
            i17 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i1=-33581, i2=-84, i3=85, i4=22942, i5=192, i18=-7, i19=40, i20=228, i21=51072, i22=-26, i23=-12,
            i24=37562, i25=13;
        float f4=98.1006F;
        short sArr[]=new short[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(sArr, (short)-26860);
        FuzzerUtils.init(dArr, 2.43820);

        for (int i : Test.iArrFld) {
            if (true) {
                for (i1 = 2; 63 > i1; ++i1) {
                    for (i3 = 2; 1 < i3; --i3) {
                        Test.dFld += i1;
                        i5 |= i1;
                        Test.iArrFld[i1] += ((-(i - i3)) * (++i4));
                        i4 <<= (++sArr[i3 + 1]);
                    }
                    dArr = (Test.dArrFld[i1 - 1] = (dArr = (dArr = dArr)));
                    vMeth(i4, i4, i1);
                    i4 = i1;
                    Test.instanceCount &= i1;
                    for (i18 = i1; i18 < 2; ++i18) {
                        i += 13;
                        i5 >>= -43218;
                        i2 += Test.sFld;
                    }
                    lArrFld[i1][i1 - 1] = -10;
                }
            }
            for (i20 = 3; i20 < 63; ++i20) {
                for (i22 = 1; i22 < 2; i22++) {
                    i2 *= i20;
                    i5 -= i21;
                    Test.instanceCount -= i21;
                    Test.dFld *= i;
                }
                i21 = 11;
                i24 = 1;
                do {
                    Test.sFld = (short)i21;
                } while (++i24 < 2);
                i25 = 1;
                while (++i25 < 2) {
                    i <<= i21;
                    i2 = (int)-42.580F;
                }
                i23 += (((i20 * f4) + f4) - i20);
            }
        }



    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
