package tests.javafuzzer2836;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 21:04:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-917385982560521533L;
    public byte byFld=-1;
    public static int iFld=-12617;
    public static double dFld=0.84431;
    public static int iFld1=11;
    public static short sArrFld[]=new short[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)19528);
        FuzzerUtils.init(Test.fArrFld, -56.1001F);
        FuzzerUtils.init(Test.lArrFld, 7L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i2) {

        int i3=20821, i4=-9, i5=6, i6=4, i7=-10, iArr[][]=new int[N][N];
        double d1=73.111535, dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -65.122647);
        FuzzerUtils.init(iArr, -61849);

        dArr[(i2 >>> 1) % N][(i2 >>> 1) % N] += i2;
        i2 = i2;
        i2 <<= i2;
        i2 = i2;
        i3 = -137;
        for (short s : Test.sArrFld) {
            switch (((i3 >>> 1) % 7) + 106) {
            case 106:
                iArr[(i2 >>> 1) % N][(i2 >>> 1) % N] -= (int)Test.instanceCount;
                i4 = 1;
                while (++i4 < 4) {
                    l1 >>>= i3;
                }
                for (i5 = 1; i5 < 4; ++i5) {
                    iArr[i5 + 1] = iArr[i5];
                    i7 = 1;
                    while (++i7 < 2) {
                        i2 = 34550;
                    }
                    iArr[i5 - 1][i5] >>>= i2;
                }
                break;
            case 107:
                i3 = i5;
            case 108:
                Test.fArrFld[(i7 >>> 1) % N] -= i6;
            case 109:
                l1 += (long)d1;
                break;
            case 110:
                i6 /= (int)(i4 | 1);
            case 111:
                i2 = i3;
                break;
            case 112:
                i2 = i3;
                break;
            default:
                i3 <<= (int)801169928L;
            }
        }
        vMeth1_check_sum += l1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth(float f1) {

        int i8=-19710;

        vMeth1(Test.instanceCount, i8);
        long meth_res = Float.floatToIntBits(f1) + i8;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(long l) {

        double d=-1.18626;
        int i1=-14, i9=-9, i10=2, i11=223, i12=-179;
        float f2=-14.586F;
        short s1=23093;
        long lArr[]=new long[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr, 3298410040L);
        FuzzerUtils.init(bArr, true);

        for (d = 13; 382 > d; ++d) {
            i1 = (int)(dMeth(f2) % (i1 | 1));
            switch ((int)(((d % 8) * 5) + 20)) {
            case 22:
                i1 += (int)((long)d ^ i1);
            case 34:
                Test.fArrFld[(int)(d)] += 12L;
                break;
            case 48:
                l += (long)(((d * i1) + i1) - i1);
                lArr[(int)(d - 1)] >>= l;
            case 25:
                l += (171 + (d * d));
                for (i9 = 1; i9 < 5; ++i9) {
                    i1 = s1;
                }
                if (i9 != 0) {
                    vMeth_check_sum += l + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f2) + i9 + i10 + s1 +
                        i11 + i12 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                bArr[(int)(d + 1)][(int)(d - 1)] = false;
                break;
            case 49:
                for (i11 = (int)(d); i11 < 5; ++i11) {
                    f2 += (-11 + (i11 * i11));
                    Test.instanceCount = i11;
                }
                break;
            case 28:
                i12 = (int)l;
                break;
            case 41:
                i10 = (int)Test.instanceCount;
            case 53:
                i10 += (int)(d * d);
                break;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f2) + i9 + i10 + s1 + i11 + i12 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-85, i13=-2, i14=5, i15=-196, i16=11118, i17=14, i18=-6, iArr1[]=new int[N];
        float f=60.429F;
        long l2=2372292874068002780L;
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr1, -3905);
        FuzzerUtils.init(dArr1, 0.60077);

        i = 1;
        while (++i < 155) {
            f = byFld;
            vMeth(Test.instanceCount);
            Test.iFld <<= 16;
            for (l2 = 7; l2 < 162; l2 += 3) {
                Test.instanceCount += l2;
                i13 *= i13;
                for (i14 = 1; 4 > i14; ++i14) {
                    i13 += i14;
                }
                for (i16 = 4; i16 > l2; i16--) {
                    Test.dFld = Test.iFld1;
                    i15 -= Test.iFld1;
                    try {
                        i17 = (i13 % iArr1[(int)(l2 + 1)]);
                        i13 = (26929 % Test.iFld1);
                        Test.iFld1 = (115 % i17);
                    } catch (ArithmeticException a_e) {}
                    i15 += (i16 ^ Test.instanceCount);
                    Test.lArrFld[i16 + 1] = i14;
                    iArr1[i16 + 1] >>= i16;
                    if (false) break;
                    Test.lArrFld[i16 + 1] *= i;
                }
                i15 += i;
            }
            Test.instanceCount = i;
            Test.iFld = Test.iFld;
            byFld <<= (byte)i13;
            i18 = 1;
            do {
                Test.iFld1 += (i18 * i18);
                iArr1[i + 1] %= (int)(Test.iFld1 | 1);
                iArr1[i18] += i17;
                i15 |= 12;
                byFld = (byte)i17;
            } while (++i18 < 162);
            Test.iFld += (((i * i15) + l2) - Test.iFld);
        }
        dArr1[(-9 >>> 1) % N] *= Test.instanceCount;

    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
