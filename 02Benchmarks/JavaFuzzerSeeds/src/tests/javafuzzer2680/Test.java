package tests.javafuzzer2680;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 18:41:30 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4111028176L;
    public static int iFld=229;
    public short sFld=-10477;
    public static double dFld=-126.48251;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i) {

        long l1=143L;
        int i1=-28151, i2=-10, i3=30241, i4=10739, i5=20602, i6=-384, i7=124, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 8);

        for (l1 = 6; l1 < 152; l1++) {
            for (i2 = (int)(l1); i2 < 11; i2++) {
                i += i2;
                for (i4 = 1; i4 < 1; ++i4) {
                    Test.instanceCount = i3;
                    Test.instanceCount *= l1;
                    i1 += (0 + (i4 * i4));
                    Test.instanceCount += i1;
                }
                for (i6 = 1; i6 > 1; --i6) {
                    double d1=2.124793;
                    i7 *= -9431;
                    d1 += 4;
                    iArr1 = iArr1;
                    i3 += (i6 | i1);
                    Test.instanceCount += (long)(37.785F + (i6 * i6));
                    i += (i6 * i6);
                }
            }
        }
        long meth_res = i + l1 + i1 + i2 + i3 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        double d=0.9800;
        int i8=11, i9=-14, i10=11695, iArr[]=new int[N];
        byte by=-27;
        short s=5107;

        FuzzerUtils.init(iArr, 14);

        try {
            TestClassTest obj = null;
            Test.iFld = obj.field;
            iArr = (iArr = (iArr = (iArr = iArr)));
        }
        catch (NegativeArraySizeException exc2) {
            i9 += Test.iFld;
        }
        catch (NullPointerException exc3) {
            d -= ((iMeth1(Test.iFld) * 23436) - Test.iFld);
            for (i8 = 7; 209 > i8; ++i8) {
                i9 = (int)Test.instanceCount;
                i10 = 8;
                do {
                    i9 = i10;
                } while (--i10 > 0);
                Test.iFld >>= 14083;
                iArr[i8] = (int)d;
                iArr[i8 + 1] += i8;
                if (i9 != 0) {
                    vMeth_check_sum += l + Double.doubleToLongBits(d) + i8 + i9 + i10 + by + s +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
                Test.iFld = i9;
                iArr[i8] = by;
                i9 /= (int)(s | 1);
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i8 + i9 + i10 + by + s + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i11=-254, i12=11, i13=8541, i14=0, i15=25506, iArr2[][]=new int[N][N];
        byte by1=59;
        double d2=110.52371;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 2.292F);
        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr2, -156);

        Test.iFld = ((-(-(Test.iFld + Test.iFld))) << Math.min(Test.iFld++, --Test.iFld));
        vMeth(Test.instanceCount);
        fArr = fArr;
        i11 = 1;
        while (++i11 < 170) {
            lArr[i11] = 25660L;
            for (i12 = 1; i12 < 9; ++i12) {
                Test.iFld >>= (int)Test.instanceCount;
                i13 *= i12;
            }
            i13 = 60833;
            for (i14 = 1; 9 > i14; i14++) {
                iArr2[(i12 >>> 1) % N][i14 + 1] = (int)-916079365L;
                by1 = (byte)i12;
                d2 = i13;
                iArr2[i11][i11 + 1] -= (int)Test.instanceCount;
                Test.instanceCount = i11;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + by1 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=-4851, i17=170, iArr3[][]=new int[N][N];
        float f=0.327F;

        FuzzerUtils.init(iArr3, -156);

        iMeth();
        iArr3[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += sFld;
        for (i16 = 208; 3 < i16; i16 -= 2) {
            iArr3[i16 + 1][i16 + 1] += Test.iFld;
            i17 -= (int)Test.dFld;
            i17 += i16;
            f -= i17;
            Test.dFld = Test.instanceCount;
            try {
                Test.iFld = (198 % Test.iFld);
                i17 = (i17 % iArr3[i16][i16 - 1]);
                Test.iFld = (Test.iFld % i17);
            } catch (ArithmeticException a_e) {}
            sFld += (short)i16;
            lArrFld[i16 + 1] += (long)Test.dFld;
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class TestClassTest {
    public int field;
    public void meth() {field = 1;}
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
