package tests.javafuzzer2342;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 31 12:58:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static volatile short sFld=-24059;
    public static volatile int iFld=4;
    public static double dFld=58.49538;
    public volatile long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=23432, i4=-10, iArr[]=new int[N];
        byte by=-122;
        boolean b=true;

        FuzzerUtils.init(iArr, -24041);

        for (i3 = 10; 321 > i3; i3++) {
            i4 -= by;
            switch (((i3 % 6) * 5) + 25) {
            case 50:
                Test.instanceCount += (((i3 * i3) + i3) - Test.instanceCount);
                Test.instanceCount = Test.iFld;
                iArr[i3] += i3;
                break;
            case 48:
                iArr[i3 - 1] >>= (int)Test.instanceCount;
                if (Test.iFld != 0) {
                    vMeth1_check_sum += i3 + i4 + by + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                    return;
                }
                if (b) continue;
                break;
            case 49:
                iArr[i3 + 1] = 29419;
                break;
            case 46:
                switch ((((i3 >>> 1) % 2) * 5) + 115) {
                case 116:
                    Test.iFld >>= i4;
                    Test.instanceCount -= i4;
                    i4 >>= i3;
                    break;
                case 117:
                    b = b;
                default:
                    i4 += i3;
                }
            case 38:
                Test.instanceCount = i4;
            case 29:
                iArr = FuzzerUtils.int1array(N, (int)-10);
                break;
            }
        }
        vMeth1_check_sum += i3 + i4 + by + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i5=-5764, i6=-2, i8=-236, i9=12680, i10=52, iArr1[]=new int[N];
        boolean b1=true;
        double d=2.118906;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.634F);
        FuzzerUtils.init(iArr1, -7);

        vMeth1();
        Test.iFld >>= 5;
        for (i5 = 3; 196 > i5; ++i5) {
            Test.iFld *= i5;
            fArr[(i6 >>> 1) % N] += i5;
            if (b1) continue;
            for (i8 = i5; i8 < 8; ++i8) {
                for (d = 1; d < 1; d++) {
                    if (i6 != 0) {
                        vMeth_check_sum += i5 + i6 + (b1 ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d) + i10 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[i5 - 1] = Test.iFld;
                    try {
                        i6 = (iArr1[(int)(d)] % 103);
                        Test.iFld = (i9 / iArr1[i5]);
                        i10 = (-60331 / i10);
                    } catch (ArithmeticException a_e) {}
                }
                try {
                    i10 = (140 % i9);
                    i6 = (62967 / i9);
                    i10 = (i5 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                try {
                    i6 = (i10 / -20506);
                    i6 = (i10 % 118);
                    iArr1[i5 - 1] = (-9876 / i8);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.iFld;
                i6 <<= i10;
            }
        }
        vMeth_check_sum += i5 + i6 + (b1 ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d) + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(float f) {

        int i2=-2133, i11=4, i12=50983, i13=9, i14=159, i15=29133, iArr2[]=new int[N];
        long l=2495140512L;
        float f1=93.67F;
        byte by1=-95;

        FuzzerUtils.init(iArr2, -7);

        i2 = (int)Test.instanceCount;
        vMeth();
        for (i11 = 1; i11 < 362; ++i11) {
            if (i11 != 0) {
            }
            iArr2[i11 - 1] <<= (int)l;
            iArr2[i11 - 1] = i11;
            i2 += (i11 | i12);
            i2 %= (int)((long)(f) | 1);
            for (f1 = i11; f1 < 5; ++f1) {
                for (i14 = i11; 1 > i14; ++i14) {
                    f *= (float)Test.dFld;
                    Test.instanceCount = i11;
                }
                i15 *= -4;
                l -= by1;
                Test.instanceCount += (long)(f1 * Test.sFld);
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i11 + i12 + l + Float.floatToIntBits(f1) + i13 + i14 + i15 + by1
            + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-33134, i1=-10, i17=0, i18=-21559, i19=-51764, iArr3[]=new int[N];
        float f2=-2.222F;
        boolean b2=true, bArr[]=new boolean[N];
        double d1=-49.72474;

        FuzzerUtils.init(iArr3, -1);
        FuzzerUtils.init(bArr, true);

        for (i = 6; 278 > i; i++) {
            i1 = (int)(Math.min(Test.instanceCount, Test.instanceCount++) - Test.sFld);
            lMeth(f2);
            lArrFld = FuzzerUtils.long2array(N, (long)-124L);
            Test.iFld -= -11;
            fArrFld[i] -= i1;
            switch ((i % 2) + 20) {
            case 20:
                i1 = Test.iFld;
                Test.iFld = (int)Test.instanceCount;
                break;
            case 21:
                Test.iFld -= -34263;
                break;
            }
            switch (((240 >>> 1) % 2) + 76) {
            case 76:
                Test.instanceCount = (long)f2;
                f2 += (i * Test.instanceCount);
                b2 = b2;
                Test.instanceCount += i;
                break;
            case 77:
                Test.iFld = (int)Test.instanceCount;
                break;
            default:
                b2 = b2;
                if (b2) {
                    f2 += ((long)i ^ (long)f2);
                    switch (((i % 8) * 5) + 98) {
                    case 105:
                        Test.iFld += i;
                        for (i17 = i; i17 < 92; i17++) {
                            for (d1 = 1; d1 < 1; d1++) {
                                Test.sFld >>= (short)63414;
                                Test.dFld += Test.instanceCount;
                                i19 *= (int)51053L;
                                i18 += (-53866 + (d1 * d1));
                                Test.instanceCount = i1;
                            }
                            Test.instanceCount = i19;
                            i19 >>>= Test.sFld;
                        }
                        break;
                    case 106:
                        bArr[i] = b2;
                        break;
                    case 135:
                        i18 -= i17;
                        break;
                    case 107:
                        Test.instanceCount += (((i * f2) + i) - i19);
                    case 100:
                        Test.dFld = i17;
                        break;
                    case 120:
                        if (b2) continue;
                        break;
                    case 117:
                        i19 -= -39739;
                        break;
                    case 134:
                        i1 += (int)Test.dFld;
                    }
                } else {
                    lArrFld[i][i] *= 84;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
