package tests.javafuzzer1374;
import utils.FuzzerUtils;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 30 19:09:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-249L;
    public float fFld=0.994F;
    public static int iFld=-4;
    public static short sFld=10489;
    public static float fFld1=-25.201F;
    public double dFld=2.90869;
    public static volatile short sArrFld[]=new short[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)17219);
        FuzzerUtils.init(Test.lArrFld, -3738605772L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        float f=1.988F, fArr[]=new float[N];
        int i5=0, i6=14, i7=49550;
        byte by=114;

        FuzzerUtils.init(fArr, -1.980F);

        Test.iFld >>= Test.iFld;
        Test.instanceCount = (long)f;
        Test.instanceCount += (long)-1.71F;
        try {
            for (i5 = 7; i5 < (294 + 400); i5++) {
                Test.instanceCount = 679676274626213549L;
                Test.sFld <<= (short)Test.iFld;
                Test.instanceCount /= (Test.instanceCount | 1);
                f = by;
                i7 = 1;
                do {
                    Test.iFld *= (int)f;
                    fArr[i7 - 1] -= Test.instanceCount;
                    Test.iFld += i7;
                    Test.iFld <<= Test.iFld;
                    f *= i7;
                } while (++i7 < 4);
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.instanceCount = 6L;
        }
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + by + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i3) {

        int i4=-116, i8=-132, i9=-54389, i10=25327, i11=32377, i12=39811, iArr[]=new int[N];
        double d=3.37429;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -144);
        FuzzerUtils.init(lArr, 6255515360518922173L);

        i4 = 329;
        do {
            Test.instanceCount = lMeth();
            Test.iFld += (((i4 * Test.iFld) + i3) - Test.iFld);
            Test.iFld = (int)d;
            i3 -= (int)Test.fFld1;
            d = Test.instanceCount;
            d *= -118;
        } while ((i4 -= 3) > 0);
        for (i8 = 2; i8 < 268; i8++) {
            i10 = 1;
            do {
                for (i11 = 1; i11 < 1; ++i11) {
                    iArr = iArr;
                    i3 += (int)d;
                    Test.sArrFld[i11 - 1] += (short)Test.iFld;
                    Test.sArrFld[i10 + 1] += (short)-91.21855;
                    lArr[i10 - 1] = 123;
                }
            } while (++i10 < 6);
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(int i1, int i2, long l) {

        int i13=-9, i14=-3, i15=-124, i16=11, i17=-11, i18=35, iArr1[]=new int[N];
        byte by1=-24;

        FuzzerUtils.init(iArr1, -230);

        vMeth(-215);
        for (i13 = 16; i13 < 388; ++i13) {
            Test.lArrFld = Test.lArrFld;
        }
        iArr1[(-45463 >>> 1) % N] = (int)l;
        for (i15 = 2; i15 < 187; i15++) {
            l *= i16;
            iArr1[i15] -= (int)dFld;
            by1 += (byte)i14;
            try {
                i1 = (iArr1[i15] / i1);
                iArr1[(i14 >>> 1) % N] = (15860 / i2);
                i14 = (i16 % iArr1[i15]);
            } catch (ArithmeticException a_e) {}
            i1 *= (int)7L;
            for (i17 = 1; i17 < 9; i17++) {
                iArr1[i17 + 1] *= (int)Test.instanceCount;
                i18 = (int)dFld;
                i18 += (i17 * i17);
                l <<= i17;
            }
        }
        long meth_res = i1 + i2 + l + i13 + i14 + i15 + i16 + by1 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=51499, i19=80, i20=-200, i21=64983, i22=162, i23=-13, i24=-61933, i25=-8113, iArr2[][]=new int[N][N];

        FuzzerUtils.init(iArr2, -65400);

        fFld -= i;
        i -= i;
        iMeth(Test.iFld, i, Test.instanceCount);
        for (i19 = 6; i19 < 273; ++i19) {
            Test.fFld1 += (((i19 * i20) + Test.iFld) - Test.iFld);
            Test.sFld += (short)Test.instanceCount;
            iArr2[i19][i19] = (int)Test.instanceCount;
            i20 = Test.iFld;
        }
        iArr2[(i20 >>> 1) % N][(-11898 >>> 1) % N] *= i19;
        Test.iFld += (int)Test.instanceCount;
        i21 = 1;
        while (++i21 < 142) {
            Test.instanceCount += (((i21 * i20) + Test.instanceCount) - i19);
            for (i22 = 9; i22 < 177; i22++) {
                i20 >>= i23;
                switch (((i22 % 5) * 5) + 109) {
                case 132:
                case 111:
                    iArr2[i21][i22 + 1] += i21;
                    Test.iFld = i19;
                    for (i24 = 1; i24 < 2; ++i24) {
                        boolean b=true;
                        b = b;
                        Test.instanceCount += (i24 - Test.instanceCount);
                        Test.instanceCount += i24;
                        iArr2[i21][i21 + 1] += Test.iFld;
                        switch (((i24 % 9) * 5) + 107) {
                        case 122:
                            i20 = Test.iFld;
                            i20 = (int)Test.instanceCount;
                            break;
                        case 108:
                            switch ((i22 % 4) + 64) {
                            case 64:
                            case 65:
                                i *= (int)Test.instanceCount;
                                i20 = (int)Test.instanceCount;
                                i23 = i21;
                                break;
                            case 66:
                                iArr2[i24][i21] = 77;
                                break;
                            case 67:
                                Test.instanceCount -= Test.instanceCount;
                            default:
                                i *= i22;
                            }
                            break;
                        case 125:
                            i = Test.iFld;
                        case 148:
                        case 135:
                            i25 *= i;
                        case 130:
                            i25 += (((i24 * Test.instanceCount) + i23) - Test.instanceCount);
                            break;
                        case 110:
                            i23 = (int)Test.instanceCount;
                        case 121:
                            i20 *= i;
                            break;
                        case 116:
                            dFld -= i20;
                            break;
                        }
                    }
                    break;
                case 112:
                    i += (i22 | i19);
                    break;
                case 131:
                    i20 += -31;
                    break;
                case 133:
                    Test.instanceCount += i;
                    break;
                }
            }
        }


    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
